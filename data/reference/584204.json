[
    {
        "link": "https://pytba.readthedocs.io",
        "document": "TeleBot is synchronous and asynchronous implementation of Telegram Bot API."
    },
    {
        "link": "https://pypi.org/project/pyTelegramBotAPI",
        "document": "A required part of this site couldn’t load. This may be due to a browser extension, network issues, or browser settings. Please check your connection, disable any ad blockers, or try using a different browser."
    },
    {
        "link": "https://pytba.readthedocs.io/_/downloads/en/latest/pdf",
        "document": ""
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    },
    {
        "link": "https://github.com/eternnoir/pyTelegramBotAPI/blob/master/README.md",
        "document": "A simple, but extensible Python implementation for the Telegram Bot API.\n• General API Documentation\n• General use of the API\n• Advanced use of the API\n• Controlling the amount of Threads used by TeleBot\n• F.A.Q.\n• How can I distinguish a User and a GroupChat in message.chat?\n\nThis API is tested with Python 3.9-3.13 and Pypy 3. There are two ways to install the library:\n\nIt is generally recommended to use the first option.\n\nWhile the API is production-ready, it is still under development and it has regular updates, do not forget to update it regularly by calling\n\nIt is presumed that you have obtained an API token with @BotFather. We will call this token . Furthermore, you have basic knowledge of the Python programming language and more importantly the Telegram Bot API.\n\nThe TeleBot class (defined in _init_.py) encapsulates all API calls in a single class. It provides functions such as ( , etc.) and several ways to listen for incoming messages.\n\nCreate a file called . Then, open the file and create an instance of the TeleBot class.\n\nNote: Make sure to actually replace TOKEN with your own API token.\n\nAfter that declaration, we need to register some so-called message handlers. Message handlers define filters which a message must pass. If a message passes the filter, the decorated function is called and the incoming message is passed as an argument.\n\nA function which is decorated by a message handler can have an arbitrary name, however, it must have only one parameter (the message).\n\nThis one echoes all incoming text messages back to the sender. It uses a lambda function to test a message. If the lambda returns True, the message is handled by the decorated function. Since we want all messages to be handled by this function, we simply always return True.\n\nNote: all handlers are tested in the order in which they were declared\n\nWe now have a basic bot which replies a static message to \"/start\" and \"/help\" commands and which echoes the rest of the sent messages. To start the bot, add the following to our source file:\n\nAlright, that's it! Our source file now looks like this:\n\nTo start the bot, simply open up a terminal and enter to run the bot! Test it by sending commands ('/start' and '/help') and arbitrary text messages.\n\nAll types are defined in types.py. They are all completely in line with the Telegram API's definition of the types, except for the Message's field, which is renamed to (because is a Python reserved token). Thus, attributes such as can be accessed directly with . Note that can be either an instance of or (see How can I distinguish a User and a GroupChat in message.chat?).\n\nThe Message object also has a attribute, which defines the type of the Message. can be one of the following strings: , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , .\n\nYou can use some types in one function. Example:\n\nAll API methods are located in the TeleBot class. They are renamed to follow common Python naming conventions. E.g. is renamed to and to .\n\nOutlined below are some general use cases of the API.\n\nA message handler is a function that is decorated with the decorator of a TeleBot instance. Message handlers consist of one or multiple filters. Each filter must return True for a certain message in order for a message handler to become eligible to handle that message. A message handler is declared in the following way (provided is an instance of TeleBot):\n\nis not bound to any restrictions. Any function name is permitted with message handlers. The function must accept at most one argument, which will be the message that the function must handle. is a list of keyword arguments. A filter is declared in the following manner: . One handler may have multiple filters. TeleBot supports the following filters:\n\nHere are some examples of using the filters and message handlers:\n\nImportant: all handlers are tested in the order in which they were declared\n\nHandle updates of a the bot's member status in a chat\n\nHandle updates of a chat member's status in a chat Note: \"chat_member\" updates are not requested by default. If you want to allow all update types, set in / to\n\nNow, you can use inline_handler to get inline queries in telebot.\n\nUse chosen_inline_handler to get chosen_inline_result in telebot. Don't forget to add the /setinlinefeedback command for @Botfather.\n\nA middleware handler is a function that allows you to modify requests or the bot context as they pass through the Telegram to the bot. You can imagine middleware as a chain of logic connection handled before any other handlers are executed. Middleware processing is disabled by default, enable it by setting .\n\nThere are other examples using middleware handler in the examples/middleware directory.\n\nThere are class-based middlewares. Basic class-based middleware looks like this:\n\nClass-based middleware should have two functions: post and pre process. So, as you can see, class-based middlewares work before and after handler execution. For more, check out in examples\n\nAlso, you can use built-in custom filters. Or, you can create your own filter.\n\nAlso, we have examples on them. Check this links:\n\nYou can check some built-in filters in source code\n\nExample of filtering by id\n\nExample of filtering by text\n\nIf you want to add some built-in filter, you are welcome to add it in custom_filters.py file.\n\nHere is example of creating filter-class:\n\nAll functions of TeleBot take an optional argument. This argument must be an instance of , or , which are defined in types.py.\n\nThe last example yields this result:\n\nThis object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Attributes:\n\nHere's an Example: \n\n Here is the entity number or order of entity in a reply, for if incase there are multiple entities in the reply/message.\n\n returns a list of entities object. \n\n would give the type of the first entity\n\n Refer Bot Api for extra details\n\nSince version 5.0 of the Bot API, you have the possibility to run your own Local Bot API Server. pyTelegramBotAPI also supports this feature.\n\nImportant: Like described here, you have to log out your bot from the Telegram server before switching to your local API server. in pyTelegramBotAPI use\n\nNote: 4200 is an example port\n\nNew: There is an asynchronous implementation of telebot. To enable this behaviour, create an instance of AsyncTeleBot instead of TeleBot.\n\nNow, every function that calls the Telegram API is executed in a separate asynchronous task. Using AsyncTeleBot allows you to do the following:\n\nSee more in examples\n\nSometimes you must send messages that exceed 5000 characters. The Telegram API can not handle that many characters in one request, so we need to split the message in multiples. Here is how to do that using the API:\n\nOr you can use the new function to get more meaningful substrings:\n\nThe TeleBot constructor takes the following optional arguments:\n• threaded: True/False (default True). A flag to indicate whether TeleBot should execute message handlers on it's polling Thread.\n\nAs an alternative to the message handlers, one can also register a function as a listener to TeleBot.\n\nNOTICE: handlers won't disappear! Your message will be processed both by handlers and listeners. Also, it's impossible to predict which will work at first because of threading. If you use threaded=False, custom listeners will work earlier, after them handlers will be called. Example:\n\nWhen using webhooks telegram sends one Update per call, for processing it you should call process_new_messages([update.message]) when you recieve it.\n\nThere are some examples using webhooks in the examples/webhook_examples directory.\n\nYou can use the Telebot module logger to log debug info about Telebot. Use to get the logger of the TeleBot module. It is possible to add custom logging Handlers to the logger. Refer to the Python logging module page for more info.\n\nYou can use proxy for request. object will use by call proxies argument.\n\nIf you want to use socket5 proxy you need install dependency and make sure, that you have the latest version of , , , and .\n\nYou can disable or change the interaction with real Telegram server by using\n\nparameter. You can pass there your own function that will be called instead of requests.request.\n\nThen you can use API and proceed requests in your handler code.\n\nWe have a fully asynchronous version of TeleBot. This class is not controlled by threads. Asyncio tasks are created to execute all the stuff.\n\nAs you can see here, keywords are await and async.\n\nAsynchronous tasks depend on processor performance. Many asynchronous tasks can run parallelly, while thread tasks will block each other.\n\nAsyncTeleBot is asynchronous. It uses aiohttp instead of requests module.\n\nSee more examples in our examples folder\n\nBot instances that were idle for a long time might be rejected by the server when sending a message due to a timeout of the last used session. Add to your initialisation to force recreation after 5 minutes without any activity.\n\nJoin the News channel. Here we will post releases and updates.\n\nTemplate is a ready folder that contains architecture of basic project. Here are some examples of template:\n• SiteAlert bot (source) by ilteoood - Monitors websites and sends a notification on changes\n• Telegram LMGTFY_bot by GabrielRF - Let me Google that for you.\n• ComedoresUGRbot (source) by alejandrocq - Telegram bot to check the menu of Universidad de Granada dining hall.\n• DonantesMalagaBot - DonantesMalagaBot facilitates information to Malaga blood donors about the places where they can donate today or in the incoming days. It also records the date of the last donation so that it helps the donors to know when they can donate again. - by vfranch\n• DuttyBot by Dmytryi Striletskyi - Timetable for one university in Kiev.\n• wat-bridge by rmed - Send and receive messages to/from WhatsApp through Telegram\n• filmratingbot(source) by jcolladosp - Telegram bot using the Python API that gets films rating from IMDb and metacritic\n• RastreioBot (source) by GabrielRF - Bot used to track packages on the Brazilian Mail Service.\n• Spbu4UBot(link) by EeOneDown - Bot with timetables for SPbU students.\n• LearnIt(link) - A Telegram Bot created to help people to memorize other languages’ vocabulary.\n• VigoBusTelegramBot (GitHub) - Bot that provides buses coming to a certain stop and their remaining time for the city of Vigo (Galicia - Spain)\n• kaishnik-bot (source) by airatk - bot which shows all the necessary information to KNTRU-KAI students.\n• Robbie (source) by @FacuM - Support Telegram bot for developers and maintainers.\n• AsadovBot (source) by @DesExcile - Сatalog of poems by Eduard Asadov.\n• thesaurus_com_bot (source) by @LeoSvalov - words and synonyms from dictionary.com and thesaurus.com in the telegram.\n• InfoBot (source) by @irevenko - An all-round bot that displays some statistics (weather, time, crypto etc...)\n• Sporty (source) by @0xnu - Telegram bot for displaying the latest news, sports schedules and injury updates.\n• JoinGroup Silencer Bot (source) by @zeph1997 - A Telegram Bot to remove \"join group\" and \"removed from group\" notifications.\n• MyElizaPsychologistBot (source) by @Pablo-Davila - An implementation of the famous Eliza psychologist chatbot.\n• Frcstbot (source) by Mrsqd. A Telegram bot that will always be happy to show you the weather forecast.\n• MineGramBot by ModischFabrications. This bot can start, stop and monitor a minecraft server.\n• Tabletop DiceBot by dexpiper. This bot can roll multiple dices for RPG-like games, add positive and negative modifiers and show short descriptions to the rolls.\n• BarnameKon by Anvaari. This Bot make \"Add to google calendar\" link for your events. It give information about event and return link. It work for Jalali calendar and in Tehran Time. Source code\n• Translator bot by Areeg Fahad. This bot can be used to translate texts.\n• Digital Cryptocurrency bot by Areeg Fahad. With this bot, you can now monitor the prices of more than 12 digital Cryptocurrency.\n• Anti-Tracking Bot by Leon Heess (source). Send any link, and the bot tries its best to remove all tracking from the link you sent.\n• Developer Bot by Vishal Singh (source code) This telegram bot can do tasks like GitHub search & clone,provide c++ learning resources ,Stackoverflow search, Codeforces(profile visualizer,random problems)\n• oneIPO bot by Aadithya & Amol Soans This Telegram bot provides live updates , data and documents on current and upcoming IPOs(Initial Public Offerings)\n• CoronaGraphsBot (source) by TrevorWinstral - Gets live COVID Country data, plots it, and briefs the user\n• ETHLectureBot (source) by TrevorWinstral - Notifies ETH students when their lectures have been uploaded\n• Vlun Finder Bot by Resinprotein2333. This bot can help you to find The information of CVE vulnerabilities.\n• ETHGasFeeTrackerBot (Source by DevAdvik - Get Live Ethereum Gas Fees in GWEI\n• Google Sheet Bot by JoachimStanislaus. This bot can help you to track your expenses by uploading your bot entries to your google sheet.\n• GrandQuiz Bot by Carlosma7. This bot is a trivia game that allows you to play with people from different ages. This project addresses the use of a system through chatbots to carry out a social and intergenerational game as an alternative to traditional game development.\n• Diccionario de la RAE (source) This bot lets you find difinitions of words in Spanish using RAE's dictionary. It features direct message and inline search.\n• remoteTelegramShell by EnriqueMoran. Control your LinuxOS computer through Telegram.\n• Commerce Telegram Bot. Make purchases of items in a store with an Admin panel for data control and notifications.\n• Pyfram-telegram-bot Query wolframalpha.com and make use of its API through Telegram.\n• TranslateThisVideoBot This Bot can understand spoken text in videos and translate it to English\n• Zyprexa (source) Zyprexa can solve, help you solve any mathematical problem you encounter and convert your regular mathematical expressions into beautiful imagery using LaTeX.\n• Bincode-telegram-bot by tusharhero - Makes bincodes from text provides and also converts them back to text.\n• Gugumoe-bot (source) by 咕谷酱 GuXiaoJiang is a multi-functional robot, such as OSU game information query, IP test, animation screenshot search and other functions.\n• Feedback-bot A feedback bot for user-admin communication. Made on AsyncTeleBot, using template.\n• TeleServ by ablakely This is a Telegram to IRC bridge which links as an IRC server and makes Telegram users appear as native IRC users.\n• Simple Store Bot by Anton Glyzin This is a simple telegram-store with an admin panel. Designed according to a template.\n• Media Rating Bot (source)by CommanderCRM. This bot aggregates media (movies, TV series, etc.) ratings from IMDb, Rotten Tomatoes, Metacritic, TheMovieDB, FilmAffinity and also provides number of votes of said media on IMDb.\n• Spot Seek Bot (source) by Arashnm80. This is a free & open source telegram bot for downloading tracks, albums or playlists from spotify.\n• CalendarIT Bot (source)by CodeByZen. A simple, but extensible Python Telegram bot, can post acquainted with what is happening today, tomorrow or what happened 20 years ago to channel.\n• DownloadMusicBOT by Francisco Griman - It is a simple bot that downloads audio from YouTube videos on Telegram.\n• AwesomeChatGPTBot - Simple ChatGTP-3.5 bot. It is FREE and can remember chat history for a while With pre-defined roles!\n• QR-Code For You Bot (source) by Arashnm80. Telegram qrcode generator bot created with pyhton and telebot.\n• Best Instagram Downloader Bot (source) by Arashnm80. Free and open source telegram bot to download posts and reels from Instagram.\n• DrinkGenius-Bot (source) by Povladarchik. Your personal assistant in the world of cocktails.\n• Pytgpt-Bot (source) by Smartwa. AI powered bot for chatting, text-to-image and text-to-speech conversions.\n\nWant to have your bot listed here? Just make a pull request. Only bots with public source code are accepted."
    },
    {
        "link": "https://realpython.com/lego-model-view-controller-python",
        "document": "If you’re curious about web development, then you’ve likely encountered the abbreviation MVC, which stands for Model-View-Controller. You may know that it’s a common design pattern that’s fundamental to many Python web frameworks and even desktop applications.\n\nBut what exactly does it mean? If you’ve had a hard time wrapping your head around the concept, then keep on reading.\n• Learn what models, views, and controllers are conceptually\n\nMaybe you built things with Lego as a kid, or maybe you’re still a Lego-aficionado today. But even if you’ve never pieced two Lego blocks together, keep on reading because the analogy might still be a good building block for your understanding.\n\nImagine that you’re ten years old and sitting on your family room floor. In front of you is a big bucket of Lego, or similar modular building blocks. There are blocks of all different shapes and sizes:\n• 🟦🟦🟦 Some are blue, tall, and long.\n• 🟥 Some are red and cube-shaped.\n• 🟨🟨 Some are yellow, big, and wide. With all of these different Lego pieces, there’s no telling what you could build! Just as your mind is filling with the endless possibilities, you hear something coming from the direction of the couch. It’s your older brother, voicing a specific request. He’s saying, “Hey! Build me a spaceship!” “Alright,” you think, “that could actually be pretty cool.” A spaceship it is! So you get to work. You start pulling out the Lego blocks that you think you’re going to need. Some big, some small. Different colors for the outside of the spaceship, different colors for the engines. Now that you have all of your building blocks in place, it’s time to assemble the spaceship. And after a few hours of hard work, you now have in front of you—a spaceship: You run to find your brother and show him the finished product. “Wow, nice work!”, he says. Then he quietly adds: Huh, I just asked for that a few hours ago, I didn’t have to do a thing, and here it is. I wish everything was that easy. What if I told you that building a web application using the MVC pattern is exactly like building something with Lego blocks? In the case of the Lego spaceship, it was your brother who made a request and asked you to build something. In the case of a web app, it’s a user entering a URL and requesting to view a certain page. When you built the Lego spaceship for your brother, you were the controller. In a web app, the controller is the code that you write. The controller is responsible for understanding the request and taking actions based on it. It’s the controller that gathers all of the necessary building blocks and organizes them appropriately. The different types of Lego blocks are the models. You have different sizes and shapes, and you grab the ones that you need to build the spaceship. In a web app, models help the controller retrieve all of the information needed from the database to make the products. Once the controller uses the models to retrieve the necessary items, everything needed is in place to assemble the final product. In the Lego example, the spaceship is the view. It’s the final product that your brother—the person who made the request—gets to see. In a web application, the view is the page that the user sees in their browser.\n\nYou’ve built a spaceship, impressed your brother, and connected the process to building web applications using the MVC pattern. Here’s a quick recap that you can keep handy to help you remember how this story relates back to web development.\n• Your brother makes the request that you build a spaceship.\n• You retrieve and organize all of the Lego blocks that you need to construct the spaceship.\n• You use the blocks to build the spaceship and present the finished spaceship to your brother. These are generic steps. You can repeat them to construct Lego builds of many different shapes and colors. With this gently watercolored image etched into your brain, you can now revisit the web app version of the process to compare them.\n• The controller uses the models to retrieve all of the necessary data, organizes it, and sends it off to the view.\n• The view uses the data it receives to render the final webpage and presents it to the the user in their browser. Again, these are generic steps that your web app does many times over to serve all sorts of information and pages to your users: If you mentally store this second image next to the first one, then you’ll have a complete analogy that you can refer back to whenever you want to remember what the MVC pattern is all about. Nice work! Now that you’ve painted this analogy into your memory, you’ve built a solid foundation for understanding the Model-View-Controller pattern. Next, you can go a little deeper and consider what it all means from a more technical perspective, focusing on Python web development.\n\nWhen you type a URL in your browser to access a web application, you’re making a request to view a certain page within the application. But how does the application know which page to render and display? When building a web app, you define what are known as routes. Essentially, routes are URL patterns associated with different pages. So when someone enters a URL, the application tries to match that URL to one of the predefined routes behind the scenes. So, there are really four major components at play here: controllers, models, views, and routes. Each route is associated with a controller. More specifically, it’s associated with a certain function within a controller, known as a controller action. So when you enter a URL, the application attempts to find a matching route. If it’s successful, then it calls that route’s associated controller action. You can start learning how the Model-View-Controller pattern works in Python web development by considering a basic Flask route as an example: Here, you establish that the base route ( ) is associated with the view function, which conceptually is a controller action. When someone requests that base route, then your web app will call . Within the controller action, you typically do two main things:\n• You retrieve all of the necessary data from a database using the models.\n• You pass that data to a view, which renders the requested page. You generally add the data that you retrieve via the models to a data structure, like a list or dictionary. Then, you send that data structure to the view. Go ahead and expand your Flask example app with these functionalities: \"\"\"Searches the database for entries, then displays them.\"\"\" In your updated view function, you fetch data from the database in lines 6 to 8. The function that you see in this code snippet is a placeholder for a database connector function. You’ll need to write the code for this function so that it works with the database that you use—for example, a Python SQL library. Note: The code in these examples conceptually explains the process of a Flask app, but it doesn’t quite work like this in isolation. If you download the materials repo, then you’ll get a fully functioning Flask example app that uses the same code, but also adds the necessary Flask boilerplate code and a script to construct a SQLite database that you can interact with. In line 8, you end up with a list, which you assign to the variable . Then in line 9, you send that list to the template and make the data accessible through a variable that you also call . Finally, the file represents your view. Because you used the controller action to send the data structure to the template file, you can now access the data in there. You can then work with the information contained within the data structure to render the HTML content of the page that the user ultimately sees in their browser. In your Flask app example, you can loop through and display each one using the Jinja syntax: ... {% for entry in entries %} {{ entry[1] }}: {{ entry[2] }} {% else %} No entries yet. Add some! {% endfor %} ... If you have entries in your database, then your user will get to see all the entries listed one after another. You also added an optional clause in line 9, which renders a descriptive text message if there aren’t any entries yet.\n\nNow you’ve done a second lap around the concepts of the Model-View-Controller pattern, this time using Python’s Flask web framework as a guide rail. Here’s a more detailed, technical summary of the MVC request process:\n• The application matches the URL to a predefined route.\n• The application calls the controller action associated with the route.\n• The controller action uses the models to retrieve all of the necessary data from a database, places the data in a data structure, and loads a view, passing along the data structure.\n• The view accesses the data structure and uses it to render the requested page, which the application then presents to the user in their browser. It’s not quite the same as building a Lego spaceship for your brother, but maybe you can see the conceptual similarities in the two processes. If you want to play with the example Flask app and explore the additional code that’s necessary to run it, then you can download the code here: Get Your Code: Click here to download an example Flask app that will help you understand MVC in Python web apps."
    },
    {
        "link": "https://stackoverflow.com/questions/62355468/design-pattern-for-telegram-bot",
        "document": "I am currently working on a telegram bot that is going to have many functions and is going to be quite complicated. I currently finished one feature of the bot and the code is already unmanageable.\n\nFor example, the conversation handler currently looks like this:\n\nWhere I have to keeping adding more callback data and more states for the bot as the bot gets more and more complicated.\n\nI also have to keep adding more functions to the same .py file to handle use as callback functions:\n\nIs there a better way to manage my code? Or a recommended design pattern that I can use to have a easier time managing my project?"
    },
    {
        "link": "https://nazmul-ahsan.medium.com/how-to-organize-multi-frame-tkinter-application-with-mvc-pattern-79247efbb02b",
        "document": "I don’t have much experience of working with TKinter or making Desktop GUI (Graphical User Interface) applications in general. Previously I made one or two desktop GUI application but they were pretty simple. They were mainly for sharing my Python scripts with my non-coder friends & family, with one or two buttons to run the script and maybe a few input options. A single file would contain the whole GUI code. But recently I planned to make a moderately complex GUI application. I was looking for some idea of how to organize a complex TKinter project. To my surprise, I found very little resources online that talks about it. Most Tkinter tutorial you will find, shows the a basic application written in a single file and the app itself has only one page. Whenever it needs to show a new page, they show it in a new window, instead of changing the view of the current window. But this is not how real life apps work. Apps can have multiple pages, for example, a sign in page, home page, settings page, etc. You won’t keep popping up windows for each page.\n\nAfter doing some research online, some trial and error, gathering inspiration from different ideas, I finalize a structure that I was happy with. In this article, I am sharing my implementation.\n\nLet’s talk about the MVC pattern first. MVC pattern separates the application logic intro three parts — Model, View and Controller. I didn’t find any strict way people follow this pattern. I found slight variations on different implementations. But the main concept is, the View part is only concerned about the representation of the data, but not the modification or updates. Whenever the user does some interaction, the Controller handles that event and updates the Model. Model carries the application data and the business logic. Whenever the Model data changes, the View gets updated.\n\nIn all implementations, the model is completely independent from the other two parts. It has no idea about the controller or the view. The controller has dependency on both the view and the model. The view may have dependency on the model (i.e. it needs to know the model to know how to represent in to the user), or we can also make the view completely independent of the model. In the later case, the controller is the bridge that knows how to translate the model to the view, and how to translate the user interaction back to the model.\n\nIn my implementation, both the model and the view are completely independent. The controller needs to know about the model and the view. The model is observable, meaning, you can add event listeners to the model. Whenever any data changes, it will trigger the corresponding event so that any part of the application that depends on that data can react to the changes. My controller observes the data changes. So whenever the model gets updated, the controller can update the view. Also when user interacts in the interface, the controller handles that event and updates the model and the view accordingly. Below is a diagram of the application.\n\nWe are going to build a project that has three pages or views — a sign in page, a sign up page and a home page. Each page has corresponding controllers. We will have one Auth model. To organize the business logic, like network calls, or database crud operations, we can have a service layer that the model communicates with but that is out of the scope of this article so I will be skipping it. The project structure looks like this,\n\nFirst we want to define the base class of an observable model (models that can register event listeners). In the file, we define a class named .\n\nIn the function, we initialize an empty dictionary . This is going to store all the listeners.\n\nWe add a method that takes an event name and a callback function and stores it in the dictionary. The event name is used as the dictionary key and each key stores a list of callback functions for that event. This method returns a function which can be called to remove the listener.\n\nWe add another method which takes the event name as the parameter, checks if any callback function is registered for that event, and if yes, calls all the callback functions registered for that event. The callback functions receive the model instance as the only argument.\n\nNow we can define our model. It has a and a method. In real scenario, they would perform some business logic to do actual authentication, but for simplicity we are just changing the data and skipping business logic.\n\nIn the file, we define a class. Here we are only initializing the Auth model as it is the only model in our app. If we had other models, they would get initialized here too.\n\nI am going to assume you are familiar with the basic concepts of Tkinter and skip Tkinter specific explanations. As you know, we need a root or master window for our GUI application. So we are going to define the root window first in the file. We will define a class that is going to inherit the class imported from .\n\nNext we are going to define each of our views. Each view class will inherit the class from .\n\nHere is the defined in file.\n\nAnd the in ,\n\nNotice that we only defined the views, but we didn’t define any methods as the button commands. Our view is completely ignorant of the model and the controller. It has no responsibility of what to do when user clicks a button or when any data changes. We will see in the controller section how to handle those.\n\nNow comes the interesting concept. How do we render the views and how do we switch between them? Let’s handle that in the file in the folder.\n\nIn the method, we initialize a dictionary named which is going to store all the frames (pages) of our application. We defined a helper method to initialize and store the frames. The way we place the frames in the root window is we stack them over one another. the is going to ensure that each frame is going to cover the whole root window, so that elements from other frames below cannot be seen.\n\nThe method is going to handle the transition between pages. When we pass the frame name to this function, it is going to bring forward that frame by calling the method.\n\nYou might be concerned about this approach where we are having all the pages generated but some pages may not be ever needed as user may visit them very rarely, for example, the signup page. If your app has many frames and you think that is going to cause performance issue, you can modify this implementation. For example, before switching to a new view, the method will destroy the current frame by calling the method, and generate the frame that is going to be shown. We will need to store the frame classes instead of the frame instances in this case so that we can generate the frames on demand. Here is a modified implementation,\n\nThe controller depends on how the model and the view is implemented. I am going to explain the controller assuming we went with the first approach here (generated all the frames beforehand). If you wish to go with the second approach, you may need more modification on the and the classes which I am not going to discuss.\n\nLet’s now look at the controllers, starting with the home controller. Notice that our home view is very simple. It has a greeting message for the user and a button to logout. So, what our controller needs to control in this view, is the greeting message and the logout button. This is the code in the controller file,\n\nTo initialize the controller we need an instance of the class and an instance of the class. We defined a method that binds the method as the command for the button in the view. We also defined another method that updates the greeting message.\n\nOur other two controllers are also similar. Here is the controller file,\n\nAnd here is the controller file,\n\nNow, let’s see what the controller file looks like,\n\nHere, in the method, we have initialized the controllers. We have also added an event listener for the “auth_changed” event. The listener function will switch the view to “signin” view if the user get logged out. Similarly, if the user get logged in, it will change the view to “home”. We also have a method to start the GUI. Controller controls everything so it makes sense that the controller starts the view . Also, if we need to perform any operation before launching the GUI, for example, check the saved auth state, we can add that logic here. I commented out an example function call to give you an idea. And based on the auth state, I am selecting the view to show to the user when the GUI starts. Then finally, launching the GUI by calling the method of the view object.\n\nNow it’s time to combine our model, view and controller in the app’s file. This is what the root file looks like,\n\nI have the whole project uploaded in this Github repo. There I also have the type annotation which I have omitted here to keep the examples more focused on the logic.\n\nIf you have any suggestion on how to improve this, let me know in the comment!"
    },
    {
        "link": "https://medium.com/@owuordove/hands-on-guide-to-model-view-controller-mvc-architecture-in-python-ec81b2b9330d",
        "document": "Building scalable and maintainable software requires a robust architectural pattern, and Model-View-Controller (MVC) stands out as a timeless choice. In this hands-on guide, we’ll explore the MVC architecture in Python, unraveling its principles and demonstrating how to implement a simple MVC pattern in your projects.\n\nWhat is MVC in Software Design?\n\nMVC, which stands for Model-View-Controller, is a powerful software design pattern that effectively divides an application into three interconnected components. This approach not only enhances the application’s structure but also makes it more search engine-friendly. Dive into the world of MVC to optimize your software design for improved search engine visibility and user experience!MVC is a software design pattern that separates an application into three interconnected components:\n• Represents the data and business logic of the application.\n• Manages the data, responds to queries, and updates the Controller about any changes.\n• Presents the data to the user and handles user interface interactions.\n• Receives input from users and sends it to the Controller for processing.\n• Acts as an intermediary between the Model and View.\n• Receives user input from the View, processes it (updates the Model if necessary), and updates the View.\n\nThe separation of concerns provided by MVC promotes modularity, making it easier to develop, test, and maintain software.\n\nLet’s create a simple Python application to manage a list of tasks using the MVC architecture.\n\nStep 4: Putting it All Together\n\nRun , and you'll see the tasks displayed in the console. This simple example illustrates the MVC architecture in action.\n• The View handles the presentation and user interface.\n• The Controller manages user input and updates the Model and View accordingly.\n\nEach component (Model, View, and Controller) can be developed and tested independently.\n\nChanges to one component have minimal impact on the others.\n\nSuitable for both small and large applications.\n\nMastering the Model-View-Controller architecture in Python opens the door to creating scalable, maintainable, and organized software. By understanding the roles of the Model, View, and Controller components, you can apply MVC principles to diverse projects, from simple task management applications to complex web applications. Dive into MVC, enhance your software development skills, and embrace a pattern that has withstood the test of time. Happy coding!"
    },
    {
        "link": "https://stackoverflow.com/questions/406478/best-practices-for-implementing-models-in-the-mvc-pattern",
        "document": "I'll second Giraffe by saying the use of included collections is almost always better than trying to write your own.\n\nBut I think your original question could be reworded a little differently... \"Do I need a separate class to manage users other than the User class?\n\nI use a static factory class to build all of my users and save them back to the database again. I'm of the opinion that your model classes need to be as dumbed down as possible and that you use heavy controller classes to do all of the work to the model classes."
    }
]