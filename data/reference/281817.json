[
    {
        "link": "https://bioconductor.org/packages/release/data/annotation/html/org.Hs.eg.db.html",
        "document": "This is the released version of org.Hs.eg.db; for the devel version, see org.Hs.eg.db.\n\nTo install this package, start R (version \"4.4\") and enter:\n\nFor older versions of R, please refer to the appropriate Bioconductor release.\n\nFollow Installation instructions to use this package in your R session."
    },
    {
        "link": "https://bioconductor.org/packages/release/data/annotation/html/org.Mm.eg.db.html",
        "document": "This is the released version of org.Mm.eg.db; for the devel version, see org.Mm.eg.db.\n\nTo install this package, start R (version \"4.4\") and enter:\n\nFor older versions of R, please refer to the appropriate Bioconductor release.\n\nFollow Installation instructions to use this package in your R session."
    },
    {
        "link": "http://yulab-smu.top/biomedical-knowledge-mining-book/clusterprofiler-go.html",
        "document": "GO comprises three orthogonal ontologies, i.e. molecular function (MF), biological process (BP), and cellular component (CC).\n\nGO analyses ( , and ) support organisms that have an object available (see also session 2.2). If a user has GO annotation data (in a format with the first column as gene ID and the second column as GO ID), they can use the and functions to perform an over-representation test and gene set enrichment analysis. If the genes are annotated by direction annotation, they should also be annotated by their ancestor GO nodes (indirect annotation). If a user only has direct annotation, they can pass their annotation to the function, which will infer indirect annotation and generate a that is suitable for both and .\n\nIn clusterProfiler, the function is designed for gene classification based on GO distribution at a specific level. Here we use the dataset provided by DOSE. The parameter is a vector of gene IDs (can be any ID type that is supported by the corresponding , see also session 16.1). If is set to , the input gene IDs will be converted to gene symbols.\n\nAny gene ID type that is supported in can be directly used in GO analyses. Users need to specify the parameter to specify the input gene ID type. Gene IDs can be mapped to gene Symbols by using the parameter or function.\n\nThe clusterProfiler package provides the function for gene set enrichment analysis using gene ontology. The format of input data, , was documented in the FAQ. Beware that only gene Set size in will be tested.\n\nBoth the and functions require an object as the background annotation. For organisms that don’t have provided by , users can query one (if available) online via AnnotationHub. If there is no available, users can obtain GO annotation from other sources, e.g. from biomaRt or Blast2GO. Then the or functions can be used to perform GO analysis for these organisms, similar to the examples using wikiPathways and MSigDB. Another solution is to create an on your own using AnnotationForge package.\n\nGO semantic similarity can be calculated by GOSemSim (Yu et al. 2010). We can use it to cluster genes/proteins into different clusters based on their functional similarity and can also use it to measure the similarities among GO terms to reduce the redundancy of GO enrichment results."
    },
    {
        "link": "https://jokergoo.github.io/GSEAtraining/articles/topic1_01_GO.html",
        "document": "To obtain GO gene sets, we need to use two packages: GO.db and org.*.db packages.\n\nWe first load the package.\n\nBefore we introduce the GO.db package, we need to know that the GO.db package is built on top of the low-level infrastructure package AnnotationDbi. Thus, almost all Bioconductor “official data packages” inhert the same interface for querying data. Two important points:\n• There is a database object which has the same name as the package name.\n• They all implement the interface. E.g. for GO.db, the object contains a connection to the internal SQLite database object. ## Please see: help('select') for usage information can be thought as a huge table, where can be used to extract records from certain columns under certain constraits. is a relatively simple database. The typical use is as: It can be read as “select records in the ONTOLOGY and TERM columns of the GO.db table where GOID is GO:0000001 or GO:0000002”. The valid columns names can be obtained by . But note for GO.db, there are already objects generated for retrieving GO data more easily. It is unlikely in practice to directly use .\n\nThe hierarchical relations of GO terms GO.db provides variables that contain relations between GO terms. Taking biological process (BP) namespace as an example, there are the following four variables (similar for other two namespaces, but with and prefix). and contain parent-child relations. contains all offspring terms of GO terms (i.e., all downstream terms of a term in the GO tree) and contains all ancestor terms of a GO term (i.e., all upstream terms of a term). The information in the four variables are actually redudant, e.g., all the other three objects can be constructed from . However, these pre-computated objects will save time in downstream analysis because traversing the GO tree is time-consuming. The four variables are in the same format (objects of the class). Taking as an example, we can convert it to a simpler format by: is also suggested by GO.db in its documentations. is a simple list of vectors where each vector are child terms of a specific GO term, e.g., has a child term . The element vectors in are also named and the names represent the relation of the child term to the parent term. When the element vector has a value , e.g. , this means the GO term is a leaf in the GO tree, and it has no child term. Unfortunately, the first two columns in have the same name. A good idea is to add meaningful column names to it. Please note, the previous column names are only valid for . If it is from one of the three objects, readers please inspect the output to determine proper column names for it. E.g. you should assign to . With , we can calculate the fraction of different relations of GO terms. We can look at the distribution of the numbers of GO terms in each object.\n• Number of child terms. The following plot shows it follows a power-law distribution (majority of GO terms have very few child terms).\n• Number of parent terms. The term “GO:0008150” (biological process) is removed from the analysis because it is the top node in BP namespace and it has no parent term. and contain “local/direct” relations between GO terms, and contain “local + distal” relations between GO terms. We can compare child terms and all offspring terms of “GO:0000002”: Constructing from needs a recursive processing and it takes time:\n\nOnly we only see the GO IDs, the object can be used to get the names and long descriptions of GO terms. ## TERM map for GO (object of class \"GOTermsAnnDbBimap\") Similarly, you can use or to format this object: There are the following three types of useful information for each GO Term: , and can be directly applied to : ## \"The distribution of mitochondria, including the mitochondrial genome, into daughter cells after mitosis or meiosis, mediated by interactions between mitochondria and the cytoskeleton.\" ## \"The maintenance of the structure and integrity of the mitochondrial genome; includes replication and segregation of the mitochondrial chromosome.\" ## \"Enables the transfer of zinc ions (Zn2+) from one side of a membrane to the other, probably powered by proton motive force. In high-affinity transport the transporter is able to bind the solute even if it is only present at very low concentrations.\" ## \"Enables the transfer of a solute or solutes from one side of a membrane to the other according to the reaction: Zn2+ = Zn2+, probably powered by proton motive force. In low-affinity transport the transporter is able to bind the solute only if it is present at very high concentrations.\" ## \"Catalysis of the transfer of a mannose residue to an oligosaccharide, forming an alpha-(1->6) linkage.\" Moreover, you can get subset the object: ## TERM submap for GO (object of class \"GOTermsAnnDbBimap\") With , and , it is convinient to add additional information of GO terms: ## \"The distribution of mitochondria, including the mitochondrial genome, into daughter cells after mitosis or meiosis, mediated by interactions between mitochondria and the cytoskeleton.\" ## \"The maintenance of the structure and integrity of the mitochondrial genome; includes replication and segregation of the mitochondrial chromosome.\" ## \"Enables the transfer of zinc ions (Zn2+) from one side of a membrane to the other, probably powered by proton motive force. In high-affinity transport the transporter is able to bind the solute even if it is only present at very low concentrations.\""
    },
    {
        "link": "http://bioconductor.riken.jp/packages/3.4/bioc/vignettes/GOFunction/inst/doc/GOFunction.pdf",
        "document": ""
    },
    {
        "link": "http://yulab-smu.top/biomedical-knowledge-mining-book/clusterprofiler-go.html",
        "document": "GO comprises three orthogonal ontologies, i.e. molecular function (MF), biological process (BP), and cellular component (CC).\n\nGO analyses ( , and ) support organisms that have an object available (see also session 2.2). If a user has GO annotation data (in a format with the first column as gene ID and the second column as GO ID), they can use the and functions to perform an over-representation test and gene set enrichment analysis. If the genes are annotated by direction annotation, they should also be annotated by their ancestor GO nodes (indirect annotation). If a user only has direct annotation, they can pass their annotation to the function, which will infer indirect annotation and generate a that is suitable for both and .\n\nIn clusterProfiler, the function is designed for gene classification based on GO distribution at a specific level. Here we use the dataset provided by DOSE. The parameter is a vector of gene IDs (can be any ID type that is supported by the corresponding , see also session 16.1). If is set to , the input gene IDs will be converted to gene symbols.\n\nAny gene ID type that is supported in can be directly used in GO analyses. Users need to specify the parameter to specify the input gene ID type. Gene IDs can be mapped to gene Symbols by using the parameter or function.\n\nThe clusterProfiler package provides the function for gene set enrichment analysis using gene ontology. The format of input data, , was documented in the FAQ. Beware that only gene Set size in will be tested.\n\nBoth the and functions require an object as the background annotation. For organisms that don’t have provided by , users can query one (if available) online via AnnotationHub. If there is no available, users can obtain GO annotation from other sources, e.g. from biomaRt or Blast2GO. Then the or functions can be used to perform GO analysis for these organisms, similar to the examples using wikiPathways and MSigDB. Another solution is to create an on your own using AnnotationForge package.\n\nGO semantic similarity can be calculated by GOSemSim (Yu et al. 2010). We can use it to cluster genes/proteins into different clusters based on their functional similarity and can also use it to measure the similarities among GO terms to reduce the redundancy of GO enrichment results."
    },
    {
        "link": "https://learn.gencore.bio.nyu.edu/rna-seq-analysis/gene-set-enrichment-analysis",
        "document": "Gene Set Enrichment Analysis (GSEA) is a computational method that determines whether a pre-defined set of genes (ex: those beloging to a specific GO term or KEGG pathway) shows statistically significant, concordant differences between two biological states. This R Notebook describes the implementation of GSEA using the clusterProfiler package in R. For more information please see the full documentation here: https://bioconductor.org/packages/release/bioc/vignettes/clusterProfiler/inst/doc/clusterProfiler.html Follow along interactively with the R Markdown Notebook:\n\n https://github.com/gencorefacility/r-notebooks/blob/master/gsea.Rmd\n\nCSV file containing a list of gene names and log2 fold change values. This data is typically produced by differential expression analysis tool such as DESeq 2. Download sample data here. The sample data is from D melanogaster, so install and load the annotation “org.Dm.eg.db” below. See all annotations available here: http://bioconductor.org/packages/release/BiocViews.html#___OrgDb (there are 19 presently available).\n\n# reading in data from deseq2 df = read.csv(\"drosphila_example_de.csv\", header=TRUE) # we want the log2 fold change original_gene_list <- df$log2FoldChange # name the vector names(original_gene_list) <- df$X # omit any NA values gene_list<-na.omit(original_gene_list) # sort the list in decreasing order (required for clusterProfiler) gene_list = sort(gene_list, decreasing = TRUE) keyType This is the source of the annotation (gene ids). The options vary for each annotation. In the example of org.Dm.eg.db, the options are: Check which options are available with the command, for example . ont one of “BP”, “MF”, “CC” or “ALL”\n\n nPerm the higher the number of permutations you set, the more accurate your result will, but the longer the analysis will take.\n\n minGSSize minimum number of genes in set (gene sets with lower than this many genes in your dataset will be ignored).\n\n maxGSSize maximum number of genes in set (gene sets with greater than this many genes in your dataset will be ignored).\n\n pvalueCutoff pvalue Cutoff.\n\n pAdjustMethod one of “holm”, “hochberg”, “hommel”, “bonferroni”, “BH”, “BY”, “fdr”, “none”\n\nPlot of the Running Enrichment Score (green line) for a gene set as the analysis walks down the ranked gene list, including the location of the maximum enrichment score (the red line). The black lines in the Running Enrichment Score show where the members of the gene set appear in the ranked list of genes, indicating the leading edge subset. The Ranked list metric shows the value of the ranking metric (log2 fold change) as you move down the list of ranked genes. The ranking metric measures a gene’s correlation with a phenotype. Params:\n\n Gene Set Integer. Corresponds to gene set in the gse object. The first gene set is 1, second gene set is 2, etc. # Use the `Gene Set` param for the index in the title, and as the value for geneSetId gseaplot(gse, by = \"all\", title = gse$Description[1], geneSetID = 1)\n\nFor KEGG pathway enrichment using the function, we need to convert id types. We can use the function for this (included in clusterProfiler). It is normal for this call to produce some messages / warnings. In the function, the param should be the same as from the function above (the annotation source). This param is used again in the next two steps: creating and . in the function has to be one of the available options from and must map to one of ‘kegg’, ‘ncbi-geneid’, ‘ncib-proteinid’ or ‘uniprot’ because only accepts one of these 4 options as it’s parameter. In the case of org.Dm.eg.db, none of those 4 types are available, but ‘ENTREZID’ are the same as ncbi-geneid for org.Dm.eg.db so we use this for . As our intial input, we use which we created above. # Convert gene IDs for gseKEGG function # We will lose some genes here because not all IDs will be converted ids<-bitr(names(original_gene_list), fromType = \"ENSEMBL\", toType = \"ENTREZID\", OrgDb=organism) # remove duplicate IDS (here I use \"ENSEMBL\", but it should be whatever was selected as keyType) dedup_ids = ids[!duplicated(ids[c(\"ENSEMBL\")]),] # Create a new dataframe df2 which has only the genes which were successfully mapped using the bitr function above df2 = df[df$X %in% dedup_ids$ENSEMBL,] # Create a new column in df2 with the corresponding ENTREZ IDs df2$Y = dedup_ids$ENTREZID # Create a vector of the gene unuiverse kegg_gene_list <- df2$log2FoldChange # Name vector with ENTREZ ids names(kegg_gene_list) <- df2$Y # omit any NA values kegg_gene_list<-na.omit(kegg_gene_list) # sort the list in decreasing order (required for clusterProfiler) kegg_gene_list = sort(kegg_gene_list, decreasing = TRUE) organism KEGG Organism Code: The full list is here: https://www.genome.jp/kegg/catalog/org_list.html (need the 3 letter code). I define this as first, because it is used again below when making the pathview plots.\n\n nPerm the higher the number of permutations you set, the more accurate your result will, but the longer the analysis will take.\n\n minGSSize minimum number of genes in set (gene sets with lower than this many genes in your dataset will be ignored).\n\n maxGSSize maximum number of genes in set (gene sets with greater than this many genes in your dataset will be ignored).\n\n pvalueCutoff pvalue Cutoff.\n\n pAdjustMethod one of “holm”, “hochberg”, “hommel”, “bonferroni”, “BH”, “BY”, “fdr”, “none”.\n\n keyType one of ‘kegg’, ‘ncbi-geneid’, ‘ncib-proteinid’ or ‘uniprot’. Enrichment map organizes enriched terms into a network with edges connecting overlapping gene sets. In this way, mutually overlapping gene sets are tend to cluster together, making it easy to identify functional modules. The cnetplot depicts the linkages of genes and biological concepts (e.g. GO terms or KEGG pathways) as a network (helpful to see which genes are involved in enriched pathways and genes that may belong to multiple annotation categories). # categorySize can be either 'pvalue' or 'geneNum' cnetplot(kk2, categorySize=\"pvalue\", foldChange=gene_list)\n\nThis will create a PNG and different PDF of the enriched KEGG pathway. Params:\n\n gene.data This is created above\n\n pathway.id The user needs to enter this. Enriched pathways + the pathway ID are provided in the gseKEGG output table (above).\n\n species Same as above in , which we defined as library(pathview) # Produce the native KEGG plot (PNG) dme <- pathview(gene.data=kegg_gene_list, pathway.id=\"dme04130\", species = kegg_organism) # Produce a different plot (PDF) (not displayed here) dme <- pathview(gene.data=kegg_gene_list, pathway.id=\"dme04130\", species = kegg_organism, kegg.native = F)"
    },
    {
        "link": "https://guangchuangyu.github.io/2016/01/go-analysis-using-clusterprofiler",
        "document": "supports over-representation test and gene set enrichment analysis of Gene Ontology. It supports GO annotation from OrgDb object, GMT file and user’s own data.\n\nIn github version of clusterProfiler, and functions removed the parameter organism and add another parameter OrgDb, so that any species that have object available can be analyzed in clusterProfiler. Bioconductor have already provide OrgDb for about 20 species, see http://bioconductor.org/packages/release/BiocViews.html#___OrgDb, and users can build via .\n\nThe input ID type can be any type that was supported in object.\n\nUsing directly is not recommended. User can use function to translate to gene symbol.\n\ntest the whole GO corpus and enriched result may contains very general terms. User can use function to remove specific GO terms or GO level. If user want to restrict the result at sepcific GO level, they can use function. We also provide a method to reduce redundancy of enriched GO terms, see the post.\n\nGO analysis using user’s own data\n\nprovides enricher function for hypergeometric test and GSEA function for gene set enrichment analysis that are designed to accept user defined annotation. They accept two additional parameters TERM2GENE and TERM2NAME. As indicated in the parameter names, TERM2GENE is a data.frame with first column of term ID and second column of corresponding mapped gene and TERM2NAME is a data.frame with first column of term ID and second column of corresponding term name. TERM2NAME is optional.\n\nAn example of using enricher and GSEA to analyze DisGeNet annotation is presented in the post, use clusterProfiler as an universal enrichment analysis tool.\n\nWe provides a function, , that can parse GMT file into a TERM2GENE data.frame that is ready for both and functions.\n\nYu G, Wang L, Han Y and He Q * . clusterProfiler: an R package for comparing biological themes among gene clusters. OMICS: A Journal of Integrative Biology. 2012, 16(5):284-287."
    },
    {
        "link": "https://bioinformatics.ccr.cancer.gov/docs/btep-coding-club/CC2023/FunctionalEnrich_clusterProfiler",
        "document": "\n• Understand the capabilities of in the context of functional enrichment analysis\n\nFunctional enrichment and pathway analysis have broad and varying definitions. For our purposes, there are three general approaches (Khatri et al. 2012):\n\nFrom this, ORA determines which pathways are over or under represented by asking \"are there more annotations in the gene list than expected?\"\n• prioritizes a subset of genes using an arbitrary, user determined threshold (e.g., p-value)\n• doesn't require the data, just the gene identifiers\n• not great for gene lists with less than 50 genes\n• do not pre-select genes (considers all gene expression) and so you must include data with gene identifiers for ranking\n• ranking by magnitude of change in gene expression between conditions\n• determines where genes from a gene set fall in the ranking\n• Broad Institute software but also available using web-based tools, R, and Qlucore (proprietary).\n• also considered a strategy encompassing a range of methods\n\n - self-contained methods vs competitive methods\n\nORA and FCS discard a large amount of information. These methods use gene sets, and even if the gene sets represent specific pathways, structural information such as gene product interactions, positions of genes, and types of genes is completely ignored. Pathway topology methods seek to rectify this problem.\n\nImpact analysis (iPathwayGuide), Pathway-Express, SPIA, NetGSA, etc. (See Nguyen et al. 2019 for a review of PT methods.)\n\nis an R package used for functional enrichment analysis (either ORA or GSEA). See the latest publication here. The primary documentation for can be found here.\n• Allows user defined databases and annotations, which is particularly useful for non-model organisms\n\n\n\n Figure from T Wu, E Hu, S Xu, M Chen, P Guo, Z Dai, T Feng, L Zhou, W Tang, L Zhan, X Fu, S Liu, X Bo, and G Yu. clusterProfiler 4.0: A universal enrichment tool for interpreting omics data. The Innovation. 2021, 2(3):100141\n\nFor today's lesson, we will use data from the Bioconductor package . The data is from Himes et al. (2014). These data, which are contained within a , object are from a bulk RNAseq experiment. In the experiment, the authors \"characterized transcriptomic changes in four primary human ASM cell lines that were treated with dexamethasone,\" a common therapy for asthma. The airway package includes RNAseq count data from 8 airway smooth muscle cell samples. Each cell line includes a treated and untreated negative control. Differential expression testing using was applied to these data.\n\nWe have already mapped gene symbols and Entrez IDs to our data using and . However, does offer support for gene ID conversion using the functions and . uses the packages, of which there are 19 databases. unsurprisingly uses KEGG organism annotations. Use to find the appropriate kegg code.\n\n, along with complementary packages, can easily be used to generate functional enrichment results using over-representation analysis from the following databases: GO, KEGG, DOSE, REACTOME, Wikipathways, DisGeNET, network of cancer genes.\n• cellular component (C) - \"where the gene products are active\" (e.g., mitochondria)\n• *biological process (P) - \"the pathways and larger processes to which that gene product’s activity contributes\" (e.g., transport)\n\nGO terms can be highly redundant, and GO enrichment analysis often requires us to deal with this redundancy (See below).\n\nRead more about GO enrichment analysis with here.\n\nLet's perform GO enrichment on our up-regulated genes. Notice that databases and can be specified directly in the function. In addition, you can specify a list of background genes or use the default which will use all genes in the queried database (e.g., GO-BP). Here we are specifying the genes that underwent differential expression testing, but there is currently an open issue on the way the universe is affecting results, which can impact significance values.\n\nLet's take a peek at the results:\n\nWe have 53 significantly enriched terms (p.adjust < 0.05, log2foldchange > 1) that are up-regulated in response to dexamethasone treatment.\n\nWhat do we need to know about the output from ?\n\nSome of the columns are self-explanatory, while others are not:\n\nGeneRatio (k/n): \"ratio of input genes that are annotated in a term.\" (# of genes in the input list that are annotated to the corresponding term (function) / # of genes in input list).\n\nBgRatio (M/N): \"ratio of all genes that are annotated in this term\" (The number of genes that are annotated to the term / The total number of genes in the background gene list (\"universe\")).\n\npvalue: over-representation assessed using hypogeometric distribution, which is equivalent to a one sided Fisher's exact test.\n\np.adjust: Hypergeometric p-value after correction for multiple testing (\"BH adjusted p-values\"); see .\n\nqvalue: another take on FDR adjusted p-values; See .\n\ngeneID: The gene IDs that overlap with the functional term.\n\nCount: Total number of genes from the input gene list that match the functional term.\n\nBecause of the nature of GO, organized as a directed acyclic graph, parent terms can show enrichment due to over represented child terms. To reduce redundancy among enriched terms, uses a function that uses the \" package to calculate semantic similarities among enriched GO terms using multiple methods based on information content or graph structure.\" GO terms with >0.7 similarity are removed and represented by the most significant term (Wu et al. 2021).\n\nLet's reduce our GO terms using .\n\nWe are now left with 35 enriched terms.\n\nis based on implementation. Therefore, all plots can be customized with functions.\n\nThese are the same results exhibited differently. Notice the seamless integration with tidyverse functionality. extends ggplot2 functionality to accept enrichment results directly.\n\nThe category netplot (cnetplot) allows us to visualize the relationship and overlap of genes associated with our top terms (or terms that we specify). This is a nice way of visualizing genes that are important for several enriched terms.\n\nOther plot types possible with include barplots, heatmaps (as alternatives to cnetplots), tree plots, enrichment maps, upset plots (alternative to venn diagram), ridgeline plots, and GSEA plots.\n\nOver representation analysis using other databases\n\nUsing you can conduct ORA with GO, KEGG, MKEGG (KEGG modules), and WikiPathways. Using complementary packages (i.e., DOSE, ReactomePA), ORA can also be conducted with Disease Ontology (DO), Reactome, network of cancer genes, and DisGeNET.\n\nIt is possible to merge multiple enrichResult objects; this could be up-regulated merged with down-regulated or different functional repositories.\n\nThere are many databases devoted to relating genes and gene products to pathways, processes, and other phenomenon and a multitude of organisms that may not have annotations in widely used databases (e.g., KEGG, GO). has generalizable functions that allow users to customize the knowledge database and annotations used for functional enrichment.\n\nBecause the gene matrix transposed (GMT) format is often used to share gene set annotations, provides the parser functions and , the latter of which is specific to Wikipathways.\n\nFor example, let's download and use the Molecular Signatures Database (MSigDB) for ORA. In this case, we are interested in the canonical pathways from C2.\n\nThis requires a argument. This argument accepts a data frame with two columns: \"term\" and \"gene\". \"term\" includes the term ID, while \"gene\" includes the mapped gene associated with that term. You may also want to include a argument, which is a dataframe with a column for the term ID and the term name.\n\nis great at biological theme comparison. The function, , allows us to compare multiple conditions, time points, experiments, etc. \"Comparing functional profiles can reveal functional consensus and differences among different experiments and helps in identifying differential functional modules in omics datasets\" (Wu et al. 2021)\n\nThis function takes a list of gene lists from the different conditions we want to compare, creates functional enrichment profiles for each list, and combines the results in a single file that can easily be visualized. Alternatively, you can provide a formula (see here).\n\nalso supports the Broad Institute software method of gene set enrichment analysis (GSEA) developed by Subramanian et al. 2005. Because this method uses all of the data (complete ranked gene list), this method is able to unveil situations where genes within a gene set \"change in a small but coordinated way\" (i.e., all of the data is used regardless of arbitrary cut-offs like p-values).\n• Enrichment Score - represents the degree to which a set is over-represented at the top or bottom of the ranked list. normalized enrichment score (NES) - allows comparability across gene sets by accounting for differences in gene set size and in correlations between gene sets and the expression dataset. A positive NES is associated with pathway activation, and a negative NES is associated with pathway suppression.\n\ntags - the percentage of genes before or after the peak in the running enrichment score, which is an indication of the percentage of genes contributing to the enrichment score.\n\nlist - where in the list the enrichment score is attained.\n\nReturns the core enriched genes, those that contribute the most to a given gene set.\n\nSimilar to ORA, GSEA can be performed using GO ( ), KEGG pathways ( ), KEGG modules ( ), and WikiPathways ( ). With the package, you can also use , , and , and with ReactomePA ( ).\n\nThere is also a customizable function similar to , which is .\n\noffers several functions specific to GSEA output, especially in regard to visualizing the running score and preranked list ( and ). allows us to visualize several enriched gene sets at once.\n\nWe can use an upset plot to look at fold distributions over gene sets. This requries the installation of the package.\n\nWe can use extensions of verbs ( , , , , , , ) for easy manipulation of , , and . can be particularly powerful and allow us to use different enrichment result metrics (e.g., rich factor and fold enrichment for ORA).\n\nLet's filter the to only include NES results greater than 1.95 or less than -2.\n\nFollowing ChIP-seq, paired with can be used to connect functional analysis with genomic ROIs. See the vignette here.\n\nOther packages to check out\n• Wijesooriya K, Jadaan SA, Perera KL, Kaur T, Ziemann M. Urgent need for consistent standards in functional enrichment analysis. PLoS Comput Biol. 2022 Mar 9;18(3):e1009935. doi: 10.1371/journal.pcbi.1009935. PMID: 35263338; PMCID: PMC8936487..\n• Ludwig Geistlinger, Gergely Csaba, Mara Santarelli, Marcel Ramos, Lucas Schiffer, Nitesh Turaga, Charity Law, Sean Davis, Vincent Carey, Martin Morgan, Ralf Zimmer, Levi Waldron, Toward a gold standard for benchmarking gene set enrichment analysis, Briefings in Bioinformatics, Volume 22, Issue 1, January 2021, Pages 545–556, https://doi.org/10.1093/bib/bbz158"
    },
    {
        "link": "https://support.bioconductor.org/p/107417",
        "document": "I am new to clusterProfiler and I wanted to know which GO database was used for the profiling.\n\nPreviously I was using Reactome and also ReactomePA, but I wanted to try this out.\n\nIs the GO database for clusterProfiler from the Gene Ontology Consortium?\n\nSorry if this sounds like a silly question."
    }
]