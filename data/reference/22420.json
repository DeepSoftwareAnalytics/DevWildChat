[
    {
        "link": "https://digitalocean.com/community/tutorials/java-session-management-servlet-httpsession-url-rewriting",
        "document": "Session Management in Java Servlet Web Applications is a very interesting topic. Session in Java Servlet are managed through different ways, such as Cookies, HttpSession API, URL rewriting etc. This is the third article in the series of Web Applications tutorial in Java, you might want to check out earlier two articles too.\n\nThis article is aimed to explain about session management in servlets using different techniques and with example programs.\n• HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously. But sometimes in web applications, we should know who the client is and process the request accordingly. For example, a shopping cart application should know who is sending the request to add an item and in which cart the item has to be added or who is sending checkout request so that it can charge the amount to correct client. Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response. There are several ways through which we can provide unique identifier in request and response.\n• User Authentication - This is the very common way where we user can provide authentication credentials from the login page and then we can pass the authentication information between server and client to maintain the session. This is not very effective method because it wont work if the same user is logged in from different browsers.\n• HTML Hidden Field - We can create a unique hidden field in the HTML and when user starts navigating, we can set its value unique to the user and keep track of the session. This method can’t be used with links because it needs the form to be submitted every time request is made from client to server with the hidden field. Also it’s not secure because we can get the hidden field value from the HTML source and use it to hack the session.\n• URL Rewriting - We can append a session identifier parameter with every request and response to keep track of the session. This is very tedious because we need to keep track of this parameter in every response and make sure it’s not clashing with other parameters.\n• Cookies - Cookies are small piece of information that is sent by web server in response header and gets stored in the browser cookies. When client make further request, it adds the cookie to the request header and we can utilize it to keep track of the session. We can maintain a session with cookies but if the client disables the cookies, then it won’t work.\n• Session Management API - Session Management API is built on top of above methods for session tracking. Some of the major disadvantages of all the above methods are:\n• Most of the time we don’t want to only track the session, we have to store some data into the session that we can use in future requests. This will require a lot of effort if we try to implement this.\n• All the above methods are not complete in themselves, all of them won’t work in a particular scenario. So we need a solution that can utilize these methods of session tracking to provide session management in all cases. That’s why we need Session Management API and J2EE Servlet technology comes with session management API that we can use.\n• Cookies are used a lot in web applications to personalize response based on your choice or to keep track of session. Before moving forward to the Servlet Session Management API, I would like to show how can we keep track of session with cookies through a small web application. We will create a dynamic web application ServletCookieExample with project structure like below image. Deployment descriptor web.xml of the web application is: Welcome page of our application is login.html where we will get authentication details from user. Here is the LoginServlet that takes care of the login request. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"Pankaj\"; private final String password = \"journaldev\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ Cookie loginCookie = new Cookie(\"user\",user); //setting cookie to expiry in 30 mins loginCookie.setMaxAge(30*60); response.addCookie(loginCookie); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Notice the cookie that we are setting to the response and then forwarding it to LoginSuccess.jsp, this cookie will be used there to track the session. Also notice that cookie timeout is set to 30 minutes. Ideally there should be a complex logic to set the cookie value for session tracking so that it won’t collide with any other request. Notice that if we try to access the JSP directly, it will forward us to the login page. When we will click on Logout button, we should make sure that cookie is removed from client browser. There is no method to remove the cookie but we can set the maximum age to 0 so that it will be deleted from client browser immediately. When we run above application, we get response like below images.\n• Servlet API provides Session management through interface. We can get session from HttpServletRequest object using following methods. HttpSession allows us to set objects as attributes that can be retrieved in future requests.\n• HttpSession getSession() - This method always returns a HttpSession object. It returns the session object attached with the request, if the request has no session attached, then it creates a new session and return it.\n• HttpSession getSession(boolean flag) - This method returns HttpSession object if request has session else it returns null. Some of the important methods of HttpSession are:\n• String getId() - Returns a string containing the unique identifier assigned to this session.\n• Object getAttribute(String name) - Returns the object bound with the specified name in this session, or null if no object is bound under the name. Some other methods to work with Session attributes are , and .\n• long getCreationTime() - Returns the time when this session was created, measured in milliseconds since midnight January 1, 1970 GMT. We can get last accessed time with method.\n• setMaxInactiveInterval(int interval) - Specifies the time, in seconds, between client requests before the servlet container will invalidate this session. We can get session timeout value from method.\n• boolean isNew() - Returns true if the client does not yet know about the session or if the client chooses not to join the session.\n• void invalidate() - Invalidates this session then unbinds any objects bound to it. When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues. Let’s see example of session management using HttpSession object. We will create a dynamic web project in Eclipse with servlet context as ServletHttpSessionExample. The project structure will look like below image. login.html is same like earlier example and defined as welcome page for the application in web.xml LoginServlet servlet will create the session and set attributes that we can use in other resources or in future requests. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); userName.setMaxAge(30*60); response.addCookie(userName); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Our LoginSuccess.jsp code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <a href=\"CheckoutPage.jsp\">Checkout Page</a> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request. CheckoutPage.jsp is another page and it’s code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); } String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> Our LogoutServlet code is given below. Notice that I am printing JSESSIONID cookie value in logs, you can check server log where it will be printing the same value as Session Id in LoginSuccess.jsp Below images shows the execution of our web application.\n• As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. Servlet API provides support for URL rewriting that we can use to manage session in this case. The best part is that from coding point of view, it’s very easy to use and involves one step - encoding the URL. Another good thing with Servlet URL Encoding is that it’s a fallback approach and it kicks in only if browser cookies are disabled. We can encode URL with HttpServletResponse method and if we have to redirect the request to another resource and we want to provide session information, we can use method. We will create a similar project like above except that we will use URL rewriting methods to make sure session management works fine even if cookies are disabled in browser. ServletSessionURLRewriting project structure in eclipse looks like below image. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); response.addCookie(userName); //Get the encoded URL string String encodedURL = response.encodeRedirectURL(\"LoginSuccess.jsp\"); response.sendRedirect(encodedURL); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } }else{ sessionID = session.getId(); } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <!-- need to encode all the URLs where we want session information to be passed --> <a href=\"<%=response.encodeURL(\"CheckoutPage.jsp\") %>\">Checkout Page</a> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% String userName = null; //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else userName = (String) session.getAttribute(\"user\"); String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> package com.journaldev.servlet.session; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LogoutServlet */ @WebServlet(\"/LogoutServlet\") public class LogoutServlet extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); Cookie[] cookies = request.getCookies(); if(cookies != null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"JSESSIONID\")){ System.out.println(\"JSESSIONID=\"+cookie.getValue()); } cookie.setMaxAge(0); response.addCookie(cookie); } } //invalidate the session if exists HttpSession session = request.getSession(false); System.out.println(\"User=\"+session.getAttribute(\"user\")); if(session != null){ session.invalidate(); } //no encoding because we have invalidated the session response.sendRedirect(\"login.html\"); } } When we run this project keeping cookies disabled in the browser, below images shows the response pages, notice the jsessionid in URL of browser address bar. Also notice that on LoginSuccess page, user name is null because browser is not sending the cookie send in the last response. If cookies are not disabled, you won’t see jsessionid in the URL because Servlet Session API will use cookies in that case."
    },
    {
        "link": "https://docs.oracle.com/cd/E17802_01/products/products/servlet/2.5/docs/servlet-2_5-mr2/javax/servlet/http/HttpSession.html",
        "document": "Provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.\n\nThe servlet container uses this interface to create a session between an HTTP client and an HTTP server. The session persists for a specified time period, across more than one connection or page request from the user. A session usually corresponds to one user, who may visit a site many times. The server can maintain a session in many ways such as using cookies or rewriting URLs.\n\nThis interface allows servlets to\n• View and manipulate information about a session, such as the session identifier, creation time, and last accessed time\n• Bind objects to sessions, allowing user information to persist across multiple user connections\n\nWhen an application stores an object in or removes an object from a session, the session checks whether the object implements . If it does, the servlet notifies the object that it has been bound to or unbound from the session. Notifications are sent after the binding methods complete. For session that are invalidated or expire, notifications are sent after the session has been invalidated or expired.\n\nWhen container migrates a session between VMs in a distributed container setting, all session attributes implementing the interface are notified.\n\nA servlet should be able to handle cases in which the client does not choose to join a session, such as when cookies are intentionally turned off. Until the client joins the session, returns . If the client chooses not to join the session, will return a different session on each request, and will always return .\n\nSession information is scoped only to the current web application ( ), so information stored in one context will not be directly visible in another.\n\nBinds an object to this session, using the name specified. If an object of the same name is already bound to the session, the object is replaced. After this method executes, and if the new object implements , the container calls . The container then notifies any s in the web application. If an object was already bound to this session of this name that implements , its method is called. If the value passed in is null, this has the same effect as calling removeAttribute() . - the name to which the object is bound; cannot be null - the object to be bound - if this method is called on an invalidated session"
    },
    {
        "link": "https://ibm.com/docs/en/was/8.5.5?topic=dwa-developing-session-management-in-servlets",
        "document": "To obtain a session, use the getSession method of the javax.servlet.http.HttpServletRequest object in the Java™ Servlet 3.0 API.\n\nSession tracking using the SSL ID is deprecated in WebSphere® Application Server version 7.0. You can configure session tracking to use cookies or modify the application to use URL rewriting When you first obtain the HttpSession object, the Session Management facility uses one of three ways to establish tracking of the session: cookies, URL rewriting, or Secure Sockets Layer (SSL) information.\n\nAssume the Session Management facility uses cookies. In such a case, the Session Management facility creates a unique session ID and typically sends it back to the browser as a cookie. Each subsequent request from this user (at the same browser) passes the cookie containing the session ID, and the Session Management facility uses this ID to find the user's existing HttpSession object.\n\nIn Step 1 of the code sample, the Boolean(create) is set to so that the HttpSession object is created if it does not already exist. (With the Servlet 2.3 API and later, the javax.servlet.http.HttpServletRequest.getSession() method with no boolean defaults to and creates a session if one does not already exist for this user.)"
    },
    {
        "link": "https://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html",
        "document": "Called by the server (via themethod) to allow a servlet to handle a GET request.\n\nOverriding this method to support a GET request also automatically supports an HTTP HEAD request. A HEAD request is a GET request that returns no body in the response, only the request header fields.\n\nWhen overriding this method, read the request data, write the response headers, get the response's writer or output stream object, and finally, write the response data. It's best to include content type and encoding. When using a object to return the response, set the content type before accessing the object.\n\nThe servlet container must write the headers before committing the response, because in HTTP the headers must be sent before the response body.\n\nWhere possible, set the Content-Length header (with the method), to allow the servlet container to use a persistent connection to return its response to the client, improving performance. The content length is automatically set if the entire response fits inside the response buffer.\n\nWhen using HTTP 1.1 chunked encoding (which means that the response has a Transfer-Encoding header), do not set the Content-Length header.\n\nThe GET method should be safe, that is, without any side effects for which users are held responsible. For example, most form queries have no side effects. If a client request is intended to change stored data, the request should use some other HTTP method.\n\nThe GET method should also be idempotent, meaning that it can be safely repeated. Sometimes making a method safe also makes it idempotent. For example, repeating queries is both safe and idempotent, but buying a product online or modifying data is neither safe nor idempotent.\n\nIf the request is incorrectly formatted, returns an HTTP \"Bad Request\" message."
    },
    {
        "link": "https://stackoverflow.com/questions/52585814/java-servlets-session-management",
        "document": "I have a Web Project where index.html calls=>First(Servlet), has a hyperlink (called \"click here\"), that calls=>Welcome(Second Servlet), which has a hyperlink (called \"go back\") too\n• None Html file takes input some text and has a submit button. When I click on Submit, First(Servlet File) gets called and displays some hyperlink, and also sets an attribute to store the text that was input in html file.\n• None In First(Servlet), when I click on hyperlink I am directed to Welcome(Servlet File). The text input is displayed here using getattribute() method through HTTPSession. When I click go back hyperlink, I am redirected ti First(Servlet), and the navigation from First to Welcome and Welcome to First can go on, if you click the respective hyperlinks.\n• None But, only concern is the text that is displayed on Welcome happens only once. As soon as I click go back, i cannot maintain retrieve the input text, which is lost. And so, on click of \"click here\" hyperlink the second time, I get navigated to Welcome, but the text value displayed is null.\n\nAny help is appreciated!"
    },
    {
        "link": "https://geeksforgeeks.org/servlet-cookies",
        "document": "Cookies are the textual information that is stored in key-value pair format to the client’s browser during multiple requests. It is one of the state management techniques in session tracking. Basically, the server treats every client request as a new one so to avoid this situation cookies are used. When the client generates a request, the server gives the response with cookies having an id which are then stored in the client’s browser. Thus if the client generates a second request, a cookie with the matched id is also sent to the server. The server will fetch the cookie id, if found it will treat it as an old request otherwise the request is considered new.\n• In order to use cookies in java, use a Cookie class that is present in javax.servlet.http package.\n• To make a cookie, create an object of Cookie class and pass a name and its value.\n• To add cookie in response, use addCookie(Cookie) method of HttpServletResponse interface.\n• To fetch the cookie, getCookies() method of Request Interface is used.\n• clone(): Overrides the standard java.lang.Object.clone method to return a copy of this Cookie.\n• getComment(): Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.\n• getDomain(): Gets the domain name of this Cookie.\n• getMaxAge(): Gets the maximum age in seconds of this Cookie.\n• getName(): Returns the name of the cookie.\n• getPath(): Returns the path on the server to which the browser returns this cookie.\n• getSecure(): Returns true if the browser is sending cookies only over a secure protocol, or false if the browser can send cookies using any protocol.\n• getValue(): Gets the current value of this Cookie.\n• getVersion(): Returns the version of the protocol this cookie complies with.\n• setValue(String newValue): Assigns a new value to this Cookie.\n• setVersion(int v): Sets the version of the cookie protocol that this Cookie complies with.\n\nThe name of the Institute is passed to Servlet 2 from Servlet 1 using Cookies.\n\nIf one runs the servlet2 link in incognito mode directly, cookies are not recognized and it is treated as a new user."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-session-management-servlet-httpsession-url-rewriting",
        "document": "Session Management in Java Servlet Web Applications is a very interesting topic. Session in Java Servlet are managed through different ways, such as Cookies, HttpSession API, URL rewriting etc. This is the third article in the series of Web Applications tutorial in Java, you might want to check out earlier two articles too.\n\nThis article is aimed to explain about session management in servlets using different techniques and with example programs.\n• HTTP protocol and Web Servers are stateless, what it means is that for web server every request is a new request to process and they can’t identify if it’s coming from client that has been sending request previously. But sometimes in web applications, we should know who the client is and process the request accordingly. For example, a shopping cart application should know who is sending the request to add an item and in which cart the item has to be added or who is sending checkout request so that it can charge the amount to correct client. Session is a conversional state between client and server and it can consists of multiple request and response between client and server. Since HTTP and Web Server both are stateless, the only way to maintain a session is when some unique information about the session (session id) is passed between server and client in every request and response. There are several ways through which we can provide unique identifier in request and response.\n• User Authentication - This is the very common way where we user can provide authentication credentials from the login page and then we can pass the authentication information between server and client to maintain the session. This is not very effective method because it wont work if the same user is logged in from different browsers.\n• HTML Hidden Field - We can create a unique hidden field in the HTML and when user starts navigating, we can set its value unique to the user and keep track of the session. This method can’t be used with links because it needs the form to be submitted every time request is made from client to server with the hidden field. Also it’s not secure because we can get the hidden field value from the HTML source and use it to hack the session.\n• URL Rewriting - We can append a session identifier parameter with every request and response to keep track of the session. This is very tedious because we need to keep track of this parameter in every response and make sure it’s not clashing with other parameters.\n• Cookies - Cookies are small piece of information that is sent by web server in response header and gets stored in the browser cookies. When client make further request, it adds the cookie to the request header and we can utilize it to keep track of the session. We can maintain a session with cookies but if the client disables the cookies, then it won’t work.\n• Session Management API - Session Management API is built on top of above methods for session tracking. Some of the major disadvantages of all the above methods are:\n• Most of the time we don’t want to only track the session, we have to store some data into the session that we can use in future requests. This will require a lot of effort if we try to implement this.\n• All the above methods are not complete in themselves, all of them won’t work in a particular scenario. So we need a solution that can utilize these methods of session tracking to provide session management in all cases. That’s why we need Session Management API and J2EE Servlet technology comes with session management API that we can use.\n• Cookies are used a lot in web applications to personalize response based on your choice or to keep track of session. Before moving forward to the Servlet Session Management API, I would like to show how can we keep track of session with cookies through a small web application. We will create a dynamic web application ServletCookieExample with project structure like below image. Deployment descriptor web.xml of the web application is: Welcome page of our application is login.html where we will get authentication details from user. Here is the LoginServlet that takes care of the login request. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"Pankaj\"; private final String password = \"journaldev\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ Cookie loginCookie = new Cookie(\"user\",user); //setting cookie to expiry in 30 mins loginCookie.setMaxAge(30*60); response.addCookie(loginCookie); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Notice the cookie that we are setting to the response and then forwarding it to LoginSuccess.jsp, this cookie will be used there to track the session. Also notice that cookie timeout is set to 30 minutes. Ideally there should be a complex logic to set the cookie value for session tracking so that it won’t collide with any other request. Notice that if we try to access the JSP directly, it will forward us to the login page. When we will click on Logout button, we should make sure that cookie is removed from client browser. There is no method to remove the cookie but we can set the maximum age to 0 so that it will be deleted from client browser immediately. When we run above application, we get response like below images.\n• Servlet API provides Session management through interface. We can get session from HttpServletRequest object using following methods. HttpSession allows us to set objects as attributes that can be retrieved in future requests.\n• HttpSession getSession() - This method always returns a HttpSession object. It returns the session object attached with the request, if the request has no session attached, then it creates a new session and return it.\n• HttpSession getSession(boolean flag) - This method returns HttpSession object if request has session else it returns null. Some of the important methods of HttpSession are:\n• String getId() - Returns a string containing the unique identifier assigned to this session.\n• Object getAttribute(String name) - Returns the object bound with the specified name in this session, or null if no object is bound under the name. Some other methods to work with Session attributes are , and .\n• long getCreationTime() - Returns the time when this session was created, measured in milliseconds since midnight January 1, 1970 GMT. We can get last accessed time with method.\n• setMaxInactiveInterval(int interval) - Specifies the time, in seconds, between client requests before the servlet container will invalidate this session. We can get session timeout value from method.\n• boolean isNew() - Returns true if the client does not yet know about the session or if the client chooses not to join the session.\n• void invalidate() - Invalidates this session then unbinds any objects bound to it. When we use HttpServletRequest getSession() method and it creates a new request, it creates the new HttpSession object and also add a Cookie to the response object with name JSESSIONID and value as session id. This cookie is used to identify the HttpSession object in further requests from client. If the cookies are disabled at client side and we are using URL rewriting then this method uses the jsessionid value from the request URL to find the corresponding session. JSESSIONID cookie is used for session tracking, so we should not use it for our application purposes to avoid any session related issues. Let’s see example of session management using HttpSession object. We will create a dynamic web project in Eclipse with servlet context as ServletHttpSessionExample. The project structure will look like below image. login.html is same like earlier example and defined as welcome page for the application in web.xml LoginServlet servlet will create the session and set attributes that we can use in other resources or in future requests. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); userName.setMaxAge(30*60); response.addCookie(userName); response.sendRedirect(\"LoginSuccess.jsp\"); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } Our LoginSuccess.jsp code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <a href=\"CheckoutPage.jsp\">Checkout Page</a> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> When a JSP resource is used, container automatically creates a session for it, so we can’t check if session is null to make sure if user has come through login page, so we are using session attribute to validate request. CheckoutPage.jsp is another page and it’s code is given below. <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); } String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"LogoutServlet\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> Our LogoutServlet code is given below. Notice that I am printing JSESSIONID cookie value in logs, you can check server log where it will be printing the same value as Session Id in LoginSuccess.jsp Below images shows the execution of our web application.\n• As we saw in last section that we can manage a session with HttpSession but if we disable the cookies in browser, it won’t work because server will not receive the JSESSIONID cookie from client. Servlet API provides support for URL rewriting that we can use to manage session in this case. The best part is that from coding point of view, it’s very easy to use and involves one step - encoding the URL. Another good thing with Servlet URL Encoding is that it’s a fallback approach and it kicks in only if browser cookies are disabled. We can encode URL with HttpServletResponse method and if we have to redirect the request to another resource and we want to provide session information, we can use method. We will create a similar project like above except that we will use URL rewriting methods to make sure session management works fine even if cookies are disabled in browser. ServletSessionURLRewriting project structure in eclipse looks like below image. package com.journaldev.servlet.session; import java.io.IOException; import java.io.PrintWriter; import javax.servlet.RequestDispatcher; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LoginServlet */ @WebServlet(\"/LoginServlet\") public class LoginServlet extends HttpServlet { private static final long serialVersionUID = 1L; private final String userID = \"admin\"; private final String password = \"password\"; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // get request parameters for userID and password String user = request.getParameter(\"user\"); String pwd = request.getParameter(\"pwd\"); if(userID.equals(user) && password.equals(pwd)){ HttpSession session = request.getSession(); session.setAttribute(\"user\", \"Pankaj\"); //setting session to expiry in 30 mins session.setMaxInactiveInterval(30*60); Cookie userName = new Cookie(\"user\", user); response.addCookie(userName); //Get the encoded URL string String encodedURL = response.encodeRedirectURL(\"LoginSuccess.jsp\"); response.sendRedirect(encodedURL); }else{ RequestDispatcher rd = getServletContext().getRequestDispatcher(\"/login.html\"); PrintWriter out= response.getWriter(); out.println(\"<font color=red>Either user name or password is wrong.</font>\"); rd.include(request, response); } } } <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% //allow access only if session exists String user = null; if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else user = (String) session.getAttribute(\"user\"); String userName = null; String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); if(cookie.getName().equals(\"JSESSIONID\")) sessionID = cookie.getValue(); } }else{ sessionID = session.getId(); } %> <h3>Hi <%=userName %>, Login successful. Your Session ID=<%=sessionID %></h3> <br> User=<%=user %> <br> <!-- need to encode all the URLs where we want session information to be passed --> <a href=\"<%=response.encodeURL(\"CheckoutPage.jsp\") %>\">Checkout Page</a> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> <%@ page language=\"java\" contentType=\"text/html; charset=US-ASCII\" pageEncoding=\"US-ASCII\"%> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"https://www.w3.org/TR/html4/loose.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=US-ASCII\"> <title>Login Success Page</title> </head> <body> <% String userName = null; //allow access only if session exists if(session.getAttribute(\"user\") == null){ response.sendRedirect(\"login.html\"); }else userName = (String) session.getAttribute(\"user\"); String sessionID = null; Cookie[] cookies = request.getCookies(); if(cookies !=null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"user\")) userName = cookie.getValue(); } } %> <h3>Hi <%=userName %>, do the checkout.</h3> <br> <form action=\"<%=response.encodeURL(\"LogoutServlet\") %>\" method=\"post\"> <input type=\"submit\" value=\"Logout\" > </form> </body> </html> package com.journaldev.servlet.session; import java.io.IOException; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.Cookie; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import javax.servlet.http.HttpSession; /** * Servlet implementation class LogoutServlet */ @WebServlet(\"/LogoutServlet\") public class LogoutServlet extends HttpServlet { private static final long serialVersionUID = 1L; protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { response.setContentType(\"text/html\"); Cookie[] cookies = request.getCookies(); if(cookies != null){ for(Cookie cookie : cookies){ if(cookie.getName().equals(\"JSESSIONID\")){ System.out.println(\"JSESSIONID=\"+cookie.getValue()); } cookie.setMaxAge(0); response.addCookie(cookie); } } //invalidate the session if exists HttpSession session = request.getSession(false); System.out.println(\"User=\"+session.getAttribute(\"user\")); if(session != null){ session.invalidate(); } //no encoding because we have invalidated the session response.sendRedirect(\"login.html\"); } } When we run this project keeping cookies disabled in the browser, below images shows the response pages, notice the jsessionid in URL of browser address bar. Also notice that on LoginSuccess page, user name is null because browser is not sending the cookie send in the last response. If cookies are not disabled, you won’t see jsessionid in the URL because Servlet Session API will use cookies in that case."
    },
    {
        "link": "https://beginnersbook.com/2013/05/servlet-cookies",
        "document": "Please wait while your request is being verified..."
    },
    {
        "link": "https://nikhilsomansahu.medium.com/servlet-cookies-tutorial-with-example-6234340792c6",
        "document": "This servlet cookies tutorial shows you how to create, retrieve and delete a cookie from the browser using servlet application\n\nA cookie is a small amount of information sent by a servlet to a Web browser, saved by the browser, and later sent back to the server. A cookie’s value can uniquely identify a client, so cookies are commonly used for session management.\n\nA cookie has a name, a single value, and optional attributes such as a comment, path and domain qualifiers, a maximum age, and a version number.\n\nHow to create cookies in java\n\nYou can set expire time for the cookie using the setmaxAge method, this method accepts seconds.\n\nYou can use the response object to add a cookie to the browser, you can also create a number of cookies and add it to a single response object.\n\nA cookie is retrieved from browser as an array, you can use request object getCookies method to access all cookie created by your domain.\n\nTo delete a cookie just recreate the cookie in the same name and set the value as null and age as null.\n\nA negative value in the above method means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.\n\nBrowser cookie limits and the limit per domain\n\nThe browser is expected to support 20 cookies for each Web server, 300 cookies total and may limit cookie size to 4 KB each."
    },
    {
        "link": "https://javamex.com/tutorials/servlets/cookies.shtml",
        "document": ""
    }
]