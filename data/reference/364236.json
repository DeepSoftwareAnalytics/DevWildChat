[
    {
        "link": "https://docs.u-boot.org/en/latest/usage/cmd/gpt.html",
        "document": "Describes the GPT partition layout for a disk. The syntax is similar to the one used by the mbr command command. The string contains one or more partition descriptors, each separated by a “;”. Each descriptor contains one or more fields, with each field separated by a “,”. Fields are either of the form “key=value” to set a specific value, or simple “flag” to set a boolean flag\n\nThe first descriptor can optionally be used to describe parameters for the whole disk with the following fields:\n• None uuid_disk=UUID - Set the UUID for the disk\n\nPartition descriptors can have the following fields:\n• None size=<BYTES> - The partition size in bytes or “-” to expand it to the whole free area\n• None uuid=<UUID> - The partition UUID, optional if CONFIG_RANDOM_UUID=y is enabled\n\nIf ‘uuid’ is not specified, but CONFIG_RANDOM_UUID is enabled, a random UUID will be generated for the partition"
    },
    {
        "link": "https://github.com/u-boot/u-boot/blob/master/doc/README.gpt",
        "document": ""
    },
    {
        "link": "https://forums.raspberrypi.com/viewtopic.php?t=365754",
        "document": "Hello all,I am working in yocto currently to develop an image for my compute module boards (both CM3 and CM4) , It was my understanding that using yocto I should be easily able to switch between the hardwares depending on which one I was building for at the time. This seemed to be perfect for me up until a few days ago when I had been working on the partition table with my CM4 and added U-Boot. This worked fine for the CM4 and the build works perfectly, I have 5 partitions with GPT and I can see the boot loader is U-Boot when I stop it.Changing the device back to the CM3 though causes the module to not boot up. Ive gone back and iterated through my changes and discovered that doing either of the actions below will cause this behavior on the cm3 but not the cm4:1- Enable U-boot. This one is very surprising considering it is documented the meta-raspberry layer found here: https://meta-raspberrypi.readthedocs.io ... -to-u-boot The change should just be as simple as adding the line below to your local.conf so I'm very surprised doing this seems to cause so many problems2- Changing the partition table to GPT instead of MSDOS. This one is less surprising. Looking online there seems to be some mention of the CM3 not supporting GPT but I couldn't find anything mentioning that in official documentation so if someone could confirm or deny this for me it would be great. But also a shame the module doesn't support a more modern partitioning scheme.If that's not the cause and its just a mistake on my part Ill post that section of my image creation .bbclass below so you all can tell me what im doing wrongWorking Code:Broken Code :Im feeling very stuck on this so any help people can offer would be greatly appreciated"
    },
    {
        "link": "https://docs.u-boot.org",
        "document": "This is the top level of the U-Boot’s documentation tree. U-Boot documentation, like the U-Boot itself, is very much a work in progress; that is especially true as we work to integrate our many scattered documents into a coherent whole. Please note that improvements to the documentation are welcome; join the U-Boot list at http://lists.denx.de if you want to help out."
    },
    {
        "link": "https://github.com/u-boot/u-boot",
        "document": ""
    },
    {
        "link": "https://docs.u-boot.org/en/latest/usage/cmd/gpt.html",
        "document": "Describes the GPT partition layout for a disk. The syntax is similar to the one used by the mbr command command. The string contains one or more partition descriptors, each separated by a “;”. Each descriptor contains one or more fields, with each field separated by a “,”. Fields are either of the form “key=value” to set a specific value, or simple “flag” to set a boolean flag\n\nThe first descriptor can optionally be used to describe parameters for the whole disk with the following fields:\n• None uuid_disk=UUID - Set the UUID for the disk\n\nPartition descriptors can have the following fields:\n• None size=<BYTES> - The partition size in bytes or “-” to expand it to the whole free area\n• None uuid=<UUID> - The partition UUID, optional if CONFIG_RANDOM_UUID=y is enabled\n\nIf ‘uuid’ is not specified, but CONFIG_RANDOM_UUID is enabled, a random UUID will be generated for the partition"
    },
    {
        "link": "https://github.com/u-boot/u-boot",
        "document": ""
    },
    {
        "link": "https://lore.kernel.org/all/5047A88B.4080006@wwwdotorg.org/T",
        "document": ""
    },
    {
        "link": "https://docs.u-boot.org/en/latest/android/fastboot.html",
        "document": "The protocol that is used over USB and UDP is described in . The current implementation supports the following standard commands: The following OEM commands are supported (if enabled):\n• None - this executes to configure eMMC with <arg> = boot_ack boot_partition\n• None - this executes a custom board function which is defined by the vendor Support for both eMMC and NAND devices is included.\n\nThe counterpart to this is the fastboot client which can be found in Android’s repository in the fastboot folder. It runs on Windows, Linux and OSX. The fastboot client is part of the Android SDK Platform-Tools and can be downloaded from .\n\nThe fastboot gadget relies on the USB download gadget, so the following options must be configured: NOTE: The must be one of the numbers supported by the fastboot client. The list of vendor IDs supported can be found in the fastboot client source code. The fastboot protocol requires a large memory buffer for downloads. This buffer should be as large as possible for a platform. The location of the buffer and size are set with and . These may be overridden on the fastboot command line using and .\n\nFastboot partition aliases can also be defined for devices where GPT limitations prevent user-friendly partition names such as , and . Or, where the actual partition name doesn’t match a standard partition name used commonly with fastboot. The current implementation checks aliases when accessing partitions by name (flash_write and erase functions). To define a partition alias add an environment variable similar to: In cases where no partition table is present, a raw partition descriptor can be defined, specifying the offset, size, and optionally the MMC hardware partition number for a given partition name. This is useful when using fastboot to flash files (e.g. SPL or U-Boot) to a specific offset in the eMMC boot partition, without having to update the entire boot partition. To define a raw partition descriptor, add an environment variable similar to: Variables retrived through can be overridden by defining environment variables of the form . These are looked up first so can be used to override values which would otherwise be returned. Using this mechanism you can also return types for NAND filesystems, as the fully parameterised variable is looked up, e.g.: When executing the fastboot command, if is set then that will be executed in place of .\n\nThe Fastboot implementation in U-Boot allows to write images into disk partitions. Target partitions are referred on the host computer by their names. For GPT/EFI the respective partition name is used. For MBR the partitions are referred by generic names according to the following schema: The device type is as follows: The device index starts from and refers to the interface (e.g. USB controller, SD/MMC controller) or disk index. The partition index starts from and describes the partition number on the particular device. Alternatively, partition types may be specified using U-Boot’s partition syntax. This allows specifying partitions like , , or . The interface is always .\n\nFastboot also allows to write the partition table to the media. This can be done by writing the respective partition table image to a special target “gpt” or “mbr”. These names can be customized by defining the following configuration options:\n\nEnter into fastboot by executing the fastboot command in U-Boot for either USB: => fastboot udp link up on port 0, speed 100, full duplex Using ethernet@4a100000 device Listening for fastboot command on 192.168.0.102 On the client side you can fetch the bootloader version for instance: and once the client comes back, the board should reset. You can also specify a kernel image to boot. You have to either specify the an image in Android format or pass a binary kernel and let the fastboot client wrap the Android suite around it. On OMAP for instance you take zImage kernel and pass it to the fastboot client: $ fastboot -b 0x80000000 -c \"console=ttyO2 earlyprintk root=/dev/ram0 mem=128M\" boot zImage creating boot image... creating boot image - 1847296 bytes downloading 'boot.img'... OKAY [ 2.766s] booting... OKAY [ -0.000s] finished. total time: 2.766s and on the U-Boot side you should see: Starting download of 1847296 bytes ........................................................ downloading of 1847296 bytes finished Booting kernel.. ## Booting Android Image at 0x81000000 ... Kernel load addr 0x80008000 size 1801 KiB Kernel command line: console=ttyO2 earlyprintk root=/dev/ram0 mem=128M Loading Kernel Image ... OK OK Starting kernel ... Normally, arbitrary U-Boot command execution is not enabled. This is so fastboot can be used to update systems using verified boot. However, such functionality can be useful for production or when verified boot is not in use. Enable to use this functionality. This will enable command, which can be used with the fastboot client. For example, to print “Hello at 115200 baud” (or whatever is), run: You can run any command you would normally run on the U-Boot command line, including multiple commands (using e.g. or ) and control structures ( , , etc.). The exit code of will reflect the exit code of the command you ran. U-Boot allows you to execute custom fastboot logic, which can be defined in board/ files. It can still be used for production devices with verified boot, because the vendor defines logic at compile time by implementing fastboot_oem_board() function. The attacker will not be able to execute custom commands / code. For example, this can be useful for custom flashing or erasing protocols: In this case, argument of the function will contain string “write_bootloader” and argument is a pointer to fastboot input buffer, which contains the contents of bootloader.img file."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions?view=windows-11",
        "document": "Create custom partition layouts for your hard disk drives (HDDs), solid-state drives (SSDs), and other drives when deploying Windows to Unified Extensible Firmware Interface (UEFI)–based devices.\n\nWhen you deploy Windows to a UEFI-based device, you must format the hard drive that includes the Windows partition by using a GUID partition table (GPT) file system. Additional drives may use either the GPT or the master boot record (MBR) file format.\n\nA GPT drive may have up to 128 partitions.\n\nEach partition can have a maximum of 18 exabytes (~18.8 million terabytes) of space.\n\nThe device must contain a system partition. On GPT drives, this is known as the EFI System Partition, or the ESP. This partition is usually stored on the primary hard drive. The device boots to this partition.\n\nThe minimum size of this partition is 200 MB, and must be formatted using the FAT32 file format.\n\nThis partition is managed by the operating system, and should not contain any other files, including Windows RE tools.\n\nThe size of the MSR is 16 MB.\n\nAdd an MSR to each GPT drive to help with partition management. The MSR is a reserved partition that does not receive a partition ID. It cannot store user data.\n\nAny other utility partitions not managed by Windows must be located before the Windows, data, and recovery image partitions. This allows end users to perform actions such as resizing the Windows partition without affecting system utilities.\n\nProtect end users from accidentally modifying utility partitions by identifying them using a GPT attribute. This prevents these partitions from appearing in File Explorer.\n• When you're deploying Windows by using DiskPart, use the attributes volume set GPT_ATTRIBUTE_PLATFORM_REQUIRED command after you create the partition to identify the partition as a utility partition. For more information, see the MSDN topic: PARTITION_INFORMATION_GPT structure.\n\nTo verify that system and utility partitions exist\n• Click Start, right-click This PC, and then click Manage. The Computer Management window opens.\n• Click Disk Management. The list of available drives and partitions appears.\n• In the list of drives and partitions, confirm that the system and utility partitions are present and are not assigned a drive letter.\n• The partition must have at least 20 gigabytes (GB) of drive space for 64-bit versions, or 16 GB for 32-bit versions.\n• The Windows partition must be formatted using the NTFS file format.\n• The Windows partition must have 16 GB of free space after the user has completed the Out Of Box Experience (OOBE) and Automatic Maintenance has completed.\n\nThis partition must be at least 300 MB.\n• The recovery image, winre.wim, is typically between 500-700MB, depending on what drivers, languages, and customizations you add.\n• The file system itself can take up additional space. For example, NTFS may reserve 5-15MB or more on a 750MB partition.\n\nThis partition must use the Type ID: .\n\nThe recovery tools should be in a separate partition than the Windows partition to support automatic failover and to support booting partitions encrypted with Windows BitLocker Drive Encryption.\n\nWe recommend that you place this partition immediately after the Windows partition. This allows Windows to modify and recreate the partition later if future updates require a larger recovery image.\n\nRecommended partition layouts don't include data partitions. However, if data partitions are required, they should be placed after the Windows RE partition. This allows future updates to Windows RE to grow the Windows RE partition by shrinking the Windows partition.\n\nThis layout makes it more difficult for end users to remove the data partition and merge the space with the Windows partition. To do so, the Windows RE partition must be moved to the end of the unused space reclaimed from the data partition, so that the Windows partition can be extended.\n\nWindows operating systems don't include functionality or utility to facilitate this process. However, manufacturers can develop and provide such a utility if PCs are shipped with data partitions.\n\nThe default partition layout for UEFI-based PCs is: a system partition, an MSR, a Windows partition, and a recovery tools partition.\n\nThis layout lets you use Windows BitLocker Drive Encryption through both Windows and through the Windows Recovery Environment.\n\nSample files: configure drive partitions by using Windows PE and DiskPart scripts\n\nFor image-based deployment, boot the PC to Windows PE, and then use the DiskPart tool to create the partition structures on your destination PCs.\n\nChange the Windows drive letter to a letter that’s near the end of the alphabet, such as W, to avoid drive letter conflicts. Do not use X, because this drive letter is reserved for Windows PE. After the device reboots, the Windows partition is assigned the letter C, and the other partitions don’t receive drive letters.\n\nIf you reboot, Windows PE reassigns disk letters alphabetically, starting with the letter C, without regard to the configuration in Windows Setup. This configuration can change based on the presence of different drives, such as USB flash drives.\n\nThe following steps describe how to partition your hard drives and prepare to apply images. You can use the code in the sections that follow to complete these steps.\n\nTo partition hard drives and prepare to apply images\n• None Copy and save the CreatePartitions-UEFI.txt file to a USB flash drive.\n• None Use Windows PE to boot the destination PC.\n• None Clean and partition the drive. In this example, F is the letter of the USB flash drive.\n• If you use a custom partition layout, update the push-button recovery script so the recovery tools can recreate the custom partition layout when needed.\n\nUse a deployment script to apply the Windows images on the newly created partitions. For more information, see Capture and Apply Windows, System, and Recovery Partitions."
    }
]