[
    {
        "link": "https://sourceforge.net/projects/ourorgan/files/GOLive",
        "document": ""
    },
    {
        "link": "https://github.com/GrandOrgue/grandorgue",
        "document": "It currently supports Linux, Windows and macOS. Porting to other OS supported by RtMidi, RtAudio and wxWidgets should be possible with some build system adjustments.\n\nGrandOrgue is hosted on Github. The repository can be found at https://github.com/GrandOrgue/grandorgue.\n\nGrandOrgue was earlier hosted on SourceForge https://sourceforge.net/projects/ourorgan and a copy of the old source code before migration can be found in the svn branch https://github.com/GrandOrgue/grandorgue/tree/svn.\n\nDevelopment of GrandOrgue is continuous, see CHANGELOG.md for full history of changes.\n\nThe discussion forum is available at https://github.com/GrandOrgue/grandorgue/discussions.\n\nFor bug reports and feature requests post issues at https://github.com/GrandOrgue/grandorgue/issues.\n\nContributors are welcome on Github. You may create pull requests at https://github.com/GrandOrgue/grandorgue/pulls. But before creating a complex pull request it's usually better to first create an issue for discussing it.\n\nSee INSTALL.md for the downloading and installation prebuilt GrandOrgue packages.\n\nSee BUILD.md for instructions on how to build GrandOrgue from the source code."
    },
    {
        "link": "https://sourceforge.net/p/ourorgan/wiki/Home",
        "document": "How can I program the Midi-Settings for Stops to Send by Copying the current receive device? I program the Receive and attempt to copy to Send, but there is no respnse in Send. Do I have to manually enter the send data for each stop? I use Mojave in a MacBook Pro.\n\nAlso, when Listening for Event, the Upper Limit is 1, should I manually set it to 127?"
    },
    {
        "link": "https://github.com/oleg68/GrandOrgue-official/blob/master/INSTALL.md",
        "document": "This document describes installing GrandOrgue from already built installation files. If you want to build these files from sources see BUILD.md.\n\nGenerally, for installing GrandOrgue or upgrading from a previous version you have to do two steps:\n• Download an installation file from Github.\n• For a release version go to https://github.com/GrandOrgue/grandorgue/releases and select a release number.\n• For an intermediate build go to https://github.com/GrandOrgue/grandorgue/actions, select a build and scroll down to The necessary file names to download depend on the target operation system.\n• Install the downloaded file or upgrade existing installation with this file. This step is operation system dependent.\n\nThese two steps will be described later in the text.\n\nInstallation of the program creates neither the configuration file nor directories used by GrandOrgue to store data and cache. These directories reside in the user home directory and are created when GrandOrgue is launched the first time.\n\nx11 is recommended for running GrandOrgue. Some positioning/sizing may work not properly on wayland. See more here.\n\nThe GrandOrgue appimage is built for x86_64 architecture without jack support to maximize compatibility. This method does not require any installation of dependencies or GrandOrgue itself.\n• Make the appimage file executable (Right click file, select properties, on Permissions tab make sure that Allow executing file as program is ticked. Or open terminal where the file is and run: chmod +x grandorgue*.AppImage)\n• The file is now runnable and can be started by clicking on it\n• Download the linux package file where is\n• \n• on other systems (the same command for installation and upgrading)\n• After installation, run GrandOrgue from the Applications menu or from the overview screen.\n• Download the linux package where is\n• Install or upgrade GrandOrgue with all dependencies. Execute the install command as a root:\n• After installation or upgrading, run GrandOrgue from the Applications menu or from the overview screen.\n\nThis method requires that all dependencies have already been installed. Usually this way is used for trying a new GrandOrgue version when an old one has already been installed.\n• Download the file where is\n• Unpack this archive to some directory\n• Run this exe file. The installer will be launched.\n• After installation/upgrading, run GrandOrgue from the menu.\n• Unpack it's contents to some directory.\n• Drag and drop the GrandOrgue app to the Applications Folder.\n• GrandOrgue is an app from an unidentified developer. Control-click the GrandOrgue app icon in the Applications Folder, then choose Open from the shortcut menu.\n• Click Open. The GrandOrgue app is saved as an exception to your security settings, and you can open it in the future by double-clicking it just as you can any registered app.\n\nRun the following command by root:\n\nDeinstallation of GrandOrgue removes neither the configuration file nor the directories with GrandOrgue data from user directories."
    },
    {
        "link": "https://piotrgrabowski.pl/grandorgue-versions",
        "document": "Please note that all my sample sets were designed primarly to work with Hauptwerk software, as it is more powerful, easy to use, better developed software. Personally I don’t use GrandOrgue and I won’t provide any support related to it (except cases where the issue is directly related to my sample set). Please use GrandOrgue forum or other ways to get the support. Here is the list of known problems or lack of features related to my sample sets’ GrandOrgue versions. If you don’t accept these limitations, don’t use or buy my products. Maybe some of these points won’t be valid as probably some of the issues may be fixed with new releases of GrandOrgue.\n• As I don’t use GrandOrgue packaging format, installation process is not as easy as with Hauptwerk. For my newer sets it requires basic knowledge about extracting RAR archives and moving files to make proper folder structure. Detailed instructions are shown in the paragraph below.\n• Patching the sample sets won’t be easy as with Hauptwerk and that’s the reason I will wait with every GrandOrgue release to be sure that current Hauptwerk package is rather final, patched version. Patches listed on sample set page can’t be easily applied to GrandOrgue versions.\n• Still few years after my first GrandOrgue releases, scalling of the user interface is still counter-intuitive. It doesn’t automatically fit display resolution. I still have to release two versions, which differ in size of graphical user interface.\n• My new sample sets come in multichannel format. You may not have enough memory to load entire sample set, then you can disable ranks or whole audio groups from loading in Audio/Midi / Organ settings window by selecting on the left tree items you don’t want to load and then switch on the right side Sample channels option to Don’t load. To access Organ settings window you need to load the sample set or break the loading process once it passes Parsing sample set definition file phase.\n• In the same Organ settings window you can assign different ranks to different audio groups (audio outputs). You can manage audio groups in Audio/Midi / Audio/Midi settings window, in Audio groups tab.\n• Scaling of graphic interface is not working very well, so scaled interface will cause some misalignements.\n• For newer sets, in Panel / Sample set settings you can adjust audio levels of different elements (audio groups, divisions, key/stop noises). It is not easy to change these values, but it is possible. When you click the value with left mouse button, it will usually set to rather random value, then use mouse scroll to select desired value and then release left mouse button. These values operate in 1-100% range (despite visible 0-100% range), as I disabled 0% value, because setting this value to 0% was disabling all currently playing sounds (pipes, blower noise, ambient noise etc.).\n• Sample sets volume is normalized to the default GrandOrgue setting, which is -15dB, so playing a big chord with all stops engaged shouldn’t distort audio output with this value set.\n• Some sample sets lack of features, which are present in Hauptwerk versions e.g. combination system in Szczecinek, Orage in Oloron-Sainte-Marie, enclosure pedal noises.\n• Setting any temperament (other than original) results in retuning whole organ to a1=440 Hz, so e.g. for Erfurt Büßleben it results in retuning whole organ by 3 semitones.\n• All of the percussive stops, which originally have dampeners (like Campane stop in Alessandria sample set) due to GrandOrgue limitations, sound quite unnatural, as the crossfade between the sustaining part and the silence is too short.\n• All of the video presentations were recorded with Hauptwerk versions of the sample sets. The sound produced by GrandOrgue may be different as it has different audio engine.\n• All of the memory requirements were measured for Hauptwerk. The actual values for GrandOrgue may slightly differ.\n\nHere are the downloads containing ODF (organ definition files) for GrandOrgue software. Please note that for sample sets, which have paid full versions, in the downloaded file you will find ODFs for both demo and full versions. You can delete files you won’t need, so if you bought full version you can remove demo version files and vice versa.\n\nImportant: Newer versions of GrandOrgue broke compatibility with the ODFs listed below. Here is the file containing all ODFs, which should work with the newer versions: New ODFs.\n\nPlease remember: to use the sample set you also need to order it (free or paid) and download the package by following the cart and checkout pages. After downloading the package, you can download ODFs listed below and then follow installation instructions in the next paragraph.\n\nFor sample sets where you have separate download link to GrandOrgue version, you just need to extract the archive and open .organ file after extraction. With newer sample sets (listed above) it is a bit more complicated, but still quite easy. I made a short presentation how to install newer sets on Windows with free 7-zip software installed (you can use any software which extracts RAR files)."
    },
    {
        "link": "https://jorgan.info/base/u/Using_GrandOrgue_as_sound.html",
        "document": "This topic is in the process of being created and it will be a few days until it is complete. It was originally created for jOrgan 3.7 and will be updated for use with jOrgan 3.12.\n\nGrandOrgue is a free open source pipe organ sample playing program that creates a very realistic audio VPO experience. The graphics and coupler/piston/swells/crescendo configuration are not as visually appealing nor as easy to configure as those in jOrgan, so I use jOrgan as a front-end to GrandOrgue and get the best of both worlds.\n\nUsing jOrgan as a front-end to GrandOrgue also means that we can mix sound source applications, so one could run a GrandOrgue organ and add fluidsynth stops to the sound in jOrgan. It is also possible to run multiple instances of GrandOrgue (let me know if you are interested in this) and route the audio to different audio cards or channels.\n\nPlease familiarize yourself with the GrandOrgue organ definition file, as you will need to know where to make changes to your own GrandOrgue organ definition files. Open the Demo.organ file (it is located in the Organ folder) in Notepad and take note of the following things:\n\nThe first section Organ defines the organ name, screensize, number of possible stops, etc.\n\nThe next sections define the manuals and what ranks are configured to them Manual000, Manual001, and Manual002. Take note of the Ranks and the associate Stop numbers for each rank on each manual. For example, Stop001=001 ;Flute 8 on the Pedal manual means that the first pedal rank is configured to Stop definition 001, which is the Ped Flute 8 rank. Scroll down the file until you find Stop001. Here you will find name, number of pipes, the actual location of wave files loaded to create the rank, and the StopControlMIDIKeyNumber. The StopControlMIDIKeyNumber is the most important property for our purposes, as it defines the MIDI note number that controls that Stop. You will see that for the Ped Flute 8 rank, the property is set to MIDI note 001. Below the Manualxxx definitions you will find the wind chest and enclosure definitions. You won’t need to worry about these. I have also not included couplers in the organ definition file as you can use the jOrgan coupler elements more effectively than the native GrandOrgue couplers. Please go through each of the Stop definitions and find out which StopControlMIDIKeyNumber controls which Stop. We will use these values when you create a jOrgan disposition to control the Demo Organ.\n\nOnce you have familiarized yourself with the contents of the Demo.organ file. Start GrandOrgue and configure the MIDI device settings to receive MIDI message from “In From MIDI Yoke: 1”.\n\nRun jOrgan and load the demo.disposition that is included in the download for this tutorial In the list of jOrgan elements you will find one item, the Console element. This element is used to define what skin (graphics) the organ screen will have, as well as the name of the organ, and the MIDI Input and Output of the items that will be configured on the screen. Click on the Console element to select it and display the empty properties of the blank console in the Properties tab below the list of elements Configure the Console Skin property to the classic.zip skin (you can just type this in). Enter 'GrandOrgue Demo' in the Name property, jOrgan Keyboard in the Input property (click on the Input property box and select the jOrgan keyboard from the drop down), and leave the Output property blank Click on the Skin tab to the right of the Elements column and select the wooden background as the Console background (If the Skin tab is not visible, enable it by selecting View from the main menu and clicking on ‘Skin’) Now add a Generic Sound element. Click on the add element icon, and then type “Output to GrandOrgue” in the Name property. Select the Generic Sound element from the list of elements and click ‘Finish’. Configure the Output property to “Out to MIDI Yoke: 01” (click on the Output property box and select the MIDI output device from the drop down list) Next add a Rank element. Click on the add element icon, type “GrandOrgue Pedal” in the Name property and select Rank from the list of elements. Click on “Next”. Reference the Rank to the Output to GrandOrgue Sound element, and then click on “Finish”. Configure the -Channel property to “equal 0” [This must match the MIDI channel for the Pedal manual in GrandOrgue, remembering that jOrgan starts MIDI channels at 0, so jOrgan channel 0 is the same as GrandOrgue channel 1] Add a second Rank element. Name this rank “GrandOrgue Great” and reference it to the Output to GrandOrgue Sound element as well. Configure the Channel property to “equal 1” Add a third Rank element. Name this rank “GrandOrgue Swell”, reference it to the Output to GrandOrgue Sound element. Configure the Channel property to “equal 2” Add a fourth Rank element. Name this rank “GrandOrgue STOPS” and reference it to the Output to GrandOrgue Sound element. Configure the Channel property to “equal 4”. The rank elements that you have created configure the flow of the MIDI messages from jOrgan out to the Generic Sound element that is configured to the virtual MIDI port/device that GrandOrgue is configured to receive MIDI data from. Now add a Stop element. Enter “Pedals” in the Name property box and then select Stop from the list of elements. Click on Next. Now reference the Stop to the GrandOrgue Pedal Rank by clicking on GrandOrgue Pedal. Click on Finish. Then configure the Active property to “True” (click on the Active property box and select “True” from the drop down) Then add a second Stop element. Name the Stop “Great” and reference this one to the GrandOrgue Great Rank. Configure the Active property to “True” Add a third Stop element. Name the Stop “Swell” and reference it to the GrandOrgue Swell Rank. Configure the Active property to “True” Add a fourth Stop element. Name the Stop “Stop Changes” and reference it to the GrandOrgue STOPS Rank. Configure the Active property to “True” (You should now have four Stop elements that are referenced to the four Rank elements, channelling the flow of MIDI messages through to the specific channels configured for GrandOrgue) Now add a Keyboard element. Name the Keyboard “Pedal Manual” and reference it to the Pedals Stop. Configure the Input property to the jOrgan keyboard Add a second Keyboard element. Name the Keyboard “Great Manual” and reference it to the Great Stop. Configure the Input property to the jOrgan keyboard Then add a third Keyboard element. Name the Keyboard “Swell Manual” and reference it to the Swell Stop. Configure the Input property to the jOrgan keyboard\n\nNow the messages from the MIDI keyboards configured in jOrgan (currently coming from the jOrgan Keyboard) will be routed through to GrandOrgue via the Stop and Rank elements.\n\nThe next thing we need to do is create the Stop Changes activation Note On and Note Off messages to send to GrandOrgue... and we’ll use jOrgan Keyer elements to do this:\n\nAdd a Keyer element. Click on the add element icon, type \"Pedal Flute 8\" in the Name property and select “Keyer” from the list of elements. Click on “Next”. Reference the Keyer to the Stop Changes Stop element and click “Next”. Then reference the Keyer from the GrandOrgue Demo Console element (this will allow us to select a graphic from the classic skin to represent the Keyer of the console screen). Click on “Finish”. Change the Pitch property to \"1\" [this matches the StopControlMIDIKeyNumber=001 message in the [Stop001] definition of the GrandOrgue organ definition file]. Then click on the Skin tab and select the white with black writing Stop graphic. Position it to where you want it on the console screen\n\nThen add a second Keyer element named \"Great Bourdon 8\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"2\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it. Now add a third Keyer element, this time named \"Great Flute 4'\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"3\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it. Add a fourth Keyer element, this time named \"Pos Flute 8'\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"4\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it. Add a fifth Keyer element, this time named \"Pos Flute 4\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"5\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it.\n\nYou have now created 5 Keyer elements that send Note On and Note off messages from the jOrgan console to the Stop Changes controller in GrandOrgue. Each Note On and Note Off message is configured to the same MIDI note number as the StopControlMIDIKeyNumber=nnn of the Demo.organ organ definition file. Now let's test it...\n\nLoad the Demo Organ in GrandOrgue. Double check that the correct MIDI Yoke port is configured in GrandOrgue, and that the correct MIDI channels for the Manuals and Stop Changes have been selected (this was covered in the Getting Started section of this tutorial). Then in jOrgan, exit Construct Organ mode by clicking on the Construct icon. Click on ‘File’ in the top jOrgan menu and select ‘Customize’ to configure the MIDI channels for the keyboards as seen below: -add image- Once the keyboard channels are configured, click on ‘Finish’ to exit the customization. Now click on the Pedal Flute 8 stop on the jOrgan console... then take a look at the GrandOrgue screen. The Ped Flute 8 stop should now be active. If it is, play a few notes on the jOrgan keyboard (by clicking the keyboard notes with your mouse) in the lower two octaves of organ. You should hear the Flute pipes.\n\nNow right click once on the keys of the jOrgan keyboard and select ‘Channel 2’ from the popup menu (the MIDI data will now be sent to the Great manual). Click on the Great Bourdon 8’ stop, make sure it is activated in GrandOrgue, and then play some notes on the jOrgan keyboard. You should hear the Bourdon 8’ playing. Now click on the Great Flute 4’ in jOrgan, activating the Great Flute 4’ in GrandOrgue. Now play some notes with the jOrgan keyboard and you should hear the Bourdon and the Flute playing. If the stops are not activating, or you cannot hear the sound of the sampled pipes, please contact me (details at the end of the tutorial).\n\nIf things are working as they are supposed to, then continue with the next portion of the tutorial.\n\nNow that you have a working jOrgan front-end to GrandOrgue, let’s create some couplers for each of the manuals.\n\nAdd a Coupler element. Click on the add element icon, type \"Positif Octave\" in the Name property and select “Coupler” from the list of elements. Click on “Next” Reference the Coupler to the Swell Stop element and click “Next”. Then reference the Coupler from the Swell Manual and the GrandOrgue Demo Console element (click on one, then hold down the Ctrl key and click on the second one). Then click on “Finish” Then click on the Skin tab and select the white with black writing Stop graphic. Position the Coupler where you want it on the console screen.\n\nBy selecting the Swell Manual Keyboard element we receive the MIDI data arriving from the Swell keyboard. Referencing that data to the Swell Stop element sends the MIDI through to the Swell manual in GrandOrgue. Setting the Transpose property to 12 raises the MIDI data by an octave before it goes through to GrandOrgue, effectively creating an Octave coupler.\n\nAdd a Coupler element. Click on the add element icon, type \"Pos to G.O.\" in the Name property and select “Coupler” from the list of elements. Click on “Next”. Reference the Coupler to the Swell Stop element and click “Next”. Then reference the Coupler from the Great Manual and the GrandOrgue Demo Console. Then click on “Finish” Click on the Skin tab and select the white with black writing Stop graphic. Position the Coupler where you want it on the console screen\n\nAgain, by selecting the Great Manual Keyboard element we receive the MIDI data arriving from the Great keyboard, it is then reference to the Swell Stop, sending the MIDI data through to the Swell manual in GrandOrgue.\n\nAdd a Coupler element. Click on the add element icon, type \"G.O. to Ped\" in the Name property and select “Coupler” from the list of elements. Click on “Next”. Reference the Coupler to the Great Stop element and click “Next”. Then reference the Coupler from the Pedal Manual and the GrandOrgue Demo Console. Then click on “Finish” Click on the Skin tab and select the white with black writing Stop graphic. Position the Coupler where you want it on the console screen\n\nIn order to test and use the couplers, you will need to save your disposition and exit Construct mode. Simply click on the Save organ icon (computer diskette), and then the Construct icon.\n\nNow that you have Stops and Couplers visible on your jOrgan disposition (controlling the GrandOrgue Stop Changes and keyboards), the final thing do configure is linking a jOrgan swell pedal with a GrandOrgue swell pedal. Open the Demo.organ text file (the one that we opened and examined in the first section of this tutorial) in Notepad again. Locate the windchest configurations and find the one that controls the Swell manual: [WindchestGroup003]. Within that configuration is the Enclosure001=001 declaration. Just beneath that you will find the Enclosure configuration: [Enclosure001] Name=POS. EXP. AmpMinimumLevel=20 MIDIInputNumber=001 This controls the amplitude level of the swell, and which of the six GrandOrgue Enclosure controllers are used. The MIDIInputNumber=001 identifies this Swell pedal as GrandOrgue Enclosure 1. You can now close the Demo.organ file and go into the Audio Settings of organ in GrandOrgue (Audio -> Settings).\n\nClick on the Midi Messages Tab and locate the Enclosure 1 properties. Set the Channel property to ‘3’ and the Data property to ‘11’ You can click on OK in the Audio Settings window to finish the configuration.\n\nNow add a Continuous Filter element. Click on the add element icon, then type “Swell Expression” in the Name property. Select the Continuous Filter element from the list of elements. Click ‘Next’ and then select the GrandOrgue Demo console element and the GrandOrgue Swell rank. Then click ‘Finish’ Type ‘0.125’ into the Threshhold property, and ‘1’ into the Value property Now click on the Skin tab and select the Swell Expression with Label image\n\nEnter ‘set 178’ into the Status property of the Engaging message (this configures it to the Change Control message of MIDI Channel 3) Enter ‘set value | mult volume 127’ in the Data 2 property (this configures the expression amount that will be sent to the GrandOrgue Swell pedal) Finally, click on the Save icon, and exit Construct Organ mode by click on the Construct icon\n\nYou are now ready to test the Swell Pedal. Engage the Positif stops in jOrgan (and make sure they are engaged in GrandOrgue), then play some chords and move the Swell Expression controller up and down (click the mouse on the jOrgan swell expression and keep the mouse button down, then move the mouse up or down to decrease/increase the expression amount). If you are successful in getting all of this to work, congratulations! Please let us know so that we can celebrate with you :)"
    },
    {
        "link": "https://sourceforge.net/p/ourorgan/wiki/Home",
        "document": "How can I program the Midi-Settings for Stops to Send by Copying the current receive device? I program the Receive and attempt to copy to Send, but there is no respnse in Send. Do I have to manually enter the send data for each stop? I use Mojave in a MacBook Pro.\n\nAlso, when Listening for Event, the Upper Limit is 1, should I manually set it to 127?"
    },
    {
        "link": "https://diyorganconsole.wordpress.com/creating-grandorgue-organ-files-from-hauptwerk-samplesets",
        "document": "There are many sample sets available for Hauptwerk organ software that you might wish to use in GrandOrgue. It is possible to create the necessary GrandOrgue file with very little work using an open source java program called jMakeOdf Follow the link to download a copy of the necessary .jar file together with some examples. This page provides instructions and an example for how to do this for the Sonus Paradisi Buckeberg sample set, which is available as a free download from their site. It includes all the stops of the organ, with some limitations of which of the six channel sample files are available. You can also download a copy of the two files we will be creating, the input to jMakeOdf and the .organ file that it outputs here. We often refer to the created file as and ODF, or Organ Definition File\n\nThe example in this document is based on having a Linux operating system, so that symbolic links may be used. This allows an easy way to incorporate the tremulant samples, if they are provided. Linux also provides a wide variety of text editors and file managers. We will use Kwrite for text editing and Dolphin as a file manager.\n\nWe will assume only a stereo sample set is to be created. See the last section below for hints on doing a surround sound sample set.\n\nThe use of the linked version of jMakeOdf above is assumed, as this version is friendlier to blank lines and indentation of its source files\n\nWe assume that any changes to the main organ screen will be made manually to the .organ file that jMakeOdf creates. This includes the addition of labels, changes to drawknob colors and additional graphics such as maker labels or facades.\n\nThe example will use sampled Tremulant .wav files. For synthesized tremulants see the last section.\n\nSince this page was originally written, More options for creating ODFs have become available. ODFedit is a Python program with a Graphical user interface (GUI) that can be used to edit ODFs, but also will open a Hauptwerk organ definition (.xml file) and create a GrandOrgue ODF. Typically the created ODF needs editing, but generally the ranks are properly populated with pipes and the GUI panels are created correctly.\n\nAnother program is GOODF, which is a Windowed program that allows creation of ODFs from scratch or editing of existing ODFs It makes it easy to edit the ODF as there is a dedicated window for each type of element, such as enclosures, tremulants, ranks, manuals, stops, and switches. A help file is provided which provides guidance on how to use the program and you tube videos are also available. Neither of these approaches require the symbolic links described below, and so the ODF is more portable if you wish to share your work. GOODF is highly recommended, since it is under active development, has several you-tube videos describing how to use it, and adheres closely to the ODF formats prefered by GrandOrgue. My current practice is to open a Hauptwerk organ definition file with ODFedit, which then immediately saves a GrandOrgue .organ file as the ODF. I then use GOODF to open and edit the .organ file and create or correct the GUI elements and combine the tremulant samples with their associated non -tremmed rank instead of having the two separate ranks that ODFedit creates.\n\nThe sample set comes as a RAR archive, which may include more than one downloaded file. In some cases the sample set is multiple independent RAR files, but the Buckeberg sample comes as a master RAR file and 7 subsidiary files. Your Linux distribution will need the unrar package installed in order to use these files. At least in PLASMA based linux distributions you can examine and extract using the ark graphical archive manager.\n\nThe sample set should be extracted to your ~/GrandOrgue/Organ packages/ directory. For Buckeberg this will involve only extracting the 002306 directory from the RAR file. Your arc program may need to be configured to not create the full path shown in the archive. However, if you extract to the wrong place you can use Dolphin to move the directory to the proper location as a 002306 directory under the directory above.\n\nUnder the 002306 directory is a pipes directory. This is where all the samples are found, and is the only directory we will be concerned with when using jMakeOdf . We see, for example an …._OW directory, where the untremed samples for the oberwerk are stored and a …._OW_TR directory where the tremmed samples are stored.\n\nIf we look at the details of the samples associated with a stop we see that there are three directories, One with ORTF in the file name, One with AB, and one with ReaFar. The ORTF files are the direct samples, but for the free set, these are not included for all divisions. The AB are the near or diffuse samples and would normally go to the front speakers in a surround system, while the ReaFar samples would go to the rear speakers. Since we are assuming a stereo only .organ file, we can delete the ORTF and ReaFar directories leaving only the AB samples. Dolphin can be set up to delete rather than moving to trash, if you need to conserve diskspace, otherwise you can just empty your trash after every few deletions.\n\nWithin an AB directory we find several release folders labeled rel000220, etc. and the attack/loop files such as 0036-C.wav. In some instances the .wav files are not consistent in using upper case letters for the note name and the .wav . This will confuse jMakeOdf on linux systems, but is not a problem on windows systems which are case insensitive. See the last section for macros that can be run from the command line to change to all upper or all lower case file names.\n\nYou also see a directory named trem. This directory contains files unique to Hauptwerks synthesized tremulant. These are no use to us and will confuse jMakeOdf, so they must all be deleted as well.\n\nSince we are going to use sampled tremulants, we need to tell jMakeOdf where these samples are. To do this we insert links using dolphin. Double click on the AB directory so that dolphin is fully within that directory. right click within this directory and selecte create new -> Basic link to file or directory. This will pop up a window as shown below, where you name the link ‘trem’ and point it to the appropriate directory in the OW_tr directory. This directory can be picked graphically by clicking on the directory button in the pop up window. The picture shows the pop up window already filled in.\n\nNow the directory shows the trem link as a directory with and added symbol showing that its a link. you should be able to click on it and see the directory structure for the tremed samples:\n\nOnce all the symbolic links are in place the directory structures are ready for use. If you are not planning on sampled trems, don’t create the links.\n\nNow we need to create a file named “buckeburg.jmakeorgan in the 002306 directory. Open kwrite and immediately do a save to this location. We begin by entering some information about the organ. In this and following code segments a * indicates the beginning of a comment.\n\nThe first line is the organ name, and is the name of the .organ file that will be created Subsequent lines are more or less self explanetory. Middle drawstop rows and columns refer to places above the manual to put additionals stops, or more ussually, couplers. We will not be using switches, but see the end of this page for how to use them. We have no enclosures since this organ does not have any swell shades. normally the swell and choir divisions of modern organs would have enclosures.\n\nI am using modern terminology for the keyboards, so they correspond to the labels on my console. We have two tremulants, they are wave based (the alternative is ‘synth’) For any element that has a drawknob, including tremulants, there is information necessary to defining its behavior. Note that required elements are all separated by colons (:) For each tremulant the enties separated by colons are described in the code block below. The INPUT:0 line is used whenever the tremulant (or stop or coupler) is controlled by its own drawknob rather than a switch element drawknob\n\nThe windchests are needed so that stops and ranks can be assigned and enclosures and tremulants applied. The first arguement (for great and pedal) is the number of the enclosure for this windchest, the second arguement the number of tremulants. If there is an enclosure, the second arguement would instead be the enclosure number, the third the number of tremulants. For Swell and Choir we see that tremulants and their numbers are specified.\n\nThat gets rid of all the overall organ details for now. Next we specify the number of keyboards. Keyboards are specified from the bottom up, so an american three manual would normally be pedal, choir, great, and swell For each keyboard we specify the following in the definition line Name: abbr:number of keys, starting key midi number, and visibility. Noet that the abbreviations must be PED, I, II, III, etc. The following lines define the number of couplers, tremulants, switches, and stops associated with this keyboard. Note that I have not added any couplers because my console takes care of this. If not, you can use GrandOrgue’s built in coupler panels, or you can define your own here if you want some on the main console panel.\n\nIf couplers are defined, for each coupler the data is as follows: Coupler name:coupler type(N=normal, B=Bass, M=Melody):pitch shift (=,+,or-):abbr of keyboard to couple from (PED,I,II,II, etc):default to engaged?::is it displayed?:drawstop style:row:column:text wrap\n\nFor each stop, there is a separate three line entry as shown in the code below The first line defines the stop details with the following fields. Stop tab name:number of pipes: first pipe number:amplitude:harmonic number:pitch tuning:pitch correction:windchest number: is it percussive(ie chimes, noises):is it active at startup: is it visible:drawknob style:row:column:text wrap. Note that the harmonic number is 1 for a 64 foot stop, 2 for 16 foot, 4 for 8 foot, ….\n\nThe second line tells where to get the samples. Note that there can be more than one line here if one line doesn’t supply all the pipes. The data is as follows. number of pipes to load:Lxx where xx is the midi number to start loading at in the file names:path to .wav directory:should i load the release in the attack/loop sample?:is it percussive? Note that there are other options, including borrowing from other keyboards and stops to allow duplexing of ranks.\n\nThe final line is INPUT:0 if the stop is controlled by its own stopknob\n\nThis format is repeated for all the stops in the keyboard and for the additional keyboards\n\nFor this organ the final entry is\n\nOnce this file is completed and saved, open a command (or terminal) window in the 002306 directory (you can do this with dolphin, or open as you normally would and us cd commands to get there) and run the jmakeODF file. you may need to add a complete path to the jmakeodf.jar file if you haven’t placed it in the 002306. directory. Note that its important that the .jmakeorgan file is in the same directory as the .organ file will be, and also the same directory from which you specified the relative path to the individual stop’s wav directories. That is if you want the .organ file to reside in the ‘Organ packages’ directory, you need to put the .jmakeorgan file here as well, and specifiy a longer path to the wave directories\n\nExecute the following command from the terminal window:\n\nwhere …. represents the complete path to the .jar file. This should give the following output:\n\nOf course you may get error messages. The good news is it almost always shows the source line number where the problem is. Errors are usually the result of:\n• Can’t find the .wav files. Do you have an error in the path to the files?\n• Not enough pipes. Either the pipe directory doesn’t have enough entries, or your second line in the stop definition doesn’t match the number of pipes in the first line\n• Previous line is missing parameters that are required in the :param:param…. structure\n• This line is not in the correct place in the file. For example you may have specified more stops for the keyboard than you said. therfore the text for the next keyboard will try to be interpreted as a stop. Alternatively you specified more stops than you said, and a stop entry is trying to be interpreted as a keyboard.\n\nI suggest setting up grandorgue at first to not load samples. You can then click on the .organ file and grandorgue will parse it and show the organ panel you just created. At this point you can play with the stops to make sure there aren’t any overlaid on the same row/column position. that the stop names fit properly, and any error messages are corrected. This allow you to go back to the .jmakeorgan file and enter corrections.\n\nOnce the organ loads, then try to load the samples. you may get error messages, particularly if you forgot to delete one of the original trem directories. Once everything is working you can begin editing the .organ file to make the display look like you want.\n\nAt the very beginning of the .organ file you will find things to fill in: In particular the ? in the InfoFileName=? line will generate an error message. you can just remove the ? or you can point to an actual file.\n\nNext, you will want to search for ‘[panel’ to find the beginning of the graphics definitions:\n\nIn particular you may want to offset the stopknob columns and change some of the background colors.\n\nYou can add GUIElements to the end of the file for labels, pictures of the facade, etc, remember to increase the NumberOfGUIElements parameter at the bottom of the listing above. refer to the grandorgue help file to determine allowed parameters and syntax. While doing this it is again best to be able to load the organ without samples, so you can quickly see your GUI changes. You can also go and change the Colors of the stopknob text, using red for reeds, green for strings, etc.\n\nThe example above is rather simple as it has no expression and no switches or ranks. In order to create a .organ file with surround sound. The basic approach for surround sound is to load all the .wav files into rank elements rather than stop elements. Then the keyboards are defined with using stop elements that reference ranks and possibly switches\n\nAlternatively you can still use stops, but change how the pipes are found.\n\nyou may also want to create separate windchests for the surround elements, since you can then easily adjust to front:rear sound levels easily.\n\nHere is a snippets from other .jmakeorgan file, illustrating the concepts and other miscellaneous features:\n\nHere we see the Pedale definitions. Note that the second lines indicating where the pipes are coming from all begin with zero. The next parameter on the line defines the number of ranks. Note that the first two stops don’t have surround samples so they only use one rank; 29 and 30 respectively. The Montre 16 uses 2 ranks; 31 and 32 because it is using surround samples. Note the different syntax for the Violon Basse 16. It loads 32 samples from a set of samples already used on a different keyboard. in this case R1 tells it to load from this first pipe; II tells it to load from the GREAT keyboard, and 1 tells it to load from the first stop on the great keyboard.\n\nThe corresponding rank definitions are shown here: You can see that rank 32 loads the surround samples and is named with a trailing ‘s’ to keep track Since ranks aren’t displayed, the display parameters and visibility are not included.\n\nUsing switches is probably a cleaner way to proceed:\n\nhere we see switches defined before keyboards with parameters name:active?:visible?:stopknob styles:row:column\n\nThe tremulant logic switches in this case were used to select between tremmed and non-tremmed samples, which is not normally recommended. But you can see in the ‘notTrem Recit switch that the INPUT:0 has been replaced with not:1:1. This means that this switch is logically connected to the switch above it using a Not function with 1 input and that input is switch number 1. Note also that this switch is listed as initially active and not displayed, so there is no row and column information.\n\nThe corresponding keyboard definitions look like this:\n\nThe corresponding keyboard definition is:\n\nhere we see, for example that we now have 12 switches defined for this keyboard. The lines 12:5:6:7:… defines 12 switches and enumerates them. The Principal 8 stop references ranks 55 and 56, and is activated when switch 4 AND switch 5 are both active. Later on in the stops we will see a Principal 8 that references two tremmed ranks and is activated when switch 3 AND switch 5 are active. Since switch 4 is always the NOT of switch 3 only on of the tremmed or not tremmed stops are activated. Again I note that this is not the preferred way of implementing tremulants, but it does make a good illustration on how to use switches."
    },
    {
        "link": "https://sites.google.com/site/savirtualorgans/south-african-virtual-pipe-organ-project/jorgan-using-grandorgue-as-sound",
        "document": "GrandOrgue is a free open source pipe organ sample playing program that creates a very realistic audio VPO experience. The graphics and coupler/piston/swells/crescendo configuration are not as visually appealing nor as easy to configure as those in jOrgan, so I use jOrgan as a front-end to GrandOrgue and get the best of both worlds.\n\nUsing jOrgan as a front-end to GrandOrgue also means that we can mix sound source applications, so one could run a GrandOrgue organ and add fluidsynth stops to the sound in jOrgan. It is also possible to run multiple instances of GrandOrgue (let me know if you are interested in this) and route the audio to different audio cards or channels.\n\nIf you don’t already have GrandOrgue, download it from GrandOrgue on Sourceforge . In this tutorial I also use software MIDI connections provided by MIDI Yoke, so if you don’t already have MIDI Yoke installed, please download it from MidiOx Site and install it.\n\nI have provided a very simple GrandOrgue organ definition file for you to use with this tutorial. You can download it from jOrganGrandOrgue Tutorial.zip\n\nPlease familiarize yourself with the GrandOrgue organ definition file, as you will need to know where to make changes to your own GrandOrgue organ definition files. Open the Demo.organ file (it is located in the Organ folder) in Notepad and take note of the following things:\n\nThe first section Organ defines the organ name, screensize, number of possible stops, etc.\n\nThe next sections define the manuals and what ranks are configured to them Manual000, Manual001, and Manual002. Take note of the Ranks and the associate Stop numbers for each rank on each manual. For example, Stop001=001 ;Flute 8 on the Pedal manual means that the first pedal rank is configured to Stop definition 001, which is the Ped Flute 8 rank. Scroll down the file until you find Stop001. Here you will find name, number of pipes, the actual location of wave files loaded to create the rank, and the StopControlMIDIKeyNumber. The StopControlMIDIKeyNumber is the most important property for our purposes, as it defines the MIDI note number that controls that Stop. You will see that for the Ped Flute 8 rank, the property is set to MIDI note 001. Below the Manualxxx definitions you will find the wind chest and enclosure definitions. You won’t need to worry about these. I have also not included couplers in the organ definition file as you can use the jOrgan coupler elements more effectively than the native GrandOrgue couplers. Please go through each of the Stop definitions and find out which StopControlMIDIKeyNumber controls which Stop. We will use these values when you create a jOrgan disposition to control the Demo Organ.\n\nOnce you have familiarized yourself with the contents of the Demo.organ file. Start GrandOrgue and configure the MIDI device settings to receive MIDI message from “In From MIDI Yoke: 1”.\n\nYou will also need to configure your channel settings to match the ones that this tutorial is using.\n• None\n• None and the Stop Changes channel to MIDI channel 5.\n\nAt this stage it does not matter what your physical MIDI keyboard channels are as they will be configured in jOrgan.\n\nCreate Your Own jOrgan disposition to control the Demo Organ\n• None\n• None Run jOrgan and load the demo.disposition that is included in the download for this tutorial\n• None In the list of jOrgan elements you will find one item, the Console element. This element is used to define what skin (graphics) the organ screen will have, as well as the name of the organ, and the MIDI Input and Output of the items that will be configured on the screen. Click on the Console element to select it and display the empty properties of the blank console in the Properties tab below the list of elements\n• None . Configure the Console Skin property to the classic.zip skin (you can just type this in). Enter 'GrandOrgue Demo' in the Name property, jOrgan Keyboard in the Input property (click on the Input property box and select the jOrgan keyboard from the drop down), and leave the Output property blank.\n• None Click on the Skin tab to the right of the Elements column and select the wooden background as the Console background (If the Skin tab is not visible, enable it by selecting View from the main menu and clicking on ‘Skin’)\n• None Now add a Generic Sound element. Click on the add element icon, and then type “Output to GrandOrgue” in the Name property. Select the Generic Sound element from the list of elements and click ‘Finish’. Configure the Output property to “Out to MIDI Yoke: 01” (click on the Output property box and select the MIDI output device from the drop down list)\n• None Next add a Rank element. Click on the add element icon, type “GrandOrgue Pedal” in the Name property and select Rank from the list of elements. Click on “Next”. Reference the Rank to the Output to GrandOrgue Sound element, and then click on “Finish”. Configure the -Channel property to “equal 0” [This must match the MIDI channel for the Pedal manual in GrandOrgue, remembering that jOrgan starts MIDI channels at 0, so jOrgan channel 0 is the same as GrandOrgue channel 1]\n• None Add a second Rank element. Name this rank “GrandOrgue Great” and reference it to the Output to GrandOrgue Sound element as well. Configure the Channel property to “equal 1”\n• None Add a third Rank element. Name this rank “GrandOrgue Swell”, reference it to the Output to GrandOrgue Sound element. Configure the Channel property to “equal 2”\n• None Add a fourth Rank element. Name this rank “GrandOrgue STOPS” and reference it to the Output to GrandOrgue Sound element. Configure the Channel property to “equal 4”. The rank elements that you have created configure the flow of the MIDI messages from jOrgan out to the Generic Sound element that is configured to the virtual MIDI port/device that GrandOrgue is configured to receive MIDI data from.\n• None Now add a Stop element. Enter “Pedals” in the Name property box and then select Stop from the list of elements. Click on Next. Now reference the Stop to the GrandOrgue Pedal Rank by clicking on GrandOrgue Pedal. Click on Finish. Then configure the Active property to “True” (click on the Active property box and select “True” from the drop down)\n• None Then add a second Stop element. Name the Stop “Great” and reference this one to the GrandOrgue Great Rank. Configure the Active property to “True”\n• None Add a third Stop element. Name the Stop “Swell” and reference it to the GrandOrgue Swell Rank. Configure the Active property to “True”\n• None Add a fourth Stop element. Name the Stop “Stop Changes” and reference it to the GrandOrgue STOPS Rank. Configure the Active property to “True” (You should now have four Stop elements that are referenced to the four Rank elements, channelling the flow of MIDI messages through to the specific channels configured for GrandOrgue).\n• None Now add a Keyboard element. Name the Keyboard “Pedal Manual” and reference it to the Pedals Stop. Configure the Input property to the jOrgan keyboard\n• None Add a second Keyboard element. Name the Keyboard “Great Manual” and reference it to the Great Stop. Configure the Input property to the jOrgan keyboard\n• None Then add a third Keyboard element. Name the Keyboard “Swell Manual” and reference it to the Swell Stop. Configure the Input property to the jOrgan keyboard\n\nNow the messages from the MIDI keyboards configured in jOrgan (currently coming from the jOrgan Keyboard) will be routed through to GrandOrgue via the Stop and Rank elements.\n\nThe next thing we need to do is create the Stop Changes activation Note On and Note Off messages to send to GrandOrgue... and we’ll use jOrgan Keyer elements to do this:\n• None\n• None Add a Keyer element. Click on the add element icon, type \"Pedal Flute 8\" in the Name property and select “Keyer” from the list of elements. Click on “Next”. Reference the Keyer to the Stop Changes Stop element and click “Next”. Then reference the Keyer from the\n\nGrandOrgue Demo Console element (this will allow us to select a graphic from the classic skin to represent the Keyer of the console screen). Click on “Finish”. Change the Pitch property to \"1\" [this matches the StopControlMIDIKeyNumber=001 message in the [Stop001] definition of the GrandOrgue organ definition file]. Then click on the Skin tab and select the white with black writing Stop graphic. Position it to where you want it on the console screen\n• None\n• None Then add a second Keyer element named \"Great Bourdon 8\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"2\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it.\n• None Now add a third Keyer element, this time named \"Great Flute 4'\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"3\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it.\n• None Add a fourth Keyer element, this time named \"Pos Flute 8'\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"4\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it.\n• None Add a fifth Keyer element, this time named \"Pos Flute 4\", reference it to the Stop Changes Stop element and from the GrandOrgue Demo Console element. Change the Pitch property to \"5\". Then click on the Skin tab and select the white with black writing Stop graphic. Position it where you want it.\n\nYou have now created 5 Keyer elements that send Note On and Note off messages from the jOrgan console to the Stop Changes controller in GrandOrgue. Each Note On and Note Off message is configured to the same MIDI note number as the StopControlMIDIKeyNumber=nnn of the Demo.organ organ definition file. Now let's test it...\n\nLoad the Demo Organ in GrandOrgue. Double check that the correct MIDI Yoke port is configured in GrandOrgue, and that the correct MIDI channels for the Manuals and Stop Changes have been selected (this was covered in the Getting Started section of this tutorial). Then in jOrgan, exit Construct Organ mode by clicking on the Construct icon. Click on ‘File’ in the top jOrgan menu and select ‘Customize’ to configure the MIDI channels for the keyboards as seen below: -add image- Once the keyboard channels are configured, click on ‘Finish’ to exit the customization. Now click on the Pedal Flute 8 stop on the jOrgan console... then take a look at the GrandOrgue screen. The Ped Flute 8 stop should now be active. If it is, play a few notes on the jOrgan keyboard (by clicking the keyboard notes with your mouse) in the lower two octaves of organ. You should hear the Flute pipes.\n\nNow right click once on the keys of the jOrgan keyboard and select ‘Channel 2’ from the popup menu (the MIDI data will now be sent to the Great manual). Click on the Great Bourdon 8’ stop, make sure it is activated in GrandOrgue, and then play some notes on the jOrgan keyboard. You should hear the Bourdon 8’ playing. Now click on the Great Flute 4’ in jOrgan, activating the Great Flute 4’ in GrandOrgue. Now play some notes with the jOrgan keyboard and you should hear the Bourdon and the Flute playing. If the stops are not activating, or you cannot hear the sound of the sampled pipes, please contact me (details at the end of the tutorial).\n\nIf things are working as they are supposed to, then continue with the next portion of the tutorial.\n\nNow that you have a working jOrgan front-end to GrandOrgue, let’s create some couplers for each of the manuals.\n• None\n• None Add a Coupler element. Click on the add element icon, type \"Positif Octave\" in the Name property and select “Coupler” from the list of elements. Click on “Next”\n• None Reference the Coupler to the Swell Stop element and click “Next”. Then reference the Coupler from the Swell Manual and the GrandOrgue Demo Console element (click on one, then hold down the Ctrl key and click on the second one). Then click on “Finish”\n• None In the Properties tab, change the Transpose property to “12”\n• None Then click on the Skin tab and select the white with black writing Stop graphic. Position the Coupler where you want it on the console screen.\n\nBy selecting the Swell Manual Keyboard element we receive the MIDI data arriving from the Swell keyboard. Referencing that data to the Swell Stop element sends the MIDI through to the Swell manual in GrandOrgue. Setting the Transpose property to 12 raises the MIDI data by an octave before it goes through to GrandOrgue, effectively creating an Octave coupler.\n• None\n• None Add a Coupler element. Click on the add element icon, type \"Pos to G.O.\" in the Name property and select “Coupler” from the list of elements. Click on “Next”.\n• None Reference the Coupler to the Swell Stop element and click “Next”. Then reference the Coupler from the Great Manual and the GrandOrgue Demo Console. Then click on “Finish”\n• None Click on the Skin tab and select the white with black writing Stop graphic. Position the Coupler where you want it on the console screen\n\nAgain, by selecting the Great Manual Keyboard element we receive the MIDI data arriving from the Great keyboard, it is then reference to the Swell Stop, sending the MIDI data through to the Swell manual in GrandOrgue.\n• None\n• None Add a Coupler element. Click on the add element icon, type \"G.O. to Ped\" in the Name property and select “Coupler” from the list of elements. Click on “Next”.\n• None Reference the Coupler to the Great Stop element and click “Next”. Then reference the Coupler from the Pedal Manual and the GrandOrgue Demo Console. Then click on “Finish”\n• None Click on the Skin tab and select the white with black writing Stop graphic. Position the Coupler where you want it on the console screen\n\nNow that you have created three couplers following these directions, use the knowledge that you have gained to create three more:\n\nIn order to test and use the couplers, you will need to save your disposition and exit Construct mode. Simply click on the Save organ icon (computer diskette), and then the Construct icon.\n\nNow test the disposition to make sure that things are working.\n\nAs before, if you need help, please contact me using the jOrgan forum (jorgan-user(at)lists.sourceforge.net) or at ggoode (dot) sa (at) gmail (dot) com .\n\nNow that you have Stops and Couplers visible on your jOrgan disposition (controlling the GrandOrgue Stop Changes and keyboards), the final thing do configure is linking a jOrgan swell pedal with a GrandOrgue swell pedal. Open the Demo.organ text file (the one that we opened and examined in the first section of this tutorial) in Notepad again. Locate the windchest configurations and find the one that controls the Swell manual: [WindchestGroup003]. Within that configuration is the Enclosure001=001 declaration. Just beneath that you will find the Enclosure configuration: [Enclosure001] Name=POS. EXP. AmpMinimumLevel=20 MIDIInputNumber=001 This controls the amplitude level of the swell, and which of the six GrandOrgue Enclosure controllers are used. The MIDIInputNumber=001 identifies this Swell pedal as GrandOrgue Enclosure 1. You can now close the Demo.organ file and go into the Audio Settings of organ in GrandOrgue (Audio -> Settings).\n• None\n• None Click on the Midi Messages Tab and locate the Enclosure 1 properties.\n• None Double click on Enclosure 1 to open the MIDI configuration window\n• None Set the Channel property to ‘3’ and the Data property to ‘11’\n• None Click on ‘OK’ (This sets GrandOrgue up to receive Change Control MIDI messages from the standard Expression pedal setting (CC 11) on MIDI channel\n• None You can click on OK in the Audio Settings window to finish the configuration.\n\nNow we can create the Swell controller within your Demo.disposition in jOrgan:\n• None\n• None Go into Construct Organ Mode [click on the icon]\n• None Now add a Continuous Filter element. Click on the add element icon, then type “Swell Expression” in the Name property. Select the Continuous Filter element from the list of elements. Click ‘Next’ and then select the GrandOrgue Demo console element and the GrandOrgue Swell rank. Then click ‘Finish’\n• None Type ‘0.125’ into the Threshhold property, and ‘1’ into the Value property\n• None Now click on the Skin tab and select the Swell Expression with Label image\n• None Position the Continuous Filter where you want it on the console screen\n\nThe next step is to configure the MIDI messages to send\n• None\n• None Then select Engaging from the list of possible MIDI messages\n• None Enter ‘set 178’ into the Status property of the Engaging message (this configures it to the Change Control message of MIDI Channel 3)\n• None Enter ‘set 11’ into the Data 1 property (this configures it to send CC 11 – Expression midi messages)\n• None Enter ‘set value | mult volume 127’ in the Data 2 property (this configures the expression amount that will be sent to the GrandOrgue Swell pedal)\n• None Finally, click on the Save icon, and exit Construct Organ mode by click on the Construct icon\n\nYou are now ready to test the Swell Pedal. Engage the Positif stops in jOrgan (and make sure they are engaged in GrandOrgue), then play some chords and move the Swell Expression controller up and down (click the mouse on the jOrgan swell expression and keep the mouse button down, then move the mouse up or down to decrease/increase the expression amount). If you are successful in getting all of this to work, congratulations! Please let us know so that we can celebrate with you :)\n\nYour next assignment is to take another GrandOrgue organ (like the Stiehr Mockers – Jeuxdorgues2 from www.jeuxdorgues.com) and create your own jOrgan front end to it..."
    },
    {
        "link": "https://github.com/GrandOrgue/grandorgue/discussions/978",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://organforum.com/forums/forum/organ-building-repair-restoration/virtual-organs/791910-grandorgue-midi-keyboard-setup",
        "document": ""
    },
    {
        "link": "https://organforum.com/forums/forum/organ-building-repair-restoration/virtual-organs/835254-basic-set-up-advice-for-use-with-grandorgue-software",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/organ/comments/19cjc3y/more_grandorguehauptwerk_questions_which_midi",
        "document": "For people using Hauptwerk or GO, which MIDI keyboard do you use? I'm trying to slowly put together some things I need to get [I have nothing at the moment!], and a MIDI keyboard is first on my list.\n\nWhich keyboards are you using or are recommended? And are they semi-weighted or unweighted?\n\nMy main concern is getting something that feels horrible and flimsy. The Yamaha GH3 keyboard I was using on my Clavinova was really nice [but obviously had fully-weighted keys].\n\nAny advice would be welcome."
    },
    {
        "link": "https://justanswer.com/electronic-musical-instruments/owshx-i-m-trying-use-grandorgue-virtual-organ-digital.html",
        "document": "I'm trying use Grandorgue virtual organ with my digital piano but so far no luck. I only was able to play sounds through\n\nCustomer: I'm trying use Grandorgue virtual organ with my digital piano but so far no luck\n\nTechnician's Assistant: I understand that you're having trouble using Grandorgue virtual organ with your digital piano. Can you please tell me what specific issues or error messages you are encountering?\n\n Customer: i only was able to play sounds through the piano as a speaker\n\nTechnician's Assistant: Have you successfully used Grandorgue with any other devices or software before?\n\n Customer: no\n\nTechnician's Assistant: OK. Thanks for the info. And, how would you like to connect with the Instrument Technician - phone call or online chat?\n\n Customer: what is the cost?"
    },
    {
        "link": "https://jonathangazeley.com/2023/03/02/my-midi-pipe-organ-workflow",
        "document": "I’ve written a couple of times about playing about with a MIDI-enabled pipe organ and I’ve shared some of my results on YouTube. Today I want to say a bit about my workflow because a few people have asked, and it is a somewhat complicated but hopefully interesting.\n\nThis isn’t supposed to be instructional: this is just some notes about the way I’ve found that works for me. I’ll give some examples and demonstrate progress as we go along by working on a public domain piece, Prelude and Fugue in C major (BWV 553) by Johann Sebastian Bach.\n\nIf you want to play along with this guide, you will need:\n• an installation of OrganAssist, configured for your organ\n• an installation of GrandOrgue, configured for your organ (optional)\n\nThe first thing I do when I decide I want to make the organ play something is obtain a score. I have three options:\n\nAs well as being an notation editor app, MuseScore allows musicians to upload their own compositions to musescore.com, and it also contains various public domain works. There are also some copyrighted works with various licensing options.\n\nWhen I’ve found an arrangement I like, as I’m a paid-up MuseScore Pro member, I can download the score directly in MuseScore format.\n\nHere’s my score for BWV 553 on MuseScore, and for reference here’s the first line.\n\nIf the work is only in physical form (a book or sheet score) then the only option is to manually enter it into MuseScore. There are various options for scanning it and getting MuseScore to “recognise” the notes, but I have found this inaccurate, and it takes as long to correct the mistakes as it does to just enter the music by hand.\n\nI created my MuseScore version of the score by manually entering the notation from a physical book.\n\nThe last option is to import an ordinary MIDI file into MuseScore. The success of this method varies wildly depending on the quality and complexity of the original MIDI file, but you can often end up with an unreadable score that needs a lot of cleanup.\n\nNo matter which of the three methods for getting a score you chose, you should now have a score in MuseScore. You will likely have to do some editing and arrangement to make it suitable for pipe organ.\n\nOrgan music arranged for humans would typically be written on 2 or 3 staves – right hand, left hand and optionally feet – and it is up to the organist to interpret the score and decide which manual (keyboard) to play each section on. There are often (but not always) written notes to tell the organist what to do.\n\nBut to a computer, an organ is several instruments – each manual (keyboard) and the pedalboard is its own instrument. So we need to arrange our score in this way – one stave for each manual, and we must pre-determine which manual each section will be played back on.\n\nThe specific organ I am arranging for has a Great manual, a Swell manual and a Pedal, so I need to arrange my score for 3 parts, the Swell and Great parts having 2 staves each and the Pedal part having 1 stave. In my own lingo I refer to this as SSGGP.\n\nHere’s my version of BWV 553 re-arranged for SSGGP, and the first line for quick reference again.\n\nNote that I have had to take out the convenient repeat and interpret the 1st on Sw, 2nd on Gt direction as playing the entire section through twice, once on each manual.\n\nFinally, I export the MuseScore project as a MIDI file, which can be consumed by OrganAssist.\n\nNow I import this MIDI file into the OrganAssist library. The first thing it asks me to do is map the MIDI tracks to the organ manuals. We exported as SSGGP so that’s how we’ll set the mapping for import.\n\nIf we play this back now, the organ will make no sound, because although the keys are being pressed, no stops are drawn. We need to tell OrganAssist which stops we want it to use, which is something the human organist would decide when they played the piece on a real organ. In this case, the front of the book of Eight Short Preludes and Fugues gives this advice:\n\nBWV 553 has a direction of mf, so let’s set those stops accordingly. Following the suggested registrations in the table, and knowing what I have available on the organ at St Mary’s, I’ve chosen these stops:\n\nTo add these stops, we will use the OrganAssist editor. You can see the notes in a “piano roll” style view. Right click in the upper part of the screen to add stop changes and coupler changes. This obviously depends on your specific organ.\n\nThe editor view in OrganAssist shows notes in the main part of the screen, colour coded by manual (green for Swell, blue for Great, purple for Pedal). The top area is for events such as switching on or off stops, couplers, tremulants and any other controls the organ might have. Here I’ve turned on a bunch of stops at the beginning, and about two-thirds of the way across I’ve switched off the Swell to Pedal coupler, and switched on the Great to Pedal coupler, so the pedal notes are always coupled to the manual that is being currently played with the hands.\n\nThis step can be done away from the actual organ, as OrganAssist has rudimentary sound output which is sufficient to check for wrong notes, etc.\n\nIf everything so far has been done properly, I should be ready for a first listening. No doubt there will be snags that show up when I listen to it, and I’ll probably want to make some tweaks.\n\nThe organ may be MIDI-controlled, but the mechanical components are still made of wood and leather and operated by springs and solenoids and pressurised air, so a little bit of latency creeps in\n\nThis video shows the score being played back on the organ at St Mary’s Church, Fishponds.\n\nChanges to stops and small changes to durations of notes are easy to tweak in OrganAssist. Anything more usually means going back to MuseScore, editing there, and doing the export and import process again.\n\nAs I said above, OrganAssist only offers rudimentary playback when not attached to a real organ. It’s good enough for basic testing but not much good for hearing what it might sound like. Sure, I can go into the church and play the organ sometimes, but it would be nice have an approximation of the sound at home.\n\nThis is where GrandOrgue comes in. It’s a Virtual Pipe Organ (VPO) which is a virtual recreation of a pipe organ which receives input via MIDI – just like the real thing!\n\nGrandOrgue uses real recordings of every single pipe on a real organ. Together these are known as a sampleset. Various samplesets are available online, some free, and some commercial. I haven’t (yet) had a chance to sample the organ at St Mary’s, so for now I am using a composite sampleset with similar-sounding stops taken from two free samplesets (Friesach by Piotr Grabowski, and Skinner op. 497 by Sonus Paradisi), and a basic graphical interface created with Organ Builder.\n\nIt takes a few minutes to configure a GrandOrgue organ to map the stop on/off events etc but after this is done, OrganAssist can play back through GrandOrgue via a MIDI loopback port, and make a surprisingly realistic sound. I can now make meaningful decisions about which stops to add to my OrganAssist scores at home.\n\nIn this video, OrganAssist (in the background) is “playing” the virtual organ by sending MIDI events, which GrandOrgue (in the corner) is receiving and generating the sound, using samples of real organ pipes.\n\nI think this is a pretty good approximation of the real organ at St Mary’s – certainly good enough for playing around with at home."
    }
]