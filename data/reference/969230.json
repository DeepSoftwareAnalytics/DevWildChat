[
    {
        "link": "https://autohotkey.com/docs/v1/KeyList.htm",
        "document": "Note: The names of the letter and number keys are the same as that single letter or digit. For example: b is and 5 is .\n\nAlthough any single character can be used as a key name, its meaning (scan code or virtual keycode) depends on the current keyboard layout. Additionally, some special characters may need to be escaped or enclosed in braces, depending on the context. [v1.1.27+]: The letters a-z or A-Z can be used to refer to the corresponding virtual keycodes (usually vk41-vk5A) even if they are not included in the current keyboard layout.\n\nDue to system behavior, the following keys separated by a slash are identified differently depending on whether is ON or OFF. If is OFF but is pressed, the system temporarily releases and acts as though is ON.\n\nThe function assigned to each of the keys listed below can be overridden by modifying the Windows registry. This table shows the default function of each key on most versions of Windows.\n\n. This is the key that invokes the right-click context menu. or + . While is held down, produces the key code of and produces , so use in hotkeys instead of . Deprecated: Use the synonym instead. . This probably doesn't exist on most keyboards. It's usually not the same as . . Note that the sleep key on some keyboards might not work with this. Specify for nnn the scan code of a key. Recognizes unusual keys not mentioned above. See Special Keys for details. Specify for nn the hexadecimal virtual key code of a key. This rarely-used method also prevents certain types of hotkeys from requiring the keyboard hook. For example, the following hotkey does not use the keyboard hook, but as a side-effect it is triggered by pressing either or NumpadHome: ^VK24::MsgBox You pressed Home or NumpadHome while holding down Control. Known limitation: VK hotkeys that are forced to use the keyboard hook, such as or , will fire for only one of the keys, not both (e.g. NumpadHome but not ). For more information about the VKnn method, see Special Keys. Warning: Only Send, GetKeyName(), GetKeyVK(), GetKeySC() and #MenuMaskKey support combining VKnn and SCnnn. [v1.1.27+]: The presence of an invalid suffix prevents VKnn from being recognized. For example, raises an error in v1.1.27+, but was ignored (had no effect) in previous versions.\n\nNote: For historical reasons, the following button and control names begin with , which stands for joystick. However, they usually also work for other game controllers such as gamepads or steering wheels.\n\nJoy1 through Joy32: The buttons of the controller. To help determine the button numbers for your controller, use this test script. Note that hotkey prefix symbols such as ^ (control) and + (shift) are not supported (though GetKeyState can be used as a substitute). Also note that the pressing of controller buttons always \"passes through\" to the active window if that window is designed to detect the pressing of controller buttons.\n\nAlthough the following control names cannot be used as hotkeys, they can be used with GetKeyState:\n• JoyX, JoyY, and JoyZ: The X (horizontal), Y (vertical), and Z (altitude/depth) axes of the stick.\n• JoyR: The rudder or 4th axis of the stick.\n• JoyU and JoyV: The 5th and 6th axes of the stick.\n• JoyName: The name of the controller or its driver.\n• JoyButtons: The number of buttons supported by the controller (not always accurate).\n• JoyAxes: The number of axes supported by the controller.\n• JoyInfo: Provides a string consisting of zero or more of the following letters to indicate the controller's capabilities: Z (has Z axis), R (has R axis), U (has U axis), V (has V axis), P (has POV control), D (the POV control has a limited number of discrete/distinct settings), C (the POV control is continuous/fine). Example string: ZRUVPD\n\nFor example, when using Xbox Wireless/360 controllers, JoyX/JoyY is the left stick, JoyR/JoyU the right stick, JoyZ the left and right triggers, and JoyPOV the directional pad (D-pad).\n\nMultiple controllers: If the computer has more than one controller and you want to use one beyond the first, include the controller number (max 16) in front of the control name. For example, 2joy1 is the second controller's first button.\n\nNote: If you have trouble getting a script to recognize your controller, specify a controller number other than 1 even though only a single controller is present. It is unclear how this situation arises or whether it is normal, but experimenting with the controller number in the controller test script can help determine if this applies to your system.\n• Controller remapping: Methods of sending keystrokes and mouse clicks with a controller.\n\nRespond to signals from hand-held remote controls via the WinLIRC client script.\n\nIf your keyboard or mouse has a key not listed above, you might still be able to make it a hotkey by using the following steps:\n• Ensure that at least one script is running that is using the keyboard hook. You can tell if a script has the keyboard hook by opening its main window and selecting \"View->Key history\" from the menu bar.\n• Double-click that script's tray icon to open its main window.\n• Press one of the \"mystery keys\" on your keyboard.\n• Scroll down to the bottom of the page. Somewhere near the bottom are the key-down and key-up events for your key. NOTE: Some keys do not generate events and thus will not be visible here. If this is the case, you cannot directly make that particular key a hotkey because your keyboard driver or hardware handles it at a level too low for AutoHotkey to access. For possible solutions, see further below.\n• If your key is detectable, make a note of the 3-digit hexadecimal value in the second column of the list (e.g. 159).\n• To define this key as a hotkey, follow this example: SC159:: ; Replace 159 with your key's value. MsgBox, %A_ThisHotkey% was pressed. return\n\nReverse direction: To remap some other key to become a \"mystery key\", follow this example:\n\nAlternate solutions: If your key or mouse button is not detectable by the Key History screen, one of the following might help:\n• Reconfigure the software that came with your mouse or keyboard (sometimes accessible in the Control Panel or Start Menu) to have the \"mystery key\" send some other keystroke. Such a keystroke can then be defined as a hotkey in a script. For example, if you configure a mystery key to send + , you can then indirectly make that key as a hotkey by using in a script.\n• Try AHKHID. You can also try searching the forum for a keywords like , or .\n• The following is a last resort and generally should be attempted only in desperation. This is because the chance of success is low and it may cause unwanted side-effects that are difficult to undo:\n\n Disable or remove any extra software that came with your keyboard or mouse or change its driver to a more standard one such as the one built into the OS. This assumes there is such a driver for your particular keyboard or mouse and that you can live without the features provided by its custom driver and software.\n\nSome configurations of Windows IME (such as Japanese input with English keyboard) use CapsLock to toggle between modes. In such cases, CapsLock is suppressed by the IME and cannot be detected by AutoHotkey. However, the + , + and + shortcuts can be disabled with a workaround. Specifically, send a key-up to modify the state of the IME, but prevent any other effects by signalling the keyboard hook to suppress the event. The following function can be used for this purpose:\n\nAfter copying the function into a script or saving it as SendSuppressedKeyUp.ahk in a function library, it can be used as follows:"
    },
    {
        "link": "https://autohotkey.com",
        "document": "AutoHotkey provides a simple, flexible syntax allowing you to focus more on the task at hand rather than every single little technicality. It supports not only the popular imperative-procedural paradigm, but also object-oriented and command-based programming.\n\nHere are a few simple examples:"
    },
    {
        "link": "https://autohotkey.com/docs/hotkeys.htm",
        "document": "Hotkeys are sometimes referred to as shortcut keys because of their ability to easily trigger an action (such as launching a program or keyboard macro). In the following example, the hotkey + is configured to launch Notepad. The pound sign [#] stands for , which is known as a modifier key:\n\nIn the final line above, serves to finish the hotkey. However, if a hotkey needs to execute only a single line, that line can be listed to the right of the double-colon. In other words, the is implicit:\n\nTo use more than one modifier with a hotkey, list them consecutively (the order does not matter). The following example uses to indicate + + :\n\nYou can use the following modifier symbols to define hotkeys:\n\n[v1.0.48.01+]: For Windows Vista and later, hotkeys that include (e.g. #a) will wait for to be released before sending any text containing an keystroke. This prevents usages of Send within such a hotkey from locking the PC. This behavior applies to all sending modes except SendPlay (which doesn't need it) and blind mode. [v1.1.29+]: Text mode is also excluded. Note: Pressing a hotkey which includes may result in extra simulated keystrokes ( by default). See #MenuMaskKey. Note: Pressing a hotkey which includes may result in extra simulated keystrokes ( by default). See #MenuMaskKey. An ampersand may be used between any two keys or mouse buttons to combine them into a custom hotkey. See below for details. Use the left key of the pair. e.g. <!a is the same as !a except that only the left will trigger it. Use the right key of the pair. (alternate graph, or alternate graphic). If your keyboard layout has instead of a right key, this series of symbols can usually be used to stand for . For example: Alternatively, to make itself into a hotkey, use the following hotkey (without any hotkeys like the above present): Wildcard: Fire the hotkey even if extra modifiers are being held down. This is often used in conjunction with remapping keys or buttons. For example: *#c::Run Calc.exe ; Win+C, Shift+Win+C, Ctrl+Win+C, etc. will all trigger this hotkey. *ScrollLock::Run Notepad ; Pressing ScrollLock will trigger this hotkey even when modifier key(s) are down. Wildcard hotkeys always use the keyboard hook, as do any hotkeys eclipsed by a wildcard hotkey. For example, the presence of would cause to always use the hook. When the hotkey fires, its key's native function will not be blocked (hidden from the system). In both of the below examples, the user's click of the mouse button will be sent to the active window: ~RButton::MsgBox You clicked the right mouse button. ~RButton & C::MsgBox You pressed C while holding down the right mouse button. Unlike the other prefix symbols, the tilde prefix is allowed to be present on some of a hotkey's variants but absent on others. However, if a tilde is applied to the prefix key of any custom combination which has not been turned off or suspended, it affects the behavior of that prefix key for all combinations. Special hotkeys that are substitutes for alt-tab always ignore the tilde prefix. [v1.1.14+]: If the tilde prefix is applied to a custom modifier key (prefix key) which is also used as its own hotkey, that hotkey will fire when the key is pressed instead of being delayed until the key is released. For example, the ~RButton hotkey above is fired as soon as the button is pressed. Prior to [v1.1.14] (or without the tilde prefix), it was fired when the button was released, but only if the RButton & C combination was not activated. If the tilde prefix is applied only to the custom combination and not the non-combination hotkey, the key's native function will still be blocked. For example, in the script below, holding will show the tooltip and will not trigger a context menu: AppsKey::ToolTip Press < or > to cycle through windows. AppsKey Up::ToolTip ~AppsKey & <::Send !+{Esc} ~AppsKey & >::Send !{Esc} If at least one variant of a keyboard hotkey has the tilde modifier, that hotkey always uses the keyboard hook. This is usually only necessary if the script uses the Send command to send the keys that comprise the hotkey itself, which might otherwise cause it to trigger itself. The $ prefix forces the keyboard hook to be used to implement this hotkey, which as a side-effect prevents the Send command from triggering it. The $ prefix is equivalent to having specified somewhere above the definition of this hotkey. The $ prefix has no effect for mouse hotkeys, since they always use the mouse hook. It also has no effect for hotkeys which already require the keyboard hook, including any keyboard hotkeys with the tilde (~) or wildcard (*) modifiers, key-up hotkeys and custom combinations. To determine whether a particular hotkey uses the keyboard hook, use ListHotkeys. [v1.1.06+]: #InputLevel and SendLevel provide additional control over which hotkeys and hotstrings are triggered by the Send command. The word UP may follow the name of a hotkey to cause the hotkey to fire upon release of the key rather than when the key is pressed down. The following example remaps the left to become the left : \"Up\" can also be used with normal hotkeys as in this example: . It also works with combination hotkeys (e.g. ) Limitations: 1) \"Up\" does not work with controller buttons; and 2) An \"Up\" hotkey without a normal/down counterpart hotkey will completely take over that key to prevent it from getting stuck down. One way to prevent this is to add a tilde prefix (e.g. ) \"Up\" hotkeys and their key-down counterparts (if any) always use the keyboard hook. On a related note, a technique similar to the above is to make a hotkey into a prefix key. The advantage is that although the hotkey will fire upon release, it will do so only if you did not press any other key while it was held down. For example: LControl & F1::return ; Make left-control a prefix by using it in front of \"&\" at least once. LControl::MsgBox You released LControl without having used it to modify any other key.\n\nNote: See the Key List for a complete list of keyboard keys and mouse/controller buttons.\n\nMultiple hotkeys can be stacked vertically to have them perform the same action. For example:\n\nA key or key-combination can be disabled for the entire system by having it do nothing. The following example disables the right-side :\n\nThe directives #IfWinActive/Exist and #If can be used to make a hotkey perform a different action (or none at all) depending on a specific condition. For example:\n\nNormally shortcut key combinations consist of optional prefix/modifier keys (Ctrl, Alt, Shift and LWin/RWin) and a single suffix key. The standard modifier keys are designed to be used in this manner, so normally have no immediate effect when pressed down.\n\nA custom combination of two keys (including mouse but not controller buttons) can be defined by using \" & \" between them. Because they are intended for use with prefix keys that are not normally used as such, custom combinations have the following special behavior:\n• The prefix key loses its native function, unless it is a standard modifier key or toggleable key such as .\n• If the prefix key is also used as a suffix in another hotkey, by default that hotkey is fired upon release, and is not fired at all if it was used to activate a custom combination. : If there is both a key-down hotkey and a key-up hotkey, both hotkeys are fired at once. The fire-on-release effect is disabled if the tilde prefix is applied to the prefix key in at least one active custom combination or the suffix hotkey itself.\n\nNote: For combinations with standard modifier keys, it is usually better to use the standard syntax. For example, use rather than .\n\nIn the below example, you would hold down Numpad0 then press the second key to trigger the hotkey:\n\nThe prefix key loses its native function: In the above example, Numpad0 becomes a prefix key; but this also causes Numpad0 to lose its original/native function when it is pressed by itself. To avoid this, a script may configure Numpad0 to perform a new action such as one of the following:\n\nFire on release: The presence of one of the above custom combination hotkeys causes the release of Numpad0 to perform the indicated action, but only if you did not press any other keys while Numpad0 was being held down. [v1.1.14+]: This behaviour can be avoided by applying the tilde prefix to either hotkey.\n\nModifiers: Unlike a normal hotkey, custom combinations act as though they have the wildcard (*) modifier by default. For example, will activate even if or is held down when and are pressed, whereas would be activated only by + and not + + .\n\nCombinations of three or more keys are not supported. Combinations which your keyboard hardware supports can usually be detected by using #If and GetKeyState(), but the results may be inconsistent. For example:\n\nKeyboard hook: Custom combinations involving keyboard keys always use the keyboard hook, as do any hotkeys which use the prefix key as a suffix. For example, causes to always use the hook.\n\nNumLock, CapsLock, and ScrollLock: These keys may be forced to be \"AlwaysOn\" or \"AlwaysOff\". For example: .\n\nOverriding Explorer's hotkeys: Windows' built-in hotkeys such as + (#e) and + (#r) can be individually overridden simply by assigning them to an action in the script. See the override page for details.\n\nSubstitutes for Alt-Tab: Hotkeys can provide an alternate means of alt-tabbing. For example, the following two hotkeys allow you to alt-tab with your right hand:\n\nFor more details, see Alt-Tab.\n\nHotkeys that fire upon turning the mouse wheel are supported via the key names WheelDown and WheelUp. Here are some examples of mouse wheel hotkeys:\n\n[v1.0.48+]: WheelLeft and WheelRight are also supported, but have no effect on operating systems older than Windows Vista. Some mice have a single wheel which can be scrolled up and down or tilted left and right. Generally in those cases, WheelLeft or WheelRight signals are sent repeatedly while the wheel is held to one side, to simulate continuous scrolling. This typically causes the hotkeys to execute repeatedly.\n\n[v1.0.43.03+]: The built-in variable A_EventInfo contains the amount by which the wheel was turned, which is typically 1. However, A_EventInfo can be greater or less than 1 under the following circumstances:\n• If the mouse hardware reports distances of less than one notch, A_EventInfo may contain 0;\n• If the wheel is being turned quickly (depending on type of mouse), A_EventInfo may be greater than 1. A hotkey like the following can help analyze your mouse: .\n\nSome of the most useful hotkeys for the mouse wheel involve alternate modes of scrolling a window's text. For example, the following pair of hotkeys scrolls horizontally instead of vertically when you turn the wheel while holding down the left :\n\nFinally, since mouse wheel hotkeys generate only down-events (never up-events), they cannot be used as key-up hotkeys.\n\nEach numpad key can be made to launch two different hotkey subroutines depending on the state of . Alternatively, a numpad key can be made to launch the same subroutine regardless of the state. For example:\n\nIf the tilde (~) symbol is used with a prefix key even once, it changes the behavior of that prefix key for all combinations. For example, in both of the below hotkeys, the active window will receive all right-clicks even though only one of the definitions contains a tilde:\n\nThe Suspend command can temporarily disable all hotkeys except for ones you make exempt. For greater selectivity, use #IfWinActive/Exist.\n\nBy means of the Hotkey command, hotkeys can be created dynamically while the script is running. The Hotkey command can also modify, disable, or enable the script's existing hotkeys individually.\n\nController hotkeys do not currently support modifier prefixes such as ^ (Ctrl) and # (Win). However, you can use GetKeyState to mimic this effect as shown in the following example:\n\nThere may be times when a hotkey should wait for its own modifier keys to be released before continuing. Consider the following example:\n\nPressing + + would cause the system to behave as though you pressed + + (due to the system's aggressive detection of this hotkey). To work around this, use KeyWait to wait for the keys to be released; for example:\n\nIf a hotkey label like produces an error like \"Invalid Hotkey\", your system's keyboard layout/language might not have the specified character (\"Z\" in this case). Try using a different character that you know exists in your keyboard layout.\n\nA hotkey label can be used as the target of a Gosub or Goto. For example: . See Labels for related details.\n\nOne common use for hotkeys is to start and stop a repeating action, such as a series of keystrokes or mouse clicks. For an example of this, see this FAQ topic.\n\nFinally, each script is quasi multi-threaded, which allows a new hotkey to be launched even when a previous hotkey subroutine is still running. For example, new hotkeys can be launched even while a message box is being displayed by the current hotkey.\n\nAlt-Tab hotkeys simplify the mapping of new key combinations to the system's Alt-Tab hotkeys, which are used to invoke a menu for switching tasks (activating windows).\n\nEach Alt-Tab hotkey must be either a single key or a combination of two keys, which is typically achieved via the ampersand symbol (&). In the following example, you would hold down the right and press or to navigate the alt-tab menu:\n\nAltTab and ShiftAltTab are two of the special commands that are only recognized when used on the same line as a hotkey. Here is the complete list:\n\nAltTab: If the alt-tab menu is visible, move forward in it. Otherwise, display the menu (only if the hotkey is a combination of two keys; otherwise, it does nothing).\n\nShiftAltTab: Same as above except move backward in the menu.\n\nAltTabAndMenu: If the alt-tab menu is visible, move forward in it. Otherwise, display the menu.\n\nTo illustrate the above, the mouse wheel can be made into an entire substitute for Alt-tab. With the following hotkeys in effect, clicking the middle button displays the menu and turning the wheel navigates through it:\n\nTo cancel the Alt-Tab menu without activating the selected window, press or send . In the following example, you would hold the left and press to display the menu and advance forward in it. Then you would release the left to activate the selected window, or press the mouse wheel to cancel. Define the AltTabWindow window group as shown below before running this example.\n\nIf the script sent (such as to invoke the Alt-Tab menu), it might also be necessary to send as shown in the example further below.\n\nCurrently, all special Alt-tab actions must be assigned directly to a hotkey as in the examples above (i.e. they cannot be used as though they were commands). They are not affected by #IfWin or #If.\n\nAn alt-tab action may take effect on key-down and/or key-up regardless of whether the keyword is used, and cannot be combined with another action on the same key. For example, using both and is unsupported.\n\nCustom alt-tab actions can also be created via hotkeys. As the identity of the alt-tab menu differs between OS versions, it may be helpful to use a window group as shown below. For the examples above and below which use , this window group is expected to be defined in the auto-execute section. Alternatively, can be replaced with the appropriate for your system.\n\nIn the following example, you would press to display the menu and advance forward in it. Then you would press to activate the selected window, or press to cancel:\n\nOne or more hotkeys can be assigned a function by simply defining it immediately after the hotkey label as in this example:\n\n[v1.1.28+]: Hotstrings can also be defined this way. Multiple hotkeys or hotstrings can be stacked together to call the same function.\n\nThere must only be whitespace, comments or directives between the hotkey/hotstring labels or label and the function. Hotkey/hotstring labels defined this way are not visible to IsLabel(), Gosub or other commands; however, the auto-execute section ends at the first hotkey/hotstring even if it is assigned a function.\n\nThe main benefit of using a function is that local variables can be used, which avoids conflicts when two or more hotkeys use the same variable names for different purposes. It also encourages self-documenting hotkeys, like in the code above where the function name describes the hotkey.\n\nThe Hotkey command can also be used to assign a function or function object to a hotkey."
    },
    {
        "link": "https://autohotkey.com/docs",
        "document": ""
    },
    {
        "link": "https://autohotkey.com/docs/v1/Tutorial.htm",
        "document": "\n• The Basics\n• How to find the help file on your computer\n• Variables\n• When to use percents\n• Other Helpful Goodies\n• Asking for Help\n\nBefore we begin our journey, let me give some advice. Throughout this tutorial you will see a lot of text and a lot of code. For optimal learning power, it is advised that you read the text and the code. Then, study the code. You can copy and paste most examples on this page. If you get confused, try reading the section again.\n\nSince you're viewing this documentation locally, you've probably already installed AutoHotkey and can skip to section b.\n\nBefore learning to use AutoHotkey (AHK), you will need to download it. After downloading it, you may possibly need to install it. But that depends on the version you want. For this guide we will use the Installer since it is easiest to set up.\n• Go to the AutoHotkey Homepage: https://www.autohotkey.com/\n• During installation of AutoHotkey, you will be asked to choose from UNICODE or ANSI. In short, you would probably want to choose UNICODE. It has support for non-English letters and numbers (characters). Keep going until you see an Install button.\n• Once done, great! Continue on to section b.\n\nFor a video instruction, watch Install and Hello World on YouTube.\n\nOnce you have AutoHotkey installed, you will probably want it to do stuff. AutoHotkey is not magic, we all wish it was, but it is not. So we will need to tell it what to do. This process is called \"Scripting\".\n• Find \"New\" in the menu.\n• Give the script a new name. It must end with a .ahk extension. For example: MyScript.ahk\n• Find the newly created file on your desktop and right-click it.\n• A window should have popped up, probably Notepad. If so, SUCCESS! So now that you have created a script, we need to add stuff into the file. For a list of all built-in commands, function and variables, see section 5. Here is a very basic script containing a hotkey which types text using the Send command when the hotkey is pressed: We will get more in-depth later on. Until then, here's an explanation of the above code:\n• The first line: is the hotkey. means , is the letter . Anything to the of are the keys you need to press.\n• The second line: is how you keystrokes. is the command, anything after the comma (,) will be typed.\n• The third line: . This will become your best friend. It literally code from going any further, to the lines below. This will prevent many issues when you start having a lot of stuff in your scripts.\n• Double-click the file/icon in the desktop to run it. Open notepad or (anything you can type in) and press and .\n• Hip Hip Hooray! Your first script is done. Go get some reward snacks then return to reading the rest of this tutorial.\n\nFor a video instruction, watch Install and Hello World on YouTube.\n\nc. You cannot merge commands\n\nWhen you are making your code, you might have the urge to put several commands on the same line or inside of each other, don't. In section 5 we'll talk about why it doesn't work as you might expect and what you can do instead.\n\nd. How to find the help file on your computer\n\nThere are a few ways to do this, I'll assume you have it installed to the default locations:\n• Find and click the Start button on your screen, usually in the lower left.\n• Click All apps (formerly All Programs), if necessary.\n• You should then see AutoHotkey Help File. Click it.\n• Find This PC (formerly My Computer or Computer) in the left pane. Click it.\n• Go into your harddrive that contains AutoHotkey. Probably C:\\ drive.\n• Search within all Program Files folders for AutoHotkey.\n• Look for AutoHotkey.chm or a file that says AutoHotkey and has a yellow question mark on it.\n\nWhat is a hotkey? A hotkey is a key that is hot to the touch. ... Just kidding. It is a key or key combination that the person at the keyboard presses to trigger some actions. For example:\n\nWhat is a hotstring? Hotstrings are mainly used to expand abbreviations as you type them (auto-replace), they can also be used to launch any scripted action. For example:\n\nThe difference between the two examples is that the hotkey will be triggered when you press + while the hotstring will convert your typed \"ftw\" into \"Free the whales\".\n\n\"So, how exactly does a person such as myself create a hotkey?\" Good question. A hotkey is created by using a single pair of colons. The key or key combo needs to go on the of the . And the content needs to go below, followed by a .\n\nNote: There are exceptions, but those tend to cause confusion a lot of the time. So it won't be covered in the tutorial, at least, not right now.\n\nA hotstring has a pair of colons on each side of the text you want to trigger the text replacement. While the text to replace your typed text goes on the of the second pair of colons.\n\nHotstrings, as mentioned above, can also launch scripted actions. That's fancy talk for \"do pretty much anything\". Same with hotkeys.\n\nA nice thing to know is that you can have many lines of code for each hotkey, hotstring, label, and a lot of other things we haven't talked about yet.\n\nYou might be wondering \"How the crud am I supposed to know that ^ means ?!\". Well, good question. To help you learn what ^ and other symbols mean, gaze upon this chart:\n\nAdditionally, for a list of all/most hotkey names that can be used on the side of a hotkey's double-colon, see List of Keys, Mouse Buttons, and Controller Controls.\n\nYou can define a custom combination of two (and only two) keys (except controller buttons) by using between them. In the example below, you would hold down Numpad0 then press Numpad1 or Numpad2 to trigger one of the hotkeys:\n\nBut you are now wondering if hotstrings have any cool modifiers since hotkeys do. Yes, they do! Hotstring modifiers go between the first set of colons. For example:\n\nVisit Hotkeys and Hotstrings for additional hotkey and hotstring modifiers, information and examples.\n\nSometime you might want a hotkey or hotstring to only work (or be disabled) in a certain window. To do this, you will need to use either of these fancy commands with a # in-front of them:\n\nThese special commands (technically called \"directives\") create context-sensitive hotkeys and hotstrings. Simply specify a window title. But in some cases you might want to specify criteria such as HWND, group or class. Those are a bit advanced and are covered more in-depth here: The WinTitle Parameter & the Last Found Window.\n\nTo turn off context sensitivity for subsequent hotkeys or hotstrings, specify any #IfWin directive but leave all of its parameters blank. For example:\n\nWhen #IfWin directives are never used in a script, all hotkeys and hotstrings are enabled for all windows.\n\nThe #IfWin directives are positional: they affect all hotkeys and hotstrings physically beneath them in the script. They are also mutually exclusive; that is, only the most recent one will be in effect.\n\nFor more in-depth information and similar commands, check out the #IfWinActive page.\n\nThis, for some reason crosses some people's minds. So I'll set it clear: AutoHotkey has the ability to have hotkeys and hotstrings in one file as you want. Whether it's 1, or 3253 (or more).\n\nThe above code is perfectly acceptable. Multiple hotkeys, multiple hotstrings. All in one big happy script file.\n\nSo now you decided that you want to send (type) keys to a program. We can do that. Use the Send command. This command literally sends keystrokes, to simulate typing or pressing of keys.\n\nBut before we get into things, we should talk about some common issues that people have.\n\nJust like hotkeys, the Send command has special keys too. Lots and lots of them. Here are the four most common symbols:\n\nThe gigantic table on the Send page shows pretty much every special key built-in to AHK. For example: and .\n\nCaution: This table apply to hotkeys. Meaning, you do not wrap or (or any other key) inside curly brackets when making a hotkey.\n\nAn example showing what shouldn't be done to a hotkey:\n\nA common issue lots of people have is, they assume that the curly brackets are put in the documentation pages just for fun. But in fact . It's how AHK knows that means \"exclamation point\" and not \"press \". So please remember to check the table on the Send page and make sure you have your brackets in the right places. For example:\n\nAnother common issue is that people think that needs to be wrapped in brackets with the Send command. That is FALSE. If it's not in the chart, it does not need brackets. You do need to wrap common letters, numbers or even some symbols such as (period) in curly brackets. Also, with the Send commands you are able to send more than one letter, number or symbol at a time. So no need for a bunch of Send commands with one letter each. For example:\n\nTo hold down or release a key, enclose the key name in curly brackets and then use the word UP or DOWN. For example:\n\nBut now you are wondering \"How can I make my really long Send commands readable?\". Easy. Use what is known as a continuation section. Simply specify an opening parenthesis on a new line, then your content, finally a closing parenthesis on its own line. For more information, read about Continuation Sections.\n\nNote: There are several different forms of Send. Each has their own special features. If one form of Send does not work for your needs, try another type of Send. Simply replace the command name \"Send\" with one of the following: SendRaw, SendInput, SendPlay, SendEvent. For more information on what each one does, read this.\n\nThis is important: Some games, especially multiplayer games, use anti-cheat programs. Things like GameGuard, Hackshield, PunkBuster and several others. Not only is bypassing these systems in violation of the games policies and could get you banned, they are complex to work around.\n\nIf a game has a cheat prevention system and your hotkeys, hotstrings and Send commands do not work, you are out of luck. However there are methods that can increase the chance of working in some games, but there is no magical \"make it work in my game now!!!\" button. So try of these before giving up.\n\nThere are also known issues with DirectX. If you are having issues and you know the game uses DirectX, try the stuff described on the FAQ page. More DirectX issues may occur when using PixelSearch, PixelGetColor or ImageSearch. Colors might turn out black (0x000000) no matter the color you try to get. You should also try running the game in windowed mode, if possible. That fixes some DirectX issues.\n\nThere is no single solution to make AutoHotkey work in all programs. If everything you try fails, it may not be possible to use AutoHotkey for your needs.\n\nTo run a program such as mspaint.exe, calc.exe, script.ahk or even a folder, you can use the Run command. It can even be used to open URLs such as https://www.autohotkey.com/. If your computer is setup to run the type of program you want to run, it's very simple:\n\nThere are some other advanced features as well, such as command line parameters and CLSID. If you want to learn more about that stuff, visit the Run page.\n\nHere are a few more samples:\n\nFor more in-depth information and examples, check out the Run page.\n\nAutoHotkey has two main types of things used by the scripter to create code: Commands and functions.\n\nA list of all commands and built-in functions can be found here.\n\nYou can tell what a command is by looking at its syntax (the way it looks). Commands do not use parentheses around the parameters like functions do. So a command would look like this:\n\nWhen using commands, you cannot squish other commands onto the same line as a previous command (exception: IfEqual). You cannot put commands inside the parameters of other commands. For example:\n\nCommands also differ from function in that they use \"legacy syntax\". This means that you percent signs around a variable, such as , and that any text and numbers do not need to be in quotation marks, such as This is some text . Additionally, you cannot do math in the parameters, unlike functions.\n\nYou can do math in parameters if you force an expression with a single , but that will not be covered.\n\nAs stated above, functions are different because they use parentheses. A typical function looks like:\n• You can do math in them:\n• Variables do not need to be wrapped in percent signs:\n• Functions can go inside of functions:\n• Text needs to be wrapped in quotes:\n\nA function usually return a value differently than a command does. Commands need an OutputVar parameter, functions do not. The most common way assigning the return value of a function to a variable is like so:\n\nThis isn't the only way, but the most common. You are using to store the return value of the function that is to the right of the operator. See Functions for more details.\n\nCode blocks are lines of code surrounded by little curly brackets ( and ). They group a section of code together so that AutoHotkey knows it's one big family and that it needs to stay together. They are most often used with functions and control flow statements such as If and Loop. Without them, only the first line in the block is called.\n\nIn the following code, both lines are run only if MyVar equals 5:\n\nIn the following code, the message box is only shown if MyVar equals 5. The script will always exit, even if MyVar 5:\n\nThis is perfectly fine since the if-statement only had one line of code associated with it. It's exactly the same as above, but I outdented the second line so we know it's separated from the if-statement:\n\nVariables are like little post-it notes that hold some information. They can be used to store text, numbers, data from functions and commands or even mathematical equations. Without them, programming and scripting would be much more tedious.\n\nVariables can be assigned a few ways. We'll cover the most common forms. Please pay attention to the equal sign ( ).\n\nEqual signs (=) with a symbol in front of it such as etc. are called assignment operators and always require an expression.\n\na. When to use percents\n\nOne of the most common issues with AutoHotkey involving variables is when to use the percent signs (%). Hopefully this will clear some confusion.\n\nWhen to use percent signs:\n• When you are using commands (see above), except when the parameter is OutputVar or InputVar.\n• When you are assigning a value to a variable using the legacy mode (an equal sign with no symbol in front of it).\n\nWhen to use percent signs:\n• In parameters that are input or output variables. For example:\n• On the left side of an assignment:\n• On the left side of legacy (non-expression) if-statements:\n• Everywhere in expressions. For example:\n\nSometimes you want to have the user to choose the value of stuff. There are several ways of doing this, but the simplest way is InputBox. Here is a simple example on how to ask the user a couple of questions and doing some stuff with what was entered:\n\nObjects are a way of organizing your data for more efficient usage. Sometimes objects are referred to as arrays, but it's important to note that all arrays are just objects. We call objects different things depending on what we are using them for, but all objects are the same.\n\nAn object is basically a collection of variables. The variable names are known as \"Keys\", and the contents of the variables are \"Values\".\n\nWhen you hear people calling an object an array or indexed array, it usually means that all the keys are sequential numbers 1 and up. When you hear people calling an object an associative array, it means that the keys are either strings (text) or non-sequential numbers. Sometimes it's a mix of both, and sequential numbers too!\n\nThere are no restrictions to what a key or value can be, and they can even be other arrays! When the values are arrays too, this is referred to as a nested array, and these will be explained later.\n\nThere are a number of reasons you might want to use an object for something. Some examples:\n• You want to have a numbered list of things, such as a grocery list (this would be referred to as an indexed array)\n• You want to represent a grid, perhaps for a board game (this would be done with nested objects)\n• You have a list of things where each thing has a name, such as the characteristics of a fruit (this would be referred to as an associative array)\n\nThere are a few ways to create an object, and the most common ones are listed below:\n\nIt's important to remember that every one of these definitions all create the same thing (objects), just with different keys.\n\nThere are many ways to use objects, including retrieving values, setting values, adding more values, and more.\n\nTo add new keys and values\n\nWe have reached the end of our journey, my good friend. I hope you have learned something. But before we go, here are some other things that I think you should know. Enjoy!\n\nThroughout the documentation, you will see these two symbols ( and ) surrounding code in the yellow syntax box at the top of almost all pages. Anything inside of these brackets are . Meaning the stuff inside can be left out if you don't need them. When writing your code, it is very important to type the square brackets in your code.\n\nOn the ControlGetText page you will see this:\n\nSo you could simply do this if you wanted:\n\nOr add in some more details:\n\nWhat if you wanted to use ExcludeTitle but not fill in WinText or WinTitle? Simple!\n\nPlease note that you cannot IGNORE parameters, but you can leave them blank. If you were to ignore , it would look like this and cause issues:\n\nRun this code to see your AHK version:\n\nOr look for \"AutoHotkey Help File\" or \"AutoHotkey.chm\" in the start menu or your installation directory.\n\nTrial and Error is a very common and effective way of learning. Instead of asking for help on every little thing, sometimes spending some time alone (sometimes hours or days) and trying to get something to work will help you learn faster.\n\nIf you try something and it gives you an error, study that error. Then try to fix your code. Then try running it again. If you still get an error, modify your code some more. Keep trying and failing until your code fails no more. You will learn a lot this way by reading the documentation, reading errors and learning what works and what doesn't. Try, fail, try, fail, try, try, try, fail, fail, succeed!\n\nThis is how a lot of \"pros\" have learned. But don't be afraid to ask for help, we don't bite (hard). Learning takes time, the \"pros\" you encounter did not learn to be masters in just a few hours or days.\n\n\"If at first you don't succeed, try, try, try again.\" - Hickson, William E.\n\nThis stuff (indentation) is very important! Your code will run perfectly fine without it, but it will be a major headache for you and other to read your code. Small code (25 lines or less) will probably be fine to read without indentation, but it'll soon get sloppy. It's best you learn to indent ASAP. Indentation has no set style, but it's best to keep everything consistent.\n\n\"What is indentation?\" you ask? It's simply spacing to break up your code so you can see what belongs to what. People usually use 3 or 4 spaces or 1 tab per \"level\".\n\nSee Wikipedia's Indentation style page for various styles and examples. Choose what you like or learn to indent how you think it's easiest to read.\n\ne. Asking for Help\n\nBefore you ask, try doing some research yourself or try to code it yourself. If that did not yield results that satisfy you, read below.\n• Don't be afraid to ask for help, even the smartest people ask others for help.\n• Don't be afraid to show what you tried, even if you think it's silly.\n• Post anything you have tried.\n• Pretend everyone but you is a doorknob and knows nothing. Give as much information as you can to educate us doorknobs at what you are trying to do. Help us help you.\n\nIf you don't get an answer right away, wait at least 1 day (24 hours) before asking for more help. We love to help, but we also do this for free on our own time. We might be at work, sleeping, gaming, with family or just too busy to help.\n\nAnd while you wait for help, you can try learning and doing it yourself. It's a good feeling, making something yourself without help."
    },
    {
        "link": "https://reddit.com/r/AutoHotkey/comments/cf4c0w/what_have_you_automated_so_far_with_ahk",
        "document": "I'm interested to hear what programs - scripts have you made to automate your repetitive tasks :)\n\nI'm sure many would love to read & learn about your experiences & ideas! :)"
    },
    {
        "link": "https://reddit.com/r/AutoHotkey/comments/lvzqlx/share_your_most_useful_ahk_scripts_my_huge",
        "document": "I've just had an idea. I'm going to share my ahk script filled with useful shortcuts, and then in the replies, you share some of your scripts! I'm in dire need of repurposing some of my function keys\n\nThat´s about it. Like I said before, it'd be cool of you leave in the comments your favorite/most useful scripts, maybe something to repurpose the function keys, Pause/Break, and Scroll Lock. Thanks Again!"
    },
    {
        "link": "https://quora.com/What-are-some-of-the-most-useful-AutoHotKey-scripts-for-automating-every-day-tasks",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://the-automator.com/automate-any-program-with-ui-automation",
        "document": "This is freaking amazing news! 😲😲😲 UI Automation is finally “easy” in AutoHotkey. Here is a link to the class mentioned in the video. And this is the code on git\n\nTo get access, purchase an All Access Pass here.\n\nHow to eaily get the text under the mouse in most Windows Programs❗\n\n🔥 Discover the secret to effortlessly using UIAutomation with AHK 🙌🏼\n\n\n\n😲Mind blowing way to Connect to the DOM with UIA & WebScrape\n\n \\\n\n🔥Master UIAutomation : Learn how to interact with controls like a pro💪\n\nAlso go here to review the UIA YouTube Playlist (but below should be a list of all of the videos)\n\n1) How to easily automate nearly any program with the UI Automation API\n\n2) Automating a program where your element doesn’t have a name with UI Automation and AutoHotkey\n\n4) UI Automation patterns & Other GREAT tips for UIA [MUST WATCH❗]\n\n5) Automating Chromium based tools with UI Automation: Descolada wows us again!\n\n6) How to Automate Chrome with UIA\n\n7) How to easily access properties from UIA"
    },
    {
        "link": "https://talk.automators.fm/t/autohotkey-script-examples/1101",
        "document": "EDIT: there are 3 timestamp lines. Modified the explanation accordingly. I thought I’d post a few Autohotkey scripts on this thread to see if there’s any interest in perhaps posting more of them. LMK if you think this is useful or if there are specific things you want to see. This first one is very simple and straightforward. It’s based on Brett Terpstra’s “What Was I Doing?” workflow. It:\n• Appends that update to a text file with today’s date\n• Note that the text file “lived” in the same folder I pointed ResophNotes at. In Mac speak that’s “… same folder I pointed NVAlt at”.\n• I called this script using the keybinding . The keybinding appears in a separate thread of Autohotkey, and this script file was called once the keybinding was invoked.\n• Line 5 … generates the input box with window title “Task Capture”. The two numbers give the size of the box (width and height).\n• Line 9 … the heart of the script. FileAppend does exactly what its title says: it takes the text in the second argument and appends it to the file in the last argument. If the file exists, it uses that file. If the file does not exist, it creates a new one. So every month a new file is added.\n\n Line 11 … gives a little bubble at the system tray to let me know the operation executed properly\n\nThis next one is an example of a script that moves and resizes a particular window. This one took the main Outlook window, moved it to Monitor 2 (Widows designates monitor numbers rather than Mac’s numbering from left to right), and resized it to fit. As with many of my scripts, this one was tied to a keybinding. I had a foreground thread of Autohotkey with the keybinding that called this script, and this script ran and then quit. To break down the script:\n• Line 3 … checks local memory for a process with the same name and kills it if one exists.\n• Lines 5-17 … clears variables. Variables don’t need to be separately defined.\n• Lines 22 … the command gets info from the system. In this case, it asks how many monitors are connected and stores the resulting integer in the variable .\n• Line 23 … asks the system what are the dimensions of Monitor 2. It returns 4 values: LEFT, RIGHT, TOP, BOTTOM. Those values are stored in variables derived from the original variable as and so on. Note that SysGet counts in pixels from far left to far right. So if you have 2 monitors that are 1024 x 768, the right hand monitor’s left edge is pixel 1025. It also counts from top to bottom in pixels.\n• Lines 28-32 … activates and brings the Outlook window to the front. The commands relaxes the matching to “window title contains”. asks the system whether there’s a window who’s title contains “Outlook”. The first will activate any existing window with “Outlook” in the title (the one closest to the top of the alt-tab stack if there are multiple windows). The second one will launch Outlook if no existing window is found (at least I think that’s how its supposed to work).\n• Line 38 … re-invoking is almost definitely not needed, but it always made me feel better.\n• Line 39 … makes sure there are two monitors before attempting to move the window to monitor 2. On Windows, if you move an application window by one screen off the left or right side, it will stay there. At least it did when I last checked a year or so ago.\n• Line 40-41 … figure out the dimensions of monitor 2 and resize the Outlook window accordingly. This meant that I could have different monitors on my desk at work and home and use the same script for both.\n• Line 42 … calculate the x coordinate for the top left corner of the Outlook Window. Start at the left edge of the second monitor, add half of the horizontal available space of the monitor, then subtract half of the width of the Outlook window.\n• Line 43 … same, but for y coordinate.\n• Line 44 … Moves the window using the calculations from above. There’s more info in the documentation for , but the second argument is the title of the window to move (remember that from line 38 allows for fuzzy match). The empty argument is there for any words to exclude from the title match, so you could use “windows containing Outlook but without calendar”. Helpful if you want like to have multiple windows of the same app open.\n• Line 47 … is the Outlook keyboard shortcut to switch to the Inbox.\n• I had a series of these for most major apps: Outlook, OneNote, Notepad++, Chrome, Skype, etc. Each script was its own text file.\n• Just like with Workflow.app, these can be combined. For example, I had one script that moved Outlook to the main monitor, moved Chrome to the second monitor, switched Chrome to my Todoist tab, and then re-activated Outlook to make it the foreground program. With one keybinding I could set up my workspace to process emails. That was done by calling 4 scripts in series.\n• I had other combinations that set up my workspace for processing tasks, for working on tasks, doing PPT with Excel, etc.\n• I also had one that would return Skype to the top left corner of the right-hand monitor, which is where I prefer it to be. ; Move Outlook Window Monitor 2 #SingleInstance force ;------------------------------------- ; Clear Variables ;------------------------------------- num_monitors = Mon2_Bound_ = Mon2_Bound_left = Mon2_Bound_right = Mon2_Bound_top = Mon2_Bound_bottom = outlook_dual_x = outlook_dual_y = outlook_width = outlook_height = ;------------------------------------- ; Get details on monitors ;------------------------------------- sysget, num_monitors, MonitorCount SysGet, Mon2_Bound_, Monitor, 2 ;------------------------------------- ; Activate Outlook Window ;------------------------------------- SetTitleMatchMode, 2 IfWinExist, Outlook WinActivate ; else WinActivate ; ;------------------------------------- ; Move Outlook Window ;------------------------------------- settitlematchmode, 2 if (num_monitors = 2) { outlook_width := (Mon2_bound_right - mon2_bound_left) * 0.85 outlook_height := mon2_bound_bottom * 0.92 outlook_dual_x := mon2_bound_left + (Mon2_bound_right - mon2_bound_left)/2 - outlook_width/2 outlook_dual_y := Mon2_bound_bottom/2 - outlook_height/2 winmove, Outlook, , outlook_dual_x, outlook_dual_y, outlook_width, outlook_height } sendinput ^1 ExitApp\n\nThis next one is fun because it was inspired by @David’s “Thank You / You’re Welcome” TextExpander group. I wrote this before TextExpander on Windows was a thing. It would have been a lot easier to write the script as a series of simple text replacements, but I used it as an excuse to learn about arrays and loops, because, you know, geek. To break down the script …\n• Lines 11-23 … adds the array elements. I defined this one as a 2D array with 4 rows for each column in the table. I can’t remember why I put the single letters in the first column, but it looks like I never use them in the rest of the script. After that is the name of the language, the text of “thank you”, and the text of “you’re welcome”.\n• Line 25 … defines a string that gets used in the pop-up selector box in line 27. Looking at this again, it would have been more elegant to do a function to define the names.\n• Lines 27-29 … Defines the GUI pop-up box. Line 27 defines the overall box and assigns the output to the variable . Note that the is there to define it as a variable. Line 28 defines the buttons being pressed. Line 29 gives the window title.\n• Line 30 … is much like an output command. If you give no argument for , it simply terminates the script. To be honest, I’m not entirely sure why it is here, but I know the script doesn’t work without it.\n• Lines 32-35 … tells the script what ro do once the pop-up box is closed\n\n Line 37 … takes 3 arguments: the variable into which the split content goes, the variable that has the content to be split, and the delimiter used to make the splits. is a built-in Autohotkey variable that is a space, so in this example the script takes the contents of the variable from the picker box in line 27, splits it at every space, and puts the output into the variable . Autohotkey will add ordinal numbers to the end of for each of the split sub-strings ( gets everything up to the first space, gets everything from the first to the second spaces, etc).\n\n Lines 39-44 … tests whether I wanted “Thank You” or “You’re welcome”. will always have 2 letters, either “TY” or “YW”. The nested statements assign the column number for the array in the variable . The last statement is there as a check in case there was an error.\n• Lines 46-52 … goes into the array and pulls out the appropriate phrase. It cycles through the array and tries to match the language selected (which is in ) to the language in the array col 2. Once it matches, it pulls out the phrase wanted. Note the convention is the same as , namely that it gives the content of the variable instead of the variable as a thing to manipulate.\n\n Line 54 … gives the output by typing.\n• This method works well for anything that you could represent as a multi-column table from which you want to look up values. Its particularly nice because you only have to define the output items in one place, and the rest of the script is pretty much reusable.\n• Some examples of other scripts I have include an emoji picker, a symbol picker, contexts for task mangement systems, email addresses, often used mailing addresses, an even for my phone numbers.\n• I also have one that gives me multiple options for how to format the current date. ; Thank You / You're Welcome Picker #SingleInstance force j = 0 k = 0 lang_choice = lang_options = TYYWArray := Object() TYYWArray.Insert([\"c\",\"Chinese\",\"Xiexie\",\"Bu Keqi\"]) TYYWArray.Insert([\"a\",\"Farsi\",\"Mamnunam\",\"Khahesh mikonam\"]) TYYWArray.Insert([\"f\",\"French\",\"Merci beaucoup\",\"De rien\"]) TYYWArray.Insert([\"g\",\"German\",\"ich danke Ihnen sehr\",\"Bitte sehr\"]) TYYWArray.Insert([\"h\",\"Hindi\",\"dhanyavad\",\"koi bat nahin\"]) TYYWArray.Insert([\"i\",\"Italian\",\"grazie mille\",\"prego\"]) TYYWArray.Insert([\"j\",\"Japanese\",\"domo arigato gozaimasu\",\"do itashimashitev\"]) TYYWArray.Insert([\"k\",\"Korean\",\"kamsahamnida\",\"anieyo\"]) TYYWArray.Insert([\"p\",\"Portuguese\",\"muito obrigado\",\"Nao ha de que\"]) TYYWArray.Insert([\"r\",\"Russian\",\"Spasibo bolshoe\",\"Dobro pozhalovat\"]) TYYWArray.Insert([\"s\",\"Spanish\",\"muchas gracias\",\"de nada\"]) TYYWArray.Insert([\"t\",\"Turkish\",\"Tesekkur ederim\",\"Bir sey degil\"]) TYYWArray.Insert([\"y\",\"Yiddish\",\"A sheynem dank\",\"Nishto farvos\"]) Lang_options = TY Chinese|TY Farsi|TY French|TY German|TY Hindi|TY Italian|TY Japanese|TY Korean|TY Portuguese|TY Russian|TY Spanish|TY Turkish|TY Yiddish|YW Chinese|YW Farsi|YW French|YW German|YW Hindi|YW Italian|YW Japanese|YW Korean|YW Portuguese|YW Russian|YW Spanish|YW Turkish|YW Yiddish| Gui, Add, ListBox, vlang_choice h100, %lang_options% Gui, Add, Button, hidden default, OK ; Add an Ok Button Gui, Show, Center, Thank You / You're Welcome Picker ; The window's title return GuiClose: ButtonOK: Gui, Submit ; Save the input from the user selection Gui, destroy StringSplit, tyywss, lang_choice, %A_Space% if tyywss1 = TY k = 3 else if tyywss1 = YW k = 4 else k = 2 for j in TYYWArray { if tyywss2 = % TYYWArray[j,2] { output_greeting = % TYYWArray[j,k] } } Sendinput %output_greeting% ExitApp\n\nEDIT: Changed to in the description of line 6. Sorry for the mix-up. Another one from my Todoist days. I never really got into the Todoist desktop client, preferring to use it in a web browser instead. I tried keeping multiple Todoist tabs open, but it never quite worked well, so instead I devised a series of scripts that helped me switch between Todoist views with a keybinding. This one switches to a project view, but you can substitute the name of a tag, a saved search, or the inbox in line 20. To break down the script:\n• Line 4 … brings the topmost (in the stack) Chrome tab to the front.\n• Line 6 … tells the script to run through this loop and stop after 15 iterations. I’m not usually one to have more than 3-4 tabs open at any one time, so 15 is more than enough for me. If there isn’t a tab with in the title, this limit prevents the script from going on forever.\n• Line 8-12 … gets the title of the Active window (the final argument is the designator for the active window). The command looks for any string that has the sub-string , and if it finds it, the loop terminates.\n• Line 13 … if the tab title does not contain then switch to the next tab and try again.\n• Line 14 … pauses the script for the given number of miliseconds. This was just enough to give the browser enough time to switch the tab and register the name before testing again.\n• Lines 17-24 … once the Todoist tab is found, it uses the keyboard shortcut to jump to the search box, type the name of the project, select it, and press return. The command gives keystrokes by typing rather than pasting.\n• At least when I was writing these scripts regularly, Autohotkey demanded the braces be as they are here rather than OTB format. Its been a few years and they might have changed the requirement.\n• I had a series of these for my most used perspectives (aka saved searches), labels, etc.\n• You can use this for pretty much any web-based tool, so long as there is some sort of keyboard-y way to get to things.\n• I can’t remember whether Autohotkey has a way to click at an image or click at a specific screen location, but that would be a way around not having a keyboard shortcut to use. #SingleInstance force SetTitleMatchMode, 2 WinActivate, - Google Chrome Loop, 15 { WinGetTitle, Title, A ;get active window title if(InStr(Title, \"Todoist\")>0) { break ; Terminate the loop } Send ^{Tab} Sleep, 50 } Sleep, 50 Send {/} Sleep, 20 Send [$_PROJECT NAME] Sleep, 20 Send {down} Sleep, 20 Send {return} return\n\nA couple of odds and ends that don’t warrant individual posts. Just a word on the notation. Autohotkey uses the following notations for modifier keys: ^ = control ! = alt + = shift # = windows key xxx :: xxx = the double colon signifies remapping the thing before to the thing after I had a bunch of keybindings that launched specific programs. While I could do that with Launchy (the closest thing Windows has to Quicksilver/Alfred/Launchbar/etc), I found the keybindings a bit faster. I had these for all the Office programs, Windows Explorer, specific folders, websites. I even had one that opened a specific file that I used multiple times a day. Autohotkey lets you set the transparency of a window. I found I used this most when i was on the laptop screen only and wanted to refer to an excel while I was making a powerpoint. Using the pair of commands below lets you hold down to make the foreground window transparent and then reset to full opaque when you release the keys. The second to last argument is the % transparency (100 is fully transparent). The last argument designates the topmost active window. I spent a lot of time in Excel (still do, for that matter). In Windows Excel, lets you switch between tabs. I used these keybindings to remap those to which was much easier to press with my left hand (rather than needing both hands). I remapped the volume key commands as below. I can’t remember whether the number is a % or something else, but 2 was an OK increment for me. In PPT, will toggle between slide sorter mode (showing all slides in the main window) and slide editing mode (showing one slide the the main window and a column of slides to the left). I sped that up by remapping it. Note that Autohotkey behaves a little weirdly here. I could have enclosed the two commands in braces, but I didn’t need to. The empty statement is sufficient to terminate this portion of the script. If you were to use here, the entire process would terminate and unload from memory. Make a new folder in Windows Explorer. Note that Windows Explorer needs to already be the topmost active window. simulates a right click (some keyboards have a physical key on the lower right side). Finally, a series of date snippets. They use what i think is the UNIX standard date formatting conventions. Each has the format in a comment on the right side of the first line. The ones that start with a number as either in the future or the last, the math for which you can see in the third line of each script. As before, the empty function is enough to terminate the code without exiting the entire process out of memory.\n\nIn Windows Outlook, you’re able to define macros called “Quick Steps”. These let you chain together commands like “Mark as read and file in a folder”, “mark as read and create a task”, “set a follow up flag and set a category”, etc. The macros could get quite complicated, but the nice thing was that you could assign keyboard shortcuts to them and trust that they would fire off the same way every time. For quite some time I’ve used a variation of Gina Trapani’s Trusted Trio folder for email processing. I have folders for Archive, @Action, @Waiting, and @Approvals. For each of these folders, I defined a Quick Step in Outlook that would mark the email as read and move it to the specified folder. Archive was mapped to and Approvals [1] was mapped to . For @Action ( ) and @Waiting ( ) emails, I would flag the email for follow up, set a category, and file it away. This would put the email on the Outlook task list with a context. Later, when I switched to using Todoist, I would write the follow up task to a text file in the proper import format (see post above). I’d usually type those manually since I wanted to phrase the task in a certain way. So how does this relate to Autohotkey? I used AHK to remap the extended Function Keys on my desktop keyboard [2] to the Quick Steps in Outlook. So I could be in Outlook, rest 4 fingers of my right hand on F16-F19 above the keypad, and process email really quickly. I usually rested my right thumb on the arrow keys, which let me navigate through my inbox even faster. And I could move my thumb up a little and reach the key. It made email processing much faster. Now that I’m Mac at work, I’ve used Keyboard Maestro to recreate this functionality to let me use the same keybindings on Mac Outlook [3]. The Autohotkey code is very straightforward. It assumes that Outlook is the foreground app when the keys are pressed, which I don’t think should be much of an issue for most people since the F16-F19 keys are “all the way over there.” [1]: Approvals was a folder I used to collect all of those “click here to approve” emails (purchase orders, time off requests, etc). I’d batch them up and go through them every day or two. [2]: I love love love the Apple Wired Extended Keyboard A1243. Do to The Unfortunate Soda Mishap of 2016, I lost my work one. If anyone has a working one they’re willing to part with, please get in touch! [3]: Yes, Mac Outlook. No, not by choice.\n\nI think for my first example, I’m going to post my server automation script explanation. I can get into code if anyone finds it deeply interesting. So, here’s what I have going. At my home office, I have a Windows Server running (well, it’s Windows 10 posing as a server). This server does a lot for me. It serves as my Minecraft server host machine, it runs plex, it has a little application that takes images off my canon camera and saves them to my Google Drive uploader and a small web server VM running Windows Server 2012 that hosts a little website I made. I needed a way to start/stop these various applications when I’m not on my own network. Enter Workflows on my iOS device, Dropbox, and AHK.\n• Deletes the “communication file” from my Dropbox folder\n• Presents me with a list of commands I’d like to do\n• From the selection it writes the associated command to a new text file in Dropbox\n• The script on the server picks up that file and reads the desired command and carries it out It’s pretty simple, but I love it and it has saved me loads of headaches! I’m particularly fond of “text file communication”. So, it’s what I lean towards when I want to transfer automation between devices. I’ll post more on my multi-keyboard setup soon!\n\nHere a a few of my “staples” that are always with me (in AHK script code) These are what AHK call “Hotstrings” (think of text expander)\n\n The setup is – \n\n Example: – So, typing btw would instantly be replaced with By the way Some html/jquery maniuplation\n\n This one is necessary because I never remember the proper syntax for a quick setTimeout function in javascript. Type in and it spits out the below: These two just type out different console.log lines (with and without quotes in it) and sends the cursor in between the parentheses. Similar to the above two, these also add whatever is in your clipboard at the time so you can inspect the variable in the console. Just a few to test the waters and see if anyone likes these. Let me know if you would like to explain more and/or post more. I have plenty!"
    }
]