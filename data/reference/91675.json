[
    {
        "link": "https://uab.edu/icac/images/Scratch_Guides/Intro_to_Scratch.pdf",
        "document": ""
    },
    {
        "link": "https://ctrlshift.mste.illinois.edu/files/2015/08/ScratchDocBooklet.pdf",
        "document": ""
    },
    {
        "link": "https://gamesforchange.org/studentchallenge/wp-content/uploads/2021/02/SC_Curriculum_Scratch.pdf",
        "document": ""
    },
    {
        "link": "https://en.scratch-wiki.info/wiki/blocks",
        "document": "Blocks are puzzle-piece shapes that are used to create code in Scratch. The blocks connect to each other vertically like a jigsaw puzzle, where each block type (hat, stack, reporter, boolean, or cap) has its own shape and its own slot shape for it to be inserted into. Series of connected blocks are called scripts.\n\nBlocks are often easier to work with than text-based programming, as blocks do not need to be memorized like typed commands and syntax errors cannot occur. However, text-based programming is more flexible, as text can easily be edited without having to drag another block into the editor.\n\nThere are ten categories of blocks: Motion, Looks, Sound, Event, Control, Sensing, Operators, Variables, List, and My Blocks. The list blocks are shown under the Variables Blocks.\n\nIn total, there are eight Hat Blocks, five C Blocks, 34 Reporter Blocks, 14 Boolean Blocks, two Cap Blocks and 62 Stack Blocks, for a total of 125 blocks. (Block numbers do not include extensions.)\n\nThere are six different block shapes: Hat, Stack, Boolean, Reporter, C and Cap.\n\nHat blocks are the blocks that start every script. They are shaped with a rounded top and a bump at the bottom — this is so that a user can only place blocks below them. There are eight Hat blocks in the Scratch editor, six of which are in the Events category, one in the Control category, and one in the category My Blocks (if one has created one custom block).\n\nStack blocks are the blocks that perform specific commands. They are shaped with a notch at the top and a bump on the bottom — this is so blocks can be placed above and below them. There are 62 Stack blocks — the most common block shape.\n\nBoolean blocks are blocks that act like conditions. They have an elongated hexagonal shape. Boolean blocks can hold and report \"true\" or \"false\" values. These blocks are inserted into holes of other blocks with the same shape or the shape of a reporter block (see below).\n\nReporter blocks are blocks that act as the values. They are shaped with rounded edges. Reporter blocks can hold numbers and strings. They can also report a variable. Theoretically, there are an infinite amount of Reporter blocks that can be made for each variable and list. These blocks are inserted into holes of other blocks with the same shape.\n\nC blocks are blocks that take the shape of \"C's\". Also known as \"Wrap blocks\", these blocks loop the blocks within the Cs or check if a condition is true. There are five C blocks, and they can be found in the Control category. C blocks can be bumped at the bottom, allowing blocks to be attached below, or capped, which does not allow any blocks to be placed below.\n\nCap blocks are the blocks that end scripts. They are shaped with a notch at the top and a flat bottom — this is so blocks cannot be placed below them. There are two Cap blocks, which can both be found in the Control category.\n\nBlocks are divided into 9 categories: Motion, Looks, Sound, Events, Control, Sensing, Operators, Variables, and My Blocks. Each category has blocks that perform a different function. There are also 11 extension categories that can be added to the block list by selecting them, and 3 Raspberry Pi extensions that are not available on other versions of Scratch. The block categories appear in the categories to the left of the Block Palette, and extensions will appear there when they are added.\n\nThere are 125 normal blocks in Scratch 3.0 (not including extensions or hidden blocks). There are 80 extension blocks (not including Raspberry Pi blocks). There are also many Hidden Blocks that cannot be accessed normally.\n\nThe following is a list of said 125 blocks, divided and listed based on category:\n\nMotion blocks are the blocks that control a Sprite's movement. There are 18 Motion blocks in Scratch 3.0. The stage has no motion blocks, as it cannot move.\n• — Moves the sprite forward the number of steps in the direction the sprite is facing.\n• — Turns the sprite (clockwise) the specified amount.\n• — Turns the sprite (counter-clockwise) the specified amount.\n• — Moves the sprite to the mouse-pointer, a random position, or another sprite.\n• — Moves the sprite to the specified X and Y position.\n• — Glides the sprite to the mouse-pointer, a random position, or another sprite, taking as long as the specified amount of time\n• — Glides the sprite to the location, taking as long as the specified amount of time.\n• — Points the sprite in the direction.\n• — Points the sprite towards the mouse-pointer or another sprite.\n• — Changes the sprite's X position by the amount.\n• — Sets the sprite's X position to the specified amount.\n• — Changes the sprite's Y position by the specified amount.\n• — Sets the sprite's Y position to the amount.\n• — If touching the edge of the screen, the sprite's direction flips over\n• — The X position of the sprite.\n• — The Y position of the sprite.\n• — The direction of the sprite.\n\nLooks blocks are the blocks that control how a sprite looks. There are 23 Looks blocks in Scratch 3.0. Three of the 19 sprite Looks blocks have a counterpart for the Stage.\n\nLooks has 18 stack blocks and 3 reporter blocks:\n• — A speech bubble appears over the sprite and stays for the specified amount of time.\n• — A speech bubble appears over the sprite and will only go away if the sprite says or thinks something else.\n• — A thought bubble appears over the sprite and stays for the specified amount of time.\n• — A thought bubble appears over the sprite and will only go away if the sprite says or thinks something else.\n• — Changes the sprite's costume to the specified one.\n• — Changes the sprite's costume to the next one in the costume list.\n• — Changes the stage's backdrop to the specified one.\n• — Like the Switch to Backdrop () block, though it waits until all of the hat blocks triggered by this have completed. (Stage only)\n• — Changes the stage's backdrop to the next one in the costume list\n• — Changes the sprite's size by the amount.\n• — Sets the sprite's size to the amount.\n• — Changes the specified effect by the amount.\n• — Sets the specified effect to the amount.\n• — Clears all graphic effects on the sprite.\n• — Puts a sprite in the front or back.\n• — Changes the sprite's layer value by the amount.\n• — The number or name of the sprite current costume in the list.\n• — The number or name of the Stage's current backdrop in the list.\n\nSound blocks are the blocks that control sound. There are 9 Sound blocks in Scratch 3.0. The note blocks in 3.0 have been moved to the Music Extension.\n• — Plays a sound and pauses the script until it finishes.\n• — Change the pan left/right or pitch by the amount.\n• — Set the pan left/right or pitch to the amount.\n• — Clears any sound effects currently in place.\n• — Changes the volume by the amount.\n• — Sets the volume to the amount.\n\nEvents blocks are blocks that control events and the triggering of scripts. There are 8 Event blocks in Scratch 3.0.\n• — When the flag is clicked, the script activates.\n• — When the specified key is pressed, the script activates. The event will only be triggered again after the event is released.\n• — When the sprite is clicked, the script activates.\n• — When the backdrop switches to the one chosen, the script activates.\n• — When the first value is greater than the second value, the script activates.\n• — When the broadcast is received, the script activates.\n• — Sends a broadcast throughout the Scratch program, activating When I Receive () blocks that are set to that broadcast.\n• — Like the Broadcast () block, but pauses the script until all scripts activated by the broadcast are completed.\n\nControl blocks are the blocks that control scripts. There are 11 Control blocks in Scratch 3.0.\n\nControl has 1 hat block, 3 stack blocks, 5 C blocks and 2 cap blocks:\n• — Pauses the script for the amount of time.\n• — A loop that repeats the specified amount of times.\n• — A loop that will never end unless the Stop Sign is pressed or the script is stopped by the Stop () block.\n• — Checks the condition so that if the condition is true, the blocks inside it will activate.\n• None if <> then else └— Checks the condition so that if the condition is true, the blocks inside the first C will activate and if the condition is false, the blocks inside the second C will activate.\n• — Pauses the script until the condition is true.\n• — A loop that will stop once the condition is true.\n• — Stops the scripts chosen through the drop-down menu. Can also be a stack block when \"other scripts in this sprite\" is chosen.\n• (sprites only) — This hat block is triggered whenever a clone is created, and will only be run by that clone.\n\nSensing blocks are the blocks that detect things. There are 18 Sensing blocks in Scratch 3.0.\n• — The condition for checking if the sprite is touching the mouse-pointer or another sprite.\n• — The condition for checking if the sprite is touching a specific color.\n• — The condition for checking if a color on the sprite is touching a specific color.\n• — The distance from the sprite to the mouse-pointer or another sprite.\n• — An input box appears — a value is typed in and it stores the value in the variable.\n• — The most recent input with the Ask () And Wait block.\n• — The condition for checking if the specified key is being pressed.\n• — The condition for checking if the mouse is down.\n• — Sets the sprite to draggable or not draggable.\n• — How loud the noise is that the microphone is sensing.\n• — How much time has passed since the Scratch program was opened or the timer reset.\n• — The X position, Y position, direction, costume, size or volume of the Stage or a sprite.\n• — The number of days since 2000.\n\nOperators blocks are the blocks that perform math functions and string handling. There are 18 Operators blocks in Scratch 3.0.\n• — The value of the addition.\n• — The value of the subtraction.\n• — The value of the multiplication.\n• — The value of the division.\n• — Picks a random number between the two limits.\n• — The condition for checking if a value is greater than the other.\n• — The condition for checking if a value is less than the other.\n• — The condition for checking if two values are equal.\n• — True if both conditions are true.\n• — True if either condition is true.\n• — Makes the condition checked if it is false, not true, or true, not false.\n• — The two values put right next to each other.\n• — The specified character of the value.\n• — The length of the value.\n• Checks if the first parameter's text contains the second parameter's text — if it does, the block returns true.\n• — The remainder of the division.\n• — Rounds the value to the nearest whole number.\n• — The absolute value (abs), square root (sqrt), sine (sin), cosine (cos), tangent (tan), asine (asin), acosine (acos), atangent (atan), natural logarithm (ln), logarithm (log), exponential function (e^), or base 10 exponential function (10^) of a specified value.\n\nRight-clicking some of the blocks will yield more choices of its type.\n\nVariables blocks are the blocks that hold variables and lists. There are 5 Variables blocks and 11 list blocks in Scratch 3.0.\n\nVariables has 4 stack blocks and one reporter block for each variable created:\n• — Sets the specified variable to the amount.\n• — Changes the specified variable by the amount.\n\nList blocks are the blocks that manage lists. They are located in the Variables category and are not found in the bar to the left. There are 12 List blocks in Scratch 3.0.\n\nList has 7 stack blocks, 3 reporter blocks (one additional reporter block for each list created), and 1 boolean block:\n• — All items contained in the list.\n• — Adds an item to the list (the item goes at the bottom of the list of items) with the specified content in it.\n• — Deletes the item of the list.\n• — Deletes all items of the list.\n• — Adds an item to the list (the item goes where it is specified in the list of items) with the specified content in it.\n• — Replaces the item's content with the specified content.\n• — Reports the index in a list where an item first appears.\n• — How many items there are in the specified list.\n• — The condition for checking if an item's content is the specified text.\n\nMy Blocks (also known as Custom Blocks), are user-made custom blocks. There are 4 different, unique kinds of My Blocks in Scratch 3.0. Scratch 3.0 has the following My Blocks Hat block:\n\nScratch 3.0 has the following My Blocks Stack block:\n\nScratch 3.0 has the following My Blocks Boolean block:\n\nScratch 3.0 has the following My Blocks Reporter block:\n• — An input for a value, set by the definition My Block.\n\nScratch 3.0 has a number of extensions that can be added to the block list. To choose an extension, press the purple button below the regular block sections.\n\nThe Music extension allows one to play MIDI Notes with different instruments. There are seven Music extension blocks in Scratch 3.0.\n\nScratch 3.0 has six Music stack blocks and one Music reporter block:\n\nThe Pen extension allows one to draw on the stage with the pen. Scratch 3.0 has nine Pen stack blocks:\n\nThe Video Sensing extension lets projects interact with a webcam. There are four Video Sensing blocks in Scratch 3.0.\n\nScratch 3.0 has one Video Sensing hat block, one reporter block, and two stack blocks:\n\nThe Text to Speech extension allows text to be read aloud. Scratch 3.0 has three Text to Speech stack blocks:\n\nThe Translate extension allows text to be translated to other languages. Scratch 3.0 has two Translate reporter blocks:\n\nThe Makey Makey extension lets projects interact with the Makey Makey. Scratch 3.0 has two Makey Makey hat blocks:\n\nThe micro:bit extension lets projects interact with the micro:bit. There are 10 micro:bit blocks in Scratch 3.0.\n\nScratch 3.0 has four micro:bit hat blocks, three stack blocks, two boolean blocks, and one reporter block:\n\nThe LEGO MINDSTORMS EV3 extension lets projects interact with the LEGO MINDSTORMS EV3. There are 11 EV3 blocks in Scratch 3.0.\n\nScratch 3.0 has four EV3 stack blocks, three hat blocks, three reporter blocks, and one boolean block.\n• None motor ( v) turn this way for () seconds\n• None motor ( v) turn that way for () seconds\n\nThe LEGO BOOST extension lets projects interact with the LEGO BOOST. There are 12 LEGO BOOST blocks in Scratch 3.0.\n\nScratch 3.0 has seven Lego BOOST stack blocks, two reporter blocks, two hat blocks, and one boolean block:\n\nThe Lego Education WeDo 2.0 extension lets projects interact with the LEGO WeDo Construction Set. There are 11 blocks in Scratch 3.0.\n\nScratch 3.0 contains six Lego Education WeDo 2.0 stack blocks, two hat blocks, two reporter blocks, and one boolean block:\n\nThe Go Direct Force & Acceleration Extension allows users to interact with the Go Direct force sensor.\n\nScratch 3.0 contains 4 Go Direct Force & Acceleration reporter blocks, three hat blocks, and two boolean blocks.\n\nThere are also three extensions that are only available on the Raspberry Pi version of Scratch.\n\nScratch 3.0 contains 2 Raspberry Pi GPIO stack blocks, one hat block, and one boolean block.\n\nScratch 3.0 contains ten Raspberry Pi Sense HAT stack blocks, three hat blocks, one boolean block, and six reporter blocks.\n\nScratch 3.0 contains two Raspberry Pi Simple Electronics stack blocks, one boolean block, and one hat block.\n\nThe Block Plugin allows one to write blocks and scripts to appear on the Scratch Forums and Scratch Wiki, as well as other websites with the included JavaScript. It is written by the Scratcher blob8108. The dedicated forum topic for testing this plugin out can be found here.\n\nScratch is one of the original languages ever to use blocks, inspiring other languages to inherit the idea. Scratch modifications contain many new blocks typically that are not present in Scratch. MIT, where Scratch is made, has also created other languages using blocks such as the MIT App Inventor. Stencyl is a highly-professional language that features an entire block interface for programming real-time apps and online games. ScratchJr also has blocks which are even more friendly for younger children to understand."
    },
    {
        "link": "https://scratch.mit.edu/discuss/post/3248556",
        "document": "Scratch is a visual programming language and online community targeted primarily at children\n\n\n\n Uses of different blocks in scratch :- \n\n\n\n◆ Motion \n\nMotion blocks are blue in colour. They help in the movement of your sprites.【The characters are called sprites in scratch】They mainly relate to the x and y positions.\n\n\n\n◆ Looks\n\nLooks blocks are purple in colour. They deal with the appearance of the sprites and also graphic effects.\n\n\n\n◆ Sound\n\nSound blocks are pink in colour. They relate to play various sounds in scratch.\n\n\n\n◆ Pen\n\nPen blocks are green in colour. They are related to a sprite's pen, which is a feature that allows a line to be to be drawn in accordance with a sprite's location (the line or “pen” is always at the costume center of the sprite it is in). The blocks are associated with turning the pen on and off, stamping a sprite's image onto the stage, and adjusting the various appearance values of the pen.\n\n\n\n◆ Data\n\nData blocks are orange in colour. They help us store information such as score in a game or for any other purposes.\n\n\n\n◆ Events\n\nEvents blocks are dark yellow in colour. They are related to various triggers in a project, or when one part signals another to run.\n\n\n\n◆ Control\n\nControl blocks are yellow in colour. They run the basic flow of a project in the desired fashion, whether it be organized or unexpected. They provide functions for looping various blocks and scripts.\n\n\n\n◆ Sensing\n\nSensing blocks are sky blue in color. They relate with the sprite and stage detecting conditions. \n\n\n\n◆ Operators\n\nOperator blocks are light green in colour. They are used to do certain operation or calculations in Scratch.\n\n\n\n◆ More block\n\nMore block are dark purpose in colour. They enable you to create your own blocks.\n\n\n\nIf you have any doubt about scratch, fell free to ask me about it.\n\n -@Sweetydaisy"
    },
    {
        "link": "https://thecodegalaxy.com/blog/how-to-make-a-platformer-game-on-scratch",
        "document": "How To Make A Platformer Game On Scratch\n\n, the brainchild of the brilliant minds at MIT Media Lab, has revolutionized the landscape of . It stands as a beacon of creativity and innovation, providing an inviting and user-friendly platform where children and beginners alike can delve into the exciting realm of digital creation. With Scratch, is demystified and transformed into a playground of limitless possibilities.\n\nIn essence, Scratch serves as a digital canvas, where the only limit is one’s imagination. It opens doors to a world where programming is not just a skill but an avenue for artistic expression, logical reasoning, and interactive storytelling.\n\nYoung learners are empowered to bring their imaginative ideas to life, ranging from crafting simple animations that tell a story, to developing intricate games that challenge and entertain.\n\nIt offers an accessible entry into the world of programming, where kids can create everything from simple animations to complex games. One of the most popular game genres on Scratch is the Platformer, a style of game characterized by jumping to and from suspended platforms or over obstacles.\n\nWhat Is A Platformer Game On Scratch?\n\nAmong the myriad of creations possible on Scratch, have emerged as a particularly beloved genre.\n\nA platformer game on Scratch typically involves a character navigating across different platforms while avoiding obstacles, collecting items, or solving puzzles.\n\nPlayers navigate these levels by making their character jump between platforms, avoid pitfalls, and overcome various obstacles, all of which can be customized and elaborated upon by the creator. The appeal of designing a platformer game lies not just in the fun of playing it but also in the rich learning experience it offers. As young developers construct these levels, they learn fundamental programming concepts such as loops, variables, conditionals, and event handling.\n\nScratch’s platformer games often require logic and strategy, making them not only a source of entertainment but also a tool for developing critical thinking and problem-solving skills. The process of designing these games helps enhance spatial awareness and fosters a deeper understanding of narrative and game mechanics. The intuitive interface of Scratch makes it simple for users to experiment with various elements, from gravity and motion to scoring systems and character design.\n\nHow To Collaborate On Scratch\n\nHow To Make A Platformer Game On Scratch [Step By-Step Guide]\n\nEmbarking on the journey of creating a platformer game on Scratch is a fantastic way for young and aspiring coders to dive deep into the fundamentals of game development and programming logic. This engaging project not only offers a hands-on experience in building an interactive\n\nPlatform game from scratch (no pun intended) but also provides an invaluable opportunity to learn and apply key programming concepts in a fun and immersive manner.\n\nLet’s delve into a detailed step-by-step guide that will walk you through the process of bringing your platformer game to life on the Scratch platform:\n\nLog into Scratch and start a new project. Give it a name that reflects your game’s theme.\n\nChoose or design a backdrop to use as a level template. Choose 1 color for the floor\n\nThis forms the environment where your game will take place.\n\nDuplicate this backdrop you picked or created and design several levels and modify each to add variety and challenge.\n\nChoose or create a sprite to act as the player’s character. This will be the main focus of your game. Add this code so the player can move left and right.\n\nProgram gravity to make your character fall back down after jumping. This adds realism to your game.\n\nAdd this code to your player sprite so that it can jump. This is crucial for navigating the platforms.\n\nNow, the player should be able to freely move about the level\n\nCreate a door sprite, which acts as a gateway to the next level.\n\nMove the door where you want it. Then, add a go-to block so the door always starts at that spot.\n\nAdd this code to the door to switch levels when the player reaches it. The message tells the player the level has changed.\n\nAdd this code to the player to make the player return to its starting spot when the level changes.\n\nAdd this code to the backdrop so the game always starts on level 1\n\nTest the game again. The player should be able to go to each level by touching the door. [add image]\n\nDesign a costume for your player sprite for when it ‘dies’ or fails a level.\n\nDesign a ‘game over’ backdrop that displays when the game ends\n\nIn this step, you’ll be adding mechanics to your game that determine what happens when the player’s character ‘loses’ a life or fails a challenge. This could involve programming the character to change its appearance or trigger certain actions when it encounters a dangerous obstacle or enemy.\n\nTo do this, code the player to switch to its ‘dead’ costume upon certain conditions, like touching a certain color.\n\nIn this example, the ‘dangerous’ color is red. However, any color (other than the color of the floor) can be used.\n\nAdd this code to hide all sprites and display the ‘game over’ backdrop when the game ends.\n\nWhat Is A Sprite In Scratch?\n\nHow To Turn On Turbo Mode In Scratch\n\nFAQs On How To Make A Platformer Game On Scratch\n\nHere are more FAQs and answers that might be helpful for someone creating a platformer game on Scratch:\n\nHow Do I Create Different Levels In My Game?\n\nYou can create multiple levels by designing different backdrops for each level. Then, use coding blocks to change the backdrop when the player completes a level or reaches a certain score.\n\nCan I Make My Character Shoot Or Throw Objects?\n\nYes, you can. Create a sprite for the object your character will shoot or throw, and then use events and control blocks to manage the interaction between your character and the object.\n\nHow Do I Add Sound Effects Or Music To My Game?\n\nScratch has a sound editor and a library of sounds you can use. You can add sound effects to actions like jumping, collecting items, or when the game is over. You can also upload your own sounds or music.\n\nHow Can I Create Moving Platforms Or Enemies?\n\nUse motion blocks to make platforms or enemies move within your game. You can control their movement patterns, speed, and interaction with the player.\n\nIs It Possible To Save The Player’s Progress In The Game?\n\nWhile Scratch doesn’t support saving the game progress in the traditional sense, you can design your game in a way that players can enter a code to return to a certain level.\n\nHow Do I Prevent My Character From Falling Off The Screen?\n\nYou can use conditional blocks to check the position of your character. If the character reaches the edge of the screen, you can stop its movement or change its direction.\n\nCreating a true multiplayer experience in Scratch is challenging due to its limitations. However, you can design a game where players take turns or compete for high scores.\n\nHow Do I Fix Glitches Or Bugs In My Game?\n\nTesting your game thoroughly is key. Play through your game multiple times, try to break it, and see if there are any unexpected behaviors. Debugging often requires examining your code closely to find where things are going wrong.\n\nScratch games are primarily designed for desktops and laptops. While Scratch projects can be viewed on mobile devices, the control and gameplay experience might not be optimal.\n\nCan I Add Scores And Lives To My Game?\n\nYes, you can add variables to keep track of scores and the number of lives.\n\nHow Can I Get Feedback On My Game?\n\nYou can get feedback by sharing your game with the Scratch community and asking for suggestions and reviews.\n\nEmbarking on your coding journey with Scratch opens up a world of digital creativity and problem-solving skills.\n\n, learning and mastering Scratch becomes an enriching experience, paving the way for future innovations and a deeper understanding of technology.\n\nare carefully curated to ensure a smooth journey into and through the world of coding.\n\nWhat’s more? Parents and students can explore the myriad of courses on offer that are not just limited to Scratch, ensuring a continuous learning pathway for young coders.\n\ntoday and begin this life-changing journey with us!"
    },
    {
        "link": "https://thecodingfun.com/2020/11/23/design-platformer-game-in-scratch-3-0-algorithm-behind-the-sample-code",
        "document": "If you are a fan of Scratch 3.0, you must have played some of its platformer games. Platformer games (often simplified as platformer, or jump ‘n’ run) is a video game genre and subgenre of action games. Platformers are characterized by their heavy use of jumping and climbing to navigate the environment and reach their goal.\n\nBasically there are two types of platformer game in Scratch 3.0: Static and Rolling. Static Platformer Game means that the backdrop would not scroll but the sprites could move or jump on the stage flexibly. Usually when the sprite moves to a specific edge or touches something, the level is cleared. Rolling Platformer Game means that the backdrop is rolling based on the action of the player, but the main player could always be kept at a specific position on the stage. It looks like having a camera fixed to the player.\n\nOn Scratch Wiki, there are many posts explaining how to create Platformer game, but they did not explain in detail why the code should be designed in that way. In this post, I would fill in this gap and concentrate on explaining the sample code.\n\nI will just explain static platformer game in this post.\n\nA demo project could be found here: https://scratch.mit.edu/projects/452056274/\n\nDifferent platformer game has different rules. For example, some allows double-jump or trible-jump, which means to jump when the Player is already in the air. Some allows for changing direction in the air. Those different behaviors influence the design of the code. For this sample project, its rules are listed here. They are also the most widely used rules for platformer games on Scratch 3.0.\n• The Player could move left by pressing Left arrow key, or clicking mouse to the left of the Player.\n• The Player could move right by pressing Right arrow key, or clicking mouse to the right of the Player.\n• The Player could jump into the air by pressing Up arrow key, or clicking mouse over it. The Player could only jump when it is standing on the platform.\n• If the Player bumps up onto an overhead platform or other obstacles, it could be bounced back and fall.\n• When the Player is jumping, the algorithm considers the influence of gravity. When jumping up, the Player decelerates, while falling down, it accelerates.\n\nThe main code segment will run after the game begins. It sets the initial values of Player position and sets “XV”, “YV” values to 0. The two variables represent the movement speed in horizontal and vertical directions, respectively. After that, it wraps the block “Physics” to control the movement of the Player. Since “Physics” block is wrapped in “repeat until” block, it would run repeatedly until the Player clears or fails this level.\n\nNow, let’s take a look at how “Physics” block controls the movement of the Player. This is right the core of the platformer game.\n\nStep 1: Adjust Y position of Player and Check if Touching Platform\n\nThe program first changes the value of XV and YV. When Right Arrow key is pressed or mouse clicks to the right of the Player, XV will change by 1. When Left Arrow key is pressed or mouse clicks to the left of the Player, XV will change by -1. Please note here XV is changed by 1 or -1, instead of being set to 1 or -1. It is based on the common sense that the speed change is continuous and relevant to the previous state.\n\nThe change of YV is always -1, which simulates the effect of gravity and also reflects the existance of gravity. The program will first change YV and judge if the Player touches the Platform. it the Player does, the program adjusts its y position to make it just 1 unit away from Platform and set YV to 0.\n\nPlease note that YV could be either positive value or negative value. When YV > 0 and the Player touches Platform, it might be an overhead platform. Using this sample code, the Player could adjust its position to move down until it is 1 unit away from the Platform. At this point, YV value is set to 0, meaning a relative static state in y direction.\n\nif you want the program to identify other hanging obstables, what you need to do is to encapsulate more “touching” blocks. For example, replace “if <touching Platform>” with “if <touching Platform> or <touching obstacle 1> or <touching obstacle 2>” in this code segment.\n\nThe Player will move XV steps in x direction. XV is the value gotten in Step 1. After that, the program also judges if the Player touches Platform. The judgement here handles the condition when Player touches a platform wall, as shown in the below diagram. The program will adjust the x position of Player to make it just one unit away from the platform wall.\n\nStep 3: check if the Player could jump\n\nAs I explained in Step 1, if the Player is staying on the Platform, it is actually 1 unit above the Platform (like “floating” on the platform). Under this condition, if the Player changes y position by -1, it could touch the Platform.\n\nIn this Step, the program changes y by -1 and checks if the Player touches Platform. If the Player does, meaning that it is standing on the platform, so when Up arrow key is pressed or mouse clicks over it, the Player will jump up by setting YV to 16.\n\nThe above three steps form a complete mini cycle of position adjustment for the Player. It adjusts the horizontal and vertical position of the Player and captures the jumping order. Since the computer runs very fast, running the above batch of code might just require a fraction of a second. As we could see on the game demonstration, some minor position adjustment would not be caught by our eyes and what we see is a smoothly running Player and a platform game.\n\nNote: All the analysis articles are copyright products of http://www.thecodingfun.com. Anyone re-posting them should credit author and original source. Anyone using them for commercial purposes or translating them into other languages should notify TheCodingFun and get confirmation first. All Rights Reserved."
    },
    {
        "link": "https://create-learn.us/blog/how-to-make-a-mario-game-on-scratch",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/truegaming/comments/23xkgl/what_makes_for_good_level_design_in_a_platformer",
        "document": "Hi, I am working on a project, and I am collecting notes on level design before I get into designing my levels, and I wanted to know what r/truegaming thought.\n\nI will make this question a bit more specific: 1- What makes it fun? 2- What makes it challenging? 3- What makes it extremely replayable?"
    },
    {
        "link": "https://scratch.mit.edu/discuss/post/2976311",
        "document": "I am an 8+ yr Scratcher, 46 yrs old and so I actually played a lot of the classic platformers before they were classics. I also have an old studio full of interesting platformer types made specifically for Scratchers to look through for inspiration. So here goes my advice on building great Scratch platformers..1. the Perfect base project - I don't think anyone just makes a platformer. Instead, people make many platformer projects with subsequent projects gradually improving in quality as the Scratcher becomes a better coder and game maker. So what are those earliest projects about? They are about learning to do the very basics of a Scratch platformer as well as possible.. layering and building a map with perfect collisions and coding a character the player can use to jump and run around in that environment with. A lot of newer Scratchers don't even get to animating the player with costumes or including music and sound effects.So my advice for newer coders is forget about completing a platformer game at first, focus on projects that do the various parts of a platformer game until you are ready to combine them into the full version.Anyway, you are constantly refining your techniques for everything from getting player input to handling sprite collisions to parallax scrolling backgrounds, etc. What I saw others doing and finally did myself was to create my own version of a platformer base , the very simplest beginning of a perfectly working platformer. I made many platformer bases before I was happy. Scratch itself evolved while I was learning. One great thing about having a base is you can use it over and over to create new projects instead or re-writing your collision detection code again. I have used my platformer base for projects that ended up baring little resemblance to a typical platformer if any.2. fast, smooth code - this topic deserves its own post. For me this ended up meaning learning to use a simplified version of Griffpatch's broadcast timing system which in turn meant learning to use custom blocks set to “run without screen refresh” whenever possible. I also learned that some blocks are slower than others, so obviously some methods are going to be slower than others. When you are talking about game loops of .1 of a second or faster, that becomes a big deal. Anyway, once I learned how to use the system, my collision detection woes were solved and I had solid, working game code to build from.3. learn how to learn - back in the old days way back before Scratch, like in the 80s, everyone worked hard to hide their code so as a beginning game developer you had to work a lot harder to get teach yourself. With Scratch, you have tons of examples to study and learn from and it is great because you can see their code. Take platformers, you could do a search for “platformer” and check out the projects. Sure, a lot of them might not be so great but some will be. When you find that good platformer project, go look at other projects by that Scratcher. They probably have more. You probably want to follow them. And guess what is probably in their list of Favorite Projects? Yep, you guessed it. More awesome coders and more awesome platformer projects.Now go back and do a search for “platformers” and look through studios. Do more searches for both projects and studios named after classic platformers like Mario. When you start to recognize good Scratchers and great projects by site, you have done your homework.You know the Scratch Wiki has a new site, right? I hope so, because if not, that probably means you aren't using it and if you aren't using it you might as well be swimming with lead flippers. Tons of information. I search it from Bing by putting whatever I want to look up and the term “Scratch Wiki”.4. learn what to do when you get stuck - This is at least a two-parter.What you should be doing at first and for a long while is whenever you can't fix a problem in your project is to share it, go to the Help With Scripts section of the Discussion Forums and make a link to it with a description of what it should be doing and what it seems to be doing wrong. You are guaranteed to get help and usually fast help.Eventually, you are going to start writing projects too complicated to expect help with from most Scratchers so you must learn to debug your own projects. That means how to figure out where it is breaking when it breaks. Here is the technique that I used the most, using temporary variables and script breaks to find errors. For example I will create a variable named Atemp. I always use the same name so if I ever find a variable named Atemp (or Btemp, etc) in any project I know it was used as a disposable, temporary variable,Lets say my project is hanging up (going recursive) and I don't know where because my game loop branches all over the place depending on what is going on? So what I might do is use one block to set my temporary variable Atemp to 0 at the start of the project. Then at every loop branch I place a “set Atemp to 1”, “set Atemp to 2” etc. Then when I run the project again, after it hangs up I can stop it, check Atemp's value and see which branch of my game loop was the last to run. After that, if I can't just visually locate the error I will start removing little blocks of code and rerunning the project until I find the one that the project runs fine without.As for breaking a project's execution, that is just something you need to do sometimes while debugging. Let's say I use the last technique to narrow down my project's error to a single block of code but it is a really long, complicated block and I don't know where it is inside that? Now I need the ability to step through that code block one section at a time, possibly placing “set” or “change” Atemp blocks at each break so I know which is currently executing. I use these 2 blocks for breaks..They work as temporary breaks. When the project reaches the first one, it halts completely. I can check various variable values, sprite positions, or whatever I need to to make sure everything is working. Or in this case it is as simple as seeing if the project has frozen yet? If not, I know that section of my complicated script block is working ok. So I press the space bar and run the next section. Eventually, I am going to press space and the project will hang and bam, now I have narrowed my problem to a small, specific section of code.4. build backwards - Ok, maybe not actually backwards but don't plan on building the next Mario in your next platformer. Plan on starting as simple as possible and adding to it as you go. As in.. “I have character who must make it past these obstacles to jump up to here and exit the map.” You can go back later and drop any kind of theme or story you'd like on top of that but most importantly you won't run the risk of having to give up on your project because you can't code it. By the time you are able to code a full-blown platformer game, a lack of ideas will not be a problem. Then you will realize that it takes so much time and work for one person to make a really good platformer project that you have far more great ideas than you have time to code into projects.5. you aren't done learning - From planning a development cycle to pixel art techniques to building a .wav file in a DAW, there are tons of aspects to building a game, much less a well created game. Naturally there are countless web pages and tutorial videos devoted to teaching you all these things. I am constantly filling folders on my hard drive with these pages and videos, all categorized by folders named by topic so I can go back and find stuff easily later. And when my hard drive crashes and I lose it all to a reformat, I start over again. I play guitar and went to art school for college so even my hobbies come into play in my game development.Of course, a lot of this advice pertains to more than just platformers but I don't think you can only learn to make platformers, you learn to code and every style of game has some specific code requirements others don't. I consider myself lucky having lived my formative years back when platformers kinda ruled the Earth via games like Mario. Even if I never play another one, I will always have an affinity for them you can only get from years of experience and love."
    }
]