[
    {
        "link": "https://medium.com/@alextrolese38/how-i-built-a-spreadsheet-app-with-python-to-make-data-science-easier-5503a6fd2a54",
        "document": "Today I’m open sourcing “Grid studio”, a web-based spreadsheet application with full integration of the Python programming language.\n\nAbout a year ago I started tinkering with the idea of building the data science IDE that I had always wanted. Having worked extensively with Microsoft Excel, R (Studio) and Python, I envisioned how some integrated version of those would make my life easier.\n\nThe main issue that I set out to solve with Grid studio is the scattered workflow that I was experiencing while going back and forth between multiple tools such as R studio and Excel while working on data science projects.\n\nWhile exporting that CSV file for the gazillionth-time, running into freezing up of application windows when my row count was too high or trying to do something straightforward such as reading in a JSON file I had had enough. The existing tools did not provide me with the environment and associated workflow that enabled me to be productive.\n\nThat’s why I decided to build something that would integrate my workflow into a single, modern and easy to use application fit for my data science needs.\n\nHow does it work?\n\nGrid studio is a web-based application that looks remarkably similar to an ordinary spreadsheet program such as Google Sheets or Microsoft Excel. However, its killer feature is the deep integration of the Python language.\n\nViewing data in a tabular structure and manipulating it directly feels naturally to almost everybody who has used a computer.\n\nCombining this simple UI with the power of a full fledged programming language such as Python really makes it stand out.\n\nScripting with Python is as straightforward as possible: just write a few lines and execute it directly.\n\nAt the core of the Python integration is the read and write interface to your spreadsheet. A high performance connection between your sheets’ data and data in your Python process.\n\nSimply write to the sheet like so:\n\nAnd read from the sheet like this:\n\nWith this simple yet powerful function you can read and write directly from and to sheets in order to automate data entry, extraction, visualization and more.\n\nWhile reading and writing gives you a lot of flexibility through a simple interface, sometimes it makes a lot of sense to write custom functions that can be called directly in your spreadsheet.\n\nCommon spreadsheet functions such as AVERAGE, SUM, IF, etc. are already available by default. But what if you need more?\n\nSimply write the function you need!\n\nNow call this function in your spreadsheet, just like you would a regular function."
    },
    {
        "link": "https://stackoverflow.com/questions/13437727/how-to-write-to-an-excel-spreadsheet-using-python",
        "document": "I need to write some data from my program to an Excel spreadsheet. I've searched online and there seem to be many packages available (xlwt, XlsXcessive, openpyxl). Others suggest writing to a .csv file (never used CSV and don't really understand what it is).\n\nThe program is very simple. I have two lists (float) and three variables (strings). I don't know the lengths of the two lists and they probably won't be the same length.\n\nI want the layout to be as in the picture below:\n\nThe pink column will have the values of the first list and the green column will have the values of the second list.\n\nSo what's the best way to do this?\n\nI am running Windows 7 but I won't necessarily have Office installed on the computers running this program.\n\nI wrote this using all your suggestions. It gets the job done but it can be slightly improved.\n\nHow do I format the cells created in the for loop ( values) as scientific or number?\n\nI do not want to truncate the values. The actual values used in the program would have around 10 digits after the decimal."
    },
    {
        "link": "https://thebricks.com/resources/how-to-create-a-spreadsheet-in-python-using-chatgpt",
        "document": "Creating spreadsheets in Python might seem like a task reserved for seasoned programmers, but with the advent of tools like ChatGPT, it's becoming accessible to many more people. Imagine being able to automate your data organization without needing to be an Excel wizard. Today, we're going to take a look at how you can use Python and ChatGPT to create spreadsheets, making your data tasks a breeze.\n\nWe'll walk through the entire process, from setting up your environment to writing the code that will generate your spreadsheets. Along the way, you'll learn about the libraries involved, see some code examples, and get practical tips. So, whether you're a curious beginner or someone looking to streamline your workflow, this guide is for you.\n\nGetting Started with Python and ChatGPT\n\nFirst things first, if you're new to Python, don't worry. Python is known for being beginner-friendly. It's like the friendly neighborhood language of the programming world. To get started, you'll need to have Python installed on your computer. If you haven’t done this yet, you can download it from the official Python website. The installation process is straightforward, and there are plenty of resources available online if you get stuck.\n\nOnce you have Python installed, you'll need a text editor or an IDE (Integrated Development Environment) where you can write your code. Popular options include Visual Studio Code, PyCharm, or even Jupyter Notebook if you prefer working in a web-based environment. For this tutorial, feel free to use whichever you're most comfortable with.\n\nNow, let's talk about ChatGPT. While you might be familiar with using it for generating text or answering questions, it can also assist in writing code. By interacting with it, you can obtain code snippets, explanations, and even troubleshooting tips. It's like having a coding buddy who's always there to help out. Just remember, while ChatGPT is a powerful tool, it's always good to understand the code you're working with.\n\nWhen it comes to working with spreadsheets in Python, a few libraries stand out. The most popular ones are pandas and openpyxl. Let’s break down what each of these offers.\n• pandas: This library is a must-have for data manipulation. If you need to handle data structures and perform operations on them, pandas is your go-to. It’s like the Swiss Army knife for data in Python.\n• openpyxl: This library allows you to read and write Excel files (with .xlsx extension). It’s perfect for creating new spreadsheets or modifying existing ones. Think of it as your direct line to Excel from Python.\n\nTo install these libraries, you can use pip, which is Python's package installer. Open your command prompt or terminal and run the following commands:\n\nWith these tools in your toolkit, you're ready to start creating spreadsheets with Python.\n\nAlright, let’s get our hands dirty with some code. We'll start by setting up a basic Python script that will serve as the foundation for our spreadsheet creation.\n\nFire up your text editor and create a new Python file. You can name it something like create_spreadsheet.py. At the top of this file, you’ll want to import the libraries we just talked about:\n\nNow, let’s set up a simple data structure that we’ll use to populate our spreadsheet. For this example, we’ll create a list of dictionaries, where each dictionary represents a row in our spreadsheet:\n\nThis data will form the basis of our spreadsheet. With pandas, we can easily convert this list into a DataFrame, which is a data structure that pandas uses to handle data:\n\nNow that we have our data in a DataFrame, we can move on to actually creating the spreadsheet file.\n\nWith our data ready, it's time to create a spreadsheet file using openpyxl. This is where the magic happens, as we convert our DataFrame into an Excel file.\n\nFirst, let's create a new Excel workbook and add a worksheet to it:\n\nNow, we need to write the DataFrame data into this worksheet. The simplest way to do this is to iterate over the DataFrame and append each row to the worksheet:\n\nOnce the data is in the worksheet, you can save the workbook as an Excel file:\n\nAnd there you have it! You've just created an Excel spreadsheet using Python. Not too complicated, right?\n\nCreating a spreadsheet is one thing, but making it look good is another. Thankfully, openpyxl allows you to apply some basic formatting to your worksheets. Let's add some flair to our spreadsheet.\n\nFor instance, you might want to bold the header row to distinguish it from the data. Here's how you can do that:\n\nMaybe you want to adjust the column widths to fit the content better. This can also be done quite easily:\n\nThese tweaks might seem small, but they can make a big difference in readability and presentation. Feel free to get creative with colors, borders, and more.\n\nNow that you've got the basics down, let’s talk about how ChatGPT can help automate this process. Imagine needing to create spreadsheets regularly with different data sets. Instead of manually writing the code each time, you can use ChatGPT to generate the necessary Python script.\n\nBy providing ChatGPT with prompts that describe your data and desired output, it can generate code snippets tailored to your needs. This is particularly useful if you need to handle more complex data structures or apply specific formatting rules.\n\nFor instance, you could ask, \"How do I create an Excel spreadsheet with headings 'Product', 'Price', and 'Quantity', and save it as 'inventory.xlsx'?\" ChatGPT can then provide you with a Python script to achieve just that.\n\nOf course, while ChatGPT can write code, it's always a good idea to review and test the generated scripts to ensure they meet your requirements. It's like having a junior developer at your disposal—helpful, but still in need of guidance.\n\nAs you start working with larger data sets, you might encounter performance issues or run into limitations with memory. This is where pandas really shines, as it’s optimized for handling large volumes of data efficiently.\n\nOne technique is to read data in chunks if you're working with particularly large files. Pandas provides a convenient way to do this:\n\nThis method allows you to process data in manageable pieces, reducing the load on your system. You can also use similar techniques when writing large data frames to Excel files.\n\nFurthermore, if your data processing requires more power, consider leveraging Python’s multiprocessing capabilities or using cloud-based solutions to distribute the workload. While these methods might require a bit more setup, they can significantly improve performance when dealing with big data.\n\nSpreadsheets don’t exist in a vacuum. Often, you’ll need to pull data from various sources, such as databases, APIs, or other file types like JSON or XML. Python excels at data integration, and with a little creativity, you can automate data collection and spreadsheet creation seamlessly.\n\nFor example, if you're pulling data from a database, you could use Python’s sqlite3 module or an ORM like SQLAlchemy to query data and store it in a pandas DataFrame. From there, it’s a short step to writing that data to an Excel file:\n\nIntegrating APIs is another common requirement. Libraries like requests make it easy to fetch data from web services, which you can then transform and store in your spreadsheets. The possibilities are endless.\n\nNo coding journey is complete without a little troubleshooting. Errors will happen, and that’s perfectly normal. When working with spreadsheets in Python, some common issues include file permissions, incorrect data formatting, or missing libraries.\n\nIf you ever run into an error, don't panic. Start by reading the error message carefully—it often contains clues about what went wrong. Check that your file paths are correct and that you have the necessary permissions to read or write files. If a library isn't found, ensure it's installed and properly imported.\n\nWhen all else fails, ChatGPT can be a useful ally. You can describe the problem and ask for advice or even solutions. While it might not always have the perfect answer, it can certainly point you in the right direction.\n\nWe've covered a lot of ground, from setting up Python and using libraries like pandas and openpyxl to creating and formatting spreadsheets. You've seen how ChatGPT can lend a hand in automating tasks and debugging code. With these tools and techniques, you're well-equipped to tackle spreadsheet creation with Python.\n\nIf you're looking for a more integrated solution, Bricks might be what you need. It brings together spreadsheets, docs, and presentations into one tool, powered by AI. Whether it's writing formulas or creating visuals like dashboards and charts, Bricks does it all for you, saving you time and effort. It's a great way to manage your data without needing to be a spreadsheet expert."
    },
    {
        "link": "https://pyspread.gitlab.io",
        "document": "pyspread is a non-traditional spreadsheet application that is based on and written in the programming language Python. The goal of pyspread is to be the most pythonic spreadsheet.\n\npyspread expects Python expressions in its grid cells, which makes a spreadsheet specific language obsolete. Each cell returns a Python object that can be accessed from other cells. These objects can represent anything including lists or matrices.\n\npyspread is free software. It is released under the GPL v3 licence.\n\nThe latest release is pyspread v2.4 (source code). It requires Python 3.6+.\n\nThe last (outdated) release that is compatible with Python 2.x is pyspread v1.1.3.\n• Access to Python modules from within cells including e.g. NumPy\n• Matplotlib and R charts. Plotnine and R packages graphics, lattice, ggplot2 supported via dialog.**\n\nDirectly using Python code in a grid is a core feature of pyspread. The target user group has experience with or wants to learn the programming language Python:\n• Clara is a research engineer. She systematically compares results of different parameter sets. She is proficient with Python and has used it for her scientific analyses. Clara wants a quick initial overview of how changing specific parameters affects her results. With pyspread, Clara is displaying each result in one cell. This allows her to quickly figure out, which parameters she is going to focus on next.\n• Peter is using spreadsheets to prepare business decisions. He separates data from code by keeping his business data in CSV files and accessing these files from pyspread. Furthermore, Peter is worried about algorithmic errors and calculation inaccuracies in his complicated tables. He is importing the Money datatype from py-moneyed in the Macro panel. The dedicated Money class helps him avoiding floating point errors. Peter has implemented his analysis tools together with unit tests in a separate Python module, which he is importing as well. Therefore, he is worrying less about wrong results that may lead to bad business decisions.\n\nNot part of the target user group are Donna and Jack:\n• Donna is looking for a free replacement for Ms. Excel. She does not know any programming language, and she has no time to learn Python.\n• Jack does computation intensive data analysis. He is looking for a spreadsheet that can parallelize calculations - ideally out of the box as a cluster or a cloud solution.\n\nThis does not mean that Donna or Jack cannot work with pyspread. However, Donna might find the learning curve for using Python code in cells too steep. Jack on the other hand might be disappointed because he has to ensure manually that his long running tasks are not locking up pyspread.\n\nFor user questions or user feedback please use the pyspread community board on gitter.\n\nFor contributions, patches, development discussions and ideas please create an issue using the pyspread issue tracker"
    },
    {
        "link": "https://realpython.com/openpyxl-excel-spreadsheets-python",
        "document": "Excel spreadsheets are one of those things you might have to deal with at some point. Either it’s because your boss loves them or because marketing needs them, you might have to learn how to work with spreadsheets, and that’s when knowing comes in handy!\n\nSpreadsheets are a very intuitive and user-friendly way to manipulate large datasets without any prior technical background. That’s why they’re still so commonly used today.\n\nIn this article, you’ll learn how to use openpyxl to:\n• Create simple or more complex spreadsheets, including adding styles, charts, and so on\n\nThis article is written for intermediate developers who have a pretty good knowledge of Python data structures, such as dicts and lists, but also feel comfortable around OOP and more intermediate level topics.\n\nIf you ever get asked to extract some data from a database or log file into an Excel spreadsheet, or if you often have to convert an Excel spreadsheet into some more usable programmatic form, then this tutorial is perfect for you. Let’s jump into the caravan! First things first, when would you need to use a package like in a real-world scenario? You’ll see a few examples below, but really, there are hundreds of possible scenarios where this knowledge could come in handy. You are responsible for tech in an online store company, and your boss doesn’t want to pay for a cool and expensive CMS system. Every time they want to add new products to the online store, they come to you with an Excel spreadsheet with a few hundred rows and, for each of them, you have the product name, description, price, and so forth. Now, to import the data, you’ll have to iterate over each spreadsheet row and add each product to the online store. Say you have a Database table where you record all your users’ information, including name, phone number, email address, and so forth. Now, the Marketing team wants to contact all users to give them some discounted offer or promotion. However, they don’t have access to the Database, or they don’t know how to use SQL to extract that information easily. What can you do to help? Well, you can make a quick script using that iterates over every single User record and puts all the essential information into an Excel spreadsheet. That’s gonna earn you an extra slice of cake at your company’s next birthday party! You may also have to open a spreadsheet, read the information in it and, according to some business logic, append more data to it. For example, using the online store scenario again, say you get an Excel spreadsheet with a list of users and you need to append to each row the total amount they’ve spent in your store. This data is in the Database and, in order to do this, you have to read the spreadsheet, iterate through each row, fetch the total amount spent from the Database and then write back to the spreadsheet. Here’s a quick list of basic terms you’ll see when you’re working with Excel spreadsheets: A Spreadsheet is the main file you are creating or working with. A Sheet is used to split different kinds of content within the same spreadsheet. A Spreadsheet can have one or more Sheets. A Column is a vertical line, and it’s represented by an uppercase letter: A. A Row is a horizontal line, and it’s represented by a number: 1. A Cell is a combination of Column and Row, represented by both an uppercase letter and a number: A1. Now that you’re aware of the benefits of a tool like , let’s get down to it and start by installing the package. For this tutorial, you should use Python 3.7 and openpyxl 2.6.2. To install the package, you can do the following: After you install the package, you should be able to create a super simple spreadsheet with the following code: The code above should create a file called in the folder you are using to run the code. If you open that file with Excel you should see something like this:\n\nLet’s start with the most essential thing one can do with a spreadsheet: read it. You’ll go from a straightforward approach to reading a spreadsheet to more complex examples where you read the data and convert it into more useful Python structures. Before you dive deep into some code examples, you should download this sample dataset and store it somewhere as : Download Dataset: Click here to download the dataset for the openpyxl exercise you’ll be following in this tutorial. This is one of the datasets you’ll be using throughout this tutorial, and it’s a spreadsheet with a sample of real data from Amazon’s online product reviews. This dataset is only a tiny fraction of what Amazon provides, but for testing purposes, it’s more than enough. Finally, let’s start reading some spreadsheets! To begin with, open our sample spreadsheet: In the code above, you first open the spreadsheet using , and then you can use to see all the sheets you have available to work with. After that, selects the first available sheet and, in this case, you can see that it selects Sheet 1 automatically. Using these methods is the default way of opening a spreadsheet, and you’ll see it many times during this tutorial. Now, after opening a spreadsheet, you can easily retrieve data from it like this: To return the actual value of a cell, you need to do . Otherwise, you’ll get the main object. You can also use the method to retrieve a cell using index notation. Remember to add to get the actual value and not a object: You can see that the results returned are the same, no matter which way you decide to go with. However, in this tutorial, you’ll be mostly using the first approach: . Note: Even though in Python you’re used to a zero-indexed notation, with spreadsheets you’ll always use a one-indexed notation where the first row or column always has index . The above shows you the quickest way to open a spreadsheet. However, you can pass additional parameters to change the way a spreadsheet is loaded. There are a few arguments you can pass to that change the way a spreadsheet is loaded. The most important ones are the following two Booleans:\n• read_only loads a spreadsheet in read-only mode allowing you to open very large Excel files.\n• data_only ignores loading formulas and instead loads only the resulting values. Now that you’ve learned the basics about loading a spreadsheet, it’s about time you get to the fun part: the iteration and actual usage of the values within the spreadsheet. This section is where you’ll learn all the different ways you can iterate through the data, but also how to convert that data into something usable and, more importantly, how to do it in a Pythonic way. There are a few different ways you can iterate through the data depending on your needs. You can slice the data with a combination of columns and rows: You can get ranges of rows or columns: # Get all cells from column A # Get all cells for a range of columns # Get all cells from row 5 # Get all cells for a range of rows You’ll notice that all of the above examples return a . If you want to refresh your memory on how to handle in Python, check out the article on Lists and Tuples in Python. There are also multiple ways of using normal Python generators to go through the data. The main methods you can use to achieve this are: Both methods can receive the following arguments: These arguments are used to set boundaries for the iteration: You’ll notice that in the first example, when iterating through the rows using , you get one element per row selected. While when using and iterating through columns, you’ll get one per column instead. One additional argument you can pass to both methods is the Boolean . When it’s set to , the values of the cell are returned, instead of the object: If you want to iterate through the whole dataset, then you can also use the attributes or directly, which are shortcuts to using and without any arguments: These shortcuts are very useful when you’re iterating through the whole dataset. Now that you know the basics of iterating through the data in a workbook, let’s look at smart ways of converting that data into Python structures. As you saw earlier, the result from all iterations comes in the form of . However, since a is nothing more than a that’s immutable, you can easily access its data and transform it into other structures. For example, say you want to extract product information from the spreadsheet and into a dictionary where each key is a product ID. A straightforward way to do this is to iterate over all the rows, pick the columns you know are related to product information, and then store that in a dictionary. Let’s code this out! First of all, have a look at the headers and see what information you care most about: This code returns a list of all the column names you have in the spreadsheet. To start, grab the columns with names: Lucky for you, the columns you need are all next to each other so you can use the and to easily get the data you want: Nice! Now that you know how to get all the important product information you need, let’s put that data into a dictionary: # Using the values_only because you want to return the cells' values # Using json here to be able to format the output for displaying later The code above returns a JSON similar to this: Here you can see that the output is trimmed to 2 products only, but if you run the script as it is, then you should get 98 products. To finalize the reading section of this tutorial, let’s dive into Python classes and see how you could improve on the example above and better structure the data. For this, you’ll be using the new Python Data Classes that are available from Python 3.7. If you’re using an older version of Python, then you can use the default Classes instead. So, first things first, let’s look at the data you have and decide what you want to store and how you want to store it. As you saw right at the start, this data comes from Amazon, and it’s a list of product reviews. You can check the list of all the columns and their meaning on Amazon. There are two significant elements you can extract from the data available: The Review has a few more fields: You can ignore a few of the review fields to make things a bit simpler. So, a straightforward implementation of these two classes could be written in a separate file : After defining your data classes, you need to convert the data from the spreadsheet into these new structures. Before doing the conversion, it’s worth looking at our header again and creating a mapping between columns and the fields you need: Let’s create a file where you have a list of all the field names and their column location (zero-indexed) on the spreadsheet: You don’t necessarily have to do the mapping above. It’s more for readability when parsing the row data, so you don’t end up with a lot of magic numbers lying around. Finally, let’s look at the code needed to parse the spreadsheet data into a list of product and review objects: \\ \\ # Using the read_only method since you're not gonna be editing the spreadsheet # Using the values_only because you just want to return the cell value # You need to parse the date from the spreadsheet into a datetime format After you run the code above, you should get some output like this: That’s it! Now you should have the data in a very simple and digestible class format, and you can start thinking of storing this in a Database or any other type of data storage you like. Using this kind of OOP strategy to parse spreadsheets makes handling the data much simpler later on. Before you start creating very complex spreadsheets, have a quick look at an example of how to append data to an existing spreadsheet. Go back to the first example spreadsheet you created ( ) and try opening it and appending some data to it, like this: # Start by opening the spreadsheet and selecting the main sheet # Write what you want into a specific cell Et voilà, if you open the new spreadsheet, you’ll see the following change:\n\nThere are a lot of different things you can write to a spreadsheet, from simple text or number values to complex formulas, charts, or even images. Previously, you saw a very quick example of how to write “Hello world!” into a spreadsheet, so you can start with that: The highlighted lines in the code above are the most important ones for writing. In the code, you can see that:\n• Line 5 shows you how to create a new empty workbook.\n• Lines 8 and 9 show you how to add data to specific cells.\n• Line 11 shows you how to save the spreadsheet when you’re done. Even though these lines above can be straightforward, it’s still good to know them well for when things get a bit more complicated. Note: You’ll be using the spreadsheet for some of the upcoming examples, so keep it handy. One thing you can do to help with coming code examples is add the following method to your Python file or console: It makes it easier to print all of your spreadsheet values by just calling . Before you get into the more advanced topics, it’s good for you to know how to manage the most simple elements of a spreadsheet. You already learned how to add values to a spreadsheet like this: There’s another way you can do this, by first selecting a cell and then changing its value: The new value is only stored into the spreadsheet once you call . The creates a cell when adding a value, if that cell didn’t exist before: # Before, our spreadsheet has only 1 row # Try adding a value to row 10 As you can see, when trying to add a value to cell , you end up with a tuple with 10 rows, just so you can have that test value. One of the most common things you have to do when manipulating spreadsheets is adding or removing rows and columns. The package allows you to do that in a very straightforward way by using the methods: Every single one of those methods can receive two arguments: Using our basic example again, let’s see how these methods work: # Insert 5 columns between column 2 (\"B\") and 3 (\"C\") # Insert a new row in the beginning # Insert 3 new rows in the beginning The only thing you need to remember is that when inserting new data (rows or columns), the insertion happens before the parameter. So, if you do , it inserts a new row before the existing first row. It’s the same for columns: when you call , it inserts a new column right before the already existing second column ( ). However, when deleting rows or columns, deletes data starting from the index passed as an argument. For example, when doing it deletes row , and when doing it deletes the third column ( ). Sheet management is also one of those things you might need to know, even though it might be something that you don’t use that often. If you look back at the code examples from this tutorial, you’ll notice the following recurring piece of code: This is the way to select the default sheet from a spreadsheet. However, if you’re opening a spreadsheet with multiple sheets, then you can always select a specific one like this: # Let's say you have two sheets: \"Products\" and \"Company Sales\" # You can select a sheet using its title You can also change a sheet title very easily: If you want to create or delete sheets, then you can also do that with and : # You can also define the position to create the sheet at # To remove them, just pass the sheet as an argument to the .remove() One other thing you can do is make duplicates of a sheet using : If you open your spreadsheet after saving the above code, you’ll notice that the sheet Products Copy is a duplicate of the sheet Products. Something that you might want to do when working with big spreadsheets is to freeze a few rows or columns, so they remain visible when you scroll right or down. Freezing data allows you to keep an eye on important rows or columns, regardless of where you scroll in the spreadsheet. Again, also has a way to accomplish this by using the worksheet attribute. For this example, go back to our spreadsheet and try doing the following: If you open the spreadsheet in your favorite spreadsheet editor, you’ll notice that row and columns and are frozen and are always visible no matter where you navigate within the spreadsheet. This feature is handy, for example, to keep headers within sight, so you always know what each column represents. Here’s how it looks in the editor: Notice how you’re at the end of the spreadsheet, and yet, you can see both row and columns and . You can use to add filters and sorts to your spreadsheet. However, when you open the spreadsheet, the data won’t be rearranged according to these sorts and filters. At first, this might seem like a pretty useless feature, but when you’re programmatically creating a spreadsheet that is going to be sent and used by somebody else, it’s still nice to at least create the filters and allow people to use it afterward. The code below is an example of how you would add some filters to our existing spreadsheet: # Check the used spreadsheet space using the attribute \"dimensions\" You should now see the filters created when opening the spreadsheet in your editor: You don’t have to use if you know precisely which part of the spreadsheet you want to apply filters to. Formulas (or formulae) are one of the most powerful features of spreadsheets. They gives you the power to apply specific mathematical equations to a range of cells. Using formulas with is as simple as editing the value of a cell. You can see the list of formulas supported by : Let’s add some formulas to our spreadsheet. Starting with something easy, let’s check the average star rating for the 99 reviews within the spreadsheet: If you open the spreadsheet now and go to cell , you should see that its value is: 4.18181818181818. Have a look in the editor: You can use the same methodology to add any formulas to your spreadsheet. For example, let’s count the number of reviews that had helpful votes: # The helpful votes are counted on column \"I\" You should get the number on your spreadsheet cell like so: You’ll have to make sure that the strings within a formula are always in double quotes, so you either have to use single quotes around the formula like in the example above or you’ll have to escape the double quotes inside the formula: . There are a ton of other formulas you can add to your spreadsheet using the same procedure you tried above. Give it a go yourself! Even though styling a spreadsheet might not be something you would do every day, it’s still good to know how to do it. Using , you can apply multiple styling options to your spreadsheet, including fonts, borders, colors, and so on. Have a look at the documentation to learn more. You can also choose to either apply a style directly to a cell or create a template and reuse it to apply styles to multiple cells. Let’s start by having a look at simple cell styling, using our again as the base spreadsheet: If you open your spreadsheet now, you should see quite a few different styles on the first 5 cells of column :\n• A2 with the text in bold\n• A3 with the text in red and bigger font size\n• A5 with a square border around the text Note: For the colors, you can also use HEX codes instead by doing . You can also combine styles by simply adding them to the cell at the same time: # Reusing the same styles from the example above Have a look at cell here: When you want to apply multiple styles to one or several cells, you can use a class instead, which is like a style template that you can use over and over again. Have a look at the example below: # Now let's apply this to all first row (header) cells If you open the spreadsheet now, you should see that its first row is bold, the text is aligned to the center, and there’s a small bottom border! Have a look below: As you saw above, there are many options when it comes to styling, and it depends on the use case, so feel free to check documentation and see what other things you can do. This feature is one of my personal favorites when it comes to adding styles to a spreadsheet. It’s a much more powerful approach to styling because it dynamically applies styles according to how the data in the spreadsheet changes. In a nutshell, conditional formatting allows you to specify a list of styles to apply to a cell (or cell range) according to specific conditions. For example, a widespread use case is to have a balance sheet where all the negative totals are in red, and the positive ones are in green. This formatting makes it much more efficient to spot good vs bad periods. Without further ado, let’s pick our favorite spreadsheet— —and add some conditional formatting. You can start by adding a simple one that adds a red background to all reviews with less than 3 stars: Now you’ll see all the reviews with a star rating below 3 marked with a red background: Code-wise, the only things that are new here are the objects and :\n• is quite similar to , which you already saw above, and it’s used to aggregate multiple styles such as fonts, borders, alignment, and so forth.\n• is responsible for selecting the cells and applying the styles if the cells match the rule’s logic. Using a object, you can create numerous conditional formatting scenarios. However, for simplicity sake, the package offers 3 built-in formats that make it easier to create a few common conditional formatting patterns. These built-ins are: The ColorScale gives you the ability to create color gradients: # Again, let's add this gradient to the star ratings, column \"H\" Now you should see a color gradient on column , from red to green, according to the star rating: You can also add a third color and make two gradients instead: # Again, let's add this gradient to the star ratings, column \"H\" This time, you’ll notice that star ratings between 1 and 3 have a gradient from red to yellow, and star ratings between 3 and 5 have a gradient from yellow to green: The IconSet allows you to add an icon to the cell according to its value: You’ll see a colored arrow next to the star rating. This arrow is red and points down when the value of the cell is 1 and, as the rating gets better, the arrow starts pointing up and becomes green: The package has a full list of other icons you can use, besides the arrow. Finally, the DataBar allows you to create progress bars: You’ll now see a green progress bar that gets fuller the closer the star rating is to the number 5: As you can see, there are a lot of cool things you can do with conditional formatting. Here, you saw only a few examples of what you can achieve with it, but check the documentation to see a bunch of other options. Even though images are not something that you’ll often see in a spreadsheet, it’s quite cool to be able to add them. Maybe you can use it for branding purposes or to make spreadsheets more personal. To be able to load images to a spreadsheet using , you’ll have to install : Apart from that, you’ll also need an image. For this example, you can grab the Real Python logo below and convert it from to using an online converter such as cloudconvert.com, save the final file as , and copy it to the root folder where you’re running your examples: Afterward, this is the code you need to import that image into the spreadsheet: # Let's use the hello_world spreadsheet since it has less data # A bit of resizing to not fill the whole spreadsheet with the logo You have an image on your spreadsheet! Here it is: The image’s left top corner is on the cell you chose, in this case, . Another powerful thing you can do with spreadsheets is create an incredible variety of charts. Charts are a great way to visualize and understand loads of data quickly. There are a lot of different chart types: bar chart, pie chart, line chart, and so on. has support for a lot of them. Here, you’ll see only a couple of examples of charts because the theory behind it is the same for every single chart type: Note: A few of the chart types that currently doesn’t have support for are Funnel, Gantt, Pareto, Treemap, Waterfall, Map, and Sunburst. For any chart you want to build, you’ll need to define the chart type: , , and so forth, plus the data to be used for the chart, which is called . Before you can build your chart, you need to define what data you want to see represented in it. Sometimes, you can use the dataset as is, but other times you need to massage the data a bit to get additional information. Let’s start by building a new workbook with some sample data: Now you’re going to start by creating a bar chart that displays the total number of sales per product: There you have it. Below, you can see a very straightforward bar chart showing the difference between online product sales online and in-store product sales: Like with images, the top left corner of the chart is on the cell you added the chart to. In your case, it was on cell . Note: Depending on whether you’re using Microsoft Excel or an open-source alternative (LibreOffice or OpenOffice), the chart might look slightly different. Try creating a line chart instead, changing the data a bit: With the above code, you’ll be able to generate some random data regarding the sales of 3 different products across a whole year. Once that’s done, you can very easily create a line chart with the following code: Here’s the outcome of the above piece of code: One thing to keep in mind here is the fact that you’re using when adding the data. This argument makes the chart plot row by row instead of column by column. In your sample data, you see that each product has a row with 12 values (1 column per month). That’s why you use . If you don’t pass that argument, by default, the chart tries to plot by column, and you’ll get a month-by-month comparison of sales. Another difference that has to do with the above argument change is the fact that our now starts from the first column, , instead of the second one. This change is needed because the chart now expects the first column to have the titles. There are a couple of other things you can also change regarding the style of the chart. For example, you can add specific categories to the chart: Add this piece of code before saving the workbook, and you should see the month names appearing instead of numbers: Code-wise, this is a minimal change. But in terms of the readability of the spreadsheet, this makes it much easier for someone to open the spreadsheet and understand the chart straight away. Another thing you can do to improve the chart readability is to add an axis. You can do it using the attributes and : This will generate a spreadsheet like the below one: As you can see, small changes like the above make reading your chart a much easier and quicker task. There is also a way to style your chart by using Excel’s default property. In this case, you have to choose a number between 1 and 48. Depending on your choice, the colors of your chart change as well: # You can play with this by choosing any number between 1 and 48 With the style selected above, all lines have some shade of orange: There is no clear documentation on what each style number looks like, but this spreadsheet has a few examples of the styles available. Here’s the full code used to generate the line chart with categories, axis titles, and style: There are a lot more chart types and customization you can apply, so be sure to check out the package documentation on this if you need some specific formatting. You already saw how to convert an Excel spreadsheet’s data into Python classes, but now let’s do the opposite. Let’s imagine you have a database and are using some Object-Relational Mapping (ORM) to map DB objects into Python classes. Now, you want to export those same objects into a spreadsheet. Let’s assume the following data classes to represent the data coming from your database regarding product sales: Now, let’s generate some random data, assuming the above classes are stored in a file: # Ignore these for now. You'll use them in a sec ;) By running this piece of code, you should get 5 products with 5 months of sales with a random quantity of sales for each month. Now, to convert this into a spreadsheet, you need to iterate over the data and append it to the spreadsheet: That’s it. That should allow you to create a spreadsheet with some data coming from your database. However, why not use some of that cool knowledge you gained recently to add a chart as well to display that data more visually? All right, then you could probably do something like this: Now we’re talking! Here’s a spreadsheet generated from database objects and with a chart and everything: That’s a great way for you to wrap up your new knowledge of charts! Even though you can use Pandas to handle Excel files, there are few things that you either can’t accomplish with Pandas or that you’d be better off just using directly. For example, some of the advantages of using are the ability to easily customize your spreadsheet with styles, conditional formatting, and such. But guess what, you don’t have to worry about picking. In fact, has support for both converting data from a Pandas DataFrame into a workbook or the opposite, converting an workbook into a Pandas DataFrame. Note: If you’re new to Pandas, check our course on Pandas DataFrames beforehand. First things first, remember to install the package: Now that you have some data, you can use to convert it from a DataFrame into a worksheet: You should see a spreadsheet that looks like this: If you want to add the DataFrame’s index, you can change , and it adds each row’s index into your spreadsheet. On the other hand, if you want to convert a spreadsheet into a DataFrame, you can also do it in a very straightforward way like so: Alternatively, if you want to add the correct headers and use the review ID as the index, for example, then you can also do it like this instead: # Set the first row as the columns for the DataFrame # Set the field \"review_id\" as the indexes for each row Using indexes and columns allows you to access data from your DataFrame easily: # Grab review with id \"R2EQL1V1L6E0C9\", using the index There you go, whether you want to use to prettify your Pandas dataset or use Pandas to do some hardcore algebra, you now know how to switch between both packages."
    },
    {
        "link": "https://jspreadsheet.com/blog/excel-formulas",
        "document": "\n• Go back to the Blog section\n\nEffective data management is essential for individuals and organizations in the digital era. Microsoft Excel has long been renowned for its data manipulation capabilities. But what if we could bring Excel-like formulas to HTML forms? This concept revolutionizes web development by empowering users to perform calculations, automate processes, and generate dynamic outputs directly within web forms. This tutorial presents a step-by-step guide on implementing Excel-like formulas in HTML forms using the Jspreadsheet Formula plugin. The formula results will be rendered and updated automatically through integration with LemonadeJS or React, ensuring real-time updates. Excel formulas are tools for performing calculations and data manipulation. This tutorial explores integrating Excel-like formulas into HTML forms using the Jspreadsheet Formula plugin. With integration with LemonadeJS or React, developers can achieve automatic rendering and real-time updates of the formula results.\n\nAs mentioned in the introduction, achieving a smooth user experience involves updating the formula result whenever the user modifies an input value. While this can be accomplished using events, in this tutorial, we will leverage the two-way data binding feature to automatically update the formula result based on changes made to the HTML input elements. By implementing two-way data binding and incorporating features like the home tab and absolute cell references, developers can ensure that the formula result remains up to date, providing a seamless and responsive user experience.\n\nThe following example demonstrates how to create a dynamic HTML form that calculates the sum and average of selected cells. Start by clicking the cell where you want the result to appear, then type an equal sign in the formula bar. Next, choose the range of cells you want to include in the calculation and use the SUM function to add the values. To calculate the average, use the AVERAGE function. Finally, press Enter to execute the formula and see the result in the selected cell.\n\nIf using Excel-like formulas in an enterprise setting appeals to you, JSS Formula Pro may be the perfect fit. This professional tool empowers you to deploy these formulas on both the front and back ends. It has over 400 formulas and supports cross-calculations, multiple virtual worksheets, and various other functionalities. Check out JSS Formula Pro for an enhanced experience.\n\nAnother complementary solution is Jspreadsheet, a platform that allows you to construct feature-rich JavaScript data grids furnished with Excel-like controls. You can apply Excel-like formulas to create sophisticated applications, enhancing the user experience. For additional information about our data grid solution, kindly visit https://jspreadsheet.com.\n\nWhy Do I Need an Excel Formula?\n\nExcel formulas are essential for data analysis, reporting, and decision-making. Incorporating Excel-like formulas into your HTML forms enables users to perform calculations, analyze data, and generate dynamic reports. Whether calculating the average of a range of cells, using the SUM function to add values, or working with date and time functions, Excel-like formulas enhance the functionality and interactivity of your forms."
    },
    {
        "link": "https://stackoverflow.com/questions/74906181/spreadsheet-formula-and-result-in-single-text-input",
        "document": "I have been searching for a way to type a formula into a single text input and when I hit the Enter key, the formula executes and the result replaces the formula in the same input box.\n\nReally I want it to function exactly like an Excel cell. https://formulajs.info/functions/ does what I want, except there is a button to click and the result comes back in a separate input box.\n\nI'm learning to write code, so I don't have the skills to reverse-engineer that plugin, and that was the only thing I could find online that was even close. Most of my searches just keep turning up grid spreadsheets with formulas and it is important for me to keep it to a single input.\n\nDoes anyone have any ideas of where I might find something already made or how I could make something like that for myself? I don't need all the fancy engineering, financial, etc types. I just want simple math with an option for parentheses to nest formulas, ie 2*6+(8/4) gives a result of 14."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/dev/add-ins/excel/excel-add-ins-ranges-set-get-values",
        "document": "Set and get range values, text, or formulas using the Excel JavaScript API\n\nThis article provides code samples that set and get range values, text, or formulas with the Excel JavaScript API. For the complete list of properties and methods that the object supports, see Excel.Range class.\n\nThe Excel JavaScript API doesn't have a \"Cell\" object or class. Instead, the Excel JavaScript API defines all Excel cells as objects. An individual cell in the Excel UI translates to a object with one cell in the Excel JavaScript API. A single object can also contain multiple contiguous cells. See Work with cells using the Excel JavaScript API to learn more.\n\nThe following code samples set values and formulas for a single cell or a range of cells.\n\nThe following code sample sets the value of cell C3 to \"5\" and then sets the width of the columns to best fit the data.\n\nThe following code sample sets values for the cells in the range B5:D5 and then sets the width of the columns to best fit the data.\n\nThe following code sample sets a formula for cell E3 and then sets the width of the columns to best fit the data.\n\nThe following code sample sets formulas for cells in the range E2:E6 and then sets the width of the columns to best fit the data.\n\nThese code samples get values, text, and formulas from a range of cells.\n\nGet values from a range of cells\n\nThe following code sample gets the range B2:E6, loads its property, and writes the values to the console. The property of a range specifies the raw values that the cells contain. Even if some cells in a range contain formulas, the property of the range specifies the raw values for those cells, not any of the formulas.\n\nData in range (values in column E are a result of formulas)\n\nrange.values (as logged to the console by the code sample above)\n\nGet text from a range of cells\n\nThe following code sample gets the range B2:E6, loads its property, and writes it to the console. The property of a range specifies the display values for cells in the range. Even if some cells in a range contain formulas, the property of the range specifies the display values for those cells, not any of the formulas.\n\nData in range (values in column E are a result of formulas)\n\nrange.text (as logged to the console by the code sample above)\n\nGet formulas from a range of cells\n\nThe following code sample gets the range B2:E6, loads its property, and writes it to the console. The property of a range specifies the formulas for cells in the range that contain formulas and the raw values for cells in the range that do not contain formulas.\n\nData in range (values in column E are a result of formulas)\n\nrange.formulas (as logged to the console by the code sample above)\n• Work with cells using the Excel JavaScript API\n• Set and get ranges using the Excel JavaScript API"
    },
    {
        "link": "https://jspreadsheet.com/docs/v8/formulas",
        "document": "Jspreadsheet implements spreadsheet-like formulas, providing great compatibility with major spreadsheet software, such as Excel or Google Sheets. In this section, you can find which formulas are available, how to create custom formulas and other features.\n\nIn most recent versions, the formula extension has two different versions, Basic or Premium. The Basic is the default version for all Jspreadsheet distributions, while Premium is available for purchase, and it brings some differences, such as:\n\nWhen the Jspreadsheet Pro invokes the method from a valid cell, you will have access to the coordinates of the cell and the instance of the worksheet.\n\nWe are working to bring as many formulas as possible. Meanwhile, you can check for the existing implementation. For security reasons, all references should use capital letters, including the implementation of custom methods.\n\nA summary of configurations related to the use of formulas.\n\nTo support calculations, Jspreadsheet has a few special formulas listed below:\n\nWe are constantly adding new methods and features to bring Jspreadsheet in line with modern software.\n\nIt is possible to create custom methods that will be available in the spreadsheet. The custom method should return the appropriate content for the cell. From version 7 on, Jspreadsheet accepts a DOM element as a return of a function. IMPORTANT : All method names should be created using capital letters.\n\nA basic spreadsheet example using formulas, including currency, percentage and mask.\n\nCross-worksheet formulas have been implemented from version 7 on. The following example has cross-worksheet and cross-spreadsheet formula calculations.\n\nFrom version 8 on, defined names are available on the premium edition.\n\nThis feature is only available in with the JSS Formula Premium plugin.\n\nAll custom methods should be declared in capital letters."
    },
    {
        "link": "https://developer.mescius.com/spreadjs/javascript-excel-calculations",
        "document": "One of the most significant benefits of using spreadsheets in your JavaScript applications is the extensive support of the calculation engine features. SpreadJS provides the most comprehensive formula support for your most demanding calculation needs to help create analysis, budgeting, dashboard, data collection and management, scientific, and financial applications. SpreadJS offers a complete function library that includes Database, Date and Time, Engineering, Financial, Information, Logical, Lookup, Math and Trigonometry, Statistical, Text and Volatile functions, dynamic arrays and custom user defined functions that are optimized for big data, complex calculations, and advanced Excel models."
    }
]