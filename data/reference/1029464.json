[
    {
        "link": "https://wiki.archlinux.org/title/Network_bridge",
        "document": "A network bridge is a virtual network device that forwards packets between two or more network segments. A bridge behaves like a virtual network switch and works transparently. Other machines in the network do not need to know about its existence. Physical network devices (e.g. ) and virtual network devices (e.g. ) can be connected to it.\n\nThere are a number of ways to create a network bridge. This section outlines the steps required to set up a bridge with at least one ethernet interface. This is useful for things like the bridge mode of QEMU, setting a software based access point, etc.\n\nWarning: If you are creating a bridge on a remote server, and you plan to add the main network interface to the bridge, make sure you first add the main network interface's IP address on the bridge, set the bridge up, and set up a backup default route, before adding the interface to the bridge. Otherwise the server will lose network connectivity and you will not be able to SSH back into it.\n\nThis section describes the management of a network bridge using the ip tool from the iproute2 package, which is required by the base meta package.\n\nCreate a new bridge and change its state to up:\n\nTo add an interface (e.g. ) into the bridge, its state must be up:\n\nAdding the interface into the bridge is done by setting its master to :\n\nTo show the existing bridges and associated interfaces, use the bridge utility (also part of iproute2). See bridge(8) for details.\n\nThis is how to remove an interface from a bridge:\n\nThe interface will still be up, so you may also want to bring it down:\n\nTo delete a bridge issue the following command:\n\nThis will automatically remove all interfaces from the bridge. The slave interfaces will still be up, though, so you may also want to bring them down after.\n\nIf you are doing this on a remote server, and the plan is to add the main network interface (e.g. ) to the bridge, first take note of the current network status:\n\nFor this example, this is the relevant info:\n\nThen, execute these commands in quick succession. It is advisable to put them in a script file and execute the script:\n• Once is added to the bridge, it won't be used for routing anymore. will take its place, so it needs an IP and have the default route attached.\n• We cannot delete the IP address on before adding the interface to , otherwise network connectivity will be lost.\n• However, we need to quickly remove the ip address on , otherwise network connectivity will be lost after a short period.\n• Linux does not allow two default routes on the same routing table. The easy workaround is just to append the new default route.\n• Once the IP address of is removed, the default route attached to it is automatically removed.\n\nThis section describes the management of a network bridge using the legacy brctl tool from the bridge-utils package. See brctl(8) for full listing of options.\n\nAdd a device to a bridge, for example :\n\nNote: Adding an interface to a bridge will cause the interface to lose its existing IP address. If you are connected remotely via the interface you intend to add to the bridge, you will lose your connection. This problem can be worked around by scripting the bridge to be created at system startup.\n\nShow current bridges and what interfaces they are connected to:\n\nDelete a bridge, you need to first set it to down:\n\nFirst, take note of the current network status:\n\nFor this example, this is the relevant info:\n\nThen, execute these commands in quick succession. It is advisable to put them in a script file and execute the script:\n\nGNOME's Network settings can create bridges, but currently will not auto-connect to them or slave/attached interfaces. Open Network Settings, add a new interface of type Bridge, add a new bridged connection, and select the MAC address of the device to attach to the bridge.\n\nKDE's plasma-nm can create bridges. In order to view, create and modify bridge interfaces open the Connections window either by right clicking the Networks applet in the system tray and selecting Configure Network Connections... or from System Settings > Connections. Click the Configuration button in the lower left corner of the module and enable \"Show virtual connections\". A session restart will be necessary to use the enabled functionality.\n\nnm-connection-editor can create bridges in the same manner as GNOME's Network settings. This page shows these steps with screenshots.\n\nnmcli from networkmanager can create bridges. For example, to create a bridge with STP disabled (to avoid the bridge being advertised on the network) run:\n\nMake your Ethernet interface ( in this example, see Network configuration#Network interfaces for instructions on finding out the name) into a slave to the bridge:\n\nBring the existing connection down (you can acquire the connection name with ):\n\nBring the new bridge up:\n\nIf NetworkManager's default interface for the device you added to the bridge connects automatically, you may want to disable that by clicking the gear next to it in Network Settings, and unchecking Connect automatically under Identity or using the command:\n\nWhen the bridge is fully set up, it can be assigned an IP address:\n\nSet up a DNS server (this will also avoid not being able to load any pages after you apply the changes):\n\nTo add a wireless interface to a bridge, you first have to assign the wireless interface to an access point or start an access point with hostapd. Otherwise the wireless interface will not be added to the bridge.\n\nSee also Debian:BridgeNetworkConnections#Bridging with a wireless NIC.\n\nSpeeding up traffic destinated to the bridge itself\n\nIn some situations the bridge not only serves as a bridge box, but also talks to other hosts. Packets that arrive on a bridge port and that are destinated to the bridge box itself will by default enter the iptables INPUT chain with the logical bridge port as input device. These packets will be queued twice by the network code, the first time they are queued after they are received by the network device. The second time after the bridge code examined the destination MAC address and determined it was a locally destinated packet and therefore decided to pass the frame up to the higher protocol stack.[1]\n\nThe way to let locally destinated packets be queued only once is by brouting them in the BROUTING chain of the broute table. Suppose br0 has an IP address and that br0's bridge ports do not have an IP address. Using the following rule should make all locally directed traffic be queued only once:\n\nThe replies from the bridge will be sent out through the br0 device (assuming your routing table is correct and sends all traffic through br0), so everything keeps working neatly, without the performance loss caused by the packet being queued twice.\n\nThe redirect target is needed because the MAC address of the bridge port is not necessarily equal to the MAC address of the bridge device. The packets destinated to the bridge box will have a destination MAC address equal to that of the bridge br0, so that destination address must be changed to that of the bridge port.\n\nIt may help to remove all IP addresses and routes from the interface (e.g. ) that was added to the bridge and configure these parameters for the bridge instead.\n\nFirst of all, make sure there is no dhcpcd instance running for , otherwise the deleted addresses may be reassigned.\n\nRemove address and route from the interface:\n\nNow IP address and route for the earlier configured bridge must be set. This is usually done by starting a DHCP client for this interface. Otherwise, consult Network configuration for manual configuration.\n\nNo networking on hosted servers after bridge configuration\n\nAs the MAC address of the bridge is not necessarily equal to the MAC address of the networking card usually used by the server, the server provider might drop traffic coming out from the bridge, resulting in a loss of connectivity when bridging e.g. the server ethernet interface. Configuring the bridge to clone the mac address of the ethernet interface might therefore be needed for hosted servers.\n\nCannot connect to bridge connection after connecting to usual connection\n\nIn Network Manager applet, if you have usual ethernet/wireless connection (not a bridge slave connection), and if you first connect to it, and then try to connect to bridged connection (with or without disconnecting from usual connection first), then you are not able to connect to it. For some reason, the bridge slave connection (it is not listed in network applet) is not activated, even when the auto connect checkbox is enabled.\n\nThe workaround is to activate it manually via terminal:\n\nBridge appears to not be working on one side of the network"
    },
    {
        "link": "https://wiki.linuxfoundation.org/networking/bridge",
        "document": "A bridge is a way to connect two Ethernet segments together in a protocol independent way. Packets are forwarded based on Ethernet address, rather than IP address (like a router). Since forwarding is done at Layer 2, all protocols can go transparently through a bridge. The Linux bridge code implements a subset of the ANSI/IEEE 802.1d standard. [1]. The original Linux bridging was first done in Linux 2.2, then rewritten by Lennert Buytenhek. The code for bridging has been integrated into 2.4 and 2.6 kernel series.\n\nThe brctl show command gives you a summary about the overall bridge status, and the instances running as shown below: Once a bridge is running the brctl showmacs will show information about network addresses of traffic being forwarded (and the bridge itself). # brctl showmacs br549 port no mac addr is local? ageing timer 1 00:00:4c:9f:0b:ae no 17.84 1 00:00:4c:9f:0b:d2 yes 0.00 2 00:00:4c:9f:0b:d3 yes 0.00 1 00:02:55:1a:35:09 no 53.84 1 00:02:55:1a:82:87 no 11.53 ... The aging time is the number of seconds a MAC address will be kept in the forwarding database after having received a packet from this MAC address. The entries in the forwarding database are periodically timed out to ensure they won't stay around forever. Normally there should be no need to modify this parameter, but it can be changed with (time is in seconds). Setting ageing time to zero makes all entries permanent.\n\nIGMP snooping support is not yet included in bridge-utils or iproute2, but it can be easily controlled through sysfs interface. For brN, the settings can be found under /sys/devices/virtual/net/brN/bridge. This option allows the user to disable IGMP snooping completely. It also allows the user to reenable snooping when it has been automatically disabled due to hash collisions. If the collisions have not been resolved however the system will refuse to reenable snooping. This allows the user to forcibly enable/disable ports as having multicast routers attached. A port with a multicast router will receive all multicast traffic. The value 0 disables it completely. The default is 1 which lets the system automatically detect the presence of routers (currently this is limited to picking up queries), and 2 means that the ports will always receive all multicast traffic. Note: this setting can be enabled/disable on a per-port basis, also through sysfs interface (e.g. if eth0 is some bridge's active port, then you can adjust /sys/…../eth0/brport/multicast_router) These settings allow the user to control the hash elasticity/max parameters. The elasticity setting does not take effect until the next new multicast group is added. At which point it is checked and if after rehashing it still can't be satisfied then snooping will be disabled. The max setting on the other hand takes effect immediately. It must be a power of two and cannot be set to a value less than the current number of multicast group entries. This is the only way to shrink the multicast hash. These allow the user to control various values related to IGMP snooping. More details about the options, some discussions and rationale can be found in http://thread.gmane.org/gmane.linux.network/153338\n\nWhat does a bridge do?\n\nWhy is this code better than a switch?\n\nPlease note that this code wasn't written with the intent of having Linux boxes take over from dedicated networking hardware. Don't see the Linux bridging code as a replacement for switches, but rather as an extension of the Linux networking capabilities. Just as there are situations where a Linux router is better than a dedicated router (and vice versa), there are situations where a Linux bridge is better than a dedicated bridge (and vice versa). Most of the power of the Linux bridging code lies in its flexibility. There is a whole lot of bizarre stuff you can do with Linux already (read Linux Advanced Routing and Traffic Control document to see some of the possiblities), and the bridging code adds some more filter into the mix. One of the most significant advantages of a Linux solution over a dedicated solution that come to mind is Linux' extensive firewalling capabilities. It is possible to use the full functionality of netfilter (iptables) in combination with bridging, which provides way more functionality than most proprietary offerings do.\n\nWhy is this code worse than a switch?\n\nWhat is the performance of the bridge?\n\nMy bridge does not show up in traceroute!\n\nNo traffic gets trough (except ARP and STP)\n\nAre there plans for RSTP (802.1w) support?\n\nWhat can be bridged?\n\nCan I do bridging in combination with netfilter/iptables?\n\nI keep getting the message **retransmitting tcn bpdu**!\n\nIt means that your Linux bridge is retransmitting a Topology Change Notification Bridge Protocol Data Unit (so now you know what the letters are for . Seriously, there is probably another switch (or Linux bridge) nearby that isn't complying to the rules of the spanning tree protocol (which is what bridges speak). In each bridged local area network, there is one 'master bridge', which is also called the root bridge. You can find out which bridge this is using brctl. When the topology of a bridged local area network changes (f.e. somebody unplugs a cable between two bridges), the bridge which detects this sends a topology change notification to the root bridge. The root bridge will respond to this by setting a 'topology changed' bit in the hello packets it sends out for the next X seconds (X usually being 30). This way, all bridges will learn of the topology change, so that they can take measures like timing out learned MAC entries faster for example. After having sent out a topology change notification, if a bridge does not find the 'topology changed' bit set in the hello packets received (which in essence serves as the 'acknowledgment' of the topology change notification), it concludes that the topology change notification was lost. So it will retransmit it. However, some bridges run lobotomized implementations of the Spanning Tree Protocol which causes them not to acknowledge topology change notifications. If you have one of those bridges as your root bridge, all of the other bridges will keep retransmitting their topology changed notifications. Which will lead to these kinds of syslog messages. There are a number of things you can do:\n• None Find out which bridge is the root bridge, find out where it is located, and what internetworking software it runs. Please report this info to the mailing list (or to me directly), so that I can keep a blacklist.\n• None Force the linux bridge to be the root bridge. See what the priority of the current root bridge is, and use the brctl 'setbridgeprio' command to set the priority of the linux bridge to 1 lower. (The bridge with the lowest priority always becomes the root bridge.)\n• None Disable the spanning tree protocol on your linux bridge altogether. In this case, watch out for bridging loops! If you have loops in your topology, and if no bridge in the loop is running the spanning tree protocol, mayhem will come your way, as packets will be forwarded forever. Don't Do This(TM).\n\nIt doesn't work with my regular Ethernet card!\n\nIt doesn't work with my Wireless card!\n\nThis is a known problem, and it is not caused by the bridge code. Many wireless cards don't allow spoofing of the source address. It is a firmware restriction with some chipsets. You might find some information in the bridge mailing list archives to help. Has anyone found a way to get around Wavelan not allowing anything but its own MAC address? (answer by Michael Renzmann (mrenzmann at compulan.de)) Well, for 99% of computer users there will never be a way to get rid of this. For this function a special firmware is needed. This firmware can be loaded into the RAM of any WaveLAN card, so it could do its job with bridging. But there is no documentation on the interface available to the public. The only way to achieve this is to have a full version of the hcf library which controls every function of the card and also allows accessing the card's RAM. To get this full version Lucent wants to know that it will be a financial win for them, also you have to sign an NDA. So be sure that you won't most probably get access to this peace of software until Lucent does not change its mind in this (which I doubt never will happen).\n\nI get the error 'too much work in interrupt'\n\nThe bridge will forward DHCP traffic (broadcasts) and responses. You can also use DHCP to set the local IP address of the bridge pseudo-interface. One common mistake is that the default bridge forwarding delay setting is 30 seconds. This means that for the first 30 seconds after an interface joins a bridge, it won't send anything. This is because if the bridge is being used in a complex topology, it needs to discover other bridges and not create loops. This problem was one of the reasons for the creation of Rapid Spanning Tree Protocol (RSTP). If the bridge is being used standalone (no other bridges near by). Then it is safe to turn the forwarding delay off (set it to zero), before adding interface to a bridge. Then you can run DHCP client right away."
    },
    {
        "link": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-a-network-bridge_configuring-and-managing-networking",
        "document": "A network bridge is a link-layer device which forwards traffic between networks based on a table of MAC addresses. The bridge builds the MAC addresses table by listening to network traffic and thereby learning what hosts are connected to each network. For example, you can use a software bridge on a Red Hat Enterprise Linux host to emulate a hardware bridge or in virtualization environments, to integrate virtual machines (VM) to the same network as the host.\n\nA bridge requires a network device in each network the bridge should connect. When you configure a bridge, the bridge is called and the devices it uses .\n\nYou can create bridges on different types of devices, such as:\n\nDue to the IEEE 802.11 standard which specifies the use of 3-address frames in Wi-Fi for the efficient use of airtime, you cannot configure a bridge over Wi-Fi networks operating in Ad-Hoc or Infrastructure modes.\n\nTo configure a network bridge on the command line, use the utility.\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• None To use team, bond, or VLAN devices as ports of the bridge, you can either create these devices while you create the bridge or you can create them in advance as described in:\n• None Display the network interfaces, and note the names of the interfaces you want to add to the bridge:\n• and are not configured. To use these devices as ports, add connection profiles in the next step.\n• and have existing connection profiles. To use these devices as ports, modify their profiles in the next step.\n• None Assign the interfaces to the bridge.\n• None If the interfaces you want to assign to the bridge are not configured, create new connection profiles for them: These commands create profiles for and , and add them to the connection.\n• None If you want to assign an existing connection profile to the bridge:\n• None Set the parameter of these connections to : These commands assign the existing connection profiles named and to the connection.\n• None\n• None If you plan to use this bridge device as a port of other devices, enter:\n• To use DHCP, no action is required.\n• None To set a static IPv4 address, network mask, default gateway, and DNS server to the connection, enter:\n• None\n• None If you plan to use this bridge device as a port of other devices, enter:\n• To use stateless address autoconfiguration (SLAAC), no action is required.\n• None To set a static IPv6 address, network mask, default gateway, and DNS server to the connection, enter:\n• None Optional: Configure further properties of the bridge. For example, to set the Spanning Tree Protocol (STP) priority of to , enter:\n• None Verify that the ports are connected, and the column displays the port’s connection name: When you activate any port of the connection, NetworkManager also activates the bridge, but not the other ports of it. You can configure that Red Hat Enterprise Linux enables all ports automatically when the bridge is enabled:\n• None Enable the parameter of the bridge connection:\n• None Use the utility to display the link status of Ethernet devices that are ports of a specific bridge:\n• None Use the utility to display the status of Ethernet devices that are ports of any bridge device: To display the status for a specific Ethernet device, use the command.\n• and man pages on your system\n• How to configure a bridge with VLAN information? (Red Hat Knowledgebase)\n\n6.2. Configuring a network bridge by using the RHEL web console Use the RHEL web console to configure a network bridge if you prefer to manage network settings using a web browser-based interface.\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• None To use team, bond, or VLAN devices as ports of the bridge, you can either create these devices while you create the bridge or you can create them in advance as described in:\n• Configuring a network bond by using the RHEL web console\n• Configuring VLAN tagging by using the RHEL web console\n• You have installed the RHEL 8 web console.\n• You have enabled the cockpit service.\n• None Your user account is allowed to log in to the web console. For instructions, see Installing and enabling the web console.\n• None Log in to the RHEL 8 web console. For details, see Logging in to the web console.\n• Select the tab in the navigation on the left side of the screen.\n• Enter the name of the bridge device you want to create.\n• Select the interfaces that should be ports of the bridge.\n• None Optional: Enable the Spanning tree protocol (STP) feature to avoid bridge loops and broadcast radiation.\n• None By default, the bridge uses a dynamic IP address. If you want to set a static IP address:\n• Click the name of the bridge in the section.\n• Click next to the protocol you want to configure.\n• Select next to , and enter the IP address, prefix, and default gateway.\n• In the section, click the button, and enter the IP address of the DNS server. Repeat this step to set multiple DNS servers.\n• In the section, click the button, and enter the search domain.\n• None If the interface requires static routes, configure them in the Routes section.\n• None Select the Networking tab in the navigation on the left side of the screen, and check if there is incoming and outgoing traffic on the interface:\n\nThe application provides a text-based user interface for NetworkManager. You can use to configure a network bridge on a host without a graphical interface.\n• Navigate by using the cursor keys.\n• Press a button by selecting it and hitting .\n• Select and clear checkboxes by using .\n• To return to the previous screen, use .\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• None If you do not know the network device names on which you want configure a network bridge, display the available devices:\n• Select from the list of network types, and press .\n• None Optional: Enter a name for the NetworkManager profile to be created. On hosts with multiple profiles, a meaningful name makes it easier to identify the purpose of a profile.\n• Enter the bridge device name to be created into the field.\n• None Add ports to the bridge to be created:\n• Press next to the list.\n• Select the type of the interface you want to add as port to the bridge, for example, .\n• Optional: Enter a name for the NetworkManager profile to be created for this bridge port.\n• Enter the port’s device name into the field.\n• None Press to return to the window with the bridge settings. Figure 6.1. Adding an Ethernet device as port to a bridge\n• Repeat these steps to add more ports to the bridge.\n• None Depending on your environment, configure the IP address settings in the and areas accordingly. For this, press the button next to these areas, and select:\n• , if the bridge does not require an IP address.\n• , if a DHCP server or stateless address autoconfiguration (SLAAC) dynamically assigns an IP address to the bridge.\n• None , if the network requires static IP address settings. In this case, you must fill further fields:\n• Press next to the protocol you want to configure to display additional fields.\n• None Press next to , and enter the IP address and the subnet mask in Classless Inter-Domain Routing (CIDR) format. If you do not specify a subnet mask, NetworkManager sets a subnet mask for IPv4 addresses and for IPv6 addresses.\n• Enter the address of the default gateway.\n• Press next to , and enter the DNS server address.\n• Press next to , and enter the DNS search domain. Figure 6.2. Example of a bridge connection without IP address settings\n• Press to create and automatically activate the new connection.\n• Press to return to the main menu.\n• Select , and press to close the application.\n• None Use the utility to display the link status of Ethernet devices that are ports of a specific bridge:\n• None Use the utility to display the status of Ethernet devices that are ports of any bridge device: To display the status for a specific Ethernet device, use the command.\n\nIf you use Red Hat Enterprise Linux with a graphical interface, you can configure network bridges using the application. Note that can add only new ports to a bridge. To use an existing connection profile as a port, create the bridge using the utility as described in Configuring a network bridge by using nmcli.\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• To use team, bond, or VLAN devices as ports of the bridge, ensure that these devices are not already configured.\n• Click the button to add a new connection.\n• None\n• Optional: Set the name of the bridge interface in the field.\n• None Click the Add button to create a new connection profile for a network interface and adding the profile as a port to the bridge.\n• Select the connection type of the interface. For example, select for a wired connection.\n• Optional: Set a connection name for the port device.\n• If you create a connection profile for an Ethernet device, open the tab, and select in the field the network interface you want to add as a port to the bridge. If you selected a different device type, configure it accordingly.\n• None Repeat the previous step for each interface you want to add to the bridge.\n• Optional: Configure further bridge settings, such as Spanning Tree Protocol (STP) options.\n• None Configure the IP address settings on both the IPv4 Settings and IPv6 Settings tabs:\n• If you plan to use this bridge device as a port of other devices, set the field to .\n• To use DHCP, leave the field at its default, .\n• None To use static IP settings, set the Method field to Manual and fill the fields accordingly:\n• None Use the utility to display the link status of Ethernet devices that are ports of a specific bridge.\n• None Use the utility to display the status of Ethernet devices that are ports in any bridge device: To display the status for a specific Ethernet device, use the command.\n• Configuring NetworkManager to avoid using a specific profile to provide a default gateway\n• How to configure a bridge with VLAN information? (Red Hat Knowledgebase)\n\n6.6. Configuring a network bridge by using the RHEL system role You can connect multiple networks on layer 2 of the Open Systems Interconnection (OSI) model by creating a network bridge. To configure a bridge, create a connection profile in NetworkManager. By using Ansible and the RHEL system role, you can automate this process and remotely configure connection profiles on the hosts defined in a playbook. You can use the RHEL system role to configure a bridge and, if a connection profile for the bridge’s parent device does not exist, the role can create it as well. If you want to assign IP addresses, gateways, and DNS settings to a bridge, configure them on the bridge and not on its ports.\n• You have prepared the control node and the managed nodes\n• You are logged in to the control node as a user who can run playbooks on the managed nodes.\n• The account you use to connect to the managed nodes has permissions on them.\n• Two or more physical or virtual network devices are installed on the server.\n• None Create a playbook file, for example , with the following content: --- - name: Configure the network hosts: managed-node-01.example.com tasks: - name: Bridge connection profile with two Ethernet ports ansible.builtin.include_role: name: rhel-system-roles.network vars: network_connections: # Bridge profile - name: bridge0 type: bridge interface_name: bridge0 ip: dhcp4: yes auto6: yes state: up # Port profile for the 1st Ethernet device - name: bridge0-port1 interface_name: enp7s0 type: ethernet controller: bridge0 port_type: bridge state: up # Port profile for the 2nd Ethernet device - name: bridge0-port2 interface_name: enp8s0 type: ethernet controller: bridge0 port_type: bridge state: up The settings specified in the example playbook include the following: Sets the type of the profile to create. The example playbook creates three connection profiles: One for the bridge and two for the Ethernet devices. Enables IPv6 auto-configuration. By default, NetworkManager uses Router Advertisements. If the router announces the flag, NetworkManager requests an IPv6 address and prefix from a DHCPv6 server. For details about all variables used in the playbook, see the file on the control node.\n• None Note that this command only validates the syntax and does not protect against a wrong but valid configuration.\n• None Display the link status of Ethernet devices that are ports of a specific bridge:\n• None Display the status of Ethernet devices that are ports of any bridge device:"
    },
    {
        "link": "https://developers.redhat.com/articles/2022/04/06/introduction-linux-bridging-commands-and-features",
        "document": "A Linux bridge is a kernel module that behaves like a network switch, forwarding packets between interfaces that are connected to it. It's usually used for forwarding packets on routers, on gateways, or between VMs and network namespaces on a host.\n\nThe Linux bridge has included basic support for the Spanning Tree Protocol (STP), multicast, and Netfilter since the 2.4 and 2.6 kernel series. Features that have been added in more recent releases include:\n\nIn this article, you'll get an introduction to these features and some useful commands to enable and control them. You'll also briefly examine Open vSwitch as an alternative to Linux bridging.\n\nAll the commands used in this article are part of the module, which invokes Netlink messages to configure the bridge. There are two commands for setting and configuring bridges: and .\n\ncan add and remove bridges and set their options. displays and manipulates bridges on final distribution boards (FDBs), main distribution boards (MDBs), and virtual local area networks (VLANs).\n\nThe listings that follow demonstrate some basic uses for the two commands. Both require administrator privileges, and therefore the listings are shown with the root prompt instead of a regular user prompt.\n• Show help information about the object:\n• Show bridge details in a pretty JSON format (which is a good way to get bridge key-value pairs):\n\nThe purpose of STP is to prevent a networking loop, which can lead to a traffic storm in the network. Figure 1 shows such a loop.\n\nWith STP enabled, the bridges will send each other Bridge Protocol Data Units (BPDUs) so they can elect a root bridge and block an interface, making the network topology loop-free (Figure 2).\n\nLinux bridging has supported STP since the 2.4 and 2.6 kernel series. To enable STP on a bridge, enter:\n\nNote: The Linux bridge does not support the Rapid Spanning Tree Protocol (RSTP).\n\nNow you can show the STP blocking state on the bridge:\n\nThe line labeled 9 in the output shows that the interface is in a blocking state, as illustrated in Figure 3.\n\nTo change the STP hello time, enter:\n\nYou can use the same basic approach to change other STP parameters, such as maximum age, forward delay, ageing time, and so on.\n\nThe VLAN filter was introduced in Linux kernel 3.8. Previously, to separate VLAN traffic on the bridge, the administrator needed to create multiple bridge/VLAN interfaces. As illustrated in Figure 4, three bridges— , , and —would be needed to support three VLANs to make sure that VLAN traffic went to the corresponding VLANs.\n\nBut with the VLAN filter, just one bridge device is enough to set all the VLAN configurations, as illustrated in Figure 5.\n\nThe following commands enable the VLAN filter and configure three VLANs:\n\nThen the following command enables a VLAN filter on the bridge:\n\nThis next command makes the bridge port transmit only VLAN 2 data:\n\nThe following command, similar to the previous one, makes the bridge port transmit VLAN 2 data. The parameter causes untagged frames to be assigned to this VLAN at ingress ( to bridge), and the parameter causes the packet to be untagged on egress (bridge to ):\n\nThe next command carries out the same operation as the previous one, this time on . The parameter indicates that the link setting is configured on the software bridge. However, because is a default option, this command has the same effect as the previous one:\n\nThe following command enables VLAN 2 and VLAN 3 traffic on :\n\nTo show the VLAN traffic state, enable VLAN statistics (added in kernel 4.7) as follows:\n\nThe previous command enables just global VLAN statistics on the bridge, and is not fine grained enough to show each VLAN's state. To enable per-VLAN statistics when there are port VLANs in the bridge, you also need to enable (added in kernel 4.20). You can run:\n\nThen you can show per-VLAN statistics like so:\n\nVxLAN builds Layer 2 virtual networks on top of a Layer 3 underlay. A VxLAN tunnel endpoint (VTEP) originates and terminates VxLAN tunnels. VxLAN bridging is the function provided by VTEPs to terminate VxLAN tunnels and map the VxLAN network identifier (VNI) to the traditional end host's VLAN.\n\nPreviously, to achieve VLAN tunnel mapping, administrators needed to add local ports and VxLAN network devices (netdevs) into a VLAN filtering bridge. The local ports were configured as trunk ports carrying all VLANs. A VxLAN netdev for each VNI would then need to be added to the bridge. VLAN to VNI mapping was achieved by configuring a port VLAN identifier (pvid) for each VLAN as on the corresponding VxLAN netdev, as shown in Figure 6.\n\nSince 4.11, the kernel has provided a native way to support VxLAN bridging. The topology for this looks like Figure 7. The endpoint in this figure was added with lightweight tunnel (LWT) support to handle multiple VNIs.\n\nTo create a tunnel, you must first add related VIDs to the interfaces:\n\nAlternatively, you can enable the tunnel with this command:\n\nLinux bridging has included support for IGMPv2 and MLDv1 support since kernel version 2.6. IGMPv3/MLDv2 support was added in kernel 5.10.\n\nTo use multicast, enable bridge multicast snooping, querier, and statistics as follows:\n\nBy default, when snooping is enabled, the bridge uses IGMPv2/MLDv1. You can change the versions with these commands:\n\nAfter a port joins a group, you can show the multicast database (mdb) like so:\n\nBridging also supports multicast snooping and querier on a single VLAN. Set them as follows:\n\nYou can show bridge xstats (multicast RX/TX information) with this command:\n\nThere are other multicast parameters you can configure, including , , and .\n\nLinux bridging is always used when virtual machines (VMs) connect to physical networks, by using the virtio tap driver. You can also attach a Single Root I/O Virtualization (SR-IOV) virtual function (VF) in a VM guest to get better performance (Figure 8).\n\nBut the way Linux used to deal with SR-IOV embedded switches limited their expressiveness and flexibility. And the kernel model for controlling the SR-IOV eSwitch did not allow any forwarding unless it was based on MAC/VLAN.\n\nTo make VFs also support dynamic FDB (as in Figure 9) and maintain the benefits of the VLAN filter while still providing optimal performance, Linux bridging added switchdev support in kernel version 4.9. Switchdev allows the offloading of Layer 2 forwarding to a hardware switch such as Mellanox Spectrum devices, DSA-based switches, and MLX5 CX6 Dx cards.\n\nIn switchdev mode, the bridge is up and its related configuration is enabled, e.g., MLX5_BRIDGE for an MLX5 SRIOV eSwitch. Once in switchdev mode, you can connect the VF's representors to the bridge, and frames that are supposed to be transmitted by the bridge are transmitted by hardware only. Their routing will be done in the switch at the network interface controller (NIC).\n\nOnce a frame passes through the VF to its representor, the bridge learns that the source MAC of the VF is behind a particular port. The bridge adds an entry with the MAC address and port to its FDB. Immediately afterward, the bridge sends a message to the mlx5 driver, and the driver adds a relevant rule or line to two tables located in the eSwitch on the NIC. Later, frames with the same destination MAC address that come from the VF don't go through the kernel; instead, they go directly through the NIC to the appropriate port.\n\nSwitchdev support for embedded switches in NICs is simple, but for full-featured switches such as Mellanox Spectrum, the offloading capabilities are much richer, with support for link aggregation group (LAG) hashing (team, bonding), tunneling (VxLAN, etc.), routing, and TC offloading. Routing and TC offloading are out of scope for bridging, but LAGs can be attached to the bridge as well as to VxLAN tunnels, with full support for offloading.\n\nBy default, the traffic forwarded by the bridge does not go through an iptables firewall. To let the iptables forward rules filter Layer 2 traffic, enter:\n\nThe same procedure works for ip6tables and arptables.\n\nAgeing determines the number of seconds a MAC address is kept in the FDB after a packet has been received from that address. After this time has passed, entries are cleaned up. To change the timer, enter:\n\nLinux bridging is very useful and has become popular over the past few years. It supplies Layer 2 forwarding, and connects VMs and networks with VLAN/multicast support. Bridging on Linux is stable, reliable, and easy to set up and configure.\n\nOn the other hand, Linux bridging also has some limitations. It's missing some types of tunnel support, for instance. If you want to get easier network management, more tunnel support (GRE, VXLAN, etc.), Layer 3 forwarding, and integration with software-defined networking (SDN), you can try Open vSwitch (OVS).\n\nWhere to learn more\n\nTo learn more about Linux network interfaces and other networking topics, check out these articles from Red Hat Developer:\n• Why you should use io_uring for network I/O"
    },
    {
        "link": "https://docs.kernel.org/networking/bridge.html",
        "document": "Here are some core structures of bridge code. Note that the kAPI is unstable, and can be changed at any time. if MASTER flag set, this points to a bridge struct if MASTER flag unset, this points to a port struct if MASTER flag set, this is bumped for each port referencing it if MASTER flag unset, this points to the global per-VLAN context for this VLAN entry if MASTER flag set, this is the global vlan multicast context if MASTER flag unset, this is the per-port/vlan multicast context if MASTER flag set, this holds the VLANs MST instance This structure is shared between the global per-VLAN entries contained in the bridge rhashtable and the local per-port per-VLAN entries contained in the port’s rhashtable. The union entries should be interpreted depending on the entry flags that are set.\n\nModern Linux bridge uAPI is accessed via Netlink interface. You can find below files where the bridge and bridge port netlink attributes are defined. Please note that the timer values in the following section are expected in clock_t format, which is seconds multiplied by USER_HZ (generally defined as 100). The bridge forwarding delay is the time spent in LISTENING state (before moving to LEARNING) and in LEARNING state (before moving to FORWARDING). Only relevant if STP is enabled. The valid values are between (2 * USER_HZ) and (30 * USER_HZ). The default value is (15 * USER_HZ). The time between hello packets sent by the bridge, when it is a root bridge or a designated bridge. Only relevant if STP is enabled. The valid values are between (1 * USER_HZ) and (10 * USER_HZ). The default value is (2 * USER_HZ). The hello packet timeout is the time until another bridge in the spanning tree is assumed to be dead, after reception of its last hello message. Only relevant if STP is enabled. The valid values are between (6 * USER_HZ) and (40 * USER_HZ). The default value is (20 * USER_HZ). Configure the bridge’s FDB entries aging time. It is the time a MAC address will be kept in the FDB after a packet has been received from that address. After this time has passed, entries are cleaned up. Allow values outside the 802.1 standard specification for special cases: The default value is (300 * USER_HZ). Turn spanning tree protocol on (IFLA_BR_STP_STATE > 0) or off (IFLA_BR_STP_STATE == 0) for this bridge. The default value is 0 (disabled). Set this bridge’s spanning tree priority, used during STP root bridge election. The valid values are between 0 and 65535. Turn VLAN filtering on (IFLA_BR_VLAN_FILTERING > 0) or off (IFLA_BR_VLAN_FILTERING == 0). When disabled, the bridge will not consider the VLAN tag when handling packets. The default value is 0 (disabled). Set the protocol used for VLAN filtering. The valid values are 0x8100(802.1Q) or 0x88A8(802.1AD). The default value is 0x8100(802.1Q). The group forwarding mask. This is the bitmask that is applied to decide whether to forward incoming frames destined to link-local addresses (of the form 01:80:C2:00:00:0X). The default value is 0, which means the bridge does not forward any link-local frames coming on this port. The bridge hello timer, read only. Set the MAC address of the multicast group this bridge uses for STP. The address must be a link-local address in standard Ethernet MAC address format. It is an address of the form 01:80:C2:00:00:0X, with X in [0, 4..f]. Set bridge’s multicast router if IGMP snooping is enabled. The valid values are: Turn multicast snooping on (IFLA_BR_MCAST_SNOOPING > 0) or off (IFLA_BR_MCAST_SNOOPING == 0). If enabled use the bridge’s own IP address as source address for IGMP queries (IFLA_BR_MCAST_QUERY_USE_IFADDR > 0) or the default of 0.0.0.0 (IFLA_BR_MCAST_QUERY_USE_IFADDR == 0). The default value is 0 (disabled). Enable (IFLA_BR_MULTICAST_QUERIER > 0) or disable (IFLA_BR_MULTICAST_QUERIER == 0) IGMP querier, ie sending of multicast queries by the bridge. The default value is 0 (disabled). Set multicast database hash elasticity, It is the maximum chain length in the multicast hash table. This attribute is deprecated and the value is always 16. The default value is 4096, the value must be a power of 2. The Last Member Query Count is the number of Group-Specific Queries sent before the router assumes there are no local members. The Last Member Query Count is also the number of Group-and-Source-Specific Queries sent before the router assumes there are no listeners for a particular source. The Startup Query Count is the number of Queries sent out on startup, separated by the Startup Query Interval. The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages. The default value is (1 * USER_HZ). The interval after which the bridge will leave a group, if no membership reports for this group are received. The default value is (260 * USER_HZ). The interval between queries sent by other routers. if no queries are seen after this delay has passed, the bridge will start to send its own queries (as if IFLA_BR_MCAST_QUERIER_INTVL was enabled). The default value is (255 * USER_HZ). The Query Interval is the interval between General Queries sent by the Querier. The default value is (125 * USER_HZ). The minimum value is (1 * USER_HZ). The Max Response Time used to calculate the Max Resp Code inserted into the periodic General Queries. The default value is (10 * USER_HZ). The interval between queries in the startup phase. The default value is (125 * USER_HZ) / 4. The minimum value is (1 * USER_HZ). Enable (NF_CALL_IPTABLES > 0) or disable (NF_CALL_IPTABLES == 0) iptables hooks on the bridge. The default value is 0 (disabled). Enable (NF_CALL_IP6TABLES > 0) or disable (NF_CALL_IP6TABLES == 0) ip6tables hooks on the bridge. The default value is 0 (disabled). Enable (NF_CALL_ARPTABLES > 0) or disable (NF_CALL_ARPTABLES == 0) arptables hooks on the bridge. The default value is 0 (disabled). The default value is 1. Setting to the special value 0 makes all ports of this bridge not have a PVID by default, which means that they will not accept VLAN-untagged traffic. The default value is 0 (disabled). The default value is 0 (disabled). The valid values are 2 and 3. The default value is 2. The valid values are 1 and 2. The default value is 1. Enable (IFLA_BR_VLAN_STATS_PER_PORT == 1) or disable (IFLA_BR_VLAN_STATS_PER_PORT == 0) per-VLAN per-port stats accounting. Can be changed only when there are no port VLANs configured. The default value is 0 (disabled). The multi_boolopt is used to control new boolean options to avoid adding new netlink attributes. You can look at for those options. The number of dynamically learned FDB entries for the current bridge, read only. Set the number of max dynamically learned FDB entries for the current bridge. The operation state of the port. Here are the valid values.\n• None 0 - port is in STP DISABLED state. Make this port completely inactive for STP. This is also called BPDU filter and could be used to disable STP on an untrusted port, like a leaf virtual device. The traffic forwarding is also stopped on this port.\n• None 1 - port is in STP LISTENING state. Only valid if STP is enabled on the bridge. In this state the port listens for STP BPDUs and drops all other traffic frames.\n• None 2 - port is in STP LEARNING state. Only valid if STP is enabled on the bridge. In this state the port will accept traffic only for the purpose of updating MAC address tables.\n• None 3 - port is in STP FORWARDING state. Port is fully active.\n• None 4 - port is in STP BLOCKING state. Only valid if STP is enabled on the bridge. This state is used during the STP election process. In this state, port will only process STP BPDUs. The STP port priority. The valid values are between 0 and 255. The STP path cost of the port. The valid values are between 1 and 65535. Set the bridge port mode. See BRIDGE_MODE_HAIRPIN for more details. Controls whether STP BPDUs will be processed by the bridge port. By default, the flag is turned off to allow BPDU processing. Turning this flag on will disable the bridge port if a STP BPDU packet is received. If the bridge has Spanning Tree enabled, hostile devices on the network may send BPDU on a port and cause network failure. Setting guard on will detect and stop this by disabling the port. The port will be restarted if the link is brought down, or removed and reattached. Controls whether a given port is allowed to become a root port or not. Only used when STP is enabled on the bridge. By default the flag is off. This feature is also called root port guard. If BPDU is received from a leaf (edge) port, it should not be elected as root port. This could be used if using STP on a bridge and the downstream bridges are not fully trusted; this prevents a hostile guest from rerouting traffic. This flag allows the bridge to immediately stop multicast traffic forwarding on a port that receives an IGMP Leave message. It is only used when IGMP snooping is enabled on the bridge. By default the flag is off. Controls whether a given port will learn source MAC addresses from received traffic or not. Also controls whether dynamic FDB entries (which can also be added by software) will be refreshed by incoming traffic. By default this flag is on. Controls whether unicast traffic for which there is no FDB entry will be flooded towards this port. By default this flag is on. Controls whether a given port will sync MAC addresses learned on device port to bridge FDB. Enable proxy ARP on this port which meets extended requirements by IEEE 802.11 and Hotspot 2.0 specifications. Configure the port’s multicast router presence. A port with a multicast router will receive all multicast traffic. The valid values are:\n• None 1 let the system detect the presence of routers (default)\n• None 3 enable multicast routers temporarily on this port, not depending Controls whether a given port will flood multicast traffic for which there is no MDB entry. By default this flag is on. Controls whether a given port will replicate packets using unicast instead of multicast. By default this flag is off. This is done by copying the packet per host and changing the multicast destination MAC to a unicast one accordingly. mcast_to_unicast works on top of the multicast snooping feature of the bridge. Which means unicast copies are only delivered to hosts which are interested in unicast and signaled this via IGMP/MLD reports previously. This feature is intended for interface types which have a more reliable and/or efficient way to deliver unicast packets than broadcast ones (e.g. WiFi). However, it should only be enabled on interfaces where no IGMPv2/MLDv1 report suppression takes place. IGMP/MLD report suppression issue is usually overcome by the network daemon (supplicant) enabling AP isolation and by that separating all STAs. Delivery of STA-to-STA IP multicast is made possible again by enabling and utilizing the bridge hairpin mode, which considers the incoming port as a potential outgoing port, too (see BRIDGE_MODE_HAIRPIN option). Hairpin mode is performed after multicast snooping, therefore leading to only deliver reports to STAs running a multicast router. Controls whether vlan to tunnel mapping is enabled on the port. By default this flag is off. Controls flooding of broadcast traffic on the given port. By default this flag is on. Set the group forward mask. This is a bitmask that is applied to decide whether to forward incoming frames destined to link-local addresses. The addresses of the form are 01:80:C2:00:00:0X (defaults to 0, which means the bridge does not forward any link-local frames coming on this port). Controls whether neighbor discovery (arp and nd) proxy and suppression is enabled on the port. By default this flag is off. Controls whether a given port will be isolated, which means it will be able to communicate with non-isolated ports only. By default this flag is off. Set a backup port. If the port loses carrier all traffic will be redirected to the configured backup port. Set the value to 0 to disable it. The number of per-port EHT hosts limit. The default value is 512. Setting to 0 is not allowed. The current number of tracked hosts, read only. Controls whether a port will be locked, meaning that hosts behind the port will not be able to communicate through the port unless an FDB entry with the unit’s MAC address is in the FDB. The common use case is that hosts are allowed access through authentication with the IEEE 802.1X protocol or based on whitelists. By default this flag is off. Please note that secure 802.1X deployments should always use the BR_BOOLOPT_NO_LL_LEARN flag, to not permit the bridge to populate its FDB based on link-local (EAPOL) traffic received on the port. Controls whether a port will use MAC Authentication Bypass (MAB), a technique through which select MAC addresses may be allowed on a locked port, without using 802.1X authentication. Packets with an unknown source MAC address generates a “locked” FDB entry on the incoming bridge port. The common use case is for user space to react to these bridge FDB notifications and optionally replace the locked FDB entry with a normal one, allowing traffic to pass for whitelisted MAC addresses. Setting this flag also requires IFLA_BRPORT_LOCKED and IFLA_BRPORT_LEARNING. IFLA_BRPORT_LOCKED ensures that unauthorized data packets are dropped, and IFLA_BRPORT_LEARNING allows the dynamic FDB entries installed by user space (as replacements for the locked FDB entries) to be refreshed and/or aged out. Sets the maximum number of MDB entries that can be registered for a given port. Attempts to register more MDB entries at the port than this limit allows will be rejected, whether they are done through netlink (e.g. the bridge tool), or IGMP or MLD membership reports. Setting a limit of 0 disables the limit. The default value is 0. Controls whether neighbor discovery (arp and nd) proxy and suppression is enabled for a given port. By default this flag is off. Note that this option only takes effect when IFLA_BRPORT_NEIGH_SUPPRESS is enabled for a given port. The FDB nexthop object ID to attach to packets being redirected to a backup port that has VLAN tunnel mapping enabled (via the IFLA_BRPORT_VLAN_TUNNEL option). Setting a value of 0 (default) has the effect of not attaching any ID. The sysfs interface is deprecated and should not be extended if new options are added.\n\nThe STP (Spanning Tree Protocol) implementation in the Linux bridge driver is a critical feature that helps prevent loops and broadcast storms in Ethernet networks by identifying and disabling redundant links. In a Linux bridge context, STP is crucial for network stability and availability. STP is a Layer 2 protocol that operates at the Data Link Layer of the OSI model. It was originally developed as IEEE 802.1D and has since evolved into multiple versions, including Rapid Spanning Tree Protocol (RSTP) and Multiple Spanning Tree Protocol (MSTP). The 802.1D-2004 removed the original Spanning Tree Protocol, instead incorporating the Rapid Spanning Tree Protocol (RSTP). By 2014, all the functionality defined by IEEE 802.1D has been incorporated into either IEEE 802.1Q (Bridges and Bridged Networks) or IEEE 802.1AC (MAC Service Definition). 802.1D has been officially withdrawn in 2022. In the context of STP, bridge ports can be in one of the following states:\n• None Blocking: The port is disabled for data traffic and only listens for BPDUs (Bridge Protocol Data Units) from other devices to determine the network topology.\n• None Listening: The port begins to participate in the STP process and listens for BPDUs.\n• None Learning: The port continues to listen for BPDUs and begins to learn MAC addresses from incoming frames but does not forward data frames.\n• None Forwarding: The port is fully operational and forwards both BPDUs and data frames.\n• None Disabled: The port is administratively disabled and does not participate in the STP process. The data frames forwarding are also disabled. In the context of networking and Ethernet bridging in Linux, the root bridge is a designated switch in a bridged network that serves as a reference point for the spanning tree algorithm to create a loop-free topology. Here’s how the STP works and root bridge is chosen:\n• None Bridge Priority: Each bridge running a spanning tree protocol, has a configurable Bridge Priority value. The lower the value, the higher the priority. By default, the Bridge Priority is set to a standard value (e.g., 32768).\n• None Bridge ID: The Bridge ID is composed of two components: Bridge Priority and the MAC address of the bridge. It uniquely identifies each bridge in the network. The Bridge ID is used to compare the priorities of different bridges.\n• None Bridge Election: When the network starts, all bridges initially assume that they are the root bridge. They start advertising Bridge Protocol Data Units (BPDU) to their neighbors, containing their Bridge ID and other information.\n• None BPDU Comparison: Bridges exchange BPDUs to determine the root bridge. Each bridge examines the received BPDUs, including the Bridge Priority and Bridge ID, to determine if it should adjust its own priorities. The bridge with the lowest Bridge ID will become the root bridge.\n• None Root Bridge Announcement: Once the root bridge is determined, it sends BPDUs with information about the root bridge to all other bridges in the network. This information is used by other bridges to calculate the shortest path to the root bridge and, in doing so, create a loop-free topology.\n• None Forwarding Ports: After the root bridge is selected and the spanning tree topology is established, each bridge determines which of its ports should be in the forwarding state (used for data traffic) and which should be in the blocking state (used to prevent loops). The root bridge’s ports are all in the forwarding state. while other bridges have some ports in the blocking state to avoid loops.\n• None Root Ports: After the root bridge is selected and the spanning tree topology is established, each non-root bridge processes incoming BPDUs and determines which of its ports provides the shortest path to the root bridge based on the information in the received BPDUs. This port is designated as the root port. And it is in the Forwarding state, allowing it to actively forward network traffic.\n• None Designated ports: A designated port is the port through which the non-root bridge will forward traffic towards the designated segment. Designated ports are placed in the Forwarding state. All other ports on the non-root bridge that are not designated for specific segments are placed in the Blocking state to prevent network loops. STP ensures network convergence by calculating the shortest path and disabling redundant links. When network topology changes occur (e.g., a link failure), STP recalculates the network topology to restore connectivity while avoiding loops. Proper configuration of STP parameters, such as the bridge priority, can influence network performance, path selection and which bridge becomes the Root Bridge. The user space STP helper bridge-stp is a program to control whether to use user mode spanning tree. The is called by the kernel when STP is enabled/disabled on a bridge (via or ). The kernel enables user_stp mode if that command returns 0, or enables kernel_stp mode if that command returns any other value.\n\nA LAN (Local Area Network) is a network that covers a small geographic area, typically within a single building or a campus. LANs are used to connect computers, servers, printers, and other networked devices within a localized area. LANs can be wired (using Ethernet cables) or wireless (using Wi-Fi). A VLAN (Virtual Local Area Network) is a logical segmentation of a physical network into multiple isolated broadcast domains. VLANs are used to divide a single physical LAN into multiple virtual LANs, allowing different groups of devices to communicate as if they were on separate physical networks. Typically there are two VLAN implementations, IEEE 802.1Q and IEEE 802.1ad (also known as QinQ). IEEE 802.1Q is a standard for VLAN tagging in Ethernet networks. It allows network administrators to create logical VLANs on a physical network and tag Ethernet frames with VLAN information, which is called VLAN-tagged frames. IEEE 802.1ad, commonly known as QinQ or Double VLAN, is an extension of the IEEE 802.1Q standard. QinQ allows for the stacking of multiple VLAN tags within a single Ethernet frame. The Linux bridge supports both the IEEE 802.1Q and 802.1AD protocol for VLAN tagging. VLAN filtering on a bridge is disabled by default. After enabling VLAN filtering on a bridge, it will start forwarding frames to appropriate destinations based on their destination MAC address and VLAN tag (both must match).\n\nThe Linux bridge driver has multicast support allowing it to process Internet Group Management Protocol (IGMP) or Multicast Listener Discovery (MLD) messages, and to efficiently forward multicast data packets. The bridge driver supports IGMPv2/IGMPv3 and MLDv1/MLDv2. Multicast snooping is a networking technology that allows network switches to intelligently manage multicast traffic within a local area network (LAN). The switch maintains a multicast group table, which records the association between multicast group addresses and the ports where hosts have joined these groups. The group table is dynamically updated based on the IGMP/MLD messages received. With the multicast group information gathered through snooping, the switch optimizes the forwarding of multicast traffic. Instead of blindly broadcasting the multicast traffic to all ports, it sends the multicast traffic based on the destination MAC address only to ports which have subscribed the respective destination multicast group. When created, the Linux bridge devices have multicast snooping enabled by default. It maintains a Multicast forwarding database (MDB) which keeps track of port and group relationships. The Linux bridge supports IGMPv3/MLDv2 EHT (Explicit Host Tracking), which was added by 474ddb37fa3a (“net: bridge: multicast: add EHT allow/block handling”) The explicit host tracking enables the device to keep track of each individual host that is joined to a particular group or channel. The main benefit of the explicit host tracking in IGMP is to allow minimal leave latencies when a host leaves a multicast group or channel. The length of time between a host wanting to leave and a device stopping traffic forwarding is called the IGMP leave latency. A device configured with IGMPv3 or MLDv2 and explicit tracking can immediately stop forwarding traffic if the last host to request to receive traffic from the device indicates that it no longer wants to receive traffic. The leave latency is thus bound only by the packet transmission latencies in the multiaccess network and the processing time in the device. The Linux bridge also supports per-VLAN multicast snooping, which is disabled by default but can be enabled. And Multicast Router Discovery, which help identify the location of multicast routers.\n\nLinux Bridge Switchdev is a feature in the Linux kernel that extends the capabilities of the traditional Linux bridge to work more efficiently with hardware switches that support switchdev. With Linux Bridge Switchdev, certain networking functions like forwarding, filtering, and learning of Ethernet frames can be offloaded to a hardware switch. This offloading reduces the burden on the Linux kernel and CPU, leading to improved network performance and lower latency. To use Linux Bridge Switchdev, you need hardware switches that support the switchdev interface. This means that the switch hardware needs to have the necessary drivers and functionality to work in conjunction with the Linux kernel. Please see the Ethernet switch device driver model (switchdev) document for more details.\n\nThe bridge netfilter module is a legacy feature that allows to filter bridged packets with iptables and ip6tables. Its use is discouraged. Users should consider using nftables for packet filtering. The older ebtables tool is more feature-limited compared to nftables, but just like nftables it doesn’t need this module either to function. The br_netfilter module intercepts packets entering the bridge, performs minimal sanity tests on ipv4 and ipv6 packets and then pretends that these packets are being routed, not bridged. br_netfilter then calls the ip and ipv6 netfilter hooks from the bridge layer, i.e. ip(6)tables rulesets will also see these packets. br_netfilter is also the reason for the iptables physdev match: This match is the only way to reliably tell routed and bridged packets apart in an iptables ruleset. Note that ebtables and nftables will work fine without the br_netfilter module. iptables/ip6tables/arptables do not work for bridged traffic because they plug in the routing stack. nftables rules in ip/ip6/inet/arp families won’t see traffic that is forwarded by a bridge either, but that’s very much how it should be. Historically the feature set of ebtables was very limited (it still is), this module was added to pretend packets are routed and invoke the ipv4/ipv6 netfilter hooks from the bridge so users had access to the more feature-rich iptables matching capabilities (including conntrack). nftables doesn’t have this limitation, pretty much all features work regardless of the protocol family. So, br_netfilter is only needed if users, for some reason, need to use ip(6)tables to filter packets forwarded by the bridge, or NAT bridged traffic. For pure link layer filtering, this module isn’t needed."
    },
    {
        "link": "https://cyberciti.biz/faq/how-to-add-network-bridge-with-nmcli-networkmanager-on-linux",
        "document": "How to create/add network bridge with nmcli\n\nI am using Debian Linux 12/11/10/9 on the desktop. I would like to create network bridge with NetworkManager. But, I am unable to find the option to add br0. How can I create or add network bridge with nmcli for NetworkManager on Linux?A bridge is nothing but a device which joins two local networks into one network. It works at the data link layer, i.e., layer 2 of the OSI model. Network bridge often used with virtualization and other software. Disabling NetworkManager for a simple bridge especially on Linux Laptop/desktop doesn’t make any sense. The nmcli tool can create Persistent bridge configuration without editing any files.\n\nThe procedure to add a bridge interface on Linux is as follows when you want to use Network Manager:\n• Get info about the current connection:\n\n\n\nLet us see how to create a bridge, named br0 in details.\n\nYou can view connection from the Network Manager GUI in settings:\n\n \n\n Another option is to type the following command:\n\n \n\n \n\n I have a “Wired connection 1” which uses the eno1 Ethernet interface. My system has a VPN interface too. I am going to setup a bridge interface named br0 and add, (or enslave) an interface to eno1.\n\n\n\n \n\n You can disable STP too:\n\n \n\n The last command shows the bridge settings including disabled STP:\n\nHow to turn on bridge interface\n\nYou must turn off “Wired connection 1” and turn on br0:\n\n \n\n Use ip command (or ifconfig command) to view the IP settings:\n\n \n\n\n\nOptional: How to use br0 with KVM\n\nNow you can connect VMs (virtual machine) created with KVM/VirtualBox/VMware workstation to a network directly without using NAT. Create a file named br0.xml for KVM using vi command or cat command:\n\n \n\n Append the following code:\n\nFor more info read the following man page:\n\n \n\n\n\n🥺 Was this helpful? Please add a comment to show your appreciation or feedback."
    },
    {
        "link": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/configuring_and_managing_networking/configuring-a-network-bridge_configuring-and-managing-networking",
        "document": "A network bridge is a link-layer device which forwards traffic between networks based on a table of MAC addresses. The bridge builds the MAC addresses table by listening to network traffic and thereby learning what hosts are connected to each network. For example, you can use a software bridge on a Red Hat Enterprise Linux host to emulate a hardware bridge or in virtualization environments, to integrate virtual machines (VM) to the same network as the host.\n\nA bridge requires a network device in each network the bridge should connect. When you configure a bridge, the bridge is called and the devices it uses .\n\nYou can create bridges on different types of devices, such as:\n\nDue to the IEEE 802.11 standard which specifies the use of 3-address frames in Wi-Fi for the efficient use of airtime, you cannot configure a bridge over Wi-Fi networks operating in Ad-Hoc or Infrastructure modes.\n\nTo configure a network bridge on the command line, use the utility.\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• None To use team, bond, or VLAN devices as ports of the bridge, you can either create these devices while you create the bridge or you can create them in advance as described in:\n• None Display the network interfaces, and note the names of the interfaces you want to add to the bridge:\n• and are not configured. To use these devices as ports, add connection profiles in the next step.\n• and have existing connection profiles. To use these devices as ports, modify their profiles in the next step.\n• None Assign the interfaces to the bridge.\n• None If the interfaces you want to assign to the bridge are not configured, create new connection profiles for them: These commands create profiles for and , and add them to the connection.\n• None If you want to assign an existing connection profile to the bridge:\n• None Set the parameter of these connections to : These commands assign the existing connection profiles named and to the connection.\n• None\n• None If you plan to use this bridge device as a port of other devices, enter:\n• To use DHCP, no action is required.\n• None To set a static IPv4 address, network mask, default gateway, and DNS server to the connection, enter:\n• None\n• None If you plan to use this bridge device as a port of other devices, enter:\n• To use stateless address autoconfiguration (SLAAC), no action is required.\n• None To set a static IPv6 address, network mask, default gateway, and DNS server to the connection, enter:\n• None Optional: Configure further properties of the bridge. For example, to set the Spanning Tree Protocol (STP) priority of to , enter:\n• None Verify that the ports are connected, and the column displays the port’s connection name: When you activate any port of the connection, NetworkManager also activates the bridge, but not the other ports of it. You can configure that Red Hat Enterprise Linux enables all ports automatically when the bridge is enabled:\n• None Enable the parameter of the bridge connection:\n• None Use the utility to display the link status of Ethernet devices that are ports of a specific bridge:\n• None Use the utility to display the status of Ethernet devices that are ports of any bridge device: To display the status for a specific Ethernet device, use the command.\n• and man pages on your system\n• How to configure a bridge with VLAN information? (Red Hat Knowledgebase)\n\n6.2. Configuring a network bridge by using the RHEL web console Use the RHEL web console to configure a network bridge if you prefer to manage network settings using a web browser-based interface.\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• None To use team, bond, or VLAN devices as ports of the bridge, you can either create these devices while you create the bridge or you can create them in advance as described in:\n• Configuring a network bond by using the RHEL web console\n• Configuring VLAN tagging by using the RHEL web console\n• You have installed the RHEL 8 web console.\n• You have enabled the cockpit service.\n• None Your user account is allowed to log in to the web console. For instructions, see Installing and enabling the web console.\n• None Log in to the RHEL 8 web console. For details, see Logging in to the web console.\n• Select the tab in the navigation on the left side of the screen.\n• Enter the name of the bridge device you want to create.\n• Select the interfaces that should be ports of the bridge.\n• None Optional: Enable the Spanning tree protocol (STP) feature to avoid bridge loops and broadcast radiation.\n• None By default, the bridge uses a dynamic IP address. If you want to set a static IP address:\n• Click the name of the bridge in the section.\n• Click next to the protocol you want to configure.\n• Select next to , and enter the IP address, prefix, and default gateway.\n• In the section, click the button, and enter the IP address of the DNS server. Repeat this step to set multiple DNS servers.\n• In the section, click the button, and enter the search domain.\n• None If the interface requires static routes, configure them in the Routes section.\n• None Select the Networking tab in the navigation on the left side of the screen, and check if there is incoming and outgoing traffic on the interface:\n\nThe application provides a text-based user interface for NetworkManager. You can use to configure a network bridge on a host without a graphical interface.\n• Navigate by using the cursor keys.\n• Press a button by selecting it and hitting .\n• Select and clear checkboxes by using .\n• To return to the previous screen, use .\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• None If you do not know the network device names on which you want configure a network bridge, display the available devices:\n• Select from the list of network types, and press .\n• None Optional: Enter a name for the NetworkManager profile to be created. On hosts with multiple profiles, a meaningful name makes it easier to identify the purpose of a profile.\n• Enter the bridge device name to be created into the field.\n• None Add ports to the bridge to be created:\n• Press next to the list.\n• Select the type of the interface you want to add as port to the bridge, for example, .\n• Optional: Enter a name for the NetworkManager profile to be created for this bridge port.\n• Enter the port’s device name into the field.\n• None Press to return to the window with the bridge settings. Figure 6.1. Adding an Ethernet device as port to a bridge\n• Repeat these steps to add more ports to the bridge.\n• None Depending on your environment, configure the IP address settings in the and areas accordingly. For this, press the button next to these areas, and select:\n• , if the bridge does not require an IP address.\n• , if a DHCP server or stateless address autoconfiguration (SLAAC) dynamically assigns an IP address to the bridge.\n• None , if the network requires static IP address settings. In this case, you must fill further fields:\n• Press next to the protocol you want to configure to display additional fields.\n• None Press next to , and enter the IP address and the subnet mask in Classless Inter-Domain Routing (CIDR) format. If you do not specify a subnet mask, NetworkManager sets a subnet mask for IPv4 addresses and for IPv6 addresses.\n• Enter the address of the default gateway.\n• Press next to , and enter the DNS server address.\n• Press next to , and enter the DNS search domain. Figure 6.2. Example of a bridge connection without IP address settings\n• Press to create and automatically activate the new connection.\n• Press to return to the main menu.\n• Select , and press to close the application.\n• None Use the utility to display the link status of Ethernet devices that are ports of a specific bridge:\n• None Use the utility to display the status of Ethernet devices that are ports of any bridge device: To display the status for a specific Ethernet device, use the command.\n\nIf you use Red Hat Enterprise Linux with a graphical interface, you can configure network bridges using the application. Note that can add only new ports to a bridge. To use an existing connection profile as a port, create the bridge using the utility as described in Configuring a network bridge by using nmcli.\n• Two or more physical or virtual network devices are installed on the server.\n• To use Ethernet devices as ports of the bridge, the physical or virtual Ethernet devices must be installed on the server.\n• To use team, bond, or VLAN devices as ports of the bridge, ensure that these devices are not already configured.\n• Click the button to add a new connection.\n• None\n• Optional: Set the name of the bridge interface in the field.\n• None Click the Add button to create a new connection profile for a network interface and adding the profile as a port to the bridge.\n• Select the connection type of the interface. For example, select for a wired connection.\n• Optional: Set a connection name for the port device.\n• If you create a connection profile for an Ethernet device, open the tab, and select in the field the network interface you want to add as a port to the bridge. If you selected a different device type, configure it accordingly.\n• None Repeat the previous step for each interface you want to add to the bridge.\n• Optional: Configure further bridge settings, such as Spanning Tree Protocol (STP) options.\n• None Configure the IP address settings on both the IPv4 Settings and IPv6 Settings tabs:\n• If you plan to use this bridge device as a port of other devices, set the field to .\n• To use DHCP, leave the field at its default, .\n• None To use static IP settings, set the Method field to Manual and fill the fields accordingly:\n• None Use the utility to display the link status of Ethernet devices that are ports of a specific bridge.\n• None Use the utility to display the status of Ethernet devices that are ports in any bridge device: To display the status for a specific Ethernet device, use the command.\n• Configuring NetworkManager to avoid using a specific profile to provide a default gateway\n• How to configure a bridge with VLAN information? (Red Hat Knowledgebase)\n\n6.6. Configuring a network bridge by using the RHEL system role You can connect multiple networks on layer 2 of the Open Systems Interconnection (OSI) model by creating a network bridge. To configure a bridge, create a connection profile in NetworkManager. By using Ansible and the RHEL system role, you can automate this process and remotely configure connection profiles on the hosts defined in a playbook. You can use the RHEL system role to configure a bridge and, if a connection profile for the bridge’s parent device does not exist, the role can create it as well. If you want to assign IP addresses, gateways, and DNS settings to a bridge, configure them on the bridge and not on its ports.\n• You have prepared the control node and the managed nodes\n• You are logged in to the control node as a user who can run playbooks on the managed nodes.\n• The account you use to connect to the managed nodes has permissions on them.\n• Two or more physical or virtual network devices are installed on the server.\n• None Create a playbook file, for example , with the following content: --- - name: Configure the network hosts: managed-node-01.example.com tasks: - name: Bridge connection profile with two Ethernet ports ansible.builtin.include_role: name: rhel-system-roles.network vars: network_connections: # Bridge profile - name: bridge0 type: bridge interface_name: bridge0 ip: dhcp4: yes auto6: yes state: up # Port profile for the 1st Ethernet device - name: bridge0-port1 interface_name: enp7s0 type: ethernet controller: bridge0 port_type: bridge state: up # Port profile for the 2nd Ethernet device - name: bridge0-port2 interface_name: enp8s0 type: ethernet controller: bridge0 port_type: bridge state: up The settings specified in the example playbook include the following: Sets the type of the profile to create. The example playbook creates three connection profiles: One for the bridge and two for the Ethernet devices. Enables IPv6 auto-configuration. By default, NetworkManager uses Router Advertisements. If the router announces the flag, NetworkManager requests an IPv6 address and prefix from a DHCPv6 server. For details about all variables used in the playbook, see the file on the control node.\n• None Note that this command only validates the syntax and does not protect against a wrong but valid configuration.\n• None Display the link status of Ethernet devices that are ports of a specific bridge:\n• None Display the status of Ethernet devices that are ports of any bridge device:"
    },
    {
        "link": "https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/7/html/networking_guide/sec-network_bridging_using_the_networkmanager_command_line_tool_nmcli",
        "document": ", issue a command as follows as : If no interface name is specified, the name will default to , , , and so on. To create a bridge, named, issue a command as follows asIf no interface name is specified, the name will default to, and so on.\n\n) is enabled by default. The values used are from the IEEE 802.1D-1998 standard. To disable for this bridge, issue a command as follows as : To re-enable for this bridge, issue a command as follows as : Spanning tree protocol () is enabled by default. The values used are from the IEEE 802.1D-1998 standard. To disablefor this bridge, issue a command as follows asTo re-enablefor this bridge, issue a command as follows as\n\nis . The lower number is preferred in root bridge selection. For example, a bridge with priority of would be selected as the root bridge in preference to a bridge with priority value of (the default). To create a bridge with a non-default value, issue a command as follows: The allowed values are in the range to . The default bridge priority foris. The lower number is preferred in root bridge selection. For example, a bridge with priority ofwould be selected as the root bridge in preference to a bridge with priority value of(the default). To create a bridge with a non-default value, issue a command as follows:The allowed values are in the rangeto\n\nThe allowed values are in the range to . To change the bridge priority of an existing bridge to a non-default value, issue a command in the following format:The allowed values are in the rangeto\n\nto , change the property. This property is a mask of 16 bits. Each bit corresponds to a group address in the above-mentioned range that must be forwarded. For example: To configure a bridge connection to forward group addresses in the range fromto, change theproperty. This property is a mask of 16 bits. Each bit corresponds to a group address in the above-mentioned range that must be forwarded. For example:\n\nFurther options for are listed in the bridge section of the man page.\n\nTo assign an existing connection to a bridge, proceed as follows:"
    },
    {
        "link": "https://tecmint.com/configure-network-connections-using-nmcli-tool-in-linux",
        "document": "As a Linux administrator, you’ve got various tools to use to configure your network connections, such as nmtui, your NetworkManager with GNOME graphical user interface, and of course nmcli (network manager command line tool).\n\nI have observed many administrators using nmtui for its simplicity. However, using nmcli saves you time, boosts your confidence, allows integration into scripts, and is the primary tool for troubleshooting Linux server networking, swiftly restoring its functionality.\n\nHaving noticed numerous comments seeking help with nmcli, I decided to write this article. Of course, you should always read the man pages carefully (they are the No. 1 resource for you). My aim is to save you time and provide you with some helpful hints.\n\nThe syntax of nmcli is:\n\nWhere is one of general, networking, radio, connection, device, and agent.\n\nA good starting point would be to check our devices:\n\nAs we can see in the first column, there is a list of our network devices. We have one network card with the name . On your machine, you may see different names.\n\nThe naming depends on the type of the network card (whether it is onboard, a PCI card, etc.). In the last column, we see our configuration files, which are used by our devices to connect to the network\n\nIt is simple to understand that our devices, by themselves, can do nothing. They need us to create a configuration file to instruct them on how to achieve network connectivity. These files are also called ‘connection profiles‘ and we find them in the /etc/sysconfig/network-scripts directory.\n\nAs you can see here, the files with names starting with (interface configuration) are connection profiles. When we create a new connection or modify an existing one with nmcli or nmtui, the results are saved here as connection profiles.\n\nΙ ‘ll show you two of them from my machine, one with a dhcp configuration and one with static ip.\n\nWe realize that some properties have different values, and some others don’t exist if they aren’t necessary.\n\nLet’s take a quick look at the most important ones.\n• – we have the Ethernet type here. We could also have WiFi, team, bond, and others.\n• – the name of the network device associated with this profile.\n• – if it has the value “dhcp”, then our connection profile obtains a dynamic IP from the DHCP server. If it has the value “none”, then it does not use a dynamic IP, and we likely assign a static IP.\n• – is the static IP we assign to our profile.\n• – the subnet mask. A value of 24 means 255.255.255.0. You can better understand the subnet mask by writing down its binary format. For example, values of 16, 24, and 26 mean that the first 16, 24, or 26 bits, respectively, are set to 1, and the rest are 0. This defines the network address and the range of IP addresses that can be assigned.\n• , – two dns servers we want to use.\n• – if it has the value “yes” it means, that on boot our computer will read this profile and try to assign it to its device.\n\nNow, let’s move on and check our connections:\n\nThe last column of devices helps us understand which connection is ‘UP‘ and running and which is not. In the above image, you can see the two active connections: Myoffice1 and enp0s8.\n\nHint: If you want to see only the active connections, type:\n\nHint: You can use the auto-complete hitting when you use nmcli, but is better to use minimal format of the command.\n\nThus, the following commands are equal:\n\nIf I check the ip addresses of my devices:\n\nI see that my device took the 192.168.1.6 IP from the dhcp server because the connection profile which is up has a dhcp configuration.\n\nIf I bring my connection profile with name then my device will take the static IP 192.168.1.40 as it is defined in the connection profile.\n\nLet’s see the IP address again:\n\nWe can make our first connection profile. The minimum properties we must define are type, ifname, and con-name:\n• – for the type of connection.\n• – for the device name that is assigned to our connection.\n• – for the connection name.\n\nLet’s make a new ethernet connection with the name , assigned to a device :\n\nAs you can see it has , because we didn’t give any static ip address.\n\nHint: We can modify any connection with the command. However, if you modify a dhcp connection and change it to static don’t forget to change it from to . Otherwise, you will end up with two IP addresses: one from the dhcp server and the static one.\n\nLet’s make a new Ethernet connection profile with a name , which will be assigned to a device , with static IP 192.168.1.50, subnet mask 255.255.255.0=24, and gateway 192.168.1.1.\n\nLet’s modify the last connection profile and add two dns servers.\n\nHint: There is something here you must pay attention to: the properties for IP address and gateway have different names when you add and when you modify a connection. When you add connections you use and , while when you modify them you use and .\n\nNow let’s bring up this connection profile:\n\nAs you can see, the device now has an IP address of 192.168.1.50.\n\nHint: There are a lot of properties you can modify. If you don’t remember them by heart you can help yourself by typing and after that the connection name:\n\nYou can modify all these properties written in lowercase.\n\nFor example: when you bring down a connection profile, the NetworkManager searches for another connection profile and brings it up automatically. (I leave it as an exercise to check it). If you don’t want your connection profile to auto-connect:\n\nThe last exercise is very useful: you made a connection profile but you want it to be used by specific users. It’s good to classify your users!\n\nWe let only user stella use this profile:\n\nHint: If you want to give permissions to more than one user, you must type without blank space between them:\n\nIf you log in as another user you can’t bring “up” this connection profile:\n\nAn error message says that connection ‘static2’ does not exist, even if we see that it exists. That’s because a current user has no permission to bring up this connection.\n\nConclusion: don’t hesitate to use nmcli. It’s easy and helpful."
    },
    {
        "link": "https://unix.stackexchange.com/questions/219887/how-to-create-wireless-bridge-connection-with-nmcli",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]