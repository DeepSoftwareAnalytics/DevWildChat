[
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/328088/Queues",
        "document": "A queue is a collection of data packets collectively waiting to be transmitted by a network device using a pre-defined structure methodology. Queuing works almost on the same methodology used at banks or supermarkets, where the customer is treated according to its arrival.\n\nQueues are used to:\n• limit data rate for certain IP addresses, subnets, protocols, ports, etc.;\n• share available traffic among users equally, or depending on the load of the channel\n\nQueue implementation in MikroTik RouterOS is based on Hierarchical Token Bucket (HTB). HTB allows the creation of a hierarchical queue structure and determines relations between queues. These hierarchical structures can be attached at two different places, the Packet Flow diagram illustrates both input and postrouting chains.\n\nThere are two different ways how to configure queues in RouterOS:\n• /queue simple menu - designed to ease the configuration of simple, every day queuing tasks (such as single client upload/download limitation, p2p traffic limitation, etc.).\n• /queue tree menu - for implementing advanced queuing tasks (such as global prioritization policy, and user group limitations). Requires marked packet flows from /ip firewall mangle facility.\n\nRouterOS provides a possibility to configure queue in 8 levels - the first level is an interface queue from the \"/queue interface\" menu and the other 7 are lower-level queues that can be created in Queue Simple and/or Queue Tree.\n\nRate limiting is used to control the rate of traffic flow sent or received on a network interface. Traffic with rate that is less than or equal to the specified rate is sent, whereas traffic that exceeds the rate is dropped or delayed.\n\nRate limiting can be performed in two ways:\n• discard all packets that exceed rate limit – rate-limiting (dropper or shaper) (100% rate limiter when queue-size=0)\n• delay packets that exceed the specific rate limit in the queue and transmit them when it is possible – rate equalizing (scheduler) (100% rate equalizing when queue-size=unlimited)\n\nThe next figure explains the difference between rate limiting and rate equalizing:\n\nAs you can see in the first case all traffic exceeds a specific rate and is dropped. In another case, traffic exceeds a specific rate and is delayed in the queue and transmitted later when it is possible, but note that the packet can be delayed only until the queue is not full. If there is no more space in the queue buffer, packets are dropped.\n\nFor each queue we can define two rate limits:\n• CIR (Committed Information Rate) – (limit-at in RouterOS) worst-case scenario, the flow will get this amount of traffic rate regardless of other traffic flows. At any given time, the bandwidth should not fall below this committed rate.\n• MIR (Maximum Information Rate) – (max-limit in RouterOS) best-case scenario, the maximum available data rate for flow, if there is free any part of the bandwidth.\n\nA simple queue is a plain way how to limit traffic for a particular target. Also, you can use simple queues to build advanced QoS applications. They have useful integrated features:\n• traffic shaping (scheduling) of bidirectional traffic (one limit for the total of upload + download)\n\nIn the following example, we have one SOHO device with two connected units PC and Server.\n\nWe have a 15 Mbps connection available from ISP in this case. We want to be sure the server receives enough traffic, so we will configure a simple queue with a limit-at parameter to guarantee a server receives 5Mbps:\n\nThat is all. The server will get 5 Mbps of traffic rate regardless of other traffic flows. If you are using the default configuration, be sure the FastTrack rule is disabled for this particular traffic, otherwise, it will bypass Simple Queues and they will not work.\n\nThe queue tree creates only a one-directional queue in one of the HTBs. It is also the only way how to add a queue on a separate interface. This way it is possible to ease mangle configuration - you don't need separate marks for download and upload - only the upload will get to the Public interface and only the download will get to a Private interface. The main difference from Simple Queues is that the - all traffic passes it together.\n\nIn the following example, we will mark all the packets coming from preconfigured in-interface-list=LAN and will limit the traffic with a queue tree based on these packet marks.\n\nCheck Queue tree stats to be sure traffic is matched:\n\nThis sub-menu list by default created queue types and allows the addition of new user-specific ones.\n\nBy default, RouterOS creates the following pre-defined queue types:\n\nAll MikroTik products have the default queue type \"only-hardware-queue\" with \"kind=none\". \"only-hardware-queue\" leaves the interface with only hardware transmit descriptor ring buffer which acts as a queue in itself. Usually, at least 100 packets can be queued for transmit in the transmit descriptor ring buffer. Transmit descriptor ring buffer size and the number of packets that can be queued in it varies for different types of ethernet MACs. Having no software queue is especially beneficial on SMP systems because it removes the requirement to synchronize access to it from different CPUs/cores which is resource-intensive. Having the possibility to set so it is available only for some ethernet interfaces mostly found on RouterBOARDs.\n\nA \"multi-queue-ethernet-default\" can be beneficial on SMP systems with ethernet interfaces that have support for multiple transmit queues and have a Linux driver support for multiple transmit queues. By having one software queue for each hardware queue there might be less time spent on synchronizing access to them.\n\nQueue kinds are packet processing algorithms. Kind describe which packet will be transmitted next in the line. RouterOS supports the following Queueing kinds:\n\nThese kinds are based on the FIFO algorithm (First-In-First-Out). The difference between PFIFO and BFIFO is that one is measured in packets and the other one in bytes. These queues use pfifo-limit and bfifo-limit parameters.\n\nEvery packet that cannot be enqueued (if the queue is full), is dropped. Large queue sizes can increase latency but utilize the channel better.\n\nMQ-PFIFO is pfifo with support for multiple transmit queues. This queue is beneficial on SMP systems with ethernet interfaces that have support for multiple transmit queues and have a Linux driver support for multiple transmit queues (mostly on x86 platforms). This kind uses the mq-pfifo-limit parameter.\n\nRandom Early Drop is a queuing mechanism that tries to avoid network congestion by controlling the . The average queue size is compared to two thresholds: a minimum (min ) and a maximum (max ) threshold. If the average queue size (avg ) is less than the minimum threshold, no packets are dropped. When the average queue size is greater than the maximum threshold, all incoming packets are dropped. But if the average queue size is between the minimum and maximum thresholds packets are randomly dropped with probability P where probability is exact a function of the average queue size: P = P (avg – min )/ (max - min ). If the average queue grows, the probability of dropping incoming packets grows too. P - ratio, which can adjust the packet discarding probability abruptness, (the simplest case P can be equal to one. The 8.2 diagram shows the packet drop probability in the RED algorithm.\n\nStochastic Fairness Queuing (SFQ) is ensured by hashing and round-robin algorithms. SFQ is called \"Stochastic\" because it does not really allocate a queue for each flow, it has an algorithm that divides traffic over a limited number of queues (1024) using a hashing algorithm.\n\nTraffic flow may be uniquely identified by 4 options (src-address, dst-address, src-port, and dst-port), so these parameters are used by the SFQ hashing algorithm to classify packets into one of 1024 possible sub-streams. Then round-robin algorithm will start to distribute available bandwidth to all sub-streams, on each round giving sfq-allot bytes of traffic. The whole SFQ queue can contain 128 packets and there are 1024 sub-streams available. The 8.3 diagram shows the SFQ operation:\n\nPCQ algorithm is very simple - at first, it uses selected classifiers to distinguish one sub-stream from another, then applies individual FIFO queue size and limitation on every sub-stream, then groups all sub-streams together and applies global queue size and limitation.\n• pcq-rate (number): maximal available data rate of each sub-steam\n• pcq-total-limit (number): maximum amount of queued data in all sub-streams (in KiB)\n\nIt is possible to assign a speed limitation to sub-streams with the pcq-rate option. If \"pcq-rate=0\" sub-streams will divide available traffic equally.\n\nFor example, instead of having 100 queues with 1000kbps limitation for download, we can have one PCQ queue with 100 sub-streams\n\nPCQ has burst implementation identical to Simple Queues and Queue Tree:\n• pcq-burst-rate (number): maximal upload/download data rate which can be reached while the burst for substream is allowed\n• pcq-burst-threshold (number): this is the value of burst on/off switch\n• pcq-burst-time (time): a period of time (in seconds) over which the average data rate is calculated. (This is NOT the time of the actual burst)\n\nPCQ also allows using different size IPv4 and IPv6 networks as sub-stream identifiers. Before it was locked to a single IP address. This is done mainly for IPv6 as customers from an ISP point of view will be represented by /64 network, but devices in customers network will be /128. PCQ can be used for both of these scenarios and more. PCQ parameters:\n• pcq-dst-address-mask (number): the size of the IPv4 network that will be used as a dst-address sub-stream identifier\n• pcq-src-address-mask (number): the size of the IPv4 network that will be used as an src-address sub-stream identifier\n• pcq-dst-address6-mask (number): the size of the IPV6 network that will be used as a dst-address sub-stream identifier\n• pcq-src-address6-mask (number): the size of the IPV6 network that will be used as an src-address sub-stream identifier\n\nCoDel (Controlled-Delay Active Queue Management) algorithm uses the local minimum queue as a measure of the persistent queue, similarly, it uses a minimum delay parameter as a measure of the standing queue delay. Queue size is calculated using packet residence time in the queue.\n\nCoDel - Fair Queuing (FQ) with Controlled Delay (CoDel) uses a randomly determined model to classify incoming packets into different flows and is used to provide a fair share of the bandwidth to all the flows using the queue. Each flow is managed using CoDel queuing discipline which internally uses a FIFO algorithm.\n\nCAKE - Common Applications Kept Enhanced (CAKE) implemented as a queue discipline (qdisc) for the Linux kernel uses COBALT (AQM algorithm combining Codel and BLUE) and a variant of DRR++ for flow isolation. In other words, Cake’s fundamental design goal is user-friendliness. All settings are optional; the default settings are chosen to be practical in most common deployments. In most cases, the configuration requires only a bandwidth parameter to get useful results,\n\nCompensates for ATM cell framing, which is normally found on ADSL links. Automatic capacity estimation based on traffic arriving at this qdisc. This is most likely to be useful with cellular links, which tend to change quality randomly. The Bandwidth Limit parameter can be used in conjunction to specify an initial estimate. The shaper will periodically be set to a bandwidth slightly below the estimated rate. This estimator cannot estimate the bandwidth of links downstream of itself. CAKE can divide traffic into \"tins\" based on the Diffserv field:\n• None diffserv4 Provides a general-purpose Diffserv implementation with four tins: Bulk (CS1), 6.25% threshold, generally low priority. Best Effort (general), 100% threshold. Video (AF4x, AF3x, CS3, AF2x, CS2, TOS4, TOS1), 50% threshold. Voice (CS7, CS6, EF, VA, CS5, CS4), 25% threshold.\n• None diffserv3 (default) Provides a simple, general-purpose Diffserv implementation with three tins: Bulk (CS1), 6.25% threshold, generally low priority. Best Effort (general), 100% threshold. Voice (CS7, CS6, EF, VA, TOS4), 25% threshold, reduced Codel interval.\n• flowblind - Disables flow isolation; all traffic passes through a single queue for each tin.\n• srchost - Flows are defined only by source address.\n• dsthost Flows are defined only by destination address.\n• hosts - Flows are defined by source-destination host pairs. This is host isolation, rather than flow isolation.\n• flows - Flows are defined by the entire 5-tuple of source address, a destination address, transport protocol, source port, and destination port. This is the type of flow isolation performed by SFQ and fq_codel.\n• dual-srchost Flows are defined by the 5-tuple, and fairness is applied first over source addresses, then over individual flows. Good for use on egress traffic from a LAN to the internet, where it'll prevent any LAN host from monopolizing the uplink, regardless of the number of flows they use.\n• dual-dsthost Flows are defined by the 5-tuple, and fairness is applied first over destination addresses, then over individual flows. Good for use on ingress traffic to a LAN from the internet, where it'll prevent any LAN host from monopolizing the downlink, regardless of the number of flows they use.\n• triple-isolate - Flows are defined by the 5-tuple, and fairness is applied over source *and* destination addresses intelligently (ie. not merely by host-pairs), and also over individual flows.\n• nat Instructs Cake to perform a NAT lookup before applying flow- isolation rules, to determine the true addresses and port numbers of the packet, to improve fairness between hosts \"inside\" the NAT. This has no practical effect in \"flowblind\" or \"flows\" modes, or if NAT is performed on a different host.\n• nonat (default) The cake will not perform a NAT lookup. Flow isolation will be performed using the addresses and port numbers directly visible to the interface Cake is attached to. Limit the memory consumed by Cake to LIMIT bytes. By default, the limit is calculated based on the bandwidth and RTT settings. Rounds each packet (including overhead) up to a minimum length BYTES. Adds BYTES to the size of each packet. BYTES may be negative. Manually specify an RTT. Default 100ms is suitable for most Internet traffic.\n• datacentre - For extremely high-performance 10GigE+ networks only. Equivalent to RTT 100us.\n• lan - For pure Ethernet (not Wi-Fi) networks, at home or in the office. Don't use this when shaping for an Internet access link. Equivalent to RTT 1ms.\n• metro - For traffic mostly within a single city. Equivalent to RTT 10ms. regional For traffic mostly within a European-sized country. Equivalent to RTT 30ms.\n• internet (default) This is suitable for most Internet traffic. Equivalent to RTT 100ms.\n• oceanic - For Internet traffic with generally above-average latency, such as that suffered by Australasian residents. Equivalent to RTT 300ms.\n• satellite - For traffic via geostationary satellites. Equivalent to RTT 1000ms.\n• interplanetary - So named because Jupiter is about 1 light-hour from Earth. Use this to (almost) completely disable AQM actions. Equivalent to RTT 3600s. Apply the wash option to clear all extra DiffServ (but not ECN bits), after priority queuing has taken place.\n\nBefore sending data over an interface, it is processed by the queue. This sub-menu lists all available interfaces in RouterOS and allows to change queue type for a particular interface. The list is generated automatically.\n\nIn Winbox and Webfig, a green, yellow, or red icon visualizes each Simple and Tree queue usage based on max-limit."
    },
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/48660587/Mangle",
        "document": "Mangle is a kind of 'marker' that marks packets for future processing with special marks. Many other facilities in RouterOS make use of these marks, e.g. queue trees, NAT, routing. They identify a packet based on its mark and process it accordingly. The mangle marks exist only within the router, they are not transmitted across the network.\n\nAdditionally, the mangle facility is used to modify some fields in the IP header, like TOS (DSCP) and TTL fields.\n\nFirewall mangle rules consist of five predefined chains that cannot be deleted:\n• The PREROUTING chain: Rules in this chain apply to packets as they just arrive on the network interface;\n• The INPUT chain: Rules in this chain apply to packets just before they’re given to a local process;\n• The OUTPUT chain: The rules here apply to packets just after they’ve been produced by a process;\n• The FORWARD chain: The rules here apply to any packets that are routed through the current host;\n• The POSTROUTING chain: The rules in this chain apply to packets as they just leave the network interface;\n\nIt is a known fact that VPN links have a smaller packet size due to encapsulation overhead. A large packet with MSS that exceeds the MSS of the VPN link should be fragmented before sending it via that kind of connection. However, if the packet has a Don't Fragment flag set, it cannot be fragmented and should be discarded. On links that have broken path MTU discovery (PMTUD), it may lead to a number of problems, including problems with FTP and HTTP data transfer and e-mail services.\n\nIn the case of a link with broken PMTUD, a decrease of the MSS of the packets coming through the VPN link resolves the problem. The following example demonstrates how to decrease the MSS value via mangle:\n\nSometimes it is necessary to perform some actions on the packets belonging to specific connection (for example, to mark packets from/to specific host for queues), but inspecting each packets IP header is quite expensive task. We can use connection marks to optimize the setup a bit.\n\nTable list mangle actions and associated properties. Other actions are listed here.\n• - change the Differentiated Services Code Point (DSCP) field value specified by the parameter\n• - change the Maximum Segment Size field value of the packet to a value specified by parameter\n• - change the Time to Live field value of the packet to a value specified by the parameter\n• - place a mark specified by the new-connection-mark parameter on the entire connection that matches the rule\n• - place a mark specified by the new-packet-mark parameter on a packet that matches the rule\n• - place a mark specified by the new-routing-mark parameter on a packet. This kind of mark is used for policy routing purposes only. Do not apply any other routing marks besides \"main\" for the packets processed by FastTrack, since FastTrack can only work in the main routing table.\n• - forces packets to a specific gateway IP by ignoring normal routing decisions (prerouting chain only)\n• - set priority specified by the new-priority parameter on the packets sent out through a link that is capable of transporting priority (VLAN or WMM-enabled wireless interface).Read more\n• - send a packet to a remote TZSP compatible system (such as Wireshark). Set remote target with and parameters (Wireshark recommends port 37008)\n• - strip IPv4 option fields from IP header, the action does not actually remove IPv4 options but rather replaces all option octets with NOP, further matcher with will still match the packet. Sets a new DSCP value for a packet Clamp-to-pmtu feature sets (DF) bit in the IP header to dynamically discover the PMTU of a path. Host sends all datagrams on that path with the DF bit set until receives ICMP Destination Unreachable messages with a code meaning \"fragmentation needed and DF set\". Upon receipt of such a message, the source host reduces its assumed PMTU for the path. Sets a new priority for a packet. This can be the VLAN, WMM, DSCP or MPLS EXP priorityRead more. This property can also be used to set an internal priority. Sets a new value (in RouterOS v7 routing mark must be created before as a new Routing table) Sets a new Time to live value"
    },
    {
        "link": "https://wiki.mikrotik.com/Manual:IP/Firewall/Mangle",
        "document": "Mangle is a kind of 'marker' that marks packets for future processing with special marks. Many other facilities in RouterOS make use of these marks, e.g. queue trees, NAT, routing. They identify a packet based on its mark and process it accordingly. The mangle marks exist only within the router, they are not transmitted across the network.\n\nAdditionally, the mangle facility is used to modify some fields in the IP header, like TOS (DSCP) and TTL fields.\n\nAction to take if packet is matched by the rule:\n• - accept the packet. Packet is not passed to next firewall rule.\n• - add destination address to Address list specified by parameter\n• - add source address to Address list specified by parameter\n• - change Differentiated Services Code Point (DSCP) field value specified by the new-dscp parameter\n• - change Maximum Segment Size field value of the packet to a value specified by the new-mss parameter\n• - change Time to Live field value of the packet to a value specified by the new-ttl parameter\n• - jump to the user defined chain specified by the value of parameter\n• - add a message to the system log containing following data: in-interface, out-interface, src-mac, protocol, src-ip:port->dst-ip:port and length of the packet. After packet is matched it is passed to next rule in the list, similar as\n• - place a mark specified by the new-connection-mark parameter on the entire connection that matches the rule\n• - place a mark specified by the new-packet-mark parameter on a packet that matches the rule\n• - place a mark specified by the new-routing-mark parameter on a packet. This kind of marks is used for policy routing purposes only\n• - if packet is matched by the rule, increase counter and go to next rule (useful for statistics).\n• - pass control back to the chain from where the jump took place\n• - forces packets to a specific gateway IP by ignoring normal routing decision (prerouting chain only)\n• - set priority specified by the new-priority parameter on the packets sent out through a link that is capable of transporting priority (VLAN or WMM-enabled wireless interface). Read more>\n• - send packet to a remote TZSP compatible system (such as Wireshark). Set remote target with and parameters (Wireshark recommends port 37008)\n• - strip IPv4 option fields from IP header, action does not actually remove IPv4 options but rather replaces all option octets with NOP, further matcher with ipv4-options=any will still match the packet. Name of the address list to be used. Applicable if action is or Time interval after which the address will be removed from the address list specified by parameter. Used in conjunction with or actions\n• Value of ( ) will leave the address in the address list till reboot\n• Value of will leave the address in the address list forever and will be included in configuration export/backup Specifies to which chain the rule will be added. If the input does not match the name of an already defined chain, a new chain will be created. Matches packets only if a given amount of bytes has been transfered through the particular connection. 0 - means infinity, for example means that the rule matches if more than 2MB (upload and download) has been transfered through the relevant connection Matches connections per address or address block after given value is reached. Matches packets marked via mangle facility with particular connection mark. If no-mark is set, rule will match any unmarked connection. Can match connections that are srcnatted, dstnatted or both. Note that connection-state=related connections connection-nat-state is determined by direction of the first packet. and if connection tracking needs to use dst-nat to deliver this connection to same hosts as main connection it will be in connection-nat-state=dstnat even if there are no dst-nat rules at all. Connection Rate is a firewall matcher that allows the capture of traffic based on the present speed of the connection. Interprets the connection tracking analysis data for a particular packet:\n• - a packet which belongs to an existing connection\n• - a packet that does not have determined state in connection tracking (ussualy - sevear out-of-order packets, packets with wrong sequence/ack number, or in case of resource overusage on router), for this reason invalid packet will not participate in NAT (as only connection-state=new packets do), and will still contain original source IP address when routed. We strongly suggest to drop all connection-state=invalid packets in firewall filter forward and input chains\n• - the packet has started a new connection, or otherwise associated with a connection which has not seen packets in both directions\n• - a packet which is related to, but not part of an existing connection, such as ICMP errors or a packet which begins FTP data connection\n• packet which was set to bypass connection tracking in Firewall RAW tables. Matches packets from related connections based on information from their connection tracking helpers. A relevant connection helper must be enabled under /ip firewall service-port Match packets that contain specified text Matches packets where destination is equal to specified IP or falls into specified IP range. Matches destination address type:\n• - IP address used for point to point transmission\n• - if dst-address is assigned to one of router's interfaces\n• - packet is sent to all devices in subnet\n• - packet is forwarded to defined group of devices Matches packets until a given pps limit is exceeded. As opposed to the matcher, every destination IP address / destination port has it's own limit. Parameters are written in following format: .\n• time - specifies the time interval in which the packet rate is measured (optional)\n• burst - number of packets which are not counted by packet rate\n• expire - specifies interval after which recored ip address /port will be deleted (optional) Matches fragmented packets. First (starting) fragment does not count. If connection tracking is enabled there will be no fragments as system automatically assembles every packet Matches packets received from HotSpot clients against various HotSpot matchers.\n• - matches packets that are coming from the HotSpot client\n• - matches HTTP requests sent to the HotSpot server\n• - matches packets that are destined to the HotSpot server\n• - matches packets that are sent to the HotSpot client Actual interface the packet has entered the router, if incoming interface is bridge Interface the packet has entered the router Matches ingress priority of the packet. Priority may be derived from VLAN, WMM or MPLS EXP bit. Matches the policy used by IpSec. Value is written in following format: . Direction is Used to select whether to match the policy used for decapsulation or the policy that will be used for encapsulation.\n• - valid in the PREROUTING, INPUT and FORWARD chains\n• - valid in the POSTROUTING, OUTPUT and FORWARD chains\n• - matches if the packet is subject to IpSec processing;\n• - matches packet that is not subject to IpSec processing (for example, IpSec transport packet). For example, if router receives Ipsec encapsulated Gre packet, then rule will match Gre packet, but rule will match ESP packet. Matches IPv4 header options.\n• - match packet with at least one of the ipv4 options\n• - match packets with loose source routing option. This option is used to route the internet datagram based on information supplied by the source\n• - match packets with no record route option. This option is used to route the internet datagram based on information supplied by the source Name of the target chain to jump to. Applicable only if Matches packets until a given pps limit is exceeded. Parameters are written in following format: .\n• time - specifies the time interval in which the packet rate is measured (optional, 1s will be used if not specified)\n• burst - number of packets which are not counted by packet rate Adds specified text at the beginning of every log message. Applicable if Sets a new DSCP value for a packet. Sets a new MSS for a packet. option dynamically sets the MSS size acordingly to the Path MTU. Sets a new priority for a packet. This can be the VLAN, WMM, DSCP or MPLS EXP priority Read more >>. This property can also be used to set an internal priority. Actual interface the packet is leaving the router, if outgoing interface is bridge Interface the packet is leaving the router Matches packets marked via mangle facility with particular packet mark. If no-mark is set, rule will match any unmarked packet. Matches packets of specified size or size range in bytes. whether to let the packet to pass further (like action passthrough) into firewall or not (property only valid some actions). PCC matcher allows division of traffic into equal streams with ability to keep packets with specific set of options in one particular stream. Matches if any (source or destination) port matches the specified list of ports or port ranges. Applicable only if is TCP or UDP Matches particular IP protocol specified by protocol name or number Attempts to detect TCP and UDP scans. Parameters are in following format\n• WeightThreshold - total weight of the latest TCP/UDP packets with different destination ports coming from the same host to be treated as port scan sequence\n• DelayThreshold - delay for the packets with different destination ports coming from the same host to be treated as possible port scan subsequence\n• LowPortWeight - weight of the packets with privileged (<1024) destination port\n• HighPortWeight - weight of the packet with non-priviliged destination port Matches packets marked by mangle facility with particular routing mark Matches packet's priority after a new priority has been set. Priority may be derived from VLAN, WMM, DSCP, MPLS EXP bit or from internal priority that has been set using the action. Matches packets where source is equal to specified IP or falls into specified IP range.\n• - IP address used for point to point transmission\n• - if address is assigned to one of router's interfaces\n• - packet is sent to all devices in subnet\n• - packet is forwarded to defined group of devices List of source ports and ranges of source ports. Applicable only if protocol is TCP or UDP. Matches TCP MSS value of an IP packet Allows creation of a filter based on the packets' arrival time and date or, for locally generated packets, departure time and date Allows to match traffic based on TLS hostname. Accepts GLOB syntax for wildcard matching. Note that matcher will not be able to match hostname if TLS handshake frame is fragmented into multiple TCP segments (packets).\n\n\n\n By default print is equivalent to print static and shows only static rules.\n\nTo print also dynamic rules use print all.\n\nOr to print only dynamic rules use print dynamic\n\nIt is a well known fact that VPN links have smaller packet size due to encapsulation overhead. A large packet with MSS that exceeds the MSS of the VPN link should be fragmented prior to sending it via that kind of connection. However, if the packet has DF flag set, it cannot be fragmented and should be discarded. On links that have broken path MTU discovery (PMTUD) it may lead to a number of problems, including problems with FTP and HTTP data transfer and e-mail services.\n\nIn case of link with broken PMTUD, a decrease of the MSS of the packets coming through the VPN link solves the problem. The following example demonstrates how to decrease the MSS value via mangle:\n\nMarking each packet is quite resource expensive especially if rule has to match against many parameters from IP header or address list containing hundreds of entries.\n\nLets say we want to\n• mark all tcp packets except tcp/80 and match these packets against first address list\n• mark all udp packets and match them against second address list.\n\nSetup looks quite simple and probably will work without problems in small networks. Now multiply count of rules by 10, add few hundred entries in address list, run 100Mbit of traffic over this router and you will see how rapidly CPU usage is increasing. The reason for such behavior is that each rule reads IP header of every packet and tries to match collected data against parameters specified in firewall rule.\n\nFortunately if connection tracking is enabled, we can use connection marks to optimize our setup.\n\nNow first rule will try to match data from IP header only from first packet of new connection and add connection mark. Next rule will no longer check IP header for each packet, it will just compare connection marks resulting in lower CPU consumption. Additionally was added that helps to reduce CPU consumption even more."
    },
    {
        "link": "https://wiki.mikrotik.com/Manual:Queue",
        "document": "Queues are used to limit and prioritize traffic:\n• limit data rate for certain IP addresses, subnets, protocols, ports, and other parameters\n• prioritize some packet flows over others\n• share available traffic among users equally, or depending on the load of the channel\n\nQueue implementation in MikroTik RouterOS is based on Hierarchical Token Bucket (HTB). HTB allows to create hierarchical queue structure and determine relations between queues.\n\nIn RouterOS, these hierarchical structures can be attached at two different places, packet flow diagram illustrate both Input and Postrouting chains.\n\nThere are two different ways how to configure queues in RouterOS:\n• /queue simple menu - designed to ease configuration of simple, everyday queuing tasks (such as single client upload/download limitation, p2p traffic limitation, etc.).\n• /queue tree menu - for implementing advanced queuing tasks (such as global prioritization policy, user group limitations). Requires marked packet flows from /ip firewall mangle facility.\n\nRate limiting is used to control the rate of traffic flow sent or received on a network interface. Traffic which rate that is less than or equal to the specified rate is sent, whereas traffic that exceeds the rate is dropped or delayed.\n\nRate limiting can be performed in two ways:\n• discard all packets that exceed rate limit – rate limiting (dropper or shaper) (100% rate limiter when queue-size=0)\n• delay packets that exceed specific rate limit in queue and transmit its when it is possible – rate equalizing (scheduler) ''(100% rate equalizing when queue-size=unlimited)\n\nNext figure explains difference between rate limiting and rate equalizing:\n\nAs you can see in the first case all traffic exceeds a specific rate and is dropped. In another case, traffic exceeds a specific rate and is delayed in a queue and transmitted later when it is possible, but note that the packet can be delayed only until the queue is not full. If there is no more space in the queue buffer, packets are dropped.\n\nFor each queue we can define two rate limits:\n• CIR (Committed Information Rate) – (limit-at in RouterOS) worst case scenario, flow will get this amount of traffic rate regardless of other traffic flows. At any given time, the bandwidth should not fall below this committed rate.\n• MIR (Maximum Information Rate) – (max-limit in RouterOS) best case scenario, maximum available data rate for flow, if there is free any part of bandwidth.\n\n\n\n The simplest way to limit data rate for specific IP addresses and/or subnets is to use simple queues.\n\nYou can also use simple queues to build advanced QoS applications. They have useful integrated features:\n• Shaping (scheduling) of bidirectional traffic (one limit for the total of upload + download)\n\nAssume we have network topology like Figure 8.6 and we want to limited download and upload for private network (upload - 256kbps, and download – 512kbps).\n\nAdd a simple queue rule, which will limit the download traffic to 512kbps and upload to 256kbps for the network 10.1.1.0/24, served by the interface Ether2:\n\nThe max-limit parameter cuts down the maximum available bandwidth. The value max-limit=256k/512k means that clients from the private networks will get maximum of 512kbps for download and 256kbps for upload. The target allows defining the source IP addresses to which the queue rule will be applied.\n\nProbably, you want to exclude the server from being limited, if so, add a queue for it without any limitation (max-limit=0/0 which means no limitation). Move this rule to the beginning of the list, because items in /queue simple are executed in order one by one if router finds rule that satisfy certain packet next rules aren’t compared:\n• target (multiple choice: IP address/netmask) : list of IP address ranges that will be limited by this queue.\n• interface (Name of the interface, or all) : identifies interface the target is connected to. Useful when it is not possible to specify targets addresses.\n\nEach of these two properties can be used to determine which direction is target upload and which is download.\n\nBe careful to configure both of these options for the same queue - in case they will point to opposite directions queue will not work.\n\nIf neither value of target nor of interface is specified, the queue will not be able to make the difference between upload and download and will limit all traffic twice.\n• name (Text) : Unique queue identifier that can be used as parent option value for other queues\n• both - limit both download and upload traffic\n• upload - limit only traffic to the target\n• download - limit only traffic from the target\n• time (TIME-TIME,sun,mon,tue,wed,thu,fri,sat - TIME is local time, all day names are optional; default: not set) : allow to specify time when particular queue will be active. Router must have correct time settings.\n• dst-address (IP address/netmask) : allows to select only specific stream (from target address to this destination address) for limitation explain what is target and what is dst and what is upload and what not\n• packet-marks (Comma separated list of packet mark names) : allows to use marked packets from /ip firewall mangle. Take look at the RouterOS packet flow diagram. It is necessary to mark packets before the simple queues (before global-in HTB queue) or else target's download limitation will not work. The only mangle chain before global-in is prerouting.\n• parent (Name of parent simple queue, or none) : assigns this queue as a child queue for selected target {{{...}}}. Target queue can be HTB queue or any other previously created simple queue. In order for traffic to reach child queues, parent queues must capture all necessary traffic.\n• priority (1..8) : Prioritize one child queue over other child queue. Does not work on parent queues (if queue has at least one child). One is the highest, eight is the lowest priority. Child queue with higher priority will have chance to reach its max-limit before child with lower priority. Priority have nothing to do with bursts.\n• queue (SOMETHING/SOMETHING) : Choose the type of the upload/download queue. Queue types can be created in /queue type.\n• limit-at (NUMBER/NUMBER) : normal upload/download data rate that is guaranteed to a target\n• max-limit (NUMBER/NUMBER) : maximal upload/download data rate that is allowed for a target to reach to reach what\n• burst-limit (NUMBER/NUMBER) : maximal upload/download data rate which can be reached while the burst is active\n• burst-time (TIME/TIME) : period of time, in seconds, over which the average upload/download data rate is calculated. (This is NOT the time of actual burst)\n• burst-threshold (NUMBER/NUMBER) : when average data rate is below this value - burst is allowed, as soon as average data rate reach this value - burst is denied. (basically this is burst on/off switch). For optimal burst behavior this value should above limit-at value and below max-limit value\n\nAnd corresponding options for global-total HTB queue:\n• rate (read-only/read-only) : average queue passing data rate in bytes per second\n• packet-rate (read-only/read-only) : average queue passing data rate in packets per second\n• bytes (read-only/read-only) : number of bytes processed by this queue\n• packets (read-only/read-only) : number of packets processed by this queue\n• queued-bytes (read-only/read-only) : number of bytes waiting in the queue\n• queued-packets (read-only/read-only) : number of packets waiting in the queue\n• borrows (read-only/read-only) : packets that passed queue over its \"limit-at\" value (and was unused and taken away from other queues)\n• lends (read-only/read-only) : packets that passed queue below its \"limit-at\" value OR if queue is a parent - sum of all child borrowed packets\n• pcq-queues (read-only/read-only) : number of PCQ substreams, if queue type is PCQ\n\nAnd corresponding options for global-total HTB queue:\n\n\n\n Queue tree creates only one directional queue in one of the HTBs. It is also the only way how to add queue on the separate interface. This way it is possible to ease mangle configuration - you don't need separate marks for download and upload - only upload will get to Public interface and only download will get to Private interface.\n\nQueue tree is not ordered - all traffic pass it together.\n\nRead more about HTB and see configuration examples.\n• name (Text) : Unique queue identifier that can be used as parent option value for other queues\n• packet-marks (Comma separated list of) : allows to use marked packets from /ip firewall mangle. Take look at this packet flow diagram. You need to make sure that packets are marked before the simple queues (before global-in HTB queue)\n• parent (Name of , or none) : assigns this queue as a child queue for selected target. Target queue can be HTB queue or any other previously created queue\n• priority (1..8) : Prioritize one child queue over other child queue. Does not work on parent queues (if queue has at least one child). One is the highest, eight is the lowest priority. Child queue with higher priority will have chance to reach its max-limit before child with lower priority. Priority have nothing to do with bursts.\n• queue (SOMETHING) : Choose the type of the queue. Queue types can be created here\n• limit-at (NUMBER) : normal data rate that is guaranteed to a target\n• max-limit (NUMBER) : maximal data rate that is allowed for a target to reach\n• burst-limit (NUMBER) : maximal data rate which can be reached while the burst is active\n• burst-time (TIME) : period of time, in seconds, over which the average data rate is calculated. (This is NOT the time of actual burst)\n• burst-threshold (NUMBER) : when average data rate is below this value - burst is allowed, as soon as average data rate reach this value - burst is denied. (basically this is burst on/off switch). For optimal burst behavior this value should above limit-at value and below max-limit value\n• rate (read-only) : average queue passing data rate in bytes per second\n• packet-rate (read-only) : average queue passing data rate in packets per second\n• bytes (read-only) : number of bytes processed by this queue\n• packets (read-only) : number of packets processed by this queue\n• queued-bytes (read-only) : number of bytes waiting in the queue\n• queued-packets (read-only) : number of packets waiting in the queue\n• borrows (read-only) : packets that passed queue over its \"limit-at\" value (and was unused and taken away from other queues)\n• lends (read-only) : packets that passed queue below its \"limit-at\" value OR if queue is a parent - sum of all child borrowed packets\n• pcq-queues (read-only) : number of PCQ substreams, if queue type is PCQ\n\n\n\n This sub-menu lists by default created queue types and allow to add new user-specific ones.\n\nonly-hardware-queue leaves interface with only hw transmit descriptor ring buffer which acts as a queue in itself. Usually at least 100 packets can be queued for transmit in transmit descriptor ring buffer. Transmit descriptor ring buffer size and the amount of packets that can be queued in it varies for different types of ethernet MACs.\n\nHaving no software queue is especially beneficial on SMP systems because it removes the requirement to synchronize access to it from different cpus/cores which is expensive.\n\n\n\n multi-queue-ethernet-default can be beneficial on SMP systems with ethernet interfaces that have support for multiple transmit queues and have a linux driver support for multiple transmit queues. By having one software queue for each hardware queue there might be less time spent for synchronizing access to them.\n\nQueue kinds or Queuing (scheduling) algorithms describe which packet will be transmitted next in line. RouterOS supports several queuing algorithms:\n\nThese queuing disciplines are based on the FIFO algorithm (First-In First-Out). The difference between PFIFO and BFIFO is that one is measured in packets and the other one in bytes.\n\nEvery packet that cannot be enqueued (if the queue is full), is dropped. Large queue sizes can increase latency, but utilize channel better.\n\nThese queues uses pfifo-limit and bfifo-limit parameters.\n\n\n\n mq-pfifo is pfifo with support for multiple transmit queues. This queue is beneficial on SMP systems with ethernet interfaces that have support for multiple transmit queues and have a linux driver support for multiple transmit queues.\n\nRandom Early Drop is a queuing mechanism which tries to avoid network congestion by controlling the average queue size. The average queue size is compared to two thresholds: a minimum (min ) and maximum (max ) threshold. If average queue size (avg ) is less than the minimum threshold, no packets are dropped. When average queue size is greater than the maximum threshold, all incoming packets are dropped. But if the average queue size is between the minimum and maximum thresholds packets are randomly dropped with probability P where probability is exact a function of the average queue size: P = P (avg – min )/ (max - min ). If average queue grows, the probability for dropping incoming packets grows too. P - ratio, which can adjust the packet discarding probability abruptness, (the simplest case P can be equal to one. The diagram in Figure 8.2. shows the packet drop probability in RED algorithm.\n\nStochastic Fairness Queuing (SFQ) is ensured by hashing and round-robin algorithms. A traffic flow may be uniquely identified by a 4 options(src-address, dst-address, src-port and dst-port), so these parameters are used by SFQ hashing algorithm to classify packets into one of 1024 possible sub-streams. Then round-robin algorithm will start to distribute available bandwidth to all sub-streams, on each round giving sfq-allot bytes of traffic. The whole SFQ queue can contain 128 packets and there are 1024 sub-streams available.\n\nSFQ is called \"Stochastic\" because it does not really allocate a queue for each flow, it has an algorithm which divides traffic over a limited number of queues (1024) using a hashing algorithm.\n\nPer Connection Queuing (PCQ) is a similar to SFQ, but it has additional features.\n\nMore information and examples of PCQ are available here.\n\nProperties that start with particular queue kind name, is applied only to particular kind. For example all properties starting with pcq applies only to queue kind=pcq.\n\n\n\n Before sending data over an interface, it is processed by the queue. This sub menu list all available interfaces in RouterOS and allows to change queue type for particular interface."
    },
    {
        "link": "https://help.mikrotik.com/docs/spaces/ROS/pages/250708066/Firewall",
        "document": "The firewall implements stateful (by utilizing connection tracking) and stateless packet filtering and thereby provides security functions that are used to manage data flow to, from, and through the router. Along with the Network Address Translation (NAT), it serves as a tool for preventing unauthorized access to directly attached networks and the router itself as well as a filter for outgoing traffic.\n\nNetwork firewalls keep outside threats away from sensitive data available inside the network. Whenever different networks are joined together, there is always a threat that someone from outside of your network will break into your LAN. Such break-ins may result in private data being stolen and distributed, valuable data being altered or destroyed, or entire hard drives being erased. Firewalls are used as a means of preventing or minimizing the security risks inherent in connecting to other networks. A properly configured firewall plays a key role in efficient and secure network infrastructure deployment.\n\nMikroTik RouterOS has very powerful firewall implementation with features including:\n• None\n• None interface the packet arrived from or left through\n• None rate at which packets arrive and sequence numbers\n\nand much more!\n\nFirewall is split in three major modules:\n• filter/raw - used to deny traffic based on configured policies. Filtering in RAW tables allow to save resources if connection tracking is not required.\n• mangle - used to mark certain connections, packets, streams, set priorities and do other tasks\n• nat - used to set up address translation rules redirects and port forwarding\n\nFirewall filtering rules are grouped together in chains. It allows a packet to be matched against one common criterion in one chain, and then passed over for processing against some other common criteria to another chain.\n\nFor example, a packet should be matched against the IP address:port pair. Of course, it could be achieved by adding as many rules with IP address:port match as required to the forward chain, but a better way could be to add one rule that matches traffic from a particular IP address. Then rules that perform matching against separate ports can be added to \"mychain\" chain without specifying the IP addresses.\n\nWhen processing a chain, rules are taken from the chain in the order they are listed, from top to bottom. If a packet matches the criteria of the rule, then the specified action is performed on it, and no more rules are processed in that chain (the exception is the passthrough action).\n\nIf a packet has not matched any rule within the chain, then it is accepted.\n\nEach firewall module has its own pre-defined chains:\n\nMore detailed packet processing in RouterOS is described in the Packet Flow in the RouterOS diagram."
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=101311",
        "document": ""
    },
    {
        "link": "https://easychair.org/publications/preprint/1Xr7/open",
        "document": ""
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=124467",
        "document": "Hey guys,I am very much a noob when it comes to do with anything Mikrotik and honestly, I only need very simple advice I presume. All I am trying to do is shape one of my housemates bandwidth as they are refusing to pay part of our internet bill, claiming that they 'don't use enough of it in order to pay'. Nevertheless, I would like to shape their bandwidth in the house to the same as what we would be shaped to if we went over our usage and/or didn't pay our bill (256kbps/256kbps).I've watched and looked at a few basic tutorials on how to do this inside both RouterOS and Winbox (they seem the same to me anyways virtually). The version currently installed is v6.40.1 (stable) which I am assuming is the latest most stable version. Basically, I'm trying to set up awith our housemates IP addresses, but before I finalise it I have tried to test it on mine and another housemates computers to make sure I have done it correctly. The issue is though, in no way shape or form can I get it to even remotely shape our speeds.My process is as follows:1) Queues > simple queues > add2) Name the queue3) Set target as device's (in this case my PC) IP address4) Set max limit on both target upload and target download to 256k5) Hit apply and/or okayThis then obviously creates what I'm assuming is called a queue with a little green icon. Now from what I have read, this icon is supposed to go red when the connection is being limited. However, not once has either of the two connections I have tried gone red, nor have they been limited. In both instances I ran a speed test before and after adding the queue, as well as opening a 1080p youtube video (as this should not be easily done on 256k speeds). Regardless, after adding the queue, the speeds were as fast as per usual, both in the speedtest and loading the youtube video. In no way was the connection shaped/limited at all.Thus, my question is, am I missing something? Is there something else I must add to properly activate these queues or something? Or does the fact that they are wireless connections play into it at all? I have not touched anything else in the router settings at all apart from this as I have no knowledge or need to. The only reason I even have this router is because my friend won it in an IT competition and we needed a router for the house so he lent it to me.Would love any help or advice at all guys. Thanks heaps in advance!Cheers!"
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=142721",
        "document": ""
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=103382",
        "document": "I assign static IP to every possible device on my network. Than I make queues where I put on two first places my notebook and my mobile phone. So this devices have unlimited upload and download and priority set to 1. Other devices have upload and download limited to ADSL maximum limits, priority 8 and \"Limit at\" set to minimum bandwidth if I will be active on my devices. Is it correct? Because I think, that this solution doesn't work.\n\nIf you didn't specify a limit-at for your priority 1 queues, then this isn't going to behave the way you want.Priority is actually more of a tie-breaker with queues. Limit-at is actually a guaranteed minimum bandwidth that is reserved for that queue. If a queue is using less than this, it will receive priority over other queues above their limit-at rates, even if it is priority 8 and the other queues are priority 1.Basically, all guarantees are met before priorities are considered.You should either add limit-at guarantees to your high priority queues or else remove all guaranteed minimums and let the priorities fight it out. (of course, in this model, you can hog 100% of the bandwidth and leave none for the kids)I'd suggest that instead of a queue for each person, create a priority queue and a non-priority queue and set each one up as a PCQ type of queue, and guarantee 50% to the high priority queue, and 50% to the low priority queue.PCQ will then enforce fair sharing by the devices which are using that queue."
    }
]