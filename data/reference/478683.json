[
    {
        "link": "https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.butter.html",
        "document": "The order of the filter. For ‘bandpass’ and ‘bandstop’ filters, the resulting order of the final second-order sections (‘sos’) matrix is 2*N , with N the number of biquad sections of the desired system.\n\nThe critical frequency or frequencies. For lowpass and highpass filters, Wn is a scalar; for bandpass and bandstop filters, Wn is a length-2 sequence.\n\nFor a Butterworth filter, this is the point at which the gain drops to 1/sqrt(2) that of the passband (the “-3 dB point”).\n\nFor digital filters, if fs is not specified, Wn units are normalized from 0 to 1, where 1 is the Nyquist frequency (Wn is thus in half cycles / sample and defined as 2*critical frequencies / fs). If fs is specified, Wn is in the same units as fs.\n\nFor analog filters, Wn is an angular frequency (e.g. rad/s)."
    },
    {
        "link": "https://docs.scipy.org/doc/scipy-1.13.1/reference/generated/scipy.signal.butter.html",
        "document": "The order of the filter. For ‘bandpass’ and ‘bandstop’ filters, the resulting order of the final second-order sections (‘sos’) matrix is 2*N , with N the number of biquad sections of the desired system.\n\nThe critical frequency or frequencies. For lowpass and highpass filters, Wn is a scalar; for bandpass and bandstop filters, Wn is a length-2 sequence.\n\nFor a Butterworth filter, this is the point at which the gain drops to 1/sqrt(2) that of the passband (the “-3 dB point”).\n\nFor digital filters, if fs is not specified, Wn units are normalized from 0 to 1, where 1 is the Nyquist frequency (Wn is thus in half cycles / sample and defined as 2*critical frequencies / fs). If fs is specified, Wn is in the same units as fs.\n\nFor analog filters, Wn is an angular frequency (e.g. rad/s)."
    },
    {
        "link": "https://dsp.stackexchange.com/questions/49460/apply-low-pass-butterworth-filter-in-python",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/25191620/creating-lowpass-filter-in-scipy-understanding-methods-and-units",
        "document": "I am trying to filter a noisy heart rate signal with python. Because heart rates should never be above about 220 beats per minute, I want to filter out all noise above 220 bpm. I converted 220/minute into 3.66666666 Hertz and then converted that Hertz to rad/s to get 23.0383461 rad/sec.\n\nThe sampling frequency of the chip that takes data is 30Hz so I converted that to rad/s to get 188.495559 rad/s.\n\nAfter looking up some stuff online I found some functions for a bandpass filter that I wanted to make into a lowpass. Here is the link the bandpass code, so I converted it to be this:\n\nI am very confused by this though because I am pretty sure the butter function takes in the cutoff and sampling frequency in rad/s but I seem to be getting a weird output. Is it actually in Hz?\n\nSecondly, what is the purpose of these two lines:\n\nI know it's something about normalization but I thought the nyquist was 2 times the sampling requency, not one half. And why are you using the nyquist as a normalizer?\n\nCan someone explain more about how to create filters with these functions?\n\nand got this which clearly does not cut-off at 23 rad/s:"
    },
    {
        "link": "https://dsp.stackexchange.com/questions/94086/implementing-a-butterworth-low-pass-filter-in-python-without-knowing-the-order",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://matplotlib.org/stable/gallery/index.html",
        "document": "For an overview of the plotting methods we provide, see Plot types\n\nThis page contains example plots. Click on any image to see the full image and source code.\n\nFor longer tutorials, see our tutorials page. You can also find external resources and a FAQ in our user guide."
    },
    {
        "link": "https://stackoverflow.com/questions/71494525/python-plotting-on-off-data-using-matplotlib",
        "document": "I'm trying to plot data about a bunch of devices whether they're online or offline. The devices give a signal 1 when they come online and a signal 0 when they're going offline. In between, there's no data.\n\nFor just one device I use a step plot (with step=post), which works pretty well. Now I want to show by a line when one or more devices are online.\n\nDoes anyone have any tips/tricks on how to visualize this dataset? I've tried adding extra rows just before each signal to get a more continuous dataset and then plot the value of OnOff, but then I lose the categories. Do I need to convert this to a broken_barh plot? Or any other ideas?"
    },
    {
        "link": "https://linkedin.com/pulse/signal-processing-python-part-1-generate-signals-basic-hampiholi",
        "document": "I have used MATLAB extensively in my career for signal processing. Its built-in libraries makes it easy to build and test algorithms in matter of hours. However the ease of use of MATLAB comes at a price.\n\nAs an algorithm and software engineer, I found it difficult to support colleagues/customers across the globe who couldn't get access to MATLAB for various reasons.\n\nAs an alternative I started exploring the software packages which can get the job done similar to what MATLAB could do. Following were my requirements for MATLAB replacement when it came to data processing and visualization:\n• Versatile and easy to use\n• Great for prototyping (do more with less code)\n\nPython ticked all of the above requirements. The more I read and experimented I realized Python indeed is a very powerful language for data analysis and visualization.\n\nIn this blog I am not going to go through basics of signal processing (which I presume you already are master of) rather I will be showing how to use Python and some of its libraries for signal processing. Also I will mainly be concentrating on 1-D signal processing like speech / audio. In this blog (part-1) I will be presenting the basics like how to get started on creating signals, design filters, filtering signals and finally visualizing the filter response and the filtered signals.\n\nFor the examples illustrated below you will need Python package with 3 important libraries:\n\nLets get started with creating and visualizing signals in python.\n\nIn an abstract, Signal is any quantity that varies with time. In audio signals the parameter that varies with time is amplitude. Physically an audio signal is a variation in sound pressure with respect to time. Periodic signals are the most fundamental type of signals that are used to analyze complex systems. Sine tones are normally used to identify the characteristics of an unknown system like filter. Lets try creating periodic signals in python and visualize them.\n\nPeriodic waveform are signals that repeat themselves over and over again after a certain period. The period at which the signals repeat is called the time period of the signal. The inverse of the time period of the signal is called frequency. Unit of frequency is Hz and while that of time period is expressed in terms of time (seconds).\n\nLet us look at how to create simple periodic signals in Python.\n\nThe output of the above code snippet is as below:\n\nAs can be seen the top plot has a signal which repeats itself 2.5 times over a period of quarter second and bottom signal repeats 5 times in the same period. The peak amplitude of both signals is 1.\n\nTo design, implement and test filters you will need the SciPy package. SciPy contains modules for linear algebra, Fourier transform, signal processing and image processing along with ODE solvers and other tasks common in science and engineering.\n\nThe basic data structure in SciPy is multi-dimensional array provided by NumPy.\n\nSciPy supports MATLAB style IIR type filter design. Lets try to design different orders of Butterworth filter with a cut-off frequency of 250 Hz and visualize their frequency response.\n\nThe filter design functions are part of the signal module under the SciPy package (SciPy.Signal).\n\nThe above piece of code designs a 1st order filter with aforementioned specification. The piece of code also additionally calculates and plots the frequency response of the filter.\n\nAs an example the below code designs the filters with various order and plots the frequency response of each filter in the same figure.\n\nThe plot obtained from the above piece of code is as below:\n\nThe green vertical line (green color) in the above plot is the cut-off frequency of the filters.\n\nLets create few noisy signals and apply the designed filters and analyze their output to verify how effective they are. As an example lets create a signal which has components of 100 Hz and 3 KHz. We then create few low pass filters (of different order but same cut-off frequency) to analyze which one works the best. From the signal we create, lets try to filter out the high frequency component (3 KHz) by applying a 300 Hz low-pass filter.\n\nThe following piece of code generates the signal, designs the filter and applies it on the signal that was generated. The filtered signals are then plotted to visualize the effectiveness of the applied filter.\n\nThe above code generates 3 subplots. The first subplot shows the input signal to the filter, the second output of the 4th order filter and the third subplot output of the 20th order filter. The below figure is generated by executing the above script:\n\nAs you would imagine, the 20th order filter performs better than the 4th order filter in removing the 3 KHz content from the input signal."
    },
    {
        "link": "https://kaggle.com/code/faressayah/signal-processing-with-python",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/27469799/plotting-a-signal-in-python",
        "document": "The code you posted has a logical indentation error. The call to is indented one level, placing it inside the definition of itself. So although gets defined, it never gets called.\n\nUsing 4 spaces for indentation may help you avoid this error in the future."
    }
]