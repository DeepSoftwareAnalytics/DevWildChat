[
    {
        "link": "https://techonthenet.com/mysql/union_all.php",
        "document": "The MySQL UNION ALL operator is used to combine the result sets of 2 or more SELECT statements. It returns all rows from the query and it does not remove duplicate rows between the various SELECT statements. Each SELECT statement within the MySQL UNION ALL operator must have the same number of fields in the result sets with similar data types.\n\nThe syntax for the UNION ALL operator in MySQL is: SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION ALL SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions]; The columns or calculations that you wish to retrieve. The tables that you wish to retrieve records from. There must be at least one table listed in the FROM clause. Optional. The conditions that must be met for the records to be selected.\n\nThe following is an example of the MySQL UNION ALL operator that returns one field from multiple SELECT statements (and both fields have the same data type): SELECT supplier_id FROM suppliers UNION ALL SELECT supplier_id FROM orders; This MySQL UNION ALL operator would return a supplier_id multiple times in your result set if the supplier_id appeared in both the suppliers and orders table. The MySQL UNION ALL operator does not remove duplicates. If you wish to remove duplicates, try using the MySQL UNION operator.\n\nExample - Using ORDER BY The MySQL UNION ALL operator can use the ORDER BY clause to order the results of the operator. SELECT supplier_id, supplier_name FROM suppliers WHERE state = 'California' UNION ALL SELECT company_id, company_name FROM companies WHERE company_id > 1000 ORDER BY 2; In this MySQL UNION ALL operator, since the column names are different between the two SELECT statements, it is more advantageous to reference the columns in the ORDER BY clause by their position in the result set. In this example, we've sorted the results by supplier_name / company_name in ascending order, as denoted by the . The supplier_name / company_name fields are in position #2 in the result set."
    },
    {
        "link": "https://geeksforgeeks.org/mysql-union-all-operator",
        "document": "The operator in MySQL combines the result sets of multiple statements by retaining all duplicate rows for improved performance and efficiency. It is particularly useful when complete data inclusion, including duplicates is required.\n\nIn this article, We will learn about the MySQL UNION ALL Operator by understanding various examples and so on.\n\nWhat is UNION ALL?\n• MySQL is used to combine the result sets of two or more\n• None faster and more efficient than when we do not need to eliminate duplicates.\n\nThe basic syntax for the UNION ALL operator is as follows:\n\nHere, each SELECT statement fetches data from different tables or the same table based on certain conditions, and UNION ALL combines these results.\n\nHow Does UNION ALL Operator Work in MySQL?\n• UNION ALL statement combines the records returned by two or more SELECT statements and forms a larger dataset by appending the set of values.\n• None all the result set of rows from each and every SELECT\n• None This is done without applying any specific type of condition on the rows.\n• None To filter through the rows and therefore includes all the data which includes repetition\n\nTo understand MySQL UNION ALL Operator we need a table on which we will perform various operations and queries. Here we will consider a table called employees as shown below:\n\nExample 1: Return Single Field using UNION ALL Operator\n\nLet's Retrieve a combined list of employee names who either work in the HR department or hold the position of Developer, including duplicates.\n\nExample 2: UNION ALL Operator with ORDER BY Clause & WHERE Option\n\nLet's Suppose we need to retrieve a combined list of names and positions of employees who either work in the HR department or hold the position of Developer and then sort this list by position.\n• None The main difference between the two is that, while UNION sorts and compares rows with those in a subsequent statement to remove duplicates, UNION ALL does not do that, it is therefore faster than UNION.\n• None Saves all records, including duplicates what is important for processes that utilize full data view and data accuracy, for instance, historical reporting.\n• None Thus, using UNION ALL is preferable when duplicates are permitted or even welcome, so that there is no need to include complex conditions to filter all the duplicate records.\n• None In general, we have found that UNION ALL takes less system resources compared to UNION largely because UNION ALL does not require the extra computation towards elimination of redundancies, as is done in UNION.\n• None Suitable where the results are accumulated gradually adding the dataset over the time, and all records including the duplicates must be kept to provide the comprehensive analysis.\n\nIn summary, the operator is ideal for combining datasets without removing duplicates, offering performance benefits over the operator. It is best used when the inclusion of all records, including duplicates is necessary."
    },
    {
        "link": "https://datacamp.com/doc/mysql/mysql-union-all",
        "document": "The `UNION ALL` clause in MySQL is used to combine the results of two or more `SELECT` statements. Unlike `UNION`, it includes duplicate rows in the final result set.\n\nThe `UNION ALL` clause is used when you need to combine results from multiple queries without removing duplicate entries. It is particularly useful for aggregating data sets where duplicates are meaningful and should be preserved.\n\nIn this syntax, `UNION ALL` merges the results of both `SELECT` statements, including any duplicate rows.\n\nThis example combines names from both `students` and `alumni` tables, including duplicates if any names appear in both tables.\n\n2. UNION ALL with Different Columns\n\nHere, the `UNION ALL` merges the `id` and `name` columns from `employees` with `employee_id` and `full_name` from `contractors`. Both queries must have the same number of columns in the same order, and their data types should be compatible to avoid errors.\n\n3. Using UNION ALL with Conditions\n\nThis example combines products and discontinued products within the 'Electronics' category, retaining all duplicates.\n\n4. Using UNION ALL with ORDER BY\n\nThis example demonstrates applying `ORDER BY` to the final result set to ensure the combined results are sorted by name.\n• Ensure column compatibility. All `SELECT` statements must have the same number of columns with compatible data types to avoid errors.\n• Preserve meaningful duplicates. Use `UNION ALL` when duplicate rows are beneficial to your analysis or reporting needs.\n• Optimize query performance. Be aware that using `UNION ALL` with large datasets can impact performance; consider indexing critical columns. Utilize the `EXPLAIN` statement to analyze the query plan for optimization opportunities.\n• Use explicit ordering. If order matters, apply `ORDER BY` to the final result set, not individual queries within the `UNION ALL`.\n• Error handling. Ensure columns in all `SELECT` statements have matching counts and compatible data types to prevent runtime errors."
    },
    {
        "link": "https://w3schools.com/sql/sql_union.asp",
        "document": "The operator is used to combine the result-set of two or more statements.\n• Every statement within must have the same number of columns\n• The columns must also have similar data types\n• The columns in every statement must also be in the same order\n\nThe operator selects only distinct values by default. To allow duplicate values, use :\n\nNote: The column names in the result-set are usually equal to the column names in the first statement.\n\nIn this tutorial we will use the well-known Northwind sample database.\n\nBelow is a selection from the \"Customers\" table:\n\nAnd a selection from the \"Suppliers\" table:\n\nThe following SQL statement returns the cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\n\nNote: If some customers or suppliers have the same city, each city will only be listed once, because selects only distinct values. Use to also select duplicate values!\n\nThe following SQL statement returns the cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\n\nThe following SQL statement returns the German cities (only distinct values) from both the \"Customers\" and the \"Suppliers\" table:\n\nSQL UNION ALL With WHERE\n\nThe following SQL statement returns the German cities (duplicate values also) from both the \"Customers\" and the \"Suppliers\" table:\n\nThe following SQL statement lists all customers and suppliers:\n\nNotice the \"AS Type\" above - it is an alias. SQL Aliases are used to give a table or a column a temporary name. An alias only exists for the duration of the query. So, here we have created a temporary column named \"Type\", that list whether the contact person is a \"Customer\" or a \"Supplier\"."
    },
    {
        "link": "https://dev.mysql.com/doc/en/union.html",
        "document": "combines the result from multiple query blocks into a single result set. This example uses statements:"
    },
    {
        "link": "https://w3schools.com/mysql/mysql_limit.asp",
        "document": "The clause is used to specify the number of records to return.\n\nThe clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement selects the first three records from the \"Customers\" table:\n\nWhat if we want to select records 4 - 6 (inclusive)?\n\nMySQL provides a way to handle this: by using OFFSET.\n\nThe SQL query below says \"return only 3 records, start on record 4 (OFFSET 3)\":\n\nThe following SQL statement selects the first three records from the \"Customers\" table, where the country is \"Germany\":\n\nThe following SQL statement sorts the customers by country before returning the first three records from the selection:"
    },
    {
        "link": "https://datacamp.com/doc/mysql/mysql-limit",
        "document": "The `LIMIT` clause in MySQL is used to constrain the number of records returned by a query. It is commonly employed to fetch a subset of results, especially in pagination scenarios.\n\nThe `LIMIT` clause is typically used at the end of a `SELECT` statement to specify the maximum number of rows the query should return. It can also be combined with an `OFFSET` to skip a specified number of rows before starting to return rows.\n\nIn this syntax, `LIMIT row_count` specifies the number of rows to return, while `LIMIT offset, row_count` skips `offset` rows before beginning to return the `row_count` rows. Note that the `OFFSET` value is zero-based, meaning that `LIMIT 0, 5` returns the first five rows. An alternative syntax, `LIMIT row_count OFFSET offset`, may be more intuitive for some users.\n\nThis example retrieves the first 5 rows from the `products` table.\n\nThis query skips the first 3 rows and then retrieves the next 5 rows from the `products` table, useful for pagination.\n\nHere, the query returns the 10 most recently published articles by ordering the `articles` table in descending order of `publish_date`.\n• Use with ORDER BY. To ensure predictable results, use `LIMIT` in conjunction with `ORDER BY`.\n• Optimize pagination. For large datasets, consider using indexed columns in your `ORDER BY` clause to improve performance.\n• Avoid large offsets. Large offsets can lead to poor performance; consider alternative pagination strategies, like keyset pagination, which uses indexed columns for efficient data retrieval.\n• Be cautious with large row counts. Fetching an excessive number of rows can lead to increased memory usage and slower performance.\n• Consider SQL dialects. Note that `LIMIT` is not part of the SQL standard and may behave differently in other SQL databases. Users in mixed environments should be aware of these differences."
    },
    {
        "link": "https://risingwave.com/blog/mastering-mysql-limit-a-comprehensive-guide",
        "document": "When working with MySQL, the LIMIT clause is a fundamental aspect of query optimization. By utilizing the LIMIT clause, developers can precisely control the number of records retrieved in a SELECT statement. This section will delve into the intricacies of MySQL LIMIT, exploring its syntax and functionality to empower users in optimizing their database queries effectively.\n\nWhen using LIMIT with an offset, you can instruct MySQL to start fetching records from a specific position within the result set. This feature is particularly useful when implementing pagination or retrieving subsets of data based on certain criteria.\n\nThe primary function of the LIMIT clause is to restrict the number of rows returned by a query. By defining this constraint, developers can efficiently manage large datasets and enhance query performance. When combined with proper indexing strategies, limiting the result set size can significantly reduce query execution times.\n\nImplementing the LIMIT clause offers notable performance benefits by streamlining data retrieval processes. Instead of fetching all available records, specifying a limit ensures that only essential data is transmitted between the database server and application. This optimized approach minimizes resource consumption and enhances overall system efficiency.\n\nBest Practices for Using MySQL LIMIT\n\nWhen optimizing queries in MySQL, it is essential to adhere to best practices for efficient query design and handling large datasets. By implementing these strategies, developers can enhance query performance, prevent system crashes with large datasets, and ensure scalability within database operations.\n\nTo optimize query performance using MySQL LIMIT, developers should avoid sorting by expressions. Instead, prioritize sorting by columns in the leading table. This approach streamlines data retrieval processes and minimizes resource consumption during query execution. By focusing on efficient query design, developers can significantly improve the overall performance of their database operations.\n\nSorting by columns in the leading table is a fundamental aspect of optimizing queries with MySQL LIMIT. This practice enhances data retrieval efficiency and ensures that only essential records are transmitted between the database server and application. By structuring queries to prioritize column-based sorting, developers can streamline result set retrieval and boost system efficiency.\n\nWhen dealing with large datasets, utilizing LIMIT with ORDER BY is crucial for effective data management. This combination allows developers to retrieve specific subsets of data while maintaining an organized sequence based on defined criteria. By incorporating LIMIT with ORDER BY, developers can enhance user experience, improve application usability, and optimize query performance.\n\nWhile leveraging the benefits of LIMIT in MySQL queries, developers must exercise caution when specifying large limit values. Oversized limits can lead to increased resource consumption and potential system inefficiencies. By setting appropriate limit values based on query requirements, developers can prevent performance bottlenecks and ensure smooth data retrieval processes.\n\nTop-N analysis involves identifying and retrieving the top or bottom N records based on specified criteria. With MySQL LIMIT, developers can easily extract relevant insights by limiting query results to the desired number of records. This approach is particularly useful in scenarios where ranking or prioritization is essential for decision-making processes.\n\nBy utilizing the capabilities of the LIMIT clause, developers can efficiently manage data retrieval processes, enhance user experience, and optimize query performance within their database operations. MySQL provides a flexible toolset with the LIMIT clause to streamline result sets effectively, ensuring precise data extraction tailored to specific requirements. Incorporating best practices and common use cases of LIMIT empowers developers to fine-tune their queries for optimal efficiency and scalability, setting a solid foundation for future advancements in database management."
    },
    {
        "link": "https://dev.mysql.com/doc/en/select.html",
        "document": "is used to retrieve rows selected from one or more tables, and can include operations and subqueries. and operations are also supported. The , , and operators are described in more detail later in this section. See also Section 15.2.15, “Subqueries”.\n\nA statement can start with a clause to define common table expressions accessible within the . See Section 15.2.20, “WITH (Common Table Expressions)”.\n\nThe most commonly used clauses of statements are these:\n\ncan also be used to retrieve rows computed without reference to any table.\n\nYou are permitted to specify as a dummy table name in situations where no tables are referenced:\n\nis purely for the convenience of people who require that all statements should have and possibly other clauses. MySQL may ignore the clauses. MySQL does not require if no tables are referenced.\n\nIn general, clauses used must be given in exactly the order shown in the syntax description. For example, a clause must come after any clause and before any clause. The clause, if present, can appear in any position indicated by the syntax description, but within a given statement can appear only once, not in multiple positions. For more information about , see Section 15.2.13.1, “SELECT ... INTO Statement”.\n\nThe list of terms comprises the select list that indicates which columns to retrieve. Terms specify a column or expression or can use -shorthand:\n\nThe following list provides additional information about other clauses:\n• None A can be given an alias using . The alias is used as the expression's column name and can be used in , , or clauses. For example: SELECT CONCAT(last_name,', ',first_name) AS full_name FROM mytable ORDER BY full_name; The keyword is optional when aliasing a with an identifier. The preceding example could have been written like this: However, because the is optional, a subtle problem can occur if you forget the comma between two expressions: MySQL interprets the second as an alias name. For example, in the following statement, is treated as an alias name: For this reason, it is good practice to be in the habit of using explicitly when specifying column aliases. It is not permissible to refer to a column alias in a clause, because the column value might not yet be determined when the clause is executed. See Section B.3.4.4, “Problems with Column Aliases”.\n• None The clause indicates the table or tables from which to retrieve rows. If you name more than one table, you are performing a join. For information on join syntax, see Section 15.2.13.2, “JOIN Clause”. For each table specified, you can optionally specify an alias. The use of index hints provides the optimizer with information about how to choose indexes during query processing. For a description of the syntax for specifying these hints, see Section 10.9.4, “Index Hints”. You can use as an alternative way to force MySQL to prefer key scans instead of table scans. See Section 7.1.8, “Server System Variables”.\n• None You can refer to a table within the default database as , or as . to specify a database explicitly. You can refer to a column as , . , or . . . You need not specify a or . prefix for a column reference unless the reference would be ambiguous. See Section 11.2.2, “Identifier Qualifiers”, for examples of ambiguity that require the more explicit column reference forms.\n• None A table reference can be aliased using or . These statements are equivalent: SELECT t1.name, t2.salary FROM employee AS t1, info AS t2 WHERE t1.name = t2.name; SELECT t1.name, t2.salary FROM employee t1, info t2 WHERE t1.name = t2.name;\n• None Columns selected for output can be referred to in and clauses using column names, column aliases, or column positions. Column positions are integers and begin with 1: SELECT college, region, seed FROM tournament ORDER BY region, seed; SELECT college, region AS r, seed AS s FROM tournament ORDER BY r, s; SELECT college, region, seed FROM tournament ORDER BY 2, 3; To sort in reverse order, add the (descending) keyword to the name of the column in the clause that you are sorting by. The default is ascending order; this can be specified explicitly using the keyword. If occurs within a parenthesized query expression and also is applied in the outer query, the results are undefined and may change in a future version of MySQL. Use of column positions is deprecated because the syntax has been removed from the SQL standard.\n• None When you use or to sort a column in a , the server sorts values using only the initial number of bytes indicated by the system variable.\n• None MySQL extends the use of to permit selecting fields that are not mentioned in the clause. If you are not getting the results that you expect from your query, please read the description of found in Section 14.19, “Aggregate Functions”.\n• None The clause, like the clause, specifies selection conditions. The clause specifies conditions on columns in the select list, but cannot refer to aggregate functions. The clause specifies conditions on groups, typically formed by the clause. The query result includes only groups satisfying the conditions. (If no is present, all rows implicitly form a single aggregate group.) The clause is applied nearly last, just before items are sent to the client, with no optimization. ( is applied after .) The SQL standard requires that must reference only columns in the clause or columns used in aggregate functions. However, MySQL supports an extension to this behavior, and permits to refer to columns in the list and columns in outer subqueries as well. If the clause refers to a column that is ambiguous, a warning occurs. In the following statement, is ambiguous because it is used as both an alias and a column name: SELECT COUNT(col1) AS col2 FROM t GROUP BY col2 HAVING col2 = 2; Preference is given to standard SQL behavior, so if a column name is used both in and as an aliased column in the select column list, preference is given to the column in the column.\n• None Do not use for items that should be in the clause. For example, do not write the following:\n• None The clause can refer to aggregate functions, which the clause cannot: SELECT user, MAX(salary) FROM users GROUP BY user HAVING MAX(salary) > 10;\n• None MySQL permits duplicate column names. That is, there can be more than one with the same name. This is an extension to standard SQL. Because MySQL also permits and to refer to values, this can result in an ambiguity: SELECT 12 AS a, a FROM t GROUP BY a; In that statement, both columns have the name . To ensure that the correct column is used for grouping, use different names for each .\n• None The clause, if present, defines named windows that can be referred to by window functions. For details, see Section 14.20.4, “Named Windows”.\n• None MySQL resolves unqualified column or alias references in clauses by searching in the values, then in the columns of the tables in the clause. For or clauses, it searches the clause before searching in the values. (For and , this differs from the pre-MySQL 5.0 behavior that used the same rules as for .)\n• None The clause can be used to constrain the number of rows returned by the statement. takes one or two numeric arguments, which must both be nonnegative integer constants, with these exceptions:\n• None Within prepared statements, parameters can be specified using placeholder markers.\n• None Within stored programs, parameters can be specified using integer-valued routine parameters or local variables. With two arguments, the first argument specifies the offset of the first row to return, and the second specifies the maximum number of rows to return. The offset of the initial row is 0 (not 1): To retrieve all rows from a certain offset up to the end of the result set, you can use some large number for the second parameter. This statement retrieves all rows from the 96th row to the last: With one argument, the value specifies the number of rows to return from the beginning of the result set: In other words, is equivalent to . For prepared statements, you can use placeholders. The following statements return one row from the table: SET @a=1; PREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?'; EXECUTE STMT USING @a; The following statements return the second to sixth rows from the table: SET @skip=1; SET @numrows=5; PREPARE STMT FROM 'SELECT * FROM tbl LIMIT ?, ?'; EXECUTE STMT USING @skip, @numrows; For compatibility with PostgreSQL, MySQL also supports the syntax. If occurs within a parenthesized query expression and also is applied in the outer query, the results are undefined and may change in a future version of MySQL.\n• None The form of enables the query result to be written to a file or stored in variables. For more information, see Section 15.2.13.1, “SELECT ... INTO Statement”.\n• None If you use with a storage engine that uses page or row locks, rows examined by the query are write-locked until the end of the current transaction. You cannot use as part of the in a statement such as . (If you attempt to do so, the statement is rejected with the error Can't update table ' ' while ' ' is being created.) and set shared locks that permit other transactions to read the examined rows but not to update or delete them. and are equivalent. However, , like , supports , , and options. is a replacement for , but remains available for backward compatibility. causes a or query to execute immediately, returning an error if a row lock cannot be obtained due to a lock held by another transaction. causes a or query to execute immediately, excluding rows from the result set that are locked by another transaction. and options are unsafe for statement-based replication. Queries that skip locked rows return an inconsistent view of the data. is therefore not suitable for general transactional work. However, it may be used to avoid lock contention when multiple sessions access the same queue-like table. applies and queries to named tables. For example: SELECT * FROM t1, t2 FOR SHARE OF t1 FOR UPDATE OF t2; All tables referenced by the query block are locked when is omitted. Consequently, using a locking clause without in combination with another locking clause returns an error. Specifying the same table in multiple locking clauses returns an error. If an alias is specified as the table name in the statement, a locking clause may only use the alias. If the statement does not specify an alias explicitly, the locking clause may only specify the actual table name. For more information about and , see Section 17.7.2.4, “Locking Reads”. For additional information about and options, see Locking Read Concurrency with NOWAIT and SKIP LOCKED.\n\nFollowing the keyword, you can use a number of modifiers that affect the operation of the statement. , , and modifiers beginning with are MySQL extensions to standard SQL.\n• None The and modifiers specify whether duplicate rows should be returned. (the default) specifies that all matching rows should be returned, including duplicates. specifies removal of duplicate rows from the result set. It is an error to specify both modifiers. is a synonym for . can be used with a query that also uses .\n• None gives the higher priority than a statement that updates a table. You should use this only for queries that are very fast and must be done at once. A query that is issued while the table is locked for reading runs even if there is an update statement waiting for the table to be free. This affects only storage engines that use only table-level locking (such as , , and ). cannot be used with statements that are part of a .\n• None forces the optimizer to join the tables in the order in which they are listed in the clause. You can use this to speed up a query if the optimizer joins the tables in nonoptimal order. also can be used in the list. See Section 15.2.13.2, “JOIN Clause”. does not apply to any table that the optimizer treats as a or table. Such a table produces a single row, is read during the optimization phase of query execution, and references to its columns are replaced with the appropriate column values before query execution proceeds. These tables appear first in the query plan displayed by . See Section 10.8.1, “Optimizing Queries with EXPLAIN”. This exception may not apply to or tables that are used on the -complemented side of an outer join (that is, the right-side table of a or the left-side table of a .\n• None or can be used with or to tell the optimizer that the result set has many rows or is small, respectively. For , MySQL directly uses disk-based temporary tables if they are created, and prefers sorting to using a temporary table with a key on the elements. For , MySQL uses in-memory temporary tables to store the resulting table instead of using sorting. This should not normally be needed.\n• None forces the result to be put into a temporary table. This helps MySQL free the table locks early and helps in cases where it takes a long time to send the result set to the client. This modifier can be used only for top-level statements, not for subqueries or following .\n• None tells MySQL to calculate how many rows there would be in the result set, disregarding any clause. The number of rows can then be retrieved with . See Section 14.15, “Information Functions”. The query modifier and accompanying function are deprecated; expect them to be removed in a future version of MySQL. See the description of for information about an alternative strategy.\n• None The and modifiers were used with the query cache prior to MySQL 8.4. The query cache was removed in MySQL 8.4. The modifier was removed as well. is deprecated, and has no effect; expect it to be removed in a future MySQL release."
    },
    {
        "link": "https://stackoverflow.com/questions/20395410/how-to-stop-or-limit-select-after-selecting-top-100-row",
        "document": "I have a query like this -\n\nThis one taking 4 minutes. I have an index on evedate.\n\nCDR table contains 2400000 records for each day from '2013-10-01' to '2013-10-30'. But I want to select only first 100 records. How I am suppose to optimize this query.\n\nI have used limit clause but there is no benefit of it.\n\nSo please let me know how I can optimize this query."
    }
]