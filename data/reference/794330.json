[
    {
        "link": "https://tailwindcss.com/docs/responsive-design",
        "document": "Every utility class in Tailwind can be applied conditionally at different breakpoints, which makes it a piece of cake to build complex responsive interfaces without ever leaving your HTML.\n\nFirst, make sure you've added the viewport meta tag to the of your document:\n\nThen to add a utility but only have it take effect at a certain breakpoint, all you need to do is prefix the utility with the breakpoint name, followed by the character:\n\nThere are five breakpoints by default, inspired by common device resolutions:\n\nThis works for every utility class in the framework, which means you can change literally anything at a given breakpoint — even things like letter spacing or cursor styles.\n\nHere's a simple example of a marketing page component that uses a stacked layout on small screens, and a side-by-side layout on larger screens:\n\nHere's how the example above works:\n• By default, the outer is , but by adding the utility, it becomes on medium screens and larger.\n• When the parent is a flex container, we want to make sure the image never shrinks, so we've added to prevent shrinking on medium screens and larger. Technically we could have just used since it would do nothing on smaller screens, but since it only matters on screens, it's a good idea to make that clear in the class name.\n• On small screens the image is automatically full width by default. On medium screens and up, we've constrained the width to a fixed size and ensured the image is full height using .\n\nWe've only used one breakpoint in this example, but you could easily customize this component at other sizes using the , , , or responsive prefixes as well.\n\nTailwind uses a mobile-first breakpoint system, similar to what you might be used to in other frameworks like Bootstrap.\n\nWhat this means is that unprefixed utilities (like ) take effect on all screen sizes, while prefixed utilities (like ) only take effect at the specified breakpoint and above.\n\nWhere this approach surprises people most often is that to style something for mobile, you need to use the unprefixed version of a utility, not the prefixed version. Don't think of as meaning \"on small screens\", think of it as \"at the small breakpoint\".\n\nFor this reason, it's often a good idea to implement the mobile layout for a design first, then layer on any changes that make sense for screens, followed by screens, etc.\n\nBy default, styles applied by rules like will apply at that breakpoint and stay applied at larger breakpoints.\n\nIf you'd like to apply a utility only when a specific breakpoint range is active, stack a responsive variant like with a variant to limit that style to a specific range:\n\nTailwind generates a corresponding variant for each breakpoint, so out of the box the following variants are available:\n\nTo target a single breakpoint, target the range for that breakpoint by stacking a responsive variant like with the variant for the next breakpoint:\n\nRead about targeting breakpoint ranges to learn more.\n\nUse the theme variables to customize your breakpoints:\n\nThis updates the breakpoint to use instead of the default , and creates new and breakpoints that can be used in your markup:\n\nNote that it's important to always use the same unit for defining your breakpoints or the generated utilities may be sorted in an unexpected order, causing breakpoint classes to override each other in unexpected ways.\n\nTailwind uses for the default breakpoints, so if you are adding additional breakpoints to the defaults, make sure you use as well.\n\nLearn more about customizing your theme in the theme documentation.\n\nTo remove a default breakpoint, reset its value to the keyword:\n\nYou can also reset all of the default breakpoints using , then define all of your breakpoints from scratch:\n\nLearn more removing default theme values in the theme documentation.\n\nIf you need to use a one-off breakpoint that doesn’t make sense to include in your theme, use the or variants to generate a custom breakpoint on the fly using any arbitrary value.\n\nLearn more about arbitrary value support in the arbitrary values documentation.\n\nContainer queries are a modern CSS feature that let you style something based on the size of a parent element instead of the size of the entire viewport. They let you build components that are a lot more portable and reusable because they can change based on the actual space available for that component.\n\nUse the class to mark an element as a container, then use variants like and to style child elements based on the size of the container:\n\nJust like breakpoint variants, container queries are mobile-first in Tailwind CSS and apply at the target container size and up.\n\nUse variants like and to apply a style below a specific container size:\n\nFor complex designs that use multiple nested containers, you can name containers using and target specific containers with variants like and :\n\nThis makes it possible to style something based on the size of a distant container, rather than just the nearest container.\n\nUse the theme variables to customize your container sizes:\n\nThis adds a new container query variant that can be used in your markup:\n\nLearn more about customizing your theme in the theme documentation.\n\nUse variants like and for one-off container query sizes you don't want to add to your theme:\n\nUse container query length units like as arbitrary values in other utility classes to reference the container size:\n\nBy default, Tailwind includes container sizes ranging from 16rem (256px) to 80rem (1280px):"
    },
    {
        "link": "https://tailwindcss.com/docs/styling-with-utility-classes",
        "document": "You style things with Tailwind by combining many single-purpose presentational classes (utility classes) directly in your markup:\n\nFor example, in the UI above we've used:\n• The display and padding utilities ( , , and ) to control the overall layout\n• The max-width and margin utilities ( and ) to constrain the card width and center it horizontally\n• The background-color, border-radius, and box-shadow utilities ( , , and ) to style the card's appearance\n• The width and height utilities ( ) to set the width and height of the logo image\n• The gap utilities ( ) to handle the spacing between the logo and the text\n• The font-size, color, and font-weight utilities ( , , , etc.) to style the card text\n\nStyling things this way contradicts a lot of traditional best practices, but once you try it you'll quickly notice some really important benefits:\n• You get things done faster — you don't spend any time coming up with class names, making decisions about selectors, or switching between HTML and CSS files, so your designs come together very fast.\n• Making changes feels safer — adding or removing a utility class to an element only ever affects that element, so you never have to worry about accidentally breaking something another page that's using the same CSS.\n• Maintaining old projects is easier — changing something just means finding that element in your project and changing the classes, not trying to remember how all of that custom CSS works that you haven't touched in six months.\n• Your code is more portable — since both the structure and styling live in the same place, you can easily copy and paste entire chunks of UI around, even between different projects.\n• Your CSS stops growing — since utility classes are so reusable, your CSS doesn't continue to grow linearly with every new feature you add to a project.\n\nThese benefits make a big difference on small projects, but they are even more valuable for teams working on long-running projects at scale.\n\nWhy not just use inline styles?\n\nA common reaction to this approach is wondering, “isn’t this just inline styles?” and in some ways it is — you’re applying styles directly to elements instead of assigning them a class name and then styling that class.\n\nBut using utility classes has many important advantages over inline styles, for example:\n• Designing with constraints — using inline styles, every value is a magic number. With utilities, you’re choosing styles from a predefined design system, which makes it much easier to build visually consistent UIs.\n• Hover, focus, and other states — inline styles can’t target states like hover or focus, but Tailwind’s state variants make it easy to style those states with utility classes.\n• Media queries — you can’t use media queries in inline styles, but you can use Tailwind’s responsive variants to build fully responsive interfaces easily.\n\nThis component is fully responsive and includes a button with hover and active styles, and is built entirely with utility classes:\n\nTo style an element on states like hover or focus, prefix any utility with the state you want to target, for example :\n\nThese prefixes are called variants in Tailwind, and they only apply the styles from a utility class when the condition for that variant matches.\n\nHere's what the generated CSS looks like for the class:\n\nNotice how this class does nothing unless the element is hovered? Its only job is to provide hover styles — nothing else.\n\nThis is different from how you'd write traditional CSS, where a single class would usually provide the styles for many states:\n\nYou can even stack variants in Tailwind to apply a utility when multiple conditions match, like combining and\n\nLearn more in the documentation styling elements on hover, focus, and other states.\n\nJust like hover and focus states, you can style elements at different breakpoints by prefixing any utility with the breakpoint where you want that style to apply:\n\nIn the example above, the prefix makes sure that only triggers at the breakpoint and above, which is 40rem out of the box:\n\nLearn more in the responsive design documentation.\n\nStyling an element in dark mode is just a matter of adding the prefix to any utility you want to apply when dark mode is active:\n\nJust like with hover states or media queries, the important thing to understand is that a single utility class will never include both the light and dark styles — you style things in dark mode by using multiple classes, one for the light mode styles and another for the dark mode styles.\n\nLearn more in the dark mode documentation.\n\nA lot of the time with Tailwind you'll even use multiple classes to build up the value for a single CSS property, for example adding multiple filters to an element:\n\nBoth of these effects rely on the property in CSS, so Tailwind uses CSS variables to make it possible to compose these effects together:\n\nThe generated CSS above is slightly simplified, but the trick here is that each utility sets a CSS variable just for the effect it's meant to apply. Then the property looks at all of these variables, falling back to nothing if the variable hasn't been set.\n\nTailwind uses this same approach for gradients, shadow colors, transforms, and more.\n\nMany utilities in Tailwind are driven by theme variables, like , , and , which map to your underlying color palette, type scale, and shadows.\n\nWhen you need to use a one-off value outside of your theme, use the special square bracket syntax for specifying arbitrary values:\n\nThis can be useful for one-off colors outside of your color palette (like the Facebook blue above), but also when you need a complex custom value like a very specific grid:\n\nIt's also useful when you need to use CSS features like , even if you are using your theme values:\n\nThere's even a syntax for generating completely arbitrary CSS including an arbitrary property name, which can be useful for setting CSS variables:\n\nLearn more in the documentation on using arbitrary values.\n\nHow does this even work?\n\nTailwind CSS isn't one big static stylesheet like you might be used to with other CSS frameworks — it generates the CSS needed based on the classes you're actually using when you compile your CSS.\n\nIt does this by scanning all of the files in your project looking for any symbol that looks like it could be a class name:\n\nAfter it's found all of the potential classes, Tailwind generates the CSS for each one and compiles it all into one stylesheet of just the styles you actually need.\n\nSince the CSS is generated based on the class name, Tailwind can recognize classes using arbitrary values like and generate the necessary CSS, even when the value isn't part of your theme.\n\nLearn more about how this works in detecting classes in source files.\n\nSometimes you need to style an element under a combination of conditions, for example in dark mode, at a specific breakpoint, when hovered, and when the element has a specific data attribute.\n\nHere's an example of what that looks like with Tailwind:\n\nTailwind also supports things like , which let you style an element when a specific parent is hovered:\n\nThis syntax works with other variants too, like , , and many more.\n\nFor really complex scenarios (especially when styling HTML you don't control), Tailwind supports arbitrary variants which let you write any selector you want, directly in a class name:\n\nWhen to use inline styles\n\nInline styles are still very useful in Tailwind CSS projects, particularly when a value is coming from a dynamic source like a database or API:\n\nYou might also reach for an inline style for very complicated arbitrary values that are difficult to read when formatted as a class name:\n\nAnother useful pattern is setting CSS variables based on dynamic sources using inline styles, then referencing those variables with utility classes:\n\nWhen you build entire projects with just utility classes, you'll inevitably find yourself repeating certain patterns to recreate the same design in different places.\n\nFor example, here the utility classes for each avatar image are repeated five separate times:\n\nDon't panic! In practice this isn't the problem you might be worried it is, and the strategies for dealing with it are things you already do every day.\n\nA lot of the time a design element that shows up more than once in the rendered page is only actually authored once because the actual markup is rendered in a loop.\n\nFor example, the duplicate avatars at the beginning of this guide would almost certainly be rendered in a loop in a real project:\n\nWhen elements are rendered in a loop like this, the actual class list is only written once so there's no actual duplication problem to solve.\n\nWhen duplication is localized to a group of elements in a single file, the easiest way to deal with it is to use multi-cursor editing to quickly select and edit the class list for each element at once:\n\nYou'd be surprised at how often this ends up being the best solution. If you can quickly edit all of the duplicated class lists simultaneously, there's no benefit to introducing any additional abstraction.\n\nIf you need to reuse some styles across multiple files, the best strategy is to create a component if you're using a front-end framework like React, Svelte, or Vue, or a template partial if you're using a templating language like Blade, ERB, Twig, or Nunjucks.\n\nNow you can use this component in as many places as you like, while still having a single source of truth for the styles so they can easily be updated together in one place.\n\nIf you're using a templating language like ERB or Twig instead of something like React or Vue, creating a template partial for something as small as a button can feel like overkill compared to a simple CSS class like .\n\nWhile it's highly recommended that you create proper template partials for more complex components, writing some custom CSS is totally fine when a template partial feels heavy-handed.\n\nHere's what a class might look like, using theme variables to keep the design consistent:\n\nAgain though, for anything that's more complicated than just a single HTML element, we highly recommend using template partials so the styles and structure can be encapsulated in one place.\n\nWhen you add two classes that target the same CSS property, the class that appears later in the stylesheet wins. So in this example, the element will receive even though comes last in the actual attribute:\n\nIn general, you should just never add two conflicting classes to the same element — only ever add the one you actually want to take effect:\n\nUsing component-based libraries like React or Vue, this often means exposing specific props for styling customizations instead of letting consumers add extra classes from outside of a component, since those styles will often conflict.\n\nWhen you really need to force a specific utility class to take effect and have no other means of managing the specificity, you can add to the end of the class name to make all of the declarations :\n\nIf you're adding Tailwind to a project that has existing complex CSS with high specificity rules, you can use the flag when importing Tailwind to mark all utilities as :\n\nIf your project has class names that conflict with Tailwind CSS utilities, you can prefix all Tailwind-generated classes and CSS variables using the option:"
    },
    {
        "link": "https://v2.tailwindcss.com/docs/responsive-design",
        "document": "Every utility class in Tailwind can be applied conditionally at different breakpoints, which makes it a piece of cake to build complex responsive interfaces without ever leaving your HTML. There are five breakpoints by default, inspired by common device resolutions: To add a utility but only have it take effect at a certain breakpoint, all you need to do is prefix the utility with the breakpoint name, followed by the character: This works for every utility class in the framework, which means you can change literally anything at a given breakpoint — even things like letter spacing or cursor styles. Here’s a simple example of a marketing page component that uses a stacked layout on small screens, and a side-by-side layout on larger screens (resize your browser to see it in action):\n\nHere’s how the example above works:\n• By default, the outer is , but by adding the utility, it becomes on medium screens and larger.\n• When the parent is a flex container, we want to make sure the image never shrinks, so we’ve added to prevent shrinking on medium screens and larger. Technically we could have just used since it would do nothing on smaller screens, but since it only matters on screens, it’s a good idea to make that clear in the class name.\n• On small screens the image is automatically full width by default. On medium screens and up, we’ve constrained the width to a fixed size and ensured the image is full height using . We’ve only used one breakpoint in this example, but you could easily customize this component at other sizes using the , , , or responsive prefixes as well. By default, Tailwind uses a mobile first breakpoint system, similar to what you might be used to in other frameworks like Bootstrap. What this means is that unprefixed utilities (like ) take effect on all screen sizes, while prefixed utilities (like ) only take effect at the specified breakpoint and above. Where this approach surprises people most often is that to style something for mobile, you need to use the unprefixed version of a utility, not the prefixed version. Don’t think of as meaning “on small screens”, think of it as “at the small breakpoint“.\n\nUse unprefixed utilities to target mobile, and override them at larger breakpoints\n\nFor this reason, it’s often a good idea to implement the mobile layout for a design first, then layer on any changes that make sense for screens, followed by screens, etc. Tailwind’s breakpoints only include a and don’t include a , which means any utilities you add at a smaller breakpoint will also be applied at larger breakpoints. If you’d like to apply a utility at one breakpoint only, the solution is to undo that utility at larger sizes by adding another utility that counteracts it. Here is an example where the background color is red at the breakpoint, but green at every other breakpoint: Notice that we did not have to specify a background color for the breakpoint or the breakpoint — you only need to specify when a utility should start taking effect, not when it should stop. You can completely customize your breakpoints in your file: Learn more in the customizing breakpoints documentation."
    },
    {
        "link": "https://tailwindcss.com",
        "document": "Rapidly build modern websites without ever leaving your HTML. A utility-first CSS framework packed with classes like flex, pt-4, text-center and rotate-90 that can be composed to build any design, directly in your markup.\n\nTailwind is unapologetically modern, and takes advantage of all the latest and greatest CSS features to make the developer experience as enjoyable as possible. Okay, it’s not exactly cutting edge, but just throw a screen size in front of literally any utility to apply it at a specific breakpoint. This sunny and spacious room is for those traveling light and looking for a comfy and cozy place to lay their head for a night... Show more What’s a website these days without a few backdrop blurs? Keep stacking filters until your designer asks you to please, please stop. If you’re not a fan of burning your retinas, just stick in front of any color to apply it in dark mode. Customizing your theme is as simple as creating a few CSS variables. The color palette now uses more vibrant wide gamut colors without you needing to understand what any of that even means. Using grid utilities directly in your HTML makes it so much easier to reason about complex layouts. Transitions that work the way you'd expect — throw a few utilities on an element and you're in business. Tailwind uses CSS layers so you don’t have to worry about specificity issues. Tag an element as a container to let children adapt to changes in its size. No need to remember that complicated gradient syntax — create silky-smooth gradients with just a few utility classes. Our next-generation rendering engine delivers unmatched speed and efficiency, empowering creators to push boundaries like never before. Sometimes two dimensions aren’t enough. Scale, rotate, and translate any element in 3D space to add a touch of depth.\n\nTailwind automatically removes all unused CSS when building for production, which means your final CSS bundle is the smallest it could possibly be. In fact, most Tailwind projects ship less than 10kB of CSS to the client.\n\nBuild whatever you want, without touching your CSS file. Because Tailwind is so low-level, it never encourages you to design the same site twice. Some of your favorite sites are built with Tailwind, and you probably had no idea.\n\nMove even faster with Tailwind Plus. Tailwind Plus is a collection of beautiful, fully responsive UI components, designed and developed by us, the creators of Tailwind CSS. It's got hundreds of ready-to-use examples to choose from, and is guaranteed to help you find the perfect starting point for what you want to build. Visually-stunning, easy to customize site templates built with React and Next.js. A starter kit for building your own component systems with React and Tailwind CSS."
    },
    {
        "link": "https://stackoverflow.com/questions/67910488/tailwindcss-own-responsive-class",
        "document": "I'm working with TailwindCSS and I created entity like this:\n\nI've generated stylesheet and now I'm trying to use it:\n\nBut my styles are not added. What is done wrong?"
    },
    {
        "link": "https://smashingmagazine.com/2018/04/best-practices-grid-layout",
        "document": "In some ways, we are all still so new to CSS Grid Layout. A lot of folks keep asking about best practices that are available out there. In this article, Rachel Andrew is going to try and cover some of the things that either could be described as best practices, and some things that you probably don’t need to worry about. She will ran a survey and share the results as well as her personal thoughts.\n\nAn increasingly common question — now that people are using CSS Grid Layout in production — seems to be “What are the best practices?” The short answer to this question is to use the layout method as defined in the specification. The particular parts of the spec you choose to use, and indeed how you combine Grid with other layout methods such as Flexbox, is down to what works for the patterns you are trying to build and how you and your team want to work.\n\nLooking deeper, I think perhaps this request for “best practices” perhaps indicates a lack of confidence in using a layout method that is very different from what came before. Perhaps a concern that we are using Grid for things it wasn’t designed for, or not using Grid when we should be. Maybe it comes down to worries about supporting older browsers, or in how Grid fits into our development workflow.\n\nIn this article, I’m going to try and cover some of the things that either could be described as best practices, and some things that you probably don’t need to worry about.\n\nTo help inform this article, I wanted to find out how other people were using Grid Layout in production, what were the challenges they faced, what did they really enjoy about it? Were there common questions, problems or methods being used. To find out, I put together a quick survey, asking questions about how people were using Grid Layout, and in particular, what they most liked and what they found challenging.\n\nIn the article that follows, I’ll be referencing and directly quoting some of those responses. I’ll also be linking to lots of other resources, where you can find out more about the techniques described. As it turned out, there was far more than one article worth of interesting things to unpack in the survey responses. I’ll address some of the other things that came up in a future post.\n\nIf there is any part of the Grid specification that you need to take care when using, it is when using anything that could cause content re-ordering:\n\nThis is not unique to Grid, however, the ability to rearrange content so easily in two dimensions makes it a bigger problem for Grid. However, if using any method that allows content re-ordering — be that Grid, Flexbox or even absolute positioning — you need to take care not to disconnect the visual experience from how the content is structured in the document. Screen readers (and people navigating around the document using a keyboard only) are going to be following the order of items in the source.\n\nThe places where you need to be particularly careful are when using to reverse the order in Flexbox; the property in Flexbox or Grid; any placement of Grid items using any method, if it moves items out of the logical order in the document; and using the dense packing mode of .\n\nFor more information on this issue, see the following resources:\n\nWhich Grid Layout Methods Should I Use?\n\nWhen you first take a look at Grid, it might seem overwhelming with so many different ways of creating a layout. Ultimately, however, it all comes down to things being positioned from one line of the grid to another. You have choices based on the of layout you are trying to achieve, as well as what works well for your team and the site you are building.\n\nThere is no right or wrong way. Below, I will pick up on some of the common themes of confusion. I’ve also already covered many other potential areas of confusion in a previous article “Grid Gotchas and Stumbling Blocks.”\n\nShould I Use An Implicit Or Explicit Grid?\n\nThe grid you define with and is known as the Explicit Grid. The Explicit Grid enables the naming of lines on the Grid and also gives you the ability to target the end line of the grid with . You’ll choose an Explicit Grid to do either of these things and in general when you have a layout all designed and know exactly where your grid lines should go and the size of the tracks.\n\nI use the Implicit Grid most often for row tracks. I want to define the columns but then rows will just be auto-sized and grow to contain the content. You can control the Implicit Grid to some extent with and , however, you have less control than if you are defining everything.\n\nYou need to decide whether you know exactly how much content you have and therefore the number of rows and columns — in which case you can create an Explicit Grid. If you do not know how much content you have, but simply want rows or columns created to hold whatever there is, you will use the Implicit Grid.\n\nNevertheless, it’s possible to combine the two. In the below CSS, I have defined three columns in the Explicit Grid and three rows, so the first three rows of content will be the following:\n• A track of at least 200px in height, but expanding to take content taller,\n• A track of at least 300px in height (but expands).\n\nAny further content will go into a row created in the Implicit Grid, and I am using the property to make those tracks at least 300px tall, expanding to .\n\nBy using Repeat Notation, autofill, and minmax you can create a pattern of as many tracks as will fit into a container, thus removing the need for Media Queries to some extent. This technique can be found in this video tutorial, and also demonstrated along with similar ideas in my recent article “Using Media Queries For Responsive Design In 2018.”\n\nChoose this technique when you are happy for content to drop below earlier content when there is less space, and are happy to allow a lot of flexibility in sizing. You have specifically asked for your columns to display with a minimum size, and to auto fill.\n\nThere were a few comments in the survey that made me wonder if people were choosing this method when they really wanted a grid with a fixed number of columns. If you are ending up with an unpredictable number of columns at certain breakpoints, you might be better to set the number of columns — and redefine it with media queries as needed — rather than using or .\n\nWhich Method Of Track Sizing Should I Use?\n\nI described track sizing in detail in my article “How Big Is That Box? Understanding Sizing In Grid Layout,” however, I often get questions as to which method of track sizing to use. Particularly, I get asked about the difference between percentage sizing and the unit.\n\nIf you simply use the unit as specced, then it differs from using a percentage because it distributes available space. If you place a larger item into a track then the way the until will work is to allow that track to take up more space and distribute what is left over.\n\nTo cause the unit to distribute all of the space in the grid container you need to give it a minimum size of using .\n\nSo you can choose to use in either of these scenarios: ones where you do want space distribution from a basis of auto (the default behavior), and those where you want equal distribution. I would typically use the unit as it then works out the sizing for you, and enables the use of fixed width tracks or gaps. The only time I use a percentage instead is when I am adding grid components to an existing layout that uses other layout methods too. If I want my grid components to line up with a float- or flex-based layout which is using percentages, using them in my grid layout means everything uses the same sizing method.\n\nYou will often find that you only need to place one or two items in your layout, and the rest fall into place based on content order. In fact, this is a really good test that you haven’t disconnected the source and visual display. If things pretty much drop into position based on auto-placement, then they are probably in a good order.\n\nOnce I have decided where everything goes, however, I do tend to assign a position to everything. This means that I don’t end up with strange things happening if someone adds something to the document and grid auto-places it somewhere unexpected, thus throwing out the layout. If everything is placed, Grid will put that item into the next available empty grid cell. That might not be exactly where you want it, but sat down at the end of your layout is probably better than popping into the middle and pushing other things around.\n\nWhich Positioning Method To Use?\n\nWhen working with Grid Layout, ultimately everything comes down to placing items from one line to another. Everything else is essentially a helper for that.\n\nDecide with your team if you want to name lines, use Grid Template Areas, or if you are going to use a combination of different types of layout. I find that I like to use Grid Template Areas for small components in particular. However, there is no right or wrong. Work out what is best for you.\n\nGrid In Combination With Other Layout Mechanisms\n\nRemember that Grid Layout isn’t the one true layout method to rule them all, it’s designed for a certain type of layout — namely two-dimensional layout. Other layout methods still exist and you should consider each pattern and what suits it best.\n\nI think this is actually quite hard for those of us used to hacking around with layout methods to make them do something they were not really designed for. It is a really good time to take a step back, look at the layout methods for the tasks they were designed for, and remember to use them for those tasks.\n\nIn particular, no matter how often I write about Grid versus Flexbox, I will be asked which one people should use. There are many patterns where either layout method makes perfect sense and it really is up to you. No-one is going to shout at you for selecting Flexbox over Grid, or Grid over Flexbox.\n\nIn my own work, I tend to use Flexbox for components where I want the natural size of items to strongly control their layout, essentially pushing the other items around. I also often use Flexbox because I want alignment, given that the Box Alignment properties are only available to use in Flexbox and Grid. I might have a Flex container with one child item, in order that I can align that child.\n\nA sign that perhaps Flexbox isn’t the layout method I should choose is when I start adding percentage widths to flex items and setting to 0. The reason to add percentage widths to flex items is often because I’m trying to line them up in two dimensions (lining things up in two dimensions is exactly what Grid is for). However, try both, and see which seems to suit the content or design pattern best. You are unlikely to be causing any problems by doing so.\n\nThis also comes up a lot, and there is absolutely no problem with making a Grid Item also a Grid Container, thus nesting one grid inside another. You can do the same with Flexbox, making a Flex Item and Flex Container. You can also make a Grid Item and Flex Container or a Flex Item a Grid Container — none of these things are a problem!\n\nWhat we can’t currently do is nest one grid inside another and have the nested grid use the grid tracks defined on the overall parent. This would be very useful and is what the subgrid proposals in Level 2 of the Grid Specification hope to solve. A nested grid currently becomes a new grid so you would need to be careful with sizing to ensure it aligns with any parent tracks.\n\nYou Can Have Many Grids On One Page\n\nA comment popped up a few times in the survey which surprised me, there seems to be an idea that a grid should be confined to the main layout, and that many grids on one page were perhaps not a good thing. You can have as many grids as you like! Use grid for big things and small things, if it makes sense laid out as a grid then use Grid.\n\nIn the survey, many people mentioned older browsers, however, there was a reasonably equal split between those who felt that supporting older browsers was hard and those who felt it was easy due to Feature Queries and the fact that Grid overrides other layout methods. I’ve written at length about the mechanics of creating these fallbacks in “Using CSS Grid: Supporting Browsers Without Grid.”\n\nIn general, modern browsers are far more interoperable than their earlier counterparts. We tend to see far fewer actual “browser bugs” and if you use HTML and CSS correctly, then you will generally find that what you see in one browser is the same as in another.\n\nWe do, of course, have situations in which one browser has not yet shipped support for a certain specification, or some parts of a specification. With Grid, we have been very fortunate in that browsers shipped Grid Layout in a very complete and interoperable way within a short time of each other. Therefore, our considerations for testing tend to be to need to test browsers with Grid and without Grid. You may also have chosen to use the prefixed version in IE10 and IE11, which would then require testing as a third type of browser.\n\nBrowsers which support modern Grid Layout (not the IE version) also support Feature Queries. This means that you can test for Grid support before using it.\n\nWhen using fallbacks for browsers without support for Grid Layout (or using the prefixed version for IE10 and 11), you will want to test how those browsers render Grid Layout. To do this, you need a way to view your site in an example browser.\n\nI would not take the approach of breaking your Feature Query by checking for support of something nonsensical, or misspelling the value . This approach will only work if your stylesheet is incredibly simple, and you have put absolutely everything to do with your Grid Layout inside the Feature Queries. This is a very fragile and time-consuming way to work, especially if you are extensively using Grid. In addition, an older browser will not just lack support for Grid Layout, there will be other CSS properties unsupported too. If you are looking for “best practice” then setting yourself up so you are in a good position to test your work is high up there!\n\nThere are a couple of straightforward ways to set yourself up with a proper method of testing your fallbacks. The easiest method — if you have a reasonably fast internet connection and don’t mind paying a subscription fee — is to use a service such as BrowserStack. This is a service that enables viewing of websites (even those in development on your computer) on a whole host of real browsers. BrowserStack does offer free accounts for open-source projects.\n\nTo test locally, my suggestion would be to use a Virtual Machine with your target browser installed. Microsoft offers free Virtual Machine downloads with versions of IE back to IE8, and also Edge. You can also install onto the VM an older version of a browser with no Grid support at all. For example by getting a copy of Firefox 51 or below. After installing your elderly Firefox, be sure to turn off automatic updates as explained here as otherwise it will quietly update itself!\n\nYou can then test your site in IE11 and in non-supporting Firefox on one VM (a far less fragile solution than misspelling values). Getting set up might take you an hour or so, but you’ll then be in a really good place to test your fallbacks.\n\nMany of the people responding to the survey mentioned the need to unlearn old habits and how learning Layout would be easier for people completely new to CSS. I tend to agree. When teaching people in person complete beginners have little problem using Grid while experienced developers try hard to return grid to a one-dimensional layout method. I’ve seen attempts at “grid systems” using CSS Grid which add back in the row wrappers needed for a float or flex-based grid.\n\nDon’t be afraid to try out new techniques. If you have the ability to test in a few browsers and remain mindful of potential issues of accessibility, you really can’t go too far wrong. And, if you find a great way to create a certain pattern, let everyone else know about it. We are all new to using Grid in production, so there is certainly plenty to discover and share.\n\nTo wrap up, here is a very short list of current best practices! If you have discovered things that do or don’t work well in your own situation, add them to the comments.\n• Be very aware of the possibility of content re-ordering. Check that you have not disconnected the visual display from the document order.\n• Test using real target browsers with a local or remote Virtual Machine.\n• Don’t forget that older layout methods are still valid and useful. Try different ways to achieve patterns. Don’t be hung up on having to use Grid.\n• Know that as an experienced front-end developer you are likely to have a whole set of preconceptions about how layout works. Try to look at these new methods anew rather than forcing them back into old patterns.\n• Keep trying things out. We’re all new to this. Test your work and share what you discover.\n• How To Build A Magazine Layout With CSS Grid Areas\n• Level Up Your CSS Skills With The :has() Selector"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Realizing_common_layouts_using_grids",
        "document": "To round off this set of CSS grid layout guides, we're going to walk through a few different layouts, which demonstrate some of the techniques you can use when designing with grid layout. We will look at an example using , a 12-column flexible grid system, and also a product listing using auto-placement. As you can see from this set of examples, there is often more than one way to get the results you want with CSS grid layout. Choose the method you find most helpful for the problems that you are solving and the designs that you need to implement.\n\nA responsive layout with 1 to 3 fluid columns using Many websites are a variation of this type of layout, with content, sidebars, a header and a footer. In a responsive design, you may want to display the layout as a single column, adding a sidebar at a certain breakpoint and then bring in a three-column layout for wider screens. We're going to create this layout using the named template areas that we learned about in the Grid template areas guide. The markup is a container with elements inside for a header, footer, main content, navigation, sidebar, and a block to place advertising. <div class=\"wrapper\"> <header class=\"main-head\">The header</header> <nav class=\"main-nav\"> <ul> <li><a href=\"\">Nav 1</a></li> <li><a href=\"\">Nav 2</a></li> <li><a href=\"\">Nav 3</a></li> </ul> </nav> <article class=\"content\"> <h1>Main article area</h1> <p> In this layout, we display the areas in source order for any screen less that 500 pixels wide. We go to a two column layout, and then to a three column layout by redefining the grid, and the placement of items on the grid. </p> </article> <aside class=\"side\">Sidebar</aside> <div class=\"ad\">Advertising</div> <footer class=\"main-footer\">The footer</footer> </div> As we are using to create the layout, we need to name the areas outside of any media queries. We name areas using the property. This does not create a layout. Rather, the items now have names we can use to do so. Staying outside of any media queries we're now going to set up the layout for the mobile width. Here we're keeping everything in source order to avoid any disconnect between the source and display as described in the Grid layout and accessibility guide. We've not explicitly defined any column or row tracks; this layout dictates a single column and creates rows as needed for each item in the implicit grid. With our mobile layout in place, we can now proceed to add a query to adapt this layout for bigger screens with enough real estate to display two columns. You can see the layout taking shape in the value of . The spans over two column tracks, as does the . In the third row track, we place the alongside the . We place the content in the fourth row track so it appears under the sidebar. The is next to it under the content. We use CSS flexible box layout on the navigation to evenly space the navigation items in a row. We can now add a final breakpoint for wider screens able to display a three-column layout. The three-column layout has two unit side columns and a middle column that has as the track size. This means the available space in the container is split into six parts and assigned in proportion to our three tracks – one part each to the side columns and four parts to the center. In this layout, we're displaying the in the left column, alongside the . In the right column we have the and underneath it the advertisements ( ). The now spans across the entire bottom of the layout. Again, we use flexbox to display the navigation, but this time we display it as a column instead of a row. This basic example demonstrates how to rearrange a grid layout across different breakpoints. In particular, we're changing the location of the block as appropriate in our different column setups. This named areas method can be very helpful, especially at the prototyping stage. You may find it easier to use names rather than numbers when playing with the location of elements on the grid.\n\nCSS frameworks and grid systems commonly use 12- or 16-column flexible grids. We can create this type of system using CSS grid layout. As an example, let's create a 12-column flexible grid with 12 -unit column tracks, each with a start line named . This means that we will have twelve grid lines named . To demonstrate how this grid system works, we have four child elements inside a wrapper. <div class=\"wrapper\"> <div class=\"item1\">Start column line 1, span 3 column tracks.</div> <div class=\"item2\"> Start column line 6, span 4 column tracks. 2 row tracks. </div> <div class=\"item3\">Start row 2 column line 2, span 2 column tracks.</div> <div class=\"item4\"> Start at column line 3, span to the end of the grid (-1). </div> </div> We can then place these on the grid using the named lines, and also the keyword. As described in the using named grid lines guide, we are using the named lines to place our items. As we have 12 lines all with the same name, we use the name and the index of the line. If you prefer, you can use the line index itself and avoid using named lines. Rather than setting the end line number, we define how many tracks this element should span using the keyword. When working with a multiple-column layout system, this method may be more intuitive for those who think of blocks in terms of the number of tracks of the grid they span, then adjusting for different breakpoints. To see how the blocks align themselves to the tracks, use the grid inspector in your browser developer tools; it likely clearly demonstrates how the items are placed. We don't need to add any markup to create a row. CSS framework grid systems often did this to stop elements popping up into the row above for browsers that don't support CSS grid layout. However, this point is now moot — all modern browsers have supported CSS grid layout for a long time. CSS grids allow us to place items into rows, with no danger of them rising up into the row above if it is left empty. Due to this strict column and row placement, we can also easily leave white space in our layout. We also don't need special classes to indent items into the grid. All we need to do is specify the start and end line for the item.\n\nTo see how this layout method works in practice, we can create the same layout we created with , this time using the 12-column grid system. Let's start with the same markup as used for the grid template areas example. <div class=\"wrapper\"> <header class=\"main-head\">The header</header> <nav class=\"main-nav\"> <ul> <li><a href=\"\">Nav 1</a></li> <li><a href=\"\">Nav 2</a></li> <li><a href=\"\">Nav 3</a></li> </ul> </nav> <article class=\"content\"> <h1>Main article area</h1> <p> In this layout, we display the areas in source order for any screen less that 500 pixels wide. We go to a two column layout, and then to a three column layout by redefining the grid, and the placement of items on the grid. </p> </article> <aside class=\"side\">Sidebar</aside> <div class=\"ad\">Advertising</div> <footer class=\"main-footer\">The footer</footer> </div> We set up our grid as we did for the 12-column layout example above. We are again going to make this a responsive layout, this time using named lines. Every breakpoint will use a 12-column grid. However, the number of tracks items will span will change depending on the size of the screen. We start mobile first. For the narrowest screens, we want the items to remain in source order and all span across the entire grid. At the next breakpoint, we want a two-column layout. Our header and navigation still span the full grid, so we do not need to specify any positioning for them. The sidebar is starting on the first column line named , spanning 3 lines. It goes after row line 3, as the header and navigation are in the first two row tracks. The panel is below the sidebar, starting at grid row line 4. Then we have the content and footer starting at col-start 4 and spanning nine tracks, taking both to the end of the grid. Finally, for screens larger than our largest breakpoint, we define a three-column version of this layout. The header continues to span right across the grid, but now the navigation moves down to become the first sidebar, with the content and then the sidebar next to it. The footer now also spans across the full layout. Once again, check the grid inspector in your browser developer tools to see how the layout has taken shape. Something to note as we created this layout is that we didn't need to explicitly position every element on the grid at each breakpoint. We inherited the placement set up for earlier breakpoints – an advantage of working \"mobile first\". We also took advantage of grid auto-placement. By keeping elements in a logical order, auto-placement does quite a lot of work for us in placing items onto the grid.\n\nIn this last example in this guide, we create a layout that entirely relies on auto-placement. Many layouts are essentially sets of \"cards\" – product listings, image galleries, and so on. A grid enables creating these listings in a way that is responsive without needing to add media queries. In this example, we combine CSS grid and flexbox layouts to make a basic product listing layout. The markup for the listing is an unordered list of items. Each item contains a heading, some text of varying height, and a call to action link. <ul class=\"listing\"> <li> <h2>Item One</h2> <div class=\"body\"> <p>The content of this listing item goes here.</p> </div> <div class=\"cta\"> <a href=\"\">Call to action!</a> </div> </li> <li> <h2>Item Two</h2> <div class=\"body\"> <p>The content of this listing item goes here.</p> </div> <div class=\"cta\"> <a href=\"\">Call to action!</a> </div> </li> <li class=\"wide\"> <h2>Item Three</h2> <div class=\"body\"> <p>The content of this listing item goes here.</p> <p>This one has more text than the other items.</p> <p>Quite a lot more</p> <p>Perhaps we could do something different with it?</p> </div> <div class=\"cta\"> <a href=\"\">Call to action!</a> </div> </li> <li> <h2>Item Four</h2> <div class=\"body\"> <p>The content of this listing item goes here.</p> </div> <div class=\"cta\"> <a href=\"\">Call to action!</a> </div> </li> <li> <h2>Item Five</h2> <div class=\"body\"> <p>The content of this listing item goes here.</p> </div> <div class=\"cta\"> <a href=\"\">Call to action!</a> </div> </li> </ul> We create a grid with a flexible number of flexible columns. We want them to be at least 200 pixels wide and share any available remaining space equally – so we always get equal-width column tracks. We achieve this with the function in our notation for track sizing. When we add this CSS, the items will be laid out as a grid. If we make the window smaller or wider, the number of column tracks changes – without media queries adding breakpoints and without needing to redefine the grid. We can tidy up the internals of the boxes using a touch of flexbox. We set the list item to and the to . We can then use an auto margin on the to push this bar down to the bottom of the box. This is one of the key reasons to use flexbox rather than CSS grid layout. If you're aligning or distributing content in a single dimension, that's a flexbox use case.\n\nThis is all looking fairly complete now. However, we sometimes have cards that contain far more content than the others. It might be nice to make those span two tracks, then they won't be so tall. We add a class on the larger item, and add a rule giving it a with a value of . When this item is encountered, it will be assigned to two tracks. This means that, at some breakpoints, we'll get a gap in the grid – where there isn't enough space to lay out a two-track item. We can make the grid backfill those gaps by setting on the grid container. Take care when doing this as it can cause items to be taken out of their logical source order. You should only do this if your items do not have a set order. Additionally, be aware of the accessibility and re-ordering issues resulting from the tab order following the source and not your reordered display. <ul class=\"listing\"> <li> <h2>Item One</h2> <div class=\"body\"><p>The content of this listing item goes here.</p></div> <div class=\"cta\"><a href=\"\">Call to action!</a></div> </li> <li> <h2>Item Two</h2> <div class=\"body\"><p>The content of this listing item goes here.</p></div> <div class=\"cta\"><a href=\"\">Call to action!</a></div> </li> <li class=\"wide\"> <h2>Item Three</h2> <div class=\"body\"> <p>The content of this listing item goes here.</p> <p>This one has more text than the other items.</p> <p>Quite a lot more</p> <p>Perhaps we could do something different with it?</p> </div> <div class=\"cta\"><a href=\"\">Call to action!</a></div> </li> <li> <h2>Item Four</h2> <div class=\"body\"><p>The content of this listing item goes here.</p></div> <div class=\"cta\"><a href=\"\">Call to action!</a></div> </li> <li> <h2>Item Five</h2> <div class=\"body\"><p>The content of this listing item goes here.</p></div> <div class=\"cta\"><a href=\"\">Call to action!</a></div> </li> </ul> Using auto-placement with some rules applied to certain items is very useful and can help with content you can't control, such as CMS output, where you have repeated items and can use structural pseudo-classes to target them."
    },
    {
        "link": "https://turing.com/kb/responsive-layouts-using-css-grid",
        "document": "What is the importance of responsive web design in today's web development landscape? Responsive web design is crucial because of the diversity of devices and screen sizes. Ensuring that a website looks and functions well across this spectrum is essential for providing a positive user experience. How can fractional units (fr), auto-sizing (auto), and percentage units be used in CSS Grid for responsive layouts? Fractional units (fr) distribute available space, auto-sizing (auto) adjusts track sizes based on content, and percentage units (%) enable proportional sizing. These are essential for creating flexible and responsive grids.\n\nWhat is CSS Grid, and how does it simplify the creation of responsive layouts? CSS Grid is a two-dimensional layout system that allows the creation of rows and columns. It simplifies responsive layout creation by providing a powerful and flexible way to design intricate layouts with ease. How do reordering and stacking of grid items contribute to responsive design? Reordering grid items using the order property allows for changes in the visual hierarchy, ensuring a logical arrangement on different screen sizes. This technique is crucial for maintaining a responsive and user-friendly layout.\n\nWhat are some key CSS Grid terminologies that developers should be familiar with? Key CSS Grid terminologies include Grid Container, Grid Item, Grid Line, Grid Cell, Grid Track, and Grid Area. Understanding these terms is essential for working effectively with CSS Grid. What role do media queries play in creating responsive designs with CSS Grid? Media queries are fundamental for adapting grid layouts to different devices and screen sizes. They allow developers to adjust grid properties based on specific conditions, ensuring optimal display on various screens."
    },
    {
        "link": "https://w3schools.com/css/css_rwd_grid.asp",
        "document": "Many web pages are based on a grid-view, which means that the page is divided into rows and columns.\n\nUsing a grid-view is very helpful when designing web pages. It makes it easier to place elements on the page.\n\nA responsive grid-view often has 6 or 12 columns, and will shrink and expand as you resize the browser window.\n\nFirst ensure that all HTML elements have the property set to . This makes sure that the padding and border are included in the total width and height of the elements.\n\nAdd the following at the begnning of your CSS:\n\nRead more about the property in our CSS Box Sizing chapter.\n\nWe create a grid container with five grid items (item1 = Header, item2 = Menu, item3 = Main content, item4 = right, item5 = Footer):\n\nHere is the complete HTML: <div class=\"grid-container\">\n\n\n\n <div class=\"item1\">\n\n <h1>Chania</h1>\n\n </div>\n\n \n\n <div class=\"item2\">\n\n <ul>\n\n <li>The Flight</li>\n\n <li>The City</li>\n\n <li>The Island</li>\n\n <li>The Food</li>\n\n </ul>\n\n </div>\n\n\n\n <div class=\"item3\">\n\n <h1>The City</h1>\n\n <p>Chania is the capital of the Chania region on the island of Crete.</p>\n\n <p>The city can be divided in two parts, the old town and the modern city. The old town is situated next to the old harbour and is the matrix around which the whole urban area was developed.</p>\n\n <p>Chania lies along the north west coast of the island Crete.</p>\n\n</div> \n\n\n\n <div class=\"item4\">\n\n <h2>Facts:</h2>\n\n <ul>\n\n <li>Chania is a city on the island of Crete</li>\n\n <li>Crete is a Greek island in the Mediterranean Sea</li>\n\n </ul>\n\n </div>\n\n\n\n <div class=\"item5\">\n\n <p>Resize the browser window to see how the content respond to the resizing.</p>\n\n </div>\n\n \n\n</div>\n\nWe also want to add some styles and colors to make it look better:"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-create-a-responsive-css-grid-layout",
        "document": "Here are different ways to create a responsive grid layout with CSS.\n\nThis method can be used CSS Grid for a responsive layout. The grid-template-columns property adjusts columns based on space, keeping a minimum width of 200 pixels. Gaps between items are set with grid-gap. This approach ensures a flexible design that adapts to different screen sizes, ideal for responsive web development.\n\nThis approach provides flexibility in creating responsive grid layouts, allowing developers to choose between filling the space with fixed-width columns (auto-fill) or adjusting column widths to fit the container (auto-fit). The .auto-fill and .auto-fit classes are used to control the behavior of the grid columns. The .auto-fill class creates as many columns as possible with a minimum width of 200 pixels, while .auto-fit ensures that the columns fit snugly within the container, expanding or contracting as needed.\n\nThis method uses media queries to create a responsive webpage layout. The class defines the grid container with areas for the header, sidebar, content, and footer. Layout changes based on screen width, ensuring a flexible design that adapts to different sizes while maintaining structure and styling for each area."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Media_queries",
        "document": "The CSS Media Query gives you a way to apply CSS only when the browser and device environment matches a rule that you specify, for example \"viewport is wider than 480 pixels\". Media queries are a key part of responsive web design, as they allow you to create different layouts depending on the size of the viewport, but they can also be used to detect other things about the environment your site is running on, for example whether the user is using a touchscreen rather than a mouse. In this lesson, you will first learn about the syntax used in media queries, and then move on to use them in examples showing how a basic design might be made responsive. Structuring content with HTML, CSS Styling basics, Fundamental text and font styling, familiarity with CSS layout fundamental concepts.\n• Using and media queries to create responsive layouts.\n\nAfter specifying the type, you can then target a media feature with a rule. The following examples show how to use different media queries. To change the of your screen, change the size of your browser or rotate your handheld device. Alternatively, you can use your browser developer tools' responsive sizing features to simulate different device widths. The feature we tend to detect most often in order to create responsive designs (and that has widespread browser support) is viewport width, and we can apply CSS if the viewport is above or below a certain width — or an exact width — using the , , and media features. These features are used to create layouts that respond to different screen sizes. For example, to set the body text color to red if the viewport is exactly 600 pixels, you would use the following media query. <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> The (and ) media features can be used as ranges, and therefore be prefixed with or to indicate that the given value is a minimum, or a maximum. For example, to make the color blue if the viewport is 600 pixels or narrower, use : <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> In practice, using minimum or maximum values is much more useful for responsive design so you will rarely see or used alone. There are many other media features that you can test for, although some of the newer features introduced in Levels 4 and 5 of the media queries specification have limited browser support. Each feature is documented on MDN along with browser support information, and you can find a complete list at Using Media Queries: Syntax. One well-supported media feature is , which allows us to test for portrait or landscape mode. To change the body text color if the device is in landscape orientation, use the following media query. <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> A standard desktop view has a landscape orientation, and a design that works well in this orientation may not work as well when viewed on a phone or tablet in portrait mode. Testing for orientation can help you to create a layout which is optimized for devices in portrait mode. As part of the Level 4 specification, the media feature was introduced. This feature means you can test if the user has the ability to hover over an element, which essentially means they are using some kind of pointing device; touchscreen and keyboard navigation does not hover. <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> If we know the user cannot hover, we could display some interactive features by default. For users who can hover, we might choose to make them available when a link is hovered over. Also in Level 4 is the media feature. This takes three possible values, , and . A pointer is something like a mouse or trackpad. It enables the user to precisely target a small area. A pointer is your finger on a touchscreen. The value means the user has no pointing device; perhaps they are navigating with the keyboard only or with voice commands. Using can help you to design better interfaces that respond to the type of interaction a user is having with a screen. For example, you could create larger hit areas if you know that the user is interacting with the device as a touchscreen.\n\nIn the early days of responsive design, many designers would attempt to target very specific screen sizes. Lists of the sizes of the screens of popular phones and tablets were published in order that designs could be created to neatly match those viewports. There are now far too many devices, with a huge variety of sizes, to make that feasible. This means that instead of targeting specific sizes for all designs, a better approach is to change the design at the size where the content starts to break in some way. Perhaps the line lengths become far too long, or a boxed out sidebar gets squashed and hard to read. That's the point at which you want to use a media query to change the design to a better one for the space you have available. This approach means that it doesn't matter what the exact dimensions are of the device being used, every range is catered for. The points at which a media query is introduced are known as breakpoints. The Responsive Design Mode in Firefox DevTools is very useful for working out where these breakpoints should go. You can easily make the viewport smaller and larger to see where the content would be improved by adding a media query and tweaking the design.\n\nOur starting point is an HTML document with some CSS applied to add background colors to the various parts of the layout. You can copy the code from the blocks below into a text editor, save it as an HTML file on your computer, and open it in your browser or click \"Play\" to render and edit the code in the MDN Playground: <head> <meta charset=\"utf-8\" /> <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" /> <title>Media Queries: a simple mobile first design, step 1</title> <style> /* Add styles here */ </style> </head> <div class=\"wrapper\"> <header> <nav> <ul> <li><a href=\"\">About</a></li> <li><a href=\"\">Contact</a></li> <li><a href=\"\">Meet the team</a></li> <li><a href=\"\">Blog</a></li> </ul> </nav> </header> <main> <article> <div class=\"content\"> <h1>Veggies!</h1> <p> Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic. </p> <p> Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini. </p> <p> Turnip greens yarrow ricebean rutabaga endive cauliflower sea lettuce kohlrabi amaranth water spinach avocado daikon napa cabbage asparagus winter purslane kale. Celery potato scallion desert raisin horseradish spinach carrot soko. Lotus root water spinach fennel kombu maize bamboo shoot green bean swiss chard seakale pumpkin onion chickpea gram corn pea. Brussels sprout coriander water chestnut gourd swiss chard wakame kohlrabi beetroot carrot watercress. Corn amaranth salsify bunya nuts nori azuki bean chickweed potato bell pepper artichoke. </p> <p> Nori grape silver beet broccoli kombu beet greens fava bean potato quandong celery. Bunya nuts black-eyed pea prairie turnip leek lentil turnip greens parsnip. Sea lettuce lettuce water chestnut eggplant winter purslane fennel azuki bean earthnut pea sierra leone bologi leek soko chicory celtuce parsley jícama salsify. </p> </div> <aside class=\"related\"> <p> All these veggies are brought to you by the <a href=\"https://veggieipsum.com/\">Veggie Ipsum generator</a>. </p> </aside> </article> <aside class=\"sidebar\"> <h2>External vegetable-based links</h2> <ul> <li> <a href=\"https://www.thekitchn.com/how-to-cook-broccoli-5-ways-167323\"> How to cook broccoli </a> </li> <li> <a href=\"https://www.bbcgoodfood.com/glossary/swiss-chard\"> Swiss Chard </a> </li> <li> <a href=\"https://www.bbcgoodfood.com/recipes/collection/christmas-parsnip\"> Christmas Parsnip Recipes </a> </li> </ul> </aside> </main> <footer> <p>© 2024</p> </footer> </div> The source of the document is ordered in a way that makes the content readable. This is an important first step and one which ensures that if the content were to be read out by a screen reader, it would be understandable. Here are some good initial styles we can start with: * { box-sizing: border-box; } body { width: 90%; margin: 2em auto; font: 1em/1.3 Arial, Helvetica, sans-serif; } a:link, a:visited { color: #333; } nav ul, aside ul { list-style: none; padding: 0; } nav a:link, nav a:visited { background-color: rgb(207 232 220 / 20%); border: 2px solid rgb(79 185 227); text-decoration: none; display: block; padding: 10px; color: #333; font-weight: bold; } nav a:hover { background-color: rgb(207 232 220 / 70%); } .related { background-color: rgb(79 185 227 / 30%); border: 1px solid rgb(79 185 227); padding: 10px; } .sidebar { background-color: rgb(207 232 220 / 50%); padding: 10px; } article { margin-bottom: 1em; } If we view the layout in Responsive Design Mode in DevTools we can see that it works pretty well as a straightforward mobile view of the site. From this point, start to drag the Responsive Design Mode view wider until you can see that the line lengths are becoming quite long, and we have space for the navigation to display in a horizontal line. This is where we'll add our first media query. We'll use ems, as this will mean that if the user has increased their text size, the breakpoint will happen at a similar line-length but wider viewport, than someone with a smaller text size. Add the following to your CSS: This CSS gives us a two-column layout inside the article, of the article content and related information in the aside element. We have also used flexbox to put the navigation into a row. Let's continue to expand the width until we feel there is enough room for the sidebar to also form a new column. Inside a media query we'll make the main element into a two column grid. We then need to remove the on the article in order that the two sidebars align with each other, and we'll add a to the top of the footer. Typically these small tweaks are the kind of thing you will do to make the design look good at each breakpoint. Add the following CSS to your styles: If you look at the result at different widths you can see how the design responds and works as a single column, two columns, or three columns, depending on the available width. This is a basic example of a mobile first responsive design.\n\nIf you look at the HTML source in the above example, you'll see the following element included in the head of the document: This is the viewport meta tag — it exists as a way to control how mobile browsers render content. This is needed because by default, most mobile browsers lie about their viewport width. Non-responsive sites commonly look really bad when rendered in a narrow viewport, so mobile browsers usually render the site with a viewport width wider than the real device width by default (usually 980 pixels), and then shrink the rendered result so that it fits in the display. This is all well and good, but it means that responsive sites are not going to work as expected. If the viewport width is reported as 980 pixels, then mobile layouts (for example created using a media query of ) are not going to render as expected. To remedy this, including a viewport meta tag like the one above on your page tells the browser \"don't render the content with a 980 pixel viewport — render it using the real device width instead, and set a default initial scale level for better consistency.\" The media queries will then kick in as expected. There are a number of other options you can put inside the attribute of the viewport meta tag — see Using the viewport meta tag to control layout on mobile browsers for more details.\n\nDo you really need a media query? Flexbox, Grid, and multi-column layout all give you ways to create flexible and even responsive components without the need for a media query. It's always worth considering whether these layout methods can achieve what you want without adding media queries. For example, you might want a set of cards that are at least 200 pixels wide, with as many of these 200 pixels as will fit into the main article. This can be achieved with grid layout, using no media queries at all. This could be achieved using the following: Make the screen wider and narrower to see the number of column tracks change. The nice thing about this method is that grid is not looking at the viewport width, but the width it has available for this component. It might seem strange to wrap up a section about media queries with a suggestion that you might not need one at all! However, in practice you will find that good use of modern layout methods, enhanced with media queries, will give the best results."
    },
    {
        "link": "https://w3schools.com/css/css_rwd_mediaqueries.asp",
        "document": "It uses the rule to include a block of CSS properties only if a certain condition is true.\n\nEarlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.\n\nMedia queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.\n\nYou can add as many breakpoints as you like.\n\nWe will also insert a breakpoint between tablets and mobile phones.\n\nHere we use media queries to add breakpoints when screen is max 600px, when screen is min 600px, and when screen is min 768px : @media only screen and (max-width: 600px) {\n\n .item1 {grid-area: 1 / span 6;}\n\n .item2 {grid-area: 2 / span 6;}\n\n .item3 {grid-area: 3 / span 6;}\n\n .item4 {grid-area: 4 / span 6;}\n\n .item5 {grid-area: 5 / span 6;}\n\n}\n\n\n\n@media only screen and (min-width: 600px) {\n\n .item1 {grid-area: 1 / span 6;}\n\n .item2 {grid-area: 2 / span 1;}\n\n .item3 {grid-area: 2 / span 4;}\n\n .item4 {grid-area: 3 / span 6;}\n\n .item5 {grid-area: 4 / span 6;}\n\n}\n\n\n\n@media only screen and (min-width: 768px) {\n\n .item1 {grid-area: 1 / span 6;}\n\n .item2 {grid-area: 2 / span 1;}\n\n .item3 {grid-area: 2 / span 4;}\n\n .item4 {grid-area: 2 / span 1;}\n\n .item5 {grid-area: 3 / span 6;}\n\n}\n\n Try it Yourself »\n\nThere are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:\n\n/* Extra small devices (phones, 600px and down) */\n\n@media only screen and (max-width: 600px) {...} \n\n\n\n/* Small devices (portrait tablets and large phones, 600px and up) */\n\n@media only screen and (min-width: 600px) {...} \n\n\n\n/* Medium devices (landscape tablets, 768px and up) */\n\n @media only screen and (min-width: 768px) {...} \n\n\n\n/* Large devices (laptops/desktops, 992px and up) */\n\n @media only screen and (min-width: 992px) {...} \n\n\n\n/* Extra large devices (large laptops and desktops, 1200px and up) */\n\n@media only screen and (min-width: 1200px) {...} Try it Yourself »\n\nMedia queries can also be used to change layout of a page depending on the orientation of the browser.\n\nYou can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called \"Landscape\" orientation:\n\nAnother common use of media queries, is to hide elements on different screen sizes:\n\nI will be hidden on small screens.\n\nYou can also use media queries to change the font size of an element on different screen sizes:\n\n/* If the screen size is 601px or more, set the font-size of <div> to 80px */\n\n@media only screen and (min-width: 601px) {\n\n div.example {\n\n font-size: 80px;\n\n }\n\n}\n\n\n\n/* If the screen size is 600px or less, set the font-size of <div> to 30px */\n\n@media only screen and (max-width: 600px) {\n\n div.example {\n\n font-size: 30px;\n\n }\n\n}\n\n Try it Yourself »\n\nFor a full overview of all the media types and features/expressions, please look at the @media rule in our CSS reference."
    },
    {
        "link": "https://geeksforgeeks.org/responsive-web-design-using-media-queries",
        "document": "Responsive Design is a web design approach that aims to adapt web page layout to any screen from maximum screen sizes like TVs, monitors, etc. to minimum screen sizes like mobiles, etc. with good usability. Media Queries is a CSS3 Feature that makes a website page adapt its layout to different screen sizes and media types. Media queries are CSS rules that apply specific styles based on the characteristics of the user's device or viewport. These characteristics can include screen width, height, orientation, resolution, and more.\n\nThe @media rule is used to target media queries and then the media type which is optional depending on the device type and then the condition also called a breakpoint, if the condition is true then the CSS rules are applied to the web page from the parenthesis.\n\nMedia Types describe the category of device type. Media type is optional and by default, it is considered as `all` type. Media Types are categorized into four types.\n• None all - for all device types.\n• None speech — for screen readers that “read” the page out loud\n\nWhy to use Media Queries?\n\nMedia Queries helps the developers to create a consistent and optimized user experience across all devices. Without responsive design, websites may appear unstable and broken on certain screens which results in poor user experience. With a better user experience, it will be easy to use the product.\n• Improves User Experience(UX): Users can access content seamlessly and efficiently on any device. Whether they are on a desktop computer, tablet, or smartphone, the website adapts to provide an optimal and user-friendly experience. This leads to higher user satisfaction and engagement.\n• Good SEO: When your website is responsive and provides a consistent experience across devices, it's more likely to rank higher in search engine results. Responsive designs rank higher and increases traffic.\n• Cost-Efficiency: Developing a single website for all platforms, reduces development and maintenance costs. Maintenance and updates are also simplified when you have one codebase to manage.\n• Increases Engagements : Users are more likely to stay and interact with a well-designed responsive site. A well-designed responsive site enhances user engagement. When visitors have a positive experience and can easily navigate and interact with your content on their preferred devices, they are more likely to stay on your site.\n• Media Queries: Media queries are the foundation of responsive design. They allow you to specify conditions based on characteristics like screen width, height, orientation, and resolution. Declared in CSS using @media followed by conditions. you can apply specific styles to different devices or screen sizes.\n• Breakpoints: Specific screen widths where design changes occur. Breakpoints are specific screen widths (or occasionally heights) at which you make design adjustments. These adjustments can include changes in layout, typography, or the visibility of certain elements.\n• Flexible Layouts: Use percentage-based or fluid grids and Avoid fixed width and height instead use min-width, max-width, min-height and max-height. CSS Flexbox and CSS Grid are powerful tools for creating flexible layouts.\n• Images : Scaling images using CSS or using responsive image techniques. Use CSS to set max-width: 100% for images, preventing them from exceeding their container width.\n• Font Sizes: Adjusting font sizes and better font hierarchy for readability on different screens. Font sizes play a vital role in readability and user experience. Consider using relative units like em or rem instead of fixed pixel values for font sizes.\n• Define Breakpoints: Identify key screen widths for design changes mostly mobile (320px — 480px), tablets (481px — 768px), laptops (769px — 1024px), and desktops(1025px — 1200px) these breakpoints are industry standard. But you can customize them based on your project's requirements.\n• Write Media Queries: Use CSS @media to apply styles at breakpoints. They are CSS rules that apply specific styles when certain conditions are met. These conditions are typically based on screen width using the min-width and max-width properties\n• Adjust Layouts : To create responsive layouts, use CSS features like Flexbox and CSS Grid. These layout techniques provide a flexible and fluid structure that adapts to different screen sizes.\n• Test on Various Devices: Ensure the design works well across different screens using dev tools. Pay attention to user interactions, load times, and accessibility to ensure a seamless experience across all devices.\n• Refine as Needed: Continuously optimize and adjust for a seamless user experience. Responsive design is an ongoing process. After testing, gather feedback, and make necessary adjustments to improve the user experience further.\n\nExample of the Main section of a Landing Page using HTML and CSS:\n\nOutput: Click here to see the live output\n• Overloading with Media Queries: Choose breakpoints judiciously, focusing on the most critical ones for your design. Use a mobile-first approach (starting with mobile styles and adding complexity as needed) or a Desktop-first approach(starting with desktop styles and adding complexity as needed) to minimize the number of breakpoints required.\n• Neglecting Mobile-First: Begin the design process with mobile devices in mind. Create a solid foundation for the mobile layout and progressively enhance it for larger screens using media queries. This approach ensures that your design remains functional and user-friendly on all devices.\n• Ignoring Performance: Optimize your assets for the web. Compress images, use responsive image techniques, and minify CSS. Additionally, consider using lazy loading images and implementing performance best practices to ensure fast page loads.\n• Testing: Test on various devices, browsers, and orientations as necessary. Use developer tools and online emulators to simulate different conditions\n• Neglecting Content Priority: Identify the essential content and prioritize it for all screen sizes. Use media queries to reorganize content if necessary, but never sacrifice the clarity and accessibility of your core information.\n\nCSS media queries are indispensable tool for creating responsive web designs. They allow websites to adapt gracefully to different devices, providing a consistent and user-friendly experience. By mastering media queries and following best practices, web developers can ensure their websites are ready for the diverse landscape of the modern digital world."
    },
    {
        "link": "https://geeksforgeeks.org/basics-of-responsive-web-design-media-queries",
        "document": "Media queries in CSS are essential for creating responsive designs that adapt to different device sizes and orientations. They allow developers to apply styles based on various conditions, ensuring optimal display across different devices.\n\nMedia queries enable conditional styling based on factors such as viewport dimensions, device characteristics (like screen width), and even user preferences. This technique ensures that styles are applied only when specific conditions are met.\n\nThe @media rule is used to define a media query. Inside the parentheses, you specify conditions such as minimum or maximum width (min-width, max-width), orientation (landscape, portrait), resolution (min-resolution, max-resolution), etc.\n\nIn this example, the background color of the body element changes to black only when the viewport width is 500 pixels or less.\n\nThis example applies styles only when the viewport width is between 300 pixels and 500 pixels.\n\nExample: In this example, we will make a responsive web page using a media query.\n\nMedia queries are very useful when you want a specific code to only execute if the conditions regarding the window’s size are met. For example, if you would like the background color of the page to be black on larger devices but blue on smaller devices, then media queries are the best way to handle such cases."
    },
    {
        "link": "https://medium.com/@mallikarjunpasupuleti/designing-responsive-web-pages-with-css-media-queries-a-complete-guide-for-modern-web-development-8a971f6d5cb9",
        "document": "Responsive web design is no longer optional — it’s essential. With the variety of devices used to access the web, from smartphones to tablets to desktop computers, creating layouts that adapt seamlessly to different screen sizes is crucial. CSS media queries are the backbone of responsive design, allowing developers to apply specific styles based on the device’s characteristics, such as its width, height, orientation, or resolution.\n\nIn this comprehensive guide, we’ll explore how CSS media queries work, best practices for designing responsive web pages, and advanced techniques to ensure your websites look and function perfectly on any device.\n\nCSS media queries are rules that apply styles based on the conditions of the device or viewport displaying the webpage. They make it possible to tailor your web design to different screen sizes and capabilities, ensuring that the layout, font size, images, and other elements adjust accordingly.\n\nThe in media queries could refer to the width, height, aspect ratio, or orientation of the device. Media…"
    }
]