[
    {
        "link": "https://blog.hubspot.com/website/css-loading-animation",
        "document": "What Are CSS Hover Animations & How Can You Use Them?"
    },
    {
        "link": "https://w3schools.com/howto/howto_css_loader.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/14598761/simple-loading-animation-in-html5-canvas",
        "document": "Here is an animation that uses only javascript and canvas - animation It was created using the application canvimation the help files for this are here .\n\nHowever as it does not use images and it is not simple it may not be what you are looking for.\n\nThe only other way I could think would be to use context.drawImage along with setTimeout to load a series of images on after another\n\nOR really simply use a gif image in canvas as in the code below"
    },
    {
        "link": "https://css-loaders.com",
        "document": "Don't know which loader to use? \n\nHere is one for you 👇\n\nClick the loader to copy the CSS"
    },
    {
        "link": "https://davidhampgonsalves.com/loading-indicator-css-animations",
        "document": "Recently I needed a minimum viable animated web loading indicator. I didn’t want to add another image to my page for load time reasons. Nor did I want to write any javascript for size/time reasons. This left me with CSS animations. CSS based animations at this point only have limited browser support but for my project which already required HTML5 Geo Location it seemed like a good fit. This post is to show how easily this animation can be added as well as show how nicely it downgrades.\n\nFor my loading indicator I used a container div and also a div to cover half of the sun which isn’t required. All you need is a DOM element that you want to spin. The Important Bits The spinning sun animation is achieved(using CSS) by first creating an animation that rotates the image from 0 to 360 degrees. This is shown in the code bellow for both Chrome(Webkit prefix) and Firefox(Moz prefix):\n\nNext we need to start the animation. This involves setting its peroid(time per animation), iteration count and the animation name we want to start. In our case we want a continous animation so we set the iteration count to infinate andset our peroid to 5 seconds since that looks nice to me. We also define which animation-timing function to start. This is all shown bellow for both Chrome(Webkit prefix) and Firefox(Moz prefix):\n\nThere are many cases where the lack of browser support will prevent you from using this approch but for me this is a great solution. It creates very little extra load and doesn’t require new image reasources(if you can reuse an image already on the page). It also downgrades well and maintains its function. For a live example you can check out: hour weather."
    },
    {
        "link": "https://stackoverflow.com/questions/60138090/how-to-start-animation-of-pseudo-elements-start-little-bit-late-than-parent-elem",
        "document": "I'm creating a preloader in CSS. It is basically 3 dots growing it's size rhythmically. The preloader looks like the image below.\n\nTo create this preloader, I created a box having so that it becomes round. Then used pseudo elements, and to create another identical looking two circles. The middle circle is the original one. Other two circles are psedo elements, so they become child elements of the original. There's a animation which scales up the three balls. Pseudo element inherit the animation from parent. I want to let pseudo elements start the animation little bit late than the parent.\n\nNote that I have used an animation called resize in the preloader class.\n\nThe resize animation use transform property to scale up and down the preloader.\n\nNow when this class is tested on the browser, all three balls scale in the same rate. But I need to make the second and third balls small relative to the first ball when the animation starts and when the animation goes on, all the balls should scale rhythmically as shown below.\n\nI know everything scales up in the same rate without creating desired effect is because all three balls start the animation in the same time. So I added to the pseudo element before and to after. But it did nothing. I guess it is because pseudo elements inherits all parent elements properties, so the pseudo elements works in a different layer.\n\nIs there any method to let pseudo elements start the animation little bit late than the parent element. This is possible when I use three separate classes without using pseudo element but I want to know whether this is possible with pseudo elements because I have to add only one element when I use pseudo classes."
    },
    {
        "link": "https://codeburst.io/how-to-create-a-beautiful-animated-loader-with-nothing-but-css-d1962fc5a66c",
        "document": "This is where things diverge based on the design of the loading screen you may want to build. I’ll use mine as an example while trying to keep things general.\n\nNote that this article assumes familiarity with pseudo-elements, CSS animation properties and keyframe animations. If you want a refresher on the latter two, you can find a great one here. And here’s everything you wish to know about pseudo-elements.\n\nBefore deciding to build it with HTML and CSS only, I had a gif version:\n\nIt will serve as a useful baseline for our version. As you can see, there are four steps in the animation:\n• The borders appear one by one.\n• The red, orange, and white rectangles slide in.\n\nWe only need to build steps 1 and 2. Using will reverse them and create steps 3 and 4 for us. We’ll also make the animation repeat forever using .\n\nThe CSS is embedded in the head and the loader HTML right after the opening tag. Perhaps there’s a better way to take advantage of the browser’s critical rendering path? If you can see an improvement, please let me know in the comments.\n\nInstead of directly analyzing the final version, we’ll try to follow the logical steps one would use to build a similar animation. In my head, that first step was building the logo without any animation.\n\nserves as the parent square and each rectangle inside is represented by a :\n\nThe red is after the orange which is after the white because, by default, elements are stacked from last to first. Each one is positioned absolutely from the side it will be appearing from (as in for the red rectangle and for the orange one) and given the appropriate or .\n\nIn SCSS, we start with:\n\nThis is the result:\n\nStill with me? Because here starts the tricky (and interesting) part.\n\nCSS doesn’t allow us to directly animate ’s border in the way we want. So we must remove the border from the square and find a different way to create it, one that can be animated.\n\nPerhaps if we could break down the borders into pieces and make them appear sequentially? We could do that using two transparent pseudo-elements overlaying the full square.\n\nEach one renders two of the four borders of the square. We can then make every border appear separately by animating each pseudo-element’s and from 0% to 100% in sequence.\n\nLet’s try that! We’ll create a static version first. is positioned absolutely at the top left corner of and will represent its top and right borders. goes to the bottom right and shows the bottom and left borders.\n\nOur SCSS for now looks like this:\n\nNext, let’s animate with our first keyframe.\n\nFor the initial state, the pseudo elements now have and set to 0. We use the keyframe to animate to 100% and, right after that, to 100%.\n\nAlong with switching the border colors from transparent to black at the right moment, this causes the top and right borders to animate exactly the way we want them to.\n\nThe code, including the changes to the pseudo-elements’ initial state:\n\nWe repeat the same step for without forgetting to adjust the timing and invert and . We now have the full border animation:\n\nFinally, we need to animate the rectangles.\n\nThe main challenge is that we can’t chain keyframes. We need to schedule each animation to take into account the steps inside all the others. That way, the overall animation will appear sequential. And it can be reversed.\n\nFor the border animation, we had simply given 25% of the time to each border. We need to add the rectangles this time. After some trial and error, we choose the following to happen over 1.5 seconds:\n• 0 to 25%: Top and right borders appear\n• 25 to 50%: Bottom and left borders appear\n\nUsing the above timeline, we can now write the keyframe to animate our red rectangle’s opacity and width:\n\nWe repeat the same steps for the orange and white rectangles and obtain our final result:\n\nThanks for reading! I’m Julien, front-end engineer at Healthy.io, a digital health startup. If you want any clarifications or think I skipped something important, please let me know and I’ll make sure to fix it."
    },
    {
        "link": "https://css-tricks.com/pseudo-elements-in-the-web-animations-api",
        "document": "To use the Web Animations API (e.g. ) you need a reference to a DOM element to target. So, how do you use it on pseudo-elements, which don’t really offer a direct reference? Dan Wilson covers a (newish?) part of the API itself:\n\nI noticed in Dan’s article that is supported. I was just playing with that recently while doing our List Style Recipes page. I figured I’d give it a spin by testing the WAAPI and on both a and and element:\n\nAt first, I confused myself because it seemed like the WAAPI wasn’t working on , but Dan reminded me that when using a , the element can’t be . Instead, I made it and it worked fine. However, I did uncover that don’t seem to work on elements in Firefox — hopefully they’ll fix that (and we get Chrome and Safari support for ASAP)."
    },
    {
        "link": "https://webdesign.tutsplus.com/creating-a-collection-of-css3-animated-pre-loaders--cms-21978t",
        "document": "Pre-loaders are a common sight in modern web design. As users we expect the web to be fast and fluid - we don’t like waiting for things. Pre-loaders offer visual feedback in the event of content being loaded, thereby managing expectations and reducing the chance of a user abandoning your website.\n\nBefore we dive into building our collection of CSS3 pre-loaders, first I’ll be discussing some of the attributes of CSS3 which are essential for creating these type of pre-loaders.\n\n\n\nPseudo elements are really useful in helping creating CSS3 pre-loaders. Pseudo elements essentially create a fake element before or after the HTML element in question.\n\n\n\nThis is similar to creating an extra element that doesn't really exist however pseudo elements can be styled using CSS. These pseudo elements aren't a necessity for creating CSS3 pre-loaders but they do come in handy and allow us to use minimal markup.\n\nPseudo elements can be styled exactly the same way as you would any other HTML element the only difference being that you must specify a property. Without specifying this the pseudo element will not render. The content property can contain any text which may be useful if your pre-loader needs to contain words such as “Loading...” however if you don’t need any text content then you can just leave the content property blank.\n\nCSS pseudo elements are useful but not essential for creating CSS3 pre-loaders, but the animation property is. Without this the pre-loader would fail to animate and would just be a static visual - not very useful to indicate that the content is loading.\n\n\n\nNote: before we jump into the demo's it might be worth noting that vendor prefixes are not included in the code snippets below. If you need the vendor prefixes then please see the codepen examples.\n\nThe idea behind this pre-loader is to create an animation similar to an audio wave. \n\n\n\nThis is achieved by creating five spans, each one representing an audio bar.\n\n\n\nThe effect is achieved by animating the height of each span from 5px to 30px. The span also moves down on the Y axis by 15px to give the effect that it is growing from the centre.\n\n\n\nBy default the animation on each span happens at the same time. The Mexican wave effect is created by adding to each span with an offset of 2 milliseconds. Each span is targeted using the selector.\n\nThis pre-loader uses four squares which shift, rotate, change color and become circles.\n\nIt's created by using four spans. Each one is a circle/square and has its own animation applied to it.\n\n\n\nAll four of them transform from a square into a circle by adjusting the border-radius from 0px (square) to 20px (circle). \n\n\n\nEach one also rotates and moves along the X & Y axis in opposite direction to its current position. The color of each span is also animated from a uniform purple to its own independent color. This gives the impression of the shapes merging from several circles into one square.\n\nThe Crossing Shapes pre-loader is a single div that utilises the and pseudo elements that we talked about previously. \n\n\n\nOne animation is placed on and another on . Each animation changes into a different color at the opposite time. Similarly to the previous pre-loader each pseudo element changes from a circle to a square by animating the property.\n\nThe snake is made up of a collection of spans each one being styled to form a circle. \n\n\n\nHere's the markup, but you could always try creating the snake pre-loader with three circles and rather than having several spans just use div with and . \n\n\n\nThe animation is created by transforming the Y position of each animation by -10px and changing color from blue to yellow. To create the underlying shadow effect a drop shadow is added to each span which changes its vertical shadow size from 0px to 20px. \n\n\n\nSimilarly to pre-loader 1, by adding to each span and offsetting each span's delay by 2 milliseconds it creates the wave effect.\n\nHere we simply use a single div for the central circle and on that div to create the outer lines.\n\n\n\nAdding a border to the top and bottom and giving it a of 50px creates the two outer lines. An animation is added to the main div, just to change the main div's color and create the rotation effect by adding . The element animation is added to change the color of the outer border.\n\n\n\nWe've gone a bit Microsoft on this one..\n\nThis pre-loader is created using a div and four spans to create each square.\n\n\n\nThese squares are then positioned in a grid-like order. Animation is added to the main div to rotate the whole pre-loader. Another animation is added to the spans which scales them from 100% to 50%. We then add to each span to create the pulsing effect.\n\n\n\nThe great advantage about using CSS3 pre-loaders over image pre-loaders is that they are scalable and retina ready. That means that no matter what device they are displayed on they will always be crisp, clean and future proof (though bear in mind that not all legacy browsers support CSS3 animation).\n\nBy understanding a few important CSS3 properties and techniques you should now be able to create your own CSS3 pre-loaders. They're fun to create and with a little bit of experimentation you can create some really cool animations to prevent users from leaving your website.\n\nIf you've created any cool pre-loaders recently then I'd love to see them! Feel free to leave your comments below."
    },
    {
        "link": "https://daddydesign.com/wordpress/part-1-how-to-code-a-pure-css3-preloader-with-animations",
        "document": "If you are building a website and are worried about load times, preloaders are a great way to reduce user frustration due to varying load times. There are many different methods for creating preloaders but at Daddy Design we always like to take the most pure and simplistic approach. In part 1 of this tutorial we will teach you how to create a pure CSS3 preloader without images that utilizes CSS3 animations.\n\nIn the first step we will set up the foundation for our CSS and HTML. What we are doing here is positioning our loader div to cover the entire screen and hide everything while the site is loading.\n• If you want to change the color, adjust the background attribute.\n• If you are not fully hiding all elements then you may need to increase the z-index attribute to a higher number.\n\nIn the next step we will use the CSS pseudo element “::before” to create our actual preloader and begin to set up our CSS3 animation.\n• If you want to increase the size of the actual preloader, be sure to adjust the top and left margins so that the preloader stays centered.\n• To control the speed of the animation adjust the animation elements where you see “.6s”.\n• To change the color of your preloader adjust the border color attributes, the last item in the parenthesis controls the transparency. You may also want to increase the border size if you increased the overall size of your preloader.\n\nIn the last step we will use keyframes to finalize the CSS3 animation by rotating our previously set up pseudo element. After applying this final step your preloader animation should now be working. @-webkit-keyframes rotation { from { -webkit-transform: rotate(0deg); } to { -webkit-transform: rotate(359deg); } } @-moz-keyframes rotation { from { -moz-transform: rotate(0deg); } to { -moz-transform: rotate(359deg); } } @-o-keyframes rotation { from { -o-transform: rotate(0deg); } to { -o-transform: rotate(359deg); } } @keyframes rotation { from { transform: rotate(0deg); } to { transform: rotate(359deg); } }\n\nPart 2: How to Remove your CSS3 Preloader on Page Load using jQuery In part 2 of this tutorial we will teach you how to remove your newly created CSS3 preloader on page load using Jquery.\n\nIf you are having problems getting this tutorial to work please reread the tutorial and try again, if you still cannot get it to work please leave us a comment below and we will respond as soon as possible. Please do not email us with problems regarding this tutorial, only comments will be responded to."
    }
]