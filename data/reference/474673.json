[
    {
        "link": "https://w3schools.com/cpp/cpp_ref_iostream.asp",
        "document": "The library provides objects which can read user input and output data to the console or to a file.\n\nA list of all iostream objects can be found in the table below."
    },
    {
        "link": "https://cplusplus.com/reference/iostream",
        "document": "Including this header may automatically include other headers, such asand/or"
    },
    {
        "link": "https://en.cppreference.com/w/cpp/io",
        "document": "C++ includes the following input/output libraries: an OOP-style stream-based I/O library, print-based family of functions(since C++23), and the standard set of C-style I/O functions.\n\nThe stream-based input/output library is organized around abstract input/output devices. These abstract devices allow the same code to handle input/output to files, memory streams, or custom adaptor devices that perform arbitrary operations (e.g. compression) on the fly.\n\nMost of the classes are templated, so they can be adapted to any basic character type. Separate typedefs are provided for the most common basic character types (char and wchar_t). The classes are organized into the following hierarchy:\n\nThe following typedefs for common character types are provided in namespace :\n\nThe stream-based I/O library uses I/O manipulators (e.g. std::boolalpha, std::hex, etc.) to control how streams behave.\n\nThe following auxiliary types are defined:\n\nThe following typedef names for std::fpos<std::mbstate_t> are provided:\n\nThe Unicode-aware print-family functions that perform formatted I/O on text that is already formatted. They bring all the performance benefits of std::format, are locale-independent by default, reduce global state, avoid allocating a temporary std::string object and calling operator<<, and in general make formatting more efficient compared to iostreams and stdio.\n\nThe following print-like functions are provided:\n\nC++ also includes the input/output functions defined by C, such as std::fopen, std::getc, etc."
    },
    {
        "link": "https://cplusplus.com/reference/iolibrary",
        "document": "\n• , , , and aren't usually included directly in most C++ programs. They describe the base classes of the hierarchy and are automatically included by other header files of the library that contain derived classes.\n• declares the objects used to communicate through the standard input and output (including and ).\n• defines the file stream classes (like the template or the class ) as well as the internal buffer objects used with these ( ). These classes are used to manipulate files using streams.\n• : The classes defined in this file are used to manipulate string objects as if they were streams.\n• declares some standard manipulators with parameters to be used with extraction and insertion operators to modify internal flags and formatting options.\n\nThe iostream library is an object-oriented library that provides input and output functionality using streams.A stream is an abstraction that represents a device on which input and ouput operations are performed. A stream can basically be represented as a source or destination of characters of indefinite length.Streams are generally associated to a physical source or destination of characters, like a disk file, the keyboard, or the console, so the characters gotten or written to/from our abstraction called stream are physically input/output to the physical device. For example, file streams are C++ objects to manipulate and interact with files; Once a file stream is used to open a file, any input or output operation performed on that stream is physically reflected in the file.To operate with streams, C++ provides the standardlibrary, which contains the following elements:The library and its hierarchy of classes is split in different files:The names, prototypes and examples included in this reference for the iostream classes mostly describe and use theinstantiations of the class templates instead of the templates themselves, even though these classes are only one of their possible instantiations. We believe this provides a better readability and is arguably as easy to obtain the names and prototypes of the basic template from theinstantiation as the opposite."
    },
    {
        "link": "https://en.cppreference.com/w/cpp/header/iostream",
        "document": "This header is part of the Input/output library.\n\nIncluding behaves as if it defines a static storage duration object of type std::ios_base::Init, whose constructor initializes the standard stream objects if it is the first object to be constructed, and whose destructor flushes those objects (except for and ) if it is the last object to be destroyed.\n\nThe following behavior-changing defect reports were applied retroactively to previously published C++ standards."
    },
    {
        "link": "https://reddit.com/r/cpp_questions/comments/jn5z20/best_practice_for_for_loop_condition",
        "document": "I learn C++ on my own and applied it to mostly school projects. The for loop condition (2nd statement) usually comes like this:\n\nThis means i only goes until it reaches (n-1). I work with codes that deal with matrices so to make things clear, I do this\n\nI understand that it is simple to subtract 1 (when using ) and adjust your bounds; however, isnt using easier to understand?\n\nIs using considered bad practice? Almost all code editors or even IDE insert a For loop template with instead of . I'm not working in industry yet but I'd like some thoughts from industry folks as well."
    },
    {
        "link": "https://stackoverflow.com/questions/38399334/how-can-i-avoid-for-loops-with-an-if-condition-inside-them-with-c",
        "document": "With almost all code I write, I am often dealing with set reduction problems on collections that ultimately end up with naive \"if\" conditions inside of them. Here's a simple example: With functional languages, I can solve the problem by reducing the collection to another collection (easily) and then perform all operations on my reduced set. In pseudocode: And in other C variants, like C#, I could reduce with a where clause like foreach (var x in myCollection.Where(c=> c == SOMETHING)) { DoStuff(); } Or better (at least to my eyes) Admittedly, I am doing a lot of paradigm mixing and subjective/opinion based style, but I can't help but feel that I am missing something really fundamental that could allow me to use this preferred technique with C++. Could someone enlighten me?"
    },
    {
        "link": "https://codesignal.com/learn/courses/cpp-loops-and-conditional-statements/lessons/mastering-cpp-loops-and-conditional-statements-final-review",
        "document": "We often require the combination of loops and conditional statements for complex scenarios. For example, consider a situation where we calculate the sum of the first natural numbers, but only even numbers are taken into account. Here's how you may do it:\n\nHere, the loop iterates from to , checking if the number is even within the statement. The expression evaluates to the remainder when is divided by , commonly used to determine if is even (remainder 0) or odd (remainder 1)."
    },
    {
        "link": "https://geeksforgeeks.org/cpp-loops",
        "document": "In C++ programming, sometimes there is a need to perform some operation more than once or (say) n number of times. For example, suppose we want to print “Hello World” 5 times. Manually, we have to write cout for the C++ statement 5 times as shown.\n\nSomewhat manageable, right? Let’s say you have to write it 20 times. It would surely take more time to write 20 statements. Now imagine you have to write it 100 times. It would be really hectic to re-write the same statement again and again.\n\nIn such cases, loops come into play, allowing users to repeatedly execute a block of statements any number of times.\n\nIn the above program, we have used one of the loops to write “Hello World” 5 times. You can see how much code is reduced. The same line of code can write “Hello World” 20 or even 100 times.\n\nIn C++ programming, a loop is an instruction that is used to repeatedly execute a code until a certain condition remains true. They are useful for performing repetitive tasks without having to write the same code multiple times.\n\nC++ provides three types of loops that works the same, but are preferred in different use cases:\n\nThe for loop is a type of loop that allows us to write a loop that is executed a specific number of times. It is an entry-controlled loop, which means that it checks whether the test condition is true before executing the statements inside it.\n\nThe various parts of the for loop are:\n• Initialization : Initialize the variable to some initial value.\n• Test Condition : This specifies the test condition. If the condition evaluates to true, then body of the loop is executed. If evaluated false, loop is terminated.\n• Update Expression : After the execution loop’s body, this expression increments/decrements the loop variable by some value.\n\nAll these together is used to create a logic and flow of the loop.\n\nThe while loop is also an entry-controlled loop which is used in situations where we do not know the exact number of iterations of the loop beforehand.\n\nWhile studying for loop, we have seen that the number of iterations is known beforehand, i.e. the number of times the loop body is needed to be executed is known to us and we create the condition on the basis of it. But while loops execution is solely based on the condition.\n\nOnly the condition is the part of while loop syntax, we have to initialize and update loop variable manually.\n\nThe do-while loop is also a loop whose execution is terminated on the basis of test conditions like while loop but this loop is an exit-controlled loop. It means that in do-while loop, the condition is checked after executing the body of the loop. So, in a do-while loop, the loop body will execute at least once irrespective of the test condition.\n\nLike while loop, only the condition is the part of do while loop syntax, we have to do the initialization and updation of loop variable manually.\n\nRemember the last semicolon at the end of the loop.\n\nAn infinite loop (sometimes called an endless loop) is a piece of coding that lacks a functional exit so that it repeats indefinitely. An infinite loop occurs when a condition is always evaluated to be true. Usually, this is an error. We can manually create an infinite loop using all three loops:\n\nNesting of loops refers to placing one loop inside another. The inner loop is executed completely for each iteration of the outer loop. This is useful when you need to perform multiple iterations within each iteration of a larger loop, such as iterating over a two-dimensional array or performing operations that require more than one level of iteration.\n\nGenerally, the normal flow of any loop is that it will repeat till its test condition is true. In each repetition, it will execute the given set of statements. But C++ provides ways to modify this normal flow. This can be done by using loop control statements shown below:\n\nBreak out of the Loop\n\nThe break statement when encountered, terminates the loop regardless of its test condition. This is useful when the execution of loop is dependent on multiple conditions.\n\nThe continue statement, when encountered, skips the remaining code inside the current iteration of the loop and proceeds to the next iteration. This is useful when you want to skip specific iterations based on certain conditions but still want to continue the loop execution."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/20741",
        "document": "Hey All,\n\n \n\n Is it a good practise to perform certain operations in your code based on the count value obtained from a complicated for loop? For example, lets say there are four objects you want to compare in your for loop, and based on the results of the comparison a certain count variable is incremented. And based on the value of count the code proceeds with performing different operations.\n\n \n\n Is this a normal/good practise? Can you guys suggest something better?\n\n \n\n Thanks! :)"
    }
]