[
    {
        "link": "https://pro.arcgis.com/en/pro-app/3.3/arcpy/functions/listfields.htm",
        "document": "The specified feature class or table with the fields to be returned.\n\nLimits the results returned. If a value is not specified, all values are returned. The wildcard is not case sensitive. Represents zero or more characters.\n\nSpecifies the field type that will be returned.\n• — All field types are returned. This is the default.\n• — Fields of Date Only type are returned.\n• — Fields of Time Only type are returned."
    },
    {
        "link": "https://desktop.arcgis.com/en/arcmap/latest/analyze/arcpy-functions/listfields.htm",
        "document": ""
    },
    {
        "link": "https://pro.arcgis.com/en/pro-app/latest/arcpy/functions/alphabetical-list-of-arcpy-functions.htm",
        "document": "ArcPy provides a number of functions to better support workflows using Python.\n\nIn addition to the functions listed in this topic, all geoprocessing tools can be accessed as ArcPy functions; see Using tools in Python for more information. Additional functions can be found in other ArcPy modules, including the following:\n\nLearn more about using functions in Python\n\nCreates a unique scratch path name for the specified data type. If no workspace is given the current workspace is used. Creates a unique name for the specified workspace by appending a number to the input name. This number is incremented until the name is unique. If no workspace is specified, the current workspace is used. Determines the existence of the specified data object. This function tests for the existence of various data types including feature classes, tables, datasets, shapefiles, workspaces, layers, and files. The function returns a Boolean indicating whether the element exists. Parses a table name into its components (database, owner, table) depending on the workspace. ParseTableName returns a string containing the parsed table name, with the database name, owner name, and table name, separated by commas. This workspace must be a personal, file, or enterprise geodatabase. Tests if a schema lock can be acquired for a feature class, table, or feature dataset. Tools that alter schema will require a schema lock to be placed on the input data. The Add Field tool is an example of such a tool. If the tool requires a schema lock and is unable to acquire one when the tool is run, an appropriate error message is returned. Scripts that use such tools should test if a schema lock can be acquired on the input data. The TestSchemaLock function will not actually apply a schema lock on the input data, but will return a Boolean. Returns a valid table name for a workspace based on a table name and a workspace path. All invalid characters in the input table name are replaced with an underscore. The table name restrictions depend on the type of database.\n\nAdds an error message (severity of 2) to the messages of a script tool or Python toolbox tool. Adds an informative message (severity of 0) to the messages of a script tool or Python toolbox tool. Sets the return message of a script tool as an output message by index. Adds a warning message (severity of 1) to the messages of a script tool or Python toolbox tool. Returns the message types, return codes, and message strings from the previously run tool. Get the string of the error or warning ID message. Gets the maximum severity returned from the previously run tool. Returns a numeric count of all the returned messages from the previously run tool. Returns the geoprocessing messages from a tool by a specified severity level. Gets the severity code (0, 1, 2) of the specified message by index. Returns the severity level. The severity level is used to control how geoprocessing tools throw exceptions. Sets additional categories of informative messages to be returned with geoprocessing tool messages.\n\nCopies the specified parameter by index or parameter name to another parameter in the script tool. The specified parameters must be of the same data type. Returns the number of arguments passed to the script. From the parameter list, select the desired parameter by its index or its name. The parameter is returned as an object. Gets the specified parameter as a text string by its index position or parameter name. Returns a count of the parameter values for the specified tool. If the tool is contained in a custom toolbox, use the ImportToolbox function to access the custom tool. Returns a list of parameter objects for a given tool and is commonly used in a script tool's ToolValidator class. For a specified tool name, returns the default value of the desired parameter. The parameter is specified by either index or parameter name. Sets a specified parameter property by index or parameter name using an object. This function is used to pass objects from a script to a script tool. If you need to pass a string, use the SetParameterAsText function. Gets the specified parameter as a text string by its index position or parameter name. Sets the symbology properties of the specified output parameter of a script tool by index or parameter name.\n\nImports the specified toolbox into ArcPy, allowing for access to the toolbox's associated tools. Imports a geoprocessing toolbox for use in ArcPy, allowing access to the toolbox's associated tools. Determines if a tool is running synchronous or asynchronous. When a tool is synchronous, the results are automatically returned, but no other action may be taken until the tool has completed. All non-server tools are synchronous. Server tools may be asynchronous, meaning that once the tool has been submitted to the server, other functionality can be run without waiting, and the results must be explicitly requested from the server. Removes the specified toolbox, either by specifying its path or referencing its alias. Removes the specified toolbox from the current geoprocessing session. Server toolboxes can also be removed using a semicolon delimiter."
    },
    {
        "link": "https://community.esri.com/t5/arcgis-pro-questions/arcpy-listfields/td-p/85534",
        "document": "Since reading the StackExchange thread didn't appear to help you understand how ListFields works, I will point out directly that ListFields doesn't return a list of field names, it returns a list of field objects. If you want the names of the fields, you need to add the 2nd line of code in Dan's comment."
    },
    {
        "link": "https://desktop.arcgis.com/en/arcmap/latest/analyze/python/listing-data.htm",
        "document": ""
    },
    {
        "link": "https://desktop.arcgis.com/en/arcmap/latest/tools/data-management-toolbox/calculate-field.htm",
        "document": ""
    },
    {
        "link": "https://pro.arcgis.com/en/pro-app/latest/tool-reference/data-management/calculate-field-examples.htm",
        "document": "Entering values using the keyboard is not the only way you can edit values in a table. You may want to perform a mathematical calculation to set a field value for a single record or even all records. You can perform simple as well as advanced calculations on all or selected records. In addition, you can calculate area, length, perimeter, and other geometric properties on fields in attribute tables. The sections below include examples of using the field calculator. Calculations are performed using Python, SQL, and Arcade.\n\nThis topic focuses on Python-based Calculate Field examples. To learn more about Arcade expressions, see the ArcGIS Arcade guide. To learn more about SQL expressions, see Calculate field values. To learn more about VBScript examples, see Calculate Field VBScript examples.\n\nA variety of calculations can be calculated with only a short expression. Strings are supported by a series of Python string functions, including capitalize, rstrip, and replace. Capitalize the first character of the string in the CITY_NAME field. Remove any space from the end of the string in the CITY_NAME field. Replace any occurrences of \"california\" with \"California\" in the STATE_NAME field. Characters in a string field can be accessed by indexing and slicing in Python. Indexing fetches characters at an index position; slicing fetches a group of characters. In the following table, assume that !fieldname! is a string field with a value of \"abcde\": The second, third, and fourth characters Python also supports string formatting using the format() method. Python provides tools for processing numbers. Python also supports several numeric and mathematical functions, including math, cmath, decimal, random, itertools, functools, and operator. x raised to the power of y Multiply the values of a field by 2. Short, Long, and Big Integer fields differ in the following ranges of whole numbers they support:\n• Short (16-bit integer)—Support whole numbers from -(215) and 215 (-32,768 and 32,767)\n• Long (32-bit integer)—Support whole numbers from -(231) and 231 (-2,147,483,648 and 2,147,483,647)\n• Big Integer (64-bit integer)—Support whole numbers from -(253) and 253 (-9,007,199,254,740,992 and 9,007,199,254,740,991) In ArcGIS Pro, Python 3 is used, and in ArcGIS Desktop, Python 2 is used. Python 2 uses integer math, meaning that dividing two integer values always produces an integer value (3 / 2 = 1). In Python 3, dividing two integer values produces a float value (3 / 2 = 1.5).\n\nWith Python expressions and the Code Block parameter, you can do the following:\n• Use any function in the expression.\n• Access the new random value operator. Supports Python functionality. The code block is expressed using Python functions (def). Geometry properties are expressed using geoprocessing objects, such as Point objects, when appropriate. SQL expressions were implemented to better support calculations using feature services and enterprise geodatabases, particularly regarding performance. Instead of performing calculations one feature or row at a time, a single request is sent to the feature service or database. PYTHON and PYTHON_9.3 keywords are still supported in ArcGIS Pro for backward compatibility but are not listed as choices. Python scripts that use these keywords will continue to work. The only difference between the PYTHON3 expression type and the legacy PYTHON_9.3 keyword is that PYTHON3 returns the values in date fields as Python datetime objects. The PYTHON3 expression type is not related to the version of Python installed with ArcGIS Pro. It is the third Python-related keyword historically (after the now hidden PYTHON and PYTHON_9.3 keywords). Python functions are defined using the def keyword followed by the name of the function and the function’s input arguments. A Python function can be written to accept any number of input arguments (including none). A value is returned from the function using a return statement. The function name is your choice (don't use spaces or leading numbers). If a value is not explicitly returned from a function with a return statement, the function returns None. Python enforces indentation as part of the syntax. Use four spaces to define each logical level. Align the beginning and end of statement blocks, and be consistent.\n\nIn addition to the following code samples, see the Geometry unit conversions section below for more information about converting geometry units. Expression: getVertexCount(!shape!) Code Block: def getVertexCount(feat): partnum = 0 # Count the number of points in the current multipart feature partcount = feat.partCount pntcount = 0 # Enter while loop for each part in the feature (if a singlepart # feature, this will occur only once) while partnum < partcount: part = feat.getPart(partnum) pnt = part.next() # Enter while loop for each vertex while pnt: pntcount += 1 pnt = part.next() # If pnt is null, either the part is finished or there # is an interior ring if not pnt: pnt = part.next() partnum += 1 return pntcount For a point feature class, shift the x-coordinate of each point by 100.\n\nArea and length properties of the geometry field can be modified with unit types using the getArea and getLength geometry methods. Learn more about supported linear and areal units in geoprocessing See the Polygon and Polyline objects for more information. Converting the areal units on data in a geographic coordinate system produces questionable results since decimal degrees are not consistent across the globe. Geodesic area and length can also be calculated using the GEODESIC method type. See the Polygon and Polyline objects for more information. Learn more about geoprocessing tools and linear and areal units\n\nDate and time can be calculated using the datetime and time modules. To transfer temporal values between field types (Date, Date Only, Time Only, Timestamp Offset, and Text), use the Convert Temporal Field tool instead. Calculate the date to be March 15, 2015, 1:30:00 pm. Calculate the number of days between the current date and the value in a field. Calculate a date by adding 100 days to the date value in a field. Calculate a string representing the date using the ctime method in the datetime module. The example creates a string in the format: 'Mon Feb 22 10:15:00 2021'. Calculate the day of the week (for example, Sunday) for a date value in a field. Calculate a formatted string from a date field using the datetime module's strftime method and an explicit format string. The example will create a string in the format: '02/22/2021, 10:15:00'."
    },
    {
        "link": "https://gis.stackexchange.com/questions/12682/understanding-syntax-for-calculatefield-management-in-arcpy",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://community.esri.com/t5/python-questions/how-to-run-the-calculate-field-using-arcpy/td-p/1130751",
        "document": "You can find the documentation for the tool here:\n\nCalculateField has the following signature:\n\nexpression_type is an optional argument specifying the language you want to use (Python, Arcade, SQL), with Python being the default.\n\nNow here is where it gets fishy: You said you were working with ArcGIS Pro, but the error you got says you are using VB as the language for CalculateField. This would make sense, as VB is the default value for CalculateField in ArcMap (which also uses Python 2.7, while Pro uses Python 3). Something doesn't check quite out...\n\nThere are some other problematic things with your code:\n• your in_features seem to be in a file geodatabase (gdb), but you still specified the .shp extension. don't know if that will cause an error (I hope it will).\n• the docs (see link above) specify that for Python code, you should enclose field names with !, you use '!\n• the expression is given as a string, and your Python expression will be wrong, as you didn't enclose it in quotes.\n\nTry using this:"
    },
    {
        "link": "https://gis.stackexchange.com/questions/458613/using-arcpy-to-calculate-field-in-hosted-layer",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]