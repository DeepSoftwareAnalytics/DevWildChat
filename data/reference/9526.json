[
    {
        "link": "https://kotlinlang.org/docs/interfaces.html",
        "document": "Interfaces in Kotlin can contain declarations of abstract methods, as well as method implementations. What makes them different from abstract classes is that interfaces cannot store state. They can have properties, but these need to be abstract or provide accessor implementations.\n\nAn interface is defined using the keyword :\n\nYou can declare properties in interfaces. A property declared in an interface can either be abstract or provide implementations for accessors. Properties declared in interfaces can't have backing fields, and therefore accessors declared in interfaces can't reference them:\n\nAn interface can derive from other interfaces, meaning it can both provide implementations for their members and declare new functions and properties. Quite naturally, classes implementing such an interface are only required to define the missing implementations: interface Named { val name: String } interface Person : Named { val firstName: String val lastName: String override val name: String get() = \"$firstName $lastName\" } data class Employee( // implementing 'name' is not required override val firstName: String, override val lastName: String, val position: Position ) : Person\n\nWhen you declare many types in your supertype list, you may inherit more than one implementation of the same method: Interfaces A and B both declare functions foo() and bar(). Both of them implement foo(), but only B implements bar() (bar() is not marked as abstract in A, because this is the default for interfaces if the function has no body). Now, if you derive a concrete class C from A, you have to override bar() and provide an implementation. However, if you derive D from A and B, you need to implement all the methods that you have inherited from multiple interfaces, and you need to specify how exactly D should implement them. This rule applies both to methods for which you've inherited a single implementation (bar()) and to those for which you've inherited multiple implementations (foo())."
    },
    {
        "link": "https://developer.android.com/kotlin",
        "document": "Kotlin helped Zomato reduce the number of lines of code in their app significantly, and it has also helped them find important defects in their app at compile time.\n\nWatch Zomato's Rahul, Vice President, Product Management, and Prateek Sharma, Android developer, talk about how Zomato started adopting Kotlin and about how they now use it for all new feature releases."
    },
    {
        "link": "https://kotlinlang.org/docs/home.html",
        "document": ""
    },
    {
        "link": "https://developer.android.com/guide/components/fundamentals",
        "document": "Android apps can be written using Kotlin, the Java programming language, and C++ languages. The Android SDK tools compile your code along with any data and resource files into an APK or an Android App Bundle.\n\nAn Android package, which is an archive file with an suffix, contains the contents of an Android app required at runtime, and it is the file that Android-powered devices use to install the app.\n\nAn Android App Bundle, which is an archive file with an suffix, contains the contents of an Android app project, including some additional metadata that isn't required at runtime. An AAB is a publishing format and can't be installed on Android devices. It defers APK generation and signing to a later stage.\n\nWhen distributing your app through Google Play, for example, Google Play's servers generate optimized APKs that contain only the resources and code that are required by the particular device requesting installation of the app.\n\nEach Android app lives in its own security sandbox, protected by the following Android security features:\n• The Android operating system is a multi-user Linux system in which each app is a different user.\n• By default, the system assigns each app a unique Linux user ID, which is used only by the system and is unknown to the app. The system sets permissions for all the files in an app so that only the user ID assigned to that app can access them.\n• Each process has its own virtual machine (VM), so an app's code runs in isolation from other apps.\n• By default, every app runs in its own Linux process. The Android system starts the process when any of the app's components need to be executed, and then shuts down the process when it's no longer needed or when the system must recover memory for other apps.\n\nThe Android system implements the principle of least privilege. That is, each app, by default, has access only to the components that it requires to do its work and no more. This creates a very secure environment in which an app can't access parts of the system it is not given permission for.\n\nHowever, there are ways for an app to share data with other apps and for an app to access system services:\n• It's possible to arrange for two apps to share the same Linux user ID, in which case they are able to access each other's files. To conserve system resources, apps with the same user ID can also arrange to run in the same Linux process and share the same VM. The apps must also be signed with the same certificate.\n• An app can request permission to access device data such as the device's location, camera, and Bluetooth connection. The user has to explicitly grant these permissions. For more information about permissions, see Permissions on Android.\n\nThe rest of this document introduces the following concepts:\n• The core framework components that define your app.\n• The manifest file in which you declare the components and the required device features for your app.\n• Resources that are separate from the app code and that let your app gracefully optimize its behavior for a variety of device configurations.\n\nApp components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app. Some components depend on others.\n\nThere are four types of app components:\n\nEach type serves a distinct purpose and has a distinct lifecycle that defines how a component is created and destroyed. The following sections describe the four types of app components.\n\nAn activity is the entry point for interacting with the user. It represents a single screen with a user interface. For example, an email app might have one activity that shows a list of new emails, another activity to compose an email, and another activity for reading emails. Although the activities work together to form a cohesive user experience in the email app, each one is independent of the others. A different app can start any one of these activities if the email app allows it. For example, a camera app might start the activity in the email app for composing a new email to let the user share a picture. An activity facilitates the following key interactions between system and app:\n• Keeping track of what the user currently cares about—what is on-screen—so that the system keeps running the process that is hosting the activity.\n• Knowing which previously used processes contain stopped activities the user might return to and prioritizing those processes more highly to keep them available.\n• Helping the app handle having its process killed so the user can return to activities with their previous state restored.\n• Providing a way for apps to implement user flows between each other, and for the system to coordinate these flows. The primary example of this is sharing. You implement an activity as a subclass of the class. For more information about the class, see Introduction to activities. A service is a general-purpose entry point for keeping an app running in the background for all kinds of reasons. It is a component that runs in the background to perform long-running operations or to perform work for remote processes. A service does not provide a user interface. For example, a service might play music in the background while the user is in a different app, or it might fetch data over the network without blocking user interaction with an activity. Another component, such as an activity, can start the service and let it run or bind to it to interact with it. There are two types of services that tell the system how to manage an app: started services and bound services. Started services tell the system to keep them running until their work is completed. This might be to sync some data in the background or play music even after the user leaves the app. Syncing data in the background or playing music represent different types of started services, which the system handles differently:\n• Music playback is something the user is directly aware of, and the app communicates this to the system by indicating that it wants to be in the foreground, with a notification to tell the user that it is running. In this case, the system prioritizes keeping that service's process running, because the user has a bad experience if it goes away.\n• A regular background service is not something the user is directly aware of, so the system has more freedom in managing its process. It might let it be killed, restarting the service sometime later, if it needs RAM for things that are of more immediate concern to the user. Bound services run because some other app (or the system) has said that it wants to make use of the service. A bound service provides an API to another process, and the system knows there is a dependency between these processes. So if process A is bound to a service in process B, the system knows that it needs to keep process B and its service running for A. Further, if process A is something the user cares about, then it knows to treat process B as something the user also cares about. Because of their flexibility, services are useful building blocks for all kinds of higher-level system concepts. Live wallpapers, notification listeners, screen savers, input methods, accessibility services, and many other core system features are all built as services that applications implement and the system binds to when they run. A service is implemented as a subclass of . For more information about the class, see the Services overview. Note: If your app targets Android 5.0 (API level 21) or higher, use the class to schedule actions. JobScheduler has the advantage of conserving battery by optimally scheduling jobs to reduce power consumption and by working with the Doze API. For more information about using this class, see the reference documentation. A broadcast receiver is a component that lets the system deliver events to the app outside of a regular user flow so the app can respond to system-wide broadcast announcements. Because broadcast receivers are another well-defined entry into the app, the system can deliver broadcasts even to apps that aren't currently running. So, for example, an app can schedule an alarm to post a notification to tell the user about an upcoming event. Because the alarm is delivered to a in the app, there is no need for the app to remain running until the alarm goes off. Many broadcasts originate from the system, like a broadcast announcing that the screen is turned off, the battery is low, or a picture is captured. Apps can also initiate broadcasts, such as to let other apps know that some data is downloaded to the device and is available for them to use. Although broadcast receivers don't display a user interface, they can create a status bar notification to alert the user when a broadcast event occurs. More commonly, though, a broadcast receiver is just a gateway to other components and is intended to do a very minimal amount of work. For instance, a broadcast receiver might schedule a to perform some work based on an event using . Broadcast receivers often involve apps interacting with each other, so it's important to be aware of the security implications when setting them up. A broadcast receiver is implemented as a subclass of , and each broadcast is delivered as an object. For more information, see the class. A content provider manages a shared set of app data that you can store in the file system, in a SQLite database, on the web, or on any other persistent storage location that your app can access. Through the content provider, other apps can query or modify the data, if the content provider permits it. For example, the Android system provides a content provider that manages the user's contact information. Any app with the proper permissions can query the content provider, such as using , to read and write information about a particular person. It is tempting to think of a content provider as an abstraction on a database, because there is a lot of API and support built in to them for that common case. However, they have a different core purpose from a system-design perspective. To the system, a content provider is an entry point into an app for publishing named data items, identified by a URI scheme. Thus, an app can decide how it wants to map the data it contains to a URI namespace, handing out those URIs to other entities which can in turn use them to access the data. There are a few particular things this lets the system do in managing an app:\n• Assigning a URI doesn't require that the app remain running, so URIs can persist after their owning apps exit. The system only needs to make sure that an owning app is still running when it retrieves the app's data from the corresponding URI.\n• These URIs also provide an important fine-grained security model. For example, an app can place the URI for an image it has on the clipboard, but leave its content provider locked up so that other apps cannot freely access it. When a second app attempts to access that URI on the clipboard, the system can let that app access the data using a temporary URI permission grant so that it accesses the data only behind that URI, and nothing else in the second app. Content providers are also useful for reading and writing data that is private to your app and not shared. A content provider is implemented as a subclass of and must implement a standard set of APIs that enable other apps to perform transactions. For more information, see the Content providers developer guide.\n\nA unique aspect of the Android system design is that any app can start another app’s component. For example, if you want the user to capture a photo with the device camera, there's probably another app that does that—and your app can use it instead of developing an activity to capture a photo yourself. You don't need to incorporate or even link to the code from the camera app. Instead, you can start the activity in the camera app that captures a photo. When complete, the photo is even returned to your app so you can use it. To the user, it seems as if the camera is actually a part of your app.\n\nWhen the system starts a component, it starts the process for that app, if it's not already running, and instantiates the classes needed for the component. For example, if your app starts the activity in the camera app that captures a photo, that activity runs in the process that belongs to the camera app, not in your app's process. Therefore, unlike apps on most other systems, Android apps don't have a single entry point: there's no function.\n\nBecause the system runs each app in a separate process with file permissions that restrict access to other apps, your app can't directly activate a component from another app. However, the Android system can. To activate a component in another app, you deliver a message to the system that specifies your intent to start a particular component. The system then activates the component for you.\n\nAn asynchronous message called an intent activates three of the four component types: activities, services, and broadcast receivers. Intents bind individual components to each other at runtime. You can think of them as the messengers that request an action from other components, whether the component belongs to your app or another.\n\nAn intent is created with an object, which defines a message to activate either a specific component (an explicit intent) or a specific type of component (an implicit intent).\n\nFor activities and services, an intent defines the action to perform, such as to view or send something, and might specify the URI of the data to act on, among other things that the component being started might need to know.\n\nFor example, an intent might convey a request for an activity to show an image or to open a web page. In some cases, you can start an activity to receive a result, in which case the activity also returns the result in an . You can also issue an intent to let the user pick a personal contact and have it returned to you. The return intent includes a URI pointing to the chosen contact.\n\nFor broadcast receivers, the intent defines the broadcast announcement. For example, a broadcast to indicate that the device battery is low includes only a known action string that indicates battery is low.\n\nUnlike activities, services, and broadcast receivers, content providers are activated when targeted by a request from a . The content resolver handles all direct transactions with the content provider, and the component performing transactions with the provider calls methods on the object. This leaves a layer of abstraction for security reasons between the content provider and the component requesting information.\n\nThere are separate methods for activating each type of component:\n• You can start an activity or give it something new to do by passing an to or, when you want the activity to return a result, .\n• On Android 5.0 (API level 21) and higher, you can use the class to schedule actions. For earlier Android versions, you can start a service or give new instructions to an ongoing service by passing an to . You can bind to the service by passing an to .\n• You can initiate a broadcast by passing an to methods such as or .\n• You can perform a query to a content provider by calling on a .\n\nFor more information about using intents, see the Intents and Intent Filters document. The following documents provide more information about activating specific components: Introduction to activities, Services overview, , and Content providers.\n\nBefore the Android system can start an app component, the system must know that the component exists by reading the app's manifest file, . Your app declares all its components in this file, which is at the root of the app project directory.\n\nThe manifest does a number of things in addition to declaring the app's components, such as the following:\n• Identifies any user permissions the app requires, such as internet access or read-access to the user's contacts.\n• Declares the minimum API level required by the app, based on which APIs the app uses.\n• Declares hardware and software features used or required by the app, such as a camera, Bluetooth services, or a multitouch screen.\n• Declares API libraries the app needs to be linked against (other than the Android framework APIs), such as the Google Maps library.\n\nThe primary task of the manifest is to inform the system about the app's components. For example, a manifest file can declare an activity as follows:\n\nIn the element, the attribute points to resources for an icon that identifies the app.\n\nIn the element, the attribute specifies the fully qualified class name of the subclass, and the attribute specifies a string to use as the user-visible label for the activity.\n\nYou must declare all app components using the following elements:\n\nActivities, services, and content providers that you include in your source but don't declare in the manifest aren't visible to the system and, consequently, can never run. However, broadcast receivers can either be declared in the manifest or created dynamically in code as objects and registered with the system by calling .\n\nFor more about how to structure the manifest file for your app, see the App manifest overview.\n\nAs discussed in the Activate components section, you can use an to start activities, services, and broadcast receivers. You do this by explicitly naming the target component, using the component class name, in the intent. You can also use an implicit intent, which describes the type of action to perform and, optionally, the data you want to perform the action on. An implicit intent lets the system find a component on the device that can perform the action and start it. If there are multiple components that can perform the action described by the intent, the user selects which one to use.\n\nCaution: If you use an intent to start a , make sure that your app is secure by using an explicit intent. Using an implicit intent to start a service is a security hazard, because you can't be certain what service responds to the intent and the user can't see which service starts. Beginning with Android 5.0 (API level 21), the system throws an exception if you call with an implicit intent. Don't declare intent filters for your services.\n\nThe system identifies the components that can respond to an intent by comparing the intent received to the intent filters provided in the manifest file of other apps on the device.\n\nWhen you declare an activity in your app's manifest, you can optionally include intent filters that declare the capabilities of the activity so it can respond to intents from other apps. You do this by adding an element as a child of the component's declaration element.\n\nFor example, if you build an email app with an activity for composing a new email, you can declare an intent filter to respond to \"send\" intents to send a new email, as shown in the following example:\n\nIf another app creates an intent with the action and passes it to , the system might start your activity so the user can draft and send an email.\n\nFor more about creating intent filters, see the Intents and Intent Filters document.\n\nThere are a variety of devices powered by Android, and not all of them provide the same features and capabilities. To prevent your app from being installed on devices that lack features needed by your app, it's important that you clearly define a profile for the types of devices your app supports by declaring device and software requirements in your manifest file.\n\nMost of these declarations are informational only. The system doesn't read them, but external services such as Google Play do read them to provide filtering for users when they search for apps from their device.\n\nFor example, suppose your app requires a camera and uses APIs introduced in Android 8.0 (API level 26). You must declare these requirements. The values for and are set in your app module's file:\n\nNote: Don't set and directly in the manifest file, since they are overwritten by Gradle during the build process. For more information, see Specify API level requirements.\n\nYou declare the camera feature in your app's manifest file:\n\nWith the declarations shown in these examples, devices that do not have a camera or have an Android version lower than 8.0 can't install your app from Google Play. However, you can also declare that your app uses the camera, but does not require it. To do so, you set the attribute to , check at runtime whether the device has a camera, and disable any camera features as needed.\n\nMore information about how you can manage your app's compatibility with different devices is provided in the Device compatibility overview.\n\nAn Android app is composed of more than just code. It requires resources that are separate from the source code, such as images, audio files, and anything relating to the visual presentation of the app. For example, you can define animations, menus, styles, colors, and the layout of activity user interfaces with XML files.\n\nUsing app resources makes it easy to update various characteristics of your app without modifying code. Providing sets of alternative resources lets you optimize your app for a variety of device configurations, such as different languages and screen sizes.\n\nFor every resource that you include in your Android project, the SDK build tools define a unique integer ID, which you can use to reference the resource from your app code or from other resources defined in XML. For example, if your app contains an image file named (saved in the directory), the SDK tools generate a resource ID named . This ID maps to an app-specific integer, which you can use to reference the image and insert it in your user interface.\n\nOne of the most important aspects of providing resources separate from your source code is the ability to provide alternative resources for different device configurations.\n\nFor example, by defining UI strings in XML, you can translate the strings into other languages and save those strings in separate files. Then Android applies the appropriate language strings to your UI based on a language qualifier that you append to the resource directory's name, such as for French string values, and the user's language setting.\n\nAndroid supports many qualifiers for your alternative resources. The qualifier is a short string that you include in the name of your resource directories to define the device configuration those resources are used for.\n\nFor example, you can create different layouts for your activities depending on the device's screen orientation and size. When the device screen is in portrait (tall) orientation, you might want a layout with buttons arranged vertically, but when the screen is in landscape (wide) orientation, you might want the buttons aligned horizontally. To change the layout depending on the orientation, you can define two layouts and apply the appropriate qualifier to each layout's directory name. Then, the system automatically applies the appropriate layout depending on the current device orientation.\n\nFor more information about the different kinds of resources you can include in your application and how to create alternative resources for different device configurations, read the App resources overview. To learn more about best practices and designing robust, production-quality apps, see the Guide to app architecture.\n\nTo learn Android development using videos and code tutorials, see the Developing Android Apps with Kotlin Udacity course."
    },
    {
        "link": "https://stackoverflow.com/questions/44179996/using-default-function-implementation-of-interface-in-kotlin",
        "document": "If you know you won't be overriding the function in any implementations of your interface, you can use extension functions as a nice workaround for this issue. Just put an extension function in the same file as the interface (and at the top level so other files can use it).\n\nFor example, what you're doing could be done this way:\n\nSee the docs on extension functions for more information about them.\n\nWe would like to emphasize that extension functions are dispatched statically, i.e. they are not virtual by receiver type. This means that the extension function being called is determined by the type of the expression on which the function is invoked, not by the type of the result of evaluating that expression at runtime.\n\nPut simply, extension functions don't do what you might expect from regular polymorphism. What this means for this workaround is that the default function cannot be overridden like a regular function. If you try to override it, you'll get some weird behavior, because the \"overridden\" version will be called whenever you're dealing explicitly with the subclass, but the extension version will be called when you're dealing with the interface generically. For example:"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/android-button-using-kotlin",
        "document": "In this tutorial, we’ll learn how to create a Button in Android apps using Kotlin programming.\n\nAndroid Button class extends TextView. Button is a UI widget that is used to get click interactions from the user to trigger an action in the application. A button can be created in the XML layout as well as the Kotlin Activity class in the Android Studio Project.\n• android:id is used to set the unique identifier on the Button.\n• The is used to set the text inside the button. By default text is displayed in capital letters.\n• is used to define the Kotlin function to be invoked in the activity when the button is clicked. It is a click listener.\n• The is used to set the background color/drawable on the Button.\n\nTip: To prevent displaying all letters in captial, use the attribute\n\nFor more details on how to customize your Buttons in XML Layout refer to the Android Buttons Tutorial.\n\nWe can set button listeners programmatically too. Following are the two major listeners:\n• - triggers when a button is pressed for a longer duration.\n\nFollowing code snippets has the setOnClickListener set over a button.\n\nThe above code can be converted in a lambda expression to make it short.\n\nSimilarly, a setOnLongClickListener can be defined in the following manner.\n\nIn the above code, the last statement in each of the expressions is the return statement.\n• If the setOnLongClickListener returns true, it means that the setOnClickListener won’t be triggered.\n• If the setOnLongClickListener returns false, it means that the setOnClickListener will be triggered.\n\nThis is known as consuming events. The first case consumes the event.\n\nWe’ll be developing an application that increments the counter of the TextView on a Button click. We will use Kotlin to create the button. We’ll also learn about the different Button click handlers.\n\nCreate a new Android Studio Project. Ensure that in the initial setup, you enable Kotlin Support. Once you’re done, following is the Project Structure that you shall see.\n\nThe activity_main.layout file looks like the following code.\n\nWe’ve used LinearLayout that holds the views linearly (horizontally or vertically). It’s recommended to set the strings in the strings.xml file instead of hardcoding them. To fetch a string resource we use . The function is defined in the MainActivity.kt Kotlin class. The code for the MainActivity.kt class is given below.\n• statement automatically gets the view IDs from the xml in our class. Hence saving us from using findViewById.\n• The is triggered when the is clicked. The parameter must be defined in the function declaration.\n• Create a Button programmatically and set it in the parent view(LinearLayout here) using the following code.\n• Instead of calling member functions on the Button class, we can use lambda expression.\n• The is used to define the width and height of the button. The sets the width/height equal to the linear layout. wraps the view to the size of the content.\n• We can set the id programmatically under res | values | ids.xml.\n• We’ve defined the interface in our class. Hence we need to override its onClick() function.\n• Inside the function, we use the Kotlin when statement, which is equivalent to switch in other languages.\n• For the function to be triggered, you must register the over the button with the interface using the context( )."
    },
    {
        "link": "https://developer.android.com/develop/ui/views/components/button",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nA button consists of text or an icon, or both, that communicates what action occurs when the user taps it.\n\nYou can create a button in your layout in one of three ways, depending on whether you want a button with text, an icon, or both:\n\nThe previous code generates something like this:\n\nWhen the user taps a button, the object receives an on-click event.\n\nTo declare the event handler programmatically, create an object and assign it to the button by calling , as in the following example:\n\nThe appearance of your button—the background image and font—varies between devices, because devices by different manufacturers often have different default styles for input controls.\n\nTo customize individual buttons with a different background, specify the attribute with a drawable or color resource. Alternatively, you can apply a style for the button, which works in similarly to HTML styles to define multiple style properties such as the background, font, and size. For more information about applying styles, see Styles and themes.\n\nOne design that can be useful is a \"borderless\" button. Borderless buttons resemble basic buttons except that they have no borders or background but still change appearance during different states, such as when tapped.\n\nTo create a borderless button, apply the style to the button, as in the following example:\n\nIf you want to truly redefine the appearance of your button, you can specify a custom background. Instead of supplying a simple bitmap or color, however, your background must be a state list resource that changes appearance depending on the button's current state.\n\nYou can define the state list in an XML file that defines three images or colors to use for the different button states.\n\nTo create a state list drawable for your button background, do the following:\n• Create three bitmaps for the button background that represent the default, tapped, and focused button states. To ensure that your images fit buttons of various sizes, create the bitmaps as nine-patch bitmaps.\n• Place the bitmaps into your project's directory. Name each bitmap to reflect the button state it represents, such as , , and .\n• Create a new XML file in the directory. Name it something like . Insert XML like the following: This defines a single drawable resource that changes its image based on the current state of the button.\n• The first defines the bitmap to use when the button is tapped (activated).\n• The second defines the bitmap to use when the button is focused, such as when the button is highlighted using the trackball or directional pad.\n• The third defines the bitmap to use when the button is in the default state, neither tapped nor focused. Note: The order of the elements is important. When this drawable is referenced, the elements are traversed in order to determine which one is appropriate for the current button state. Because the default bitmap is last, it is only applied when the conditions and are evaluated as false. This XML file represents a single drawable resource. When referenced by a for its background, the image displayed changes based on the button's state.\n• Apply the drawable XML file as the button background:\n\nFor more information about this XML syntax, including how to define a button that is disabled, hovered, or in another state, read about ."
    },
    {
        "link": "https://developer.android.com/reference/android/widget/Button",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/6091194/how-to-handle-button-clicks-using-the-xml-onclick-within-fragments",
        "document": "Pre-Honeycomb (Android 3), each Activity was registered to handle button clicks via the tag in a Layout's XML:\n\nWithin that method you can use and a switch statement to do the button logic.\n\nWith the introduction of Honeycomb I'm breaking these Activities into Fragments which can be reused inside many different Activities. Most of the behavior of the buttons is Activity independent, and I would like the code to reside inside the Fragments file without using the old (pre 1.6) method of registering the for each button.\n\nThe problem is that when my layout's are inflated it is still the hosting Activity that is receiving the button clicks, not the individual Fragments. Is there a good approach to either\n• Register the fragment to receive the button clicks?\n• Pass the click events from the Activity to the fragment they belong to?"
    },
    {
        "link": "https://stackoverflow.com/questions/6372104/best-practice-for-defining-button-events-in-android",
        "document": "I have a defined in XML which consists of several s.\n\nCurrently I am doing this in the method to define the event handlers against the buttons:\n\nInside of the 's event, I launch a camera to get a picture and inside the callback I am again setting the event handlers along with setting the like this:\n\nI am new to android and this approach of redefining an event every time seems quite dirty to me. I would like to know what is the best practice in terms of defining button event handlers in scenarios like this.\n\nRe-registering events inside .. is it right approach? Or am I doing something wrong? Because If I don't re-register event nothing happens when I click the button."
    }
]