[
    {
        "link": "https://superuser.com/questions/700126/how-can-i-monitor-memory-usage-of-a-process-running-from-the-terminal-in-osx",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/28168054/how-to-get-cpu-utilisation-ram-utilisation-in-mac-from-commandline",
        "document": "I know that using Activity Monitor we can see CPU utilisation.But i want to get this information of my remote system through script. top command is not helpful for me. Please comment me any other way to get it."
    },
    {
        "link": "https://apple.stackexchange.com/questions/4286/is-there-a-mac-os-x-terminal-version-of-the-free-command-in-linux-systems",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://phoenixnap.com/kb/mac-terminal-commands",
        "document": "Apple's macOS is a POSIX-compliant UNIX operating system designed to run on Mac computers. The system features access to the command-line interface through the native Terminal app or third-party terminal emulators.\n\nWhile many Mac terminal commands are similar to Linux commands, macOS also features system-specific syntax designed to help Mac users manage their hardware and software.\n\nThis article provides a comprehensive list of Mac terminal commands alongside a downloadable PDF cheat sheet for easy reference.\n\nBasic commands for the Mac terminal include utilities for obtaining administrative privileges, manipulating the command output, and finding help. Read more about those commands in the sections below.\n\nUse the sudo command to authenticate as an administrator:\n\nExample\n\nRemove a directory the current user does not own:\n\nThere are two common scenarios for forwarding command output in macOS:\n• Use the symbol to pipe the command output as an argument to another command:\n\nExample\n\nUse the wc command to count the number of words in the output:\n• Prevent the output of the command from showing in the standard output:\n\nPrint text to standard output with the echo command:\n\nExample\n\nPrint the value of the variable:\n\nThe system keeps a record of the executed commands. See the list of the commands you previously used by typing:\n\nHelpful ways in which you can use the command history include:\n\nExample\n\nSee the last five entries:\n• Execute a command by referring to its value in history:\n• Execute the last history entry (the previous command):\n\nMac terminal comes with built-in help features. You can access command-line help in two ways:\n• Adding the option displays a summary of the command's functionalities:\n\nExample\n\nRead the help summary for the command:\n\nUse the commands listed in the following sections to manipulate the files on your system. The commands cover all the basic file management operations, such as creating, modifying, and organizing the files.\n\nOpen any file on the system:\n\nIf the terminal cannot open the file, macOS detects the default application and opens the file in a separate window.\n\nExample\n\nOpen an image on your system:\n\nBelow is the list of the commands and options for viewing files in macOS:\n• The cat command prints the contents of the file to the standard output:\n\nExample\n\nOutput the contents of the file:\n• Show the file's contents one screen at a time using the less command:\n• Print the first ten lines of the file with the head command:\n• Choose the number of lines prints by adding the option:\n\nExample\n\nPrint the first three lines of the file:\n\nmacOS comes with two preinstalled command-line editors, Nano and Vim. Open the file in a command-line text editor by typing:\n\nUse the symbols to append content to a text file:\n\nExample\n\nAdd the words \"This is a test file\" to the file :\n\nYou can also append the contents of an entire file to another file:\n\nOverwrite the contents of a file from the command line by using the symbol.\n\nIf the file does not exist, the system creates it.\n\nBy using , you can replace the entire file contents with another file:\n\nUse the cp command to copy files in the Mac terminal. The basic syntax for copying a file is:\n\nExample\n\nCopy to the directory located in the home directory:\n\nOther capabilities of the command include:\n• Create a copy of a file in the same directory:\n• Copy the file to another directory and change the filename:\n• If a filename contains spaces, surround it with quotation marks:\n• Copy multiple files to the same location:\n• See the warning if completing the operation would overwrite an already existing file:\n\nThe mv command moves the file to another location. The basic syntax is:\n\nExample\n\nMove the file to the home directory:\n\nUse to perform several more advanced actions, such as:\n• Move a file and change its name:\n• Move all the files with the same extension at once:\n\nExample\n\nMove all the YAML files to the directory:\n\nUse the rm command to delete files from the system:\n• Force remove the file with the option:\n• Remove multiple files at the same time:\n\nThe sections below present the most common commands for working with directories in a macOS terminal.\n\nDisplay the name of the current working directory with the command:\n\nThe cd command helps the directory tree navigation in macOS. The following is the basic syntax for the command:\n\nIf the user does not specify the path, opens the home directory. Alternatively, to go to the home directory, type:\n\nYou can also use the command to gain quick access to:\n• The root directory of the drive:\n• The directory two levels above:\n\nView the contents of a directory with the ls command:\n• See all directories and files, including the ones that are hidden:\n• View the list of directories and files with more details, including the file size, ownership, and permissions:\n\nUse the command with the option to copy directories:\n\nExample\n\nCopy the directory to the home directory:\n\nTo copy directory contents rather than the directory itself, use the command:\n\nThe command moves the directory to another directory. The syntax is the same as with moving files:\n\nDelete directories with the command and the option:\n\nAdd the -f option to force-remove all the files and sub-directories:\n\nMac terminal allows users to access information about file and directory sizes and the available storage space. The sections below list the commands related to storage monitoring.\n\nThe command outputs the amount of space utilized by files and subdirectories in the current directory:\n• provides an entry for specific files:\n\nExample\n\nDisplay memory in megabytes and pipe that output to the sort command to display the directories and files in descending order according to their size:\n\nDisplay the free disk space of the system.\n\nThe flag shows the values using the powers of 1024. To change the values to the powers of 1000, use the flag:\n\nManaging permissions in the Mac terminal includes viewing and changing access privileges related to specific files and directories and changing the item ownership. The following sections explain permission management in more detail.\n\nView the permissions related to a specific file by using the option and providing the filename as the argument:\n\nExample: View the permissions of :\n\nIf no directory path is specified, the command displays the permissions for the current working directory.\n\nChange read, write, and execute privileges of a file with the chmod command. The syntax for changing file permissions is:\n\nThe is a three-digit number in which digits represent user, group, and owner permissions. The number is a sum of all the permissions (read, write, and execute) given to the user, group, and owner.\n\nThe numerical values of the permissions are:\n• read has a value of 4.\n• write has a value of 2.\n• execute has a value of 1.\n• no permission has a value of 0.\n\nChange the permissions of the test.txt so that only the user can read, write, and execute it:\n\nUse the option to change directory permissions:\n\nChange which user owns the file by using the following syntax:\n\nMonitoring processes helps the user get a better picture of resource consumption on the machine and troubleshoot potential issues. Read this section to learn how to list, find, and stop running processes on a Mac machine.\n\nList the currently running processes sorted by PID (Process ID) with the ps command:\n\nTo see more details about each process, including the CPU and memory consumption, enter the following command:\n\nFor a detailed process list that updates in real time, use the top command:\n\nBy default, refreshes the view every second. Set a custom refresh interval by typing:\n\nAdjust the view in to see the data sorted by memory usage:\n\nTo sort the processes by CPU, type:\n\nSearch for a specific process by piping the output of the command to grep:\n\nUse the kill command to quit a misbehaving process by entering its PID:\n\nQuit a process by its name with the command:\n\nMac terminal supports many networking options, such as viewing and configuring the local network, connecting to remote computers, etc. The sections below explain how to perform the most common network operations.\n\nTest if a remote host is reachable on the network with the ping command:\n\nUse the command to view a list of devices on the local network, with their IP and MAC addresses:\n\nView the path of the packets from the machine to the destination with the traceroute command:\n\nDisplay the connected network adapters with the ifconfig command.\n\nTo view a specific adapter, pass its name as an argument to the command:\n\nThe curl command allows data transfers to and from remote servers. Use to download a file to your machine by using the option and passing the full URL as an argument:\n\nUse the following syntax to establish an SSH connection with a remote server:\n\nWhen connecting to a remote host for the first time, you may need to generate an SSH key:\n\nAfter generating the key, copy it to the remote host:\n\nManaging application execution parameters with environment variables is an important command-line functionality. Learn how to view and create variables in the following sections.\n\nDisplay the list of all the variables on the system with the command:\n\nUse to print the value of a specific variable:\n\nAdd a new binary path to the variable:\n\nCreate a new variable by passing its name and value to the command:\n\nThe following are the Mac terminal commands for finding files and content within files:\n\nSearch for in the directory:\n• Use the wildcard character to broaden your search.\n\nLook for all the TXT files in the directory:\n• Use to search for text within a file:\n• Find text in the command output by piping the output to :\n• To search for text across the files in a directory, use the following syntax:\n\nHomebrew is the default package manager for macOS. It provides Mac with functionalities usually found in Linux package managers, such as APT, RPM, etc. Below is the list of the most common Homebrew operations.\n\nBelow are the operations you can perform on Homebrew formulae and casks:\n• Remove the pin and allow the formula to update:\n\nLearn more about the state of your homebrew formulae and casks by using the commands below:\n• Display a list of the formulae currently installed on the system:\n• View a list of the currently installed casks:\n\nTroubleshoot potential problems with Homebrew with the following commands:\n• Clean the system from outdated packages and stale lock files:\n\nThe following is a list of useful terminal commands for maintaining your macOS system:\n\nMac terminal has many useful keyboard shortcuts for managing terminal windows and navigating the terminal. Below is the list of the most helpful shortcuts, divided into categories for easier browsing.\n\nWe created a handy Mac terminal commands cheat sheet as a one-page reference for all the essential macOS commands. Save the PDF list of macOS commands by clicking the Download the macOS Cheat Sheet button below.\n\nThis Mac terminal guide listed all the important commands for navigating the terminal and performing the basic file, directory, and network management functions.\n\nThe guide also provided a PDF cheat sheet with the same commands on one easy-to-navigate page for quicker reference."
    },
    {
        "link": "https://discussions.apple.com/thread/1699070",
        "document": "Has anyone parsed top to be available to periodically store values in a text file? \n\n \n\nMy idea is to build up a profile of application usage during the day showing when applications were run, how many open and what impact is on the system resources. I don't think there are any utilities (free or otherwise) out there that do this."
    },
    {
        "link": "https://developer.apple.com/library/archive/documentation/Performance/Conceptual/ManagingMemory/Articles/VMPages.html",
        "document": "If you need more detailed information about virtual memory usage, you can use the , , , and command-line tools for analyzing your Mac apps. The information returned by these tools ranges from summary information about all the system processes to detailed information about a specific process.\n\nThe following sections provide information on using the , , and tools to gather detailed memory information. For more information on using Instruments to analyze memory, see Instruments User Guide and the other articles in this document. For information on how to use the tool, see Performance Overview.\n\nThe tool displays high-level statistics about the current virtual memory usage of the system. By default, displays these statistics once, but you can specify an interval value (in seconds) to update these statistics continuously. For information on the usage of this tool, see the man page. Listing 1 shows an example of the output from .\n\nThe tool displays information about the specified logical pages of a file conforming to the Mach-O executable format. For each specified page of code, symbols (function and static data structure names) are displayed. All pages in the section are displayed if no page numbers are given. Listing 2 shows part of the output from for the TextEdit application. This output is the result of running the tool with the option, which prints information about all of the executable’s code pages. It includes the virtual address locations of each page and the type of information on that page. In the preceding listing, if a page exports any symbols, those symbols are also displayed by the option. If you want to view the symbols for a single page, pass in the desired page number instead of the option. For more information about the tool and its supported options, see the man page.\n\nThe and tools display the virtual memory regions allocated for a specified process. These tools provide access to the virtual memory of 32-bit and 64-bit applications, respectively. You can use them to understand the purpose of memory at a given address and how that memory is being used. For each virtual-memory region, these tools display the type of page, the starting address, region size (in kilobytes), read/write permissions, sharing mode, and the purpose of the pages in that region. The following sections show you how to interpret the output from the tool. For more information about the and tools, see the or man pages. Listing 3 shows some sample output from the tool. This example is not a full listing of the tool’s output but is an abbreviated version showing the primary sections. If you specify the parameter (plus an interval in seconds), takes two snapshots of virtual-memory usage—one at the beginning of a specified interval and the other at the end—and displays the differences. It shows three sets of differences:\n• None regions in the first snapshot that are not in the second\n• None regions in the second snapshot that are not in the first The columns of output have no headings. Instead you can interpret the type of data in each column by its format. Table 1 describes these columns. , , , , and so on The purpose of the memory. This column can contain the name of a Mach-O segment or the memory allocation technique. If present, the zone used for allocation. The virtual memory address of the region. The size of the region, measured in kilobytes Read, write and execution permissions for the region. The first set of flags specifies the current protection for the region. The second set of values specifies the maximum protection for the region. If an entry contains a dash ( ), the process does not have the target permission. Sharing mode for the region, either (copy-on-write), (private), (empty), (aliased), or (shared). The end of the pathname identifying the executable mapped into this region of virtual memory. If the region is stack or heap memory, nothing is displayed in this column. Column 1 identifies the purpose of the memory. A segment contains read-only code and data. A segment contains data that may be both readable and writable. For allocated data, this column shows how the memory was allocated, such as on the stack, using , and so on. For regions loaded from a library, the far right column shows the name of the library loaded into memory. The size of the virtual memory region (column 4) represents the total size reserved for that region. This number may not reflect the actual number of memory pages allocated for the region. For example, calling reserves a set of memory pages but does not allocate any physical memory until the pages are actually touched. Similarly, a memory-mapped file may reserve a set of pages, but the system does not load pages until a read or write event occurs on the file. The protection mode (column 5) describes the access restrictions for the memory region. A memory region contains separate flags for read, write, and execution permissions. Each virtual memory region has a current permission, and a maximum permission. In the output from , the current permission appears first followed by the maximum permission. Thus, if the permissions are “ “ the page is currently read-only but allows read, write, and execution access as its maximum allowed permissions. Typically, the current permissions do not permit writing to a region. However, these permissions may change under certain circumstances. For example, a debugger may request write access to a page in order to set a breakpoint. Note: Pages representing part of a Mach-O executable are usually not writable. The first page ( , starting at address ) has no permissions set. This ensures that any reference to a pointer immediately causes an error. The page just before the stack is similarly protected so that stack overflows cause the application to crash immediately. The sharing mode ( field) tells you whether pages are shared between processes and what happens when pages are modified. Private pages ( ) are visible only to the process and are allocated as they are used. Private pages can also be paged out to disk. Copy-on-write ( ) pages are shared by multiple processes (or shared by a single process in multiple locations). When the page is modified, the writing process then receives its own copy of the page. Empty ( ) sharing implies that the page does not really exist in physical memory. Aliased ( ) and shared ( ) memory are shared between processes. The sharing mode typically describes the general mode controlling the region. For example, as copy-on-write pages are modified, they become private to the application. However, the region containing those private pages is still copy-on-write until all pages become private. Once all pages are private, the sharing mode changes to private. Some lines in the output of describe submaps. A submap is a shared set of virtual memory page descriptions that the operating system can reuse between multiple processes. For example, the memory between and is a submap containing the most common dynamic libraries. Submaps minimize the operating system’s memory usage by representing the virtual memory regions only once. Submaps can either be shared by all processes (machine-wide) or be local to the process (process-only). If the contents of a machine-wide submap are changed—for example, the debugger makes a section of memory for a dynamic library writable so it can insert debugging traps—then the submap becomes local, and the kernel allocates memory to store the extra copy."
    },
    {
        "link": "https://stackoverflow.com/questions/14150626/understanding-vm-stat-in-mac-os-how-to-convert-those-numbers-to-something-simil",
        "document": "I'm trying to write a mac os program to monitor the system (something similar to the activity monitor). I have looked at the function vm_stat and when I run it I got this:\n\nHowever when I run the activity monitor, I got something like:\n\nI have a question regarding this: how come the pages free in vmstat is so small (comparing to activity monitor)"
    },
    {
        "link": "https://apple.stackexchange.com/questions/4286/is-there-a-mac-os-x-terminal-version-of-the-free-command-in-linux-systems",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://blog.greggant.com/posts/2024/07/03/macos-memory-management.html",
        "document": "This blog post is adapted from a YouTube video script. The video can be found below.\n\nWhen Apple Silicon first launched, you'd hear goofy statements from Apple and various publications regarding RAM and Apple Silicon. One of the most common assertions Apple made was that 8 GB of RAM on Apple Silicon was equivalent to 16 GB of RAM on an Intel Mac. I'd argue today, the majority of users understand 8 GB of RAM is not 16 GB, regardless of the process type. What makes 8 GB still usable in 2024, even if not ideal, is the memory management in macOS. This will be a high-level overview of how macOS manages memory, so you better understand your own Mac.\n\nFirst, open Activity Monitor on your macOS and click on the Memory tab. Here, you'll see a list of all the applications and processes currently running.\n\nThe most important thing to understand is the memory pressure graph at its most basic:\n• Green: Your Mac is using memory efficiently.\n• Yellow: You might need to free up RAM as performance could be reduced.\n• Red: Your Mac needs more RAM, and performance is suffering.\n\nThis is also reflected in the graph itself. Freeing up RAM is generally accomplished by quitting applications and processes or by rebooting.\n\nTo the right of Memory Pressure are two columns that provide an overview of your Mac's memory usage. Starting with the first column:\n• Physical Memory: This shows how much RAM is installed in your system. Note that on Apple Silicon Macs, this cannot be upgraded.\n• Memory Used: This details how much RAM is currently being used, broken down into several categories:\n• App Memory: The amount of RAM being used by applications.\n• Wired Memory: The RAM required by the operating system to function, which cannot be cached.\n• Compressed Memory: RAM that has been compressed to free up space for other processes.\n\nThe Role of Cached Files and Swap Used\n\nCached Files: These are stored in unused memory to speed up performance. With modern macOS, unused RAM is wasted RAM, so it's uncommon to see macOS with a lot of free RAM. This is important to understand for long-time Mac users who remember checking for the amount of unused memory to gauge system performance. This no longer applies to macOS.\n\nSwap Used: This indicates the space used on your startup drive for memory page outs, functioning as a memory extension when the physical RAM is fully utilized.\n\nmacOS uses a technique called virtual memory management. Here, each application thinks it has access to a large block of memory, which is actually a combination of physical RAM and swap space managed dynamically by the OS.\n\nIf you have less physical RAM, your system will rely more on swap space. Modern SSDs, which are very fast, make this process generally transparent to the user. Over usage or reliance on swap space can cause wear and tear on the SSD over time. A larger SSD will have more memory cells to rotate, thus will have a longer life. It's not uncommon to see SSDs advertise terrabytes written (TBW), a common metric for advertising longevity of an SSD, radically increase as the size increases. Apple gets a lot of well-deserved criticism for selling RAM-starved computers with small SSDs that aren't user-serviceable. While SSDs generally are considered more stable than their spinning disk counter parts, they have a finite shelf life.\n\nApple Silicon uses unified memory for both its CPU and GPU. This means both can access the same memory, reducing redundancy and improving efficiency. While Intel's iGPUs used unified memory, this is a significant upgrade, which required separate memory pools. The downside, when compared to a dedicated GPU, is that the RAM pulls double duty as video operations are now in the RAM. This means that data such as frame buffers, shaders, textures, vertex data, geometry buffers, render targets and so on, are no longer stored within VRAM, rather RAM, thus the RAM is now pulling double-duty as the RAM and VRAM. For lower memory configured devices, this can tax the RAM further. At more extreme configurations like a Mac Studio with 192 GB of RAM, this means access to far more video memory than a traditional GPU would have.\n• Virtual Memory Compression: Introduced in macOS Mavericks (10.9), this feature compresses inactive processes to free up more RAM.\n• App Nap: This reduces the priority of inactive applications, saving memory and battery life.\n• Application Save States: Allows apps to be quit and relaunched to their previous state, freeing up memory.\n\nSome of Apple's energy saving and performance techniques also affect memory management such as App Napping. App napping works by detecting inactive applications, reducing their priority to minimize the amount of resources they consume. If an app meets certain criteria such as the app isn't visible to the user, isn't playing audio, or is performing a service like downloading a file, it can be put to sleep. This has memory implications, as napped applications are generally prioritized for memory swaps and memory compression.\n\nIf we go to the CPU section in the activity monitor, we can add the column App Nap and see the apps that are actively in a nap state.\n\nFor those who want to get geekier, macOS offers several CLI utilities out of the box. These can be accessed from the terminal by running the following commands:\n• : An terminal-based activity monitor. If you'd like an even more powerful activity monitor consider using via Homebrew for a more user-friendly experience).\n\nSwitching from Mac OS 9 to OS X brought many improvements, including protected memory, which enhances security and reliability. While modern macOS has made significant strides in memory management, it's always a good idea to keep your system optimized and understand how it uses resources.\n\nFor a deep dive, check out the Developer Documentation and this Informit Article."
    },
    {
        "link": "https://medium.com/@pedromilani14/dive-deep-into-your-macos-terminal-commands-you-didnt-know-you-needed-160dbaabbaae",
        "document": "Ever felt like the captain of a ship, yearning to understand the intricate details of your vessel? For macOS users, the Terminal is the bridge of that ship, offering a treasure trove of commands to dive deep into the system’s abyss. Join us on this voyage as we uncover 30 intriguing commands that will not only pique your interest but also elevate your macOS experience.\n\nNOTE: Not all of the commands from the list of 30 require installation via Homebrew or other package managers, but many of them do because they aren’t included by default in macOS. Here’s a breakdown:\n• - Most Linux distributions come with this pre-installed, but macOS does not. You would need to install it.\n• - This might be pre-installed on some systems, but its availability can vary.\n\nFor tools that require installation, the recommended method on macOS is using Homebrew. Once you have Homebrew installed, installing any of these tools is as simple as running .\n\nEver stumbled upon a command and wondered what magic it conjures? Let’s demystify this one!\n• : It’s a command that allows you to execute another command periodically and display its output in full screen.\n• : This simply tells to rerun the \"show\" (or command) every 1 second.\n• : This is the tool we want to run. It just displays the current date and time.\n• (Pipe): Imagine this as a conveyor belt, taking the output of one process and delivering it to another. It connects two commands, allowing them to talk to each other.\n• : A trusty search tool. Here, it's used to sprinkle some color on our output.\n• : This tells to decide on its own if it should add color. If your terminal can handle it, brings out the colors!\n• : This is the search pattern. It's like telling to match everything, hence coloring every line.\n\nMonitor how programs evolve in real-time. It’s like having a surveillance camera for your commands.\n\nWitness the real-time drama of processes jostling for CPU dominance.\n\nEver wondered how your Mac allocates memory? Peek into its thought process.\n\nDecode the cryptic conversations between your CPU and disk.\n\nSail through the tumultuous seas of network packets and connections.\n\nWatch the highway of your data traffic, spot the speedsters.\n\n7. dstat: The Jack of All Trades\n\nWhy settle for one when you can have the combined might of vmstat, iostat, and netstat?\n\nAscend to the peak of process monitoring with an enhanced, colorful view.\n\nTake a fleeting yet comprehensive look at your system’s soul.\n\nVisualize the rivers of data flowing in and out of your system.\n\nGuard and oversee your system’s stats in real-time.\n\nAn aesthetically pleasing alternative to ‘gtop’. Beauty with brains.\n\nWitness every byte as it traverses your network.\n\nKeep an eye on your network’s nocturnal activities.\n\nDelve into the secrets of data transfers within your system.\n\nChart the journey of your packets across the vast internet.\n\nChronicle every beat of your Mac’s heart — the CPU.\n\nProbe deep into the life stories of individual processes.\n\nSolve the mysteries of your data traffic.\n\nDive deep to uncover what’s eating up your disk space.\n\nThe pinnacle of resource monitoring in the terminal.\n\nIlluminate the pathways of your bandwidth.\n\nNavigate the complex lanes of your Git repositories with ease.\n\nAn artistic blend of CPU and RAM usage visualization.\n\nRank your logs; see who’s on top.\n\nA whimsical display of animated pipes for your viewing pleasure."
    }
]