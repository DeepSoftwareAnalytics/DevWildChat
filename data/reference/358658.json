[
    {
        "link": "https://arduino.cc/en/Reference/serial",
        "document": ""
    },
    {
        "link": "https://arduino.cc/en/Reference/softwareSerial",
        "document": ""
    },
    {
        "link": "https://docs.arduino.cc/software/ide-v2/tutorials/ide-v2-serial-monitor",
        "document": ""
    },
    {
        "link": "https://forum.arduino.cc/t/serial-input-basics-updated/382007",
        "document": ""
    },
    {
        "link": "https://arduino.cc/reference/tr/language/functions/communication/serial",
        "document": "The Arduino Reference text is licensed under a Creative Commons Attribution-Share Alike 3.0 License.\n\nFind anything that can be improved? Suggest corrections and new documentation via GitHub.\n\nDoubts on how to use Github? Learn everything you need to know in this tutorial."
    },
    {
        "link": "https://docs.arduino.cc/learn/communication/bluetooth",
        "document": ""
    },
    {
        "link": "https://forum.arduino.cc/t/most-efficient-way-to-use-ble-with-arduino/501262",
        "document": "Hello guys, i have a project using an arduino pro micro + accelerometer + bluetooth low energy device(HM-10) sending data to an app every time the accel picks up something so the app reacts according to the input and for that i need to be paired with the phone the entire time.\n\nThe problem is that i need to run this project on a battery, so i thought i will put the hm-10 to sleep, disable leds and all that good stuff, and when it get the signal from accel it will wake up, connect to the last connected device, send the data to the phone and goes back to sleep, but i could not get connect to the last device as a slave module.\n\nSo i was wondering if there is something i am missing, i know that i am suppose to make multiple short connection instead of a long unique connection since that is BLE philosophy, but maybe you guys have some different ideas on how i should approach this problem."
    },
    {
        "link": "https://forum.arduino.cc/t/bluetooth-low-energy-help/532494",
        "document": "I'm working on a project, and the arduino must connect to android via bluetooth low energy, I don't know how to make a custom app by android studio to connect to it, I don't know how to make a communication between arduino and android by BLE :(( please help me !!!\n\nI know how to make an app on android studio\n\n The problem here is I don't know how to create an app to communicate with arduino by BLE :((\n\nNick_Pyner:\n\n Well, I guess that's the app you need to know about...\n\n Not an Arduino problem. But It involve both android and arduino :< I don't know how to program a BLE communicator on arduino, too :< I ask this question hope someone who have already done this will answer :<\n\nharrynguyen:\n\n Thanks for your reply, But It involve both android and arduino :< I don't know how to program a BLE communicator on arduino, too :< I ask this question hope someone who have already done this will answer :< What's the point of just asking for answer instead of learning how to make it?\n• What Arduino board do you have?\n• What BLE module have you got for your Arduino - post a link to the module's datasheet.\n• What do you want the Arduino to send to the phone?\n• What do you want the phone to send to the Arduino?\n• If you have any Arduino program then please post it. I have an arduino uno R3, a AT-09 module, datasheet: arduino-at-09/hm-10-datasheet.pdf at master · yostane/arduino-at-09 · GitHub , I want android and arduino communicate by simple message like L1 or F1... I've wrote a program to communicate with android, and I used Serial Bluetooth Terminal to connect and communicate with the arduino and it work perfectly but the point is I can't make a custom app\n\nharrynguyen:\n\n I've wrote a program to communicate with android, and I used Serial Bluetooth Terminal to connect and communicate with the arduino and it work perfectly but the point is I can't make a custom app When you say \"custom app\" do you mean a program that runs on your phone? If so then this is not the place to get advice. This Forum is about programs that run on an Arduino board. What program have you lost? If you wrote the program once, why can't you write it again?"
    },
    {
        "link": "https://instructables.com/Talk-to-an-Arduino-With-an-iOS-device-using-Blueto",
        "document": "Introduction: Talk to an Arduino With an IOS Device Using Bluetooth Low Energy This is a simple afternoon project to get your iOS device talking with Red Bear Lab's Bluetooth Low Energy Shield. \n\n\n\n For this project you will need\n\n\n\n an Arduino (we'll use the Leonardo)\n\n an iPhone 4s, 5, iPad 3, 4, mini, or an iPod Touch 5th generation.\n\n Bluetooth Low Energy Shield from Red Bear Labs (http://redbearlab.com/bleshield/)\n\n 4 or 5 LEDs\n\n a momentary push switch\n\n some wire\n\n a bread board or proto-shield\n\n\n\n Red Bear lab's provide an app in the App Store that is general purpose enough to get your BLE-compaitble ios device talking to the shield, but what if we want to take it a little farther, and write our own custom app? Well thats what we are going to cover today. \n\n\n\n NOTE!!! TO RUN A CUSTOM APP ON YOUR IOS DEVICE THAT IS NOT IN THE APP STORE YOU WILL NEED TO BE ENROLLED IN THE IOS DEVELOPER PROGRAM WITH APPLE. it is $100 dollars and is not not covered in this tutorial.\n\n\n\n\n\n\n\nThe hard ware side of things will be simple enough. We're going to use 4 LEDs connected to some of the PWM pins on the Arduino. we're going to use another LED to indicate connectivity to the iPhone, and a push button to trigger some action on the phone. \n\n\n\n The BLE shield uses Pin 8 and 9 to do its stuff, so its a good idea to leave those alone.\n\n\n\n the positive terminals from our LEDs will be going to the following pins on the Arduino\n\n\n\n 3, 5, 6, and 10\n\n\n\n The negative terminals will all go to a common ground. I did not use any resistors in my project, depending on which LEDs you use, you may want to include them.\n\n\n\n I'm using on of the LEDs on my proto-shield connected to pin 4 on the Arduino to indicate connectivity with the phone, and one of the toggle switches connected to pin 7. \n\n\n\n\n\n\n\n\n\nRed Bear Labs has a ton of great code for iOS, Mac OS X, and the Arduino to browse through on their GitHub page. Included in that is the Bluetooth Shield SDK. You'll want to grab support libraries from the link on their site http://redbearlab.com/bleshield/ and drop them in your Arduino libraries folder, or import them through the Arduino IDE.\n\n\n\n After you've got them imported, check out the Sketch here \n\n it is a bare bones sketch that reads from the BLE shield one byte at a time. The First byte it reads is the pin to address, the second byte is the value (0-255) to apply to the LED at that pin.\n\nFor the iOS interface we're going to keep it simple and just use a typical Analogue game pad and a connect button. the code for the Analogue stick control comes curtisy of https://www.cocoacontrols.com/controls/jscontroller\n\n\n\n should note that the SDK from red bear labs can also be used to Mac OS X applications....\n\n\n\n\n\n In order to build the project and run it on a physical device you will need to join Apples iOS developer program, and have Xcode installed. \n\n\n\n Grab the code from https://github.com/scottCheezem/BlueRCiOS/tree/LED_example I've included the headers from Red Bear Labs and the Analogue stick controls. It should be ready to build and go, but I've only tested it on my iPhone 5 with iOS 7 beta 3\n\n\n\n The project is built from a single view template. Joystick, a label for the signal, and a button to toggle connections - what more could you ask for in a remote control app.\n\nIf you've gotten this far, you have the LEDs wired up, the Sketch uploaded on your Arduino, and the Xcode project running on your iOS device. After you press the connect button and see the bluetooth icon indicate that you are connected to the Arduino you should be ready to interact with the Sketch. As you move the analogue stick around on the iPhone, the LEDs light up. If you press the toggle button, the iPhone vibrates. \n\n\n\n\n\n So wouldn't it be neat if someone swapped out the LEDs for some motors and added a bumper to the toggle button?"
    },
    {
        "link": "https://randomnerdtutorials.com/esp32-bluetooth-low-energy-ble-arduino-ide",
        "document": "The ESP32 comes not only with Wi-Fi but also with Bluetooth and Bluetooth Low Energy (BLE). This post is a quick introduction to BLE with the ESP32. First, we’ll explore what’s BLE and what it can be used for, and then we’ll take a look at some examples with the ESP32 using Arduino IDE. For a simple introduction we’ll create an ESP32 BLE server, and an ESP32 BLE scanner to find that server.\n\nFor a quick introduction to BLE, you can watch the video below, or you can scroll down for a written explanation.\n\nRecommended reading: learn how to use ESP32 Bluetooth Classic with Arduino IDE to exchange data between an ESP32 and an Android smartphone.\n\nBluetooth Low Energy, BLE for short, is a power-conserving variant of Bluetooth. BLE’s primary application is short distance transmission of small amounts of data (low bandwidth). Unlike Bluetooth that is always on, BLE remains in sleep mode constantly except for when a connection is initiated.\n\nThis makes it consume very low power. BLE consumes approximately 100x less power than Bluetooth (depending on the use case).\n\nAdditionally, BLE supports not only point-to-point communication, but also broadcast mode, and mesh network.\n\nTake a look at the table below that compares BLE and Bluetooth Classic in more detail.\n\nDue to its properties, BLE is suitable for applications that need to exchange small amounts of data periodically running on a coin cell. For example, BLE is of great use in healthcare, fitness, tracking, beacons, security, and home automation industries.\n\nWith Bluetooth Low Energy, there are two types of devices: the server and the client. The ESP32 can act either as a client or as a server.\n\nThe server advertises its existence, so it can be found by other devices, and contains the data that the client can read. The client scans the nearby devices, and when it finds the server it is looking for, it establishes a connection and listens for incoming data. This is called point-to-point communication.\n\nAs mentioned previously, BLE also supports broadcast mode and mesh network:\n• Broadcast mode: the server transmits data to many clients that are connected;\n• Mesh network: all the devices are connected, this is a many to many connection.\n\nEven though the broadcast and mesh network setups are possible to implement, they were developed very recently, so there aren’t many examples implemented for the ESP32 at this moment.\n\nGATT stands for Generic Attributes and it defines an hierarchical data structure that is exposed to connected BLE devices. This means that GATT defines the way that two BLE devices send and receive standard messages. Understanding this hierarchy is important, because it will make it easier to understand how to use the BLE and write your applications.\n\nThe top level of the hierarchy is a profile, which is composed of one or more services. Usually, a BLE device contains more than one service.\n\nEvery service contains at least one characteristic, or can also reference other services. A service is simply a collection of information, like sensor readings, for example.\n\nThere are predefined services for several types of data defined by the SIG (Bluetooth Special Interest Group) like: Battery Level, Blood Pressure, Heart Rate, Weight Scale, etc. You can check here other defined services.\n\nThe characteristic is always owned by a service, and it is where the actual data is contained in the hierarchy (value). The characteristic always has two attributes: characteristic declaration (that provides metadata about the data) and the characteristic value.\n\nAdditionally, the characteristic value can be followed by descriptors, which further expand on the metadata contained in the characteristic declaration.\n\nThe properties describe how the characteristic value can be interacted with. Basically, it contains the operations and procedures that can be used with the characteristic:\n\nEach service, characteristic and descriptor have an UUID (Universally Unique Identifier). An UUID is a unique 128-bit (16 bytes) number. For example:\n\nThere are shortened UUIDs for all types, services, and profiles specified in the SIG (Bluetooth Special Interest Group).\n\nBut if your application needs its own UUID, you can generate it using this UUID generator website.\n\nIn summary, the UUID is used to uniquely identify information. For example, it can identify a particular service provided by a Bluetooth device.\n\nThe ESP32 can act as a BLE server or as a BLE client. There are several BLE examples for the ESP32 in the ESP32 BLE library for Arduino IDE. This library comes installed by default when you install the ESP32 on the Arduino IDE.\n\nNote: You need to have the ESP32 add-on installed on the Arduino IDE. Follow the next tutorial to prepare your Arduino IDE to work with the ESP32, if you haven’t already.\n\nIn your Arduino IDE, you can go to File > Examples > BLE and explore the examples that come with the BLE library.\n\nNote: to see the ESP32 examples, you must have the ESP32 board selected on Tools > Board.\n\nFor a brief introduction to the ESP32 with BLE on the Arduino IDE, we’ll create an ESP32 BLE server, and then an ESP32 BLE scanner to find that server. We’ll use and explain the examples that come with the BLE library.\n\nTo follow this example, you need two ESP32 development boards. We’ll be using the ESP32 DOIT DEVKIT V1 Board.\n\nTo create an ESP32 BLE Server, open your Arduino IDE and go to File > Examples > BLE and select the Server example. The following code should load:\n\nFor creating a BLE server, the code should follow the next steps:\n• Create a BLE Server. In this case, the ESP32 acts as a BLE server.\n• Start advertising, so it can be found by other devices.\n\nLet’s take a quick look at how the BLE server example code works.\n\nIt starts by importing the necessary libraries for the BLE capabilities.\n\nThen, you need to define a UUID for the Service and Characteristic.\n\nYou can leave the default UUIDs, or you can go to uuidgenerator.net to create random UUIDs for your services and characteristics.\n\nIn the setup(), it starts the serial communication at a baud rate of 115200.\n\nThen, you create a BLE device called “MyESP32”. You can change this name to whatever you like.\n\nIn the following line, you set the BLE device as a server.\n\nAfter that, you create a service for the BLE server with the UUID defined earlier.\n\nThen, you set the characteristic for that service. As you can see, you also use the UUID defined earlier, and you need to pass as arguments the characteristic’s properties. In this case, it’s: READ and WRITE.\n\nAfter creating the characteristic, you can set its value with the setValue() method.\n\nIn this case we’re setting the value to the text “Hello World says Neil”. You can change this text to whatever your like. In future projects, this text can be a sensor reading, or the state of a lamp, for example.\n\nFinally, you can start the service, and the advertising, so other BLE devices can scan and find this BLE device.\n\nThis is just a simple example on how to create a BLE server. In this code nothing is done in the loop(), but you can add what happens when a new client connects (check the Notify example for some guidance).\n\nCreating an ESP32 BLE scanner is simple. Grab another ESP32 (while the other is running the BLE server sketch). In your Arduino IDE, go to File > Examples > BLE and select the Scan example. The following code should load.\n\nThis code initializes the ESP32 as a BLE device and scans for nearby devices. Upload this code to your ESP32. You might want to temporarily disconnect the other ESP32 from your computer, so you’re sure that you’re uploading the code to the right ESP32 board.\n\nOnce the code is uploaded and you should have the two ESP32 boards powered on:\n• One ESP32 with the “BLE_server” sketch;\n\nGo to the Serial Monitor with the ESP32 running the “BLE_scan” example, press the ESP32 (with the “BLE_scan” sketch) ENABLE button to restart and wait a few seconds while it scans.\n\nThe scanner found two devices: one is the ESP32 (it has the name “MyESP32“), and the other is a smart watch.\n\nTesting the ESP32 BLE Server with Your Smartphone\n\nMost modern smartphones should have BLE capabilities. I was using a OnePlus, but most smartphones should also work.\n\nYou can scan your ESP32 BLE server with your smartphone and see its services and characteristics. For that, we’ll be using a free app called nRF Connect for Mobile from Nordic, it works on Android (Google Play Store) and iOS (App Store).\n\nGo to Google Play Store or App Store and search for “nRF Connect for Mobile”. Install the app and open it.\n\nDon’t forget go to the Bluetooth settings and enable Bluetooth adapter in your smartphone. You may also want to make it visible to other devices to test other sketches later on.\n\nOnce everything is ready in your smartphone and the ESP32 is running the BLE server sketch, in the app, tap the scan button to scan for nearby devices. You should find an ESP32 with the name “MyESP32”.\n\nAs you can see in the figure below, the ESP32 has a service with the UUID that you’ve defined earlier. If you tap the service, it expands the menu and shows the Characteristic with the UUID that you’ve also defined.\n\nThe characteristic has the READ and WRITE properties, and the value is the one you’ve previously defined in the BLE server sketch. So, everything is working fine.\n\nIn this tutorial we’ve shown you the basic principles of Bluetooth Low Energy and shown you some examples with the ESP32. We’ve explored the BLE server sketch and the BLE scan sketch. These are simple examples to get you started with BLE.\n\nThe idea is using BLE to send or receive sensor readings from other devices.\n\nOther Bluetooth-related tutorials that you may like:\n• ESP32 with Bluetooth and Bluetooth Low Energy: The Ultimate Guide\n\nThis is an excerpt from our course: Learn ESP32 with Arduino IDE. If you like ESP32 and you want to learn more about it, we recommend enrolling in Learn ESP32 with Arduino IDE course.\n\nYou might also like reading:\n• ESP32 with DC Motor and L298N Motor Driver – Control Speed and Direction"
    },
    {
        "link": "https://reddit.com/r/arduino/comments/xsblvj/looking_for_an_android_to_arduino_via_usb_tutorial",
        "document": "I want to communicate (serially) between a arduino board and an android phone.\n\nI could easily write a sketch for the arduino to send serial data,\n\nbut I also need the android to have a menu and send control signals.\n\nI am currently illiterate with android coding."
    },
    {
        "link": "https://stackoverflow.com/questions/63628804/android-studio-serial-communication-with-arduino-via-usb",
        "document": "i am trying to pass data between my arduino nano and my app via usb. im using https://github.com/felHR85/UsbSerial/ library.\n\nafter a couple of trys using the example code provided I tried testing for the problem my test code:\n\nThe problem is that the UsbManager is allways empty and i think that the phone didnt detect the usb devise.\n\nI used both my arduino and my computer as the usb device and tried using my pocophone, samsung tablet and another samsung phone. and I used 2 different cables.\n\nI read that the problem could be with my device (even though I used 3 devices) i used usb host diagnostics app and this is the result:\n\nfirst time i am trying to use communication from any kind in android. thank you."
    },
    {
        "link": "https://instructables.com/Arduin-Adroid-USB-Serial-Communication",
        "document": "More by the author: I have made an Arduino based night lamp using photo resistor and problem with that is light levels was different from place to place, when I am testing I have used a value as a threshold to switch on the light and after fixing it in its final position that value is way off. So, to get the correct value I have to data log the photo resistor reading after fixing the light in place, which was a bit harder, because I cannot leave my laptop outside for data logging for a whole day. So I need a portable solution to my problem. Another project was, water supply near my place was limited, we get water only at fixed timings. so I made a device to turn on water motor at a fixed timings of day. I haven’t made any user interface for that device to change timings because timings get to change very infrequently. So I need a way to change timings without connecting laptop and recompiling Arduino code, that would be complicated for my parents. So I decided to make an android app that would send serial data to Arduino to change timings of water motor. In this instructable, I will explain how to create an android app that can communicate with Arduino by USB OTG cable, If you dont care about how to just download .apk file and install it in your phone to communicate with arduino.\n\nIn the welcome screen you should see configure button, by selecting it you should go to configuration page. There first option would be “SDK Manager”, by clicking that a new window will open by showing the details of current SDK. There would be an option to “launch standalone SDK Manager“, by clicking that good old SDK manager will be opened there you can add new SDK tool as required. Android studio has an emulator to test the android code, but unfortunately we cannot use that for this scenario because this involves a physical device talking to another device. Instead we can use an android phone itself to debug the code. Since we are using android device to debug the code we can just download “SDK Platform” of that specific version of the device, first know the android OS version of the phone. In my case I am using Samsung note3 which has 5.0 (lollipop) so just download “SDK Platform” from “Android 5.0.1 (API 21)” that should be enough.\n\nThe library I was using to make the communication is called physicaloid from http://www.physicaloid.com/ which was last updated 2 years ago and final update was not working (for me at least). So after discussing with people in github repository I managed to get the old working jar file for that library. By using this library we can not only communicate with Arduino but we can upload compiled hex files into Arduino, this library has avrdude functionality built-in.\n\nFirst I want to make an app that looks same as Arduino's serial monitor window. In the welcome screen of android studio there will be an option to create new project, select “Start a new android studio project” In the next page give your project name and location, then click next In the next page select the platform for which we are developing application and select correct version of your phone and click next In the next page by default “Blank activity” will be selected and leave it as it is for now. And in the next page name your activity (your main screen in the app). Then click finish, newly created project will be opened in android studio and we can work on it now\n\nIn the top left side of the main screen there will be a drop down menu ladled as android, change the option to project to see the directory structure of the project. In the directory structure by expanding “app” folder you can find lib folder that is the default folder to place our libraries. Copy the physicaloidlibrary.jar file and paste it in libs folder After pasting click “sync project with gradle files” button on the top. Now the library is added we can use its features in our code. Main activity that was automatically created when we first created project will be located in\n\nApp > src > main > java > YOUR_ACTIVITY And layout will be located at\n\nI have attached complete java file Serial_monitor.java first download it and compare it to these small code segments. First we have create all our UI elements and library variables next, in onCreate method we can initialise those variables we have created btOpen = (Button) findViewById(R.id.btOpen); btClose = (Button) findViewById(R.id.btClose); btWrite = (Button) findViewById(R.id.btWrite); etWrite = (EditText) findViewById(R.id.etWrite); tvRead = (TextView) findViewById(R.id.tvRead); spBaud = (Spinner) findViewById(R.id.spBaud); cbAutoscroll = (CheckBox)findViewById(R.id.autoscroll); mPhysicaloid = new Physicaloid(this); // setting the context for library now we can display Required UI elements on screen, I am calling a method to do this That method takes boolean argument which specifies weather app is connected to Arduino or not setEnabledUi(false); // not connected to Arduino so false //setEnabledUi method to set UI elements on screen private void setEnabledUi(boolean on) { if(on) { // if connected to device btOpen.setEnabled(false); //hide open button (already opened) spBaud.setEnabled(false); //hide baudrate selector cbAutoscroll.setEnabled(false); // hide autoscroll btClose.setEnabled(true); // display close button btWrite.setEnabled(true); // display send button etWrite.setEnabled(true); // display edittext field } else { // if not connected to device btOpen.setEnabled(true); //display open button spBaud.setEnabled(true); //display baudrate selector cbAutoscroll.setEnabled(true); //display autoscroll btClose.setEnabled(false); // hide close button (already closed) btWrite.setEnabled(false); // hide send button etWrite.setEnabled(false); // hide edittext field } } Now we displayed everything as needed, now we can add actions to our buttons. listener method for open button, In this method we cover baudrate setting, autoscroll option and connecting to device. public void onClickOpen(View v) { // setting the baudrate based on spinner String baudtext = spBaud.getSelectedItem().toString(); // get the text from spinner //switch statement to check for baud rate switch (baudtext) { case \"300 baud\": mPhysicaloid.setBaudrate(300); break; case \"1200 baud\": mPhysicaloid.setBaudrate(1200); break; case \"2400 baud\": mPhysicaloid.setBaudrate(2400); break; case \"4800 baud\": mPhysicaloid.setBaudrate(4800); break; case \"9600 baud\": mPhysicaloid.setBaudrate(9600); break; case \"19200 baud\": mPhysicaloid.setBaudrate(19200); break; case \"38400 baud\": mPhysicaloid.setBaudrate(38400); break; case \"576600 baud\": mPhysicaloid.setBaudrate(576600); break; case \"744880 baud\": mPhysicaloid.setBaudrate(744880); break; case \"115200 baud\": mPhysicaloid.setBaudrate(115200); break; case \"230400 baud\": mPhysicaloid.setBaudrate(230400); break; case \"250000 baud\": mPhysicaloid.setBaudrate(250000); break; default: // default is 9600 mPhysicaloid.setBaudrate(9600); } if(mPhysicaloid.open()) { // tries to connect to device and if device was connected setEnabledUi(true); if(cbAutoscroll.isChecked()) { // if auto scroll was selected tvRead.setMovementMethod(new ScrollingMovementMethod()); } // read listener, When new data is received from Arduino add it to Text view mPhysicaloid.addReadListener(new ReadLisener() { @Override public void onRead(int size) { byte[] buf = new byte[size]; mPhysicaloid.read(buf, size); tvAppend(tvRead, Html.fromHtml(\"<font color=blue>\" + new String(buf) + \"</fon t>\")); // add data to text viiew } }); } else { //Error while connecting Toast.makeText(this, \"Cannot open\", Toast.LENGTH_LONG).show(); } } public void onClickClose(View v) { //when close button is pressed if(mPhysicaloid.close()) { //close the connection to arduino mPhysicaloid.clearReadListener(); //clear read listener setEnabledUi(false); // set UI accordingly } } public void onClickWrite(View v) { // when send button is prressed String str = etWrite.getText().toString()+\"\\r\n\n\"; //get text from EditText if(str.length()>0) { byte[] buf = str.getBytes(); //convert string to byte array mPhysicaloid.write(buf, buf.length); //write data to arduino } } That's all everything is completed just connect your phone and run the program it should install and open."
    },
    {
        "link": "https://forum.arduino.cc/t/control-arduino-using-an-android-app/588469",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/28118353/android-to-arduino-usb-communication-reading",
        "document": "I've been looking at examples and I'm still not clear on how to actually read data from the usb port in my Android application. I'd like it to be event/intent driven but I'm pretty lost on how to do this. I have a BroadcastReceiver but I'm unsure what Intent.action I need to be looking for to catch data coming in. Any insight is appreciated!\n\nEdit: To clarify my Android device is a Nexus 9 running as a USB Host and I'm looking to communicate with an Arduino Leonardo.\n\nEdit2: At this point I have an Arduino sketch running sending a message over serial every 2 seconds. I have a button that based off of my understanding should read the buffer when pressed but doesn't actually do anything.\n\nThe result is simply that the textView is blank. If I don't do the conversion and drop the byte[].toString() in I get hex values that change each press but I'm not sure how to interpret that.\n\nEdit 3: Just some more information as some time has passed, I have disabled the Arduino Leonardo showing up as an HID keyboard input device as per Arduino being recognized as keyboard by android. I simply modified the USBDesc.h to remove \"#define HID_ENABLED\". This didn't change the situation. In the meantime I have also implemented the Physicaloid USB library and that proved unsuccessful as well. I am in the process of debugging/converting mik3y's USB-serial-for-android library but have so far been unable to test with it."
    }
]