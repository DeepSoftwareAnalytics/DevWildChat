[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse",
        "document": "This function is useful for setting date values based on string values, for example in conjunction with the method.\n\nThe formats that can handle are not explicitly specified, but there are a few invariants:\n• The date time string format (produced by ) must be supported.\n• If is any Date whose milliseconds amount is zero, then should be equal to any of the following: , , . This means the formats produced by and should be supported too.\n• The spec does not require support for the format produced by . However, major engines all try to support format.\n\nOther formats are implementation-defined and may not work across all browsers. A library can help if many different formats are to be accommodated. In fact, the unreliability of is one of the motivations for the API to be introduced.\n\nBecause is a static method of , you always use it as , rather than as a method of a object you created."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
        "document": "A JavaScript date is fundamentally specified as the time in milliseconds that has elapsed since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC (equivalent to the UNIX epoch). This timestamp is timezone-agnostic and uniquely defines an instant in history. Note: While the time value at the heart of a Date object is UTC, the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset. The maximum timestamp representable by a object is slightly smaller than the maximum safe integer ( , which is 9,007,199,254,740,991). A object can represent a maximum of ±8,640,000,000,000,000 milliseconds, or ±100,000,000 (one hundred million) days, relative to the epoch. This is the range from April 20, 271821 BC to September 13, 275760 AD. Any attempt to represent a time outside this range results in the object holding a timestamp value of , which is an \"Invalid Date\". There are various methods that allow you to interact with the timestamp stored in the date:\n• You can interact with the timestamp value directly using the and methods.\n• The and (when passed ) methods — which are automatically called in number coercion — return the timestamp, causing objects to behave like their timestamps when used in number contexts.\n• All static methods ( , , and ) return timestamps instead of objects.\n• The constructor can be called with a timestamp as the only argument.\n\nA date is represented internally as a single number, the timestamp. When interacting with it, the timestamp needs to be interpreted as a structured date-and-time representation. There are always two ways to interpret a timestamp: as a local time or as a Coordinated Universal Time (UTC), the global standard time defined by the World Time Standard. The local timezone is not stored in the date object, but is determined by the host environment (user's device). Note: UTC should not be confused with the Greenwich Mean Time (GMT), because they are not always equal — this is explained in more detail in the linked Wikipedia page. For example, the timestamp 0 represents a unique instant in history, but it can be interpreted in two ways:\n• As a UTC time, it is midnight at the beginning of January 1, 1970, UTC,\n• As a local time in New York (UTC-5), it is 19:00:00 on December 31, 1969. The method returns the difference between UTC and the local time in minutes. Note that the timezone offset does not only depend on the current timezone, but also on the time represented by the object, because of daylight saving time and historical changes. In essence, the timezone offset is the offset from UTC time, at the time represented by the object and at the location of the host environment. There are two groups of methods: one group gets and sets various date components by interpreting the timestamp as a local time, while the other uses UTC. The constructor can be called with two or more arguments, in which case they are interpreted as the year, month, day, hour, minute, second, and millisecond, respectively, in local time. works similarly, but it interprets the components as UTC time and also accepts a single argument representing the year. Note: Some methods, including the constructor, , and the deprecated / methods, interpret a two-digit year as a year in the 1900s. For example, is interpreted as June 24, 1999, not June 24, 99. See Interpretation of two-digit years for more information. When a segment overflows or underflows its expected range, it usually \"carries over to\" or \"borrows from\" the higher segment. For example, if the month is set to 12 (months are zero-based, so December is 11), it become the January of the next year. If the day of month is set to 0, it becomes the last day of the previous month. This also applies to dates specified with the date time string format.\n\nThere are many ways to format a date as a string. The JavaScript specification only specifies one format to be universally supported: the date time string format, a simplification of the ISO 8601 calendar date extended format. The format is as follows:\n• is the year, with four digits ( to ), or as an expanded year of or followed by six digits. The sign is required for expanded years. is explicitly disallowed as a valid year.\n• is the month, with two digits ( to ). Defaults to .\n• is the day of the month, with two digits ( to ). Defaults to .\n• is a literal character, which indicates the beginning of the time part of the string. The is required when specifying the time part.\n• is the hour, with two digits ( to ). As a special case, is allowed, and is interpreted as midnight at the beginning of the next day. Defaults to .\n• is the minute, with two digits ( to ). Defaults to .\n• is the second, with two digits ( to ). Defaults to .\n• is the millisecond, with three digits ( to ). Defaults to .\n• is the timezone offset, which can either be the literal character (indicating UTC), or or followed by , the offset in hours and minutes from UTC. Various components can be omitted, so the following are all valid:\n• Date-time form: one of the above date-only forms, followed by , followed by , , or . Each combination can be followed by a time zone offset. For example, (date-only form), (date-time form), or (date-time form with milliseconds and time zone) are all valid date time strings. When the time zone offset is absent, date-only forms are interpreted as a UTC time and date-time forms are interpreted as a local time. The interpretation as a UTC time is due to a historical spec error that was not consistent with ISO 8601 but could not be changed due to web compatibility. See Broken Parser – A Web Reality Issue. and the constructor both accept strings in the date time string format as input. Furthermore, implementations are allowed to support other date formats when the input fails to match this format. The method returns a string representation of the date in the date time string format, with the time zone offset always set to (UTC). Note: You are encouraged to make sure your input conforms to the date time string format above for maximum compatibility, because support for other formats is not guaranteed. However, there are some formats that are supported in all major implementations — like RFC 2822 format — in which case their usage can be acceptable. Always conduct cross-browser tests to ensure your code works in all target browsers. A library can help if many different formats are to be accommodated. Non-standard strings can be parsed in any way as desired by the implementation, including the time zone — most implementations use the local time zone by default. Implementations are not required to return invalid date for out-of-bounds date components, although they usually do. A string may have in-bounds date components (with the bounds defined above), but does not represent a date in reality (for example, \"February 30\"). Implementations behave inconsistently in this case. The page offers more examples about these non-standard cases.\n\nReturns the day of the month ( – ) for the specified date according to local time. Returns the day of the week ( – ) for the specified date according to local time. Returns the year (4 digits for 4-digit years) of the specified date according to local time. Returns the hour ( – ) in the specified date according to local time. Returns the milliseconds ( – ) in the specified date according to local time. Returns the minutes ( – ) in the specified date according to local time. Returns the month ( – ) in the specified date according to local time. Returns the seconds ( – ) in the specified date according to local time. Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970 00:00:00 UTC. (Negative values are returned for prior times.) Returns the time-zone offset in minutes for the current locale. Returns the day (date) of the month ( – ) in the specified date according to universal time. Returns the day of the week ( – ) in the specified date according to universal time. Returns the year (4 digits for 4-digit years) in the specified date according to universal time. Returns the hours ( – ) in the specified date according to universal time. Returns the milliseconds ( – ) in the specified date according to universal time. Returns the minutes ( – ) in the specified date according to universal time. Returns the month ( – ) in the specified date according to universal time. Returns the seconds ( – ) in the specified date according to universal time. Returns the year (usually 2–3 digits) in the specified date according to local time. Use instead. Sets the day of the month for a specified date according to local time. Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time. Sets the hours for a specified date according to local time. Sets the milliseconds for a specified date according to local time. Sets the minutes for a specified date according to local time. Sets the month for a specified date according to local time. Sets the seconds for a specified date according to local time. Sets the object to the time represented by the number of milliseconds since January 1, 1970 00:00:00 UTC. Use negative numbers for times prior. Sets the day of the month for a specified date according to universal time. Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time. Sets the hour for a specified date according to universal time. Sets the milliseconds for a specified date according to universal time. Sets the minutes for a specified date according to universal time. Sets the month for a specified date according to universal time. Sets the seconds for a specified date according to universal time. Sets the year (usually 2–3 digits) for a specified date according to local time. Use instead. Returns the \"date\" portion of the as a human-readable string like . Converts a date to a string following the ISO 8601 Extended Format. Returns a string representing the using . Intended to be implicitly called by . Returns a string with a locality sensitive representation of the date portion of this date based on system settings. Returns a string with a locality-sensitive representation of this date. Overrides the method. Returns a string with a locality-sensitive representation of the time portion of this date, based on system settings. Returns a string representing the specified object. Overrides the method. Returns a new object with the same value as this date's timestamp. Returns the \"time\" portion of the as a human-readable string. Converts a date to a string using the UTC timezone. Returns the primitive value of a object. Overrides the method. Converts this object to a primitive value.\n\nexhibits legacy undesirable, inconsistent behavior with two-digit year values; specifically, when a call is given a two-digit year value, that year value does not get treated as a literal year and used as-is but instead gets interpreted as a relative offset — in some cases as an offset from the year , but in other cases, as an offset from the year . let date = new Date(98, 1); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT) date = new Date(22, 1); // Wed Feb 01 1922 00:00:00 GMT+0000 (GMT) date = new Date(\"2/1/22\"); // Tue Feb 01 2022 00:00:00 GMT+0000 (GMT) // Legacy method; always interprets two-digit year values as relative to 1900 date.setYear(98); date.toString(); // Sun Feb 01 1998 00:00:00 GMT+0000 (GMT) date.setYear(22); date.toString(); // Wed Feb 01 1922 00:00:00 GMT+0000 (GMT) So, to create and get dates between the years and , instead use the preferred and methods:. // Preferred method; never interprets any value as being a relative offset, // but instead uses the year value as-is date.setFullYear(98); date.getFullYear(); // 98 (not 1998) date.setFullYear(22); date.getFullYear(); // 22 (not 1922, not 2022)\n\nThe following examples show how to determine the elapsed time between two JavaScript dates in milliseconds. Due to the differing lengths of days (due to daylight saving changeover), months, and years, expressing elapsed time in units greater than hours, minutes, and seconds requires addressing a number of issues, and should be thoroughly researched before being attempted. // Using Date objects const start = Date.now(); // The event to time goes here: doSomethingForALongTime(); const end = Date.now(); const elapsed = end - start; // elapsed time in milliseconds // Using built-in methods const start = new Date(); // The event to time goes here: doSomethingForALongTime(); const end = new Date(); const elapsed = end.getTime() - start.getTime(); // elapsed time in milliseconds // To test a function and get back its return function printElapsedTime(testFn) { const startTime = Date.now(); const result = testFn(); const endTime = Date.now(); console.log(`Elapsed time: ${String(endTime - startTime)} milliseconds`); return result; } const yourFunctionReturn = printElapsedTime(yourFunction); Note: In browsers that support the Performance API's high-resolution time feature, can provide more reliable and precise measurements of elapsed time than ."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date",
        "document": "There are five basic forms for the constructor:\n\nWhen no parameters are provided, the newly-created object represents the current date and time as of the time of instantiation. The returned date's timestamp is the same as the number returned by .\n\nWhen one parameter is passed to the constructor, instances are specially treated. All other values are converted to primitives. If the result is a string, it will be parsed as a date string. Otherwise, the resulting primitive is further coerced to a number and treated as a timestamp.\n\nGiven at least a year and month, this form of returns a object whose component values (year, month, day, hour, minute, second, and millisecond) all come from the following parameters. Any missing fields are given the lowest possible value ( for and for every other component). The parameter values are all evaluated against the local time zone, rather than UTC. accepts similar parameters but interprets the components as UTC and returns a timestamp.\n\nIf any parameter overflows its defined bounds, it \"carries over\". For example, if a greater than is passed in, those months will cause the year to increment; if a greater than is passed in, will increment accordingly, etc. Therefore, will return January 1st, 1991; will return 2:05 A.M. June 20th, 2020.\n\nSimilarly, if any parameter underflows, it \"borrows\" from the higher positions. For example, will return May 31st, 2020.\n\nInteger value representing the year. Values from to map to the years to . All other values are the actual year. See the example. Integer value representing the month, beginning with for January to for December. Integer value representing the day of the month. Defaults to . Integer value between and representing the hour of the day. Defaults to . Integer value representing the minute segment of a time. Defaults to . Integer value representing the second segment of a time. Defaults to . Integer value representing the millisecond segment of a time. Defaults to ."
    },
    {
        "link": "https://stackoverflow.com/questions/8224459/how-to-create-a-date-object-from-string-in-javascript",
        "document": "Always, for any issue regarding the JavaScript spec in practical, I will highly recommend the Mozilla Developer Network, and their JavaScript reference.\n\nAs it states in the topic of the Date object about the argument variant you use:\n\nAnd about the months parameter:\n\nClearly, then, you should use the month number 10 for November.\n\nP.S.: The reason why I recommend the MDN is the correctness, good explanation of things, examples, and browser compatibility chart."
    },
    {
        "link": "https://stackoverflow.com/questions/28002261/parse-date-time-string-in-javascript-which-are-of-custom-format",
        "document": "I have to parse a date and time string of format \"2015-01-16 22:15:00\". I want to parse this into JavaScript Date Object. Any help on this?\n\nI tried some jquery plugins, moment.js, date.js, xdate.js. Still no luck."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat",
        "document": "The locale matching algorithm to use. Possible values are and ; the default is . For information about this option, see Locale identification and negotiation. The calendar to use, such as , , , and so on. For a list of supported calendar types, see . This option can also be set through the Unicode extension key; if both are provided, this property takes precedence. The numbering system to use for number formatting, such as , , , and so on. For a list of supported numbering system types, see . This option can also be set through the Unicode extension key; if both are provided, this property takes precedence. Whether to use 12-hour time (as opposed to 24-hour time). Possible values are and ; the default is locale dependent. When , this option sets to either or , depending on the locale. When , it sets to . overrides both the locale extension tag and the option, should either or both of those be present. The hour cycle to use. Possible values are , , , and . This option can also be set through the Unicode extension key; if both are provided, this property takes precedence. The time zone to use. Time zone names correspond to the Zone and Link names of the IANA Time Zone Database, such as , , , and . Additionally, time zones can be given as UTC offsets in the format \"±hh:mm\", \"±hhmm\", or \"±hh\", for example as , , or . The default is the runtime's default time zone.\n\nThe representation of the weekday. Possible values are: E.g., . Two weekdays may have the same narrow style for some locales (e.g. 's narrow style is also ). The representation of the era. Possible values are: The representation of the year. Possible values are and . The representation of the month. Possible values are: E.g., ). Two months may have the same narrow style for some locales (e.g. 's narrow style is also ). The representation of the day. Possible values are and . The formatting style used for day periods like \"in the morning\", \"am\", \"noon\", \"n\" etc. Possible values are , , and . Note: This option only has an effect if a 12-hour clock ( or ) is used. Many locales use the same string irrespective of the width specified. The representation of the hour. Possible values are and . The representation of the minute. Possible values are and . The representation of the second. Possible values are and . The number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are from to . The localized representation of the time zone name. Possible values are: Note: Timezone display may fall back to another format if a required string is unavailable. For example, the non-location formats should display the timezone without a specific country/city location like \"Pacific Time\", but may fall back to a timezone like \"Los Angeles Time\".\n\nIf any of the date-time component options are specified, then and must be . If all date-time component options and / are , some default options for date-time components are set, which depend on the object that the formatting method was called with:\n• When formatting and , , , and default to .\n• When formatting , , , and default to .\n• When formatting , and default to .\n• When formatting , and default to .\n• When formatting and , , , , , , and default to .\n\nImplementations are required to support displaying at least the following subsets of date-time components:\n\nThe date-time component styles requested might not directly correspond to a valid format supported by the locale, so the format matcher allows you to specify how to match the requested styles to the closest supported format.\n\nThe date formatting style to use. Possible values are , , , and . It expands to styles for , , , , and , with the exact combination of values depending on the locale. When formatting objects such as , , and , will resolve to only those fields relevant to the object. The time formatting style to use. Possible values are , , , and . It expands to styles for , , , and , with the exact combination of values depending on the locale.\n\nYou can format different object types depending on which of the style shortcut options you include:\n• If the is specified, then you can format , , and objects.\n• If the is specified, then you can format objects.\n• If either or is specified, then you can format and objects."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat",
        "document": "These properties are defined on and shared by all instances. The constructor function that created the instance object. For instances, the initial value is the constructor. The initial value of the property is the string . This property is used in .\n\nGetter function that formats a date according to the locale and formatting options of this object. This method receives two Dates and formats the date range in the most concise way based on the locale and options provided when instantiating . This method receives two Dates and returns an Array of objects containing the locale-specific tokens representing each part of the formatted date range. Returns an of objects representing the date string in parts that can be used for custom locale-aware formatting. Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.\n\nIn basic use without specifying a locale, uses the default locale and default options. const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)); // toLocaleString without arguments depends on the implementation, // the default locale, and the default time zone console.log(new Intl.DateTimeFormat().format(date)); // \"12/19/2012\" if run with en-US locale (language) and time zone America/Los_Angeles (UTC-0800)\n\nThis example shows some of the variations in localized date and time formats. In order to get the format of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the argument: const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0)); // Results below use the time zone of America/Los_Angeles (UTC-0800, Pacific Standard Time) // US English uses month-day-year order console.log(new Intl.DateTimeFormat(\"en-US\").format(date)); // \"12/19/2012\" // British English uses day-month-year order console.log(new Intl.DateTimeFormat(\"en-GB\").format(date)); // \"19/12/2012\" // Korean uses year-month-day order console.log(new Intl.DateTimeFormat(\"ko-KR\").format(date)); // \"2012. 12. 19.\" // Arabic in most Arabic speaking countries uses real Arabic digits console.log(new Intl.DateTimeFormat(\"ar-EG\").format(date)); // \"١٩‏/١٢‏/٢٠١٢\" // for Japanese, applications may want to use the Japanese calendar, // where 2012 was the year 24 of the Heisei era console.log(new Intl.DateTimeFormat(\"ja-JP-u-ca-japanese\").format(date)); // \"24/12/19\" // when requesting a language that may not be supported, such as // Balinese, include a fallback language, in this case Indonesian console.log(new Intl.DateTimeFormat([\"ban\", \"id\"]).format(date)); // \"19/12/2012\"\n\nThe date and time formats can be customized using the argument: const date = new Date(Date.UTC(2012, 11, 20, 3, 0, 0, 200)); // request a weekday along with a long date let options = { weekday: \"long\", year: \"numeric\", month: \"long\", day: \"numeric\", }; console.log(new Intl.DateTimeFormat(\"de-DE\", options).format(date)); // \"Donnerstag, 20. Dezember 2012\" // an application may want to use UTC and make that visible options.timeZone = \"UTC\"; options.timeZoneName = \"short\"; console.log(new Intl.DateTimeFormat(\"en-US\", options).format(date)); // \"Thursday, December 20, 2012, GMT\" // sometimes you want to be more precise options = { hour: \"numeric\", minute: \"numeric\", second: \"numeric\", timeZone: \"Australia/Sydney\", timeZoneName: \"short\", }; console.log(new Intl.DateTimeFormat(\"en-AU\", options).format(date)); // \"2:00:00 pm AEDT\" // sometimes you want to be very precise options.fractionalSecondDigits = 3; //number digits for fraction-of-seconds console.log(new Intl.DateTimeFormat(\"en-AU\", options).format(date)); // \"2:00:00.200 pm AEDT\" // sometimes even the US needs 24-hour time options = { year: \"numeric\", month: \"numeric\", day: \"numeric\", hour: \"numeric\", minute: \"numeric\", second: \"numeric\", hour12: false, timeZone: \"America/Los_Angeles\", }; console.log(new Intl.DateTimeFormat(\"en-US\", options).format(date)); // \"12/19/2012, 19:00:00\" // to specify options but use the browser's default locale, use undefined console.log(new Intl.DateTimeFormat(undefined, options).format(date)); // \"12/19/2012, 19:00:00\" // sometimes it's helpful to include the period of the day options = { hour: \"numeric\", dayPeriod: \"short\" }; console.log(new Intl.DateTimeFormat(\"en-US\", options).format(date)); // 10 at night The used calendar and numbering formats can also be set independently via arguments:"
    },
    {
        "link": "https://habtesoft.medium.com/8-ways-of-date-formatting-in-javascript-1380625a1f50",
        "document": "Not A Medium member? Read this article here.\n\nJavaScript provides various ways to format dates, from using built-in methods to leveraging libraries. Let’s explore some of the most common methods:\n\nThe method converts a object to a string, using locale conventions.\n\nThe object provides a way to format dates based on locales and options."
    },
    {
        "link": "https://dev.to/josephciullo/crush-date-and-time-formatting-natively-unleash-the-hidden-power-of-intldatetimeformat-4b2g",
        "document": "The APIs in JavaScript are a powerful and native solution for handling localization and formatting of data such as dates and numbers in various languages. Unlike many third-party libraries, these APIs offer:\n• None Smaller bundle sizes: Eliminates the need for external dependencies.\n• None Global support: Includes localization for a wide range of languages and regions.\n\nUnlike external libraries, native APIs do not require updates or maintenance by the developer. Additionally, they are optimized for the underlying JavaScript engine, providing a lighter and faster approach to localization and formatting.\n\nIn this article, we will focus on , an API dedicated to formatting dates and times based on the desired localization. We will see how this API can replace popular libraries such as Moment.js, date-fns, or Day.js for formatting needs, offering a modern and native alternative.\n\nis a class that allows for localized formatting of dates and times. It provides advanced features such as support for different localizations, customizable formats, and handling of alternative calendars and time zones.\n\nA formatter is an instance of that stores a specific configuration for date formatting. By using a formatter, you can repeatedly apply the same format to different dates, making your code more efficient and readable.\n\nTo create a formatter, use the constructor with the desired parameters:\n• None : A string defining the localization (e.g., \"en-US\" for American English, \"it-IT\" for Italian).\n• None : An optional object to specify date components (e.g., , , , etc.).\n\nWhile it is common to save the formatter instance in a variable for reuse, this step is not strictly required. The constructor can be invoked directly to format dates inline, as shown below:\n\n\n\nHowever, creating a formatter instance becomes particularly useful when the same format needs to be applied to multiple dates, improving code consistency and avoiding redundancy:\n\n\n\nExplore the simplicity and power of with these foundational examples. We'll demonstrate how to create a formatter for default and custom formats that can be reused across your application.\n\nIf no options are provided, the formatter uses the default format of the selected locale.\n\n\n\nCustomize the output by specifying the desired options.\n\n\n\nTake your date and time formatting to the next level with advanced scenarios, such as handling multiple localizations, alternative calendars, and time zones. These examples showcase the versatility and adaptability of in complex applications.\n\nUsing with TypeScript ensures type safety and better development experience. The TypeScript definitions for are built-in, providing autocomplete and documentation for its methods and properties.\n\nThe strict typing helps avoid runtime errors by catching potential issues at compile time, such as incorrect options or method calls.\n• None Lightweight: It is native and does not require external libraries, reducing bundle size.\n• None Performance: Often faster than solutions based on libraries.\n\nWhile external libraries might offer syntactic sugar, the native API provides equivalent functionality without sacrificing flexibility or efficiency.The slightly longer syntax of the native API is a small trade-off for its benefits in maintainability, performance, and simplicity.\n\nprovides a robust, native solution for date and time formatting, making it an excellent alternative to popular libraries like Moment.js, date-fns, and Day.js. With its high performance, built-in localization, and simplified maintenance, it's a valuable tool for modern JavaScript applications.\n\nTo dive deeper into and explore additional features, visit the official MDN Web Docs. There, you'll find comprehensive documentation and practical examples to help you master this powerful API."
    },
    {
        "link": "https://stackoverflow.com/questions/60672126/how-to-format-a-javascript-date-object-using-intl-datetimeformat",
        "document": "I am trying to show a date in a string format like it's done in PHP (using date()).\n\nThe output is : How do I get something like this : ?"
    }
]