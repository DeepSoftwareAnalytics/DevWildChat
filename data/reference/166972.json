[
    {
        "link": "https://docs.manim.community/en/stable/tutorials/quickstart.html",
        "document": "This quickstart guide will lead you through creating a sample project using Manim: an animation engine for precise programmatic animations. First, you will use a command line interface to create a , the class through which Manim generates videos. In the you will animate a circle. Then you will add another showing a square transforming into a circle. This will be your introduction to Manim’s animation ability. Afterwards, you will position multiple mathematical objects ( s). Finally, you will learn the syntax, a powerful feature that animates the methods you use to modify s.\n• None Open a text editor, such as Notepad. Open the file in the folder. It should look something like this:\n• None Open the command line, navigate to your project folder, and execute the following command: Manim will output rendering information, then create an MP4 file. Your default movie player will play the MP4 file, displaying the following animation. If you see an animation of a pink circle being drawn, congratulations! You just wrote your first Manim scene from scratch. If you get an error message instead, you do not see a video, or if the video output does not look like the preceding animation, it is likely that Manim has not been installed correctly. Please refer to our FAQ section for help with the most common issues. Let’s go over the script you just executed line by line to see how Manim was able to draw the circle. The first line imports all of the contents of the library: This is the recommended way of using Manim, as a single script often uses multiple names from the Manim namespace. In your script, you imported and used , , and . Now let’s look at the next two lines: Most of the time, the code for scripting an animation is entirely contained within the method of a class. Inside , you can create objects, display them on screen, and animate them. The next two lines create a circle and set its color and opacity: Finally, the last line uses the animation to display the circle on your screen: All animations must reside within the method of a class derived from . Other code, such as auxiliary or mathematical functions, may reside outside the class.\n\nWith our circle animation complete, let’s move on to something a little more complicated.\n• None Open , and add the following code snippet below the class: # animate the creation of the square # interpolate the square into the circle\n• None Render by running the following command in the command line: The following animation will render: This example shows one of the primary features of Manim: the ability to implement complicated and mathematically intensive animations (such as cleanly interpolating between two geometric shapes) with just a few lines of code.\n\nNext, let’s go over some basic techniques for positioning s.\n• None Open , and add the following code snippet below the method:\n• None Render by running the following command in the command line: The following animation will render: We first specified the pink circle as the square’s reference point by passing as the method’s first argument. The second argument is used to specify the direction the is placed relative to the reference point. In this case, we set the direction to , telling Manim to position the square to the right of the circle. Finally, applied a small distance buffer between the two objects. Try changing to , , or instead, and see how that changes the position of the square. Using positioning methods, you can render a scene with multiple s, setting their locations in the scene using coordinates or positioning them relative to each other. For more information on and other positioning methods, check out the list of methods in our reference manual.\n\nThe final lesson in this tutorial is using , a method which animates changes you make to a . When you prepend to any method call that modifies a , the method becomes an animation which can be played using . Let’s return to to see the differences between using methods when creating a , and animating those method calls with .\n• None Open , and add the following code snippet below the class:\n• None Render by running the following command in the command line: The following animation will render: The first creates the square. The second animates rotating it 45 degrees. The third transforms the square into a circle, and the last colors the circle pink. Although the end result is the same as that of , shows and being applied to the dynamically, instead of creating them with the changes already applied. Try other methods, like or , and see what happens.\n• None Open , and add the following code snippet below the class:\n• None Render by running the following command in the command line: The following animation will render: This illustrates the quirks of . When using , Manim actually takes a ’s starting state and its ending state and interpolates the two. In the class, you can observe this when the square rotates: the corners of the square appear to contract slightly as they move into the positions required for the first square to transform into the second one. In , the difference between ’s interpretation of rotation and the method is far more apparent. The starting and ending states of a rotated 180 degrees are the same, so tries to interpolate two identical objects and the result is the left square. If you find that your own usage of is causing similar unwanted behavior, consider using conventional animation methods like the right square, which uses .\n\nThe difference between and is that transforms the points (as well as other attributes like color) of into the points/attributes of . on the other hand literally replaces on the scene with . The use of or is mostly up to personal preference. They can be used to accomplish the same effect, as shown below. However, in some cases it is more beneficial to use , like when you are transforming several mobjects one after the other. The code below avoids having to keep a reference to the last mobject that was transformed. With a working installation of Manim and this sample project under your belt, you’re ready to start creating animations of your own. To learn more about what Manim is doing under the hood, move on to the next tutorial: Manim’s Output Settings. For an overview of Manim’s features, as well as its configuration and other settings, check out the other Tutorials. For a list of all available features, refer to the Reference Manual page."
    },
    {
        "link": "https://docs.manim.community/en/stable",
        "document": "Animating technical concepts is traditionally pretty tedious since it can be difficult to make the animations precise enough to convey them accurately. Manim relies on Python’s simplicity to generate animations programmatically, making it convenient to specify exactly how each one should run. Take a look at the Example Gallery for some inspiration on how to create beautiful images and videos with Manim.\n\nAre you new to Manim and are looking for where to get started? Then you are in the right place! Please be aware that there are different, incompatible versions of Manim available. ManimCE was forked from 3b1b/manim, originally created and open-sourced by Grant Sanderson, creator of [3Blue1Brown](https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw) educational math videos. Check our installation FAQ to learn more!\n• None The Installation section has the latest and up-to-date installation instructions for Windows, macOS, and Linux. You can also find information on Manim’s docker images and (online) notebook environments there.\n• None Want to try the library before installing it? Take a look at our interactive online playground at https://try.manim.community in the form of a Jupyter notebook.\n• None In our Tutorials section you will find a collection of resources that will teach you how to use Manim. In particular, the Quickstart tutorial teaches you Manim’s basics, and in Manim’s building blocks the classes used to compose your animations are described in more detail.\n\nAre you struggling with installing or using Manim? Don’t worry, we’ve all been there. Here are some good resources to help you out:\n• None Perhaps your problem is one that occurs frequently, then chances are it is addressed in our collection of FAQs.\n• None If you are looking for information on some specific class, look for it in the reference manual and/or use the search feature of the documentation.\n• None Still no luck? Then you are welcome to ask the community for help, together we usually manage to find a solution for your problem! Consult the FAQ page on getting help for instructions.\n\nHere are some short summaries for all of the sections in this documentation:\n• None The Example Gallery is a collection of examples (rendered videos and images together with the code they were generated from) that show a few different, simple things that you can do with Manim.\n• None The Installation section has information on installing Manim.\n• None In Tutorials & Guides you can find learning resources: proper tutorials that guide you through the process of creating a video are in the Tutorial section; guides on specific topics are in the Guides section, and the answers to frequently asked questions can be found in the FAQ section.\n• None The Reference Manual contains a comprehensive list of all of Manim’s (documented) modules, classes, and functions. If you are somewhat familiar with Manim’s module structure, feel free to browse the manual directly. If you are searching for something specific, feel free to use the documentation’s search feature in the sidebar. Many classes and methods come with their own illustrated examples too!\n• None The Plugins page documents how to install, write, and distribute plugins (that is, separate Python packages that extend the feature set of the core library).\n• None Changes between versions are documented in our Changelog.\n• None If you are looking into contributing to the development of Manim, you can find information on how to get involved in our Contributing section.\n• None And finally, the Code of Conduct page has a formal description of the rules you should abide by when interacting within our community."
    },
    {
        "link": "https://docs.manim.community/en/stable/reference/manim.mobject.mobject.Mobject.html",
        "document": "Mathematical Object: base class for objects that can be displayed on screen.\n\nThere is a compatibility layer that allows for getting and setting generic attributes with and methods. See for more details.\n\nAdd all passed mobjects to the back of the submobjects. Add an update function to this mobject. Aligns the data of this mobject with another mobject. Direction just needs to be a vector pointing towards side or corner in the 2d plane. Aligns mobject to another in a certain direction. Returns the function defining a specific animation override for this class. Apply a function to and every submobject with points recursively. Sorts next to each other on screen. Arrange the position of with a small buffer. Edit points, colors and submobjects to be identical to another Moves the center of the mobject to the center of the scene. Create and return an identical copy of the including all . Flips/Mirrors an mobject about its center. Initializes and therefore the shape. Return all points from this mobject and all submobjects. Get bottom Point3Ds of a box bounding the Returns the color of the Get corner Point3Ds for certain direction. Get edge Point3Ds for certain direction. Returns the point, where the stroke that surrounds the ends. Get left Point3Ds of a box bounding the Return all of a given attribute from this mobject and all submobjects. Get Point3Ds of the middle of the path that forms the . Return the base class of this mobject type. Get nadir (opposite the zenith) Point3Ds of a box bounding a 3D . The simplest to be transformed to or from self. Get right Point3Ds of a box bounding the Returns the point, where the stroke that surrounds the starts. Returns starting and ending point of a stroke as a . Return all updaters using the parameter. Get top Point3Ds of a box bounding the Returns x Point3D of the center of the as Returns y Point3D of the center of the as Returns z Point3D of the center of the as Check if does not contains points. Turns this into an interpolation between and . Measure the length of an in a certain direction. Match the color with the color of another . Match the Point3Ds with the Point3Ds of another . Match the depth with the depth of another . Match the specified dimension with the dimension of another . Match the height with the height of another . Edit points, positions, and submobjects to be identical to another , while keeping the style unchanged. Match the updaters of the given mobject. Match the width with the width of another . Move center of the to certain Point3D. Move this next to another's or Point3D. If a with points is being aligned to one without, treat both as groups, and push the one with points into its own submobjects list. Find the min or max value from a dimension across all points in this and submobjects. Sets to be an empty array. Restores the state that was previously saved with . Rotates the about a certain point. Rotates the about the ORIGIN, which is at [0,0,0]. Saves an image of only this at its position to a png file. Scales the to fit a depth while keeping width/height proportional. Scales the to fit a height while keeping width/depth proportional. Scales the to fit a width while keeping height/depth proportional. Condition is function which takes in one arguments, (x, y, z). Set x value of the center of the ( or ) Set y value of the center of the ( or ) Set z value of the center of the ( or ) Sets the 's to the value specified in . Sets the 's z Point3D to the value of . Shift by the given vectors. Sorts the list of by a function defined by . Stretches the to fit a depth, not keeping width/height proportional. Stretches the to fit a height, not keeping width/depth proportional. Stretches the to fit a width, not keeping height/depth proportional. Moves this to the given corner of the screen. Moves this to the given edge of the screen, without affecting its position in the other dimension.\n\nCheck that all submobjects are actually instances of , and that none of them is (a cannot contain itself). This is an auxiliary function called when adding Mobjects to the list. This function is intended to be overridden by subclasses such as , which should assert that only other VMobjects may be added into it. submobjects (Iterable[Mobject]) – The list containing values to validate.\n• None TypeError – If any of the values in is not a .\n• None ValueError – If there was an attempt to add a as its own submobject.\n\nUsed to animate the application of any method of . Any method called on is converted to an animation of applying that method on the mobject itself. For example, sets the fill color of a square, while animates this action. Multiple methods can be put in a single animation once via chaining: Passing multiple animations for the same in one call to is discouraged and will most likely not work properly. Instead of writing an animation like Keyword arguments that can be passed to can be passed directly after accessing , like so: This is especially useful when animating simultaneous calls that you want to behave differently: will interpolate the between its points prior to and its points after applying to it. This may result in unexpected behavior when attempting to interpolate along paths, or rotations. If you want animations to consider the points between, consider using with updaters instead.\n\nEdit points, colors and submobjects to be identical to another If both match_height and match_width are then the transformed will match the height first and then the width.\n• None match_height (bool) – Whether or not to preserve the height of the original .\n• None match_width (bool) – Whether or not to preserve the width of the original .\n• None match_depth (bool) – Whether or not to preserve the depth of the original .\n• None match_center (bool) – Whether or not to preserve the center of the original .\n• None stretch (bool) – Whether or not to stretch the target mobject to match the the proportions of the original . The following examples illustrate how mobject measurements change when using the and arguments. We start with a rectangle that is 2 units high and 4 units wide, which we want to turn into a circle of radius 3: With , the target circle is deformed to match the proportions of the rectangle, which results in the target mobject being an ellipse with height 2 and width 4. We can check that the resulting points satisfy the ellipse equation \\(x^2/a^2 + y^2/b^2 = 1\\) with \\(a = 4/2\\) and \\(b = 2/2\\) being the semi-axes: With and the circle is scaled such that the height or the width of the rectangle will be preserved, respectively. The points of the resulting mobject satisfy the circle equation \\(x^2 + y^2 = r^2\\) for the corresponding radius \\(r\\): With , the resulting mobject is moved such that its center is the same as the center of the original mobject:"
    },
    {
        "link": "https://manim.readthedocs.io",
        "document": "These docs are generated from the master branch of the Manim repo. You can contribute by submitting a pull request there."
    },
    {
        "link": "https://3b1b.github.io/manim/getting_started/quickstart.html",
        "document": ""
    },
    {
        "link": "https://docs.manim.community/en/stable/contributing/development.html",
        "document": "\n• Go to https://github.com/ManimCommunity/manim and click the “fork” button to create a copy of the project for you to work on. You will need a GitHub account. This will allow you to make a “Pull Request” (PR) to the ManimCommunity repo later on.\n• None Clone your fork to your local computer: GitHub will provide both a SSH ( ) and HTTPS ( ) URL for cloning. You can use SSH if you have SSH keys setup. Do not clone the ManimCommunity repository. You must clone your own fork.\n• None Change the directory to enter the project folder:\n• None Now, should show two remote repositories named:\n• \n• None Follow the steps in our installation instructions to install Manim’s system dependencies. We also recommend installing a LaTeX distribution.\n• None We recommend using Poetry to manage your developer installation of Manim. Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on, and it will manage (install / update) them for you. In addition, Poetry provides a simple interface for managing virtual environments. If you choose to use Poetry as well, follow Poetry’s installation guidelines to install it on your system, then run from your cloned repository. Poetry will then install Manim, as well as create and enter a virtual environment. You can always re-enter that environment by running .\n• None In case you want to install extra dependencies that are defined in the section of , this can be done by passing the flag, for example .\n• None In case you decided against Poetry, you can install Manim via pip by running . Note that due to our development infrastructure being based on Poetry, we currently do not support editable installs via , so you will have to re-run this command every time you make changes to the source code. The following steps assume that you chose to install and work with Poetry.\n• This will ensure during development that each of your commits is properly formatted against our linter and formatters, , , and . You are now ready to work on Manim!\n• None Checkout your local repository’s main branch and pull the latest changes from ManimCommunity, , into your local repository:\n• None Create a branch for the changes you want to work on rather than working off of your local main branch: This ensures you can easily update your local repository’s main with the first step and switch branches to work on multiple features.\n• You’re ready to make changes in your local repository’s branch. You can add local files you’ve changed within the current directory with , or add specific files with and commit these changes to your local history with . If you have installed pre-commit, your commit will succeed only if none of the hooks fail. When crafting commit messages, it is highly recommended that you adhere to these guidelines.\n• Depending on your changes, you may need to update or add new tests. For new features, it is required that you include tests with your PR. Details of our testing system are explained in the testing guide.\n• Update the docstrings (the text in triple quotation marks) of any functions or classes you change and include them with any new functions you add. See the documentation guide for more information about how we prefer our code to be documented. The content of the docstrings will be rendered in the reference manual. Use the to add examples to the documentation! As far as development on your local machine goes, these are the main steps you should follow.\n\nAs soon as you are ready to share your local changes with the community so that they can be discussed, go through the following steps to open a pull request. A pull request signifies to the ManimCommunity organization, “Here are some changes I wrote; I think it’s worthwhile for you to maintain them.” You do not need to have everything (code/documentation/tests) complete to open a pull request (PR). If the PR is still under development, please mark it as a draft. Community developers will still be able to review the changes, discuss yet-to-be-implemented changes, and offer advice; however, the more complete your PR, the quicker it will be merged.\n• None Update your fork on GitHub to reflect your local changes: Doing so creates a new branch on your remote fork, , with the contents of your local repository on GitHub. In subsequent pushes, this local branch will track the branch and is enough.\n• In order to make the ManimCommunity development team aware of your changes, you can make a PR to the ManimCommunity repository from your fork. Make sure to select instead of as the base repository! Choose the branch from your fork as the head repository - see the screenshot below. Please make sure you follow the template (this is the default text you are shown when first opening the ‘New Pull Request’ page). Your changes are eligible to be merged if:\n• None there are no merge conflicts\n• None the tests in our pipeline pass\n• None at least one (two for more complex changes) Community Developer approves the changes You can check for merge conflicts between the current upstream/main and your branch by executing locally. If this generates any merge conflicts, you need to resolve them and push an updated version of the branch to your fork of the repository. Our pipeline consists of a series of different tests that ensure that Manim still works as intended and that the code you added sticks to our coding conventions.\n• None Code style: We use the code style imposed by Black, isort and flake8. The GitHub pipeline makes sure that the (Python) files changed in your pull request also adhere to this code style. If this step of the pipeline fails, fix your code formatting automatically by running and . To fix code style problems, run for a style report, and then fix the problems manually that were detected by .\n• None Tests: The pipeline runs Manim’s test suite on different operating systems (the latest versions of Ubuntu, macOS, and Windows) for different versions of Python. The test suite consists of two different kinds of tests: integration tests and doctests. You can run them locally by executing and , respectively, from the root directory of your cloned fork.\n• None Documentation: We also build a version of the documentation corresponding to your pull request. Make sure not to introduce any Sphinx errors, and have a look at the built HTML files to see whether the formatting of the documentation you added looks as you intended. You can build the documentation locally by running from the directory. Make sure you have Graphviz installed locally in order to build the inheritance diagrams. See Adding Documentation for more information. Finally, if the pipeline passes and you are satisfied with your changes: wait for feedback and iterate over any requested changes. You will likely be asked to edit or modify your PR in one way or another during this process. This is not an indictment of your work, but rather a strong signal that the community wants to merge your changes! Once approved, your changes may be merged!\n• None When submitting a PR, please mention explicitly if it includes breaking changes.\n• None When submitting a PR, make sure that your proposed changes are as general as possible, and ready to be taken advantage of by all of Manim’s users. In particular, leave out any machine-specific configurations, or any personal information it may contain.\n• None If you are a maintainer, please label issues and PRs appropriately and frequently.\n• None When opening a new issue, if there are old issues that are related, add a link to them in your new issue (even if the old ones are closed).\n• None When submitting a code review, it is highly recommended that you adhere to these general guidelines.\n• None If you find stale or inactive issues that seem to be irrelevant, please post a comment saying ‘This issue should be closed’, and a community developer will take a look.\n• None Please do as much as possible to keep issues, PRs, and development in general as tidy as possible. You can find examples for the in several places: the Example Gallery, Tutorials, and Reference Classes. Thank you for contributing!"
    },
    {
        "link": "https://github.com/malhotra5/Manim-Tutorial",
        "document": "A tutorial for manim, a mathematical animation engine made by 3b1b for Python.\n• Python 3.7 (I managed to run it on version 3.6.7, so I'm guessing 3.6 and above works)\n• \n• What are the possible args\n• YOUR GO TO GUIDE FOR EVERYDAY USE!!\n\nLets first get the manim repo and python dependencies using the terminal -\n\nThese are the final system requirements: , , and .\n\n!!!to my knowledge manim only works with python 3.7 (yet)!!!\n• install pycairo, this can be pycairo‑1.19.1‑cp37‑cp37m‑win_amd64.whl or pycairo‑1.19.1‑cp37‑cp37m‑win32.whl depending on your achitecture and python version. (The 37 stands for python 3.7)\n• install pycairo using in the directory where the pycairo wheel is located.\n• download manim zip file from the github repo and extract it\n\nmake a new venv, if you want to\n• Problem #1: Cairo System requirement People are sometimes unable to install through the terminal. But, it is possible to install it using the Python.\n• Problem #2: Exception: Latex error converting to dvi. See log output above or the log file This error can be frustrating. Especially when you don't know what to install. But if you followed my installation guide, this error is not due to missing a system requirement. Rather, there is a problem with the code.\n• Problem #3: No module named manim This error occurs when you use the command to run a manim project when your not in the parent directory. Make sure that your current directory is in manim, and no other sub directory.\n\nIf you still face problems in installation, you can use manim on Virtual Box. It creates a virtual Ubuntu os on your host os. All the dependencies are pre-installed so that you are directly use manim.\n• Use as the password\n\nEasy way to test whether all your installations are working is by running the command below\n\nIf it worked, then congratulations! Now you can run manim programs and get started with making animations. Now, this will be the general command to run all manim projects\n\nManim programs have a certain structure. The Python program file requires you to make classes for all your series of animations. If you make more than a few classes, you have to run commands for every class you make. Seperate videos are made for every class.\n\nArgs are a list of arguements that can be stated when running the program. The most important agruements and it's explanations are provided in the GO TO GUIDE. I recommend to look at it later, and start with the tutorial.\n\nFinally we can start. In this tutorial, we will learn by doing.\n\nWe will break this into parts:\n• Import: The import in this code is the import we will use in all manim projects. It has almost all the imports we will ever require\n• Class: For running animations, you have to make a class that has a base class from manim.\n• Method: The construct method is special to manim. Manim calls on construct for creating animations. Therefore, every class that runs manim has to have this method.\n• Code: You don't have to fully understand how the code works yet. But you can see that you first define your animations, and then you display it. You can experiment with the order in which you define and display.\n\nAfter looking at a lot of pieces of code in this tutorial, you will eventually familiarize yourself with manim. So lets start!\n\nOur focus is going to shift from understanding the structure of our code, to understanding the code itself. The first import statement imports many of the classes we will use.\n\nThe section for making shapes creates shapes that can be used in manim. You can define it's size, color,etc. You will see some methods such as surround or FadeOut, we wil classify them later. The code is simple enough to read, most of it looks like English.\n\nThe section for showing the animaton displays the shapes, as specified in the code. Let's look at the what the code offers.\n\nShapes: The shapes defined in manim are known as mobjects. Manim has this classification for objects other than shapes. Keep reading for the formal definition of a mobject.\n\nAnimations: These are animations that apply to objects known as mobjects. Mobjects are objects defined by manim. Manim creates these objects specifically, so that you can apply any animations or other special manim methods to them.\n\nAdding: These are some of the methods for adding mobjects or playing Animations on mobjects. Note: If you play an animation, you don't have to add it to the screen. The animation does it for you.\n\nIn this code, I specifically included an example that I found useful to know.\n\nI am appending mobjects into an list. This way I can manipulate the mobjects in the list. However, some manim methods such as FadeOut() can't take multiple mobjects at once. This makes it hard to do multiple tasks with less lines of code. We will take a look at a way to overcome that problem later. Although, some methods do however take multiple mobjects.\n\nFor example: self.add() took the list. However, you have to unpack the list first.\n\nHere, mobjects in the list pointers, we unpacked and passed as arguments to add(). Notice the syntax for doing so. We put * before the list.\n\nLast note. If you realized, the base class of the class above was Scene. This is provided by manim. Using it, we can access methods pertaining to manim. Manim also has many other base classes that we can use. If you realize, the lines of code below come from the base class.\n\nThere are other bases classes we will explore for making Graphs, 3D Scenes,etc.\n\nHopefully, most of the code makes sense. In this section I'll introduce a new mobject known as TextMobject. It is used to store text. It is particulary useful because it helps you position text on the screen and you can use the animation write().\n\nI also included a nice coloring tool, set_color_by_gradient. You can pass constants in Manim such as BLUE or PURPLE. To pass a custom color you can specify the hex code of the color instead of using Manim color constants.\n\nTextMobjects will be used later on to write good looking math equations.\n\nHere, we will look at very important concepts that will help when using Manim.\n\nThat looks long, but it's very simple. Here I have provided 2 ways of making equation and displaying it to the screen. If you remember, we installed some latex system requirements. We will use LaTex to make our equations look nice.\n\nLaTex will take it's own tutorial. However, you don't need to know a lot of LaTex. I will introduce some rules that will help you write any math equation. Notice that equations are specified in TextMobjects.\n\nLaTex: When making an equation, the general rule is to put a $ at the start and end of the text. For example:\n\nNow for the fun part. In LaTex, you can represent symbols using a backslash and a keyword. THis include theta, alpha, summation, etc. In Manim, it is similar.\n\nNotice, in Manim, you specify symbols by putting 2 backslash before the keyword.\n\nFinally, the I will introduce the syntax for adding subscripts and superscripts. Here is the syntax for superscripts.\n\nThe ^ symbol signifies superscript. We put the symbol theta as the superscript. Also, when specifying superscript the {} brackets are not displayed in the equation. They help group all the elements you want to add to the superscript.\n\nFor subscripts, it is similar.\n\nThis is theta subscript 1. The _ signifies subscript. Like usual, the {} brackets aren't displayed in the equation. For more symbol options, go to the resources section.\n\nNow, we will look at a complex way of writing equations using VGroup. Let's look at what a VGroup is.\n\nA VGroup is a list of mobjects who to which you can apply animations all at once. For example, if you have a list of circles, you could transform all of them into squares, by only transforming the VGroup.\n\nCapabilities: You can animate all the mobjects at once, you can animate specific mobjects by indexing them in their list.\n\nLet's look at the example where we make a VGroup for the math equation.\n\nBy now you should be able to identify similar patterns when coding with Manim. The config dictionary, specifies various parameters for graphing: the axis size, axis color or graph colors. The exact parameters are pretty self explanatory and are specified below.\n\nTo make a graph, you have to specify a method that returns the y value for evey x value inupt. This is specified in the method func_to_graph. The method get_graph creates a mobject out of the previous method, which can be manipulated. Note, that the graph method only specifies what the graph should look like given a point. But, the extent of how much is displayed (like from -5 to 5 on the x axis) is determined by the CONFIG dictionary.\n\nHere is the default dictionary Manim uses for graphing.\n\nAlright! Finally some 3D graphs. So, the first ThreeDSurface inherits from parametric surfaces. This will be used to define our 3D graph in terms of a mathematical equation. The kwargs parameter are just some tweaks that change the color of the the graph, or how much of the graph should be rendered. The method func defines the function. It returns the z given the x and y parameters (which are required for 3D graphs).\n\nThe ThreeDSurface is called in the Test class and is manipulated like a mobject. You render the 3D graph like any other mobject in manim.\n\nA continuation of this tutorial will follow to explain how the camera works. For now, the camera is basically your eyes.\n\nManim has a mobject made for images. You can resise them, invert their colors, etc by using Manim methods.\n\nAlternatively, you could load the image using OpenCV or PIL, and then display the image using Manim.\n\nClick Here For the Guide\n\nManim is extremely powerful, and is capable of creating high quality graphics. You can make your animations using graphics and then overlay your voice over the video.\n\nIf you were able to follow this tutorial successfully, then Congrats! Hopefully you can proficiently use Manim!\n\nI am missing a lot of aspects behind this powerful library after reverse engineering manim. There are things such as 3D scenes that still need to be documented. But hopefully this guide will cater to your basic needs.\n• 3 Blue 1 Brown: The creator of this engine who uses it for creating cool math videos. Visit his YouTube channel and manim repo.\n• Todd Zimmerman: Recently made a new documentation of manim in Python3.7."
    },
    {
        "link": "https://reddit.com/r/manim/comments/jpnbvq/how_are_libraries_like_manim_built_like_how_do",
        "document": "I am a newbie in this animation stuff and would love to dive in and learn. I did try seeing the open code of manim on github but trust me, I am so dumb :D"
    },
    {
        "link": "https://github.com/3b1b/manim",
        "document": "Manim is an engine for precise programmatic animations, designed for creating explanatory math videos.\n\nNote, there are two versions of manim. This repository began as a personal project by the author of 3Blue1Brown for the purpose of animating those videos, with video-specific code available here. In 2020 a group of developers forked it into what is now the community edition, with a goal of being more stable, better tested, quicker to respond to community contributions, and all around friendlier to get started with. See this page for more details.\n\nSystem requirements are FFmpeg, OpenGL and LaTeX (optional, if you want to use LaTeX). For Linux, Pango along with its development headers are required. See instruction here.\n\nFor more options, take a look at the Using manim sections further below.\n\nIf you want to hack on manimlib itself, clone this repository and in that directory execute:\n• Install latest version of manim using these command.\n\nTry running the following:\n\nThis should pop up a window playing a simple scene.\n\nLook through the example scenes to see examples of the library's syntax, animation types and object types. In the 3b1b/videos repo, you can see all the code for 3blue1brown videos, though code from older videos may not be compatible with the most recent version of manim. The readme of that repo also outlines some details for how to set up a more interactive workflow, as shown in this manim demo video for example.\n\nWhen running in the CLI, some useful flags include:\n• to write the scene to a file\n• to write the scene to a file and open the result\n• to skip to the end and just show the final frame.\n• will save the final frame to an image and show it\n• to skip ahead to the 'th animation of a scene.\n\nTake a look at custom_config.yml for further configuration. To add your customization, you can either edit this file, or add another file by the same name \"custom_config.yml\" to whatever directory you are running manim from. For example this is the one for 3blue1brown videos. There you can specify where videos should be output to, where manim should look for image files and sounds you want to read in, and other defaults regarding style and video quality.\n\nDocumentation is in progress at 3b1b.github.io/manim. And there is also a Chinese version maintained by @manim-kindergarten: docs.manim.org.cn (in Chinese).\n\nmanim-kindergarten wrote and collected some useful extra classes and some codes of videos in manim_sandbox repo.\n\nIs always welcome. As mentioned above, the community edition has the most active ecosystem for contributions, with testing and continuous integration, but pull requests are welcome here too. Please explain the motivation for a given change and examples of its effect.\n\nThis project falls under the MIT license."
    },
    {
        "link": "https://github.com/malhotra5/Manim-Tutorial/blob/master/README.md",
        "document": "A tutorial for manim, a mathematical animation engine made by 3b1b for Python.\n• Python 3.7 (I managed to run it on version 3.6.7, so I'm guessing 3.6 and above works)\n• \n• What are the possible args\n• YOUR GO TO GUIDE FOR EVERYDAY USE!!\n\nLets first get the manim repo and python dependencies using the terminal -\n\nThese are the final system requirements: , , and .\n\n!!!to my knowledge manim only works with python 3.7 (yet)!!!\n• install pycairo, this can be pycairo‑1.19.1‑cp37‑cp37m‑win_amd64.whl or pycairo‑1.19.1‑cp37‑cp37m‑win32.whl depending on your achitecture and python version. (The 37 stands for python 3.7)\n• install pycairo using in the directory where the pycairo wheel is located.\n• download manim zip file from the github repo and extract it\n\nmake a new venv, if you want to\n• Problem #1: Cairo System requirement People are sometimes unable to install through the terminal. But, it is possible to install it using the Python.\n• Problem #2: Exception: Latex error converting to dvi. See log output above or the log file This error can be frustrating. Especially when you don't know what to install. But if you followed my installation guide, this error is not due to missing a system requirement. Rather, there is a problem with the code.\n• Problem #3: No module named manim This error occurs when you use the command to run a manim project when your not in the parent directory. Make sure that your current directory is in manim, and no other sub directory.\n\nIf you still face problems in installation, you can use manim on Virtual Box. It creates a virtual Ubuntu os on your host os. All the dependencies are pre-installed so that you are directly use manim.\n• Use as the password\n\nEasy way to test whether all your installations are working is by running the command below\n\nIf it worked, then congratulations! Now you can run manim programs and get started with making animations. Now, this will be the general command to run all manim projects\n\nManim programs have a certain structure. The Python program file requires you to make classes for all your series of animations. If you make more than a few classes, you have to run commands for every class you make. Seperate videos are made for every class.\n\nArgs are a list of arguements that can be stated when running the program. The most important agruements and it's explanations are provided in the GO TO GUIDE. I recommend to look at it later, and start with the tutorial.\n\nFinally we can start. In this tutorial, we will learn by doing.\n\nWe will break this into parts:\n• Import: The import in this code is the import we will use in all manim projects. It has almost all the imports we will ever require\n• Class: For running animations, you have to make a class that has a base class from manim.\n• Method: The construct method is special to manim. Manim calls on construct for creating animations. Therefore, every class that runs manim has to have this method.\n• Code: You don't have to fully understand how the code works yet. But you can see that you first define your animations, and then you display it. You can experiment with the order in which you define and display.\n\nAfter looking at a lot of pieces of code in this tutorial, you will eventually familiarize yourself with manim. So lets start!\n\nOur focus is going to shift from understanding the structure of our code, to understanding the code itself. The first import statement imports many of the classes we will use.\n\nThe section for making shapes creates shapes that can be used in manim. You can define it's size, color,etc. You will see some methods such as surround or FadeOut, we wil classify them later. The code is simple enough to read, most of it looks like English.\n\nThe section for showing the animaton displays the shapes, as specified in the code. Let's look at the what the code offers.\n\nShapes: The shapes defined in manim are known as mobjects. Manim has this classification for objects other than shapes. Keep reading for the formal definition of a mobject.\n\nAnimations: These are animations that apply to objects known as mobjects. Mobjects are objects defined by manim. Manim creates these objects specifically, so that you can apply any animations or other special manim methods to them.\n\nAdding: These are some of the methods for adding mobjects or playing Animations on mobjects. Note: If you play an animation, you don't have to add it to the screen. The animation does it for you.\n\nIn this code, I specifically included an example that I found useful to know.\n\nI am appending mobjects into an list. This way I can manipulate the mobjects in the list. However, some manim methods such as FadeOut() can't take multiple mobjects at once. This makes it hard to do multiple tasks with less lines of code. We will take a look at a way to overcome that problem later. Although, some methods do however take multiple mobjects.\n\nFor example: self.add() took the list. However, you have to unpack the list first.\n\nHere, mobjects in the list pointers, we unpacked and passed as arguments to add(). Notice the syntax for doing so. We put * before the list.\n\nLast note. If you realized, the base class of the class above was Scene. This is provided by manim. Using it, we can access methods pertaining to manim. Manim also has many other base classes that we can use. If you realize, the lines of code below come from the base class.\n\nThere are other bases classes we will explore for making Graphs, 3D Scenes,etc.\n\nHopefully, most of the code makes sense. In this section I'll introduce a new mobject known as TextMobject. It is used to store text. It is particulary useful because it helps you position text on the screen and you can use the animation write().\n\nI also included a nice coloring tool, set_color_by_gradient. You can pass constants in Manim such as BLUE or PURPLE. To pass a custom color you can specify the hex code of the color instead of using Manim color constants.\n\nTextMobjects will be used later on to write good looking math equations.\n\nHere, we will look at very important concepts that will help when using Manim.\n\nThat looks long, but it's very simple. Here I have provided 2 ways of making equation and displaying it to the screen. If you remember, we installed some latex system requirements. We will use LaTex to make our equations look nice.\n\nLaTex will take it's own tutorial. However, you don't need to know a lot of LaTex. I will introduce some rules that will help you write any math equation. Notice that equations are specified in TextMobjects.\n\nLaTex: When making an equation, the general rule is to put a $ at the start and end of the text. For example:\n\nNow for the fun part. In LaTex, you can represent symbols using a backslash and a keyword. THis include theta, alpha, summation, etc. In Manim, it is similar.\n\nNotice, in Manim, you specify symbols by putting 2 backslash before the keyword.\n\nFinally, the I will introduce the syntax for adding subscripts and superscripts. Here is the syntax for superscripts.\n\nThe ^ symbol signifies superscript. We put the symbol theta as the superscript. Also, when specifying superscript the {} brackets are not displayed in the equation. They help group all the elements you want to add to the superscript.\n\nFor subscripts, it is similar.\n\nThis is theta subscript 1. The _ signifies subscript. Like usual, the {} brackets aren't displayed in the equation. For more symbol options, go to the resources section.\n\nNow, we will look at a complex way of writing equations using VGroup. Let's look at what a VGroup is.\n\nA VGroup is a list of mobjects who to which you can apply animations all at once. For example, if you have a list of circles, you could transform all of them into squares, by only transforming the VGroup.\n\nCapabilities: You can animate all the mobjects at once, you can animate specific mobjects by indexing them in their list.\n\nLet's look at the example where we make a VGroup for the math equation.\n\nBy now you should be able to identify similar patterns when coding with Manim. The config dictionary, specifies various parameters for graphing: the axis size, axis color or graph colors. The exact parameters are pretty self explanatory and are specified below.\n\nTo make a graph, you have to specify a method that returns the y value for evey x value inupt. This is specified in the method func_to_graph. The method get_graph creates a mobject out of the previous method, which can be manipulated. Note, that the graph method only specifies what the graph should look like given a point. But, the extent of how much is displayed (like from -5 to 5 on the x axis) is determined by the CONFIG dictionary.\n\nHere is the default dictionary Manim uses for graphing.\n\nAlright! Finally some 3D graphs. So, the first ThreeDSurface inherits from parametric surfaces. This will be used to define our 3D graph in terms of a mathematical equation. The kwargs parameter are just some tweaks that change the color of the the graph, or how much of the graph should be rendered. The method func defines the function. It returns the z given the x and y parameters (which are required for 3D graphs).\n\nThe ThreeDSurface is called in the Test class and is manipulated like a mobject. You render the 3D graph like any other mobject in manim.\n\nA continuation of this tutorial will follow to explain how the camera works. For now, the camera is basically your eyes.\n\nManim has a mobject made for images. You can resise them, invert their colors, etc by using Manim methods.\n\nAlternatively, you could load the image using OpenCV or PIL, and then display the image using Manim.\n\nClick Here For the Guide\n\nManim is extremely powerful, and is capable of creating high quality graphics. You can make your animations using graphics and then overlay your voice over the video.\n\nIf you were able to follow this tutorial successfully, then Congrats! Hopefully you can proficiently use Manim!\n\nI am missing a lot of aspects behind this powerful library after reverse engineering manim. There are things such as 3D scenes that still need to be documented. But hopefully this guide will cater to your basic needs.\n• 3 Blue 1 Brown: The creator of this engine who uses it for creating cool math videos. Visit his YouTube channel and manim repo.\n• Todd Zimmerman: Recently made a new documentation of manim in Python3.7."
    }
]