[
    {
        "link": "https://nmap.org/book/man-briefoptions.html",
        "document": "This options summary is printed when Nmap is run with no arguments, and the latest version is always available at . It helps people remember the most common options, but is no substitute for the in-depth documentation in the rest of this manual. Some obscure options aren't even included here."
    },
    {
        "link": "https://nmap.org/book/port-scanning-options.html",
        "document": "While the tutorial showed how simple executing an Nmap port scan can be, dozens of command-line flags are available to make the system more powerful and flexible. This section covers only options that relate to port scans, and often describes only the port-scanning-related functionality of those options. See Chapter 15, Nmap Reference Guide for a comprehensive list of option flags and everything they do.\n\nNmap's port registration file ( ) contains empirical data about how frequently each TCP or UDP port is found to be open. This data was collected by scanning tens of millions of Internet addresses, then combining those results with internal scan data contributed by large enterprises. By default, Nmap scans the 1,000 most popular ports of each protocol it is asked to scan. Alternatively, you can specify the (fast) option to scan only the 100 most common ports in each protocol or to specify an arbitrary number of ports to scan. When none of these canned port sets suit your needs, an arbitrary list of port numbers can be specified on the command-line with the option. The syntax of the option can be complex, and is best described with examples. Scan a single port (in this case port 22) by specifying just that number as the argument. Port names may be specified rather than numbers. Note that a name may match multiple ports. Multiple ports may be separated with commas. Note that no protocol is specified, so these same port numbers will be used for whatever scan methods are specified on the command-line. If a TCP scan such as SYN scan ( ) is specified, TCP ports 22, 25, and 80 are scanned. Those correspond to the services SSH, SMTP, and HTTP, respectively. If a UDP scan is selected ( ), those three UDP ports are scanned. If both are specified, those three ports are scanned for each protocol, for a total of six scanned ports. With IP protocol scan ( ), those three IP protocols (corresponding to XNS IDP, Leaf-1, and ISO-IP) are scanned. Port ranges may be specified by separating the beginning and end port with a hyphen. Multiple ranges or individual ports can be specified with commas. This option scans ports 80, 81, 82, 83, 84, 85, 443, 8000, etc. Based on the port numbers, this user is probably scanning TCP and looking for web servers. You can omit the beginning of a range to imply port one, or the end to imply the last port possible (65535 for TCP and UDP, 255 for protocol scan). This example scans ports one through 100, and all ports greater or equal to 60,000. Omit beginning and end numbers to scan the whole range (excluding zero). Separate lists of TCP and UDP ports can be given by preceding the lists with T: (for TCP) or U:. This example scans three TCP ports (FTP, Telnet, and POP3), and four UDP services (DNS, rpcbind, NetBIOS, and SNMP). Specifying both TCP and UDP ports only matters if you also tell Nmap to do a UDP scan ( ) and one of the TCP scan methods, such as , , or . Wildcards may be used to match ports with similar names. This expression matches eight port numbers, including http (80), http-mgmt (280), https (443), and http-proxy (8080). Depending on your command shell, you may need to escape the asterisk so it isn't treated as a filename glob. Enclosing a range in brackets causes those port numbers to be scanned only if they are registered in . In this example, all the reserved ports (1–1,023), plus all the higher ports registered in . That was Nmap's default behavior before was augmented with open port frequency data for more precise selection.\n\nPort scanning is often the most time consuming part of an Nmap scan (which might also include OS detection, version detection, and NSE scripts). While Nmap tries to be quick and efficient by default, manual optimization often helps. Nmap offers dozens of options for tailoring scan intensity and speed to match your exact needs. This section lists the most important options for optimizing port scan times. Options which take an amount of time are in seconds by default, or you may append (milliseconds), (seconds), (minutes), or (hours) to the value. For further details on any of these options, see the section called “Timing and Performance”. A much more thorough treatment, with examples and best-practices for improving Nmap performance is available in Chapter 6, Optimizing Nmap Performance. These timing templates affect many variables, offering a simple way to adjust overall Nmap speed from very slow ( ) to extremely aggressive ( ). A timing template may be combined with the more granular options describe below, and the most granular option takes precedence. The minimum, maximum, and initial amount of time that Nmap will wait for a port scan probe response. Asks Nmap to give up on hosts that take more than the given amount of time to scan. Sets the floor and ceiling, respectively, to the number of probe packets Nmap sends per second. Specifies the maximum number of port scan probe retransmissions to a single port. Sets the minimum and maximum number of hosts that Nmap will port scan in parallel. Limits the minimum or maximum number of port scan probes (across all hosts scanned concurrently) that Nmap may have outstanding. Asks Nmap to wait at least the given amount of time between sending probes to any individual host. The scan delay can grow as Nmap detects packet loss, so a maximum may be specified with .\n\nNmap offers the ability to write its reports in its standard format, a simple line-oriented “grepable” format, or XML. These reports are enabled with the (normal), (grepable), and (XML) options. Each option takes a filename, and they may be combined to output in several formats at once. Several options are also available to increase output verbosity. This section lists the most important output-related options and how they apply to port scanning. For further details on any of these options, see the section called “Output”. A much more thorough treatment of output options and formats, with many examples, is available in Chapter 13, Nmap Output Formats. Increases the verbosity level, causing Nmap to print more information about the scan in progress. Open ports are shown as they are found and completion time estimates are provided when Nmap thinks a scan will take more than a few minutes. Use it twice or more for even greater verbosity. Increases the debugging level, causing Nmap to print out details about its operation that can be useful for tracking down bugs or simply understanding how it works. Higher levels result in massive amounts of data. Using the option once sets the debugging level to one, and it is incremented for each additional . Or you may follow the with the desired level, as in . If you don't see enough information, try a higher level. The maximum effective level is nine. If your screen is flooded with too much debugging data, reduce the level. Reducing scan intensity, such as the number of ports or targets scanned and the features used, can also help to isolate only the debug messages you want. Causes Nmap to print a summary of every packet sent or received. This is often used for debugging, but is also a valuable way for new users to understand exactly what Nmap is doing under the covers. To avoid printing thousands of lines, you may want to specify a limited number of ports to scan, such as . Write output in Nmap's normal format to . This format is roughly the same as the standard interactive output printed by Nmap at runtime. Write output in Nmap's XML format to . Normal (human readable) output will still be printed to stdout unless you ask for XML to be directed there by specifying as . This is the preferred format for use by scripts and programs that process Nmap results. Write output in Nmap's so-called grepable format to . This tabular format fits the output of each host on a single line, making it easy to grep for open ports, certain operating systems, application names, or other data. Normal output will still be printed to stdout unless you ask for the grepable output to be directed there by specifying as . While this format works well for parsing with simple grep and awk command-lines, significant scripts and programs should use the XML output instead. The XML format contains substantial information that grepable format has no place for, and extensibility makes XML easier to update with new information without breaking tools that rely on it. As a convenience, you may specify to store scan results in normal, XML, and grepable formats at once. They are stored in .nmap, .xml, and .gnmap, respectively. As with most programs, you can prefix the filenames with a directory path, such as on Unix or on Windows. Resume an aborted scan by specifying the normal ( ) or grepable ( ) output file which was created during the ill-fated scan. Don't use any options other than , as Nmap will use the ones specified in the output file. It then parses the file and resumes scanning (and logging to the file) at the host which the previous Nmap execution was working on when it ceased. Tells Nmap to append scan results to any output files specified (with arguments such as or ) rather than overwriting them. Only show hosts that have open ports, and only show the open ports for those. Here, “open ports” are any ports that have the possibility of being open, which includes , , and .\n\nHere are some options that can be quite handy even though they don't fit into specific categories. The descriptions focus on how each option relates to port scanning. See the Chapter 15, Nmap Reference Guide for more comprehensive coverage of each option. Asks Nmap to scan the target using the IPv6 protocol. This process is described in the section called “IPv6 Scanning ( )”. Nmap randomizes the port scan order by default to make detection slightly harder. The option causes them to be scanned in numerical order instead. Tells Nmap to skip the ping test and simply scan every target host provided. Other options for controlling host discovery are described in Chapter 3, Host Discovery (“Ping Scanning”). Adds a column to the interesting ports table which describes why Nmap classified a port as it did."
    },
    {
        "link": "https://nmap.org/docs.html",
        "document": "The Nmap project tries to defy the stereotype of some open source software being poorly documented by providing a comprehensive set of documentation for installing and using Nmap. This page links to official Insecure.Org documentation, and generous contributions from other parties.\n\nThe primary documentation for using Nmap is the Nmap Reference Guide. This is also the basis for the Nmap man page (nroff version of nmap.1). It is regularly updated for each release and is meant to serve as a quick-reference to virtually all Nmap command-line arguments, but you can learn even more about Nmap by reading it straight through. The 18 sections include Brief Options Summary, Firewall/IDS Evasion and Spoofing, Timing and Performance, Port Scanning Techniques, Usage Examples, and much more.\n\nThe original Nmap manpage has been translated into 15 languages. That is fantastic, as it makes Nmap more accessible around the world. The following languages are now available:\n\nThe links above go to the HTML guide. Nroff (man page format) and DocBook XML (source) versions of each man page translation can be found here. If you would like to update one of our existing translations or translate to a language not mentioned above, please read the instructions and FAQ and then mail our developers or open a pull request on Github. It is a lot of work, but the reward is that thousands of people may benefit from your translation every month.\n\nNmap Network Scanning is the official guide to Nmap. From explaining port scanning basics for novices to detailing low-level packet crafting methods used by advanced hackers, this book by Nmap's original author suits all levels of security and networking professionals. The reference guide documents every Nmap feature and option, while the remainder demonstrates how to apply them to quickly solve real-world tasks. Examples and diagrams show actual communication on the wire. Topics include subverting firewalls and intrusion detection systems, optimizing Nmap performance, and automating common networking tasks with the Nmap Scripting Engine. More than half of the book is available free online. It was written in English but has already been translated to other languages.\n\nInstallation is made easy by the detailed Nmap Installation Guide. This covers topics such as UNIX compilation and configure directives and Installing Nmap on Linux, Windows, Mac OS X, Free/Open/NetBSD, Solaris, Amiga, and HP-UX. It also covers Nmap removal in case you change your mind.\n\nOne of Nmap's most exciting new features is the Nmap Scripting Engine, which extends Nmap's functionality using the simple and efficient Lua programming language. Nmap includes about 50 valuable scripts for network discovery and vulnerability detection, and you can also write your own. We describe the system in depth (from simple usage instructions to writing your own scripts) in our NSE guide. We also have an NSE Documentation Portal which includes detailed documentation for every NSE script and library.\n\nFyodor regularly gives conference presentations covering advanced Nmap usage and new features. Audio, video, and/or slides for many of these are available on his presentations page.\n\nInterested in how nmap uses TCP/IP fingerprinting for remote OS detection? We have written a detailed article on the 2nd Generation Nmap OS Detection System. We also have an old article about the 1st generation system, which people have generously translated into French, Portuguese, Italian, Russian, Spanish, German, Japanese, Chinese, Traditional Chinese (Big5), Turkish, Hebrew, Indonesian, Dutch. Polish, and Swedish.\n\nNmap Version Detection: Instead of using a simple nmap-services table lookup to determine a port's likely purpose, Nmap will (if asked) interrogate that TCP or UDP port to determine what service is really listening. In many cases it can determine the application name and version number as well. Obstacles like SSL encryption and Sun RPC are no threat, as Nmap can connect using OpenSSL (if available) as well as utilizing Nmap's RPC bruteforcer. IPv6 is also supported. Learn all about this great feature in our Version Detection Paper\n\n\n\nNmap now has an official cross-platform GUI named Zenmap. It is included in most of the packages on the Nmap download page. It is documented in the Zenmap User's Guide. More information is available from the Zenmap site and Zenmap man page.\n\nOne of the coolest, yet still relatively obscure features of Nmap is the IPID Idle scan (-sI). Not only does this allow for a completely blind portscan (no packets sent to the target from your real IP), but it can even allow you to bypass packet filters in certain circumstances. We wrote a Idle scanning paper describing this technique as well as several other exploits based on predictable IPID sequence numbers. It includes real-life examples as well as a section on defending yourself from these techniques.\n\nThe most important changes (features, bugfixes, etc) in each Nmap version are described in its ChangeLog.\n\nWhile it is now only of historical interest, Nmap was first released in a September 1, 1997 Phrack 51 Article titled The Art of Port Scanning\n\nThis section covers books written/co-authored by Nmap author Fyodor or that cover Nmap extensively.\n• Nmap Network Scanning is the official guide to Nmap. From explaining port scanning basics for novices to detailing low-level packet crafting methods used by advanced hackers, this book by Nmap's original author suits all levels of security and networking professionals. The reference guide documents every Nmap feature and option, while the remainder demonstrates how to apply them to quickly solve real-world tasks. Examples and diagrams show actual communication on the wire. Topics include subverting firewalls and intrusion detection systems, optimizing Nmap performance, and automating common networking tasks with the Nmap Scripting Engine. More than half of the book is available free online. It was written in English but has already been translated to other languages.\n• Fyodor has co-authored Stealing the Network: How to Own a Continent, a novel on hacking, along with FX, Joe Grand, Kevin Mitnick, Ryan Russell, Jay Beale, and several others. Their individual stories combine to describe a massive electronic financial heist. While the work is fiction, hacks are described in depth using real technology such as Nmap, Hping2, OpenSSL, etc. Stealing the Network: How to Own a Continent can be purchased at Amazon (save $17), and your can read Fyodor's chapter online for free. STC was a best-seller, ranking for a while as the second-highest selling computer book on Amazon.\n• Syngress has released a sequel: Stealing the Network: How to Own an Identity. They have generously allowed Fyodor to post his favorite chapter for free. So enjoy Bl@ckTo\\/\\/3r, by Nmap contributor Brian Hatch. It is full of wry humor and creative security conundrums to keep the experts entertained, while it also offers security lessons on the finer points of SSH, SSL, and X Windows authentication and encryption.\n• Paulino Calderón Pale has written Nmap 6: Network Exploration and Security Auditing Cookbook (also available directly through Packt Publishing).\n• Paulino has also written Mastering the Nmap Scripting Engine (also available directly through Packt Publishing).\n• James Messer has written Secrets of Network Cartography, a 230-page eBook on Nmap. PDFs can be purchased, or you can view the ad-supported HTML version for free.\n• Syngress has released Nmap in the Enterprise: Your Guide to Network Scanning by Angela Orebaugh and Becky Pinkard.\n\nSome of the best (and certainly most creative!) documentation has been contributed by Nmap users themselves. If you write an interesting or useful document about Nmap, please send the announcement to nmap-dev or directly to Fyodor.\n\nJames “Professor” Messer's \"Nmap Secrets\" training course is no longer available, but he still has lots of Nmap-related content at ProfessorMesser.Com.\n\nA detailed Nmap Tutorial was maintained between 2003 and 2006 by Andrew Bennieston (Stormhawk).\n\nMohamed Aly has created this single-page (PDF) Nmap Mindmap as a convenient reference to all of the major Nmap options. [2006]\n\nMark Wolfgang has written an excellent paper on advanced host discovery using Nmap. Here is the PDF paper [local copy] and associated source code. [2002]\n\nAdrian Crenshaw has made a couple excellent video tutorials in Flash. Check out Volume 1: Basic Nmap Usage and Volume 2: Port Scan Boogaloo. [2005]\n\nLong-time Nmap contributor Lamont Granquist wrote a clear and useful (if dated) guide to getting started with nmap. [1999]\n\nRaven Alder has written a short guide named Nmap -- looking from the outside in for LinuxChix. [2002]\n\nUh-oh! Security expert and Counter Hack author Ed Skoudis has discovered our secret partnership with Microsoft!"
    },
    {
        "link": "https://recordedfuture.com/threat-intelligence-101/tools-and-techniques/nmap-commands",
        "document": "Nmap is one of the most popular network mappers in the infosec world. It’s utilized by cybersecurity professionals and newbies alike to audit and discover local and remote open ports, as well as hosts and network information.\n\nLike many OSINT tools, Nmap stands out not only for being open-source but also for being free, multi-platform, and regularly updated each year. Plus, it's one of the most comprehensive tools available for scanning hosts, networks, and ports.\n\nIt includes a large set of options to enhance your scanning and mapping tasks, and brings with it an incredible community and comprehensive documentation to help you understand this tool from the very start. Nmap can be used to:\n• Get the OS system and software details\n\nIt was mentioned in the OSINT Framework article we published, and today we’ll explore a little bit more about this essential security tool with some practical terminal-based Nmap commands.\n\nAs we’ve said before, Nmap is a network scanner utility used for port mapping, host discovery and vulnerability scanning. Most of its functions are based on using IP packet analysis to detect and identify remote hosts, operating systems and services.\n\nNmap is used by mid and large companies as well as smaller-sized organizations for semi-automated and manual port auditing, host monitoring, penetration testing, red and blue team exercises, and similar tasks.\n\nEven with Nmap constantly being updated with new features for decades, its core function remains as a network scanner, helping users gather data by sending packets to local or remote ports. This is done by waiting for packet responses to determine if ports are closed, open or filtered.\n\nThe most popular method of using Nmap is via the terminal (command-line console), by performing a Nmap full scan command, but we'll take a look into more examples below.\n\nLearning Threat Intelligence as the First Step in Network Defense\n\nLearning how to scan your own network isn't just about defense; it's also a fundamental aspect of learning threat intelligence.\n\nLearning how to scan your own network isn't just about defense; it's also a fundamental aspect of learning threat intelligence and reducing your attack surface.\n\nThis process equips you with the essential knowledge and tools to identify potential vulnerabilities within your network before they can be exploited by external threats. By familiarizing yourself with the ins and outs of your network's architecture and understanding the landscape of potential emerging threats, you enhance your defensive capabilities.\n\nMoreover, this knowledge empowers you to make informed decisions about security measures and plays a crucial role in cyber crime investigation processes. Adopting this proactive approach is vital in building a resilient and secure network environment. It safeguards your digital assets against unauthorized access and cyber-attacks, marking a significant step forward in mastering threat intelligence.\n\nReady to take your cybersecurity skills to the next level?\n\nJoin us for free at Recorded Future University. Our Intelligence Fundamentals Certification offers an outstanding opportunity to boost your threat intelligence capabilities and secure your company's digital future.\n\nHow To Use Nmap\n\nNmap is pretty easy to use if you're familiar with command-line interfaces. As it’s already installed on most Linux/Unix-based distributions, you just have to execute the ‘nmap’ command from any terminal, and that’s it. It will display several options for you.\n\nAdvanced users will also be able to use Nmap along with other system scripts and automated tasks in order to maximize the powers of this tool.\n\nOne of the most basic Nmap commands for a scan is the nmap port scan command:\n\nThat’s how you use Nmap.\n\nHow To Install Nmap on Linux, Windows and Mac\n\nWhat happens if your operating system doesn’t include Nmap? No worries, let’s see how to install it. While the installation process can differ a bit depending on the OS you are using, in most cases (MacOS and Windows) our recommendation is to get the latest release from the Nmap website’s download page.\n\nOpen the terminal and run the following commands to get Nmap installed:\n\nThat's it. Nmap is now installed on Linux.\n\nOnce you download the installer, execute it and install it. The automated installer should take care of configuring Nmap for you in mere seconds.\n\nMac users also have a full automated installer. Just run the Nmap-mpkg file to begin the installation. After a few seconds,\n\nNmap will be ready on your MacOS.\n\nLet’s get to know a few useful command-line based best Nmap scans that can be performed.\n\nNow, if you want to scan a hostname, simply replace the IP for the host, as you see below:\n\nThis kind of scans, such as the Nmap scan host are perfect for your first steps when starting with Nmap.\n\nThe most famous type of scan is the Nmap ping scan (so-called because it’s often used to perform Nmap ping sweeps), and it’s the easiest way to detect hosts on any network.\n\nThe drawback of this ICMP-only type of scan is that remote hosts often block IP-based ping packets, so if you’re unable to get solid results, we recommend switching to ARP-based requests for your scan.\n\n3. Scan specific ports or scan entire port ranges on a local or remote server\n\nIn this example, we scanned all 65535 ports for our localhost computer.\n\nNmap is able to scan all possible ports, but you can also scan specific ports, which will report faster results. See below:\n\nLet’s try to scan multiple IP addresses. For this you need to use this syntax:\n\nYou can also scan consecutive IP addresses:\n\nThis will scan 1.1.1.1, 1.1.1.2, 1.1.1.3 and 1.1.1.4.\n\nYou can also use Nmap to scan entire CIDR IP ranges, for example:\n\nThis will scan 14 consecutive IP ranges, from 8.8.8.1 to 8.8.8.14.\n\nAn alternative is to simply use this kind of range:\n\nYou can even use wildcards to scan the entire C class IP range, for example:\n\nThis will scan 256 IP addresses from 8.8.8.1 to 8.8.8.256.\n\nIf you ever need to exclude certain IPs from the IP range scan, you can use the “–exclude” option, as you see below:\n\nUsing “–top-ports” parameter along with a specific number lets you scan the top X most common ports for that host, as we can see:\n\nReplace “20” with the desired number. Output example:\n\n[root@securitytrails:~]nmap --top-ports 20 localhost\n\n Starting Nmap 6.40 at 2018-10-01 10:02 EDT\n\n Nmap scan report for localhost (127.0.0.1)\n\n Host is up (0.000016s latency).\n\n Other addresses for localhost (not scanned): 127.0.0.1\n\n PORT STATE SERVICE\n\n 21/tcp closed ftp\n\n 22/tcp closed ssh\n\n 23/tcp closed telnet\n\n 25/tcp closed smtp\n\n 53/tcp closed domain\n\n 80/tcp filtered http\n\n 110/tcp closed pop3\n\n 111/tcp closed rpcbind\n\n 135/tcp closed msrpc\n\n 139/tcp closed netbios-ssn\n\n 143/tcp closed imap\n\n 443/tcp filtered https\n\n 445/tcp closed microsoft-ds\n\n 993/tcp closed imaps\n\n 995/tcp closed pop3s\n\n 1723/tcp closed pptp\n\n 3306/tcp closed mysql\n\n 3389/tcp closed ms-wbt-server\n\n 5900/tcp closed vnc\n\n 8080/tcp closed http-proxy\n\nIn this case, Nmap is also useful to read files that contain hosts and IPs inside.\n\nLet’s suppose you create a list.txt file that contains these lines inside:\n\nThe “-iL” parameter lets you read from that file, and scan all those hosts for you:\n\nOn the other hand, in the following example we will not be reading from a file, but exporting/saving our results into a text file:\n\nNmap has the ability to export files into XML format as well, see the next example:\n\nIf you need to speed up your scans a little bit, you can always choose to disable reverse DNS resolution for all your scans. Just add the “-n” parameter.\n\n[root@securitytrails:~]nmap -p 80 -n 8.8.8.8\n\n Starting Nmap 7.60 at 2018-10-01 09:15 -03\n\n Nmap scan report for 8.8.8.8\n\n Host is up (0.014s latency).\n\n PORT STATE SERVICE\n\n 80/tcp filtered http\n\nSee the difference with a normal DNS-resolution enabled scan:\n\n[root@securitytrails:~]nmap -p 80 8.8.8.8\n\n Starting Nmap 7.60 at 2018-10-01 09:15 -03\n\n Nmap scan report for google-public-dns-a.google .com (8.8.8.8)\n\n Host is up (0.014s latency).\n\n PORT STATE SERVICE\n\n 80/tcp filtered http\n\nUsing the “-A” parameter enables you to perform OS and service detection, and at the same time we are combining this with “-T4” for faster execution. See the example below:\n\nThis is the output we got for this test:\n\nThis can be done by using -sV parameters\n\nAs you can see here:\n\n[root@securitytrails:~]nmap -sV localhost\n\n Starting Nmap 7.60 at 2018-10-01 09:28 -03\n\n Nmap scan report for localhost (127.0.0.1)\n\n Host is up (0.000020s latency).\n\n Other addresses for localhost (not scanned): ::1\n\n Not shown: 997 closed ports\n\n PORT STATE SERVICE VERSION\n\n 111/tcp open rpcbind 2-4 (RPC #100000)\n\n 631/tcp open ipp CUPS 2.2\n\n 902/tcp open ssl/vmware-auth VMware Authentication Daemon 1.10 (Uses VNC, SOAP)\n\nService detection performed. Please report any incorrect results at https:// nmap .org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.96 seconds\n\nOne of the things we love most about Nmap is the fact that it works for both TCP and UDP protocols. And while most services run on TCP, you can also get a great advantage by scanning UDP-based services. Let’s see some examples.\n\n[root@securitytrails:~]nmap -sT 192.168.1.1\n\n Starting Nmap 7.60 at 2018-10-01 09:33 -03\n\n Nmap scan report for 192.168.1.1\n\n Host is up (0.58s latency).\n\n Not shown: 995 closed ports\n\n PORT STATE SERVICE\n\n 80/tcp open http\n\n 1900/tcp open upnp\n\n 20005/tcp open btx\n\n 49152/tcp open unknown\n\n 49153/tcp open unknown\n\n Nmap done: 1 IP address (1 host up) scanned in 1.43 seconds\n\n[root@securitytrails:~]nmap -sU localhost\n\n Starting Nmap 7.60 at 2018-10-01 09:37 -03\n\n Nmap scan report for localhost (127.0.0.1)\n\n Host is up (0.000021s latency).\n\n Other addresses for localhost (not scanned): ::1\n\n Not shown: 997 closed ports\n\n PORT STATE SERVICE\n\n 68/udp open|filtered dhcpc\n\n 111/udp open rpcbind\n\n 5353/udp open|filtered zeroconf\n\nOne of Nmap’s greatest features that not all the network and systems administrators know about is something called “Nmap Scripting Engine” (known as NSE). This scripting engine allows users to use a pre-defined set of scripts, or write their own using Lua programming language.\n\nUsing Nmap scripts is crucial in order to automate system and vulnerability scans. For example, if you want to run a full vulnerability test against your target, you can use these parameters:\n\n[root@securitytrails:~]nmap -Pn --script vuln 192.168.1.105\n\n Starting Nmap 7.60 at 2018-10-01 09:46 -03\n\n Pre-scan script results:\n\n | broadcast-avahi-dos:\n\n | Discovered hosts:\n\n | 224.0.0.251\n\n | After NULL UDP avahi packet DoS (CVE-2011-1002).\n\n |_ Hosts are all up (not vulnerable).\n\n Nmap scan report for 192.168.1.105\n\n Host is up (0.00032s latency).\n\n Not shown: 995 closed ports\n\n PORT STATE SERVICE\n\n 80/tcp open http\n\n |_http-csrf: Couldn't find any CSRF vulnerabilities.\n\n |_http-dombased-xss: Couldn't find any DOM based XSS.\n\n | http-slowloris-check:\n\n | VULNERABLE:\n\n | Slowloris DOS attack\n\n | State: LIKELY VULNERABLE\n\n | IDs: CVE:CVE-2007-6750\n\n | Slowloris tries to keep many connections to the target web server open and hold\n\n | them open as long as possible. It accomplishes this by opening connections to\n\n | the target web server and sending a partial request. By doing so, it starves\n\n | the http server's resources causing Denial Of Service.\n\n |\n\n | Disclosure date: 2009-09-17\n\n | References:\n\n |_ https:// cve.mitre .org/cgi-bin/cvename.cgi?name=CVE-2007-6750\n\n |_http-stored-xss: Couldn't find any stored XSS vulnerabilities.\n\n |_http-vuln-cve2014-3704: ERROR: Script execution failed (use -d to debug)\n\n 1900/tcp open upnp\n\n 20005/tcp open btx\n\n 49152/tcp open unknown\n\n 49153/tcp open unknown\n\nAs you can see, in this vulnerability test we were able to detect one CVE (Slowloris DOS attack).\n\nNmap features never seem to end, and thanks to the NSE, that even allows us to launch flood attacks against our network to test how effective our mitigation methods are.\n\nIn our previous example (#12) we found the host was vulnerable to Slowloris attack, and now we’ll try to exploit that vulnerability by launching a flood attack in a forever loop:\n\nNSE is really fascinating -- it contains scripts for everything you can imagine. See the next three examples of BFA against WordPress, MSSQL, and FTP server:\n\nNmap is able to detect malware and backdoors by running extensive tests on a few popular OS services like Identd, Proftpd, Vsftpd, IRC, SMB, and SMTP. It also has a module to check for popular malware signs inside remote servers and integrates Google’s Safe Browsing and VirusTotal databases as well.\n\nA common malware scan can be performed by using:\n\nNmap is one of the most complete and accurate port scanners used by infosec professionals today. With it, you can perform simple port scan tasks or use its powerful scripting engine to launch DOS attacks, detect malware or brute force testing on remote and local servers.\n\nToday we covered the top fifteen Nmap commands to scan remote hosts, but there’s a lot more to discover if you’re starting to use Nmap in your OSINT strategy.\n\nNmap has been one of the most popular port and network scanners for decades. Still, new users often have questions about how it works and its legal usage, and even look for other, similar software from time to time.\n\nYes, Nmap is completely free for you to download and use. It’s also an open source (licensed) project, so you can inspect, modify, and enhance it to match your needs.\n\nNmap is legal; however, that hinges entirely on the purpose the user has for using it. Scanning your own network is totally legal, but scanning third-party networks may get you into legal problems if you aren’t authorized, depending on the country and state in which you live.\n\nThere are many nuances to—and opinions about—port scanning legality. To help you avoid legal issues, we recommend reading the official implications detailed on the Nmap website’s legal issues page.\n\nHow Does it Work?\n\nNmap works by sending and receiving network packets, and checking against its fingerprint database and other methods, to quickly detect hosts and IP addresses over a network. It then performs analysis on the data to quickly respond with results on your console. Most Nmap scans will require you to perform them with root-based (admin) access on Linux and Unix. While on Windows, running Nmap with an administrator account is always a good practice.\n\nIs there any other similar software like Nmap?\n\nThere are tons of alternatives to Nmap, including Masscan, Rustcan, and others. While some of this similar software offers faster scanning times, almost none of them offers as many options and high-quality results as an Nmap full scan does.\n\nFor most users, even the advanced ones, Nmap is enough. If you don’t like terminals, you can always take a look into ZenMap, the GUI-based version of Nmap.\n\nUnderstanding network security and threat intelligence is crucial, but the reliance on manual scans can be time-consuming and less efficient than needed. These traditional methods, while foundational, are time-consuming and can divert resources from strategic initiatives. The evolution of cybersecurity threats demands a more efficient approach.\n\nThis is where Recorded Future steps in. Our intelligence platform cuts through the noise and saves you from the time sink of manual processes. Ready to see the difference for yourself?. Take your efforts to the next level—book a demo today."
    },
    {
        "link": "https://nmap.org/book/man.html",
        "document": "Nmap (“Network Mapper”) is an open source tool for network exploration and security auditing. It was designed to rapidly scan large networks, although it works fine against single hosts. Nmap uses raw IP packets in novel ways to determine what hosts are available on the network, what services (application name and version) those hosts are offering, what operating systems (and OS versions) they are running, what type of packet filters/firewalls are in use, and dozens of other characteristics. While Nmap is commonly used for security audits, many systems and network administrators find it useful for routine tasks such as network inventory, managing service upgrade schedules, and monitoring host or service uptime.\n\nThe output from Nmap is a list of scanned targets, with supplemental information on each depending on the options used. Key among that information is the “interesting ports table”. That table lists the port number and protocol, service name, and state. The state is either , , , or . means that an application on the target machine is listening for connections/packets on that port. means that a firewall, filter, or other network obstacle is blocking the port so that Nmap cannot tell whether it is or . ports have no application listening on them, though they could open up at any time. Ports are classified as when they are responsive to Nmap's probes, but Nmap cannot determine whether they are open or closed. Nmap reports the state combinations and when it cannot determine which of the two states describe a port. The port table may also include software version details when version detection has been requested. When an IP protocol scan is requested ( ), Nmap provides information on supported IP protocols rather than listening ports.\n\nIn addition to the interesting ports table, Nmap can provide further information on targets, including reverse DNS names, operating system guesses, device types, and MAC addresses.\n\nA typical Nmap scan is shown in Example 15.1. The only Nmap arguments used in this example are , to enable OS and version detection, script scanning, and traceroute; for faster execution; and then the hostname.\n\nThe newest version of Nmap can be obtained from . The newest version of this man page is available at . It is also included as a chapter of Nmap Network Scanning: The Official Nmap Project Guide to Network Discovery and Security Scanning."
    },
    {
        "link": "https://nmap.org/book/man-port-scanning-techniques.html",
        "document": "SYN scan is the default and most popular scan option for good reasons. It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. It is also relatively unobtrusive and stealthy since it never completes TCP connections. SYN scan works against any compliant TCP stack rather than depending on idiosyncrasies of specific platforms as Nmap's FIN/NULL/Xmas, Maimon and idle scans do. It also allows clear, reliable differentiation between the , , and states. This technique is often referred to as half-open scanning, because you don't open a full TCP connection. You send a SYN packet, as if you are going to open a real connection and then wait for a response. A SYN/ACK indicates the port is listening (open), while a RST (reset) is indicative of a non-listener. If no response is received after several retransmissions, the port is marked as filtered. The port is also marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received. The port is also considered open if a SYN packet (without the ACK flag) is received in response. This can be due to an extremely rare TCP feature known as a simultaneous open or split handshake connection (see ).\n\nTCP connect scan is the default TCP scan type when SYN scan is not an option. This is the case when a user does not have raw packet privileges. Instead of writing raw packets as most other scan types do, Nmap asks the underlying operating system to establish a connection with the target machine and port by issuing the system call. This is the same high-level system call that web browsers, P2P clients, and most other network-enabled applications use to establish a connection. It is part of a programming interface known as the Berkeley Sockets API. Rather than read raw packet responses off the wire, Nmap uses this API to obtain status information on each connection attempt. When SYN scan is available, it is usually a better choice. Nmap has less control over the high level call than with raw packets, making it less efficient. The system call completes connections to open target ports rather than performing the half-open reset that SYN scan does. Not only does this take longer and require more packets to obtain the same information, but target machines are more likely to log the connection. A decent IDS will catch either, but most machines have no such alarm system. Many services on your average Unix system will add a note to syslog, and sometimes a cryptic error message, when Nmap connects and then closes the connection without sending data. Truly pathetic services crash when this happens, though that is uncommon. An administrator who sees a bunch of connection attempts in her logs from a single system should know that she has been connect scanned.\n\nWhile most popular services on the Internet run over the TCP protocol, UDP services are widely deployed. DNS, SNMP, and DHCP (registered ports 53, 161/162, and 67/68) are three of the most common. Because UDP scanning is generally slower and more difficult than TCP, some security auditors ignore these ports. This is a mistake, as exploitable UDP services are quite common and attackers certainly don't ignore the whole protocol. Fortunately, Nmap can help inventory UDP ports. UDP scan is activated with the option. It can be combined with a TCP scan type such as SYN scan ( ) to check both protocols during the same run. UDP scan works by sending a UDP packet to every targeted port. For some common ports such as 53 and 161, a protocol-specific payload is sent to increase response rate, but for most ports the packet is empty unless the , , or options are specified. If an ICMP port unreachable error (type 3, code 3) is returned, the port is . Other ICMP unreachable errors (type 3, codes 0, 1, 2, 9, 10, or 13) mark the port as . Occasionally, a service will respond with a UDP packet, proving that it is . If no response is received after retransmissions, the port is classified as . This means that the port could be open, or perhaps packet filters are blocking the communication. Version detection ( ) can be used to help differentiate the truly open ports from the filtered ones. A big challenge with UDP scanning is doing it quickly. Open and filtered ports rarely send any response, leaving Nmap to time out and then conduct retransmissions just in case the probe or response were lost. Closed ports are often an even bigger problem. They usually send back an ICMP port unreachable error. But unlike the RST packets sent by closed TCP ports in response to a SYN or connect scan, many hosts rate limit ICMP port unreachable messages by default. Linux and Solaris are particularly strict about this. For example, the Linux 2.4.20 kernel limits destination unreachable messages to one per second (in ). Nmap detects rate limiting and slows down accordingly to avoid flooding the network with useless packets that the target machine will drop. Unfortunately, a Linux-style limit of one packet per second makes a 65,536-port scan take more than 18 hours. Ideas for speeding your UDP scans up include scanning more hosts in parallel, doing a quick scan of just the popular ports first, scanning from behind the firewall, and using to skip slow hosts.\n\nSCTP is a relatively new alternative to the TCP and UDP protocols, combining most characteristics of TCP and UDP, and also adding new features like multi-homing and multi-streaming. It is mostly being used for SS7/SIGTRAN related services but has the potential to be used for other applications as well. SCTP INIT scan is the SCTP equivalent of a TCP SYN scan. It can be performed quickly, scanning thousands of ports per second on a fast network not hampered by restrictive firewalls. Like SYN scan, INIT scan is relatively unobtrusive and stealthy, since it never completes SCTP associations. It also allows clear, reliable differentiation between the , , and states. This technique is often referred to as half-open scanning, because you don't open a full SCTP association. You send an INIT chunk, as if you are going to open a real association and then wait for a response. An INIT-ACK chunk indicates the port is listening (open), while an ABORT chunk is indicative of a non-listener. If no response is received after several retransmissions, the port is marked as filtered. The port is also marked filtered if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received.\n\nThese three scan types (even more are possible with the option described in the next section) exploit a subtle loophole in the TCP RFC to differentiate between and ports. Page 65 of RFC 793 says that “if the [destination] port state is CLOSED .... an incoming segment not containing a RST causes a RST to be sent in response.” Then the next page discusses packets sent to open ports without the SYN, RST, or ACK bits set, stating that: “you are unlikely to get here, but if you do, drop the segment, and return.” When scanning systems compliant with this RFC text, any packet not containing SYN, RST, or ACK bits will result in a returned RST if the port is closed and no response at all if the port is open. As long as none of those three bits are included, any combination of the other three (FIN, PSH, and URG) are OK. Nmap exploits this with three scan types: Does not set any bits (TCP flag header is 0) Sets the FIN, PSH, and URG flags, lighting the packet up like a Christmas tree. These three scan types are exactly the same in behavior except for the TCP flags set in probe packets. If a RST packet is received, the port is considered , while no response means it is . The port is marked if an ICMP unreachable error (type 3, code 0, 1, 2, 3, 9, 10, or 13) is received. The key advantage to these scan types is that they can sneak through certain non-stateful firewalls and packet filtering routers. Another advantage is that these scan types are a little more stealthy than even a SYN scan. Don't count on this though—most modern IDS products can be configured to detect them. The big downside is that not all systems follow RFC 793 to the letter. A number of systems send RST responses to the probes regardless of whether the port is open or not. This causes all of the ports to be labeled . Major operating systems that do this are Microsoft Windows, many Cisco devices, BSDI, and IBM OS/400. This scan does work against most Unix-based systems though. Another downside of these scans is that they can't distinguish ports from certain ones, leaving you with the response .\n\nWindow scan is exactly the same as ACK scan except that it exploits an implementation detail of certain systems to differentiate open ports from closed ones, rather than always printing when a RST is returned. It does this by examining the TCP Window field of the RST packets returned. On some systems, open ports use a positive window size (even for RST packets) while closed ones have a zero window. So instead of always listing a port as when it receives a RST back, Window scan lists the port as or if the TCP Window value in that reset is positive or zero, respectively. This scan relies on an implementation detail of a minority of systems out on the Internet, so you can't always trust it. Systems that don't support it will usually return all ports . Of course, it is possible that the machine really has no open ports. If most scanned ports are but a few common port numbers (such as 22, 25, 53) are , the system is most likely susceptible. Occasionally, systems will even show the exact opposite behavior. If your scan shows 1,000 open ports and three closed or filtered ports, then those three may very well be the truly open ones.\n\nTruly advanced Nmap users need not limit themselves to the canned scan types offered. The option allows you to design your own scan by specifying arbitrary TCP flags. Let your creative juices flow, while evading intrusion detection systems whose vendors simply paged through the Nmap man page adding specific rules! The argument can be a numerical flag value such as 9 (PSH and FIN), but using symbolic names is easier. Just mash together any combination of , , , , , and . For example, sets everything, though it's not very useful for scanning. The order these are specified in is irrelevant. In addition to specifying the desired flags, you can specify a TCP scan type (such as or ). That base type tells Nmap how to interpret responses. For example, a SYN scan considers no-response to indicate a port, while a FIN scan treats the same as . Nmap will behave the same way it does for the base scan type, except that it will use the TCP flags you specify instead. If you don't specify a base type, SYN scan is used.\n\nIP protocol scan allows you to determine which IP protocols (TCP, ICMP, IGMP, etc.) are supported by target machines. This isn't technically a port scan, since it cycles through IP protocol numbers rather than TCP or UDP port numbers. Yet it still uses the option to select scanned protocol numbers, reports its results within the normal port table format, and even uses the same underlying scan engine as the true port scanning methods. So it is close enough to a port scan that it belongs here. Besides being useful in its own right, protocol scan demonstrates the power of open-source software. While the fundamental idea is pretty simple, I had not thought to add it nor received any requests for such functionality. Then in the summer of 2000, Gerhard Rieger conceived the idea, wrote an excellent patch implementing it, and sent it to the announce mailing list (then called nmap-hackers). I incorporated that patch into the Nmap tree and released a new version the next day. Few pieces of commercial software have users enthusiastic enough to design and contribute their own improvements! Protocol scan works in a similar fashion to UDP scan. Instead of iterating through the port number field of a UDP packet, it sends IP packet headers and iterates through the eight-bit IP protocol field. The headers are usually empty, containing no data and not even the proper header for the claimed protocol. The exceptions are TCP, UDP, ICMP, SCTP, and IGMP. A proper protocol header for those is included since some systems won't send them otherwise and because Nmap already has functions to create them. Instead of watching for ICMP port unreachable messages, protocol scan is on the lookout for ICMP protocol unreachable messages. If Nmap receives any response in any protocol from the target host, Nmap marks that protocol as . An ICMP protocol unreachable error (type 3, code 2) causes the protocol to be marked as while port unreachable (type 3, code 3) marks the protocol . Other ICMP unreachable errors (type 3, code 0, 1, 9, 10, or 13) cause the protocol to be marked (though they prove that ICMP is at the same time). If no response is received after retransmissions, the protocol is marked\n\nAn interesting feature of the FTP protocol (RFC 959) is support for so-called proxy FTP connections. This allows a user to connect to one FTP server, then ask that files be sent to a third-party server. Such a feature is ripe for abuse on many levels, so most servers have ceased supporting it. One of the abuses this feature allows is causing the FTP server to port scan other hosts. Simply ask the FTP server to send a file to each interesting port of a target host in turn. The error message will describe whether the port is open or not. This is a good way to bypass firewalls because organizational FTP servers are often placed where they have more access to other internal hosts than any old Internet host would. Nmap supports FTP bounce scan with the option. It takes an argument of the form : @ : . is the name or IP address of a vulnerable FTP server. As with a normal URL, you may omit : , in which case anonymous login credentials (user: password: ) are used. The port number (and preceding colon) may be omitted as well, in which case the default FTP port (21) on is used. This vulnerability was widespread in 1997 when Nmap was released, but has largely been fixed. Vulnerable servers are still around, so it is worth trying when all else fails. If bypassing a firewall is your goal, scan the target network for port 21 (or even for any FTP services if you scan all ports with version detection) and use the NSE script. Nmap will tell you whether the host is vulnerable or not. If you are just trying to cover your tracks, you don't need to (and, in fact, shouldn't) limit yourself to hosts on the target network. Before you go scanning random Internet addresses for vulnerable FTP servers, consider that sysadmins may not appreciate you abusing their servers in this way."
    },
    {
        "link": "https://nmap.org/book/nse-usage.html",
        "document": "While NSE has a complex implementation for efficiency, it is strikingly easy to use. Simply specify to enable the most common scripts. Or specify the option to choose your own scripts to execute by providing categories, script file names, or the name of directories full of scripts you wish to execute. You can customize some scripts by providing arguments to them via the and options. The shows a description of what each selected script does. The two remaining options, and , are generally only used for script debugging and development. Script scanning is also included as part of the (aggressive scan) option.\n\nScript scanning is normally done in combination with a port scan, because scripts may be run or not run depending on the port states found by the scan. With the option it is possible to run a script scan without a port scan, only host discovery. In this case only host scripts will be eligible to run. To run a script scan with neither a host discovery nor a port scan, use the options together with or . Every host will be assumed up and still only host scripts will be run. This technique is useful for scripts like that only use the remote system's address and don't require it to be up.\n\nScripts are not run in a sandbox and thus could accidentally or maliciously damage your system or invade your privacy. Never run scripts from third parties unless you trust the authors or have carefully audited the scripts yourself.\n\nNSE scripts define a list of categories they belong to. Currently defined categories are , , , . , , , , , , , , , and . Category names are not case sensitive. The following list describes each category. These scripts deal with authentication credentials (or bypassing them) on the target system. Examples include , , and . Scripts which use brute force attacks to determine credentials are placed in the category instead. Scripts in this category typically do discovery of hosts not listed on the command line by broadcasting on the local network. Use the script argument to allow these scripts to automatically add the hosts they discover to the Nmap scanning queue. These scripts use brute force attacks to guess authentication credentials of a remote server. Nmap contains scripts for brute forcing dozens of protocols, including , , , etc. These scripts are the default set and are run when using the or options rather than listing scripts with . This category can also be specified explicitly like any other using . Many factors are considered in deciding whether a script should be run by default: A default scan must finish quickly, which excludes brute force authentication crackers, web spiders, and any other scripts which can take minutes or hours to scan a single service. Default scans need to produce valuable and actionable information. If even the script author has trouble explaining why an average networking or security professional would find the output valuable, the script should not run by default. Nmap output is used for a wide variety of purposes and needs to be readable and concise. A script which frequently produces pages full of output should not be added to the category. When there is no important information to report, NSE scripts (particularly default ones) should return nothing. Checking for an obscure vulnerability may be OK by default as long as it only produces output when that vulnerability is discovered. Many scripts use heuristics and fuzzy signature matching to reach conclusions about the target host or service. Examples include and . If the script is often wrong, it doesn't belong in the category where it may confuse or mislead casual users. Users who specify a script or category directly are generally more advanced and likely know how the script works or at least where to find its documentation. Some scripts are very intrusive because they use significant resources on the remote system, are likely to crash the system or service, or are likely to be perceived as an attack by the remote administrators. The more intrusive a script is, the less suitable it is for the category. Default scripts are almost always in the category too, though we occasionally allow scripts by default when they are only mildly intrusive and score well in the other factors. Some scripts, particularly those in the category described later, divulge information to third parties by their very nature. For example, the script must divulge the target IP address to regional whois registries. We have also considered (and decided against) adding scripts which check target SSH and SSL key fingerprints against Internet weak key databases. The more privacy-invasive a script is, the less suitable it is for category inclusion. We don't have exact thresholds for each of these criteria, and many of them are subjective. All of these factors are considered together when making a decision whether to promote a script into the category. A few default scripts are (determines the username running remote services using identd), (obtains authentication scheme and realm of web sites requiring authentication), and (tests whether an FTP server allows anonymous access). These scripts try to actively discover more about the network by querying public registries, SNMP-enabled devices, directory services, and the like. Examples include (obtains the title of the root path of web sites), (enumerates Windows shares), and (extracts system details via SNMP). Scripts in this category may cause a denial of service. Sometimes this is done to test vulnerability to a denial of service method, but more commonly it is an undesired by necessary side effect of testing for a traditional vulnerability. These tests sometimes crash vulnerable services. These scripts aim to actively exploit some vulnerability. Examples include and . Scripts in this category may send data to a third-party database or other network resource. An example of this is , which makes a connection to whois servers to learn about the address of the target. There is always the possibility that operators of the third-party database will record anything you send to them, which in many cases will include your IP address and the address of the target. Most scripts involve traffic strictly between the scanning computer and the client; any that do not are placed in this category. This category contains scripts which are designed to send server software unexpected or randomized fields in each packet. While this technique can useful for finding undiscovered bugs and vulnerabilities in software, it is both a slow process and bandwidth intensive. An example of a script in this category is , which bombards a DNS server with slightly flawed domain requests until either the server crashes or a user specified time limit elapses. These are scripts that cannot be classified in the category because the risks are too high that they will crash the target system, use up significant resources on the target host (such as bandwidth or CPU time), or otherwise be perceived as malicious by the target's system administrators. Examples are (which attempts to use the target server as an HTTP proxy) and (which tries to guess a device's SNMP community string by sending common values such as , , and ). Unless a script is in the special category, it should be categorized as either or . These scripts test whether the target platform is infected by malware or backdoors. Examples include , which watches for SMTP servers running on unusual port numbers, and , which detects identd spoofing daemons which provide a fake answer before even receiving a query. Both of these behaviors are commonly associated with malware infections. Scripts which weren't designed to crash services, use large amounts of network bandwidth or other resources, or exploit security holes are categorized as . These are less likely to offend remote administrators, though (as with all other Nmap features) we cannot guarantee that they won't ever cause adverse reactions. Most of these perform general network discovery. Examples are (retrieves an SSH host key) and (grabs the title from a web page). Scripts in the category are not categorized by safety, but any other scripts which aren't in should be placed in . The scripts in this special category are an extension to the version detection feature and cannot be selected explicitly. They are selected to run only if version detection ( ) was requested. Their output cannot be distinguished from version detection output and they do not produce service or host script results. Examples are , , and . These scripts check for specific known vulnerabilities and generally only report results if they are found. Examples include and .\n\nNSE supports four types of scripts, which are distinguished by the kind of targets they take and the scanning phase in which they are run. Individual scripts may support multiple types of operation. These scripts run before any of Nmap's scan phases, so Nmap has not collected any information about its targets yet. They can be useful for tasks which don't depend on specific scan targets, such as performing network broadcast requests to query DHCP and DNS SD servers. Some of these scripts can generate new targets for Nmap to scan (only if you specify the newtargets NSE argument). For example, dns-zone-transfer can obtain a list of IPs in a domain using a zone transfer request and then automatically add them to Nmap's scan target list. Prerule scripts can be identified by containing a function (see the section called “Rules”). Scripts in this phase run during Nmap's normal scanning process after Nmap has performed host discovery, port scanning, version detection, and OS detection against the target host. This type of script is invoked once against each target host which matches its function. Examples are whois-ip, which looks up ownership information for a target IP, and path-mtu which tries to determine the maximum IP packet size which can reach the target without requiring fragmentation. These scripts run against specific services listening on a target host. For example, Nmap includes more than 15 http service scripts to run against web servers. If a host has web servers running on multiple ports, those scripts may run multiple times (one for each port). These are the most commong Nmap script type, and they are distinguished by containing a function for deciding which detected services a script should run against. These scripts run after Nmap has scanned all of its targets. They can be useful for formatting and presenting Nmap output. For example, ssh-hostkey is best known for its service (portrule) script which connects to SSH servers, discovers their public keys, and prints them. But it also includes a postrule which checks for duplicate keys amongst all of the hosts scanned, then prints any that are found. Another potential use for a postrule script is printing a reverse-index of the Nmap output—showing which hosts run a particular service rather than just listing the services on each host. Postrule scripts are identified by containing a function. Many scripts could potentially run as either a prerule or postrule script. In those cases, we recommend using a prerule for consistency.\n\nThese are the five command-line arguments specific to script scanning: Performs a script scan using the default set of scripts. It is equivalent to . Some of the scripts in this category are considered intrusive and should not be run against a target network without permission. Runs a script scan using the comma-separated list of filenames, script categories, and directories. Each element in the list may also be a Boolean expression describing a more complex set of scripts. Each element is interpreted first as an expression, then as a category, and finally as a file or directory name. The special argument makes every script in Nmap's script database eligible to run. The argument should be used with caution as NSE may contain dangerous scripts including exploits, brute force authentication crackers, and denial of service attacks. Each element in the script expression list may be prefixed with a character to force the given script(s) to run regardless of the conditions in their or functions. This is generally only done by advanced users in special cases. For example, you might want to do a configuration review on a bunch of MS SQL servers, some of which are running on nonstandard ports. Rather than slow the Nmap scan by running extensive version detection ( ) so that Nmap will recognize the service, you can force the script to run against all the targeted hosts and ports by specifying . File and directory names may be relative or absolute. Absolute names are used directly. Relative paths are searched for in the subdirectory of each of the following places until found: the directory containing the executable the directory containing the executable, followed by (not searched on Windows) When a directory name ending in is given, Nmap loads every file in the directory whose name ends with . All other files are ignored and directories are not searched recursively. When a filename is given, it does not have to have the extension; it will be added automatically if necessary. See the section called “Script Selection” for examples and a full explanation of the option. Nmap scripts are stored in a subdirectory of the Nmap data directory by default (see Chapter 14, Understanding and Customizing Nmap Data Files). For efficiency, scripts are indexed in a database stored in , which lists the category or categories in which each script belongs. The argument will execute all scripts in the Nmap script database, but should be used cautiously since Nmap may contain exploits, denial of service attacks, and other dangerous scripts. Provides arguments to the scripts. See the section called “Arguments to Scripts” for a detailed explanation. This option is the same as except that you pass the arguments in a file rather than on the command-line. See the section called “Arguments to Scripts” for a detailed explanation. Shows help about scripts. For each script matching the given specification, Nmap prints the script name, its categories, and its description. The specifications are the same as those accepted by ; so for example if you want help about the script, you would run nmap --script-help ssl-enum-ciphers. A sample of script help is shown in Example 9.2, “Script help”. $ nmap --script-help \"afp-* and discovery\" Starting Nmap 7.40 ( https://nmap.org ) at 2017-04-21 14:15 UTC afp-ls Categories: discovery safe https://nmap.org/nsedoc/scripts/afp-ls.html Attempts to get useful information about files from AFP volumes. The output is intended to resemble the output of . afp-serverinfo Categories: default discovery safe https://nmap.org/nsedoc/scripts/afp-serverinfo.html Shows AFP server information. This information includes the server's hostname, IPv4 and IPv6 addresses, and hardware type (for example or ). afp-showmount Categories: discovery safe https://nmap.org/nsedoc/scripts/afp-showmount.html Shows AFP shares and ACLs. \n\n If the option is used, an XML representation of the script help will be written to the given file. This option is similar to , but works at the application level rather than packet by packet. If this option is specified, all incoming and outgoing communication performed by scripts is printed. The displayed information includes the communication protocol, source and target addresses, and the transmitted data. If more than 5% of transmitted data is unprintable, hex dumps are given instead. Specifying enables script tracing too. This option updates the script database found in which is used by Nmap to determine the available default scripts and categories. It is only necessary to update the database if you have added or removed NSE scripts from the default directory or if you have changed the categories of any script. This option is used by itself without arguments: nmap --script-updatedb. Some other Nmap options have effects on script scans. The most prominent of these is . A version scan automatically executes the scripts in the category. The scripts in this category are slightly different from other scripts because their output blends in with the version scan results and they do not produce any script scan output to the screen. If the option is used, typical script output will still be available in the XML output file. Another option which affects the scripting engine is . The aggressive Nmap mode implies the option.\n\nThe option takes a comma-separated list of categories, filenames, and directory names. Some simple examples of its use: Loads all scripts in the and categories. Loads only the script. Note that the extension is optional. Loads the script in the category, the script, and all files in the directory . When referring to scripts from by name, you can use a shell-style ‘ ’ wildcard. Loads all scripts whose name starts with , such as and . The argument to had to be in quotes to protect the wildcard from the shell. More complicated script selection can be done using the , , and operators to build Boolean expressions. The operators have the same precedence as in Lua: is the highest, followed by and then . You can alter precedence by using parentheses. Because expressions contain space characters it is necessary to quote them. Loads every script except for those in the category. This is functionally equivalent to nmap --script \"default,safe\". It loads all scripts that are in the category or the category or both. Loads those scripts that are in both the and categories. nmap --script \"(default or safe or intrusive) and not http-*\" Loads scripts in the , , or categories, except for those whose names start with . Names in a Boolean expression may be a category, a filename from , or . A name is any sequence of characters not containing ‘ ’, ‘ ’, ‘ ’, ‘ ’, or ‘ ’, except for the sequences , , and , which are operators.\n\nArguments may be passed to NSE scripts using the option. The arguments describe a table of key-value pairs and possibly array values. The arguments are provided to scripts as a table in the registry called , though they are normally accessed through the function. The syntax for script arguments is similar to Lua's table constructor syntax. Arguments are a comma-separated list of pairs. Names and values may be strings not containing whitespace or the characters ‘ ’, ‘ ’, ‘ ’, or ‘ ’. To include one of these characters in a string, enclose the string in single or double quotes. Within a quoted string, ‘ ’ escapes a quote. A backslash is only used to escape quotation marks in this special case; in all other cases a backslash is interpreted literally. Values may also be tables enclosed in , just as in Lua. A table may contain simple string values, for example a list of proxy hosts; or more name-value pairs, including nested tables. Script arguments are often qualified with the relevant script name so that a user doesn't unintentionally affect multiple scripts with a single generic name. For example, you can set the timeout for responses to the script (and only that script) by setting to the amount of time you're willing to wait. Sometimes, however, you want a script argument applied more widely. If you remove the qualification and specify just , you will be setting the value for more than a dozen scripts in addition to . You can even combine qualified and unqualified arguments, and the most specific match takes precedence. For example, you could specify . In that case, the timeout will be 20 seconds for the script, and 250 milliseconds for all other scripts which support this variable ( , , etc.) Rather than pass the arguments on the command line with , you may store them in a file (separated by commas or newlines) and specify just the file name with . Options specified with on the command-line take precedence over those given in a file. The filename may be given as an absolute path or relative to Nmap's usual search path (NMAPDIR, etc.) Here is a typical Nmap invocation with script arguments: Notice that the script arguments are surrounded in single quotes. For the Bash shell, this prevents the shell from interpreting the double quotes and doing automatic string concatenation. Naturally, different shells may require you to escape quotes or to use different quotes. See your relevant manual. The command results in this Lua table: While you could access the values directly from , it is normally better to use the function like this: All script arguments share a global namespace, the table. For this reason, short or ambiguous names like are not recommended. Some scripts prefix their arguments with their script name, like . Arguments used by libraries, which can affect many scripts, usually have names beginning with the name of the library, like and . The online NSE Documentation Portal at lists the arguments that each script accepts, including any library arguments that may influence the script."
    },
    {
        "link": "https://recordedfuture.com/threat-intelligence-101/tools-and-techniques/nmap-commands",
        "document": "Nmap is one of the most popular network mappers in the infosec world. It’s utilized by cybersecurity professionals and newbies alike to audit and discover local and remote open ports, as well as hosts and network information.\n\nLike many OSINT tools, Nmap stands out not only for being open-source but also for being free, multi-platform, and regularly updated each year. Plus, it's one of the most comprehensive tools available for scanning hosts, networks, and ports.\n\nIt includes a large set of options to enhance your scanning and mapping tasks, and brings with it an incredible community and comprehensive documentation to help you understand this tool from the very start. Nmap can be used to:\n• Get the OS system and software details\n\nIt was mentioned in the OSINT Framework article we published, and today we’ll explore a little bit more about this essential security tool with some practical terminal-based Nmap commands.\n\nAs we’ve said before, Nmap is a network scanner utility used for port mapping, host discovery and vulnerability scanning. Most of its functions are based on using IP packet analysis to detect and identify remote hosts, operating systems and services.\n\nNmap is used by mid and large companies as well as smaller-sized organizations for semi-automated and manual port auditing, host monitoring, penetration testing, red and blue team exercises, and similar tasks.\n\nEven with Nmap constantly being updated with new features for decades, its core function remains as a network scanner, helping users gather data by sending packets to local or remote ports. This is done by waiting for packet responses to determine if ports are closed, open or filtered.\n\nThe most popular method of using Nmap is via the terminal (command-line console), by performing a Nmap full scan command, but we'll take a look into more examples below.\n\nLearning Threat Intelligence as the First Step in Network Defense\n\nLearning how to scan your own network isn't just about defense; it's also a fundamental aspect of learning threat intelligence.\n\nLearning how to scan your own network isn't just about defense; it's also a fundamental aspect of learning threat intelligence and reducing your attack surface.\n\nThis process equips you with the essential knowledge and tools to identify potential vulnerabilities within your network before they can be exploited by external threats. By familiarizing yourself with the ins and outs of your network's architecture and understanding the landscape of potential emerging threats, you enhance your defensive capabilities.\n\nMoreover, this knowledge empowers you to make informed decisions about security measures and plays a crucial role in cyber crime investigation processes. Adopting this proactive approach is vital in building a resilient and secure network environment. It safeguards your digital assets against unauthorized access and cyber-attacks, marking a significant step forward in mastering threat intelligence.\n\nReady to take your cybersecurity skills to the next level?\n\nJoin us for free at Recorded Future University. Our Intelligence Fundamentals Certification offers an outstanding opportunity to boost your threat intelligence capabilities and secure your company's digital future.\n\nHow To Use Nmap\n\nNmap is pretty easy to use if you're familiar with command-line interfaces. As it’s already installed on most Linux/Unix-based distributions, you just have to execute the ‘nmap’ command from any terminal, and that’s it. It will display several options for you.\n\nAdvanced users will also be able to use Nmap along with other system scripts and automated tasks in order to maximize the powers of this tool.\n\nOne of the most basic Nmap commands for a scan is the nmap port scan command:\n\nThat’s how you use Nmap.\n\nHow To Install Nmap on Linux, Windows and Mac\n\nWhat happens if your operating system doesn’t include Nmap? No worries, let’s see how to install it. While the installation process can differ a bit depending on the OS you are using, in most cases (MacOS and Windows) our recommendation is to get the latest release from the Nmap website’s download page.\n\nOpen the terminal and run the following commands to get Nmap installed:\n\nThat's it. Nmap is now installed on Linux.\n\nOnce you download the installer, execute it and install it. The automated installer should take care of configuring Nmap for you in mere seconds.\n\nMac users also have a full automated installer. Just run the Nmap-mpkg file to begin the installation. After a few seconds,\n\nNmap will be ready on your MacOS.\n\nLet’s get to know a few useful command-line based best Nmap scans that can be performed.\n\nNow, if you want to scan a hostname, simply replace the IP for the host, as you see below:\n\nThis kind of scans, such as the Nmap scan host are perfect for your first steps when starting with Nmap.\n\nThe most famous type of scan is the Nmap ping scan (so-called because it’s often used to perform Nmap ping sweeps), and it’s the easiest way to detect hosts on any network.\n\nThe drawback of this ICMP-only type of scan is that remote hosts often block IP-based ping packets, so if you’re unable to get solid results, we recommend switching to ARP-based requests for your scan.\n\n3. Scan specific ports or scan entire port ranges on a local or remote server\n\nIn this example, we scanned all 65535 ports for our localhost computer.\n\nNmap is able to scan all possible ports, but you can also scan specific ports, which will report faster results. See below:\n\nLet’s try to scan multiple IP addresses. For this you need to use this syntax:\n\nYou can also scan consecutive IP addresses:\n\nThis will scan 1.1.1.1, 1.1.1.2, 1.1.1.3 and 1.1.1.4.\n\nYou can also use Nmap to scan entire CIDR IP ranges, for example:\n\nThis will scan 14 consecutive IP ranges, from 8.8.8.1 to 8.8.8.14.\n\nAn alternative is to simply use this kind of range:\n\nYou can even use wildcards to scan the entire C class IP range, for example:\n\nThis will scan 256 IP addresses from 8.8.8.1 to 8.8.8.256.\n\nIf you ever need to exclude certain IPs from the IP range scan, you can use the “–exclude” option, as you see below:\n\nUsing “–top-ports” parameter along with a specific number lets you scan the top X most common ports for that host, as we can see:\n\nReplace “20” with the desired number. Output example:\n\n[root@securitytrails:~]nmap --top-ports 20 localhost\n\n Starting Nmap 6.40 at 2018-10-01 10:02 EDT\n\n Nmap scan report for localhost (127.0.0.1)\n\n Host is up (0.000016s latency).\n\n Other addresses for localhost (not scanned): 127.0.0.1\n\n PORT STATE SERVICE\n\n 21/tcp closed ftp\n\n 22/tcp closed ssh\n\n 23/tcp closed telnet\n\n 25/tcp closed smtp\n\n 53/tcp closed domain\n\n 80/tcp filtered http\n\n 110/tcp closed pop3\n\n 111/tcp closed rpcbind\n\n 135/tcp closed msrpc\n\n 139/tcp closed netbios-ssn\n\n 143/tcp closed imap\n\n 443/tcp filtered https\n\n 445/tcp closed microsoft-ds\n\n 993/tcp closed imaps\n\n 995/tcp closed pop3s\n\n 1723/tcp closed pptp\n\n 3306/tcp closed mysql\n\n 3389/tcp closed ms-wbt-server\n\n 5900/tcp closed vnc\n\n 8080/tcp closed http-proxy\n\nIn this case, Nmap is also useful to read files that contain hosts and IPs inside.\n\nLet’s suppose you create a list.txt file that contains these lines inside:\n\nThe “-iL” parameter lets you read from that file, and scan all those hosts for you:\n\nOn the other hand, in the following example we will not be reading from a file, but exporting/saving our results into a text file:\n\nNmap has the ability to export files into XML format as well, see the next example:\n\nIf you need to speed up your scans a little bit, you can always choose to disable reverse DNS resolution for all your scans. Just add the “-n” parameter.\n\n[root@securitytrails:~]nmap -p 80 -n 8.8.8.8\n\n Starting Nmap 7.60 at 2018-10-01 09:15 -03\n\n Nmap scan report for 8.8.8.8\n\n Host is up (0.014s latency).\n\n PORT STATE SERVICE\n\n 80/tcp filtered http\n\nSee the difference with a normal DNS-resolution enabled scan:\n\n[root@securitytrails:~]nmap -p 80 8.8.8.8\n\n Starting Nmap 7.60 at 2018-10-01 09:15 -03\n\n Nmap scan report for google-public-dns-a.google .com (8.8.8.8)\n\n Host is up (0.014s latency).\n\n PORT STATE SERVICE\n\n 80/tcp filtered http\n\nUsing the “-A” parameter enables you to perform OS and service detection, and at the same time we are combining this with “-T4” for faster execution. See the example below:\n\nThis is the output we got for this test:\n\nThis can be done by using -sV parameters\n\nAs you can see here:\n\n[root@securitytrails:~]nmap -sV localhost\n\n Starting Nmap 7.60 at 2018-10-01 09:28 -03\n\n Nmap scan report for localhost (127.0.0.1)\n\n Host is up (0.000020s latency).\n\n Other addresses for localhost (not scanned): ::1\n\n Not shown: 997 closed ports\n\n PORT STATE SERVICE VERSION\n\n 111/tcp open rpcbind 2-4 (RPC #100000)\n\n 631/tcp open ipp CUPS 2.2\n\n 902/tcp open ssl/vmware-auth VMware Authentication Daemon 1.10 (Uses VNC, SOAP)\n\nService detection performed. Please report any incorrect results at https:// nmap .org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.96 seconds\n\nOne of the things we love most about Nmap is the fact that it works for both TCP and UDP protocols. And while most services run on TCP, you can also get a great advantage by scanning UDP-based services. Let’s see some examples.\n\n[root@securitytrails:~]nmap -sT 192.168.1.1\n\n Starting Nmap 7.60 at 2018-10-01 09:33 -03\n\n Nmap scan report for 192.168.1.1\n\n Host is up (0.58s latency).\n\n Not shown: 995 closed ports\n\n PORT STATE SERVICE\n\n 80/tcp open http\n\n 1900/tcp open upnp\n\n 20005/tcp open btx\n\n 49152/tcp open unknown\n\n 49153/tcp open unknown\n\n Nmap done: 1 IP address (1 host up) scanned in 1.43 seconds\n\n[root@securitytrails:~]nmap -sU localhost\n\n Starting Nmap 7.60 at 2018-10-01 09:37 -03\n\n Nmap scan report for localhost (127.0.0.1)\n\n Host is up (0.000021s latency).\n\n Other addresses for localhost (not scanned): ::1\n\n Not shown: 997 closed ports\n\n PORT STATE SERVICE\n\n 68/udp open|filtered dhcpc\n\n 111/udp open rpcbind\n\n 5353/udp open|filtered zeroconf\n\nOne of Nmap’s greatest features that not all the network and systems administrators know about is something called “Nmap Scripting Engine” (known as NSE). This scripting engine allows users to use a pre-defined set of scripts, or write their own using Lua programming language.\n\nUsing Nmap scripts is crucial in order to automate system and vulnerability scans. For example, if you want to run a full vulnerability test against your target, you can use these parameters:\n\n[root@securitytrails:~]nmap -Pn --script vuln 192.168.1.105\n\n Starting Nmap 7.60 at 2018-10-01 09:46 -03\n\n Pre-scan script results:\n\n | broadcast-avahi-dos:\n\n | Discovered hosts:\n\n | 224.0.0.251\n\n | After NULL UDP avahi packet DoS (CVE-2011-1002).\n\n |_ Hosts are all up (not vulnerable).\n\n Nmap scan report for 192.168.1.105\n\n Host is up (0.00032s latency).\n\n Not shown: 995 closed ports\n\n PORT STATE SERVICE\n\n 80/tcp open http\n\n |_http-csrf: Couldn't find any CSRF vulnerabilities.\n\n |_http-dombased-xss: Couldn't find any DOM based XSS.\n\n | http-slowloris-check:\n\n | VULNERABLE:\n\n | Slowloris DOS attack\n\n | State: LIKELY VULNERABLE\n\n | IDs: CVE:CVE-2007-6750\n\n | Slowloris tries to keep many connections to the target web server open and hold\n\n | them open as long as possible. It accomplishes this by opening connections to\n\n | the target web server and sending a partial request. By doing so, it starves\n\n | the http server's resources causing Denial Of Service.\n\n |\n\n | Disclosure date: 2009-09-17\n\n | References:\n\n |_ https:// cve.mitre .org/cgi-bin/cvename.cgi?name=CVE-2007-6750\n\n |_http-stored-xss: Couldn't find any stored XSS vulnerabilities.\n\n |_http-vuln-cve2014-3704: ERROR: Script execution failed (use -d to debug)\n\n 1900/tcp open upnp\n\n 20005/tcp open btx\n\n 49152/tcp open unknown\n\n 49153/tcp open unknown\n\nAs you can see, in this vulnerability test we were able to detect one CVE (Slowloris DOS attack).\n\nNmap features never seem to end, and thanks to the NSE, that even allows us to launch flood attacks against our network to test how effective our mitigation methods are.\n\nIn our previous example (#12) we found the host was vulnerable to Slowloris attack, and now we’ll try to exploit that vulnerability by launching a flood attack in a forever loop:\n\nNSE is really fascinating -- it contains scripts for everything you can imagine. See the next three examples of BFA against WordPress, MSSQL, and FTP server:\n\nNmap is able to detect malware and backdoors by running extensive tests on a few popular OS services like Identd, Proftpd, Vsftpd, IRC, SMB, and SMTP. It also has a module to check for popular malware signs inside remote servers and integrates Google’s Safe Browsing and VirusTotal databases as well.\n\nA common malware scan can be performed by using:\n\nNmap is one of the most complete and accurate port scanners used by infosec professionals today. With it, you can perform simple port scan tasks or use its powerful scripting engine to launch DOS attacks, detect malware or brute force testing on remote and local servers.\n\nToday we covered the top fifteen Nmap commands to scan remote hosts, but there’s a lot more to discover if you’re starting to use Nmap in your OSINT strategy.\n\nNmap has been one of the most popular port and network scanners for decades. Still, new users often have questions about how it works and its legal usage, and even look for other, similar software from time to time.\n\nYes, Nmap is completely free for you to download and use. It’s also an open source (licensed) project, so you can inspect, modify, and enhance it to match your needs.\n\nNmap is legal; however, that hinges entirely on the purpose the user has for using it. Scanning your own network is totally legal, but scanning third-party networks may get you into legal problems if you aren’t authorized, depending on the country and state in which you live.\n\nThere are many nuances to—and opinions about—port scanning legality. To help you avoid legal issues, we recommend reading the official implications detailed on the Nmap website’s legal issues page.\n\nHow Does it Work?\n\nNmap works by sending and receiving network packets, and checking against its fingerprint database and other methods, to quickly detect hosts and IP addresses over a network. It then performs analysis on the data to quickly respond with results on your console. Most Nmap scans will require you to perform them with root-based (admin) access on Linux and Unix. While on Windows, running Nmap with an administrator account is always a good practice.\n\nIs there any other similar software like Nmap?\n\nThere are tons of alternatives to Nmap, including Masscan, Rustcan, and others. While some of this similar software offers faster scanning times, almost none of them offers as many options and high-quality results as an Nmap full scan does.\n\nFor most users, even the advanced ones, Nmap is enough. If you don’t like terminals, you can always take a look into ZenMap, the GUI-based version of Nmap.\n\nUnderstanding network security and threat intelligence is crucial, but the reliance on manual scans can be time-consuming and less efficient than needed. These traditional methods, while foundational, are time-consuming and can divert resources from strategic initiatives. The evolution of cybersecurity threats demands a more efficient approach.\n\nThis is where Recorded Future steps in. Our intelligence platform cuts through the noise and saves you from the time sink of manual processes. Ready to see the difference for yourself?. Take your efforts to the next level—book a demo today."
    },
    {
        "link": "https://techtarget.com/searchsecurity/feature/How-to-use-Nmap-to-scan-for-open-ports",
        "document": "The Nmap network reconnaissance and security auditing tool, released in 1997, is one of the most basic and most used cybersecurity tools today. From its beginnings as an advanced port scanner, it evolved into a multifunctional tool with a family of useful projects that can discover weak passwords, scan IPv6 addresses, perform IP address geolocation, detect vulnerabilities and more.\n\nThe open source tool helps security pros, networking teams, sys admins and other IT personnel scan hosts, networks, applications, mainframes, Unix and Windows environments, supervisory control and data acquisition systems, and industrial control systems.\n\nPaulino Calderon, co-founder of Websec and part-time Nmap developer, wrote Nmap Network Exploration and Security Auditing Cookbook, Third Edition, published by Packt, to offer firsthand insights into using the multifaceted tool.\n\nIn this excerpt from Chapter 1, \"Nmap Fundamentals,\" Calderon shares a recipe on how to use Nmap to find open ports. Follow along to learn how to perform the quintessential Nmap task, and review Calderon's tips on Nmap port scan techniques, options that affect the scan behavior of Nmap and more. Download a PDF of Chapter 1 to read more.\n\nThis recipe describes how to use Nmap to determine the port states of a target, a process used to identify running services commonly referred to as port scanning. This is one of the tasks Nmap excels at, so it is important to learn about the essential Nmap options related to port scanning. How to do it... To launch a default scan, the bare minimum you need is a target. A target can be an IP address, a hostname, or a network range: The scan results will show all the host information obtained, such as the IPv4 (and IPv6 if available) address, reverse DNS name, and interesting ports with service names. All listed ports have a state. Ports marked as open or filtered are of special interest as they represent services running on the target host: Nmap scan report for scanme.nmap.org (45.33.32.156)\n\nHost is up (0.16s latency).\n\nOther addresses for scanme.nmap.org (not scanned):\n\n2600:3c01::f03c:91ff:fe18:bb2f\n\nNot shown: 995 closed ports PORT STATE SERVICE\n\n22/tcp open ssh 25/tcp filtered smtp 80/tcp open http\n\n9929/tcp open nping-echo 31337/tcp open Elite\n\nNmap done: 1 IP address (1 host up) scanned in 333.35 seconds The default Nmap scan returns a list of ports. In addition, it returns a service name from a database distributed with Nmap and the port state for each of the listed ports. Nmap categorizes ports into the following states:\n• Open: Open indicates that a service is listening for connections on this port.\n• Closed: Closed indicates that the probes were received, but it was concluded that there was no service running on this port.\n• Filtered: Filtered indicates that there were no signs that the probes were received and the state could not be established. This could indicate that the probes are being dropped by some kind of filtering.\n• Unfiltered: Unfiltered indicates that the probes were received but a state could not be established.\n• Open/Filtered: This indicates that the port was filtered or open, but the state could not be established.\n• Closed/Filtered: This indicates that the port was filtered or closed but the state could not be established. Even for this simple port scan, Nmap does many things in the background that can be configured as well. Nmap begins by converting the hostname to an IPv4 address using DNS name resolution. If you wish to use a different DNS server, use --dns-servers <serv1[,serv2],...>, or use -n if you wish to skip this step, as follows: Afterward, it performs the host discovery process to check whether the target is online (see the Finding online hosts recipe). To skip this step, use the no ping option, -Pn: Nmap then converts the IPv4 or IPv6 address back to a hostname using a reverse DNS query. Use -n to skip this step as well if you do not need that information: The previous command will launch either a SYN stealth scan or a TCP connect scan depending on the privileges of the user running Nmap.\n\nPort scanning is one of the most powerful features available, and it is important that we understand the different techniques and options that affect the scan behavior of Nmap. Running the simplest port scan command, nmap <target>, as a privileged user by default launches a SYN stealth scan, whereas unprivileged users that cannot create raw packets use the TCP connect scan technique. The difference between these two techniques is that a TCP connect scan uses the high-level connect() system call to obtain the port state information, meaning that each TCP connection is fully completed and therefore slower. SYN stealth scans use raw packets to send specially crafted TCP packets to detect port states with a technique known as half-open. Setting port ranges correctly during your scans is a task you often need to do when running Nmap scans. You can also use this to filter machines that run a service on a specific port, for example, finding all the SMB servers open in port 445. Narrowing down the port list also optimizes performance, which is very important when scanning multiple targets. There are several ways of using the Nmap -p option:\n• Alias for all ports from to :\n• Only ports registered in the Nmap services database: Nmap attempts to automatically detect your active network interface; however, there are some situations where it will fail or perhaps you will need to select a different interface in order to test networking issues. To force Nmap to scan using a different network interface, use the -e argument: This is only necessary if you have problems with broadcast scripts or see the WARNING: Unable to find appropriate interface for system route to message. In this recipe, we talked about the two default scanning methods used in Nmap: SYN stealth scan and TCP connect scan. However, Nmap supports several more advanced port scanning techniques. Use nmap -h or visit https://nmap.org/book/man-portscanning-techniques.html to learn more about them as Fyodor has done a fantastic job describing how they work in depth. Nmap supports several target formats that allow users to work with IP address ranges. The most common type is when we specify the target's IP or host, but it also supports the reading of targets from files and ranges, and we can even generate a list of random targets as we will see later. Any arguments that are not valid options are read as targets by Nmap. This means that we can tell Nmap to scan more than one range in a single command, as shown in the following command: There are several ways that we can handle IP ranges in Nmap: To scan the 192.168.1.1, 192.168.1.2, and 192.168.1.3 IP addresses, the following command can be used: We can also specify octet ranges using -. For example, to scan hosts 192.168.1.1, 192.168.1.2, and 192.168.1.3, we could use the expression 192.168.1.1-3, as shown in the following command: Octet range notation also supports wildcards, so we could scan from 192.168.1.0 to 192.168.1.255 with the expression 192.168.1.*: In addition, you may exclude hosts from the ranges by specifying the --exclude option, as shown next: Otherwise, you can write your exclusion list in a file using the --exclude-file option: The CIDR notation (pronounced cider) is a compact method for specifying IP addresses and their routing suffixes. This notation gained popularity due to its granularity when compared with classful addressing because it allows subnet masks of variable length. The CIDR notation is specified by an IP address and network suffix. The network or IP suffix represents the number of network bits. IPv4 addresses are 32-bit, so the network can be between 0 and 32. The most common suffixes are /8, /16, /24, and /32. To visualize it, take a look at the following CIDR-to-netmask conversions: For example, 192.168.1.0/24 represents the 256 IP addresses from 192.168.1.0 to 192.168.1.255. 50.116.1.121/8 represents all the IP addresses between 50.0-255.0-255.0-255. The /32 network suffix is also valid and represents a single IP address. The CIDR notation can also be used when specifying targets. To scan the 256 hosts in 192.168.1.0-255 using the CIDR notation, you will need the /24 suffix: Many times, we will need to work with multiple targets, but having to type a list of targets in the command line is not very practical. Fortunately, Nmap supports the loading of targets from an external file. Enter the list of targets into a file, each separated by a new line, tab, or space(s): To load the targets from the targets.txt file, use the Nmap -iL <filename> option: This feature can be combined with any scan option or method, except for exclusion rules set by --exclude or --exclude-file. The --exclude and --exclude-file options will be ignored when -iL is used. You can also use different target formats in the same file. In the following file, we specify an IP address and an IP range inside the same file: You can enter comments in your target list by starting the new line with the # character: Editor's note: This article has been updated to improve the reader experience. About the book author\n\nPaulino Calderon (@calderpwn on Twitter) is a published author and international speaker with more than 10 years of professional experience in network and application security. He co-founded Websec, a consulting firm securing applications, networks and digital assets operating in North America, in 2011. When he isn't traveling to security conferences or consulting for Fortune 500 companies with Websec, he spends peaceful days enjoying the beach in Cozumel, Mexico. His contributions have reached millions of users through Nmap, Metasploit, Open Web Application Security Project Mobile Security Testing Guide, OWASP Juice Shop and OWASP IoTGoat."
    },
    {
        "link": "https://stackoverflow.com/questions/68834470/how-do-i-make-nmap-run-faster",
        "document": "So I know this is an odd piece of code. I am simply trying to make nmap run faster. I need to find all active ips and what ports are open on the 10.0.0.0/8 network. My company has very poor documentation and never kept track of all this. I have a lot of cores to work with on my machine, but nmap doesn't make use of them. I also have a 10 gig NIC. I should be able to make this go blazing fast if I did it right, but I am not sure how to go about it. My code below is one of many attempts to multithread calls to nmap, but it seems os.system() puts a pause on everything else. Obviously that won't help make my scans run faster.\n\nEventually I need to use -Pn since some of the hosts have ICMP disabled, but might have open ports. Since my boss won't accept waiting 11 years for this I am kind of stuck. Any help, advice, or scolding for doing it completely wrong would be much appreciated. Thank you in advanced."
    }
]