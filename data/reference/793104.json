[
    {
        "link": "https://w3.org/TR/2014/REC-html5-20141028/editing.html",
        "document": "All HTML elements may have the content attribute set. The attribute is a boolean attribute. When specified on an element, it indicates that the element is not yet, or is no longer, directly relevant to the page's current state, or that it is being used to declare content to be reused by other parts of the page as opposed to being directly accessed by the user. User agents should not render elements that have the attribute specified. This requirement may be implemented indirectly through the style layer. For example, an HTML+CSS user agent could implement these requirements using the rules suggested in the Rendering section.\n\nBecause this attribute is typically implemented using CSS, it's also possible to override it using CSS. For instance, a rule that applies 'display: block' to all elements will cancel the effects of the attribute. Authors therefore have to take care when writing their style sheets to make sure that the attribute is still styled as expected.\n\nThe attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation — one could equally well just show all the form controls in one big page with a scrollbar. It is similarly incorrect to use this attribute to hide content just from one presentation — if something is marked , it is hidden from all presentations, including, for instance, printers.\n\nElements that are not themselves must not hyperlink to elements that are . The attributes of and elements that are not themselves must similarly not refer to elements that are . In both cases, such references would cause user confusion.\n\nElements and scripts may, however, refer to elements that are in other contexts.\n\nAccessibility APIs are encouraged to provide a way to expose structured content while marking it as hidden in the default view. Such content should not be perceivable to users in the normal document flow in any modality, whether using Assistive Technology (AT) or mainstream User Agents.\n\nWhen such features are available, User Agents may use them to expose the full semantics of elements to AT when appropriate, if such content is referenced indirectly by an ID reference or valid hash-name reference. This allows ATs to access the structure of these elements upon user request, while keeping the content hidden in all presentations of the normal document flow. Authors who wish to prevent user-initiated viewing of a element should not reference the element with such a mechanism.\n\nBecause some User Agents have flattened hidden content when exposing such content to AT, authors should not reference content which would lose essential meaning when flattened.\n\nElements in a section hidden by the attribute are still active, e.g. scripts and form controls in such sections still execute and submit respectively. Only their presentation to the user changes.\n\nA node (in particular elements and text nodes) can be marked as . When a node is inert, then the user agent must act as if the node was absent for the purposes of targeting user interaction events, may ignore the node for the purposes of text search user interfaces (commonly known as \"find in page\"), and may prevent the user from selecting text in that node. User agents should allow the user to override the restrictions on search and text selection, however.\n\nFor example, consider a page that consists of just a single inert paragraph positioned in the middle of a . If a user moves their pointing device from the over to the inert paragraph and clicks on the paragraph, no event would be fired, and the and events would be fired on the element rather than the paragraph.\n\nWhen a node is inert, it also can't be focusable.\n\nAn entire can be marked as . While a is so marked, every node that is in the , with the exception of the element and its descendants, must be marked inert. (The elements excepted by this paragraph can additionally be marked inert through other means; being part of a modal dialog does not \"protect\" a node from being marked inert.)\n\nOnly one element at a time can mark a as being blocked by a modal dialog.\n\nThe content attribute allows authors to control whether an element is supposed to be focusable, whether it is supposed to be reachable using sequential focus navigation, and what is to be the relative order of the element for the purposes of sequential focus navigation. The name \"tab index\" comes from the common use of the \"tab\" key to navigate through the focusable elements. The term \"tabbing\" refers to moving forward through the focusable elements that can be reached using sequential focus navigation.\n\nThe attribute, if specified, must have a value that is a valid integer.\n\nEach element that can be activated or focused can be assigned a single key combination to activate it, using the attribute.\n\nThe exact shortcut is determined by the user agent, based on information about the user's keyboard, what keyboard shortcuts already exist on the platform, and what other shortcuts have been specified on the page, using the information provided in the attribute as a guide.\n\nIn order to ensure that a relevant keyboard shortcut is available on a wide variety of input devices, the author can provide a number of alternatives in the attribute.\n\nEach alternative consists of a single character, such as a letter or digit.\n\nUser agents can provide users with a list of the keyboard shortcuts, but authors are encouraged to do so also. The IDL attribute returns a string representing the actual key combination assigned by the user agent.\n\nAll HTML elements may have the content attribute set. The attribute's value is used by the user agent as a guide for creating a keyboard shortcut that activates or focuses the element.\n\nIf specified, the value must be an ordered set of unique space-separated tokens that are case-sensitive, each of which must be exactly one Unicode code point in length.\n\nThe attribute is an enumerated attribute whose keywords are the empty string, , and . The empty string and the keyword map to the true state. The keyword maps to the false state. In addition, there is a third state, the inherit state, which is the missing value default (and the invalid value default).\n\nThe true state indicates that the element is editable. The inherit state indicates that the element is editable if its parent is. The false state indicates that the element is not editable.\n\nAuthors are encouraged to set the 'white-space' property on editing hosts and on markup that was originally created through these editing mechanisms to the value 'pre-wrap'. Default HTML whitespace handling is not well suited to WYSIWYG editing, and line wrapping will not work correctly in some corner cases if 'white-space' is left at its default value.\n\nThe definition of the terms , , and , the user interface requirements of elements that are editing hosts or editable, the , , , , , and methods, text selections, and the algorithm are defined in the HTML Editing APIs specification. The interaction of editing and the undo/redo features in user agents is defined by the UndoManager and DOM Transaction specification. [EDITING] [UNDO]\n\nThe attribute is an enumerated attribute whose keywords are the empty string, and . The empty string and the keyword map to the true state. The keyword maps to the false state. In addition, there is a third state, the default state, which is the missing value default (and the invalid value default).\n\nThe true state indicates that the element is to have its spelling and grammar checked. The default state indicates that the element is to act according to a default behavior, possibly based on the parent element's own state, as defined below. The false state indicates that the element is not to be checked.\n\nThe IDL attribute, on getting, must return true if the element's content attribute is in the true state, or if the element's content attribute is in the default state and the element's default behavior is true-by-default, or if the element's content attribute is in the default state and the element's default behavior is inherit-by-default and the element's parent element's IDL attribute would return true; otherwise, if none of those conditions applies, then the attribute must instead return false. The IDL attribute is not affected by user preferences that override the content attribute, and therefore might not reflect the actual spellchecking state. On setting, if the new value is true, then the element's content attribute must be set to the literal string \" \", otherwise it must be set to the literal string \" \". User agents must only consider the following pieces of text as checkable for the purposes of this feature:\n• The value of elements whose attributes are in the Text, Search, URL, or E-mail states and that are mutable (i.e. that do not have the attribute specified and that are not disabled).\n• The value of elements that do not have a attribute and that are not disabled.\n• Text in nodes that are children of editing hosts or editable elements. For text that is part of a node, the element with which the text is associated is the element that is the immediate parent of the first character of the word, sentence, or other piece of text. For text in attributes, it is the attribute's element. For the values of and elements, it is the element itself. To determine if a word, sentence, or other piece of text in an applicable element (as defined above) is to have spelling- and grammar-checking enabled, the UA must use the following algorithm:\n• If the user has disabled the checking for this text, then the checking is disabled.\n• Otherwise, if the user has forced the checking for this text to always be enabled, then the checking is enabled.\n• Otherwise, if the element with which the text is associated has a content attribute, then: if that attribute is in the true state, then checking is enabled; otherwise, if that attribute is in the false state, then checking is disabled.\n• Otherwise, if there is an ancestor element with a content attribute that is not in the default state, then: if the nearest such ancestor's content attribute is in the true state, then checking is enabled; otherwise, checking is disabled.\n• Otherwise, if the element's default behavior is true-by-default, then checking is enabled.\n• Otherwise, if the element's default behavior is false-by-default, then checking is disabled.\n• Otherwise, if the element's parent element has its checking enabled, then checking is enabled. If the checking is enabled for a word/sentence/text, the user agent should indicate spelling and grammar errors in that text. User agents should take into account the other semantics given in the document when suggesting spelling and grammar corrections. User agents may use the language of the element to determine what spelling and grammar rules to use, or may use the user's preferred language settings. UAs should use element attributes such as to ensure that the resulting value is valid, where possible. If checking is disabled, the user agent should not indicate spelling or grammar errors for that text. Even when checking is enabled, user agents may opt to not report spelling or grammar errors in text that the user agent deems the user has no interest in having checked (e.g. text that was already present when the page was loaded, or that the user did not type, or text in controls that the user has not focused, or in parts of e-mail addresses that the user agent is not confident were misspelt). The element with ID \"a\" in the following example would be the one used to determine if the word \"Hello\" is checked for spelling errors. In this example, it would not be. The element with ID \"b\" in the following example would have checking enabled (the leading space character in the attribute's value on the element causes the attribute to be ignored, so the ancestor's value is used instead, regardless of the default).\n\nThis specification does not define the user interface for spelling and grammar checkers. A user agent could offer on-demand checking, could perform continuous checking while the checking is enabled, or could use other interfaces."
    },
    {
        "link": "https://w3.org/TR/2009/WD-html5-20090825/editing.html",
        "document": "This section describes various features that allow authors to enable users to edit documents and parts of documents interactively.\n\nAll HTML elements may have the content attribute set. The attribute is a boolean attribute. When specified on an element, it indicates that the element is not yet, or is no longer, relevant. User agents should not render elements that have the attribute specified.\n\nThe attribute must not be used to hide content that could legitimately be shown in another presentation. For example, it is incorrect to use to hide panels in a tabbed dialog, because the tabbed interface is merely a kind of overflow presentation — showing all the form controls in one big page with a scrollbar would be equivalent, and no less correct.\n\nElements in a section hidden by the attribute are still active, e.g. scripts and form controls in such sections still render execute and submit respectively. Only their presentation to the user changes.\n\nThe content attribute specifies whether the element is focusable, whether it can be reached using sequential focus navigation, and the relative order of the element for the purposes of sequential focus navigation. The name \"tab index\" comes from the common use of the \"tab\" key to navigate through the focusable elements. The term \"tabbing\" refers to moving forward through the focusable elements that can be reached using sequential focus navigation.\n\nThe attribute, if specified, must have a value that is a valid integer.\n\nAll HTML elements may have the content attribute set. The attribute's value is used by the user agent as a guide for creating a keyboard shortcut that activates or focuses the element.\n\nIf specified, the value must be an ordered set of unique space-separated tokens, each of which must be exactly one Unicode code point in length.\n\nEvery browsing context has . The selection can be empty, and the selection can have more than one range (a disjointed selection). The user agent should allow the user to change the selection. User agents are not required to let the user select more than one range, and may collapse multiple ranges in the selection to a single range when the user interacts with the selection. (But, of course, the user agent may let the user create selections with multiple ranges.)\n\nThis one selection must be shared by all the content of the browsing context (though not by nested browsing contexts), including any editing hosts in the document. (Editing hosts that are not inside a document cannot have a selection.)\n\nMostly for historical reasons, in addition to the browsing context's selection, each and element has an independent selection. These are the .\n\nThe element also has a selection, indicating which items have been picked by the user. This is not discussed in this section.\n\nThis specification does not specify how selections are presented to the user. The Selectors specification, in conjunction with CSS, can be used to style text selections using the pseudo-element. [SELECTORS] [CSS]\n\nThe interface is represents a list of objects. The first item in the list has index 0, and the last item has index -1, where is the number of ranges in the list. [DOMRANGE]\n\nAll of the members of the interface are defined in terms of operations on the objects represented by this object. These operations can raise exceptions, as defined for the interface; this can therefore result in the members of the interface raising exceptions as well, in addition to any explicitly called out below.\n\nThe and elements define the following members in their DOM interfaces for handling their text selection:\n\nThese methods and attributes expose and control the selection of and text fields.\n\nCharacters with no visible rendering, such as U+200D ZERO WIDTH JOINER, still count as characters. Thus, for instance, the selection can include just an invisible character, and the text insertion cursor can be placed to one side or another of such a character.\n\nThe attribute is an enumerated attribute whose keywords are the empty string, , and . The empty string and the keyword map to the true state. The keyword maps to the false state. In addition, there is a third state, the inherit state, which is the missing value default (and the invalid value default).\n\nThe true state indicates that the element is editable. The inherit state indicates that the element is editable if its parent is. The false state indicates that the element is not editable.\n\nThe attribute is an enumerated attribute whose keywords are the empty string, and . The empty string and the keyword map to the true state. The keyword maps to the false state. In addition, there is a third state, the default state, which is the missing value default (and the invalid value default).\n\nThe true state indicates that the element is to have its spelling and grammar checked. The default state indicates that the element is to act according to a default behavior, possibly based on the parent element's own state. The false state indicates that the element is not to be checked.\n\nThis specification does not define exactly what a drag-and-drop operation actually is.\n\nOn a visual medium with a pointing device, a drag operation could be the default action of a event that is followed by a series of events, and the drop could be triggered by the mouse being released.\n\nOn media without a pointing device, the user would probably have to explicitly indicate his intention to perform a drag-and-drop operation, stating what he wishes to drag and what he wishes to drop, respectively.\n\nIt's also currently non-existent.\n\nThe drag-and-drop processing model involves several events. They all use the interface.\n\nobjects can hold pieces of data, each associated with a unique format. Formats are generally given by MIME types, with some values special-cased for legacy reasons. For the purposes of this API, however, the format strings are opaque, case-sensitive, strings, and the empty string is a valid format string.\n\nWhen a object is created, it must be initialized as follows:\n• The object must initially contain no data, no elements, and have no associated image.\n• The object's attribute must be set to \" \".\n• The attribute must be set to \" \". The attribute controls the drag-and-drop feedback that the user is given during a drag-and-drop operation. The attribute must ignore any attempts to set it to a value other than , , , and . On getting, the attribute must return the last of those four values that it was set to. The attribute is used in the drag-and-drop processing model to initialize the attribute during the and events. The attribute must ignore any attempts to set it to a value other than , , , , , , , , and . On getting, the attribute must return the last of those values that it was set to. The attribute must return a live that contains the list of formats that were added to the object in the corresponding event. If any files were included in the drag, then the object must in addition include the string \" \". If the method is invoked with the string \" \", and some files were included in the drag, then the string \" \" will appear twice in the attribute's list. The method, when called with no arguments, must clear the object of all data (for all formats). The method does not affect whether any files were included in the drag, so the attribute's list might still not be empty after calling (it would still contain the \" \" string if any files were included in the drag). When called with an argument, the method must clear the object of any data associated with the given . If is the value \" \", then it must be treated as \" \". If the is \" \", then it must be treated as \" \". The method must add to the data stored in the object, labeled as being of the type . This must replace any previous data that had been set for that format. If is the value \" \", then it must be treated as \" \". If the is \" \", then it must be treated as \" \". The method must return the data that is associated with the type , if any, and must return the empty string otherwise. If is the value \" \", then it must be treated as \" \". If the is \" \", then the data associated with the \" \" format must be parsed as appropriate for data, and the first URL from the list must be returned. If there is no data with that format, or if there is but it has no URLs, then the method must return the empty string. [RFC2483] The attribute must return the object that contains the files that are stored in the object. There is one such object per object. The method sets which element to use to generate the drag feedback. The argument can be any ; if it is an element, then the user agent should use the element's image (at its intrinsic size) to generate the feedback, otherwise the user agent should base the feedback on the given element (but the exact mechanism for doing so is not specified). The method is an alternative way of specifying how the user agent is to render the drag feedback. It adds an element to the object. The difference between and is that the latter automatically generates the image based on the current rendering of the elements added, whereas the former uses the exact specified image.\n\nThe following events are involved in the drag-and-drop model.\n\nAll HTML elements may have the content attribute set. The attribute is an enumerated attribute. It has three states. The first state is true and it has the keyword . The second state is false and it has the keyword . The third state is auto; it has no keywords but it is the missing value default.\n\nThe true state means the element is draggable; the false state means that it is not. The auto state uses the default behavior of the user agent.\n\nCopy-and-paste is a form of drag-and-drop: the \"copy\" part is equivalent to dragging content to another application (the \"clipboard\"), and the \"paste\" part is equivalent to dragging content from another application.\n\nSelect-and-paste (a model used by mouse operations in the X Window System) is equivalent to a drag-and-drop operation where the source is the selection.\n\nThere has got to be a better way of doing this, surely.\n\nTo manage undo object entries in the undo transaction history, the interface can be used:\n\nThe interface and the and events\n\nA document is if it has a selection that is entirely within an editing host, or if it has no selection but its caret is inside an editing host.\n\nThe possible values for , and their corresponding meanings, are as follows. These values must be compared to the argument in an ASCII case-insensitive manner."
    },
    {
        "link": "https://stephaniewalter.design/blog/a-designers-guide-to-documenting-accessibility-user-interactions",
        "document": "Accessibility is unfortunately still an afterthought on many projects. User interaction and accessibility requirements are poorly documented, at best. Or forgotten, when handing over designs to developer teams. And fixing it later costs a LOT more than building it right to begin with. Great documentation helps teams implement accessibility requirements the right way. This is the text version of a talk, where I explain why, what and how designers can document different aspects of accessibility and user interactions requirements, to build better more inclusive products from the start.\n\nYou can also check the video replay of the talk in different places and the sketchnotes. I also prepared a Accessibility & Interactions Documentation Kit to help you get started.\n\nWhy fix it later, when you could do it right to start with?\n\nA lot of sites were not designed and developed with accessibility needs in mind. As designers, a lot of us think that “accessibility is the job of the developer team”. Accessibility becomes an afterthought for a lot of projects. Companies launch inaccessible tools, sites, services.\n\nEventually, someone will complain about this. Maybe the site even gets sued. It circles back to the team. And now they have “fix” the accessibility issues. But, it’s often too late. When the site was not designed, developed with accessibility in mind, it’s harder to correct. And way more expensive as well. A little bit like in this picture: they end up putting duct tape on broken glasses.\n\nMy question is: why fix it, when you could design and build it right to start with?\n\nThis is why we need to bring accessibility awareness earlier on in the project. Good guidelines and documentation can help us achieve that. They can help identify and fix accessibility issues, earlier in the project. Accessibility becomes part of the “project normal design and development phases“. It’s not an afterthought anymore.\n\nA lot of accessibility issues can be already foreseen and prevented during the design phase. As designers, we hold the power to shape product roadmaps by including accessibility best practices in our designs and advocating for accessibility features.\n\nDesigner can use design documentation to include and push accessibility earlier in projects.\n\nWhere and how can designers impact accessibility?\n\nFirst a small disclaimer: this is the transcript of 1h talk. It’s already very long, but, I can’t be exhaustive in 1h. I have a full 8 hours training on the topic. So, keep in mind that, this is the short version. Also, this is targeted towards designers. I cherry picked on which WCAG criteria designers can have the most impact, earlier in the project (mostly A and AA criteria). I won’t go through the full WCAG 2.2 criteria. You will need to go beyond this article to make your website fully compliant.\n\nSo, let’s get started. To help you process what designers can do, I’ve split those into 4 different categories: Visual design, Interaction, Wayfinding and Alternative Content and Markup.\n\nVisual design, especially colors is often the first thing that comes to mind when we think about design documentation.\n\nDon’t rely only on colors to convey information\n\nThe first thing designers do: ensure color is not the only visual way to convey information.\n\nIn my example here, I have the navigation for a cooking site. In the first example, I indicate the “current page” (categories) only with a color change, from black to orange. This is an issue: users who are not able to distinguish color well might not understand the current indicator.\n• Some older users may not be able to see color well.\n• People using limited color monochrome displays may be unable to access color-dependent information.\n• Some people with cognitive disabilities, issues to read\n\nThe solution: don’t rely only on color to convey an information. In my second example here, I kept the color, but I double downed with a big border. This way, users who don’t perceive the color have a secondary way to get the information.\n\nWhat can we do? Designers can check the mockups, identify information conveyed only by color, and provide secondary ways to convey the information that doesn’t rely only on that color. This is usually the case for form validation (error, success), any type of status notification, but also for charts, graphs etc.\n\nAndy Baio gives an interesting (bad) example of the Kayak date picker that is unusable for colorblind people.\n\nOn existing mockups, before sending them to developers, designers need to check that texts have a sufficient contrast ratio with their backgrounds:\n• 4.5:1 between text and background for text smaller than 24px, or 19px bold\n• 3:1 between text and background for text larger than 24px, or 19px bold\n\nCheck my article Color accessibility: tools and resources to help you design inclusive products for a nice choice of different tools. You should find one that suits your needs.\n\nIt doesn’t stop at text. Designers also need to take check color contrast for non-text elements (UI components, graphic objects, etc). Those need a 3:1 contrast ratio against adjacent colors\n• Visual information to identify user interface components. For example border of a text field, checkboxes, radio buttons (if you don’t use browser native elements).\n• Graphic objects required to understand the content (for example if you have some icons that convey information without text next to them)\n\nThis rule doesn’t apply to native HTML components, and inactive components. But it applies to focus appearance: an area of the focus indication area (a subset of the focus indication area) must have a 3:1 contrast ratio between the unfocused and focused states. For more on that topic, check Sara’s article A guide to designing accessible, WCAG-conformant focus indicators\n\nFinally, note this criteria doesn’t require background or boundaries for default buttons states to pass the 3:1 ratio, if the text (or icon) on the button is enough to identify it as a button (and passes 1.4.3 text/background). Which means, that, even if the background of your button doesn’t have a 3:1 ratio with the background they are displayed on, it’s not an accessibility failure. That being said, more contrast is always nice, so, if you can get that ratio, by all means, go for it.\n\nLinks need to be easily identifiable, especially when surrounded by non link text (in a paragraph for example). Which means people need to be able to identify them from the rest of the text, that is, not a link. How do we do that?\n• Check that color is not the only way to identify a link in a block of text from its surrounding. The easiest way is to underline links in text.\n• If the color is the only way to identify it, it must have a 3:1 contrast ratio with adjacent non link text and provide additional visual cues on hover\n\nYou can us The contrast triangle to help check this. But, seriously, just, underline the links and call it a day!\n\nBuilding an accessible color palette from the start\n\nAt some point, I’ll write a detailed article on this, I promise. Meanwhile, here is the short version: if we work on a new project, we can build and document accessible color palettes from the start.\n\nMy step-by-step process is something like that:\n• I usually start with the “main” colors. In the example above, my “mermaid palette” main colors created for Myriam.\n• I create color variations (darker, lighter) that can work together, text on background. I build it so that all my “darker” can be used with “lightest” as text (and the other way around) with 4.5 contrast ratio. I also make sure that my darker text can be used on any of the “lighter” colors\n• To help remember that, I document it using a color matrix (figma plugin or online tool)\n• Last but not least, I document component examples, in my styleguide, of how the colors should be used together. Here I have a theme with my 4 variations of color (pink, purple, blue, aquamarine) used as title with the darker gray text. And I have examples of call to actions for each version.\n\nIf you need help creating palettes, check Color accessibility: tools and resources to help you design inclusive products and Tips to Create an Accessible and Contrasted Color Palette.\n\nAs mentioned above, I like color matrix tools, because they help me document color combinations with their contrast ratios. I use a color matrix tool like this one. (there is also a figma plugin) Here we have the same colors on the horizontal and vertical axis. The intersection of both shows their color ratio when paired together. This helps me know if I can pair those 2 colors together for different ratios: 3:1 4:5,… For example I should not use that yellow as text on which background, but I can pair it as a text for a darker grey. I can then put this matrix in the project, to let other designers know the color combinations they can and should not use.\n\nIt might be interesting to share this matrix with the whole design team (or development team) somewhere in the system design to help them understand the possible associations.\n\nIn the design system, I also try to document the use of certain color combinations: what is allowed and not allowed.\n\nI have an example with statuses in my design system. Each status has 4 variant.\n\n For success, I have 4 shades of greens: dark, main, light et contrastText. (Names come from material UI, don’t ask) I documented how colors can be combined (and can’t) be combined for our statuses all across the interface. For example: I can use contrastText (or white) as text color on top of the dark variant for success status.\n\nNot all designers might be familiar with the ratios, AA / AAA meaning and small vs big text concepts. You still need to explain this somewhere. Or put some links to external sources. You could use Geri’s WCAG for Designers documentation or the accessguide page on contrasts. For more tools check “Color accessibility: tools and resources to help you design inclusive products“.\n\nThe text content can be enlarged to 200% without hiding elements and missing functionality of the site (no hidden text, images, etc.).\n\nI’ll be honest with you: I tend to document this less on websites, since we mostly build for responsive. But, I will check with developers to make sure they don’t block the zoom. And ask QA to test that zooming to 200% won’t hide elements. The other part here is a technical part: developers need to build the site with fluid units (ems, rems) to insure that, if the user changes the default font in their browser, this will adapt accordingly. Again, very little to do as designers in the mockups. But, if while testing something breaks, you might need to take design decisions as to how this needs to be adapted.\n\nBut I think this can be really useful for native apps.This is an example for Goulven Baron at Maif. He documented how the mobile view behaves at 100% on the left and at 200% zoom.\n\nSo, here’s some text resizing and typography designer guidelines:\n• Adapt layout at larger font size if necessary (multiple columns might become one, secondary text on the right might go to the next line, etc.)\n• Maintain hierarchy even with bigger fonts (H1 titles should be bigger than H2, etc.)\n• Test your font for legibility with “iIlL10oO“. How easy is it to distinguish between each character?\n\nWhen it comes to typography best practises, most of the WCAG criteria are technical ones. For example: Let user adjust text spacing to make it easier to read: line-height, letter spacing, word spacing (WCAG 1.4.12 , technical)\n\nStill, here’s some practical tips, to go beyond WCAG to help with readability:\n• Avoid justified, centered and right align text that is hard to read (LtR language)\n• Avoid italic and all caps for long passages of text\n• Don’t prevent people from selecting plain text (for translations, for example)\n• For body copy, the maximum number of characters per line should be around 80, spaces included.\n\nLast but not least when it comes to text: don’t use that fancy special characters they are annoying and not “real” text. Alexa Heinrich has a great article on this: why using fancy fonts on social media is a bad idea\n\nThe next category is the documentation of interactions: how is a user going to interact with those components and pages?\n\nLinks and buttons purpose need to be consistent and easy to understand:\n• “Does the user understand what will happen if they click/tap/interact with it?”\n\nWCAG 2.2 introduced a minimum size target for pointer inputs that is at least 24 by 24 CSS pixels. I honestly won’t go into the details here, it should be an article on its own again. But, basically:\n• Controls must have a minimum size or spacing around them, to provide a target area of 24×24 CSS pixels for AA ( 44px for AAA)\n• IF you can’t get the 24px, there’s a spacing exception. When you draw a 24px diameter circle around the target (starting in the center of the element), it doesn’t’ intersect\n• The 24px doesn’t apply to links inline in a block of text (paragraphs), if the function can be achieved via another accessible control, for browser elements, when the size is essential (a pin on a map for example) and for legal requirements.\n\nAs designers, you can ensure the links and buttons pass the 24px minimum target size criteria in the mockup. Be careful with responsive thought, regarding the spacing exception. Sometimes the interface might pass on large screens because the buttons are on one line, but they might not have enough spacing one they are on a smaller screen and wrap. Check with your developers then to increase spacing.\n\nWhen designing links and documents, designer can document them to make developer’s lives easier. But, also, so that, again, we don’t forget about important states for accessibility, like, focus.\n\nSometimes the “clickable” part of an element might not be obvious. Especially when they wrap a whole component. In this example, we have a tile with 5 list items. Each has an icon, a title, a number and an arrow. Dev teams might ask “where should I put the link, is it on the title or the whole element???” I can document this directly with annotations as well. Or I can put that info in a Jira ticket.\n\nAlso, when working with links, make sure that the text of the link, aka the anchor is explicit. You want to avoid “click here” links and have more explicit links to help people understand what will happen when they click.\n\nFor forms, the main idea is to help the users fill them. Like a game, give the rules / instructions at the beginning\n\nThere are a couple of guidelines you can follow to design more accessible forms:\n• The label is clear and helps understand how to fill the field\n\nThen, you also want to make your forms easy to fill and help users:\n• Help to recover from errors (errors are marked, clear messages, etc.)\n• Avoid redundant entries: don’t make users input the same information twice (except security reason)\n\nThis is where documenting form states can help.\n\nThe focus state is very important for accessibility. It helps keyboard users know where they are when navigating on the page. For form inputs, at the component level, I have some generic classics: default, focused, filled, read only (or disabled).\n\nBut I could have some extra statuses, for example: Error, Success and Information. For those, I don’t just use color, but also some text and icons (so that the color is not the only way to convey information)\n\nThe component is then used in a specific page or content, in a form. In that form, I want to help user avoid or recover from errors. For this, I document at page level:\n• What the exact message (copy) should be. (all of those “help people avoid / recover” elements)\n\nFor checkboxes, I also have a little bit more documentation to help the developers build those:\n\nThe last two are not in the HTML specification. But we sometimes need them on tables where the user can check several rows. Same for radio buttons, except they are not indeterminate. When designing custom checkboxes, don’t forget to check they contrast ratio!\n\nMore form accessibility documentation that experts can help with\n\nThere are more things you can document for form accessibility. But this might require a little bit more help from experts / devs. But, for many of the examples, you could collaborate with developers and accessibility experts to add even extra information to that documentation such as:\n• Correct HTML semantic elements (are we using buttons or href links)\n• ARIA states and properties For forms for example, we could add:\n• What is the Correct HTML5 type? In my example here, this is documented with a little pink annotation next to the right field: option, , .\n• Is this field supposed to have , , etc. (attributes)\n• Default focused elements when page opens (if needed, often it is NOT needed\n\nKeyboard accessibility will help keyboard users but also screen reader users. It’s one very important part that gets often forgotten! In short: users need to be able to navigate and interact with elements on the page, using only a keyboard. There are a couple of things designers can build and document to help here.\n\nSkip Links let users bypass blocks of repeating content (navigation) and get direct access to the main content. Those are links that let screenreader users skip directly to the main content of the page. And sometimes to the search. They are often “invisible” by default but are visible on focus (and announced by screen readers). You can also keep them visible all the time in the header. Up to you. Designers can also document the Skip Links.\n• Where the link is\n• What is looks like when focused (if invisible by default)\n• Where it will send users.\n\nSome people will navigate a site without a mouse, using the tabulation key. The focus order should follow the logic of the flow of the page. This example is from a Figma template by the Fluent Design System team of Microsoft. They provide a Figma kit to help you with such annotations.\n\nFocus order is also something you can document at page level. The mockup is in the background. On top of it, you have small annotations. With the corresponding documentation of their focus order on the right. In this case, after the user navigates through the top navigation and first “site header”, they enter the main content. They start with the left sidebar, then a “return” link; and finally to the right part of the content.\n\nThis type of documentation might be overkill for simple pages. But if you start working in complex B2B apps (like Sharepoint, haha), with a lot of interactions, it can become quite handy.\n\nSometimes, you might document the focus order at the component level. This often happens if the components are in a multi-columns layout.\n\nHere is another example of such documentation at the component level for a complex modal with many checkboxes. I document the tabbing (focus) order throughout the modal content with numeric annotations:\n• The closing of the modal.\n• The checkboxes in a certain order\n\nI also specify that the modal must be closeable using the escape key.\n\nI can document this with little annotation numbers on the form fields and arrows to show the order (which is my example on the left). If you are using Figma, the team at Microsoft created a plugin (A11y Focus order) that will help you with that (this is the example on the right). You can select the elements and then give them a number in the plugin. And you can re-order them as well.\n\nUsers need to be able navigate and interact with all components using different pointing and interaction devices (mouse, keyboard, etc.).\n\nFor complex components with many interactions, I build “interaction flows”. This documents how these components should work, when there are different interactions. Let’s start with mouse interaction. In this example, I have a filter with checkboxes. I documented step by step what happens when a user:\n• What happens when user clicks\n\nOn top of mouse interaction, I also document keyboard interaction. So I end up with a similar flow, that will also show keyboard navigation in this component:\n• How to open the component (enter/space), close it (esc)\n• How to navigate across the elements (up/down key)\n\nIf the component has some keyboard shortcuts (mine don’t), this would be a nice place to document that as well.\n\nHere are a few resources to help you get started with keyboard interactions\n• The difference between keyboard and screen reader navigation\n• A table to help you with keyboard testing (but also shows you the main expect implementations)\n\nA little reminder to help you document keyboard navigation:\n\nProviding alternatives for complex gestures is an accessibility and usability best practice. An example of this is the “swipe right” to archive feature in gmail. If I were to document alternatives for gmail, I could do something like this. I would document the complex gesture with a mockup that shows the swipe right to archive.\n• A long press on the mail to show the toolbar, then press the archive icon\n• Open the mail, then press the icon at the top\n\nI suggest “Foundations: pointer gestures” for more details as to what is a complex gesture or not and how to deal with those.\n\nThis is a new WCAG2.2 criteria: for any action that involves dragging, we also need to provide a single pointer movement alternative. Note that this doesn’t just apply to gesture, but also mouse drag and drop.\n\nIn my example here, I have a way to sort pokemons by using drag and drop. This can’t be achieve for some people with motor impairment. A solution here would be to double the action:\n• User can drag the cards to re-order\n• User can also use some top / down arrows to re-order.\n\nI’ve documented both interactions to help my developers build this. People interact with click with the arrows. We would need of course, to also document and implement a way to use keyboard navigation here.\n\nFor more information on this criteria you can check Tetralogical 2.5.7 Dragging Movements (AA)\n\nWayfinding is the documentation of things that will help people find their ways on the page (navigation and more). Good information architecture follows accessibility best practises and makes content easily navigable.\n\nSemantic order refers to the order in which content is interpreted by screen readers and keyboards. By default, the screen reader will follow the order of your HTML. The semantic order should follow the logic of the flow of the screen!\n\nMost of the time, it’s straight forward and designers don’t need to do anything. But, in case of complex layouts (multi-columns for example), designers might need to convey the reading order to the developer teams. So that the developers can implement the proper HTML (or native code) to convey that order.\n\nMy cooking app is not that complex, so, documenting it might be overkill. Still, there’s one tricky part, with the 4 columns meta-datas. Those meta data are key-values layout out in a 4 columns grid. I honestly really hope you work with developers who understand the reading order here. But, for very complex pages with complex layout, this can become useful.\n\nThere’s usually 2 ways you can document this.\n• You can use little arrows to show the developers the order. In my example here I was using the arrows from the Include Figma plugin.\n• You could use numbers, like when you document the focus order. Be careful though, focus order is only for interactive elements, while reading order is for ALL elements. So, this could get confusing if you use numbers for both.\n\nHere’s an example using numbers\n\nIn this example, I have a small version of a cooking recipe “thumbnail” component. This component will be used in a grid page (aka there will be a lot of those on the same page). It has a vertical layout, image at the top with a save button on top of it. Then categories, recipe title and summary.\n• I don’t want the image to be announced, because there will be a lot of those and it might get annoying.\n• The H1 title should be announced 1st. This is why it’s in a big bold font in my design. It conveys visually the hierarchy. So this gets number 1.\n• For the save button, even if visually at the top (mostly to gain space), should be at the bottom of the HTML and announced last.\n\nHow would you implement this then? Marie Guillaumet, accessibility expert at Access42, explained to me:\n\nIf you want to dig further in the topic of screen reader I recommend:\n• A 4-step process for testing the accessibility of your designs\n\nThe examples until now were mostly documentation at component level. There are more things you can document at page level.\n\nStarting with the HTML title of the page for example. Each page should have a unique that describes the content of that page. It is displayed in browser tabs. It is also announced by screen readers. This helps users know where there are and what they can expect to find on that page. Designers can document titles for each page. SEO, UX writer or content people can also help writing the page title (and descriptions). What makes a good page title? Well it:\n• Is unique for each page\n• Helps users know where there are and what they can expect to find on that page\n\nFor those, we use a Jira ticket (because we don’t have confluence ^^). You could also document this in mockups .\n\nOnce a user is “inside” a page, proper HTML headings is another important aspect of accessibility: H1, H2, etc. I can do 2 things:\n• First, I usually directly name my styles with the proper heading level so that others designers can re-use them (and devs see the name when inspecting)\n• I can use heading level as annotations on the mockups\n• The label of the heading is descriptive, clear and accurately describes the content that follows\n• Don’t have illogical order (a h2 after a h4 in the same section)\n• Don’t use paragraphs with bigger font, use Hns instead.\n\nMy advice here is: don’t start thinking bout your page structure when you are in Figma/Penpot, whatever tool, it’s too late. Plan your page content and structure ahead! I’m using content modelling for this, in sticky notes, but you can also do it in a document\n\n And work with UX writers, SEO people on those! This is the sort of thing that you could also document with content people. Sometimes you need a heading level but this would mess up SEO. For those cases, you can use the aria-levels (and a p tag). Check with your devs. If you want an example, check the code of my “let’s get in touch” footer. The title is visually the same as H2, but this makes no sense for SEO. So it got a role=”heading” and “aria-level=2” instead.\n\nThe skip to content was sending the user to an area of my document that is called “main”. But there are more areas that help screen reader users orientation on the page: the Aria Landmarks. This is really useful for screen reader users, because it lets them get a sense of how the page is structured.\n\nPlease note that several HTML sectioning elements automatically create ARIA landmark regions. So, if you use HTML5 elements like main, header, nav, etc, you don’t need to double down with an ARIA role. More information on the ARIA Ladmark Regions page.\n\nI debated a lot about adding this part. Is it the job of the designer or the developer to document something that starts to be technical? Honnestly: it depends on your teams (more information on the last section on this). For me, designers should at least document the main areas, so that developers understand what belongs together. This can be a collaboration between designers and desvelopers as well. This is why I added a “zone” component to my Figma/Sketch/Penpot annotation templates.\n\nOne last level of documentation is “interactions across pages”. User flows (on the left) are kind of “step by step” boxes and arrow graphs that document how someone accomplishes a task. They list pages, views, branchings, … They are usually built at the beginning of the project to help plan those pages and flows.\n\nScreen flows (on the right) are kind of the same. But instead of boxes for pages, I put the real interface mockups. I build those at the end, once we went through usability testing, refinement and have mockups. Both help the dev team understand how the user will navigate across the whole interface.\n\nSuch documentation can help with accessibility to plan:\n• Transitions between pages. Especially in single page applications or mobile apps.\n• Alerts or messages that might appear and stay on top of the page even if users got to another one.\n• Multiple steps flow where you might have session lengths. But avoid limiting form sessions length if you can.\n• Make sure information is structured and convey that structure through presentation (design) but also programmatically (proper semantic)\n• Make sure screen reader can access every content\n• Ensures all elements in paragraphs and lists are navigable and announced by screen reader (Aka: avoid text in images! )\n• Ensure elements in a list are navigable one by one\n• Text is used rather than images of text\n\nIf there are images or icons in the mockups, designers can document what the screen reader should announce, if those need to be announced.\n\nIn my example on the left, I have a cooking recipe site with an image of a slice of pizza at the top\n\nI use the annotation technique to document the alternative text for this image:\n• The alternative detailed documentation on the right\n\nI also have 3 buttons: save, share, rate. Each has an icon and a label. In my annotations, I explain that the screen reader should NOT announce anything for the icons. Since we have the text next to it, those become decorative images. Otherwise it would be annoying to have twice the same information.\n\nI am not sure here how the developers will implement the icons. So I prefer not to document exactly if this should be an empty , a , … I could also discuss with them. Then update the documentation to reflect how this would be implemented.\n\nOne small detail: here I assumed I am the one coding the pages. But this is a cooking recipe page. There is a good chance this content is going to be generated by a user, using some sort of CMS (or WYSIWYG)\n\nWhich means: you need to develop the alt text field as well. If you are interested in the topic, take a look at the ATAG: Authoring Tool Accessibility Guidelines\n\nIn this second example on the right, my icon buttons do not have visible labels. So I need a screen reader to announce those.\n\nI again use the annotation to document that:\n• the first is “view graph”\n• and the second “view table”\n\nWith the help of my dev team I could bring this one step further. They can add documentation for some ARIA states (selected, etc).\n\nThe w3org has a nice decision tree to help you decide if an image is decorative or not. That being said, Léonie Watson (accessbility expert and blind person) had an interesting discussion on the f-word podcast. She explains:\n\nSo, yeah, this is the hardest part, I think, about accessibility and images. Experts and users don’t agree on this. But I like the idea of giving more information, and people can skip if needed. To be clear: here, I’m talking about actual images in articles. This doesn’t apply for images in buttons for example.\n\nSometimes, screen reader users need some extra information. \n\n In my case here, I have some ratings for my cooking recipe. I use a stars system. This is very visual. And, I don’t want the screen reader to announce 4 times “filled star” and one time “empty star”. I want the screen reader to convey the same information as the visual one. So I documented this to explain the screen reader should read “Rating 4 out of 5 stars” here.\n\nAnother solution would be to follow my advice at the begining of this chapter: don’t use image only to convey information. I could for example, put the rating, in plain text, next to those stars. Something like “4/5 stars, 12 votes”. In this case, the stars would become decoration, since we already have the information in text. And screenreader would not need to announce anything.\n\nI like this example, because it show how our design decisions can impact users, and, that there’s always multiple ways to tackle some accessibility challenges.\n\nIf you have pre-recorded audio only and video contents, you need to provide alternatives.\n• Captions for videos, and / or transcript, and audio description / descriptive alternative\n\nFor live audio content, we also need to provide text alternatives, like captions. This is a little rarer on web content that tends to be pre-recorded. But think about XTwitter for example: they have space feature that is audio only, and they provide auto-generated you can activate. For now at least.\n\nSo you might say “yes, but the designer isn’t going to write all the transcripts and create all the captions”. True. But, as designers, you need to design ways to access and display all the alternatives.\n\nAnd, just like images, if you are a designer, working on a platform that offers the ability to have pre-recorded audio, videos or live audio, it’s your job to make sure captions and / or transcripts are supported. Which means: design a place for them. Design a whole UI for people to upload their captions, to synchronize them even maybe, if you have a video platform. And, it’s your job also to push this, as a product feature in the roadmap, so that, it’s not accessibility is not an afterthought anymore!\n\nWe also need to provide a way for users to control moving, scrolling blinking or auto-updating content that starts automatically and lasts more than 3 seconds:\n• A mechanism to control the audio volume independently of the system\n\nI have yet another example of my cooking app. When you click on a recipe, the video at the top autoplays. So, I need to provide a way for the user to stop the auto play. They get a pause button.\n\nThat’s it, as simple as that. Some people will fix their device and can’t change orientation. So, don’t block orientation change support (and document if necessary) both portrait and landscape mode. Document if necessary the way of page transition between portrait and landscape mode.\n\nOne aspect of design that is quite tricky to document is animations and transitions. There are accessibility best practices for those as well. Some animations and transitions can trigger motion sickness to some users. I’m one of those by the way.\n\nYou can use the media query to provide an alternative version for people who prefer less motion. If you want to learn more about the topic, check the section “Building Accessible and Inclusive Animations” of my talk on CSS animations and UX. On my homepage for example I have 2 animations. The fox, sushi and coffee float around my head. And if you scroll down, I have a growing plant when you reach the “I help people grow” part. If the user chooses the reduce motion option in the operating system, I stop the animation around my head. And the plant growth becomes a smooth less triggering fade in.\n\nHow do you document this? Well…Animations are often something that is built in direct collaboration and fine tuned in the browser. For those sorts of things, I think you need to have a discussion with the dev team directly.\n\nAlso, for animations that starts automatically and lasts more than 5 seconds must have a way to get paused. So, don’t forget to have some play/pause buttons in your interface, if you have videos and sliders. Let the users control those!\n\nHow do we make it happen at project level?\n\nThis topic on its own should be a talk. So, I’m going to give you only a couple of pointers, aka, the minimum you need to know.\n\nFor any research (discovery like interview, but also usability test):\n• Find participants with various disabilities to get enough representation\n• Offer transportation assistance, guidance and fair compensation for participants’ time and travel expenses.\n\nAnd here are 3 tips targeted for usability testing with disabled users:\n• Ensure your website meets basic accessibility standards (WCAG 2.2) before testing. You wouldn’t do usability testing before you corrected major usasiliby issues you can catch with an audit / heuristics? Well, same for usability testing with disabled people.\n• Let participants use their own devices with assistive technology for familiarity.\n• Allow additional time for setup and testing sessions to accommodate participants’ needs.\n\nA couple of resources to learn more:\n• Things to consider when doing usability testing with disabled people:\n\nCommunicating accessibility requirements is a big part of the design process\n\nLet’s talk about my project. After all, the goal of this article (and talk) is to share what I do. So that you can get inspired and find your own way. We use Sketch and my developers have access to the Sketch mockups. I have 2 different Sketch files:\n• A “component documentation” which is our design system where each component is described. This one is used as a Sketch library\n• A “page documentation” : the components are put together on pages\n\nIn both those files, I document using a lot of annotations. I document using annotations on both component and page documentation.\n\nHere is an example of a detailed documentation for a search filter at different states.\n\nI put design annotations directly on the component mockup to help developers understand how this works for interactions, but also accessibility. Those are the little arrows in pink and the keyboard annotations.\n\nI do that mostly because people don’t like to read specs and backlogs. But they might (yes might) look at my design files. I created some Sketch symbols for such annotations. Those are the right part of the example. I have arrows, numbers, boxes, keystrokes and some mouse/touch interactions.\n\nI then re-use my components to build different pages. Sometimes, I also have annotations directly on a second mockup at page level as well.\n\nHot tip: make sure the annotation style is different from the page style. This is why mine are magenta. I want to avoid developers implementing the annotations as part of the product by mistake. And, yes, I saw this happen before.\n\nWhile researching for this talk, I stumbled upon Karen Hawkins “Accessibility Annotation Examples“. I find this format interesting as well. She puts the mockup on the left of the page, with little numbers on certain areas. On the right, she has detailed documentation for each number. The design annotations are in dark. And the accessibility requirements are in red, with a little (AR) prefix.\n\nDetermine the best format with the team\n\nMy number one advice: if you want documentation to be useful and used, ask the team about what would work for them. There are many different formats that you could use to document. Here are a few idea:\n• Confluence pages (or whatever knowledge base tool you use)\n\nFor me, it’s all about the best format for YOUR team. This has to be an open discussion.\n\nDocumentation is no substitute for communication\n\nThere are different styles and ways to document. Come up with your own and test what works for YOUR team. But remember one thing: Documentation is NOT a substitute for talking to people!!!!\n\nIt’s still important to present the documentation in person if you can. In our team, we have weekly meetings. Developers show demos. I show and discuss such documentation and specifications.\n\nIt is usually a discussion then, with the team, on what is possible, what is not, how we might implement those, etc.\n\nWhen do you document accessibility?\n\nOne question I get a lot is “when do I document all of this” I document final & tested components / pages, after discussion with devs about technical feasibility.\n\nWhich means I might rework some mockups based on technical feasibility. And then create the final documentation. It takes a little bit of time to document. But it also helps have a good base for communication with the dev team. So, on the scale of the project, it actually helps gain time.\n\nWho should be responsible of accessibility?\n\nI presented how and what to document. The last question to answer then is: who should document and be responsible for all of this? I have two answers for you:\n\nAccessibility documentation is a team effort. A lot of people can participate in such documentation:\n• Product and Project Managers can define and document accessibility requirements at project level. Do we target AA or AAA for example? Also, they can make accessibility part of the Definition of Done if you work in an agile environment.\n• Designers design and also document how it works and what it looks like. They also document navigation, the “hidden” interactions and what screen readers should announce.\n• Content people, UX writers and SEOs can help document alternative texts, call to actions and link anchors that make sense for users, and more generally everything content related.\n• Testers and QA (quality assurance) teams define and document accessibility test cases: how are we going to test this?\n\nIt depends (on what people are comfortable with)\n\nWhen it comes to who should document, my advice is: Start with what you, your team are comfortable with. Then build upon this base!\n\nWhile preparing this talk, I tried to organise what I can document on my own, what I need the help of devs / accessibility experts with. And what I would like the help of writers and SEO with. I put all the types of documentation I just showed you in this 3 section matrix.\n\nThis is a very “personal” way of ordering things. It is based on my own areas of expertise.\n\nI advise you to do something similar with your team. Of course, your mapping will be different. It depends on a lot of factors, including level of accessibility expertise for designers and dev team. The type of project might also change this. A single page app will not have the same needs and levels of page/component as a blog for example.\n\nIt is an interesting exercise to do with the team to see how confident and comfortable people are documenting things.\n\nWhat are the benefits of such documentation?\n\nI gave you plenty of examples of what to document. The final question now is: what are the benefits of such documentation?\n\nWhy should we do it and how do I convince my team to invest time in design documentation for accessibility? Well, a few reasons…\n\nIt benefits myself, as designer\n\nThe first benefit of documenting accessibility is for myself, as a designer. It helps me learn more about accessibility. To document such things, I had to learn about it.. So documenting helps me keep up to date and understand more accessibility needs and requirements.\n\nIt forces me to think about different interactions, beyond the “static” pixels I am working on. Documenting is a nice mental effort that forces me to take a step back and ask myself:\n• How will someone interact with this with a mouse?\n• How will it work on touch?\n• What will a screen reader announce for that? Etc.\n\nSometimes, I am too deep into the pixel details of something. I don’t notice that this will not work, once people interact with it.\n\nThis helps me see that, and rethink a whole new solution if needed.\n\nDesign documentation helps avoid some misinterpretations. Of course this doesn’t mean that you don’t need to talk to your devs, or don’t need to present your mockups. Sometimes there are months between the moment I designed and presented something to the dev team and the moment that Jira ticket arrives in their backlog. Having a solid base of documentation helps remember and restart the conversation.\n\nIt also helps bring consistency to future pages and interactions. If interactions and accessibility are documented for one component, then similar components should work the same way. And trust me, my developers hold me accountable. Sometimes they will come and ask me “Stef, this is almost the same thing, why is this working differently?” And they are right to ask.\n\nCompanies, stakeholders, PMs might think such documentation is a waste of time. But, what happens if the designer doesn’t document how it works, states and all? Well, the developers will have to come up with that. Which means, you don’t gain time or money at the end of the day by not documenting. You just shift the costs from design to development. And I think you might even lose money then. Developers will often need more time than designers figure the missing peaces out.\n\nIt’s a good onboarding tool for new members, especially if they don’t know about accessibility. They get examples of what is expected from them. Often, they will ask a lot of questions. And will learn about accessibility from that kind of documentation as well.\n\nPrior documentation also helps set standards as to what is expected for the next designs. This again helps bring consistency when the design team grows.\n\nIt benefits everyone else in the team\n\nSuch documentation helps start conversations about accessibility within the company. It encourages them to dig further and learn about that topic as well. And helps make sure accessibility is NOT an afterthought anymore!\n\nI share with you a lot of things you can document as a designer to help push accessibility forward.\n\nThe goal was to give you some examples. But I will be honest, I don’t always have the time to document all of that in design mockups. I would say: pick your battles. If time is limited, document the things where there might be the biggest issues and misunderstandings\n\nThe important thing is teamwork. Even if you don’t document everything, communication is the most important aspect here. With the other designers, with the dev team, with the testers. So that we can push accessibility forward together for everyone. And make it part of the projects from the start.\n\nAnd yes, it is a BIG, long, demanding job.\n\nWow. That was a lot. But don’t worry, if you don’t remember everything that you could document, I prepared a checklist for you. And some Sketch and Figma Annotation kit, to streamline your design process and save you time. You can now get it on my brand new shop.\n\nGet the Checklist and Annotation kit\n\nThis talk was presented on March 16 at axe-con. (watch the replay of my talk page). It was updated in September 2022 , for Web Accessibility in Mind conference and Inclusive Design 24 to reflect the structure and content of a new version of the talk. And presented at Clarity 2022. It was also updated in 2023 for Penpot and FrontZurich.\n\n\n\nI collaborated with Penpot to bring you a 1h introduction on how and where designers can have the biggest impact on Accessibility within a product.\n\n I also created a template that you can find in the library, to help you document accessibility, with ready to use documentation components.\n\nThe talk was live on YouTube as part of the Inclusive Design 24 conference. You can also get the Webaim replay.\n\nAt Clarity 2022, two awesome people drew some Sketchnotes of my talk\n\nFirst, many thanks to Alain Vagner, Marie Guillaumet, Geoffrey Crofte and Myriam Jessier for the help and feedback with that talk, Goulven Baron and Karen Hawkins for letting me user their work.\n• Icons in the presentation by Streamline\n\nMore links to help you build and document better accessible designs:\n• Include – Accessibility Annotations: a useful Figma plugin to help you annotate landmarks, focus groups (native), headings, reading order, alternative text (for images, it’s missing icons for now), check touch target, color contrast, create de 200% version of your page, document complex gestures (native) and more.\n• Color accessibility: tools and resources to help you design inclusive products\n• How to document the screen reader user experience\n• IDF has a course on accessibility, with an interesting introduction on accessibility vs usability (hint: we need both, but, accessibility doesn’t automagically mean usable)"
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-use-html5-output-element-in-forms",
        "document": "When crafting web forms, the HTML5 element can be a game-changer. It’s a small but powerful tool that can dynamically display results or feedback based on user input. In this article, we’ll explore how to use the element effectively within forms. From its basic function to advanced applications, we’ll cover everything you need to know to leverage this element in your web designs.\n\nThe element in HTML5 is designed to show the result of a calculation or user interaction. It’s often used in conjunction with JavaScript to dynamically update the content displayed to the user based on their inputs.\n\nIn a web form, the element can be used to display results like the total cost of items in a shopping cart, the final score in a quiz, or any other calculated value that changes based on user actions. It’s a versatile element that can enhance user experience by providing immediate feedback.\n\nTo get started with the element, you’ll need to understand its basic syntax and how it fits into an HTML form. Here’s a simple example to illustrate its use:\n\nIn this example, two number inputs are provided, and a button is used to calculate their sum. The result is displayed in the element with the ID .\n\nWhen the button is clicked, the function is executed, which updates the content of the element with the computed sum.\n\nThe real power of the element comes from its ability to interact with other form elements and JavaScript. It’s not just about displaying static results; you can create dynamic, interactive forms that respond to user input in real-time.\n\nLet’s take the previous example and expand it to provide immediate feedback. Instead of using a button to trigger the calculation, we can make the result update automatically as the user types:\n\nIn this updated version, the event is used to call the function whenever the user types into either number input. This ensures that the result is updated in real-time, making the form more interactive and user-friendly.\n\nUsing for Validation and Feedback\n\nThe element is also useful for form validation and providing feedback to users. For instance, you can use it to display messages if the user has entered incorrect data or if certain conditions are not met.\n\nHere’s an example where is used to provide feedback on the validity of form inputs:\n\nIn this example, the function provides immediate feedback based on the age input. If the age is not valid, the element displays an error message; otherwise, it confirms that the input is valid.\n\nAdvanced Uses of the Element\n\nThe element’s capabilities extend beyond basic calculations and feedback. With a bit of creativity, you can harness it for more complex scenarios and enhance user interactions on your site.\n\nImagine you want to display real-time data visualizations based on user input. While the element itself doesn’t create charts, it can work in conjunction with JavaScript libraries to show dynamic charts or graphs.\n\nHere’s a simple example of how you might integrate it with a chart library:\n\nIn this example, the Chart.js library is used to display a bar chart that updates in real-time based on user input. The element shows the current value being input, and the chart is updated accordingly.\n\nSometimes, forms require more intricate calculations. The element can be used to display results from complex formulas or algorithms. Here’s an example involving a quadratic formula calculator:\n\nThis form calculates the roots of a quadratic equation. The roots are computed in real-time based on the user’s input, and the results are displayed in two elements.\n\nThe element can be combined with other HTML5 features to create more sophisticated forms. For example, integrating it with HTML5’s element can provide visual feedback on ongoing tasks or progress:\n\nIn this setup, the element visually represents the percentage input by the user, and the element displays the same value as text.\n\nPractical Applications and Tips for Using\n\nThe element shines in various practical scenarios. Leveraging its full potential can significantly improve the usability and functionality of your web forms.\n\nBelow, we delve into some of these practical applications and offer tips for making the most out of this versatile element.\n\nFinancial calculators are a great use case for the element. For instance, let’s say you want to build a loan calculator that provides the user with monthly payments based on the loan amount, interest rate, and duration.\n\nIn this example, users input the loan amount, interest rate, and loan term. The script calculates the monthly payment and displays it using the element.\n\nReal-time data feedback can make a web application more engaging. For example, consider a live temperature conversion tool that updates as the user types:\n\nHere, the element shows the converted temperature immediately as the user inputs the Celsius value, providing instant feedback.\n\nFor more complex applications, you can integrate the element with web APIs to fetch and display real-time data. Suppose you want to display the current exchange rate between two currencies.\n\nHere’s how you might use the element in conjunction with a currency API:\n\nThis example uses the Fetch API to get the latest exchange rates and updates the element with the converted amount. This integration shows how can display results based on dynamic data fetched from external sources.\n\nWhen developing forms, it’s important to ensure they work correctly across different scenarios. The element can be invaluable for debugging. By displaying intermediate values or calculation results in , you can easily verify that your calculations and logic are functioning as expected.\n\nFor instance, during development, you might display raw values or intermediate steps in your calculations to help identify issues:\n\nThis approach helps ensure that your calculations are correct and assists in troubleshooting any issues that arise during form development.\n\nEnsuring accessibility is crucial for web development. The element can be an essential part of making your forms accessible to all users, including those who rely on assistive technologies.\n\nProper use and implementation can enhance the user experience for everyone.\n\nTo improve accessibility, especially for users who rely on screen readers, you can add ARIA (Accessible Rich Internet Applications) attributes to the element.\n\nThese attributes provide additional context to assistive technologies. For example, you might use to announce changes in the output dynamically:\n\nIn this example, the attribute is used to ensure that any changes to the element are announced by screen readers without interrupting the user. This approach helps users with visual impairments receive real-time updates on their screen.\n\nFor forms with interactive elements and dynamic outputs, managing focus is key to accessibility. When updating the element, ensure that focus remains on the relevant input field or form controls.\n\nProper focus management helps users who navigate with keyboards or screen readers.\n\nFor instance, you can use JavaScript to keep focus on the input field even after updates:\n\nHere, after updating the result, the focus is explicitly set back to the input field, maintaining a smooth and accessible user experience.\n\nWhile the element is relatively lightweight, performance considerations still apply, especially in forms with complex calculations or large amounts of data.\n\nWhen using the element with JavaScript, ensure that your code is optimized for performance. For example, minimize the number of DOM updates and calculations performed in real-time to avoid slowing down the user’s experience.\n\nConsider debouncing user input to reduce the frequency of updates:\n\nIn this example, the function ensures that the function is not called excessively while the user is typing, improving performance and responsiveness.\n\nIf your form involves large data sets or complex computations, consider performing calculations on the server side and sending the results to the client. This approach reduces the load on the client’s browser and ensures faster performance.\n\nFor example, you could use AJAX requests to process data on the server and update the element with the results:\n\nIn this example, data is sent to the server for processing, and the result is retrieved and displayed in the element. This approach helps manage performance for complex calculations.\n\nEnsuring that the element works consistently across different browsers is important for maintaining a smooth user experience. While modern browsers support the element, it’s still worth testing your forms across various browsers to catch any inconsistencies.\n\nTest your forms in multiple browsers and devices to identify any compatibility issues. Pay attention to how the element behaves, especially in older versions of browsers that may have partial support for HTML5 features.\n\nFor browsers with limited support, consider using polyfills or alternative methods to achieve similar functionality. Always verify that the core functionality of your form remains intact, regardless of the browser used.\n\nAdopt a progressive enhancement approach when using HTML5 features like . Ensure that your forms function correctly even if advanced features are not supported.\n\nBasic functionality should be preserved, allowing users to interact with your forms effectively regardless of their browser capabilities.\n\nIn this example, a tag is used to inform users if JavaScript is not enabled, ensuring they understand the functionality of the form might be limited.\n\nThe web is constantly evolving, and so are HTML and its associated technologies. Staying informed about future developments can help you leverage new features and maintain best practices.\n\nKeep an eye on updates to the HTML5 specifications and new features that may enhance or expand the capabilities of the element.\n\nThe W3C and WHATWG regularly update specifications and provide insights into upcoming changes.\n\nAs new JavaScript APIs are introduced, they may offer enhanced ways to interact with the element. Exploring and adopting these APIs can provide additional functionality and improve the overall user experience.\n\nBy remaining current with web standards and best practices, you can ensure that your use of the element continues to provide value and functionality in your web forms.\n\nBest Practices for Using the Element\n\nAs you wrap up your exploration of the HTML5 element, it’s important to keep a few best practices in mind to ensure that your implementations are effective, user-friendly, and maintainable.\n\nWhenever possible, use semantic HTML to provide meaningful structure to your web content. The element should be used where it makes sense contextually—typically in forms where real-time feedback or calculations are needed.\n\nUsing semantic HTML improves accessibility and helps search engines understand the content of your page better.\n\nAlways validate user input both on the client and server side. While the element is used for displaying results, ensuring that input data is validated and sanitized helps prevent errors and security vulnerabilities.\n\nImplement appropriate validation rules for user inputs to maintain data integrity and provide accurate results.\n\nEnsure that the element is accompanied by clear labels and instructions so that users understand what the output represents. This helps users interpret the results correctly and enhances the overall usability of the form.\n\nIn this example, clear labels are provided to help users understand what input values are required and what the output represents.\n\nBe prepared to handle edge cases and errors gracefully. For example, if user input is invalid or calculations result in an error, provide meaningful feedback. Use the element to display error messages or default values to guide users effectively.\n\nThoroughly test your forms across various devices and browsers to ensure consistent behavior. The element is supported in modern browsers, but testing helps catch any potential issues related to layout, functionality, or compatibility.\n\nMake sure that your forms, including those utilizing the element, are responsive and work well on different screen sizes. Use responsive design techniques to ensure that the form and its outputs are properly displayed on mobile devices, tablets, and desktops.\n\nWhen using JavaScript to update the element, consider performance implications, especially for complex forms. Optimize your JavaScript code to avoid excessive calculations or DOM manipulations that might impact performance.\n\nUse techniques like debouncing to manage real-time updates efficiently.\n\nDocument your code clearly, especially when implementing complex logic or integrating with other technologies. Good documentation helps maintain the codebase and makes it easier for others (or yourself) to understand and update the implementation in the future.\n\nThe HTML5 element is a powerful tool for creating interactive and dynamic web forms. By leveraging its ability to display real-time results and feedback, you can enhance user experience and make forms more engaging. Whether you’re building financial calculators, interactive tools, or integrating with web APIs, the element offers a versatile solution for displaying results.\n\nBy adhering to best practices such as using semantic HTML, validating user input, providing clear labels, and ensuring cross-browser compatibility, you can maximize the effectiveness of the element. Remember to keep performance considerations in mind and regularly test your implementations to deliver a smooth and accessible user experience.\n• The Role of JAMstack in Modern Web Development\n• How to Implement Animations with CSS and JavaScript\n• How to Use ESLint for JavaScript Code Quality\n• The Importance of Version Control in Frontend Projects"
    },
    {
        "link": "https://moldstud.com/articles/p-ultimate-guide-to-developing-your-first-html5-game",
        "document": "Imagine a world where creativity knows no bounds and technology acts as a canvas. Building an engaging experience is not merely a task; it’s an adventure filled with opportunities for innovation. The journey combines artistic vision with technical skill, leading to a product that can captivate audiences. Every pixel tells a story, and every line of code contributes to the final masterpiece.\n\nIn this intricate process, understanding the landscape of game creation becomes essential. Start with identifying your target audience and defining the core gameplay elements that will resonate with them. Market research is vital. Statistics show that over 2.5 billion people play games worldwide, indicating a vast potential player base. This is why crafting an experience that captures attention is crucial.\n\nCreating a compelling narrative is just as important as the mechanics themselves. Strong characters and immersive worlds can elevate a simple idea into a compelling journey. As you immerse yourself in the project, keep in mind that iteration is key; refining and revisiting your concepts can lead to breakthroughs in both gameplay and design.\n\nUltimately, transitioning from one phase to the next requires a well-structured plan and adaptability. Game engines like Unity and Unreal provide powerful tools to help you bring your visions to life, but understanding the foundational elements of coding is equally important. A single piece of code can make a world of difference; consider the following example:\n\nThis snippet symbolizes the initiation of an experience and its capability to engage users effectively. As you craft your journey, remember that every decision shapes the final product, paving the way for your unique contribution to the evolving realm of interactive entertainment.\n\nCreating an interactive experience requires a solid grasp of essential principles. These principles form the backbone of any successful project. They influence design decisions, development processes, and user engagement strategies. Game development combines technology, creativity, and storytelling to captivate players.\n\nAt its core, game design revolves around three main elements: mechanics, dynamics, and aesthetics.\n• Mechanics: These are the rules and systems that guide gameplay.\n• Dynamics: This term describes how players interact with game mechanics.\n• Aesthetics: The emotional responses evoked during gameplay are crucial for player experience.\n\nA clear understanding of these components can enhance game quality significantly. Each layer adds depth and richness, leading to a more engaging final product. Moreover, incorporating feedback loops ensures continuous improvement. It’s essential to keep the players' experience at the forefront.\n\nAnother crucial aspect of this process is the development environment. Tools and technologies are vital for bringing ideas to life. Familiarity with programming languages, frameworks, and graphic design software speeds up the entire workflow. For HTML5 projects, leveraging libraries like Phaser or Three.js can make a significant difference.\n\nAdditionally, understanding user experience principles is paramount. Players should navigate effortlessly. Clarity in controls and intuitive interface design enhances engagement levels. Iterative testing sessions with real users will uncover hidden issues that could impact overall enjoyment.\n\nIn summary, grasping the fundamentals of game creation will empower aspiring developers. It enables them to craft captivating experiences that resonate with audiences. As technology evolves, staying updated on trends and best practices becomes crucial for long-term success. Embrace the journey of learning and creation for a fulfilling development experience.\n\nA game design document (GDD) serves as the backbone of any successful project in the gaming industry. It outlines the vision, mechanics, and overall journey of the game, ensuring that every team member is aligned with the concept. A well-structured GDD can save time and resources, making collaboration smoother. Ensuring clarity in communication helps avoid costly mistakes. It assists in keeping the team focused on their objectives and timelines.\n\nThe document acts as a roadmap, detailing aspects such as game mechanics, storylines, art directions, and user interface designs. This comprehensive blueprint guides programmers, artists, and marketing teams, allowing them to understand their respective responsibilities. Moreover, a GDD facilitates the development process by providing a reference point throughout various stages. It becomes particularly crucial when additional team members join, enabling them to quickly get acquainted with the project's vision.\n\nStatistics show that about 70% of game projects suffer from scope creep or miscommunication, which can lead to project failure. According to industry surveys, teams with a well-defined GDD are 30% more likely to complete their games on time and within budget. This emphasizes the necessity of having a solid framework in place before diving into development.\n\nIncorporating a GDD is not just beneficial; it's essential. Every detail, no matter how small, contributes to the final product. By laying down the foundation, a GDD minimizes confusion and maximizes productivity. Additionally, it fosters creativity by enabling designers and developers to think critically about every aspect of the game. When everyone knows the end goal, innovation can thrive.\n\nWhether you’re working solo or as part of a larger team, a well-drafted game design document can greatly enhance your chances of creating a successful product. If your project requires additional expertise, consider looking into how to hire an API developer in India. With the right resources and a detailed plan, you can turn your ideas into reality efficiently.\n\nChoosing the Right Tools and Frameworks\n\nSelecting appropriate tools and frameworks is a pivotal step in the process of crafting an engaging interactive experience. The right choices can significantly enhance your development efficiency and the quality of the finished product. With a multitude of options available, it’s essential to analyze your specific needs, expertise, and the type of game you intend to create. Many developers overlook the importance of this initial decision, leading to challenges down the road.\n\nConsider your project's complexity and the required functionality. Some tools offer more flexibility, while others provide a streamlined experience. For beginners, simplicity is often key. A user-friendly environment can accelerate learning and foster creativity. Additionally, familiarity with a tool can dictate how quickly one can move from an idea to a prototype.\n\nFrameworks like Phaser and Babylon.js stand out as popular choices. They provide a variety of features, from 2D canvas rendering to 3D graphics, making them versatile for different game types. According to recent surveys, over 50% of developers prefer these frameworks for their efficiency and comprehensive documentation.\n\nIf you lean towards building games with stunning visuals, Unity with its WebGL support may be the ideal platform. It enables complex graphics and physics while offering a vast asset store. Alternatively, for simpler projects, Construct 3 or GDevelop can be excellent options. They require minimal coding knowledge, allowing you to focus more on creativity.\n\nIntegration is another factor to consider. Choose tools that support popular libraries and APIs. This can streamline adding features such as social media sharing or online multiplayer capabilities. The choice of a sound engine is equally critical; opting for a reliable one can enhance the player experience significantly.\n\nUltimately, the best approach is to experiment with a few tools. Create small prototypes to understand their strengths and weaknesses. By doing so, you’ll gain valuable insights that can guide your final decision, ensuring the framework aligns with your vision and technical skills.\n\nEstablishing the foundation of your interactive experience is crucial. This phase requires keen foresight and creativity. While it may seem daunting, effective planning can streamline the development process. Understand your audience and tailor the gameplay to their preferences. Features should enhance engagement and provide entertainment value.\n\nStart by identifying the core mechanics. Think about how players will interact with your creation. Will it involve puzzles, combat, or exploration? Perhaps a mix of these elements? Elements like scoring systems, character abilities, and level designs can significantly impact gameplay. Balance is key; players should feel challenged but not overwhelmed.\n\nConsider integrating unique features that set your project apart from others. For example, you might introduce a mechanic where players can\n\nSuccessful release of a gaming project requires careful consideration of market dynamics and audience engagement. Understanding potential players’ preferences is key. You must not only create an enjoyable experience but also ensure it reaches the right audience. A comprehensive marketing plan can significantly elevate your game's visibility and initial traction.\n\nEstablish an online presence early. Utilize social media platforms to share your development journey. Regular updates keep your audience engaged and invested. Consider creating a dedicated website or a blog for your project to deliver news and updates directly. Another effective strategy is to leverage game trailers, showcasing unique features and captivating visuals to pique interest.\n\nSearch Engine Optimization (SEO) plays a crucial role in improving visibility. Use relevant keywords associated with your game throughout your website and marketing materials. For instance, if your game features a mobile aspect, keywords like mobile game or HTML5 gaming can attract organic traffic. Additionally, creating well-structured content helps search engines index your game better and makes it easier for potential players to find.\n\nInfluencer marketing is another powerful tool. Partnering with popular gaming influencers can offer great exposure. When influencers share your game, their followers are likely to explore it. This organic reach can lead to a substantial increase in downloads and engagement, making it a cost-effective marketing strategy.\n\nPre-launch campaigns are effective for building anticipation. Consider running a beta testing phase, allowing a select group to provide feedback before the official release. This can generate valuable insights and foster a community around the game, ensuring that players feel they are part of the development process. Furthermore, gathering testimonials and reviews during this phase can create buzz.\n\nWhen it comes to distribution, select platforms wisely. Whether you opt for popular stores like Steam or niche platforms, ensure they align with your target audience. Additionally, consider utilizing platforms that support HTML5 games efficiently. Engaging phonegap developers for hire can also help you optimize your game for mobile distribution, thus expanding your reach.\n\nFinally, measure and analyze your marketing efforts. Utilize tools like Google Analytics to track user engagement and gather insights. Knowing what works allows you to refine strategies in real time, ensuring your game not only launches successfully but continues to grow post-launch as well.\n\nEstablishing a captivating digital identity is crucial for attracting and retaining players. Engaging with potential audiences significantly enhances visibility and creates a community around your project. A well-crafted online presence can transform casual visits into loyal followers. This involves consistent branding, effective communication, and strategic use of various platforms.\n\nStart by creating a website that clearly represents your vision. It should be visually appealing and easy to navigate. Incorporate elements such as a blog for updates, a forum for discussions, and a gallery for showcasing artwork or gameplay. Additionally, ensure that your site is optimized for search engines to increase discoverability.\n\nSocial media is another powerful tool for connecting with your audience. Platforms like Twitter, Facebook, and Instagram can help you share your development journey, engage with fans, and receive immediate feedback. Regular updates and interactive posts can significantly enhance user engagement.\n\nConsider utilizing newsletters to maintain direct communication with your community. Offering exclusive content, behind-the-scenes looks, or early access can incentivize sign-ups and nurture loyalty. In fact, studies show that email marketing can generate up to 44% of total return on investment when executed correctly.\n\nMoreover, collaborations with influencers or content creators can expose your project to broader audiences. Seek out those who resonate with your game's genre and values. Partnering with them for live streams or reviews can provide valuable credibility and buzz.\n\nIn conclusion, building an engaging online presence requires a multi-faceted approach that combines a well-designed website, active social media engagement, direct communication through newsletters, and strategic collaborations. By implementing these strategies, developers can significantly enhance their project's visibility, cultivate a dedicated player base, and ultimately contribute to a successful release.\n\nSuccessful promotion before unveiling a new interactive experience is essential. Engaging potential players early can create excitement. A well-executed marketing approach builds anticipation. Utilize various strategies to maximize your outreach. Understanding your target audience allows for tailored messaging that resonates.\n\nStart by creating a captivating website. This serves as the central hub for information. Include essential elements such as:\n\nConsider leveraging social media platforms. They provide vast audiences and varied tools for promotion. Regular updates can encourage engagement. Use polls and questions to spark discussions and gather insights. Share behind-the-scenes content to create a sense of inclusion.\n\nIn addition to social networks, build a strong community presence. Engage with gaming forums and relevant online communities. Platforms like Reddit or Discord can be impactful. Share progress updates, ask for feedback, and encourage discussions around your project. This grassroots approach fosters loyalty and interest.\n\nInfluencer marketing can also enhance visibility. Collaborating with content creators can yield substantial results. Seek influencers who align with your game’s genre. A well-placed mention can introduce your creation to new audiences. This peer recommendation often carries more weight than traditional advertising.\n\nDon't overlook the potential of press releases and articles. Crafting a compelling narrative about your project can attract media attention. Reach out to gaming journalism outlets and blogs for coverage. A well-timed article can significantly boost visibility, especially during critical phases.\n\nLastly, consider utilizing beta testing as a marketing tool. This not only helps identify issues but also creates buzz. Offer early access to a select group of players. Collect feedback to refine the experience while simultaneously generating word-of-mouth marketing.\n\nIn conclusion, a multifaceted marketing approach is imperative. Each technique can complement the others, layering awareness and excitement. Prioritize engagement, and craft distinct messaging to maximize impact. With the right strategies, you can effectively prepare for a successful introduction of your interactive project.\n\nGathering player input after the release is crucial. This stage can reveal insights that were previously overlooked. Players provide valuable perspectives on what works and what doesn’t. Their experiences can guide future updates and enhancements.\n\nFirst, organize the feedback. Use spreadsheets or project management tools to categorize responses. Identify common themes, complaints, and suggestions. Pay particular attention to the tone of the feedback, as it reflects player engagement levels.\n\nFor instance, a common concern might be the difficulty level. If many players find certain sections too challenging, consider tweaking those elements. On the other hand, positive feedback about a feature can indicate what to expand or promote.\n\nData analytics can also be a game-changer in this phase. Tracking in-game behaviors through metrics helps developers understand player interactions. By utilizing tools like Google Analytics or Mixpanel, you can evaluate metrics such as retention rates, in-game purchases, and session lengths. This quantitative data complements qualitative feedback, creating a comprehensive view of player experiences.\n\nConsider conducting surveys to gather structured feedback. Ask specific questions about game mechanics, graphics, and overall enjoyment. This method allows you to collect targeted information that can directly inform your updates.\n\nIncorporating feedback doesn’t mean making all changes players suggest. Some requests may contradict your vision or the game’s balance. Evaluate suggestions carefully, weighing their merits against your overall strategy.\n\nLastly, communicate with your player base. Acknowledge their feedback publicly. This engagement builds community and shows that you value their opinions. Keeping players informed about how their suggestions influence future updates fosters loyalty and encourages ongoing participation.\n\nIn conclusion, leveraging player feedback is essential for continuous improvement. Analyzing and responding to this input can significantly enhance player satisfaction and retention. For developers looking to expand their capabilities, consider outsourcing tasks to hire next js developers for specialized skills. This can free up your time to focus on incorporating user feedback more effectively.\n\nHarnessing information is essential for refining any interactive experience. The insights garnered from user interactions can drive effective changes. Real-time analysis plays a pivotal role in understanding player behavior. Every click, every action, every choice is a piece of the puzzle. Ignoring these data points means missing out on significant opportunities for enhancement.\n\nMonitoring player engagement can unveil patterns that may not be immediately evident. For instance, tracking which levels are frequently abandoned can indicate difficulty spikes. This data can then inform necessary adjustments. Analyzing retention rates is another crucial element. If players frequently drop off after a specific point, it warrants a closer look.\n\nUnderstanding player demographics is equally vital. This information helps tailor experiences. For example, if data shows younger players prefer faster-paced games, adjustments to speed and difficulty could be beneficial. Collecting this data can often be achieved through built-in analytics tools.\n\nTo illustrate, consider the following table that summarizes key metrics and their implications:\n\nUtilizing A/B testing is another effective strategy. This method involves creating two versions of a game element and measuring player response. Such empirical investigation enables data-driven decisions that can significantly enhance user satisfaction. As you iterate, it’s crucial to document changes and their impacts. This allows for a comprehensive review of what works and what doesn’t.\n\nUltimately, transforming raw data into actionable insights is a continuous journey. Each piece of information can guide crucial improvements, ensuring the evolving product resonates with the audience. Regularly revisiting analytics not only fosters a better gaming experience but also builds a loyal community around the project. This commitment to improvement can set your project apart in a competitive market."
    },
    {
        "link": "https://medium.com/@keployio/the-importance-of-dom-manipulation-strategies-and-best-practices-for-businesses-ad0bf073254d",
        "document": "DOM (Document Object Model) manipulation is the foundation of interactive web development, allowing developers to dynamically update, modify, or structure HTML documents. Whether you’re building a dynamic single-page application (SPA) or creating a user-friendly e-commerce platform, efficient DOM manipulation is crucial for delivering responsive, real-time experiences.\n\nThis guide delves into the importance of DOM manipulation, key strategies businesses should adopt, and best practices that maximize performance, maintainability, and user experience. Alongside actionable tips and case studies, we’ll also explore data-driven insights to demonstrate the effectiveness of these strategies.\n\nDOM manipulation involves programmatically changing the structure, content, or style of web pages. It’s central to creating interactive and engaging user experiences in modern web development. From simple tasks like dynamically updating form input values to complex operations such as rendering large datasets in real-time, DOM manipulation enables developers to:\n• Improve Performance: Efficient manipulation reduces the need for unnecessary data transfers and re-renders, resulting in better application performance.\n• Enable Complex Functionality: DOM manipulation is essential for dynamic applications such as e-commerce sites, SPAs, and dashboards that need to respond instantly to user input.\n\nThe DOM is structured as a tree of nodes, where every HTML element is represented as an object. Understanding this structure is critical for optimizing DOM manipulation. Each change you make to the DOM affects the tree and can lead to performance bottlenecks if not handled properly.\n• Limit DOM Access: Frequent access to the DOM can be expensive. Retrieve DOM elements once and store them in variables for reuse.\n• Batch DOM Updates: Instead of making multiple small updates, group changes together and apply them all at once to minimize reflows and repaints.\n• Minimize Layout Thrashing: When you modify an element’s style or geometry, it forces the browser to recalculate layout and re-render the page. Reducing unnecessary style recalculations can prevent “layout thrashing.”\n\nUse documentFragment for batch updates. Instead of inserting individual elements into the DOM one by one, use document.createDocumentFragment() to collect multiple elements and append them all at once, reducing reflows and repaints.\n\nOne of the most effective strategies for DOM manipulation is using a Virtual DOM — a lightweight representation of the actual DOM that libraries like React or Vue use to optimize rendering. By comparing the new state of the virtual DOM to the previous one, these libraries only update the parts of the real DOM that have changed, improving performance.\n• Choose the Right Framework: For large-scale applications, adopting frameworks like React, Vue, or Svelte can offload the complexity of DOM updates. The virtual DOM diffing algorithm ensures that only the necessary parts of the page are re-rendered, preventing excessive updates.\n• Avoid Unnecessary Component Re-renders: In frameworks like React, prevent unnecessary re-renders by using React.memo or useMemo to cache the results of expensive operations.\n\nA retail company optimized its e-commerce platform by switching from vanilla JavaScript DOM manipulation to React’s virtual DOM. They saw a 40% reduction in page load times and a 25% increase in conversions due to improved responsiveness during peak shopping times.\n\nIn a dynamic environment, where elements are created or removed frequently, attaching event listeners to individual elements can become inefficient and cluttered. Instead, event delegation allows you to handle events at a higher level in the DOM hierarchy by using event bubbling.\n• Delegate Events to Parent Elements: Attach a single event listener to a parent container to manage events for multiple child elements. This reduces the number of listeners and improves performance.\n• Limit Event Listener Attachments: Avoid attaching multiple listeners to individual elements, especially for large datasets. Attach listeners at the parent level and use event.target to determine the clicked element.\n\nReflows occur when the browser recalculates the layout of a webpage due to changes in the DOM, such as adding new elements or altering the size or position of existing ones. Frequent reflows are costly in terms of performance.\n• Use CSS Classes: Instead of modifying styles inline for each element, toggle CSS classes to apply multiple style changes at once.\n• Minimize Synchronous Layout Queries: Layout queries like offsetWidth, offsetHeight, or getComputedStyle can trigger reflows. Cache these values if needed repeatedly.\n\nIf you need to update styles, batch them together in a single operation rather than applying individual changes to each element.\n\nDOM manipulation in JavaScript can block the main thread, causing performance issues if operations are too time-consuming. Asynchronous techniques like requestAnimationFrame and web workers can help mitigate this problem.\n• Use requestAnimationFrame for Animations: When performing animations, use requestAnimationFrame to synchronize updates with the browser’s refresh rate, resulting in smoother visual updates.\n• Offload Heavy Tasks to Web Workers: Use web workers to offload intensive tasks (like parsing large JSON objects) from the main thread, freeing up resources for DOM rendering.\n\nAn online learning platform reduced input lag in their dashboard by using requestAnimationFrame for DOM updates and web workers for parsing large student datasets. This resulted in a 35% improvement in performance during peak user hours.\n\nBest Practices for DOM Manipulation in Business Applications\n\nWith mobile traffic surpassing desktop, it’s crucial to optimize DOM manipulation for mobile devices. Mobile browsers have limited resources, so excessive DOM manipulation can severely impact performance.\n• Minimize DOM Size: Avoid generating large, deeply nested DOM structures. Mobile devices struggle with rendering and reflowing large DOM trees, so keep the DOM lean.\n\nFor performance-sensitive applications like search boxes or form inputs, frequent DOM updates on every keystroke can cause lag.\n• Debounce Event Handlers: Use debouncing to limit how frequently event handlers are called, particularly for input events like key presses.\n\nLoading all elements at once can impact performance, especially on long pages or applications with dynamic content. Lazy loading allows you to defer the creation of DOM elements until they are needed, reducing initial load time.\n• Implement Lazy Loading: Use techniques such as lazy loading for images, videos, and long lists. For dynamic content, only load elements when they enter the viewport using Intersection Observer.\n• Performance Impact: According to Google’s web performance research, sites that reduce DOM manipulation and optimize reflows see a 15–20% reduction in page load times and a corresponding 10–30% improvement in user engagement.\n• Conversion Rates: A case study by Walmart demonstrated that reducing page load time by one second led to a 2% increase in conversions. Optimized DOM manipulation contributed to this improvement by streamlining interactive elements.\n• User Satisfaction: Research from Akamai found that 53% of mobile users abandon sites that take more than three seconds to load. Efficient DOM manipulation plays a critical role in keeping load times fast, even as web apps become more complex.\n\nDOM manipulation is a cornerstone of modern web development, and mastering it is essential for businesses aiming to deliver fast, dynamic, and engaging user experiences. By understanding the structure of the DOM, leveraging virtual DOM techniques, and optimizing event handling, businesses can boost performance and user satisfaction.\n\nFrom reducing layout thrashing to implementing efficient event delegation, the strategies outlined in this guide help businesses create scalable and maintainable applications. When applied thoughtfully, these best practices not only improve performance but also enhance collaboration among development teams, leading to better long-term outcomes."
    },
    {
        "link": "https://stackoverflow.com/questions/37039667/executing-multiple-dom-updates-with-javascript-efficiently",
        "document": "You aren't real specific about exactly what you're doing so about the best we can do here is to give you general advice about a bunch of relevant areas.\n\nYou don't quite fill in all the details of what you're trying to do, but here are a bunch of things to take into consideration when optimizing how your code works:\n• None Reflows are already queued. The browser already attempts to minimize reflows so if you do four dom modifications in one sequential piece of Javascript, the browser will wait for that piece of Javascript to finish running and then do one reflow and one repaint.\n• None Requesting certain properties can trigger an immediate reflow. There are exceptions to the above rule that you want to make sure you avoid. For example if you request certain DOM properties that require proper layout for the property value to be accurately reported and there is a pending layout from a prior modification, then the browser may relayout the document synchronously before returning the property you requested. These type of properties usually involve things like screen position and other properties that would obviously be affected by the layout of the document. There are many articles on this topic if you want to find further details. In many cases your code won't be using these properties anyway, but if so, the usual workaround is to request all the needed properties first before making any changes to the DOM.\n• None Batch up all your DOM changes at once. The worst thing to do is to make a DOM change, wait a few ms with a timer, make another DOM change, wait a few ms with a timer and so on because you will have DOM change, reflow, repaint, DOM change, reflow, repaint, etc... Instead, make sure you're doing all pending DOM changes at once in one synchronous piece of Javascript. This will then allow the browser to queue the reflow and repaint and do it only once after you've made all your DOM changes. If you want to get even smarter about the batching, you will collapse modifications to the same element so that it is only processed once with the final value. So, if elementA was first given a new value of 3 and then later in the same batch was given a value of 4, when processing the batch of data, you want to skip the 3 and just process the 4.\n• None DOM modifications can sometimes be optimized. You don't give us any specifics on how you are modifying the DOM, but if you are modifying complex objects (like adding many table rows or changing lots of table cells), then it is sometimes better to create a set of DOM elements that are not currently inserted in the DOM, make all your modifications to them and then with one operation, insert them into the DOM. This is because modifying DOM elements that are currently inserted in the DOM forces the browser to figure out which other DOM elements are affected by this change so it can queue the appropriate reflows or repaints. But modifying off-screen DOM elements does not have to do any of that work until the one last step where one larger object is inserted into the DOM. There is no useful generic rules here because how you take advantage of this optimization depends entirely upon what DOM modifications you are doing. We could help you with this, but only when we could see both the HTML you have and exactly what changes you're making to it.\n\nNow, as for the timing of things, you mentioned up to 250 times per second. That's kind of fast (4ms per operation) for a user viewable thing. If you do that, your browser is basically going to be constantly reflowing and repainting with only occasional pauses to process other user events. Since no user can actually see something happen at 4ms, 8ms and 12ms from now, there's really no need to update status on screen that often.\n\nSo, if you really have changes coming in that fast or often, you may want to batch them by accumulating them into a local data structure and then just updating the screen every 100-500ms or so. You'd have to experiment with what the long interval you could use and not really notice any delay.\n\nThere are several implementation strategies for batching the updates. The simplest I can think of if your modifications are always streaming in constantly is to just put the modifications into a local array as they come in and then just have an interval timer set for your update interval that checks the array and if there's anything in it, it process all the items in the array into a DOM update.\n\nGetting Changes From Server\n\nYou don't mention how the browser Javascript is getting the new data. There are generally two options, repeated Ajax requests or create a webSocket and the server can directly send you data at any time.\n\nIf your updates are regularly and shortly spaced, the webSocket connection is clearly the most efficient. It's one constant connection and the server can just send each client new data whenever the server has new data to send.\n\nIf you're going to be polling with Ajax, then I'd strongly suggest you lengthen out the polling interval. A very short polling interval will both really load your server and eat the battery on the client.\n\nIf this app is intended to run for long periods of time on a battery powered device, then getting a steady stream of data real-time (e.g. every few ms like you mentioned) from any server is going to eat battery because the radio (WiFi or Cellular) will be active nearly all the time and the CPU is going to be running a lot too."
    },
    {
        "link": "https://stackoverflow.com/questions/40772831/is-there-a-javascript-event-for-constantly-updating-the-dom-based-on-user-input",
        "document": "I'm fairly new to JS, and I plan on learning some PHP soon.\n\nSo I have a set of three select boxes: the chapter of a book, the start page, and the end page. Whenever the user selects a chapter, I want the other two select boxes to update appropriately (from page 1 to the length of that specific chapter). I was able to do this with the following (I will eventually replace the if statements with a case block):\n\nBut my problem is that this code will only execute if the user selects Chapter 1, and then refreshes the page. I want the user to be able to see changes immediately upon his/her selection. Is there a Javascript event that will enable me to do this? I tried enclosing the above codeblock in a document.ready event, but with no success.\n\nDo you have any tips? Thanks in advance."
    },
    {
        "link": "https://reddit.com/r/incremental_games/comments/mwx2xd/performance_tips_for_javascript_game_developers",
        "document": "This post originally started out as a comment to this thread, but the content ended up being too large to post as a comment, so I decided to post it as it's own thread.\n\nThis post details all of the performance tips I've been exposed to over my years as a software developer working primarily in JavaScript and on the web.\n\nI'll just get straight into it...\n\nThis is a very low-hanging fruit with a low impact. It doesn't do much when you have just a few elements, but it makes a noticeable difference when there are 1000s of elements on the page.\n\nDo this instead:\n\nWhen you use code like the following, you are checking the entire document for a particular element.\n\nIf you are looking for an element that you know is inside another element, and you already have that element's reference cached somewhere, you can limit the amount of elements the browser needs to compare to your query to just those elements inside the parent, like so:\n\nIf you do not have a parent element reference, but you do know that the element you're looking for is at the same level of heirarchy as another element which you do have a reference for, then you can jump up a level to the common parent like so:\n\nAnimation frames are generally far more performant than timers that simulate repaints.\n\nDon't do this (this supposedly runs 60 frames per second):\n\nDo this instead:\n\nThis has the added benefit of running at a guaranteed 60+ fps. Higher monitor refreshrates actually run this at a higher frame rate, for example my ASUS VG248QE will run this game loop at 144 fps. Just bare in mind that in order to save system resources, browsers will \"pause\" the execution of an animation frame if focus is lost. This can happen when the user tabs out, minimizes the window or idles for a few minutes. Be sure to accommodate this behavior in your calculations, for example you might want to check how much time has passed since the last \"tick\" on each new \"tick\", and calculate your player's profits based on that.\n\nDo not rely on time calculations derived from the `Date` object\n\nThere is a far more precise time API accurate down to microseconds - look at Performance.now().\n\nDo this instead:\n\nOr better yet, use the timestamp passed to the callback - it is the same high-precision time object type as `()`, but the origin of the time starts when rAF first begins executing callbacks:\n\nOf course, if you actually need to use dates - for example calculating per day numbers or just rendering a calendar or whatever, then by all means use the Date object.\n\nYou won't know when performance tanks if you don't know what numbers to reasonably expect. Most browser developer consoles have a function to show an FPS counter on the page. In Chrome, it's in developer tools -> command palette (ctrl+p on win, cmd+p on mac) -> show frames. This will show you frames per second rendering for the entire page, but if you want to measure the FPS of a single game loop, say, for a single canvas element, then you can derive that from the parameter:\n\nLet's say you encounter a performance issue. How do you begin to analyze it, find out where it's coming from, all that nonsense? It's not as simple as looking at your game and thinking, \"Well, it happened when I jumped, so obviously it's my jump code.\"\n\nWhat you can do instead, is record a performance profile. You can then generate a heapmap from that profile, and jump into the callstack to see exactly how many milliseconds were spent running particular functions and methods.\n\nHow is this done?\n\nIt's quite an involved process, with far too much information for me to condense into a section of a Reddit comment/post, so unfortunately you will have to click on a link for this one. Here you go: https://blog.appsignal.com/2020/02/20/effective-profiling-in-google-chrome.html\n\nExecute DOM Reads and Writes in different phases\n\nDid you know that most browsers optimise for the case when reads and writes exist in separate animation frames/phases? Let me demonstrate.\n\nTake this code, for example.\n\nThis code will cause a few repaints in the browser, because all of the reads and writes happen in an interleaved manner. If we \"schedule\" our reads and writes into separate animation frames, we can basically achieve the same amount of rendering with much fewer repaints - which is done (in concept) like so:\n\nOf course, this would become a pain to maintain, so we could write a scheduler that basically turns every DOM access task into an asynchronous one, by queing read and write tasks separately and flushing the queues periodically - this way the reads and writes are executed in ordered batches:\n\nJust note that the above calls to and are asynchronous - regular DOM reads and writes are synchronous, so these will not behave as you might expect. If you want to make it a little easier, you can extend it into a promisified version:\n\nFor more information on how and why this works, and a more robust and complete implementation, check out the FastDom library: https://github.com/wilsonpage/fastdom - note that you might not need this particular optimization if you're using a rendering framework, which should already be doing these sorts of optimisations for you.\n\nTry to look for areas in your code where you make use of asynchronous methods, especially if those areas deal with fetching remote resources in a serial manner.\n\nFor example, here is some code to load different sound effects into an AudioContext:\n\nThere is a problem with this code. It will load each sound asset one by one, one after the other. None of the sounds depend on one another in order to load, and we can take advantage of this to gain a substantial performance boost.\n\nInstead of loading one sound at a time, we can load them simultaneously using .\n\nDo not create too many event listeners\n\nThis is another one of those \"don't bother if you're using a framework\" tips, as a good framework should already be doing this for you. However, if you're not using a framework, then adding a bunch of event listeners to your game can cause quite a lot of cascading performance bottlenecks.\n\nTake this code for example, which adds three event listeners - one for a click on three different buttons.\n\nAt first glance, this code looks fine. Nothing's really wrong with it, aside from the fact that there are three separate functions taking up memory, which isn't a big deal.\n\nWhat if we introduce more buttons, though? Well, we will want to make maintenance easier on us, so...\n\n...and this code works, nicely. Except now 3 months have passed and there are now 400 buttons in our game, each with their own event listener, and this starts becoming an issue. First off, now we have to move the function out of the loop, so we aren't creating new instances of it on each iteration:\n\nThis is an improvement, but we still have 400 event listeners. We could do things like check if the buttons are actually actively displayed in our game, and conditionally apply the event listeners, that's one possible optimisation, but I won't get into that. It's just more branching complexity.\n\nA couple of weeks pass, and we add a feature that lets a user add their own buttons. And we somehow forget to update the button code and for some reason any button the user adds doesn't register any clicks - this is because we're only iterating over the buttons that already existed when we registered the event listeners. So, we have to make sure that new buttons get their event listeners somehow... I won't get into this either.\n\nAs you can see, this is spiralling out of control. How do we fix it? The answer is to just register one event listener for a click on the entire document, and check the event target to see if it's something we should be interested in.\n\nHow many event listeners is this? Just one. Not two, not 400, but one.\n\nWill this event listener respond to elements created as a result of user input? Yes, yes it will.\n\nIt even lets us listen for clicks on things other than buttons!\n\nTake advantage of CSS animations and their ability to utilize hardware acceleration\n\nAnimating with JS is nice, you can get a lot of precise control that you can't get with CSS. But for simple animations like fades, color changes, etc. it's better to use CSS.\n\nBecause CSS animations can take advantage of GPU acceleration. When you use properties like , , , , etc in your animations, CSS will shift the painting of those animations from the CPU over to the GPU. This is something that is not really possible in JS (unless you use something like GPU.js, but a whole dependency just for some silly animations? kek)\n\nPlus, not only do you get GPU acceleration, but you can simplify your code as well. Instead of slowly incrementing/decrementing an opacity value over time via JS, you can just toggle a class on activation/deactivation. Simple. Easy. You can even bind it to your state.\n\nAlthough a bit outdated, this article gives a good outline of this concept: https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\n\nMost games are full of static resources like images, sprite sheets, audio files, fonts, etc. These are all assets that need to be sent to the browser over the network.\n\nIf the player lacks an internet connection, some of these assets may be broken.\n\nOne can cache these assets in the browser so that they load even while the user is offline, and this has the added benefit of decreasing loading times for these assets.\n\nThis used to be done via the HTML5 ApplicationCache, which has been deprecated in favor of the Cache API, which requires Service Workers. Thankfully, the Cache API is currently supported in all modern browsers.\n\nHere is a tutorial on how to get started with the Cache API: https://web.dev/cache-api-quick-guide/\n\nUtilize Web Workers to offload heavy computations to another thread\n\nWeb Workers can do quite a lot for gains in performance. Think of web workers as threads, but in the browser.\n\nAny JS script can spawn a new web worker that it has exclusive access to, or a shared worker that other scripts can share access to.\n\nWeb workers are an isolated execution context that executes code in a limited environment - they have access to a number of APIs, but do not have access to the DOM.\n\nThey are also very easy to use. You simply pass messages around and react to messages to communicate between your workers and your main script, like so:\n\nNote that in the worker, and aren't attached to anything, since the worker itself is basically the global scope.\n\nOf course, using a whole thread for something as simple as an incrementing counter is a little bit overkill, but it makes a big difference when you have expensive math calculations to perform and you can perform them on a separate thread.\n\nOffloading computationally expensive code like this to a separate thread allows you to keep your main thread for just rendering purposes, keeping your user interface snappy and performant.\n\nSee more information here: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n\nDon't act on entities the player cannot see\n\nIf you have objects that are out-of-view, (whether a spaceship in a game off to the side of the screen or a resource counter hidden behind a tab in a component), do not bother updating their views. They might exist in the document at the time that the player is playing a game, but just because they exist in the document, that doesn't mean the player can actually see them.\n\nPerforming calculations to update all of these hidden things could cost quite a bit of resources and cause a number of unnecessary browser repaints.\n\nInstead, simply ignore them. Be sure to keep your game's state updated, and only update these elements or objects with their new state when they come back into view.\n\nYou can use the IntersectionObserver API to detect if document elements are currently in view. For canvas objects, just check if their x and y coordinates exceed the canvas width / height or are less than 0.\n\nUsing the IntersectionObserver API is nice, but if you can get away with not using it, even better. It is less necessary if you derive your view from your state and only render elements/objects if the state requires that they be rendered.\n\nIf your game has complex objects that have their own \"intelligence\" and produce events on their own, you still don't need to update their views if they exist off screen. Simply attach these objects to a State Machine and update the state machine instead. If their state requires that they be rendered (for example a sheep has walked within view of the player), then by all means, render it.\n\nReduce the number of logical branching pathes via polymorphism\n\nIn programming, we make use of all sorts of syntax constructs, like conditional statements, ternary operators, functions, loops, binary / logical operators, etc.\n\nSome of these constructs result in what we call \"logical branches\". A logical branch is essentially a point during a program's execution where the program must inspect some state and then choose between two or more \"paths\" of execution. These are found typically in conditional statements:\n\nWhen the interpreter (or compiler) comes to these sections of code, it performs a little calculation to determine where in the code to go next. Though almost entirely negligible, this little calculation does take a little bit of time, and in larger more complex programs, with many potential users, this time can add up.\n\nThere is a concept known as a \"polymorphism\" in functional programming, where we can take advantage of the type to remove some of this branching complexity.\n\nTake a Result union type, for example. It can be one of two possible unions:\n\nWe have both a and a type, that both belong to the same union - . If we get a and want to act upon it (for example, transform it's value), we first have to inspect which of the two types we're working with. Let's do that with a simple utility:\n\nThis utility could be used in many places in our projects, and each time we use it, we are creating a branching path.\n\nThere's an optimization we can make here, to remove this branching, via a polymorphism of the utility on each type. All we have to do is adjust the implementations of our types to implement this interface:\n\nNow, we just adjust our utility to call this interface:\n\nThus, we can use our utility, and it won't ever create any logical branches. It just defers to the interface of the type.\n\nOf course, this can be achieved without using union types. A realistic example would be an event handler that responds to different actions, or anywhere a switch case might be used. let's say we have an event handler that receives a message object, and we do different things according to the message's property (much like we would do in Redux or in our button event handler we saw earlier).\n\nNormally we would inspect this property via a switch/case statement, which could have many potential logical branches (based on how many different types we have), but instead of doing that, we could simply use a dictionary:\n\nAs you can see, there are no logical branches in this code, yet we are still able to perform different functions based on different inputs. This scales to however many different types our message handler deals with.\n\nOf course, care needs to be taken here. There are certainly cases where deferring logic to a function via polymorphism could in fact be more computationally expensive than just checking a condition, depending on what the function is doing and how computationally expensive it is to call. Be sure to routinely profile your code to be sure you're seeing improvements. Don't just optimise for the sake of it.\n\nAs your idea develops more and fleshes itself out, you might add a lot of code for lots of different parts of your game. You might start seeing areas where code performs calculations that are not strictly necessary.\n\nSince we're in a game sub, I will give a perfect game-related example: collision detection.\n\nLet's assume we have a bunch of objects on our game's canvas, and we want to check if two objects are colliding:\n\nThis code is straightforward, and it works. We loop through each game object, reset it's collision status to false, then loop through each game object again to check if our current object from the outer loop is colliding with an object in the inner loop. We be sure to ignore the case where both the inner and outer objects reference the same object, because we know that an object will always be colliding with itself.\n\nHowever, there is a major issue here. If we've checked if an object is colliding, we don't need to check it again, because we know it's colliding already, so we can actually start our collision check with only the remaining objects:\n\nThis is already much better, we're not performing any unnecessary calculations anymore, but there's still one more optimisation we can make. We know that the index references the current object, which means that the first object that is inspected in our inner loop corresponds to the object in our outer loop - so we can simply shift the index by 1 to ignore it, and remove our conditional branch that deals with ignoring the case where both objects reference the same thing:\n\nNow, our code for doing collision detection doesn't perform any unnecessary checks. Since collision detection is quite a computationally heavy task, especially if there are hundreds our thousands of objects in our game, this little optimisation could have saved us potentially a lot of execution time.\n\nThere's actually more optimisations we can make here - we don't exactly need to check every object in our game for collisions, like this code is doing.\n\nFor a simple 2D game, we could divide the \"game world\" into a grid of tiles, and only check the objects that exist in the same tile as the object that we're currently inspecting.\n\nFor a 3D game, we could use an algorithm that puts the entire game world into a giant invisible cube, then divides that cube into 8 smaller invisible cubes, and each of those cubes into 8 smaller invisible cubes, etc. Then we can take an object, find out which \"cube\" it is in by checking it's coordinates against the coordinates of the lowest level of cubes - if it exists inside two cubes simultaneously, then we move \"up\" a level to get a bigger cube - and only check for collisions on objects that exist inside the same cube.\n\nWe could also adjust our collision detection function to check a boxed area around the object we're checking (known as a \"hitbox\"), so we don't match on each and every pixel.\n\nThis is an involved example, but this sort of problem arises almost anywhere in a program, not just in things like collision detection, so you should definitely keep an eye out for optimisations you can make that reduce unnecessary computations, as these optimisations will generally net you the most performance gains.\n\nHopefully all of these tips are useful to some of you, as this post took me a lot longer to write than I thought it would 😅."
    },
    {
        "link": "https://linkedin.com/advice/0/how-do-you-handle-user-input-dynamically-update-iudne",
        "document": ""
    }
]