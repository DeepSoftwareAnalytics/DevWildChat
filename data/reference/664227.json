[
    {
        "link": "https://reddit.com/r/PowerShell/comments/wv1c5a/documentation_for_powershell_commands_for_excel",
        "document": "I am trying to automate some processes at work using PowerShell to manipulate an Excel workbook. I was wondering where I can find proper and official documentation for the use of PowerShell commands for Excel."
    },
    {
        "link": "https://stackoverflow.com/questions/67327970/where-is-the-powershell-documentation-for-the-excel-application",
        "document": "I touch PowerShell once in a leap year, and its documentation is excellent to brush up, but its a different situation entirely when it comes to modules. (Sorry, not sure what the terminology is.) There a huge amount of posts and Stackoverflow threads for specific \"achieve this with PowerShell in an Excel file\" but the answer don't really expand on the details; a lot can be deduced, but some date of the posts range from 2009 to 2019 so not sure what has changed (other than using trial and error, of course).\n\nThe closest I could find to an API documentation is the Excel VBA reference. It looks awfully close to the methods I see being mentioned all over the place, so is that it?"
    },
    {
        "link": "https://devblogs.microsoft.com/scripting/introducing-the-powershell-excel-module-2",
        "document": "The PowerShell Excel Module is a brand new, exciting, and better way to interact with Microsoft Excel from Windows PowerShell. Plus for bonus points, you don’t need Excel installed on the target machine to create the spreadsheet. Many users of this module generate Excel spreadsheets on servers, and then others in the company pick up the reports from a central server. Or for the last step in their script, they can mail the .xlsx file.\n\nUntil now, there have been a few ways to get data into Excel. One way is to create a comma-separated value file (.csv) by using Export-Csv, and then open it in Excel, for example:\n\nAnother way to get data into Excel is to remotely control Excel. Use the Excel COM interface to spin it up, create a workbook or a worksheet, and then loop through your data to push it into the appropriate cells. You need to create headers and add the data to the correct row and column.\n\nHere’s a snippet that creates Excel, makes it visible, and then adds a workbook:\n\nAn alternative is to use .NET and Open Database Connectivity (ODBC). It takes some set up, and you need to write the looping and poking in the same way as the COM interface example. This approach is like working with SQL Server data.\n\nWhat if you could just do this?\n\nThis example creates a ps.xlsx file, a workbook, a worksheet, a header row, and organizes all the data in rows and columns. The –Show parameter launches Excel and opens the ps.xlsx file.\n\nThis is great (and it works with any data in PowerShell). The flat data is important, and so are the visuals.\n\nWhat if you could produce the following visual image? The PowerShell Excel module lets you create Excel pivot tables and charts from the transformed data. From the data generated above (and stored in a separate spreadsheet in the same workbook), you can easily create a pivot table and a chart.\n\nThe IncludePivotTable and IncludePivotChart cmdlets generate the pivot table and chart. ChartType lets you pick what type of chart you want (there are many to choose from). The PivotRows and PivotData parameters describe how to tabulate the data.\n\nIf you run Get-Process, you’ll see each process running on your system. The pivot table in Excel groups the information by using PivotRows and calculates measurements with PivotData. Here you tell it to sum the number of handles. In the previous image, the number of handles are totaled from Get-Process and grouped by company. Now you can see that the processes running from Microsoft Corporation have almost 50 K handles.\n\nI wrote the Excel module to plug in to the PowerShell ecosystem so you can easily export any data to Excel just as you would a .csv file. You can pipe the results of an SQL Server query or a REST API—the list goes on and on.\n\nThere is a lot more to this module to check out. Try the Import-Excel function, which lets you read an Excel spreadsheet and convert it to PowerShell objects. It lends itself to taking existing spreadsheets, applying a calculation (or adding more data from a look up), and quickly creating a new spreadsheet. Here is an example:\n\nWhere to get it?\n\nThere are a couple of ways that you can download and install this module.\n\nPowerShell Gallery If you are running Windows PowerShell 5.0, you can use the new Install-Module ImportExcel command. It’ll pull down the module from the gallery.\n\nGitHub You can also get it from GitHub: dfinke/ImportExcel.\n\nYou can Star the project if you like it. You can also open issues if you have questions or find issues. Plus, you can install the module from GitHub. You can also clone or fork the project. This lets you make modifications that you want. If you want to share them, you can create a Pull Request to add it to the core project.\n\nThis PowerShell module makes you more productive. Plus it highlights how to interact with .NET DLLs and build complex functions. The project has grown in several ways, based on the community contributing updates to the scripts and making great suggestions and feature requests.\n\nJoin in! Hop over to GitHub and post what you’d like to see and how you’re working with it.\n\nThanks, Doug. This is such a useful module.\n\nI invite you to follow me on Twitter and Facebook. If you have any questions, send email to me at scripter@microsoft.com, or post your questions on the Official Scripting Guys Forum. See you tomorrow. Until then, peace."
    },
    {
        "link": "https://stackoverflow.com/questions/69376884/excel-data-manipulation-using-powershell",
        "document": "I have a excel sheet in which column E has all decimal values like 0.5564, 0.87632 and so on.\n\nI want to create a power shell script that selects all these values from E2 till end of the column whatever that row number is dynamically and then multiplies them by 100 and saves the file, so that there is a percentage value in column E instead of a decimal value.\n\nThis is my code but this does not work. $worksheet.Range(\"E2\").EntireColumn is not working I believe. Can figure it out also."
    },
    {
        "link": "https://getfishtank.com/insights/useful-powershell-commands-for-excel",
        "document": "In this blog, I want to discuss a few commands that can be used when we have to do an update on Excel cells using PowerShell. Recently I was working on a script for updating an exported Excel document, and finding commands for various functions in one place was difficult. Here are a few commands that are helpful for updating an Excel document using the power of PowerShell:\n\nGet the Worksheet and Rename It\n\nGet the Last Row and Last Column Used\n\nThis could be used in iterating through the used range in a worksheet.\n\nAdd or Modify Value in a Cell\n\nThese commands can be used together to mass update the cells based on conditions and iterations. You could add many more to the above list, but the ones mentioned are the ones I use and find most helpful for mass updations."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/17wz2xh/powershell_generate_random_password",
        "document": "Rarely do I create something useful. I'm sure people have different variations out there but for a quick copy/paste here's my contribution to society for the year.\n\n#The below function generates a random 20 character string using upper/lower/numbers/special characters"
    },
    {
        "link": "https://stackoverflow.com/questions/37256154/powershell-password-generator-how-to-always-include-number-in-string",
        "document": "I have the following PowerShell script that creates a random string of 15 digits, for use as an Active Directory password. The trouble is, this works great most of the time, but on some occasions it doesn't use a number or symbol. I just get 15 letters. This is then not usable as an Active Directory password, as it must have at least one number or symbol in it. How would I amend the script to always have at least one random number or symbol in it?"
    },
    {
        "link": "https://sharepointdiary.com/2020/04/powershell-generate-random-password.html",
        "document": "Want to create strong and secure passwords for multiple accounts or web applications quickly? PowerShell is a terminal language that lets you generate random passwords in seconds, saving time and keeping your data safe. In this post, we’ll show you how to use PowerShell commands to create random passwords with different length and complexity requirements. Let’s get started!\n\nUsing a random password generator in PowerShell has many advantages. First and foremost, it ensures the passwords generated are truly random, so they are more secure than passwords created from patterns or personal info.\n\nIt also allows for automation, so it’s perfect for scenarios where you need to generate multiple passwords quickly, like when creating user accounts in Active Directory or setting up service accounts. You can create complex and unique passwords without external tools or manual intervention.\n\nHow to generate a random string in PowerShell?\n\nTo generate a random string in PowerShell, you can use the get-random cmdlet:\n\nThis will generate a random string of length 10, containing lowercase letters (a-z). E.g.\n\nYou can adjust the length of the string by changing the value of the parameter. For example, to generate random characters of length 20, you would use .\n\nSpecify Characters to Include in Password Generation\n\nYou can also modify the characters included in the string by adjusting the range of ASCII values passed to Get-Random cmdlet. For example, to generate a string containing uppercase letters, lowercase letters, and digits, you can use the following command:\n\nThis will generate a random password length of 10 characters, containing upper case letters and digits. To create a random string from given characters, use:\n\nYou can use this technique to generate random passwords of any length, containing any combination of characters. Let’s take a look at how to generate a random password in PowerShell by wrapping the script into a reusable function.\n\nThis method allows you to be more flexible in defining the character set, such as an array of lowercase characters, to generate random passwords. You can reuse this function to create initial password, and export them to a CSV file for a given username.\n\nIf you want more control over password generation, you can create your own custom random password generator in PowerShell. This way, you can define the character sets and complexity rules yourself. Here’s an example:\n\nIn this example, the function generates a random password by selecting characters from the specified character set variable using a loop.\n\nIn this case, the character set includes lowercase letters, and uppercase characters and digits. Based on your requirements, you can modify the character set to include special characters or remove certain character types.\n\nA robust password should include uppercase, lower case, special characters, and numbers. It’s not always easy to generate these passwords on the spot, so you may want to consider generating a random password.\n\nHere’s how to create a random password in PowerShell:\n\nThis function will generate a completely randomized secure password that meets all modern security standards and requirements. (A new password with a combination of uppercase and lowercase letters, numbers, and special characters is ideal!).\n\nOne of the simplest and most effective ways to generate random passwords in PowerShell is by utilizing the built-in class. This class provides a method called that allows you to generate random passwords with specified lengths and complexity.\n\nHere is a simple way to create a secure random password using the .NET framework method: Please note, the .net core doesn’t support System.Web class. So you have to load it exclusively in PowerShell 5x. (Otherwise, you’ll see an error: “Unable to find type [System.Web.Security.Membership].”)\n\nThis command generates a random 10-character password containing two non-alphanumeric characters (e.g., %&). If you want more or fewer characters for your password, simply change the number 10 in the command to whatever length you desire (e.g., 10).\n\nThe function takes two parameters: and . The parameter determines the length of the password, while the parameter specifies the number of non-alphanumeric characters in the password. By adjusting these parameters, you can generate passwords that meet your specific requirements.\n\nThe created passwords can be converted to secure passwords using the following:\n\nYou can also use the Get-StrongPassword method from the Windows Credential Manager PowerShell Module to generate a strong Password. E.g.,\n\nYou can use the generated password in cases like bulk password reset.\n\nThis PowerShell function generates a random password by combining a random word, a special character, and a three-digit number.\n\nThese words are chosen because they are easy to remember and at least 11 characters long.\n\nCreating strong passwords is key to staying safe online today. You don’t have to spend hours thinking of complex passwords when you can generate them in seconds with PowerShell commands! With just a few easy steps, you can create completely random passwords that meet current standards – and keep prying eyes out of your data!\n\nRemember, generating strong passwords is only one part of the equation. You must also store passwords securely, implement access controls, and update/rotate passwords to minimize the risk of unauthorized access.\n\nTo generate a random number in PowerShell, refer to How to Generate a Random Number in PowerShell?"
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/c8l0ai/generate_strong_random_passwords_using_powershell",
        "document": "PowerShell is a cross-platform (Windows, Linux, and macOS) automation tool and configuration framework optimized for dealing with structured data (e.g. JSON, CSV, XML, etc.), REST APIs, and object models. PowerShell includes a command-line shell, object-oriented scripting language, and a set of tools for executing scripts/cmdlets and managing modules."
    },
    {
        "link": "https://community.spiceworks.com/t/powershell-script-to-generate-student-ad-passwords/810337",
        "document": "Hi all, Powershell novice here. I have this PS script someone helped me build and I’ve been using it for the past 4 years and it’s been great. I’m in a new school district now and I’d like to change up how things are done for the resets. Here is what we came up with originally for the younger grade levels (I’ve edited the OU part): K-4 PS For grades K-4 I want to edit the password to include a simple sight word for students. Passwords here must be 8 characters. Someone had mentioned possibly integrating dinopass.com into the code to pull a password.\n\n For the older grades, I want to do a random word plus their student ID. Originally we just did a set word (our school) plus an incremental number. I have included the code below. Here, the student ID is saved in each AD user’s attributes as custom field called “copyPIN”.\n\nIf you wish to have a random password for each user hears a random password script I use for things like this if you need the password in plain text and can be converted to secure if needed. it could easily be adapted to output the password to a csv with the username next to it if you so wished to do so and as @thomaslee states its would be best to set the complexity on and force them to change it the first time they logon. I would not keep the password in plain text as an addition field on an account that is just asking for trouble in many forms as a prime example there is a program called BloofhoundAD that will collect all the data from your active directory including the extra set attributes (Food for Thought).\n\nOk so this is what I came up with and it works except for a few minor issues.\n• The last name is not exported to the spreadsheet\n• I get password errors on a few students like: Set-ADAccountPassword : Cannot bind parameter ‘NewPassword’. Cannot convert the “bumpyyear67” value of type\n\n “System.String” to type “System.Security.SecureString”.\n\n At line:5 char:60 Here is my code:\n\n $users = Get-ADUser -Filter * -SearchBase “OU=Students, DC=domain,DC=local”\n\n $results = ForEach($user in $users)\n\n {\n\n $password = Invoke-RestMethod -Uri https://www.dinopass.com/password/simple\n\n $users | Set-ADAccountPassword -whatif -Reset -NewPassword $password\n\n $users | Set-ADuser -whatif -ChangePasswordAtLogon $False\n\n [pscustomobject]@{\n\n ‘First Name’ = $user.givenName\n\n ‘Last Name’ = $user.sn\n\n ‘E-Mail’ = $user.userPrincipalName\n\n ‘Password’ = $password\n\n }\n\n }\n\n $results | Export-Csv -Path c:\\temp\\kindergarten.csv -NoTypeInformation\n\nThis a classic error on a couple of levels. It took me a while to get comfortable but here is what PowerShell is thinking when it does this: Set-ADAccountPassword : Cannot bind parameter 'NewPassword'. Cannot convert the \"bumpyyear67\" value of type \"System.String\" to type \"System.Security.SecureString\". At line:5 char:60 + $users | Set-ADAccountPassword -whatif -Reset -NewPassword $password What this is saying is that in processing the command, PowerShell can not bind what you specified (ie the password) to the type of parameter the cmdlet is expecting. The error message then tells you just where it found this issue. In this case, $password is a string (System.String to be precise) with the contents you see. However, the cmdlet expects the password to be in the form of a SECURE string (r System.Security.SecureString to be precise). These two types are NOT the same and PowerShell does not automatically do thye conversion. When you see messages of this kind, you can use Get-Help to view the syntax and work out what PowerShell is expecting. Then look backwards to work out why things go wrong. In your scenario, you need to do something like this: You can, as always in PowerShell, do it in fewer lines, but this shows the mechanics. And a small plea - please use the </> tool when you enter code or error messages - it makes them a LOT easier for us to see which help us to help you."
    },
    {
        "link": "https://stackoverflow.com/questions/79149164/how-can-i-avoid-a-memory-leak-when-force-killing-powershell",
        "document": "In case you mean : By default (unless is passed), it tries to cooperatively terminate a process, i.e. it gives the target process a chance to clean up before terminating and even allows it to refuse termination.\n\n However, this cooperative mechanism only works with GUI-subsystem applications, whereas PowerShell is a console-subsystem application.\n\n Thus, PowerShell does not get a chance to clean up, and while it seems that the managed part of its memory (the part managed by the .NET runtime) seemingly does get cleaned up, any unmanaged resources, including COM objects, are not released.\n\nNote that PowerShell's cmdlet always terminates processes forcefully and therefore inherently bears the risk of memory leaks - see GitHub issue #13664 for a discussion.\n\nIt follows that you can't avoid memory leaks with your approach.\n\nTherefore, you need an approach that handles timeouts in-process, where you can ensure proper cleanup, which also amounts to a much more efficient solution, given that you can use a single process:\n\nThe following sample code illustrates an approach that could work.\n• None It relies on the PowerShell (Core) 7-only parameter of for running operations in parallel threads, surfaced as thread jobs via , which allows termination of these threads on demand.\n• None In Windows PowerShell (the legacy, ships-with-Windows, Windows-only edition of PowerShell whose latest and last version is 5.1), you could:\n• None Install the module that comes with and use it to start individual thread jobs; e.g. with\n• None In a pinch, fall back to using - child process-based, slower and more resource-intensive - regular background jobs, using\n• \n• None Unlike with normal termination of a PowerShell process, automatic release of unmanaged resources seemingly does not happen with thread jobs and background jobs as of PowerShell 7.4.x - even if not prematurely stopped with or .\n• None Therefore, the solution below is only an option if the code that runs in jobs does not involve COM objects and other unmanaged resources (unless their manual release can be guaranteed); in the case at hand, you can use\n\n to test the (potential) availability of file shares on the target servers, which doesn't involve COM.\n• None The above uses a polling loop within the timeout period to check for results via , which is somewhat awkward.\n\n However, it is the only way to ensure processing of job (thread) results as they become available:\n• None While the cmdlet does have a parameter, it produces no output until the entire timeout period has elapsed (and then outputs a job object describing the job that has completed rather than results).\n\n Using with as input would by design only output one completed job once available.\n• None While does have a switch too, it lacks a parameter as of PowerShell 7.4.x; if such a parameter were added, timeout-based waiting that also streams results as they become available would become possible. Sadly, the feature request to that effect, GitHub issue #5433, was declined, on the grounds of perceived lack of interest in the community.\n\nIf you don't mind waiting for the timeout period to elapse in full and only then processing whatever results became available - even though they may have arrived earlier - you can combine with as follows:"
    },
    {
        "link": "https://stackoverflow.com/questions/72502308/powershell-release-comobject",
        "document": "Yes, that is good practice. By releasing the com object, it is marked for cleanup to be destroyed by the garbage collector.\n\nActually, the reference counter of the object is decreased and if this reaches zero, the object is removed from memory when the garbage collector runs. You cannot control when that happens, but this way you make sure the object gets removed. See here"
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/184xsf2/major_memory_leak_in_my_script_powershell_or_ise",
        "document": "Last week i had this little script running, in ise, in 4 tabs at the same time, last friday i put the computer to sleep mode, and start it up again today just minutes ago, taskmanager now tells me that powershell ise uses about 15 GIG of ram (have 32GB in total) and have a ram usage over 94%.\n\nI basically only start 4 instances to run this:"
    },
    {
        "link": "https://github.com/PowerShell/PowerShell/issues/20480",
        "document": "\n• Make sure you are able to repro it on the latest released version\n• Refer to Differences between Windows PowerShell 5.1 and PowerShell.\n\nWhen executing a PowerShell script containing a . invocation on a string, for example , some heap memory is leaked.\n\nI was able to reliably reproduce the leaks using a simple .Net 7 console application with the following code:\n\nThis issue seems to occur on all 7.3.x versions of PowerShell, but does not occur on 7.2.x versions.\n\nThe contents of my .csproj:"
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/v44tcm/startthreadjob_systemgccollect_wont_release",
        "document": "I have a PowerShell function that launches dozens of parallel jobs via . Each job will execute/retrieve remote Cisco device info via ordinary Posh-SSH commands.. see below summarized sample code.\n\nNotice that I use before each Start-ThreadJob loop; and also at BEGIN & END of the PS function. It doesn't make any noticeable difference.\n\nAfter each subsequent run of the script, memory accumulates another ~300K of RAM. So after about 3-4 runs, memory consumption accumulates to nearly 1GB of RAM. The only thing that recovers the memory is restarting my current PS session.\n\nMy understanding is that Start-ThreadJob launches new discrete runspaces; and, releases respective consumed memory after Receive-Job Remove-Job execution. However, that's not happening in my case.\n\nDoes anyone have any tricks to recover the consumed RAM after executing the function without having to use an external tool like EmptyStandbyList.exe? If not, could someone suggest how to enhance the below script to quietly/quickly launch a completely new runspacepool to do everything; and, completely disposes it it when done?\n\nThank you for your time."
    }
]