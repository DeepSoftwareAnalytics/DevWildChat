[
    {
        "link": "https://webpack.js.org/configuration",
        "document": "Out of the box, webpack won't require you to use a configuration file. However, it will assume the entry point of your project is and will output the result in minified and optimized for production.\n\nUsually, your projects will need to extend this functionality, for this you can create a file in the root folder and webpack will automatically use it.\n\nAll the available configuration options are specified below.\n\nIf for some reason you want to use a different configuration file depending on certain situations, you can change this via command line by using the flag.\n\nWebpack has a huge set of options which might be overwhelming to you, please take advantage of webpack-cli's command which could rapidly generate webpack configuration files for your project requirements, it will ask you a couple of questions before creating a configuration file.\n\nnpx might prompt you to install if it is not yet installed in the project or globally. You might also get additional packages installed to your project depending on the choices you've made during the configuration generation."
    },
    {
        "link": "https://webpack.js.org/guides/getting-started",
        "document": "Webpack is used to compile JavaScript modules. Once installed, you can interact with webpack either from its CLI or API. If you're still new to webpack, please read through the core concepts and this comparison to learn why you might use it over the other tools that are out in the community.\n\nFirst let's create a directory, initialize npm, install webpack locally, and install the (the tool used to run webpack on the command line):\n\nThroughout the Guides we will use blocks to show you what changes we're making to directories, files, and code. For instance:\n\nNow we'll create the following directory structure, files and their contents:\n\nWe also need to adjust our file in order to make sure we mark our package as , as well as removing the entry. This is to prevent an accidental publish of your code.\n\nIn this example, there are implicit dependencies between the tags. Our file depends on being included in the page before it runs. This is because never explicitly declared a need for ; it assumes that the global variable exists.\n\nThere are problems with managing JavaScript projects this way:\n• It is not immediately apparent that the script depends on an external library.\n• If a dependency is missing, or included in the wrong order, the application will not function properly.\n• If a dependency is included but not used, the browser will be forced to download unnecessary code.\n\nLet's use webpack to manage these scripts instead.\n\nFirst we'll tweak our directory structure slightly, separating the \"source\" code ( ) from our \"distribution\" code ( ). The \"source\" code is the code that we'll write and edit. The \"distribution\" code is the minimized and optimized of our build process that will eventually be loaded in the browser. Tweak the directory structure as follows:\n\nTo bundle the dependency with , we'll need to install the library locally:\n\nNow, let's import in our script:\n\nNow, since we'll be bundling our scripts, we have to update our file. Let's remove the lodash , as we now it, and modify the other tag to load the bundle, instead of the raw file:\n\nIn this setup, explicitly requires to be present, and binds it as (no global scope pollution). By stating what dependencies a module needs, webpack can use this information to build a dependency graph. It then uses the graph to generate an optimized bundle where scripts will be executed in the correct order.\n\nWith that said, let's run , which will take our script at as the entry point, and will generate as the output. The command, which ships with Node 8.2/npm 5.2.0 or higher, runs the webpack binary ( ) of the webpack package we installed in the beginning:\n\nOpen from the directory in your browser and, if everything went right, you should see the following text: .\n\nThe and statements have been standardized in ES2015. They are supported in most of the browsers at this moment, however there are some browsers that don't recognize the new syntax. But don't worry, webpack does support them out of the box.\n\nBehind the scenes, webpack actually \"transpiles\" the code so that older browsers can also run it. If you inspect , you might be able to see how webpack does this, it's quite ingenious! Besides and , webpack supports various other module syntaxes as well, see Module API for more information.\n\nNote that webpack will not alter any code other than and statements. If you are using other ES2015 features, make sure to use a transpiler such as Babel via webpack's loader system.\n\nAs of version 4, webpack doesn't require any configuration, but most projects will need a more complex setup, which is why webpack supports a configuration file. This is much more efficient than having to manually type in a lot of commands in the terminal, so let's create one:\n\nNow, let's run the build again but instead using our new configuration file:\n\nA configuration file allows far more flexibility than CLI usage. We can specify loader rules, plugins, resolve options and many other enhancements this way. See the configuration documentation to learn more.\n\nGiven it's not particularly fun to run a local copy of webpack from the CLI, we can set up a little shortcut. Let's adjust our package.json by adding an npm script:\n\nNow the command can be used in place of the command we used earlier. Note that within we can reference locally installed npm packages by name the same way we did with . This convention is the standard in most npm-based projects because it allows all contributors to use the same set of common scripts.\n\nNow run the following command and see if your script alias works:\n\nNow that you have a basic build together you should move on to the next guide to learn how to manage assets like images and fonts with webpack. At this point, your project should look like this:\n\nIf you want to learn more about webpack's design, you can check out the basic concepts and configuration pages. Furthermore, the API section digs into the various interfaces webpack offers."
    },
    {
        "link": "https://dev.to/anitaparmar26/webpack-5-guide-for-beginners-314c",
        "document": "So many times heard from dev that they don't understand how to configure webpack because of the config file. Today we learn how to use webpack to set up bundle styles, JavaScript, images, and fonts for the web.\n\nThe first time using webpack lots of questions would be whirling around, it can be difficult to understand how it works and how it should be used. My goal is to help you understand webpack.\n\nIn short, webpack is a static module bundler for modern JavaScript applications. It’s impossible to mention all tools and it’s unnecessary for a beginner’s guide like this.\n\nInstead, I'll try to put a small core list to start.\n\nFirst, create a directory for your project to live and start the project. There before We will begin by creating the following directory structure:\n\nWe will make an src/app folder to contain all source files. I will start by creating a simple index.js file\n\nLet’s create a webpack.config.js at the root of the project.\n\n Touch webpack.config.js\n\nIn this example, we'll set the entry point to the src/index.js. We'll have it output in the dist folder, which is where production code gets built. The [name] in the output will be main.\n\nTo run the script, we can make a build script that runs the webpack command.\n\n6. Now you can run it.\n\nThe dist folder has been created with main.bundle.js.\n\nSo we now have webpack building successfully.\n\nWe will start with Loaders in our example\n\nFor style, we will install style loader and SCSS, PostCSS, CSS loader packages.\n\nWe will make postCSS.config.js file and add it to the root.\n\nAlso, add all loader in webpack config file.\n\nRun to build, you'll see the Sass and PostCSS have been applied.\n\nCreate src/images and add an image to it, then try to import it into your index.js file.\n\nOnce load the file-loader configured in the webpack.config.js\n\nYou will get an option for output files where we want the exact path (dist/assets/images/**.jpg).\n\nFirst, put your font files into one folder of your project's application.\n\nNeed to load url-loader for features.\n\nWe are using for js. Babel is next-generation JavaScript. There are a few additional dependencies for Babel as well.\n\nNow we will add some code for load js in webpack.config.js.\n\nWe create a .babelrc file in the root of the project for Babel Plugins.\n\n\n\n Run npm build, all code set without any error.\n\nHow can configuring webpack to generate HTML with \n\n HtmlWebpackPlugin which create file from a template. First, install the plugin.\n\nCreate a template.html file in the src folder. We can pass a hash of configuration 'title' options to html-webpack-plugin. \n\n \n\n And also add code in webpack config file to build HTML\n\n \n\n Now run a build again. See the dist folder now contains an \n\n index.html with the bundle.\n\nTo set up for development, we will install . Webpack gives us the option to easily install a server with live \n\n reloading.\n\nWhen running this command, a link to **localhost:8080** will automatically pop up in your browser That shall be enough to get you to start with webpack! We've covered all (Basic,Plugins,Loaders) of the basic Webpack concepts. For further exploration of webpack’s capabilities we recommend official docs [Webpack](https://webpack.js.org/) Hope you like it guys here we end our Webpack basic setup! Thank you so much for reading the post. I am working on Dash UI project which build on gulp js.[Dash UI](https://github.com/codescandy/Dash-UI) Happy Coding :)"
    },
    {
        "link": "https://survivejs.com/books/webpack",
        "document": ""
    },
    {
        "link": "https://valentinog.com/blog/webpack",
        "document": "Today CLI tools as create-react-app or Vue cli abstract away most of the configuration, and provide sane defaults.\n\nEven then, understanding how things work under the hood is beneficial because sooner or later you'll need to make some adjustment to the defaults.\n\nIn this guide we'll see what webpack can do, and how to configure it to suit your needs.\n\nMy tutorials are free, no strings attached. This means I have no obligation to keep them constantly updated to the latest releases of the packages. Keep also in mind, frontend tooling changes so fast that I can't keep up updating every single blog post as quickly as $jsTool introduces breaking changes. But, I try to do my best. If something doesn't work for you, drop me a polite email, and I'll try to fix the tutorial if I have time. Enjoy!\n\nAs a JavaScript developer you should be familiar with the term module. You might have heard about AMD modules, UMD, Common JS, ES modules.\n\nwebpack is a module bundler and has a broader definition of what a module is, specifically, for webpack, modules are:\n\nThat is, webpack is able to ingest dependencies from any of these sources.\n\nThe ultimate goal of webpack is to unify all these different sources and module types in a way that's possible to import everything in your JavaScript code, and finally produce a shippable output.\n\nAn entry point for webpack is the starting point from which all the dependencies of a frontend project are collected. In practice, it's a simple JavaScript file.\n\nThe default entry point for webpack (since version 4) is , and it's configurable. webpack can have multiple entry points.\n\nThe output is where the resulting JavaScript and static files are collected during the build process.\n\nThe default output folder for webpack (since version 4) is , configurable as well.\n\nThe resulting JavaScript files are part of the so called bundle.\n\nLoaders are third-party extensions that help webpack deal with various file extensions. For example there are loaders for CSS, for images, or for txt files.\n\nThe goal of a loader is to transform files (other than JavaScript) in modules. Once the file becomes a module, webpack can use it as a dependency in your project.\n\nPlugins are third-party extensions that can alter how webpack works. For example there are plugins for extracting HTML, CSS, or for setting up environment variables.\n\nwebpack has two modes of operations: development and production. The main difference between them is that production mode automatically applies minification and other optimizations to your JavaScript code.\n\nCode splitting, or lazy loading is an optimization technique for avoiding larger bundles.\n\nWith code splitting, developers can decide to load whole blocks of JavaScript only in response to some user interaction, like clicks or route changes (or other conditions).\n\nA piece of code that's splitted becomes a chunk.\n\nTo start off with webpack create a new folder and move into it to initialize an NPM project:\n\nOnce inside install webpack, webpack-cli, and the webpack-dev-server:\n\nTo run webpack easily from an NPM script, open up and configure a \"dev\" script:\n\nWith this script we instruct webpack to work in development mode, convenient for working locally.\n\nYou should see the following error.\n\nHere webpack is looking for the default entry point, . Create the folder, and inside the same folder create a simple JavaScript file:\n\nNow run again and you should see no more errors. The result of this run is a new folder named , with a JavaScript file in it named :\n\nThis is your first webpack bundle, also called output.\n\nFor simpler tasks webpack could work without a configuration, but you'll hit the limit pretty soon. To configure webpack through a file create a in the project folder:\n\nWebpack is written in JavaScript, and runs on top on a headless JavaScript environment such as Node.js. In this file you'll need at least a , which is the Common JS export for Node.js:\n\nIn we can change how webpack behaves by adding or altering:\n\nFor example, to change the entry point path we can do:\n\nNow webpack will look in for the first file to load. To change instead the output of our bundle we can do:\n\nWith this configuration webpack will put the bundle in instead of . (To keep things simple we'll stick to the default in this guide).\n\nA web application without an HTML page is almost useless. To work with HTML in webpack we need to install a plugin, html-webpack-plugin:\n\nOnce the plugin is installed we can configure it:\n\nHere we say to webpack, load an HTML template from .\n\nThe ultimate goal of html-webpack-plugin is twofold:\n• it injects the bundle(s) in the same file\n\nBefore moving on create a simple HTML file in :\n\nIn a second we'll run this \"app\" with webpack's development server.\n\nIn the first section of this guide we installed webpack-dev-server. If you forgot to add it, install the package now:\n\nwebpack-dev-server is a convenient package for development. Once configured, we can launch a local server to serve our files.\n\nTo configure webpack-dev-server, open up and add a \"start\" script:\n\nWith this script we can run the server easily. Now run:\n\nYour default browser should open. In the browser's console you should also see a script tag, with our main JavaScript bundle injected:\n\nLoaders are third-party extensions that help webpack deal with various file extensions. For example there are loaders for CSS, for images, or for txt files.\n\nThe anatomy of a webpack loader, configuration wise, is the following:\n\nThe relevant configuration starts with the key. Inside this key we configure each loaders group, or a single loader, inside .\n\nFor each file we want to treat as a module we configure an object with a key, and with :\n\ntells webpack \"hey, treat this filename as a module\". instead, defines what loaders are applied to the file.\n\nTo work with CSS in webpack we need to install at least two loaders.\n\nLoaders here are necessary for helping webpack to understand how to deal with files.\n\nTo test CSS in webpack create a simple stylesheet in :\n\nAlso, add an HTML element to our HTML template in :\n\nBefore testing the page we need to install the loaders:\n• style-loader for loading the stylesheet in the DOM\n\nThen configure them in :\n\nThe relevant configuration starts with the key:\n\nNow if you run you should see the stylesheet loaded in the HTML's head:\n\nOnce CSS loaders are in place you can extract CSS files with MiniCssExtractPlugin.\n\nIn webpack, the order in which loaders appear in the configuration is of high importance. The following configuration is invalid:\n\nHere \"style-loader\" appears before \"css-loader\". But style-loader is for injecting the style in the page, not for loading the actual CSS file.\n\nThe following configuration instead is valid:\n\nwebpack loaders are loaded from right to left, (or think as of top to bottom).\n\nTo work with SASS in webpack we need to install at least the appropriate loaders.\n\nLoaders here are necessary for helping webpack to understand how to deal with files.\n\nTo test SASS in webpack create a simple stylesheet in :\n\nAlso, add some more HTML elements to our HTML template in :\n\nBefore testing the page we need to install the loaders (and the sass package for Node.js):\n• style-loader for loading the stylesheet in the DOM\n\nThen configure them in :\n\nAgain, the relevant configuration starts with the key:\n\nNotice the order in which loaders appear: first, sass-loader, then css-loader, finally style-loader.\n\nNow if you run you should see the stylesheet loaded in the HTML's head:\n\nOnce SASS and CSS loaders are in place you can extract CSS files with MiniCssExtractPlugin.\n\nwebpack doesn't know on its own how to transform JavaScript code. This task is outsourced to a third-party loader, specifically babel-loader, with babel.\n\nbabel is a JavaScript compiler and \"transpiler\". Given modern JavaScript syntax as input, babel is able to transform it to compatible code that can run in (almost) any browser.\n\nBefore moving forward we need to install a bunch of packages:\n• babel preset env for compiling modern Javascript down to ES5\n\nThen configure babel by creating a new file, . Here we configure babel to use preset-env:\n\nFinally, configure webpack to use the loader for transforming JavaScript files (I left the SASS too loader for a bit more context):\n\nTo test the transformation, write some modern syntax in :\n\nNow run to see the transformed code in . Open up and search for \"fancyFunc\":\n\nWithout babel, the code wouldn't be transpiled:\n\nNote: webpack works totally fine even without babel. The transpiling process is only necessary for shipping ES5.\n\nHow to set up React, webpack 5, and Babel from scratch\n\nTo use React components with webpack, alongside with babel loader you should also install the babel preset for React:\n\nOnce done, configure babel to use the React preset in :\n\nAt this point you can install React with:\n\nFinally, you can write your components in the project. To test things out you can create a component in :\n\nNow when running webpack's dev server with you should see the component in the browser. (Don't forget to add a in the page with the relevant id).\n\nwebpack treats a whole range of files as modules. But, let's not forget its main purpose: loading ES modules.\n\nUp until 2015 JavaScript didn't have a standard mechanism for code reuse. There had been a lot of attempts to standardize this aspect, which resulted in a messy fragmentation during the years.\n\nYou might have heard about AMD modules, UMD, or Common JS. There was no clear winner. Finally, with ECMAScript 2015, ES modules landed in the language. We now have an \"official\" module system.\n\nTo try out ES modules in webpack let's create a module in a new file at with the following code:\n\nNow in you can load the module and use the function:\n\nFor a refresher on ES modules: All I need to know about ECMAScript modules.\n\nAs introduced earlier, webpack has two modes of operation: development and production. So far we worked only in development mode.\n\nIn development mode, webpack takes all the JavaScript code we write, almost pristine, and loads it in the browser.\n\nNo minification is applied. This makes reloading the application in development faster.\n\nIn production mode instead, webpack applies a number of optimizations:\n• minification with TerserWebpackPlugin to reduce the bundle size\n\nIt also set to \"production\". This environment variable is useful for doing things conditionally in production or in development.\n\nTo configure webpack in production mode, open up and add a \"build\" script:\n\nNow when running webpack will produce a minified bundle.\n\nCode splitting refers to an optimization technique aiming at:\n\nThere is a limit that the webpack community considers the maximum size for the initial bundle of an application: 200KB. To understand why keeping bundles small is paramount, search for \"The Cost of JavaScript\" on Google.\n\nThere are three main ways to activate code splitting in webpack:\n\nThe first technique based on multiple entry points works well for smaller projects, but it's not scalable in the long run. Here we'll focus only on and dynamic imports.\n\nConsider a JavaScript application using Moment.js, the popular JS library for times and dates. There are better alternatives to it, but for a moment (no pun intended) let's prove my point.\n\nInstall the library in your project folder:\n\nNow wipe out the content of and import the library there:\n\nRun a build with and look at the output:\n\nThe whole library is bundled in the main entry point of our app. Not good. With we can move out moment.js from the main bundle.\n\nTo configure code splitting open up and add the key to your configuration, configured as follows:\n\nRun a build with and look at the output:\n\nWe now have a vendors~main.js with moment.js, while the main entry point has a more reasonable size.\n\nNote: even with code splitting moment.js remains a gigantic library. There are better alternatives like luxon or date-fns.\n\nA more powerful technique for code splitting uses dynamic imports to load code conditionally. webpack offered dynamic imports long before this feature shipped in ECMAScript 2020.\n\nThis approach is widely used in modern frontend library like Vue and React (React has its own way, but the concept is the same).\n\nCode splitting might be used:\n\nFor example, you can load conditionally some JavaScript module in response to a user interaction, like a click, or a mouse move. Or, you can load relevant portions of your code on response to route changes.\n\nTo get started with dynamic imports, wipe out the content of , and place in the following HTML instead:\n\nMake sure to still have the fetch module in :\n\nNow in create the following logic:\n\nNothing happens if you run to see and click the button in the interface.\n\nNow imagine we want to load a list of users after someone clicks the button. A \"naive\" approach can use a static import to load the function from :\n\nThe problem is that ES modules are static, meaning we cannot change imports at runtime.\n\nWith a dynamic import instead we can choose when to load our code:\n\nHere we create a function to load the module dynamically:\n\nThen in the event listener we chain to the dynamic import:\n\nThis gives the ability to extract our function with object destructuring:\n\nFinally, we use our function as usual:\n\nWhen you now load the page for the first time with you see the main bundle loaded in the console:\n\nNow \"./common/usersAPI\" loads only when clicking the button:\n\nBy prefixing the import path with we can also control the chunk name:\n\nThe chunk now will have the desired name:\n\nOther interesting worth going through are:\n• prefetching and preloading, which work wonderfully with dynamic imports\n\nIn this post we covered webpack's fundamentals: code splitting, configuration, loaders, plugins. Of course there's a lot more.\n\nOnce reading this introductory guide, check out these great resources:"
    },
    {
        "link": "https://github.com/Ami-Solution/amis-ipfs",
        "document": "A simple DApp to upload a document to IPFS and then store the IPFS hash on the Amischain blockchain. Once the IPFS hash number is sent to the Amischain blockchain, the user will receive a transaction receipt as well as a genuine ERC721 collectible token . We will use Create-React-App framework to make an ubiquitous front-end available on Herokuapp and ipfs. This Dapp works with any user that has MetaMask/Scatter installed in their browser.\n\nThis repository was created originally for this great tutorial and has been adapted to work with Amischain https://itnext.io/build-a-simple-ethereum-interplanetary-file-system-ipfs-react-js-dapp-23ff4914ce4e also available HERE: https://amis-chain-ipfs.herokuapp.com/.\n\nTo recreate this site first create the contract StoreHash.sol. You can use Remix for that together with MetaMask or Scatter. Create a new file, paste the contents of the .sol file and deploy.\n\nThen update the contract address in storehash.js with your contract address (and ABI if you changed the contract). Then run the app with\n\nrun to make a build in the build directory. You can then upload the complete dApp to IPFS to run it from the cloud with . You can find the url by looking at the last hash:\n\nYour url would be:\n• https://ipfs.infura.io/ipfs/QmZsKifgMvQxeo7J5E8CrvGtKzSdGQ232Y256wbH17q3gA but it's available on all ipfs nodes (after a while):\n\nFirst time loading from IPFS takes a while and might require an F5 ;)\n\nThis project was bootstrapped with Create React App.\n\nBelow you will find some information on how to perform common tasks.\n\n You can find the most recent version of this guide here.\n• Using the Folder\n• Adding Assets Outside of the Module System\n• When to Use the Folder\n• Injecting Data from the Server into the Page\n\nCreate React App is divided into two packages:\n• is a global command-line utility that you use to create new projects.\n• is a development dependency in the generated projects (including this one).\n\nYou almost never need to update itself: it delegates all the setup to .\n\nWhen you run , it always creates the project with the latest version of so you’ll get all the new features and improvements in newly created apps automatically.\n\nTo update an existing project to a new version of , open the changelog, find the version you’re currently on (check in this folder if you’re not sure), and apply the migration instructions for the newer versions.\n\nIn most cases bumping the version in and running in this folder should be enough, but it’s good to consult the changelog for potential breaking changes.\n\nWe commit to keeping the breaking changes minimal so you can upgrade painlessly.\n\nWe are always open to your feedback.\n\nAfter creation, your project should look like this:\n\nFor the project to build, these files must exist with exact filenames:\n\nYou can delete or rename the other files.\n\nYou may create subdirectories inside . For faster rebuilds, only files inside are processed by Webpack.\n\n You need to put any JS and CSS files inside , or Webpack won’t see them.\n\nOnly files inside can be used from .\n\n Read instructions below for using assets from JavaScript and HTML.\n\nYou can, however, create more top-level directories.\n\n They will not be included in the production build so you can use them for things like documentation.\n\nIn the project directory, you can run:\n\nRuns the app in the development mode.\n\n Open http://localhost:3000 to view it in the browser.\n\nThe page will reload if you make edits.\n\n You will also see any lint errors in the console.\n\nLaunches the test runner in the interactive watch mode.\n\n See the section about running tests for more information.\n\nBuilds the app for production to the folder.\n\n It correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\n\n Your app is ready to be deployed!\n\nSee the section about deployment for more information.\n\nNote: this is a one-way operation. Once you , you can’t go back!\n\nIf you aren’t satisfied with the build tool and configuration choices, you can at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\n\nYou don’t have to ever use . The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\n\nThis project supports a superset of the latest JavaScript standard.\n\n In addition to ES6 syntax features, it also supports:\n\nLearn more about different proposal stages.\n\nWhile we recommend to use experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide codemods if any of these proposals change in the future.\n\nNote that the project only includes a few ES6 polyfills:\n\nIf you use any other ES6+ features that need runtime support (such as or ), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.\n\nTo configure the syntax highlighting in your favorite text editor, head to the relevant Babel documentation page and follow the instructions. Some of the most popular editors are covered.\n\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\n\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\n\nYou would need to install an ESLint plugin for your editor first.\n\nFinally, you will need to install some packages globally:\n\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already working on a solution to this so this may become unnecessary in a couple of months.\n\nThis feature is currently only supported by Visual Studio Code editor.\n\nVisual Studio Code supports live-editing and debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.\n\nYou would need to have the latest version of VS Code and VS Code Chrome Debugger Extension installed.\n\nThen add the block below to your file and put it inside the folder in your app’s root directory.\n\nStart your app by running , and start debugging in VS Code by pressing or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.\n\nYou can find the source HTML file in the folder of the generated project. You may edit the tag in it to change the title from “React App” to anything else.\n\nNote that normally you wouldn’t edit files in the folder very often. For example, adding a stylesheet is done without touching the HTML.\n\nIf you need to dynamically update the page title based on the content, you can use the browser API. For more complex scenarios when you want to change the title from React components, you can use React Helmet, a third party library.\n\nIf you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in this section. Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered here.\n\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with :\n\nThis project setup supports ES6 modules thanks to Babel.\n\n While you can still use and , we encourage you to use and instead.\n\nBe aware of the difference between default and named exports. It is a common source of mistakes.\n\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use and .\n\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\n• When to use the curly braces?\n\nThis project setup uses Webpack for handling all assets. Webpack offers a custom way of “extending” the concept of beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to import the CSS from the JavaScript file:\n\nThis is not required for React but many people find this feature convenient. You can read about the benefits of this approach here. However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\n\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified file in the build output.\n\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into . It would still be imported from , but you could always remove that import if you later migrate to a different build tool.\n\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through Autoprefixer so you don’t need to worry about it.\n\nFor example, this:\n\nIf you need to disable autoprefixing for some reason, follow this section.\n\nGenerally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a CSS class in and components, we recommend creating a component with its own styles, that both and can render (but not inherit).\n\nFollowing this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.\n\nFirst, let’s install the command-line interface for Sass:\n\nThen in , add the following lines to :\n\nNow you can rename to and run . The watcher will find every Sass file in subdirectories, and create a corresponding CSS file next to it, in our case overwriting . Since still imports , the styles become a part of your application. You can now edit , and will be regenerated.\n\nTo share variables between Sass files, you can use Sass imports. For example, and other component style files could include with variable definitions.\n\nAt this point you might want to remove all CSS files from the source control, and add to your file. It is generally a good practice to keep the build products outside of the source control.\n\nAs a final step, you may find it convenient to run automatically with , and run as a part of . You can use the operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:\n\nThen we can change and scripts to include the CSS preprocessor commands:\n\nNow running and also builds Sass files. Note that seems to have an issue recognizing newly created files on some systems so you might need to restart the watcher when you create a file until it’s resolved.\n\nWith Webpack, using static assets like images and fonts works similarly to CSS.\n\nYou can an image right in a JavaScript module. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\n\nHere is an example:\n\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\n\nThis works in CSS too:\n\nWebpack finds all relative module references in CSS (they start with ) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\n\nPlease be advised that this is also a custom feature of Webpack.\n\nIt is not required for React but many people enjoy it (and React Native uses a similar mechanism for images).\n\n An alternative way of handling static assets is described in the next section.\n\nThe folder contains the HTML file so you can tweak it, for example, to set the page title. The tag with the compiled code will be added to it automatically during the build process.\n\nYou can also add other assets to the folder.\n\nNote that we normally encourage you to assets in JavaScript files instead. For example, see the sections on adding a stylesheet and adding images and fonts. This mechanism provides a number of benefits:\n• Scripts and stylesheets get minified and bundled together to avoid extra network requests.\n• Missing files cause compilation errors instead of 404 errors for your users.\n• Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\n\nHowever there is an escape hatch that you can use to add an asset outside of the module system.\n\nIf you put a file into the folder, it will not be processed by Webpack. Instead it will be copied into the build folder untouched. To reference assets in the folder, you need to use a special variable called .\n\nInside , you can use it like this:\n\nOnly files inside the folder will be accessible by prefix. If you need to use a file from or , you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\n\nWhen you run , Create React App will substitute with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\n\nIn JavaScript code, you can use for similar purposes:\n\nKeep in mind the downsides of this approach:\n• None of the files in folder get post-processed or minified.\n• Missing files will not be called at compilation time, and will cause 404 errors for your users.\n• Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\n\nNormally we recommend importing stylesheets, images, and fonts from JavaScript. The folder is useful as a workaround for a number of less common cases:\n• You need a file with a specific name in the build output, such as .\n• You have thousands of images and need to dynamically reference their paths.\n• You want to include a small script like outside of the bundled code.\n• Some library may be incompatible with Webpack and you have no other option but to include it as a tag.\n\nNote that if you add a that declares global variables, you also need to read the next section on using them.\n\nWhen you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.\n\nYou can avoid this by reading the global variable explicitly from the object, for example:\n\nThis makes it obvious you are using a global variable intentionally rather than because of a typo.\n\nAlternatively, you can force the linter to ignore any line by adding after it.\n\nYou don’t have to use React Bootstrap together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\n\nInstall React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\n\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your file:\n\nImport required React Bootstrap components within file or your custom component files:\n\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example redone using React Bootstrap.\n\nSometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).\n\n We suggest the following approach:\n• Create a new package that depends on the package you wish to customize, e.g. Bootstrap.\n• Add the necessary build steps to tweak the theme, and publish your package on npm.\n• Install your own theme npm package as a dependency of your app.\n\nHere is an example of adding a customized Bootstrap that follows these steps.\n\nFlow is a static type checker that helps you write code with fewer bugs. Check out this introduction to using static types in JavaScript if you are new to this concept.\n\nRecent versions of Flow work with Create React App projects out of the box.\n\nTo add Flow to a Create React App project, follow these steps:\n• Add to the section of your .\n• Run (or ) to create a file in the root directory.\n• Add to any files you want to type check (for example, to ).\n\nNow you can run (or ) to check the files for type errors. You can optionally use an IDE like Nuclide for a better integrated experience. In the future we plan to integrate it into Create React App even more closely.\n\nTo learn more about Flow, check out its documentation.\n\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By default you will have defined for you, and any other environment variables starting with .\n\nThe environment variables are embedded during the build time. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like described here. Alternatively you can rebuild the app on the server anytime you change them.\n\nThese environment variables will be defined for you on . For example, having an environment variable named will be exposed in your JS as .\n\nThere is also a special built-in environment variable called . You can read it from . When you run , it is always equal to , when you run it is always equal to , and when you run to make a production bundle, it is always equal to . You cannot override manually. This prevents developers from accidentally deploying a slow development build to production.\n\nThese environment variables can be useful for displaying information conditionally based on where the project is deployed or consuming sensitive data that lives outside of version control.\n\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined in the environment inside a :\n\nDuring the build, will be replaced with the current value of the environment variable. Remember that the variable will be set for you automatically.\n\nWhen you load the app in the browser and inspect the , you will see its value set to , and the bold text will show the environment provided when using :\n\nThe above form is looking for a variable called from the environment. In order to consume this value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in a file. Both of these ways are described in the next few sections.\n\nHaving access to the is also useful for performing actions conditionally:\n\nWhen you compile the app with , the minification step will strip out this condition, and the resulting bundle will be smaller.\n\nYou can also access the environment variables starting with in the . For example:\n\nNote that the caveats from the above section apply:\n• Apart from a few built-in variables ( and ), variable names must start with to work.\n• The environment variables are injected at build time. If you need to inject them at runtime, follow this approach instead.\n\nDefining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the life of the shell session.\n\nTo define permanent environment variables, create a file called in the root of your project:\n\nThese variables will act as the defaults if the machine does not explicitly set them.\n\n Please refer to the dotenv documentation for more details.\n\nMany popular libraries use decorators in their documentation.\n\n Create React App doesn’t support decorator syntax at the moment because:\n• It is an experimental proposal and is subject to change.\n• The current specification version is not officially supported by Babel.\n• If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\n\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.\n\n Please refer to these two threads for reference:\n\nCreate React App will add decorator support when the specification advances to a stable stage.\n\nThese tutorials will help you to integrate your app with an API backend running on another port, using to access it.\n\nCheck out this tutorial. You can find the companion GitHub repository here.\n\nCheck out this tutorial. You can find the companion GitHub repository here.\n\nPeople often serve the front-end React app from the same host and port as their backend implementation.\n\n For example, a production setup might look like this after the app is deployed:\n\nSuch setup is not required. However, if you do have a setup like this, it is convenient to write requests like without worrying about redirecting them to another host or port during development.\n\nTo tell the development server to proxy any unknown requests to your API server in development, add a field to your , for example:\n\nThis way, when you in development, the development server will recognize that it’s not a static asset, and will proxy your request to as a fallback. The development server will only attempt to send requests without a accept header to the proxy.\n\nConveniently, this avoids CORS issues and error messages like this in development:\n\nKeep in mind that only has effect in development (with ), and it is up to you to ensure that URLs like point to the right thing in production. You don’t have to use the prefix. Any unrecognized request without a accept header will be redirected to the specified .\n\nThe option supports HTTP, HTTPS and WebSocket connections.\n\n If the option is not flexible enough for you, alternatively you can:\n• Enable CORS on your server (here’s how to do it for Express).\n• Use environment variables to inject the right server host and port into your app.\n\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using the \"proxy\" feature to proxy requests to an API server when that API server is itself serving HTTPS.\n\nTo do this, set the environment variable to , then start the dev server as usual with :\n\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\n\nSince Create React App doesn’t support server rendering, you might be wondering how to make tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\n\nThen, on the server, regardless of the backend you use, you can read into memory and replace , , and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\n\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\n\nIf you’re hosting your with a static hosting provider you can use react-snapshot to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.\n\nThere are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.\n\nThe primary benefit of pre-rendering is that you get the core content of each page with the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.\n\nYou can read more about zero-configuration pre-rendering (also called snapshotting) here.\n\nSimilarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:\n\nThen, on the server, you can replace with a JSON of real data right before sending the response. The client code can then read to use it. Make sure to sanitize the JSON before sending it to the client as it makes your app vulnerable to XSS attacks.\n\nCreate React App uses Jest as its test runner. To prepare for this integration, we did a major revamp of Jest so if you heard bad things about it years ago, give it another try.\n\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\n\nWhile Jest provides browser globals such as thanks to jsdom, they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\n\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\n\nJest will look for test files with any of the following popular naming conventions:\n\nThe / files (or the folders) can be located at any depth under the top level folder.\n\nWe recommend to put the test files (or folders) next to the code they are testing so that relative imports appear shorter. For example, if and are in the same folder, the test just needs to instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\n\nWhen you run , Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like recompiles the code.\n\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\n\nBy default, when you run , Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\n\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press in the watch mode to force Jest to run all tests.\n\nJest will always run all tests on a continuous integration server or if the project is not inside a Git or Mercurial repository.\n\nTo create tests, add (or ) blocks with the name of the test and its code. You may optionally wrap them in blocks for logical grouping but this is neither required nor recommended.\n\nJest provides a built-in global function for making assertions. A basic test could look like this:\n\nAll matchers supported by Jest are extensively documented here.\n\n You can also use and to create “spies” or mock functions.\n\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\n\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\n\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in .\n\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\n\nIf you’d like to test components in isolation from the child components they render, we recommend using rendering API from Enzyme. You can write a smoke test with it too:\n\nUnlike the previous smoke test using , this test only renders and doesn’t go deeper. For example, even if itself renders a that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports full rendering with , and you can also use it for testing state changes and component lifecycle.\n\nYou can read the Enzyme documentation for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in and for spies.\n\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\n\nAll Jest matchers are extensively documented here.\n\n Nevertheless you can use a third-party assertion library like Chai if you want to, as described below.\n\nAdditionally, you might find jest-enzyme helpful to simplify your tests with readable matchers. The above code can be written simpler with jest-enzyme.\n\nTo setup jest-enzyme with Create React App, follow the instructions for initializing your test environment to import .\n\nWe recommend that you use for assertions and for spies. If you are having issues with them please file those against Jest, and we’ll fix them. We intend to keep making them better for React, supporting, for example, pretty-printing React elements as JSX.\n\nHowever, if you are used to other libraries, such as Chai and Sinon, or if you have existing code using them that you’d like to port over, you can import them normally like this:\n\nand then use them in your tests like you normally do.\n\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a to your project. It will be automatically executed before running your tests.\n\nYou can replace with to temporarily exclude a test from being executed.\n\n Similarly, lets you focus on a specific test without running any other tests.\n\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.\n\n Run (note extra in the middle) to include a coverage report like this:\n\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\n\nBy default runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called .\n\nWhen creating a build of your application with linter warnings are not checked by default. Like , you can force the build to perform a linter warning check by setting the environment variable . If any warnings are encountered then the build fails.\n\nPopular CI servers already set the environment variable by default but you can do this yourself too:\n• Following the Travis Getting started guide for syncing your GitHub repository with Travis. You may need to initialize some settings manually in your profile page.\n• Trigger your first build with a git push.\n\nThe test command will force Jest to run tests once instead of launching the watcher.\n\nThe build command will check for linter warnings and fail if any are found.\n\nBy default, the of the generated project looks like this:\n\nIf you know that none of your tests depend on jsdom, you can safely remove , and your tests will run faster.\n\n To help you make up your mind, here is a list of APIs that need jsdom:\n• Any browser globals like and\n\nIn contrast, jsdom is not needed for the following APIs:\n\nFinally, jsdom is also not needed for snapshot testing.\n\nSnapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. Read more about snapshot testing.\n\nIf you use Visual Studio Code, there is a Jest extension which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.\n\nUsually, in an app, you have a lot of UI components, and each of them has many different states. For an example, a simple button component could have following states:\n\nUsually, it’s hard to see these states without running a sample app or some examples.\n\nCreate React App doesn’t include any tools for this by default, but you can easily add React Storybook to your project. It is a third-party tool that lets you develop components and see all their states in isolation from your app.\n\nYou can also deploy your Storybook as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.\n\nHere’s how to setup your app with Storybook:\n\nFirst, install the following npm package globally:\n\nThen, run the following command inside your app’s directory:\n\nAfter that, follow the instructions on the screen.\n\nYou can turn your React app into a Progressive Web App by following the steps in this repository.\n\ncreates a directory with a production build of your app. Set up your favourite HTTP server so that a visitor to your site is served , and requests to static paths like are served with the contents of the file.\n\nFor environments using Node, the easiest way to handle this would be to install serve and let it handle the rest:\n\nThe last command shown above will serve your static site on the port 5000. Like many of serve’s internal settings, the port can be adjusted using the or flags.\n\nRun this command to get a full list of the options available:\n\nYou don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.\n\nHere’s a programmatic example using Node and Express:\n\nThe choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.\n\nThe folder with static assets is the only output produced by Create React App.\n\nHowever this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like in your single-page app.\n\nIf you use routers that use the HTML5 history API under the hood (for example, React Router with ), many static file servers will fail. For example, if you used React Router with a route for , the development server will respond to properly, but an Express serving a production build as above will not.\n\nThis is because when there is a fresh page load for a , the server looks for the file and does not find it. The server needs to be configured to respond to a request to by serving . For example, we can amend our Express example above to serve for any unknown paths:\n\nIf you’re using Apache, you need to create a file in the folder that looks like this:\n\nIt will get copied to the folder when you run .\n\nNow requests to will be handled correctly both in development and in production.\n\nBy default, Create React App produces a build assuming your app is hosted at the server root.\n\n To override this, specify the in your , for example:\n\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\n\nIf you are not using the HTML5 history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your :\n\nThis will make sure that all the asset paths are relative to . You will then be able to move your app from to or even without having to rebuild it.\n\nSee this blog post on how to deploy your React app to Microsoft Azure.\n\nInstall the Firebase CLI if you haven’t already by running . Sign up for a Firebase account and create a new project. Run and login with your previous created Firebase account.\n\nThen run the command from your project’s root. You need to choose the Hosting: Configure and deploy Firebase Hosting sites and choose the Firebase project you created in the previous step. You will need to agree with being created, choose as the public directory, and also agree to Configure as a single-page app by replying with .\n\nNow, after you create a production build with , you can deploy it by running .\n\nFor more information see Add Firebase to your JavaScript Project.\n\nThe step below is important!\n\n If you skip it, your app will not deploy correctly.\n\nCreate React App uses the field to determine the root URL in the built HTML file.\n\nNow, whenever you run , you will see a cheat sheet with instructions on how to deploy to GitHub Pages.\n\nTo publish it at https://myusername.github.io/my-app, run:\n\nAdd the following scripts in your :\n\nThe script will run automatically before is run.\n\nFinally, make sure GitHub Pages option in your GitHub project settings is set to use the branch:\n\nYou can configure a custom domain with GitHub Pages by adding a file to the folder.\n\nGitHub Pages doesn’t support routers that use the HTML5 history API under the hood (for example, React Router using ). This is because when there is a fresh page load for a url like , where is a frontend route, the GitHub Pages server returns 404 because it knows nothing of . If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\n• You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to for this effect, but the URL will be longer and more verbose (for example, ). Read more about different history implementations in React Router.\n• Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your page with a special redirect parameter. You would need to add a file with the redirection code to the folder before deploying your project, and you’ll need to add code handling the redirect parameter to . You can find a detailed explanation of this technique in this guide.\n\nUse the Heroku Buildpack for Create React App.\n\n You can find instructions in Deploying React with Zero Configuration.\n\nSometimes works locally but fails during deploy via Heroku. Following are the most common cases.\n\nIf you get something like this:\n\nIt means you need to ensure that the lettercase of the file or directory you matches the one you see on your filesystem or on GitHub.\n\nThis is important because Linux (the operating system used by Heroku) is case sensitive. So and are two distinct directories and thus, even though the project builds locally, the difference in case breaks the statements on Heroku remotes.\n\nIf you exclude or ignore necessary files from the package you will see a error similar this one:\n\nIn this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local or .\n\nSee the Modulus blog post on how to deploy your react app to Modulus.\n\nTo do a manual deploy to Netlify’s CDN:\n\nChoose as the path to deploy.\n\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\n• Pick your Git hosting service and select your repository\n\nTo support , make sure to create a file with the following rewrite rules:\n\nWhen you build the project, Create React App will place the folder contents into the build output.\n• Install the command-line tool either via the recommended desktop tool or via node with .\n• Add this line to in :\n• Run from your project directory. You will see a now.sh URL in your output like this: Paste that URL into your browser when the build is complete, and you will see your deployed app.\n\nDetails are available in this article.\n\nSee this blog post on how to deploy your React app to Amazon Web Services S3 and CloudFront.\n\nInstall the Surge CLI if you haven’t already by running . Run the command and log in you or create a new account. You just need to specify the build folder and your custom domain, and you are done.\n\nNote that in order to support routers that use HTML5 API, you may want to rename the in your build folder to before deploying to Surge. This ensures that every URL falls back to that file.\n\nYou can adjust various development and production settings by setting environment variables in your shell or with .env.\n\nWhen you save a file while is running, the browser should refresh with the updated code.\n\n If this doesn’t happen, try one of the following workarounds:\n• If your project is in a Dropbox folder, try moving it out.\n• If the watcher doesn’t see a file called and you’re referencing it by the folder name, you need to restart the watcher due to a Webpack bug.\n• Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in “Working with editors supporting safe write”.\n• If your project path contains parentheses, try moving the project to a path without them. This is caused by a Webpack watcher bug.\n• On Linux and macOS, you might need to tweak system settings to allow more watchers.\n• If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an file in your project directory if it doesn’t exist, and add to it. This ensures that the next time you run , the watcher uses the polling mode, as necessary inside a VM.\n\nIf none of these solutions help please leave a comment in this thread.\n\nIf you run and the console gets stuck after printing to the console there might be a problem with your Watchman installation as described in facebookincubator/create-react-app#713.\n\nWe recommend deleting in your project and running (or if you use it) first. If it doesn't help, you can try one of the numerous workarounds mentioned in these issues:\n\nIt is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use Homebrew, you can run these commands to update it:\n\nYou can find other installation methods on the Watchman documentation page.\n\nIf this still doesn’t help, try running .\n\nThere are also reports that uninstalling Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.\n\nIt is reported that can fail on machines with no swap space, which is common in cloud environments. If the symptoms are matching, consider adding some swap space to the machine you’re building on, or build the project locally.\n\nThis may be a problem with case sensitive filenames. Please refer to this section.\n\nIf you have ideas for more “How To” recipes that should be on this page, let us know or contribute some!"
    },
    {
        "link": "https://technology.amis.nl/frontend/oracle-application-development-framework/integrating-vue-js-in-adf-faces-12c-web-application-using-html5-style-document-import",
        "document": "Vue.js is a popular framework for developing rich client web applications, leveraging browsers for all they are worth. Vue.js has attracted a large number of developers that together have produced a large number of quite interesting reusable components. ADF Faces is itself a quite mature framework for the development of rich web applications. It was born over 10 years ago. It has evolved over the years and adopted quite a few browser enhancements over the years. However, ADF Faces is still – and will stay – a server side framework that provides only piecemeal support for HTML5 APIs. When developing in ADF Faces, it feels a bit as if your missing out on all those rapid, cool, buzzing developments that take place on the client side.\n\nOracle strongly recommends you to stay inside the boundaries of the framework. To use JavaScript only sparingly. To not mess with the DOM as that may confuse Partial Page Rendering, one of the cornerstones of ADF Faces 11g and 12c. And while I heed these recommendations and warnings, I do not want to miss out on all the goodness that is available to me.\n\nSo we tread carefully. Follow the guidelines for doing JavaScript things in ADF Faces. Try to keep the worlds of ADF Faces en Vue.js apart except for when they need to come into contact.\n\nIn this article, I will discuss how the simplest of Vue.js application code can be integrated in a ‘normal’ ADF Faces web application. Nothing fancy yet, no interaction between ADF Faces client components and Vue.js, no exchange of events or even data. Just a hybrid page that contains ADF Faces content (largely server side rendered) and Vue.js content (HTML based and heavily post processed in JavaScript as is normally the case with Vue.js).\n\nThe steps we have to go through:\n• Create JavaScript module with initialization of Vue.js application content (function VueInit() – data structure, methods, custom components, … (see: https://vuejs.org/v2/guide/instance.html)\n• Create a container in the ADF Faces main page to load the Vue.js content into\n• Import HTML document with Vue.js content into browser and add to main page DOM\n\nWhen these steps are complete, the application can be run. The browser will bring up a page with ADF Faces content as well as Vue.js content. A first step towards a truly hybrid application with mutually integrated components. Or at least some rich Vue.js components enriching the ADF Faces application. Such as the time picker (https://www.npmjs.com/package/vue-clock-picker), the Google Charts integrator (https://github.com/haydenbbickerton/vue-charts) and many more.\n\nThe source code described in this article is in GitHub: https://github.com/lucasjellema/ADFplusVueJS.\n\nA brief overview of the steps and code is provided below. The biggest challenge probably was to get HTML into the ADF Faces page that could not be parsed by the ADF Faces framework (that does not allow the notation used by Vue.js such as :value=”expression” and @click=”function”. Using link for an HTML document is a workaround, followed by a little DOM manipulation. At this moment, this approach is only supported in Chrome browser. For Firefox there is a polyfill available and perhaps an approach based on XMLHttpRequest is viable (see this article).\n\nUse the wizard to create the new application. Then create a new page: main.jsf. Also create a JavaScript module: main.js and import it into the main page:\n\nAdd an af:resource tag that references the online resource https://unpkg.com/vue for the Vue.js 2 framework library.\n\nJust create a new HTML document in the application – for example VueContent.html. Add some Vue.js specific content using data bound syntax with : and {{}} notation. Use a third party component – for example the 3D carousel: https://wlada.github.io/vue-carousel-3d/examples/.\n\nThe final HTML tags are in VueContent.html as is an import of the 3D carousel component (straight JavaScript reference). Some local custom components are defined in VueContent.js; that is also where the data is prepared that is leveraged in this document.\n\nCreate JavaScript module VueContent.js with a function VueInit() that will do the Vue.js application initialization and set up data structure, methods, … (see: https://vuejs.org/v2/guide/instance.html).\n\nIn this library, local custom components are defined – such as app-menu, app-menu-list, update, updates-list, status-replies, post-reply – and third party components are registered – carousel-3d and slide.\n\nThe VueInit() function does the familiar hard Vue.js work:\n\nCreate a container in the ADF Faces main page to load the Vue.js content into\n\nThe Vue.js content can be loaded in the ADF page into a DIV element. Such an element can best be created into an ADF Faces web page by using a af:panelGroupLayout with layout set to vertical (says Duncan Mills):\n\nImport HTML document with Vue.js content into browser and add to main page DOM\n\nJSF 2 allows us to embed HTML in our JSF pages – XHTML and Facelet, jspx and jsff – although as it happens there are more than a few server side parser limitations that make this not so easy. Perhaps this is only for our own good: it forces us to strictly separate the (client side) HTML that Vue.js will work against and the server side files that are parsed and rendered by ADF Faces. We do need a link between these two of course: the document rendered in the browser from the JSF source needs to somehow import the HTML and JavaScript resources.\n\nThe Vue.js content is in a separate HTML document called VueContent.html. To add the content of this document – or at least everything inside a DIV with id=”content” – to the main page, add a <link> element (as described in this article ) and have it refer to the HTML document. Also specify an onload listener to process the content after it has been loaded. Note: this event will fire before the page load event fires.\n\nImplement the function handleLoad(event) in the main.js JavaScript module. Have it get hold of the just loaded document and deep clone it into the DOM, inside the DIV with the app id (the DIV rendered from the panelGroupLayout component).\n\nImport custom Vue.js JavaScript module into main page and call upon Page Load Event\n\nAdd a clientListener component to execute function init() in main.js that will call VueInit() in VueContent.js :\n\nIn function init(), call VueInit() – the function that is loaded from VueContent.js – the JavaScript module that constitutes the Vue.js application together with VueContent.html. In VueInit() the real Vue.js initialization is performed and the data bound content inside DIV app is prepared.\n\nThe overall set up and flow is depicted in this figure:\n\nAnd the application looks like this in JDeveloper:\n\nWhen running, this is what we see in the browser (note: only Chrome supports this code at the moment); the blue rectangle indicates the Vue.js content:\n\nAnd at the bottom of the page, we see the 3D Carousel:\n\nNext steps would have us exchange data and events between ADF Faces components and Vue.js content. But as stated at the beginning – we tread carefully, stick to the ADF framework as much as possible.\n\nHow to include HTML in HTML (W3 Schools) – https://www.w3schools.com/howto/howto_html_include.asp\n\nMe, Myself and JavaScript – Working with JavaScript in an ADF World, Duncan Mills, DOAG 2015 – https://www.doag.org/formes/pubfiles/7495804/docs/Konferenz/2015/vortraege/Development/2015-K-DEV-Duncan_Mills-Me,_Myself_and_JavaScript-Praesentation.pdf"
    },
    {
        "link": "https://docs.steedos.com/developer/micro-page/amis",
        "document": "AMIS is a low-code frontend framework based on JSON configuration, enabling developers to quickly build data-driven applications through declarative programming. It offers a rich component library and flexible interface layout options, allowing developers to define interfaces and interactions with simple JSON configurations, significantly improving development efficiency and reducing development costs.\n\nThe core design philosophy of AMIS is \"simplifying frontend development,\" allowing developers to focus on business logic rather than interface details. By providing a declarative interface description language, AMIS makes the definition of interfaces and logic clearer and more concise. It aims to reduce the repetitive workload of coding and achieve rapid development through preset templates and components while maintaining a high degree of flexibility.\n• Declarative JSON Configuration: Use JSON configurations to define interfaces and logic instead of writing extensive code.\n• Rich Component Library: Includes a variety of components such as forms, tables, lists, and charts to meet most UI requirements.\n• Flexible Data Binding and Transformation: Supports two-way data binding and can perform data transformation and formatting through built-in functions.\n• Powerful Event and Action System: Allows defining actions triggered by events to implement complex interaction logic.\n• Theme and Style Customization: Supports theme customization to easily change the application's appearance and style.\n• Extensibility and Plugins: Add new features and components through extensions and plugin mechanisms.\n\nAMIS is suitable for various application scenarios, especially for rapid development of enterprise-level applications, backend management systems, data visualization interfaces, and complex forms. It helps enterprises quickly build systems like CRM, ERP, CMS, and is also suitable for quickly creating prototypes and MVPs (Minimum Viable Products) to validate business hypotheses or for early-stage product feature demonstrations.\n\nOn the designer page, click the code button on the left to see the component JSON configuration."
    },
    {
        "link": "https://github.com/FNNDSC/ami",
        "document": "Volume rendering, 2D viewer, arbitrary reslicing and more examples and advanced demos there!\n• ES2015 promises support. (consider using polyfills if needed)\n\nNote: you might need to include babel transforms in you build process.\n\nCheck-out the lessons to get started quickly.\n\nNew: Use the new factory not to have to include in index.html.\n\nAdd AMI in your index.html after THREEJS.\n\nGet the source code and related packages.\n\nTo run examples (browserify/babelify/serve the example)\n\nFind out more about the API.\n\nAMI would not exist without them:\n• Base components such as Vectors, Matrices and Objects3D.\n• Was used to figure out how to use the dicom parser properly.\n• Medical imaging in the browser with the A* Medical Imaging (AMI) toolkit. - Rannou et al. - ESMRMB 2017 (poster)\n• Reusable Client-Side JavaScript Modules for Immersive Web-Based Real-Time Collaborative Neuroimage Visualization - Bernal-Rusiel et al. - Frontiers in Neuroinformatics 2017 (article)\n• Volume Visualization Tools for Medical Applications in Ubiquitous Platforms - Arbelaiz et al. - LNICST 2016 (article)\n• Interoperable communication of quantitative image analysis results using DICOM standard (DICOM4QI) - Fedorov et al. - RSNA 2016 (poster)"
    },
    {
        "link": "https://singhdheerendra.medium.com/implementing-multi-framework-in-vanilla-js-with-native-federation-d7580f571a7d",
        "document": "Using several frontend frameworks in one application is often considered an anti-pattern, and for good reason. Current frameworks are not designed to be bootstrapped simultaneously in the same browser tab, especially alongside other frameworks or even different versions of themselves. This approach not only leads to bigger bundles, which can negatively impact performance, but also increases the overall complexity of the application, requiring workarounds to ensure smooth operation.\n\nHowever, there are specific use cases where integrating multiple frameworks becomes necessary:\n• Dealing with Legacy Systems: When maintaining or extending legacy systems, you may need to integrate modern frameworks alongside older ones.\n• Migration to a New UI Framework/Library: During gradual migrations, it’s common to run the old and new frameworks together until the transition is complete.\n• After Merging Companies with Different Tech Stacks: When companies with different frontend technologies merge, a multi-framework approach allows for a smoother integration process.\n\nIn this article, we’ll explore how to implement a multi-framework setup using Vanilla JavaScript with Native Federation, enabling you to render components from frameworks like Angular and React within a single shell application. This approach helps mitigate the challenges mentioned above, providing a flexible and modular solution for complex frontend architectures.\n\nNative Federation is a browser-native implementation that can be used independently of build tools and frameworks. Browser-native means that we rely on modern and future browser technologies such as EcmaScript Modules and Import Maps.\n\nNative Federation’s primary advantage lies in its simplicity and performance. Unlike traditional module federation approaches that rely on Webpack or other bundlers, Native Federation directly utilizes browser capabilities to manage dependencies and module loading. This reduces the need for complex configurations and provides a faster, more seamless experience during development and in production.\n\nWeb Components are a suite of web platform APIs that enable you to create custom, reusable, encapsulated HTML tags for use in web pages and web apps. By using Web Components, you can build isolated and reusable components that work across different frameworks. This is especially useful when integrating multiple frameworks into a single application, as it provides a standardized interface for the shell app to interact with.\n• Shadow DOM: Encapsulate the internal structure of your web component.\n• HTML Templates: Provide structure and markup that can be reused.\n\nThese features ensure that your components remain modular and maintainable, which is crucial when dealing with complex, multi-framework applications."
    }
]