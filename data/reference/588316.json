[
    {
        "link": "https://stackoverflow.com/questions/18260508/c-how-do-i-hide-a-console-window-on-startup",
        "document": "I want to know how to hide a console window when it starts.\n\nIt's for a keylogger program, but it's not my intention to hack someone. It's for a little school project that I want to make to show the dangers about hackers.\n\nHere's my code so far:\n\nI see the window appear and immediately disappear at startup. It seems to open a new console right after that, which is just blank. (By blank I mean \"Press any key to continue..\" I'm wondering if it has anything to do with )\n\nSo I want to know why it opens a new console, instead of only creating and hiding the first one."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/12001",
        "document": "I am working on a project in which there is a login module. This login module is a separate application whereas rest of the program is also divided into different applications. I need to write the backbone of the project i.e the kernel in C++. My question is, how do I execute other applications while running my console in the background, hidden and invisible to the user using other modules in GUI...\n\n \n\n I shall be obliged if anyone could help me. Thanks.\n\nFreeConsole() (and AllocConsole()), but in a C++ program those are problematic to keep hooked up to the standard streams.\n\n \n\n You can also hide and show the window.\n\n std; // I'm using Vista ATM (it's evil), but GCC comes assuming the worst. // If you haven't patched your compiler to agree with the actual version // of the Windows OS, then you will need to make sure you do it like this. // Here's some fun timer stuff for the user. // (Notice how he won't see it work when the // console is hidden, but it will still work.) timeout() { ( cntr = 3; cntr > 0; cntr--) { cout << << cntr << flush; Sleep( 1000 ); } cout << << flush; } // Notice how hiding the console window causes it to disappear from // the Windows task bar. If you only want to make it minimize, use main() { cout << ; timeout(); ShowWindow( GetConsoleWindow(), SW_HIDE ); cout << ; timeout(); ShowWindow( GetConsoleWindow(), SW_RESTORE ); cout << ; 0; } \n\n Hope this helps. You have choices. There is always() (and()), but in a C++ program those are problematic to keep hooked up to the standard streams.You can also hide and show the window.Hope this helps.\n\nNo no Duoas! Thanks a lot for your help buddy but I think you didn't get my question. I don't need to hide my console for some time or perform fancy tricks with the user... I need to write a kernel for a whole suite of application. Here are my motives.\n\n \n\n - The kernel is able to remain in background without showing to the user at all... (PRIORITY-1)\n\n \n\n - The kernel must be able to initialize the application modules as needed...\n\n \n\n (For example let's say there is a program built for taking and validating the username and password... The kernel initializes it, and then the specified program module takes the control of system... It takes the username, the password and matches it from the dtabase on its own and if the username and password are correct, it returns \"SUCCESS\" to kernel and exits.)\n\n \n\n - The kernel must be able to recognize if the previous application ended successfully and then execute the next application.\n\n \n\n (Say the next application is about management of usernames and passwords... The kernel must first recognize that the login application ended successfully and then start the management application... If the kernel is not able to cinfigure the successfull ending of the previous application, a user might be able to hack through the login module of the project easily... He just has to exit the login application and the next module starts... :(!!! So we need to identify if the login application was run till the end and it had validated the passwords and returned them valid befor it exited... Woo-Hoo)\n\n \n\n \n\n I know buddy that is \"MY\" project and I am supposed to work my brains out on this... But you can't imagine how damn long have I been thinking over it before asking you people... But now the time is short and I depend on this project... Please help me if you can. Muito obrigado!\n\n Many many thanks senhore!\n\n\n\n@ Duoas\n\n \n\n You are definitely doing a great work here, buddy... \n\n And please! There is nothing for Sorry about that. :-\\ ...\n\n Your little program helped me understand a new implementation of built-in functions of console...\n\n Except for one problem... GetConsooleWindow() is not recognized by my compiler. It is a Visual Studio (I have tried in MSVC-6 and VS-2005 both)... Is there a solution to this problem...?\n\n \n\n Also please consider that I am a complete newbie, a 1st year student for Software Designing, you might consider. I have studied the C++ course well. However, still there are some areas that the instructors haven't even touched yet they are being considered for grading. You know, I am in a turmoil.\n\n \n\n You explained that my problem can be solved by CreatProcess()... Is that a built-in function? WaitForSingleObject()... Is that built in, too? Or are you referring to defining a class with following manipulators?\n\n \n\n Please Douas, will you be generous enough to give me a practical example of what you have explained and what you think could solve my problem mentioned in previous post... thanks a lot buddy! You really are doing great work here; un complimento :P :) You are definitely doing a great work here, buddy...And please! There is nothing for...Your little program helped me understand a new implementation of built-in functions of console...Except for one problem... GetConsooleWindow() is not recognized by my compiler. It is a Visual Studio ()... Is there a solution toproblem...?Also please consider that I am a complete newbie, a 1st year student for Software Designing, you might consider. I have studied the C++ course well. However, still there are some areas that the instructors haven't even touched yet they are being considered for grading. You know, I am in a turmoil.You explained that my problem can be solved by CreatProcess()... Is that a built-in function? WaitForSingleObject()... Is that built in, too? Or are you referring to defining a class with following manipulators?Please Douas, will you be generous enough to give me a practical example of what you have explained and what you think could solve my problem mentioned in previous post... thanks a lot buddy! You really are doing great work here; un complimento :P :)\n\nHey Douas\n\n \n\n I am really sorry for bothering you again and again... But the is again not working... Somehow, the compiler returns the same error... What might be the problem here?\n\n \n\n Secondly, you are right buddy, Win32 was not actually part of our course! But it was me, who doomed myself... I thought I could do it, so I submitted the abstract of the project as being a Windows Win32 Application with kernel built in C++ and the components built in application of my choice... I know it's my fault... But on second thoughts, why the hell not? While you guys here are helping me out I may even submit the abstract of an OS... LOLxxxxx... \n\n \n\n :) ;) :P Dun Worry, I won't!\n\n \n\n Thanks a lot buddy!"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-hide-a-console-window-on-startup-in-cpp",
        "document": "How to Hide a Console Window On Startup in C++?\n\nThe console is an OS window through which users interact with the operating system either by entering text input through the computer keyboard or by reading text output from the computer terminal.\n\nMethods to Hide A Console Window on Startup in C++\n\n1. Using the ShowWindow() function and IsConsoleVisible() function\n\nShowWindow shows or hides a window. The function can minimize, maximize, or restore a given window. If the function returns 0, it means the window has been hidden before the call and if it returns a non-zero value it had been visible.\n\nMeaning: Hides the window and activates another window.\n\nExplanation: The execution of the program can be understood by understanding the key functions of the program.\n• #include<windows.h> – The windows.h header in C and C++ programming languages are specifically designed for windows and contain a very large number of windows specific functions.\n• ShowWindow. GetConsoleWindow is used to retrieve the window handle used by the console.\n• IsWindowVisible is used to check if a window is visible or not.\n• ShowWindow() – The ShowWindow() function controls how a window will be displayed on the device. SW_HIDE is used to hide the window.\n• GetConsoleWindow() – The GetConsoleWindow() is a function that takes no parameters and returns a handle to the window used by the console associated with the calling process or NULL if there is no such associated console.\n\n\n\nFreeConsole() function can be used for detaching a process from its console. If two or more processes share the same console, the console is not destroyed, but the process that is called FreeConsole cannot refer to it. A console is closed when the last process attached to it terminates or calls FreeConsole() function.\n\nApart from the above methods, we can write these lines in our program to hide the console window on startup."
    },
    {
        "link": "https://stackoverflow.com/questions/21567050/visual-c-hide-console-windows",
        "document": "What good is a console window that you proceed to hide (unless you're making a console window replacement, which you are not making)?\n\nThe easiest way to hide the console window is to not create it in the first place, i.e., simply don't link the exe as a console subsystem executable, but link at as a GUI (a.k.a. \"windows\") subsystem executable.\n\nOne consequence of that is that the standard Windows command interpreter won't wait for the program to finish, but that's all.\n\nAnother option is to run your program via a utility that starts it with the console window hidden. VBScript and Windows Script Host come to mind. But this would be a relatively speaking extreme complication in order to suppress a window that is only there because you've asked for it..."
    },
    {
        "link": "https://cplusplus.com/forum/windows/64739",
        "document": "I was trying to make a application.\n\n i want that application to run as process (no console window)\n\n but i can not hide it completely.\n\n when i use FreeConsole() it hides the window but it shows the console in beginning\n\n like a micro second popup which i don't want.\n\n any other way to hide the console window completely.\n\n \n\n\n\n\n\n \n\n Now give it a name, then click OK. A tiny 2-step wizard appears. Move to the next page, select \"Windows application\" and \"Empty project\".\n\n \n\n Now you're in good shape. Just add a new CPP file and write the entry point:\n\n \n\n //Define the minimum operating system for the application: //Get rid of the annoying min() and max() macros: //Now write the entry point. It is the 21st century, so write Unicode programs. This is the Unicode entry point. wWinMain(HINSTANCE hInst, HINSTANCE prevInst, LPWSTR szCmdLine, nCmdShow) { } \n\n \n\n If you use some other IDE different than Visual Studio, then I don't know how to change the project type, or even if the concept of \"project\" exists in it. Sorry. If you don't want the console, don't create a console program. In Visual Studio, start a new project, expand the left treeview node \"Visual C++\", then select the Win32 subnode. To the right, select Win32 Project.Now give it a name, then click OK. A tiny 2-step wizard appears. Move to the next page, select \"Windows application\" and \"Empty project\".Now you're in good shape. Just add a new CPP file and write the entry point:If you use some other IDE different than Visual Studio, then I don't know how to change the project type, or even if the concept of \"project\" exists in it. Sorry.\n\n\n\n \n\n In a way is completely unnecessary for this post, but in another way it is VERY nessesary. I hate those macros. For that reason, every-time I create a new module in this crazy project that includes windows.h in the pre-compiled header I almost always add: \n\n Heh,In a wayis completely unnecessary for this post, but in another way it is VERY nessesary. I hate those macros. For that reason, every-time I create a new module in this crazy project that includes windows.h in the pre-compiled header I almost always add:\n\nOpen Code::Blocks, Open your Project, Right click the Project Name in the Files tab (Management), and click Properties.\n\n Go in the \"Build Targets\" Tab, and choose Debug or Release, depending on how you compile the program (Probably Debug), and under the \"Type\" List Box, choose \"GUI Application\". Click OK.\n\n You need to do it on every project you want to hide the console window on."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/console/getconsolewindow",
        "document": "This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing usages for the indefinite future. Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-platform scenarios. You can find more information about this design decision in our classic console vs. virtual terminal document.\n\nRetrieves the window handle used by the console associated with the calling process.\n\nThis function has no parameters.\n\nThe return value is a handle to the window used by the console associated with the calling process or NULL if there is no such associated console.\n\nTo compile an application that uses this function, define _WIN32_WINNT as 0x0500 or later. For more information, see Using the Windows Headers.\n\nThis API is not recommended and does not have a virtual terminal equivalent. This decision intentionally aligns the Windows platform with other operating systems. This state is only relevant to the local user, session, and privilege context. Applications remoting via cross-platform utilities and transports like SSH may not work as expected if using this API.\n\nFor an application that is hosted inside a pseudoconsole session, this function returns a window handle for message queue purposes only. The associated window is not displayed locally as the pseudoconsole is serializing all actions to a stream for presentation on another terminal window elsewhere."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow",
        "document": "Controls how the window is to be shown. This parameter is ignored the first time an application calls ShowWindow, if the program that launched the application provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value should be the value obtained by the WinMain function in its nCmdShow parameter. In subsequent calls, this parameter can be one of the following values.\n\nIf the window was previously visible, the return value is nonzero.\n\nIf the window was previously hidden, the return value is zero.\n\nTo perform certain special effects when showing or hiding a window, use AnimateWindow.\n\nThe first time an application calls ShowWindow, it should use the WinMain function's nCmdShow parameter as its nCmdShow parameter. Subsequent calls to ShowWindow must use one of the values in the given list, instead of the one specified by the WinMain function's nCmdShow parameter.\n\nAs noted in the discussion of the nCmdShow parameter, the nCmdShow value is ignored in the first call to ShowWindow if the program that launched the application specifies startup information in the structure. In this case, ShowWindow uses the information specified in the STARTUPINFO structure to show the window. On subsequent calls, the application must call ShowWindow with nCmdShow set to SW_SHOWDEFAULT to use the startup information provided by the program that launched the application. This behavior is designed for the following situations:\n• Applications create their main window by calling CreateWindow with the WS_VISIBLE flag set.\n• Applications create their main window by calling CreateWindow with the WS_VISIBLE flag cleared, and later call ShowWindow with the SW_SHOW flag set to make it visible.\n\nFor an example, see Creating a Main Window."
    },
    {
        "link": "https://stackoverflow.com/questions/1277563/how-do-i-get-the-handle-of-a-console-applications-window",
        "document": "I've just solved this problem for myself (unfortunately before seeing Thomas's answer which is much quicker). Well, here's another way for those who are not satisfied with his answer. I'm writing this answer because I want to provide another answer + a better way to design the class if you're treating your console as a Window. Let's begin with that design:\n\nI've kind of changed the default style of the class. I've actually made it into a class that has a program in it, and not just one method which represent it and uses other classes for content. (If you don't know what I mean, not important).\n\nThe reason I had to do it is because I wanted to write the following event handler:\n\nBecause Console doesn't implement , I had to implement it myself, of course, in order to just call in the 1st argument.\n\nHere is the implementation of it and everything else:\n\nNote: this code is copy-pasted from my application, you can feel free to change the access modifiers\n\nIt uses the following class:\n\nNow, the problem is that you can't actually call in , being a static method, so whatever was in I've moved to a new method named and all is doing is creating a new and calling .\n\nThe result was, of course, a message-box with my console's window as an owner. \n\n Using this method for a message-box, is of course only one application of this method."
    },
    {
        "link": "https://learn.microsoft.com/hu-hu/windows/console/getconsolewindow",
        "document": "This document describes console platform functionality that is no longer a part of our ecosystem roadmap. We do not recommend using this content in new products, but we will continue to support existing usages for the indefinite future. Our preferred modern solution focuses on virtual terminal sequences for maximum compatibility in cross-platform scenarios. You can find more information about this design decision in our classic console vs. virtual terminal document.\n\nRetrieves the window handle used by the console associated with the calling process.\n\nThis function has no parameters.\n\nThe return value is a handle to the window used by the console associated with the calling process or NULL if there is no such associated console.\n\nTo compile an application that uses this function, define _WIN32_WINNT as 0x0500 or later. For more information, see Using the Windows Headers.\n\nThis API is not recommended and does not have a virtual terminal equivalent. This decision intentionally aligns the Windows platform with other operating systems. This state is only relevant to the local user, session, and privilege context. Applications remoting via cross-platform utilities and transports like SSH may not work as expected if using this API.\n\nFor an application that is hosted inside a pseudoconsole session, this function returns a window handle for message queue purposes only. The associated window is not displayed locally as the pseudoconsole is serializing all actions to a stream for presentation on another terminal window elsewhere."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/apiindex/windows-api-list",
        "document": "The following is a list of the reference content for the Windows application programming interface (API) for desktop and server applications.\n\nUsing the Windows API, you can develop applications that run successfully on all versions of Windows while taking advantage of the features and capabilities unique to each version. (Note that this was formerly called the Win32 API. The name Windows API more accurately reflects its roots in 16-bit Windows and its support on 64-bit Windows.)\n\nThe Windows UI API creates and uses windows to display output, prompt for user input, and carry out the other tasks that support interaction with the user. Most applications create at least one window.\n\nThe Diagnostics API enable you to troubleshoot application or system problems and monitor performance.\n\nThe Graphics, multimedia, audio, and video APIs enable applications to incorporate formatted text, graphics, audio, and video.\n\nThe System Services APIs give applications access to the resources of the computer and the features of the underlying operating system, such as memory, file systems, devices, processes, and threads.\n\nThe Security and Identity APIs enable password authentication at logon, discretionary protection for all sharable system objects, privileged access control, rights management, and security auditing.\n\nThe System administration interfaces enable you to install, configure, and service applications or systems.\n\nThe Networking APIs enable communication between applications over a network. You can also create and manage access to shared resources, such as directories and network printers.\n\nThe following are technologies and APIs that are outdated or have been replaced or deprecated from the Windows client and server operating systems.\n• Microsoft UDDI SDK is now included with Microsoft BizTalk Server."
    }
]