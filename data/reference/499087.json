[
    {
        "link": "https://help.syncfusion.com/flutter/pdf-viewer/getting-started",
        "document": "This section explains the steps required to add the SfPdfViewer widget and its features. This section covers only the basic features needed to get started with the Syncfusion® Flutter PDF Viewer plugin.\n\nAdd the Flutter PDF Viewer to an application\n\nCreate a simple project using the instructions given in the Getting Started with your first Flutter app documentation.\n\nAdd the Syncfusion® Flutter PDF Viewer dependency to your pubspec.yaml file.\n\nFor the web platform, we have used PdfJs for rendering the PDF pages, so the script file must be referred to in your file.\n\nOn your file, add the following tags, somewhere in the or of the document:\n\nFor PdfJs library version 4.0 and above\n\nRun the following command to get the required packages.\n\nImport the following package in your Dart code.\n\nOnce the package has been imported, initialize the as a child of any widget. In the following shown examples, the widget is added as a child of the container widget. Several constructors are provided for the various ways that a PDF document can be loaded. They are,\n\nThe SfPdfViewer.asset creates a widget that displays the PDF document obtained from an . The following code example explains the same.\n\nThe SfPdfViewer.network creates a widget that displays the PDF document obtained from a URL. The following code example explains the same.\n\nTo load PDF from network using SfPdfViewer.network in macOS, network access must be enabled in your macOS application. On your file, add the following lines inside the \n\n tag to enable the network access in your application:\n\nThis issue can be resolved by configuring the CORS settings in the requested server or by disabling the security settings in chrome.dart as mentioned in the below steps:\n• Go to flutter\\bin\\cache and remove a file named: flutter_tools.stamp\n• Go to flutter\\packages\\flutter_tools\\lib\\src\\web and open the file chrome.dart.\n\nThe SfPdfViewer.file creates a widget that displays the PDF document obtained from a . The following code example explains the same.\n\nThe SfPdfViewer.memory creates a widget that displays the PDF document obtained from the . The following code example explains the same.\n\nHow to load document from base64 string?\n\nTo load a document from a base64 string, you can convert the base64 string to a Uint8List using the base64Decode method and pass it to the SfPdfViewer.memory constructor. The following code example explains the same.\n• Import the package to use the base64Decode method.\n\nLoad the document with the specified page\n\nThe allows you to load the document with the specified page using the property. The following code example explains the same.\n\nLoad document with the specified scroll offset position or zoom level\n\nThe allows you to load the document with the specified scroll offset position or zoom level using the initialScrollOffset and initialZoomLevel properties. The following code example explains the same.\n\nThe allows you to get the current scroll offset position using the scrollOffset property. The following code example explains the same.\n\nCustomize the space being displayed between the PDF pages\n\nBy default, the displays the spacing between the PDF pages with the value of 4 pixels. You can customize the space being displayed using the pageSpacing property. The following code example explains the same.\n\nCustomize the visibility of scroll head and scroll status\n\nBy default, the displays the scroll head and scroll status. You can customize the visibility of these items using the canShowScrollHead and canShowScrollStatus properties. The following code example explains the same.\n\nBy default, the page navigation dialog will be displayed when the scroll head is tapped. You can customize the visibility of the page navigation dialog using the canShowPaginationDialog property. The following code example explains the same.\n\nBy default, the displays the page loading busy indicator. You can customize the visibility of this using the canShowPageLoadingIndicator property. The following code example explains the same.\n\nThe loading supports the PdfDocumentLoadedCallback and PdfDocumentLoadFailedCallback to notify whether the document has been loaded completely or not.\n\nThe onDocumentLoaded callback triggers after the are loaded in the . The document in the PdfDocumentLoadedDetails will return the loaded PdfDocument instance. The following code example explains the same.\n\nThe onDocumentLoadFailed callback triggers when the document loading fails in the . That is,\n• When any corrupted document is loaded.\n• When any password-protected document is loaded with invalid or empty password.\n• When any improper input source value like the wrong URL or file path is given.\n• When any non-PDF document is loaded.\n\nThe PdfDocumentLoadFailedDetails will return the title and message for the failure reason. The following code example explains the same."
    },
    {
        "link": "https://syncfusion.com/forums/188358/error-when-i-try-to-use-sfpdfviewer-pacakge",
        "document": "We have migrated our source to be compatible with Flutter SDK 3.22.0. In Flutter SDK version 3.22.0, MaterialState and its related APIs have been moved out of the Material library and renamed to WidgetState.\n\nSo, we kindly request that you upgrade the Flutter SDK version to 3.22.0, or else use the package syncfusion_flutter_pdfviewer version below 25.2.4.\n\nWe have also shared the breaking changes documentation below for your reference.\n\nRename MaterialState to WidgetState | Flutter\n\n\n\n\n\nWe hope it will help you resolve the issue. If you have any further queries, please get back to us."
    },
    {
        "link": "https://pub.dev/documentation/syncfusion_flutter_pdfviewer/latest/pdfviewer/SfPdfViewer-class.html",
        "document": "SfPdfViewer lets you display the PDF document seamlessly and efficiently. It is built in the way that a large PDF document can be opened in minimal time and all their pages can be accessed spontaneously.\n\nSfPdfViewer provides option to navigate to the desired pages and bookmarks within the document. Also it allows zooming and customization of features being displayed, such as scroll head, page scroll status and navigation dialog.\n\nThis example demonstrates how to load the PDF document from AssetBundle."
    },
    {
        "link": "https://github.com/syncfusion/flutter-widgets/issues/340",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://pub.dev/documentation/syncfusion_flutter_pdfviewer_duy_izteach/latest/pdfviewer/SfPdfViewer-class.html",
        "document": "SfPdfViewer lets you display the PDF document seamlessly and efficiently. It is built in the way that a large PDF document can be opened in minimal time and all their pages can be accessed spontaneously.\n\nSfPdfViewer provides option to navigate to the desired pages and bookmarks within the document. Also it allows zooming and customization of features being displayed, such as scroll head, page scroll status and navigation dialog.\n\nThis example demonstrates how to load the PDF document from AssetBundle."
    },
    {
        "link": "https://help.syncfusion.com/flutter/pdf-viewer/getting-started",
        "document": "This section explains the steps required to add the SfPdfViewer widget and its features. This section covers only the basic features needed to get started with the Syncfusion® Flutter PDF Viewer plugin.\n\nAdd the Flutter PDF Viewer to an application\n\nCreate a simple project using the instructions given in the Getting Started with your first Flutter app documentation.\n\nAdd the Syncfusion® Flutter PDF Viewer dependency to your pubspec.yaml file.\n\nFor the web platform, we have used PdfJs for rendering the PDF pages, so the script file must be referred to in your file.\n\nOn your file, add the following tags, somewhere in the or of the document:\n\nFor PdfJs library version 4.0 and above\n\nRun the following command to get the required packages.\n\nImport the following package in your Dart code.\n\nOnce the package has been imported, initialize the as a child of any widget. In the following shown examples, the widget is added as a child of the container widget. Several constructors are provided for the various ways that a PDF document can be loaded. They are,\n\nThe SfPdfViewer.asset creates a widget that displays the PDF document obtained from an . The following code example explains the same.\n\nThe SfPdfViewer.network creates a widget that displays the PDF document obtained from a URL. The following code example explains the same.\n\nTo load PDF from network using SfPdfViewer.network in macOS, network access must be enabled in your macOS application. On your file, add the following lines inside the \n\n tag to enable the network access in your application:\n\nThis issue can be resolved by configuring the CORS settings in the requested server or by disabling the security settings in chrome.dart as mentioned in the below steps:\n• Go to flutter\\bin\\cache and remove a file named: flutter_tools.stamp\n• Go to flutter\\packages\\flutter_tools\\lib\\src\\web and open the file chrome.dart.\n\nThe SfPdfViewer.file creates a widget that displays the PDF document obtained from a . The following code example explains the same.\n\nThe SfPdfViewer.memory creates a widget that displays the PDF document obtained from the . The following code example explains the same.\n\nHow to load document from base64 string?\n\nTo load a document from a base64 string, you can convert the base64 string to a Uint8List using the base64Decode method and pass it to the SfPdfViewer.memory constructor. The following code example explains the same.\n• Import the package to use the base64Decode method.\n\nLoad the document with the specified page\n\nThe allows you to load the document with the specified page using the property. The following code example explains the same.\n\nLoad document with the specified scroll offset position or zoom level\n\nThe allows you to load the document with the specified scroll offset position or zoom level using the initialScrollOffset and initialZoomLevel properties. The following code example explains the same.\n\nThe allows you to get the current scroll offset position using the scrollOffset property. The following code example explains the same.\n\nCustomize the space being displayed between the PDF pages\n\nBy default, the displays the spacing between the PDF pages with the value of 4 pixels. You can customize the space being displayed using the pageSpacing property. The following code example explains the same.\n\nCustomize the visibility of scroll head and scroll status\n\nBy default, the displays the scroll head and scroll status. You can customize the visibility of these items using the canShowScrollHead and canShowScrollStatus properties. The following code example explains the same.\n\nBy default, the page navigation dialog will be displayed when the scroll head is tapped. You can customize the visibility of the page navigation dialog using the canShowPaginationDialog property. The following code example explains the same.\n\nBy default, the displays the page loading busy indicator. You can customize the visibility of this using the canShowPageLoadingIndicator property. The following code example explains the same.\n\nThe loading supports the PdfDocumentLoadedCallback and PdfDocumentLoadFailedCallback to notify whether the document has been loaded completely or not.\n\nThe onDocumentLoaded callback triggers after the are loaded in the . The document in the PdfDocumentLoadedDetails will return the loaded PdfDocument instance. The following code example explains the same.\n\nThe onDocumentLoadFailed callback triggers when the document loading fails in the . That is,\n• When any corrupted document is loaded.\n• When any password-protected document is loaded with invalid or empty password.\n• When any improper input source value like the wrong URL or file path is given.\n• When any non-PDF document is loaded.\n\nThe PdfDocumentLoadFailedDetails will return the title and message for the failure reason. The following code example explains the same."
    },
    {
        "link": "https://github.com/syncfusion/flutter-examples/blob/master/lib/samples/pdf_viewer/pdf_viewer_custom_toolbar.dart",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://help.syncfusion.com/flutter/pdf-viewer/form-filling",
        "document": "The SfPdfViewer allows you to fill, edit, save, export, and import the AcroForm fields in a PDF document.\n\nTo get started quickly, you can also check out our video tutorial below.\n\nYou can load and fill in the following form fields in a PDF document using the Flutter PDF Viewer.\n\nProgrammatically add or edit the form data in the document using the getFormFields method, which retrieves the form field collection.\n\nProgrammatically add or edit the text of the text box by changing the text property.\n\nProgrammatically check or uncheck the checkbox by changing the isChecked property.\n\nProgrammatically select an item from the combo box using the selectedItem property.\n\nProgrammatically select an item from the radio buttons using the selectedItem property.\n\nProgrammatically select an item or more from the list box using the selectedItems property.\n\nProgrammatically add or remove the signature in a signature form field by assigning the image bytes or to the signature property.\n\nBy default, the displays the signature pad when tapped on the signature form field. You can customize the visibility of the built-in signature pad using the canShowSignaturePad property. The following code example explains the same.\n\nHow to create and display a custom signature pad?\n\nWith the above option in the , you can easily hide the built-in signature pad and create and display a custom signature pad to draw and add personalized signatures to the signature form field. The following code example explains the same.\n\nIn this example, the custom signature pad using the will be displayed when tapping on the signature field with the following options:\n• Clear - Clears all the signature strokes in the .\n• Save - Saves the signature strokes in the to the signature form field as an image.\n\nTo prevent editing the values of the form fields in the PDF document, set the property of the respective form field to .\n\nThe clearFormData method clears all the form field data in the PDF document. The optional parameter can be used to clear the form field data on a specific page. By default, the parameter is 0. Refer to the following code example.\n\nYou can save the modified form field data by calling the saveDocument method. Refer to the following code example.\n\nFlattening PDF form is a process of removing the form fields in the PDF document, thereby rendering the form fields appearance and content in the page graphics. This will avoid the PDF form being edited on any device. Flutter PDF Viewer supports flattening the PDF form when saving. You can perform this action by setting the PdfFlattenOption to in the method.\n\nBy default, the will be , which means the form fields (except signature fields) can be edited after saving.\n\nRefer to the following code example.\n\nThe Flutter PDF viewer allows users to import and export form data to and from PDF documents. The import and export of form data support the following extensions.\n\nThe required file type can be chosen from the DataFormat enumeration. In the following sections, only the file type is explained for brevity.\n\nThe exportFormData method exports the current data filled in the form fields into a bytes list in the specified data format. Refer to the following code example.\n\nThe importFormData method imports the data from a file of a specified type and fills the saved data into the form fields.\n• To continue the import, if any field generates an error, set the optional parameter to true. This will ignore the error and continue with the next field.\n\nIf you performed undesired actions when editing the form fields, you can undo and redo the action to restore the previous state.\n\nThe undo and redo operations are performed by assigning the instance to the property of the . The UndoHistoryController class contains the and methods to perform the same, respectively. The and properties are used to check whether the undo and redo operations can be performed or not, respectively. The following code example illustrates how to perform the form filling undo and redo operations programmatically with the .\n\nFor desktop platforms such as Windows, macOS, and desktop web, use the following shortcut keys to perform the actions.\n\nThe supports the PdfFormFieldFocusChangeCallback to notify the interaction with the form fields and the PdfFormFieldValueChangedCallback to notify the values changes in the form fields.\n\nThe onFormFieldFocusChange callback triggers when the focus changes in or out of the form field. The PdfFormFieldFocusChangeDetails will return the instance and its focus change value in the property. The following code example explains the same.\n\nThe onFormFieldValueChanged callback triggers when the value is changed in the form field. The PdfFormFieldValueChangedDetails the instance along with its and . The following code example explains the same.\n\nHow to synchronize text form field data with the text entry widget periodically for each character change?\n\nWith the help of the onFormFieldValueChanged callback, we can synchronize text form field data with the text entry widget periodically for each character change. The following code example explains the same.\n\nHow to synchronize text form field data with the text entry widget after filling it out completely?\n\nWith the help of the onFormFieldFocusChange callback, we can synchronize text form field data with the text entry widget after filling it out completely. The following code example explains the same.\n\nHow to perform validation over the form field data?\n\nWith the help of the onFormFieldFocusChange and onFormFieldValueChanged callbacks and the form field programmatic options available in the , we can validate the form field data. The following code examples explain the same.\n\nIn this example, we are validating the form field data in a registration form when saving. The validation includes,"
    },
    {
        "link": "https://pub.dev/documentation/syncfusion_flutter_pdfviewer/latest/pdfviewer/SfPdfViewer-class.html",
        "document": "SfPdfViewer lets you display the PDF document seamlessly and efficiently. It is built in the way that a large PDF document can be opened in minimal time and all their pages can be accessed spontaneously.\n\nSfPdfViewer provides option to navigate to the desired pages and bookmarks within the document. Also it allows zooming and customization of features being displayed, such as scroll head, page scroll status and navigation dialog.\n\nThis example demonstrates how to load the PDF document from AssetBundle."
    },
    {
        "link": "https://github.com/syncfusion/flutter-widgets/issues/235",
        "document": "I read this thread #94 and you said that By wrapping GestureDetector over SfPdfViewer widget, the user interaction in the widget can be identified.\n\nSo I made this code but it doesn't fire event expected.\n\nIs there any solution to catch tap event?\n\nThank for your support."
    }
]