[
    {
        "link": "https://django-rest-framework.org/api-guide/permissions",
        "document": ""
    },
    {
        "link": "https://django-rest-framework.org/tutorial/4-authentication-and-permissions",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/django-rest-api-crud-with-drf",
        "document": "Django REST Framework is used to create web APIs very easily and efficiently. This is a wrapper around the Django Framework. There are three stages before creating an API through the REST framework, Converting a Model’s data to JSON/XML format (Serialization), Rendering this data to the view, and Creating a URL for mapping to the views.\n\nFor this tutorial, we will be building simple REST APIs for supermarket applications. This store contains a variety of food, beverages, and household products, organized into various categories. These categories have subcategories and subcategories have items under them. Each item has a price for which it can be sold. Now we should be able to add, update, view, and delete such records from our database using DRF APIs.\n\nLet’s assume you have Django set up and installed in your system. In case you don’t have any set up at all then refer to the below articles –\n• None How to Create a Basic Project using MVT in Django?\n• None How to Create an App in Django?\n\nTo install Django REST Framework on Windows, Linux or any operating system, one would need pip package. To check how to install pip on your operating system, check out – PIP Installation – Windows || Linux.\n\nAfter installing the REST framework, go to settings.py, and in INSTALLED_APPS add ‘rest_framework’ at the bottom.\n\nFor more information refer to our article Django REST Framework Installation.\n\nAfter installing the DRF and adding it to settings.py, let’s create an app using the command –\n\nA folder with the name api would have been registered by now.\n\nLet’s add this app to INSTALLED_APPS and urls.py also.\n\nNow, add api urls in urls.py. In gfg_shopping.urls.py,\n\nNow let’s create our model. We will create an item model. This model will be used by API to perform the CRUD operations.\n\nNow after our app gets ready let’s create the serializer for our Item class.\n\nSerializers in Django REST Framework converts the objects into data types that are understandable by javascript and front-end frameworks. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.\n\nFor this tutorial, we will use the ModelSerializer. If you want to know more about creating serializers manually then refer to the below articles –\n\nModelSerializer is a layer of abstraction over the default serializer that allows to quickly create a serializer for a model in Django. It provides a shortcut that lets you automatically create a Serializer class with fields that correspond to the Model fields. The ModelSerializer class is the same as a regular Serializer class, except that:\n• None It will automatically generate a set of fields for you, based on the model.\n• None It will automatically generate validators for the serializer, such as unique_together validators.\n• None It includes simple default implementations of .create() and .update().\n\nNow let’s create our serlializers.py file in the api folder and add the below code –\n\nTo render data into frontend, and handle requests from user, we need to create a view. In Django REST Framework, we call these viewsets, so let’s create a view in apis/views.py,\n\nIn the above code, the api_view decorator takes a list of HTTP methods that a views should response to. Other methods will response with the Method Not Allowed.\n\nNow let’s un our server. Run the following commands –\n\nNow let’s implement our CRUD Operations through our API.\n\nNow our create view will use the POST method for inserting data into our database. Let’s create our add_items function in the views.py file.\n\nNow let’s update our urls.py file and add the endpoint for the create view function we just created.\n\nNow our list view will use the GET method for retrieving data from our database. Let’s create our view_items function in the views.py file. This view_items function will either show all the data or filtered data queried by the user according to the category, subcategory, or name.\n\nThis view function also lets us filter by category or subcategory. You can use either of the following URLs i.e. http://127.0.0.1:8000/api/?category=category_name or http://127.0.0.1:8000/api/?subcategory=category_name to filter for both category and subcategory respectively. You can also use http://127.0.0.1:8000/api/all/?name=item_name to search for a specific item.\n\nIf we visit http://127.0.0.1:8000/api/all/?category=food our search result will narrow down to –\n\nNow for our update view function we will use the POST method. Let’s create our update_items function in the views.py file. This view function will update a particular item from the database. It will filter the item with the help of the primary key.\n\nFor our delete view function we will use the DELETE method. Let’s create our delete_items function in the views.py file. This view function will delete a particular item from the database.\n\nNow visit http://127.0.0.1:8000/api/item/pk/delete/. See the below GIF for better understanding."
    },
    {
        "link": "https://stackoverflow.com/questions/38204553/django-rest-framework-permission-to-create",
        "document": "I have a CRUD in django rest framework and to control the permissions I'm using permission classes. Here is the permission class I created for the CRUD. This works well for update and delete:\n\nMy Problem if that this class does not work well for my create view:\n\nWhen returns false I cannot create, update or delete model objects. The same for . I can only create, update or delete when the user is the owner. All this works as I want for update and delete, just for create that it is not working. Probably because I don't have the object yet, that's the core of my question.\n\nThe object exists when creating and I have also tried to just at and I still can create the record.\n\nShould I create a new permission class for the insert or should I change something in my view?\n\nThanks for any help"
    },
    {
        "link": "https://medium.com/@nagarjunmallesh/building-and-documenting-apis-with-django-rest-framework-a-guide-to-function-based-views-64fcd9827b15",
        "document": "In the evolving landscape of web development, creating APIs that are both efficient and maintainable is crucial for the success of any backend system. Django REST Framework (DRF) emerges as a powerful toolkit for building Web APIs, offering flexibility, scalability, and robustness. While class-based views are commonly used for their object-oriented approach, function-based views hold their ground for offering explicit control and simplicity, especially for specific, tailored endpoints.\n\nThis guide dives into the practical aspects of using function-based views in DRF to implement CRUD operations, providing a step-by-step approach to setting up your project, defining views, and routing URLs. Moreover, it highlights the importance of API documentation and testing, introducing for generating Swagger documentation—a critical tool for API visibility and maintenance. Through comprehensive examples and detailed instructions, this article will equip you with the knowledge to build, document, and test your APIs, laying down a solid foundation for developing advanced and highly interactive web applications.\n\nEnsure DRF is installed in your virtual environment:\n\nIn , define function-based views for each CRUD operation:\n\nConfigure URLs in to route requests to the appropriate view\n\nDocumenting your API is crucial for both internal developers and external consumers. is a powerful tool for generating real-time Swagger UI documentation.\n\nModify your project’s to include the Swagger UI:\n\nTesting is a critical part of API development, ensuring your endpoints behave as expected.\n\nIn , use Django's to write tests for your API:\n\nRunning tests frequently ensures that your API remains stable and predictable as you make changes and add features.\n\nBy following these steps, you’ve not only created a Django REST Framework API with function-based views but also documented it using Swagger for ease of use and tested it to ensure reliability. This approach provides a solid foundation for developing and maintaining robust APIs."
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/topics/db/examples/many_to_one",
        "document": "In this example, a can be associated with many objects, but an can only have one object:\n\nWhat follows are examples of operations that can be performed using the Python API facilities.\n\nNote that you must save an object before it can be assigned to a foreign key relationship. For example, creating an with unsaved raises :\n\nArticle objects have access to their related Reporter objects:\n\nCreate an Article via the Reporter object:\n\nAdd the same article to a different article set - check that it moves:\n\nAdding an object of the wrong type raises TypeError:\n\nNote that in the last example the article has moved from John to Paul.\n\nRelated managers support field lookups as well. The API automatically follows relationships as far as you need. Use double underscores to separate relationships. This works as many levels deep as you want. There’s no limit. For example:\n\nQuery twice over the related field. This translates to an AND condition in the WHERE clause:\n\nFor the related lookup you can supply a primary key value or pass the related object explicitly:\n\nYou can also use a queryset instead of a literal list of instances:\n\nCounting in the opposite direction works in conjunction with :\n\nQueries can go round in circles:\n\nIf you delete a reporter, their articles will be deleted (assuming that the ForeignKey was defined with set to , which is the default):\n\nYou can delete using a JOIN in the query:"
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/topics/db/models",
        "document": "A model is the single, definitive source of information about your data. It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table.\n• None Each model is a Python class that subclasses .\n• None Each attribute of the model represents a database field.\n• None With all of this, Django gives you an automatically-generated database-access API; see Making queries.\n\nDefine custom methods on a model to add custom “row-level” functionality to your objects. Whereas methods are intended to do “table-wide” things, model methods should act on a particular model instance. This is a valuable technique for keeping business logic in one place – the model. For example, this model has a few custom methods: The last method in this example is a property. The model instance reference has a complete list of methods automatically given to each model. You can override most of these – see overriding predefined model methods, below – but there are a couple that you’ll almost always want to define: A Python “magic method” that returns a string representation of any object. This is what Python and Django will use whenever a model instance needs to be coerced and displayed as a plain string. Most notably, this happens when you display an object in an interactive console or in the admin. You’ll always want to define this method; the default isn’t very helpful at all. This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object. Any object that has a URL that uniquely identifies it should define this method. There’s another set of model methods that encapsulate a bunch of database behavior that you’ll want to customize. In particular you’ll often want to change the way and work. You’re free to override these methods (and any other model method) to alter behavior. A classic use-case for overriding the built-in methods is if you want something to happen whenever you save an object. For example (see for documentation of the parameters it accepts): You can also prevent saving: # Yoko shall never have her own blog! It’s important to remember to call the superclass method – that’s that business – to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won’t happen and the database won’t get touched. It’s also important that you pass through the arguments that can be passed to the model method – that’s what the bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new keyword arguments. If you use in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added. If you wish to update a field value in the method, you may also want to have this field added to the keyword argument. This will ensure the field is saved when is specified. For example: See Specifying which fields to save for more details. Overridden model methods are not called on bulk operations Note that the method for an object is not necessarily called when deleting objects in bulk using a QuerySet or as a result of a . To ensure customized delete logic gets executed, you can use and/or signals. Unfortunately, there isn’t a workaround when or objects in bulk, since none of , , and are called. Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on using raw SQL.\n\nModel inheritance in Django works almost identically to the way normal class inheritance works in Python, but the basics at the beginning of the page should still be followed. That means the base class should subclass . The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models. There are three styles of inheritance that are possible in Django.\n• None Often, you will just want to use the parent class to hold information that you don’t want to have to type out for each child model. This class isn’t going to ever be used in isolation, so Abstract base classes are what you’re after.\n• None If you’re subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, Multi-table inheritance is the way to go.\n• None Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use Proxy models. Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put in the Meta class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class. The model will have three fields: , and . The model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly. Fields inherited from abstract base classes can be overridden with another field or value, or be removed with . For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, while still only creating one database table per child model at the database level. When an abstract base class is created, Django makes any Meta inner class you declared in the base class available as an attribute. If a child class does not declare its own Meta class, it will inherit the parent’s Meta. If the child wants to extend the parent’s Meta class, it can subclass it. For example: Django does make one adjustment to the Meta class of an abstract base class: before installing the Meta attribute, it sets . This means that children of abstract base classes don’t automatically become abstract classes themselves. To make an abstract base class that inherits from another abstract base class, you need to explicitly set on the child. Some attributes won’t make sense to include in the Meta class of an abstract base class. For example, including would mean that all the child classes (the ones that don’t specify their own Meta) would use the same database table, which is almost certainly not what you want. Due to the way Python inheritance works, if a child class inherits from multiple abstract base classes, only the Meta options from the first listed class will be inherited by default. To inherit Meta options from multiple abstract base classes, you must explicitly declare the Meta inheritance. For example: Be careful with and ¶ If you are using or on a or , you must always specify a unique reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including and ) each time. To work around this problem, when you are using or in an abstract base class (only), part of the value should contain and .\n• None is replaced by the lowercased name of the child class that the field is used in.\n• None is replaced by the lowercased name of the app the child class is contained within. Each installed application name must be unique and the model class names within each app must also be unique, therefore the resulting name will end up being different. For example, given an app : Along with another app : The reverse name of the field will be and the reverse query name will be . The reverse name of the field will be and the reverse query name will be . Finally, the reverse name of the field will be and the reverse query name will be . It’s up to you how you use the and portion to construct your related name or related query name but if you forget to use it, Django will raise errors when you perform system checks (or run ). If you don’t specify a attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by , just as it normally would be if you’d declared the field directly on the child class. For example, in the above code, if the attribute was omitted, the reverse name for the field would be in the case and for the field. The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created ). For example: All of the fields of will also be available in , although the data will reside in a different database table. So these are both possible: If you have a that is also a , you can get from the object to the object by using the lowercase version of the model name: # If p is a Restaurant object, this will give the child class: However, if in the above example was not a (it had been created directly as a object or was the parent of some other class), referring to would raise a exception. The automatically-created on that links it to looks like this: You can override that field by declaring your own with on . In the multi-table inheritance situation, it doesn’t make sense for a child class to inherit from its parent’s Meta class. All the Meta options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn’t exist in its own right). So a child model does not have access to its parent’s Meta class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an attribute or a attribute, it will inherit these from its parent. If the parent has an ordering and you don’t want the child to have any natural ordering, you can explicitly disable it: Because multi-table inheritance uses an implicit to link the child and the parent, it’s possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default value for and relations. If you are putting those types of relations on a subclass of the parent model, you must specify the attribute on each such field. If you forget, Django will raise a validation error. For example, using the above class again, let’s create another subclass with a : This results in the error: Reverse query name for 'Supplier.customers' clashes with reverse query HINT: Add or change a related_name argument to the definition for Adding to the field as follows would resolve the error: . As mentioned, Django will automatically create a linking your child class back to any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own and set to indicate that your field is the link back to the parent class. When using multi-table inheritance, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model – perhaps to change the default manager, or add a new method. This is what proxy model inheritance is for: creating a proxy for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original. Proxy models are declared like normal models. You tell Django that it’s a proxy model by setting the attribute of the class to . For example, suppose you want to add a method to the model. You can do it like this: The class operates on the same database table as its parent class. In particular, any new instances of will also be accessible through , and vice-versa: You could also use a proxy model to define a different default ordering on a model. You might not always want to order the model, but regularly order by the attribute when you use the proxy: Now normal queries will be unordered and queries will be ordered by . Proxy models inherit attributes in the same way as regular models. s still return the model that was requested¶ There is no way to have Django return, say, a object whenever you query for objects. A queryset for objects will return those types of objects. The whole point of proxy objects is that code relying on the original will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the (or any other) model everywhere with something of your own creation. A proxy model must inherit from exactly one non-abstract model class. You can’t inherit from multiple non-abstract models as the proxy model doesn’t provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do not define any model fields. A proxy model may also inherit from any number of proxy models that share a common non-abstract parent class. If you don’t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available. Continuing our example from above, you could change the default manager used when you query the model like this: If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the custom manager documentation: create a base class containing the new managers and inherit that after the primary base class: # Create an abstract class for the new manager. You probably won’t need to do this very often, but, when you do, it’s possible. Proxy model inheritance might look fairly similar to creating an unmanaged model, using the attribute on a model’s class. With careful setting of you could create an unmanaged model that shadows an existing model and adds Python methods to it. However, that would be very repetitive and fragile as you need to keep both copies synchronized if you make any changes. On the other hand, proxy models are intended to behave exactly like the model they are proxying for. They are always in sync with the parent model since they directly inherit its fields and managers.\n• None If you are mirroring an existing model or database table and don’t want all the original database table columns, use . That option is normally useful for modeling database views and tables not under the control of Django.\n• None If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use . This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved. Just as with Python’s subclassing, it’s possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. Meta) appears in will be the one that is used; for example, this means that if multiple parents contain a Meta class, only the first one is going to be used, and all others will be ignored. Generally, you won’t need to inherit from multiple parents. The main use-case where this is useful is for “mix-in” classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won’t have to struggle to work out where a particular piece of information is coming from. Note that inheriting from multiple models that have a common primary key field will raise an error. To properly use multiple inheritance, you can use an explicit in the base models: Or use a common ancestor to hold the . This requires using an explicit from each parent model to the common ancestor to avoid a clash between the fields that are automatically generated and inherited by the child: Field name “hiding” is not permitted¶ In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this isn’t usually permitted for model fields. If a non-abstract model base class has a field called , you can’t create another model field or define an attribute called in any class that inherits from that base class. This restriction doesn’t apply to model fields inherited from an abstract model. Such fields may be overridden with another field or value, or be removed by setting . Model managers are inherited from abstract base classes. Overriding an inherited field which is referenced by an inherited may cause subtle bugs. See custom managers and model inheritance. Some fields define extra attributes on the model, e.g. a defines an extra attribute with appended to the field name, as well as and on the foreign model. These extra attributes cannot be overridden unless the field that defines it is changed or removed so that it no longer defines the extra attribute. Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in ) and serialization. These are features which normal Python class inheritance doesn’t have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn’t arbitrary. This restriction only applies to attributes which are instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables). Django will raise a if you override any model field in any ancestor model. Note that because of the way fields are resolved during class definition, model fields inherited from multiple abstract parent models are resolved in a strict depth-first order. This contrasts with standard Python MRO, which is resolved breadth-first in cases of diamond shaped inheritance. This difference only affects complex model hierarchies, which (as per the advice above) you should try to avoid."
    },
    {
        "link": "https://stackoverflow.com/questions/6928692/how-to-express-a-one-to-many-relationship-in-django",
        "document": "I'm defining my Django models right now and I realized that there wasn't a in the model field types. I'm sure there's a way to do this, so I'm not sure what I'm missing. I essentially have something like this:\n\nIn this case, each can have multiple s, but the relationship should be unidirectional, in that I don't need to know from the which owns it, per se, as I might have many different objects that own instances, such as a for example:\n\nWhat would I replace (which doesn't exist) with in the model to represent this kind of relationship? I'm coming from Hibernate/JPA where declaring a one-to-many relationship was as easy as:\n\nHow can I express this in Django?"
    },
    {
        "link": "https://forum.djangoproject.com/t/setting-up-models-with-multiple-foreign-key-relationships/26758",
        "document": "Thank you for the feedback. I had assumed that concretely inheriting from to create new and classes wouldn’t work without also using a generic foreign key to relate both of these new classes to . But I just tried it and it seems to work if I simply leave as the foreign key. By “work”, I mean that creating a and calling will return a or instead of a , if a or was assigned to the field in the .\n\nBelow are the new class definitions, updated with some additional fields to distinguish between classes:\n\nGoing into the shell with and creating some objects like this…\n\n…then Alice is a , and is returned as a from , as shown below. This means that fields defined in (the field) and (the ) can both be accessed, even though the foreign key in is to a instead of a (I didn’t expect this behavior):\n\nThe team leader (as an object) and members (as a query set) can be accessed directly from a instance:\n\nTrying to add a second leader fails, as expected, due to the one-to-one constraint from to :\n\nI thought about doing this the other way, too, without concrete inheritance… If instead of doing inheritance as above, I added a field to the class with options of “Leader” and “Member”, I think I would need to add a custom method to prevent more than one Person with a role of from being added to a . Additionally, I think I’d need to add methods (or @property) to the class to be able to directly return and as an object and a query set, respectively, i.e., instead of writing queries to access them each time, just put the queries in methods or @property in . (accessing them directly from would make templating easier, etc.)\n\nAll of that behavior comes automatically when using concrete inheritance, though, so inheritance seems like a more direct approach in this case. I’ve seen people say that concrete inheritance is not a great idea, though. What are the potential pitfalls?"
    },
    {
        "link": "https://stackoverflow.com/questions/78839170/django-models-relationships-and-fetching-or-excluding-related-data-from-datab",
        "document": "I'm having a hard time finding a decent explanation about this in django's official documentation, so I'll ask my question here.\n\nin django 5.0 if two models have a relationship (let's call them and ) with whether a OneToOneField, ForeignKey or ManyToManyField , when you fetch some objects from the database with a query like this :\n\ndo the objects related to the objects in (which are of the type ) get fetched and joined to the queryset automatically?\n\nif the answer to my question is YES, I wanna know how to exclude some related data from the queryset and if the answer is NO, I wanna know how to include them in the queryset.\n\nnote that the relationship might be of any type (one-to-one , many-to-one, many-to-many) and can be a reverse or forward relationship. if the answer to my question depends on the type of relationship between two objects, please explain all the possible cases.\n\nif you know where exactly I can read about this, please leave me a link.\n\nI've tried asking a bunch of AIs about this but they just confused me with contradictory answers."
    }
]