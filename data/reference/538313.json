[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/text-align",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 .\n\n* Some parts of this feature may have varying levels of support."
    },
    {
        "link": "https://stackoverflow.com/questions/4980525/css-center-display-inline-block",
        "document": "I have a working code here: http://jsfiddle.net/WVm5d/ (you might need to make the result window bigger to see the align center effect)\n\nThe code works fine but I don't like to have . It's the only way I could make the wrap-class align center. I think it would be better if there was a way to use or . Is it possible to solve the align center another way?\n\nAdding a fixed with to the container is not an option for me.\n\nI will also paste my code here if the JS Fiddle link gets broken in the future:"
    },
    {
        "link": "https://w3schools.com/css/css_inline-block.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://w3schools.com/cssref/pr_text_text-align.php",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://blog.hubspot.com/website/center-text-in-css",
        "document": "How to Set Opacity of Images, Text & More in CSS"
    },
    {
        "link": "https://stackoverflow.com/questions/4980525/css-center-display-inline-block",
        "document": "I have a working code here: http://jsfiddle.net/WVm5d/ (you might need to make the result window bigger to see the align center effect)\n\nThe code works fine but I don't like to have . It's the only way I could make the wrap-class align center. I think it would be better if there was a way to use or . Is it possible to solve the align center another way?\n\nAdding a fixed with to the container is not an option for me.\n\nI will also paste my code here if the JS Fiddle link gets broken in the future:"
    },
    {
        "link": "https://stackoverflow.com/questions/8748654/how-to-center-multiple-inline-block-elements-with-css",
        "document": "I want to horizontally center two (or possibly more) inline-block elements inside a container block element. It should look like this:\n\nHowever, with my broken code, it is currently looking like this:\n\nThe reason why the two anchors have to be inline-block and not just plain inline is because I don't want the anchor's padding and margin to overlap."
    },
    {
        "link": "https://css-tricks.com/centering-css-complete-guide",
        "document": "Centering things in CSS is the poster child of CSS complaining. Why does it have to be so hard? They jeer. I think the issue isn’t that it’s difficult to do, but in that there so many different ways of doing it, depending on the situation, it’s hard to know which to reach for.\n\nSo let’s make it a decision tree and hopefully make it easier.\n\nIs it inline or inline-* elements (like text or links)? You can center inline elements horizontally, within a block-level parent element, with just: This will work for inline, inline-block, inline-table, inline-flex, etc. You can center a block-level element by giving it and of (and it has a set , otherwise it would be full width and wouldn’t need centering). That’s often done with shorthand like this: This will work no matter what the width of the block level element you’re centering, or the parent. Note that you can’t an element to the center. There is a trick though. Is there more than one block level element? If you have two or more block-level elements that need to be centered horizontally in a row, chances are you’d be better served making them a different type. Here’s an example of making them and an example of flexbox: Unless you mean you have multiple block level elements stacked on top of each other, in which case the auto margin technique is still fine:\n\nIs it inline or inline-* elements (like text or links)? Sometimes inline / text elements can appear vertically centered, just because there is equal padding above and below them. If padding isn’t an option for some reason, and you’re trying to center some text that you know will not wrap, there is a trick were making the equal to the height will the text. Equal padding on top and bottom can give the centered effect for multiple lines of text too, but if that isn’t going to work, perhaps the element the text is in can be a table cell, either literally or made to behave like one with CSS. The property handles this, in this case, unlike what it normally does which is handle the alignment of elements aligned on a row. (More on that.) If something table-like is out, perhaps you could use flexbox? A single flex-child can be made to center in a flex-parent pretty easily. Remember that it’s only really relevant if the parent container has a fixed height (px, %, etc), which is why the container here has a height. If both of these techniques are out, you could employ the “ghost element” technique, in which a full-height pseudo-element is placed inside the container and the text is vertically aligned with that. Do you know the height of the element? It’s fairly common to not know the height in web page layout, for lots of reasons: if the width changes, text reflow can change the height. Variance in the styling of text can change the height. Variance in the amount of text can change the height. Elements with a fixed aspect ratio, like images, can change height when resized. Etc. But if you do know the height, you can center vertically like: .parent { position: relative; } .child { position: absolute; top: 50%; height: 100px; margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */ } Is the element of unknown height? It’s still possible to center it by nudging it up half of it’s height after bumping it down halfway: Do you care if the element stretches the height of the container? If you don’t, you just need the content inside vertically centered, using tables or CSS display to make elements into tables can do the trick. Can you use flexbox? No big surprise, this is a lot easier in flexbox. You can also get centering in flexbox using on the child element.\n\nYou can combine the techniques above in any fashion to get perfectly centered elements. But I find this generally falls into three camps: Is the element of fixed width and height? Using negative margins equal to half of that width and height, after you’ve absolutely positioned it at 50% / 50% will center it with great cross-browser support: Is the element of unknown width and height? If you don’t know the width or height, you can use the transform property and a negative translate of 50% in both directions (it is based on the current width/height of the element) to center: Can you use flexbox? To center in both directions with flexbox, you need to use two centering properties: Can you use grid? This is just a little trick (sent in by Lance Janssen) that will pretty much work for one element:"
    },
    {
        "link": "https://geeksforgeeks.org/css-centering-elements",
        "document": "Sometimes we face problems with centering an element in a web page. Is it really so hard? It is not too difficult to center an element. There so many different ways of doing it. \n\nOne thing we need to know is that, which technique is for which purpose. Once you understand the problem, picking up the best technique will be much easier. \n\nSo let us see some situation and discuss the best method to achieve the goal.\n• Horizontally\n• Inline elements \n\nWe can easily center an inline element within a block level element like this:\n• Block level elements \n\nWe can center a block-level element by giving it margin-left and margin-right of auto (which has a known specified width):\n• More than one block level elements \n\nIf we have two or more block-level elements that need to be centered horizontally in a row, it can be better served making them a different display type display: inline-block;\n• Vertically\n• Inline elements \n\nWe can easily center an inline element within a block level element like this:\n• Block level elements of known height \n\nWe can easily center an inline element within a block level element like this:\n• Block level elements of unknown height \n\nWe can easily center an inline element within a block level element like this:\n• Both Horizontally & Vertically\n• Element with fixed height and width \n\nUsing negative margins equal to half of that width and height, after you’ve absolutely positioned it at 50% / 50% will center it.\n• Element with unknown height and width \n\nWhen we don’t know the width or height, we can use the transform property and a negative translate of 50% in both directions to center:\n\nNote: The ‘.’ operator is used in CSS to identify a CSS class. In the above examples, the class parent is used to style the parent element and the class child is used for the child element."
    },
    {
        "link": "https://sitepoint.com/community/t/inline-block-element-refuses-to-be-centered/270271",
        "document": "His original code he posted works just fine for me. The version you posted has changed a bit, but I don’t get any problem with the viewport tag. It’s mainly that you removed the padding that makes the menu clear the heading of the page.\n\nGoing back to your original code.\n\n To begin with, you must start with the doctype declaration and opening html tag which were omitted from the post. you need these to be valid. If in doubt, use the validator to check your code for errors, it’s a important tool.\n\n Speaking of important, the css gets off to a bad start too:-\n\nAvoid using in your css, it can be very damaging. It should only be used in vary rare cases when you absolutely need to, which is almost never. If you find that you “absolutely need to” with any frequency, then the chances are you are doing something wrong somewhere.\n\n In this case there is absolutely no need for it.\n\nWhen it comes to font sizes (or any property relating to text) it’s best to avoid px as it’s a fixed unit and can prevent people the freedom to alter their browsers default font size. Best to use relative units like or .\n\nKudos for that. That’s best for accessibility, when you want text in caps, don’t use caps, use\n\nYou can’t have any content inside of the section, it must be inside the section. Again, the validator will tell you this, use it.\n\nIn-line style attributes are another thing to be avoided, they are notoriously unmaintainable, inflexible and make for ugly, inflated html. Keep all your styling in the css.\n\nAnother thing to avoid, unless you absolutely need to and know what you are doing. That is absolute positioning, for the most part you should not need it and only use it in a few special edge cases. Keep your content in the natural document flow as much as possible.\n\nThis elements is obsolete, not a part of html5. It’s a thow-back to the days before we had css and had to use html elements and attribute to control styling and layout. Anything to do with styling and layout should be done with css.\n\n You can centre a block element by giving the side margins a value of as seen in coothead’s example where defines the top margin, is both sides and is the bottom margin.\n\n Notice how the has no unit specified, it doesn’t need one, as is the same in any unit of measure, so don’t use .\n\nHeadings should follow a hierarchy, starting with as the first and main heading then any sub-headings following being and so on. Same level subheadings should of course be the same. If the size of is too much, change it via css.\n\nAlso avoid fixed widths and heights. Widths need to be flexible for a page to be responsive and display on any size screen. Where you may wan to use in a fixed unit, use instead. Height should be flexible too and defined by the content within, if you want more space in an element, use or .\n\nThe tags should only be found in the head section of the document, you don’t need the attribute in html5."
    }
]