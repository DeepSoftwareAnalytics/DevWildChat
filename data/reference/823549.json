[
    {
        "link": "https://developer.chrome.com/docs/extensions/reference/manifest/web-accessible-resources",
        "document": "Web-accessible resources are files inside an extension that can be accessed by web pages or other extensions. Extensions typically use this feature to expose images or other assets that need to be loaded in web pages, but any asset included in an extension's bundle can be made web accessible.\n\nBy default no resources are web accessible, as this allows a malicious website to fingerprint extensions that a user has installed or exploit vulnerabilities (for example XSS bugs) in installed extensions. Only pages or scripts loaded from an extension's origin can access that extension's resources.\n\nUse the manifest property to declare which resources are exposed and to what origins. This property is an array of objects that declares resource access rules. Each object maps an array of extension resources to an array of URLs and/or extension IDs that can access those resources.\n\nEach object in the array contains these elements:\n\nEach element must include a element and either a or element. This establishes a mapping that exposes the specified resources to either web pages matching the pattern or to extensions with matching IDs. The element is optional.\n\nResources are available in a webpage via the URL , which can be generated with the method. The resources are served with appropriate CORS headers, so they're available via .\n\nA navigation from a web origin to an extension resource is blocked unless the resource is listed as web accessible. Note these corner cases:\n• When an extension uses the webRequest API to redirect a public resource request to a resource that is not web accessible, such a request is also blocked.\n• The above holds true even if the resource that is not web accessible is owned by the redirecting extension.\n• Navigation is blocked in incognito mode unless the value of the field is set to .\n\nContent scripts themselves do not need to be allowed.\n\nThe Web Accessible Resources example demonstrates the use of this element in a working extension."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/web_accessible_resources",
        "document": "Sometimes you want to package resources—for example, images, HTML, CSS, or JavaScript—with your extension and make them available to web pages and other extensions.\n\nFor example, the Beastify example extension replaces a web page with an image of a beast selected by the user. The beast images are packaged with the extension. To make the selected image visible, the extension adds elements whose attribute points to the beast's image. For the web page to be able to load the images, they must be made web accessible.\n\nWith the key, you list all the packaged resources that you want to make available to web pages. You specify them as paths relative to the manifest.json file.\n\nNote that content scripts don't need to be listed as web accessible resources.\n\nIf an extension wants to use or to redirect a public URL (e.g., HTTPS) to a page that's packaged in the extension, then the extension must list the page in the key."
    },
    {
        "link": "https://stackoverflow.com/questions/66636403/manifest-v3-resources-must-be-listed-in-the-web-accessible-resources",
        "document": "I get this error even if \"image/copy.svg\" is properly declared in the manifest.json\n\nDenying load of chrome-extension://pofbdjeepddggbelfghnndllidnalpde/images/copy.svg. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.\n\nIf I go to chrome-extension://pofbdjeepddggbelfghnndllidnalpde/images/copy.svg I can successfully see the loaded image."
    },
    {
        "link": "https://github.com/GoogleChrome/developer.chrome.com//blob/main/site/en/docs/extensions/mv3/manifest/web_accessible_resources/index.md",
        "document": "Web-accessible resources are files inside an extension that can be accessed by web pages or other extensions. Extensions typically use this feature to expose images or other assets that need to be loaded in web pages, but any asset included in an extension's bundle can be made web accessible.\n\nBy default no resources are web accessible, as this allows a malicious website to fingerprint extensions that a user has installed or exploit vulnerabilities (for example XSS bugs) in installed extensions. Only pages or scripts loaded from an extension's origin can access that extension's resources.\n\nUse the manifest property to declare which resources are exposed and to what origins. This property is an array of objects that declares resource access rules. Each object maps an array of extension resources to an array of URLs and/or extension IDs that can access those resources.\n\nEach object in the array contains these elements:\n\n: An array of strings, each containing a relative path to a given resource from the extension's root directory. Resources may contain asterisks ( ) for wildcard matches. For example, exposes everything in the extension's directory, recursively, while exposes all PNG files.\n\n: An array of strings, each containing a match pattern that specifies which sites can access this set of resources. Only the origin is used to match URLs. Origins include subdomain matching. Google Chrome emits an \"Invalid match pattern\" error if the pattern has a path other than '/*'.\n\n: An array of strings, each containing the ID of an extension that can access the resources.\n\n: If true, only allow resources to be accessed through a dynamic ID. A dynamic ID is generated per session. That means it is regenerated when the browser restarts or the extension reloads.\n\nEach element must include a element and either a or element. This establishes a mapping that exposes the specified resources to either web pages matching the pattern or to extensions with matching IDs. The element is optional.\n\nResources are available in a webpage via the URL , which can be generated with the method. The resources are served with appropriate CORS headers, so they're available via .\n\nA navigation from a web origin to an extension resource is blocked unless the resource is listed as web accessible. Note these corner cases:\n• When an extension uses the webRequest API to redirect a public resource request to a resource that is not web accessible, such a request is also blocked.\n• The above holds true even if the resource that is not web accessible is owned by the redirecting extension.\n• Navigation is blocked in incognito mode unless the value of the field is set to .\n\nContent scripts themselves do not need to be allowed.\n\nThe Web Accessible Resources example demonstrates the use of this element in a working extension."
    },
    {
        "link": "https://stackoverflow.com/questions/13696906/resources-must-be-listed-in-the-web-accessible-resources-manifest-key-in-order-t",
        "document": "I have tried many ways( all documented procedures)to inject script into a specific page upon checking URL at onUpdated.addListener. Finally the below code with 'executescript' seems to work, but not perfectly. I could able to get alerts but can not able to find document elements of the page through getElementById/getElementsByName.\n\nWhen I inspected the page, script is injected. But in error console I get:\n\nI have also given 'web_accessible_resources' permission to the script, but still no success. Code in background script:\n\nCode in LeoScript.js, which will be injected into specific page.\n\nContent Script :eventPage.js which I used to inject script.\n\nPlease point me at any changes in the above code that will solve the permission issues. Thanks in advance."
    },
    {
        "link": "https://developer.chrome.com/docs/extensions/reference/manifest/web-accessible-resources",
        "document": "Web-accessible resources are files inside an extension that can be accessed by web pages or other extensions. Extensions typically use this feature to expose images or other assets that need to be loaded in web pages, but any asset included in an extension's bundle can be made web accessible.\n\nBy default no resources are web accessible, as this allows a malicious website to fingerprint extensions that a user has installed or exploit vulnerabilities (for example XSS bugs) in installed extensions. Only pages or scripts loaded from an extension's origin can access that extension's resources.\n\nUse the manifest property to declare which resources are exposed and to what origins. This property is an array of objects that declares resource access rules. Each object maps an array of extension resources to an array of URLs and/or extension IDs that can access those resources.\n\nEach object in the array contains these elements:\n\nEach element must include a element and either a or element. This establishes a mapping that exposes the specified resources to either web pages matching the pattern or to extensions with matching IDs. The element is optional.\n\nResources are available in a webpage via the URL , which can be generated with the method. The resources are served with appropriate CORS headers, so they're available via .\n\nA navigation from a web origin to an extension resource is blocked unless the resource is listed as web accessible. Note these corner cases:\n• When an extension uses the webRequest API to redirect a public resource request to a resource that is not web accessible, such a request is also blocked.\n• The above holds true even if the resource that is not web accessible is owned by the redirecting extension.\n• Navigation is blocked in incognito mode unless the value of the field is set to .\n\nContent scripts themselves do not need to be allowed.\n\nThe Web Accessible Resources example demonstrates the use of this element in a working extension."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/web_accessible_resources",
        "document": "Sometimes you want to package resources—for example, images, HTML, CSS, or JavaScript—with your extension and make them available to web pages and other extensions.\n\nFor example, the Beastify example extension replaces a web page with an image of a beast selected by the user. The beast images are packaged with the extension. To make the selected image visible, the extension adds elements whose attribute points to the beast's image. For the web page to be able to load the images, they must be made web accessible.\n\nWith the key, you list all the packaged resources that you want to make available to web pages. You specify them as paths relative to the manifest.json file.\n\nNote that content scripts don't need to be listed as web accessible resources.\n\nIf an extension wants to use or to redirect a public URL (e.g., HTTPS) to a page that's packaged in the extension, then the extension must list the page in the key."
    },
    {
        "link": "https://stackoverflow.com/questions/66636403/manifest-v3-resources-must-be-listed-in-the-web-accessible-resources",
        "document": "I get this error even if \"image/copy.svg\" is properly declared in the manifest.json\n\nDenying load of chrome-extension://pofbdjeepddggbelfghnndllidnalpde/images/copy.svg. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.\n\nIf I go to chrome-extension://pofbdjeepddggbelfghnndllidnalpde/images/copy.svg I can successfully see the loaded image."
    },
    {
        "link": "https://developer.chrome.com/docs/extensions/develop/concepts/match-patterns",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nA match pattern is a URL with the following structure, used to specify a group of URLs:\n\nscheme: Must be one of the following, separated from the rest of the pattern using a colon followed by a double slash ( ):\n• A wildcard , which matches only or\n\nFor information on injecting content scripts into unsupported schemes, such as and , see Injecting in related frames.\n\nhost: A hostname ( ). A before the hostname to match subdomains ( ), or just a wildcard . - If you use a wildcard in the host pattern, it must be the first or only character, and it must be followed by a period ( ) or forward slash ( ).\n\npath: A URL path ( ). For host permissions, the path is required but ignored. The wildcard ( ) should be used by convention.\n\nExtensions use match patterns in a variety of use cases, including the following:\n• Declaring host permissions that some Chrome APIs require in addition to their own permissions.\n• Allowing message sending and receiving using the \"externally_connectable.matches\" manifest key."
    },
    {
        "link": "https://extension.ninja/blog/post/how-to-use-web-accessible-resources-in-chrome-extensions",
        "document": "You are working on a content script that shows your custom UI on a website and you want to display your extension logo or use your brand font. How do you achieve this? One way is to host these resources on your website or CDN and hardcode URLs in your content script code.\n\nBut you may be in the situation where you don’t have a website or want to manage, support and pay for a complex flow of deploying resources somewhere on the internet. In this article, we will explore an alternative way to supply web resources to your content script that is fully self-contained to your extension code and deployment.\n\nThe web accessible resources feature allows you expose certain files from your extension package to any website or extension and make them referenceable from content scripts.\n\nMore in official extension docs: Chrome Extensions Manifest: web_accessible_resources.\n\nResource URL can be dynamically generated in content script code by using chrome.runtime.getURL method.\n\nYou could use it like this:\n\nLet’s say you injected a CSS file to website content and want to reference a custom font packaged in your extension. You can't run chrome.runtime.getURL in CSS. But you can use a little bit of extension magic __MSG_@@extension_id__.\n\n__MSG_@@extension_id__ is a special string that gets replaced with extension id in static files at runtime.\n\nAll extension resources are by default accessible to extension internal pages. You don’t have to include resources in web_accessible_resources for this.\n\nSecurity and privacy considerations when using Web Accessible Resources\n\nBy exposing extension resources to other websites, especially without domain restrictions, you are making your extension easier to fingerprint. Websites will be able to detect that visitors are using your extension and block visitors or uniquely identify them as users of your extension.\n\nFingerprinting is possible because resource URLs have your unique extension ID. This can be mitigated by setting use_dynamic_url: true. This changes resource URLs to use unique session ID, which changes with each browser restart or extension reload. The downside of dynamics URL is that it can only be generated by your extension code. Other extensions and websites will not be able to reference the resource by a consistent URL. You could use multiple web accessible resource entries to design a policy that fits your scenario.\n\nIn general, you should follow the principle of least privilege access when declaring web accessible resources.\n\nCheck browser console for exceptions. Chrome has quite descriptive error messages and it will help you to diagnose the problem. Usually, you either have an error in URL of the resource or website does not match query in the manifest definition.\n\nExample error message: Denying load of chrome-extension://.... Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.\n\nAlso be aware that extension id during development and release may not be the same. This will break your URLs in production. If you want to rely on hard-coded URLs then check out the guide how to make extension ids consistent in development and release.\n\nLastly, you cannot use the web accessible resources feature to expose CSS or JS files. You need to use content injection API for CSS and JS files."
    }
]