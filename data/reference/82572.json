[
    {
        "link": "https://vuejs.org/guide/essentials/event-handling",
        "document": "We can use the directive, which we typically shorten to the symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would be or with the shortcut, .\n\nThe handler value can be one of the following:\n• None Inline handlers: Inline JavaScript to be executed when the event is triggered (similar to the native attribute).\n• None Method handlers: A property name or path that points to a method defined on the component.\n\nInline handlers are typically used in simple cases, for example:\n\nThe logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's why can also accept the name or path of a component method you'd like to call.\n\nA method handler automatically receives the native DOM Event object that triggers it - in the example above, we are able to access the element dispatching the event via .\n\nThe template compiler detects method handlers by checking whether the value string is a valid JavaScript identifier or property access path. For example, , and are treated as method handlers, while and are treated as inline handlers.\n\nInstead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:\n\nSometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special variable, or use an inline arrow function:\n\nIt is a very common need to call or inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides event modifiers for . Recall that modifiers are directive postfixes denoted by a dot.\n\nThe , , and modifiers mirror the options of the native method:\n\nThe modifier is typically used with touch event listeners for improving performance on mobile devices.\n\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for or when listening for key events:\n\nYou can directly use any valid key names exposed via as modifiers by converting them to kebab-case.\n\nIn the above example, the handler will only be called if is equal to .\n\nVue provides aliases for the most commonly used keys:\n\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\nThe modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\nThese modifiers restrict the handler to events triggered by a specific mouse button.\n\nNote, however, that , , and modifier names are based on the typical right-handed mouse layout, but in fact represent \"main\", \"secondary\", and \"auxiliary\" pointing device event triggers, respectively, and not the actual physical buttons. So that for a left-handed mouse layout the \"main\" button might physically be the right one but would trigger the modifier handler. Or a trackpad might trigger the handler with a one-finger tap, the handler with a two-finger tap, and the handler with a three-finger tap. Similarly, other devices and event sources generating \"mouse\" events might have trigger modes that are not related to \"left\" and \"right\" whatsoever."
    },
    {
        "link": "https://v2.vuejs.org/v2/guide/events",
        "document": "We can use the directive to listen to DOM events and run some JavaScript when they’re triggered.\n\nThe logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the attribute isn’t feasible. That’s why can also accept the name of a method you’d like to call.\n\nInstead of binding directly to a method name, we can also use methods in an inline JavaScript statement:\n\nSometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special variable:\n\nIt is a very common need to call or inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides event modifiers for . Recall that modifiers are directive postfixes denoted by a dot.\n\nOrder matters when using modifiers because the relevant code is generated in the same order. Therefore using will prevent all clicks while will only prevent clicks on the element itself.\n\nUnlike the other modifiers, which are exclusive to native DOM events, the modifier can also be used on component events. If you haven’t read about components yet, don’t worry about this for now.\n\nVue also offers the modifier, corresponding to ‘s option.\n\nThe modifier is especially useful for improving performance on mobile devices.\n\nDon’t use and together, because will be ignored and your browser will probably show you a warning. Remember, communicates to the browser that you don’t want to prevent the event’s default behavior.\n\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for when listening for key events:\n\nYou can directly use any valid key names exposed via as modifiers by converting them to kebab-case.\n\nIn the above example, the handler will only be called if is equal to .\n\nThe use of events is deprecated and may not be supported in new browsers.\n\nUsing attributes is also permitted:\n\nVue provides aliases for the most commonly used key codes when necessary for legacy browser support:\n\nA few keys ( and all arrow keys) have inconsistent values in IE9, so these built-in aliases should be preferred if you need to support IE9.\n\nYou can also define custom key modifier aliases via the global object:\n\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\nNote that modifier keys are different from regular keys and when used with events, they have to be pressed when the event is emitted. In other words, will only trigger if you release a key while holding down . It won’t trigger if you release the key alone. If you do want such behaviour, use the for instead: .\n\nThe modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\nThese modifiers restrict the handler to events triggered by a specific mouse button.\n\nYou might be concerned that this whole event listening approach violates the good old rules about “separation of concerns”. Rest assured - since all Vue handler functions and expressions are strictly bound to the ViewModel that’s handling the current view, it won’t cause any maintenance difficulty. In fact, there are several benefits in using :\n• None It’s easier to locate the handler function implementations within your JS code by skimming the HTML template.\n• None Since you don’t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.\n• None When a ViewModel is destroyed, all event listeners are automatically removed. You don’t need to worry about cleaning it up yourself."
    },
    {
        "link": "https://stackoverflow.com/questions/48042274/conditional-event-binding-vuejs",
        "document": "In my scenario I have mouseover and mouseout events that I want to bind to conditionally (e.g only if user is on a device that has a mouse).\n\nI realize I can have the condition in the event handler itself but that would still be allocating the memory for the event handlers which is unnecessary.\n\nIs there a way to make the event binding itself conditional?"
    },
    {
        "link": "https://stackoverflow.com/questions/48250832/programmatically-bind-custom-events-for-dynamic-components-in-vuejs",
        "document": "In my vuejs app I use dynamic component in the following way:\n\nis a prop on the parent component which hold the actual component to inject. are also prop which holds the porps for the injected instance.\n\nI would like to know how can I also dynamically bind listeners to the component - I have understand that I cannot send an object to v-on with multiple events.\n\nI was thinking about adding it programatically however haven't found any info about how it can be done for Vue custom events (kind for equivalent for custom events)\n\nAny tip would be much appreciated!"
    },
    {
        "link": "https://dev.to/mattiatoselli/two-way-data-binding-in-vue-3omh",
        "document": "Sometimes we need to bind the value of a field and we need to change the data on the Vue instance in real time. If we use the standard bind we used in a tutorial of this series before, it would not work. In order to do that, we must use the v-model directive:\n\n\n\nWe'll see how the string over the field will change according to what we type in that field."
    },
    {
        "link": "https://element.eleme.io",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/53289395/how-to-use-html-tags-in-element-popover-component-for-vue-js",
        "document": "As mentioned in attributes description of popover component - content be passed through prop as string or as a default slot.\n\nSo any content will be passed as a slot, if no slot name is specified. Here is an example for your case:\n\nNote that prop will be replaced with content of default slot if it is passed. Can't use them both at the same time."
    },
    {
        "link": "https://github.com/ElemeFE/element/issues/22298",
        "document": "\n• Narrow the width of browser for observing appearance of two popovers\n\nWhat is actually happening?\n\nTwo of popovers appear.\n\nAt the first time, it seems only one popover appears because they are rendered in the same position. Overlapped popovers are separated then appeared to user, if the width of browser narrowed."
    },
    {
        "link": "https://stackoverflow.com/questions/78288504/changing-the-background-color-of-element-ui-tooltip",
        "document": "Custom styling can always be achieved with CSS as long as you know the right elements to select. I created a codepen with Vue 2 and Element UI v2 and inspected the DOM to determine exactly what CSS needs to be applied. Here is what I came up with:\n\nThe code above will only work with tooltips with . For other placements you need to change to match. For example:\n\nIf you need to customize multiple different positioned tooltips, you will want to give each a unique name, which changes the CSS selector for , so then the CSS won't clash."
    },
    {
        "link": "https://bootstrap-vue.org/docs/components/popover",
        "document": ""
    }
]