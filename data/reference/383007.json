[
    {
        "link": "https://w3schools.com/html/html_responsive.asp",
        "document": "Responsive web design is about creating web pages that look good on all devices!\n\nA responsive web design will automatically adjust for different screen sizes and viewports.\n\nResponsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge, a website, to make it look good on all devices (desktops, tablets, and phones):\n\nTry it Yourself »\n\nTo create a responsive website, add the following tag to all your web pages:\n\nThis will set the viewport of your page, which will give the browser instructions on how to control the page's dimensions and scaling.\n\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\n\nResponsive images are images that scale nicely to fit any browser size.\n\nIf the CSS property is set to 100%, the image will be responsive and scale up and down:\n\nNotice that in the example above, the image can be scaled up to be larger than its original size. A better solution, in many cases, will be to use the property instead.\n\nIf the property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:\n\nThe HTML element allows you to define different images for different browser window sizes.\n\nResize the browser window to see how the image below changes depending on the width:\n\nThe text size can be set with a \"vw\" unit, which means the \"viewport width\".\n\nThat way the text size will follow the size of the browser window:\n\nIn addition to resize text and images, it is also common to use media queries in responsive web pages.\n\nWith media queries you can define completely different styles for different browser sizes.\n\nExample: resize the browser window to see that the three div elements below will display horizontally on large screens and stack vertically on small screens:\n\nA responsive web page should look good on large desktop screens and on small mobile phones.\n\nTry it Yourself »\n\nThey are free, and easy to use.\n\nW3.CSS is a modern CSS framework with support for desktop, tablet, and mobile design by default.\n\nW3.CSS is smaller and faster than similar CSS frameworks.\n\nW3.CSS is designed to be independent of jQuery or any other JavaScript library.\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>W3.CSS</title>\n\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n<link rel=\"stylesheet\" href=\"https://www.w3schools.com/w3css/4/w3.css\">\n\n</head>\n\n<body>\n\n\n\n<div class=\"w3-container w3-green\">\n\n <h1>W3Schools Demo</h1> \n\n <p>Resize this responsive page!</p> \n\n</div>\n\n\n\n<div class=\"w3-row-padding\">\n\n <div class=\"w3-third\">\n\n <h2>London</h2>\n\n <p>London is the capital city of England.</p>\n\n <p>It is the most populous city in the United Kingdom,\n\n with a metropolitan area of over 13 million inhabitants.</p>\n\n </div>\n\n\n\n <div class=\"w3-third\">\n\n <h2>Paris</h2>\n\n <p>Paris is the capital of France.</p> \n\n <p>The Paris area is one of the largest population centers in Europe,\n\n with more than 12 million inhabitants.</p>\n\n </div>\n\n\n\n <div class=\"w3-third\">\n\n <h2>Tokyo</h2>\n\n <p>Tokyo is the capital of Japan.</p>\n\n <p>It is the center of the Greater Tokyo Area,\n\n and the most populous metropolitan area in the world.</p>\n\n </div>\n\n</div>\n\n\n\n</body>\n\n </html> Try it Yourself »\n\nTo learn more about W3.CSS, read our W3.CSS Tutorial.\n\nTo learn more about Bootstrap, go to our Bootstrap Tutorial."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Responsive_Design",
        "document": "Before responsive web design became the standard approach for making websites work across different device types, web developers used to talk about mobile web design, mobile web development, or sometimes, mobile-friendly design. These are basically the same as responsive web design — the goals are to make sure that websites work well across devices with different physical attributes (screen size, resolution) in terms of layout, content (text and media), and performance. The difference is mainly to do with the devices involved, and the technologies available to create solutions:\n• We used to talk about desktop or mobile, but now there are many different types of device available such as desktop, laptop, mobile, tablets, watches, etc. Instead of catering for a few different screen sizes, we now need to design sites defensively to cater for common screen sizes and resolutions, plus unknowns.\n• Mobile devices used to be low-powered in terms of CPU/GPU and available bandwidth. Some didn't support CSS or even HTML, and as a result, it was common to perform server-side browser sniffing to determine device/browser type before then serving a site that the device would be able to cope with. Mobile devices often had really simple, basic experiences served to them because it was all they could handle. These days, mobile devices are able to handle the same technologies as desktop computers, so such techniques are less common.\n• You should still use the techniques discussed in this article to serve mobile users a suitable experience, as there are still constraints such as battery life and bandwidth to worry about.\n• User experience is also a concern. A mobile user of a travel site might just want to check flight times and delay information, for example, and not be presented with a 3D animated globe showing flight paths and your company history. This can be handled using responsive design techniques, however.\n• Modern technologies are much better for creating responsive experiences. For example, responsive images/media technologies now allow appropriate media to be served to different devices without having to rely on techniques like server-side sniffing.\n\nHTML is fundamentally responsive, or fluid. If you create a web page containing only HTML, with no CSS, and resize the window, the browser will automatically reflow the text to fit the viewport. While the default responsive behavior may sound like no solution is needed, long lines of text displayed full screen on a wide monitor can be difficult to read. If wide screen line length is reduced with CSS, such as by creating columns or adding significant padding, the site may look squashed for the user who narrows their browser window or opens the site on a mobile device. Creating a non-resizable web page by setting a fixed width doesn't work either; that leads to scroll bars on narrow devices and too much empty space on wide screens. Responsive web design, or RWD, is a design approach that addresses the range of devices and device sizes, enabling automatic adaption to the screen, whether the content is viewed on a tablet, phone, television, or watch. Responsive web design isn't a separate technology — it is an approach. It is a term used to describe a set of best practices used to create a layout that can respond to any device being used to view the content. The term responsive design, coined by Ethan Marcotte in 2010, described using fluid grids, fluid images, and media queries to create responsive content. At the time, the recommendation was to use CSS for layout and media queries to query the browser width, creating layouts for different breakpoints. Fluid images are set to not exceed the width of their container; they have their property set to . Fluid images scale down when their containing column narrows but do not grow larger than their intrinsic size when the column grows. This enables an image to scale down to fit its content, rather than overflow it, but not grow larger and become pixelated if the container becomes wider than the image. Modern CSS layout methods are inherently responsive, and, since the publication of Marcotte's article, we have a multitude of features built into the web platform to make designing responsive sites easier. The rest of this article will point you to the various web platform features you might want to use when creating a responsive site.\n\nMedia queries allow us to run a series of tests (for example, whether the user's screen is greater than a certain width or resolution) and apply CSS selectively to style the page appropriately for the user's needs. For example, the following media query tests to see if the current web page is being displayed as screen media (therefore not a printed document) and the viewport is at least wide. The CSS for the selector will only be applied if these two things are true. You can add multiple media queries within a stylesheet, tweaking your whole layout or parts of it to best suit the various screen sizes. The points at which a media query is introduced, and the layout changed, are known as breakpoints. A common approach when using media queries is to create a simple single-column layout for narrow-screen devices (for example, mobile phones), then check for wider screens and implement a multiple-column layout when you know that you have enough screen width to handle it. Designing for mobile first is known as mobile first design. If using breakpoints, best practices encourage defining media query breakpoints with relative units rather than absolute sizes of an individual device. There are different approaches to the styles defined within a media query block; ranging from using media queries to style sheets based on browser size ranges to only including custom properties variables to store values associated with each breakpoint. Media queries can help with RWD, but are not a requirement. Flexible grids, relative units, and minimum and maximum unit values can be used without media queries.\n\nIn flexbox, flex items shrink or grow, distributing space between the items according to the space in their container. By changing the values for and you can indicate how you want the items to behave when they encounter more or less space around them. In the example below the flex items will each take an equal amount of space in the flex container, using the shorthand of as previously discussed (see Flexbox: Flexible sizing of flex items). Here's how we could use flexbox with a media query for responsive design. <div class=\"wrapper\"> <div class=\"col1\"> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> <p> Before that night—a memorable night, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact. </p> </div> </div> Resize your screen. The layout will change when the size of the above example crosses the 600px width threshold.\n\nIn CSS grid layout the unit allows the distribution of available space across grid tracks. The next example creates a grid container with three tracks sized at . This will create three column tracks, each taking one part of the available space in the container. You already looked at this approach (see Flexible grids with the fr unit for a recap). Here's how we could use grid layout with a media query for responsive design. <div class=\"wrapper\"> <div class=\"col1\"> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> <p> Before that night—a memorable night, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact. </p> </div> </div>\n\nIn this example, we want to set our level 1 heading to be , meaning it will be four times our base font size. That's a really large heading! We only want this jumbo heading on larger screen sizes, therefore we first create a smaller heading then use media queries to overwrite it with the larger size if we know that the user has a screen size of at least . We have edited our responsive grid example above to also include responsive type using the method outlined. You can see how the heading switches sizes as the layout goes to the two column version. On mobile the heading is smaller, but on desktop, we see the larger heading size: <div class=\"wrapper\"> <div class=\"col1\"> <h1>Watch my size!</h1> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> <p> Before that night—a memorable night, as it was to prove—hundreds of millions of people had watched the rising smoke-wreaths of their fires without drawing any special inspiration from the fact. </p> </div> </div> As this approach to typography shows, you do not need to restrict media queries to only changing the layout of the page. They can be used to tweak any element to make it more usable or attractive at alternate screen sizes.\n\nViewport units can also be used to enable responsive typography, without the need for setting breakpoints with media queries. is equal to one percent of the viewport width, meaning that if you set your font size using , it will always relate to the size of the viewport. The problem with doing the above is that the user loses the ability to zoom any text set using the unit, as that text is always related to the size of the viewport. Therefore you should never set text using viewport units alone. There is a solution, and it involves using . If you add the unit to a value set using a fixed size such as s or s then the text will still be zoomable. Essentially, the unit adds on top of that zoomed value: This means that we only need to specify the font size for the heading once, rather than set it up for mobile and redefine it in the media queries. The font then gradually increases as you increase the size of the viewport. <div class=\"wrapper\"> <div class=\"col1\"> <h1>Watch my size!</h1> <p> This layout is responsive. See what happens if you make the browser window wider or narrow. </p> </div> <div class=\"col2\"> <p> One November night in the year 1782, so the story runs, two brothers sat over their winter fire in the little French town of Annonay, watching the grey smoke-wreaths from the hearth curl up the wide chimney. Their names were Stephen and Joseph Montgolfier, they were papermakers by trade, and were noted as possessing thoughtful minds and a deep interest in all scientific knowledge and new discovery. </p> </div> </div>\n\nIf you look at the HTML source of a responsive page, you will usually see the following tag in the of the document. This viewport meta tag tells mobile browsers that they should set the width of the viewport to the device width, and scale the document to 100% of its intended size, which shows the document at the mobile-optimized size that you intended. Why is this needed? Because mobile browsers tend to lie about their viewport width. This meta tag exists because when smartphones first arrived, most sites were not mobile optimized. The mobile browser would, therefore, set the viewport width to 980 pixels, render the page at that width, and show the result as a zoomed-out version of the desktop layout. Users could zoom in and pan around the website to view the bits they were interested in, but it looked bad. By setting you are overriding a mobile device's default, like Apple's default , with the actual width of the device. Without it, your responsive design with breakpoints and media queries may not work as intended on mobile browsers. If you've got a narrow screen layout that kicks in at 480px viewport width or less, but the device is saying it is 980px wide, that user will not see your narrow screen layout. So you should always include the viewport meta tag in the head of your documents.\n\nResponsive design refers to a site or application design that responds to the environment in which it is viewed. It encompasses a number of CSS and HTML features and techniques and is now essentially just how we build websites by default. Consider the sites that you visit on your phone — it is probably fairly unusual to come across a site that is the desktop version scaled down, or where you need to scroll sideways to find things. This is because the web has moved to this approach of designing responsively. It has also become much easier to achieve responsive designs with the help of the layout methods you have learned in these lessons. If you are new to web development today you have many more tools at your disposal than in the early days of responsive design. It is therefore worth checking the age of any materials you are using. While the historical articles are still useful, modern use of CSS and HTML makes it far easier to create elegant and useful designs, no matter what device your visitor views the site with. Next, we will study media queries in more detail and show how to use them to solve some common problems."
    },
    {
        "link": "https://medium.com/@xhtmlchamps/best-practices-for-responsive-web-design-with-html5-and-css3-894c98bf5a15",
        "document": "Best Practices for Responsive Web Design with HTML5 and CSS3\n\nThe Best Practices Used for Developing Responsive Web Design with HTML5 and CSS3\n\nThe Responsive web design with HTML 5 and CSS3 are very useful for web developers who seek innovative techniques that deliver quick and intuitive interfacing with the modern mobile devices. Both the HTML5 and CSS3 are fully supported in all the modern browsers. Professional web developers can help in integrating these techniques to increase the performance. To say the proportion of advantages gained are tremendously huge.\n\nToday, internet users browse on various trendy devices like tablets and android phones. Every device of this array varies in screen dimensions, both in landscape and portrait viewing options. Although it has been a difficult task to develop a website with different orientations, these applications now help in creating responsive websites effortlessly.\n\nResponsive design with HTML5 and CSS3 helps designing functional websites. This web designing technique is now being adapted widely by different browsers and devices with varying viewpoints and changing layouts.\n\nHTML5 can be used as the frame to design responsive websites. It supports hugely in developing the most interactive websites throughout the process. This HTML5 responsive designing provides unique and consistent ways to develop websites. By perfectly planning, you can reduce redundancy and create high levels of transparency in the development stages.\n\nWhilst talking about CSS3, this is an extremely powerful source for designing responsive websites. CSS3 helps in creating a wide range of designs with same foundation easily. It, moreover, enables web designers to easily plan and create the simplest blueprint based on the foundation.\n\nBesides developing responsive websites, the most debating topics is about handling the images and making it responsive to all screen sizes. This emphasizes the need to optimize images in the website, making it responsive with maximum or minimum width.\n\nPractices for Responsive Web Designing with HTML5 and CSS3\n\nThere are three main components of responsive web designing with HTML5 and CSS3 and they include, flexible layout, media queries, flexible media.\n\nThis is the practice of building website layout with flexible grid that is capable of resizing it to any width. These grids are built using appropriate length units and are also used for declaring common grid with property values such as margin, padding or width.\n\nMedia queries are built as an extension and they are commonly found in media types when targeting. It provides the ability to point any specific styles for an individual browser and the circumstances of the device along with viewpoint width or orientation. Each media query includes media type with one or more expressions, which may include media features.\n\nAnother important aspect of responsive web designing includes flexible media. It is important that images and videos need to be scaled and change sizes according to media types, as viewpoint sizes changes with devices. The quickest way for achieving scalable media is to use max-width property with 100% value. This ensures that viewpoint gets smaller to any media and scales down accordingly to the container’s width.\n\nAbout Author: XhtmlChamps a Web Design and Development Company For Complete Web Solutions. We are experts in all kinds of digital solutions for your business beginning from website design and development to successfully marketing a website."
    },
    {
        "link": "https://amazon.com/Responsive-Web-Design-HTML5-CSS/dp/1839211563",
        "document": "Enter the characters you see below\n\nSorry, we just need to make sure you're not a robot. For best results, please make sure your browser is accepting cookies."
    },
    {
        "link": "https://quora.com/How-can-you-create-a-responsive-web-design-in-HTML-and-CSS",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_eventlistener.asp",
        "document": "The method attaches an event handler to the specified element.\n\nThe method attaches an event handler to an element without overwriting existing event handlers.\n\nYou can add many event handlers to one element.\n\nYou can add many event handlers of the same type to one element, i.e two \"click\" events.\n\nYou can add event listeners to any DOM object not only HTML elements. i.e the window object.\n\nThe method makes it easier to control how the event reacts to bubbling.\n\nWhen using the method, the JavaScript is separated from the HTML markup, for better readability and allows you to add event listeners even when you do not control the HTML markup.\n\nYou can easily remove an event listener by using the method.\n\n\n\nThe first parameter is the type of the event (like \" \" or \" \" or any other HTML DOM Event.)\n\nThe second parameter is the function we want to call when the event occurs.\n\nThe third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.\n\nAdd an Event Handler to an Element\n\nYou can also refer to an external \"named\" function:\n\nAdd Many Event Handlers to the Same Element\n\nThe method allows you to add many events to the same element, without overwriting existing events:\n\nYou can add events of different types to the same element:\n\nAdd an Event Handler to the window Object\n\nThe method allows you to add event listeners on any HTML DOM object such as HTML elements, the HTML document, the window object, or other objects that support events, like the object.\n\nWhen passing parameter values, use an \"anonymous function\" that calls the specified function with the parameters:\n\nThere are two ways of event propagation in the HTML DOM, bubbling and capturing.\n\nEvent propagation is a way of defining the element order when an event occurs. If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's \"click\" event should be handled first?\n\nIn bubbling the inner most element's event is handled first and then the outer: the <p> element's click event is handled first, then the <div> element's click event.\n\nIn capturing the outer most element's event is handled first and then the inner: the <div> element's click event will be handled first, then the <p> element's click event.\n\nWith the addEventListener() method you can specify the propagation type by using the \"useCapture\" parameter:\n\nThe default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.\n\nThe method removes event handlers that have been attached with the addEventListener() method:\n\nFor a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",
        "document": "Note: This feature is available in Web Workers. The method of the interface sets up a function that will be called whenever the specified event is delivered to the target. Common targets are , or its children, , and , but the target may be any object that supports events (such as ). Note: The method is the recommended way to register an event listener. The benefits are as follows:\n• It allows adding more than one handler for an event. This is particularly useful for libraries, JavaScript modules, or any other kind of code that needs to work well with other libraries or extensions.\n• In contrast to using an property, it gives you finer-grained control of the phase when the listener is activated (capturing vs. bubbling).\n• It works on any event target, not just HTML or SVG elements. The method works by adding a function, or an object that implements a function, to the list of event listeners for the specified event type on the on which it's called. If the function or object is already in the list of event listeners for this target, the function or object is not added a second time. Note: If a particular anonymous function is in the list of event listeners registered for a certain target, and then later in the code, an identical anonymous function is given in an call, the second function will also be added to the list of event listeners for that target. Indeed, anonymous functions are not identical even if defined using the same unchanging source-code called repeatedly, even if in a loop. Repeatedly defining the same unnamed function in such cases can be problematic. (See Memory issues, below.) If an event listener is added to an from inside another listener — that is, during the processing of the event — that event will not trigger the new listener. However, the new listener may be triggered during a later stage of event flow, such as during the bubbling phase.\n\nThe value of \"this\" within the handler It is often desirable to reference the element on which the event handler was fired, such as when using a generic handler for a set of similar elements. When attaching a handler function to an element using , the value of inside the handler will be a reference to the element. It will be the same as the value of the property of the event argument that is passed to the handler. my_element.addEventListener(\"click\", function (e) { console.log(this.className); // logs the className of my_element console.log(e.currentTarget === this); // logs `true` }); As a reminder, arrow functions do not have their own context. my_element.addEventListener(\"click\", (e) => { console.log(this.className); // WARNING: `this` is not `my_element` console.log(e.currentTarget === this); // logs `false` }); If an event handler (for example, ) is specified on an element in the HTML source, the JavaScript code in the attribute value is effectively wrapped in a handler function that binds the value of in a manner consistent with the ; an occurrence of within the code represents a reference to the element. <table id=\"my_table\" onclick=\"console.log(this.id);\"> <!-- `this` refers to the table; logs 'my_table' --> … </table> Note that the value of inside a function, called by the code in the attribute value, behaves as per standard rules. This is shown in the following example: <script> function logID() { console.log(this.id); } </script> <table id=\"my_table\" onclick=\"logID();\"> <!-- when called, `this` will refer to the global object --> … </table> The value of within is a reference to the global object (or in the case of strict mode. Specifying \"this\" using bind() The method lets you establish a fixed context for all subsequent calls — bypassing problems where it's unclear what will be, depending on the context from which your function was called. Note, however, that you'll need to keep a reference to the listener around so you can remove it later. This is an example with and without : class Something { name = \"Something Good\"; constructor(element) { // bind causes a fixed `this` context to be assigned to `onclick2` this.onclick2 = this.onclick2.bind(this); element.addEventListener(\"click\", this.onclick1, false); element.addEventListener(\"click\", this.onclick2, false); // Trick } onclick1(event) { console.log(this.name); // undefined, as `this` is the element } onclick2(event) { console.log(this.name); // 'Something Good', as `this` is bound to the Something instance } } const s = new Something(document.body); Another solution is using a special function called to catch any events: class Something { name = \"Something Good\"; constructor(element) { // Note that the listeners in this case are `this`, not this.handleEvent element.addEventListener(\"click\", this, false); element.addEventListener(\"dblclick\", this, false); } handleEvent(event) { console.log(this.name); // 'Something Good', as this is bound to newly created object switch (event.type) { case \"click\": // some code here… break; case \"dblclick\": // some code here… break; } } } const s = new Something(document.body); Another way of handling the reference to is to use an arrow function, which doesn't create a separate context. class SomeClass { name = \"Something Good\"; register() { window.addEventListener(\"keydown\", (e) => { this.someMethod(e); }); } someMethod(e) { console.log(this.name); switch (e.code) { case \"ArrowUp\": // some code here… break; case \"ArrowDown\": // some code here… break; } } } const myObject = new SomeClass(); myObject.register();\n\nconst elts = document.getElementsByTagName(\"*\"); // Case 1 for (const elt of elts) { elt.addEventListener( \"click\", (e) => { // Do something }, false, ); } // Case 2 function processEvent(e) { // Do something } for (const elt of elts) { elt.addEventListener(\"click\", processEvent, false); } In the first case above, a new (anonymous) handler function is created with each iteration of the loop. In the second case, the same previously declared function is used as an event handler, which results in smaller memory consumption because there is only one handler function created. Moreover, in the first case, it is not possible to call because no reference to the anonymous function is kept (or here, not kept to any of the multiple anonymous functions the loop might create.) In the second case, it's possible to do because is the function reference. Actually, regarding memory consumption, the lack of keeping a function reference is not the real issue; rather it is the lack of keeping a static function reference.\n\nIf an event has a default action — for example, a event that scrolls the container by default — the browser is in general unable to start the default action until the event listener has finished, because it doesn't know in advance whether the event listener might cancel the default action by calling . If the event listener takes too long to execute, this can cause a noticeable delay, also known as jank, before the default action can be executed. By setting the option to , an event listener declares that it will not cancel the default action, so the browser can start the default action immediately, without waiting for the listener to finish. If the listener does then call , this will have no effect. The specification for defines the default value for the option as always being . However, to realize the scroll performance benefits of passive listeners in legacy code, modern browsers have changed the default value of the option to for the , , and events on the document-level nodes , , and . That prevents the event listener from canceling the event, so it can't block page rendering while the user is scrolling. Because of that, when you want to override that behavior and ensure the option is , you must explicitly set the option to (rather than relying on the default). You don't need to worry about the value of for the basic event. Since it can't be canceled, event listeners can't block page rendering anyway. See Improving scroll performance using passive listeners for an example showing the effect of passive listeners.\n\nThe following example shows the effect of setting . It includes a that contains some text, and a check box. <div id=\"container\"> <p> But down there it would be dark now, and not the lovely lighted aquarium she imagined it to be during the daylight hours, eddying with schools of tiny, delicate animals floating and dancing slowly to their own serene currents and creating the look of a living painting. That was wrong, in any case. The ocean was different from an aquarium, which was an artificial environment. The ocean was a world. And a world is not art. Dorothy thought about the living things that moved in that world: large, ruthless and hungry. Like us up here. </p> </div> <div> <input type=\"checkbox\" id=\"passive\" name=\"passive\" checked /> <label for=\"passive\">passive</label> </div> The code adds a listener to the container's event, which by default scrolls the container. The listener runs a long-running operation. Initially the listener is added with the option, and whenever the checkbox is toggled, the code toggles the option. const passive = document.querySelector(\"#passive\"); passive.addEventListener(\"change\", (event) => { container.removeEventListener(\"wheel\", wheelHandler); container.addEventListener(\"wheel\", wheelHandler, { passive: passive.checked, once: true, }); }); const container = document.querySelector(\"#container\"); container.addEventListener(\"wheel\", wheelHandler, { passive: true, once: true, }); function wheelHandler() { function isPrime(n) { for (let c = 2; c <= Math.sqrt(n); ++c) { if (n % c === 0) { return false; } } return true; } const quota = 1000000; const primes = []; const maximum = 1000000; while (primes.length < quota) { const candidate = Math.floor(Math.random() * (maximum + 1)); if (isPrime(candidate)) { primes.push(candidate); } } console.log(primes); }\n• Initially, the listener is passive, so trying to scroll the container with the wheel is immediate.\n• If you uncheck \"passive\" and try to scroll the container using the wheel, then there is a noticeable delay before the container scrolls, because the browser has to wait for the long-running listener to finish."
    },
    {
        "link": "https://stackoverflow.com/questions/22700664/attach-event-handlers-for-click-event-on-all-elements-in-the-dom",
        "document": "I want to be able to figure out which part of my page has been clicked. There is no guarantee the elements are all on the page from the get go, which means that I need to use something like jQuery delegate.\n\nOne way to do this is to iterate through all elements in the DOM and then attach an event handler to each element - but this will be slow and complicated - every time new html is dynamically added, I'd have to either re-attach all the handlers, or figure out the subset of html that was added.\n\nThe other way is to use event bubbling - so add an event handler to the document, or body and rely upon the events bubbling up.\n\nSomething like this:\n\nHowever, after using this code, when I click on buttons on my page, I get the div surrounding the button, as opposed to the actual button. In other words, the above is too specific. Furthermore, I feel like the original selector should be the document, rather than the body tag.\n\nTo be clear, I want to know when any element is clicked on my page - how do I do that?\n\nSo I tried this code with :\n\nHowever, when I click on buttons in my app, nothing gets triggered - when I click on other elements, the console logs run.\n\nI understand this is probably hard to answer without more context - what else do you need?"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nAn element receives a event when any of the following occurs:\n• A pointing-device button (such as a mouse's primary button) is both pressed and released while the pointer is located inside the element.\n• A touch gesture is performed on the element.\n• Any user interaction that is equivalent to a click, such as pressing the key or key while the element is focused. Note that this only applies to elements with a default key event handler, and therefore, excludes other elements that have been made focusable by setting the attribute. If the button is pressed on one element and the pointer is moved outside the element before the button is released, the event is fired on the most specific ancestor element that contained both elements. fires after both the and events have fired, in that order. The event is a device-independent event — meaning it can be activated by touch, keyboard, mouse, and any other mechanism provided by assistive technology.\n\nThis interface inherits properties from and . Represents the angle between a transducer (a pointer or stylus) axis and the X-Y plane of a device screen. Represents the angle between the Y-Z plane and the plane containing both the transducer (a pointer or stylus) axis and the Y axis. A unique identifier for the pointer causing the event. The width (magnitude on the X axis), in CSS pixels, of the contact geometry of the pointer. The height (magnitude on the Y axis), in CSS pixels, of the contact geometry of the pointer. The normalized pressure of the pointer input in the range to , where and represent the minimum and maximum pressure the hardware is capable of detecting, respectively. The normalized tangential pressure of the pointer input (also known as barrel pressure or cylinder stress) in the range to , where is the neutral position of the control. The plane angle (in degrees, in the range of to ) between the Y–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the Y axis. The plane angle (in degrees, in the range of to ) between the X–Z plane and the plane containing both the pointer (e.g. pen stylus) axis and the X axis. The clockwise rotation of the pointer (e.g. pen stylus) around its major axis in degrees, with a value in the range to . Indicates the device type that caused the event (mouse, pen, touch, etc.). Indicates if the pointer represents the primary pointer of this pointer type.\n\nThe object passed into the event handler for has its property set to the number of times the was clicked. In other words, will be 2 for a double-click, 3 for triple-click, and so forth. This counter resets after a short interval without any clicks occurring; the specifics of how long that interval is may vary from browser to browser and across platforms. The interval is also likely to be affected by user preferences; for example, accessibility options may extend this interval to make it easier to perform multiple clicks with adaptive interfaces."
    },
    {
        "link": "https://stackoverflow.com/questions/6925146/best-practice-on-adding-event-listeners-javascript-html",
        "document": "I know I may be asking for the moon here but I'm looking for some experienced opinons on the best way to add event listeners or rather 'When' or 'Where' to add them in the js file.\n\nTake my take as an example. I have a page which has a bunch of onclick events that now have to be handled by properties in the JS file\n\nMy question is where exactly I should add this in the js file.\n\nHow I was planning to go about it was to have something like the following\n\nSo that once the document is ready, only then are all the event listeners added. Is this acceptable or is there are more universally accepted way of doing it.\n\nNOTE: I know this question may appear subjective so I'm going with the correct answer will be the most popular way you've seen seen event listeners added. I'm sure there must be a majority acceptance on this and I apologize in advance if its similiar to something like where you should declare variables, at the start or when you need them.\n\nIn Java, should variables be declared at the top of a function, or as they're needed?"
    }
]