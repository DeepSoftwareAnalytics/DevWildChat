[
    {
        "link": "https://discordjs.guide/creating-your-bot/event-handling",
        "document": "Node.js uses an event-driven architecture, making it possible to execute code when a specific event occurs. The discord.js library takes full advantage of this. You can visit the open in new window documentation to see the full list of events.\n\nAt this point, your file has listeners for two events: and .\n\nCurrently, the event listeners are in the file. open in new window emits once when the becomes ready for use, and open in new window emits whenever an interaction is received. Moving the event listener code into individual files is simple, and we'll be taking a similar approach to the command handler.\n\nYour project directory should look something like this:\n\nCreate an folder in the same directory. You can then move the code from your event listeners in to separate files: and .\n\nThe property states which event this file is for, and the property holds a boolean value that specifies if the event should run only once. You don't need to specify this in as the default behavior will be to run on every event instance. The function holds your event logic, which will be called by the event handler whenever the event emits.\n\nNext, let's write the code for dynamically retrieving all the event files in the folder. We'll be taking a similar approach to our command handler. Place the new code highlighted below in your .\n\nreturns an array of all the file names in the given directory and filters for only files, i.e. .\n\nYou'll notice the code looks very similar to the command loading above it - read the files in the events folder and load each one individually.\n\nThe open in new window class in discord.js extends the open in new window class. Therefore, the object exposes the open in new window and open in new window methods that you can use to register event listeners. These methods take two arguments: the event name and a callback function. These are defined in your separate event files as and .\n\nThe callback function passed takes argument(s) returned by its respective event, collects them in an array using the rest parameter syntax open in new window, then calls while passing in the array using the spread syntax open in new window. They are used here because different events in discord.js have different numbers of arguments. The rest parameter collects these variable number of arguments into a single array, and the spread syntax then takes these elements and passes them to the function.\n\nAfter this, listening for other events is as easy as creating a new file in the folder. The event handler will automatically retrieve and register it whenever you restart your bot.\n\nIf you want to compare your code to the code we've constructed so far, you can review it over on the GitHub repository here open in new window."
    },
    {
        "link": "https://discordjs.guide",
        "document": "If you're reading this, it probably means you want to learn how to make a bot with discord.js. Awesome! You've come to the right place. This guide will teach you things such as:\n• How to get a bot up and running from scratch;\n• How to properly create, organize, and expand on your commands;\n• And much more.\n\nThis guide will also cover subjects like common errors and how to solve them, keeping your code clean, setting up a proper development environment, etc. Sounds good? Great! Let's get started, then.\n\nAlright, making a bot is cool and all, but there are some prerequisites to it. To create a bot with discord.js, you should have a fairly decent grasp of JavaScript itself. While you can make a bot with very little JavaScript and programming knowledge, trying to do so without understanding the language first will only hinder you. You may get stuck on many uncomplicated issues, struggle with solutions to incredibly easy problems, and all-in-all end up frustrated. Sounds pretty annoying.\n\nIf you don't know JavaScript but would like to learn about it, here are a few links to help get you started:\n• Nodeschool, for both JavaScript and Node.js lessons\n\nTake your pick, learn some JavaScript, and once you feel like you're confident enough to make a bot, come back and get started!"
    },
    {
        "link": "https://discord.js.org",
        "document": "The way to build Discord bots.\n\ndiscord.js is a powerful Node.js module that allows you to interact with the Discord API very easily. It takes a much more object-oriented approach than most other JS Discord libraries, making your bot's code significantly tidier and easier to comprehend."
    },
    {
        "link": "https://dev.to/kjdowns/building-a-basic-discord-bot-5fgf",
        "document": "If you have a gaming hobby like me, chances are you have heard of or use the service Discord. For those not in the know, Discord is a voice-chat, messaging, and video streaming application. I have been using Discord for a few years now to chat and hang out with friends while gaming, but I was always intrigued by the bots that you can invite to your servers. These bots are programmed to perform specific actions in response to certain messages typed in text channels.\n\nI always wanted to learn how to make my own, and now that I have the coding knowledge to do so, I decided to take a crack at it. In this post, I'll be walking through the process of setting up my very first Discord bot: demo-bot (original, I know). Granted, this is a very simple bot that just responds to specific messages with a random reply - but it's a great starting point for learning how coding a bot works. This walkthrough will be using JavaScript, specifically the library. You will need to have Node installed if you'd like to code along.\n\nBefore we can get into actually coding, there are a few things we will need to set up first. The first thing you will need is a Discord account. If you don't have one, it's easy to sign up for free here. After creating an account and logging in, you will need to navigate to the developer portal at the bottom of the page.\n\nHere you will find documentation as well as an applications tab. To create a new application, simply click on the \"new application\" button! You will be prompted to enter a name for your bot, and once you click save you should be able to access various settings for our new application.\n\nThere are a lot of settings here that you can feel free to play around with, but the first thing we want to do is add the actual bot to the application. You can do this by clicking the bot tab, then the create bot button, and confirm. You will see a hidden token that is very important for connecting to our bot in our code. We can grab this in a little bit. You will also want to navigate back to the \"General Information\" tab and copy the client id there. We will be using this to invite our bot to our server.\n\nThere is one last step before we get to coding - we have to invite the bot to a server! For this I recommend creating your own test server so that you don't clog up a shared server when testing and debugging. To invite just pop the following url in your browser, substituting your own Client ID. Select the server you want to invite to and hit ok!\n\nThe first thing we have to do is set up our environment. Run the command to generate your file. We will also need an file - this is where we will be writing all of our bot code.\n\nAt this point I would also recommend creating a and file as well as installing by running . If you are working on your own local environment for testing purposes this isn't necessary, but it is best practice to hide sensitive variables like our Bot ID - especially if you are backing up your work on github.\n\nThe last package we will need is which will provide us an easy way to interface with the Discord API using JavaScript. Just run to install the package.\n\nOK, Can We Actually Code Now?\n\nAlright, the time has finally come! Open up that file and lets start getting things set up. The first thing we want to do is get hooked up to our index file as well as create a variable that we can operate on and use to connect to our bot.\n\n\n\nI like to set up my global variables at the top as well, so under the above code I am also going to create a variable that will be an array containing all of the replies that the bot can send.\n\n\n\nNext we are going to write some setup code that needs to run before anything else. We are first going to run our config so that we can access the variables in our file. Then we are going to call the method on our variable to start our bot. This method will take our secret Bot Token as an argument so that it knows which bot to connect to.\n\n\n\nAt this point we are ready to run our bot! Granted it doesn't do anything yet, but we can still run it nonetheless. If you type into your terminal it will launch the bot. You might notice that nothing is happening - let's go ahead and close the bot using and add in an action that will let us know for sure our bot is ready.\n\nFor responding to events, we will be using the method with our variable. This method is similar to event handlers in JavaScript and takes two arguments. The first is a string that is the type of event we will be responding to and the second is a callback that will be executed in response to the event.\n\nLet's set it up so that when the bot is connected and ready we print out \"Ready!\" to the console.\n\n\n\nNow if we try again, after a second we should see \"Ready!\" pop up in the terminal!\n\nThe second action the we need to be concerned with is \"message\". This event is triggered when a message is received in a text channel. it will look like this:\n\n\n\n\"message\" here is the event we will be responding to and is the callback we will be passing in that will execute when the \"message\" event is triggered. This is the main functionality of our bot so I'm going to provide the function code and then walk through what it is doing.\n\n\n\nSo we can see that the function takes in a object as an argument. This object contains a ton of metadata, and I suggest console logging it to get a better look at its properties, but for now we are only going to be concerned with two: and .\n\nThe content property is pretty self explanatory, it is just the text of the message. We are using to make the check case insensitive and then checking in our if statement if it matches the message we want to respond to.\n\nThe channel.id property is optional, but in this case our if statement is also checking that the message came from a specific channel. We are doing this in this example to restrict the bot to responding only to a specific channel. If you have developer mode turned on in your Discord application, you can grab a channel's ID by right clicking on the channel name and selecting \"copy id\".\n\nNow that we have checked to make sure the message that we have is the one we want our bot to respond to, we can dive into actually making the bot respond. First we create an index variable that will pick a random number within the range of the length of our array. To reply, we simply call on our object and pass in the message to respond with. In our case we will be passing in the index of our array equal to our randomly generated number.\n\nThis will send an @ reply to the user that posted the message with our bots response text. You can also do this without the @ reply, just sending a regular message to the chat. Instead of we would use and it would look like this:\n\n\n\nThis will simply send the reply to the same channel from which the bot received the message.\n\nThat's all there is to it! Granted this was a very simple \"hello World\" level application, but it covers the basics of getting started and can help you get started. There are so many more possibilities for building really robust bots that you can use within your own communities, or even publish for the public to invite to their servers. I hope you enjoyed, Happy Coding!\n\nFor a deeper look, check out the official documentation:\n\n Discord\n\n discord.js\n\nYou should also check out a great tutorial series that helped me get started:\n\n The Coding Train"
    },
    {
        "link": "https://medium.com/madhash/how-to-make-a-discord-bot-using-discord-js-4c339c7861c2",
        "document": "Discord is massive. It’s one of the most widely used to chat, talk, hang out, create communities and keep connected. In this tutorial, we will be making a discord bot to perform some automated tasks and commands on your server.\n\nThese tasks may be automated replies, content moderation, and banning any rule breakers. You can also use Discord Bots to add things to your server such as links, music, memes, and whatever else you want.\n\nFor this tutorial, we’re going to use to help build our Discord Bot. Here is a rundown of everything that will be covered in this piece:\n\nBefore we begin, here are the prerequisites for this tutorial:\n• you need to know at least some JavaScript\n• you will need to have installed so you can use\n\nIf you check all the boxes, then you can easily make a Discord Bot."
    },
    {
        "link": "https://discord.js.org/docs",
        "document": "discord.js is a powerful Node.js module that allows you to easily interact with the Discord API.\n• @discordjs/voice for interacting with the Discord Voice API ( )\n\nAfterwards we can create a quite simple example bot:\n• Guide (source) Also see the v13 to v14 Update Guide, which includes updated and removed items from the library.\n\nBefore creating an issue, please ensure that it hasn't already been reported/suggested, and double-check the documentation.\n\n See the contribution guide if you'd like to submit a PR.\n\nIf you don't understand something in the documentation, you are experiencing problems, or you just need a gentle nudge in the right direction, please don't hesitate to join our official discord.js Server."
    },
    {
        "link": "https://discordjs.guide/additional-info/changes-in-v14",
        "document": "Make sure you're using the latest LTS version of Node. To check your Node version, use in your terminal or command prompt, and if it's not high enough, update it! There are many resources online to help you with this step based on your host system.\n\n# Various packages are now included in v14\n\nIf you previously had , , , or manually installed, it's highly recommended that you uninstall the packages to avoid package version conflicts.\n\nAny areas that used to accept a or type for an enum parameter will now only accept exclusively s.\n\nIn addition, the old enums exported by discord.js v13 and lower are replaced with new enums from discord-api-types open in new window.\n\nMost of the difference between enums from discord.js and discord-api-types can be summarized as so:\n• Enums that are prefixed with no longer have the prefix, i.e., ->\n• Enum values are rather than , i.e., ->\n\nAreas like initialization, JSON slash commands and JSON message components will likely need to be modified to accommodate these changes:\n\nSome channel type guard methods that narrowed to one channel type have been removed. Instead compare the property against a ChannelType open in new window enum member to narrow channels.\n\nBuilders are no longer returned by the API like they were previously. For example you send the API an but you receive an of the same data from the API. This may affect how your code handles received structures such as components. Refer to message component changes section for more details.\n\nAdded and as top-level exports which disable or enable validation (enabled by default).\n\nVarious and methods on managers and objects have had their parameters consolidated. The changes are below:\n• now takes in the parameter\n• now takes in the parameter\n• now takes in the parameter\n• now takes in the parameter\n• now takes in the parameter\n• now takes in the parameter\n• now takes in the parameter\n• (and other text-based channels) now takes and in the parameter\n• now takes as a part of\n• now takes as a part of\n• now takes as a part of\n• now takes as a part of\n• now takes as a part of\n• now takes as a part of\n• now takes as a part of\n• now takes as a part of\n• now takes and as a part of\n• now takes , , and as a part of\n\nThe following properties have been removed as they are not documented by Discord:\n\nhas been removed as it is no longer supported by the API.\n• BitField constituents now have a suffix to avoid naming conflicts with the enum names:\n• has been renamed to\n\nThe methods that return CDN URLs have changed. Here is an example on a User:\n\nDynamic URLs use open in new window and static URLs use open in new window. Since dynamic URLs are returned by default, this option has been renamed to which forces the return of a static URL. Additionally, has been renamed to .\n\nis no longer a of channels the category contains. It is now a manager ( ). This also means has been moved to the .\n\nThe following type guards have been removed:\n\nRefer to this section for more context.\n\nThe base channel class is now .\n\nThe client option has been removed.\n\nno longer has a parameter for . See this pull request open in new window for more information.\n• Many constant objects and key arrays are now top-level exports for example:\n• None The refactored constants structures have member names as opposed to member names.\n• None Many of the exported constants structures have been replaced and renamed:\n\nThe and events are now removed. Use and instead.\n\n, and have all been removed. See this pull request open in new window for more information.\n\nThe event now emits the users who were added, the users who were removed, and the thread respectively.\n\nDevelopers should utilise instead of and :\n\n(introduced with version 14) and are both deprecated and will be removed in the future.\n\nand have been removed. Use and instead respectively.\n\nno longer has a default value of 25,000.\n\nhas been moved to . See this pull request open in new window for more information.\n\nhas been removed as it has been deemed defunct. There is no alternative.\n\nThe following properties & methods have been moved to the class:\n\nis now nullable to account for partial guild members. See this issue open in new window for more information.\n\nhas been removed as it is no longer supported by the API.\n\nWhenever an interaction is replied to and one fetches the reply, it could possibly give an if the guild was not cached. However, interaction replies now always return an open in new window with set to .\n\nThe base interaction class is now .\n\nis now a getter and resolves structures from the cache.\n• has now been renamed to .\n• MessageComponents have been renamed as well. They no longer have the prefix, and now have a suffix:\n• Components received from the API are no longer directly mutable. If you wish to mutate a component from the API, use . For example, if you want to make a button mutable:\n\n's second parameter has been removed. The the second parameter once was is now merged into the first parameter.\n• None has been renamed to\n• None has been removed. Use instead.\n• None has now been renamed to .\n• None now accepts a sole open in new window object.\n• None now accepts a sole open in new window object.\n• None has been removed. Use instead.\n• has been renamed as well and now has a suffix:\n\nThe string array has been removed. Use the enum instead.\n\nIn addition to this, there is now a new partial: .\n\nThread permissions and have been removed as they are deprecated in the API. Use and respectively.\n\nhas been deprecated due to API changes. Its replacement is . See this pull request open in new window for more information.\n\nOverwrites are now keyed by the permission key rather than the permission key.\n\nThis REST event has been removed as discord.js now uses Undici open in new window as the underlying request handler. You must now use a Diagnostics Channel open in new window. Here is a simple example:\n\nYou can find further examples at the Undici Diagnostics Channel documentation open in new window.\n\nThis REST event has been renamed to and moved to :\n\nThis REST event has been moved to :\n\nThis REST event has been renamed to and moved to :\n\nhas been removed. Use instead.\n\nis now a nullable string ( ). Previously, it was a nullable array of strings ( ). See this pull request open in new window for more information.\n\nThe helper used in has been removed. Discord has since allowed any guild to use any auto archive time which makes this helper redundant.\n\n's second parameter has been removed. The the second parameter once was is now merged into the first parameter. In addition, the boolean helper to specify has been removed.\n\nUsage is now as follows:\n\nhas been removed. To control mentions, you should use on instead.\n\nhas been removed. This utility method is something the developer themselves should do.\n\nhas been removed. Discord has since allowed any guild to use any auto archive time which makes this method redundant.\n\nOther functions in have been moved to top-level exports so you can directly import them from .\n\nYou can no longer use the property to check if a structure was deleted. See this issue open in new window for more information.\n\nhas been removed. You should use instead.\n\nhas been removed as it is no longer part of the API.\n\n's second parameter no longer allows a boolean to be passed. The option in should be used instead.\n\nhas been added which is the id of the guild the invoked application command is registered to.\n\nStore channels have been removed as they are no longer part of the API.\n\nhas been added which is a link to a channel, just like in the client.\n\nAdditionally, new typeguards have been added:\n\nAdded to check whether a given interaction can be replied to.\n• New type: which indicates an immutable .\n\nA new event has been added which is emitted whenever an element is not collected by the collector.\n\nComponent collector options now use the enum values:\n\nhas been added which is the id of the guild the invoked application command is registered to.\n\nnow has a third parameter which narrows the channel type.\n\nAdded which indicates the maximum number of video channel users.\n\nAdded which indicates the maximum number of video channel users for stage channels.\n\nAdded support for the parameter in .\n\nmay be used whilst creating a channel to initially set the camera video quality mode.\n\nAdded as manager for threads in forum channels.\n\nThis object now supports the property.\n\nAdded to fetch the client user in the guild.\n\nAdded and . These methods allow a single addition or removal of a role respectively to a guild member, even if uncached.\n\nAdded as manager for threads in text channels and announcement channels.\n\nhas been added as an approximate position in a thread.\n\nAdded to make the client user react with the reaction the class belongs to.\n\nStage channels now allow messages to be sent in them, much like voice channels.\n\nThe new options returns the associated guild member with the thread member.\n\nWhen fetching multiple thread members alongside , paginated results will be returned. The and option are supported in this scenario.\n\nAdded the property in options which allows a webhook to create a post in a forum channel.\n\ndiscord.js uses open in new window internally."
    },
    {
        "link": "https://discord.js.org/docs/packages/discord.js/14.14.1/Message:Class",
        "document": "A collection of attachments in the message - e.g. Pictures - mapped by their ids. This property requires the GatewayIntentBits.MessageContent privileged intent in a guild for messages that do not mention the client.\n\nThe message contents with all mentions replaced by the equivalent text. If mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.\n\nRepresents the author of the message as a guild member. Only available if the message comes from a guild where the author is still a member"
    },
    {
        "link": "https://stackoverflow.com/questions/73668373/how-to-reference-to-a-previous-bot-message-discord-js-v14",
        "document": "I want to change a specific message's embed after a while, but I am stuck at fetching the reference to this message correctly. Can someone point me in the right direction?\n\nI first tried this:\n\nBut when I try to use the msgRef object to update the message with another embed:\n\nI am bit confused at this point. How can I properly fetch a specific message's reference to change the content later? Is there a way maybe to search for it via a message ID?"
    },
    {
        "link": "https://discordjs.guide/creating-your-bot/command-handling",
        "document": "Unless your bot project is small, it's not a very good idea to have a single file with a giant / chain for commands. If you want to implement features into your bot and make your development process a lot less painful, you'll want to implement a command handler. Let's get started on that!\n\nFor fully functional slash commands, there are three important pieces of code that need to be written. They are:\n• The individual command files, containing their definitions and functionality.\n• The command handler, which dynamically reads the files and executes the commands.\n• The command deployment script, to register your slash commands with Discord so they appear in the interface. These steps can be done in any order, but all are required before the commands are fully functional. This page details how to complete Step 2. Make sure to also complete the other pages linked above!\n\nNow that your command files have been created, your bot needs to load these files on startup.\n\nIn your file, make these additions to the base template:\n\nWe recommend attaching a property to your client instance so that you can access your commands in other files. The rest of the examples in this guide will follow this convention. For TypeScript users, we recommend extending the base Client class to add this property, casting open in new window, or augmenting the module type open in new window.\n\nNext, using the modules imported above, dynamically retrieve your command files with a few more additions to the file:\n\nFirst, open in new window helps to construct a path to the directory. The first open in new window method then reads the path to the directory and returns an array of all the folder names it contains, currently . The second method reads the path to this directory and returns an array of all the file names they contain, currently . To ensure only command files get processed, removes any non-JavaScript files from the array.\n\nWith the correct files identified, the last step is dynamically set each command into the Collection. For each file being loaded, check that it has at least the and properties. This helps to prevent errors resulting from loading empty, unfinished, or otherwise incorrect command files while you're still developing.\n\nYou will receive an interaction for every slash command executed. To respond to a command, you need to create a listener for the open in new window event that will execute code when your application receives an interaction. Place the code below in the file you created earlier.\n\nNot every interaction is a slash command (e.g. interactions). Make sure to only handle slash commands in this function by making use of the open in new window method to exit the handler if another type is encountered. This method also provides typeguarding for TypeScript users, narrowing the type from to open in new window.\n\nWhen your bot receives a open in new window event, the interaction object contains all the information you need to dynamically retrieve and execute your commands!\n\nLet's take a look at the command again. Note the function that will reply to the interaction with \"Pong!\".\n\nFirst, you need to get the matching command from the Collection based on the . Your open in new window instance is always available via . If no matching command is found, log an error to the console and ignore the event.\n\nWith the right command identified, all that's left to do is call the command's method and pass in the variable as its argument. In case something goes wrong, catch and log any error to the console.\n\nYour command files are now loaded into your bot, and the event listener is prepared and ready to respond. In the next section, we cover the final step: a command deployment script you'll need to register your commands so they appear in the Discord client.\n\nIf you want to compare your code to the code we've constructed so far, you can review it over on the GitHub repository here open in new window."
    }
]