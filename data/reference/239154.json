[
    {
        "link": "https://learn.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2022",
        "document": "IntelliSense is a code-completion aid that includes features to help you learn more about the code you're using, keep track of the parameters that you type, and add calls to properties and methods with only a few keystrokes.\n\nMany aspects of IntelliSense are language-specific. For more information about IntelliSense for different languages, see the articles listed in the Related content section.\n\nA list of valid members from a type (or namespace) appears after you type a trigger character (for example, a period ( ) in managed code or in C++). If you continue typing characters, the list is filtered to include only the members that begin with those characters or where the beginning of any word within the name starts with those characters. IntelliSense also performs camel case matching, so you can just type the first letter of each camel-cased word in the member name to see the matches.\n\nAfter selecting an item, you can insert it into your code by pressing Tab or by typing a space. If you select an item and type a period, the item appears followed by the period, which brings up another member list. When you select an item but before you insert it, you get Quick Info for the item.\n\nIn the member list, the icon to the left represents the member type, such as namespace, class, function, or variable. The list might be long, so you can press PgUp and PgDn to move up or down in the list.\n\nYou can invoke the List Members feature manually by typing Ctrl+J, choosing Edit > IntelliSense > List Members, or by choosing the List Members button on the editor toolbar. When it's invoked on a blank line or outside a recognizable scope, the list displays symbols in the global namespace.\n\nTo turn List Members off by default so that it doesn't appear unless specifically invoked, go to Tools > Options > Text Editor > All Languages and deselect Auto list members. If you want to turn off List Members only for a specific language, go to the General settings for that language.\n\nParameter Info gives you information about the number, names, and types of parameters required by a method, attribute generic type parameter (in C#), or template (in C++).\n\nThe parameter in bold indicates the next parameter that is required as you type the function. For overloaded functions, you can use the Up and Down arrow keys to view alternative parameter information for the function overloads.\n\nWhen you annotate functions and parameters with XML Documentation comments, the comments display as Parameter Info. For more information, see Supply XML code comments.\n\nYou can manually invoke Parameter Info by choosing Edit > IntelliSense > Parameter Info, by pressing Ctrl+Shift+Space, or by choosing the Parameter Info button on the editor toolbar.\n\nQuick Info displays the complete declaration for any identifier in your code.\n\nWhen you select a member from the List Members box, Quick Info also appears.\n\nYou can manually invoke Quick Info by choosing Edit > IntelliSense > Quick Info, by pressing Ctrl+K, Ctrl+I, or by choosing the Quick Info button on the editor toolbar.\n\nIf a function is overloaded, IntelliSense might not display information for all forms of the overload.\n\nYou can turn Quick Info off for C++ code by navigating to Tools > Options > Text Editor > C/C++ > Advanced, and setting Auto Quick Info to .\n\nComplete Word completes the rest of a variable, command, or function name after you enter enough characters to disambiguate the term. You can invoke Complete Word by choosing Edit > IntelliSense > Complete Word, by pressing Ctrl+Space, or by choosing the Complete Word button on the editor toolbar.\n\nIntelliSense options are on by default. To turn them off, go to Tools > Options > Text Editor > All Languages and deselect Parameter information or Auto list members if you don't want the List Members feature.\n\nThe icons in IntelliSense can convey additional meaning with icon modifiers. These are stars, hearts, and locks layered on top of the object's icon that convey protected, internal, or private, respectively.\n\nThe IntelliSense options might not work as you expect in certain cases.\n• None The cursor is below a code error: You might not be able to use IntelliSense if an incomplete function or other error exists in the code above the cursor because IntelliSense might not be able to parse the code elements. You can resolve this problem by commenting out the applicable code.\n• None The cursor is in a code comment: You can't use IntelliSense if the cursor is in a comment in your source file.\n• None The cursor is in a string literal: You can't use IntelliSense if the cursor is in the quotation marks around a string literal, as in the following example:\n• None The automatic options are turned off: By default, IntelliSense works automatically, but you can disable it. Even if automatic statement completion is disabled, you can invoke an IntelliSense feature."
    },
    {
        "link": "https://stackoverflow.com/questions/68681426/visual-studio-2022-template-intellisense-for-parameter-packs",
        "document": "So Microsoft added a new feature for intellisense called \"Template Intellisense\". The feature is really useful but I came across a problem, I can't seem to understand how I will use it for parameter packs. I've look through their documentation several times but I can't seem to find anything for parameter packs. A help would be nice! :)"
    },
    {
        "link": "https://code.visualstudio.com/docs/editor/intellisense",
        "document": "IntelliSense is a general term for various code editing features including: code completion, parameter info, quick info, and member lists. IntelliSense features are sometimes called by other names such as \"code completion\", \"content assist\", and \"code hinting.\"\n\nVisual Studio Code IntelliSense is provided for JavaScript, TypeScript, JSON, HTML, CSS, SCSS, and Less out of the box. VS Code supports word-based completions for any programming language but can also be configured to have richer IntelliSense by installing a language extension.\n\nBelow are the most popular language extensions in the Visual Studio Marketplace. Select an extension tile below to read the description and reviews to decide which extension is best for you.\n\nVS Code IntelliSense features are powered by a language service. A language service provides intelligent code completions based on language semantics and an analysis of your source code. If a language service knows possible completions, the IntelliSense suggestions will pop up as you type. If you continue typing characters, the list of members (variables, methods, and more) is filtered to only include members containing your typed characters. Pressing Tab or Enter will insert the selected member.\n\nYou can trigger IntelliSense in any editor window by typing ⌃Space (Windows, Linux Ctrl+Space) or by typing a trigger character (such as the dot character (.) in JavaScript).\n\nIf you prefer, you can turn off IntelliSense while you type. See Customizing IntelliSense, to learn how to disable or customize VS Code's IntelliSense features.\n\nAs provided by the language service, you can see quick info for each method by either pressing ⌃Space (Windows, Linux Ctrl+Space) or selecting the icon. The accompanying documentation for the method expands to the side. The expanded documentation remains available and updates as you navigate the list. You can close this by pressing ⌃Space (Windows, Linux Ctrl+Space) again or by selecting the close icon.\n\nAfter choosing a method, you are provided with parameter info.\n\nWhen applicable, a language service surfaces the underlying types in the quick info and method signatures. In the previous screenshot, you can see several types. Because JavaScript is dynamic and doesn't need or enforce types, suggests that the variable can be of any type.\n\nThe JavaScript code in the following screenshot illustrates IntelliSense completions. IntelliSense gives both inferred proposals and the global identifiers of the project. The inferred symbols are presented first, followed by the global identifiers (indicated by the word icon).\n\nVS Code IntelliSense offers different types of completions, including language server suggestions, snippets, and simple word-based textual completions.\n\nYou can customize your IntelliSense experience in settings and keyboard shortcuts.\n\nThe settings shown below are the default settings. You can change these settings in the Settings editor (⌘, (Windows, Linux Ctrl+,)).\n\n// Controls if quick suggestions should show up while typing // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character. // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change // Controls the delay in ms after which quick suggestions will show up. // Controls if suggestions should automatically show up when typing trigger characters // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions // Controls whether sorting favours words that appear close to the cursor // Controls how suggestions are pre-selected when showing the suggest list\n\nThe editor supports tab completion, which inserts the best matching completion when pressing Tab. This works regardless of the suggest control showing or not. Also, pressing Tab after inserting a suggestion inserts the next best suggestion.\n\nBy default, tab completion is disabled. Use the editor.tabCompletion setting to enable it. These values exist:\n• - Tab completion is enabled for all suggestions and repeated invocations insert the next best suggestion.\n• - Tab completion only inserts static snippets which prefix match the current line prefix.\n\nSorting of suggestions depends on extension information and on how well they match the current word you are typing. In addition, you can ask the editor to boost suggestions that appear closer to the cursor position, using the editor.suggest.localityBonus setting.\n\nIn the previous screenshot, you can see that , , and are sorted based on the scopes in which they appear (loop, function, file).\n\nBy default, VS Code pre-selects the first suggestion in the suggestion list. If you'd like different behavior, for example, to always select the most recently used item in the suggestion list, you can use the editor.suggestSelection setting.\n\nThe available editor.suggestSelection values are:\n• - The previously used item is selected unless a prefix (type to select) selects a different item.\n• - Select items based on previous prefixes that have completed those suggestions.\n\nSelecting the most recently used item is very useful as you can quickly insert the same completion multiple times.\n\n\"Type to select\" means that the current prefix (roughly the text left of the cursor) is used to filter and sort suggestions. When this happens and when its result differs from the result of , it will be given precedence.\n\nWhen using the last option, , VS Code remembers which item was selected for a specific prefix (partial text). For example, if you typed and then selected , the next time you typed , the suggestion would be pre-selected. This lets you quickly map various prefixes to different suggestions, for example -> and -> .\n\nBy default, VS Code shows snippets and completion proposals in one control. You can modify the behavior with the editor.snippetSuggestions setting. To remove snippets from the suggestions control, set the value to . If you'd like to see snippets, you can specify the order relative to suggestions; at the top ( ), at the bottom ( ), or inline ordered alphabetically ( ). The default is .\n\nThe keyboard shortcuts shown here are the default keyboard shortcuts. To assign a different keyboard shortcut, use the Keyboard Shortcuts editor (⌘K ⌘S (Windows, Linux Ctrl+K Ctrl+S)).\n\nGitHub Copilot provides coding suggestions as you type in your editor. You can also ask Copilot coding-related questions, such as how best to code something, how to fix a bug, or how someone else's code works.\n• Discover the key functionality with our Copilot quickstart.\n\nIf you find IntelliSense has stopped working, the language service may not be running. Try restarting VS Code and this should solve the issue. If you are still missing IntelliSense features after installing a language extension, open an issue in the repository of the language extension.\n\nA particular language extension may not support all the VS Code IntelliSense features. Review the extension's README to find out what is supported. If you think there are issues with a language extension, you can usually find the issue repository for an extension through the VS Code Marketplace. Navigate to the extension's Details page and select the Support link.\n\nIntelliSense is just one of VS Code's powerful features. Read on to learn more:\n• Debugging - Learn how to set up debugging for your application.\n• Creating Language extensions - Learn how to create extensions that add IntelliSense for new programming languages.\n• GitHub Copilot in VS Code - Learn how to use AI with GitHub Copilot to enhance your coding.\n\nWhy am I not getting any suggestions?\n\nThis can be caused by a variety of reasons. First, try restarting VS Code. If the problem persists, consult the language extension's documentation. For JavaScript-specific troubleshooting, please see the JavaScript language topic.\n\nWhy am I not seeing method and variable suggestions?\n\nThis issue is caused by missing type declaration (typings) files in JavaScript. Most common JavaScript libraries ship with declaration files or have type declaration files available.\n\nMake sure to install the corresponding npm or yarn package for the library you are using. Learn more about IntelliSense in the Working with JavaScript article. For other languages, please consult the extension's documentation."
    },
    {
        "link": "https://reddit.com/r/dotnet/comments/ssxj28/visual_studio_2022_intellisense_is_so_good_its",
        "document": "Has anyone used VS 2022 and gotten a load of the intellisense? It's gone to a whole new level. It's almost reading my mind. It's both awesome and slightly eerie.\n\nYeah intellisense, you are why we can't have nice code challenge results, lol. I swear it's hard to code without it."
    },
    {
        "link": "https://stackoverflow.com/questions/72905572/visual-studio-2022-intellisense-xml-documentation-started-failing",
        "document": "I've been working on a long and convoluted C++ project in Visual Studio 2022, so I've been making sure to comment as much as possible and have been using the XML documentation summaries for most every function.\n\nThese summaries are supposed to show up in IntelliSense when writing the function, and then the parameter summaries should show up when in the spot for that parameter.\n\nUp until today everything had been working pretty much fine, it was always finnicky, but mostly it worked. Today however it all stopped showing up, so I tried following some recommendations from past posts, turning on or off the generation of an XML file, parameter information for C++, and restarting Visual Studio. Nothing has fixed it.\n\nI have managed to find a random portion of my code in which summaries show up for some reason, but even there they're the wrong ones.\n\nDoes anyone know of any way to fix this issue? I really need these summaries.\n\nEDIT: Here's a screenshot of my C++ Intellisense settings"
    },
    {
        "link": "https://learn.microsoft.com/en-us/visualstudio/ide/using-intellisense?view=vs-2022",
        "document": "IntelliSense is a code-completion aid that includes features to help you learn more about the code you're using, keep track of the parameters that you type, and add calls to properties and methods with only a few keystrokes.\n\nMany aspects of IntelliSense are language-specific. For more information about IntelliSense for different languages, see the articles listed in the Related content section.\n\nA list of valid members from a type (or namespace) appears after you type a trigger character (for example, a period ( ) in managed code or in C++). If you continue typing characters, the list is filtered to include only the members that begin with those characters or where the beginning of any word within the name starts with those characters. IntelliSense also performs camel case matching, so you can just type the first letter of each camel-cased word in the member name to see the matches.\n\nAfter selecting an item, you can insert it into your code by pressing Tab or by typing a space. If you select an item and type a period, the item appears followed by the period, which brings up another member list. When you select an item but before you insert it, you get Quick Info for the item.\n\nIn the member list, the icon to the left represents the member type, such as namespace, class, function, or variable. The list might be long, so you can press PgUp and PgDn to move up or down in the list.\n\nYou can invoke the List Members feature manually by typing Ctrl+J, choosing Edit > IntelliSense > List Members, or by choosing the List Members button on the editor toolbar. When it's invoked on a blank line or outside a recognizable scope, the list displays symbols in the global namespace.\n\nTo turn List Members off by default so that it doesn't appear unless specifically invoked, go to Tools > Options > Text Editor > All Languages and deselect Auto list members. If you want to turn off List Members only for a specific language, go to the General settings for that language.\n\nParameter Info gives you information about the number, names, and types of parameters required by a method, attribute generic type parameter (in C#), or template (in C++).\n\nThe parameter in bold indicates the next parameter that is required as you type the function. For overloaded functions, you can use the Up and Down arrow keys to view alternative parameter information for the function overloads.\n\nWhen you annotate functions and parameters with XML Documentation comments, the comments display as Parameter Info. For more information, see Supply XML code comments.\n\nYou can manually invoke Parameter Info by choosing Edit > IntelliSense > Parameter Info, by pressing Ctrl+Shift+Space, or by choosing the Parameter Info button on the editor toolbar.\n\nQuick Info displays the complete declaration for any identifier in your code.\n\nWhen you select a member from the List Members box, Quick Info also appears.\n\nYou can manually invoke Quick Info by choosing Edit > IntelliSense > Quick Info, by pressing Ctrl+K, Ctrl+I, or by choosing the Quick Info button on the editor toolbar.\n\nIf a function is overloaded, IntelliSense might not display information for all forms of the overload.\n\nYou can turn Quick Info off for C++ code by navigating to Tools > Options > Text Editor > C/C++ > Advanced, and setting Auto Quick Info to .\n\nComplete Word completes the rest of a variable, command, or function name after you enter enough characters to disambiguate the term. You can invoke Complete Word by choosing Edit > IntelliSense > Complete Word, by pressing Ctrl+Space, or by choosing the Complete Word button on the editor toolbar.\n\nIntelliSense options are on by default. To turn them off, go to Tools > Options > Text Editor > All Languages and deselect Parameter information or Auto list members if you don't want the List Members feature.\n\nThe icons in IntelliSense can convey additional meaning with icon modifiers. These are stars, hearts, and locks layered on top of the object's icon that convey protected, internal, or private, respectively.\n\nThe IntelliSense options might not work as you expect in certain cases.\n• None The cursor is below a code error: You might not be able to use IntelliSense if an incomplete function or other error exists in the code above the cursor because IntelliSense might not be able to parse the code elements. You can resolve this problem by commenting out the applicable code.\n• None The cursor is in a code comment: You can't use IntelliSense if the cursor is in a comment in your source file.\n• None The cursor is in a string literal: You can't use IntelliSense if the cursor is in the quotation marks around a string literal, as in the following example:\n• None The automatic options are turned off: By default, IntelliSense works automatically, but you can disable it. Even if automatic statement completion is disabled, you can invoke an IntelliSense feature."
    },
    {
        "link": "https://code.visualstudio.com/docs/editor/intellisense",
        "document": "IntelliSense is a general term for various code editing features including: code completion, parameter info, quick info, and member lists. IntelliSense features are sometimes called by other names such as \"code completion\", \"content assist\", and \"code hinting.\"\n\nVisual Studio Code IntelliSense is provided for JavaScript, TypeScript, JSON, HTML, CSS, SCSS, and Less out of the box. VS Code supports word-based completions for any programming language but can also be configured to have richer IntelliSense by installing a language extension.\n\nBelow are the most popular language extensions in the Visual Studio Marketplace. Select an extension tile below to read the description and reviews to decide which extension is best for you.\n\nVS Code IntelliSense features are powered by a language service. A language service provides intelligent code completions based on language semantics and an analysis of your source code. If a language service knows possible completions, the IntelliSense suggestions will pop up as you type. If you continue typing characters, the list of members (variables, methods, and more) is filtered to only include members containing your typed characters. Pressing Tab or Enter will insert the selected member.\n\nYou can trigger IntelliSense in any editor window by typing ⌃Space (Windows, Linux Ctrl+Space) or by typing a trigger character (such as the dot character (.) in JavaScript).\n\nIf you prefer, you can turn off IntelliSense while you type. See Customizing IntelliSense, to learn how to disable or customize VS Code's IntelliSense features.\n\nAs provided by the language service, you can see quick info for each method by either pressing ⌃Space (Windows, Linux Ctrl+Space) or selecting the icon. The accompanying documentation for the method expands to the side. The expanded documentation remains available and updates as you navigate the list. You can close this by pressing ⌃Space (Windows, Linux Ctrl+Space) again or by selecting the close icon.\n\nAfter choosing a method, you are provided with parameter info.\n\nWhen applicable, a language service surfaces the underlying types in the quick info and method signatures. In the previous screenshot, you can see several types. Because JavaScript is dynamic and doesn't need or enforce types, suggests that the variable can be of any type.\n\nThe JavaScript code in the following screenshot illustrates IntelliSense completions. IntelliSense gives both inferred proposals and the global identifiers of the project. The inferred symbols are presented first, followed by the global identifiers (indicated by the word icon).\n\nVS Code IntelliSense offers different types of completions, including language server suggestions, snippets, and simple word-based textual completions.\n\nYou can customize your IntelliSense experience in settings and keyboard shortcuts.\n\nThe settings shown below are the default settings. You can change these settings in the Settings editor (⌘, (Windows, Linux Ctrl+,)).\n\n// Controls if quick suggestions should show up while typing // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character. // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change // Controls the delay in ms after which quick suggestions will show up. // Controls if suggestions should automatically show up when typing trigger characters // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions // Controls whether sorting favours words that appear close to the cursor // Controls how suggestions are pre-selected when showing the suggest list\n\nThe editor supports tab completion, which inserts the best matching completion when pressing Tab. This works regardless of the suggest control showing or not. Also, pressing Tab after inserting a suggestion inserts the next best suggestion.\n\nBy default, tab completion is disabled. Use the editor.tabCompletion setting to enable it. These values exist:\n• - Tab completion is enabled for all suggestions and repeated invocations insert the next best suggestion.\n• - Tab completion only inserts static snippets which prefix match the current line prefix.\n\nSorting of suggestions depends on extension information and on how well they match the current word you are typing. In addition, you can ask the editor to boost suggestions that appear closer to the cursor position, using the editor.suggest.localityBonus setting.\n\nIn the previous screenshot, you can see that , , and are sorted based on the scopes in which they appear (loop, function, file).\n\nBy default, VS Code pre-selects the first suggestion in the suggestion list. If you'd like different behavior, for example, to always select the most recently used item in the suggestion list, you can use the editor.suggestSelection setting.\n\nThe available editor.suggestSelection values are:\n• - The previously used item is selected unless a prefix (type to select) selects a different item.\n• - Select items based on previous prefixes that have completed those suggestions.\n\nSelecting the most recently used item is very useful as you can quickly insert the same completion multiple times.\n\n\"Type to select\" means that the current prefix (roughly the text left of the cursor) is used to filter and sort suggestions. When this happens and when its result differs from the result of , it will be given precedence.\n\nWhen using the last option, , VS Code remembers which item was selected for a specific prefix (partial text). For example, if you typed and then selected , the next time you typed , the suggestion would be pre-selected. This lets you quickly map various prefixes to different suggestions, for example -> and -> .\n\nBy default, VS Code shows snippets and completion proposals in one control. You can modify the behavior with the editor.snippetSuggestions setting. To remove snippets from the suggestions control, set the value to . If you'd like to see snippets, you can specify the order relative to suggestions; at the top ( ), at the bottom ( ), or inline ordered alphabetically ( ). The default is .\n\nThe keyboard shortcuts shown here are the default keyboard shortcuts. To assign a different keyboard shortcut, use the Keyboard Shortcuts editor (⌘K ⌘S (Windows, Linux Ctrl+K Ctrl+S)).\n\nGitHub Copilot provides coding suggestions as you type in your editor. You can also ask Copilot coding-related questions, such as how best to code something, how to fix a bug, or how someone else's code works.\n• Discover the key functionality with our Copilot quickstart.\n\nIf you find IntelliSense has stopped working, the language service may not be running. Try restarting VS Code and this should solve the issue. If you are still missing IntelliSense features after installing a language extension, open an issue in the repository of the language extension.\n\nA particular language extension may not support all the VS Code IntelliSense features. Review the extension's README to find out what is supported. If you think there are issues with a language extension, you can usually find the issue repository for an extension through the VS Code Marketplace. Navigate to the extension's Details page and select the Support link.\n\nIntelliSense is just one of VS Code's powerful features. Read on to learn more:\n• Debugging - Learn how to set up debugging for your application.\n• Creating Language extensions - Learn how to create extensions that add IntelliSense for new programming languages.\n• GitHub Copilot in VS Code - Learn how to use AI with GitHub Copilot to enhance your coding.\n\nWhy am I not getting any suggestions?\n\nThis can be caused by a variety of reasons. First, try restarting VS Code. If the problem persists, consult the language extension's documentation. For JavaScript-specific troubleshooting, please see the JavaScript language topic.\n\nWhy am I not seeing method and variable suggestions?\n\nThis issue is caused by missing type declaration (typings) files in JavaScript. Most common JavaScript libraries ship with declaration files or have type declaration files available.\n\nMake sure to install the corresponding npm or yarn package for the library you are using. Learn more about IntelliSense in the Working with JavaScript article. For other languages, please consult the extension's documentation."
    },
    {
        "link": "https://stackoverflow.com/questions/73167718/how-to-change-intellisense-autocomplete-in-visual-studio",
        "document": "When I write commonly used methods such as Start() or Update() IntelliSense autocompletes them as private void Start() { }. I don't put private in front of methods or variables because they're private by default, so it's quite tedious having to remove it dozens of times per day.\n\nSo how do I change that autocomplete template?"
    },
    {
        "link": "https://code.visualstudio.com/docs/cpp/configure-intellisense",
        "document": "This article is about configuring the C/C++ extension to provide C++ specific IntelliSense suggestions in Visual Studio Code. IntelliSense is a helpful tool built into VS Code that provides various code editing features to help you code faster and more efficiently. For example, code completion, parameter info, syntax highlighting, Code Actions (light bulbs), and member lists are all generated using IntelliSense.\n\nC/C++ IntelliSense only requires a C/C++ compiler to be installed on your system. The C/C++ compiler provides C++ specific information to IntelliSense, such as the locations of system include paths and other settings. For project level configurations, reference Project level IntelliSense configuration section.\n\nWhen will the C/C++ extension configure core IntelliSense features for me?\n\nA compiler is the only requirement to configure core IntelliSense functionality. To identify a compiler for IntelliSense, the C/C++ extension scans common paths on your machine for compilers such as Clang, GCC, MinGW, cygwin, cygwin64, and MSVC. If any of these compilers are identified and in a secure location, they are automatically configured for IntelliSense. Otherwise, a notification is displayed asking you to confirm that this compiler should be configured for IntelliSense. In either of these scenarios, the compiler selected is also set as the default compiler.\n\nHow to check whether IntelliSense is configured\n\nIf you don't have IntelliSense configured, the C/C++ extension shows a yellow indicator in the status bar with a warning sign labeled Configure IntelliSense.\n\nTo configure, select the status bar indicator, which brings up the configuration Quick Pick. The Quick Pick can help you select or install a C/C++ compiler.\n\nIf you do not see a status bar indicator, you can also check your project's file. This file stores all of your IntelliSense configuration settings. Navigate to this file by selecting C/C++: Edit Configurations (UI) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)). Check the to find your configuration. To learn more about the file, you can review the schema reference.\n\nIntelliSense configuration is stored in the file, which is automatically created in your workspace. All three of the following options are different ways of editing the file:\n\nOpen the Quick Pick by entering Select IntelliSense Configuration in the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)), which shows you a dropdown with all of the configuration options found by the C/C++ extension on your machine.\n\nSelect one of the options available. If you select a compiler, this compiler is used by IntelliSense by default. You can return to the Configure IntelliSense Quick Pick at any point to change which option is used to configure IntelliSense.\n\nIf no options are available in the Quick Pick, no compiler could be identified in your system. You can browse your machine manually or install a C/C++ compiler. To install on a Windows machine, select the Help me install a compiler option that redirects you to the step-by-step walkthrough of how to install a C/C++ compiler. On a macOS or Linux machine, select Install a compiler and navigate through the prompts to have a C++ compiler installed on your machine.\n\nOption 2. Edit your IntelliSense configurations through the UI\n\nOpen your IntelliSense configuration by selecting C/C++: Edit Configurations (UI) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)). This view is a user interface for the file.\n\nSet the Compiler path field to the full path of the compiler you're using to build your project. For example, when using the default install path for GCC on Linux, the compiler path is . Set the IntelliSense mode to the architecture-specific variant of the compiler you're using.\n\nYou can edit the file directly to customize your configuration. Use the C/C++ Edit Configurations (JSON) command from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)), then the file is created in the folder of your workspace.\n\nUse the variable to add a compiler. This variable is the full path of the compiler you're using to build your project. For example, when using the default install path for GCC on Linux, the compiler path is .\n\nFor more information about the file, review the schema reference.\n\nSelect the sample below based on your operating system for a file:\n\nConfiguring IntelliSense with a compiler provides you with core IntelliSense features. This setup is called the base configuration. For more complex usage scenarios, such as setting up a project that requires:\n• Additional include paths, such as references to one or multiple different libraries\n• Specific compiler arguments that influence the behavior of the language(and therefore IntelliSense)\n\nThere are multiple other ways to configure IntelliSense. You can provide these additional configurations either through:\n• A custom configuration provider in the form of another VS Code extension (for example, the Makefile Tools or CMake Tools extensions)\n\nA custom configuration provider is another extension in VS Code that can potentially provide more accurate C++ IntelliSense configuration than the C/C++ extension. For example, for the CMake or Make build systems, where the Makefile Tools or CMake Tools extensions can be configuration providers. To add an extension as a configuration provider, either select the extension through the configuration Quick Pick, add it to configuration UI by editing the Configuration provider field under Advanced Settings, or add the field to your file. For example, for the CMake extension, the path to add would be .\n\nThe C/C++ extension scans your system for custom configuration providers. If it identifies only one custom configuration provider, this configuration provider is automatically configured for IntelliSense. If there are multiple configuration providers identified, you need to select which the extension should use by opening the configuration Quick Pick.\n\nAnother option to provide IntelliSense configuration is a compile_commands.json file, which describes the exact compile commands used for every file in a project. This file is often generated by a build system, such as CMake or Bazel, by setting command line arguments when configuring your project. A file can be selected for configuration through the same methods as discussed in the How to configure IntelliSense section via the configuration Quick Pick, editing configurations through the UI, or editing the file directly. In the configuration UI, the file can be added under Advanced Configurations and the Compile commands field. For example, if your file is in the root of your workspace, enter in the Compile commands field. Otherwise, it can be added to the file directly using the configuration property.\n\nIf the compile commands database does not contain an entry for the translation unit that corresponds to the file you opened in the editor, your base configuration (found in ) is used instead (such as your and ). If the C/C++ extension reverts to the base configuration, the language status bar indicator shows you the label Configure IntelliSense in the status bar.\n\nIf you specified a custom configuration provider and a file, the custom configuration provider is queried first for an IntelliSense configuration.\n\nIf your program includes header files that aren't in your workspace or that aren't in the standard library path, you can modify the Include Path. The C/C++ extension populates the include path by querying the compiler specified by Compiler path. If the extension can't find the path for the target system libraries, you can enter the include path manually.\n\nYou can determine if IntelliSense is actively working on your file using the language status bar. To invoke the language status bar, open a C++ file. The status bar shows the text {} C++. Hover over the {} symbol to open the language status bar flyout. The top item in the flyout indicates the IntelliSense status. Here are the different statuses and their meanings:\n• IntelliSense: Ready = IntelliSense is configured for the C/C++ extension and automatically activates if you interact with the editor, for example, by writing code.\n• IntelliSense: Updating = IntelliSense is actively working to determine any code completions, syntax highlighting, etc. based on changes you're making to your code.\n\nYou can select the pin icon on the right of any item in the language status bar flyout to permanently pin it to your status bar.\n• For more information about IntelliSense configuration, see Customizing default settings.\n• If you have trouble configuring the settings, please start a discussion at GitHub discussions, or if you find an issue that needs to be fixed, file an issue at GitHub issues.\n• Review the Overview of the C++ extension."
    },
    {
        "link": "https://stackoverflow.com/questions/75093418/intellisense-suggestions-for-c-concepts-in-visual-studio",
        "document": "I'm very new to and and started using them in Visual Studio 2022 (17.4.2).\n\nHere is a program that compiles, but I find that the IntelliSense it not working as I had hoped:\n\nAs you can see in the marked line, I access the member, but while typing it, I do not get any suggestions. I understand that this is not working for general , but I was hoping that this would work in conjunction with .\n\nHaving no IntelliSense in all functions with sounds very cumbersome, as errors will only show up when you compile and missing suggestions means slower coding.\n\nFrom the replies here I expected this to be implemented by now. Is there anything I'm missing or not doing incorrectly?\n\nThank you in advance!"
    }
]