[
    {
        "link": "https://datacamp.com/tutorial/synthetic-data-generation",
        "document": "Discover how to begin responsibly leveraging generative AI. Learn how generative AI models are developed and how they will impact society moving forward."
    },
    {
        "link": "https://medium.com/@nnai/generating-and-augmenting-synthetic-data-for-machine-learning-techniques-and-applications-b0df8407b3d7",
        "document": "This article explores the importance of synthetic data in machine learning and GenAI, showcasing practical techniques for generating and augmenting data to enhance model training and performance.\n\nSynthetic data refers to artificially created data that mimics the statistical properties and patterns of real-world data without containing any actual values from the original dataset. It serves as a valuable resource for testing algorithms, training machine learning models, and developing software applications while ensuring privacy and compliance with regulations.\n\nWe will provide theoretical explanations alongside Python code examples demonstrating different methods of synthetic data generation, including linear relationships with noise, polynomial relationships, sinusoidal patterns, logarithmic relationships, exponential growth with noise, and even generating shapes or handwritten data.\n• Privacy Preservation: Synthetic datasets do not contain personally identifiable information (PII), making them ideal for testing and training without risking privacy violations.\n• Data Augmentation: They can fill gaps in existing datasets, providing additional samples that enhance model training.\n• Cost-Effective: Creating synthetic data can be more economical than collecting real-world data.\n• Bias Mitigation: It allows for the creation of balanced datasets that can help reduce bias in machine learning models.\n• Flexibility: Synthetic data can be generated to meet specific requirements or scenarios that may not be present in real-world datasets.\n\nLinear synthetic data can be generated by creating a linear relationship between features and adding random noise to simulate real-world variability.\n\nIn this example, we generate synthetic data that follows a linear relationship defined by the equation:\n• m is the slope of the line,\n• ϵ represents random noise added to simulate variability in the data.\n\nThis approach helps in understanding how real-world data often deviates from perfect linearity due to various factors, and it provides a more realistic dataset for training machine learning models.\n\nWhen you run the above code, you will see a scatter plot displaying both training and testing data points. The red line represents the true linear relationship without noise. The scattered points illustrate how the actual data varies around this line due to the added noise.\n\nThis visual representation effectively communicates the concept of linear data generation with noise and serves as a practical example for understanding synthetic data generation techniques.\n\nPolynomial data generation with noise is a method used to create synthetic datasets that exhibit polynomial relationships between independent and dependent variables while incorporating random noise to simulate real-world conditions.\n\nA polynomial relationship can be expressed mathematically as:\n• n is the degree of the polynomial.\n\nThese relationships can model various phenomena, such as growth patterns, physical laws, and economic trends.\n\nThis method is particularly useful for testing algorithms on data with smooth periodic trends, but with some noise or fluctuation to make the problem more realistic.\n\nIn this approach, the data is generated by using a sinusoidal function (sine or cosine) as the underlying model, and random noise is added to introduce variability in the output. The noise represents factors like measurement errors or minor disturbances that occur naturally in real-world data.\n• A is the amplitude of the sine wave, which controls the height of the peaks and troughs.\n• f is the frequency of the sine wave, which determines how many oscillations occur within a given range of xxx.\n• ϕ\\phiϕ is the phase shift, which controls the horizontal displacement of the wave along the xxx-axis.\n• ϵ\\epsilonϵ is the noise term, typically modeled as random noise drawn from a normal distribution, ϵ∼N(0,σ2)\\epsilon \\sim \\mathcal{N}(0, \\sigma²)ϵ∼N(0,σ2), where σ2\\sigma²σ2 is the variance of the noise. This represents random fluctuations or errors added to the sinusoidal pattern.​\n\nTo illustrate this concept practically, we can generate synthetic data that follows a sinusoidal relationship with added noise. Below is an example using Python to create and visualize such data.\n\nThe synthetic data generated by your code follows a sinusoidal pattern with added Gaussian noise, described by the equation:\n\nThis equation encapsulates both the underlying sinusoidal relationship and the randomness introduced by noise, making it suitable for testing algorithms and models that need to handle real-world data variability.\n\nBelow is the plot illustrating the synthetic sinusoidal data generated using the equation y=sin⁡(X)+ϵy=sin(X)+ϵ, where noise has been added to simulate real-world variability.”\n\nLogarithmic relationships are common in various fields, including economics, biology, and physics, where they model phenomena that exhibit diminishing returns or growth patterns that slow down over time. A logarithmic function can be expressed mathematically as:\n• a is a scaling factor that affects the amplitude of the logarithmic curve.\n• c is a constant that shifts the input horizontally.\n\nThe logarithmic function grows quickly for small values of xx and then levels off as xx increases, making it suitable for modeling scenarios where growth slows over time.\n\nTo illustrate this concept practically, we can generate synthetic data that follows a logarithmic relationship with added noise. Below is an example using Python to create and visualize such data.\n\nWhen you run this code snippet, it generates synthetic data that follows a logarithmic relationship defined by:\n\nwhile also adding Gaussian noise to simulate real-world variability. The plot will display both training and testing data points along with the underlying logarithmic trend.\n\nExponential growth is a common phenomenon observed in various fields, including biology, finance, and physics, where quantities increase at a rate proportional to their current value. This type of growth can be described mathematically using the exponential function:\n• a is a scaling factor that determines the initial value.\n• b is the growth rate, which indicates how quickly the quantity grows.\n• e is Euler’s number (approximately equal to 2.71828), which is the base of natural logarithms.\n\nExponential functions are characterized by their rapid growth, making them suitable for modeling scenarios such as population growth, compound interest, and the spread of diseases.\n\nTo illustrate this concept practically, we can generate synthetic data that follows an exponential relationship with added noise. Below is an example using Python to create and visualize such data.\n\nWhen you run this code snippet, it generates synthetic data that follows an exponential relationship defined by:\n\nwhile also adding Gaussian noise to simulate real-world variability. The plot will display both training and testing data points along with the underlying exponential trend.\n\nSynthetic images are generated using a variety of methods, including generative models such as Generative Adversarial Networks (GANs), Variational Autoencoders (VAEs), and other machine learning techniques. These models learn from existing datasets to create new images that share similar characteristics to the training data.\n\nOne of the simplest forms of image generation is creating random images using numerical methods. While these random images may not have meaningful content, they serve as a useful tool for testing algorithms, understanding image processing techniques, and exploring the capabilities of various computational methods.\n\nIn this example, we will generate a random image using NumPy and Matplotlib. The function creates an image with specified dimensions (height, width) and color channels (typically RGB). Each pixel's color value is randomly generated, resulting in a unique and unpredictable visual output.\n\nBelow is the randomly generated synthetic image created by running the code snippet.\n\nIn this example, we utilize NumPy and OpenCV to create a synthetic image featuring basic geometric shapes. This approach demonstrates how to generate simple visual content programmatically, which can be useful for various applications, including testing image processing algorithms and creating datasets for machine learning.\n\nThis simple example illustrates how synthetic images can be created programmatically using basic shapes, providing a foundation for more complex image generation techniques.\n\nIn this example, we utilize TensorFlow’s to create augmented versions of a synthetic image. Image augmentation is a powerful technique in machine learning and computer vision that helps improve the robustness and generalization of models by artificially expanding the training dataset with transformed versions of existing images.\n\nTensorFlow’s Keras API is used to perform real-time data augmentation on images. When you run this code snippet, you will see several augmented versions of the randomly generated synthetic image displayed one after another. Each version will showcase different transformations applied based on the parameters defined in .\n\nIn this example, we create a synthetic handwritten digit using the Python Imaging Library (PIL) and NumPy. This technique is useful for generating simple images that can be used in various applications, such as testing image processing algorithms or augmenting datasets for machine learning.\n\nWhen you run this code snippet, you will see a 28x28 pixel image displaying the handwritten digit ‘8’ on a white background. This simple example demonstrates how to generate synthetic handwritten digits programmatically, which can be useful for creating datasets or testing algorithms in computer vision tasks.\n\nIn this article, we explored various techniques for synthetic data generation, focusing on different types of data such as numerical datasets, images, and augmented images. We began with fundamental concepts, highlighting the importance of synthetic data in addressing challenges related to data scarcity, privacy concerns, and the need for diverse training samples in machine learning.\n\nAs technology continues to evolve, the methods for generating synthetic data will also advance, offering even more sophisticated ways to create realistic and valuable datasets.\n\nIn summary, synthetic data generation is not just a tool; it is a powerful approach that opens up new possibilities for innovation and exploration in the field of data science and artificial intelligence."
    },
    {
        "link": "https://stackoverflow.com/questions/56663610/a-proper-start-for-generating-synthetic-data-for-classification-problem-in-pytho",
        "document": "As I understood you need to use Data Augmentation.\n\nHave a look at this and/or this.\n\nYou'll be able to drastically increase the size o your Dataset and potentially improve your training accuracy.\n\nSomething similar to this:"
    },
    {
        "link": "https://turing.com/kb/synthetic-data-generation-techniques",
        "document": "The synthetic data will remove the requirement for real-world data in the near future. It is proven from research that synthetic data will completely overshadow real data in AI models. Data generation tools are also known as data generators. These tools will generate data as per some patterns instead of reading the data which already exists in a database. A transformation will be defined to generate the data. It will use the CTL template for data generator or implement a record generate interface.\n\nHow do you create synthetic data in Python? To create synthetic data, the data scientist needs to create a robust model replicating a real-world dataset. Based on the probabilities, certain data points that happen to be real dataset might generate realistic data points. Why is synthetic data important for business? The advantages of synthetic data will be cost reduction, agility, higher speeds, cutting-edge privacy, and intelligence. When you transform test data generation into AI governance, the synthetic data will deliver high-value use cases across businesses.\n\nSynthetic test data is dummy data that you use during the development and testing phase of any application. It will not be based on real-world data and will be artificially created with the help of algorithms or models. What is important when creating synthetic data for analysis? It is vital controlling the random processes which will generate data based on the statistical distributions or generative models. It will ensure that the results are sufficiently diverse and seem real. Synthetic data should also be customizable so it can be altered as per customer requirements."
    },
    {
        "link": "https://cookbook.openai.com/examples/sdg1",
        "document": ""
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/JSON",
        "document": "JavaScript Object Notation (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax. It is commonly used for transmitting data in web applications (e.g., sending some data from the server to the client, so it can be displayed on a web page, or vice versa). You'll come across it quite often, so in this article, we give you all you need to work with JSON using JavaScript, including parsing JSON so you can access data within it, and creating JSON. An understanding of HTML and the fundamentals of CSS, familiarity with JavaScript basics as covered in previous lessons.\n• What JSON is — a very commonly used data format based on JavaScript object syntax.\n• That JSON can also contain arrays.\n• Retrieve JSON as a JavaScript object using mechanisms available in Web APIs (for example, in the Fetch API).\n• Converting between objects and text using and .\n\nNo, really, what is JSON? JSON is a text-based data format following JavaScript object syntax. It represents structured data as a string, which is useful when you want to transmit data across a network. Even though it closely resembles JavaScript object literal syntax, it can be used independently from JavaScript. Many programming environments feature the ability to read (parse) and generate JSON. In JavaScript, the methods for parsing and generating JSON are provided by the object. Note: Converting a string to a native object is called deserialization, while converting a native object to a string so it can be transmitted across the network is called serialization. A JSON string can be stored in its own file, which is basically just a text file with an extension of , and a MIME type of .\n\nAs described above, JSON is a string whose format very much resembles JavaScript object literal format. The following is a valid JSON string representing an object. Note how it is also a valid JavaScript object literal — just with some more syntax restrictions. { \"squadName\": \"Super hero squad\", \"homeTown\": \"Metro City\", \"formed\": 2016, \"secretBase\": \"Super tower\", \"active\": true, \"members\": [ { \"name\": \"Molecule Man\", \"age\": 29, \"secretIdentity\": \"Dan Jukes\", \"powers\": [\"Radiation resistance\", \"Turning tiny\", \"Radiation blast\"] }, { \"name\": \"Madame Uppercut\", \"age\": 39, \"secretIdentity\": \"Jane Wilson\", \"powers\": [ \"Million tonne punch\", \"Damage resistance\", \"Superhuman reflexes\" ] }, { \"name\": \"Eternal Flame\", \"age\": 1000000, \"secretIdentity\": \"Unknown\", \"powers\": [ \"Immortality\", \"Heat Immunity\", \"Inferno\", \"Teleportation\", \"Interdimensional travel\" ] } ] } If you load this JSON in your JavaScript program as a string, you can parse it into a normal object and then access the data inside it using the same dot/bracket notation we looked at in the JavaScript object basics article. For example:\n• First, we have the variable name — .\n• Inside that, we want to access the property, so we use .\n• contains an array populated by objects. We want to access the second object inside the array, so we use .\n• Inside this object, we want to access the property, so we use .\n• Inside the property is an array containing the selected hero's superpowers. We want the third one, so we use . The key takeaway is that there's really nothing special about working with JSON; after you've parsed it into a JavaScript object, you work with it just like you would with an object declared using the same object literal syntax. Note: We've made the JSON seen above available inside a variable in our JSONTest.html example (see the source code). Try loading this up and then accessing data inside the variable via your browser's JavaScript console.\n\nAbove we mentioned that JSON text basically looks like a JavaScript object inside a string. We can also convert arrays to/from JSON. The below example is perfectly valid JSON: You have to access array items (in its parsed version) by starting with an array index, for example . The JSON can also contain a single primitive. For example, , , or are all valid JSON.\n\nTo begin with, make local copies of our heroes.html and style.css files. The latter contains some simple CSS to style our page, while the former contains some very simple body HTML, plus a element to contain the JavaScript code we will be writing in this exercise: We have made our JSON data available on our GitHub, at https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json. We are going to load the JSON into our script, and use some nifty DOM manipulation to display it, like this:\n\nThe top-level function looks like this: To obtain the JSON, we use an API called Fetch. This API allows us to make network requests to retrieve resources from a server via JavaScript (e.g. images, text, JSON, even HTML snippets), meaning that we can update small sections of content without having to reload the entire page. In our function, the first four lines use the Fetch API to fetch the JSON from the server:\n• we declare the variable to store the GitHub URL\n• we use the URL to initialize a new object.\n• we make the network request using the function, and this returns a object\n• we retrieve the response as JSON using the function of the object. Note: The API is asynchronous. You can learn about asynchronous functions in detail in our Asynchronous JavaScript module, but for now, we'll just say that we need to add the keyword before the name of the function that uses the fetch API, and add the keyword before the calls to any asynchronous functions. After all that, the variable will contain the JavaScript object based on the JSON. We are then passing that object to two function calls — the first one fills the with the correct data, while the second one creates an information card for each hero on the team, and inserts it into the .\n\nNow that we've retrieved the JSON data and converted it into a JavaScript object, let's make use of it by writing the two functions we referenced above. First of all, add the following function definition below the previous code: Here we first create an h1 element with , set its to equal the property of the object, then append it to the header using . We then do a very similar operation with a paragraph: create it, set its text content and append it to the header. The only difference is that its text is set to a template literal containing both the and properties of the object.\n\nNext, add the following function at the bottom of the code, which creates and displays the superhero cards: function populateHeroes(obj) { const section = document.querySelector(\"section\"); const heroes = obj.members; for (const hero of heroes) { const myArticle = document.createElement(\"article\"); const myH2 = document.createElement(\"h2\"); const myPara1 = document.createElement(\"p\"); const myPara2 = document.createElement(\"p\"); const myPara3 = document.createElement(\"p\"); const myList = document.createElement(\"ul\"); myH2.textContent = hero.name; myPara1.textContent = `Secret identity: ${hero.secretIdentity}`; myPara2.textContent = `Age: ${hero.age}`; myPara3.textContent = \"Superpowers:\"; const superPowers = hero.powers; for (const power of superPowers) { const listItem = document.createElement(\"li\"); listItem.textContent = power; myList.appendChild(listItem); } myArticle.appendChild(myH2); myArticle.appendChild(myPara1); myArticle.appendChild(myPara2); myArticle.appendChild(myPara3); myArticle.appendChild(myList); section.appendChild(myArticle); } } To start with, we store the property of the JavaScript object in a new variable. This array contains multiple objects that contain the information for each hero. Next, we use a for...of loop to loop through each object in the array. For each one, we:\n• Create several new elements: an , an , three s, and a .\n• Set the to contain the current hero's .\n• Fill the three paragraphs with their , , and a line saying \"Superpowers:\" to introduce the information in the list.\n• Store the property in another new constant called — this contains an array that lists the current hero's superpowers.\n• Use another loop to loop through the current hero's superpowers — for each one we create an element, put the superpower inside it, then put the inside the element ( ) using .\n• The very last thing we do is to append the , s, and inside the ( ), then append the inside the . The order in which things are appended is important, as this is the order they will be displayed inside the HTML. Note: If you are having trouble getting the example to work, try referring to our heroes-finished.html source code (see it running live also.) Note: If you are having trouble following the dot/bracket notation we are using to access the JavaScript object, it can help to have the superheroes.json file open in another tab or your text editor, and refer to it as you look at our JavaScript. You should also refer back to our JavaScript object basics article for more information on dot and bracket notation.\n\nThe above example was simple in terms of accessing the JavaScript object, because we converted the network response directly into a JavaScript object using . But sometimes we aren't so lucky — sometimes we receive a raw JSON string, and we need to convert it to an object ourselves. And when we want to send a JavaScript object across the network, we need to convert it to JSON (a string) before sending it. Luckily, these two problems are so common in web development that a built-in JSON object is available in browsers, which contains the following two methods:\n• : Accepts a JSON string as a parameter, and returns the corresponding JavaScript object.\n• : Accepts an object as a parameter, and returns the equivalent JSON string. You can see the first one in action in our heroes-finished-json-parse.html example (see the source code) — this does exactly the same thing as the example we built up earlier, except that:\n• we retrieve the response as text rather than JSON, by calling the method of the response\n• we then use to convert the text to a JavaScript object. The key snippet of code is here: As you might guess, works the opposite way. Try entering the following lines into your browser's JavaScript console one by one to see it in action: let myObj = { name: \"Chris\", age: 38 }; myObj; let myString = JSON.stringify(myObj); myString; Here we're creating a JavaScript object, then checking what it contains, then converting it to a JSON string using — saving the return value in a new variable — then checking it again."
    },
    {
        "link": "https://spiceworks.com/tech/devops/articles/what-is-json",
        "document": "JSON (JavaScript Object Notation) is defined as a file format used in object-oriented programming that uses human-readable language, text, and syntax to store and communicate data objects between applications. This article uses examples to explain how JSON works, the key types of JSON data, and its functions.\n\nJSON (JavaScript Object Notation) is a file format used in object-oriented programming that uses human-readable language, text, and syntax to store and communicate data objects between applications.\n\nProgramming languages are rules that convert regular human-understood characters or graphics to a format that computers can understand. Programming languages convert strings of characters to machine code that contain instructions for the computer to carry out. Programming languages were invented late in the 17th century and have evolved since then. Currently, we have both programming languages and ‘in betweens’, forms of writing that help us navigate between programming language and normal text. An excellent example of such a language is JSON.\n\nJSON or JavaScript Object Notation is a standard text-based format developed from the JavaScript object syntax and used to portray structured data. JSON, pronounced as ‘jason’, is an open standard format for creating and storing files or exchanging data that uses comprehensible and human-readable text made up of attributes and serializable values.\n\nJSON is a data format that is not dependent on any language. It is a data format used by several modern programming languages. JSON is used in electronic data exchange, such as transmitting data in web applications. Websites are made of web pages. These web pages display pre-stored information in a server and interact with the server using data formats such as JSON.\n\nTo understand JavaScript Object Notation, you must have a basic understanding of computer programming Hyper Text Markup Language and be familiar with JavaScript and the basics of CSS. Although it was developed following the JavaScript Object Syntax format and shares many similarities (since both are elements of Object Oriented Programming or OOP), it remains an independent data format from the syntax mentioned above. Now, different programming languages can read and generate JSON codes.\n\nSee More: What Is Version Control? Meaning, Tools, and Advantages\n\nJSON was created due to the need for a stateless, real-time protocol for server-to-browser communications that could be implemented without using browser plugins. These browser plugins like flash or Java applets were widely used in the early 2000s.\n\nJSON was not a one-person project. It was created due to multiple disconcerted and individual efforts of many people who later pooled and recognized it as a new invention. The JSON discovery process occurred when people independently realized that using JavaScript object syntax format was an ideal way to send data over a network or from one network to another.\n\nNonetheless, JSON gained popularity due to a man, Douglas Crockford, employed at Atari, who coined the name ‘JSON’. In his own words, he excuses himself from the label as a JSON inventor, saying that he ‘discovered’ JSON rather than ‘invent’ it.\n\nDouglas Crockford credited someone else for being the first to use JSON; although it was a nameless technique then, programmers did what they did best in the easiest way possible. Nevertheless, he was pivotal in publicizing JSON by telling people about this new technique and registering the domain name json.org in 2002.\n\nIn 2005, information and communication technology development progressed more in hardware and software. With the newly developed web pages, it was realized that JSON was a perfect fit for seamless data exchange.\n\nSee More: What Is Jenkins? Working, Uses, Pipelines, and Features\n\nJSON format has a syntax nearly identical to the code for JavaScript objects. This similarity makes it very easy for programs written in JavaScript to be converted to a JSON data format. Even though JSON is derived from JavaScript object notation syntax, JSON is a text-only subset of JavaScript syntax.\n\nIn JSON, data is represented in name/value pairs separated by a comma. The curly bracket contains the object and is separated from the name by a colon. Square brackets hold arrays, and a comma separates the array from values.\n\nHere is an example:\n\nJSON is built on two structures which are\n• None An ordered list of values, which translates to arrays, vectors, lists, or sequences.\n• None A collection of name/value pairs; can be an object, record, hash table, etc.\n\nJSON is widely used all over the world, and this reflects how important it has become in today’s world. It gained so much popularity because of its ease of use and simplicity. The JSON data format replaced XML, which was formally in use but was very heavy and difficult to learn due to several modifications. On the other hand, JSON makes data transfer a walk in the park. The syntax is straightforward to learn, lightweight, and compatible with human and machine languages.\n\nThe most common uses of JSON include:\n• None It is used in writing JavaScript-based applications that have websites and browser extensions as part of their features.\n• None It is essential in the transfer of structured data across network connections.\n• None It is used to draw up data from a server by web applications.\n• None JSON data format is used to publish public data by web services.\n• None It is used in migrating from one database to another.\n\nSee More: What Is Serverless? Definition, Architecture, Examples, and Applications\n\nJavaScript Object Notation is currently a widely used data format for any data exchange on the World Wide Web. This data format is easy to understand, with seven different data types. They are;\n\nLet us now explore each one of these JSON data types in more detail:\n\nA number in JSON is a data type that is used in JSON to represent figures in the base 10 system of counting. A number represents integers, negative integers, simple floating point numbers, and exponential notations.\n\nHowever, numbers cannot be represented as strings in the JSON format; only the base 10 (decimal) is used, making JSON’s octal or hexadecimal system obsolete. Infinity and NaN are also not used.\n• Integer: Includes the digit 0 and positive or negative figures from 1-9\n• Fraction: This represents figures with decimal points like .5, .8\n• Exponent: A number in JSON can have an exponent of 10 and should be prefixed by the exponent sign; e+ e- E+ E-\n\nAn example of this JSON data type is { “length”: 150.35 }.\n\nA string is a sequence of zero or more doubled spaced Unicode characters written with particular rules in mind. Strings in JSON are always written using double quotation marks (“ “), similar to the C programming language. Strings enclosed in single quotes (‘ ‘) become invalid. You can also include backslash-escaped characters like forward slash (\\/), backward slash (\\\\) backspace (\\b), newline (\n\n), carriage return (\\r) horizontal tab (\\t) etc. A character is a string with just a single element.\n\nAn example of this type of JSON data is { “name”:”Jade” } or { “city”:”Accra\\/Ghana” }.\n\nBoolean is a data type in JavaScript Object Notation that can exist as one of only two options. Boolean values can only be true or false. When using Boolean data type, quotation marks are not used. Examples of Boolean data type are { “transparency” : false } and { “green” : true }.\n\nAn array is an arranged set of values that are enclosed within a set of square brackets consisting of the left square bracket ( [ ) and the right square bracket ( ] ). An array consists of values separated using a comma (,). Arrays consist of related values, that is, items under a collective group. An array should be used when the key names are made of sequential integers. You can start Indexing in arrays from either 0 or 1.\n\nAn example of this type of JSON data is: { “colors” : [“red”, “orange”, “yellow”, “blue”] } or { “serial numbers” : [“302”, “303” “305” “306” “307”] }\n\nAn object is a data type in JavaScript Object Notation that is made up of unordered or non-structured sets of data represented as name/value pairs and placed in between a pair of curly brackets (left and right curly brackets {} ).\n\nAn object can contain any number of name/value pairs ranging from zero or more. The keys must be of the strings data type and should be unique. When there is more than one name/value pair, the name is followed by a colon, and then the key/value pairs are separated using a comma (,).\n\nAn example of this type of JSON data is:\n\nWhitespace is simply a space added to a code to make it easier for humans to read and understand. Whitespace does not actually affect the code or JSON data format as a whole. It can be reduced to the bare minimum without corrupting the data. Whitespace can be a single or multiple space, Horta tap tab, new line, or carriage return.\n\nAn example of this type of JSON data is { “name” : “ Praise Johnson” } (whitespace is used) or { “name” : “PraiseJohnson” } (whitespace is not used).\n\nTechnically, null is not a data value type. It is, however, classified as a special value in JavaScript Object Notation. Null describes the absence of value; that is, when there is no value assigned to a key, it is described as null. When using the null title, there is no need to use quotation marks. An example of this type of JSON data is:\n\nFunctions in programming refer to structured blocks of code that are used to carry out specific operations over and over again. Functions are created as a standard operation and mean the same thing for a particular programming language. Functions provide better modularity for applications and make it easy to reuse codes. Although the concept remains, the same, different languages may refer to these unique codes as methods, subroutines, or procedures. Some functions are built into the programming language, while a programmer can write others.\n\nIn the same way, JavaScript Object Notation has functions and ordered sets of operations that one can use to read, modify, create or format data written in JSON format. JSON functions help retrieve or extract a data set and work on the data. JSON has different categories of functions best suited to particular software. Three examples of JSON functions are those of IBM, Google Big Query, and Amazon AWS.\n\nIBM is among the most prominent companies in the world regarding information companies. IBM uses JSON to edit data sent as requests and responses to and from IBM Cloudant. JSON objects are used to represent different structures in the IBM Cloudant database. JSON is used in IBM and integrates with the JavaScript used in IBM Cloudant.\n\nExamples of JSON functions for IBM are:\n\nThis function checks if the following character apart from whitespace is a closing bracket ( ] ), signifying end of line.\n\nIt checks if the next character, ignoring whitespace, in a piece of JSON text is an opening bracket ( [ ).\n\nThis function checks if the next character, ignoring whitespace, in a piece of JSON text is a comma ( , ).\n\nThis checks if the next character, not counting whitespace, in a piece of JSON text is a closing brace ( } ).\n\nIt checks if the next character, ignoring whitespace, in a piece of JSON text is an opening brace ( { ).\n\nThis function can read a value from a piece of JSON text.\n\nThis verifies if the next character, ignoring whitespace, in a piece of JSON text is a colon ( : ).\n\nThis function adds a comma to the JSON text.\n\nThe function adds a closing brace, }, to the JSON text.\n\nThis function adds an opening brace, {, to the JSON text.\n\nGoogle’s BigQuery is a data storage structure that allows you to manage, analyze, and gain insight from your data. It has serverless architecture, so organizations can use it without worrying about infrastructure. JSON is a data format widely used in BigQuery. JSON can be used to store semi-structured data, that is, big data on BigQuery.\n\nThis is made possible by using data type to trick BigQuery into ingesting semi-structured data without providing a schema for the data. Since BigQuery can process JSON fields, you are then able to format and query the data. JSON functions in BigQuery include:\n\nThis function extracts a single JSON value, such as an object or array. It also extracts a JSON scalar value, such as a number, string, or boolean.\n\nIt extracts a scalar value which can be a number, string or boolean. JSON_VALUE also removes the outermost quotes and unescapes the values. If a non-scalar value is selected, it returns a SQL NULL.\n\nThe function extracts an array of JSON values, such as arrays or objects, and JSON scalar values, such as strings, numbers, and booleans. It performs a similar operation as JSON_QUERY but for multiple values.\n\nIt extracts an array of scalar values. If the selected item is not an array or is an array that does not contain only scalar values, this function returns a SQL NULL.\n\nAmazon Web Services (AWS) is a cloud computing service that allows you to build and host your websites, applications, manage databases, etc., in a cheap and scalable environment. AWS uses JSON to send data, make requests, and receive data from service objects. JSON is often used in AWS to make automated configurations. JSON files use a similar structure to that of tags used in AWS to group objects. JSON functions used in Amazon AWS include:\n\nThis is a function that validates a JSON string in AWS. It returns the Boolean true value (t) for properly formed strings or false (f) for wrongly formed strings.\n\nThis function returns the number of elements found in the outer array of a JSON string, thus described length.\n\nThe JSON AWS function returns a JSON array element in the outermost array of a JSON string, and it does this using a zero-based index.\n\nThis function takes JSON data and converts it into the SUPER representation.\n\nSee More: Top 10 DevOps Automation Tools in 2021\n\nJSON is a data format all developers should learn. Thankfully, it is simple to learn and understand with multiple learning examples that can be sourced as tutorial materials. Some clear examples are explained in more detail below.\n\nArrays are a set of objects or variables encapsulated by square brackets.\n\nData grouping in JSON is done using nested structures. An example is that of an image and thumbnail properties described below.\n\nSometimes, you can flatten the structures to make them available as columns in the data set, which is often more desirable. This is done using the subPaths constructor option to instruct the JSON data set to add the nested structures when it flattens the top-level JSON object or the selected data.\n\n4. Example of JSON in a business use case\n\nJSON schemas are used in various business scenarios to validate input and to verify that data-carrying messages are accurately constructed. The company in the example below tries to confirm that only accurately formed purchase orders are entered into the system for processing, and this is done using input validation. The JSON schema used is:\n\nIn this example, JSON is used to input the various data properties associated with a stock-keeping unit (SKU) correctly.\n\nSee More: DevOps vs. Agile Methodology: Key Differences and Similarities\n\nThere is a good reason why JSON is such an essential skill for DevOps engineers. As the world becomes increasingly hyperconnected and application programming interfaces (APIs) are regularly used to connect apps, JSON forms an integral part of code architecture. It encapsulates data from multiple sources in a reusable package, which developers can easily understand. This boosts software development productivity and makes it easier to work across languages and platforms.\n\nDid this article help you understand the basics of JSON? Tell us on FacebookOpens a new window , TwitterOpens a new window , and LinkedInOpens a new window . We’d love to hear from you!\n• None What Is DevOps? Definition, Goals, Methodology, and Best Practices\n• None What Is DevOps Lifecycle? Definition, Key Components, and Management Best Practices\n• None What Is DevSecOps? Definition, Pipeline, Framework, and Best Practices for 2022\n• None What Is an API (Application Programming Interface)? Meaning, Working, Types, Protocols, and Examples"
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/21/adjsn/json-data.html",
        "document": "Standard JSON values, scalars, objects, and arrays are described.\n\nAccording to the JSON standard, a JSON value is one of the following JSON-language data types: object, array, number, string, Boolean (value or ), or null (value ). All values except objects and arrays are scalar.\n\nA JSON value of is a value as far as SQL is concerned. It is not , which in SQL represents the absence of a value (missing, unknown, or inapplicable data). In particular, SQL condition returns false for a JSON value, and SQL condition returns true.\n\nStandard JSON has no date data type (unlike both XML and JavaScript). A date is represented in standard JSON using the available standard data types, such as string. There are some de facto standards for converting between dates and JSON strings. But typically programs using standard JSON data must, one way or another, deal with date representation conversion.\n\nA JavaScript object is an associative array, or dictionary, of zero or more pairs of property names and associated JSON values.Foot 2 A JSON object is a JavaScript object literal.Foot 3 It is written as such a property list enclosed in braces ( , ), with name–value pairs separated by commas ( ), and with the name and value of each pair separated by a colon ( ). (Whitespace before or after the comma or colon is optional and insignificant.)\n\nIn JSON each property name and each string value must be enclosed in double quotation marks ( ). In JavaScript notation, a property name used in an object literal can be, but need not be, enclosed in double quotation marks. It can also be enclosed in single quotation marks ( ).\n\nAs a result of this difference, in practice, data that is represented using unquoted or single-quoted property names is sometimes referred to loosely as being represented in JSON, and some implementations of JSON, including the Oracle Database implementation, support the lax syntax that allows the use of unquoted and single-quoted property names.\n\nA string in JSON is composed of Unicode characters, with backslash ( ) escaping. A JSON number (numeral) is represented in decimal notation, possibly signed and possibly including a decimal exponent.\n\nAn object property is typically called a field. It is sometimes called a key, but this documentation generally uses “field” to avoid confusion with other uses here of the word “key”. An object property name–value pair is often called an object member (but sometimes member can mean just the property). Order is not significant among object members.\n\nA JavaScript array has zero or more elements. A JSON array is represented by brackets ( , ) surrounding the representations of the array elements (also called items), which are separated by commas ( ), and each of which is an object, an array, or a scalar value. Array element order is significant. (Whitespace before or after a bracket or comma is optional and insignificant.)\n\nThis example shows a JSON object that represents a purchase order, with top-level field names , , , , , , , and .\n• Most of the fields here have string values. For example: field has value .\n• Fields and have numeric values: and .\n• Field has an object as its value. This object has three members, with fields , , and . Field has a string value ( ).\n• The value of field is an object with fields , , , , and . Field has a numeric value; the others have string values.\n• Field has an array as value. This array has two elements, each of which is an object. Each of these objects has two members: fields and with their values.\n• Field has the Boolean value .\n• Field has an array as value. This array has two elements, each of which is an object. Each of these objects has three members, with fields , , and .\n• Fields and have numeric values. Field has an object as value, with fields , , and . Field has a string value. Fields and have numeric values."
    },
    {
        "link": "https://w3schools.com/js/js_json_syntax.asp",
        "document": "The JSON syntax is a subset of the JavaScript syntax.\n\nJSON Data - A Name and a Value\n\nA name/value pair consists of a field name (in double quotes), followed by a colon, followed by a value:\n\nThe JSON format is almost identical to JavaScript objects.\n\nIn JSON, keys must be strings, written with double quotes:\n\nIn JavaScript, keys can be strings, numbers, or identifier names:\n\nIn JSON, values must be one of the following data types:\n\nIn JavaScript values can be all of the above, plus any other valid JavaScript expression, including:\n\nIn JSON, string values must be written with double quotes:\n\nIn JavaScript, you can write string values with double or single quotes:\n\nBecause JSON syntax is derived from JavaScript object notation, very little extra software is needed to work with JSON within JavaScript.\n\nWith JavaScript you can create an object and assign data to it, like this:\n\nYou can access a JavaScript object like this:\n\nIt can also be accessed like this:\n\nData can be modified like this:\n\nIt can also be modified like this:\n\nYou will learn how to convert JavaScript objects into JSON later in this tutorial.\n\nThe same way JavaScript objects can be written as JSON, JavaScript arrays can also be written as JSON.\n\nYou will learn more about objects and arrays later in this tutorial.\n• The file type for JSON files is \".json\"\n• The MIME type for JSON text is \"application/json\""
    },
    {
        "link": "https://jsonlint.com/mastering-json-format",
        "document": "Mastering JSON Format: Advantages, Best Practices and Comparison with Other Data Formats\n\nJSON, standing for JavaScript Object Notation, is already a big player in today's era of data interchange. I'll delve into what makes JSON so standout. It's a text-based, language-independent format that allows for the easy and structured exchange of information. Boasting simplicity and being exceptionally lightweight, JSON is king when it comes to data transfer across your favorite web applications.\n\nOne undeniable charm of JSON is its compatibility. It's like that friend we all need — flexible and gets along with everyone. Whether you're coding in Python, JavaScript, or C++, JSON functions seamlessly across these and many more languages. Importantly, its plain text nature makes it readable to both humans and machines.\n\nThe beauty of JSON lies in its structure. Information is stored in a \"key: value\" pair format, which in essence is like a collection of Lego blocks. These 'blocks' or data objects can be assembled in various ways to form meaningful data structures.\n\nAn example of a simple JSON object could be:\n\nThis structure makes JSON adaptable and extendable. You can add, modify, and delete key-value pairs without disrupting the system, offering unparalleled flexibility in data storage.\n\nIn addition to supporting these object structures, JSON also supports arrays (ordered sequence of values), which further simplifies complex data representation. For instance, if you wanted to add job details for John Doe, it’d look something like this:\n\nLeveraging the power of arrays and objects, JSON can efficiently store virtually any data structure. Indeed, it is the backbone that drives today's internet, actively shaping the ways we store, retrieve, and process data.\n\nLooking into the wonderful world of JSON, it's clear there are a multitude of benefits when using this format. Let's dive deeper into why JSON makes such a significant impact in data interchange.\n\nFirstly, simplicity and readability play a key role in JSON's popularity. The structure is easy-to-follow, mimicking a simple key-value pair that anyone, coder or not, can grasp. It's this simplicity that helps developers quickly read, write or edit the data - a feature that doesn't go unnoticed in the fast-paced world of technology.\n\nJSON also shines in its compatibility with various programming languages. Languages such as JavaScript, Python, Ruby and many others natively support JSON. What does this mean? Simply put, JSON can readily integrate with these languages without any need for additional libraries. Now that's efficient.\n\nAnother winning feature of JSON is its support for arrays and objects. This ability to handle complex data through a recognized syntax makes JSON superior in data representation to many other formats. Whether you're dealing with multi-level arrays or nested objects, JSON has you covered.\n\nOne more advantage of JSON to highlight is its lightweight nature. JSON's format, without the need for end tags or closing tags, leads to reduced data redundancy and less data overall. This means faster data transmission and smoother execution – an essential requirement in today's digital age.\n\nIn this internet era, JSON's importance in shaping how data is stored, retrieved, and processed is undeniable. From simple inventory lists to intricate game data, JSON delivers with reliability and flexibility.\n\nAs we delve further into the nitty-gritty of JSON, it's paramount we draw comparisons between JSON and other data formats. Two main competitors of JSON that come to mind are XML and CSV. Understanding where JSON stands in relation to these will help define its unique value more accurately.\n\nXML, just like JSON, is human-readable and used widely for data exchange. But where JSON really shines is in its simplicity. Rather than the verbose and complex syntax of XML that can quickly clutter your screen, JSON stays minimal and clean, something I absolutely appreciate. JSON's format is also more condense which leads to quicker data transmissions.\n\nWell, then we have CSV. While it's true that CSV files are typically smaller, they lack the depth of JSON. In a CSV, it's challenging to represent hierarchical or multi-dimensional data. JSON, on the other hand, as we discussed earlier, has robust support for arrays and objects. It's like comparing a black-and-white photo to a 3D movie; the depth that JSON provides far outshines a mere CSV's capabilities.\n\nLet's not forget one of JSON's formidable advantages - compatibility with various programming languages. XML requires parsers to be readable in different programming languages, and CSV files often need custom parsing solutions, both of which can be cumbersome for developers. With JSON, that isn't necessary - it's supported natively in many programming languages, easing integration and reducing development time.\n\nBut before we lean too far into JSON's corner, it's worth mentioning that there are scenarios where other formats may be more suitable. Binary formats like Protobuf or Avro might provide better performance for massive or complex datasets. The world of data formats isn't black and white - there are shades of grey that give room for all, each with its own use cases.\n\nMoving forward, we'll dissect how JSON is leveraged in web development, and its role in shaping APIs. By highlighting its advantages and pointing out certain usage pitfalls, this deep dive into JSON seeks to arm you with the knowledge to efficiently utilize JSON in your own projects.\n\nUnderstanding the syntax is fundamental to appreciating JSON's beauty. It's this simplicity and readability that make JSON a desirable format. JSON structures data in name-value pairs, much like a JavaScript object. Yet, it's not limited to a particular set of programming languages. Its universal syntax is what allowed me to integrate it in various environments easily.\n\nThe first thing to look at is data types that JSON supports. It can handle simple data types like strings, numbers, and Booleans – true or false. At the same time, it embraces compound types such as arrays and other JSON objects. Being adept with these data types can make the information representation more effective.\n\nLet's take a look at a JSON object:\n\nIn this JSON object, you can see different types of data. The name is a string, the age a number, isVaccinated a Boolean, and familyNames an array of strings.\n\nWhen it comes to arrays, they are enclosed in square brackets. Each value is separated by a comma. Here's an example of a JSON array:\n\nThis array represents a list of people, each person being a JSON object itself.\n\nNext, we'll discuss how the JSON format shapes the landscape of web development, and how it’s used in creating user-friendly and feature-rich APIs. For developers seeking to use JSON in their projects, gaining a good grasp of the format and its syntax will be time well spent.\n\nParsing JSON data is a crucial skill in web development, making it an area that I must delve into due to its immense importance. It's necessary to understand that the process varies depending on the programming language you're using. In this regard, let's look at parsing JSON data using two popular languages, JavaScript and Python.\n\nParsing in JavaScript is straightforward. JavaScript natively supports JSON through the JSON object. To parse JSON using JavaScript, developers use the JSON.parse() method, converting the JSON data into a JavaScript object.\n\nIn this JavaScript example, we are converting a JSON string into a JavaScript object using the JSON.parse method. The alert function then displays the name value, \"John\".\n\nParsing in Python, on the other hand, requires the python 'json' library. Developers invoke the json.loads() method to parse JSON data.\n\nIn our Python example, after importing the json module, we invoke the json.loads() function to parse the JSON data into a python dictionary. The print function then outputs the name value, which is \"John\".\n\nTake note that converting JSON data into another data structure (for instance, a Python dictionary or JavaScript object) is called deserialization. It's an essential part of using JSON format in web development, allowing you to process the data as per your needs. As you work with JSON, remember to keep the syntax rules in mind to ensure data integrity. The ease with which JSON integrates into your coding process is what makes it a front runner in data interchange formats.\n\nMoving onward, let's delve into a crucial element associated with JSON - that's right, we're talking about JSON schema validation. This integral feature of JSON ensures code standardization, guarantees the integrity of data, and promotes a smooth coding process.\n\nSo what is JSON schema validation? Essentially, it's a powerful tool that validates your JSON data and checks if it adheres to the predefined specifications. And yes, it does all of this before you import that data into your JavaScript or Python environments, saving you from potential headaches.\n\nHere's how it works. When you're transferring data between applications using JSON, the data structure should be predictable and standardized. JSON schema validation, as its name suggests, is like a blueprint or a model for your data. It outlines what your data should look like - what elements it should contain, what data types those elements should be, whether certain fields are required or optional, and even the acceptable range of values for certain elements.\n\nApplying JSON schema validation can significantly improve your overall coding experience. It enables you to catch and address inconsistencies and errors early on, reducing debugging efforts. It helps maintain consistent data structures across multiple applications, which really comes in handy for large-scale projects involving various teams.\n\nTake a look at this simple example of JSON schema:\n\nIn this example, the schema defines an object that needs to have two properties, and . should be a string, whereas should be an integer and cannot be a negative value.\n\nNow that we've understood the concept of JSON schema validation, we'll be moving onto another exciting topic- creating custom JSON schemas. This will require another deep dive and you'll need your concentration caps on for this one. So, let's proceed...\n\nBest Practices for Using JSON\n\nJSON format is intuitive and offers a lot of flexibility, but to get the most out of it, it's crucial to follow certain best practices. These practices streamline the coding process, aid readability and optimize data interchange.\n\nFirst, always keep the JSON structure clean and organized. JSON data is represented in name-value pairs, meaning proper structuring ensures data integrity. It's easy to fall prey to messy code when dealing with complex data, so I emphasize consistency and neatness.\n\nSecondly, utilize JSON schema validation to its fullest extent. As explained before, JSON schema validation ensures code standardization and aids in catching inconsistencies early. A well-implemented validation process helps maintain the robustness of data interchange.\n\nIn addition, when dealing with large strings of data, it's better to use arrays rather than multiple name-value pairs. Data arrays in JSON are simple to understand and can hold data more efficiently than multiple name-value pairs.\n\nWhen creating custom JSON schemas for complex data, remember to keep things as simple as possible. Simplicity is the key to meaningful data representation in JSON.\n\nBelow, I've compiled a basic guide to JSON best practices:\n• Maintain clean, organized structure: Do this by using consistent name-value pairs and avoid nesting data unnecessarily.\n• Use arrays for large strings of data: Arrays are easier to manage and are intuitive for other developers.\n\nThese practices don't just apply to JSON -- they're a solid foundation for any data interchange format. The true power of these principles shines through when they're used consistently throughout a project. Get into this habit, and you'll see a marked improvement in your coding efficiency. While working with JSON, you'll soon discover other practices that can boost your experience - shaping and tailoring these guidelines to your workflow is equally important.\n\nIn the next section, we'll delve into comparing JSON with other data interchange formats - looking at where JSON stands out and where it might not be the best option. That's for another discussion though, so let's place the bookmark here.\n\nSo we've seen how JSON's simplicity and readability make it a powerful tool for data interchange. Its schema validation feature is a game changer, ensuring code standardization and catching errors early. I've shared some best practices for using JSON, like maintaining a clean structure, using arrays for large data strings, and keeping schemas simple. Remember, these aren't exclusive to JSON and can be applied to other data interchange formats too. In the next section, we'll dive into how JSON stacks up against other data formats. Stay tuned!"
    }
]