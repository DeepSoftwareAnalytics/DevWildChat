[
    {
        "link": "https://python-mss.readthedocs.io",
        "document": "\n• None very basic, it will grab one screenshot by monitor or a screenshot of all monitors and save it to a PNG file;\n• None but you can use PIL and benefit from all its formats (or add yours directly);\n• None integrate well with Numpy and OpenCV;\n• None it could be easily embedded into games and other software which require fast and platform optimized methods to grab screenshots (like AI, Computer Vision);\n• None get the source code on GitHub ;\n• None need some help? Use the tag python-mss on Stack Overflow ;"
    },
    {
        "link": "https://python-mss.readthedocs.io/examples.html",
        "document": "Screenshot of the monitor 1 with a callback: \"\"\"Callback example when we try to overwrite an existing screenshot.\"\"\" You can capture only a part of the screen: Part of the screen of the 2nd monitor¶ This is an example of capturing some part of the screen of the monitor 2: You can use the same value as you would do with . This is an example that uses it, but also using percentage values: # Using PIL would be something like: You can tweak the PNG compression level (see for details): You can get the bytes of the PNG image: # The monitor or screen part to capture\n\nYou can handle data using a custom class: \"\"\"Define your own custom method to deal with screenshot raw data. Of course, you can inherit from the ScreenShot class and change\n\nYou can use the Python Image Library (aka Pillow) to do whatever you want with raw pixels. This is an example using frombytes() : # Get rid of the first, as it represents the \"All in One\" monitor: # Get raw pixels from the screen # The same, but less efficient: This is an example using putdata() : # Get a screenshot of the 1st monitor # But you can set individual pixels too (slower)\n\nSee how fast you can record the screen. You can easily view a HD movie with VLC and see it too in the OpenCV window. And with __no__ lag please. # Part of the screen to capture # Get raw pixels from the screen, save it to a Numpy array\n\nSimple naive benchmark to compare with Reading game frames in Python with OpenCV - Python Plays GTA V : Performances can be improved by delegating the PNG file creation to a specific worker. This is a simple example using the inspired by the TensorFlow Object Detection Introduction project: # Tell the other worker to stop # 2 processes: one for grabbing and one for saving PNG files\n\nDifferent possibilities to convert raw BGRA values to RGB: \"\"\" Better than Numpy versions, but slower than Pillow. \"\"\" \"\"\" Most efficient Numpy version as of now. \"\"\""
    },
    {
        "link": "https://github.com/BoboTiG/python-mss",
        "document": "# The simplest use, save a screenshot of the 1st monitor () : . ()\n\nAn ultra-fast cross-platform multiple screenshots module in pure python using ctypes.\n• very basic, it will grab one screenshot by monitor or a screenshot of all monitors and save it to a PNG file;\n• but you can use PIL and benefit from all its formats (or add yours directly);\n• integrate well with Numpy and OpenCV;\n• it could be easily embedded into games and other software which require fast and platform optimized methods to grab screenshots (like AI, Computer Vision);\n• get the source code on GitHub;\n• need some help? Use the tag python-mss on Stack Overflow;\n• and there is a complete, and beautiful, documentation :)\n\nYou can install it with pip:\n\nOr you can install it with Conda:"
    },
    {
        "link": "https://stackoverflow.com/questions/71453766/how-to-take-a-screenshot-from-part-of-screen-with-mss-python",
        "document": "But I want to take a part of screen like this:\n\nThanks for help!"
    },
    {
        "link": "https://discussions.apple.com/thread/252609062",
        "document": "The screencapture utility provides an optional -t argument that allows one to choose an alternative capture image format if the png format is unwanted.\n\nShowing Microsoft C++ code that uses the Windows-only System.Drawing library is a far cry from Python which is what you originally requested. You might have more success using the Python MSS package, provided you are using Python 3.5 or later. It provides for specific screen region capture. Otherwise, there is the optional Python Imaging Libraries (e.g. Pillow) that are also available for Windows and macOS.\n\nSure, Apple has imaging libraries that can be accessed via Objective-C, Swift, C++, and contingent on the installation of Xcode or the command-line utilities for the matching Xcode version. Using Apple's Cocoa scripting bridge, one can presently access the Cocoa frameworks from within either the Python 2.7.16 that Apple ships with Big Sur, or Python 3.9.2 after installing it and adding the optional pyobjc and pyobjc-core modules. That is tremendous pain and learning curve just for image capture, and why I used screencapture.\n\nApple mentioned in the Catalina release notes that it would be removing Python, Ruby, and Perl from a future release of macOS, and when they eventually do, the burden is on the developer to install their own builds of these scripting languages, with the modules necessary for the scripts to function."
    },
    {
        "link": "https://python-mss.readthedocs.io/examples.html",
        "document": "Screenshot of the monitor 1 with a callback: \"\"\"Callback example when we try to overwrite an existing screenshot.\"\"\" You can capture only a part of the screen: Part of the screen of the 2nd monitor¶ This is an example of capturing some part of the screen of the monitor 2: You can use the same value as you would do with . This is an example that uses it, but also using percentage values: # Using PIL would be something like: You can tweak the PNG compression level (see for details): You can get the bytes of the PNG image: # The monitor or screen part to capture\n\nYou can handle data using a custom class: \"\"\"Define your own custom method to deal with screenshot raw data. Of course, you can inherit from the ScreenShot class and change\n\nYou can use the Python Image Library (aka Pillow) to do whatever you want with raw pixels. This is an example using frombytes() : # Get rid of the first, as it represents the \"All in One\" monitor: # Get raw pixels from the screen # The same, but less efficient: This is an example using putdata() : # Get a screenshot of the 1st monitor # But you can set individual pixels too (slower)\n\nSee how fast you can record the screen. You can easily view a HD movie with VLC and see it too in the OpenCV window. And with __no__ lag please. # Part of the screen to capture # Get raw pixels from the screen, save it to a Numpy array\n\nSimple naive benchmark to compare with Reading game frames in Python with OpenCV - Python Plays GTA V : Performances can be improved by delegating the PNG file creation to a specific worker. This is a simple example using the inspired by the TensorFlow Object Detection Introduction project: # Tell the other worker to stop # 2 processes: one for grabbing and one for saving PNG files\n\nDifferent possibilities to convert raw BGRA values to RGB: \"\"\" Better than Numpy versions, but slower than Pillow. \"\"\" \"\"\" Most efficient Numpy version as of now. \"\"\""
    },
    {
        "link": "https://geeksforgeeks.org/take-screenshots-at-random-intervals-with-python",
        "document": "In this article, we will learn how to take screenshots at Random Intervals with Python.\n\npyautogui: The pyautogui library provides the screenshot() method, The screenshot() method is used to take a screenshot. We will use the random library and sleep() method to take screenshots at Random Intervals.\n\nrandint(): The randint() method returns an integer number from the range specified.\n\nIn this example, a random delay was generated between 1 to 5 seconds before taking a screenshot. generate a random number between 1 to 5, and create a time delay using the sleep() method. The screenshots will be saved in the exact location of the program with the file name as the current time. The following steps are:\n• Take a screenshot using the screenshot() method and wait for sometime\n• Create the random delay using randint() method and sleep().\n• save the screenshots with the name as the current time.\n\nOutput: The following images are the randomly taken screenshots by running the above code.\n\nThe pillow (PIL) library has an ImageGrab module that can be used to copy the contents of the screen or the clipboard to a PIL image memory.\n\ngrab(): The grab() method is used to take a screenshot of the screen. The pixels inside the bounding box are returned as an “RGBA” on macOS, or an “RGB” image otherwise. If the bounding box is omitted, the entire screen is copied.\n\nSo now to take screenshots at random time intervals we will make use of grab() and sleep() and random() methods. the grab() will be used to take snapshots, randint() and sleep() will be used to create delay at random time intervals.\n\nIn the above code, a random delay was generated between 1 to 5 seconds before taking a screenshot using grab() method. generate a random number between 1 to 5, and create a time delay using the sleep() method. The screenshots will be saved in the exact location of the program with the file name as current time.\n• Take a screenshot using the grab() method and wait for sometime\n• Create the random delay using randint() method and sleep().\n• save the screenshots with the name as the current time.\n\nMSS is an ultra-fast cross-platform multiple screenshots module in pure python using ctypes. This module can be used to capture screenshots.\n\nThe shot() method is used to take a screenshot of the screen or monitor.\n\nIn the above code, a random delay was generated between 1 to 5 seconds before taking a screenshot. generate a random number between 1 to 5, and create a time delay using the shot() method. The screenshots will be saved in the exact location of the program with the file name as the current time.\n• Create an instance of mss using with keyword, Take a screenshot using the shot() method and wait for sometime\n• Create the random delay using randint() method and sleep().\n• save the screenshots with the name as the current time."
    },
    {
        "link": "https://python-mss.readthedocs.io",
        "document": "\n• None very basic, it will grab one screenshot by monitor or a screenshot of all monitors and save it to a PNG file;\n• None but you can use PIL and benefit from all its formats (or add yours directly);\n• None integrate well with Numpy and OpenCV;\n• None it could be easily embedded into games and other software which require fast and platform optimized methods to grab screenshots (like AI, Computer Vision);\n• None get the source code on GitHub ;\n• None need some help? Use the tag python-mss on Stack Overflow ;"
    },
    {
        "link": "https://stackoverflow.com/questions/35097837/capture-video-data-from-screen-in-python",
        "document": "Is there a way with Python (maybe with OpenCV or PIL) to continuously grab frames of all or a portion of the screen, at least at 15 fps or more? I've seen it done in other languages, so in theory it should be possible. I do not need to save the image data to a file. I actually just want it to output an array containing the raw RGB data (like in a numpy array or something) since I'm going to just take it and send it to a large LED display (probably after re-sizing it)."
    },
    {
        "link": "https://github.com/BoboTiG/python-mss",
        "document": "# The simplest use, save a screenshot of the 1st monitor () : . ()\n\nAn ultra-fast cross-platform multiple screenshots module in pure python using ctypes.\n• very basic, it will grab one screenshot by monitor or a screenshot of all monitors and save it to a PNG file;\n• but you can use PIL and benefit from all its formats (or add yours directly);\n• integrate well with Numpy and OpenCV;\n• it could be easily embedded into games and other software which require fast and platform optimized methods to grab screenshots (like AI, Computer Vision);\n• get the source code on GitHub;\n• need some help? Use the tag python-mss on Stack Overflow;\n• and there is a complete, and beautiful, documentation :)\n\nYou can install it with pip:\n\nOr you can install it with Conda:"
    }
]