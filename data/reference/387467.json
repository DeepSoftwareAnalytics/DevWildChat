[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe HTML element (or anchor element), with its attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. Content within each should indicate the link's destination. If the attribute is present, pressing the enter key while focused on the element will activate it.\n\nSpecifies that you want the browser to send an header. On the server-side this is used to trigger sending an header in the response, to register a navigation-based attribution source. The browser stores the source data associated with the navigation-based attribution source (as provided in the response header) when the user clicks the link. See the Attribution Reporting API for more details. There are two versions of this attribute that you can set:\n• Boolean, i.e. just the name. This specifies that you want the header sent to the same server as the attribute points to. This is fine when you are handling the attribution source registration on the same server.\n• Value containing one or more URLs, for example: This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of . When the resource request occurs, the header will be sent to the URL(s) specified in in addition to the resource origin. These URLs can then respond with the to complete registration. Note: Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data. elements cannot be used as attribution triggers, only sources. Causes the browser to treat the linked URL as a download. Can be used with or without a value:\n• Without a value, the browser will suggest a filename/extension, generated from various sources:\n• The final segment in the URL path\n• The media type (from the header, the start of a URL, or for a URL)\n• : defining a value suggests it as the filename. and characters are converted to underscores ( ). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.\n• only works for same-origin URLs, or the and schemes.\n• How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself.\n• If the header has different information from the attribute, resulting behavior may differ:\n• If the header specifies a , it takes priority over a filename specified in the attribute.\n• If the header specifies a disposition of , Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline. The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:\n• While web browsers may not support other URL schemes, websites can with Moreover other URL features can locate specific parts of the resource, including: Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global attribute. A space-separated list of URLs. When the link is followed, the browser will send requests with the body to the URLs. Typically for tracking. How much of the referrer to send when following the link.\n• : The header will not be sent.\n• : The header will not be sent to origins without TLS (HTTPS).\n• : The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.\n• : The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\n• : A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.\n• : Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).\n• (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).\n• : The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. The relationship of the linked URL as space-separated link types. Where to display the linked URL, as the name for a browsing context (a tab, window, or ). The following keywords have special meanings for where to load the URL:\n• : Usually a new tab, but users can configure browsers to open a new window instead.\n• : The parent browsing context of the current one. If no parent, behaves as .\n• : The topmost browsing context. To be specific, this means the \"highest\" context that's an ancestor of the current one. If no ancestors, behaves as .\n• : Allows embedded fenced frames to navigate the top-level frame (i.e. traversing beyond the root of the fenced frame, unlike other reserved destinations). Note that the navigation will still succeed if this is used outside of a fenced frame context, but it will not act like a reserved keyword. Note: Setting on elements implicitly provides the same behavior as setting which does not set . Hints at the linked URL's format with a MIME type. No built-in functionality.\n\nThe content inside a link should indicate where the link goes, even out of context. A sadly common mistake is to only link the words \"click here\" or \"here\": <p>Learn more about our products <a href=\"/products\">here</a>.</p> Luckily, this is an easy fix, and it's actually shorter than the inaccessible version! Assistive software has shortcuts to list all links on a page. However, strong link text benefits all users — the \"list all links\" shortcut emulates how sighted users quickly scan pages.\n\nAnchor elements are often abused as fake buttons by setting their to or to prevent the page from refreshing, then listening for their events. These bogus values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers. Use a instead. In general, you should only use a hyperlink for navigation to a real URL.\n\nA skip link is a link placed as early as possible in content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused. <body> <a href=\"#content\" class=\"skip-link\">Skip to main content</a> <header>…</header> <!-- The skip link jumps to here --> <main id=\"content\"></main> </body> Skip links let keyboard users bypass content repeated throughout multiple pages, such as header navigation. Skip links are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious."
    },
    {
        "link": "https://w3schools.com/tags/tag_a.asp",
        "document": "More \"Try it Yourself\" examples below.\n\nThe tag defines a hyperlink, which is used to link from one page to another.\n\nThe most important attribute of the element is the attribute, which indicates the link's destination.\n\nBy default, links will appear as follows in all browsers:\n• An unvisited link is underlined and blue\n• An active link is underlined and red\n\nTip: If the tag has no attribute, it is only a placeholder for a hyperlink.\n\nTip: A linked page is normally displayed in the current browser window, unless you specify another target.\n\nTip: Use CSS to style links: CSS Links and CSS Buttons.\n\nThe tag also supports the Global Attributes in HTML.\n\nThe tag also supports the Event Attributes in HTML.\n\nMost browsers will display the element with the following default values:"
    },
    {
        "link": "https://en.ryte.com/wiki/Anchor_Tag",
        "document": "An anchor tag is a HTML element that creates a link to a target URL. When correctly implemented, the link can wrap around text, images, or as buttons, so that users can interact with it and visit the link's destination. It is a best practice to provide context about the link's destination, either in the form of clear anchor text or with a descriptive image. This way, website visitors know what to expect, and Search Engine crawlers can understand the connection across both URLs.\n\nAn anchor tag requires the href attribute which specifies the URL to be linked to. Other attributes can help improve the link's appearance and behavior, but are not required.\n\nTo create a hyperlink, the destination (address) of the document must be known. A hyperlink can link to pages on your own domain, to other websites, or to a file (such as a PDF document).\n\nFor example, to link to the Google homepage, the code is as follows:\n\nHref stands for hypertext reference. This attribute defines the target address of the document, which this time is linked to (https://www.google.com). The “=” sign is the connection of the attribute with the attribute value, whereby “href” is the attribute and “ https://www.google.com ” is the attribute value. There is an apostrophe before and after the attribute value. The defined phrase “Google Home” is known as the anchor text or link text - this is what is visible and clickable for the user. An anchor text is ideally concise, informative, and relevant to the landing page.\n\nIf you want to link internally to another part of your website, you don’t have to specify the full address, in this case, the file name is sufficient:\n\nThe name attribute of the anchor tag can be used to enable users to “jump” to a specific point on a page (jump marker, anchor). This is especially useful with large pages or subdivisions.\n\nThe HTML code looks like this:\n\nIn the first code sample, you link from the bottom of a page back to the beginning, so users can quickly get to the top of the page without having to scroll for a long time. In the second example, users can directly access a part of the page, for example a subdivision point. By clicking, users are guided via name attribute directly to the subject.\n\nBy simply setting a hash tag (#) at the anchor name, the browser can identify a jump within the page.\n\nYou can also link to a specific location on another page internally. This would be defined as follows:\n\nThe “#name” is specified after the filename.\n\nThe target attribute specifies how the destination page or the target document should be opened. “target=” _ blank “ is used for the opening of the target page in a new tab. This is the usual option when using target attributes for linking to other pages.\n\nThe title attribute gives users an important indication as to where they will be directed to when they click on a link. If the user hovers with the mouse over a link reference, the title text, which was defined in the attribute, will be displayed. This can be a tool tip, or description of the resource to which the link directs. The data from the title attribute makes the site more user-friendly.\n\nThe title attribute can also be used for images and graphic files to give a brief description of what is shown in the picture.\n\nThe “preparation” string in the upper HTML reference is the link text that is visible in the body text of a website and may appear as blue text or underlined, depending on the layout. Link text is also called anchor text and is particularly important from the perspective of search engine optimization.\n\nAnchor tags are an essential way of optimizing HTML documents for search engines. Anchor text and title attributes give users and search engines more information about the target link. As with clean URLs, it is essential to carry out keyword research for anchor texts for internal links, because if important keywords are placed here, this can benefit both users and search engines, leading to better rankings.\n\nThe differentiation between internal links and external links is particularly important for anchor tags. For example, there is no restriction on the use of keywords in anchor text for internal links. Webmasters and SEOs can link individual keywords directly without risking penalties from search engines. By linking specific keywords on the website, the thematic relevance of a subpage can be strengthened and thus the ranking can be influenced.\n\nWith backlinks, on the other hand, the excessive use of keyword links can lead to a penalty by Google since the implementation of the Penguin Updates.[1]\n\nThe title attribute for Anchor Tags generally has no direct effect on SEO. However, the use of title attributes and elements on links or images can increase the click-through rate and thus indirectly affect the user signals that Google receives from the website."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/anchor",
        "document": "The following example uses HTML to associate a positioned element with an anchor. CSS is then used to tether the positioned element to the right of the anchor.\n\nWe create a element with an of . This is our anchor element. We then include another with the attribute set to . This designates the first as the anchor for the second , associating the two together.\n\nWe also include some filler text around the two s to make the taller so that it will scroll.\n\nWe use CSS to convert the element into an anchor-positioned element and position it relative to its anchor. We set its:\n• property to , converting it to a positioned element so it can be positioned relative to the anchor's position.\n• property to an function with a value of . This tethers the positioned element to its anchor, positioning its left edge flush to the anchor's right edge.\n• property to . This causes the infobox to be aligned centrally to the center of the anchor in the inline direction.\n• to , creating space between the anchor-positioned element and its anchor.\n\nScroll the example to see how the infobox is tethered to the anchor. When the attribute is supported, the infobox will be fixed to the right of the anchor. If not supported, the infobox will be fixed to the viewport."
    },
    {
        "link": "https://geeksforgeeks.org/html-a-tag",
        "document": "The <a> tag defines a hyperlink, which is used to link from one page to another. The most important attribute of the <a> element is the href attribute, which indicates the link’s destination. This attribute determines where the user is directed upon clicking the link.\n\nBy default, links appear as follows in all browsers:\n\nTo open a link in a new browser Tab, add the target=”_blank” attribute:\n• None To link to an email address:\n\nTo link to another section on the same page:\n\nIt specifies the character set. It is not supported by HTML 5. It is used to specify the target link to download when the user clicks. It is used to specify the language of the linked document. It is used to specify the linked media. It is used to specify the anchor name. It is not supported by HTML 5 you can use the global id attribute instead. It is used to specify the relation between the current document and the linked document. It is used to specify the shape of the link. It is not supported by HTML 5. It is used to specify the type of links. It is used to specify the relation between the linked document and the current document. It is not supported by HTML 5.\n\nWhat does the target=”_blank” attribute do in the <a> tag?\n\nCan the <a> tag be used for linking to sections within the same page?\n\nCan the <a> tag be used without the href attribute?\n\nWhat is the purpose of the rel=”noopener noreferrer” attribute with target=”_blank”?"
    },
    {
        "link": "https://w3schools.com/html/html_links.asp",
        "document": "Links are found in nearly all web pages. Links allow users to click their way from page to page.\n\nYou can click on a link and jump to another document.\n\nWhen you move the mouse over a link, the mouse arrow will turn into a little hand.\n\nThe HTML tag defines a hyperlink. It has the following syntax:\n\nThe most important attribute of the element is the attribute, which indicates the link's destination.\n\nThe link text is the part that will be visible to the reader.\n\nClicking on the link text, will send the reader to the specified URL address.\n\nBy default, links will appear as follows in all browsers:\n• An unvisited link is underlined and blue\n• An active link is underlined and red\n\nBy default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link.\n\nThe attribute specifies where to open the linked document.\n\nThe attribute can have one of the following values:\n• - Default. Opens the document in the same window/tab as it was clicked\n• - Opens the document in a new window or tab\n• - Opens the document in the parent frame\n• - Opens the document in the full body of the window\n\nBoth examples above are using an absolute URL (a full web address) in the attribute.\n\nA local link (a link to a page within the same website) is specified with a relative URL (without the \"https://www\" part):\n\nHTML Links - Use an Image as a Link\n\nTo use an image as a link, just put the tag inside the tag:\n\nUse inside the attribute to create a link that opens the user's email program (to let them send a new email):\n\nTo use an HTML button as a link, you have to add some JavaScript code.\n\nJavaScript allows you to specify what happens at certain events, such as a click of a button:\n\nThe attribute specifies extra information about an element. The information is most often shown as a tooltip text when the mouse moves over the element.\n\nMore on Absolute URLs and Relative URLs\n• Use the element to define a link\n• Use the attribute to define the link address\n• Use the attribute to define where to open the linked document\n• Use the element (inside ) to use an image as a link\n• Use the scheme inside the attribute to create a link that opens the user's email program"
    },
    {
        "link": "https://html.com/anchors-links",
        "document": "The anchor element is used to create hyperlinks between a source anchor and a destination anchor. The source is the text, image, or button that links to another resource and the destination is the resource that the source anchor links to.\n\nHyperlinks are one of the fundamental technologies that make the web the information superhighway, and understanding how to use anchor elements is one of the first things you need to master when learning HTML.\n\nThe anchor element tag is the letter “a” surrounded by angle brackets like this: . Both the opening and closing attributes are required, and all of the content between the tags makes up the anchor source.\n\nWhile the examples above will produce anchor elements they aren’t of much use since we haven’t included any additional instructions. Right now these anchor elements link to nothing. To link a source anchor to a destination anchor, we need to apply some additional attributes to the anchor element.\n\nIn this short tutorial we’ll cover the attributes you can use to add a destination anchor to your hyperlinks, tell the browser what to do with the link, and add semantic meaning to anchor elements for browsers and web crawlers to use.\n\nThere are three anchor attributes you need to know to create functional hyperlinks. These attributes are , , and .\n\nThe hypertext reference, or , attribute is used to specify a target or destination for the anchor element. It is most commonly used to define a URL where the anchor element should link to.\n\nAn can do a lot more than just link to another website.\n• It can be used to link directly to any element on a web page that has been assigned an .\n• It can be used to link to a resource using a protocol other than http.\n• It can be used to run a script.\n\nThe following HTML includes examples of all three of these actions:\n\nIn the box below you’ll see that HTML as it renders in the browser. Try each link to see what happens.\n\nThe element is pretty easy to use, but we can get a lot more mileage out of our anchor elements by getting to know the attribute.\n\nSpecify a Location to Open the Link:\n\nLet’s look back at the link we created in the previous example. Here’s that code again:\n\nWhile that link is useful, the way it opens isn’t ideal. Depending on how your computer and browser are configured, it’s possible that clicking on the link created by that text will redirect your browser window away from this website to a web-based email application such as Gmail or Yahoo! Mail. While we certainly want to encourage our visitors to contact us, we don’t want to do so at the expense of sending visitors away from our website.\n\nThe answer to this conundrum is the attribute paired with the value.\n\nWhen we add the attribute and attribute to our link we tell the visitors browser to open the link in a new (blank) browser tab or window. If we render that code in the browser, when a visitor clicks the link it will open in a new tab.\n\nLinks are also used to tell a browser to start downloading a file. The attribute is used to identify a link that should initiate a download and the value assigned to the attribute is the name of the file to be downloaded.\n\nThe attribute also comes into play when setting up an anchor element that initiates a download. While the attribute names the file, the attribute points to the location where the file is hosted.\n\nHere’s an example of how a download-initiating anchor element would look:\n\nIf the in the example above pointed to a real file, when the download was complete the downloaded file would be called Example_File.ext where .ext would be the format of the file that was downloaded. It isn’t necessary to include the file type extension in the value assigned to the attribute. The file extension will be automatically identified when the browser downloads the file, and automatically appended to the downloaded file name.\n\nThere are two types of resources we can link to using the element: internal and external. Internal links are those that point to other pages of our website. External links point to web pages that aren’t part of our website.\n\nBuilding internal links is important for a few different reasons:\n• Internal links are used to create navigation menus that help website visitors navigate our website.\n• Internal links are used in the text of website content to help website visitors locate related content.\n• Internal links are also used by search engine web crawlers to locate the pages of a website and to share authority (also known as link juice) with the other pages of a website.\n\nWhen writing internal links make sure you don’t overdo it. The link juice of any given web page is shared between the links on the page. So the more links you put on a page, the more diluted the juice passed to each link becomes. A good rule of thumb is to have no more than 100 links per page although there are exceptions in the case of extremely large and complex websites.\n\nExternal links are also important for a few different reasons:\n• External links may be recommended, required, or just best-practice to provide proper attribution to the source of an idea or a resource.\n• External links allow us to refer website visitors to useful related content.\n• When other websites post external links that point at our website, these links known as backlinks allow link juice to flow to our website and improve our website’s position on search engine results pages (SERP).\n\nWhen writing external links try to avoid linking to direct competitors. You don’t want to help their SERP ranking for search terms that you are targeting for your own website. It’s also a good idea to use the attribute when writing external links. By opening external links in a new tab you keep visitors on your site for longer.\n\nSurely you’ve seen and maybe even created links that look something like this:\n\nThere are at least three good reasons why using generic anchor element text such as “Click Here” is a terrible practice.\n• Website visitors who depend on assistive technologies such as screen readers will have a hard time deciphering the meaning of links that make use of generic link text such as “Click Here”.\n• Website visitors who are scanning a page will have to take several additional seconds to investigate the text around the link to have an idea of what the anchor links to.\n• Search engine web crawlers associate anchor element text with the link URL. Properly selected anchor element text helps search engines determine the relevance of a web page to specific keywords. Generic text tells search engines nothing about the linked web page.\n\nIdeal anchor element text is succinct and identifies a keyword or keywords that are relevant to the web page. Here’s a sentence that includes two examples of properly selected link text:\n\nThe first link tells web crawlers and website visitors that the website has something to do with the keywords “search engines”. The second tells visitors and search engines that the page found at the relative URL is related to the keywords “SEO tutorial”.\n\nThere were two links in our last example: and . The first is an example of an absolute URL. Absolute URLs are those that include a complete (absolute) description of the link destination. Absolute URLs include the protocol (http) and the complete domain name and file path needed to reach the destination anchor.\n\nThe second is an example of a relative URL. Relative URLs link to a web page by describing the position of the page relative to the position of the current page. When writing internal links that point to other pages of the same website we have the option of writing relative URLs rather than absolute URLs.\n\nFor example, if we are at this address: , and we want to link to the blue product page, we can use either of the following anchor elements:\n\nWhat the first syntax says is: “look in the lowest level of the file directory for the file products, and look for blue products within that file”. What the second syntax says is: “look in the parent folder of the directory for a directory with the name . Both of these anchor elements point to the URL: .\n\nLet’s say that we want to link to About Us – a page that exists as a direct descendant of the homepage. Here’s how we could do that:\n\nThat syntax says “go back to the lowest level of the file directory tree and then look for a directory titled about-us“.\n\nAs a final example, let’s say we are at this address once again: , and that we want to link to a subcategory page that exists within the category.\n\nWhat that relative URL will do is tell the browser to look in the current folder for a file named and will resolve to this URL: .\n\nTo summarize, when we write relative URLs we have three options:\n• When we start a relative URL with “/” we tell the browser to look for the specified file or folder in the lowest level of the file directory.\n• If we start a relative URL with “../” we tell the browser back up in the directory tree one level.\n• If we start a relative URL with a file or folder name we tell the browser to look for the specified resources in the current file.\n\nWhy Are Relative URLs Used?\n\nRelative URLs are very popular with web developers. It is common for websites to be developed on a staging server with a domain name that is not the same as the eventual permanent domain name. If relative URLs are used, when the site is transferred from the staging server to being live on the web all of the relative URLs will continue to work just fine. However, if absolute URLs are used the development team will have to go through the site fixing all of the URLs.\n\nWhile the benefit of using relative URLs during the development of a site on a staging server not inconsiderable, it comes at a cost.\n\nWhile you should know how relative URLs work, many experienced developers and SEO experts recommend sticking to absolute URLs as much as possible.\n\nWith just the three attributes we’ve covered so far, you can complete every hyperlinking task you will encounter on the web. However, there are additional attributes that can be used to tell a visitor’s web browser and search engines that index our website something about the meaning of the hyperlinks.\n\nSpecify the Language of the Anchor Destination:\n\nThis is optional tag can be used to tell a web browser the language of the document to which the anchor is linked. For example, if we were linking to a URL and wanted to tell the browser that the destination anchor was in Spanish we would use the appropriate language code in ISO 639-1 format as the value of the attribute.\n\nSpecify the Relationship Between Source and Destination:\n\nThe relationship, or , attribute is used to describe the relationship between the source anchor and the destination anchor. For example, we could use the following code to identify the destination as being a resource about the author of the document.\n\nThere are several different values that can be used to describe the relationship between the source link and the destination link. Here are a few of the most common:\n• : Use this attribute if you’re linking to a resource you don’t want to lend your site’s reputation to. For example, if you link to a spammy site as an example of what not to do, you would want to use this value to keep from contributing to the site’s search engine visibility.\n• : If your site has more than one version – such as a translation into a different language – use this value to identify the linked resource as an alternate version of the current page.\n• : This value is used to identify a URL formulation that is permanent and may be used for bookmarking.\n• : Identify a linked resource as a help file for the current page with this value.\n• : Use this attribute when linking to a recognized copyright license.\n• : If the current document exists in a series of documents, use this value when linking to the next document in the series.\n• : If the current document exists in a series of documents, use this value when linking to the previous document in the series.\n• : If you want to link to an external website but avoid letting the destination website know who the referrer is, use this value.\n\nThe attribute is an optional attribute that can be used to identify the Internet media type, or MIME type, of the destination document. For example, if linking to a website rendered in HTML you could add the attribute to tell a visitor’s browser that the link points to an HTML document.\n\nRight now this attribute doesn’t do much of anything, but the thinking is that in the future the information contained in this attribute could be used to somehow communicate to a website visitor the type of content they are about to be linked to before clicking on the link.\n\nThe value must be a valid IANA media type. Some of the most commonly used values are: , , , and .\n\nThe World Wide Web is best described as a massive library of hyperlinked documents where anchor elements are used to create bridges between related documents. In this definition, anchor elements occupy their rightful place as the glue that ties the web together and the bridges that allow web users to move from one document to a related document.\n\nOne common way for links to be used is to build a navigation menu that lays out the logical, hierarchical structure of a website. If you want to learn how to build effective navigational menus read our tutorial on that topic."
    },
    {
        "link": "https://shecodes.io/athena/34267-how-to-add-a-link-within-a-paragraph-in-html",
        "document": "Write me a Code that gives me the possiblity to placedifferent Icons on one line, I should be able to place Wording under the Icons and it should be centred. The icons should be placed like different Tabs on one line. The Icon Bar should be sticky.\n\nthe scenario is ,create a separate html ,css and java script file the js file should contain list of songs and images in an object ,when the image button pressed the perticular song of that image as to display and it should contain single progress bar at a footer\n\ncreate HTML5 prototypes and relevant CSS rules for a mock-ups. it should have:\n• Use proper HTML page structure\n• Use HTML5 elements where appropriate\n• CSS style rules are consistent across all pages Create Landing Page: index.html You must implement the HTML and CSS code to achieve this design. Requirements are:\n• Include all sections from the design o Header, Content, and Footer o Dotted line indicate page boundaries and is not required\n• Use hyperlinks for navigation links with the 5 provided images o Images can be found in resources.zip o Each image should have a hyperlink o For now, 4 news categories should link to list.html o The add news image should link to add.html\n• Use CSS to: o Ensure all pages use the same font scheme (of your choice)  n.b. any font family, size, colour is acceptable, but must be specified clearly in the CSS file o Layout the images as a grid  n.b. table layout or simple flow layout are accepted, but receive less marks"
    },
    {
        "link": "https://forum.freecodecamp.org/t/guidance-for-making-an-html-link-within-a-paragraph-element/569135",
        "document": "Many people struggle with making an html link for the first time when that link is enclosed within a paragraph element. (Such as in step 12 of the cat photo app).\n\nThis post is meant to guide you by giving you some tips of how this is done.\n\nTo begin, we are presented with some plain text in a paragraph element such as below:\n\n<p>This is some boring text without any links.</p>\n\nLet us now try to turn the word -links- into a clickable link by using an anchor element.\n\n Here goes:\n\n<p>This is some boring text without any <a href=\"https://www.google.com\">links</a>.</p>\n\nI’ve just turned the word into a clickable word that will take the user to the google search site. I did that by creating an anchor opening tag to the immediate right of the word links, and by creating a closing anchor tag to the immediate right of the word links. This is what the step means by ‘wrapping’.\n\nHere’s how this text would look like in the preview pane (or in a browser)\n\nThis is some boring text without any links.\n\nNotice how the period (dot) is not part of my link?\n\nAlso take note of the way the anchor tags both start with < and end with >\n\n The opening anchor tag also has a valid href attribute value.\n\n (Many people mistype their link URL, so always double-check)\n\nFinally, some people try to add their links at the end of the paragraph like this:\n\n<p>This is some boring text without any links. <a href=\"https://www.google.com\">links</a></p>\n\nThis is wrong because it looks like this in preview:\n\nThis is some boring text without any links. links\n\nAnd does not complete the objective of making the original word links into a link.\n\nSo that’s all there is to this. Super easy and simple.\n\nFinal note: (for step 14)\n\n If you want to make an element into a link instead of some words, do the exact same thing but treat the element the same as I treated the word “links”.\n\nMore references if you need additional help here:\n\n https://forum.freecodecamp.org/t/learn-html-by-building-a-cat-photo-app-step-12/578789/3"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe HTML element (or anchor element), with its attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address. Content within each should indicate the link's destination. If the attribute is present, pressing the enter key while focused on the element will activate it.\n\nSpecifies that you want the browser to send an header. On the server-side this is used to trigger sending an header in the response, to register a navigation-based attribution source. The browser stores the source data associated with the navigation-based attribution source (as provided in the response header) when the user clicks the link. See the Attribution Reporting API for more details. There are two versions of this attribute that you can set:\n• Boolean, i.e. just the name. This specifies that you want the header sent to the same server as the attribute points to. This is fine when you are handling the attribution source registration on the same server.\n• Value containing one or more URLs, for example: This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of . When the resource request occurs, the header will be sent to the URL(s) specified in in addition to the resource origin. These URLs can then respond with the to complete registration. Note: Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data. elements cannot be used as attribution triggers, only sources. Causes the browser to treat the linked URL as a download. Can be used with or without a value:\n• Without a value, the browser will suggest a filename/extension, generated from various sources:\n• The final segment in the URL path\n• The media type (from the header, the start of a URL, or for a URL)\n• : defining a value suggests it as the filename. and characters are converted to underscores ( ). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary.\n• only works for same-origin URLs, or the and schemes.\n• How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself.\n• If the header has different information from the attribute, resulting behavior may differ:\n• If the header specifies a , it takes priority over a filename specified in the attribute.\n• If the header specifies a disposition of , Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline. The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers:\n• While web browsers may not support other URL schemes, websites can with Moreover other URL features can locate specific parts of the resource, including: Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global attribute. A space-separated list of URLs. When the link is followed, the browser will send requests with the body to the URLs. Typically for tracking. How much of the referrer to send when following the link.\n• : The header will not be sent.\n• : The header will not be sent to origins without TLS (HTTPS).\n• : The sent referrer will be limited to the origin of the referring page: its scheme, host, and port.\n• : The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path.\n• : A referrer will be sent for same origin, but cross-origin requests will contain no referrer information.\n• : Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP).\n• (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP).\n• : The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. The relationship of the linked URL as space-separated link types. Where to display the linked URL, as the name for a browsing context (a tab, window, or ). The following keywords have special meanings for where to load the URL:\n• : Usually a new tab, but users can configure browsers to open a new window instead.\n• : The parent browsing context of the current one. If no parent, behaves as .\n• : The topmost browsing context. To be specific, this means the \"highest\" context that's an ancestor of the current one. If no ancestors, behaves as .\n• : Allows embedded fenced frames to navigate the top-level frame (i.e. traversing beyond the root of the fenced frame, unlike other reserved destinations). Note that the navigation will still succeed if this is used outside of a fenced frame context, but it will not act like a reserved keyword. Note: Setting on elements implicitly provides the same behavior as setting which does not set . Hints at the linked URL's format with a MIME type. No built-in functionality.\n\nThe content inside a link should indicate where the link goes, even out of context. A sadly common mistake is to only link the words \"click here\" or \"here\": <p>Learn more about our products <a href=\"/products\">here</a>.</p> Luckily, this is an easy fix, and it's actually shorter than the inaccessible version! Assistive software has shortcuts to list all links on a page. However, strong link text benefits all users — the \"list all links\" shortcut emulates how sighted users quickly scan pages.\n\nAnchor elements are often abused as fake buttons by setting their to or to prevent the page from refreshing, then listening for their events. These bogus values cause unexpected behavior when copying/dragging links, opening links in a new tab/window, bookmarking, or when JavaScript is loading, errors, or is disabled. They also convey incorrect semantics to assistive technologies, like screen readers. Use a instead. In general, you should only use a hyperlink for navigation to a real URL.\n\nA skip link is a link placed as early as possible in content that points to the beginning of the page's main content. Usually, CSS hides a skip link offscreen until focused. <body> <a href=\"#content\" class=\"skip-link\">Skip to main content</a> <header>…</header> <!-- The skip link jumps to here --> <main id=\"content\"></main> </body> Skip links let keyboard users bypass content repeated throughout multiple pages, such as header navigation. Skip links are especially useful for people who navigate with the aid of assistive technology such as switch control, voice command, or mouth sticks/head wands, where the act of moving through repetitive links can be laborious."
    }
]