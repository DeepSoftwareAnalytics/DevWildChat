[
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Transform.TransformPoint.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nNote that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with direction vectors.\n\n\n\nYou can perform the opposite conversion, from world to local space using Transform.InverseTransformPoint.\n\n\n\nIf you need to transform many points at once consider using Transform.TransformPoints instead as it is much faster than repeatedly calling this function.\n\n\n\nAdditional resources: Transform.TransformPoints, Transform.TransformDirection, Transform.TransformVector.\n\nNote that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with direction vectors.\n\n\n\nYou can perform the opposite conversion, from world to local space using Transform.InverseTransformPoint.\n\n\n\nIf you need to transform many points at once consider using Transform.TransformPoints instead as it is much faster than repeatedly calling this function.\n\n\n\nAdditional resources: Transform.TransformPoints, Transform.TransformDirection, Transform.TransformVector."
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Transform.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nEvery object in a Scene has a Transform. It's used to store and manipulate the position, rotation and scale of the object. Every Transform can have a parent, which allows you to apply position, rotation and scale hierarchically. This is the hierarchy seen in the Hierarchy pane. They also support enumerators so you can loop through children using:"
    },
    {
        "link": "https://dev.rbcafe.com/unity/unity-3.4.2/Documentation/ScriptReference/Transform.TransformPoint.html",
        "document": "Note that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with directions. UnityEngine\n\n System.Collections\n\n\n\n example(\n\n\n\n someObject as \n\n\n\n thePosition as \n\n\n\n def ():\n\n (Instantiate(someObject, thePosition, someObject.transform.rotation) as \n\n UnityEngineSystem.Collectionsexample( MonoBehaviour ):someObject as GameObject thePosition as Vector3 = transform.TransformPoint(( Vector3.right * 2))def():(Instantiate(someObject, thePosition, someObject.transform.rotation) as GameObject\n\nTransforms the position x, y, z from local space to world space. Note that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with directions."
    },
    {
        "link": "https://docs.unity.cn/cn/tuanjiemanual/ScriptReference/Transform.TransformPoint.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nNote that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with direction vectors.\n\n\n\nYou can perform the opposite conversion, from world to local space using Transform.InverseTransformPoint.\n\n\n\nIf you need to transform many points at once consider using Transform.TransformPoints instead as it is much faster than repeatedly calling this function.\n\n\n\nSee Also: Transform.TransformPoints, Transform.TransformDirection, Transform.TransformVector.\n\nNote that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with direction vectors.\n\n\n\nYou can perform the opposite conversion, from world to local space using Transform.InverseTransformPoint.\n\n\n\nIf you need to transform many points at once consider using Transform.TransformPoints instead as it is much faster than repeatedly calling this function.\n\n\n\nSee Also: Transform.TransformPoints, Transform.TransformDirection, Transform.TransformVector."
    },
    {
        "link": "https://discussions.unity.com/t/position-transformpoint-localposition/420414",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Quaternion.Euler.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nReturns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis; applied in that order.\n\nFor more information, see Rotation and Orientation in Unity.\n\nReturns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis."
    },
    {
        "link": "https://docs.unity3d.com/Manual/class-Quaternion.html",
        "document": "Unity uses the QuaternionUnity’s standard way of representing rotations as data. When writing code that deals with rotations, you should usually use the Quaternion class and its methods. More info\n\nSee in Glossary class to store the three dimensional orientation of GameObjectsThe fundamental object in Unity scenes, which can represent characters, props, scenery, cameras, waypoints, and more. A GameObject’s functionality is defined by the Components attached to it. More info\n\nSee in Glossary, as well as using them to describe a relative rotation from one orientation to another.\n\nThis page provides an overview of the Quaternion class and its common uses when scripting with it. For an exhaustive reference of every member of the Quaternion class, see the Quaternion script reference.\n\nIt’s important to understand the difference between Euler angles (the X, Y, & Z values that you see in the inspector for the rotation of a GameObject), and the underlying Quaternion value which Unity uses to store the actual rotation of GameObjects. For the basics of this topic, read Rotation and Orientation in Unity.\n\nWhen dealing with handling rotations in your scriptsA piece of code that allows you to create your own Components, trigger game events, modify Component properties over time and respond to user input in any way you like. More info\n\nSee in Glossary, you should use the Quaternion class and its functions to create and modify rotational values. There are some situations where it is valid to use Euler angles, but you should bear in mind: - You should use the Quaternion Class functions that deal with Euler angles - Retrieving, modifying, and re-applying Euler values from a rotation can cause unintentional side-effects (see below)\n\nUnity’s Quaternion class has a number of functions which allow you to create and manipulate rotations without needing to use Euler angles at all, and these are the ones you should use in most typical cases. Each of these links to the Script Reference with code samples:\n\nThe Transform class also provides methods which allow you to work with the Quaternion rotations:\n\nIn some cases it’s more desirable to use Euler angles in your scripts. When doing so, it’s important to note that you must keep your angles in variables, and only use them to apply them as Euler angles to your rotation, which should still ultimately be stored as a Quaternion. While it’s possible to retrieve Euler angles from a quaternion, if you retrieve, modify and re-apply, problems are likely to arise.\n\nYou can read more detail about exactly how these problems can arise in the eulerAngles script reference page.\n\nHere are some examples of mistakes commonly made using a hypothetical example of trying to rotate a GameObject around the X axis at 10 degrees per second. This is what you should avoid:\n\nAnd here is an example of using Euler angles in script correctly:"
    },
    {
        "link": "https://discussions.unity.com/t/how-to-rotate-objects-using-c-script/877945",
        "document": ""
    },
    {
        "link": "https://docs.unity.cn/540/Documentation/Manual/QuaternionAndEulerRotationsInUnity.html",
        "document": "Rotations in 3D applications are usually represented in one of two ways, Quaternions or Euler angles. Each has its own uses and drawbacks. Unity uses Quaternions internally, but shows values of the equivalent Euler angles in the inspector to make it easy for you to edit.\n\nThe Difference Between Euler Angles and Quaternions\n\nEuler angles have a simpler representation, that being three angle values for X, Y and Z that are applied sequentially. To apply a Euler rotation to a particular object, each rotation value is applied in turn, as a rotation around its corresponding axis.\n• Benefit: Euler angles have an intuitive “human readable” format, consisting of three angles.\n• Benefit: Euler angles can represent the rotation from one orientation to another through a turn of more than 180 degrees\n• Limitation: Euler angles suffer from Gimbal Lock. When applying the three rotations in turn, it is possible for the first or second rotation to result in the third axis pointing in the same direction as one of the previous axes. This means a “degree of freedom” has been lost, because the third rotation value cannot be applied around a unique axis.\n\nQuaternions can be used to represent the orientation or rotation of an object. This representation internally consists of four numbers (referenced in Unity as x, y, z & w) however these numbers don’t represent angles or axes and you never normally need to access them directly. Unless you are particularly interested in delving into the mathematics of Quaternions, you only really need to know that a Quaternion represents a rotation in 3D space and you will never normally need to know or modify the x, y & z properties.\n\nIn the same way that a Vector can represent either a position or a direction (where the direction is measured from the origin), a Quaternion can represent either an orientation or a rotation - where the rotation is measured from the rotational “origin” or “Identity”. It because the rotation is measured in this way - from one orientation to another - that a quaternion can’t represent a rotation beyond 180 degrees.\n• Benefit: Quaternion rotations do not suffer from Gimbal Lock.\n• Limitation: A single quaternion cannot represent a rotation exceeding 180 degrees in any direction.\n• Limitation: The numeric representation of a Quaternion is not intuitively understandable.\n\nIn Unity all Game Object rotations are stored internally as Quaternions, because the benefits outweigh the limitations.\n\nIn the Transform Inspector however, we display the rotation using Euler angles, because this is more easily understood and edited. New values entered into the inspector for the rotation of a Game Object are converted “under the hood” into a new Quaternion rotation value for the object.\n\nAs a side-effect, it is possible in the inspector to enter a value of, say, X: 0, Y: 365, Z: 0 for a Game Object’s rotation. This is a value that is not possible to represent as a quaternion, so when you hit Play you’ll see that the object’s rotation values change to X: 0, Y: 5, Z: 0 (or thereabouts). This is because the rotation was converted to a Quaternion which does not have the concept of “A full 360-degree rotation plus 5 degrees”, and instead has simply been set to be oriented in the same way as the result of the rotation.\n\nWhen dealing with handling rotations in your scripts, you should use the Quaternion class and its functions to create and modify rotational values. There are some situations where it is valid to use Euler angles, but you should bear in mind: - You should use the Quaternion Class functions that deal with Euler angles - Retrieving, modifying, and re-applying Euler values from a rotation can cause unintentional side-effects.\n\nUnity’s Quaternion class has a number of functions which allow you to create and manipulate rotations without needing to use Euler angles at all. For example:\n\nHowever sometimes it’s desirable to use Euler angles in your scripts. In this case it’s important to note that you must keep your angles in variables, and only use them to apply them as Euler angles to your rotation. While it’s possible to retrieve Euler angles from a quaternion, if you retrieve, modify and re-apply, problems will arise.\n\nHere are some examples of mistakes commonly made using a hypothetical example of trying to rotate an object around the X axis at 10 degrees per second. This is what you should avoid:\n\nAnd here is an example of using Euler angles in script correctly:\n\nMany 3D authoring packages, and indeed Unity’s own internal animation window, allow you to use Euler angles to specify rotations during an animation.\n\nThese rotations values can frequently exceed range expressable by quaternions. For example, if an object should rotate 720 degrees in-place, this could be represented by Euler angles X: 0, Y: 720, Z:0. But this is simply not representable by a Quaternion value.\n\nWithin Unity’s own animation window, there are options which allow you to specify how the rotation should be interpolated - using Quaternion or Euler interpolation. By specifying Euler interpolation you are telling Unity that you want the full range of motion specified by the angles. With Quaternion rotation however, you are saying you simply want the rotation to end at a particular orientation, and Unity will use Quaternion interpolation and rotate across the shortest distance to get there. See Using Animation Curves for more information on this.\n\nWhen importing animation from external sources, these files usually contain rotational keyframe animation in Euler format. Unity’s default behaviour is to resample these animations and generate a new Quaternion keyframe for every frame in the animation, in an attempt to avoid any situations where the rotation between keyframes may exceed the Quaternion’s valid range.\n\nFor example, imagine two keyframes, 6 frames apart, with values for X as 0 on the first keyframe and 270 on the second keyframe. Without resampling, a quaternion interpolation between these two keyframes would rotate 90 degrees in the opposite direction, because that is the shortest way to get from the first orientation to the second orientation. However by resampling and adding a keyframe on every frame, there are now only 45 degrees between keyframes so the rotation will work correctly.\n\nThere are still some situations where - even with resampling - the quaternion representation of the imported animation may not match the original closely enough, For this reason, in Unity 5.3 and onwards there is the option to turn off animation resampling, so that you can instead use the original Euler animation keyframes at runtime. For more information, see Animation Import of Euler Curve Rotations."
    },
    {
        "link": "https://discussions.unity.com/t/directly-set-rotation/684036",
        "document": ""
    }
]