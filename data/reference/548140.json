[
    {
        "link": "https://stackoverflow.com/questions/545907/what-is-the-best-way-to-do-input-validation-in-c-with-cin",
        "document": "Here is code you could use to make sure you also reject things like\n\nWhere non-number characters follow the number. If you read the whole line and then parse it and execute actions appropriately it will possibly require you to change the way your program works. If your program read your number from different places until now, you then have to put one central place that parses one line of input, and decides on the action. But maybe that's a good thing too - so you could increase the readability of the code that way by having things separated: Input - Processing - Output\n\nAnyway, here is how you can reject the number-non-number of above. Read a line into a string, then parse it with a :\n\nIt eats all trailing whitespace. When it hits the end-of-file of the stringstream while reading the integer or trailing whitespace, then it sets the eof-bit, and we check that. If it failed to read any integer in the first place, then the fail or bad bit will have been set.\n\nEarlier versions of this answer used directly - but won't work well together with connected to a terminal (it will block instead waiting for the user to input something), so we use a for reading the integer.\n\nAnswering some of your questions:\n\nQuestion: 1. Using a try catch block. It didn't work. I think this is because an exception is not raised due to bad input.\n\nAnswer: Well, you can tell the stream to throw exceptions when you read something. You use the function, which you tell for which kind of error you want to have an exception thrown:\n\nI did never use it. If you do that on , you will have to remember to restore the flags for other readers that rely on it not throwing. Finding it way easier to just use the functions fail, bad to ask for the state of the stream.\n\nQuestion: 2. I tried which didn't work either. I haven't yet figured this one out.\n\nAnswer: That could come from the fact that you gave it something like \"42crap\". For the stream, that is completely valid input when doing an extraction into an integer.\n\nQuestion: 3. Thirdly, I tried inputting a fixed length string and then parsing it. I would use atoi(). Is this standards compliant and portable? Should I write my own parsing function?\n\nAnswer: atoi is Standard Compliant. But it's not good when you want to check for errors. There is no error checking, done by it as opposed to other functions. If you have a string and want to check whether it contains a number, then do it like in the initial code above.\n\nThere are C-like functions that can read directly from a C-string. They exist to allow interaction with old, legacy code and writing fast performing code. One should avoid them in programs because they work rather low-level and require using raw naked pointers. By their very nature, they can't be enhanced to work with user defined types either. Specifically, this talks about the function \"strtol\" (string-to-long) which is basically atoi with error checking and capability to work with other bases (hex for example).\n\nQuestion: 4. If I write a class that uses cin, but dynamically do this kind of error detection, perhaps by determining the type of the input variable at runtime, will it have too much overhead? Is it even possible?\n\nAnswer: Generally, you don't need to care too much about overhead here (if you mean runtime-overhead). But it depends specifically on where you use that class. That question will be very important if you are writing a high performance system that processes input and needs to have high throughout. But if you need to read input from a terminal or a file, you already see what this comes down to: Waiting for the user to input something takes really so long, you don't need to watch runtime costs at this point anymore on this scale.\n\nIf you mean code overhead - well it depends on how the code is implemented. You would need to scan your string that you read - whether it contains a number or not, whether some arbitrary string. Depending on what you want to scan (maybe you have a \"date\" input, or a \"time\" input format too. Look into for that), your code can become arbitrarily complex. For simple things like classifying between number or not, I think you can get away with small amount of code."
    },
    {
        "link": "https://stackoverflow.com/questions/514420/how-to-validate-numeric-input-in-c",
        "document": "I tried many techniques for reading integer input from the user using the operator, but in a way or another all my experiments have failed.\n\nNow I think that function (not the method with the same name on ) and the function from the include is the only predictable consistent solution for this problem. I would appreciate if someone proved me wrong. Here is something like the one I use:\n• *1: Placing to the global scope may lead to broken \"unity builds\" (google!) on larger projects, so should be avoided. Practice to not use that way, even on smaller projects!\n• Reading integers from files is a very different matter. Raúl Roa's approach can be good for that if properly worked out. I also suggest that wrong input files should not be tolerated, but it really depends on the application.\n• Be warned that using and in the same program on will lead to some problems. Use one of them only, or google to know how to handle the issue (not too hard)."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-validate-user-input-in-cpp",
        "document": "Validating the user input is very important for any program to ensure that the data being processed is correct and meaningful. In C++, various techniques can be used to validate the user input and in this article, we will learn how to validate the user input in C++.\n\nTo validate user input in C++, we can use the following methods:\n\nOne of the most common forms of input validation is to ensure that the type of data provided by the user is valid or not. The object can be used to check the data type of the input. The following program illustrates the use of std::cin to validate the data type of the input:\n\nC++ Program to validate the data type of the input\n\nAfter ensuring the input is of the correct data type, we can use simple comparison operators to check if the input falls within a valid range or not. The following program illustrates how we can perform range validation for inputs in C++:\n\nC++ Program to validate the range of the input\n\nTo validate the format of a string, for example checking if a string is a valid email address or not we can use the regular expressions also known as regex in C++. The following program illustrates how we can validate string formats using regex in C++:\n\nC++ Program to Validate String Format for emails using regular expressions\n\nFor more specific validation needs, custom logic can be implemented by the users. Let us consider the following example, where we will validate a password that must contain a mix of characters.\n\nTime Complexity: O(N), where N is the length of the input.\n\nAuxiliary Space: O(1), as no extra space is used for validation."
    },
    {
        "link": "https://medium.com/@ryan_forrester_/c-input-validation-how-to-guide-5f487cbbbfb5",
        "document": "One of the most common tasks in input validation is ensuring that user input is a valid number. Here’s a simple example:\n\nThis function uses a while loop to repeatedly prompt for input until a valid integer is entered. It clears the error state and ignores any remaining input if an invalid entry is made.\n\nOften, you need to ensure that input falls within a specific range. Here’s how to implement range checking:\n\nThis function combines numeric validation with range checking to ensure the input is both a valid integer and within the specified range.\n\nValidating string input often involves checking for specific patterns or constraints. Here’s an example that validates an email address using a simple regex:\n\nThis function uses a regular expression to validate the email format. Note that this is a simplified version and may not catch all edge cases in real-world email validation.\n\nWhen working with custom types, you can overload the input operator to include validation:\n\nBy overloading the input operator, we can include custom validation logic for our Date type.\n\nWhen your program accepts command-line arguments, it’s important to validate them. Here’s an example:\n\nThis program validates that it receives exactly two numeric arguments and then performs a simple addition.\n\nWhen reading from files, it’s crucial to validate the input to ensure it meets your expectations. Here’s an example that reads and validates a configuration file:\n\nThis function reads a simple key-value configuration file, validating each line and throwing exceptions for invalid input.\n\nLet’s look at a more complex example: a program that manages a simple inventory system with input validation at multiple levels.\n\n#include <iostream>\n\n#include <string>\n\n#include <vector>\n\n#include <limits>\n\n#include <algorithm>\n\n\n\nclass Product {\n\nprivate:\n\n std::string name;\n\n double price;\n\n int quantity;\n\n\n\npublic:\n\n Product(const std::string& name, double price, int quantity)\n\n : name(name), price(price), quantity(quantity) {}\n\n\n\n friend std::ostream& operator<<(std::ostream& os, const Product& p) {\n\n os << p.name << \" - $\" << p.price << \" (\" << p.quantity << \" in stock)\";\n\n return os;\n\n }\n\n\n\n const std::string& getName() const { return name; }\n\n};\n\n\n\nclass Inventory {\n\nprivate:\n\n std::vector<Product> products;\n\n\n\npublic:\n\n void addProduct() {\n\n std::string name;\n\n double price;\n\n int quantity;\n\n\n\n std::cout << \"Enter product name: \";\n\n std::getline(std::cin, name);\n\n\n\n while (true) {\n\n std::cout << \"Enter price: $\";\n\n if (std::cin >> price && price > 0) {\n\n break;\n\n } else {\n\n std::cout << \"Invalid price. Please enter a positive number.\" << std::endl;\n\n std::cin.clear();\n\n std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n\n');\n\n }\n\n }\n\n\n\n while (true) {\n\n std::cout << \"Enter quantity: \";\n\n if (std::cin >> quantity && quantity >= 0) {\n\n break;\n\n } else {\n\n std::cout << \"Invalid quantity. Please enter a non-negative integer.\" << std::endl;\n\n std::cin.clear();\n\n std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n\n');\n\n }\n\n }\n\n\n\n products.emplace_back(name, price, quantity);\n\n std::cout << \"Product added successfully.\" << std::endl;\n\n\n\n std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n\n');\n\n }\n\n\n\n void displayProducts() const {\n\n if (products.empty()) {\n\n std::cout << \"No products in inventory.\" << std::endl;\n\n } else {\n\n for (const auto& product : products) {\n\n std::cout << product << std::endl;\n\n }\n\n }\n\n }\n\n\n\n void searchProduct() const {\n\n std::string search_term;\n\n std::cout << \"Enter product name to search: \";\n\n std::getline(std::cin, search_term);\n\n\n\n auto it = std::find_if(products.begin(), products.end(),\n\n [&search_term](const Product& p) {\n\n return p.getName().find(search_term) != std::string::npos;\n\n });\n\n\n\n if (it != products.end()) {\n\n std::cout << \"Product found: \" << *it << std::endl;\n\n } else {\n\n std::cout << \"Product not found.\" << std::endl;\n\n }\n\n }\n\n};\n\n\n\nint main() {\n\n Inventory inventory;\n\n char choice;\n\n\n\n do {\n\n std::cout << \"\n\n1. Add Product\n\n2. Display Products\n\n3. Search Product\n\n4. Quit\n\n\";\n\n std::cout << \"Enter your choice: \";\n\n std::cin >> choice;\n\n std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n\n');\n\n\n\n switch (choice) {\n\n case '1':\n\n inventory.addProduct();\n\n break;\n\n case '2':\n\n inventory.displayProducts();\n\n break;\n\n case '3':\n\n inventory.searchProduct();\n\n break;\n\n case '4':\n\n std::cout << \"Goodbye!\" << std::endl;\n\n break;\n\n default:\n\n std::cout << \"Invalid choice. Please try again.\" << std::endl;\n\n }\n\n } while (choice != '4');\n\n\n\n return 0;\n\n}\n\nThis program demonstrates input validation in a practical context:\n\n- It validates numeric input for prices and quantities.\n\n- It handles string input for product names and search terms.\n\n- It validates menu choices to ensure they’re within the expected range.\n\nInput validation is a critical aspect of writing robust C++ programs. By implementing thorough validation, you can prevent errors, improve user experience, and enhance the security of your applications. Remember these key points:\n\n- Always validate numeric input to ensure it’s of the correct type and within expected ranges.\n\n- Use regular expressions or custom logic to validate string input when appropriate.\n\n- Consider overloading input operators for custom types to include validation logic.\n\n- Validate command-line arguments and file input to ensure your program receives the expected data.\n\n- In real-world applications, implement validation at multiple levels to create a robust user interface.\n\nBy applying these techniques, you’ll create more reliable and user-friendly C++ programs that can handle a wide range of inputs gracefully."
    },
    {
        "link": "https://labex.io/tutorials/cpp-how-to-handle-cin-input-validation-427285",
        "document": "Input validation is a critical process in C++ programming that ensures user-provided data meets specific criteria before processing. It helps prevent unexpected program behavior, security vulnerabilities, and potential system crashes.\n\nNote: This tutorial is brought to you by LabEx, helping developers master input validation techniques."
    },
    {
        "link": "https://mycompiler.io/view/98sPxUf",
        "document": ""
    },
    {
        "link": "https://programiz.com/cpp-programming/switch-case",
        "document": "The statement allows us to execute a block of code among many alternatives.\n\nYou can do the same thing with the if...else statement. However, the syntax of the switch statement is much easier to read and write.\n\nHow does the switch statement work?\n\nThe is evaluated once and compared with the values of each label.\n• If there is a match, the corresponding code after the matching label is executed. For example, if the value of the variable is equal to , the code after is executed until the break statement is encountered.\n• If there is no match, the code after is executed.\n\nNote: We can do the same thing with the if...else..if ladder. However, the syntax of the switch statement is cleaner and much easier to read and write.\n\nExample: Create a Calculator using the switch Statement\n\nIn the above program, we are using the statement to perform addition, subtraction, multiplication, and division.\n• We first prompt the user to enter the desired operator. This input is then stored in the variable named .\n• We then prompt the user to enter two numbers, which are stored in the float variables and .\n• The statement is then used to check the operator entered by the user:\n• If the user enters , addition is performed on the numbers.\n• If the user enters , subtraction is performed on the numbers.\n• If the user enters , multiplication is performed on the numbers.\n• If the user enters , division is performed on the numbers.\n• If the user enters any other character, the default code is printed.\n\nNotice that the break statement is used inside each block. This terminates the statement.\n\nIf the statement is not used, all cases after the correct are executed.\n\nYou can visit the article on C++ Program to Make a Simple Calculator to learn more."
    },
    {
        "link": "https://stackoverflow.com/questions/45582637/c-maths-in-switch-statements",
        "document": "First of all, is the best code construct for this kind of code.\n\nThe problem is that your concept of a universal output\n\ncannot become anything near to the calculation you want to do:\n• None I hope the first problem is clear when you see these lines close to each other. They simply do different things:\n• The first one prints , then and finally . No magic happens, is just a to be printed.\n• The second one does the addition (arithmetic operators have a higher priority than the bitwise shifting operator ) and then prints the result of the addition.\n• None The second, more important problem is that (set in runtime) cannot easily become an arithmetic operator in the C++ code since it’s a compiled language. The compiler takes the expression and translates it to the machine instruction for integer addition. Your compiled program has no idea that the instruction for integer addition is related to the number 43 (the ASCII code of ) until you tell it explicitly (using , preferably).\n\nSo how to make it work? As commenters suggested, you have to keep the calculation in the block and bring only the print part out of it."
    },
    {
        "link": "https://programiz.com/cpp-programming/examples/calculator-switch-case",
        "document": "This program takes an arithmetic operator (+, -, *, /) and two operands from a user and performs the operation on those two operands depending upon the operator entered by the user.\n\nThis program takes an operator and two operands from the user.\n\nThe operator is stored in variable and two operands are stored in and respectively.\n\nThen, statement is used for checking the operator entered by user.\n\nIf user enters then, statements for is executed and program is terminated.\n\nIf user enters then, statements for is executed and program is terminated.\n\nThis program works similarly for the and operators. But, if the operator doesn't matches any of the four character [ +, -, * and / ], the statement is executed which displays error message.\n• C++ Program to Add Two Numbers\n• C++ Program to Multiply two Numbers"
    },
    {
        "link": "https://geeksforgeeks.org/switch-statement-in-cpp",
        "document": "In C++, the switch statement is a flow control statement that is used to execute the different blocks of statements based on the value of the given expression. It is an alternative to the long if-else-if ladder which provides an easy way to execute different parts of code based on the value of the expression.\n\nLet’s take a look at an example:\n\nExplanation: In the above program, the switch statement evaluates the value of x and executes the matching case. If x is ‘A’, it prints “A”; if ‘B’, it prints “B”. The default case handles other values.\n\nSyntax of switch Statement in C++\n• default case is executed if none of the cases are matched.\n• break keyword in each case is used to break out of the switch statement after the matching case is found. Otherwise, all the statements after the matching case will be executed.\n\nRules of the switch Statement in C++\n\nThere are some rules that we need to follow when using switch statements in C++. They are as follows:\n• None The case value must be either int or char type.\n• None There can be any number of cases.\n• None Each statement of the case can have a break statement. It is optional.\n• None The default Statement is also optional.\n\nFlowchart of Switch Statement in C++\n\nWorking of switch Statement in C++\n\nThe working of the switch statement in C is as follows:\n• Step 2: The evaluated value is then matched against the present case values.\n• Step 3A: If the matching case value is found, that case block is executed.\n• Step 3B: If the matching code is not found, then the default case block is executed if present.\n• Step 4A: If the break keyword is present in the block, then program control comes out of the switch statement.\n• Step 4B: If the break keyword is not present, then all the cases after the matching case are executed.\n• Step 5: Statements after the switch statement is executed.\n\nThe below program demonstrates the uses of switch statement in C++ programs:\n\nAs we can see, if break is not used, every case after the matched case is executed.\n\nPrint the Day Name Using Day Number\n\nIf the expression provided in the switch statement does not result in a constant value, it would not be valid. Some valid expressions for switch case will be,\n\n2. Expression must evaluate only int or char type values.\n\nThe switch statement can only evaluate the integer or character value. So, the switch expression should return the values of type int or char only.\n\nThe break keyword is used in the switch case to break out of the switch when encountered. It is used at the end of every case block so that when the matching case is executed, the program control comes out of the loop.\n\nThe break statement is optional. If omitted, all the cases after the matching case will also be executed.\n\nThe default keyword is used to define a default case which will be executed when no case value is matched. It is also an optional statement, and the switch case statement runs without problem if it is omitted.\n\nIn the C switch statement, duplicate case values are not allowed. All the case values must be unique.\n\nIn C++, we can nest one switch inside another switch statement without any problem. Though it is avoided most of the time as it makes the program more complex and unreadable.\n\n7. Position of Default Case Does Not Matters\n\nRegardless of its placement, the default case only gets executed if none of the other case conditions are met. So, putting it at the beginning, middle, or end doesn’t change the core logic (unless you’re using a less common technique called fall-through).\n\n8. Differences between switch and if else if ladder in C?\n\nFollowing are the main differences between switch and if else if ladder in C++:"
    }
]