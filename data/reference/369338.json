[
    {
        "link": "https://stackoverflow.com/questions/22156413/how-to-select-rows-with-chinese-japanese-characters",
        "document": "I ended up writing a function to parse each character of a string and check if the UNICODE() value is within the range of CJK characters. This doesn't definitively make it only Chinese, but does get Hanzi/Kanji characters. I composited a few ranges that are consecutive.\n\nSome of these integer values exceed the range which SQL can interpret with the UNICODE and NCHAR functions. I welcome constructive feedback to this SQL function."
    },
    {
        "link": "https://stackoverflow.com/questions/67099794/trying-to-insert-a-select-statement-with-chinese-column-in-query-field-in-a-data",
        "document": "If it's just a straight SQL INSERT that you're running, then I suspect the statement will need to be something like this:\n\nThe \"N\" prefix on the string explicitly tells SQL to treat the string as unicode"
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/702462/query-chinese-characters-in-sql-server-from-access",
        "document": "A family of Microsoft relational database management and analysis systems for e-commerce, line-of-business, and data warehousing solutions."
    },
    {
        "link": "https://sqlservercentral.com/forums/topic/select-statement-using-chinese-characters-in-the-where-clause-returns-null",
        "document": "I am storing English and Chinese characters in a database. I have saved all Chinese character columns as nvarchar datatype or ntext. My application successfully reads and writes the Chinese characters to the database. My problem arises when I try to perform a select statement using Chinese characters in the where clause. The simplest query as below returns no results even though the characters exist in the specified column.\n\nI have tried changing the collation of the column containing Chinese characters to 'Chinese_PRC', but this has no effect on the result.\n\nCan someone please help."
    },
    {
        "link": "https://learn.microsoft.com/en-in/answers/questions/702462/query-chinese-characters-in-sql-server-from-access",
        "document": "A family of Microsoft relational database management and analysis systems for e-commerce, line-of-business, and data warehousing solutions."
    },
    {
        "link": "https://datacamp.com/tutorial/select-multiple-columns-in-sql",
        "document": "Accompanied at every step with hands-on practice queries, this course teaches you everything you need to know to analyze data using your own SQL code today!"
    },
    {
        "link": "https://reddit.com/r/SQL/comments/o9q3w7/sql_best_practices_for_searching_for_a_given",
        "document": "So let's say you have table that stores columns like:\n\nSo now let's say I want to return a search for all rows where \"John\" is either someone's name, or one of their nicknames.\n\nOf course a very bruteforce way to do it is: select * from names where (name like '%john%') or (nickname1 like '%john%)' ...\n\nMy gut is telling me that the following is better though:\n\nselect * from names where concat(name,nickname1,nickname2,nickname3) like '%john%'\n\nBasically, instead of several OR clauses that inspect individual columns, all those columns are concatenated together before the string is searched for. Stackoverflow comments seem to agree with my intuition, but none really say why.\n\nIs there any easy to digest explanation for why either method might either be better, or more foolproof?"
    },
    {
        "link": "https://stackoverflow.com/questions/473218/what-are-some-best-practices-for-optimizing-multiple-column-like-sql-queries",
        "document": "You can definitely clean up a lot of the redundancy in your code as SQLMenace pointed out as a start.\n\nAnother thing is, ORDER BY shouldn't be used with an INSERT..SELECT. ORDER BY is meaningless in this context. People occasionally use it to force an IDENTITY column to behave a certain way, but that's a bad habit IMO.\n\nI don't know if this will help in your situation, but one thing that I came across recently was that in stored procedures SQL Server (I'm using 2005, but probably true for 2000 as well) will not short-circuit an OR condition in many cases. For example, when you use:\n\nit will still evaluate the second half even if you pass in a NULL value for @my_parameter. This happened even when I set the stored procedure to recompile (and the SELECT). The trick was to force a short-circuit through the use of a CASE statement. Using that trick (and removing some redundancy) your statement would look like this:\n\nIt makes the query longer, and possibly a little more complex, but it may be worth it for better performance. This is particularly true if your criteria includes a subquery that could otherwise be short-circuited.\n\nFinally... be consistent with your parameters. For @FirstName you check for a NULL value to determine if it's used or not, but for the others you are checking for empty strings. Basic coding 101 here that you need to be careful about."
    },
    {
        "link": "https://geeksforgeeks.org/selecting-multiple-columns-based-on-condition-in-sql",
        "document": "SQL (Structured Query Language) is used to manage and query databases. One common requirement when querying data is selecting multiple columns based on specific conditions. Understanding how to use SQL for this purpose can enhance your ability to retrieve relevant data efficiently.\n\nIn this article, we will explore how to select multiple columns based on conditions in SQL, from basic to advanced techniques, and provide detailed examples to help you master this crucial skill.\n\nThe SQL SELECT statement is used to retrieve data from a database. When you’re working with databases, you often want to extract multiple columns from a table based on some condition. This condition helps filter the data to match your specific requirements.\n• column1, column2, …: These are the names of the columns you want to retrieve.\n• table_name: This is the name of the table from which you are selecting data.\n• condition: The condition that specifies the rows to be selected. The WHERE clause is used to filter records based on the given condition.\n\nExample of Selecting Multiple Columns Based On Condition in SQL\n\nFirst, we create our database to execute the selected queries\n\n\n\nNow, we are going to discuss different cases in SQL to fetch the desired output as per the query mentioned.\n\nExample 1: Selecting Multiple Columns in SQL Without Conditions\n\nSelecting multiple columns in SQL, with or without any conditions, is as simple as selecting a single column. It works in the same way, but instead of one column, you list all the columns you wish to retrieve.\n\nFor example, let’s say we want to fetch both the first name and last name from the employee table. To do this, we simply list the column names in the SELECT clause, separated by commas, followed by the table name.\n\nExample 2: Selecting Multiple Columns in SQL With Conditions\n\nWhen we need to select multiple columns along with a condition, we use the WHERE clause to specify the condition. While the WHERE clause is the most common way to apply conditions, it’s not the only option. There are other ways to apply conditions depending on the query, but most conditions are effectively handled using the WHERE clause.\n\nNow, let’s dive into more advanced techniques for selecting multiple columns in SQL based on conditions.\n\nUsing AND & OR in Conditions\n\nYou can combine multiple conditions using the AND and OR logical operators. This allows you to filter data based on multiple criteria.\n\nThis query will return the first_name, last_name, and salary of employees who have a salary greater than or equal to 50,000 and are in the HR department.\n\nThis query will return the first_name, last_name, and salary of employees who are in either the Sales or Marketing department.\n\nUsing IN to Match Multiple Values\n\nThe IN operator is very useful when you need to match a column’s value against a list of values.\n\nThis query will return the first_name, last_name, and salary of employees who belong to either the Sales, Marketing, or HR departments.\n\nUsing BETWEEN for Range-Based Conditions\n\nThe BETWEEN operator allows you to select rows where a column’s value falls within a specified range.\n\nThis query retrieves the first_name, last_name, and salary of employees whose salary is between 40,000 and 60,000.\n\nSelecting multiple columns based on conditions is an essential skill when working with databases. Whether you’re retrieving data without filters, using basic conditions, or applying advanced techniques like AND, OR, IN, and BETWEEN, understanding these SQL techniques will greatly enhance your ability to manage and query data efficiently."
    },
    {
        "link": "https://stackoverflow.com/questions/66817302/best-way-to-join-by-multiple-columns-and-avoid-or-in-sql",
        "document": "I have two tables. Table 1 is the main table and table 2 is the table that I initially thought to join Table 1 through a left join, table 2 is much larger than table 1. What would be the best performing way to join Table 1 and Table 2 being the union condition that Column b is equal to column b or that column c is equal to column c and column d is equal to column d, that is, any of these conditions is met but no empty values are met. This without using OR in the left join due to the poor performance it would have and the execution time. I appreciate any help.\n\nNote: table 1 and table 2 is the result of 40 lines query. Database do not support recursive query. The database is sap hana."
    }
]