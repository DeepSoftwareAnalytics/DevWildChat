[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.range.rowheight",
        "document": "Returns or sets the height of the first row in the range specified, measured in points. Read/write Double.\n\nThe RowHeight property sets the height for all rows in a range of cells.\n\nUse the AutoFit method to set row heights based on the contents of cells.\n\nIf a merged cell is in the range, RowHeight returns Null for varied row heights. Use the Height property to return the total height of a range of cells.\n\nWhen a range contains rows of different heights, RowHeight might return the height of the first row or might return Null.\n\nThis example doubles the height of row one on Sheet1.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://stackoverflow.com/questions/33743820/vba-excel-adjusting-row-height",
        "document": "I am creating a report in Excel and I would like VBA to format the row height based upon the value in column K. For example, if cell K17 = 11.25, I want row 17 to be 11.25. Cell k18 = 21.75 so row 18 =21.75.\n\nI need vba to change every row from 17-400.\n\nThis should be relatively simple but I can't seem to come up with the correct coding."
    },
    {
        "link": "https://stackoverflow.com/questions/4991294/programmatically-alter-an-excel-sheets-row-height",
        "document": "How can I alter the row heights of all my non empty rows in my EXCEL sheet? Thanks in advance, w."
    },
    {
        "link": "https://mrexcel.com/board/threads/automatically-auto-fit-row-height-of-a-range-of-cells-when-any-cell-is-updated-dynamic-content.1166447",
        "document": "I have some VBA code which I have in the worksheet code area and I think I am close to getting it to work but not sure what I am doing wrong.The worksheet in question is never directly edited, but a range of cells D5:D30 pull their data from cells within other sheets (using ='sheet'!H1etc). By the nature of the content these cells are going to fill up quickly so I would like each row to auto-fit height based on the content on column D. Several people will be opening this document and won't know how to do this manually and as I am worried they may miss details that go beyond the size of the cell, I'd like this process to happen automatically whenever any of the content of column D is updated.The code I have isAny one able to point out what I might be doing wrong? Do I perhaps need to attached the VBA on to the worksheet I will be editing directly?Thanks"
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.range.autofit",
        "document": "Changes the width of the columns in the range or the height of the rows in the range to achieve the best fit.\n\nThe Range object must be a row or a range of rows, or a column or a range of columns; otherwise, this method generates an error.\n\nOne unit of column width is equal to the width of one character in the Normal style.\n\nThis example changes the width of columns A through I on Sheet1 to achieve the best fit.\n\nThis example changes the width of columns A through E on Sheet1 to achieve the best fit, based only on the contents of cells A1:E1.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://reddit.com/r/excel/comments/g601bc/what_best_practices_etiquette_and_standards_do",
        "document": "I’ve been writing a number of macros lately and it got me thinking about what the do’s and do nots of VBA scripting are. So questions for discussion: what do standards do you abide by? What irks you from other people’s codes? What makes code easier to follow and understand for you?"
    },
    {
        "link": "https://masterofficevba.com/vba-coding-constructs/best-practices-for-excel-vba-code",
        "document": "There are over a billion Microsoft Office users, including around 750 million Excel users. So it is not surprising that CEO, Satya Nadella, sees Excel as Microsoft’s prime consumer product. Excel VBA (Visual Basic for Applications) significantly boosts Excel’s capabilities. However, when misused, VBA can introduce a lot of problems in your Excel applications.\n\nIn this post, I summarise guidelines for writing high-quality Excel VBA code. The article derives from my personal experience and a host of credible sources.\n\nThe Software Quality Triangle (SQT) is often used to describe software quality. The backbone of high-quality software is a high-quality underlying code. So, the same attributes stated in the SQT also apply to code quality.\n\nNot all these attributes derive from Excel VBA code though. Excel VBA is a hosted language (Excel being the host), so some of these attributes derive from Excel itself. For instance:\n• Usability (ease of use) arises from both the application and Excel’s user interface (UI) and user experience (UX) design;\n• Portability (multi-platform use) depends on operating systems supporting Excel or VBA;\n• Testability (ease of testing) stems from software architecture rather than construction (coding).\n\nSo, we can say that a high-quality Excel VBA code is one that:\n• Does what was agreed or intended (no more, no less!) – correctness;\n• Does more with less (time/memory) – efficiency;\n• Doesn’t break things in the applications it interacts with – integrity;\n• Is usable in different contexts or for different purposes – reusability;\n\nThere are obvious benefits to writing high-quality Excel VBA code, here are a few:\n• Adding new features is easier, quicker, and cheaper;\n\nCoding best practices are consensus guidelines known to improve Excel VBA application quality. But, they are not holy-writ, and individual developers can pick those to adopt.\n\nThis article summarises these guidelines. The format is willfully concise, but you can access detailed posts on some of these guidelines by clicking on the headings.\n\nThe road to code correctness begins with a review of the application requirements. These requirements capture stakeholders’ agreement on what the application should do.\n\nRequirements are the basis for ranking correctness. The following guidelines help to improve your Excel VBA code’s correctness:\n• The application should not do more than required, neither should it do less;\n• Test the application thoroughly, as per the requirements;\n• If possible, get your code reviewed by your peers;\n• Adopt the best practices for Excel VBA coding.\n\nAdd Option Explicit atop modules, so undeclared variables filter out at compilation time. Otherwise, they execute as variant variables which may lead to unpredictable results.\n\nAssign Initial Values to Variables upon their Declaration\n\nTo prevent unexpected results, assign default values to variables immediately after declaring them. It is essential that the values you assign fit the variables’ purpose.\n\nUse Variant Variables Rarely or Not At All\n\nAvoid using Variant variables. They don’t validate assigned data types and are internally converted to other data types by VBA. By using specific variable types, you are more in control.\n\nWhen coding procedures, always add code that validates the arguments’ data type. This prevents incorrect argument data type errors.\n\nUse Enumerations to reduce variable assignment errors, whenever appropriate.\n\nNote the contrasts between the ByVal and ByRef keywords. This is critical when coding procedures (subroutines and functions).\n\nAlways compile VBA projects before running. This catches syntax and compilation errors before runtime.\n\nAlways add error handlers to procedures. This prevents users from getting confusing runtime error messages.\n\nAlways qualify object references and default properties fully. Otherwise, you rely on VBA internal rules which may lead to unexpected results.\n\nUse Exit For and Exit Do carefully. Specifically, always ensure the execution of all relevant lines of code before mid-loop exits.\n\nBreak Execution on All Errors while Coding\n\nSet Excel’s error-trapping setting to Break on All Errors. This allows you to catch both handled and unhandled errors while coding.\n\nAlways bind object variables at runtime (i.e. late binding). This prevents your code from crashing in the event that an early-bound object’s COM (Component Object Model) reference is not found on a user’s computer. Note that there are efficiency trade-offs to consider.\n\nAdopt a consistent and descriptive naming convention. This makes your code easier to understand in a few months or years (or if someone else reads it right now).\n\nAdd header blocks to major, lengthy, or complex code blocks. Header blocks summarise the essential information about the code block below it. This makes your code easier to understand.\n\nWrite Comments Properly and Use them Judiciously\n\nUse both in-line (i.e., full line) and end-of-line comments, but appropriately. Comment on the ‘why’ and not the ‘how’ of a code line or block.\n\nAdopt a consistent indentation and spacing style. This will boost your Excel VBA code’s readability to humans.\n\nAvoid mid-loop exits in heavily nested loops. As you can imagine, logic comprehension problems may arise for code readers.\n\nAdopt a Code-Writing format that is Easy on the Eye\n\nAvoid lengthy code lines or blocks. People find thin-column content easy to read, think of public media like magazines and newspapers. Adopt this format in your code.\n\nAvoid the GoTo statement. Branching between code lines may be handy at times (e.g. error handling), but it makes reading tougher.\n\nFollow the Don’t Repeat Yourself (DRY) principle. Editing or altering your code is easier when you only have to do it in one place.\n\nWrite de-coupled procedures. When procedures tackle a single task, editing or modifying them doesn’t impact code outside them. So, the code is more maintainable and flexible.\n\nAvoid using magic numbers, constants, or strings for variables with fixed values. The first two hinder readability, while strings eat up memory and run slow. Instead, use Enumerations.\n\nSpeed up garbage collection and prevent memory leaks by setting all unused objects’ references to Nothing.\n\nAvoid the Select and Activate object methods. Instead, explicitly reference the object property or method of interest.\n\nAvoid Repetitive Exchange of Data between Code and Excel\n\nExchange chunks of data between VBA code & Excel in one-shot. This is much faster than cell-by-cell transfer.\n\nUse the With statement to store qualified object references for use in with-blocks. This avoids object reference requalification.\n\nUse the Set statement to pass qualified object references to variables. This avoids reference requalification.\n\nAvoid loops when searching in ranges and arrays. Excel’s Range methods and worksheet functions help in this regard.\n\nAvoid loops when copying data between worksheet ranges. Instead, assign the destination range to the source range directly.\n\nAvoid Loops when Sorting Data in Ranges or Arrays\n\nAvoid loops when sorting data in ranges or arrays. Instead, use the Range object’s Sort method.\n\nIf You Must Use Loops, Use Smart Ones\n\nEnsure loops are smart. Refer to Guidelines for Efficient Excel VBA Code for more details.\n\nDeclare whole numeric data type variables as Long rather than Integer. This speeds up execution as VBA does not first convert them into Long type before use.\n\nIf a variable holds only whole numbers between 0 and 255, then declare it as Byte. This takes up less memory and boosts run speed.\n\nEliminate or Minimise the Use of Variants\n\nAvoid using Variants as they are bulky (memory-wise) and run slow.\n\nBind application-level objects early (at compile time). Compared to binding objects at runtime (i.e. late binding), this improves execution speed. Note that there are reliability trade-offs to consider relative to the magnitude of speed increase.\n\nUse ‘Index’ instead of ‘Name’ to Reference Collection Items\n\nUse ‘Index’ instead of ‘Name’ to reference Collection items for improved execution speed.\n\nInstead of Evaluating Strings use Enumerations\n\nUse Enumerations instead of strings. Strings are bulky (memory-wise) and run slow.\n\nUse vbNullString instead of “”\n\nUse vbNullString instead of an empty string, “”. vbNullString is a VB constant set to zero bytes and representing a zero-length string. It executes slightly faster than an empty string.\n\nBesides Microsoft Office applications, VBA also runs on other applications. These include ArcGIS, AutoCAD, CorelDraw, LibreOffice, Reflection, SolidWorks, MicroStation, and WordPerfect.\n\nYour Excel VBA code shouldn’t be a bull in a china shop. It shouldn’t break things in the applications it interacts with, including Excel itself.\n\nYour Excel VBA code should leave applications in the same state in which it found them. How you do this depends on the particular application.\n\nYou can interact with VBA-enabled applications from your Excel VBA code. You can also use .NET libraries written in any of the .NET programming languages (C# or VB). These are also known as Dynamic Linked Libraries (DLL).\n\nThis is an excellent interoperability feature of VBA that you should take advantage of. For example, why write code to create drawings from Excel shapes when you can interop with AutoCAD to do so.\n\nCheck out posts by Pragmateek, John Franco, and GeeksEngine to get started on VBA and .NET Library interoperability."
    },
    {
        "link": "https://techcommunity.microsoft.com/t5/excel/best-practice-for-vba-macros-in-excel/m-p/207409",
        "document": "It really depends on what you're looking at. If you are pretty familiar with VBA you can just look at the code and it will \"speak to you\". It's always good to comment code. I can't tell you how much time it's saved me when reviewing past projects. It's a pain to do, but you'll be thankful later. If you supply some of the code I'll be happy to review a bit of it for you. You can pretty much tell if someone really knew what they were doing at a glance."
    },
    {
        "link": "https://corporatefinanceinstitute.com/resources/excel/tips-for-writing-vba-in-excel",
        "document": "Listed below are nine tips for writing VBA in Excel. VBA for Excel introduces countless possibilities for custom calculations and automation. Often, code can run into the hundreds or even thousands of lines. As the complexity and size of code increases, it becomes increasingly important to write fast and efficient code that is easily understood by colleagues. Doing so will make you an invaluable asset to your team in maintaining and developing Excel VBA models.\n\nHave you ever opened a colleague’s VBA model and spent the next hour trying to work out exactly what their code was doing? With that in mind, imagine how professional you’d look if your code was crystal clear to anyone who read it, even if you weren’t there to explain it.\n\nWriting comments is the most important element of writing VBA code, and it will ensure that you can easily understand your own code a few months down the line. You’ll also impress colleagues and quickly gain a reputation for preparing outstanding documentation, thus reducing training time for future users.\n\n\n\n 2. Name variables and functions using clear and relevant names\n\nWriting VBA variable and function names that can be clearly interpreted will save users huge amounts of time and allow them to clearly follow the structure and flow of your code. Variable or function names such as “test1” or “first_integer” will create countless headaches for those who try to read your VBA code.\n\nThe routine below pastes the US inflation rate into the active cell if it’s available. Notice how much clearer the second example is than the first.\n\n\n\n 3. Plan your work to help create simple, efficient VBA code\n\nIt’s not uncommon to get halfway through writing a code project before realizing that you should’ve structured it differently or created a separate function for specific elements of your code. Planning the structure of your VBA, what you want it to achieve, what loops you’ll need etc. will save you time in the long run. It also gives you time to think about potential errors that may arise along the way and how you plan to deal with them.\n\n\n\n 4. Use macros to quickly work out the syntax\n\nFor most people, macros offer the first glimpse into the world of VBA and coding. Even for experienced coders, macros are a great way to quickly understand the VBA syntax needed to execute a particular function or method.\n\nSuppose you didn’t know how to save a file using VBA. By pressing Record Macro, you can carry out the steps manually, and the VBA editor will record those steps in code. Magic! Now, you can reuse and adapt the code in your own routines.\n\n5. Learn to write your own code; don’t rely on macros!\n\nAs mentioned above, macros are incredibly helpful in learning how certain pieces of code are written. It’s important to recognize, however, that macros are inherently unreliable and not future-proof because they are hard-coded and cannot adapt to future changes in your worksheet structure.\n\nSuppose you’ve recorded a macro that performs various formatting changes to your worksheet. Partway through the code, it selects column I and then deletes it. Suppose then that next month, the file includes an additional column; now your macro will delete the wrong column. Learning how to code yourself will allow you to create loops and search for the correct column before correctly deleting it.\n\nUsing “Option Explicit” at the start of a VBA code module is a valuable way to avoid spelling errors in your code.\n\nIn the left example below, Option Explicit is not enabled. The code runs with no errors, but it always returns the answer of zero. Why? The reason is that the variable MonthIncme is spelled incorrectly, and therefore references nothing. Nothing divided by something is always zero.\n\nWhen the code in the second example is run, Option Explicit detects that we’ve undefined variables in our code and returns a Compile Error. It highlights the undeclared variable and informs us of the problem. You should always use Option Explicit at the top of each code module before any of your routines.\n\nIf you’re new to VBA and are wondering why your code is running very slowly, excessive use of the .Select method is a prime suspect. Object selection should be avoided unless absolutely necessary, especially when dealing with large amounts of data or loops. Selecting objects in VBA is incredibly slow and is usually not necessary. Recorded macros often include a lot of .Select methods, so it’s important to learn how to avoid them.\n\nIn the first example below, we are trying to find the running total of 1,000 cells in our worksheet. Each time we reference a new cell, we select it, and then take its value. However, the selection of the sheet or cell is not necessary at all. We can simply get the cell value. A timer was used to record the time taken to run each routine, with the second example being 50 times quicker!\n\nKeeping your most common VBA routines (subs) in one place is a handy way to reduce the time you spend coding or model building. Here’s an example from our “Top 10 VBA Routines” article, which takes the selected cells, unmerges them, and applies the same headings to each cell. You can even assign a keyboard shortcut to the macro to make it lightning fast to use.\n\nLook out for our blog on re-using code (coming soon), which will focus on add-ins and personal code modules.\n\nThe tip above probably applies to most projects at work, but it is particularly relevant to coding and, therefore, VBA for Excel. Testing your code ensures that mistakes and errors are detected and that exceptions that may arise at run-time can be captured with appropriate error catching (see our article on errors in VBA here).\n\nTesting should start with you as the code developer. You should test the code itself, and then test it within a non-live or non-impactful environment.\n\nOnce you’re satisfied with it, you should let a colleague test your Excel model, ideally without giving them any clues at all as to what buttons they should press or what inputs they should enter. Your model should speak for itself. The test will be a good indication of what will happen when your code goes live.\n\nThank you for reading our tips for writing VBA in Excel. CFI is the official provider of the global Business Intelligence & Data Analyst (BIDA)® certification program, designed to help anyone become a world-class financial analyst. To keep advancing your career, the additional CFI resources below will be useful:\n• Interview Tips – How to Interview Well"
    },
    {
        "link": "https://answers.microsoft.com/en-us/msoffice/forum/all/question-about-best-practices-for-vba-modules-1/77b4dc31-4dcd-449d-a4d8-baa694e7cffe",
        "document": ""
    }
]