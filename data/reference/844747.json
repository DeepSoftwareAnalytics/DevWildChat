[
    {
        "link": "https://discussions.unity.com/t/asynchronously-load-large-complex-game-objects-using-coroutines/857464",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/asynchronous-loading/739606",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/coroutines.html",
        "document": "A coroutine allows you to spread tasks across several frames. A coroutine is a method that can pause execution and return control to Unity but then continue where it left off on the following frame.\n\nIn most situations, when you call a method, it runs to completion and then returns control to the calling method, plus any optional return values. This means that any action that takes place within a method must happen within a single frame update.\n\nIn situations where you want to use a method call to contain a procedural animation or a sequence of events over time, you can use a coroutine.\n\nNote: It’s important to remember that coroutines aren’t threads. Synchronous operations that run within a coroutine still execute on the main thread. If you want to reduce the amount of CPU time spent on the main thread, it’s just as important to avoid blocking operations in coroutines as in any other script code. If you want to use multi-threaded code in Unity, your options are:\n• The .NET async and await and Unity’s custom support\n\nIt’s best to use coroutines if you need to deal with long asynchronous operations, such as waiting for HTTP transfers, asset loads, or file I/O to complete.\n\nAs an example, consider the task of gradually reducing an object’s alpha (opacity) value until it becomes invisible:\n\nIn this example, the Fade method doesn’t have the effect you might expect. To make the fading visible, you must reduce the alpha of the fade over a sequence of frames to display the intermediate values that Unity renders. However, this example method executes entirely within a single frame update. The intermediate values are never displayed, and the object disappears instantly.\n\nTo work around this situation, you could add code to the function that executes the fade on a frame-by-frame basis. However, it can be more convenient to use a coroutine for this kind of task.\n\nIn C#, you declare a coroutine like this:\n\nA coroutine is a method that you declare with an IEnumerator return type and with a yield return statement included somewhere in the body. The line is the point where execution pauses and resumes in the following frame. To set a coroutine running, you need to use the StartCoroutine function:\n\nThe loop counter in the function maintains its correct value over the lifetime of the coroutine, and any variable or parameter is preserved between statements.\n\nBy default, Unity resumes a coroutine on the frame after a statement. If you want to introduce a time delay, use WaitForSeconds:\n\nYou can use to spread an effect over a period of time, and you can use it as an alternative to including the tasks in the method. Unity calls the method several times per second, so if you don’t need a task to be repeated quite so often, you can put it in a coroutine to get a regular update but not every single frame.\n\nFor example, you might have an alarm in your application that warns the player if an enemy is nearby with the following code:\n\nIf there are a lot of enemies then calling this function every frame might introduce a significant overhead. However, you could use a coroutine to call it every tenth of a second:\n\nThis reduces the number of checks that Unity carries out without any noticeable effect on gameplay.\n\nTo stop a coroutine, use StopCoroutine and StopAllCoroutines. A coroutine also stops if you’ve set SetActive to to disable the GameObjectThe fundamental object in Unity scenes, which can represent characters, props, scenery, cameras, waypoints, and more. A GameObject’s functionality is defined by the Components attached to it. More info\n\nSee in Glossary the coroutine is attached to. Calling (where is a instance) immediately triggers OnDisable and Unity processes the coroutine, effectively stopping it. Finally, is invoked at the end of the frame.\n\nNote: If you’ve disabled a by setting enabled to , Unity doesn’t stop coroutines.\n\nCoroutines execute differently from other script code. Most script code in Unity appears within a performance trace in a single location, beneath a specific callback invocation. However, the CPU code of coroutines always appears in two places in a trace.\n\nAll the initial code in a coroutine, from the start of the coroutine method until the first statement, appears in the trace whenever Unity starts a coroutine. The initial code most often appears whenever the StartCoroutine method is called. Coroutines that Unity callbacks generate (such as callbacks that return an ) first appear within their respective Unity callback.\n\nThe rest of a coroutine’s code (from the first time it resumes until it finishes executing) appears within the line inside Unity’s main loop.\n\nThis happens because of the way that Unity executes coroutines. The C# compiler auto-generates an instance of a class that backs coroutines. Unity then uses this object to track the state of the coroutine across multiple invocations of a single method. Because local-scope variables within the coroutine must persist across calls, Unity hoists the local-scope variables into the generated class, which remain allocated on the heap during the coroutine. This object also tracks the internal state of the coroutine: it remembers at which point in the code the coroutine must resume after yielding.\n\nBecause of this, the memory pressure that happens when a coroutine starts is equal to a fixed overhead allocation plus the size of its local-scope variables.\n\nThe code that starts a coroutine constructs and invokes an object, and then Unity’s invokes it again whenever the coroutine’s condition is satisfied. Because coroutines usually start outside of other coroutines, this splits their execution overhead between the call and .\n\nYou can use the Unity ProfilerA window that helps you to optimize your game. It shows how much time is spent in the various areas of your game. For example, it can report the percentage of time spent rendering, animating, or in your game logic. More info\n\nSee in Glossary to inspect and understand where Unity executes coroutines in your application. To do this, profile your application with Deep Profiling enabled, which profiles every part of your script code and records all function calls. You can then use the CPU Usage Profiler module to investigate the coroutines in your application.\n\nIt’s best practice to condense a series of operations down to the fewest number of individual coroutines possible. Nested coroutines are useful for code clarity and maintenance, but they impose a higher memory overhead because the coroutine tracks objects.\n\nIf a coroutine runs every frame and doesn’t on long-running operations, it’s more performant to replace it with an or callback. This is useful if you have long-running or infinitely looping coroutines."
    },
    {
        "link": "https://reddit.com/r/Unity3D/comments/4d6qpy/savingloading_data_should_i_be_using_coroutines",
        "document": "Apologies in advanced, still newish to Unity/c# and it's really late... so kinda tired. Anyways for saving/loading data should I use coroutines? That way it would complete data-handling while something like a splash screen plays before allowing the player to play again without necessarily halting everything. Right now I just use a void method to do saving/loading and was thinking maybe I should reprogram them using coroutines instead of void."
    },
    {
        "link": "https://discussions.unity.com/t/yield-multiple-coroutines-asynchronously/822368",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/Manual/sprite/sprite-landing.html",
        "document": "Sprites are a type of 2D assetAny media or data that can be used in your game or project. An asset may come from a file created outside of Unity, such as a 3D Model, an audio file or an image. You can also create some asset types in Unity, such as an Animator Controller, an Audio Mixer or a Render Texture. More info\n\nSee in Glossary you can use in your Unity project. Use this section to learn how to set up your spritesA 2D graphic objects. If you are used to working in 3D, Sprites are essentially just standard textures but there are special techniques for combining and managing sprite textures for efficiency and convenience during development. More info\n\nSee in Glossary and manage them with different components.\n\nIf you’re used to working in 3D, sprites are similar to standard textures but there are special techniques to combine and manage sprite textures for efficiency during development.\n\nImportant: You must have the 2D Sprite package installed to have the following features. This package is part of the 2D feature set and is automatically installed if you select the 2D template when creating a new project. You can also manually install this package via Unity’s Package Manager."
    },
    {
        "link": "https://docs.unity3d.com/550/Documentation/Manual/Sprites.html",
        "document": "Sprites are 2D Graphic objects. If you are used to working in 3D, Sprites are essentially just standard textures but there are special techniques for combining and managing sprite textures for efficiency and convenience during development.\n\nSee Importing and Setting up Sprites below for information on setting up assets as Sprites in your Unity project.\n\nUse the Sprite Creator to create placeholder sprites in your project, so you can carry on with development without having to source or wait for graphics.\n\nThe Sprite Editor lets you extract sprite graphics from a larger image and edit a number of component images within a single texture in your image editor. You could use this, for example, to keep the arms, legs and body of a character as separate elements within one image.\n\nSprites are rendered with a Sprite Renderer component rather than the Mesh Renderer used with 3D objects. Use it to display images as Sprites for use in both 2D and 3D scenes.\n\nUse Sprite Packer to opimize the use and performance of video memory by your project.\n\nSprites are a type of Asset in Unity projects. You can see them, ready to use, via the Project View.\n\nThere are two ways to bring Sprites into your project:\n• In your computer’s Finder (Mac OS X) or File Explorer (Windows), place your image directly into your Unity project’s Assets folder. Unity detects this and displays it in your project’s Project View.\n• In Unity, go to Assets>Import New Asset… to bring up your computer’s Finder (Mac OS X) or File Explorer (Windows). From there, select the image you want, and Unity puts it in the Project View.\n\nSee Importing Assets for more details on this and important information about organising your Assets folder.\n\nIf your project mode is set to 2D, the image you import is automatically set as a Sprite.\n\nHowever, if your project mode is set to 3D, your image is set as a Texture, so you need to change the asset’s Texture Type:\n• None Click on the asset to see its Import Inspector.\n• Set the Texture Type to Sprite (2D and UI).\n\nSee 2D or 3D Projects for details on setting your project mode to 2D."
    },
    {
        "link": "https://discussions.unity.com/t/procedural-sprite-generation-and-placement/930640",
        "document": ""
    },
    {
        "link": "https://docs.unity.cn/560/Documentation/Manual/Sprites.html",
        "document": "Sprites are 2D Graphic objects. If you are used to working in 3D, Sprites are essentially just standard textures but there are special techniques for combining and managing sprite textures for efficiency and convenience during development.\n\nSee Importing and Setting up Sprites below for information on setting up assets as Sprites in your Unity project.\n\nUse the Sprite Creator to create placeholder sprites in your project, so you can carry on with development without having to source or wait for graphics.\n\nThe Sprite Editor lets you extract sprite graphics from a larger image and edit a number of component images within a single texture in your image editor. You could use this, for example, to keep the arms, legs and body of a character as separate elements within one image.\n\nSprites are rendered with a Sprite Renderer component rather than the Mesh Renderer used with 3D objects. Use it to display images as Sprites for use in both 2D and 3D scenes.\n\nUse Sprite Packer to opimize the use and performance of video memory by your project.\n\nSprites are a type of Asset in Unity projects. You can see them, ready to use, via the Project View.\n\nThere are two ways to bring Sprites into your project:\n• In your computer’s Finder (Mac OS X) or File Explorer (Windows), place your image directly into your Unity project’s Assets folder. Unity detects this and displays it in your project’s Project View.\n• In Unity, go to Assets>Import New Asset… to bring up your computer’s Finder (Mac OS X) or File Explorer (Windows). From there, select the image you want, and Unity puts it in the Project View.\n\nSee Importing Assets for more details on this and important information about organising your Assets folder.\n\nIf your project mode is set to 2D, the image you import is automatically set as a Sprite.\n\nHowever, if your project mode is set to 3D, your image is set as a Texture, so you need to change the asset’s Texture Type:\n• None Click on the asset to see its Import Inspector.\n• Set the Texture Type to Sprite (2D and UI).\n\nSee 2D or 3D Projects for details on setting your project mode to 2D.\n\nRenderers in Unity are sorted by several criteria, such as their Layer order or their distance from the Camera. Unity’s GraphicsSettings (menu: Edit > Project Settings > Graphics) provide a setting called Transparency Sort Mode, which allows you to control how Sprites are sorted depending on where they are in relation to the Camera. More specifically, it uses the Sprite’s position on an axis to determine which ones are transparent against others, and which are not.\n\nThere are four Transparency Sort Mode options available:\n• None Default - Sorts based on whether the Camera’s Projection mode is set to Perspective or Orthographic\n• None Perspective - Sorts based on perspective view. Perspective view sorts Sprites based on the distance from the Camera’s position to the Sprite’s center.\n• None Orthographic - Sorts based on orthographic view. Orthographic view sorts Sprites based on the distance along the view direction.\n• None Custom Axis - Sorts based on the given axis set in Transparency Sort Axis\n\nIf you have set the Transparency Sort Mode to Custom, you then need to set the Transparency Sort Axis:\n\nIf the Transparency Sort Mode is set to Custom Axis, renderers in the Scene view are sorted based on the distance of this axis from the camera. Use a value between –1 and 1 to define the axis. For example: X=0, Y=1, Z=0 sets the axis direction to up. X=1, Y=1, Z=0 sets the axis to a diagonal direction between X and Y.\n\nYou can also sort Sprites per camera through scripts, by modifying the following properties in Camera:\n\nAn example of when you might use this setting is to sort Sprites along the Y axis. This is quite common in 2D games, where Sprites that are higher up are sorted behind Sprites that are lower, to make them appear further away.\n\nTo have Unity manage this automatically, set the Transparency Sort Mode to Custom Axis, and set the Y value for the Transparency Sort Axis to a value higher than 0."
    },
    {
        "link": "https://docs.unity.cn/2021.1/Documentation/Manual/Sprites.html",
        "document": "Sprites are 2D Graphic objects. If you are used to working in 3D, Sprites are essentially just standard textures but there are special techniques for combining and managing sprite textures for efficiency and convenience during development.\n\nUnity provides a placeholder Sprite Creator, a built-in Sprite Editor, a Sprite RendererA component that lets you display images as Sprites for use in both 2D and 3D scenes. More info\n\nSee in Glossary and a Sprite PackerA facility that packs graphics from several sprite textures tightly together within a single texture known as an atlas. Unity provides a Sprite Packer utility to automate the process of generating atlases from the individual sprite textures. More info\n\nSee in Glossary\n\nSee Importing and Setting up Sprites below for information on setting up assets as Sprites in your Unity project.\n\nUse the Sprite Creator to create placeholder sprites in your project, so you can carry on with development without having to source or wait for graphics.\n\nThe Sprite Editor lets you extract sprite graphics from a larger image and edit a number of component images within a single texture in your image editor. You could use this, for example, to keep the arms, legs and body of a character as separate elements within one image.\n\nSprites are rendered with a Sprite Renderer component rather than the Mesh RendererA mesh component that takes the geometry from the Mesh Filter and renders it at the position defined by the object’s Transform component. More info\n\nSee in Glossary used with 3D objectsA 3D GameObject such as a cube, terrain or ragdoll. More info\n\nSee in Glossary. Use it to display images as Sprites for use in both 2D and 3D scenesA Scene contains the environments and menus of your game. Think of each unique Scene file as a unique level. In each Scene, you place your environments, obstacles, and decorations, essentially designing and building your game in pieces. More info\n\nSee in Glossary.\n\nUse Sprite Packer to optimize the use and performance of video memory by your project.\n\nSprites are a type of AssetAny media or data that can be used in your game or project. An asset may come from a file created outside of Unity, such as a 3D Model, an audio file or an image. You can also create some asset types in Unity, such as an Animator Controller, an Audio Mixer or a Render Texture. More info\n\nSee in Glossary in Unity projects. You can see them, ready to use, via the ProjectIn Unity, you use a project to design and develop a game. A project stores all of the files that are related to a game, such as the asset and Scene files. More info\n\nSee in Glossary view.\n\nThere are two ways to bring Sprites into your project:\n• In your computer’s Finder (Mac OS X) or File Explorer (Windows), place your image directly into your Unity Project’s Assets folder. Unity detects this and displays it in your project’s Project view.\n• In Unity, go to Assets > Import New Asset to bring up your computer’s Finder (Mac OS X) or File Explorer (Windows). From there, select the image you want, and Unity puts it in the Project view.\n\nSee Importing for more details on this and important information about organising your Assets folder.\n\nIf your project mode is set to 2D, the image you import is automatically set as a Sprite. For details on setting your project mode to 2D, see 2D or 3D Projects.\n\nHowever, if your project mode is set to 3D, your image is set as a TextureAn image used when rendering a GameObject, Sprite, or UI element. Textures are often applied to the surface of a mesh to give it visual detail. More info\n\nSee in Glossary, so you need to change the asset’s Texture Type:\n• Click on the asset to see its Import Inspector.\n• Set the Texture Type to Sprite (2D and UI):\n\nFor details on Sprite Texture Type settings, see Texture type: Sprite (2D and UI).\n\nRenderers in Unity are sorted by several criteria, such as their Layer order or their distance from the Camera. Unity’s GraphicsSettings (menu: Edit > Project SettingsA broad collection of settings which allow you to configure how Physics, Audio, Networking, Graphics, Input and many other areas of your project behave. More info\n\nSee in Glossary, then select the Graphics category) provide a setting called Transparency Sort Mode, which allows you to control how Sprites are sorted depending on where they are in relation to the Camera. More specifically, it uses the Sprite’s position on an axis to determine which ones are transparent against others, and which are not.\n\nAn example of when you might use this setting is to sort Sprites along the Y axis. This is quite common in 2D games, where Sprites that are higher up are sorted behind Sprites that are lower, to make them appear further away.\n\nThere are four Transparency Sort Mode options available:\n• None Default - Sorts based on whether the CameraA component which creates an image of a particular viewpoint in your scene. The output is either drawn to the screen or captured as a texture. More info\n\nSee in Glossary’s Projection mode is set to Perspective or Orthographic\n• None Perspective - Sorts based on perspective view. Perspective view sorts Sprites based on the distance from the Camera’s position to the Sprite’s center.\n• None Orthographic - Sorts based on orthographic view. Orthographic view sorts Sprites based on the distance along the view direction.\n• None Custom Axis - Sorts based on the given axis set in Transparency Sort Axis\n\nIf you have set the Transparency Sort Mode to Custom, you then need to set the Transparency Sort Axis:\n\nIf the Transparency Sort Mode is set to Custom Axis, renderers in the Scene viewAn interactive view into the world you are creating. You use the Scene View to select and position scenery, characters, cameras, lights, and all other types of Game Object. More info\n\nSee in Glossary are sorted based on the distance of this axis from the camera. Use a value between –1 and 1 to define the axis. For example: X=0, Y=1, Z=0 sets the axis direction to up. X=1, Y=1, Z=0 sets the axis to a diagonal direction between X and Y.\n\nFor example, if you want Sprites to behave like the ones in the image above (those higher up the y axis standing behind the Sprites that are lower on the axis), set the Transparency Sort Mode to Custom Axis, and set the Y value for the Transparency Sort Axis to a value higher than 0.\n\nYou can also sort Sprites per camera through scriptsA piece of code that allows you to create your own Components, trigger game events, modify Component properties over time and respond to user input in any way you like. More info\n\nSee in Glossary, by modifying the following properties in Camera:"
    },
    {
        "link": "https://dev.to/eliotjones/reading-a-pdf-in-c-on-net-core-43ef",
        "document": "The question anyone who has tried to extract text from a PDF using C# will have asked themselves at one point or another is: why is this so complicated?\n\nIt's a good question and the answer lies in trade-offs made when the PDF format was designed.\n\nTo those unfamiliar with it I'd describe a PDF file as a picture. At a very high level it's a set of images defining how the pages in the document should appear. This means whatever platform you view it on, it should look (more-or-less) identical, whether you're on Windows, Linux, Chrome, Android, etc. The fact it contains text and font information is almost, but not quite, incidental.\n\nThe presence of fonts in the file helps applications that display PDFs draw text in (almost) the same way across platforms. The text content included in a document mostly just defines where letters from a font should be drawn. There are even some documents containing fonts where the text information has no actual relationship to the displayed glyphs, you might have encountered them before; in these documents if you highlight and copy paste some text that appears 'normal' when you paste it to another application it's just nonsense.\n\nWith that in mind there's no such thing as 'perfect' (or a lot of the time even passable) text extraction from PDFs. They're not primarily designed to transmit the text in a useful way, it's pretty much a side effect of the requirement to render the document that it even contains text at all.\n\nFor this reason some people just run OCR against all PDF documents and rely on the OCR to extract text from what is, and I'm repeating myself here, basically an image.\n\nIf you don't want to run OCR and you don't want to fork out a considerable amount of money for commercially licensed PDF software, what are your options for getting text out of a PDF in C#?\n\nFor the following examples I'm targeting .NET Core 2.1 on Windows 10 using Visual Studio 2017. I'll be using the sample PDF found here but you can use any PDF file.\n\nFor the licensing discussion below - the traditional disclaimer that I am not a lawyer, I don't particularly understand software licenses. Consult someone who understands this stuff if licensing is a real issue for you.\n\nThe original. One of the more well established PDF libraries in C#. Most versions of iTextSharp (now iText as of version 7) are covered by the AGPL. This is quite an 'aggressive' license that cannot be used for commercial purposes unless you also release your entire source code as source available (controversial take, I don't really consider AGPL open source) under the AGPL, or buy a commercial license.\n\nThere's an unofficial fork of iTextSharp from back when it was LGPL licensed (this is still a copyleft license - note that this link is to LGPL v2.1 rather than v2) before the change to the AGPL license with some recent changes to port it to .NET Core.\n\n\n\nOnce you have the package installed you can refer to the examples on GitHub to accomplish most tasks. The following code opens a file from disk and write the text content to the console:\n\n\n\nThe iTextSharp API has always struck me as a bit tricky to understand and the licensing would be a deal-breaker for me, even under the LGPL rather than AGPL. However you get access to the power of one of the largest, feature complete, C# PDF libraries.\n\nDisclaimer: I'm the maintainer of this package.\n\nPdfPig is an Apache 2.0 licensed library started as an attempt to port the Java PDFBox project to C#. I built PdfPig with a particular focus on extracting text from PDFs. Other use-cases like creating PDFs are less well supported, or for PDF to image or HTML to PDF, not supported at all.\n\nFirst get the package from NuGet:\n\n\n\nThen to open and extract the text, like we did for the previous library:\n\n\n\nPdfPig provides multiple text extraction strategies. Porting the excellent PDFBox is an outstanding issue but PdfPig exposes a rich API based around letters to support any custom text extraction logic.\n\nEach page gives you access the the letters and their exact position on the page, plus almost all the information you could possibly want. Given the difficulty of extracting text content in a reliable order PdfPig is designed so that you can extract PDF text in any way you might need to, and enables you to build your own post-processing pipelines to give you the best possible results for your use-case.\n\ndocnet wraps the PDFium C++ library used by Chromium. It provides a C# API for the functionality available in the C++ library. This MIT licensed wrapper wraps the Apache 2.0 licensed PDFium code so is properly open source.\n\n\n\nThen you can extract the content from each page, or access the letters directly:\n\n\n\ndocnet gives you the speed benefit of native libraries as well as the reassurance of running the PDF code which powers Chromium and by extension, Chrome. Currently it restricts you to targeting x64 but this may change in future.\n\nThis is a port of the MIT licensed PdfSharp library to .NET Core. It seems to be primarily focused on creating, rather than reading, PDFs but also supports other operations. It also replaces the System.Drawing dependency of the original PDfSharp with the more cross-platform friendly ImageSharp library; which means, as usual, you should check the licenses of the dependencies (there was some talk of changing the ImageSharp license recently).\n\nI couldn't find an immediately obvious API for text extraction and there seems to be an open issue for text extraction, but I thought I'd mention it as an option if you're looking to convert PDF to image, or work with the internal PDF structure.\n\nWe reviewed a few of the options available to a developer looking to read text from a PDF in C# on .NET Core. There's some difficulty finding proper open-source, rather than commercial or copyleft licensed software to achieve this task.\n\nEven when we find a library it's still never going to extract text in reading order perfectly 100% of the time, since PDF was never designed to support this.\n\nI've included the options I'm aware of, but if you feel I've missed any let me know in the comments.\n\nI hope this article helps you write great software to bring the power of PDF to the people!"
    },
    {
        "link": "https://ironpdf.com/blog/using-ironpdf/pdfreader-csharp-tutorial",
        "document": "Test in production without watermarks.\n\nWorks wherever you need it to."
    },
    {
        "link": "https://stackoverflow.com/questions/25424816/how-to-read-a-pdf-file-line-by-line-in-c",
        "document": "Hi I had this problem too, I used this code, it worked.\n\nYou will need a reference to the iTextSharp lib."
    },
    {
        "link": "https://stackoverflow.com/questions/83152/reading-pdf-documents-in-net",
        "document": "iTextSharp is the best bet. Used it to make a spider for lucene.Net so that it could crawl PDF."
    },
    {
        "link": "https://e-iceblue.com/en/pdf/read-pdf-file-in-c.html",
        "document": "Many financial reports, research papers, legal documents, or invoices are often distributed in PDF format. Reading PDF files enables you to extract information, analyze content, and perform data processing tasks such as text extraction, keyword search, document classification, and data mining.\n\nBy using C# to read PDF, you can automate the repetitive task to realize efficient retrieval of specific information from a large collection of PDF files. This is valuable for applications that require searching through extensive archives, digital libraries, or document repositories. This article will give the following examples to show you how to read PDF file in C#.\n• Read Text from a PDF Page in C#\n• Read Text from a PDF Page Area in C#\n• Read PDF Without Preserving Text Layout in C#\n• Extract Images and Tables in PDF in C#\n\nSpire.PDF for .NET library can serve as a PDF reader library that allows developers to integrate PDF reading capabilities into their applications. It provides functions and APIs for parsing, rendering, and processing of PDF files within .NET applications.\n\nYou can either download the C# PDF reader to manually add the DLL files as references in your .NET project, or install it directly via NuGet.\n\nRead Text from a PDF Page in C#\n\nSpire.PDF for .NET makes it easy to read PDF text in C# through the PdfTextExtractor class. The following are the steps to read all text from a specified PDF page.\n• Get the specific page through PdfDocument.Pages[index] property.\n• Create a PdfTextExtractOptions object, and set the IsExtractAllText property to true.\n• Extract text from the selected page using PdfTextExtractor.ExtractText() method.\n\nThe following code example shows how to use C# to read PDF text from a specified page.\n\nRead Text from a PDF Page Area in C#\n\nTo read PDF text from a specified page area in PDF, you can first define a rectangle area and then call the setExtractArea() method of PdfTextExtractOptions class to extract text from it. The following are the steps to extract PDF text from a rectangle area of a page.\n• Get the specific page through PdfDocument.Pages[index] property.\n• Create a PdfTextExtractOptions object, and specify the rectangle area through the ExtractArea property of it.\n• Extract text from the rectangle using PdfTextExtractor.ExtractText() method.\n\nThe following code sample shows how to use C# to read PDF text from a specified page area.\n\nRead PDF Without Preserving Text Layout in C#\n\nThe above methods read PDF text line by line. You can also read PDF text simply without retain its layout using the SimpleExtraction strategy. It keeps track of the current Y position of each string and inserts a line break into the output if the Y position has changed. The following are the steps to read PDF text simply.\n• Get the specific page through PdfDocument.Pages[index] property.\n• Create a PdfTextExtractOptions object and set the IsSimpleExtraction property to true.\n• Extract text from the selected page using PdfTextExtractor.ExtractText() method.\n\nThe following code sample shows how to use C# to read PDF text without preserving text layout.\n\nExtract Images and Tables in PDF in C#\n\nIn addition to read PDF text in C#, Spire.PDF for .NET library also allows you to extract images from PDF or read only the table data in a PDF file. The following links will direct you to the relevant official tutorials:\n• Extract Images from PDF in C#\n• Extract Table Data from PDF in C#\n• Extract Tables from PDF to Excel in C#\n\nThis article introduced various ways to read PDF file in C#. You can learn from the given examples on how to read PDF text from a specified page, from a specified rectangle area, or read PDF files without preserving text layout. In addition, extracting images or tables in a PDF file can also be achieved with the Spire.PDF for .NET library.\n\nExplore more PDF processing and conversion capabilities of the .NET PDF library using the documentation. If any issues occurred while testing, feel free to contact technical support team via email or forum.\n• Extract Text from PDF Files in C#\n• Convert PDF to Excel using C#\n• Read Text from Images in C#"
    }
]