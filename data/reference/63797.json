[
    {
        "link": "https://wordpress.org/plugins/redis-cache",
        "document": "To adjust the connection parameters, prefix cache keys or configure replication/clustering, see the configuration options. A business class Redis®¹ object cache backend. Truly reliable, highly optimized, fully customizable and with a dedicated engineer when you most need it. ¹ Redis is a registered trademark of Redis Ltd. Any rights therein are reserved to Redis Ltd. Any use by Redis Object Cache is for referential purposes only and does not indicate any sponsorship, endorsement or affiliation between Redis and Redis Object Cache. Answers to common questions and troubleshooting of common errors can be found in the FAQ. Reading these is always faster than waiting for a response in the support forums. The plugin comes with vast set of configuration options and connection examples. Advanced users may consult Scaling and replication Redis Object Cache has various WP CLI commands, for more information run after installing the plugin.\n\nHello Till, I’m reaching out regarding an issue we’ve encountered when using the Redis Object Cache plugin with a fresh installation of WordPress 6.7.1. Despite following the official setup guidelines, our WordPress site fails with the following error: Error establishing a Redis connection Connection refused WordPress is unable to establish a connection to Redis. This means that the connection information in your wp-config.php file are incorrect, or that the Redis server is not reachable. Is the correct Redis host and port set? Is the Redis server running? If you need help, please read the installation instructions. To disable Redis, delete the object-cache.php file in the /wp-content/ directory. Here are the details of our setup: WordPress Version: 6.7.1 (fresh installation) Redis Plugin Version: Redis Object Cache 2.5.4 Server Environment: Dockerized Setup: Using docker-compose Relevant Containers: WordPress (wordpress:php8.0-fpm) Redis (redis:alpine) WP-CLI (custom-wordpress-cli built on the official WP-CLI image) Nginx (nginx:alpine) for frontend MariaDB (mariadb:latest) for the database Varnish (varnish:stable) for caching Redis Configuration: Redis is running in the my-redis container and is reachable from other containers within the Docker bridge network (my_network). Redis configuration: Default Alpine Redis settings (bind *, protected-mode no). wp-config.php Constants for Redis define(“WP_REDIS_HOST”, “my-redis”); define(“WP_REDIS_PORT”, 6379); define(“WP_REDIS_DATABASE”, 0); define(“WP_REDIS_DEBUG”, true); define(“WP_DEBUG”, true); define(“WP_DEBUG_LOG”, true); define(“WP_DEBUG_DISPLAY”, false); @ini_set(“display_errors”, 0); define(“WP_REDIS_TIMEOUT”, 5); define(“WP_REDIS_READ_TIMEOUT”, 5); Plugin Behavior: Activating the plugin creates the object-cache.php drop-in at /wp-content/. The Redis server is accessible (PONG response from Redis CLI within the WordPress container). Enabling Object Cache via the plugin causes the “Error establishing a Redis connection” issue. Steps we’ve tried: Verified network connectivity: Pinged my-redis from the WordPress container (ping my-redis works). Successfully executed redis-cli -h my-redis ping from the WordPress container (PONG response). Reviewed Redis logs: No errors in Redis logs, and CONFIG GET shows the expected settings (bind, protected-mode, etc.). Tested Redis connectivity from WP-CLI: WP-CLI reports Redis as reachable, but enabling Object Cache causes the same error. Tried replacing the object-cache.php file: Replaced it with the latest version from the plugin’s GitHub repository (branch: develop). Reinstalled the plugin: Deactivated, uninstalled, and reinstalled the Redis Object Cache plugin. The error persisted. Checked for known compatibility issues: Verified that Redis Object Cache 2.5.4 supports Redis 7.4.1 and PHP 8.0. Summary of issue Redis is reachable and functional, yet WordPress fails to connect when Object Cache is enabled. The error specifically points to RedisException: Connection refused in /wp-content/object-cache.php. We suspect a compatibility issue between Redis Object Cache and WordPress 6.7.1 but have not found evidence of this in community forums or issue trackers. Questions: Are there known issues with the Redis Object Cache plugin and WordPress 6.7.1 or Redis 7.4.1? Could this be related to the object-cache.php drop-in, or should we consider alternative configurations for Redis? Are there any additional debug steps or alternative plugin versions (e.g., pre-releases) we should test? HelloWhy does it give the error Drop in? I couldn’t find a solution. Can you help? Status: Drop-in is invalid Client: Drop-in: Invalid Disabled: No PhpRedis: 6.0.2 Relay: Not loaded Predis: 2.1.2 Credis: Not loaded PHP Version: 8.3.13 Plugin Version: 2.5.4 Redis Version: Unknown Multisite: No Metrics: Disabled Metrics recorded: 0 Filesystem: Writable WP_CACHE_KEY_SALT: “AR>)?)MC#Su Quv_=Z tpd=5.S*Y#`%n6n .(#h=H93-ek!2X%HnidD$Lz[^F$jf” WP_REDIS_PLUGIN_PATH: “/home/nep.com.uz/public_html/wp-content/plugins/redis-cache” Drop-ins: [ “atec APCu-Object-Cache v1.0.8 by Chris Ahrweiler” ] I used the free version on my site at first, managed to install it and seemed to work based on what Query Monitor plugin showed. Still wasn’t happy with site performance though so I bought the paid version which is said to be “optimized for WooCommerce” and “Rewritten for raw performance”. Well, after paying a monthly fee of $95 (which is normally a yearly license fee for a plugin btw) and installing the pro version following step-by-step guide and the basic settings found from the Docs, Query Monitor showed again that the object cache is working. The only issue now was that page load times which were 3-4 seconds before in my store became 8-14 seconds long and I started getting complaints from my customers about very slow store. I disabled the plugin and everything went back to normal (3-4 second load times). I was hoping to cut 1-2 seconds off from the 3-4 seconds but it actually tripled the load times… My server resources never hit a peak above 70% (6 cpus, 16 GB RAM) so it’s not having enough resources. It has to be something with the plugin setup. I contacted “support” of the paid plugin which was a chatbot on their website. Tried asking for help in setting up the plugin because most likely there is something I could do to make it work better, or that’s what I thought at least. But paying $95/month I expected to get some help from the developer like has always been the case with any paid WooCommerce plugin from WooCommerce.com. The chatbot said that they will be back “later today” to answer my message. This was October 18th which is 8 days ago. Still to this day I haven’t gotten a response. Well they say “All purchases come with a 14-day, no hassle, 100% money back guarantee.” on their website and as I was very disappointed with the plugin and the support, I contacted them again. Through the chatbot because that seems to be the only easily available channel to contact them. I said “Refund” to the chatbot and it said “The team will get back to you on this. Object Cache Pro will be back later today.” This is now 2 days ago. I did find an email to their support from the initial order confirmation email so I sent an email on Thursday (2 days ago) with a high priority to them. No response to that either. This is what reads on their website as a selling point: “Expert, hands-on help setting up your object cache, and receive a response in as little as 30 minutes from your dedicated engineer via email or Slack.” Here I am 8 days later waiting for that help. You’re not waiting for that 14 days money-back guarantee to run out are you? Anyway I’m taking this up with Stripe now and if they don’t help I’ll make a report to my bank and they’ll make a chargeback which I believe will cost more to the company than just giving me the “hassle-free refund”. And no I am not interested in setting up the plugin anymore. By paying $95/month I expect a response within a week to my support request. I’ve said within the first 14 days of my purchase that I want a refund so I still expect to get it. I didn’t want to make this public but you kind of left me no choice. I haven’t done performance testing yet but I can say that the plugin installed and runs fine. The pages certainly seem perceptively quicker even with WP Rocket installed but I’ll test next week. I did have a problem enabling Redis Object Cache on one of my sites but that wasn’t ROC’s fault. Another Redis plugin, WP Redis, which tested poorly, was removed but left behind a zombie link to wp-content/object-cache.php. Removing it and reinstalling Redis Object Cache fixed it. For those having problems with this plugin: REMEMBER… this isn’t a stand-alone plugin! It requires that Redis be installed in the operating system and that it’s current and in good working order. Neither ROC nor Wordpress can do this for you. If you’re using commercial hosting this is something that your hosting provider must do for you before you enable Redis Object Cache. One of the best plugins available for any wordpress site handling high traffic. We upgraded to PRO for even further performance gains! The performance increase has been ridiculous This plugin has knocked a minimum of 2-3 seconds off of the page loading speed, for every page on my site that can’t be cached. Server resource usage has also dropped substantially. I wish I found this sooner! Read all 166 reviews\n• Fixed several issues with Predis and cluster/replicated connection\n• Allow to be defined elsewhere\n• Fixed ACL username support when using Predis and array syntax\n• Don’t allow object cache to be enabled when Redis is unreachable\n• Added support for usernames when using Predis\n• Use instead of\n• Fixed several warnings in the event of pipeline failures\n• Check if raw group name is ignored, not sanitized name\n• Fixed a bug in when using Predis\n• Fixed a bug in when cache addition is suspended\n• Link to settings page when foreign drop-in was found\n• Avoid warning when content folder is not writeable\n• Use (instead of ) constant to display debug information\n• Reverted changes due to issues in multisite environments\n• Delay loading of text domain and schedule until hook\n• Use instead of in drop-in\n• Fixed an issue in when using Predis\n• Fixed tabs not working in 2.0.6 and 2.0.7 due to WP.org SVN issue\n• Hide Pro line in widget when banners are disabled Version 2.0 is a significant rewrite of the plugin. Please read the v2.0.0 release notes.\n• Attempt to reliably update the dropin when it’s outdated\n• Always set when copying the\n• Avoid fatal error when interacting with metrics but Redis went away\n• Hide Redis version in settings when it isn’t available\n• Prevent metric issues when cache is not available Version 2.0 is a significant rewrite. The plugin now requires PHP 5.6, just like WordPress 5.2 does. The GitHub and Composer repository was moved from to . On multisite networks, be sure to “Network Activate” the plugin after upgrading to v2.x.\n• Use Composer to install and load Predis\n• Use separate methods to connect with all clients\n• Changed default connection and read timeout to 1 second\n• Only database when it’s not The HTML footer comment only prints debug information when is enabled. To disable the comment entirely, set the constant to .\n• Fixed flushing the cache when the prefix contains special characters\n• Cleaned up the settings a little bit\n• Added support for timeout, read timeout and password when using PhpRedis cluster Please flush the object cache after updating the drop to v1.5.5 to avoid dead keys filling up Redis memory. This plugin turned 5 years today (Nov 14th) and its only fitting to release the business edition today as well.\n\n Object Cache Pro is a truly reliable, highly optimized and easy to debug rewrite of this plugin for SMBs.\n• Fixed an issue with functions not existing Since Predis isn’t maintained any longer, it’s highly recommended to switch over to PhpRedis (the Redis PECL extension).\n• Fixed cache not flushing for some users\n• Fixed not showing up in server list\n• Fixed not working when using PECL extension\n• Prevent object cache from being instantiated more than once\n• Always separate cache key and by semicolon\n• Only apply filter if callbacks have been registered\n• Fixed to only set cache key if it doesn’t exist\n• Show host and port unless scheme is unix\n• Do a cache flush when activating, deactivating and uninstalling\n• Use with as fallback\n• Set password when using a cluster or replication\n• Use old array syntax, just in case\n• Make sure is not in\n• Added support for clustering and replication with Predis\n• Load bundled Predis library only if necessary\n• Updated method output to be uniform with WordPress\n• Call and optionally if HHVM extension is used"
    },
    {
        "link": "https://co.wordpress.org/plugins/redis-cache",
        "document": ""
    },
    {
        "link": "https://cloudways.com/blog/install-redis-cache-wordpress",
        "document": "Redis is among the top WordPress caching tools to speed up your website. And that’s why it is globally available on every Cloudways server as an optional installation.\n\nCloudways believes in combining fast speeds, high availability, best performance, stability, and great support on its WordPress servers. Thus, it offers a PHP-powered stack with multiple cache layers, and the Redis Object Cache is a part of that layer.\n\nThis blog focuses on how to use Redis cache on your WordPress site and improve the site’s performance via cache plugins like Breeze. For more technically-sound users, this article also covers how to use the Redis Object Cache with W3TC.\n\nWhat Is Redis and How Does It Work?\n\nAll Cloudways servers use Memcached as an object cache by default. However, WordPress Redis is a more advanced and rich implementation that does everything Memcached offers and provides additional features.\n\nRemote Dictionary Server (Redis) is an in-memory, persistent, key-value database known as a data structure server. One important factor that differentiates Redis from similar servers is its ability to store and manipulate high-level data types (common examples include lists, maps, sets, and sorted sets).\n\nWhen combined with MySQL or MariaDB, Redis’s caching mechanism speeds up WordPress database queries.\n\nRedis’ performance, simplicity, and micro-data structure manipulation allows it to perform significantly better than traditional relational databases. Enabling Redis on Cloudways servers is easy; keep reading to learn the steps to integrate Redis Object Cache on your WordPress sites hosted on Cloudways.\n\nHow Does Redis Interact with WordPress Cache Plugins?\n\nUnlike traditional WordPress cache plugins, Redis is a server-side cache. WordPress cache plugins are built to accelerate a website’s frontend rendering by caching static versions of the pages that don’t run any code (for instance, the regular pages and posts that are served as static cached content).\n\nLet’s say your WordPress site offers memberships and protects content and discounts for members on the connected WooCommerce store (which also sells courses that are made with your preferred LMS for WordPress). When choosing a cache plugin, it is important to consider factors such as ease of use, compatibility with your website, and the specific needs of your LMS. Once you have chosen a plugin, it is important to find a that can support it and meet the requirements of your LMS.\n\nAll these plugins, plus their add-ons, mean that there could be 50 (or more) active plugins on your WordPress site.\n\nWe assume that you already have a properly configured WordPress cache plugin serving your pages. But things aren’t that fast in your WordPress Admin area because the dynamic content is not being cached.\n\nIntegrating Redis will result in a noticeable improvement in the backend operations, and drastically reduce the waiting times. Redis will cache and handle database queries and data structures to make your backend experience as fast as the frontend.\n\nWhy Does WordPress Need Redis?\n\nA WordPress website with a laggy front and back end is disappointing. You can avoid poor user experiences and speed up your WordPress sites by integrating a caching mechanism like Redis cache.\n\nWith Redis enabled on a WordPress site, your visitors will get the content faster on your site. Usually, when a visitor requests data on a WordPress site, the backend starts doing MySQL query looks, which is time-consuming.\n\nRedis stores important data in its memory that is readily delivered when requested to make things faster. So, Redis makes data retrieval faster, boosting performance and dramatically reducing response times.\n\nBefore enabling WordPress Redis cache on your WordPress site, you must take a few precautions. Ignoring these may directly affect your server and even result in bigger losses.\n\nThe first prerequisite is backing up your server, so you have a safe restore point to revert to in case things go awry.\n\nAnd it’s super easy with Cloudways as it offers two backup options: on-demand and schedulable. The latter allows you to schedule the backup hourly, daily, and weekly.\n\nThe easy process is demonstrated in the image below, where you just have to make a few selections to manage backups securely.\n\nDevelopers advise testing all site changes in a staging environment. Even if things go back, your actual site remains unchanged and unharmed. And you learn about the consequences as well.\n\nOnce you are sure that everything is working as intended, you can “Push” the changes to the live site. No changes are implemented to the live site until you “Push” them.\n\nThe staging environment is a replica of your existing website. It is not publicly available, and search engines can’t index a password-protected staging site.\n\nAdd Code in the WP Config File to Avoid Conflict\n\nIf your site is hosted on Cloudways, you must make some changes in the wpconfig.php file to avoid any conflicts and run Redis smoothly.\n\nUse an FTP software like FileZilla and PuTTy to access the wpconfig.php file. Follow the steps below:\n• Log in to your FTP client.\n• Open the wpconfig.php file on any text editor\n• Add a line of code mentioned below just after the first line, PHP’s opening tag (<?php).\n\n\n\n Scroll down on the same file and find the Authentication Unique Keys and Salts section. Add the below-mentioned line of code to the first line.\n\n\n\n The WordPress Cache Salt Key (yoursite.com in the example above) could be anything you like. It must be a unique key for every WordPress installation on that server. This way, we can be sure of Redis handling it properly.\n\nHow to Activate Redis on Cloudways Platform\n• Log in to the Cloudways platform.\n• You’ll see a confirmation message at the top-right corner of the platform, notifying that the Redis status has been updated.\n\nIf you are using any other PHP hosting or a provider that doesn’t provide the one-click Redis installation, you can still install Redis, but the process is: lengthy.\n\nNote: Not sure which web host you should opt for? Try our free web hosting pricing calculator to find out the best-suited host as per your site’s traffic.\n\nIt contains the following steps, and each step takes its time.\n• Run multiple WP CLI commands to install Redis on your server.\n• Once Redis has been installed on your server, configure it from your WordPress website.\n\nThere are two methods to configure Redis on your site, and here they are:\n\nBefore the Redis Object Cache installation and configuration, we recommend installing a caching plugin like the Breeze cache plugin to optimize your site’s front end.\n\nBreeze and Redis are two separate caching systems. Breeze caches your site’s content for improved speeds, and WordPress Redis caches the queries, transients, and other data structures for the WordPress Admin. So, with Breeze and Redis together, you get an optimized front end and back end.\n\nRead our detailed guide to installing the Breeze cache plugin on your WordPress site.\n\nFollow the steps below to install the Redis Object Cache plugin to your WordPress site:\n• Log in to your WordPress site.\n• Go to your WordPress Admin dashboard.\n• Activate the plugin by clicking on the Activate button.\n• After the activation, you’ll be redirected to Settings. Click Redis.\n• You will see the Drop-in is invalid status.\n• Click on the Enable Object Cache button to enable the status.\n• Once the object cache is enabled, the status will change to Connected.\n• You will see a Flush Cache button on the bottom of the page. Let’s understand the use and need of this button.\n\nWe usually don’t need to flush the object cache. Still, it is sometimes the only saving grace when backend operations don’t work correctly, like the need for activating or deactivating a plugin activation.\n\nThe Flush Cache option is just for the object cache and is a good practice to Flush or Purge all the other caches.\n\nBreeze, Varnish, and other cache plugins have dedicated Flush or Purge cache options that clean out unnecessary files from your site.\n\nYou can also purge the varnish cache from the Cloudways platform.\n\nAnd to check if Redis is caching your backend operations, follow the steps below:\n• Go to your WordPress Admin dashboard.\n\nIf Redis Object Cache is disabled, you will see a few transient options to optimize:\n\nOnce you have enabled Redis Object Cache, you will see the transient options as 0 (zero), meaning Redis is caching them instead of WordPress storing them.\n\nW3 Total Cache is a popular plugin that gives you full control over all aspects of system-wide caching. It provides many settings with several options and sub-options. When properly configured, it’s powerful and fast.\n\nYou don’t need any additional plugins to set up Redis Object Cache with W3 Total Cache. Follow the steps below:\n• Go to the WordPress Admin → Performance.\n• Mark the checkbox Enable to activate the option.\n\nObject Cache is now enabled on your site via W3 Total Cache Plugin.\n\nNow it’s time to test the Redis Object Cache response via SSH terminal.\n\nRunning a simple WP CLI command helps you check if Redis Object Cache is working fine. Follow the steps below:\n• If you are a Cloudways user, log in to the Cloudways platform.\n• You’ll be redirected to a new tab.\n\nIf everything is configured correctly, you will get the message OK, followed by the pages Redis is caching.\n\nThis tutorial guides you on configuring Redis Object Cache support for your WordPress sites. This implementation aims to speed up your backend operations by persistent caching queries, transients, and fundamental data structures.\n\nCloudways collaboration with Redis Object Cache is an outcome of our customers’ feedback.\n\nEven though we already had Varnish and Memcached available in our arsenal, we still went one step ahead for maximum speed boosts. A basic WordPress site hosted on Cloudways with Breeze can load in just 79ms.\n\nIf your site is not hosted on Cloudways, you’re missing on the speed boosts. Request a Cloudways product demo & learn about the product, its features, and how it works to help speedify your website."
    },
    {
        "link": "https://github.com/rhubarbgroup/redis-cache",
        "document": "A business class Redis®¹ object cache backend. Truly reliable, highly optimized, fully customizable and with a dedicated engineer when you most need it.\n• And much more...\n\nTo get started, please see the installation instructions.\n\nAnswers to common questions and troubleshooting of common errors can be found in the FAQ.\n\nThe Redis Object Cache plugin comes with vast set of configuration options. If you're unsure how to use them read the installation instructions.\n\nRedis Object Cache offers various replication, sharding, cluster and sentinel setups to users with advanced technical knowledge of Redis and PHP, that have consulted the Predis, PhpRedis or Relay documentation.\n\nRelay is a next-generation cache that keeps a partial replica of Redis' dataset in PHP's memory for ridiculously fast lookups, especially when Redis Server is not on the same machine as WordPress. ( , ); ( , ); ( , ); // when using Relay, each WordPress installation ( , ); ( , ); ( , );\n\nRedis Object Cache has various WP CLI commands, for more information run .\n\nRedis Object Cache has various hooks and the commonly used ones are listed below.\n\n¹ Redis is a registered trademark of Redis Ltd. Any rights therein are reserved to Redis Ltd. Any use by Redis Object Cache is for referential purposes only and does not indicate any sponsorship, endorsement or affiliation between Redis and Redis Object Cache."
    },
    {
        "link": "https://wp-rocket.me/wordpress-cache/redis-object-caching",
        "document": "Redis and object caching can vastly speed up your WordPress page load times with each subsequent visit. It’s also used by many popular websites like GitHub, Pinterest, StackOverflow and many others.\n\n\n\nRemote Dictionary Server (Redis) “is an open source, in-memory data structure store used as a database, cache, and message broker.” It’s a key-value store which is often called a NoSQL database.\n\n\n\nIt’s best used on dynamic websites such as WordPress sites when it comes to object caching, which caches repeating query results.\n\n\n\nToday, I’ll share more detail on object caching, its benefits, and how to install and use Redis for object caching on WordPress websites.\n\nIf a web page is cached, it means that elements of that page such as images, stylesheets, and other content is loaded once, then stored in what’s called a “cache.”\n\n\n\nIt memorizes what was loaded, creates a static version of it, then can serve that version much faster the next time that page is loaded.\n\n\n\nThe result is faster page load times and less of your server’s resources being used.\n\n\n\nCheck out Caching for WordPress, Explained in Plain English for further details.\n\nObject caching is a type of server-side caching. This means the caching is administered at the server level, and isn’t controlled by the end user or a system they use for caching.\n\n\n\nObject caching stores database query results that have been loaded. Then, it serves them up faster the next time they’re requested so the database doesn’t have to be queried again.\n\n\n\nWordPress also has object caching built-in with the WP_Object_Cache class.\n\n\n\nThe trouble is, the inherent object caching WordPress has isn’t persistent by default. This means that cached data is only stored for as long as the request to the database lasts, which is ultimately no more than for one page load, and inefficient.\n\n\n\nIf you were to install and use a persistent object caching solution such as – ehem – Redis, for example, data could be cached for all subsequent page loads, giving your database more of a break..\n\n\n\nFor details, check out What is Object Caching and How to Use It With WordPress.\n\nIf your WordPress site is static and all it needs to load are a stylesheet and some images, for example, you’re not going to see any difference in you use object caching.\n\n\n\nConversely, a dynamic site loads tons of data across pages that are stored in your database such as user details, taxonomies, links, and other similar data.\n\n\n\nAs previously mentioned, every time a page loads that content, it sends one (or often several!) database queries. If you use object caching, that data is stored in the cache and it’s ready to be displayed on the page in the flashes of flashes.\n\n\n\nYour database can be queried much less often and retrieving content from the cache is a lot faster than sending queries to the database.\n\n\n\nThis results is page loading times that are a lot faster. Your server’s resources are also used more efficiently. This is an especially crucial factor if you’re looking to scale your WordPress website.\n\n\n\nSo, if your site gets a lot of traffic or you’re expecting it will soon, and it’s dynamic, you should consider using object caching.\n\nMemcached is another persistent object caching WordPress option that you could use instead of Redis. It’s a popular option and works well, though, it has a smaller set of features when compared to Redis.\n\n\n\nThis is why Redis is a far more popular option. But, that doesn’t necessarily mean you should completely write-off Memcached, especially when it’s used by top sites such as Facebook, Twitter, YouTube, and more.\n\n\n\nWeigh your options by considering the features you need to help you decide which one is right for your WordPress site since each case is different.\n\n\n\nFor details, check out Memcached: What Is It And How To Use It On Your WordPress Site?\n\nTo use Redis for object caching on WordPress sites, it starts with installing and configuring Redis, then installing a PHP extension, followed by the Redis Object Cache plugin.\n\n\n\nMany managed WordPress hosting solutions already offer Redis object caching so you can check with your host to see if it’s an option. They may have a quick or one-click installation available.\n\n\n\nIf you find you need to install it yourself, you can do so manually.\n\n\n\nEither way, it’s recommended you install Redis on a Linux server. While there’s no official support for Windows, there’s a Win-64 port of Redis that has been developed by Microsoft.\n\n\n\nIf you decided you want to manually install Redis for object caching on your Linux server, there are a few other prerequisites:\n• Server has both Wget and Sudo installed\n• Text editor is installed on your server such as Nano\n• Phpize is installed to prepare PHP extension for compiling\n\nBe sure to also back up your entire site in case something goes wrong and you need to restore it. It’s also a good idea to test Redis before deploying it on a production server.\n\nWhile you could use the package manager of your specific Linux distribution such as apt or yum, it may not always be up-to-date with the latest version so it’s recommended you use wget with a link to the master archive.\n\n\n\nOn the command line, enter the following to install the latest stable release:\n\nNext, type the line below:\n\nThen, follow it with this:\n\nIt’s necessary to edit the configuration file now that Redis is installed to, well, configure it to use it specifically for object caching.\n\n\n\nTo get to the configuration file, use the line below:\n\nNote that “nano” is the command to access the file using the Nano editor. Replace this with the applicable command if you have a different editor installed.\n\n\n\nFind where it says the following:\n\nThen, replace it with this:\n\nKeep in mind that you can change “128” to suit your needs.\n\n\n\nFor example, 50 MB is suitable for many WordPress installations, but if you run a high-traffic site, 128 MB or 256 MB may be a better fit. Use what works best for your site.\n\nBy default, Redis is now set up to have any stored data accessible to all apps on the server. Since this is a security risk, it’s important to edit the wp-config.php WordPress core file to include a cache key salt.\n\n\n\nEven if you only plan on having WordPress on your server, it’s still crucial not to skip this step in case you decide to install Multisite or include other apps on your server in the future.\n\n\n\nOpen the wp-config.php file and above the “happy blogging” line, add the following, then save the file to your server:\n\nDon’t forget to replace “example.com” with whatever you want. It doesn’t have to be your site’s domain, but be sure it’s unique.\n\n\n\nYou can randomly generate a key value by using a free tool like Random Key Gen, or KeyGen.io. Be sure to safeguard it like you would your passwords.\n\nIt’s also essential to let WordPress contact the Redis key-value store so you can enable object caching. To do this, you need to install a PHP extension such as PHP Redis.\n\n\n\nGo back to the command line and enter the following:\n\nFollow it with the line below:\n\nYou now have the source code downloaded and extracted.\n\n\n\nTo install it, enter this:\n\nThen, type the line below:\n\nFollow it with the word below:\n\nAlso, enter the command below:\n\nNow that PHP Redis is installed, you need to create a new INI file. You can do this with the line below:\n\nBe sure to replace the “x” in “7.x” to reflect the version of PHP 7 you have installed.\n\n\n\nKeep in mind that if you’re not using Apache, the file path will need to be updated to reflect the file hierarchy you have on your server.\n\nIt’s critical you restart PHP and Redis to apply the changes you made above.\n\n\n\nYou can restart Redis by entering the command below:\n\nThen, restart PHP with this:\n\nNote that if you’re not using an Apache server, use the PHP restart command that applies to you.\n\nNow that Redis is installed, it’s time to check that it’s working properly by running the following command:\n\nIf you see the “PONG” response, Redis is set up and working.\n\nNext, install the Redis Object Caching plugin. Now that you have finished the ground work, it installs like most other plugins.\n\n\n\nFor details, check out Installing Plugins in the WordPress Codex.\n\nWhile WP Rocket doesn’t have Redis object caching built-in since its focus is on page caching, it’s still compatible. You can certainly use WP Rocket at the same time as you use Redis.\n\n\n\nBoost the performance of your site with Redis + WP Rocket: Get WP Rocket today!\n\nObject caching can increase your WordPress site’s page load speed drastically, and you can make it happen with Redis. It takes some configuration, but if you follow the steps above, you’ll be set up and ready to go."
    },
    {
        "link": "https://wp-rocket.me/blog/guide-to-page-speed-optimization-for-wordpress",
        "document": "Do you want to optimize your site speed? We’ve put together a comprehensive guide to WordPress speed optimization. You’ll have access to some helpful information, such as why speed is important, what may slow down your WordPress site, and actionable steps that you can take to make your website faster immediately. You may even have just migrated your website from another CMS, such as Squarespace, to WordPress, and you’re looking to better understand how to make your website stand out.\n\nRemember that the consumer is spoiled for choice. As such, when search engines are ranking results, they want to ensure that they’re only showing the best of the best to their users. This is why your site speed and performance matter so much – it’s part of the difference between showing up on the first page of Google and showing up on the tenth.\n\nIn this article, we’ll delve into some WordPress performance optimization best practices and answer both of the questions: What are the top tips to improve WordPress website speed? And Why is your WordPress site slow? Remember that improving performance helps to fix one of the most crucial WordPress issues.\n\nEvaluating the page speed is crucial if you want to know the health of your WordPress site. No one likes a slow website (and neither does Google!). If you focus on providing a faster and safer experience to the users, you’ll benefit from the Google Page Experience update. And there’s more.\n• Website speed influences SEO. Google has indicated that the speed at which your page loads is an important signal in determining its ranking. Google wants to know that if they send a visitor your way, that visitor will be happy with the experience. Google includes the Core Web Vitals as a ranking factor. The Core Web Vitals are a set of specific factors that Google considers important in a webpage’s overall user experience: the loading speed will become more crucial than ever. There are three metrics: Largest Contentful Paint, Cumulative Layout Shift, and Interaction to Next Paint.\n• Fast sites are easier to crawl. In addition, when your page is slow, it disincentivizes web crawlers which only have limited resources and might deprioritize your site if it is too slow.\n• Website performance impacts conversions. Optimizing your website loading time is also relevant from a user experience perspective – a slow site just doesn’t cut it these days. You have a very short window of time to keep users’ attention. If there is any delay or whatsoever, people are likely to click away to something else. Regardless of the type of business you have, size, or kind, ensuring that your page loads as fast as possible is a necessary part of any online strategy. The quicker a webpage loads, the more likely a user is to perform the targeted action on that webpage. And we all agree with that!\n• Fast sites reduce the bounce rate. One of your marketing goals should always be faster than your competitors simply because they are just one click away. You can have the best content and a great product, but if your website is slow, you’ll lose all the efforts you put into design and development. Don’t be that website!\n\nAs you can see, speed matters, and we recommend you always test your website speed. The best tools available to audit your WordPress performance and measure your Core Web Vitals are the following:\n\nWe wrote an in-depth guide to highlight how to test your WordPress site Performance and measure speed results. As an example, this is what a test looks like when using PageSpeed Insights:\n\n19 Tips to Speed Up Your WordPress Site\n\nThe million-dollar question is… how do you speed up your WordPress site?\n\nThere are several performance optimization best practices that you can put in place today to reduce page load time and make your WordPress site load faster. Here’s our complete list of actionable recommendations, from easy to advanced.\n\nYou can watch the video about the 9 easy ways to speed up your site or keep reading and discovering them all, including the WordPress performance optimization techniques that are part of the WordPress pre-launch checklist you should consider for your projects.\n\n3 Basic Speed Optimization Steps (The Low Hanging Fruit With No Coding Required)\n• Optimize your images and use lazy loading\n• Use the right theme: choose a theme optimized for speed\n\n3 Basic Speed Optimization Steps (The Low Hanging Fruit With No Coding Required)\n\nHere are the easiest steps to increase your WordPress page speed:\n\nYour WordPress hosting service plays a major role in website performance. What makes a good hosting provider? A good hosting provider takes the extra measures to optimize your website for performance and provides good customer support. There are a few types of hosting on the market:\n• Shared hosting – you share the server resources with many other people. If one of them gets a traffic peak, your website may be impacted. You need to be careful.\n• Dedicated hosting – in this model, a hosting provider rents a single server with all its available resources to one client: you. You are free to do whatever you want with your server, and it’s good for your loading speed.\n• Managed WordPress hosting – that gives you the most optimized server configurations to run your WordPress site. Those companies know WordPress inside out and offer features dedicated to WordPress, such as automatic WordPress updates, security configurations, and much more.\n\nTo learn more about the type of hosting providers, we recommend reading our guide to compare the most popular ones.\n\nYou can also take a look at our hosting partners — they have been carefully selected and play great with WP Rocket.\n\nCahing is the foundation of making a website faster. If you’re wondering how to cache a website, you can relax and use a caching plugin, which generates static HTML pages of your website and saves them on your server. Each time a user tries to access your website, your caching plugin displays the lighter HTML page instead of the heavier WordPress PHP scripts. It’s like if the cache plugin was “saving” your content to pre-load it faster if anyone tries to access your website.\n\n\n\nReloading static resources like images and JavaScript files every time they are requested will slow down your site. The figures below show how my website is performing before and after installing the WP Rocket cache plugin. The figures speak for themselves:\n\n✅By using a tool like WP Rocket, you can cache those resources and improve your page load speed by a lot, automatically. All the work is done in the background, and you’ve got a faster site immediately.\n\nThe other good news is that WP Rocket is a cache plugin easy to install and configure. The dashboard is intuitive and user-friendly, as you can see below:\n\n3. Optimize your images and use lazy loading\n\nCheck that your images are optimized. There are three essential tips you can follow to improve the loading speed of your images:\n• Resize them according to the real size on your pages (don’t let WordPress decide for you, as we explained in another article about improving the Lighthouse performance score for your WordPress site). This will prevent the following Lighthouse issue:\n\nThe solutions to reducing the weight of your images and resizing them:\n\n✅ A good solution is to use Imagify. After enabling it, all your images, including thumbnails, will be automatically optimized when uploaded into WordPress. The testimonials speak for themselves:\n\n\n\n✅ WP Rocket will also add missing width and height attributes to images in the Media tab, as you can see below:\n\n✅ WP Rocket will implement the LazyLoad on images, iframes, and videos (always in the Media tab):\n\n\n\n✅ Rocket Lazy Load plugin is another way to get this sort of lazy loading on your images (and it works like a charm).\n\n1. Use the right theme: choose a theme optimized for speed\n\nOne of the best parts about WordPress is that you have a near-infinite number of different themes that you can choose from. When you’re selecting the one you’re going to use, don’t just focus on aesthetics and functionality. It’s also important that you go for a theme that is efficient in terms of speed optimization.\n\n\n\n✅ Check our guide where we explained how to test (and choose) a fast theme.\n\n\n\n✅ Do your research and take your time to make the right choice as it can solve a lot of problems you might face down the line. For example, WP Rocket has combined a list of the fastest WordPress themes.\n\n\n\n✅ Switch to a theme that provides you with performance optimization features.\n\n\n\n✅ Use the Query Monitor plugin to find out if the installed theme is causing any performance issues.\n\n2. Don’t use a slider on your header\n\nA slider will just kill your site’s performance. Even though many sites tend to use them, this is one of the actions that will have the worst impact on speed.\n\nIt can be tempting to install lots of plugins on your site for various functions but be wary of what impact it has on your site. If there are plugins that are unnecessarily bloated and running numerous additional scripts, it might make sense to consider finding more efficient alternatives or just eliminating them. In most cases, simplicity wins here.\n\n✅ Test your site speed before and after activating a plugin. Refer to our guide to understand how to use Pingdom, Google Page Insight, or GTMetrix to measure the performance of your WordPress site.\n\n✅ Remove all the unused plugins not to clutter the database and avoid adding vulnerability points to your site.\n\n✅ Use the Query Monitor plugin to find out which installed plugins are causing performance issues.\n\nInstead of using the WordPress backend to host your video or audio files, it’s much more efficient to upload those pieces to YouTube, Viméo, or SoundCloud — they are much better suited to handle the bandwidth requirements. Your WordPress site can then point to that digital asset rather than render it, and your whole site will get much faster as a result.\n\n✅ Use WP Rocket’s “LazyLoad” feature for YouTube. Check the “Replace YouTube iframe with the preview image” box. This will improve your page loading time.\n\n\n\n✅ To embed a video in WordPress, you can use the built-in video feature in the WordPress Editor (Gutenberg). Simply copy and paste your video’s URL directly into your post, and it will embed automatically:\n\nIf your target audience is distributed around the world, it makes a lot of sense to use a CDN to have your site hosted closer to the end-user. Instead of having everything coming from one server in one location, a CDN creates a network of servers around the world that store static files that make for much faster loading times in different scenarios. \n\n\n\nDo I need a CDN? You’ll need one if your clients are located far from the server’s location. It could take a while before all the content (products, images, JS and CSS files, or even videos) are loaded. If you are planning on selling internationally or going multilingual, then you should consider using a CDN.\n\n\n\n✅ We recommend using RocketCDN, which is our premium CDN that integrates directly with WP Rocket. RocketCDN automatically applies the best performance settings, so you don’t need to spend time going through each setting and understanding how a CDN works.\n\nThe WordPress platform itself is continually evolving, and as the team and community improve the overall functionality, they release regular updates that you should be making the most of. Installing these updates when available ensures that you always have the latest version of WordPress running your site.\n\nThe WordPress revisions system stores a record of each saved draft or published update. It’s handy if you need to recover an older version of your content. However, too many post revisions can impact the speed of your WordPress site if your pages are not cached.\n\n✅ A solution to limit the post revisions is to add this code snippet to your wp-config.php file. We added “5” which is the number of revisions we want to do, but you can set up your own figure.\n\nSome advanced web performance techniques could make a real difference in optimizing your WordPress site speed.\n\nYou can see how JavaScript execution affects performance by looking at the First Input Delay metric and the Lighthouse performance score.\n\nFor instance, Lighthouse and Page Speed Insights will tell you if you need to “Eliminate render-blocking resources”.\n\nThe Opportunities section of your Lighthouse report contains all the URLs blocking the first paint of your page.\n\n\n\nLighthouse and Page Speed Insights will also flag any issues regarding JavaScript execution time:\n\n\n\n✅ You have to inline critical resources, defer non-critical JS resources, and remove unused JavaScript.\n\nYou can use WP Rocket to optimize your JS files, as shown below. You’ll load JS deferred and delay JavaScript execution in a few clicks and address the main JS issues.\n\n\n\n✅ A few more plugins can also help you remove unused JS files:\n\nIf you want to know more, check out our detailed articles about how to eliminate render-blocking JS and CSS and how to reduce JavaScript execution time.\n\nNon-critical CSS is not relevant for rendering the page. Such files can affect loading time and generate PSI recommendations such as “Eliminate render-blocking resources” and “Avoid chaining critical requests”.\n\nOn the other hand, critical CSS should have the highest priority: these are the resources above the fold that need to be loaded as fast as possible.\n\n✅ You have to inline critical resources, defer non-critical CSS resources, and remove unused CSS. WP Rocket offers the Remove Unused CSS option, which will take care of the CSS optimization and remove unused CSS easily.\n\n✅ A few more plugins and tools can also help you tackle CSS:\n• Critical Path CSS Generator – you should then follow Google’s instructions.\n\nMinification refers to removing unnecessary and redundant code without affecting how the browser processes the data. JavaScript minification removes all the unnecessary JS content such as:\n\n“(// …)” and all the extra spaces or strips comments from the code. In other words, the goal is to make the file much lighter by reducing the size of the code.\n\n✅ The manual solution: use a free online tool like minifier.org and tick the “JS” box.\n\n✅ The fastest and most convenient solution: use a plugin like WP Rocket that removes the unnecessary JS to make your website load faster. As you can see below, you simply need to check the “Minify JS files” box.\n\nIn a CSS file, you will find whitespace, comment, and punctuation. This content helps the developer read the code better, but it’s unnecessary for the visitor. By getting rid of the unnecessary content, you’ll get lighter files seeing as CSS minification removes extra spaces and comments from your CSS files such as: “(/*” or whitespaces.\n\n✅ Use a free online tool like minifier.org and tick the “CSS” box.\n\n✅ You can use WP Rocket to clean up your CSS files and reduce the file size as shown below:\n\nAs your site grows, your WordPress database will grow as well – with some portions of your data becoming obsolete over time. If you can eliminate the information that is no longer needed, your database will function more efficiently, and you’ll have a faster loading speed as a result.\n\n\n\n✅ You will first have to access PHPMyAdmin via your hosting provider and optimize your database from there. If you understand your database structures well, you can also do some manual interventions there. If you are not too confident, we have gathered some other solutions for you.\n\n\n\n✅ The WP Rocket plugin will do a lot of this optimization automatically. The pros are a great user-intuitive interface and a quick setup. The Database Tab is divided into sections for posts, comments, transients, and database cleanup:\n\n\n\n✅ Other plugins you can use to optimize your database:\n• WP-Optimize (1M+ users). You can use WP-Optimize to clean up post revisions, old drafts, unapproved, spam, trashed comments, expired transient options, trackbacks, and pingbacks.\n• WP Sweep (100 000+ users). You can go over each setting or run all the tasks by pressing “Sweep All” at the bottom.\n\nGoogle loves long posts, but more content also means more pictures to load. You may consider splitting your longest posts into several pages to limit the impact. However, if you already enabled lazy loading, a very long text should not affect performance.\n\n✅ Add the <!––nextpage––> tag in your article where you want to split it into the next page.\n\n✅ A few powerful plugins can activate the pagination and help you to control the layout of your post. We recommend you try WP-PageNavi.\n\nIf you produce high-quality content, there is a risk that it will be re-used or stolen by other sites. Stealing is bad, but it’s not the worst here. The worst is that they can use your images AND your bandwidth by hotlinking the content. \n\n\n\n✅ Block Specific Domains.\n\n\n\n✅ Choose a WordPress plugin like All in one WP Security that will protect your content against hotlinking.\n\nWell, getting this following warning while accessing a website is never a good sign, is it? Google and your visitors will prefer a secure website and a safe browsing experience.\n\n\n\n✅ Many hosting packages come with HTTPS and SSL options. Check with your host provider if they see any ongoing issues on your website.\n\nAn updated PHP will allow your WordPress site to run faster.\n\n✅ Ask your host which version he’s using and ask him to upgrade it if he’s using a lower version than PHP 7.\n\n✅ Install a plugin like Version Info to check the PHP version you are using.\n\nHow to Speed Up Your WordPress Site with WP Rocket\n\nAs you can see, there are a vast number of ways to optimize your WordPress site’s speed and performance – all varying in terms of impact. It might be overwhelming to run through a list like this, but the good news is that WP Rocket is here to help!\n\n💡 Hint: Our plugin is designed to take care of 80% of these best practice improvements for you without you having to touch a piece of code.\n\nJust by installing the plugin and turning it on, you’ll get immediate improvements in terms of caching, redirects, image optimization, and the like. These alone will improve your site performance by orders of magnitude.\n\nWe recently published a case study showing how to improve the Lighthouse performance score with WP Rocket. The results were very encouraging, as we showed above:\n\nBeyond that, you can choose to switch on more advanced features, including lazy loading, minification, and many more that fine-tune your speed and performance even further. Those advanced settings allow you to fix the most important issues diagnosed by PageSpeed Insight and help your site score 100% on Google’s Page Speed test!\n\n\n\nLet’s have a look at a few common issues coming from the opportunities and diagnostics section (WP Rocket is not installed yet.)\n\n\n\n🚀 WP Rocket does all the hard work for you. You don’t have to worry about tinkering with the back end yourself. The plugin fits seamlessly into your WordPress setup and does all the necessary integrations and implementations to ensure that you’re taking advantage of all the best practices for speed optimization.\n\n\n\nHave a look for yourself, upon activation of WP Rocket, and after tweaking a few options, my previous issues moved to the “Passed audits” section:\n\n\n\n✅ WP Rocket can fix the following issues flagged by Google:\n• Image elements do not have explicit height and weight\n\nIt’s clear to see that you should be doing everything you can to optimize how fast your WordPress site loads. It’s one of those infrastructural things that makes a huge difference in who sees your work and how they perceive it.\n\nLuckily, by leveraging some of these best practices, you can get incredible improvements in no time.\n\nAmongst other tools, WP Rocket is one of the easiest ways to improve your PageSpeed Insights score. Always keep in mind that fixing the most important issues flagged by Google will put your Core Web Vitals in the green!\n\nIt just takes some awareness and a willingness to work with some great tools – and your site will be faster than you could have ever imagined!\n\nWhat are you waiting for? You’re missing out on traffic (and sales!)"
    },
    {
        "link": "https://docs.wp-rocket.me/article/1291-find-the-best-settings-for-your-site",
        "document": "Find the best settings for your site\n\nAfter you've enabled WP Rocket, the automatic features and default settings will be applied to the website, however, enabling the additional optimizations will help you get the most out of WP Rocket.\n\nYou can use this article as a general guide to configure those WP Rocket additional optimizations.\n\nThis article includes a list of recommended practices, the most common troubleshooting techniques, and an overview of the most important features.\n\nTo make sure you're using the best settings for your site, you should run a speed test before you begin configuration, then again afterward.\n\nNote: Every site has a different theme, a different set of plugins, and different content. So the best settings, and the required exclusions, will vary from site to site.\n\nWhen testing options in WP Rocket, please use the following process:\n• Activate options one-at-a-time, not everything at once.\n• After each option that you activate, check your site in a browser window where you are not logged in to WordPress. An incognito/private window works well. By doing this, you will be able to see immediately if a particular option causes any issue.\n• Check a few types of pages on your site. If anything doesn’t look right, don’t panic! Disable the last option you activated, and your site will return to normal.\n\nDid you know? \n\n After you activate an option, there’s no need to clear the cache. WP Rocket will take care of that for you.\n\nYou can fix any problems caused by the optimizations as shown below:\n• Adding exclusions or safelisting values\n• You can exclude assets from being manipulated by the different optimizations.\n• For most features, this can be done using the exclusion boxes.\n• This is the most common approach because it allows optimizations to keep running on the rest of the assets.\n• Disabling the problematic option\n• You can also keep an optimization deactivated for the affected page(s) using WP Rocket's sidebar. This would be useful if the feature affects only some pages, and you want to keep the optimization running on the rest of the pages.\n• In some cases, you might need to keep an option disabled for the whole site. This is recommended if there are too many exclusions, too many affected pages, and if the performance benefit is not crucial for the overall site speed.\n\nMore details about the troubleshooting process can be found in this article.\n\nThis tab contains WP Rocket's optimizations for CSS and JavaScript assets. Here are the recommended steps to follow in this tab:\n• You can start by enabling the Load JavaScript deferred feature.\n\n \n\n Deferring the JavaScript will have a higher impact on JavaScript performance, allowing the browser to render the site better. \n\n \n\n If you find issues, please check our guide.\n• Enable the Delay JavaScript execution, and check your site thoroughly.\n\n \n\n Delaying the execution of JavaScript is the most powerful JavaScript optimization in WP Rocket. \n\n \n\n And if you spot issues, please use the One-click exclusions section in your WP Rocket plugin settings page. You can also check this guide.\n• Finally, you should enable the Remove Unused CSS feature under the Optimize CSS delivery option.\n\n \n\n This feature is the most powerful CSS optimization, but it's asynchronous, that is, it takes some time before the Used CSS is applied to the site, read more. \n\n \n\n If you notice that Remove Unused CSS breaks a layout element, please check this article.\n\n \n\n In cases when Remove Unused CSS causes too many problems, you can use the Load CSS Asynchronously feature to optimize the delivery of CSS.\n\nThis tab contains options to optimize the loading of images and iframes, and to set missing image dimensions. Here you should:\n• Enable the LazyLoad feature.\n\n \n\n This will result in saving loading time and data, as the images will be displayed as visitors scroll down the page. \n\n \n\n In case there are problems, you may need to exclude some images from being lazyloaded. For more information, please check the links here.\n• If the images are ok, you can enable the LazyLoad for CSS background images feature.\n• If everything looks ok, you can enable the LazyLoad for iframes and videos feature, and its Replace YouTube iframe with preview image sub-option.\n• Lastly, you can enable the Add missing image dimensions feature to avoid layout shifts while your site is being rendered.\n\nWP Rocket includes more features in the tabs described in this article, and across other tabs, such as:\n\nThe additional optimizations and rules in those tabs are used for fine-tuning WP Rocket.\n\nFor example, the most common advanced option is Never Cache URL(s), which is used along membership plugins.\n\nHowever, in most cases, if you're not sure of what they're used for, it's highly possible you won't need to use them.\n\nIf you own a big website, with thousands of pages or products, you may also take a look at our configuration for large websites article, where you'll find some guidelines to balance WP Rocket's optimizations with the available server resources.\n\nWhen in doubt, please contact our support team."
    },
    {
        "link": "https://onlinemediamasters.com/wp-rocket-settings",
        "document": "WP Rocket’s settings haven’t changed much over the years, considering they only released 1 new feature after 2020 if you check the changelog.\n\nThat said, WP Rocket/RocketCDN do a poor job optimizing LCP, TTFB, and mobile. You can’t preload above the fold images for LCP and the “remove unused CSS” feature is slower than other plugins because it loads used CSS inline. RocketCDN only serves files from StackPath’s CDN and basically nothing else. There’s no full page caching, mobile image resizing, and other important features. Since TTFB is 40% of LCP, I see many WP Rocket users complain about this.\n\nWith so many lacking features, you’re basically forced to use 6 other plugins to address these, including Perfmatters which handles several of them. I switched to FlyingPress which is faster with more features (Gijo also constantly updates it for web vitals), but I’ll leave that up to you.\n\nThis guide goes beyond regurgitating their documentation and covers advanced image optimizations, CDN choices, CPU usage, etc. It’s also 8+ years old and I’ve been keeping it updated since I first published it. Lmk if you have any questions/feedback in the comments.\n\nGeneral information about your subscription to WP Rocket and RocketCDN. I never let plugins collect data since it results in a (very small) performance decrease. You can clear cache if you make design changes and aren’t seeing them. Otherwise, there’s nothing to do here. I let my subscription expire after switching cache plugins, especially considering they increased prices.\n\nThere are a handful of situations where WP Rocket’s page caching should be disabled using the helper plugin:\n• When your host already handles page caching.\n• When you’re using Super Page Cache for Cloudflare.\n• When you’re using another cache plugin for page caching.\n\nBrian Li explains why WP Rocket’s page caching should be left on when using APO (it’s a different layer than page caching on the origin server). Which means in most cases, keep caching On. I don’t recommend using 2 cache plugins unless you’re using SG Optimizer for caching, then WP Rocket for core web vitals. In this case, disable WP Rocket’s page caching.\n\nWP Rocket has specific instructions and helper plugins when using NGINX + Varnish, such as using the NGINX helper plugin when NGINX caching is enabled and using custom Varnish IPs.\n\nMobile Cache: On – enables caching for phones (tables are treated the same as desktop but can be changed with a helper plugin). The only reason mobile cache should be off is if your website isn’t responsive. Check the documentation if you’re seeing the wrong display on certain devices.\n\nSeparate Cache Files For Mobile Devices: Off – only enable if you have mobile-specific elements and need WP Rocket to show them using a separate mobile cache, or in situations like if you’re using the Avada theme / WP Touch. Otherwise, you should keep this setting turned off.\n\nUser Cache: Off – only enable if you have logged-in users (i.e. bbPress) where there’s user-specific content. However, enabling this can also increase CPU usage. If you turn this on and have custom login and logout pages, make sure those are excluded from the cache. If this is turned on, there are several helper plugins to get user cache working properly such as force page caching, disable page caching for logged-in users, and common cache for logged-in users.\n\nCache Lifespan: 24 hours – a lower number means the cache refreshes frequently but increases CPU usage (good if you publish content frequently and need your site updated). A higher number means the cache won’t refresh as frequently which can decrease CPU usage (good if you don’t publish content often and want to save server resources). If you’re getting CPU issues, you can also use WP Rocket’s helper plugin to disable automatic cache clearing.\n\nFor most sites, minify CSS/JS should be ON, but combine CSS/JS should OFF. Defer/delay JavaScript should usually both be ON and can improve multiple PageSpeed recommendations.\n\nMinify CSS/JS Files: On – leave Off if you’re using Perfmatters to remove unused CSS. Minifying files removes whitespace from code and which reduces file sizes. When using Cloudflare’s APO, Cloudflare suggests using WP Rocket for minification and leaving Cloudflare minify settings OFF.\n\nCombine CSS/JS Files: Off – this setting doesn’t work when “delay JavaScript execution” is on. WP Johnny also explains why you shouldn’t combine especially on websites with large CSS/JS files (which you can check in your GTmetrix Waterfall chart). Combining CSS/JS files can also cause issues when using HTTP/2 and HTTP/3 servers. For all these reasons, leave this setting off.\n\nExcluded CSS/JS Files: if enabling a minify setting breaks your website, view your source code, find the problematic file, and add it here. See WP Rocket’s post on resolving minification issues.\n\nOptimize CSS Delivery: Remove Unused CSS – leave Off if you’re using Perfmatters to remove unused CSS. Even after WP Rocket revamped this in 3.11, it still loads used CSS inline. While this is better for scores, it’s slower for users since the file can’t be cached and it increases HTML size. Even the Perfmatters documentation says inline is better for PageSpeed scores while “separate file” is better for perceived performance. FlyingPress, Perfmatters, and LiteSpeed Cache all load used CSS in an external file, while WP Rocket is the only cache plugin I know that loads it inline.\n\nIf removing unused CSS in WP Rocket breaks your site, load CSS asynchronously (but it won’t give you as good of results). Once enabled, run your site through a critical CSS generator, copy the code, then paste it into fallback critical CSS (if you make CSS changes to your site, you’ll need to repeat this step). And if you’re still getting errors, use the helper plugin to exclude files.\n\nLarge CSS/JS files are usually from themes/plugins which you can check in your Chrome Dev Tools coverage report. Rather than relying on a plugin to fix these, you’ll have better results if you fix it at the source (by using lightweight themes/plugins and optimizing third-party code).\n\nLoad JavaScript Deferred: On – loads JavaScript after the page has finished parsing and eliminates render-blocking resources in PSI. If you still see render-blocking issues, you can try installing Async JavaScript on top of WP Rocket then toggling on “apply defer” in the settings.\n\nDelay JavaScript Execution: On – reduces third-party code by delaying JavaScript until user interaction (such as scrolling or touching the screen on mobile). If this breaks your website, view WP Rocket’s compatibility exclusions and exclude any plugins/themes/services from delay.\n\nThis can significantly improve multiple areas of core web vitals. You could also use the Flying Scripts plugin which lets you add JavaScript manually and delay it using a timeout period, but WP Rocket works well. And remember, enabling this will disable and gray out combine settings.\n\nEnable all settings and exclude above the fold images from lazy load. But, we have a problem:\n\nLazy Load Images: On – delays loading images until users scroll down the page and they become visible in the viewport. WP Rocket won’t lazy load background images since they’re loaded from CSS, resulting in defer offscreen images errors. That said, you have a few options:\n• GeneratePress can now inline background images in which case, they will be lazy loaded.\n• Optimole lazy loads them using CSS selectors (you’ll use Chrome Dev Tools to find them).\n• Add your own lazy-bg class – or switch to FlyingPress which already has this class built-in.\n\nEnable For Iframes And Videos: On – similar to lazy loading images but for iframes/videos.\n\nReplace YouTube Iframe With Preview Image: On – replaces the “fat YouTube player” with a preview image so it’s only loaded when people click it. It can significantly improve load times when embedding videos. However, you may see external requests from ytimg.com which are from the thumbnails. FlyingPress is the only plugin I know that self-hosts YouTube placeholders.\n\nExclude Images Or Iframes – it’s counterintuitive to lazy load above the fold images/iframes since visitors see them immediately. WP Rocket can exclude images by URL, class, attribute, or:\n• Perfmatters can preload critical images where you set the number of images that usually load above the fold (i.e. 2-3) so they’re excluded from lazy load + preloaded automatically.\n• WP Rocket can exclude images by URL, class, or attribute. For example, featured images can often be excluded by adding “class=”attachment-full size-full”. There’s also a helper plugin to exclude a specific number of images from lazy load (but read their instructions).\n• There are a few plugins out there to preload images, featured images, or product images.\n\nAdd Missing Image Dimensions: On – adds missing width/height attributes to HTML images. This fixes layout shifts as well as use explicit width and height on image elements in PSI. When viewing your image’s HTML, it should now have a width and height with specified dimensions:\n\nLearn how to reduce CPU usage by preloading only important sitemap URLs and changing the crawl interval, how to preload fonts, and why you (usually) don’t need to prefetch any domains.\n\nActivate Preloading: On – tells browsers to start fetching resources needed soon. If you’re getting high CPU usage, install the custom preload intervals helper plugin and change the crawl interval from the default 500ms to something like 1000ms. You could even set up a cron job so WP Rocket starts preloading at a specific time (i.e. in the middle of the night / low traffic hours).\n\nActivate Sitemap-Based Cache Preloading: On – preloading the full sitemap increases CPU usage. Check your sitemap (i.e. https://example.com/sitemap_index.xml) and only add the most important URLs to cut down on CPU usage. In most cases, this is just your pages/posts.\n\nPreload Links: On – when users hover over a link for more than 100ms (or touches the link on mobile), the page will download in the background so when users click it, it appears to load instantly. This won’t improve scores but helps with perceived load time. The problem is if you have a site where users hover over lots of links (i.e. product images), it can cause CPU spikes.\n\nPrefetch DNS Requests – check the sources tab of Chrome Dev Tools to see all third-party hostnames loading on your website. Most of these are already delayed (via delay JavaScript execution), so there’s no reason to prefetch them. WP Rocket automatically preconnects CDN CNAMEs + fonts.gstatic.com, so there’s no reason to prefetch these either. The only third-party domains you should prefetch are the ones not delayed or preconnected by WP Rocket. In most cases, this is only a couple domains or even 0. While preloading/preconnecting too many URLs can negatively impact on speed, prefetch is more forgiving if you add domains not being used.\n\nPreload Fonts – you don’t need to do anything here if remove unused CSS is on since WP Rocket will preload fonts automatically. If it’s not on, you’ll need to preload fonts manually.\n\nOnly self-hosted fonts can be preloaded (fonts served from your site, not fonts.gstatic.com). Even though they’re faster and more GDPR compliant, WP Rocket recommends using third-party fonts (I don’t, and neither does basically anyone). Elementor can host fonts locally in Theme Customizer → Performance. There are several other plugins that do this, like OMGF.\n\nOnce fonts are hosted locally, open your GTmetrix Waterfall chart and view all your font files. Find any fonts loading above the fold or mentioned in your CSS file, copy their URLs, and paste them in WP Rocket to preload them. Retest your website in GTmetrix and you should notice the font’s blocking time is faster. Avoid preloading too many fonts which can have a negative effect. PSI used to tell you which fonts to preload in preload key requests, but I don’t think it does now.\n\nThere are only a handful of situations where you need to use WP Rocket’s advanced rules, but the high majority of websites can leave these as-is. WP Rocket is already compatible with most eCommerces sites (i.e. WooCommerce) and excludes the cart, checkout, and my account pages.\n\nNever Cache URLs – if you’re using an eCommerce shopping cart that is not supported by WP Rocket, add your cart and checkout pages here which will exclude these pages from the cache.\n\nNever Cache Cookies – same principle as previous option only based on cookies.\n\nNever Cache User Agents – prevent Googlebot or other user agents from caching pages.\n\nAlways Purge URLs – let’s say you have a blogroll on your homepage. If you create a new post, you want that homepage blogroll updated immediately by emptying the homepage cache. That’s what this setting does, however WP Rocket automatically clears the cache for your homepage, categories and tags once new content is created… so there is usually no need for this. But if there are other page’s cache you want cleared when new content is posted, add it.\n\nCache Query Strings – query strings are URLs that look like this: ?country=italy. These URLs aren’t cached by default but if you want to cache them, add “country” in the field (for example).\n\nWP-Optimize is better for database cleanups, so jump down to that section.\n• Revisions: – every time you hit the “Publish” button, a post revision is stored. Instead of deleting all them which leaves you with no backups, they should be limited to maybe 3-10. You can do this by adding the code below to your wp-config file, or using WP-Optimize.\n• Auto Drafts: – if you exit out of your browser accidently, WordPress will store auto drafts so you don’t lose your work. If you’re sure you don’t have any, you can delete them.\n• Expired Transients: – transients that expired and are still in your database.\n• All Transients: – stores data that takes a long time to retrieve (i.e. blog social counts).\n• Optimize Tables: – optimizes database tables but doesn’t work on the InnoDB engine.\n• Automatic Cleanup: – although you should take backups beforehand just in case.\n\nWP-Optimize – better than WP Rocket because it can remove unused tables, take backups via UpdraftPlus, and save a certain amount of post revisions instead of deleting them all. Just by viewing these tables, you can learn which plugins/modules add the most database overhead. This is common with SEO plugins, security plugins, and other plugins that collect/process data.\n\nHere are specs of popular CDNs (view spreadsheet).\n\nFrom best to worst:\n• Rocket.net Cloudflare Enterprise – you hit 2 birds with 1 stone between arguably the best CDN, plus their hosting is faster than “premium hosts” like Kinsta. Their Cloudflare Enterprise is free and setup automatically. It uses full page caching (not supported on Cloudways) and Argo (not supported on FlyingProxy). But, you have to switch your host.\n• FlyingProxy – third-party Cloudflare Enterprise service by Gijo (from FlyingPress) and a big step up from Cloudflare free/pro since it uses all 285 Cloudflare PoPs, load balancing, and other Enterprise features. The main con is no Argo (which is great for dynamic sites).\n• Cloudways Cloudflare Enterprise – similar to Rocket.net and FlyingProxy but no APO support, costs $5/mo, and last time I checked, it served lots of annoying challenge pages.\n• Cloudflare Pro – full page caching with APO and Mirage/Polish for image optimization.\n• FlyingCDN – FlyingPress’ CDN which uses BunnyCDN with Bunny Optimizer (for image optimization) and geo-replication for cheaper than going through BunnyCDN ($.03/GB).\n• SiteGround CDN – as much as I dislike their hosting, they made big improvements to the CDN in version 2 with more locations and load balancing, but it still lacks many features.\n• BunnyCDN – performant CDN on cdnperf.com with lots of settings like Bunny Optimizer (for image optimization) and geo-replication. Cloudflare + BunnyCDN is another option which can improve cache hit ratio and better image optimization from Bunny Optimizer.\n• RocketCDN – only serves your files from StackPath’s CDN (which was removed from cdnperf.com) with no support for full page caching, image optimization, security features.\n\nThis next section is for BunnyCDN which many people use with WP Rocket:\n\nStep 1: Sign up for BunnyCDN and add code OMM5 to the billing section for $5 in free credits.\n\nStep 2: Create a pull zone, add your website name, and choose your regions.\n\nStep 3: Copy your CDN URL or set up a custom hostname like cdn.exmaple.com (optional).\n\nStep 5: Install the BunnyCDN plugin and add your pull zone name. Doing this and adding your CDN URL to WP Rocket can serve more assets and was recommended by BunnyCDN’s support.\n\nStep 6: Purge cache and view your source code to make sure files are served from the CDN.\n\nStep 7: Change any URLs in your WP Rocket settings to match your new CDN URL from BunnyCDN (excluded images, preload fonts, etc). For example, an excluded image would look something like: https://cdn.onlinemediamasters.com/wp-content/uploads/2022/05/logo.png\n\nStep 8: Consider BunnyCDN’s geo-replication which automatically copies your files to their storage zones so files are pulled from the closest zone. It’s found in Caching → Perma-Cache.\n\nOnce you enable perma-cache, go to Storage → Add Storage Zone. Give your storage zone a name (your business name is fine), select your main storage region, then click “Enable Geo-Replication.” You will be prompted to select the regions where you want your files to be replicated. The price is $0.010/GB for the first 2 regions (including your main storage region) then $0.005/GB for each additional region. Just use the regions where you have lots of visitors.\n\nNow if you click your storage name (ommstorage), you’ll get a new set of menus where you can use the file manager to upload/access files from your edge storage zone, error handling settings, and the replication tab where you can add more storage zones in case you ever want to expand.\n\nThe last (optional) step would be to set up Bunny Optimizer for image optimization. Otherwise, you’re done!\n\nExclude Files From CDN – lets you serve files locally instead of the CDN. Usually, these files come from plugins designed to disregard cross domain load. In most cases, there is no need.\n\nHeartbeat shows you when other users are editing a page/post, real-time plugin notifications, etc. Disabling/limiting it in certain areas can decrease CPU usage since it runs every 15-60s by default. I recommend disabling Heartbeat in the backend and frontend, then reducing activity (to 120s) in the post editor since you want to keep things like autosaves and similar functions.\n\nEnable the add-ons you use.\n\nVarnish – only turn on if your host uses Varnish. This is turned on automatically for some hosts using Varnish (Cloudways, Flywheel, WP Engine) and off if using SiteGround, Kinsta, Pressable.\n\nWebP Compatibility – disable in most cases. Even if you use WebP, it should be disabled when using a CDN, .htaccess rules, or <picture> elements to serve WebP images (also disable when using Optimole, ShortPixel Adaptive Images, or WebP Express). WP Rocket doesn’t create WebP images (I use BunnyCDN) so it’s just for compatibility reasons. If you notice images aren’t being served in WebP, try their helper plugin to force images which are using unsupported attributes.\n\nCloudflare – enable when using Cloudflare but leave off when using APO. The modify options have more settings to add your global API key, Cloudflare email, and Zone ID (for compatibility). No, that’s not my real Cloudflare API key shown in the screenshot – but thanks for looking out :)\n• Global API Key – found in your Cloudflare dashboard here.\n• Account Email – same email used in your Cloudflare account.\n• Zone ID – found in the Overview tab of your Cloudflare dashboard.\n• Development Mode: – only use when making lots of code changes to your site.\n• Optimal Settings: – activates WP Rocket’s recommended Cloudflare settings which include the following changes: set the caching level to standard, enable auto minify for JavaScript, CSS and HTML, disable Rocket Loader, set browser cache expiration to 1 year.\n• Relative Protocol: – only used for flexible SSL, but full SSL is preferred.\n• Clear All Cloudflare Cache Files – Cloudflare’s cache should be purged automatically when WP Rocket’s is, but if you need to do it manually for some reason, you can do it here.\n\nSucuri – only enable if you’re using Sucuri’s firewall which clears Sucuri’s cache when WP Rocket’s cache is cleared. Modifying options prompts you to enter your Sucuri Firewall API Key.\n\nThis section talks about Cloudflare, APO, and configuring Cloudflare’s dashboard. You don’t need to do this if you setup Cloudflare Enterprise via Rocket.net, Cloudways, or FlyingProxy.\n\nCloudflare APO – you can setup APO using the Cloudflare plugin, then disable the Cloudflare add-on in WP Rocket. Some people use the cache everything page rule or Super Page Cache for Cloudflare, but they’re not the same and cache everything can have admin bar issues. Is APO worth $5/mo? Yes… I would test your site in KeyCDN’s Performance Test and do a benchmark before/after APO. It caches HTML and you should see a TTFB improvement in several locations.\n\nStep 1: Sign up for Cloudflare. Some hosts let you add Cloudflare directly in your hosting account, but the settings are limited. The only exception I would do this is if you’re using Enterprise. Otherwise, add your website to Cloudflare and they’ll assign you 2 nameservers.\n\nStep 2: Change nameservers in your domain registrar to Cloudflare’s.\n\nStep 3: In Cloudflare’s DNS settings, change your website from DNS Only to Proxied. This activates their CDN by proxying traffic and is required to use APO as well as other features.\n\nStep 4: If you’re not using APO, turn on the Cloudflare add-on in WP Rocket, click “modify options,” then fill out your Cloudflare information (already explained in the add-ons section).\n\nStep 5: If you plan on using APO, follow Cloudflare’s instructions or use mine:\n\nStep 7: Check your Cloudflare Analytics in a few days to see how much bandwidth is being offloaded, along with other analytics. BunnyCDN may be doing some of the heavy lifting too.\n\nUnfortunately, WP Rocket doesn’t optimize images besides the lazy load settings.\n\nFor other image optimizations like compression/WebP, Optimole is better than Imagify because it resizes images for mobile (which can improve mobile LCP), supports AVIF, and has viewport + network-based optimizations like serving lower quality images on slow connections. However, image CDNs are better than plugins since they optimize images “on the fly” without adding bloat (such as backups). They’re also less taxing on your server and don’t use resources.\n\nWP Rocket recommends Imagify because it’s their plugin. But just like WP Rocket/RocketCDN, it’s meant to be easy with lacking features. If you go this route, you ideally want to use it to compress images with about an 85% compression level. You could also optimize images before uploading them in Photoshop or other tools, but this doesn’t address mobile resizing, AVIF, etc.\n\nImport or export your WP Rocket settings, or rollback to the previous version.\n\nExport Settings – export your settings to use on multiple sites.\n\nRollback – if you updated WP Rocket and it caused issues, fall back to the previous version.\n\nWP Rocket’s helper plugins are listed on Github or you can do a Google search for them. I tried to list some of the most common helper plugins in this guide, but there are quite a few others.\n\nSome of my recommended WP Rocket settings should already help reduce CPU usage, like increasing cache lifespan and only preloading your important sitemap URLs. WP Rocket’s documentation also recommends setting up a cron job to clear WP Rocket’s cache/preload during low traffic hours, decreasing the remove unused CSS processing batch, or disabling preload completely. Beyond the documentation, here are a few other tips to reduce CPU usage:\n• Offload as much bandwidth as you can to CDNs.\n• Use hotlink protection to stop people from copying images.\n• On top of Heartbeat, limit post revisions and autosave interval.\n• Keep your PHP, WordPress, MySQL, and other software updated.\n\n16. Plugins You Need With WP Rocket\n• Perfmatters – remove bloat, better image optimization when it comes to preloading and background images, faster remove unused CSS, and a script manager to unload CSS/JS. In case you don’t want to pay for it, you can try plugins like Preload Images + Asset CleanUp.\n• Optimole – more optimizations than Imagify and ShortPixel, but image CDNs are better.\n• ShortPixel Adaptive Images – if you’re using ShortPixel, this is needed to resize images for mobile, use ShortPixel’s CDN, and other features which are listed on the plugin page.\n• Cloudflare or BunnyCDN Plugin – assuming you’re not using RocketCDN, you’ll probably be using Cloudflare or BunnyCDN (or both) who each have their own plugin (BunnyCDN plugin for setting up BunnyCDN as well as Cloudflare’s plugin for adding Cloudflare APO).\n• Exclude LCP Images From Lazy Load – their helper plugin excludes a set number of above the fold images from lazy load for better LCP, instead of excluding them manually.\n• Redis Plugin – while other plugins like LiteSpeed Cache have an option to connect Redis, WP Rocket doesn’t, so you’ll need to install a separate plugin. The first step is to enable it in your hosting account, download the Redis plugin recommended by your host, then use it to connect. Most hosts support Redis, Memcached, or both (Redis has more advantages).\n\nConfigure WP normally, then disable everything in Perfmatters except these settings:\n\nGeneral Settings – mostly for bloat removal and limiting things like post revisions, autosave interval, and tweaks that can also reduce CPU usage. The only duplicate feature is Heartbeat Control, so only use one plugin for that. Otherwise, the screenshot shows the same setting I use.\n\nRemove Unused CSS – if real world browsing speed is more important than scores, use Perfmatters to remove unused CSS with the “file” method and disable it in WP Rocket. I also emailed Brian from Perfmatters who said to disable all CSS settings in WP Rocket when using it.\n\nPreload Critical Images – WP Rocket can’t preload images, so do it in Perfmatters. Set the number of images that usually load above the fold (usually 2-3) and they’ll be preloaded. You don’t need to enable lazy load in Perfmatters to use it, and there’s no need to use WP Rocket’s helper plugin to exclude a set number of images (Perfmatters does it with these automatically).\n\nCSS Background Images – Perfmatters makes it easy to lazy load CSS background images which includes a perfmatters-lazy-css-bg helper class you can add to additional CSS classes. Again, you can use WP Rocket’s lazy load and keep Perfmatters’ off while still using this feature.\n\nPreload – since WP Rocket only preloads fonts, you can use Perfmatters to preload CSS, JavaScript, and other file types. One example is preloading wp-block-library if you’re using Gutenberg (or if you’re not using Gutenberg, you can disable its CSS file in the script manager).\n\nScript Manager – removes unused plugins or single CSS/JS files on pages they’re not used, which can reduce CSS/JS. Enable the script manager in the Assets settings, go to your script manager settings, then enable test mode + display dependencies. Test mode lets you test the script manager without breaking your site by only showing changes to logged-in admins, but disable it when you’re done when you’re ready to publish changes. Display dependencies lets you see all plugins using jQuery in your script manager, which you should avoid when possible.\n\nWP Rocket addresses core web vitals better than SiteGround Optimizer, so I recommend only using SiteGround Optimizer for all 3 caching options, then disabling WP Rocket’s page caching using their helper plugin (so it doesn’t overlap with file-based caching). Then, you’ll configure WP Rocket normally, but leave all other settings disabled in SiteGround Optimizer. If you want, you can still use it for image compression/WebP. WP Rocket also has their own documentation.\n\nThis is why I swapped WP Rocket for FlyingPress:\n\nIf you understand how TTFB works (and that your hosting/CDN are the 2 biggest factors), Rocket.net with their free Cloudflare Enterprise is a no-brainer. I’ve already used Cloudways Vultr HF, SiteGround cloud, and tried Kinsta/WPE/WPX. None of these have a ~100ms global TTFB because they use inferior hardware/software/CDNs which you’ll see in the table below.\n\nPlus, they usually end up costing more. Especially between price increases, upgrades from CPU/PHP worker limits, half-ass CDN integrations charged as add-ons, and paid migrations. Rocket.net doesn’t charge for add-ons (or do any of this) and support makes Kinsta look like SiteGround. From sign up to launch, they handled everything with unlimited free migrations.\n\nIt makes no sense… why pay more for a worse TTFB/support? Just because they’re “less popular” since they launched in 2020 and don’t do aggressive marketing? So I joined their affiliate program (which pays the exact same as my previous 2 hosts) and started changing hosting recommendations. Since then, they’ve been getting excellent feedback in Facebook groups and TrustPilot. And for me personally, it’s satisfying seeing people’s migration results.\n\nAside from my biased opinions, you can read Ben’s AMA or search for feedback in Facebook groups. Sure, they have all 5/5 star TrustPilot reviews, but you’ll also see many people moving from other cloud hosts to Rocket and not the other way around (even if you search SG’s 11,000 TrustPilot reviews). You can see more migration results by searching their TrustPilot for “TTFB.”\n\nThey let you try them for $1 your 1st month with free migrations. Or reach out to Ben and schedule a demo if you want to check them out beforehand. Rocket’s dashboard is easy and Cloudflare Enterprise works automatically, so the only thing I had to do initially was upgrade PHP versions, ask support to install Redis, then remove old CDN/image optimization plugins.\n\nStill have questions? Drop me a comment and I’ll get back to you as soon as I can."
    },
    {
        "link": "https://wp-rocket.me",
        "document": "Experts in WordPress recommend WP Rocket as the best caching plugin for WordPress to achieve incredible speed results and optimize your website for the Core Web Vitals. Let’s see why.\n\nDiscover high performance like never before. Thanks to WP Rocket, you can instantly see a great improvement in your website performance and Google PageSpeed Insights score — including Core Web Vitals. Designed for WordPress and constantly updated to keep up with the latest web performance requirements, WP Rocket not only speeds up your loading time, it also dramatically improves your overall website performance to help you address the most important PageSpeed Insights recommendations.\n\nSave time: let us do the heavy lifting WP Rocket delivers results out of the box with 80% of web performance best practices applied right upon activation. Your site will benefit from WP Rocket as soon as the plugin is installed and activated. Forget configuration headaches: the setup takes 3 minutes flat to give you a faster website in a few clicks. No need to be a tech expert or touch the code, the default configuration will do its magic right away. With WP Rocket, let us do the work for you!\n\nWP Rocket comes with the most powerful features to make your website blazing fast from the get-go. On top of its default features that will make your site faster in a blink (page caching, browser caching, or GZIP compression), WP Rocket offers a set of advanced options to boost your performance even more, including delay JavaScript execution, remove unused CSS, minification and LazyLoad. WP Rocket includes all the best optimization options you would normally get with 3-5 plugins!\n\nWP Rocket is a great caching plugin that hits all the marks, and their team has been a delight to work with. Our customers love it because it speeds up their sites, simple as that! When a Divi customer asks us what the best caching plugin is, we are happy to recommend WP Rocket."
    },
    {
        "link": "https://startblogging101.com/wp-rocket-settings",
        "document": "Are you looking for the best WP Rocket settings to speed up your website and pass Google’s Core Web Vitals in Google PageSpeed Insights?\n\nWP Rocket currently powers over 1,700,000+ websites and is one of my top recommended caching plugins to supercharge your website speed.\n\nWith so many options to choose from between WordPress caching plugins, it’s hard to know what WP Rocket settings should be enabled or disabled, and whether or not you have two caching plugins doing the same thing.\n\nOne of my favorite things about WP Rocket is that it takes care of everything in one single plugin, so you don’t need to download a bunch of optimization plugins which only increases the chance of hurting your website speed due to conflicting plugins trying to do the same thing.\n\nThis WP Rocket best settings tutorial will guide you through each area and tell you exactly which settings you should apply depending on your situation so that you can have a very fast WordPress site that passes Google’s Core Web Vitals which will get you a precious Google ranking boost.\n\nOne important thing to keep in mind – the WordPress hosting you use is the most important factor for having a fast WordPress website.\n\nIf you are using slow WordPress hosting, your site will be slow no matter how many optimizations you do to it.\n\nTherefore, head over to the Start Blogging 101 hosting page to determine if you’re using slow hosting and if you could benefit from upgrading to higher-performance hosting.\n\nThis WP Rocket tutorial is one of the most comprehensive guides on the web right now. It’s a longer one, but I encourage you to use the Table of Contents below and follow along as you need.\n\nSo, are you ready? Let’s speed up your website.\n\nUse the best WP Rocket settings guide below to jump around as you need:\n\nFirst and foremost, let’s talk about how fast your website can be if you use the correct setup along with the best WP Rocket settings that I’ll go over.\n\nWith my recommended WP Rocket plugin settings, you can pass Core Web Vitals for both desktop and the mobile tab in Google PageSpeed Insights which is the hardest one to optimize for.\n\nHere’s a GTMetrix report ran on this exact WP Rocket tutorial which passes all Core Web Vitals with very fast speeds.\n\nGetting high scores like these is very easy by doing four things:\n• Using a lightweight, customizable WordPress theme (I highly recommend the Kadence Theme or you can read my full Kadence Theme Review)\n• Not using third-party page builders and using the built-in WordPress editor (Gutenberg) to build your page (Join my WordPress Without Page Builders Facebook Group)\n\nFeel free to read my full Cloudways Review or Getting Started with Cloudways if you want to use the same extremely high-performance hosting that is powering this website.\n\nIf you want to learn exactly how to make your site this fast and pass Core Web Vitals which will get you a Google ranking boost, then check out my 7 Days to WordPress Speed Mastery email course. It’s 100% free as a way of saying thank you for reading my content and supporting me. 🙂\n\nAs soon as you install and activate WP Rocket, the plugin will apply a number of “safe” default settings which should work for the vast majority of websites.\n\nHowever, there are still more settings we can configure to make your site even faster.\n\nIf you don’t want to read through this entire guide, I went and compiled all of my recommended WP Rocket settings in a condensed overview which should work for most WordPress sites.\n\nHere, you can see which license you have. I currently have the Infinite license so I can use it on as many websites as I’d like because it’s the caching plugin I recommend for basically any site.\n\nYou can also see your Expiration Date of when your WP Rocket license will expire.\n\nAfter your WP Rocket license expires, WP Rocket will still work, but you won’t receive any support or future updates.\n\nI would highly encourage keeping your license renewed each year if you’re using WP Rocket because each update is crucial in making sure your site doesn’t break.\n\nOn the dashboard, you can also get RocketCDN which is their own CDN for an additional cost.\n\nPersonally, I wouldn’t recommend RocketCDN as there are other better CDNs that integrate perfectly with WP Rocket that I discuss in the CDN section.\n• Enable caching for logged-in WordPress users – (unless you use a theme or a plugin that has users log into your site)\n• Cache Lifespan – 10 hours. Your cache will expire and be rebuilt every 10 hours which works for the vast majority of users.\n\nThese are the best WP Rocket settings for the cache section assuming that you’re using a mobile-responsive WordPress theme (which should be nearly all of them) and don’t allow users to log in to your site.\n\nMobile Cache – You should caching for mobile devices (the first checkbox). This will speed up your site for your mobile visitors. “Mobile” in WP Rocket terms refers to phone users only. Do not enable “separate cache files for mobile devices” unless you have a dedicated theme or plugin only for mobile devices (you probably don’t). Also, if WP Rocket detects any of these specific themes/plugins, it will enable that option by default for you and be grayed out. When the “separate cache files for mobile devices” option is enabled, WP Rocket serves an entirely different cache file to phones than it does to tablets or desktop devices.\n\nUser Cache – This option creates a dedicated set of cache files for each logged-in WordPress user. Leave this option disabled unless you use something like a membership theme or plugin where users log in and each user has different content that they see.\n\nCache Lifespan – Here is where you can specify the time after which the global cache is cleared. The default is 10 hours. Cache files that are older than the time you have specified will get deleted. If you have “Preloading” enabled (it gets enabled by default), your cache will then be preloaded automatically which means there’s nothing you’ll have to do. You can always manually clear the cache whenever you want. If you notice that issues appear periodically, you may have to reduce your lifespan to less than 10 hours.\n• Optimize CSS delivery – – Choose “Remove Unused CSS” option for best performance, but may cause issues. If you see issues, choose “Load CSS Asynchronously” which is the safest option\n\nThese are the best settings for the File Optimization section within WP Rocket, but you have to be careful with a few of them.\n\nThe File Optimization section contains a gold mine of optimizations that will help you pass Core Web Vitals and will take care of a lot of the speed suggestions in Google PageSpeed Insights and GTMetrix.\n\nRead on to get an explanation of each WP Rocket File Optimization setting below.\n\nYou should both settings: Minify CSS files and Minify JavaScript files. Doing this will increase the loading speeds of your website by removing all unnecessary characters in your CSS and JS files such as empty spaces, empty lines, and comments.\n\nMinifying your CSS and JS files is generally safe and shouldn’t break your site.\n\nHowever, you will see a warning when you enable these options that says “This could break things! If you notice any errors on your website after having activated this setting, just deactivate it again, and your site will be back to normal.”\n\nAfter enabling these options, click through your site and make sure everything still looks good.\n\nIf you enable the Minify CSS files and Minify JS files options, then the option to Combine CSS files and Combine JS files will light up.\n\nI personally would recommend both the Combine CSS files and Combine JS files.\n\nBesides, if you enable the “Delay JavaScript execution” feature which I’ll go over shortly, then the Combine JS files feature will be disabled by WP Rocket automatically to ensure scripts are loaded in the proper order.\n\nGenerally, if your hosting supports and uses HTTP/2 (which almost all of them should), you want to disable both the Combine CSS files and Combine JS files options.\n\nPlus, with HTTP/3 coming on the horizon, you will have better performance by not combining your files.\n\nThe reason for this is because HTTP/2 allows for all the small files to download simultaneously which means they all load up at the same time without each file slowing the other one down.\n\nIf you combine all your files into one big file, your server will generally take longer to download all those versus just leaving them separate.\n\nAlso, combining all those files means that something could go wrong and break on your site because scripts aren’t always loaded in the correct order.\n\nIf minifying or combining your CSS or JS files causes an issue, you can use the “Excluded CSS Files” or the “Excluded JavaScript Files” sections to specify URLs of CSS or JS files to be excluded from minification and concatenation.\n• WP Rocket – Find the right JavaScript files to exclude from minification\n\nThe WP Rocket Optimize CSS Delivery option helps address the “Eliminate render-blocking resources” suggestion in Google PageSpeed Insights for your CSS files.\n\nIt does this by automatically generating the critical path CSS needed to render the visible part of your website.\n\nThis means that WP Rocket goes and figures out only the minimum necessary CSS needed to load all your content above the fold for each public post type (posts, pages, products, etc.).\n\nYou want to the option to “Optimize CSS delivery” in WP Rocket.\n\nAfter you enable the “Optimize CSS delivery” option, you will have a choice between two options: “Remove Unused CSS” or “Load CSS Asynchronously.”\n\nFor the best performance, you should choose the “Remove Unused CSS” option.\n\nChoosing to remove unused CSS will address the “Remove unused CSS” suggestion in Google PageSpeed Insights.\n\nKeep in mind that this option will remove and not load certain CSS, so you’ll want to check your site and make sure that everything looks as it should.\n\nIf something is broken with the “Remove Unused CSS” option, then you should choose the “Load CSS Asynchronously” option instead which is the safest choice.\n\nThis option will first generate the critical path CSS needed. Then, all of the remaining CSS files get loaded asynchronously, deferred, without render-blocking which is why this helps address the “Eliminate render-blocking resources” suggestion in Google PSI.\n\nThe Load JavaScript deferred feature in WP Rocket addresses the “Eliminate render-blocking resources” suggestion in Google PageSpeed Insights for your JavaScript files.\n\nJust as the Optimize CSS delivery option helps eliminate render-blocking CSS files, the Load JavaScript deferred option helps eliminate render-blocking JavaScript files which are usually the heaviest files and should help dramatically lower your First Input Delay time for Core Web Vitals (or Total Blocking Time).\n\nYou should the option to “Load JavaScript deferred.”\n\nFor the best performance on your site, it’s usually recommended to load JavaScript files in the footer of your website or defer them so that they don’t block the downloading of other assets on your site which slows it down.\n\nEnabling this option will load each JavaScript file on your website with the attribute.\n\nIf you find that enabling this option breaks your site due to a problematic script, you can specify URLs or keywords of JavaScript files to be excluded from defer.\n\nThe Delay JavaScript execution feature in WP Rocket is an incredible feature that could potentially increase your website’s loading time by several seconds.\n\nWhat does it do? Delay JavaScript execution improves performance by delaying the loading of all JavaScript files and inline scripts until the user interacts with your page (for example, scrolling, moving the mouse over the page, touching the screen, pressing a key, etc.).\n\nIf you’re familiar with lazy-loading for images, this works like lazy loading, but for JavaScript files.\n\nThe Delay JavaScript execution feature improves several speed recommendations in Google PageSpeed Insights including the following:\n\nYou should the “Delay JavaScript execution” option in WP Rocket.\n\nEnabling Delay JavaScript execution will also likely improve your Largest Contentful Paint and First Input Delay for Core Web Vitals due to delaying the heavy resource-intensive JavaScript that many websites run (such as third-party scripts like Google Analytics, AdSense, live chat plugins, Gravatars, Facebook Pixel, YouTube embeds, and social sharing plugins).\n\nOne important note, if you enable the Delay JavaScript execution option in WP Rocket and have the Combine JavaScript files option enabled, it will automatically disable the combine JS option to ensure that scripts are loaded in the correct order so that your site doesn’t break.\n\nThis is why I highly encourage not combining your CSS and JS files because your site will likely be faster (assuming it’s using HTTP/2) and your site will have a lower chance of breaking.\n\nThe “Delay JavaScript execution” feature can be very hit or miss for websites depending on how many scripts you have running. Running a bunch of third-party scripts on your page can mean that activating this feature may break functionality.\n\nIf you find that this feature doesn’t work as well as you’d hope, then I recommend giving the FlyingPress caching plugin a try developed by Gijo from WP Speed Matters. FlyingPress offers a better solution than WP Rocket by delaying JavaScript until user interaction.\n\nI switched from WP Rocket to FlyingPress in 2021 and haven’t looked back. Feel free to read my FlyingPress best settings tutorial which goes over everything.\n\nThe WP Rocket Media section will greatly save on your server’s resources and your page’s fully loaded time by lazy loading images, iframes, and embedded YouTube videos.\n\nThe “Add missing image dimensions” setting will help lower your Cumulative Layout Shift (CLS) scores by adding missing dimensions to your images (if needed).\n\nOne important note is that WP Rocket itself does not create WebP versions of images. You will need to use another plugin such as ShortPixel to do that for you. I’ll discuss that more in the Enable WebP Caching section.\n\nThe LazyLoad section in WP Rocket will fix the “Defer offscreen images” suggestion in Google PageSpeed Insights.\n\nLazy loading is used to delay the loading of images, iframes, and videos until the user scrolls down on your page and actually needs to see them.\n\nThis significantly helps your site out in several ways. It will help reduce the initial load time of your pages, the number of initial HTTP requests, and also save server resources since images will only be requested and downloaded if the user scrolls to them.\n\nYou should all three checkboxes in the LazyLoad section of WP Rocket:\n\nNOTE: WordPress introduced native lazy loading with version 5.5. This native WordPress lazy loading will automatically be disabled when WP Rocket’s LazyLoad is active, so there’s nothing you have to do.\n\nThe “Replace YouTube iframe with preview images” feature will drastically help increase your page speed and Core Web Vitals scores if you use embedded YouTube videos on your site.\n\nThis feature will show a preview image in place of your video rather than loading all of the bloated code that comes with an embedded YouTube video.\n\nThen, if the user clicks play, all of the code will be run then.\n\nIf you use any type of video on your WordPress website, whether it be YouTube videos or course videos with an LMS using something like Vimeo, then you should definitely check out my Presto Player plugin review.\n\nPresto Player is the only WordPress video player plugin you need. It takes any type of video you’d need on your site and supercharges it along with including performance options to significantly speed up your website speed.\n\nThe “Add missing image dimensions” feature in WP Rocket helps fix the “Use explicit width and height on image elements” suggestion in Google PageSpeed Insights and GTMetrix and this will also significantly help fix your Cumulative Layout Shift (CLS) scores for Core Web Vitals.\n\nYou should the “Add missing image dimensions” setting in WP Rocket.\n\nHow does adding the missing image dimensions help fix your Cumulative Layout Shift (CLS) scores?\n\nWhen a page goes to load, if there is no explicit width and height specified for an image, there will be no space reserved for that image which causes all of the content below the image to shift when the image finally loads in. This increases your CLS number and leads to a poor experience for your users.\n\nBy enabling the “Add missing image dimensions” setting, WP Rocket will go through and automatically apply all the correct image widths and heights for applicable images.\n\nIn turn, this will reserve the correct amount of space on your page when it goes to load. Now, when the image finally loads in, none of your content shifts because there was a blank white box already in place for the image.\n\nThis will decrease your CLS number and lead to a great experience for your users.\n\nYou should the “Enable WebP caching” setting in WP Rocket ONLY if you’re using WebP images on your WordPress site.\n\nWebP images are supported on every major browser, so you should be using them.\n\nIf you want to learn more, you should read more about WP Rocket WebP compatibility.\n\nNOTE: WP Rocket does NOT create WebP images for you (I wish it did). They suggest you use the Imagify plugin to do this since it was created by their parent company. I’m not a huge fan of Imagify. Most people prefer to use ShortPixel instead. ShortPixel is also starting to allow converting images to AVIF format which is even better than using WebP.\n\nUsing a good image compression plugin such as ShortPixel to create WebP or AVIF versions of your images will fix the “Serve images in next-gen formats” suggestion in Google PageSpeed Insights.\n\nWP Rocket automatically detects some common image compression plugins and will enable the WebP caching setting for you if you’re using:\n\nAnother option to serve images in next-gen formats such as WebP would be to use an excellent CDN such as Bunny.net to serve your assets and hook it up through WP Rocket. More on that in the CDN section.\n\nAlso, WebP images will be natively supported in WordPress 5.8 meaning you’ll be able to upload WebP files directly to your WordPress Media Library. Even better, the media component team is looking into WordPress doing the conversion to WebP on uploaded images so that WebP will be used as the default format for sub-sized images. Now THAT would be cool!\n\nUntil WordPress (hopefully) adds that feature, you can manually convert your images to WebP using awesome web-based tools such as Squoosh or export your images out as WebP using image editing tools.\n• Prefetch DNS Requests – Tells the browser to perform the DNS resolution of third-party sites before its needed.\n• Preload Fonts – Enter fonts on your site to be preloaded.\n\nYou can think of preloading in WP Rocket as you telling the browser that certain resources are going to be needed ahead of time which can help improve your website speed and fix some preloading suggestions in Google PageSpeed Insights. (See “How is the WP Rocket cache preloaded?“)\n\nFor example, say we know that Google Fonts are going to be loaded on our site. We can preload the request to Google Fonts which will tell the browser that we’ll need Google Fonts before the browser even gets the request.\n\nThis helps speed up your WordPress site. It’s almost like giving your site fortune-telling powers. 🔮\n\nThese are the WP Rocket best settings for the Preload section. I’ll discuss each section in more detail below.\n\nWhen you install WP Rocket for the first time, the “Activate Preloading” setting will be enabled by default, and your site’s home page and links found on it will be preloaded immediately to ensure that your site is fast right away.\n\nYou should all of the checkboxes in the “Preload Cache” section of WP Rocket:\n\nIf you use an SEO plugin such as Rank Math, SEOPress, The SEO Framework, All-in-one-SEO, or Yoast SEO, the sitemaps that are generated by those plugins are detected, and checking the “Activate sitemap-based cache preloading” will use those sitemaps for preloading.\n\nIf you don’t use one of those plugins or you want to specify sitemaps for preloading, you can enter the URLs in the “Sitemaps for preloading” section.\n\nYou should the “Enable link preloading” setting in WP Rocket.\n\nEnabling this option will improve the perceived loading time of pages for a user who is navigating around on your site.\n\nHow does enable link preloading work? If a user hovers over (or touches) a link on your site for 100 ms or more, the HTML of that page will start to be fetched in the background. That way, when the user actually does click or tap the link, the page will appear to load instantly.\n\nKeep in mind that this setting only improves the user experience and does NOT improve any page speed suggestions in Google PageSpeed Insights or GTMetrix.\n\nThat being said, this is an extremely nice feature for giving your users a positive experience on your website which is always a great thing.\n\nIf you use third-party content on your website (for example, Google Fonts, Google Analytics, AdSense, Google Tag Manager, YouTube, Gravatars, etc.), you may want to add the origin domain to the “URLs to prefetch” box.\n\nWhat prefetching DNS requests in WP Rocket does is that it tells the browser to perform the DNS connection before the file is needed which can slightly boost your page loading time.\n\nHow do you use DNS prefetching in WP Rocket?\n• Find the third-party domain you’re loading on your site\n• Remove the or and keep the double slash\n• Only enter the top-level domain of the third-party site\n\nSo, for example, if you have a request to Google Fonts that looks like this:\n\nYou would enter it in the “URLs to prefetch” box, like this:\n\nThe Preload Fonts feature in WP Rocket allows you to tell the browser to start downloading fonts that it otherwise wouldn’t realize until much later, usually due to the font being referenced within a CSS file. (See Preload Fonts WP Rocket Documentation).\n\nNOTE: To improve the Largest Contentful Paint metric for Core Web Vitals, Preloading Fonts will be disabled by WP Rocket automatically on pages where Optimize CSS Delivery is active.\n\nWhich fonts should I preload? After running your page through Google PageSpeed Insights, you may see a speed suggestion that says “Preload key requests.”\n\nIf you open this up, you should see any font files that need preloading. They may look like “…fonts/custom-font.woff2“.\n• Right-click on the recommended font in Google PSI and copy the URL\n• Paste the URL into the “Fonts to preload” box in WP Rocket\n\nKeep in mind that the font MUST be hosted on your own domain, or your CDN’s domain.\n\nYou cannot enter externally hosted fonts such as Google Fonts here. As of WP Rocket version 3.7, Google Fonts are automatically optimized, so there’s nothing you have to do.\n\nIf you only use Google Fonts (that are not locally hosted) or you use system fonts, you do not have to do anything with the Preload Fonts section.\n\nAlso, DO NOT PRELOAD EVERY FONT! Only preload fonts that would delay the rendering of your pages. If you preload a bunch of fonts that aren’t necessary for the rendering of your page, you’re actually going to slow your site down more. So, be careful!\n\nIf you use an eCommerce plugin on your WordPress site that is not supported by WP Rocket, you can use the WP Rocket Advanced Rules section to help skip caching based on pages, cookies, or user agents.\n\nThat being said, if you use any of the major WordPress eCommerce plugins such as WooCommerce or BigCommerce, WP Rocket is already compatible with all of those.\n\nWP Rocket automatically excludes the “Cart,” “Checkout,” and “My Account” pages from the cache for these plugins:\n\nTherefore, if you use any of the eCommerce plugins listed above on your WordPress website, you don’t have to add anything in your Advanced Rules in WP Rocket as it should already work as expected.\n\nIf you’re having any issues with cart widgets, caching, or other issues related to eCommerce, then check out the Using WP Rocket On Your Ecommerce Site documentation.\n\nNever Cache URLs – Here is where you can specify URLs of pages or posts that should never be cached (enter one per line). Certain pages like custom login or logout URLs should be excluded from the cache. If you’re using one of the eCommerce plugins that isn’t supported by WP Rocket, then this is where you’d add your checkout and cart pages.\n\nNever Cache Cookies – This option will prevent caching and optimization based on the presence of the specified cookie. This is similar to the above option, but using cookies instead of URLs. You can specify full or partial IDs of cookies that, when set in the visitor’s browser, should prevent a page from getting cached (enter one per line).\n\nNever Cache User Agents – This option is used to prevent cached and optimized pages from being served on certain devices and in certain browsers. You can specify user agent strings that should never see cached pages (enter one per line).\n\nAlways Purge URLs – When a post or page is updated on your site, WP Rocket goes and partially clears the cache including the cache for that post or page, your home page, and related content. So, all of the common use cases should already be covered. However, you can specify URLs that you always want purged from the cache whenever you update any post or page (enter one per line).\n\nCache Query Strings – Cache for query strings enables you to force caching for specific GET parameters. This is only used in some very specific cases.\n\nThe WP Rocket Database section allows you to clean up your database and also schedule automatic database cleanup which will optimize your site for fast loading and reduce database bloat.\n\nThat being said, you want to be aware of what each of these database cleanup options does and whether you want to clean them up or not.\n\nThese are the best WP Rocket settings for the Database cleanup and optimization section. If you are like me and use post revisions and auto drafts, then you should disable both the “Revisions” and “Auto Drafts” options so that they don’t accidentally get removed. Otherwise, feel free to enable those options to clean them up if you don’t use them.\n\nLet’s go over each WP Rocket database optimization option in more detail.\n• Post Cleanup\n• Revisions – After your post or page is officially published, revisions are the older versions of your post or page that are saved.\n• Auto Drafts – As you’re creating or editing a post or page, automatic drafts get saved of your content along the way so that you don’t lose your work.\n• Trashed Posts – These are posts that you’ve deleted and put in the trash.\n• Comments Cleanup\n• Spam Comments – These are comments that have been marked as spam, either by a plugin or manually yourself.\n• Trashed Comments – These are comments that have been deleted and put in the trash.\n• Transients Cleanup\n• All Transients – Transients are temporary options that are created by plugins and are safe to remove. Transients are frequently re-created by plugins so you may not see the number hit zero even after removing.\n• Database Cleanup\n• Optimize Tables – This will optimize the tables in your database so they are running efficiently without any bloat.\n• Automation Cleanup\n• Schedule Automatic Cleanup – Here you can choose how frequently you want your database to be cleaned up and optimized by WP Rocket. You can choose “Daily,” “Weekly,” or “Monthly.” I would recommend choosing “ ” so your database stays optimized every week.\n\nAfter you run the database cleanup, it cannot be undone. So, before you clean up your database, especially if you’re removing post revisions, you should make sure you have a backup of your website in case you remove anything you didn’t mean to.\n\nMost good WordPress hosts should automatically do a daily backup of your website, so you should be good, but you could always install a backup plugin such as UpdraftPlus to have backups separate from your host.\n• Enable Content Delivery Network – (if you are using a CDN with WP Rocket. I recommend using BunnyCDN with WP Rocket)\n• CDN CNAME(s) – Specify the CDN CNAME(s) that will be used for delivering static files\n\nA CDN is a content delivery network. In other words, it’s basically a number of servers that are spread all throughout the world that work together to provide fast delivery of content to users no matter where they are located.\n\nDo I need a CDN? The answer is… it depends.\n\nIs the majority of your website traffic in the same continent as your hosting server? If so, you may not want to use a CDN as it can actually slightly slow down your website by adding another layer.\n\nHowever, if you have a decent amount of your traffic coming from all over the world, then it probably makes sense to use a CDN.\n\nA CDN will cache the content of your website on a number of servers around the world and then when someone goes to access your website, it will pull the data from the CDN server closest to that user which will greatly speed up the time it takes for them to see your website loaded.\n\nWhich CDN should I use with WP Rocket? For the value, I personally recommend using either Cloudflare or BunnyCDN with WP Rocket rather than RocketCDN. Cloudflare offers excellent performance and security options for free while BunnyCDN provides top-notch performance that you can use to serve the static files on your website for a minimal cost. You can even use both Cloudflare and BunnyCDN together if you’d like.\n\nLet’s go over each WP Rocket CDN option below and list the benefits of each one:\n• Cloudflare\n• Offers a free plan with tons of features for speed and security\n• Does not allow you to serve your assets through a CDN URL like BunnyCDN\n• Offers a service called APO (Automatic Platform Optimization) for $5/month which is an incredible feature to enhance performance for WordPress sites and can greatly reduce your TTFB for all global visitors. This site is using Cloudflare APO to serve HTML pages.\n• Can be used in tandem with BunnyCDN where BunnyCDN serves your assets (CSS files, JS files, and images).\n• If you decide to use Cloudflare with WP Rocket, you will set that up in the Add-Ons section, NOT here in the CDN section.\n• BunnyCDN\n• Paid service, but it only costs pennies per GB of data served, so it’s very affordable\n• Allows you to serve your static files (JS, CSS, images) through a CDN URL so your assets could come from a URL such as “cdn.startblogging101.com“\n• This site is using Cloudflare APO to serve HTML pages and BunnyCDN to serve static assets (JS, CSS, and images) for maximum performance.\n• Offers an “Image Optimization” service which can automatically compress your images and serve them in next-gen formats like WebP for you. No plugin necessary!\n• I wrote very easy to follow instructions to teach you exactly how to set up Bunny CDN with WordPress using WP Rocket below.\n\nShould I use RocketCDN with WP Rocket? RocketCDN is a CDN offered from WP Rocket and you’ll see it mentioned throughout their plugin in several places. RocketCDN can be turned on very easily directly within WP Rocket and you can certainly give it a try if you would like. However, for $7.99/month, I personally believe using BunnyCDN or free Cloudflare is a much better choice which will give you better performance for less money. RocketCDN is powered by StackPath.\n\nHow to Set Up BunnyCDN With WP Rocket\n\nFor this section, I’ll show you how easy it is to set up a CDN with WP Rocket. I personally use and recommend using BunnyCDN and so do thousands of others.\n\nStep 2 – Add a pull zone, fill out Name, Origin URL and choose Pricing Zones.\n• Go to the “Pull Zones” tab and click the “Add Pull Zone” button.\n• Enter the “Name” of your Pull Zone where your files will be accessible. This will be your website. For example, “startblogging101“.\n• Enter the “Origin URL” of your website that you wish to accelerate. In my case, “https://startblogging101.com/“.\n• Choose the “Pricing zones” where you want your data to be served. Certain geographical zones have different costs. I would recommend leaving all locations checked.\n• Last, click “Add Pull Zone” to add your new Pull Zone.\n\nStep 3 – Copy your provided “CDN Domain” in the “Installation With Third-Party Plugins” section.\n• In the “Select Your Platform” section, choose “WordPress.”\n• In the “Installation With Third-Party Plugins” section, copy the value next to the “CDN Domain.”\n\nStep 4 – Paste your “CDN Domain” into the CDN CNAME(s) field in WP Rocket.\n\nStep 5 – Hit “Save Changes.” Now, the URLs of all your static files (images, CSS, JavaScript) will be rewritten to the CNAME(s) that you provided. Congratulations! You have successfully set up BunnyCDN with WP Rocket.\n\nHere, you can specify URLs of files that should not be served via CDN if you’re using a CDN with WP Rocket (enter one per line).\n\nThe WordPress Heartbeat API provides a connection for real-time data transfer and syncing between the server and the browser.\n\nHere are some examples of where the WordPress Heartbeat API is used:\n• Autosave and revisions in the post editor\n• Letting you know a post is locked when another editor is working on a post\n• Real-time data displayed on the dashboard by eCommerce plugins\n\nThe Heartbeat API runs a set of tasks every 15-60 seconds which consumes server resources and can cause high CPU usage.\n\nTherefore, WP Rocket offers an option to reduce or disable the Heartbeat API’s activity to help save some of your server’s resources.\n\nYou should the “Control Heartbeat” option in WP Rocket.\n\nIn this section, you have three options for various areas of your site: do not limit the activity, reduce the activity, or completely disable all activity.\n\nReducing activity will change Heartbeat frequency from one hit each minute to one hit every 2 minutes.\n\nKeep in mind that disabling Heartbeat entirely may break plugins and themes that rely on using the Heartbeat API.\n\nHere are my recommended settings for reducing Heartbeat API activity in WP Rocket:\n\nIf you know with absolute certainty that you have no use for the Heartbeat API in one of these areas, then you can choose “Disable” for that area.\n\nHowever, simply reducing the activity in each of these areas is going to save quite a bit on your server’s resources while still allowing everything to work properly which is always a good thing.\n\nWith version 3.9, WP Rocket got rid the add-ons for “Google Tracking” and “Facebook Pixel.”\n\nBoth of these add-ons were used to help fix the Google PageSpeed Insights recommendation of “leverage browser caching” if you were using Google Analytics or Facebook Pixel on your website.\n\nInstead, now all JavaScript files are delayed by default since WP Rocket version 3.9 until user interaction (which I discussed in the Delay JavaScript Execution section).\n\nThere are still a few WP Rocket add-ons offered which I will cover.\n\nIf your site is hosted with Cloudways, WP Engine, or Flywheel, your site will use Varnish for server-side caching.\n\nWP Rocket will automatically detect the environment and enable the Varnish add-on for you.\n\nFor example, I’m using Cloudways to host this website and you can see that WP Rocket detected my hosting and automatically enabled the Varnish add-on.\n\nIf your site is hosted with SiteGround, Kinsta, or Pressable, you don’t need to enable this option because the WP Rocket cache already gets synced with their server cache.\n\nHow to Set Up Cloudflare With WP Rocket\n\nIn the Rocket Add-ons section of WP Rocket, there is an option to integrate your Cloudflare account with WP Rocket.\n\nNOTE: You don’t need to use the WP Rocket Cloudflare add-on in order for your site to work through Cloudflare – it’s only an added convenience. If you have your site working through Cloudflare already, Cloudflare will be active on your site whether you enable the Cloudflare add-on or not. Using the Cloudflare add-on with WP Rocket simply gives you the ability to easily access some settings directly within WP Rocket.\n\nStep 1 – Switch Cloudflare Add-on status to “ON” and then click the “Modify Settings” button.\n\nStep 2 – Get your Global API Key from Cloudflare and paste it into WP Rocket.\n• None Within Cloudflare, click on your account icon in the upper-right and choose “ My Profile\n• Then, click on the “API Tokens” tab.\n• Under the “API Keys” section, click the “View” button on the “Global API Key” line.\n• Enter your account password and you’ll get your Global API Key. Copy it and paste it in the “Global API key” section in the WP Rocket Cloudflare section.\n\nStep 3 – Fill in your “Account email” that you use for Cloudflare in the appropriate box in the Cloudflare add-on section.\n\nStep 4 – Get your Zone ID from Cloudflare and paste it into WP Rocket.\n• On your Cloudflare home page, choose your site.\n• You’ll be on the “Overview” tab for your website. Scroll down until you see the “Zone ID” in the sidebar on the right.\n• Copy your website’s Zone ID and paste it into the “Zone ID” section of the WP Rocket Cloudflare add-on section.\n\nStep 5 – Under the “Cloudflare Settings” section within WP Rocket, flip the “Optimal settings” toggle to “ON” and leave “Development mode” and “Relative Protocol” set to “OFF.”\n\nStep 6 – After you have all your Cloudflare add-on fields filled out in WP Rocket and the ideal WP Rocket Cloudflare settings set, hit “Save Changes.” Congratulations! You have successfully set up Cloudflare with WP Rocket.\n\nHere’s a list of all the WP Rocket Cloudflare Add-on settings explained:\n• Development Mode – Temporarily activates development mode for your website. Development Mode allows you to temporarily suspend Cloudflare’s edge caching and minification features. This gets turned off automatically after 3 hours.\n• Optimal Settings – It’s highly recommended that you enable this setting. WP Rocket will automatically set your Cloudflare configuration for the best speed, performance grade, and compatibility. This option will do a number of things including:\n• Deactivate Rocket Loader (Rocket Loader usually causes more issues than it solves)\n• Relative Protocol – This setting rewrites the URLs of static files (CSS, JavaScript, images) to use a relative protocol ( instead of or ). This setting should only be activated if you use Cloudflare’s “Flexible SSL” feature. If your site runs on full SSL (which most of them should), then you do NOT want to use this feature.\n• Clear All Cloudflare Cache Files – This will clear the Cloudflare cache. This should only be needed for troubleshooting or if you think Cloudflare is serving outdated files.\n\nNOTE: If you decide to use Cloudflare APO with your website using WP Rocket, you will NOT use the Cloudflare add-on through WP Rocket. You’ll have to use the official Cloudflare plugin to handle that for you as described in “Get Started with Cloudflare APO.”\n\nIf you use the Sucuri Website Firewall (WAF) and have their caching enabled, then you’ll want to enable the Sucuri Add-On in WP Rocket.\n\nEach time the WP Rocket cache is cleared, it will automatically clear the Sucuri cache as well.\n\nThis will keep both the WP Rocket and Sucuri caches in sync so that your site is always up-to-date with the latest content.\n\nIn order to get your Sucuri Firewall API key (for plugin), first login to Sucuri.\n\nNext, click on your site and go to the API tab.\n\nCopy the API key (for plugin) field, then paste your Sucuri API key into the “Firewall API key (for plugin)” box in WP Rocket.\n\nThe Sucuri Firewall API key must be in the format of: 32 characters / 32 characters.\n\nLastly, click “Save Changes” and your Sucuri Add-On will be successfully set up in WP Rocket.\n\nWP Rocket recommends that you use the Imagify plugin for image compression since it’s their own plugin.\n\nI used Imagify with WP Rocket for many months, but it wasn’t my favorite plugin to use because it would take a long time to compress images on the fly.\n\nYou can certainly give Imagify a try if you would like, but there are two other options to try that I think are better alternatives.\n• Use the ShortPixel plugin instead of Imagify. ShortPixel does image compression on the fly along with converting images to next-gen formats such as WebP. ShortPixel is even a step ahead as they are already starting to offer AVIF format which provides even better image compression with higher quality images than WebP.\n• Use BunnyCDN as described in the CDN section to have BunnyCDN compress your images and serve them in next-gen formats by using their “Image Optimization” feature. No extra plugin required.\n\nIn the Tools section of WP Rocket, you have a few options of exporting your settings, importing your settings, or doing a rollback to a previous version.\n\nExport settings – Download a backup of your settings so that you can import them on another site or give them to someone else.\n\nImport settings – Choose a WP Rocket settings file from your computer and then click the “Upload File and Import Settings” button to have WP Rocket import all the settings for you.\n\nRollback – If the latest version of WP Rocket causes issues on your site (for example, your site doesn’t look right, something broke, etc.) and turning off certain settings doesn’t work for you, you can always rollback your WP Rocket to the previous version that was working in an emergency.\n\nWP Rocket gives you a convenient Tutorials tab in their plugin with WP Rocket tutorial videos embedded directly within the plugin itself.\n\nThis allows you to view tutorials directly from WP Rocket on certain areas within the plugin so that you can be better informed on what the WP Rocket best settings are for your website in order to speed it up.\n\nOne of the biggest perks to using WP Rocket is the documentation they provide. It’s fantastic.\n\nIf you’re ever wondering what the best WP Rocket settings are for your website, you can simply click “Need Help?” on any of the sections and a popup will show up in the lower-right corner with a documentation article explaining everything you need to know.\n\nOtherwise, feel free to check out the WP Rocket Knowledge Base which is the external version of all their documentation which is loaded with information about the ideal WP Rocket settings to choose for your website setup.\n\nIf you’re looking for alternatives to WP Rocket (either free or paid), I have a few recommendations:\n\nI switched from using WP Rocket to FlyingPress in 2021 and I haven’t looked back. FlyingPress is even easier to configure than WP Rocket, I get even faster speeds, and FlyingPress is cheaper than WP Rocket in the long run since WP Rocket no longer offers renewal discounts.\n\nFlyingPress is created by Gijo over at WP Speed Matters and he also happens to be a member of the Start Blogging 101 Facebook Community!\n\nGijo is an extremely talented and well-respected WordPress developer who cares deeply about WordPress site speed.\n\nFlyingPress is one of the easiest caching plugins I’ve ever set up. It’s very close to a “set it and forget it” type of plugin which is best for those who don’t want to mess with a bunch of settings that potentially break your site.\n\nFlyingPress is a premium plugin that offers even more speed features than WP Rocket such as the ability to lazy render entire HTML elements.\n\nFlyingPress integrates perfectly with Cloudflare APO which is one of the main reasons I moved away from WP Rocket.\n\nSiteGround Optimizer is a fantastic free alternative to WP Rocket that can be used with any hosting ever since their v7 release.\n\nIf you’re hosted with SiteGround, then you absolutely should be using the SG Optimizer plugin. You don’t need WP Rocket on your website and SiteGround actually recommends that you only use their SG Optimizer plugin on your website due to being able to directly integrate with their servers.\n\nCheck out my SiteGround Optimizer best settings to properly configure SG Optimizer on your site and pass Core Web Vitals.\n\nIf you’re on WordPress hosting that uses LiteSpeed servers (popular LiteSpeed hosts on a budget are NameHero or A2 Hosting), then you can give the free LiteSpeed Cache plugin a try.\n\nAlthough this plugin does work with various web servers, you should only be using this when using a LiteSpeed server for the best results.\n\nEven if you’re hosted on LiteSpeed servers, FlyingPress may still provide better speed results than the LiteSpeed Cache plugin will. It’s a matter of trying each one and seeing which one performs better.\n\nAn excellent free alternative to WP Rocket is the WP Fastest Cache plugin.\n\nWP Fastest Cache was one of the first free caching plugins I ever used when I started blogging and it does an excellent job at increasing your site speed for free.\n\nAlthough they do offer a premium version of it as well, the free version still has plenty of optimizations that should help your site performance.\n\nAnd that’s a wrap! I hope this very detailed tutorial on the WP Rocket best settings helps you to speed up your slow WordPress site and pass Google’s Core Web Vitals which will get you that coveted ranking boost!\n\nDid this WP Rocket tutorial help you pass your Core Web Vital scores? Let me know down in the comments below.\n\nGo speed up those websites,\n\nJake ✌️"
    }
]