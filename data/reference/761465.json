[
    {
        "link": "https://community.adobe.com/t5/indesign/scripting-shape-creation/m-p/10523489",
        "document": "Try the code below for you needs.\n\nThanks to Shonkyin for creating the dialog on this post Create a new document from a dialog.\n\nrg2.add('button', undefined, 'OK', {name: 'ok'});"
    },
    {
        "link": "https://developer.adobe.com/indesign/1688653963277/guides/getting-started",
        "document": "Get started and create your first Adobe InDesign Script.\n\nIn this guide, we will cover the basics of InDesign scripting, and create a simple InDesign script using UXP that creates a new document, adds a text frame, and enters text in the text frame.\n\nUXP Scripts should be written in JavaScript, and the file should be saved as . Saving the script as .idjs enables the UXP engine in InDesign and executes the script as UXP script.( .jsx will execute as normal ExtendScript)\n\nInstalling an InDesign script is easy: add the script file to the scripts folder so that it shows up in the Scripts panel. inside the Scripts folder in your InDesign application folder (/Applications/Adobe\\ InDesign\\ 2023\\ (Prerelease-Debug)/Scripts). (Create the Scripts folder if it does not already exist.) Note: this may require admin access.\n\nAlternately, put the script inside the Scripts Panel folder in your preferences folder. Your preferences folder is at:\n\nWindows: Mac: Above, is your user name and references your location and language, for example, en_US.\n\nOnce the script is in the folder, it appears on the Scripts panel inside InDesign. To display the panel, choose Window > Utilities > Scripts.\n\nYou can also put aliases/shortcuts to scripts (or folders containing scripts) in the Scripts Panel folder, and they will appear in the Scripts panel.\n\nTo run a specific script when InDesign starts, put it inside a folder named \"Startup Scripts\" inside the Scripts folder (create this folder if it does not already exist).\n\nTo run a script, display the Scripts panel (choose Window > Utilities > Scripts), then double-click the script name in the Scripts panel. Many scripts display user-interface items (like dialog boxes or panels) and display alerts if necessary.\n\nWe can also right-click on the script name and then click on run in drop-down menu.\n\nThe InDesign Scripts panel is the easiest and best way to run most InDesign scripts. If the panel is not already visible, you can display it by choosing Window > Utilities > Scripts.\n\nTo edit a script shown in the Scripts panel, select the script and choose Edit Script from the Scripts panel menu. Alternatively, you can hold down the Option (Mac OS) or Alt (Windows) key and double-click the script's name. This opens the script in the editor you defined for the script file type.\n\nTo open the folder containing a script shown in the Scripts panel, select the script and choose Reveal in Finder (Mac OS) or Reveal in Explorer (Windows). Alternatively, you can hold down the Command (Mac OS) or Ctrl-Shift (Windows) keys and double-click the script's name. The script folder opens in the Finder (Mac OS) or Explorer (Windows).\n\nBelow, we will create our first hello-world UXP InDesign script.\n\nOur script will creates a new document, adds a text frame, and enters text in the text frame. This demonstrates how to do the following:\n• Start a text editor and enter the following script:\n\nSave the script as a plain-text file with the .idjs file extension to the Scripts Panel folder. To run the script, double-click the script name in the Scripts panel.\n\nCongratulations! You have now created your first InDesign script. Below goes over how to add more features to it.\n\nAdding features to our Hello World script\n\nIn the following guide we will build upon the initial hello-world script we created above.\n\nOur updated script will demonstrates how to do the following:\n• Use a function (or handler in AppleScript).\n• Get the page dimensions and page margins of the active document.\n• Change the formatting of the text in the text frame.\n\nMake sure you have the Hello World document open-this script relies on objects we created in that script. If you closed the document without saving it, simply run the HelloWorld.jsx script again to make a new document.\n\nEither open the ImprovedHelloWorld.jsx tutorial script or perform the following steps to create the script:\n• Enter the following JavaScript in a new text file\n• None Save the script as a plain text file with the file extension .idjs in the Scripts Panel folder.\n• None Once you've opened or created the script file, you can run the script from the InDesign Scripts panel.\n\nOnce you've opened or created the script file, you can run the script from the InDesign Scripts panel.\n\nObviously, our \"Hello World!\" script would not be very useful in your daily work, but it has shown you the basics of InDesign scripting. In the following section, we'll show a script that does a bit more, and that demonstrates scripting techniques you're likely to use in your own scripts.\n\nWhile you can use an InDesign script at any point in your production process, we will start by creating a script that starts at the same point you do: We'll create a new document, set page margins, and define and apply master pages. The following figure shows a block diagram that represents the objects we'll work with.\n\nIn this section, we will look at the DocumentTemplate tutorial script. We'll break the script into a series of blocks; each block demonstrates a specific area or task in InDesign scripting.\n\nThe objects in the object model generally correspond to the names of controls in the user interface, as shown in the following diagram:\n\nIn the following sections, we'll discuss each functional area in the DocumentConstruction script. Open this script in the script editor for the language of your choice if you would like to follow along.\n\nThe following script fragment shows how to create a new document and set the margins of the first master spread.\n\nNow that we have a master spread set up, we will add a baseline grid. Here is a block diagram that shows the relationship between the objects we'll be working with:\n\nNext, we add two text frames to the master pages. These frames will contain the auto-page-number special character and will be positioned at the bottom of the page.\n\nIn the \"Hello World\" example, we created a text frame and specified its position and size using the geometric bounds property-an array containing the top, left, bottom, and right coordinates for the frame. The coordinates correspond to the corners of the frame, just as they would appear in the Control panel. The geometric bounds are: top = 728, left = 70, bottom = 742, and right = 528, as shown in the following two figures:\n\nNext, we add master text frames. The following block diagram shows the objects and properties we'll be working with:\n\nNext, we override one of the master text frames we created and add text.\n\nOur headline looks plain, so we will format it in a paragraph style. To do that, we must create the paragraph style. The following diagram shows the objects and properties we will work with:\n\nNext, we import a text file. We add the text after the headline in the first text frame on the first page. The script displays a dialog box that you can use to select the text file to import.\n\nPlacing a graphic is like importing a text file. Again, the script displays a dialog box that you can use to select the graphic to place. When we place the graphic, InDesign returns a reference to the graphic itself rather than to the frame containing the graphic. To get a reference to the frame, use the parent property of the graphic. Once we have that reference, we can apply an object style to the frame.\n\nCongratulations! You've now created your first advanced InDesign script."
    },
    {
        "link": "https://helpx.adobe.com/indesign/using/scripting.html",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/applescript/comments/1fs713x/learning_how_to_use_applescript_in_indesign",
        "document": "I would like to learn to write AppleScript for use in InDesign. I am currently using some scripts given to me by a business contact. I can modify them in some ways, but want to add functions like automatically converting uppercase letters to lowercase and replacing soft returns. Are there resources you can recommend? I'm not having a lot of luck finding resources online."
    },
    {
        "link": "http://preserve.mactech.com/articles/mactech/Vol.22/22.11/2211AppleScript/index.html",
        "document": "In last month's column, we discussed scripting page layout applications in order to automate your desktop publishing workflow. Specifically, we focused on getting started with scripting QuarkXPress <http://www.quark.com>. This month, we will be discussing another popular and well-known page layout application, Adobe InDesign <http://www.adobe.com/products/indesign/>.\n\nBefore we begin scripting InDesign, I'd like to briefly discuss InDesign's AppleScript support. When you open InDesign's dictionary for the first time, one of the things you may notice is that it is quite long. See figure 1.\n\nInDesign contains extensive AppleScript support for automating almost anything that you can do manually. Sure, you may come across a feature here and there that doesn't have corresponding AppleScript support. However, these situations are certainly few and far between. Furthermore, InDesign's AppleScript support is constantly being revised, improved, and expanded with each new release of the application, so it just keeps on getting better.\n\nWithin InDesign, you will most likely want to automate tasks that involve documents, so that is what we will focus on here. If you need to automate books, you are encouraged to explore InDesign's dictionary for the functionality you require.\n\nA document is referenced using the document class, which can be found in the Basics Suite, in InDesign's dictionary. Documents may be referenced using their index (front to back positioning) or by their name. The following example code demonstrates how a document would be referenced using its index.\n\nSimilarly, the following code would reference a document by its name.\n\nIn most cases, unless you will always only have one document opened in InDesign, it is usually the safest to refer to a document by its name. This way, if the front to back positioning of a document changes, your script will continue to target the correct document.\n\nThroughout this month's column, however, we will be referring to documents by their index. Specifically, we will reference document 1, which will refer to the frontmost document. Another way to target the frontmost document is to reference the active document property of the application class. For example:\n\nChecking for the Existence of a Document\n\nBefore your AppleScript begins interacting with a document, it is often a good idea to make sure that the document exists. This may be done using the exists command, as follows.\n\nAs the example code above demonstrates, the result of the exists command is a true or false Boolean value indicating whether or not the document exists.\n\nDepending on your workflow, you may not need to work within an existing document, but within a new document. To create a new document via AppleScript, use the make command, as demonstrated below.\n\nThe result of the make command is a reference to the newly created document, which may be placed in a variable and referenced later in order to perform additional tasks within the document.\n\nPlease note that in the example code above, we did not specify the size of the document to be created. In this situation, the document would be created using InDesign's default document size. To specify a size for the document, you may optionally specify values for the page width and page height properties, which are actually properties of the document preferences property of the document class. Here is an example of how this would be done:\n\nAgain, make note of the example code above. Here, although we have specified a size for the document, we have not specified unit of measurement, i.e. inches, points, centimeters, millimeters, etc. Because of this, the default unit of measurement will be used when creating the document. In other words, if InDesign's default unit of measurement is set to inches, then an 8.5\" x 11\" document would be created.\n\nYou may optionally choose to specify the unit of measurement when creating the document, as demonstrated below.\n\nAnother way to ensure that the proper unit of measurement will be used when the document is created is to modify the default unit of measurement. This is done by setting the value of the horizontal measurement units and vertical measurement units properties of the document's view preferences to the desired unit type. For example, the following sample code will set the default unit of measurement to inches, and then create the document, ensuring an 8.5\" x 11\" document.\n\nSince InDesign's default unit of measurement may vary from user to user, changing the default unit of measurement to the desired value at the beginning of an InDesign-specific AppleScript is usually good practice. In addition to ensuring that a newly created document will be the correct size, specifying the default unit of measurement at the beginning of your script will help to ensure that resizing or creating other elements, such as text frames, rectangles, etc., will be done using the desired unit of measurement.\n\nDevelopers that are automating InDesign will often have the need to interact with text frames in InDesign documents, whether that need is to insert text, extract text, format text, or more. We will now discuss a number of ways to interact with text frames in InDesign.\n\nFirst and foremost is creating new text frames. This will be necessary if you intend to add text to a newly created document.\n\nBefore creating a text frame, the first thing you will want to do is identify where the text frame will be created, and how large it will be. Once you have determined this information, you will need to translate it into a list of bounds, which can be specified via AppleScript when the text frame is created. Bounds of a text frame will be specified as a list of four items, formatted as follows:\n\nOnce you have determined the desired bounds for a text frame, use the make command to create the text frame. In doing so, specify the bounds for the text frame using the geometric bounds property of the text frame, as demonstrated below.\n\nAssuming that the default unit of measurement is set to inches, the code above would create a 5\" x 2\" text frame that is 1\" down and 1\" across on the first of page of the frontmost document.\n\nNow that you have a text frame, you are ready to insert text into it. To insert text into a text frame, replacing any existing content, set the contents property of the text frame's parent story to the desired text.\n\nIt is also possible to insert text into a specific location within a text frame, appending it to existing text. This is done by setting the contents property of a specified insertion point within the parent story of the text frame to a specified value. For example, the following code would append the text \"My Project Text\" to the end of any existing text within the specified text frame, without replacing the existing text.\n\nText in InDesign possesses numerous properties, including font, point size, color, and much more, which are accessible via AppleScript. The following example code demonstrates one way that these properties could be modified. This particular code will set the font of the text within the specified text frame to \"Arial\", the point size of the second word to 24, and the color of the first three words to specified values.\n\nPlease note that, in the above example, the colors specified correspond to the names of colors in InDesign's Swatches palette. See figure 2.\n\nFigure 3 shows the result of executing the previous code on a text frame that contains the text \"My Project Text\".\n\nInteraction with graphics is often another important aspect of scripting InDesign. In InDesign, graphics are typically placed within rectangles. However, it is also possible to place them into text frames. For the sake of reducing confusion, in this column, we will discuss working with graphics in rectangles.\n\nLike text frames, rectangles may be created via AppleScript by using the make command, and specifying the desired bounds for the rectangle. For example, assuming the default unit of measurement is set to inches, the following code would create a 3\" x 5\" rectangle 1\" across and 3\" down.\n\nAgain, here, the result of the make command is a reference to the newly created rectangle.\n\nOnce a rectangle exists, the place command may be used to place a graphic within the rectangle. The place command requires a reference to the graphic file to be placed. For example:\n\nHere, the result of the place command is a reference to the newly placed image, within the rectangle. Figure 4 shows an example of a placed graphic within a rectangle on an InDesign document page.\n\nThroughout this column, we have referenced text frames and rectangles by index. When we discussed referencing documents, I mentioned that a more accurate way of referring to documents was by name. The same rule applies to text frames, rectangles, and other page items within InDesign documents. The reason for this is that, if a new page item is created, or page items are repositioned within the document, the index of a page item may change.\n\nTo always ensure that your script is referencing the correct page item, you may apply a script label to the item. This may be done via AppleScript, for example:\n\nApplying script labels to page items may also be done manually within InDesign by using the Script Label palette, which can be made visible via the Window > Automation menu. See figure 5.\n\nOnce a script label has been applied to a page item, you may reference it by that label, rather than by its index. For example:\n\nIf you plan to continue scripting InDesign in order to automate processes in your own workflow, there are a number of resources available to you for continued learning.\n\nFirst and foremost, Adobe provides detailed documentation for scripting InDesign. A very comprehensive InDesign Scripting Reference and InDesign Scripting Guide may be downloaded from the Adobe website at <http://www.adobe.com/products/indesign/scripting.html>. These documents contain extensive documentation with regard to all of InDesign's scripting features, and will no doubt prove to be an important addition to any InDesign scripter's arsenal.\n\nThe online Adobe support forums at <http://www.adobe.com/support/forums/> are a tremendous resource for anyone using or scripting InDesign, or any other Adobe application for that matter. Here, you will find numerous application-specific forums, including the InDesign Scripting forum, where you may post your questions to other InDesign scripters.\n\nWhile InDesign's AppleScript support is quite extensive, there's always room for improvement, right? Well, with InDesign's plug-in architecture, it is actually possible to expand its AppleScript support with the addition of scriptable plug-ins. There are numerous scriptable plug-ins available for InDesign, including InCatalog and InData, available from Em Software (http://www.emsoftware.com/), which can be used to automate many complex data-driven publishing tasks. For a list of many available InDesign plug-ins, visit the InDesign plug-ins page on Adobe's website at http://www.adobe.com/products/plugins/indesign/. Also, be sure to check out the Adobe Studio Exchange at http://www.adobestudioexchange.com/.\n\nFor those desktop publishers currently using InDesign and looking to become more efficient, hopefully, this month's column has helped to shed some light on the possibilities. Be sure to continue exploring InDesign's AppleScript support on your own, and don't forget to check out the resources that I have mentioned above.\n\nUntil next time, keep scripting!\n\nBen Waldie is the author of the best selling books \"AppleScripting the Finder\" and the \"Mac OS X Technology Guide to Automator\", available from http://www.spiderworks.com, as well as an AppleScript Training CD, available from http://www.vtc.com. Ben is also president of Automated Workflows, LLC, a company specializing in AppleScript and workflow automation consulting. For years, Ben has developed professional AppleScript-based solutions for businesses including Adobe, Apple, NASA, PC World, and TV Guide. For more information about Ben, please visit http://www.automatedworkflows.com, or email Ben at ben@automatedworkflows.com."
    },
    {
        "link": "https://community.adobe.com/t5/indesign/scripting-shape-creation/m-p/10523489",
        "document": "Try the code below for you needs.\n\nThanks to Shonkyin for creating the dialog on this post Create a new document from a dialog.\n\nrg2.add('button', undefined, 'OK', {name: 'ok'});"
    },
    {
        "link": "https://community.adobe.com/t5/indesign/applescript-set-fill-color-of-path/m-p/3652569",
        "document": "Sorry, I might have explained it wrong. I was just saying that if I work directly in InDesign then I can just manually select the path and set the fill color. My problem is how to reference path in Applescript so I can set fill color.\n\nI do it now with rectangles and so on like below but can't seem to find any help on how to reference the path?"
    },
    {
        "link": "https://applescriptlibrary.wordpress.com/wp-content/uploads/2013/11/indesign_scriptingguide_as.pdf",
        "document": ""
    },
    {
        "link": "https://macgrunt.com/2012/01/07/indesign-scripting-lesson-16",
        "document": "this is the fourth of a series of lessons about how to script the contents of documents. so far we’ve looked at how to create and do things with page items. now let’s have a closer look at colours.\n\nif you want to follow along — open a new document. then run this script from script editor (found in applications > applescript) — as always, update the script to your version of InDesign :\n\nnow, it’s more than likely that the script will fail on that third rectangle. and this is the frustrating thing about colours — you can’t use a colour unless it already exists as a swatch. but more about that in a moment.\n\nthe script above shows two ways to reference a colour : by name or by index (ie. position in the swatches panel). note that if you had a swatch called ‘swatch 2’ you’d reference that with double quotes (… fill color:”swatch 2″ …) but you’d NEVER name a swatch that would you!? the other thing to note is that when the rectangle is first drawn it will have whatever fill and stroke attributes are set as defaults — exactly the same as if it were drawn using the rectangle tool (not to be confused with the rectangle frame tool).\n\nok. to get around the missing colour issue you have to create a new swatch. notice that you don’t actually make a new swatch, you make a new colour — which just happens to appear in your swatches panel (confusing? you bet) :\n\nnote : you should always specify the name — you can leave this out but you may get swatches with incorrect names (this happens if the “Name with Color Value” check box was not selected the previous time a swatch was created). the naming convention used here is a good one to follow in InDesign generally (not only when scripting) it saves confusion with duplicate or near-duplicate swatches. calling a swatch “purplish” is just going to lead to tears somewhere down the line.\n\nnow, if you try to run that script again on the same file it will fail because you cannot make a colour if it already exists — that is, you cannot have two colours with the same name. this next snippet will work because each swatch has a different name :\n\nbut that would be just silly. however, it does highlight why you should get into good swatch naming habits.\n\nthere are a few ways to get around the problem of the previous script failing — here’s a simple one :\n\ntry blocks are great. if the script CAN do the task it does — if it can’t, it just moves on to the next command.\n\nwell, that’s a quick and dirty introduction to colours. what’s up next? who knows. til then — keep grunting."
    },
    {
        "link": "https://macscripter.net/t/indesign-rectangle-problem/65476",
        "document": "and I get a box with a 1 point rule around it, originally it was black, but now the line is red. It seems like whatever state I left indesign in before I ran this script, it’s picking up those settings.\n\nWhat’s the best way to “reset” the color of lines and fills, etc? before actually making a rectangle.\n\nALSO… what’s the best way for me to show screen captures, or jpgs of my results on here since I can’t attach a graphic to these posts?"
    }
]