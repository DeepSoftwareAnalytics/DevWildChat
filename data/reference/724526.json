[
    {
        "link": "https://spigotmc.org/threads/custom-config-file-in-commandexecutor.633509",
        "document": ""
    },
    {
        "link": "https://helpch.at/docs/1.12.2",
        "document": ""
    },
    {
        "link": "https://hub.spigotmc.org/javadocs/spigot/index.html?overview-summary.html",
        "document": "The documentation is for developing plugins and is split into the respective packages for each subject matter. This documentation does not cover running a server, contributing code back to the project, or setting up a workspace. Working knowledge of the Java language is a prerequisite for developing plugins.\n\nFor basic plugin development, see the . It covers the basic requirements of a plugin jar.\n\nFor handling events and triggered code, see the .\n\nNote: While the Bukkit API makes every effort to ensure stability, this is not guaranteed, especially across major versions. In particular the following is a (incomplete) list of things that are not API.\n• Implementing interfaces or extending classes. The Bukkit API is designed to only be implemented by server software. Unless a class/interface is obviously designed for extension (eg ), or explicitly marked as such, it should not be implemented or extended by plugins. Although this can sometimes work, it is not guaranteed to do so and resulting bugs will be disregarded.\n• Constructing inbuilt events. Although backwards compatibility is attempted where possible, it is sometimes not possible to add new fields to events without breaking existing constructors. To ensure that the API continues to evolve, event constructors are therefore not plugin API.\n• Implementation classes. Concrete implementation classes packaged with Bukkit (eg those beginning with Simple) are not API. You should access them via their interfaces instead.\n• The \"enumness\" of enums which implement . Such enums are liable to conversion to regular classes and therefore usages deriving from their status as an enum (including, but not limited to, use in switch statements and classes such as ) should be avoided."
    },
    {
        "link": "https://helpch.at/docs/1.12.2/index.html?overview-summary.html",
        "document": ""
    },
    {
        "link": "https://github.com/gyurix/SpigotLib",
        "document": "SpigotLib is a collection of several useful libraries and APIs for Spigot plugin development. It's not only perfect for developers, but it's also good for server owners, because they can use it's API testing commands, which are really useful.\n\nBefore compiling this project with Maven after cloning it you need to add the following jar files to the libs folder:\n\nThey need to be called exactly as listed above.\n\nI am not allowed to share these binaries in this repo, because of their license agreement.\n\nIf you are a Minecraft server owner, then you should use it for one of the following purposes:\n• You would like to use a plugin on your server which depends on it\n• For using some of it's commands by server owners, admins. You may even put them to a sign or an NPC with other plugins, what can be very helpful\n• For getting nice, colored and meaningful error reports encoded by the SpigotLibs CommandAPI instead of the old boring internal server error chat messages.\n\nIf you are a Spigot plugin developer, then you should use it for one of the following purposes:\n• For coding plugins up to 2x faster\n• For using already perfectly working solutions for common plugin development problems\n• For hooking in to other plugins indirectly\n• To avoid the possibility of so many bugs appearing in your plugin\n• For coding plugins working on the packet level super easily\n\nIf the plugin does not work for you then please do not panic, do NOT leave a bad review, or a comment, just read and follow these steps:\n• Before posting the new update I always fully test the plugin, so it's verified that it works fine, which means that in the most of the cases it should also work at you without any issues. The only reason of malfunction can be the differences between my and your testing enviroment, so in the next points I will explain you what kind of testing enviroment differences exists\n• Incorrect server version: Please use the Spigots BuildTools to build yourself one of the following server versions: 1.8.8; 1.9; 1.9.2; 1.9.4; 1.10; 1.10.2; 1.11; 1.11.2; 1.12; 1.12.2; 1.13; 1.13.1; 1.14; 1.14.4; 1.15; 1.15.1 For any other version there is no guarantee that SpigotLib will work without any issues. On 1.7.10 and older servers the SpigotLib works might only work in a limited \"safe\" mode, which means that only some of it's funtionalities will work, which does not directly depend on the Spigot API.\n• Using other plugins which causes issues: I will list you a few already known problematic plugins, of which some versions might cause issues:\n• ChatControl plugins packet related features: Please stop your server and disable these features in ChatControl plugins configuration\n• ProtocolSupport, ProtocolLib, ViaVersion: All of these plugins works with packets, so it's possible that some of them causes compatibility issues with SpigotLib. To resolve these issues it's suggested to make a new test server using just SpigotLib, and try to add these 3 plugins to it step by step. After these are added and working properly you may add the other plugins to your server. If they are not working, then check if you are using the correct versions of both of these plugins. I have tested and verified already, that using the right versions of ProtocolSupport, ProtocolLib and ViaVersion together with SpigotLib are working fine, however I believe, that the combination of these 4 plugins incorrectly causes the most of the problems.\n• Remove old SpigotLib folder: After each update it's suggested to remove the old SpigotLib folder for letting the plugin extract the latest configuration and language file from the new SpigotLib jar.\n• Verify that SpigotLib works fine: The easiest way to verify that SpigotLib works properly is the usage of the /sl command\n• If you are absolutely sure about that none of the above mentioned points helped you: Still do NOT leave a bad review or write a comment, just contact me and I will help you.\n• Animation API (make your animations and run them easily)\n• BungeeAPI (Communicate super easily with the BungeeCord or with other servers connected to BungeeCord)\n• ChatAPI (for sending Action bar, Chat and System JSON messages really easy, using my really simple custom format)\n• CommandAPI (make command simulations easily using this API. It provides commands like Title, Subtitle, ActionBar, Console, Chat, Message, e.t.c. And every command is executed through the VariableAPI, so you can also use variables in the commands. You can even create custom commands too)\n• Config management (Don't waste your time with config loading / saving. This system simplifiest all your Config management. From now it works with MySQL too.)\n• EconomyAPI (a simple but really useful EconomyAPI system with multiple balance types, Vault compatibility and bank support. Now it supports working with other economy management plugins too.)\n• ItemGuiAPI (Make custom item GUIs easily, supports inventory layout management so you can set up the same item to several inventory slots easily)\n• JSON API (Are you tired of using Gson, it's time to try out a way better JsonAPI system. This system works similiar to the configuration management, just with Jsons)\n• Language management API (use per player selectable languages for your plugins language file)\n• Map API (manage custom maps very easily and super fast on packet level)\n• Mojang API (easily handle the requests and responses between your server and between the Mojangs official API)\n• MySQL API (Never worry about MySQL connections anymore, just use this API to easily send MySQL commands and get the answers or just do some background/Async updates)\n• NBT API (get, list and add custom NBT tags for entities and items)\n• TPS meter and crashreporter (make a crash report from the per thread stack trace dumps, if the servers tps is too low)\n• TitleAPI (for setting Titles/Subtitles, for players without version incompatibility)\n• PacketAPI (I have created a brand new API for managing packets really easily and compatible between different Spigot versions)\n• PlayerFile (A brilliant way of storing any kind of data about a player. It supports both FILE and MySQL backend.)\n• RomanNumsAPI (A simple but powerful API for converting numbers to roman ones and vice versa)\n• ScoreboardAPI (manage per player different NO FLICKER sidebars, tabbars and nametagbars easily)\n• VariableAPI (for handling unlimited amount of variables cross plugins, with a really simple and easy to use way)\n• spigotlib.debug (for getting debug messages, like error reports in the chat)\n• Available: English, German, Hungarian, Dutch (outdated, looking for new translators)\n\nIf you are able to, please translate this plugin to your language! In translation, you should keep the plugins colors, commands and variable names. You should only change the sentences in messages.\n\nBefore complaining about something doesn't work, please CONTACT ME.\n\nSpigotLib is licensed under the GPL-3 license"
    },
    {
        "link": "https://hub.spigotmc.org/javadocs/spigot",
        "document": "The documentation is for developing plugins and is split into the respective packages for each subject matter. This documentation does not cover running a server, contributing code back to the project, or setting up a workspace. Working knowledge of the Java language is a prerequisite for developing plugins.\n\nFor basic plugin development, see the . It covers the basic requirements of a plugin jar.\n\nFor handling events and triggered code, see the .\n\nNote: While the Bukkit API makes every effort to ensure stability, this is not guaranteed, especially across major versions. In particular the following is a (incomplete) list of things that are not API.\n• Implementing interfaces or extending classes. The Bukkit API is designed to only be implemented by server software. Unless a class/interface is obviously designed for extension (eg ), or explicitly marked as such, it should not be implemented or extended by plugins. Although this can sometimes work, it is not guaranteed to do so and resulting bugs will be disregarded.\n• Constructing inbuilt events. Although backwards compatibility is attempted where possible, it is sometimes not possible to add new fields to events without breaking existing constructors. To ensure that the API continues to evolve, event constructors are therefore not plugin API.\n• Implementation classes. Concrete implementation classes packaged with Bukkit (eg those beginning with Simple) are not API. You should access them via their interfaces instead.\n• The \"enumness\" of enums which implement . Such enums are liable to conversion to regular classes and therefore usages deriving from their status as an enum (including, but not limited to, use in switch statements and classes such as ) should be avoided."
    },
    {
        "link": "https://hub.spigotmc.org/javadocs/spigot/index.html?overview-summary.html",
        "document": "The documentation is for developing plugins and is split into the respective packages for each subject matter. This documentation does not cover running a server, contributing code back to the project, or setting up a workspace. Working knowledge of the Java language is a prerequisite for developing plugins.\n\nFor basic plugin development, see the . It covers the basic requirements of a plugin jar.\n\nFor handling events and triggered code, see the .\n\nNote: While the Bukkit API makes every effort to ensure stability, this is not guaranteed, especially across major versions. In particular the following is a (incomplete) list of things that are not API.\n• Implementing interfaces or extending classes. The Bukkit API is designed to only be implemented by server software. Unless a class/interface is obviously designed for extension (eg ), or explicitly marked as such, it should not be implemented or extended by plugins. Although this can sometimes work, it is not guaranteed to do so and resulting bugs will be disregarded.\n• Constructing inbuilt events. Although backwards compatibility is attempted where possible, it is sometimes not possible to add new fields to events without breaking existing constructors. To ensure that the API continues to evolve, event constructors are therefore not plugin API.\n• Implementation classes. Concrete implementation classes packaged with Bukkit (eg those beginning with Simple) are not API. You should access them via their interfaces instead.\n• The \"enumness\" of enums which implement . Such enums are liable to conversion to regular classes and therefore usages deriving from their status as an enum (including, but not limited to, use in switch statements and classes such as ) should be avoided."
    },
    {
        "link": "https://bukkit.org/threads/where-can-i-find-the-bukkit-api-documentation.348177",
        "document": ""
    },
    {
        "link": "https://github.com/CommandAPI/CommandAPI",
        "document": ""
    },
    {
        "link": "https://bukkit.fandom.com/wiki/Main_Page",
        "document": "Welcome to the Official BukkitWiki. Your one stop shop for all things Bukkit.\n\nBukkit is a free, open-source, software project that provides the means to extend the popular Minecraft multiplayer server.\n\nOur organization's aim is to provide the Minecraft community with a powerful, well-designed and thoughtful solution to extending and controlling their servers - making managing and creating servers easier and providing more flexibility. Learning from the mistakes made by other mods, Bukkit aims to be different and fill the void left by them: built from the ground up, we've focused on performance, ease-of-use, extreme customization and open communication between the Team and you, our users. The overall design of Bukkit has been inspired by other mods and our experience as Minecraft players just like yourselves, giving us a unique perspective and advantage going into the creation of the Bukkit Project"
    }
]