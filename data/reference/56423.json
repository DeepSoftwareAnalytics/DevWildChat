[
    {
        "link": "https://reddit.com/r/WireGuard/comments/awudup/how_to_exclude_local_network_packets_from",
        "document": "Background: I'm using Wireguard for Linux to connect to my VPN provider but I don't want packets intended for my local network to go through my VPN tunnel.\n\nI've tried entering my local networks ip range into the 'Allowed IP's' range via the config file located in /etc/wireguard/ but adding it does not allow me to connect to the internet or see my local network.\n\nAny ideas on how to access a local network while connecting to a VPN provider via Wireguard?"
    },
    {
        "link": "https://reddit.com/r/WireGuard/comments/ko2aek/how_do_i_exclude_certain_ips",
        "document": "How do I exclude a list of ips from going through the tunnel? Is there \"Excluded IPs\"?\n\nIf WireGuard dev sees this, would you pls consider adding this feature to the client? Thx!"
    },
    {
        "link": "https://forum.mikrotik.com/viewtopic.php?t=183975",
        "document": ""
    },
    {
        "link": "https://procustodibus.com/blog/2021/03/wireguard-allowedips-calculator",
        "document": "For example, say you wanted to route everything in the block of IP addresses through a WireGuard peer — except you also wanted to exclude the smaller block from it. In the Allowed IPs field, input ; in the Disallowed IPs field, input ; and click the Calculate button. This is the result you’ll get (which is what you enter into your WireGuard config):\n\nOr as another example, say you wanted to route everything but the standard private, local, or link-scoped IP address blocks through a WireGuard peer. In the Allowed IPs field, input ; in the Disallowed IPs field, input ; and click the Calculate button. This is the result you’ll get:\n\nYou use the setting of WireGuard to configure which blocks of IP addresses should be routed through which remote WireGuard peers. If you want to access everything through a peer, configure its setting to the following: This indicates to WireGuard that all IPv4 addresses ( ) and all IPv6 addresses ( ) should be routed through the peer. Note that you can specify multiple blocks of addresses on the same line, separated by commas, like above; or you can specify them individually on separate lines, like below: If you want to access just a single block of IP addresses through a WireGuard peer, like say a block of IP addresses at a remote site that range from to , you’d set the for it to the following: But what if you want the inverse, where you want everything except a single block (or two or three specific blocks) to be routed through a WireGuard peer? In many cases, you have subtract the exceptions from the block of allowed addresses, and set to the resulting (often long) list of blocks. For example, say you want to route all Internet traffic through a WireGuard peer, except that you don’t want to route the traffic of your internal networks through it, which use various subnets within the private-use block. To make that happen with the setting, you’d have to configure the peer with the following : That’s the list of blocks you get when you subtract from — conceptually you might express it like the following: Or another way of expressing it might be:\n\nAs you can see, subtracting one block of IP address from another block can result in a painfully long list of blocks to add to the setting. On some platforms, like mobile phones, you don’t have any other options — but on Linux, you have some powerful routing tools available that can simplify the situation. In most cases, you can simply add a route to your main routing table to “subtract” a block of IP addresses from those routed via the WireGuard tunnel. And you may even find that the necessary route already exists — in which case you don’t have to do anything at all. For example, say you want to route everything in the block to a WireGuard peer, except for . Instead of subtracting from with the above calculator, and setting the peer’s to the result, just set the peer’s to the full block. Outside of WireGuard, add an explicit route for to your main routing table. Because has a longer prefix length than ( vs ), the Linux routing engine will automatically use the route for over the route for . In fact, you may find that you have the necessary route for the exceptional block already set up — run the command (or just , which by default lists the routes of your main routing table) on the host to see what (IPv4) routes you have already: If do you see a route listed for your exceptional block ( in our example), you won’t have to add anything. If you don’t see it listed, however, you’ll have to add the route yourself. Fortunately, this easy — you just need to know the IP address of the gateway for the block, and the network interface to get there. Often, this will be the same as your default gateway (the line beginning with in the above listing). The simplest way to do this is to add the following and commands to the and scripts in your WireGuard config. To add a route for the block with as the gateway using the interface, add the following and settings to the section of your WireGuard config: Note that you can have multiple and lines in your config (similar to ). Multiple or lines are equivalent to a single or line joined together by semicolons. Also note that the commands above apply only to IPv4 addresses — for IPv6 addresses, you have to add the flag (eg )."
    },
    {
        "link": "https://github.com/ZerGo0/WireGuard-Allowed-IPs-Excluder",
        "document": "Use the following form when you need to calculate complex AllowedIPs settings for a WireGuard peer, by subtracting the “disallowed” IP address blocks from the “allowed” IP address blocks.\n\nFor example, say you wanted to route everything in the block of IP addresses through a WireGuard peer — except you also wanted to exclude the smaller block from it. In the field, input ; in the field, input ; and click the Calculate button. This is the result you’ll get (which is what you enter into your WireGuard config):\n\nOr as another example, say you wanted to route everything but the standard private, local, or link-scoped IP address blocks through a WireGuard peer. In the field, input , ; in the field, input , , , , , , , , ; and click the Calculate button. This is the result you’ll get:\n\nYou use the setting of WireGuard to configure which blocks of IP addresses should be routed through which remote WireGuard peers. If you want to access everything through a peer, configure its setting to the following:\n\nThis indicates to WireGuard that all IPv4 addresses ( ) and all IPv6 addresses ( ) should be routed through the peer. Note that you can specify multiple blocks of addresses on the same line, separated by commas, like above; or you can specify them individually on separate lines, like below:\n\nIf you want to access just a single block of IP addresses through a WireGuard peer, like say a block of IP addresses at a remote site that range from to , you’d set the for it to the following:\n\nThis indicates to WireGuard that only the block of IP addresses should be routed through the peer. If you want to access multiple blocks of IP addresses through a WireGuard peer, you’d set the for it to the following:\n\nThis indicates to WireGuard that both the and blocks of IP addresses should be routed through the peer. If you want to access everything but a certain block of IP addresses through a WireGuard peer, you’d set the for it to the following:\n\nAnd then you’d add a route on your local system to access that block of IP addresses through your regular Internet connection, like so:\n\nYou’d replace with the IP address of your regular Internet gateway, and with the name of your regular Internet network interface.\n\nBut what if you want to access everything but certain blocks of IP addresses through a WireGuard peer? This is where it gets complicated, because you can’t just add a route on your local system for each block of IP addresses you don’t want to access through the peer, because your system will still send packets to those IP addresses to the peer if its is set to the following:\n\nInstead, you need to set the for the peer to everything but those blocks of IP addresses. And this is where our Calculator comes in: It lets you easily calculate the setting for a WireGuard peer by subtracting the “disallowed” IP address blocks from the “allowed” IP address blocks.\n\nFor example, say you wanted to access everything but the block of IP addresses through a WireGuard peer. You’d input the following into the Calculator:\n\nAnd this is the result you’d get:\n\nOr as another example, say you wanted to access everything but the standard private, local, or link-scoped IP address blocks through a WireGuard peer. You’d input the following into the Calculator:\n\nAnd this is the result you’d get:\n\nThis indicates to WireGuard that everything but the specified blocks of IP addresses should be routed through the peer.\n\nThe Calculator works by first expanding the “allowed” and “disallowed” IP address blocks into their individual IP addresses, and then subtracting the “disallowed” IP addresses from the “allowed” IP addresses. It then combines the resulting IP addresses back into blocks, and sorts and merges those blocks to produce the final setting.\n\nThe Calculator supports both IPv4 and IPv6 addresses, and you can input the IP address blocks into it in CIDR notation (like or ) or with a subnet mask (like or ). It also supports the special IP address blocks and , which represent all IPv4 addresses and all IPv6 addresses, respectively."
    },
    {
        "link": "https://virtualbox.org/manual/ch06.html",
        "document": "For personal and enterprise use VirtualBox is a general-purpose full virtualization software for x86_64 hardware (with version 7.1 additionally for macOS/Arm), targeted at laptop, desktop, server and embedded use."
    },
    {
        "link": "https://nakivo.com/blog/virtualbox-network-setting-guide",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/network_bridged.html",
        "document": "With bridged networking, Oracle VM VirtualBox uses a device driver on your host system that filters data from your physical network adapter. This driver is therefore called a net filter driver. This enables Oracle VM VirtualBox to intercept data from the physical network and inject data into it, effectively creating a new network interface in software. When a guest is using such a new software interface, it looks to the host system as though the guest were physically connected to the interface using a network cable. The host can send data to the guest through that interface and receive data from it. This means that you can set up routing or bridging between the guest and the rest of your network.\n\nTo enable bridged networking, open the Settings dialog of a virtual machine, go to the Network page and select Bridged Network in the drop-down list for the Attached To field. Select a host interface from the list at the bottom of the page, which contains the physical network interfaces of your systems. On a typical MacBook, for example, this will allow you to select between en1: AirPort, which is the wireless interface, and en0: Ethernet, which represents the interface with a network cable.\n\nBridging to a wireless interface is done differently from bridging to a wired interface, because most wireless adapters do not support promiscuous mode. All traffic has to use the MAC address of the host's wireless adapter, and therefore Oracle VM VirtualBox needs to replace the source MAC address in the Ethernet header of an outgoing packet to make sure the reply will be sent to the host interface. When Oracle VM VirtualBox sees an incoming packet with a destination IP address that belongs to one of the virtual machine adapters it replaces the destination MAC address in the Ethernet header with the VM adapter's MAC address and passes it on. Oracle VM VirtualBox examines ARP and DHCP packets in order to learn the IP addresses of virtual machines.\n\nDepending on your host operating system, the following limitations apply:\n• None Mac OS X hosts. Functionality is limited when using AirPort, the Mac's wireless networking system, for bridged networking. Currently, Oracle VM VirtualBox supports only IPv4 and IPv6 over AirPort. For other protocols, such as IPX, you must choose a wired interface.\n• None Linux hosts. Functionality is limited when using wireless interfaces for bridged networking. Currently, Oracle VM VirtualBox supports only IPv4 and IPv6 over wireless. For other protocols, such as IPX, you must choose a wired interface. Also, setting the MTU to less than 1500 bytes on wired interfaces provided by the sky2 driver on the Marvell Yukon II EC Ultra Ethernet NIC is known to cause packet losses under certain conditions. Some adapters strip VLAN tags in hardware. This does not allow you to use VLAN trunking between VM and the external network with pre-2.6.27 Linux kernels, or with host operating systems other than Linux.\n• None Oracle Solaris hosts. There is no support for using wireless interfaces. Filtering guest traffic using IPFilter is also not completely supported due to technical restrictions of the Oracle Solaris networking subsystem. These issues may be addressed in later releases of Oracle Solaris 11. On Oracle Solaris 11 hosts build 159 and above, it is possible to use Oracle Solaris Crossbow Virtual Network Interfaces (VNICs) directly with Oracle VM VirtualBox without any additional configuration other than each VNIC must be exclusive for every guest network interface. When using VLAN interfaces with Oracle VM VirtualBox, they must be named according to the PPA-hack naming scheme, such as e1000g513001. Otherwise, the guest may receive packets in an unexpected format."
    },
    {
        "link": "https://wiki.dave.eu/index.php/VirtualBox_Network_Configuration",
        "document": "VirtualBox networking supports different configurations. For a in-depth discussion regarding virtual networking see VirtualBox official documentation here.\n\nFor developing purpose, we are interested in two configuration:\n• NAT, which is the default provided with DVDK\n\nFor a typical development network environment, two network adapters can be used: the first one for accessing the Internet through the host network interface (configured as NAT), the second one for providing a static IP address network interface through a bridged network interface.\n\nNetwork Address Translation is a tecnique used in IP networking that modify IP packet header, by changing IP address, while the routing device processes the packet.\n\nOnly the IP address of the routing device (in case of a Virtual Machine, the host ack at router for the guest) is seen from outside. Usually the routed device (in our case, the guest machine) has an IP address that belongs to a completely different IP subnet.\n\nNAT make easy to use a virtual machine because:\n• it does not require to configure guest network parameters (the router act as DHCP server and give all the needed information to the guest)\n• it guarantees that the VM can be executed in any network environment without breaking the existing network.\n\nHowever it's really hard to configure NAT to let the VM to act as a server (e.g. as NFS or TFTP server), for this reason the developer usually choose a bridged configuration, with proper IP parameter assignments.\n\nBridge Networking configure host's physical network interface and guest's virtual network interface as if they are connected with a Ethernet Switch.\n\nIn this way:\n• guest (DVDK Virtual Machine) has it's own IP address, usually on the same subnet of the host\n• guest is directly accessible (apart from firewall rules that may be configured on the host) from any device on the same subnet\n\nIt's easy to enable a second change Virtual Box network adapter for adding a Bridged adapter and let the Virtual Machine to use a second network interface for local IP static usage.\n\nFor setting the network adapters in the Virtual Machine:\n• open VirtualBox Manager application and from the main window, select your VM and choose Settings from the toolbar\n• select the item: by default, the network adapter enabled in the DVDK Virtual Machine is the configured in NAT, see the Network Settings in the picture here below:\n\nAn advanced setup is to add another network adapter to be used as Bridged Adapter, while keeping the first network interface with NAT. For example, it is possible to work on a laptop connected to Internet via Wi-Fi while developing using the bridged network adapter on Ethernet. In this case the Virtual Machine will be able to access the public network using the NATed interface (via host WiFi) while serving TFTP/NFS file to the Embedded Linux system.\n• choose item, enable it and from the dropdown choose Bridged Adapter\n• Now the dropdown should be enabled. If you have more than one network interface, choose the right one to connect the bridge too\n\nOnce the graphical interface is ready, a mouse over the Network icon in the status bar shows the two Adapter configuration\n\nFor assigning a static IP address, it is possible to start the network manager and configure the ethernet connection:\n\nIn the Network Connections panel, select the second wired connection\n\nand fill the required fields (Method and Addresses) for the tab:\n\nAfter some seconds, the new configuration is added and a mouse over the network icon should tell you that the connection with your network is established:"
    },
    {
        "link": "https://superuser.com/questions/227505/what-is-the-difference-between-nat-bridged-host-only-networking",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]