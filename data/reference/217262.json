[
    {
        "link": "https://mathworks.com/matlabcentral/fileexchange/69118-matlab-based-functions-for-ecg-signal-preprocessing",
        "document": ""
    },
    {
        "link": "https://mathworks.com/matlabcentral/fileexchange/69118-matlab-based-functions-for-ecg-signal-preprocessing?s_tid=prof_contriblnk",
        "document": ""
    },
    {
        "link": "https://mathworks.com/matlabcentral/fileexchange/10858-ecg-simulation-using-matlab",
        "document": ""
    },
    {
        "link": "https://mathworks.com/matlabcentral/fileexchange/66623-ecg-preprocessing-segmentation-and-obtaining-the-mean-p-qrs-t-fragment",
        "document": ""
    },
    {
        "link": "https://academia.edu/7049657/Matlab_implementation_of_ECG_signal_processing",
        "document": "Signal Processing of ECG Signals The signal processing in digital is what we are considering to implement to our ECG signals as an extra function after we finish the basic objective of the project, which is only to design, simulate, fabricate, test, and demonstrate an ECG demonstration board in analog. Based on the purpose of the project, we are trying to calculate BPM (beats per minutes) by programming an ECG processing algorithm in the Stellaris Microcontroller so that the user's heart beats will be coming up with their ECG signal on the LED screen. However, the programming work in the Stellaris Microcontroller is in C language, which I'm not familiar with based on the courses I've taken these years in ECE major. Therefore, I'm looking at a substituted way which I could use to write the algorithm rather than I directly write it in C language. The MATLAB has this function called code generator that is to convert the valid MATLAB code into the C code. Comparing to directly writing C code, writing a MATLAB code is much easier and more understandable.\n\nFILTER ELECTROCARDIOGRAM (ECG) SIGNAL USING DIGITAL SIGNAL PROCESSING (DSP) WITH MATLAB Electrocardiogram (ECG) is commonly used in medical field in order to diagnose different cardiovascular diseases and patient's general health. ECG Signal are often affected by artifacts from the environment including baseline wander, power line interference and electromyographic (EMG) noise. In this project, ECG Signal to be processed is collected from MIT/BIH (Massachusetts Institute of Technology-Beth Israel Hospital) Arrythmia Database [1]. This method is being tested on one dataset only and serves as a beginner guide to digital signal processing with MATLAB for an affordable, precise, and portable Electrocardiogram device that may be used at underserved hospitals. With MATLAB, to remove the baseline wander, Detrend function can be used to remove low frequency below 0.5 Hz. Powerline interference (50 Hz or 60 Hz) can be filtered out by using bandstop IIR filter. EMG and high frequency noise can be reduced by using IIR low-pass filter to cut off high frequency signal. The resulting signal is filtered out successfully with less noise and P wave, QRS complex, T wave can be inferred properly.\n\nA statistical designing approach to MATLAB based functions for the ECG signal preprocessing Though a number of research articles are available based on different preprocessing methodologies, all of them are not available in a single article with the practical utility of implementation. This article scopes to implement the most effective ECG signal preprocessing methods (baseline wander removal, noise cancellation, and peaks detection) with a simple statistical explanation. In addition, this research work contributes to designing several MATLAB based functions to implement the aforementioned preprocessing steps in practice. These functions are available free of cost for all in the MATLAB archive. The foremost aim of this article was to present clear conception about different ECG signal preprocessing steps like baseline wandering removal, noise elimination, QRS complex and point detections, P-peak and T-peak detection, and beat rate calculation. We hope that this work will eradicate all constraints of the ECG signal preprocessing and will motivate the new researchers of this field to reach more acute findings from the ECG signals.\n\nTeam #3 Xie HE A43011198 4/5/2013 Application Note Signal Processing of ECG Signals The signal processing in digital is what we are considering to implement to our ECG signals as an extra function after we finish the basic objective of the project, which is only to design, simulate, fabricate, test, and demonstrate an ECG demonstration board in analog. Based on the purpose of the project, we are trying to calculate BPM (beats per minutes) by programming an ECG processing algorithm in the Stellaris Microcontroller so that the user's heart beats will be coming up with their ECG signal on the LED screen. However, the programming work in the Stellaris Microcontroller is in C language, which I'm not familiar with based on the courses I've taken these years in ECE major. Therefore, I'm looking at a substituted way which I could use to write the algorithm rather than I directly write it in C language. The MATLAB has this function called code generator that is to convert the valid MATLAB code into the C code. Comparing to directly writing C code, writing a MATLAB code is much easier and more understandable.\n\nDesigning and Implementation of Algorithms on MATLAB for Adaptive Noise Cancellation from ECG Signal The medical monitoring devices are more sensitive for the biomedical signal recording and need more accurate results for every diagnosis. The low frequency signal is destroyed by power line interference of 50 Hz noise, this noise is also source of interference for biomedical signal recording. The frequency of power line interference 50 Hz is nearly equal to the frequency of ECG, so this 50 Hz noise can destroyed the output of ECG signal. One way to remove the noise is to filter the signal with a notch filter at 50 Hz. However, due to slight variations in the power supply to the hospital, the exact frequency of the power supply might (hypothetically) wander between 47 Hz and 53 Hz. A static filter would need to remove all the frequencies between 47 and 53 Hz, which could excessively degrade the quality of the ECG since the heart beat would also likely have frequency components in the rejected range. To circumvent this potential loss of information, an adaptive filter has been used. The adaptive filter would take input both from the patient and from the power supply directly and would thus be able to track the actual frequency of the noise as it fluctuates .\n\nNoise reduction in ECG signals for bio-telemetry In Biotelemetry, Biomedical signal such as ECG is extremely important in the diagnosis of patients in remote location and is recorded commonly with noise. Considered attention is required for analysis of ECG signal to find the patho-physiology and status of patient. In this paper, LMS and RLS algorithm are implemented on adaptive FIR filter for reducing power line interference (50Hz) and (AWGN) noise on ECG signals .The ECG signals are randomly chosen from MIT_BIH data base and de-noising using algorithms. The peaks and heart rate of the ECG signal are estimated. The measurements are taken in terms of Signal Power, Noise Power and Mean Square Error. 1. INTRODUCTION The Electro Cardiogram (ECG) produces electrical signals of the each cardiac cycle. In the cardiac cycle each event has its own significance to study the behaviour of patient cardiac pathophysiology, Generally ECG signals are Bio electrical signal which gives the electrical activity of heart versus time. Therefore it is very important to diagnose for analysing heart function [1]. The Bio electrodes are placed on the skin of the patient to acquire ECG signals. The pacemakers are located in the upper part of the right atrium. It fires electrical pulses to the nerves to stimulate the contraction phase. These pulses extend over the atrial walls and activate cardiac muscles to contract. The ECG and power-line signal's frequency range is typically 0.05 to 100Hz and 50Hz so, ECG signals sensitive to the power line signals in the range around 50Hz which are causing interference [2]. 50Hz PLIN will interrupt the P and Q waves of the ECG signal. Most of Asian regions, Domestic and hospital power line are in the range of 50 Hz. So the frequency components associated in ECG that is 50 Hz are effected by the power line signals causing interference in ECG. But lack of power line quality the power signals are swings between the 47 to 53 Hz so the interference also effects from this range of power line signal. To mitigate this dynamic interference from power line we need use adaptive filter to suppress this random noise causing from power line [3]. An adaptive noise elimination filter has been used to evade this impending loss of information. Four different waves can be observed while recording ECG signal those are PQRST. The depolarization of right atria represents P wave. While the rapid depolarization of right and left ventricles represents QRS wave. The repolarization of the ventricles represents T wave [4], [5]. Any deviation in the said parameters leads abnormalities in the heart. The wave form related to QRS complex represent the contraction of left and right ventricles, which is more powerful than that of atria .It comprises muscle mass and causing a more ECG deflection. The Q wave signifies the signal horizontal (i.e. left to right) current as a potential travel through the inter-ventricular system.The Q wave is not having a septal origin shows myocardial violation which involves the full depth of\n\nImplementation of Adaptive filtering algorithms for removal of Noise from ECG signal Electrocardiography (ECG) is a non-invasive technique which is used for reading the electrical activity of the heart. It can be detected by several electrodes attached to the body surface and recorded using an external electronic circuit. This real noise free ECG signal can be used to detect different heart diseases, but a recorded ECG signal is not noise free. Noise existing in ECG signals can be removed using analog devices or using digital filters. As computational microprocessor power increases, the need to remove noise has been shifted to the use of digital filters. One of the very effective digital filters to remove the ECG noise is adaptive filtering techniques. In this paper, several adaptive filtering algorithms are proposed for noise cancellation of ECG signals and determining the accuracy of ECG signal features. Different adaptive filter algorithms used in this research work re Least Mean Square (LMS), Normalized Least Mean Squares (NLMS), Kernel Least Mean Squares (KLMS)...\n\nExtraction of Various Features of ECG Signal Principal component analysis (PCA) is one of the most valuable results oriented techniques of applied linear algebra. PCA is used abundantly in all forms of analysis from neuroscience to computer graphics because it is a simple, non-parametric method of extracting relevant information from confusing data sets. Extracting or decoding this information or feature from ECG signal has been found very helpful in explaining and identifying various pathological conditions. The feature extraction procedure can be accomplished straightforward by analysing the ECG visually on paper or screen. In addition, manual feature extraction is always prone to error. Therefore, ECG signal processing has become an indispensable and effective tool for extracting clinically significant information from ECG signals, for reducing the subjectivity of manual ECG analysis and for developing advanced aid to the physician in making well-founded decisions. ECG analysis systems are usually designed to process ECG signals measured under particular conditions, like resting ECG interpretation, stress test analysis, ambulatory ECG monitoring and intensive care monitoring. Noise reduction is closely related to data compression as reconstruction of the original signal usually involves a set of eigenvectors whose noise level is low, and thus the reconstructed signal becomes low noise, such reduction is, however, mostly effective for noise with muscular origin. The purpose of the thesis is to provide an overview of PCA in ECG signal compression.\n\nAutomated Noise Removal and Feature Extraction in ECGs In this study, a new viewpoint of electrocardiogram (ECG) denoising and feature extraction is presented. A filter bank is designed to target diverse form of noise such as power line interference, electromyographic artifacts, base line wander and different motion artifacts. A collection of denoising techniques like principal component analysis, fast Fourier transform filters and segmentation filters has been utilized to target different kind of noise present in the offline ECGs. To extract morphological details from the ECG c-mean clustering and derivatives are exploited. The algorithm has been applied on real offline ECG signals from St.-Petersburg Institute of Cardiological Techniques database as well as MIT-BIH databases. The SNR gained using the denoising filter bank is 38.3437 dB. For MIT-BIH database, the sensitivity of the QRS detector is 99.79 % while its predictivity if 99.92 %. The QRS detector's sensitivity estimated for St. Petersburg database is 99.87 % and its predictivity is 99.90 %. The sensitivity and predictivity of P-and T-wave detection for both the databases are almost the same, i.e., 99.87 and 99.98 %, respectively.\n\nAn Effectual Approach to Reduce the Noise in ECG Abstract:Electrocardiogram (ECG) represents electrical activity of human heart. ECG is composite from 5 waves - P, Q, R, S and T. This signal could be measured by electrodes from human body in typical engagement. Signals from these electrodes are brought to simple electrical circuits with amplifiers and analogue – digital converters. Abnormal patterns of ECG may be due to interference from power line which is easily recognizable since interfering voltage in the ECG would have frequency of 60 Hz. This interference due to stray effect of alternating current on the patient or because of alternating current fields produce in the patient cable, and white noise generated by ECG equipment and these artifacts which must be removed otherwise it will convey an incorrect information regarding the patient’s heart condition. The work in this paper is the design of FIR digital filters with new Window to remove the interferences or the artifacts and calculated SNR of noiseless ECG and compared with existing windows. Three filters are considered: Low pass, high pass and band reject filters. Each filter is used to filter the raw noisy ECG signal and results are observed and tabulated. In this paper we apply a new windowing technique to improve the SNR of ECG, so as to view the ECG noise-free. Keywords: Window, Window Functions, Window Coefficients, SNR"
    },
    {
        "link": "https://instructables.com/ECG-Display-With-Arduino",
        "document": "Here's some legal blurb and a discussion of electrical safety. The most important point is do not operate the circuit when it's plugged into a PC which is plugged into the mains . Oh yes - and don't blame me if you kill yourself. I am not a medical professional. This Instructable was created for information purposes only. It does not describe a medical device. The information given here is not intended to be a substitute for professional medical advice. If you think you have a medical condition you should contact a qualified health professional. If you think you have a medical emergency you should contact your local emergency services. The device described here is not a substitute for professional medical diagnosis, ECG interpretation or treatment. You are encouraged to confirm any information in this Instructable. As I have no control over how you build the electronics described here, I cannot guarantee its safety as a medical device. I think it is perfectly safe for me to use but you should make up your own mind. It's running off 4 AA cells or a single Lithium cell for goodness sake - how dangerous can it be? If you have been fitted with an internal defibrillator or pacemaker, do not attach electrodes to your body and mess about with circuits. Professional medical electronics should conform to IEC 60601. I have designed medical electronics in the past but it was a few years ago. I seem to have lost my copy of IEC60601 which is annoying as you have to pay for it. Would this device get IEC 60601 approval? How safe is it? IEC 60601 is a huge document. The most interesting questions to an electronics designer are:\n• how much current can I pass through the patient?\n• what happens if a \"component\" fails?\n• how much electromagnetic interference can I produce? How much current can I pass through the patient? In \"Normal Working\" operation the current limit is 100uA a.c. and 10uA d.c. and in single fault condition it is 500uA a.c. and 50uA d.c. This circuit would be classed as an \"Applied Part\". I don't know what circuit the manufacturer of the AD8232 module has used. When I examine the one I have, it appears to be one of the circuits in the \"Application Circuits\" section of the AD8232 datasheet. The input impedance of the chip pins is 10Gohm so the \"Normal Working\" operation the current is under 1nA. The electrodes are connected to the chip through 180k resistors. The chip operates at 3.3V so if the chip goes wrong, the maximum current is 3.3/180k = 18uA. So the chip and its circuit is safe so long as it's battery operated. An \"Applied Part\" has to be double isolated at 4000VAC. Your desktop PC is not electrically isolated to that degree therefore you should never operate the circuit when it's plugged into a PC which is plugged into the mains. A standard PC power supply almost certainly does not comply with the electrical IEC 60601-1 requirements from several standpoints, e.g. leakage current, dielectric strength. Can you operate it when it's plugged into a PC which is running on batteries? It wouldn't be allowed for a medical device but for a domestic device it probably would be allowed. (Domestic regulations are less stringent.) Did I operate it when plugged into a PC which was plugged into the mains? I'm not saying. I've been using desktop PCs for decades and have never got a shock off one. I'm just telling you that you shouldn't do it. Would the circuit's isolation conform to IEC 60601? If it were battery operated then that's one layer of isolation. Where's the second layer? I guess maybe you'd need two insulated boxes one inside another. IEC 60601 sometimes seems a little silly. The circuit should have no exposed conductive surfaces that are connected to the electronics. You have to worry about electrostatic discharge: what it the patient rubs a balloon on their hair then touches the box? The patient shouldn't be able to touch the electronics or the battery or whatever. Yes, I know you've never got a shock off a 6V battery - I'm just telling you the regulations. Electrical isolation also depends on the creepage distances on the PCB and air clearances. The AD8232 module uses 0603 resistors on its input. An 0603 doesn't have sufficient creepage. Is the electrode connector suitable? No way. It's a 3.5mm stereo jack plug. You could tape the electrodes to your chest then poke the jack plug into a mains outlet. I don't know why you'd want to but you could - right? What happens if a \"component\" fails? IEC 60601 says that the device must remain safe under a 'single fault condition'. A medical device must operate safely not only in normal conditions, but also in abnormal and single fault conditions. The standard does not require that the medical device remains safe with two or more independent faults. A \"fault\" is typically a component failure. What counts as a \"component\"? I have no idea. You could go through each of the electronic components and say \"what happens if this goes short-circuit?\" and \"what happens if this goes open-circuit?\". Is the PCB a \"component\"? How can it fail? Can it suddenly re-arrange itself and connect battery to two electrodes? I can't find a definition of a \"component\" or \"fault\". If it's battery operated and a \"component\" is an electronic component like a resistor or an IC then the circuit is safe. How much electromagnetic interference can I produce? EMC is a big problem when designing medical equipment. Hospitals are full of electronic stuff that people's lives depend on so the EMC requirements for medical equipment are a lot tougher than for domestic electronics. I have no idea how much EMC the board produces. The biggest culprit is probably the Arduino. I've never had an Arduino interfere with a TV or cellphone but I suppose it might. In theory, you should put the circuit in a Faraday cage and worry about what wires go in and out. In practice, I don't suppose you've ever thought about EMC when you build an Arduino circuit, have you? So you've built your medical electronics and done the safety analysis and then IEC 60601 has one more surprise for you. Your circuit has to survive a defibrillator. What is the standard for a defibrillator? I couldn't find one. Each manufacturer decides for themselves and the physician can decide what to apply. Shall we guess a capacitor charged to 300V containing 300 joules? That's connected to your chest somewhere near the ECG electrodes. I suspect that will fry the circuit. IEC 60601 says that the device must remain safe - it doesn't say that it has to continue to work. A proper medical ECG can survive a defibrillator and go on working. Normally, you would have some protection diodes on the connections to the electrodes. The AD8232 module doesn't have them. The bottom line is: you could make this circuit into a medical device that would conform to IEC 60601 but it would be a lot of work and testing and certification would be a huge expense. This is just a circuit you're building for fun. See here and here for discussions of the dangers of a small battery. I have measured the resistance between the electrodes as 150k so, in the worst case, a 6V battery gives a 40uA current - well below the milliamps needed for a battery to be dangerous.\n\nThe AD8232 chip contains a high quality, low noise instrumentation amplifier and signal conditioning to remove noise. It is intended primarily for recording ECG and takes a lot of the hard work out of designing a system. Buy a module like the one in the photo. Search eBay for \"AD8232 module\" or \"ecg module\". For convenience, get one with leads and electrode pads. Connect it to an Arduino Nano (or Uno or Mini with a 16MHz 328P) as shown above. I used a solderless breadboard. The AD8232 includes \"leads off detection\". If either lead is disconnected, the LO+ or LO- pins of the module go high. For initial testing, I connected the LO+ and LO- pins to two LEDs though 1k resistors to ground. The LEDs light when a lead is disconnected. For the final circuit, remove the LEDs and connect LO+ and LO- to the Arduino. Don't leave the LEDs connected - the AD8232 pins won't go high enough for the Arduino inputs to register HIGH. Download the ArdECG0.ino sketch and upload it to the Nano. Connect the Nano to a PC running on batteries. In the Arduino IDE, select the Tools|SerialPlotter menu command. Set the baud to 57600. With the module I bought, the electrode leads are coloured: Yours may be coloured differently. Which lead is which? try touching the leads together: My module came with only 3 sticky electrodes. They'll get used up quickly so I decided to make my own. I happened to have some of the popper connectors left over from another project. I used tinplate for the electrodes themselves. Copper coins work as well but tarnish more quickly and stain your skin. As electrode jelly, I mixed thick shampoo and salt. I stuck them onto my chest with masking tape - it would last a few hours. Attach the electrodes as shown in the picture above.\n• LA to the left side of your chest below the clavicle (collar bone)\n• RA to the right side of your chest below the clavicle\n• RL somewhere low down away from the heart The RL electrode is called \"Right Leg\" but it doesn't actually need to be on your leg. It's a reference electrodethat reduces common-mode interference. Anywhere well below and away from your heart is fine. The lower-left of the abdomen is good. Try to avoid muscles - their movement and electrical activity could interfere with the signal. Google for \"ecg 3 lead electrode placement\" for other diagrams.\n\nDoctors think of the heart as a complex organ but to an electronics designer, it is simply a generator of electrical potentials - several tens of millivolts. The sinoatrial node (SA node) acts as an oscillator generating a pulse every second or so. Electronically, it's a relaxation oscillator (or Van der Pol oscillator). The pulse travels slowly to the muscles of the atria and to the atrioventricular node (AV node). The muscles of the atria contract and then relax. As they contract, they pump blood into the ventricles. As they relax, the atria take in blood through the veins from the body or the lungs. The AV node delays the pulse (by 120-200mS) then sends it to the muscles of the ventricles. Electronically, it too is a relaxation oscillator but its period is much longer than the SA oscillator. It is \"prematurely\" triggered by the SA oscillator so they become entrained. If the SA oscillator fails, the AV oscillator can oscillate on its own as a backup system. The muscles of the ventricles contract and then relax. As they contract, they pump blood to the body or the lungs. The whole process takes around 500mS. It takes more power to pump blood round the body so the biggest signal we see is from the muscles of the left ventricle. Sodium, potassium and calcium ions are pumped across the membranes of the cells of the heart muscles. When a heart muscle is relaxed, the difference in ion concentrations causes a 90mV potential difference across the cell membrane. Inside the cell is more negative. When an action potential occurs a muscle contraction is triggered, Sodium channels open, Na+ ions rush into the cell by diffusion and the voltage goes to zero. That's called \"depolarisation\". After a 100mS delay, potassium channels open, K+ ions rush out of the cell and re-establish the 90mV resting potential. That's called \"repolarisation\". Ion pumps then restore the ion concentrations. (Calcium ions are also involved but I'm ignoring them.) When an action potential occurs in a cell, the cell next to it is triggered. So the action potential spreads through the muscle and also via the Purkinje fibers. It's a slow process; no fast nerve conduction involved. Purkinje fibers can oscillate by themselves at 20-40 bpm and so act as a backup system if the SA and AV oscillators fail. An ECG records the action potentials of the different muscles. The action potentials of the muscles are transmitted through the chest wall and skin by simple electrical conduction. So the conduction is fast. By the time it reaches the skin the signal is around 1mV. Because different action potentials occur in different regions of the heart, by repositioning the ECG electrodes you can record activities in different muscles. With the electrodes at the left and right under the clavicles, you'll get the classical PQRST shape you see in a textbook (called \"Lead I\"). If you position the electrodes elsewhere you can pick-up other details of heart activity; different positions for pairs of electrodes are called \"axes\". It's confusing, when doctors talk about \"leads\" and \"axes\". When they say \"lead\", they don't mean a lead - i.e. an electrode. Remember, what an ECG displays is the difference between two electrodes - it's a differential amplifier. The LL or RL electrode acts as a ground to help with common-mode rejection. A \"12 Lead\" ECG has 6 electrodes called V1 to V6 which are in a line in front of and to the bottom-left of the heart. Then there are RA and LA near your armpits. There may be two reference electrodes: LL and RL; the extra one doesn't seem to do much so there's usually just one. Pairs of electrodes are also called \"leads\" - LA-RA is called \"Lead I\", LL-RA is called \"Lead II\" and LL-LA is called \"Lead III\". It's a mess.\n• V1 is placed on the 4th intercostal space on the Right side of the sternum\n• V2 is placed on the 4th intercostal space on the Left side of the sternum\n• V4 is placed in the 5th intercostal space in a perpendicular line from the left nipple\n• V3 is placed between V2 and V4\n• V6 is in the 4th intercostal space in the left mid-axillary line (from the armpit to the hip)\n• V5 is placed between V4 and V6 The different \"leads\" are like looking towards the centre of the heart from different directions in 3D (see diagram above). The directions are called \"axes\". To add more confusion the heart also has an \"axis\" - the electrical activity is symmetrical about that axis. If part of the heart goes wrong, the heart's axis might have \"deviation\". If \"leads\" I, II and III look roughly the same, that's normal; if they're different, that's \"deviation\". Broadly, what can go wrong with the whole system is that the nodes (oscillators) or the different muscles stop functioning properly. For instance, parts of the muscles might be starved of oxygen and they don't produce an action potential. Or the SA node might run at the wrong rate or the SA and AV nodes might become disconnected and the oscillators run at different rates.\n\nThe display is a 2.8\" colour TFT LCD screen with a ILI9341 controller, 320x240 pixels. I chose a 320x240 SPI display because can be updated reasonably quickly and uses few Arduino pins. Search eBay for \"320 240 TFT SPI\" and you'll find a variety of displays. Get one that looks the same as the photo. A display without a touch screen is cheaper. I don't use the touch screen function in this project. I want to run the unit on 4 AA cells or a Li-ion cell. As the AA cells discharge their voltage falls. I've found that the Arduino, display and AD8232 work fine with a supply voltage as low as 3V but the touch-screen stops below 4.5V. The LCD has the following pins:\n• MISO SPI data out of LCD (ignored)\n• T_DO SPI data out of touch (ignored) The display I bought has a built-in 3V3 regulator. If you look on the back of the PCB, you'll see it connected to the VCC pin. It's a 662K chip. So the module can be powered by 5V and you can connect it directly to your 5V Arduino pin. The LED power pin can also be connected directly to the 5V pin. The logic pins of the display require 3.3V signals. You can't connect them directly to the 5V I/O pins of the Arduino. I've used resistors to drop the voltage. Adafruit very kindly publish an ILI9341 library and several other libraries are available in Github and elsewhere. I tried a few and didn't like any of them. Some simply didn't work and all were huge. You write an Arduino sketch that draws a line and some text and you find your memory if 75% full. So I wrote my own drivers. Wire up the display as shown and download the ArdECG1.ino sketch. I've decided I don't like the way the Arduino IDE uses \"libraries\". It makes version control difficult. So I now keep the code needed to compile a sketch together. Put all these files in the same folder: SimpleILI9341 has a standard set of drawing commands very similar to all such libraries. Some of the \"fast\" libraries you can download use special timing loops and are upset when other, maybe slower, devices are used on the same bus. SimpleILI9341 is written in C rather than assembler so isn't quite as fast as it could be but is much more portable and it shares the SPI bus politely with other devices. A Windows program can be downloaded which allows you to make your own fonts and icons. You can download the ILI9341 data sheet from the web. You send it a command by set DC high set CS low send zero or more data bytes set CS high You can see how I do it in the tft_write functions. The data bytes might be a whole row of pixels or a setting for a control register. The ILI9341Begin() function in the library shows you the initialisation command set I've chosen. You might want to change the commands if you choose a different ILI9341 display (e.g. with more pixels) or want a different orientation. I hope my code is easy for you to see how to change if you need to. In the circuit diagram are components in a box labelled \"Fake Pulse\". Do not include them in your final build. They are useful during development and debugging. In the ArdECG1.ino sketch there is a #define to enable/disable fake pulse generation. It's somewhere near the top: Comment out the line to remove the fake pulse.\n\nThe large display mode allows you to examine one or two heart beats in detail. It shows a red background grid to make it look more like a ECG standard chart. An ECG chart has large and small red squares printed on. The standard scale is\n• the x-axis is time with one large square being 200mS\n• the y-axis is voltage with one large square being 0.5mV. Of course, the doctor could have fiddled with the knobs of the ECG machine and changed the gain or the chart speed but pictures in textbooks will show the standard scale. The display shows the beats per minute in the top left corner. The sketch attempts to recognise \"beats\" but will be confused by noise or poor electrode connections. The sketch tries to keep a peak in the left third of the screen so it isn't jumping around too much and is easier to study. It can only do so it the heart beat is regular but a healthy heart doesn't beat regularly so that feature doesn't work too well. You should be able to see the classic ECG trace you get in a textbook. The first bump is P wave. That's the atrial depolarisation - the muscles of the atria starting to contract. There's a pause - the \"PR segment\" - while blood flows into the ventricles. The big spike is the QRS complex. That's the ventricular depolarisation - the muscles of the ventricles starting to contract. There's another pause while blood flows out of the ventricles. The next bump is the T wave. That's ventricular repolarisation as the muscles of the ventricles relax. There's another pause and it all happens again. There ought to be a bump for atrial repolarisation but it's hidden under the QRS complex. There can be a U depolarisation wave but it's often too small to be seen. It takes years to train a cardiologist but you should be able to see broadly what's going on. Here, here and here are some web pages. Or search for \"ECG interpretation\". The P wave can tell you about what's going on in the atria. For instance the shape of the P wave can tell you whether the left and right atria are acting together. If the P waves and the QRS waves are not synchronised then the two oscillators have become disconnected. The QRS and ST segments show what's going on in the ventricles. An elevated ST segment can indicate a myocardial infarction (\"heart attack\"). A depressed ST segment can indicate a myocardial ischaemia (\"angina\"). Both are due to parts of the ventricle muscles not functioning properly. Ischaemia is when a region of the muscles is struggling due to lack of oxygen; infarction is when a region is in really in a bad way and has given up. But don't panic if you seem to have an elevated ST - it can also be due to the electrodes not being positioned properly.\n\nI found that the circuit had little noise so long as it was running on its own battery and the electrodes were making good contact. But there is some noise and I thought I'd try removing it with a digital filter. You can read about digital filtering on an Arduino in my Speech Recognition project. I won't repeat it all here. As the sample rate is very low - every 5mS - the Arduino has plenty of time to do the maths. There is a good discussion of digital filtering here and an online calculator for the coefficients here. The calculator gives the coefficients as real numbers; multiply them by 65536 before plugging them into my code. Of course, you don't want the filter to mess up the shape of the \"signal\" - just to remove the \"noise\". It's important to look at the display with and without filtering and convince yourself you like the results. In particular, the Q and S parts of the wave have frequency components close to the \"noise\" frequencies you are trying to remove. You don't want the filter to alter them. I tried a low-pass filter (40Hz Q=1) and it made some difference. The noise gets worse if you hold your hand near a mains device like a desk lamp. So I tried a 50Hz notch filter (Q=1 OR Q=2) - that removed a lot of noise. I liked the result and stuck with that. It seems that most of the noise is mains hum. I have a philosophical distrust of filters. I think words like \"signal\" and \"noise\" can be a delusion. The \"truth\" is what you get from the ADC. Anything you do to the data after that is just you making the data prettier so it pleases you more. I also wondered if a high-pass filter could remove the big fluctuations due to muscle movement. I added a high-pass filter with a cut-off frequency of 2Hz (Q=1). It may have fixed the big fluctuations but it also really messed up the P and T waves. I took it out. You'll see calls to the different filter functions in the main loop() function. Comment them out (or in) as you see fit.\n\nNow it needs a battery. The total current consumption is around 127mA and I'd like it to run for 8 hours so that's 1000mAh. Surprisingly, the Arduino, the AD8232 module and the display all run fine with 3.7V on the \"5V\" pin. By the time it gets down to 3V, the display if getting dim but everything still works. My first thought was to run it 4 AA cells. An AA cell has a capacity of over 1000mAh. The initial voltage of 4 typical AA cells is more than 6V but it drops to 4.8V as it discharges. The Arduino cannot withstand 6V on its \"5V\" pin so we must connect the 4 AA battery pack to the Arduino's Vin pin. The Arduino has a regulator with a dropout of around 0.7V so the voltage of the Arduino's \"5V\" pin will be above 4V for most of the battery life. AA cells are a good choice. They have the advantage that \"recharging\" takes a minute. The only problem is their huge size. A nice slim unit would have a big fat battery pack on the back. When a local electronics shop closed I bought a big bag of Li-ion battery packs at a good price. It included several NP-BG1 packs (for Sony Cyber-shot). An NP-BG1 contains a 1000mAh Li-ion cell (capacity depends on manufacturer). What if we connect a 3.7V Li-ion cell to the \"5V\" pin of the Arduino? It all works fine. That simplifies the power supply. So I added a Li-ion cell and a 3.4mm barrel jack to charge it. The On/Off switch connects the cell to either the Arduino or the charger so it's impossible to charge the unit when it's in use.\n\nHow can this project be expanded? It would be nice to save a whole day's worth of data. With a sample period of 5mS, that's 17Mbytes of data. At first sight, an SD card would be ideal but the write time of an SD card is very variable. Sometimes it takes a couple of mS but sometimes it erases a large number of blocks of flash memory and takes couple of hundred mS. An SD card can cope with the average data rate so I'd probably have a second Arduino that buffered the data stream from the ECG Arduino and wrote it occasionally in large blocks - I wouldn't trust multi-tasking on a single Arduino but it might work. Serial EEPROMS are available that can write fast enough but only hold a few Mbits. A large flash memory chip may be the way to go - you may be able to erase it all (a slow operation) at the start of the day then write individual bytes in a few mS. But an SD card has the advantage that you can take it out and plug it into a PC. There are a ridiculous number of ECG file formats. The HL7 aECG standard might be the one to go for. If you stored a whole day's data then the Poincaré plot becomes really useful. Click on a point and that beat is displayed so you can quickly find weird beats. Pulse arrival time (PAT) or pulse transit time (PTT) is the time interval between a R wave in the ECG and the measurement of the pulse on (e.g.) your finger with a pulseoximeter. Pulseoximeters are very easy to build. It seems that pulse arrival time is related to blood pressure. It needs calibrating for each individual but then it's a simple non-invasive way of measuring blood pressure over a whole day. It can also be used to estimate arterial stiffness. There is a linear relationship between pulse transit velocity and systolic blood pressure. Can the ECG act as an electro-oculograph? I taped the ECG electrodes just to the outside of my left and right eye sockets. It worked. I could easily measure a 0.7mV \"square wave\" as I moved my eyes to the left or right. The problem is that the ECG module I'm using has built-in filters. The high-pass filter removes signals below about 5Hz so it a slow square wave looks like this. Maybe using the AD8232 chip without the rest of the module would mean a different filter could be used but the AD8232 has lots of other built-in signal processing. I think it would be worth trying if you're interested in electrooculography. Taping the electrodes above and below the eye didn't work at all well. I could hardly see an effect. But a blink was easily visible. I also tried to get electromyograms using the ECG machine. It didn't work. I think myograms should be regarded as fast AC signals. Electromyogram circuits generally include a rectifier and smoother so the overall AC \"energy\" of the signal is measured. The filtering in the AD8232 module removes all those high frequencies and myograms don't show up at all."
    },
    {
        "link": "https://instructables.com/ECG-Monitoring-System-by-Using-Arduino-or-AD8232",
        "document": "About: Working in Bharti Airtel Ltd. as Executive Trainee. My core skillset includes Networking, Python Scripting , Automation telecommunication, optical networks. Heart disease was becoming a big disease which health killer people for many years.World Health Organization (WHO) research also shows that the most people was dying due to heart disease. Therefore, This disease can not be taken lightly. Hence, most health care equipment and monitoring system are designed to keep track the disease. As we know that by analyzing or monitoring the ECG signal at initial stage these disease can be prevented.So i am working in this project .\n\nAn ECG Sensor with disposable electrodes attaches directly to the chest to detect every heart beat. The electrodes of ecg sensor will conversion heart beat to electric signal. ECG Sensors is very light weight, slim and accurately to measures continuous heart beat and give rate data of heart beat. This device always use by trained doctor and medical assistances. Electrodes of ECG Sensor have 3 pins and connected by cable with 30 inches in length. It is make ECG sensor easy to connect with controller and placed at the waist or pocket. In additional, the plug-in for the cable is a male sound plug which will make the cable to easily removed or inserted into the amplifier board.The sensor assembled on an arm pulse and a leg pulse. All of every sensor electrodes have methods to assemble in body. So, training and tutorials are needed for user. You can choose type of electrode to measure heart beat.\n\nThe AD8232 module breaks out nine connections from the IC that you can solder pins, wires, or other connectors to. SDN, LO+, LO-, OUTPUT, 3.3V, GND provide essential pins for operating this monitor with an Arduino or other development board. Also provided on this board are RA (Right Arm), LA (Left Arm), and RL (Right Leg) pins to attach and use your own custom sensors. Additionally, there is an LED indicator light that will pulsate to the rhythm of a heartbeat. · 3.5mm Jack for Biomedical Pad Connection or Use 3 pin header.\n\nThe figure above display of standard one cycle ECG signal from a heart beat. From the figure one cycle consist of P wave, QRS wave until T wave. P wave offers benefit information about the propagation time of the impulse to both atria. Then, follow with a flat trend called with the PR segment which is in consequence of propagation of the electric impulse from atria to ventricles. And follow with QRS complex wave which you can look in above figure. Q,R and S complex contains of three small wave i.e small Q wave, the high R wave and the small S wave. The QRS complex give information about the ventricular systole in consequence of the impulse propagation to the ventricles (Q wave), whereas the transmission to the whole tissue is caused by the R and S wave. The QRS complex provides information about fibrillation and arrhythmias, it can be helpful to analyze heart attacks. And then ST interval, it is following by the S wave and including with the T wave, it can point out the ischemia occurrences. It represents the period during which ventricles are contracting, which is the last stage of the heart cycle. The T wave permits one to have information about the cardiac hypertrophy, heart attacks, and ischemia. Moreover, others parameters, such as the QT interval, allow specific further pathologies to be characterized. Finally, the ECG signal ended with a small peak, U wave. Changes in parameters of ECG with Heart Diseases: From the ECG parameters, analysis a Heart Rate Variability (HRV) of the ECG signal can be implemented. According to the parameters changes comparing to the normal parameters above, the system may predict which disease that the user potentially suffering from."
    },
    {
        "link": "https://how2electronics.com/ecg-monitoring-with-ad8232-ecg-sensor-arduino",
        "document": "Heart diseases are becoming a big issue for the last few decades and many people die because of certain health problems. Therefore, heart disease cannot be taken lightly. By analyzing or monitoring the ECG signal at the initial stage this disease can be prevented. So we present this project, i.e ECG Monitoring with AD8232 ECG Sensor & Arduino with ECG Graph.\n\nThe AD8232 is a neat little chip used to measure the electrical activity of the heart. This electrical activity can be charted as an ECG or Electrocardiogram. Electrocardiography is used to help diagnose various heart conditions.\n\nSo in this project, we will interface AD8232 ECG Sensor with Arduino and observe the ECG signal on a serial plotter or Processing IDE.\n\nYou can check the advanced version of this project here: IoT Based ECG Monitoring with AD8232 ECG Sensor & ESP32\n\nAn ECG is a paper or digital recording of the electrical signals in the heart. It is also called an electrocardiogram or an EKG. The ECG is used to determine heart rate, heart rhythm, and other information regarding the heart’s condition. ECGs are used to help diagnose heart arrhythmias, heart attacks, pacemaker function, and heart failure.\n\nECG can be analyzed by studying components of the waveform. These waveform components indicate cardiac electrical activity. The first upward of the ECG tracing is the P wave. It indicates atrial contraction.\n\nThe QRS complex begins with Q, a small downward deflection, followed by a larger upwards deflection, a peak (R); and then a downwards S wave. This QRS complex indicates ventricular depolarization and contraction.\n\nFinally, the T wave, which is normally a smaller upwards waveform, representing ventricular re-polarization.\n\nAn electrocardiogram can be a useful way to find out whether your high blood pressure has caused any damage to your heart or blood vessels. Because of this, you may be asked to have an ECG when you are first diagnosed with high blood pressure.\n\nSome of the things an ECG reading can detect are:\n\nThis sensor is a cost-effective board used to measure the electrical activity of the heart. This electrical activity can be charted as an ECG or Electrocardiogram and output as an analog reading. ECGs can be extremely noisy, the AD8232 Single Lead Heart Rate Monitor acts as an op-amp to help obtain a clear signal from the PR and QT Intervals easily.\n\nThe AD8232 is an integrated signal conditioning block for ECG and other biopotential measurement applications. It is designed to extract, amplify, and filter small biopotential signals in the presence of noisy conditions, such as those created by motion or remote electrode placement.\n\nThe AD8232 module breaks out nine connections from the IC that you can solder pins, wires, or other connectors to. SDN, LO+, LO-, OUTPUT, 3.3V, GND provide essential pins for operating this monitor with an Arduino or other development board. Also provided on this board are RA (Right Arm), LA (Left Arm), and RL (Right Leg) pins to attach and use your own custom sensors. Additionally, there is an LED indicator light that will pulsate to the rhythm of a heartbeat.\n\nNote: This product is NOT a medical device and is not intended to be used as such or as an accessory to such nor diagnose or treat any conditions.\n\nThe AD8232 Heart Rate Monitor breaks out nine connections from the IC. We traditionally call these connections “pins” because they come from the pins on the IC, but they are actually holes that you can solder wires or header pins to.\n\nWe’ll connect five of the nine pins on the board to Arduino. The five pins you need are labeled GND, 3.3v, OUTPUT, LO-, and LO+.\n\nIt is recommended to snap the sensor pads on the leads before application to the body. The closer to the heart the pads are, the better the measurement. The cables are color-coded to help identify proper placement.\n\nOnce the code is uploaded, you can see the value on serial monitor and also on the serial plotter.\n\nBut if you want a separate graph and want to plot it on Processing IDE, you can use the code below and play.\n\nIf the processing sketch does not work, you may need to modify the following line:\n\nHere 2 is the port number, replace it with 1,3,4,5, or whatever your Arduino Port is.\n\nYou can check the advanced version of this project here: IoT Based ECG Monitoring. If you want to learn about Electromyography, you can follow the Myoware EMG Sensor Guide."
    },
    {
        "link": "https://forum.arduino.cc/t/wireless-ecg-monitoring-using-nano-sparkfun-ad8232-hc-05/578981",
        "document": "I'm trying to create a wireless setup for measuring ECG from the human body using a Sparkfun AD8232, Nano, and HC-05. My HC-05 doesn't have ZS-040 written on it, but it has the button and EN pin. So far, I have been able to successfully observe ECG by replacing Serial.begin(9600) with Serial.begin(57600) in the tutorial Arduino code at this link: AD8232 Heart Rate Monitor Hookup Guide - SparkFun Learn\n\nSo it seems that the arduino baud rate is 57600. The console confirms this when I upload the script from that tutorial:\n\n Using Port : COM7\n\n Using Programmer : arduino\n\n Overriding Baud Rate : 57600\n\n AVR Part : ATmega328P\n\n Chip Erase delay : 9000 us\n\nSo I've been trying to make sure that the HC-05 operates at this baud rate because the arduino nano/AD8232 combination works with this baud rate when connected to the serial port. I've tried using the code from Martyn (Arduino with HC-05 (ZS-040) Bluetooth module – AT MODE | Martyn Currey) as is and following these steps (not using a voltage divider at the moment):\n• Setup all the connections (apart from voltage divider)\n• Keep the Rx, Tx pins on the HC-05 disconnected and plug in USB to computer.\n• Upload the code. Then connect the Rx, Tx pins back to the HC-05.\n• Disconnect the Vcc on the HC-05, hold the button, connect the Vcc on HC-05, then release button.\n• Open serial monitor, which is set at 9600 baud rate, both NL&CR chosen, and type 'AT' and press enter.\n\nThe serial monitor gives no output in response to the 'AT' command:\n\n Sketch: C:\\Users\\fahee\\Desktop\\BTTry4\\BTTry4.ino\n\n 23:41:36.589 -> Uploaded: Mar 10 2019\n\n 23:41:36.623 ->\n\n 23:41:36.623 -> BTserial started at 38400\n\n 23:41:36.623 ->\n\n 23:41:40.701 -> >AT\n\nI have tried holding the button and sending the command, but no difference. I've also tried changing the Serial.begin(9600) in the code with Serial.begin(57600) and changing the serial monitor baud rate to 57600, but still doesn't work. I just want to make sure the baud rate is set correctly on the HC-05. Any ideas on what could be wrong? I'm thinking that maybe the voltage divider will fix the issue, based on the comments posted on his website.\n\nBelow is the code I'm trying to use for bluetooth:\n\nAnd here is the code I'm using for the AD8232 to function with the Arduino, based on the tutorial provided from Sparkfun:"
    },
    {
        "link": "https://cdnx.uobabylon.edu.iq/undergrad_projs/aryvUwQ0Fz9UvvkjQ.pdf",
        "document": ""
    }
]