[
    {
        "link": "https://vuejs.org/guide/essentials/event-handling",
        "document": "We can use the directive, which we typically shorten to the symbol, to listen to DOM events and run some JavaScript when they're triggered. The usage would be or with the shortcut, .\n\nThe handler value can be one of the following:\n• None Inline handlers: Inline JavaScript to be executed when the event is triggered (similar to the native attribute).\n• None Method handlers: A property name or path that points to a method defined on the component.\n\nInline handlers are typically used in simple cases, for example:\n\nThe logic for many event handlers will be more complex though, and likely isn't feasible with inline handlers. That's why can also accept the name or path of a component method you'd like to call.\n\nA method handler automatically receives the native DOM Event object that triggers it - in the example above, we are able to access the element dispatching the event via .\n\nThe template compiler detects method handlers by checking whether the value string is a valid JavaScript identifier or property access path. For example, , and are treated as method handlers, while and are treated as inline handlers.\n\nInstead of binding directly to a method name, we can also call methods in an inline handler. This allows us to pass the method custom arguments instead of the native event:\n\nSometimes we also need to access the original DOM event in an inline handler. You can pass it into a method using the special variable, or use an inline arrow function:\n\nIt is a very common need to call or inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides event modifiers for . Recall that modifiers are directive postfixes denoted by a dot.\n\nThe , , and modifiers mirror the options of the native method:\n\nThe modifier is typically used with touch event listeners for improving performance on mobile devices.\n\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for or when listening for key events:\n\nYou can directly use any valid key names exposed via as modifiers by converting them to kebab-case.\n\nIn the above example, the handler will only be called if is equal to .\n\nVue provides aliases for the most commonly used keys:\n\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\nThe modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\nThese modifiers restrict the handler to events triggered by a specific mouse button.\n\nNote, however, that , , and modifier names are based on the typical right-handed mouse layout, but in fact represent \"main\", \"secondary\", and \"auxiliary\" pointing device event triggers, respectively, and not the actual physical buttons. So that for a left-handed mouse layout the \"main\" button might physically be the right one but would trigger the modifier handler. Or a trackpad might trigger the handler with a one-finger tap, the handler with a two-finger tap, and the handler with a three-finger tap. Similarly, other devices and event sources generating \"mouse\" events might have trigger modes that are not related to \"left\" and \"right\" whatsoever."
    },
    {
        "link": "https://v2.vuejs.org/v2/guide/events",
        "document": "We can use the directive to listen to DOM events and run some JavaScript when they’re triggered.\n\nThe logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the attribute isn’t feasible. That’s why can also accept the name of a method you’d like to call.\n\nInstead of binding directly to a method name, we can also use methods in an inline JavaScript statement:\n\nSometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special variable:\n\nIt is a very common need to call or inside event handlers. Although we can do this easily inside methods, it would be better if the methods can be purely about data logic rather than having to deal with DOM event details.\n\nTo address this problem, Vue provides event modifiers for . Recall that modifiers are directive postfixes denoted by a dot.\n\nOrder matters when using modifiers because the relevant code is generated in the same order. Therefore using will prevent all clicks while will only prevent clicks on the element itself.\n\nUnlike the other modifiers, which are exclusive to native DOM events, the modifier can also be used on component events. If you haven’t read about components yet, don’t worry about this for now.\n\nVue also offers the modifier, corresponding to ‘s option.\n\nThe modifier is especially useful for improving performance on mobile devices.\n\nDon’t use and together, because will be ignored and your browser will probably show you a warning. Remember, communicates to the browser that you don’t want to prevent the event’s default behavior.\n\nWhen listening for keyboard events, we often need to check for specific keys. Vue allows adding key modifiers for when listening for key events:\n\nYou can directly use any valid key names exposed via as modifiers by converting them to kebab-case.\n\nIn the above example, the handler will only be called if is equal to .\n\nThe use of events is deprecated and may not be supported in new browsers.\n\nUsing attributes is also permitted:\n\nVue provides aliases for the most commonly used key codes when necessary for legacy browser support:\n\nA few keys ( and all arrow keys) have inconsistent values in IE9, so these built-in aliases should be preferred if you need to support IE9.\n\nYou can also define custom key modifier aliases via the global object:\n\nYou can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:\n\nNote that modifier keys are different from regular keys and when used with events, they have to be pressed when the event is emitted. In other words, will only trigger if you release a key while holding down . It won’t trigger if you release the key alone. If you do want such behaviour, use the for instead: .\n\nThe modifier allows control of the exact combination of system modifiers needed to trigger an event.\n\nThese modifiers restrict the handler to events triggered by a specific mouse button.\n\nYou might be concerned that this whole event listening approach violates the good old rules about “separation of concerns”. Rest assured - since all Vue handler functions and expressions are strictly bound to the ViewModel that’s handling the current view, it won’t cause any maintenance difficulty. In fact, there are several benefits in using :\n• None It’s easier to locate the handler function implementations within your JS code by skimming the HTML template.\n• None Since you don’t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.\n• None When a ViewModel is destroyed, all event listeners are automatically removed. You don’t need to worry about cleaning it up yourself."
    },
    {
        "link": "https://vuejs.org/guide/components/events.html",
        "document": "A component can emit custom events directly in template expressions (e.g. in a handler) using the built-in method:\n\nThe parent can then listen to it using :\n\nThe modifier is also supported on component event listeners:\n\nLike components and props, event names provide an automatic case transformation. Notice we emitted a camelCase event, but can listen for it using a kebab-cased listener in the parent. As with props casing, we recommend using kebab-cased event listeners in templates.\n\nIt's sometimes useful to emit a specific value with an event. For example, we may want the component to be in charge of how much to enlarge the text by. In those cases, we can pass extra arguments to to provide this value:\n\nThen, when we listen to the event in the parent, we can use an inline arrow function as the listener, which allows us to access the event argument:\n\nOr, if the event handler is a method:\n\nThen the value will be passed as the first parameter of that method:\n\nA component can explicitly declare the events it will emit using the macro option:\n\nThe method that we used in the isn't accessible within the section of a component, but returns an equivalent function that we can use instead: The macro cannot be used inside a function, it must be placed directly within , as in the example above. If you're using an explicit function instead of , events should be declared using the option, and the function is exposed on the context: As with other properties of the context, can safely be destructured:\n\nThe option and macro also support an object syntax. If using TypeScript you can type arguments, which allows us to perform runtime validation of the payload of the emitted events:\n\nAlthough optional, it is recommended to define all emitted events in order to better document how a component should work. It also allows Vue to exclude known listeners from fallthrough attributes, avoiding edge cases caused by DOM events manually dispatched by 3rd party code.\n\nSimilar to prop type validation, an emitted event can be validated if it is defined with the object syntax instead of the array syntax.\n\nTo add validation, the event is assigned a function that receives the arguments passed to the call and returns a boolean to indicate whether the event is valid or not."
    },
    {
        "link": "https://learnvue.co/articles/vue-event-handling-guide",
        "document": "Vue event handling is a necessary aspect of every Vue project. It’s used to capture user input, share data, and so many other creative ways.\n\nIn this article, I’ll be going over the basics and providing some code examples for working with events. It will just include the tips/methods that I find the most useful, for an indepth look at all the things Vue can do, check out the Vue docs.\n\nUsing the directive ( for short) we can listen to DOM events and run either a handler method or inline JavaScript\n\nWe’ll be covering some of the more common events that you may want to capture, click here for a complete list of DOM events.\n\nA common use case in any web framework is wanting a child component to be able to emit an event to its parent. This will allow for two-way data binding.\n\nOne example of this is sending data from an input component to the parent form.\n\nDepending on if we are using the Options API or the Composition API, the syntax for emitting events is different.\n\nIn the Options API, we can simply call\n\nOur example of our component might look like this.\n\nHowever, the Composition API has a different reference. Instead, we can use the Vue 3 setup methodto directly access the emit method.\n\nAs long as we import our context object, we can call emit using the same arguments as the Options API.\n\nOne way to tidy up our code is to import emit directly using object destructuring. That would look something like this.\n\nRegardless if we use the Options or Composition API, our parent component listens to our event the same way.\n\nIf the method we emit also passes a value, we can capture it in two different ways – depending if we are working inline or with another method.\n\nFirst, we can access the passed value using in our template.\n\nSecond, if we use a method to handle our event, the passed value will be automatically passed as the first argument to our method.\n\nHere are a list of the primary DOM mouse events that we can capture in our directive:\n\nFor our click events, we can also add mouse event modifiers to limit which mouse buttons will trigger our event. There are three (one for each button): , , and .\n\nThere are three DOM keyboard events that we can listen to\n\nOften, we want to detect these events on a certain key, there are two ways to do this.\n• Vue has aliases for certain keys ( , , , , , , , , )\n\nFor certain projects, we may only want to trigger events if a user is pressing down a modifier key. A modifier key is something like command or shift.\n\nIn Vue, there are four system modifiers.\n\nThis can be extremely useful for creating features like custom keyboard shortcuts inside your Vue application.\n\nGoing through the Vue docs, there is also an modifier, ensuring that the event will only be triggered if only the keys we specify are pressed and no others.\n\nFor all DOM events, we can use some modifiers that change how they run. Whether it’s stopping propagation or prevent the default action, Vue has a couple of built in DOM event modifiers.\n\nHopefully, this short cheatsheet gave you a better view of Vue event handling and what’s possible.\n\nAs always, I recommend also checking out the Official Vue Documentation for a more in-depth look at the features of Vue event handling."
    },
    {
        "link": "https://vuejs.org/guide/introduction",
        "document": "Vue (pronounced /vjuː/, like view) is a JavaScript framework for building user interfaces. It builds on top of standard HTML, CSS, and JavaScript and provides a declarative, component-based programming model that helps you efficiently develop user interfaces of any complexity.\n\nHere is a minimal example:\n\nThe above example demonstrates the two core features of Vue:\n• None Declarative Rendering: Vue extends standard HTML with a template syntax that allows us to declaratively describe HTML output based on JavaScript state.\n• None Reactivity: Vue automatically tracks JavaScript state changes and efficiently updates the DOM when changes happen.\n\nYou may already have questions - don't worry. We will cover every little detail in the rest of the documentation. For now, please read along so you can have a high-level understanding of what Vue offers.\n\nVue is a framework and ecosystem that covers most of the common features needed in frontend development. But the web is extremely diverse - the things we build on the web may vary drastically in form and scale. With that in mind, Vue is designed to be flexible and incrementally adoptable. Depending on your use case, Vue can be used in different ways:\n• Embedding as Web Components on any page\n• Targeting desktop, mobile, WebGL, and even the terminal\n\nIf you find these concepts intimidating, don't worry! The tutorial and guide only require basic HTML and JavaScript knowledge, and you should be able to follow along without being an expert in any of these.\n\nIf you are an experienced developer interested in how to best integrate Vue into your stack, or you are curious about what these terms mean, we discuss them in more detail in Ways of Using Vue.\n\nDespite the flexibility, the core knowledge about how Vue works is shared across all these use cases. Even if you are just a beginner now, the knowledge gained along the way will stay useful as you grow to tackle more ambitious goals in the future. If you are a veteran, you can pick the optimal way to leverage Vue based on the problems you are trying to solve, while retaining the same productivity. This is why we call Vue \"The Progressive Framework\": it's a framework that can grow with you and adapt to your needs.\n\nIn most build-tool-enabled Vue projects, we author Vue components using an HTML-like file format called Single-File Component (also known as files, abbreviated as SFC). A Vue SFC, as the name suggests, encapsulates the component's logic (JavaScript), template (HTML), and styles (CSS) in a single file. Here's the previous example, written in SFC format:\n\nSFC is a defining feature of Vue and is the recommended way to author Vue components if your use case warrants a build setup. You can learn more about the how and why of SFC in its dedicated section - but for now, just know that Vue will handle all the build tools setup for you.\n\nVue components can be authored in two different API styles: Options API and Composition API.\n\nWith Options API, we define a component's logic using an object of options such as , , and . Properties defined by options are exposed on inside functions, which points to the component instance:\n\n// and will be exposed on `this`. // Methods are functions that mutate state and trigger updates. // They can be bound as event handlers in templates. // Lifecycle hooks are called at different stages // This function will be called when the component is mounted.\n\nTry it in the Playground\n\nWith Composition API, we define a component's logic using imported API functions. In SFCs, Composition API is typically used with . The attribute is a hint that makes Vue perform compile-time transforms that allow us to use Composition API with less boilerplate. For example, imports and top-level variables / functions declared in are directly usable in the template.\n\nHere is the same component, with the exact same template, but using Composition API and instead:\n\nTry it in the Playground\n\nBoth API styles are fully capable of covering common use cases. They are different interfaces powered by the exact same underlying system. In fact, the Options API is implemented on top of the Composition API! The fundamental concepts and knowledge about Vue are shared across the two styles.\n\nThe Options API is centered around the concept of a \"component instance\" ( as seen in the example), which typically aligns better with a class-based mental model for users coming from OOP language backgrounds. It is also more beginner-friendly by abstracting away the reactivity details and enforcing code organization via option groups.\n\nThe Composition API is centered around declaring reactive state variables directly in a function scope and composing state from multiple functions together to handle complexity. It is more free-form and requires an understanding of how reactivity works in Vue to be used effectively. In return, its flexibility enables more powerful patterns for organizing and reusing logic.\n\nYou can learn more about the comparison between the two styles and the potential benefits of Composition API in the Composition API FAQ.\n\nIf you are new to Vue, here's our general recommendation:\n• None For learning purposes, go with the style that looks easier to understand to you. Again, most of the core concepts are shared between the two styles. You can always pick up the other style later.\n• None\n• None Go with Options API if you are not using build tools, or plan to use Vue primarily in low-complexity scenarios, e.g. progressive enhancement.\n• None Go with Composition API + Single-File Components if you plan to build full applications with Vue.\n\nYou don't have to commit to only one style during the learning phase. The rest of the documentation will provide code samples in both styles where applicable, and you can toggle between them at any time using the API Preference switches at the top of the left sidebar.\n\nDifferent developers have different learning styles. Feel free to pick a learning path that suits your preference - although we do recommend going over all of the content, if possible!"
    },
    {
        "link": "https://getbootstrap.com/docs/4.0/components/buttons",
        "document": "Use Bootstrap’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\n\nBootstrap includes several predefined button styles, each serving its own semantic purpose, with a few extras thrown in for more control.\n\nThe classes are designed to be used with the element. However, you can also use these classes on or elements (though some browsers may apply a slightly different rendering).\n\nWhen using button classes on elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a to appropriately convey their purpose to assistive technologies such as screen readers.\n\nIn need of a button, but not the hefty background colors they bring? Replace the default modifier classes with the ones to remove all background images and colors on any button.\n\nFancy larger or smaller buttons? Add or for additional sizes.\n\nCreate block level buttons—those that span the full width of a parent—by adding .\n\nButtons will appear pressed (with a darker background, darker border, and inset shadow) when active. There’s no need to add a class to s as they use a pseudo-class. However, you can still force the same active appearance with (and include the attribute) should you need to replicate the state programmatically.\n\nMake buttons look inactive by adding the boolean attribute to any element.\n\nDisabled buttons using the element behave a bit different:\n• s don’t support the attribute, so you must add the class to make it visually appear disabled.\n• Some future-friendly styles are included to disable all on anchor buttons. In browsers which support that property, you won’t see the disabled cursor at all.\n• Disabled buttons should include the attribute to indicate the state of the element to assistive technologies.\n\nThe class uses to try to disable the link functionality of s, but that CSS property is not yet standardized. In addition, even in browsers that do support , keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, add a attribute on these links (to prevent them from receiving keyboard focus) and use custom JavaScript to disable their functionality.\n\nDo more with buttons. Control button states or create groups of buttons for more components like toolbars.\n\nAdd to toggle a button’s state. If you’re pre-toggling a button, you must manually add the class and to the .\n\nBootstrap’s styles can be applied to other elements, such as s, to provide checkbox or radio style button toggling. Add to a containing those modified buttons to enable their toggling behavior via JavaScript and add to style the s within your buttons. Note that you can create single input-powered buttons or groups of them.\n\nThe checked state for these buttons is only updated via event on the button. If you use another method to update the input—e.g., with or by manually applying the input’s property—you’ll need to toggle on the manually.\n\nNote that pre-checked buttons require you to manually add the class to the input’s ."
    },
    {
        "link": "https://mdbootstrap.com/docs/vue/utilities/position",
        "document": "Use these helpers for quickly configuring the position of an element.\n\nPosition an element at the top of the viewport, from edge to edge. Be sure you understand the ramifications of fixed position in your project; you may need to add additional CSS.\n\nPosition an element at the bottom of the viewport, from edge to edge. Be sure you understand the ramifications of fixed position in your project; you may need to add additional CSS.\n\nPosition an element at the top of the viewport, from edge to edge, but only after you scroll past it. The utility uses CSS’s , which isn’t fully supported in all browsers."
    },
    {
        "link": "https://mdbootstrap.com/docs/vue/components/buttons",
        "document": "Use MDB custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more. Note: Read the API tab to find all available options and advanced customization\n\nButtons, as one of the key UI elements, must have their own hierarchy. This means that the user should be able to easily identify which button is the most important (primary button), which is less important (secondary button) and which presents completely additional information (tertiary button). Elements with strong, filled backgrounds and shadows attract attention the most, which is why button primary is built in this way. A delicate background without shadows is less engaging, so it is well suited for button secondary. The lack of background and shadow makes the element the least visible. These features characterize the button tertiary. Note: Button tertiary may require additional margins. Without extra margins, the button edge will be flush with adjacent elements (which is sometimes the desired result). If you need margin - simply add margin utility classes like .\n\nMDB includes several predefined button styles, each serving its own semantic purpose. Conveying meaning to assistive technologies: \n\n Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies – such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the class.\n\nIn need of a button, but not the hefty background colors they bring? Add property to remove all background images and colors on any button. Some of the button styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.\n\nTo make it works properly you have to put an icon inside. The text will not fit in. You can find hundreds of available icons in our icons docs. You can apply almost all the same classes and attributes to the floating buttons as to the regular buttons - colors, ripples, sizes, outline, etc.\n\nCombining our icons and custom colors you can create social buttons. Combining our icons and custom colors you can create social buttons. In the example below, we place a Facebook icon inside the button and set a background-color to (facebook brand color). A few the most popular brands in form of social buttons. By adding property you can create a nice, floating social button. You don't need to use only an icon. You can add text to the button. Remember to add some spacing classes (for example ) to provide a proper space between icon and text. By removing button classes and replacing with you can create minimalistic, clickable icons. By using a badge you can create a button with a notification to provide a counter.\n\nMake buttons look inactive by adding the boolean attribute to any element. Disabled buttons have applied to, preventing hover and active states from triggering. Disabled MDBBtn using the tag behave a bit different:\n• s don’t support the attribute, so you must add the class to make it visually appear disabled.\n• Some future-friendly styles are included to disable all on anchor buttons. In browsers which support that property, you won’t see the disabled cursor at all.\n• Disabled buttons should include the attribute to indicate the state of the element to assistive technologies. Link functionality caveat: \n\n The class uses to try to disable the link functionality of s, but that CSS property is not yet standardized. In addition, even in browsers that do support , keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, add a attribute on these links (to prevent them from receiving keyboard focus) and use custom JavaScript to disable their functionality.\n\nCreate responsive stacks of full-width, “block buttons” like those in Bootstrap 4 with a mix of our display and gap utilities. By using utilities instead of button specific classes, we have much greater control over spacing, alignment, and responsive behaviors. Here we create a responsive variation, starting with vertically stacked buttons until the breakpoint, where replaces the class, thus nullifying the utility. Resize your browser to see them change. You can adjust the width of your block buttons with grid column width classes. For example, for a half-width “block button”, use . Center it horizontally with , too. Additional utilities can be used to adjust the alignment of buttons when horizontal. Here we’ve taken our previous responsive example and added some flex utilities and a margin utility on the button to right align the buttons when they’re no longer stacked."
    },
    {
        "link": "https://getbootstrap.com/docs/5.2/components/buttons",
        "document": "Use Bootstrap’s custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\n\nBootstrap includes several predefined button styles, each serving its own semantic purpose, with a few extras thrown in for more control.\n\nIf you don’t want the button text to wrap, you can add the class to the button. In Sass, you can set to disable text wrapping for each button.\n\nThe classes are designed to be used with the element. However, you can also use these classes on or elements (though some browsers may apply a slightly different rendering).\n\nWhen using button classes on elements that are used to trigger in-page functionality (like collapsing content), rather than linking to new pages or sections within the current page, these links should be given a to appropriately convey their purpose to assistive technologies such as screen readers.\n\nIn need of a button, but not the hefty background colors they bring? Replace the default modifier classes with the ones to remove all background images and colors on any button.\n\nSome of the button styles use a relatively light foreground color, and should only be used on a dark background in order to have sufficient contrast.\n\nFancy larger or smaller buttons? Add or for additional sizes.\n\nYou can even roll your own custom sizing with CSS variables:\n\nMake buttons look inactive by adding the boolean attribute to any element. Disabled buttons have applied to, preventing hover and active states from triggering.\n\nDisabled buttons using the element behave a bit different:\n• s don’t support the attribute, so you must add the class to make it visually appear disabled.\n• Some future-friendly styles are included to disable all on anchor buttons.\n• Disabled buttons using should include the attribute to indicate the state of the element to assistive technologies.\n• Disabled buttons using should not include the attribute.\n\nTo cover cases where you have to keep the attribute on a disabled link, the class uses to try to disable the link functionality of s. Note that this CSS property is not yet standardized for HTML, but all modern browsers support it. In addition, even in browsers that do support , keyboard navigation remains unaffected, meaning that sighted keyboard users and users of assistive technologies will still be able to activate these links. So to be safe, in addition to , also include a attribute on these links to prevent them from receiving keyboard focus, and use custom JavaScript to disable their functionality altogether.\n\nCreate responsive stacks of full-width, “block buttons” like those in Bootstrap 4 with a mix of our display and gap utilities. By using utilities instead of button specific classes, we have much greater control over spacing, alignment, and responsive behaviors.\n\nHere we create a responsive variation, starting with vertically stacked buttons until the breakpoint, where replaces the class, thus nullifying the utility. Resize your browser to see them change.\n\nYou can adjust the width of your block buttons with grid column width classes. For example, for a half-width “block button”, use . Center it horizontally with , too.\n\nAdditional utilities can be used to adjust the alignment of buttons when horizontal. Here we’ve taken our previous responsive example and added some flex utilities and a margin utility on the button to right align the buttons when they’re no longer stacked.\n\nThe button plugin allows you to create simple on/off toggle buttons.\n\nVisually, these toggle buttons are identical to the checkbox toggle buttons . However, they are conveyed differently by assistive technologies: the checkbox toggles will be announced by screen readers as “checked”/“not checked” (since, despite their appearance, they are fundamentally still checkboxes), whereas these toggle buttons will be announced as “button”/“button pressed”. The choice between these two approaches will depend on the type of toggle you are creating, and whether or not the toggle will make sense to users when announced as a checkbox or as an actual button.\n\nAdd to toggle a button’s state. If you’re pre-toggling a button, you must manually add the class and to ensure that it is conveyed appropriately to assistive technologies.\n\nYou can create a button instance with the button constructor, for example:\n\nFor example, to toggle all buttons\n\nAs part of Bootstrap’s evolving CSS variables approach, buttons now use local CSS variables on for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\n\nEach modifier class updates the appropriate CSS variables to minimize additional CSS rules with our , , and mixins.\n\nHere’s an example of building a custom modifier class like we do for the buttons unique to our docs by reassigning Bootstrap’s CSS variables with a mixture of our own CSS and Sass variables.\n\nThere are three mixins for buttons: button and button outline variant mixins (both based on ), plus a button size mixin.\n\nButton variants (for regular and outline buttons) use their respective mixins with our map to generate the modifier classes in ."
    },
    {
        "link": "https://stackoverflow.com/questions/70370421/can-i-position-a-button-at-the-bottom-of-a-card-without-position-absolute-vu",
        "document": "So I'm trying to create a simple card with just a background image and a button, with the buttons link being stretched over the entire card. The button looks awful not at the bottom though, but if I use an absolute position, it removes the stretched link.\n\nOn a side note, is there a simple way I can have the cards margins stretch to fill the space, so the first card in a row is left aligned with the page & navbar title, and the last card in a row is right aligned with the logout button, so margins fill out the space in the middle so it all fits (in this instance, a margin left and right for the middle picture, can't be hard coded though as it needs to be responsive)? I tried the mx-auto class, on each cards and a div container, but neither worked at all."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",
        "document": "Note: Check the browser compatibility section for support, and the attribute reference for caveats on implementation reality of custom built-in elements.\n\nThe following example snippet is taken from our expanding-list-web-component example (see it live also). In this case, our custom element extends the , which represents the element.\n\nIf we wanted to create an instance of this element programmatically, we'd use a call along the following lines:\n\nThe new element will be given an attribute whose value is the custom element's tag name.\n\nNote: For backwards compatibility with previous versions of the Custom Elements specification, some browsers will allow you to pass a string here instead of an object, where the string's value is the custom element's tag name."
    },
    {
        "link": "https://stackoverflow.com/questions/5536596/dynamically-creating-html-elements-using-javascript",
        "document": "If you're doing this repeatedly (dynamically creating HTML), you might want to use a more general approach.\n\nIf you want to create three unrelated elements, you can do:\n\nNow, you have three elements. If you want to get the HTML of these (as string), simply do:\n\nIf you want to have these three in an element (say, div), do:\n\nYou can get the HTML with , or you can just append it anywhere you want.\n\nTo know more about , visit element.js (GitHub).\n\nI'm adding this answer not for the 8 year old question, but for the future visitors. Hope, it helps."
    },
    {
        "link": "https://stackoverflow.com/questions/48424729/javascript-create-dynamic-element-then-do-something-on-elements-click",
        "document": "How can I call a click event listener on a dynamically created element rendered in the DOM?\n\nI have some scripts that dynamically create elements in the DOM, one of them being a button/a. I would like that button/a to do something once the user clicks it. Right now nothing happens but if I add a on the things to happen upon a click, then it kind of works - only let's me do the something on the first element's click (button/a). However I can't rely on a to make this chunk of code work.\n\nHere is more or less what I have without the method:\n\nAgain this kind of works...it let's me click only on the first instance of the variable.\n\nAny suggestions on how to make this idea work?"
    },
    {
        "link": "https://w3schools.com/jsref/met_document_createelement.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-dynamically-create-new-elements-in-javascript",
        "document": "How to dynamically create new elements in JavaScript ?\n\nNew elements can be dynamically created in JavaScript with the help of createElement() method. The attributes of the created element can be set using the setAttribute() method. The examples given below would demonstrate this approach.\n\nExample 1: In this example, a newly created element is added as a child to the parent element. The type of the element to be created is specified and its value or text node for the specified element is added.\n\nExample 2: In this example, a newly created element along with its attributes is added to the body element of the page. The attributes can only be entered using two arguments i.e. type of attribute and the value of the attribute. The CSS for the “child” item is added for convenience."
    }
]