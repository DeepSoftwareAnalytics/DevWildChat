[
    {
        "link": "https://stackoverflow.com/questions/6169353/html-text-input-onchange-event",
        "document": "When I'm doing something like this I use the onKeyUp event.\n\nbut if you don't want to use an HTML event you could try to use jQuerys .change() method\n\nin this example, the input would have to have a class \"target\"\n\nif you're going to have multiple text boxes that you want to have done the same thing when their text is changed and you need their data then you could do this:\n\nthat way you can use the same code, for multiple text boxes using the same class without having to rewrite any code."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/input_event",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since January 2020 .\n\nThe event fires when the of an , , or element has been changed as a direct result of a user action (such as typing in a textbox or checking a checkbox).\n\nThe event also applies to elements with enabled, and to any element when is turned on. In the case of and , the event target is the editing host. If these properties apply to multiple elements, the editing host is the nearest ancestor element whose parent isn't editable.\n\nFor elements with or , the event should fire whenever a user toggles the control, per the HTML Living Standard specification. However, historically this has not always been the case. Check compatibility, or use the event instead for elements of these types.\n\nFor and elements that accept text input ( , , etc.), the interface is ; for others, the interface is .\n\nThe event is fired every time the of the element changes. This is unlike the event, which only fires when the value is committed, such as by pressing the enter key or selecting a value from a list of options. Note that the event is not fired when JavaScript changes an element's programmatically."
    },
    {
        "link": "https://stackoverflow.com/questions/23502943/onchange-event-in-a-text-input-behaviour-in-javascript-to-immediately-register-c",
        "document": "You could use the event instead:\n\n\"The event handler captures the moment at which a previously pressed key is released while focus is on the element to which the onkeyup attribute is applied.\"\n\nNote though, that it's always better to keep your markup (HTML) and scripts (JavaScript) separate.\n\nInstead, you could use addEventListener:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 .\n\nThe event is fired for , , and elements when the user modifies the element's value. Unlike the event, the event is not necessarily fired for each alteration to an element's .\n\nDepending on the kind of element being changed and the way the user interacts with the element, the event fires at a different moment:\n• When a element is checked or unchecked (by clicking or using the keyboard);\n• When a element is checked (but not when unchecked);\n• When the user commits the change explicitly (e.g., by selecting a value from a 's dropdown with a mouse click, by selecting a date from a date picker for , by selecting a file in the file picker for , etc.);\n• When the element loses focus after its value was changed: for elements where the user's interaction is typing rather than selection, such as a or the , , , , , or types of the element.\n\nThe HTML specification lists the types that should fire the event."
    },
    {
        "link": "https://javascript.info/events-change-input",
        "document": "The event triggers when the element has finished changing.\n\nFor text inputs that means that the event occurs when it loses focus.\n\nFor instance, while we are typing in the text field below – there’s no event. But when we move the focus somewhere else, for instance, click on a button – there will be a event:\n\nFor other elements: , it triggers right after the selection changes:\n\nThe event triggers every time after a value is modified by the user.\n\nUnlike keyboard events, it triggers on any value change, even those that does not involve keyboard actions: pasting with a mouse or using speech recognition to dictate the text.\n\nIf we want to handle every modification of an then this event is the best choice.\n\nOn the other hand, event doesn’t trigger on keyboard input and other actions that do not involve value change, e.g. pressing arrow keys while in the input.\n\nThese events occur on cutting/copying/pasting a value.\n\nThey belong to ClipboardEvent class and provide access to the data that is cut/copied/pasted.\n\nWe also can use to abort the action, then nothing gets copied/pasted.\n\nFor instance, the code below prevents all events and shows the text we’re trying to cut/copy/paste:\n\nPlease note: inside and event handlers a call to returns an empty string. That’s because technically the data isn’t in the clipboard yet. If we use it won’t be copied at all.\n\nSo the example above uses to get the selected text. You can find more details about document selection in the article Selection and Range.\n\nIt’s possible to copy/paste not just text, but everything. For instance, we can copy a file in the OS file manager, and paste it.\n\nThat’s because implements interface, commonly used for drag’n’drop and copy/pasting. It’s a bit beyond our scope now, but you can find its methods in the DataTransfer specification.\n\nAlso, there’s an additional asynchronous API of accessing the clipboard: . More about it in the specification Clipboard API and events, not supported by Firefox.\n\nThe clipboard is a “global” OS-level thing. A user may switch between various applications, copy/paste different things, and a browser page shouldn’t see all that.\n\nSo most browsers allow seamless read/write access to the clipboard only in the scope of certain user actions, such as copying/pasting etc.\n\nIt’s forbidden to generate “custom” clipboard events with in all browsers except Firefox. And even if we manage to dispatch such event, the specification clearly states that such “synthetic” events must not provide access to the clipboard.\n\nEven if someone decides to save in an event handler, and then access it later – it won’t work.\n\nTo reiterate, event.clipboardData works solely in the context of user-initiated event handlers.\n\nOn the other hand, navigator.clipboard is the more recent API, meant for use in any context. It asks for user permission, if needed."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/User_input_methods",
        "document": "Web forms require user input. When designing web forms, or really any web content, it's important to consider how users interact with their devices and browsers. Web user input goes beyond simple mouse and keyboard: think of touchscreens for example. In this article, we take a look at the different ways users interact with forms and other web content and provide recommendations for managing user input, real-world examples, and links to further information. As you develop more complex and interactive forms or other UI features, there are many HTML elements and JavaScript APIs you may want to investigate. For example, you may want to create custom form controls that require non-semantic elements to be content editable. You might want to support touch events, determine or control the screen's orientation, make a form take up the full screen, or enable drag and drop features. This guide introduces all these features, and directs you to more information on each topic. To provide a good experience to the greatest number of users, you need to support multiple input methods, including mouse, keyboard, finger touch, and so on. Available input mechanisms depend on the capabilities of the device running the application. You should always be mindful of keyboard accessibility — many web users only use the keyboard to navigate websites and apps, and locking them out of your functionality is a bad idea.\n\nMost users will use a keyboard to enter data into your form controls. Some will also use the keyboard to navigate to those form controls. To be accessible, and for better user experience, it's important to properly label all form controls. When each form control has a correctly associated , your form will be fully accessible to all, most notably anyone navigating your form with a keyboard, a screen reader, and possibly no screen at all. If you want to add additional keyboard support, such as validating a form control when a specific key is hit, you can use event listeners to capture and react to keyboard events. For example, if you want to add controls when any key gets pressed, you need to add an event listener on the window object: and are functions defining the control logic to be executed when the and events are fired. Note: Have a look at the Events reference and guide to find out more about keyboard events.\n\nYou can also capture mouse and other pointer events. The events occurring when the user interacts with a pointing device such as a mouse are represented by the DOM Interface. Common mouse events include , , , and . The list of all events using the Mouse Event Interface is provided in the Events reference. When the input device is a mouse, you can also control user input through the Pointer Lock API and implement Drag & Drop (see below). You can also use CSS to test for pointer device support.\n\nTo provide additional support for touchscreen devices, it's a good practice to take into consideration the different capabilities in terms of screen resolution and user input. Touch events can help you implement interactive elements and common interaction gestures on touchscreen devices. If you want to use touch events, you need to add event listeners and specify handler functions, which will be called when the event gets fired: where is the DOM element you want to register the touch events on. Note: For further information about what you can do with touch events, please read our touch events guide.\n\nMice aren't the only pointing devices. Your user's devices may incorporate multiple forms of input, like mouse, finger touch, and pen input. Each of these pointers has a different size. The Pointer Events API may come in handy if you need to manage events across devices by normalizing the handling of each one. A pointer can be any point of contact on the screen made by a mouse cursor, pen, touch (including multi-touch), or other pointing input device. The events for handling generic pointer input look a lot like those for mouse: , , , , , etc. The interface provides all the details you may want to capture about the pointer device, including its size, pressure, and angle.\n\nIf you need slightly different layouts depending on whether the user is in portrait or landscape mode, you can use CSS media queries to define CSS for different layouts or form control widths based on the size or orientation of the screen when styling web forms. When screen orientation matters for your form, you can read the screen orientation state, be informed when this state changes, and able to lock the screen orientation to a specific state (usually portrait or landscape) through the Screen Orientation API.\n• Orientation data can be retrieved through or with CSS through the media feature.\n• When the screen orientation changes, the event is fired on the screen object.\n• Locking the screen orientation is made possible by invoking the method.\n• The method removes all the previous screen locks that have been set. Note: More information about the Screen Orientation API can be found in Managing screen orientation.\n\nA common user interaction is the physical dragging of elements to be dropped elsewhere on the screen. Drag and drop can help improve the user experience when it comes to selecting files for upload or reordering content modules within a page. There's an API for that! The Drag & Drop API enables users to click and hold the mouse button down over an element, drag it to another location, and release the mouse button to drop the element there. Here is an example that allows a section of content to be dragged. <div draggable=\"true\" ondragstart=\"event.dataTransfer.setData('text/plain', 'This text may be dragged')\"> This text <strong>may</strong> be dragged. </div>\n• Set the attribute to on the element that you wish to make draggable.\n• Add a listener for the event and set the drag data within this listener. Note: You can find more information in the MDN Drag & Drop documentation."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-take-user-input-in-javascript",
        "document": "How to take user input in JavaScript?\n\nInteracting with users is the best way to create engaging and dynamic web applications. Taking user input allows your applications to be interactive and responsive. Here we will see the approach to take user input in JavaScript, specifically using the prompt method, which is perfect for beginners.\n• None The prompt method is part of the . It displays a dialog box with a message to the user, an input field, and an OK and Cancel button. Users can enter text into the input field, and when they press OK, the input is returned as a string. If they press Cancel or close the dialog, null is returned.\n• None The prompt method is very helpful in situations where you require rapid and straightforward user input.\n• None The prompt is a blocking function, which means it halts JavaScript execution until the user interacts with the dialogue. As this can have an impact on the user experience in web applications, it's frequently utilized for short input scenarios or fast interactions where blocking behavior is acceptable.\n• Message to the user: The text you want to display in the dialog box.\n• Default Value (optional): The initial value that appears in the input field.\n\nTo prompt the user to enter their name:\n\nExample: Dialog with the message \"Please enter your name:\".\n\nExample: Provide a default value in the prompt so that the input field will already contain the default value. Users can choose to modify the default value or enter their input.\n\nExample: If you don't provide any arguments to the prompt function (i.e., you call it without any message or default value), it will still open a dialog box, but the user won't see any message or default text in the input field.\n\nExample: It’s important to handle the user’s response appropriately. For example, you might want to display a greeting if the user provided input or a different message if they canceled:"
    },
    {
        "link": "https://stackoverflow.com/questions/65001707/catching-user-input-from-form-html-js",
        "document": "I'm currently trying to catch input data from a form and storing that data into an array of objects that can then summarize the data caught in the console. On top of this, I'm trying to run the function to store that data using a traditional DOM event handler per the instructions for my assignment.\n\nThe end goal with the JS is to use var t to get the element of the submit button by the ID 'contactSubButton' and run the function contactInfo onsubmit...\n\nHowever, no matter what I try I get this message in the console at the line for the 't.addEventListener'...."
    },
    {
        "link": "https://codehs.com/tutorial/rachel/user-input-in-javascript",
        "document": "Click on one of our programs below to get started coding in the sandbox!"
    },
    {
        "link": "https://medium.com/@tajammalmaqbool11/3-methods-to-ask-for-user-input-in-the-javascript-console-4b83f3bbb1fe",
        "document": "The JavaScript console is a powerful tool for developers. It’s commonly used for debugging and testing but can also collect user input during development. This is particularly useful for prototyping, debugging, or testing without creating a user interface.\n\nJavaScript is one of the most widely used programming languages for building interactive and dynamic websites. Browsers primarily use it to add interactivity, manipulate the DOM (Document Object Model), and enhance user experiences.\n\nHowever, JavaScript isn’t limited to browsers; it can also run on servers using Node.js.\n\nNode.js is a runtime environment that allows developers to execute JavaScript code outside the browser, typically on servers. It’s popular for building scalable and high-performance applications, such as APIs and command-line tools.\n\nThis blog will focus on how JavaScript can gather user input in two environments:\n\nLet’s dive into 3 effective methods for asking users for input using the javascript console.\n\nThe function is a simple way to ask for user input directly in the browser. It shows a dialog box with a message and an input field where users can type their responses.\n• The browser displays a dialog box with the text “What is your name?” and an input field.\n• The user enters their response and clicks “OK.”\n• The value is stored in the variable and logged to the console.\n\nSince returns a string, you need to convert the input if you expect a number.\n\nFor more interactive input gathering in browsers, you can use event listeners to capture user actions like key presses. This approach is non-blocking and works dynamically during runtime.\n• The method listens for the event.\n• Each time a key is pressed, the event object is passed to the callback function.\n• The key pressed is logged in the console using .\n\nIn server-side JavaScript, input from the terminal is handled differently. Node.js provides the module, which is designed to gather input interactively in a command-line interface.\n• The method displays a prompt in the terminal and waits for the user’s response.\n• The response is passed as an argument to a callback function.\n• The method closes the input stream after collecting input.\n\nJavaScript offers flexible methods for gathering user input in both browser and Node.js environments. Whether you use the simple function, interactive event listeners, or the robust module, each method has unique strengths tailored for specific scenarios."
    }
]