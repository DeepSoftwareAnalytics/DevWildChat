[
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.enum.parse?view=net-9.0",
        "document": "An object of type whose value is represented by .\n\nis not an Enum. is either an empty string or only contains white space. is a name, but not one of the named constants defined for the enumeration.\n\nThe following example uses the Parse(Type, String) method to parse an array of strings that are created by calling the GetNames method. It also uses the Parse(Type, String) method to parse an enumeration value that consists of a bit field.\n\nThe parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants delimited by commas (,). One or more blank spaces can precede or follow each value, name, or comma in . If is a list, the return value is the value of the specified names combined with a bitwise operation.\n\nIf is a name that does not correspond to a named constant of , the method throws an ArgumentException. If is the string representation of an integer that does not represent an underlying value of the enumeration, the method returns an enumeration member whose underlying value is converted to an integral type. If this behavior is undesirable, call the IsDefined method to ensure that a particular string representation of an integer is actually a member of . The following example defines a enumeration, calls the Parse(Type, String) method to convert strings to their corresponding enumeration values, and calls the IsDefined method to ensure that particular integral values are underlying values in the enumeration."
    },
    {
        "link": "https://stackoverflow.com/questions/16100/convert-a-string-to-an-enum-in-c-sharp",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/30526757/custom-enum-parse",
        "document": ""
    },
    {
        "link": "https://tutorialspoint.com/chash-enum-parse-method",
        "document": "The Parse method in Enum converts the string representation of the name or numeric value of enum constants to an equivalent enumerated object.\n\nThe following is our enumeration.\n\nNow, use the GetNames() method in a loop to get the enum values. Parse them using the Enum.Parse() method as shown below âˆ’"
    },
    {
        "link": "https://loginradius.com/blog/engineering/enum-csharp",
        "document": "Google Chrome has planned to phase out third-party cookies, which will affect different website functionalities depending on third-party cookies. This blog focuses on how this phase-out affects identity and user authentication and discusses alternatives for overcoming challenges."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.enum.tryparse?view=net-9.0",
        "document": "if the parameter was converted successfully; otherwise, .\n\nThe following example defines a enumeration, calls the TryParse<TEnum>(String, Boolean, TEnum) method to convert strings to their corresponding enumeration values, and calls the IsDefined method to ensure that particular integral values are underlying values in the enumeration. The TryParse<TEnum>(String, Boolean, TEnum) method uses case-insensitive comparison when trying to convert the string representations of named constants to their equivalent enumeration values.\n\nTryParse<TEnum>(String, Boolean, TEnum) is identical to the Parse(Type, String, Boolean) method, except that instead of throwing an exception, it returns if the conversion fails. It eliminates the need for exception handling when parsing the string representation of an enumeration value.\n\nThe parameter contains the string representation of an enumeration member's underlying value or named constant, or a list of named constants or underlying values delimited by commas (,). If includes multiple named constants or values, one or more blank spaces can precede or follow each value, name, or comma in . If is a list, reflects the value of the specified names or underlying values combined with a bitwise operation. If is the string representation of the name of an enumeration value, the comparison of with enumeration names depends on the parameter. If , the comparison is case-insensitive; if , it is case-sensitive.\n\nIf is a name that does not correspond to a named constant of , the method returns . If is the string representation of an integer that does not represent an underlying value of the enumeration, the method returns an enumeration member whose underlying value is converted to an integral type. If this behavior is undesirable, call the IsDefined method to ensure that a particular string representation of an integer is actually a member of .\n\nIf the parse operation fails, the parameter contains the default value of 0, which may not be a member of the underlying enumeration. If no values are assigned to the named constants in , the default is equal to the first member of the . Otherwise, the default is equal to the member in the enumeration with an assigned value of 0."
    },
    {
        "link": "https://stackoverflow.com/questions/14683840/tryparse-and-isdefined-for-enum-in-c-sharp",
        "document": ""
    },
    {
        "link": "https://medium.com/@gerogewilson/how-to-use-enum-tryparse-for-safe-parsing-in-c-3cc4028fa588",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/15017151/implementation-of-enum-tryparse-in-net-3-5",
        "document": ""
    },
    {
        "link": "https://medium.com/@gerogewilson/how-to-parse-enums-safely-with-enum-tryparse-in-c-14c87110f52c",
        "document": ""
    }
]