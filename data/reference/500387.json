[
    {
        "link": "https://docs.opencv.org/4.x/index.html",
        "document": ""
    },
    {
        "link": "https://opencv.org",
        "document": "OpenMV has been creating award-winning low-cost, extensible, machine vision modules for years now, and this week they’ve just launched a new Kickstarter campaign to fund two more"
    },
    {
        "link": "https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html",
        "document": "\n• Learn how to setup OpenCV-Python on your computer!\n• Here you will learn how to display and save images and videos, control mouse events and create trackbar.\n• In this section you will learn basic operations on image like pixel editing, geometric transformations, code optimization, some mathematical tools etc.\n• In this section you will learn different image processing functions inside OpenCV.\n• In this section you will learn about feature detectors and descriptors\n• In this section you will learn different techniques to work with videos like object tracking etc.\n• In this section we will learn about camera calibration, stereo imaging etc.\n• In this section you will learn different image processing functions inside OpenCV.\n• In this section you will learn different computational photography techniques like image denoising etc.\n• In this section you will learn object detection techniques like face detection etc.\n• In this section, we will see how OpenCV-Python bindings are generated"
    },
    {
        "link": "https://docs.opencv.org/4.x/d2/d96/tutorial_py_table_of_contents_imgproc.html",
        "document": "\n• Learn to change images between different color spaces. Plus learn to track a colored object in a video.\n• Learn to apply different geometric transformations to images like rotation, translation etc.\n• Learn to convert images to binary images using global thresholding, Adaptive thresholding, Otsu's binarization etc\n• Learn to blur the images, filter the images with custom kernels etc.\n• Learn about morphological transformations like Erosion, Dilation, Opening, Closing etc\n• Learn about image pyramids and how to use them for image blending\n• All about Contours in OpenCV\n• All about histograms in OpenCV\n• Meet different Image Transforms in OpenCV like Fourier Transform, Cosine Transform etc.\n• Learn to search for an object in an image using Template Matching\n• Learn to detect lines in an image\n• Learn to detect circles in an image"
    },
    {
        "link": "https://geeksforgeeks.org/opencv-python-tutorial",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/create-first-gui-application-using-python-tkinter",
        "document": "We are now stepping into making applications with graphical elements, we will learn how to make cool apps and focus more on its GUI(Graphical User Interface) using Tkinter.\n\nTkinter is a Python Package for creating GUI applications. Python has a lot of GUI frameworks, but Tkinter is the only framework that’s built into the Python standard library.\n\nTkinter has several strengths; it’s cross-platform, so the same code works on Windows, macOS, and Linux.\n\nTkinter is lightweight and relatively painless to use compared to other frameworks. This makes it a compelling choice for building GUI applications in Python, especially for applications where a modern shine is unnecessary, and the top priority is to build something functional and cross-platform quickly.\n\n1. Creating windows and dialog boxes: Tkinter can be used to create windows and dialog boxes that allow users to interact with your program. These can be used to display information, gather input, or present options to the user.\n\nTo create a window or dialog box, you can use the Tk() function to create a root window, and then use functions like Label, Button, and Entry to add widgets to the window.\n\n2. Building a GUI for a desktop application: Tkinter can be used to create the interface for a desktop application, including buttons, menus, and other interactive elements.\n\nTo build a GUI for a desktop application, you can use functions like Menu, Checkbutton, and RadioButton to create menus and interactive elements and use layout managers like pack and grid to arrange the widgets on the window.\n\n3. Adding a GUI to a command-line program: Tkinter can be used to add a GUI to a command-line program, making it easier for users to interact with the program and input arguments.\n\nTo add a GUI to a command-line program, you can use functions like Entry and Button to create input fields and buttons, and use event handlers like command and bind to handle user input.\n\n4. Creating custom widgets: Tkinter includes a variety of built-in widgets, such as buttons, labels, and text boxes, but it also allows you to create your own custom widgets.\n\nTo create a custom widget, you can define a class that inherits from the Widget class and overrides its methods to define the behavior and appearance of the widget.\n\n5. Prototyping a GUI: Tkinter can be used to quickly prototype a GUI, allowing you to test and iterate on different design ideas before committing to a final implementation.\n\nTo prototype a GUI with Tkinter, you can use the Tk() function to create a root window, and then use functions like Label, Button, and Entry to add widgets to the window and test different layouts and design ideas.\n\nThere are several libraries that are similar to Tkinter and can be used for creating graphical user interfaces (GUIs) in Python. Some examples include:\n• PyQt : PyQt is a GUI library that allows you to create GUI applications using the Qt framework. It is a comprehensive library with a large number of widgets and features.\n• wxPython : wxPython is a library that allows you to create GUI applications using the wxWidgets framework. It includes a wide range of widgets in it’s GUI toolkit and is cross-platform, meaning it can run on multiple operating systems.\n• PyGTK : PyGTK is a GUI library that allows you to create GUI applications using the GTK+ framework. It is a cross-platform library with a wide range of widgets and features.\n• Kivy : Kivy is a library that allows you to create GUI applications using a modern, responsive design. It is particularly well-suited for building mobile apps and games.\n• PyForms : PyForms is a library that allows you to create GUI applications using a simple, declarative syntax. It is designed to be easy to use and has a small footprint.\n• Pygame : PyForms is a library that is popular because you can develop video games using it. It is a free, open source, and cross-platform wrapper for the Simple DirectMedia Library (SDL). You can check if you are interested in video game development.\n\nIn summary, there are several libraries available for creating GUI applications in Python, each with its own set of features and capabilities. Tkinter is a popular choice, but you may want to consider other options depending on your specific needs and requirements.\n\nTo understand Tkinter better, we will create a simple GUI.\n\n1. Import tkinter package and all of its modules.\n\n2. Create a root window. Give the root window a title(using title()) and dimension(using geometry()). All other widgets will be inside the root window. \n\n3. Use mainloop() to call the endless loop of the window. If you forget to call this nothing will appear to the user. The window will wait for any user interaction till we close it.\n\n4. We’ll add a label using the Label Class and change its text configuration as desired. The grid() function is a geometry manager which keeps the label in the desired location inside the window. If no parameters are mentioned by default it will place it in the empty cell; that is 0,0 as that is the first location.\n\n5. Now add a button to the root window. Changing the button configurations gives us a lot of options. In this example we will make the button display a text once it is clicked and also change the color of the text inside the button.\n\n6. Using the Entry() class we will create a text box for user input. To display the user input text, we’ll make changes to the function clicked(). We can get the user entered text using the get() function. When the Button after entering of the text, a default text concatenated with the user text. Also change button grid location to column 2 as Entry() will be column 1.\n\n7. To add a menu bar, you can use Menu class. First, we create a menu, then we add our first label, and finally, we assign the menu to our window. We can add menu items under any menu by using add_cascade().\n\nOutput\n\nThis simple GUI covers the basics of Tkinter package. Similarly, you can add more widgets and change their configurations as desired.\n\nTkinter is the GUI library of Python, it provides various controls, such as buttons, labels and text boxes used in a GUI application. These controls are commonly called Widgets. The list of commonly used Widgets are mentioned below –\n\nThe Label widget is used to provide a single-line caption for other widgets. It can also contain images. The Button widget is used to display buttons in your application. The Entry widget is used to display a single-line text field for accepting values from a user. The Menu widget is used to provide various commands to a user. These commands are contained inside Menubutton. The Canvas widget is used to draw shapes, such as lines, ovals, polygons and rectangles, in your application. The Checkbutton widget is used to display a number of options as checkboxes. The user can select multiple options at a time. The Frame widget is used as a container widget to organize other widgets. The Listbox widget is used to provide a list of options to a user. The Menubutton widget is used to display menus in your application. The Message widget is used to display multiline text fields for accepting values from a user. The Radiobutton widget is used to display a number of options as radio buttons. The user can select only one option at a time. The Scale widget is used to provide a slider widget. The Scrollbar widget is used to add scrolling capability to various widgets, such as list boxes. The Text widget is used to display text in multiple lines. The Toplevel widget is used to provide a separate window container. A labelframe is a simple container widget. Its primary purpose is to act as a spacer or container for complex window layouts. This module is used to display message boxes in your applications. The Spinbox widget is a variant of the standard Tkinter Entry widget, which can be used to select from a fixed number of values. A PanedWindow is a container widget that may contain any number of panes, arranged horizontally or vertically.\n\nAll Tkinter widgets have access to specific geometry management methods, which have the purpose of organizing widgets throughout the parent widget area. Tkinter exposes the following geometry manager classes: pack, grid, and place. Their description is mentioned below –\n\nIn this article, we have learned about GUI programming in Python and how to make GUI in Python. GUI is a very demanded skill so you must know how to develop GUI using Python. Hope this article helped you in creating GUI using Python.\n\nHow to Make a GUI in Python Tkinter?\n\nHow Do I Create My First Application in Python?\n\nHow to Create an App Using Tkinter?\n\nWhich GUI is Best for Python?\n\nWhat is the Simplest Python GUI?"
    },
    {
        "link": "https://pyimagesearch.com/2016/05/23/opencv-with-tkinter",
        "document": "I’ll be honest with you.\n\nI’m not much of a GUI developer.\n\nNever was one, never will be.\n\nI enjoy creating the occasional user interface with HTML + CSS, or hacking up a WordPress plugin to make it more aesthetically pleasing — but writing full-fledged GUIs was never something I enjoyed.\n\nThat said, I do try my best to write about what you, the PyImageSearch audience wants to hear. And over the past few months, I’ve received a bunch of emails asking about Python GUI libraries, which ones to use, and more specifically, how to integrate OpenCV with Tkinter to display an image in a Tkinter panel.\n\nAll that said, I eventually received enough emails regarding OpenCV + Tkinter integration that it piqued my interest and I had to give it a try.\n\nOver the next two blog posts, I’ll be playing around with Tkinter, developing some simple user interfaces, and sharing my code/experiences with you. I’ve emphasized playing around here because these are by no means production applications (and more than likely) not great examples of GUI development practices.\n\nLike I said, I don’t pretend to be a GUI developer — I just want to share my experiences with you.\n\nIn this tutorial, we’ll be building a simple user interface using the Tkinter Python library. This user interface will allow us to click a button, triggering a file chooser dialog to select a file from disk. We’ll then load the selected image using OpenCV, perform edge detection, and finally display both the original image and edge map in our GUI.\n\nI’ve included a rough wireframe of the first mockup below:\n\nWhen first loaded, our application when contain only a button that allows us to load an image from disk.\n\nAfter clicking this button, we’ll be allowed to navigate our file system and select an image to be processed. We’ll then display the original image and edge map in the GUI.\n\nIf you haven’t heard of Tkinter before, Tkinter is a thin object-oriented layer around Tcl/Tk. One of the benefits of using Tkinter, is that with it installed on your system, you can run any Python GUI applications that leverage Tcl/Tk.\n\nIn the very rare occurrences that I’ve needed to develop a GUI application for Python, I tend to use Qt, but since it’s been a good 3-4 years since I’ve last used Tkinter, I thought I would give it another shot.\n\nI personally struggled to get Tkinter installed and configured properly on my OSX machine, so I decided to revert to using Ubuntu/Raspbian.\n\nNote: If you have any good tutorials for installing Tkinter and Tcl/Tk on OSX, please leave the links in the comments section of this blog post.\n\nWhile I struggled to get Tkinter installed on OSX, installing on Ubuntu/Raspbian was a breeze, requiring only a call to :\n\nFrom there, Tkinter was installed without a hitch.\n\nYou should also make sure you have Pillow, a simple Python-based imaging library installed as well since Tkinter will need it for displaying images in our GUI:\n\nI validated my installation by firing up a Python shell and importing PIL/Pillow, Tkinter, and my OpenCV bindings:\n\nNote: I’m assuming that you already have OpenCV installed on your system. If you need help configuring, compiling, and installing OpenCV, please see this page where I’ve compiled a list of OpenCV installation instructions for a variety of systems.\n\nWe are now ready to write our simple GUI application. Open up a new file, name it , and insert the following code:\n\nLines 2-6 import our required Python packages. We’ll need to access our GUI functionality, along with both the and classes from PIL/Pillow to display the image in our GUI. The allows us to browse our file system and choose an image to process. Finally, we import for our OpenCV bindings.\n\nLine 8 defines our function. Inside this function, we grab a global reference to and , respectively. These were be our image panels. An image panel, as the name suggests, is used to take an image and then display it in our GUI.\n\nThe first panel, , is for the original image we will load from disk, while the second panel, , will be for the edge map we are going to compute.\n\nA call to on Line 14 opens a file chooser dialog, which we can use to navigate our file system and select an image of our choosing.\n\nAfter selecting an image, our program continues:\n\nLine 17 ensures that a file was selected and that we did not click the “Cancel” button. Provided that a was selected, we load the image from disk, convert it to grayscale, and then detect edges using the Canny edge detector (Lines 20-22). I’ve hardcoded the thresholds to the Canny edge detector as a matter of simplicity, but you could also use the function from the package to compute the edge map without supplying any parameters. You can read more about the auto-canny function here.\n\nIn order to display our images in the Tkinter GUI, we first need to change the formatting. To start, OpenCV represents images in BGR order; however PIL/Pillow represents images in RGB order, so we need to reverse the ordering of the channels (Line 26).\n\nFrom there, we can convert and from OpenCV format to PIL/Pillow format (Lines 29 and 30). And then finally convert the PIL/Pillow images to format (Lines 33 and 34).\n\nWe are now ready to add the images to our GUI:\n\nIf the respective panels are , we need to initialize them (Lines 37-46). First, we create an instance of for each image. Then, we take special care to include .\n\nWhy is this so important?\n\nTo prevent Python’s garbage collection routines from deleting the image!\n\nWithout storing this reference, our image will essentially be deleted and we will be unable to display it to our screen.\n\nOtherwise, we can assume that our image panels have already been initialized (Lines 49-54). In this case, all we need to do is call on each of the panels and then update the reference to the image objects.\n\nThe last step is to write the code that actually initializes, creates, and starts the GUI process:\n\nLine 57 initializes the Tkinter window, while Lines 58 and 59 initialize our two image panels.\n\nWe then create a button and add it to our GUI on Lines 64 and 65. When clicked, this button will trigger our file chooser, allowing us to navigate our file system and select an image from disk.\n\nFinally, Line 68 kicks-off the actual main loop of the GUI.\n\nTo run our OpenCV + Tkinter application, just execute the following command:\n\nAt first, all our GUI should contain is the button we click to select an image from disk:\n\nAfter clicking the button, we are presented with a file chooser:\n\nWe can then navigate to the image file we want to compute edges for and click the “Open” button:\n\nAfter our image has been selected, the edge map is computed using OpenCV, and both the original image and the edge map are added to our Tkinter GUI:\n\nOf course, we can repeat this process for different images as well:\n\nLet’s do one final example:\n\nIn this blog post, I demonstrated how to build a very simple GUI application that integrates both OpenCV for computer vision and the Tkinter library for developing GUIs with the Python programming language.\n\nI’ll be the first one to say that I am not a GUI developer, nor do I have any intentions of becoming one. This code is likely far from perfect — and that’s okay. I simply wanted to share my experience with you in the hopes that it helps other, more committed and advanced GUI developers learn how to integrate OpenCV with Tkinter.\n\nAll that said, next week I’ll be doing a second blog post on OpenCV and Tkinter, this time building a “Photo Booth” application that can access our webcam, display the (live) stream to our GUI, and save snapshots from the stream to disk at the click of a button.\n\nTo be notified when this blog post is published, be sure to enter your email address in the form below!"
    },
    {
        "link": "https://reddit.com/r/opencv/comments/10x8o40/discussion_python_gui_library_that_works_well",
        "document": "Hi, I have difficulties deciding which library to use for integrating a 60 FPS FullHD camera stream, with some cv2 operations done, into a gui.\n\nSince I've seen many examples with Tkinter I used it a bit, but with tk it is not possible to achieve 60 FPS FullHD: The conversion to a TkImage and then showing it is the problem. Getting a frame and performing some cv2 operations takes around 2ms, more than fast enough.\n\nI tried bodging together a cv2 fullscreen window with my dropdown tk window, but using both at the same time does not work out of the box, and also it doesn't seem like the best idea from a viewpoint of possible future modifications to make it somehow work simultaneously.\n\nSo, has anyone good suggestions what to use? The gui options integrated in cv2 are not enough for my needs.\n\nSomeone suggested pygame and by looking over some examples with OpenCV, the image conversion from cv2.Mat to an image displayable by pygame can be done with cv2 methods, so it should be fast.\n\nI try to avoid PyQT because of the licensing.\n\nAnyone other good suggestions on what to use?"
    },
    {
        "link": "https://geeksforgeeks.org/python-gui-tkinter",
        "document": "Python Tkinter is a standard GUI (Graphical User Interface) library for Python which provides a fast and easy way to create desktop applications. Tkinter provides a variety of widgets like buttons, labels, text boxes, menus and more that can be used to create interactive user interfaces. Tkinter supports event-driven programming, where actions are taken in response to user events like clicks or keypresses.\n• Import the tkinter module : Import the tkinter module, which is necessary for creating the GUI components.\n• Create the main window (container) : Initialize the main application window using the Tk() class.\n• Set Window Properties : We can set properties like the title and size of the window.\n• Add widgets to the main window : We can add any number of widgets like buttons, labels, entry fields, etc., to the main window to design the interface.\n• Pack Widgets: Use geometry managers like pack(), grid() or place() to arrange the widgets within the window.\n• Apply event triggers to the widgets : We can attach event triggers to the widgets to define how they respond to user interactions.\n\nThere are two main methods used which the user needs to remember while creating the Python application with GUI.\n\nTo create a main window in Tkinter, we use the Tk() class. The syntax for creating a main window is as follows:\n• screenName: This parameter is used to specify the display name.\n• baseName: This parameter can be used to set the base name of the application.\n• className: We can change the name of the window by setting this parameter to the desired name.\n• useTk: This parameter indicates whether to use Tk or not.\n\nThe mainloop() method is used to run application once it is ready. It is an infinite loop that keeps the application running, waits for events to occur (such as button clicks) and processes these events as long as the window is not closed.\n\nThere are a number of tkinter widgets which we can put in our tkinter application. Some of the major widgets are explained below:\n\nIt refers to the display box where we display text or image. It can have various options like font, background, foreground, etc. The general syntax is:\n• master is the parameter used to represent the parent window.\n\nNote: We have a number of options and parameters that we can pass to widgets, only some them are used in the examples given in this article.\n\nA clickable button that can trigger an action. The general syntax is:\n\nIt is used to input the single line text entry from the user. For multi-line text input, Text widget is used. The general syntax is:\n\nA checkbox can be toggled on or off. It can be linked to a variable to store its state. The general syntax is:\n\nIt allows the user to select one option from a set of choices. They are grouped by sharing the same variable. The general syntax is:\n\nIt displays a list of items from which a user can select one or more. The general syntax is:\n\nIt refers to the slide controller which will be used to implement listed widgets. The general syntax is:\n\nIt is used to create all kinds of menus used by the application. The general syntax is:\n\nCombobox widget is created using the ttk.Combobox class from the tkinter.ttk module. The values for the Combobox are specified using the values parameter. The default value is set using the set method. An event handler function on_select is bound to the Combobox using the bind method, which updates a label with the selected item whenever an item is selected.\n\nIt is used to provide a graphical slider that allows to select any value from that scale. The general syntax is:\n\nThis widget is directly controlled by the window manager. It don’t need any parent window to work on.The general syntax is:\n\nIt is a widget to display text messages with word wrapping. The general syntax is:\n\nIt is a part of top-down menu which stays on the window all the time. Every menubutton has its own functionality. The general syntax is:\n\nprogressbar indicates the progress of a long-running task. When the button is clicked, the progressbar fills up to 100% over a short period, simulating a task that takes time to complete.\n\nIt is an entry of ‘Entry’ widget. Here, value can be input by selecting a fixed value of numbers. The general syntax is:\n\nTo edit a multi-line text and format the way it has to be displayed. The general syntax is:\n\nIt is used to draw pictures and other complex layout like graphics, text and widgets. The general syntax is:\n\nIt is a container widget which is used to handle number of panes arranged in it. The general syntax is:\n\nThis example demonstrates the usage of various color options in Tkinter widgets, including active background and foreground colors, background and foreground colors, disabled state colors, and selection colors. Each widget in the example showcases a different color option, providing a visual representation of how these options affect the appearance of the widgets.\n\nTkinter also offers access to the geometric configuration of the widgets which can organize the widgets in the parent windows. There are mainly three geometry manager classes class.\n\nIt organizes the widgets in blocks before placing in the parent widget. Widgets can be packed from the top, bottom, left or right. It can expand widgets to fill the available space or place them in a fixed size.\n\nIt organizes the widgets in grid (table-like structure) before placing in the parent widget. Each widget is assigned a row and column. Widgets can span multiple rows or columns using rowspan and columnspan.\n\nIt organizes the widgets by placing them on specific positions directed by the programmer. Widgets are placed at specific x and y coordinates. Sizes and positions can be specified in absolute or relative terms.\n\nIn Tkinter, events are actions that occur when a user interacts with the GUI, such as pressing a key, clicking a mouse button or resizing a window. Event handling allows us to define how our application should respond to these interactions.\n\nEvents in Tkinter are captured and managed using a mechanism called bindings. A binding links an event to a callback function (also known as an event handler) that is called when the event occurs.\n• widget: The Tkinter widget you want to bind the event to.\n• event: A string that specifies the type of event (e.g., <Button-1> for a left mouse click).\n• handler: The callback function that will be executed when the event occurs.\n\nKey events are triggered when a user presses a key on the keyboard. Mouse events are triggered by mouse actions, such as clicking or moving the mouse.\n\nIn this advanced example, multiple event types are handled simultaneously. The on_mouse_motion function is called whenever the mouse is moved within the window, demonstrating how we can track and respond to continuous events.\n\nThe event object is passed to the callback function when an event occurs. It contains useful information about the event, such as:\n• event.x and event.y: The x and y coordinates of the mouse event.\n• event.widget: The widget that triggered the event.\n\nWhat is Tkinter in Python used for?\n\nWhat does TK() mean in Python?\n\nIs Tkinter the only GUI for Python?\n\nWhat is a Tkinter window in Python?\n\nWhich GUI is best for Python?"
    },
    {
        "link": "https://stackoverflow.com/questions/58397158/create-a-gui-to-scan-qr-code-with-tkinter-and-opencv",
        "document": "I want to build a GUI to scan QR code with Tkinter python to record video feed with some buttons and listbox. I have completed in combine OpenCV with Tkinter. However, I can not scan any QR code. I figured my problem is from the line but I do not know what its error because the program still runs smoothly. Here is my code :\n\nCan anyone help me? I am much appriciate"
    }
]