[
    {
        "link": "https://github.com/botman99/ue4-unreal-automation-tool/blob/main/README.md",
        "document": "\n• Building Code\n\n Building The Editor\n\n Cleaning Before Building\n\n Building Game Code\n\n Putting It All Together\n\n What To Do If The Build Fails\n• Packaging Your Game\n\n What Happens When A Game Is Packaged\n\n Building Source Code\n\n Cooking Content\n\n Staging Cooked Content\n\n What Should You Cook?\n\n Automating The Game Packaging\n\n What To Do If The Packaging Fails\n\n Patching And DLC\n• Advanced\n\n How to Debug Your AutomationTool Commands\n\nThe Unreal Engine includes a tool called Unreal AutomationTool or 'UAT' for short. UAT is written in C# and is a collection of various tools that can be used to compile code, cook content and package your game (among other things). In the engine, the AutomationTool source code can be found in the folder (note that you will have the UAT source code even if you downloaded the Unreal Engine using the Epic Game Launcher and not from GitHub).\n\nThe overview of the Unreal AutomationTool can be found here. The overview states the following:\n\n\"AutomationTool is a host program and a set of utility libraries you can use to script unattended processes related to Unreal Engine when using C#. Internally, we use AutomationTool for a variety of tasks, including building, cooking, and running games, running automation tests, and scripting other operations to be executed on our build farm.\"\n\nUAT is available for the Windows, Mac and Linux platforms (basically the same platforms that support the Unreal Editor). Unreal AutomationTool needs to run in a Windows 'Command Prompt' window (or Terminal on Mac or Linux) since it is a commandline based tool and does not have a GUI interface.\n\nTo run UAT, there is a RunUAT.bat file (or RunUAT.command for Mac and RunUAT.sh for Linux) in the folder. When running UAT, you need to be in the Unreal Engine 'root' folder (the folder where you installed the engine) or in the folder. If you installed using the Epic Games Launcher, that will be something like . You should see the \"Engine\" folder contained in the Unreal Engine 'root' folder.\n\nFor Windows, you can open up a Command Prompt window by clicking the Windows 'Start' button and typing \"command prompt\" (without the quotes). When you open the command prompt window, you will be in your Windows 'user' directory by default. If you installed the Unreal Engine in the default folder from the Epic Games Launcher, you can change to the Unreal Engine by using the 'cd' command. Enter the following command in the command prompt window to change to that folder (including the double quotes);\n\nNote: If you installed the Unreal Engine on the D: drive or some other drive, you will need to enter a command in the Command Prompt window to change to that drive first before you enter the command to change to the Unreal Engine installation folder:\n\nYour Command Prompt window prompt should now look like this:\n\nNow you are ready to run UAT. You run UAT by giving it a command followed by one or more commandline arguments. The commandline arguments are preceded by a '-' character. Let's start by running UAT without any command or arguments. Enter the following and press the 'Enter' key (on Windows, make sure to use backslash '\\' characters and not forward slash '/' characters as you would on Mac or Linux):\n\n...and here's what the output should look like:\n\nThe \"ERROR: Failed to find scripts to execute\" message means that we didn't give UAT a valid command to execute.\n\nSo, let's run UAT again, but this time give it the \"-List\" commandline argument to have UAT display a list of all of the commands that it supports. Enter the following command and press the 'Enter' key:\n\nYou will get a LONG list of commands (about a hundred or so) with each command on a separate line. The commands aren't displayed in any particular order and aren't sorted alphabetically, so you may have to hunt around a little bit if you are looking for a specific command.\n\nHere is the list that I get on my machine that I have sorted and broken into columns:\n\nYou can get help for a specific command by running UAT with the command followed by \"-Help\", for example:\n\nGives the following output:\n\nThe 'BuildGame' UAT command is used to compile your C++ game code.\n\nNote that the AutomationTool will always exit with an 'ExitCode'. For the above example, the ExitCode is 0 which is 'Success'. This ExitCode can be used by other batch files or other applications that might run the AutomationTool to get a status result of whether the UAT command succeeded or failed. This ExitCode is a result of whatever application the AutomationTool ran to handle the UAT command that you gave it. For example, when using \"RunUAT.bat BuildGame\", UAT will run the UnrealBuildTool which is used to compile code. It the code failed to be compiled successfully, UnrealBuildTool would return a non-zero exit code and UAT would also then return a non-zero exit code. This can be used to determine whether your build failed or succeeded.\n\nFor reference, here is a list of some Windows error codes (note that 0 is ERROR_SUCCESS).\n\nIf you are building the Unreal Engine from source code (downloaded from GitHub or from Epic's Perforce), you will see slightly different output for the BuildGame command...\n\nNotice that RunUAT.bat added \"-compile\" to the commandline arguments automatically and there's a line that says Dependencies are up to date (0.226s). Skipping compile. When you are building the engine from source code, UAT will assume that the AutomationTool source code may have been modified by the user and will automatically rebuild itself each time it is run. This allows you to make changes to the UAT source code or add your own AutomationTool commands to do custom automated tasks. More on this is covered in the Advanced section below.\n\nIf you are using an Unreal Blueprint project for your game, you can skip down to the the Packaging Your Game section (since your project does not need to build C++ code).\n\nIf you have an Unreal Project that uses C++ or if you are building the engine from source code, you can automate the process of compiling the engine or your game code. You do this using one of the 'Build' AutomationTool commands, such as: \"BuildEditor\", \"BuildGame\", \"BuildServer\", or \"BuildTarget\".\n\nThe 'BuildEditor' AutomationTool command is used to build the editor, but there are actually two different versions of \"the editor\". There is the editor that gets built when you compile the UE4 project and then compile the editor for your game and there is a slightly different version of the editor that gets built if you only compile the editor for your game. Building the editor for your game (like the \"Development Editor\" / \"Win64\" build configuration in Visual Studio) will only build the Engine modules and Plugin modules required by your game in an editor configuration. Building the UE4 project in an editor configuration will build all Engine modules and all Plugin modules whether your game needs them or not.\n\nWhat does this mean? This means that if you build the editor only for your game, if Plugins are not enabled by default (and not required by other Engine modules), they won't get built. This can saved you time when building. This also means that you can't later enable a Plugin in the editor and then restart the editor without building again to compile the newly enabled but not yet built Plugin module(s).\n\nEach module, whether an Engine module or Plugin module, when built for Windows, will create a DLL file named \"UE4Editor-<modulename>.dll\". These files can be found in the folder or in the folder. There are a lot of these files. You can get a list of them by changing to the Unreal Engine 'root' folder (where the 'Engine' folder is located) and running the following in the Windows Command Prompt window:\n\nReplacing 'Win64' with 'Win32' if you are building the editor for 32-bit Windows.\n\nFor Unreal Engine version 4.26, when I build the UE4 project there are 395 Engine modules (in the folder) and 591 Plugin modules (under the folder). If you create an \"empty\" C++ project (like when using the 'First Person' or 'Third Person' template), clean the solution and then build the editor just for the game project, there are 352 Engine modules and only 181 Plugin modules.\n\nKeeping that in mind, you can use \"RunUAT.bat BuildEditor\" without specifying a project to build the editor for the UE4 editor project and then use \"RunUAT.bat BuildEditor -project=<your_project_here>\" to build the editor for your game project to build everything, or you can just use \"RunUAT.bat BuildEditor -project=<your_project_here>\" to only build the modules required by your project.\n\nSometimes you might want to force everything to be rebuilt from scratch. In Visual Studio this is called \"cleaning the solution\". This will delete any built executables (*.exe or *.dll files) and delete any intermediate files (like *.obj or *.lib files created by the compiler). Why would you want to do this? UnrealBuildTool (UBT) is used by Unreal to build code. UBT does it's best to determine what needs to be rebuilt based on what has been recently modified and the dependency list it keeps of what depends on the things that were recently modified. This usually works well, but there are situations where a header file is modified but UBT doesn't know that something needs to be rebuilt that might depend on that header file. This usually happens when you have third-party libraries that you are using as part of your game code. Unreal may detect that code needs to be rebuilt if the third-party library itself (*.lib file) is modified, but may not build your game code if a header file in the third-party library was updated.\n\nThe Unreal AutomationTool doesn't have a command specifically for cleaning a project or the solution. You can use \"-clean\" when you run \"BuildEditor\" or \"BuildGame\" (even though the help doesn't tell you this), and this will clean (delete) everything and then build. But, if you use \"BuildEditor -clean\" to build the UE4 project editor and then use \"BuildEditor -clean -project=<your_project_here>\", it will clean (delete) all of the editor files you just built for the UE4 project and then build them again, which just wastes time.\n\nAs a side note, the reason that \"BuildEditor -Help\" doesn't tell you about \"-clean\" is that commands like \"BuildEditor\", \"BuildGame\", \"BuildServer\", etc. are all subclasses of the \"BuildTarget\" command. You could use \"BuildTarget\" instead and specify additional commandline parameters to build the editor or game. \"BuildEditor -Help\" only lists the commandline arguments that \"BuildEditor\" requires and not all the additional commandline arguments supported by the \"BuildTarget\" command.\n\nThe help for \"BuildTarget\" is the following:\n\nSo, since there isn't an AutomationTool command specifically for cleaning a project or solution, we can use something else instead. In the folder, there is a \"Clean.bat\" batch file. The Visual Studio solution uses this batch file to clean the UE4 project or the game project when cleaning the solution. The commandline arguments for Clean.bat are not the same as for the RunUAT.bat batch file.\n\nClean.bat runs the UnrealBuildTool (UBT) executable. This UnrealBuildTool.exe executable can be found in the folder. If you run UBT with the \"-clean\" commandline argument, it will clean the specified project. You specify the desired project using the \"-Target=\" commandline argument, like so:\n\nThe \"-Target=\" argument specifies the project, in the format of, project name (like MyAwesomeGame) or editor (like MyAwesomeGameEditor), followed by the platform (Win32, Win64, Linux, Mac, etc.), followed by the build configuration (Development, Test, Shipping, etc). The \"-WaitMutex\" is used by UBT to handle builds that use multiple processes to create a mutex that prevents several simultaneous processes from accessing the same file at the same time. The \"-FromMSBuild\" is used to indicate that any error messages when compiling are coming from the MSBuild application (this is specific to Windows builds).\n\nSo the above \"Clean.bat\" command would clean the UE4 editor project.\n\nWhen you clean or build your game, you need to use the \"-Project=\" argument to tell Unreal where your game project file is located. This needs to be the full path to your .uproject file. When passing the project file path as a commandline argument, you need to place it inside double quotes to preserve any spaces in the path. The default path for projects would be under your Windows Documents folder in a folder called \"Unreal Projects\" followed by a folder name that matches your project name, for example:\n\nWindows has an environment variable called USERPROFILE for the \"C:\\User\\someuser\" part, so you could also use:\n\nThe following would clean the MyAwesomeGame editor project:\n\n...and the following would clean the MyAwesomeGame game code for the Development and Shipping build configurations:\n\nPeople who are running AutomationTool on Linux or Mac can replace the \"Engine\\Build\\BatchFiles\\Clean.bat\" above with \"Engine/Binaries/DotNET/UnrealBuildTool\" instead to run the UBT application directly.\n\nNow that you have built the editor, you are ready to build your game code. This is the executable that will be used when you package your game to a format that will be released to the public (see Packaging Your Game below).\n\nWhen you use \"RunUAT.bat BuildGame\", you build the executable for your game code. This executable is used to load and run the \"cooked\" content that gets created when you package your game. When you ship your game, you will usually build the 'Shipping' configuration of your game code. The Shipping executable removes a bunch of output to the .log file (to make the game faster) and produces the most optimized compiled code, making your game code as fast as possible. When you are testing your packaged build, you will want to use the 'Development' configuration. The Development configuration keeps all of the output to the log file (to help with debugging problems) and has a lower level of optimization when compiling code (which makes it not as fast as possible).\n\nBuilding the game code using RunUAT.bat is similar to building the editor, except we can specify multiple build configurations (Development and Shipping) to build both executables at the same time, like so:\n\nWhen this is done, if you look in the folder of your project folder, you should see two executables (*.exe file), one with the name of the project (MyAwesomeGame.exe) and one with 'Shipping' in it (MyAwesomeGame-Win64-Shipping.exe). The executable with the 'Shipping' name in it is the one you want to include when releasing your game to players.\n\nNOTE: If you are building the engine from source code, you can also build the game for the 'Debug' and 'Test' configurations. The Debug configuration has all compiler optimizations disabled which makes it easier to debug your game code by running it in the debugger. The 'Test' configuration has some of the log output disabled which makes it a little faster than the 'Development' configuration and has the same level of optimization as the 'Shipping' build, so the performance of the Test executable is closer to the performance of the Shipping executable (but with some logging enabled). You could build all four configurations like so:\n\nNow that we know how to clean and build the editor and game code, let's put it all together and create a batch file that does all this. CleanAndBuild.bat (included in this github repository) is a batch file that will clean and build the editor as well as clean and build the game. You can place this .bat file in the Unreal Engine 'root' folder (this will be something like if you installed from the Epic Launcher). You will need to edit this .bat file with a text editor to change \"MyAwesomeGame\" to the name of your project. Then you just need to open a Command Prompt window, change to the Unreal Engine 'root' folder and run \"CleanAndBuild.bat\" to automatically clean and build the project.\n\nThe CleanAndBuild.bat batch file will work for both the Installed version of Unreal Engine (installed from the Epic Games Launcher) and the source code version of Unreal Engine (downloaded from Epic's GitHub repository). For the Installed version of the engine, CleanAndBuild.bat will only clean and build your project's editor and game code. For the source code version of the engine, CleanAndBuild.bat will clean ALL executables from the folder (including tools), then fully rebuild the engine, tools, and your project's editor and game code. If you have a Blueprint only project and are using the Installed version of the engine, the CleanAndBuild.bat file will do nothing (since there's nothing to build). If you are building from engine source code and have a Blueprint project, the CleanAndBuild.bat file will still clean and build the engine and tools, but won't build anything for the game (since there's nothing to build there).\n\nIf you have problems building, you don't want to keep running CleanAndBuild.bat over and over again, because it will clean everything before building everything and that just slows things down. Run CleanAndBuild.bat once, and if it fails, run the Build.bat batch file (included in this github repository) to just build everything. Once something has been built successfully, it won't be built again and again. UnrealBuildTool will skip over anything that is already up to date and allow you to just build whatever is failing over and over until you get the problem fixed.\n\nSo, what do you do when the clean or build fails and you get errors? The first thing you can do is run the CleanAndBuild.bat batch file and redirect the output to a text file like so:\n\nThis will redirect all the output that would have gone to the Command Prompt window and send it to the text file instead. When the build is done (or fails), you can open the BuildLog.txt file in a text editor and examine the output more closely to help track down the cause of the failure.\n\nUnrealHeaderTool and UnrealBuildTool also create log files when they run and you can look at these to help identify problems. For Unreal Engine installed using the Epic Games Launcher, you will find log files under your Windows user's AppData folder. To see the AppData folder in Windows Explorer, you need to show hidden folders. One way to do this is to open Windows Explorer, click on 'View' from the menu and then click on 'Options', then click the 'View' tab and in the \"Advanced settings:\" section, under \"Hidden files and folder\", click the \"Show hidden files, folders and drives\" radio button and click the \"OK\" button to close the Options dialog. You may need to close and re-open Windows Explorer to see the 'AppData' folder under your Windows user's folder ( ).\n\nFor Unreal Engine installed using the Epic Games Launcher, log files for UnrealHeaderTool can be found here:\n\nFor Unreal Engine installed using the Epic Games Launcher, log files for UnrealBuildTool can be found here:\n\n...where \"UE_4.26\" will be replaced by the version number of the Unreal Engine that you are using.\n\nIf you are using a source code build of Unreal Engine (downloaded from GitHub), the log files for UnrealHeaderTool and UnrealBuildTool can be found in the folder in whatever directory you downloaded the GitHub source code into.\n\nLog files that begin with \"UHT-\" are for UnrealHeaderTool and log files that begin with \"UBT-\" are for UnrealBuildTool. Log files that are just \"Log.txt\" will be the output from the AutomationTool which will usually be whatever was being built when the build failed.\n\nWhether you have a Blueprint project, or a C++ project, if you are going to ship your game for other people to play, you will need to package your game. There are many different ways to package your game from within the editor. You can use the \"Package Project\" item from the \"File\" menu in the editor (as shown in the 'Packaging' docs.unrealengine.com link) This will ask you where you want to place your packaged game and do everything automatically without asking for details. You can also use \"Window -> Project Launcher\" in the editor, to open the ProjectLauncher dialog where you can create a custom Launch Profile that allows you to select maps you want to cook along with other options, then cook and stage the game and run the packaged game when it is done. You can also get to the ProjectLauncher dialog by using the \"Launch\" dropdown in the main menu of the editor and select 'Project Launcher...', and finally, you can run the UnrealFrontend application and open the ProjectLauncher dialog from there.\n\nAll of the above methods of packaging your game use the AutomationTool command 'BuildCookRun' to compile your game code, cook content, and stage the cooked content as a packaged format. Packaging your game is the most efficient method of distributing your game to other people for them to play.\n\nSo, let's look at the help output for the BuildCookRun command to see what it can do:\n\nHere's what the output looks like:\n\nWow! There's a lot of stuff there. Again, the arguments to the BuildCookRun command aren't sorted so it's a little difficult to find the specific argument you want and some arguments that can be used aren't show at all in the help. The help also complains about \"Duplicated help parameter\" at the beginning because of the way the BuildCookRun command extends from other AutomationTool commands.\n\nYou don't need to understand what all of these arguments do, and some of them, like \"-numclients\" are obsolete and don't actually do anything. The important ones you should know about are:\n\n- This deletes intermediate files (like source code object files) and cleans (deletes) the previous cooked or staged (packaged) files before the packaging process starts.\n\n- If you have a C++ project, this will allow the packaging tool to build your source code to create the standalone executables used to load and run cooked content.\n\n- This tells the AutomationTool to cook the game content for packaging. Cooking removes data in the Unreal .uasset packages that is only needed in the editor, so cooking makes the assets a little smaller. Cooking will also build shaders for any content that has shaders that are out of date.\n\n- This tells the AutomationTool to stage the cooked content for packaging. Staging the game also adds the game executable to the packaged format and can include the Epic Prerequisite installer (which installs DirectX and C runtime libraries if needed).\n\n- This is the platform that you want to package for. For Windows this would typically be \"Win64\" for 64-bit Windows operating systems.\n\n- This indicates which \"build configuration\" you want to use, which identifies which game executable will be included in the packaged build. This can be \"Development\" to include the executable that has more log output and has the in-game console command window enabled. It can be \"Shipping\" to include the shipping executable which has more optimized code and runs faster, but has no output and has the in-game console command window disabled (which makes debugging packaged game issues more difficult). For people building from source code, you can also use the \"Test\" configuration which has less output than the \"Development\" configuration and makes it a little closer in performance to the \"Shipping\" configuration (but it still has the in-game console window enabled). The \"Test\" configuration also has some 'stats' disabled so if you use any of the 'stat' commands in the console to help with profiling performance, you may be limited by some things not being available (like \"stat fps\" for example, but \"stat unit\" still works).\n\n- This tells the packaging tool to put all of the cooked content into Unreal Engine .pak files, which can be compressed. Pak files can also be encrypted to make it more difficult for people to tamper with your game or extract assets from your game. Putting all your content into .pak files also makes it much harder to see which asets are getting packaged and which are not. If you don't include the \"-pak\" argument, the packaged game will have asset files as \"loose\" files with the same folder structure as your game's Content folder, so temporarily disabling the .pak file format can help you identify when assets aren't getting cooked or staged.\n\nSo, now that we've gone over some of the BuildCookRun arguments, let's talk a little bit about what actually happens when you package your game.\n\nIf you are building from source code, BuildCookRun can compile your project's game code and create the Development, Test, or Shipping executable. These will be found under your project's Binaries folder in a folder with the platform name (for example, for the Windows 64 bit executables). These executable files (*.exe for Win64) will get copied to the staged folder by BuildCookRun.\n\nWhen cooking content, the cooked content will be placed in your project folder under the folder. When packaging your game, you can package for several different types of game executables. If you are not building from source code, you can only choose the \"listen server\" type of executable (which can run as a single player game, a listen server and a client). This is referred to as a \"no editor\" build (because the cooked content can not be loaded into the editor). For Windows, this packaging type is called \"WindowsNoEditor\", so when you cook, you will see a folder which will contain your project's cooked files.\n\nIf you are building from source code, in addition to the \"no editor\" type of package, you can cook for a dedicated server or for a dedicated client (that can only connect to a dedicated server). Cooking for a dedicated server will only cook the content that the server needs (so you won't include things like audio assets which don't actually play on the server). When cooking for a dedicated server for Windows, the cooked folder would be and when cooking for a dedicated client, the cooked folder would be .\n\nAfter cooking, BuildCookRun will stage your game. The staging process copies the cooked files into another folder and can (optionally) place all those cooked files into an Unreal Pak file (*.pak) and the .pak file can be compressed to save disk space and download time. For a Windows \"no editor\" build, the staged folder will be .\n\nAfter staging, in the \"root\" folder of the staged game (i.e. ), you will find one or more \"Manifest\" text files (*.txt) that contains a list of files with a timestamp. These Manifest text files are not needed to run the game and can be removed.\n\nAlso in the \"root\" folder you will find one or more executable files (*.exe for Windows) that are \"bootstrap\" executables that will run your game executable file. The bootstrap executables are just a convenient way of launching your game instead of having to point directly to the game executable (which would be located in for a Blueprint only project, or in for a C++ project).\n\nThe bootstrap executable will also automatically install the Unreal prerequisites (DirectX, C runtime libraries, etc.) if they have not already been installed. This requires that you package your game with the option to include prerequisites.\n\nBy the way, if you are building from source code, you can find the code used to create the bootstrap executable in the folder, in case you want to customize it to run a custom app that can set game options like screen resolution, windowed or fullscreen mode, mouse sensitivity, or any user accessibility options, before launching the game. The AutomationTool command \"BuildCommonTools\" can be used to build the bootstrap executable.\n\nIf you use \"Package Project\" from the \"File\" menu in the Unreal editor, it will ask you for the folder name where you want to place your packaged game. This uses the \"-archive\" and \"-archivedirectory=\" arguments for BuildCookRun to copy the staged folder off to some other user specified folder. The archive folder that you specify will contain the same folders and files as the folder. So for the Windows \"no editor\" build, you will find a \"WindowsNoEditor\" folder containing the same thing as the staged folder, including the unnecessary Manifest .txt file(s). This may make it a little easier for you to store different versions of the packaged game in different folders in case you need to keep older versions of a packaged game for reference later.\n\nWhen using \"Package Project\" from the \"File\" menu in the Unreal editor, the editor will cook, stage and package ALL CONTENT in your game (whether it is used by the game or not). This can wind up making your packaged game much bigger than necessary. You can reduce what is cooked by using the \"-map=\" argument when running BuildCookRun. You specify all the maps that are part of your game and the cooker will cook content (assets) that are referenced directly by the map. It will also cook content that is referenced by other content that is to be cooked, and so on, and so on. So maps will reference content and that content may reference other content and that content may reference other content, etc. This will \"spider out\" until all content that is being referenced by the game has been determined and then everything will be cooked.\n\nAs an example, I created an \"empty\" Third Person Blueprint project including the Starter Content using the editor. I then used \"Package Project\" from the \"File\" menu with no other changes and made note of the size of the cooked and staged folders. With no maps specified, this is the size of the folders:\n\nI then used UnrealFrontend to create a profile that only cooked the 'ThirdPersonExampleMap' and this was the size of the folders after cooking and staging:\n\nThe game still runs the same. You load into the 'ThirdPersonExampleMap' and it has the same content as when no maps were specified, but I eliminated all the Starter Content that was not actually used by the game. This makes the packaged game about one third the size of the \"Package Project\" defaults!!!\n\nSo, specifying specific maps to cook can make the packaged game smaller, but there is a \"down side\" to this. If you are dynamically loading content at run-time (like loading custom skins for a character), if that content does not have a \"hard\" reference in a map or in your user interface, then that content will not get cooked (since it's not referenced by any other content). To prevent this problem, there is an .ini setting you can use to add specific folders to a list to indicate that ALL the content in those folders (and sub-folders) should ALWAYS be cooked even if they aren't referenced by anything.\n\nIn the editor, these additional folders can be set in the Project Packaging Settings where it says \"Additional Asset Directories to Cook\". From the editor main menu, just click \"Edit\", then \"Project Settings\", then under the 'Project' group on the left, click the \"Packaging\" item and scroll down until you see \"Additional Asset Directories to Cook\" and click the '+' sign to start adding folders. Browse to the Content folder of your game project that you want to add to the list of folders containing content that should always be cooked. After adding the first Content folder, click the little \"down arrow\" drop down at the end of the folder name and select \"Insert\" to add additional folders. You can see these folders in the DefaultGame.ini file for your project in the section with the set to the folder name to cook.\n\nTo automate the game packaging process, I have created a Windows batch file called 'PackageGame.bat' that needs to be placed in the Unreal Engine \"root\" folder (where you have Unreal Engine installed on your machine). If you are using an installed build, installed from the Epic Games Launcher, the default location of the \"root\" folder will be the folder (replace 4.26 with whatever version of the engine you are using). If you are building from source code from GitHub, it will whatever folder you cloned the Unreal Engine repository to (you should see \"Engine\", \"FeaturePacks\", \"Samples\" and \"Templates\" folders in the UE4 \"root\" folder). It is important that the batch file be placed in this \"root\" folder. It won't work if it is run from somewhere else.\n\nThe easiest way to get the batch files for this guide is to download the .zip file of the latest release. Go to the Releases page, and click on the \"Source code (zip)\" link of the latest release to download the .zip file, then extract the PackageGame.bat file to your Unreal Engine \"root\" folder.\n\nYou will need to edit the PackageGame.bat file in a text editor to set it up for your project. Near the top of the file, you will see this line:\n\nYou need to replace \"MyAwesomeGame\" with the name of your Unreal Engine project. Save the file and exit from the text editor. You can run the batch file by just double clicking on it in Windows Explorer.\n\nIf you want to indicate specific maps to cook, you can edit the PackageGame.bat file and look for the following line:\n\nHere you want to specify a list of maps to cook and stage by providing the name of the map files separated by a '+' sign (but don't use ANY SPACES), like so:\n\nIf everything runs correctly, in your Unreal Project folder (under the folder) you should find two new folders, \"PackagedGame\" and \"Releases\". Inside the folder will be the folder for your platform (\"WindowsNoEditor\"). Inside the platform folder will be your packaged game, ready to run. You can doubleclick on the executable(s) in that folder to run the game.\n\nInside the folder will be a folder name for the release version of this packaged build (in this case \"1.0\"). This is used if you want to release Patches or DLC for your game (more on this down below).\n\nIf the packaging process fails, the PackageGame.bat batch file will create a text file named in the \"root\" folder (where you placed the PackageGame.bat file). So, if this \"PACKAGING_FAILED.txt\" file does not exist after running the PackageGame.bat file, then the packaging process was successful.\n\nBut what do you do if there are errors and the packaging process fails? Unreal creates log files from the AutomationTool and other applications under your Windows user's AppData folder. To see the AppData folder in Windows Explorer, you need to show hidden folders. One way to do this is to open Windows Explorer, click on 'View' from the menu and then click on 'Options', then click the 'View' tab and in the \"Advanced settings:\" section, under \"Hidden files and folder\", click the \"Show hidden files, folders and drives\" radio button and click the \"OK\" button to close the Options dialog. You may need to close and re-open Windows Explorer to see the 'AppData' folder under your Windows user's folder ( ).\n\nInside your user's AppData folder will be a folder. And inside the \"Roaming\" folder will be an folder. Use Windows Explorer to browse down into the \"Unreal Engine\" folder here:\n\nInside the \"Unreal Engine\" folder will be a folder. Browse down into that \"AutomationTool\" folder and you should see a folder. Browse down into the \"Logs\" folder and you should see a long folder name with the version number at the end (like ). Browse into that folder and you should see some .txt files. These are the log files from the cooking, staging, and packaging process.\n\nThe file is the output from AutomationTool running all of the steps necessary to cook, stage and package your game. The text file that starts with \"Cook\" is the output from the cooking process. If the cooker fails, you can examine this file in a text editor and search for \"Error:\" (without the double quotes) to find any error messages. If the staging process fails, the error messages will be in the Log.txt file (since this process is handled by AutomationTool itself). You can search the Log.txt file for \"Error:\" (without the double quotes) to find any error messages. If the process creating the .pak file fails, the text file that begins with \"UnrealPak\" will contain any error messages (again, search for \"Error:\" without the quotes).\n\nEach time the AutomationTool runs, it will clean out (delete) any previous .txt files from the AutomationTool folder and will create new versions of these files as the packaging process progresses. There will always be a \"Log.txt\" file (from the AutomationTool), but the other files won't exist unless that part packaging process either ran and failed, or ran and succeeded.\n\nIf you have trouble determining the cause of the error, you can still package the game in the Unreal Editor using the \"Package Project\" item from the \"File\" menu in the editor, or using the \"Project Launcher\" in the editor and this should present the error to you in a more \"user friendly\" way.\n\nSee the How To Create a Patch webpage for documentation on creating patches. The PackageGame.bat file uses \"1.0\" as the first release version of your game (which is referenced in the \"How To Create a Patch\" webpage). After packaging and releasing your game, you should zip up the Releases folder and keep the .zip file somewhere safe. You can't go back later and make a new Releases folder to create a Patch if you forget to do it the first time with your initial release. The data in the Releases folder won't match your initial release to the public and patching won't work properly.\n\nThe main difference between Patches and DLC is that Patches are modifications to the main game content along with (optionally) bug fixes to C++ code. DLC is a game specific Plugin that contains additional content that can be added to the game at a later date after the game has been released. For DLC, you will need to create a new Plugin (usually inside the game's Project folder) and create new content in that Plugin folder.\n\nYou use Project Launcher in the editor to create a profile to cook and package your patch or DLC and you check the \"Generate Patch\" or \"Build DLC\" checkbox in the \"Release / DLC / Patching Settings\" in the \"Cook\" section of your Project Launcher profile. You also set the \"Release version this is based on\" to \"1.0\" to indicate that the cooker should use the metadata from your release build to cook and stage a patch or DLC package.\n\nWhen the cooker cooks for a patch or DLC, it will compare the metadata for each cooked file for the released version of the game (the stuff in the Releases/1.0 folder) with the metadata of the game's current content. If the metadata is different then the cooker knows that this content has been modified (or is new) and will ONLY cook that new or modified content. This cooked data is then packaged as a new Patch or DLC package that can be downloaded separately from the game's original packaged build. Each time you make a patch, a new patch package is created and these are \"cumulative\" meaning that you ONLY need the latest patch package to get all previous patch content changes. The end user doesn't need to download every patch, they only need to download the latest patch to get everything (assuming that they have already downloaded the base released game). Patches are typically much, much smaller than the original game package which saves the end user from having to download the entire game again to get updated content.\n\nSo, now that you have batch files that compile your code or package your game, how do you get these to run automatically? To run the batch file(s) we will create a Windows Task that is scheduled to run at a specific time. This will allow you to run an automated build during the night and have everything updated by the next morning.\n\nTo create a task in Windows, we will use the Task Scheduler application. Here's the steps needed to set up an automated task:\n• Click the Windows 'Start' button, search for \"Task Scheduler\" and click on it.\n• Select the \"Task Scheduler Library\" folder, then right click on it and select \"New Folder\" and name the new folder \"UnrealEngine\".\n• Select the \"UnrealEngine\" folder in Task Scheduler, then right click on it and select \"Create Basic Task...\".\n• Give the new task a name like \"Nightly Build\" or \"Nightly Package\" and give it a description so that you know what this task is doing.\n• Select \"Daily\" as the Trigger type and click the 'Next' button.\n• Select the time when you want the task to run (like 4:00 am or something) and click the 'Next' button.\n• Select \"Start a program\" for the Action and click the 'Next' button.\n• Click the \"Browse...\" button for 'Program/script' and browse to the batch file that you want to run (for example 'CleanAndBuild.bat' or 'PackageGame.bat') in the Unreal Engine \"root\" folder, select the batch file and click the 'Open' button.\n• Where it says \"Start in (optional)\", copy/paste the path of the Unreal Engine \"root\" folder from the 'Program/script' line. Make sure to remove the batch file name at the end and remove any double quotes from the path name. You should have something like when using an installed build from the Epic Games Launcher.\n• Check the \"Open the Properties dialog for this task when I click Finish\" checkbox.\n• Then click the 'Finish' button and a new dialog box will pop up.\n• In the \"Security options\" section, select the \"Run whether user is logged in or not\" radio button and click the 'OK' button.\n• Enter the password for your Windows user account (so that Windows can log into your account if you are signed out when the task runs) and click the 'OK' button.\n\nYou should now see the task in the \"UnrealEngine\" folder of Task Manager with the information about when it runs, etc. Look at the \"Next Run Time\" column to verify that the time you expect it to run is correct. In the \"Last Run Result\" column, it should say \"The task has not yet run\".\n\nThe task should run at it's scheduled time and you should see files in your Unreal project were updated by the batch file. If the task fails to run, open Task Scheduler, expand the \"UnrealEngine\" folder, select the task you created and look at the \"Last Run Result\" column to see if it indicates why the task did not run. Check to make sure that you have the proper path in the \"Start in (optional)\" setting of the task (you can edit the task to change this if needed).\n\nYou can create your own AutomationTool commands to run custom tasks. AutomationTool is written in C# so you will need to be familiar with the C# programming language to create custom automation commands.\n\nFirst you need to add an Automation Project to your Game Project (this is similar to an Unreal game project but for the AutomationTool instead). See this link for details on adding your own Automation Project:\n\nAfter creating the Automation Project, you can add custom commands to your Automation Project. See the following link for details on how to do that:\n\nTo run the AutomationTool code in the Visual Studio debugger, you need to set the AutomationTool as the startup project. To do this, expand the \"Programs\" folder in the Visual Studio Solution Explorer and right click on 'AutomationTool' and select \"Set as Startup Project\". This will launch the AutomationTool application when you start the debugger. You will also need to set commandline arguments for AutomationTool when running it. Right click on 'AutomationTool' again and select \"Properties\" then in the Properties dialog, click on 'Debug' and set \"Command line arguments:\" to the same command line arguments that you would use when running the RunUAT.bat batch file.\n\nAll of the AutomationTool code can be found in the \"Programs/Automation\" folder of the Solution Explorer. The 'AutomationScripts.Automation' C# project contains most of the AutomationTool common code including things like \"BuildCookRun\". You can set a breakpoint at the 'Execute' function of Automation.cs and that should execute whatever AutomationTool command was given (when it calls \"Command.Execute();\"). So if you are adding a new command and AutomationTool isn't finding that command for some reason, this is a good place to start single stepping through code."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/build-operations-cooking-packaging-deploying-and-running-projects-in-unreal-engine",
        "document": "As part of the packaging process, the Automation Tool (sometimes abbreviated as UAT for Unreal Automation Tool) is used to work through a set of utility scripts for manipulating Unreal Engine (UE) projects. For the packaging process, the Automation Tool uses a particular command called BuildCookRun. This command can cook content for a platform, package it up into a platform's native format for distribution, deploys it to the device, and automatically runs the project (where applicable). Packaging your project does not solely require the direct use of UAT, though. Use the Platforms button of the UE Toolbar to select from available platforms or Command Line to cook and package content for a platform.\n\nAs part of the BuildCookRun command in UAT, the following stages outline the different stages of the packaging pipeline:\n• Build: This stage compiles the executeables for the selected platform.\n• Cook: This stage cooks content by executing the UE in a special mode.\n• Stage: This stage copies the executables and content to a staging area; a standalone directory outside of the development directory.\n• Package: This stage packages the project into a platform's native distribution format.\n• Deploy: This stage deploys the build to a target device.\n• Run: This stage starts the packaged project on the target platform.\n\nBecause you can deploy content in several different ways to a target platform for testing, debugging, or in preparation for release, you can test your packages in multiple different ways:\n• Use UE Toolbar to quickly test a part of your currently loaded Level for testing and debugging.\n• Use the Project Launcher to use a default profile or create a custom one to perform actions like profiling or debugging for your project's latest build.\n• Take an already packaged game and deploy it to a platform, such as a console or mobile device.\n\nFollow sections below to learn more about these packaging methods and how you can package your games using them.\n\nUse Platforms button of the UE Toolbar to select a platform to package your project for. When you package a project using this option, it will save the packaged project to a folder that you select but will not deploy it to the device.\n\nFrom drop-down menu under Platforms, you can perform the following actions:\n• Build and launch a project on the available device you need. When clicked, the launch process automatically Cooks the necessary content, build code, and launch on the selected platform. The build is a quick way to test functionality during active development without the need to compile and run the entirety of the project every time you need to test something.\n• Choose the target platform and adjust the Build Configuration for it (Development, Shipping, and so on). In UE 5.4.0, there is a known issue where, if you try to package with the \"Use Project Setting\" option it will use the configuration set in Project Settings > Packaging at the time the editor started even if you change it. To remedy this, restart the editor to ensure the new build configuration takes effect, or choose one of the binary configurations from the Platforms menu instead of Use Project Setting. This issue is resolved in UE 5.4.1.\"\n• Access to the Project Launcher, Device Manager, Packaging Settings, and Supported Platforms.\n\nThe Project Launcher affords you the ability to deploy for different platforms all from one location and even from a single launch profile. For open Project Launcher click Platforms > Project Launcher.\n\nEach platform that is deployed to has its own default launch profile (listed in the main window). You can also choose to create a custom one that enables you to build a project in a specific way with many advanced settings. These include being able to apply command line arguments, test downloadable content (DLC) and patching releases, and much more.\n\nFrom the Project Launcher, you can create a Custom Launch Profile that can be used on all platforms or even just the ones you specify. These profiles enable you to build your content in specific ways by setting how it is cooked, packaged, and deployed using the available build operations.\n\nTo add your own Custom Launch Profile, click the Add button on the right side of the window.\n\nAfter doing so, the Custom Launch Profile is immediately open. Be sure to give it a Name and Description so that you can quickly identify it later.\n\nThe Automation Tool enables you to cook and package your game using Command Line, and since all build operations are performed by UAT, it can be run directly on the Command Line with RunUAT.bat file when provided with valid arguments.\n\nA basic cook can be performed using the following command line arguments following either the UnrealEditor.exe or UnrealEditor-cmd.exe files:\n\nThe commandlet must be specified via -run=cook and a platform to cook for must be specified. It will generate the cooked data for the platform that is specified and saves it to the following location:\n\nAuthoring your command line arguments by hand can be quite involved and has more potential to create accidental errors. Because of this, it is recommended to use a Custom Launch Profile to accurately generate a Command Line for your build. Any parameters entered in the custom launch profile will automatically generate the Command Line and display it in the Output Log window when it is used to cook and build the project. Any text that follows BuildCookRun onward can be directly passed as your command line arguments using RunUAT.bat.\n\nThe following is an example of the generated output from the Project Launcher and the equivalent Command Line that would need to be manually authored to use for RunUAT.bat:\n\nIn UE, content is stored in particular formats that are supported (PNG for textures data or WAV for audio) for a platform. However, this content may not be in a format that can be used by the platform you are developing for. The process of Cooking converts Assets used by the UE into ones that can be read on the platforms being deployed to. In some cases, the cooked content is converted to a proprietary format (like with console) that can only be read by by that platform.\n\nCooking content for different platforms can be done by using Command Line or by using the Project Launcher, and its UE interface. For some platforms, all content must be cooked before it can be used on the device for it to work correctly. You may need to check with the platform you are developing for if this is the case.\n\nThere are two ways to cook content for your projects; By the book and On the fly.\n\nCook By the book (CBTB) performs the entirety of the cook process ahead of time allowing for the build to deploy the cooked Assets all at once rather than as needed while playing the Level (if you were using a cook server). This option is useful for developers who are not iterating on individual Assets or for those who want the game to perform at full-speed without waiting for a server to deliver the necessary cooked content. Typically, performance testing and playtests will want to use this method.\n\nWhen performing a CBTB, there is no extra setup required for the build. Use the Project Launcher to create a Custom Launch Profile and in the Cook section, use the drop-down selection to choose By the book.\n\nIf you have any game-specific command lines to add, you can expand the Advanced Settings and add the arguments to the Additional Cooker Options.\n\nAn example would be:\n\nWhen you choose to cook content On the fly (COTF), it will delay cooking it until after the game has been deployed to the platform. Only the executable and some other basic files are installed, which use network communication with a Cook Server to make requests on-demand as the content is needed. COTF allows for faster iteration for developers who will be making changes to content regularly or those who will only be exploring sections of the game.\n\nTo cook on the fly, you will first need to start a Cook Server on a machine which has the full project available to it. This can be either your local machine or a remote server which performs the cook. The Cook Server can be run by starting the UE in Command Line mode using the following arguments with the UnrealEditor-cmd.exe:\n\nOn the developer's local machine, access a Custom Launch Profile from the Project Launcher and in the Deploy Section, set the method to File Server. Optionally, you can use the Default Deploy Platform to select a single platform or use the toggles to enable multiple platforms to build and deploy to.\n\nFor the executable to know where to load content from, it needs to be made aware of the IP address of the machine that is running the Cook Server. To do this, you will need to pass the following command line argument on the client's Command Line (where x.x.x.x represents your host's IPs):\n\nThe argument can be specified in your custom launch profile under the Launch section in the Additional Command Line Parameters text box. If the IP address is left unspecified, the build will load from existing local files and not attempt to connect to the Cook Server.\n\nTo deploy a build from the Project Launcher, you must have a project that cooked and packaged. There are a couple of ways you can deploy this type of build to a platform. In your Custom Launch Profile under the Deploy section, set the way you want to deploy the build."
    },
    {
        "link": "https://forums.unrealengine.com/t/runuat-buildcookrun-full-command-line-options-documentation/128809",
        "document": "I keep running across command line options for BuildCookRun that do not appear in the list you get by running “-help”.\n\nFor example, what exactly does “-compile” specify? Also, I know now that “-compileeditor” means compile the DLLs for use with the editor - but where is the doc that states it? I’ve been thinking that -compileeditor was used to compile the engine source code.\n\nAnother one: -buildmachine. I’d like to read about what exactly that does.\n\nAnyone know where to find documentation for these?"
    },
    {
        "link": "https://github.com/botman99/ue4-unreal-automation-tool",
        "document": "\n• Building Code\n\n Building The Editor\n\n Cleaning Before Building\n\n Building Game Code\n\n Putting It All Together\n\n What To Do If The Build Fails\n• Packaging Your Game\n\n What Happens When A Game Is Packaged\n\n Building Source Code\n\n Cooking Content\n\n Staging Cooked Content\n\n What Should You Cook?\n\n Automating The Game Packaging\n\n What To Do If The Packaging Fails\n\n Patching And DLC\n• Advanced\n\n How to Debug Your AutomationTool Commands\n\nThe Unreal Engine includes a tool called Unreal AutomationTool or 'UAT' for short. UAT is written in C# and is a collection of various tools that can be used to compile code, cook content and package your game (among other things). In the engine, the AutomationTool source code can be found in the folder (note that you will have the UAT source code even if you downloaded the Unreal Engine using the Epic Game Launcher and not from GitHub).\n\nThe overview of the Unreal AutomationTool can be found here. The overview states the following:\n\n\"AutomationTool is a host program and a set of utility libraries you can use to script unattended processes related to Unreal Engine when using C#. Internally, we use AutomationTool for a variety of tasks, including building, cooking, and running games, running automation tests, and scripting other operations to be executed on our build farm.\"\n\nUAT is available for the Windows, Mac and Linux platforms (basically the same platforms that support the Unreal Editor). Unreal AutomationTool needs to run in a Windows 'Command Prompt' window (or Terminal on Mac or Linux) since it is a commandline based tool and does not have a GUI interface.\n\nTo run UAT, there is a RunUAT.bat file (or RunUAT.command for Mac and RunUAT.sh for Linux) in the folder. When running UAT, you need to be in the Unreal Engine 'root' folder (the folder where you installed the engine) or in the folder. If you installed using the Epic Games Launcher, that will be something like . You should see the \"Engine\" folder contained in the Unreal Engine 'root' folder.\n\nFor Windows, you can open up a Command Prompt window by clicking the Windows 'Start' button and typing \"command prompt\" (without the quotes). When you open the command prompt window, you will be in your Windows 'user' directory by default. If you installed the Unreal Engine in the default folder from the Epic Games Launcher, you can change to the Unreal Engine by using the 'cd' command. Enter the following command in the command prompt window to change to that folder (including the double quotes);\n\nNote: If you installed the Unreal Engine on the D: drive or some other drive, you will need to enter a command in the Command Prompt window to change to that drive first before you enter the command to change to the Unreal Engine installation folder:\n\nYour Command Prompt window prompt should now look like this:\n\nNow you are ready to run UAT. You run UAT by giving it a command followed by one or more commandline arguments. The commandline arguments are preceded by a '-' character. Let's start by running UAT without any command or arguments. Enter the following and press the 'Enter' key (on Windows, make sure to use backslash '\\' characters and not forward slash '/' characters as you would on Mac or Linux):\n\n...and here's what the output should look like:\n\nThe \"ERROR: Failed to find scripts to execute\" message means that we didn't give UAT a valid command to execute.\n\nSo, let's run UAT again, but this time give it the \"-List\" commandline argument to have UAT display a list of all of the commands that it supports. Enter the following command and press the 'Enter' key:\n\nYou will get a LONG list of commands (about a hundred or so) with each command on a separate line. The commands aren't displayed in any particular order and aren't sorted alphabetically, so you may have to hunt around a little bit if you are looking for a specific command.\n\nHere is the list that I get on my machine that I have sorted and broken into columns:\n\nYou can get help for a specific command by running UAT with the command followed by \"-Help\", for example:\n\nGives the following output:\n\nThe 'BuildGame' UAT command is used to compile your C++ game code.\n\nNote that the AutomationTool will always exit with an 'ExitCode'. For the above example, the ExitCode is 0 which is 'Success'. This ExitCode can be used by other batch files or other applications that might run the AutomationTool to get a status result of whether the UAT command succeeded or failed. This ExitCode is a result of whatever application the AutomationTool ran to handle the UAT command that you gave it. For example, when using \"RunUAT.bat BuildGame\", UAT will run the UnrealBuildTool which is used to compile code. It the code failed to be compiled successfully, UnrealBuildTool would return a non-zero exit code and UAT would also then return a non-zero exit code. This can be used to determine whether your build failed or succeeded.\n\nFor reference, here is a list of some Windows error codes (note that 0 is ERROR_SUCCESS).\n\nIf you are building the Unreal Engine from source code (downloaded from GitHub or from Epic's Perforce), you will see slightly different output for the BuildGame command...\n\nNotice that RunUAT.bat added \"-compile\" to the commandline arguments automatically and there's a line that says Dependencies are up to date (0.226s). Skipping compile. When you are building the engine from source code, UAT will assume that the AutomationTool source code may have been modified by the user and will automatically rebuild itself each time it is run. This allows you to make changes to the UAT source code or add your own AutomationTool commands to do custom automated tasks. More on this is covered in the Advanced section below.\n\nIf you are using an Unreal Blueprint project for your game, you can skip down to the the Packaging Your Game section (since your project does not need to build C++ code).\n\nIf you have an Unreal Project that uses C++ or if you are building the engine from source code, you can automate the process of compiling the engine or your game code. You do this using one of the 'Build' AutomationTool commands, such as: \"BuildEditor\", \"BuildGame\", \"BuildServer\", or \"BuildTarget\".\n\nThe 'BuildEditor' AutomationTool command is used to build the editor, but there are actually two different versions of \"the editor\". There is the editor that gets built when you compile the UE4 project and then compile the editor for your game and there is a slightly different version of the editor that gets built if you only compile the editor for your game. Building the editor for your game (like the \"Development Editor\" / \"Win64\" build configuration in Visual Studio) will only build the Engine modules and Plugin modules required by your game in an editor configuration. Building the UE4 project in an editor configuration will build all Engine modules and all Plugin modules whether your game needs them or not.\n\nWhat does this mean? This means that if you build the editor only for your game, if Plugins are not enabled by default (and not required by other Engine modules), they won't get built. This can saved you time when building. This also means that you can't later enable a Plugin in the editor and then restart the editor without building again to compile the newly enabled but not yet built Plugin module(s).\n\nEach module, whether an Engine module or Plugin module, when built for Windows, will create a DLL file named \"UE4Editor-<modulename>.dll\". These files can be found in the folder or in the folder. There are a lot of these files. You can get a list of them by changing to the Unreal Engine 'root' folder (where the 'Engine' folder is located) and running the following in the Windows Command Prompt window:\n\nReplacing 'Win64' with 'Win32' if you are building the editor for 32-bit Windows.\n\nFor Unreal Engine version 4.26, when I build the UE4 project there are 395 Engine modules (in the folder) and 591 Plugin modules (under the folder). If you create an \"empty\" C++ project (like when using the 'First Person' or 'Third Person' template), clean the solution and then build the editor just for the game project, there are 352 Engine modules and only 181 Plugin modules.\n\nKeeping that in mind, you can use \"RunUAT.bat BuildEditor\" without specifying a project to build the editor for the UE4 editor project and then use \"RunUAT.bat BuildEditor -project=<your_project_here>\" to build the editor for your game project to build everything, or you can just use \"RunUAT.bat BuildEditor -project=<your_project_here>\" to only build the modules required by your project.\n\nSometimes you might want to force everything to be rebuilt from scratch. In Visual Studio this is called \"cleaning the solution\". This will delete any built executables (*.exe or *.dll files) and delete any intermediate files (like *.obj or *.lib files created by the compiler). Why would you want to do this? UnrealBuildTool (UBT) is used by Unreal to build code. UBT does it's best to determine what needs to be rebuilt based on what has been recently modified and the dependency list it keeps of what depends on the things that were recently modified. This usually works well, but there are situations where a header file is modified but UBT doesn't know that something needs to be rebuilt that might depend on that header file. This usually happens when you have third-party libraries that you are using as part of your game code. Unreal may detect that code needs to be rebuilt if the third-party library itself (*.lib file) is modified, but may not build your game code if a header file in the third-party library was updated.\n\nThe Unreal AutomationTool doesn't have a command specifically for cleaning a project or the solution. You can use \"-clean\" when you run \"BuildEditor\" or \"BuildGame\" (even though the help doesn't tell you this), and this will clean (delete) everything and then build. But, if you use \"BuildEditor -clean\" to build the UE4 project editor and then use \"BuildEditor -clean -project=<your_project_here>\", it will clean (delete) all of the editor files you just built for the UE4 project and then build them again, which just wastes time.\n\nAs a side note, the reason that \"BuildEditor -Help\" doesn't tell you about \"-clean\" is that commands like \"BuildEditor\", \"BuildGame\", \"BuildServer\", etc. are all subclasses of the \"BuildTarget\" command. You could use \"BuildTarget\" instead and specify additional commandline parameters to build the editor or game. \"BuildEditor -Help\" only lists the commandline arguments that \"BuildEditor\" requires and not all the additional commandline arguments supported by the \"BuildTarget\" command.\n\nThe help for \"BuildTarget\" is the following:\n\nSo, since there isn't an AutomationTool command specifically for cleaning a project or solution, we can use something else instead. In the folder, there is a \"Clean.bat\" batch file. The Visual Studio solution uses this batch file to clean the UE4 project or the game project when cleaning the solution. The commandline arguments for Clean.bat are not the same as for the RunUAT.bat batch file.\n\nClean.bat runs the UnrealBuildTool (UBT) executable. This UnrealBuildTool.exe executable can be found in the folder. If you run UBT with the \"-clean\" commandline argument, it will clean the specified project. You specify the desired project using the \"-Target=\" commandline argument, like so:\n\nThe \"-Target=\" argument specifies the project, in the format of, project name (like MyAwesomeGame) or editor (like MyAwesomeGameEditor), followed by the platform (Win32, Win64, Linux, Mac, etc.), followed by the build configuration (Development, Test, Shipping, etc). The \"-WaitMutex\" is used by UBT to handle builds that use multiple processes to create a mutex that prevents several simultaneous processes from accessing the same file at the same time. The \"-FromMSBuild\" is used to indicate that any error messages when compiling are coming from the MSBuild application (this is specific to Windows builds).\n\nSo the above \"Clean.bat\" command would clean the UE4 editor project.\n\nWhen you clean or build your game, you need to use the \"-Project=\" argument to tell Unreal where your game project file is located. This needs to be the full path to your .uproject file. When passing the project file path as a commandline argument, you need to place it inside double quotes to preserve any spaces in the path. The default path for projects would be under your Windows Documents folder in a folder called \"Unreal Projects\" followed by a folder name that matches your project name, for example:\n\nWindows has an environment variable called USERPROFILE for the \"C:\\User\\someuser\" part, so you could also use:\n\nThe following would clean the MyAwesomeGame editor project:\n\n...and the following would clean the MyAwesomeGame game code for the Development and Shipping build configurations:\n\nPeople who are running AutomationTool on Linux or Mac can replace the \"Engine\\Build\\BatchFiles\\Clean.bat\" above with \"Engine/Binaries/DotNET/UnrealBuildTool\" instead to run the UBT application directly.\n\nNow that you have built the editor, you are ready to build your game code. This is the executable that will be used when you package your game to a format that will be released to the public (see Packaging Your Game below).\n\nWhen you use \"RunUAT.bat BuildGame\", you build the executable for your game code. This executable is used to load and run the \"cooked\" content that gets created when you package your game. When you ship your game, you will usually build the 'Shipping' configuration of your game code. The Shipping executable removes a bunch of output to the .log file (to make the game faster) and produces the most optimized compiled code, making your game code as fast as possible. When you are testing your packaged build, you will want to use the 'Development' configuration. The Development configuration keeps all of the output to the log file (to help with debugging problems) and has a lower level of optimization when compiling code (which makes it not as fast as possible).\n\nBuilding the game code using RunUAT.bat is similar to building the editor, except we can specify multiple build configurations (Development and Shipping) to build both executables at the same time, like so:\n\nWhen this is done, if you look in the folder of your project folder, you should see two executables (*.exe file), one with the name of the project (MyAwesomeGame.exe) and one with 'Shipping' in it (MyAwesomeGame-Win64-Shipping.exe). The executable with the 'Shipping' name in it is the one you want to include when releasing your game to players.\n\nNOTE: If you are building the engine from source code, you can also build the game for the 'Debug' and 'Test' configurations. The Debug configuration has all compiler optimizations disabled which makes it easier to debug your game code by running it in the debugger. The 'Test' configuration has some of the log output disabled which makes it a little faster than the 'Development' configuration and has the same level of optimization as the 'Shipping' build, so the performance of the Test executable is closer to the performance of the Shipping executable (but with some logging enabled). You could build all four configurations like so:\n\nNow that we know how to clean and build the editor and game code, let's put it all together and create a batch file that does all this. CleanAndBuild.bat (included in this github repository) is a batch file that will clean and build the editor as well as clean and build the game. You can place this .bat file in the Unreal Engine 'root' folder (this will be something like if you installed from the Epic Launcher). You will need to edit this .bat file with a text editor to change \"MyAwesomeGame\" to the name of your project. Then you just need to open a Command Prompt window, change to the Unreal Engine 'root' folder and run \"CleanAndBuild.bat\" to automatically clean and build the project.\n\nThe CleanAndBuild.bat batch file will work for both the Installed version of Unreal Engine (installed from the Epic Games Launcher) and the source code version of Unreal Engine (downloaded from Epic's GitHub repository). For the Installed version of the engine, CleanAndBuild.bat will only clean and build your project's editor and game code. For the source code version of the engine, CleanAndBuild.bat will clean ALL executables from the folder (including tools), then fully rebuild the engine, tools, and your project's editor and game code. If you have a Blueprint only project and are using the Installed version of the engine, the CleanAndBuild.bat file will do nothing (since there's nothing to build). If you are building from engine source code and have a Blueprint project, the CleanAndBuild.bat file will still clean and build the engine and tools, but won't build anything for the game (since there's nothing to build there).\n\nIf you have problems building, you don't want to keep running CleanAndBuild.bat over and over again, because it will clean everything before building everything and that just slows things down. Run CleanAndBuild.bat once, and if it fails, run the Build.bat batch file (included in this github repository) to just build everything. Once something has been built successfully, it won't be built again and again. UnrealBuildTool will skip over anything that is already up to date and allow you to just build whatever is failing over and over until you get the problem fixed.\n\nSo, what do you do when the clean or build fails and you get errors? The first thing you can do is run the CleanAndBuild.bat batch file and redirect the output to a text file like so:\n\nThis will redirect all the output that would have gone to the Command Prompt window and send it to the text file instead. When the build is done (or fails), you can open the BuildLog.txt file in a text editor and examine the output more closely to help track down the cause of the failure.\n\nUnrealHeaderTool and UnrealBuildTool also create log files when they run and you can look at these to help identify problems. For Unreal Engine installed using the Epic Games Launcher, you will find log files under your Windows user's AppData folder. To see the AppData folder in Windows Explorer, you need to show hidden folders. One way to do this is to open Windows Explorer, click on 'View' from the menu and then click on 'Options', then click the 'View' tab and in the \"Advanced settings:\" section, under \"Hidden files and folder\", click the \"Show hidden files, folders and drives\" radio button and click the \"OK\" button to close the Options dialog. You may need to close and re-open Windows Explorer to see the 'AppData' folder under your Windows user's folder ( ).\n\nFor Unreal Engine installed using the Epic Games Launcher, log files for UnrealHeaderTool can be found here:\n\nFor Unreal Engine installed using the Epic Games Launcher, log files for UnrealBuildTool can be found here:\n\n...where \"UE_4.26\" will be replaced by the version number of the Unreal Engine that you are using.\n\nIf you are using a source code build of Unreal Engine (downloaded from GitHub), the log files for UnrealHeaderTool and UnrealBuildTool can be found in the folder in whatever directory you downloaded the GitHub source code into.\n\nLog files that begin with \"UHT-\" are for UnrealHeaderTool and log files that begin with \"UBT-\" are for UnrealBuildTool. Log files that are just \"Log.txt\" will be the output from the AutomationTool which will usually be whatever was being built when the build failed.\n\nWhether you have a Blueprint project, or a C++ project, if you are going to ship your game for other people to play, you will need to package your game. There are many different ways to package your game from within the editor. You can use the \"Package Project\" item from the \"File\" menu in the editor (as shown in the 'Packaging' docs.unrealengine.com link) This will ask you where you want to place your packaged game and do everything automatically without asking for details. You can also use \"Window -> Project Launcher\" in the editor, to open the ProjectLauncher dialog where you can create a custom Launch Profile that allows you to select maps you want to cook along with other options, then cook and stage the game and run the packaged game when it is done. You can also get to the ProjectLauncher dialog by using the \"Launch\" dropdown in the main menu of the editor and select 'Project Launcher...', and finally, you can run the UnrealFrontend application and open the ProjectLauncher dialog from there.\n\nAll of the above methods of packaging your game use the AutomationTool command 'BuildCookRun' to compile your game code, cook content, and stage the cooked content as a packaged format. Packaging your game is the most efficient method of distributing your game to other people for them to play.\n\nSo, let's look at the help output for the BuildCookRun command to see what it can do:\n\nHere's what the output looks like:\n\nWow! There's a lot of stuff there. Again, the arguments to the BuildCookRun command aren't sorted so it's a little difficult to find the specific argument you want and some arguments that can be used aren't show at all in the help. The help also complains about \"Duplicated help parameter\" at the beginning because of the way the BuildCookRun command extends from other AutomationTool commands.\n\nYou don't need to understand what all of these arguments do, and some of them, like \"-numclients\" are obsolete and don't actually do anything. The important ones you should know about are:\n\n- This deletes intermediate files (like source code object files) and cleans (deletes) the previous cooked or staged (packaged) files before the packaging process starts.\n\n- If you have a C++ project, this will allow the packaging tool to build your source code to create the standalone executables used to load and run cooked content.\n\n- This tells the AutomationTool to cook the game content for packaging. Cooking removes data in the Unreal .uasset packages that is only needed in the editor, so cooking makes the assets a little smaller. Cooking will also build shaders for any content that has shaders that are out of date.\n\n- This tells the AutomationTool to stage the cooked content for packaging. Staging the game also adds the game executable to the packaged format and can include the Epic Prerequisite installer (which installs DirectX and C runtime libraries if needed).\n\n- This is the platform that you want to package for. For Windows this would typically be \"Win64\" for 64-bit Windows operating systems.\n\n- This indicates which \"build configuration\" you want to use, which identifies which game executable will be included in the packaged build. This can be \"Development\" to include the executable that has more log output and has the in-game console command window enabled. It can be \"Shipping\" to include the shipping executable which has more optimized code and runs faster, but has no output and has the in-game console command window disabled (which makes debugging packaged game issues more difficult). For people building from source code, you can also use the \"Test\" configuration which has less output than the \"Development\" configuration and makes it a little closer in performance to the \"Shipping\" configuration (but it still has the in-game console window enabled). The \"Test\" configuration also has some 'stats' disabled so if you use any of the 'stat' commands in the console to help with profiling performance, you may be limited by some things not being available (like \"stat fps\" for example, but \"stat unit\" still works).\n\n- This tells the packaging tool to put all of the cooked content into Unreal Engine .pak files, which can be compressed. Pak files can also be encrypted to make it more difficult for people to tamper with your game or extract assets from your game. Putting all your content into .pak files also makes it much harder to see which asets are getting packaged and which are not. If you don't include the \"-pak\" argument, the packaged game will have asset files as \"loose\" files with the same folder structure as your game's Content folder, so temporarily disabling the .pak file format can help you identify when assets aren't getting cooked or staged.\n\nSo, now that we've gone over some of the BuildCookRun arguments, let's talk a little bit about what actually happens when you package your game.\n\nIf you are building from source code, BuildCookRun can compile your project's game code and create the Development, Test, or Shipping executable. These will be found under your project's Binaries folder in a folder with the platform name (for example, for the Windows 64 bit executables). These executable files (*.exe for Win64) will get copied to the staged folder by BuildCookRun.\n\nWhen cooking content, the cooked content will be placed in your project folder under the folder. When packaging your game, you can package for several different types of game executables. If you are not building from source code, you can only choose the \"listen server\" type of executable (which can run as a single player game, a listen server and a client). This is referred to as a \"no editor\" build (because the cooked content can not be loaded into the editor). For Windows, this packaging type is called \"WindowsNoEditor\", so when you cook, you will see a folder which will contain your project's cooked files.\n\nIf you are building from source code, in addition to the \"no editor\" type of package, you can cook for a dedicated server or for a dedicated client (that can only connect to a dedicated server). Cooking for a dedicated server will only cook the content that the server needs (so you won't include things like audio assets which don't actually play on the server). When cooking for a dedicated server for Windows, the cooked folder would be and when cooking for a dedicated client, the cooked folder would be .\n\nAfter cooking, BuildCookRun will stage your game. The staging process copies the cooked files into another folder and can (optionally) place all those cooked files into an Unreal Pak file (*.pak) and the .pak file can be compressed to save disk space and download time. For a Windows \"no editor\" build, the staged folder will be .\n\nAfter staging, in the \"root\" folder of the staged game (i.e. ), you will find one or more \"Manifest\" text files (*.txt) that contains a list of files with a timestamp. These Manifest text files are not needed to run the game and can be removed.\n\nAlso in the \"root\" folder you will find one or more executable files (*.exe for Windows) that are \"bootstrap\" executables that will run your game executable file. The bootstrap executables are just a convenient way of launching your game instead of having to point directly to the game executable (which would be located in for a Blueprint only project, or in for a C++ project).\n\nThe bootstrap executable will also automatically install the Unreal prerequisites (DirectX, C runtime libraries, etc.) if they have not already been installed. This requires that you package your game with the option to include prerequisites.\n\nBy the way, if you are building from source code, you can find the code used to create the bootstrap executable in the folder, in case you want to customize it to run a custom app that can set game options like screen resolution, windowed or fullscreen mode, mouse sensitivity, or any user accessibility options, before launching the game. The AutomationTool command \"BuildCommonTools\" can be used to build the bootstrap executable.\n\nIf you use \"Package Project\" from the \"File\" menu in the Unreal editor, it will ask you for the folder name where you want to place your packaged game. This uses the \"-archive\" and \"-archivedirectory=\" arguments for BuildCookRun to copy the staged folder off to some other user specified folder. The archive folder that you specify will contain the same folders and files as the folder. So for the Windows \"no editor\" build, you will find a \"WindowsNoEditor\" folder containing the same thing as the staged folder, including the unnecessary Manifest .txt file(s). This may make it a little easier for you to store different versions of the packaged game in different folders in case you need to keep older versions of a packaged game for reference later.\n\nWhen using \"Package Project\" from the \"File\" menu in the Unreal editor, the editor will cook, stage and package ALL CONTENT in your game (whether it is used by the game or not). This can wind up making your packaged game much bigger than necessary. You can reduce what is cooked by using the \"-map=\" argument when running BuildCookRun. You specify all the maps that are part of your game and the cooker will cook content (assets) that are referenced directly by the map. It will also cook content that is referenced by other content that is to be cooked, and so on, and so on. So maps will reference content and that content may reference other content and that content may reference other content, etc. This will \"spider out\" until all content that is being referenced by the game has been determined and then everything will be cooked.\n\nAs an example, I created an \"empty\" Third Person Blueprint project including the Starter Content using the editor. I then used \"Package Project\" from the \"File\" menu with no other changes and made note of the size of the cooked and staged folders. With no maps specified, this is the size of the folders:\n\nI then used UnrealFrontend to create a profile that only cooked the 'ThirdPersonExampleMap' and this was the size of the folders after cooking and staging:\n\nThe game still runs the same. You load into the 'ThirdPersonExampleMap' and it has the same content as when no maps were specified, but I eliminated all the Starter Content that was not actually used by the game. This makes the packaged game about one third the size of the \"Package Project\" defaults!!!\n\nSo, specifying specific maps to cook can make the packaged game smaller, but there is a \"down side\" to this. If you are dynamically loading content at run-time (like loading custom skins for a character), if that content does not have a \"hard\" reference in a map or in your user interface, then that content will not get cooked (since it's not referenced by any other content). To prevent this problem, there is an .ini setting you can use to add specific folders to a list to indicate that ALL the content in those folders (and sub-folders) should ALWAYS be cooked even if they aren't referenced by anything.\n\nIn the editor, these additional folders can be set in the Project Packaging Settings where it says \"Additional Asset Directories to Cook\". From the editor main menu, just click \"Edit\", then \"Project Settings\", then under the 'Project' group on the left, click the \"Packaging\" item and scroll down until you see \"Additional Asset Directories to Cook\" and click the '+' sign to start adding folders. Browse to the Content folder of your game project that you want to add to the list of folders containing content that should always be cooked. After adding the first Content folder, click the little \"down arrow\" drop down at the end of the folder name and select \"Insert\" to add additional folders. You can see these folders in the DefaultGame.ini file for your project in the section with the set to the folder name to cook.\n\nTo automate the game packaging process, I have created a Windows batch file called 'PackageGame.bat' that needs to be placed in the Unreal Engine \"root\" folder (where you have Unreal Engine installed on your machine). If you are using an installed build, installed from the Epic Games Launcher, the default location of the \"root\" folder will be the folder (replace 4.26 with whatever version of the engine you are using). If you are building from source code from GitHub, it will whatever folder you cloned the Unreal Engine repository to (you should see \"Engine\", \"FeaturePacks\", \"Samples\" and \"Templates\" folders in the UE4 \"root\" folder). It is important that the batch file be placed in this \"root\" folder. It won't work if it is run from somewhere else.\n\nThe easiest way to get the batch files for this guide is to download the .zip file of the latest release. Go to the Releases page, and click on the \"Source code (zip)\" link of the latest release to download the .zip file, then extract the PackageGame.bat file to your Unreal Engine \"root\" folder.\n\nYou will need to edit the PackageGame.bat file in a text editor to set it up for your project. Near the top of the file, you will see this line:\n\nYou need to replace \"MyAwesomeGame\" with the name of your Unreal Engine project. Save the file and exit from the text editor. You can run the batch file by just double clicking on it in Windows Explorer.\n\nIf you want to indicate specific maps to cook, you can edit the PackageGame.bat file and look for the following line:\n\nHere you want to specify a list of maps to cook and stage by providing the name of the map files separated by a '+' sign (but don't use ANY SPACES), like so:\n\nIf everything runs correctly, in your Unreal Project folder (under the folder) you should find two new folders, \"PackagedGame\" and \"Releases\". Inside the folder will be the folder for your platform (\"WindowsNoEditor\"). Inside the platform folder will be your packaged game, ready to run. You can doubleclick on the executable(s) in that folder to run the game.\n\nInside the folder will be a folder name for the release version of this packaged build (in this case \"1.0\"). This is used if you want to release Patches or DLC for your game (more on this down below).\n\nIf the packaging process fails, the PackageGame.bat batch file will create a text file named in the \"root\" folder (where you placed the PackageGame.bat file). So, if this \"PACKAGING_FAILED.txt\" file does not exist after running the PackageGame.bat file, then the packaging process was successful.\n\nBut what do you do if there are errors and the packaging process fails? Unreal creates log files from the AutomationTool and other applications under your Windows user's AppData folder. To see the AppData folder in Windows Explorer, you need to show hidden folders. One way to do this is to open Windows Explorer, click on 'View' from the menu and then click on 'Options', then click the 'View' tab and in the \"Advanced settings:\" section, under \"Hidden files and folder\", click the \"Show hidden files, folders and drives\" radio button and click the \"OK\" button to close the Options dialog. You may need to close and re-open Windows Explorer to see the 'AppData' folder under your Windows user's folder ( ).\n\nInside your user's AppData folder will be a folder. And inside the \"Roaming\" folder will be an folder. Use Windows Explorer to browse down into the \"Unreal Engine\" folder here:\n\nInside the \"Unreal Engine\" folder will be a folder. Browse down into that \"AutomationTool\" folder and you should see a folder. Browse down into the \"Logs\" folder and you should see a long folder name with the version number at the end (like ). Browse into that folder and you should see some .txt files. These are the log files from the cooking, staging, and packaging process.\n\nThe file is the output from AutomationTool running all of the steps necessary to cook, stage and package your game. The text file that starts with \"Cook\" is the output from the cooking process. If the cooker fails, you can examine this file in a text editor and search for \"Error:\" (without the double quotes) to find any error messages. If the staging process fails, the error messages will be in the Log.txt file (since this process is handled by AutomationTool itself). You can search the Log.txt file for \"Error:\" (without the double quotes) to find any error messages. If the process creating the .pak file fails, the text file that begins with \"UnrealPak\" will contain any error messages (again, search for \"Error:\" without the quotes).\n\nEach time the AutomationTool runs, it will clean out (delete) any previous .txt files from the AutomationTool folder and will create new versions of these files as the packaging process progresses. There will always be a \"Log.txt\" file (from the AutomationTool), but the other files won't exist unless that part packaging process either ran and failed, or ran and succeeded.\n\nIf you have trouble determining the cause of the error, you can still package the game in the Unreal Editor using the \"Package Project\" item from the \"File\" menu in the editor, or using the \"Project Launcher\" in the editor and this should present the error to you in a more \"user friendly\" way.\n\nSee the How To Create a Patch webpage for documentation on creating patches. The PackageGame.bat file uses \"1.0\" as the first release version of your game (which is referenced in the \"How To Create a Patch\" webpage). After packaging and releasing your game, you should zip up the Releases folder and keep the .zip file somewhere safe. You can't go back later and make a new Releases folder to create a Patch if you forget to do it the first time with your initial release. The data in the Releases folder won't match your initial release to the public and patching won't work properly.\n\nThe main difference between Patches and DLC is that Patches are modifications to the main game content along with (optionally) bug fixes to C++ code. DLC is a game specific Plugin that contains additional content that can be added to the game at a later date after the game has been released. For DLC, you will need to create a new Plugin (usually inside the game's Project folder) and create new content in that Plugin folder.\n\nYou use Project Launcher in the editor to create a profile to cook and package your patch or DLC and you check the \"Generate Patch\" or \"Build DLC\" checkbox in the \"Release / DLC / Patching Settings\" in the \"Cook\" section of your Project Launcher profile. You also set the \"Release version this is based on\" to \"1.0\" to indicate that the cooker should use the metadata from your release build to cook and stage a patch or DLC package.\n\nWhen the cooker cooks for a patch or DLC, it will compare the metadata for each cooked file for the released version of the game (the stuff in the Releases/1.0 folder) with the metadata of the game's current content. If the metadata is different then the cooker knows that this content has been modified (or is new) and will ONLY cook that new or modified content. This cooked data is then packaged as a new Patch or DLC package that can be downloaded separately from the game's original packaged build. Each time you make a patch, a new patch package is created and these are \"cumulative\" meaning that you ONLY need the latest patch package to get all previous patch content changes. The end user doesn't need to download every patch, they only need to download the latest patch to get everything (assuming that they have already downloaded the base released game). Patches are typically much, much smaller than the original game package which saves the end user from having to download the entire game again to get updated content.\n\nSo, now that you have batch files that compile your code or package your game, how do you get these to run automatically? To run the batch file(s) we will create a Windows Task that is scheduled to run at a specific time. This will allow you to run an automated build during the night and have everything updated by the next morning.\n\nTo create a task in Windows, we will use the Task Scheduler application. Here's the steps needed to set up an automated task:\n• Click the Windows 'Start' button, search for \"Task Scheduler\" and click on it.\n• Select the \"Task Scheduler Library\" folder, then right click on it and select \"New Folder\" and name the new folder \"UnrealEngine\".\n• Select the \"UnrealEngine\" folder in Task Scheduler, then right click on it and select \"Create Basic Task...\".\n• Give the new task a name like \"Nightly Build\" or \"Nightly Package\" and give it a description so that you know what this task is doing.\n• Select \"Daily\" as the Trigger type and click the 'Next' button.\n• Select the time when you want the task to run (like 4:00 am or something) and click the 'Next' button.\n• Select \"Start a program\" for the Action and click the 'Next' button.\n• Click the \"Browse...\" button for 'Program/script' and browse to the batch file that you want to run (for example 'CleanAndBuild.bat' or 'PackageGame.bat') in the Unreal Engine \"root\" folder, select the batch file and click the 'Open' button.\n• Where it says \"Start in (optional)\", copy/paste the path of the Unreal Engine \"root\" folder from the 'Program/script' line. Make sure to remove the batch file name at the end and remove any double quotes from the path name. You should have something like when using an installed build from the Epic Games Launcher.\n• Check the \"Open the Properties dialog for this task when I click Finish\" checkbox.\n• Then click the 'Finish' button and a new dialog box will pop up.\n• In the \"Security options\" section, select the \"Run whether user is logged in or not\" radio button and click the 'OK' button.\n• Enter the password for your Windows user account (so that Windows can log into your account if you are signed out when the task runs) and click the 'OK' button.\n\nYou should now see the task in the \"UnrealEngine\" folder of Task Manager with the information about when it runs, etc. Look at the \"Next Run Time\" column to verify that the time you expect it to run is correct. In the \"Last Run Result\" column, it should say \"The task has not yet run\".\n\nThe task should run at it's scheduled time and you should see files in your Unreal project were updated by the batch file. If the task fails to run, open Task Scheduler, expand the \"UnrealEngine\" folder, select the task you created and look at the \"Last Run Result\" column to see if it indicates why the task did not run. Check to make sure that you have the proper path in the \"Start in (optional)\" setting of the task (you can edit the task to change this if needed).\n\nYou can create your own AutomationTool commands to run custom tasks. AutomationTool is written in C# so you will need to be familiar with the C# programming language to create custom automation commands.\n\nFirst you need to add an Automation Project to your Game Project (this is similar to an Unreal game project but for the AutomationTool instead). See this link for details on adding your own Automation Project:\n\nAfter creating the Automation Project, you can add custom commands to your Automation Project. See the following link for details on how to do that:\n\nTo run the AutomationTool code in the Visual Studio debugger, you need to set the AutomationTool as the startup project. To do this, expand the \"Programs\" folder in the Visual Studio Solution Explorer and right click on 'AutomationTool' and select \"Set as Startup Project\". This will launch the AutomationTool application when you start the debugger. You will also need to set commandline arguments for AutomationTool when running it. Right click on 'AutomationTool' again and select \"Properties\" then in the Properties dialog, click on 'Debug' and set \"Command line arguments:\" to the same command line arguments that you would use when running the RunUAT.bat batch file.\n\nAll of the AutomationTool code can be found in the \"Programs/Automation\" folder of the Solution Explorer. The 'AutomationScripts.Automation' C# project contains most of the AutomationTool common code including things like \"BuildCookRun\". You can set a breakpoint at the 'Execute' function of Automation.cs and that should execute whatever AutomationTool command was given (when it calls \"Command.Execute();\"). So if you are adding a new command and AutomationTool isn't finding that command for some reason, this is a good place to start single stepping through code."
    },
    {
        "link": "https://forums.unrealengine.com/t/packaging-from-command-line/242591",
        "document": "Does anyone have a successfully working command line build that works with 4.26?\n\nI grabbed the command line info out of the logs from packaging and tried to use them but I get the error\n\nMy command looks like this:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/visualstudio/gamedev/unreal/get-started/vs-tools-unreal-install",
        "document": "This article helps you install Visual Studio Tools for Unreal Engine (UE). These tools allow you to do the following from within Visual Studio:\n\n*As of Visual Studio 2022 version 17.7, you no longer need the Unreal Engine Visual Studio Integration Tool plugin to view UE Blueprints in Visual Studio. However, you do need the plugin to use the Unreal Engine test adapter in Visual Studio.\n\nYou should have the following installed before you install Visual Studio Tools for Unreal Engine:\n• Visual Studio version 17.7 or later. To install, see Visual Studio downloads\n• Unreal Engine version 4.27 or 5.0 or later. To install, see Download instructions\n\nThis article covers installing two tools that connect Visual Studio and Unreal Engine:\n• Visual Studio Tools for Unreal Engine are installed into Visual Studio with the Visual Studio installer. It lets you add UE classes, view UE logging, and more--all from within Visual Studio.\n• Unreal Engine Visual Studio Integration Tool plugin is installed into Unreal Engine via the Unreal Engine Marketplace (now called FAB) or from source. It supports the Unreal Engine test adapter in Visual Studio, which lets you discover, run, manage, and debug your Unreal Engine tests from within Visual Studio. As of Visual Studio 2022 17.10, you no longer need the plugin to view UE Blueprints in Visual Studio. But you do need it to use the Unreal Engine test adapter in Visual Studio.\n• None Look for the installer under the Apps results and double-click it.\n• None When the installer appears, select the version of Visual Studio you're using and then select Modify.\n• None Select the Workloads tab, then select the Game development with C++ workload.\n• None In the Installations details pane, ensure that under Game development with C++ > Optional that Visual Studio Tools for Unreal Engine is selected. If you work with High-Level Shader Language (HLSL) files, ensure that HLSL Tools is also selected.\n• None Select the Individual components tab at the top of the dialog.\n• None Under Installation details on the right, expand Game development with C++.\n• None Ensure that under Optional that Windows 10 SDK 10.0.18362.0, or higher, is selected.\n\nThe UnrealVS extension provides convenience features in Visual Studio such as making it easier to build UE projects, switching between startup projects, set command-line arguments, batch build projects, and so on. The UnrealVS extension isn't required to use Visual Studio Tools for Unreal Engine. For more information, see UnrealVS Extension.\n\nYou can install the Unreal Engine Visual Studio Integration Tool plugin via the Unreal Engine Marketplace (now called FAB) website. Search for \"Visual Studio Integration Tool\". The website provides instructions for installing the plugin.\n\nIf you build Unreal Engine from source, or if your project isn't compatible with Unreal Engine Marketplace plugins, install the plugin manually by cloning and installing the plugin from the GitHub vc-ue-extensions repo. See the README in the repo for installation instructions. If you have difficulty with the UE plugin, see the Troubleshooting guide.\n\nFor more information about customizations you can make to the Visual Studio IDE to work well with Unreal Engine, see the Recommended Settings section at Setting Up Visual Studio for Unreal Engine.\n\nWe recommend that you keep Visual Studio updated for the latest bug fixes, features, and Unreal Engine support. Updating Visual Studio doesn't require an update of Unreal Engine.\n• None From the Visual Studio main menu, select Help > Check for Updates.\n• None If an update is available, the Visual Studio Installer shows a new version. Select Update.\n\nTry out some of the features of the Visual Studio Tools for Unreal Engine:\n\nQuickstart: Use Visual Studio Tools for Unreal Engine\n\n Add Unreal Engine classes, modules, and plugins in Visual Studio\n\n View Unreal Engine Blueprints in Visual Studio\n\n View Unreal Engine logging in Visual Studio\n\n View Unreal Engine macros in Visual Studio"
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/setting-up-visual-studio-development-environment-for-cplusplus-projects-in-unreal-engine",
        "document": "Unreal Engine (UE) is designed to integrate smoothly with Visual Studio (VS), providing the means to quickly make code changes in your projects and immediately see results upon compilation. Setting up VS to work with UE can help improve developers' efficiency and overall user experience.\n\nThis document covers the basics for setting up your Unreal Engine-to-Visual Studio workflow.\n\nThe following table lists which versions of VS are integrated with the binary version of UE.\n\nWhen installing UE from the Epic Launcher or if you clone it from GitHub, the UE prerequisite installer runs automatically. However, if you install or sync UE from Perforce, you must run the prerequisite installer before running any UE tools you have built locally. This installer is located at in the code base.\n\nIf you are installing VS for the first time, ensure you have the following options enabled.\n\nUnreal Engine development with VS requires installing the following optional Workloads:\n\nTo add C++ tools to your VS installation, select Game development with C++ under Workloads, as well as these additional options.\n\nThe following settings are recommended for developers using VS with UE.\n• Launch VS. If you open VS for the first time Get Started window appears. Click Continue without code.\n• Right-click the toolbar and select Customize at the bottom of the menu that appears.\n• Click the Commands tab and select the Toolbar radio button.\n• In the dropdown next to the Toolbar, choose Standard.\n• In the Preview list, select the Solution Configurations control (you may need to scroll down), then click Modify Selection.\n• Set the Width to 200, then click OK.\n• Click Close on the Customization . Your toolbar should update immediately.\n• Locate the far right button on the Standard toolbar (if you hover the mouse over it, it is labeled Standard Toolbar Options).\n• Click the dropdown button, choose Add or Remove Buttons, then click on Solution Platforms to add the menu to the toolbar (this may be enabled by default).\n\nTypically, the Error List window pops up automatically when you have an error in your code. However, when working with UE, the Error List window can display false error information. It's best to disable the Error List window and use the Output window to see real code errors when working with UE. The following steps show how to turn off the Error List window.\n• Close the Error List window if it is open.\n• From the Tools menu, open the Options dialog.\n• Select Projects and Solutions and disable Always show Error List if build finishes with error."
    },
    {
        "link": "https://forums.unrealengine.com/t/vs2019-support-in-unreal-5-3/1291284",
        "document": "Hi, I’m trying to understand whether Unreal 5.3 is intended to support Visual Studio 2019. From the documentation at Setting Up Visual Studio Development Environment for C++ Projects in Unreal Engine | Unreal Engine 5.3 Documentation, it lists VS 2019 16.11.5 or later, however the release notes at Unreal Engine 5.3 Release Notes | Unreal Engine 5.3 Documentation state VS2022 17.4 or newer. If I only have VC2019 installed (16.11.29), set up as described in the link above, on creating a new empty C++ project, I get the following error. Generating VisualStudio project files:\n\n Discovering modules, targets and source code for project…\n\n Visual Studio 2019 does not support .NET 6.0 C# projects, these projects will not be added to the generated solution.\n\n Please generate the Visual Studio 2022 solution if .NET 6.0 C# project support is required.\n\n Microsoft platform targets must be compiled with Visual Studio 2022 17.4 (MSVC 14.34.x) or later for the installed engine. Please update Visual Studio 2022 and ensure no configuration is forcing WindowsTargetRules.Compiler to VisualStudio2019. The current compiler version was detected as: 14.29.30151` I’ve tried this in both the preview and the release versions with the same result. If I install VS2022, the project will be generated and build ok. Is this likely to be an error with my setup, or with the documentation?\n\nOk, so after bit of drilling down, and huge help from ChatGPT, here is the problem and solution (or rather workaround). There is a file that defines the build toolchain version (14.29.xxx or 14.37.xxx).\n\n Deleting file is not working, it fails again.\n\n However is you put in the file available version of toolchains on your computer, it works.\n\n In directory:\n\n C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC You will see the list of available toolchains, in my case it is:\n\n Taking the bigger one: 14.37.32822 and putting this number into\n\n BuildConfiguration.xml in C:\\Users\\Admin\\AppData\\Roaming\\Unreal Engine\\UnrealBuildTool With the change, file looks like: Everything started working as it should.\n\n That said, I am still not sure why UBT do not use latest MSVC toolchain from the start.\n\nHi, thanks, I’ve just tried that again. I had tried setting the explicit version of VC (2019) installed in the BuildConfiguration.xml file previously, however the problem still persists for me. The issue I have is that I currently can’t build against VS2022 on my build farm, as it currently only supports VS2019. I can build against 2022 locally, but am trying to determine if it’s possible to use VS2019 at all with this UE5.3 release as (some of) the documentation suggests it should be. This issue was present in the previous 5.2 preview, but was resolved in the final release, but that does not seem to be the case this time.\n\nI was getting the the same errors as you described above.\n\n I have Visual Studio 2019 installed, as well as Visual Studio 2022.\n\n Using UE 5.2, I have rebuilt the makefiles and recompiled my project using the newly installed Visual Studio 2022.\n\n I have also made the above changers in BuildCOnfiguration.xml, which also matches the version I have installed - but when I go to convert the project to 5.3, it seems to keep trying to use Visual Studio 2019. I have already regenerated the UE5.2 version of the project using VS 2022.\n\n What causes UE 5.3 to keep trying to use use Visual Studio 2019 to build / convert the\n\n project? I get the following errors: Project files could not be generated. Log output: Some Platforms were skipped due to invalid SDK setup: IOS, Android, Linux, LinuxArm64.\n\n See the log file for detailed information Generating VisualStudio2019 project files:\n\n Discovering modules, targets and source code for project…\n\n Visual Studio 2019 does not support .NET 6.0 C# projects, these projects will not be added to the generated solution.\n\n Please generate the Visual Studio 2022 solution if .NET 6.0 C# project support is required.\n\n Available x64 toolchains (2):\n• C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\n\n (Family=14.29.30133, FamilyRank=3, Version=14.29.30147, Is64Bit=True, ReleaseChannel=Latest, Architecture=x64)\n\n Unable to find valid 14.37.32822 C++ toolchain for VisualStudio2019 x64\n\nThe path name is how UE 5.3 copies and renames the project when I open the 5.2 version of it. - it just tacks a space and 5.3 onto the end of it, so I don’t think that’s the problem or UE wouldn’t rename converted projects that way. I have already upgraded to VS 2022, and have the 14.37.3282 build chain installed.\n\n I also had recompiled the project under UE5.2 using VS2022, and can open the project into visual studio from the unreal editor. I now also have 14.29.30133 installed too, but it seems to persist in using VS2019.\n\n I have now also uninstalled VS2019, (which will be a headache for my other projects) so the only version of Visual Stuido I have installed is VS2022, yet it is still looking for VS2019 when doing the conversion for some reason: Project files could not be generated. Log output: Some Platforms were skipped due to invalid SDK setup: IOS, Android, Linux, LinuxArm64.\n\n See the log file for detailed information Generating VisualStudio2019 project files:\n\n Discovering modules, targets and source code for project…\n\n Visual Studio C++ 2019 installation not found - ignoring preferred project file format.\n\n No available x64 toolchains found\n\n Unable to find valid 14.37.32822 C++ toolchain for VisualStudio2019 x64 with the full log file containing the following: Log started at 09/26/2023 13:38:45 (2023-09-26T09:38:45Z)\n\n No config file at C:\\Users\\cromp\\Documents\\Unreal Engine\\UnrealBuildTool\\BuildConfiguration.xml\n\n Configuration will be read from:\n\n C:\\Users\\cromp\\AppData\\Roaming\\Unreal Engine\\UnrealBuildTool\\BuildConfiguration.xml\n\n Setting temp directory to ‘C:\\Users\\cromp\\AppData\\Local\\Temp\\UnrealBuildTool\\556086c9’\n\n Registering build platform: UnrealBuildTool.AndroidPlatformFactory\n\n Registering build platform: Android - buildable: False\n\n Registering build platform: UnrealBuildTool.IOSPlatformFactory\n\n Registering build platform: IOS - buildable: False\n\n Registering build platform: UnrealBuildTool.LinuxPlatformFactory\n\n Registering build platform: Linux - buildable: False\n\n Registering build platform: LinuxArm64 - buildable: False\n\n Registering build platform: UnrealBuildTool.MacPlatformFactory\n\n Registering build platform: UnrealBuildTool.TVOSPlatformFactory\n\n Registering build platform: UnrealBuildTool.WindowsPlatformFactory\n\n Found Windows 10 SDK root at C:\\Program Files (x86)\\Windows Kits\\10 (1)\n\n Found Windows 10 SDK root at C:\\Program Files (x86)\\Windows Kits\\10 (2)\n\n Found Windows 10 SDK version 10.0.17763.0 at C:\\Program Files (x86)\\Windows Kits\\10\n\n Found Universal CRT version 10.0.17763.0 at C:\\Program Files (x86)\\Windows Kits\\10\n\n Found Windows 10 SDK version 10.0.20348.0 at C:\\Program Files (x86)\\Windows Kits\\10\n\n Found Universal CRT version 10.0.20348.0 at C:\\Program Files (x86)\\Windows Kits\\10\n\n Found Windows 10 SDK version 10.0.22000.0 at C:\\Program Files (x86)\\Windows Kits\\10\n\n Found Universal CRT version 10.0.22000.0 at C:\\Program Files (x86)\\Windows Kits\\10\n\n Win64 Installed SDK(s): MinVersion_Sdk=10.0.00000.0, MaxVersion_Sdk=10.9.99999.0, CurrentVersion_Sdk=10.0.22000.0, Version_AutoSdk=10.0.18362.0, CurrentVersion_AutoSdk=\n\n Registering build platform: Win64 - buildable: True\n\n Log file: C:\\Users\\cromp\\AppData\\Local\\UnrealBuildTool\\Log_GPF.txt\n\n Deleting old log file: C:\\Users\\cromp\\AppData\\Local\\UnrealBuildTool\\Log_GPF-backup-2022.04.01-15.15.26.txt Resolved project argument D:/projects/UnrealProjects/MyMechGame5.2 5.3/MyMechGame.uproject to D:\\projects\\UnrealProjects\\MyMechGame5.2 5.3\\MyMechGame.uproject\n\n Registering project generator UnrealBuildTool.AndroidProjectGenerator for Android\n\n Registering project generator UnrealBuildTool.IOSProjectGenerator for IOS\n\n Registering project generator UnrealBuildTool.LinuxProjectGenerator for Linux\n\n Registering project generator UnrealBuildTool.LinuxProjectGenerator for LinuxArm64\n\n Registering project generator UnrealBuildTool.MacProjectGenerator for Mac\n\n Skipping project file generator registration for Mac due to no valid BuildPlatform.\n\n Registering project generator UnrealBuildTool.TVOSProjectGenerator for TVOS\n\n Skipping project file generator registration for TVOS due to no valid BuildPlatform.\n\n Registering project generator UnrealBuildTool.WindowsProjectGenerator for Win64 Some Platforms were skipped due to invalid SDK setup: IOS, Android, Linux, LinuxArm64.\n\n See the log file for detailed information Generating VisualStudio2019 project files:\n\n Discovering modules, targets and source code for project…\n\n Found Visual Studio installation: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community (Product=Microsoft.VisualStudio.Product.Community, Version=17.7.34031.279)\n\n Visual Studio C++ 2019 installation not found - ignoring preferred project file format.\n\n Found Visual Studio toolchain: C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.37.32822 (Family=14.37.32822, FamilyRank=4, Version=14.37.32824, Is64Bit=True, ReleaseChannel=Latest, Architecture=x64, Error=False, Redist=C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Redist\\MSVC\\14.36.32532)\n\n Detected supported platforms: Win64, IOS, Android, Linux, LinuxArm64\n\n Ignoring unknown platform ‘HoloLens’ (referenced via a project’s plugin descriptor for ‘OpenXR’)\n\n Skipping D:\\Program Files\\UE_5.3\\Engine\\Intermediate\\Build\\BuildRules\\UE5Rules.dll: File is installed\n\n Skipping D:\\Program Files\\UE_5.3\\Engine\\Intermediate\\Build\\BuildRules\\UE5ProgramRules.dll: File is installed\n\n No available x64 toolchains found\n\n Unable to find valid 14.37.32822 C++ toolchain for VisualStudio2019 x64\n\n BuildException: Unable to find valid 14.37.32822 C++ toolchain for VisualStudio2019 x64\n\n at UnrealBuildTool.MicrosoftPlatformSDK.TryGetToolChainDir(WindowsCompiler Compiler, String CompilerVersion, UnrealArch Architecture, ILogger Logger, VersionNumber& OutToolChainVersion, DirectoryReference& OutToolChainDir, DirectoryReference& OutRedistDir) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Platform\\Windows\\MicrosoftPlatformSDK.cs:line 554\n\n at UnrealBuildTool.WindowsPlatform.TryGetToolChainDir(WindowsCompiler Compiler, String CompilerVersion, UnrealArch Architecture, ILogger Logger, VersionNumber& OutToolChainVersion, DirectoryReference& OutToolChainDir, DirectoryReference& OutRedistDir) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Platform\\Windows\\UEBuildWindows.cs:line 1204\n\n at UnrealBuildTool.VCEnvironmentParameters…ctor(WindowsCompiler Compiler, WindowsCompiler ToolChain, UnrealTargetPlatform Platform, UnrealArch Architecture, String CompilerVersion, String ToolchainVersion, String WindowsSdkVersion, String SuppliedSdkDirectoryForVersion, Boolean bUseCPPWinRT, Boolean bAllowClangLinker, ILogger Logger) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Platform\\Windows\\VCEnvironment.cs:line 457\n\n at UnrealBuildTool.VCEnvironment.Create(WindowsCompiler Compiler, WindowsCompiler ToolChain, UnrealTargetPlatform Platform, UnrealArch Architecture, String CompilerVersion, String ToolchainVersion, String WindowsSdkVersion, String SuppliedSdkDirectoryForVersion, Boolean bUseCPPWinRT, Boolean bAllowClangLinker, ILogger Logger) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Platform\\Windows\\VCEnvironment.cs:line 378\n\n at UnrealBuildTool.WindowsPlatform.CreateVCEnvironment(TargetRules Target) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Platform\\Windows\\UEBuildWindows.cs:line 895\n\n at UnrealBuildTool.WindowsPlatform.ValidateTarget(TargetRules Target) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Platform\\Windows\\UEBuildWindows.cs:line 1006\n\n at UnrealBuildTool.RulesAssembly.CreateTargetRulesInstance(String TypeName, TargetInfo TargetInfo, ILogger Logger, Boolean IsTestTarget, Boolean bSkipValidation) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\System\\RulesAssembly.cs:line 698\n\n at UnrealBuildTool.RulesAssembly.CreateTargetRules(String TargetName, UnrealTargetPlatform Platform, UnrealTargetConfiguration Configuration, UnrealArchitectures Architectures, FileReference ProjectFile, CommandLineArguments Arguments, ILogger Logger, Boolean IsTestTarget, Boolean bSkipValidation, UnrealIntermediateEnvironment IntermediateEnvironment) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\System\\RulesAssembly.cs:line 776\n\n at UnrealBuildTool.ProjectFileGenerator.AddProjectsForAllTargets(PlatformProjectGeneratorCollection PlatformProjectGenerators, List 1 AllTargetFiles, String Arguments, List 1 GameProjects, Dictionary 2 ProgramProjects, Dictionary`2 RulesAssemblies, ILogger Logger) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\ProjectFiles\\ProjectFileGenerator.cs:line 2719\n\n at UnrealBuildTool.ProjectFileGenerator.GenerateProjectFiles(PlatformProjectGeneratorCollection PlatformProjectGenerators, String Arguments, Boolean bCacheDataForEditor, ILogger Logger) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\ProjectFiles\\ProjectFileGenerator.cs:line 1023\n\n at UnrealBuildTool.GenerateProjectFilesMode.ExecuteAsync(CommandLineArguments Arguments, ILogger Logger) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\Modes\\GenerateProjectFilesMode.cs:line 65\n\n at UnrealBuildTool.UnrealBuildTool.Main(String ArgumentsArray) in D:\\build++UE5\\Sync\\Engine\\Saved\\CsTools\\Engine\\Source\\Programs\\UnrealBuildTool\\UnrealBuildTool.cs:line 659\n\n WriteFileIfChanged() wrote 0 changed files of 2 requested writes.\n\n Timeline: Note that C:\\Users\\cromp\\AppData\\Roaming\\Unreal Engine\\UnrealBuildTool\\BuildConfiguration.xml contains the following: <?xml version=\"1.0\" encoding=\"utf-8\" ?> 14.37.32822\n\nHI SNINKOV. Thanks for digging into this. Looking at appdata\\roaming\\Unrel Engine] UnrealBuildTool, I see the xml file. However, the only version folder in my MSVC folder it 14.29.30133. I updated my VS 2019 tonight to the latest version, but it just has this older version in there. I looked at the modify option in VS installer and saw an ocean of options under compilers, but nothing with the version you show here. How did you get that newer version?"
    },
    {
        "link": "https://reddit.com/r/unrealengine/comments/1g4rwrz/packaging_requirements_for_426",
        "document": "Hi, I have fixed a bug in an old game project and tried to package to update it on steam.\n\nBut always when I press the \"Package\" button, the engine opens this link and nothing happens: https://dev.epicgames.com/documentation/en-us/unreal-engine/DEU/Tutorial/Installation/InstallingVisualStudioTutorial.InstallingVisualStudioTutorial?application_version=5.4\n\nWould be nice if someone could say me what the requirements were to package projects from 4.26 ^^\n\nThe old documentation isn´t available anymore...\n\nCurrent visual studio = 2022"
    },
    {
        "link": "https://forums.unrealengine.com/t/ue4-25-package-plug-in-with-visual-studio-2019/151082",
        "document": "Hi,\n\n I’m developping a plug-in with Visual Studio 2019. I changed the BuildConfiguration.xml file as follow:\n\nI also switched Platform Compiler version to Visual 2019 in the UI settings.\n\nIt’s working fine, the project is generated for VS2019, no problem testing my plug-in.\n\n But when I package it, I still have the error message:\n\n ERROR: Visual Studio 2017 must be installed in order to build this target.\n\nI can see there is a -2017 in the UnrealBuildTool.exe command line.\n\n Now I don’t how to get rid of it, and I don’t see why it couldn’t be possible as it’s obviously working fine with VS2019."
    }
]