[
    {
        "link": "https://support.microsoft.com/en-us/office/if-function-nested-formulas-and-avoiding-pitfalls-0b22ff44-f149-44ba-aeb5-4ef99da241c8",
        "document": "The IF function allows you to make a logical comparison between a value and what you expect by testing for a condition and returning a result if True or False.\n• =IF(Something is True, then do something, otherwise do something else) So an IF statement can have two results. The first result is if your comparison is True, the second if your comparison is False. IF statements are incredibly robust, and form the basis of many spreadsheet models, but they are also the root cause of many spreadsheet issues. Ideally, an IF statement should apply to minimal conditions, such as Male/Female, Yes/No/Maybe, to name a few, but sometimes you might need to evaluate more complex scenarios that require nesting* more than 3 IF functions together. * \"Nesting\" refers to the practice of joining multiple functions together in one formula.\n\nWhile Excel will allow you to nest up to 64 different IF functions, it's not at all advisable to do so. Why?\n• Multiple IF statements require a great deal of thought to build correctly and make sure that their logic can calculate correctly through each condition all the way to the end. If you don't nest your formula 100% accurately, then it might work 75% of the time, but return unexpected results 25% of the time. Unfortunately, the odds of you catching the 25% are slim.\n• Multiple IF statements can become incredibly difficult to maintain, especially when you come back some time later and try to figure out what you, or worse someone else, was trying to do. If you find yourself with an IF statement that just seems to keep growing with no end in sight, it's time to put down the mouse and rethink your strategy. Let's look at how to properly create a complex nested IF statement using multiple IFs, and when to recognize that it's time to use another tool in your Excel arsenal.\n\nFollowing is an example of a relatively standard nested IF statement to convert student test scores to their letter grade equivalent.\n• This complex nested IF statement follows a straightforward logic:\n• If the Test Score (in cell D2) is greater than 89, then the student gets an A\n• If the Test Score is greater than 79, then the student gets a B\n• If the Test Score is greater than 69, then the student gets a C\n• If the Test Score is greater than 59, then the student gets a D\n• Otherwise the student gets an F This particular example is relatively safe because it's not likely that the correlation between test scores and letter grades will change, so it won't require much maintenance. But here's a thought – what if you need to segment the grades between A+, A and A- (and so on)? Now your four condition IF statement needs to be rewritten to have 12 conditions! Here's what your formula would look like now: It's still functionally accurate and will work as expected, but it takes a long time to write and longer to test to make sure it does what you want. Another glaring issue is that you've had to enter the scores and equivalent letter grades by hand. What are the odds that you'll accidentally have a typo? Now imagine trying to do this 64 times with more complex conditions! Sure, it's possible, but do you really want to subject yourself to this kind of effort and probable errors that will be really hard to spot? Tip: Every function in Excel requires an opening and closing parenthesis (). Excel will try to help you figure out what goes where by coloring different parts of your formula when you're editing it. For instance, if you were to edit the above formula, as you move the cursor past each of the ending parentheses \")\", its corresponding opening parenthesis will turn the same color. This can be especially useful in complex nested formulas when you're trying to figure out if you have enough matching parentheses.\n\nFollowing is a very common example of calculating Sales Commission based on levels of Revenue achievement. This formula says IF(C9 is Greater Than 15,000 then return 20%, IF(C9 is Greater Than 12,500 then return 17.5%, and so on... While it's remarkably similar to the earlier Grades example, this formula is a great example of how difficult it can be to maintain large IF statements – what would you need to do if your organization decided to add new compensation levels and possibly even change the existing dollar or percentage values? You'd have a lot of work on your hands! Tip: You can insert line breaks in the formula bar to make long formulas easier to read. Just press ALT+ENTER before the text you want to wrap to a new line. Here is an example of the commission scenario with the logic out of order: Can you see what's wrong? Compare the order of the Revenue comparisons to the previous example. Which way is this one going? That's right, it's going from bottom up ($5,000 to $15,000), not the other way around. But why should that be such a big deal? It's a big deal because the formula can't pass the first evaluation for any value over $5,000. Let's say you've got $12,500 in revenue – the IF statement will return 10% because it is greater than $5,000, and it will stop there. This can be incredibly problematic because in a lot of situations these types of errors go unnoticed until they've had a negative impact. So knowing that there are some serious pitfalls with complex nested IF statements, what can you do? In most cases, you can use the VLOOKUP function instead of building a complex formula with the IF function. Using VLOOKUP, you first need to create a reference table: This formula says to look for the value in C2 in the range C5:C17. If the value is found, then return the corresponding value from the same row in column D. Similarly, this formula looks for the value in cell B9 in the range B2:B22. If the value is found, then return the corresponding value from the same row in column C. Note: Both of these VLOOKUPs use the TRUE argument at the end of the formulas, meaning we want them to look for an approxiate match. In other words, it will match the exact values in the lookup table, as well as any values that fall between them. In this case the lookup tables need to be sorted in Ascending order, from smallest to largest. VLOOKUP is covered in much more detail here, but this is sure a lot simpler than a 12-level, complex nested IF statement! There are other less obvious benefits as well:\n• VLOOKUP reference tables are right out in the open and easy to see.\n• Table values can be easily updated and you never have to touch the formula if your conditions change.\n• If you don't want people to see or interfere with your reference table, just put it on another worksheet."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-nested-if-statement",
        "document": "The tutorial explains how to use the nested IF function in Excel to check multiple conditions. You will also learn a few other functions that could be good alternatives to using a nested formula in Excel.\n\nHow do you usually implement a decision-making logic in your Excel worksheets? In most cases, you'd use an IF formula to test your condition and return one value if the condition is met, another value if the condition is not met. To evaluate more than one condition and return different values depending on the results, you nest multiple IFs inside each other.\n\nThough very popular, the nested IF statement is not the only way to check multiple conditions in Excel. In this tutorial, you will find a handful of alternatives that are definitely worth exploring.\n\nHere's the classic Excel nested IF formula in a generic form: You can see that each subsequent IF function is embedded into the value_if_false argument of the previous function. Each IF function is enclosed in its own set of parentheses, but all the closing parentheses are at the end of the formula. Our generic nested IF formula evaluates 3 conditions, and returns 4 different results (result 4 is returned if none of the conditions is TRUE). Translated into a human language, this nested IF statement tells Excel to do the following: Test condition1, if TRUE - return result1, if FALSE -\n\ntest condition2, if TRUE - return result2, if FALSE -\n\n test condition3, if TRUE - return result3, if FALSE -\n\nreturn result4 As an example, let's find out commissions for a number of sellers based on the amount of sales they've made: In math, changing the order of addends does not change the sum. In Excel, changing the order of IF functions changes the result. Why? Because a nested IF formula returns a value corresponding to the first TRUE condition. Therefore, in your nested IF statements, it's very important to arrange the conditions in the right direction - high to low or low to high, depending on your formula's logic. In our case, we check the \"highest\" condition first, then the \"second highest\", and so on: If we placed the conditions in the reverse order, from the bottom up, the results would be all wrong because our formula would stop after the first logical test (B2>=1) for any value greater than 1. Let's say, we have $100 in sales - it is greater than 1, so the formula would not check other conditions and return 3% as the result. If you'd rather arrange the conditions from low to high, then use the \"less than\" operator and evaluate the \"lowest\" condition first, then the \"second lowest\", and so on: As you see, it takes quite a lot of thought to build the logic of a nested IF statement correctly all the way to the end. And although Microsoft Excel allows nesting up to 64 IF functions in one formula, it is not something you'd really want to do in your worksheets. So, if you (or someone else) are gazing at your Excel nested IF formula trying to figure out what it actually does, it's time to reconsider your strategy and probably choose another tool in your arsenal. For more information, please see Excel nested IF statement.\n\n\n\nIn case you need to evaluate a few sets of different conditions, you can express those conditions using OR as well as AND function, nest the functions inside IF statements, and then nest the IF statements into each other. Nested IF in Excel with OR statements By using the OR function you can check two or more different conditions in the logical test of each IF function and return TRUE if any (at least one) of the OR arguments evaluates to TRUE. To see how it actually works, please consider the following example. Supposing, you have two columns of sales, say January sales in column B and February sales in column C. You wish to check the numbers in both columns and calculate the commission based on a higher number. In other words, you build a formula with the following logic: if either Jan or Feb sales are greater than $150, the seller gets 10% commission, if Jan or Feb sales are greater than or equal to $101, the seller gets 7% commission, and so on. To have it done, write a few OF statements like OR(B2>150, C2>150) and nest them into the logical tests of the IF functions discussed above. As the result, you get this formula: And have the commission assigned based on the higher sales amount:\n\n For more formula examples, please see Excel IF OR statement.\n\n Nested IF in Excel with AND statements If your logical tests include multiple conditions, and all of those conditions should evaluate to TRUE, express them by using the AND function. For example, to assign the commissions based on a lower number of sales, take the above formula and replace OR with AND statements. To put it differently, you tell Excel to return 10% only if Jan and Feb sales are greater than $150, 7% if Jan and Feb sales are greater than or equal to $101, and so on. As the result, our nested IF formula calculates the commission based on the lower number in columns B and C. If either column is empty, there is no commission at all because none of the AND conditions is met:\n\n If you'd like to return 0% instead of blank cells, replace an empty string (''\") in the last argument with 0%: More information can be found here: Excel IF with multiple AND/OR conditions.\n\n\n\nVLOOKUP instead of nested IF in Excel When you are dealing with \"scales\", i.e. continuous ranges of numerical values that together cover the entire range, in most cases you can use the VLOOKUP function instead of nested IFs. For starters, make a reference table like shown in the screenshot below. And then, build a Vlookup formula with approximate match, i.e. with the range_lookup argument set to TRUE. Assuming the lookup value is in B2 and the reference table is F2:G5, the formula goes as follows: Please notice that we fix the table_array with absolute references ($F$2:$G$5) for the formula to copy correctly to other cells:\n\n By setting the last argument of your Vlookup formula to TRUE, you tell Excel to search for the closest match - if an exact match is not found, return the next largest value that is smaller than the lookup value. As the result, your formula will match not only the exact values in the lookup table, but also any values that fall in between. For example, the lookup value in B3 is $95. This number does not exist in the lookup table, and Vlookup with exact match would return an #N/A error in this case. But Vlookup with approximate match continues searching until it finds the nearest value that is less than the lookup value (which is $50 in our example) and returns a value from the second column in the same row (which is 5%). But what if the lookup value is less than the smallest number in the lookup table or the lookup cell is empty? In this case, a Vlookup formula will return the #N/A error. If it's not what you actually want, nest VLOOKUP inside IFERROR and supply the value to output when the lookup value is not found. For example: Important note! For a Vlookup formula with approximate match to work correctly, the first column in the lookup table must be sorted in ascending order, from smallest to largest. For more information, please see Exact match VLOOKUP vs. approximate match VLOOKUP.\n\n\n\nIFS statement as alternative to nested IF function In Excel 2016 and later versions, Microsoft introduced a special function to evaluate multiple conditions - the IFS function. An IFS formula can handle up to 127 logical_test/value_if_true pairs, and the first logical test that evaluates to TRUE \"wins\": In accordance with the above syntax, our nested IF formula can be reconstructed in this way: Please pay attention that the IFS function returns the #N/A error if none of the specified conditions is met. To avoid this, you can add one more logical_test/value_if_true to the end of your formula that will return 0 or empty string (\"\") or whatever value you want if none of the previous logical tests is TRUE: As the result, our formula will return an empty string (blank cell) instead of the #N/A error if a corresponding cell in column B is empty or contains text or negative number.\n\n Note. Like nested IF, Excel's IFS function returns a value corresponding to the first condition that evaluates to TRUE, which is why the order of logical tests in an IFS formula matters. For more information, please see Excel IFS function instead of nested IF.\n\n\n\nCHOOSE instead of nested IF formula in Excel Another way to test multiple conditions within a single formula in Excel is using the CHOOSE function, which is designed to return a value from the list based on a position of that value. Applied to our sample dataset, the formula takes the following shape: In the first argument (index_num), you evaluate all the conditions and add up the results. Given that TRUE equates to 1 and FALSE to 0, this way you calculate the position of the value to return. For example, the value in B2 is $150. For this value, the first 3 conditions are TRUE and the last one (B2 > 150) is FALSE. So, index_num equals to 3, meaning the 3rd value is returned, which is 7%.\n\n Tip. If none of the logical tests is TRUE, index_num is equal to 0, and the formula returns the #VALUE! error. An easy fix is wrapping CHOOSE in the IFERROR function like this: For more information, please see Excel CHOOSE function with formula examples.\n\nSWITCH function as a concise form of nested IF in Excel In situations when you are dealing with a fixed set of predefined values, not scales, the SWITCH function can be a compact alternative to complex nested IF statements: The SWITCH function evaluates expression against a list of values and returns the result corresponding to the first found match. In case, you'd like to calculate the commission based on the following grades, rather than sales amounts, you could use this compact version of nested IF formula in Excel: Or, you can make a reference table like shown in the screenshot below and use cell references instead of hardcoded values: Please notice that we lock all references except the first one with the $ sign to prevent them from changing when copying the formula to other cells:\n\n Note. The SWITCH function is only available in Excel 2016 and higher. For more information, please see SWITCH function - the compact form of nested IF statement.\n\n\n\nYou can see that Microsoft Excel provides a handful of good alternatives to nested IF formulas, and hopefully this tutorial has given you some clues on how to leverage them in your worksheets. To have a closer look at the examples discussed in this tutorial, you are welcome to download our sample workbook below. I thank you for reading and hope to see you on our blog next week!"
    },
    {
        "link": "https://support.microsoft.com/en-us/office/video-nested-if-functions-bdb0ebe2-caff-4914-835b-36796040e303",
        "document": "The IF function is one of the most popular functions in Excel, and it allows you to make logical comparisons between a value and what you expect. So an IF statement can have two results. The first result is if your comparison is True, the second if your comparison is False. For example, =IF(C2=”Yes”,1,2) says IF(C2 = Yes, then return a 1, otherwise return a 2).\n\nIn the above example, cell D2 says: IF(C2 = Yes, then return a 1, otherwise return a 2) In this example, the formula in cell D2 says: IF(C2 = 1, then return Yes, otherwise return No)As you see, the IF function can be used to evaluate both text and values. It can also be used to evaluate errors. You are not limited to only checking if one thing is equal to another and returning a single result, you can also use mathematical operators and perform additional calculations depending on your criteria. You can also nest multiple IF functions together in order to perform multiple comparisons. In the above example, the IF function in D2 is saying IF(C2 Is Greater Than B2, then return “Over Budget”, otherwise return “Within Budget”) In the above illustration, instead of returning a text result, we are going to return a mathematical calculation. So the formula in E2 is saying IF(Actual is Greater than Budgeted, then Subtract the Budgeted amount from the Actual amount, otherwise return nothing). In this example, the formula in F7 is saying IF(E7 = “Yes”, then calculate the Total Amount in F5 * 8.25%, otherwise no Sales Tax is due so return 0) Note: If you are going to use text in formulas, you need to wrap the text in quotes (e.g. “Text”). The only exception to that is using TRUE or FALSE, which Excel automatically understands."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/if-function-69aed7c9-4e8a-4755-a9bc-aa8bbff73be2",
        "document": "The IF function is one of the most popular functions in Excel, and it allows you to make logical comparisons between a value and what you expect. So an IF statement can have two results. The first result is if your comparison is True, the second if your comparison is False. For example, =IF(C2=”Yes”,1,2) says IF(C2 = Yes, then return a 1, otherwise return a 2).\n\nIn the above example, cell D2 says: IF(C2 = Yes, then return a 1, otherwise return a 2) In this example, the formula in cell D2 says: IF(C2 = 1, then return Yes, otherwise return No)As you see, the IF function can be used to evaluate both text and values. It can also be used to evaluate errors. You are not limited to only checking if one thing is equal to another and returning a single result, you can also use mathematical operators and perform additional calculations depending on your criteria. You can also nest multiple IF functions together in order to perform multiple comparisons. In the above example, the IF function in D2 is saying IF(C2 Is Greater Than B2, then return “Over Budget”, otherwise return “Within Budget”) In the above illustration, instead of returning a text result, we are going to return a mathematical calculation. So the formula in E2 is saying IF(Actual is Greater than Budgeted, then Subtract the Budgeted amount from the Actual amount, otherwise return nothing). In this example, the formula in F7 is saying IF(E7 = “Yes”, then calculate the Total Amount in F5 * 8.25%, otherwise no Sales Tax is due so return 0) Note: If you are going to use text in formulas, you need to wrap the text in quotes (e.g. “Text”). The only exception to that is using TRUE or FALSE, which Excel automatically understands."
    },
    {
        "link": "https://exceljet.net/formulas/nested-if-function-example",
        "document": "The goal is to assign a grade to each score in column C according to the rules in the table in the range F4:G9. One way to do this in Excel is to use a series of nested IF functions. Generally, nested IFs formulas are used to test more than one condition and return a different result for each condition.\n\nTesting more than one condition\n\nIf you need to test for more than one condition, then take one of several actions, depending on the result of the tests, one option is to nest multiple IF statements together in one formula. You'll often hear this referred to as \"nested IFs\". The idea of nesting comes from embedding or \"nesting\" one IF function inside another. In the workbook shown, we are nesting IF functions to assign grades based on a score. The rules for assigning each grade can be seen in the table below:\n\nTo create a nested IF formula that reflects this logic, start we can start either at the bottom of the scale, or the top. In this example, we start at the bottom. The first condition to test is if the score is below 64:\n\nIf the result is TRUE, we return \"F\". If the result is FALSE, we move into the next IF function. This time, we test to see if the score is less than 73:\n\nIf TRUE, we return \"D\". We don't need to worry about scores less than 64 anymore, because that case is already handled. If the result is FALSE, we move to the next condition, which checks if the score is less than 85:\n\nIf TRUE, we return \"C\". If FALSE, we move to the next condition, which checks if the score is less than 95:\n\nIf TRUE, we return \"B\". At this point, the only condition to check is if the score is between 95 and 100. However, by process of elimination, we know that if the score has not yet passed any tests, it must be between 95 and 100. So, we only need to provide \"A\" in the last IF for the value_if_false argument, and close up the formula with 4 parentheses, one for each IF function. The final formula in D5 is:\n\nYou can see that it's important in this case to move in one direction, either low to high, or high to low. This allows us to return a result whenever a test returns TRUE, because we know that any previous tests already returned FALSE.\n\nBy their nature, nested IF formulas can be hard to read. To make a nested IF easier to understand, you can add line breaks inside the formula to \"line up\" the tests and results line this:\n\nThe line breaks do not affect the formula. The Excel formula engine will ignore them.\n\nAnother way to solve this problem is with the IFS function, which can handle multiple conditions without nesting. The equivalent formula with IFs is:\n\nThe IFS function doesn't have a \"default\" value to return after all tests have run, so we need to use another logical test for the last category of scores, scores above 95. One workaround is to use TRUE as the last test, which you can see in the formula below.\n\nRead more: How to use the IFS function.\n• VLOOKUP can sometimes be used to replace complicated nested ifs.\n• This article has many more examples of nested ifs with alternatives."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/if-function-nested-formulas-and-avoiding-pitfalls-0b22ff44-f149-44ba-aeb5-4ef99da241c8",
        "document": "The IF function allows you to make a logical comparison between a value and what you expect by testing for a condition and returning a result if True or False.\n• =IF(Something is True, then do something, otherwise do something else) So an IF statement can have two results. The first result is if your comparison is True, the second if your comparison is False. IF statements are incredibly robust, and form the basis of many spreadsheet models, but they are also the root cause of many spreadsheet issues. Ideally, an IF statement should apply to minimal conditions, such as Male/Female, Yes/No/Maybe, to name a few, but sometimes you might need to evaluate more complex scenarios that require nesting* more than 3 IF functions together. * \"Nesting\" refers to the practice of joining multiple functions together in one formula.\n\nWhile Excel will allow you to nest up to 64 different IF functions, it's not at all advisable to do so. Why?\n• Multiple IF statements require a great deal of thought to build correctly and make sure that their logic can calculate correctly through each condition all the way to the end. If you don't nest your formula 100% accurately, then it might work 75% of the time, but return unexpected results 25% of the time. Unfortunately, the odds of you catching the 25% are slim.\n• Multiple IF statements can become incredibly difficult to maintain, especially when you come back some time later and try to figure out what you, or worse someone else, was trying to do. If you find yourself with an IF statement that just seems to keep growing with no end in sight, it's time to put down the mouse and rethink your strategy. Let's look at how to properly create a complex nested IF statement using multiple IFs, and when to recognize that it's time to use another tool in your Excel arsenal.\n\nFollowing is an example of a relatively standard nested IF statement to convert student test scores to their letter grade equivalent.\n• This complex nested IF statement follows a straightforward logic:\n• If the Test Score (in cell D2) is greater than 89, then the student gets an A\n• If the Test Score is greater than 79, then the student gets a B\n• If the Test Score is greater than 69, then the student gets a C\n• If the Test Score is greater than 59, then the student gets a D\n• Otherwise the student gets an F This particular example is relatively safe because it's not likely that the correlation between test scores and letter grades will change, so it won't require much maintenance. But here's a thought – what if you need to segment the grades between A+, A and A- (and so on)? Now your four condition IF statement needs to be rewritten to have 12 conditions! Here's what your formula would look like now: It's still functionally accurate and will work as expected, but it takes a long time to write and longer to test to make sure it does what you want. Another glaring issue is that you've had to enter the scores and equivalent letter grades by hand. What are the odds that you'll accidentally have a typo? Now imagine trying to do this 64 times with more complex conditions! Sure, it's possible, but do you really want to subject yourself to this kind of effort and probable errors that will be really hard to spot? Tip: Every function in Excel requires an opening and closing parenthesis (). Excel will try to help you figure out what goes where by coloring different parts of your formula when you're editing it. For instance, if you were to edit the above formula, as you move the cursor past each of the ending parentheses \")\", its corresponding opening parenthesis will turn the same color. This can be especially useful in complex nested formulas when you're trying to figure out if you have enough matching parentheses.\n\nFollowing is a very common example of calculating Sales Commission based on levels of Revenue achievement. This formula says IF(C9 is Greater Than 15,000 then return 20%, IF(C9 is Greater Than 12,500 then return 17.5%, and so on... While it's remarkably similar to the earlier Grades example, this formula is a great example of how difficult it can be to maintain large IF statements – what would you need to do if your organization decided to add new compensation levels and possibly even change the existing dollar or percentage values? You'd have a lot of work on your hands! Tip: You can insert line breaks in the formula bar to make long formulas easier to read. Just press ALT+ENTER before the text you want to wrap to a new line. Here is an example of the commission scenario with the logic out of order: Can you see what's wrong? Compare the order of the Revenue comparisons to the previous example. Which way is this one going? That's right, it's going from bottom up ($5,000 to $15,000), not the other way around. But why should that be such a big deal? It's a big deal because the formula can't pass the first evaluation for any value over $5,000. Let's say you've got $12,500 in revenue – the IF statement will return 10% because it is greater than $5,000, and it will stop there. This can be incredibly problematic because in a lot of situations these types of errors go unnoticed until they've had a negative impact. So knowing that there are some serious pitfalls with complex nested IF statements, what can you do? In most cases, you can use the VLOOKUP function instead of building a complex formula with the IF function. Using VLOOKUP, you first need to create a reference table: This formula says to look for the value in C2 in the range C5:C17. If the value is found, then return the corresponding value from the same row in column D. Similarly, this formula looks for the value in cell B9 in the range B2:B22. If the value is found, then return the corresponding value from the same row in column C. Note: Both of these VLOOKUPs use the TRUE argument at the end of the formulas, meaning we want them to look for an approxiate match. In other words, it will match the exact values in the lookup table, as well as any values that fall between them. In this case the lookup tables need to be sorted in Ascending order, from smallest to largest. VLOOKUP is covered in much more detail here, but this is sure a lot simpler than a 12-level, complex nested IF statement! There are other less obvious benefits as well:\n• VLOOKUP reference tables are right out in the open and easy to see.\n• Table values can be easily updated and you never have to touch the formula if your conditions change.\n• If you don't want people to see or interfere with your reference table, just put it on another worksheet."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-if-function-multiple-conditions",
        "document": "The tutorial shows how to create multiple IF statements in Excel with AND as well as OR logic. Also, you will learn how to use IF together with other Excel functions.\n\nIn the first part of our Excel IF tutorial, we looked at how to construct a simple IF statement with one condition for text, numbers, dates, blanks and non-blanks. For powerful data analysis, however, you may often need to evaluate multiple conditions at a time. The below formula examples will show you the most effective ways to do this.\n\nHow to use IF function with multiple conditions In essence, there are two types of the IF formula with multiple criteria based on the AND / OR logic. Consequently, in the logical test of your IF formula, you should use one of these functions:\n• AND function - returns TRUE if all the conditions are met; FALSE otherwise.\n• OR function - returns TRUE if any single condition is met; FALSE otherwise. To better illustrate the point, let's investigate some real-life formulas examples. Excel IF statement with multiple conditions (AND logic) The generic formula of Excel IF with two or more conditions is this: Translated into a human language, the formula says: If condition 1 is true AND condition 2 is true, return value_if_true; else return value_if_false. Suppose you have a table listing the scores of two tests in columns B and C. To pass the final exam, a student must have both scores greater than 50. For the logical test, you use the following AND statement: AND(B2>50, C2>50) If both conditions are true, the formula will return \"Pass\"; if any condition is false - \"Fail\". Easy, isn't it? The screenshot below proves that our Excel IF /AND formula works right: In a similar manner, you can use the Excel IF function with multiple text conditions. For instance, to output \"Good\" if both B2 and C2 are greater than 50, \"Bad\" otherwise, the formula is: Important note! The AND function checks all the conditions, even if the already tested one(s) evaluated to FALSE. Such behavior is a bit unusual since in most of programming languages, subsequent conditions are not tested if any of the previous tests has returned FALSE. In practice, a seemingly correct IF statement may result in an error because of this specificity. For example, the below formula would return #DIV/0! (\"divide by zero\" error) if cell A2 is equal to 0: The avoid this, you should use a nested IF function: For more information, please see IF AND formula in Excel.\n\n Excel IF function with multiple conditions (OR logic) To do one thing if any condition is met, otherwise do something else, use this combination of the IF and OR functions: The difference from the IF / AND formula discussed above is that Excel returns TRUE if any of the specified conditions is true. So, if in the previous formula, we use OR instead of AND: Then anyone who has more than 50 points in either exam will get \"Pass\" in column D. With such conditions, our students have a better chance to pass the final exam (Yvette being particularly unlucky failing by just 1 point :) Tip. In case you are creating a multiple IF statement with text and testing a value in one cell with the OR logic (i.e. a cell can be \"this\" or \"that\"), then you can build a more compact formula using an array constant. For example, to mark a sale as \"closed\" if cell B2 is either \"delivered\" or \"paid\", the formula is: More formula examples can be found in Excel IF OR function.\n\n IF with multiple AND & OR statements If your task requires evaluating several sets of multiple conditions, you will have to utilize both AND & OR functions at a time. In our sample table, suppose you have the following criteria for checking the exam results: If either of the conditions is met, the final exam is deemed passed. At first sight, the formula seems a little tricky, but in fact it is not! You just express each of the above conditions as an AND statement and nest them in the OR function (since it's not necessary to meet both conditions, either will suffice): Then, use the OR function for the logical test of IF and supply the desired value_if_true and value_if_false values. As the result, you get the following IF formula with multiple AND / OR conditions: The screenshot below indicates that we've done the formula right: Naturally, you are not limited to using only two AND/OR functions in your IF formulas. You can use as many of them as your business logic requires, provided that:\n• In Excel 2007 and higher, you have no more than 255 arguments, and the total length of the IF formula does not exceed 8,192 characters.\n• In Excel 2003 and lower, there are no more than 30 arguments, and the total length of your IF formula does not exceed 1,024 characters.\n\nIf you want to evaluate multiple logical tests within a single formula, then you can nest several functions one into another. Such functions are called nested IF functions. They prove particularly useful when you wish to return different values depending on the logical tests' results. Here's a typical example: suppose you want to qualify the students' achievements as \"Good\", \"Satisfactory\" and \"Poor\" based on the following scores:\n• Satisfactory: between 40 and 60 (>40 and <60) Before writing a formula, consider the order of functions you are going to nest. Excel will evaluate the logical tests in the order they appear in the formula. Once a condition evaluates to TRUE, the subsequent conditions are not tested, meaning the formula stops after the first TRUE result. In our case, the functions are arranged from largest to smallest: Naturally, you can nest more functions if needed (up to 64 in modern versions). For more information, please see How to use multiple nested IF statements in Excel.\n\n\n\nAnother way to get an Excel IF to test multiple conditions is by using an array formula. To evaluate conditions with the AND logic, use the asterisk: To test conditions with the OR logic, use the plus sign: To complete an array formula correctly, press the Ctrl + Shift + Enter keys together. In Excel 365 and Excel 2021, this also works as a regular formula due to support for dynamic arrays. For example, to get \"Pass\" if both B2 and C2 are greater than 50, the formula is: In my Excel 365, a normal formula works just fine (as you can see in the screenshots above). In Excel 2019 and lower, remember to make it an array formula by using the Ctrl + Shift + Enter shortcut. To evaluate multiple conditions with the OR logic, the formula is:\n\nUsing IF together with other functions This section explains how to use IF in combination with other Excel functions and what benefits this gives to you. Example 1. If #N/A error in VLOOKUP When VLOOKUP or other lookup function cannot find something, it returns a #N/A error. To make your tables look nicer, you can return zero, blank, or specific text if #N/A. For this, use this generic formula: If the lookup value in E1 is not found, the formula returns zero. If the lookup value is not found, the formula returns nothing (an empty string). If the lookup value is not found, the formula returns specific text. For more formula examples, please see VLOOKUP with IF statement in Excel.\n\n Example 2. IF with SUM, AVERAGE, MIN and MAX functions To sum cell values based on certain criteria, Excel provides the SUMIF and SUMIFS functions. In some situations, your business logic may require including the SUM function in the logical test of IF. For example, to return different text labels depending on the sum of the values in B2 and C2, the formula is: If the sum is greater than 130, the result is \"good\"; if greater than 110 – \"satisfactory', if 110 or lower – \"poor\". In a similar fashion, you can embed the AVERAGE function in the logical test of IF and return different labels based on the average score: Assuming the total score is in column D, you can identify the highest and lowest values with the help of the MAX and MIN functions: To have both labels in one column, nest the above functions one into another: Likewise, you can use IF together with your custom functions. For example, you can combine it with GetCellColor or GetCellFontColor to return different results based on a cell color. In addition, Excel provides a number of functions to calculate data based on conditions. For detailed formula examples, please check out the following tutorials: Example 3. IF with ISNUMBER, ISTEXT and ISBLANK To identify text, numbers and blank cells, Microsoft Excel provides special functions such as ISTEXT, ISNUMBER and ISBLANK. By placing them in the logical tests of three nested IF statements, you can identify all different data types in one go: Example 4. IF and CONCATENATE To output the result of IF and some text into one cell, use the CONCATENATE or CONCAT (in Excel 2016 - 365) and IF functions together. For example: Looking at the screenshot below, you'll hardly need any explanation of what the formula does:\n\nThe modern versions of Excel have special functions to trap errors and replace them with another calculation or predefined value - IFERROR (in Excel 2007 and later) and IFNA (in Excel 2013 and later). In earlier Excel versions, you can use the IF ISERROR and IF ISNA combinations instead. The difference is that IFERROR and ISERROR handle all possible Excel errors, including #VALUE!, #N/A, #NAME?, #REF!, #NUM!, #DIV/0!, and #NULL!. While IFNA and ISNA specialize solely in #N/A errors. For example, to replace the \"divide by zero\" error (#DIV/0!) with your custom text, you can use the following formula:\n\nAnd that's all I have to say about using the IF function in Excel. I thank you for reading and hope to see you on our blog next week!"
    },
    {
        "link": "https://support.microsoft.com/en-us/office/using-if-with-and-or-and-not-functions-in-excel-d895f58c-b36c-419e-b1f2-5c193a236d97",
        "document": "In Excel, the IF function allows you to make a logical comparison between a value and what you expect by testing for a condition and returning a result if that condition is True or False.\n• =IF(Something is True, then do something, otherwise do something else) But what if you need to test multiple conditions, where let’s say all conditions need to be True or False (AND), or only one condition needs to be True or False (OR), or if you want to check if a condition does NOT meet your criteria? All 3 functions can be used on their own, but it’s much more common to see them paired with IF functions.\n\nHere are overviews of how to structure AND, OR and NOT functions individually. When you combine each one of them with an IF statement, they read like this:\n• AND – =IF(AND(Something is True, Something else is True), Value if True, Value if False)\n• OR – =IF(OR(Something is True, Something else is True), Value if True, Value if False)\n• NOT – =IF(NOT(Something is True), Value if True, Value if False)\n\nFollowing are examples of some common nested IF(AND()), IF(OR()) and IF(NOT()) statements in Excel. The AND and OR functions can support up to 255 individual conditions, but it’s not good practice to use more than a few because complex, nested formulas can get very difficult to build, test and maintain. The NOT function only takes one condition. Here are the formulas spelled out according to their logic: IF A2 (25) is greater than 0, AND B2 (75) is less than 100, then return TRUE, otherwise return FALSE. In this case both conditions are true, so TRUE is returned. If A3 (“Blue”) = “Red”, AND B3 (“Green”) equals “Green” then return TRUE, otherwise return FALSE. In this case only the first condition is true, so FALSE is returned. IF A4 (25) is greater than 0, OR B4 (75) is less than 50, then return TRUE, otherwise return FALSE. In this case, only the first condition is TRUE, but since OR only requires one argument to be true the formula returns TRUE. IF A5 (“Blue”) equals “Red”, OR B5 (“Green”) equals “Green” then return TRUE, otherwise return FALSE. In this case, the second argument is True, so the formula returns TRUE. IF A6 (25) is NOT greater than 50, then return TRUE, otherwise return FALSE. In this case 25 is not greater than 50, so the formula returns TRUE. IF A7 (“Blue”) is NOT equal to “Red”, then return TRUE, otherwise return FALSE. Note that all of the examples have a closing parenthesis after their respective conditions are entered. The remaining True/False arguments are then left as part of the outer IF statement. You can also substitute Text or Numeric values for the TRUE/FALSE values to be returned in the examples. Here are some examples of using AND, OR and NOT to evaluate dates. Here are the formulas spelled out according to their logic: IF A2 is greater than B2, return TRUE, otherwise return FALSE. 03/12/14 is greater than 01/01/14, so the formula returns TRUE. IF A3 is greater than B2 AND A3 is less than C2, return TRUE, otherwise return FALSE. In this case both arguments are true, so the formula returns TRUE. IF A4 is greater than B2 OR A4 is less than B2 + 60, return TRUE, otherwise return FALSE. In this case the first argument is true, but the second is false. Since OR only needs one of the arguments to be true, the formula returns TRUE. If you use the Evaluate Formula Wizard from the Formula tab you'll see how Excel evaluates the formula. IF A5 is not greater than B2, then return TRUE, otherwise return FALSE. In this case, A5 is greater than B2, so the formula returns FALSE.\n\nUsing AND, OR and NOT with Conditional Formatting in Excel In Excel, you can also use AND, OR and NOT to set Conditional Formatting criteria with the formula option. When you do this you can omit the IF function and use AND, OR and NOT on their own. In Excel, from the Home tab, click Conditional Formatting > New Rule. Next, select the “Use a formula to determine which cells to format” option, enter your formula and apply the format of your choice. Using the earlier Dates example, here is what the formulas would be. If A2 is greater than B2, format the cell, otherwise do nothing. If A3 is greater than B2 AND A3 is less than C2, format the cell, otherwise do nothing. If A4 is greater than B2 OR A4 is less than B2 plus 60 (days), then format the cell, otherwise do nothing. If A5 is NOT greater than B2, format the cell, otherwise do nothing. In this case A5 is greater than B2, so the result will return FALSE. If you were to change the formula to =NOT(B2>A5) it would return TRUE and the cell would be formatted."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/switch-between-various-sets-of-values-by-using-scenarios-2068afb1-ecdf-4956-9822-19ec479f55a2",
        "document": "A Scenario is a set of values that Excel saves and can substitute automatically on your worksheet. You can create and save different groups of values as scenarios and then switch between these scenarios to view the different results. If several people have specific information that you want to use in scenarios, you can collect the information in separate workbooks, and then merge the scenarios from the different workbooks into one. After you have all the scenarios you need, you can create a scenario summary report that includes information from all the scenarios. Scenarios are managed with the Scenario Manager wizard from the What-If Analysis group on the Data tab.\n\nThere are three kinds of What-If Analysis tools that come with Excel: Scenarios, Data Tables and Goal Seek. Scenarios and Data Tables take sets of input values and project forward to determine possible results. Goal Seek differs from Scenarios and Data Tables in that it takes a result and projects backwards to determine possible input values that produce that result. Each scenario can accommodate up to 32 variable values. If you want to analyze more than 32 values, and the values represent only one or two variables, you can use Data Tables. Although it is limited to only one or two variables (one for the row input cell and one for the column input cell), a Data Table can include as many different variable values as you want. A scenario can have a maximum of 32 different values, but you can create as many scenarios as you want. In addition to these three tools, you can install add-ins that help you perform What-If Analysis, such as the Solver add-in. The Solver add-in is similar to Goal Seek, but it can accommodate more variables. You can also create forecasts by using the fill handle and various commands that are built into Excel. For more advanced models, you can use the Analysis ToolPak add-in.\n\nSuppose that you want to create a budget but are uncertain of your revenue. By using scenarios, you can define different possible values for the revenue and then switch between scenarios to perform what-if analyses. For example, assume that your worst case budget scenario is Gross Revenue of $50,000 and Costs of Goods Sold of $13,200, leaving $36,800 in Gross Profit. To define this set of values as a scenario, you first enter the values in a worksheet, as shown in the following illustration: The Changing cells have values that you type in, while the Result cell contains a formula that is based on the Changing cells (in this illustration cell B4 has the formula =B2-B3). You then use the Scenario Manager dialog to save these values as a scenario. Goto the Data tab > What-If Analysis > Scenario Manager > Add. In the Scenario name dialog, name the scenario Worst Case, and specify that cells B2 and B3 are the values that change between scenarios. If you select the Changing cells on your worksheet before adding a Scenario, the Scenario Manager will automatically insert the cells for you, otherwise you can type them by hand, or use the cell selection dialog to the right of the Changing cells dialog box. Note: Although this example contains only two changing cells (B2 and B3), a scenario can contain up to 32 cells. Protection – You can also protect your scenarios, so in the Protection section check the options that you want, or uncheck them if you don't want any protection.\n• Select Prevent Changes to prevent editing the scenario when the worksheet is protected.\n• Select Hidden to prevent displaying the scenario when the worksheet is protected. Note: These options apply only to protected worksheets. For more information about protected worksheets, see Protect a worksheet Now suppose that your Best Case budget scenario is Gross Revenue of $150,000 and Costs of Goods Sold of $26,000, leaving $124,000 in Gross Profit. To define this set of values as a scenario, you create another scenario, name it Best Case, and supply different values for cell B2 (150,000) and cell B3 (26,000). Because Gross Profit (cell B4) is a formula - the difference between Revenue (B2) and Costs (B3) - you do not change cell B4 for the Best Case scenario. After you save a scenario, it becomes available in the list of scenarios that you can use in your what-if analyses. Given the values in the preceding illustration, if you chose to display the Best Case scenario, the values in the worksheet would change to resemble the following illustration:\n\nThere may be times when you have all the information in one worksheet or workbook needed to create all the scenarios that you want to consider. However, you may want to gather scenario information from other sources. For example, suppose you are trying to create a company budget. You might collect scenarios from different departments, like Sales, Payroll, Production, Marketing, and Legal, because each of these sources has different information to use in creating the budget. You can gather these scenarios into one worksheet by using the Merge command. Each source can supply as many or as few changing cell values as you want. For example, you might want each department to supply expenditure projections, but only need revenue projections from a few. When you choose to merge, the Scenario Manager will load a Merge Scenario wizard, which will list all of the worksheets in the active workbook, as well as listing any other workbooks you might have open at the time. The wizard will tell you how many scenarios you have on each source worksheet you select. When you collect different scenarios from various sources, you should use the same cell structure in each of the workbooks. For example, Revenue might always go in cell B2 and Expenditures might always go in cell B3. If you use different structures for the scenarios from various sources, it can be difficult to merge the results. Tip: Consider first creating a scenario yourself, and then sending your colleagues a copy of the workbook that contains that scenario. This makes it easier to be sure that all the scenarios are structured the same way."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/nested-if-excel-multiple-conditions",
        "document": "The tutorial explains how to use multiple IF in Excel and provides a couple of nested If formula examples for most common tasks.\n\nIf someone asks you what Excel function you use most often, what would your answer be? In most cases, it's the Excel IF function. A regular If formula that tests a single condition is very straightforward and easy to write. But what if your data requires more elaborate logical tests with multiple conditions? In this case, you can include several IF functions in one formula, and these multiple If statements are called Excel Nested IF. The biggest advantage of the nested If statement is that it allows you to check more than one condition and return different values depending on the results of those checks, all in a single formula.\n\nMicrosoft Excel has limits to the levels of nested IFs. In Excel 2003 and lower, up to 7 levels were allowed. In Excel 2007 and higher, you can nest up to 64 IF functions in one formula.\n\nFurther on in this tutorial, you will find a couple of Excel nested If examples along with a detailed explanation of their syntax and logic.\n\nHere's a typical example of Excel If with multiple conditions. Supposing you have a list of students in column A and their exam scores in column B, and you want to classify the scores with the following conditions: And now, let's write a nested IF function based on the above criteria. It's considered a good practice to begin with the most important condition and keep your functions as simple as possible. Our Excel nested IF formula goes as follows: And works exactly as it should:\n\n I've heard some people say that Excel multiple If is driving them crazy :) Try looking at it at a different angle:\n\n What the formula actually tells Excel to do is to evaluate the logical_test of the first IF function and, if the condition is met, return the value supplied in the value_if_true argument. If the condition of the 1st If function is not met, then test the 2nd If statement, and so on. IF(check if B2>=249, if true - return \"Excellent\", or else \n\n IF(check if B2>=200, if true - return \"Good\", or else\n\n IF(check if B2>150, if true - return \"Satisfactory\", if false -\n\n return \"Poor\"))) If you need a nested IF formula with wildcard characters (partial match), check out this example: If cell contains, then return different values.\n\n\n\nExample 2. Multiple If with arithmetic calculations Here's another typical task: the unit price varies depending on the specified quantity, and your goal is to write a formula that calculates the total price for any amount of items input in a specific cell. In other words, your formula needs to check multiple conditions and perform different calculations depending on what amount range the specified quantity falls in: This task can also be accomplished by using multiple IF functions. The logic is the same as in the above example, the only difference is that you multiply the specified quantity by the value returned by nested IFs (i.e. the corresponding price per unit). Assuming the user enters the quantity in cell B8, the formula is as follows: And the result will look something similar to this:\n\n As you understand, this example demonstrates only the general approach, and you can easily customize this nested If function depending on your particular task. For example, instead of \"hard-coding\" the prices in the formula, you can reference the cells containing those values (cells B2 to B6). This will enable your users to edit the source data without having to update the formula: Or, you may want to include an additional IF function(s) that fixes an upper, lower or both bounds of the amount range. When the quantity is outside the range, the formula will display an \"out of the range\" message. For example: =IF(OR(B8>200,B8<1), \"Qty. out of range\", B8*IF(B8>=101,12, IF(B8>=50, 13, IF(B8>=20, 16, IF( B8>=11, 18, IF(B8>=1, 20, \"\")))))) \n\n The nested IF formulas described above work in all versions of Excel. In Excel 365 and Excel 2021, you can also use the IFS function for the same purpose. Advanced Excel users that are familiar with array formulas, can use this formula that basically does the same thing as the nested IF function discussed above. Though the array formula is far more difficult to comprehend, let along to write, it has one indisputable advantage - you specify the range of cells containing your conditions rather than referencing each condition individually. This makes the formula more flexible, and if your users happen to change any of the existing conditions or add a new one, you will only have to update a single range reference in the formula.\n\n\n\nAs you have just seen, there is no rocket science in using multiple IF in Excel. The following tips will help you improve your nested IF formulas and prevent common mistakes. In Excel 2007 - Excel 365, you can nest up to 64 IF functions. In older versions of Excel 2003 and lower, up to 7 nested IF functions can be used. However, the fact that you can nest a lot of IFs in one formula doesn't mean you should. Please keep in mind that each additional level makes your formula more difficult to understand and troubleshoot. If your formula has too many nested levels, you may want to optimize it by using one of these alternatives.\n\n The order of nested IF functions matters The Excel nested IF function evaluates the logical tests in the order they appear in the formula, and as soon as one of the conditions evaluates to TRUE, the subsequent conditions are not tested. In other words, the formula stops after the first TRUE result. Let's see how it works in practice. With B2 equal to 274, the nested IF formula below evaluates the first logical test (B2>249), and returns \"Excellent\" because this logical test is TRUE: Now, let's reverse the order of IF functions: The formula tests the first condition, and because 274 is greater than 150, the result of this logical test is also TRUE. Consequently, the formula returns \"Satisfactory\" without testing other conditions. You see, changing the order of IF functions changes the result:\n\n \n\n To watch the logical flow of your nested IF formula step-by-step, use the Evaluate Formula feature located on the Formula tab, in the Formula Auditing group. The underlined expression is the part currently under evaluation, and clicking the Evaluate button will show you all the steps in the evaluation process. For example, the evaluation of the first logical test of the nested IF formula shown in the screenshot below will go as follows: B2>249; 274>249; TRUE; Excellent.\n\n \n\n Balance the parenthesis of nested IF functions One of the main challenges with nested IFs in Excel is matching parenthesis pairs. If the parentheses do not match, your formula won't work. Luckily, Microsoft Excel provides a couple of features that can help you to balance the parentheses when editing a formula:\n• If you have more than one set of parentheses, the parenthesis pairs are shaded in different colors so that the opening parenthesis matches the closing one.\n• When you close a parenthesis, Excel briefly highlights the matching pair. The same bolding, or \"flickering\", effect is produced when you move through the formula by using the arrow keys. For more information, please see Match parenthesis pairs in Excel formulas.\n\n When building logical tests of your nested IF formulas, remember that text and numbers should be treated differently - always enclose text values in double quotes, but never put quotes around numbers: The logical test of the second formula will return FALSE even if the value in B2 is greater than 249. Why? Because 249 is a number and \"249\" is a numeric string, which are two different things.\n\n Add spaces or line breaks to make nested IFs easier to read When building a formula with multiple nested IF levels, you can make the formula's logic clearer by separating different IF functions with spaces or line breaks. Excel doesn't care about extra spacing in a formula, so you may not worry about mangling it. To move a certain part of the formula to the next line, just click where you want to insert a line break, and press Alt + Enter. Then, expand the formula bar as much as needed and you will see that your nested IF formula has become much easier to understand.\n\n \n\n\n\nThis is how you use an If formula in Excel with multiple conditions. I thank you for reading and hope to see you on our blog next week."
    }
]