[
    {
        "link": "https://learn.microsoft.com/en-us/power-query/group-by",
        "document": "In Power Query, you can group values in various rows into a single value by grouping the rows according to the values in one or more columns. You can choose from two types of grouping operations:\n\nFor this tutorial, you're using the following sample table.\n\nWhere to find the Group by button\n\nYou can find the Group by button in three places:\n• None On the Home tab, in the Transform group.\n• None On the Transform tab, in the Table group.\n• None On the shortcut menu, when you right-click to select columns.\n\nUse an aggregate function to group by one or more columns\n\nIn this example, your goal is to summarize the total units sold at the country and sales channel level. You use the Country and Sales Channel columns to perform the group by operation.\n• Select Group by on the Home tab.\n• Select the Advanced option, so you can select multiple columns to group by.\n• In New column name, enter Total units, in Operation, select Sum, and in Column, select Units.\n\nThis operation gives you the following table.\n\nWith the Group by feature, the available operations can be categorized in two ways:\n\nThe following table describes each of these operations.\n\nPerform an operation to group by one or more columns\n\nStarting from the original sample, in this example you create a column containing the total units and two other columns that give you the name and units sold for the top-performing product, summarized at the country and sales channel level.\n• None Use the following columns as Group by columns:\n• None Create two new columns by following these steps:\n• Aggregate the Units column by using the Sum operation. Name this column Total units.\n• Add a new Products column by using the All rows operation.\n\nAfter that operation is complete, notice how the Products column has [Table] values inside each cell. Each [Table] value contains all the rows that were grouped by the Country and Sales Channel columns from your original table. You can select the white space inside the cell to see a preview of the contents of the table at the bottom of the dialog.\n\nNext, you need to extract the row that has the highest value in the Units column of the tables inside the new Products column, and call that new column Top performer product.\n\nWith the new Products column with [Table] values, you create a new custom column by going to the Add Column tab on the ribbon and selecting Custom column from the General group.\n\nName your new column Top performer product. Enter the formula under Custom column formula.\n\nThe result of that formula creates a new column with [Record] values. These record values are essentially a table with just one row. These records contain the row with the maximum value for the Units column of each [Table] value in the Products column.\n\nWith this new Top performer product column that contains [Record] values, you can select the expand icon, select the Product and Units fields, and then select OK.\n\nAfter you remove your Products column and setting the data type for both newly expanded columns, your result will resemble the following image.\n\nTo demonstrate how to do \"fuzzy grouping,\" consider the sample table shown in the following image.\n\nThe goal of fuzzy grouping is to do a group-by operation that uses an approximate match algorithm for text strings. Power Query uses the Jaccard similarity algorithm to measure the similarity between pairs of instances. Then it applies agglomerative hierarchical clustering to group instances together. The following image shows the output that you expect, where the table is grouped by the Person column.\n\nTo do the fuzzy grouping, you perform the same steps previously described in this article. The only difference is that this time, in the Group by dialog box, you select the Use fuzzy grouping check box.\n\nFor each group of rows, Power Query picks the most frequent instance as the \"canonical\" instance. If multiple instances occur with the same frequency, Power Query picks the first one. After you select OK in the Group by dialog box, you'll get the result that you were expecting.\n\nHowever, you have more control over the fuzzy grouping operation by expanding Fuzzy group options.\n\nThe following options are available for fuzzy grouping:\n• Similarity threshold (optional): This option indicates how similar two values must be to be grouped together. The minimum setting of zero (0) causes all values to be grouped together. The maximum setting of 1 only allows values that match exactly to be grouped together. The default is 0.8.\n• Ignore case: When text strings are compared, case is ignored. This option is enabled by default.\n• Group by combining text parts: The algorithm tries to combine text parts (such as combining Micro and soft into Microsoft) to group values.\n• Show similarity scores: Show similarity scores between the input values and the computed representative values after fuzzy grouping. Requires the addition of an operation such as All rows to showcase this information on a row-by-row level.\n• Transformation table (optional): You can select a transformation table that maps values (such as mapping MSFT to Microsoft) to group them together.\n\nFor this example, a transformation table is used to demonstrate how values can be mapped. The transformation table has two columns:\n• From: The text string to look for in your table.\n• To: The text string to use to replace the text string in the From column.\n\nThe following image shows the transformation table used in this example.\n\nReturn to the Group by dialog box, expand Fuzzy group options, change the operation from Count rows to All rows, enable the Show similarity scores option, and then select the Transformation table drop-down menu.\n\nAfter you select the transformation table, select OK. The result of that operation gives you the following information:\n\nIn this example, the Ignore case option was enabled, so the values in the From column of the Transformation table are used to look for the text string without considering the case of the string. This transformation operation occurs first, and then the fuzzy grouping operation is performed.\n\nThe similarity score is also shown in the table value next to the person column, which reflects exactly how the values were grouped and their respective similarity scores. You can expand this column if needed or use the values from the new Frequency columns for other sorts of transformations.\n\nFor more information about how transformation tables work, go to Transformation table precepts."
    },
    {
        "link": "https://learn.microsoft.com/en-us/power-bi/create-reports/desktop-add-custom-column",
        "document": "In Power BI Desktop, you can add a new custom column of data to your model by using Power Query Editor. With Power Query Editor, you can create and rename your custom column to create PowerQuery M formula queries to define your custom column. PowerQuery M formula queries have a comprehensive function reference content set. When you create a custom column in Power Query Editor, Power BI Desktop adds it as an Applied Step in the Query Settings of the query. You can change, move, or modify the column at any time.\n• None From the Home tab on the ribbon, select Transform data, and then select Transform data from the menu.\n• None From the Add Column tab on the ribbon, select Custom Column.\n\nThe Custom Column window has the following features:\n• None An Available columns list on the right.\n• None The initial name of your custom column, in the New column name box. You can rename this column.\n• None PowerQuery M formula queries, in the Custom column formula box. You create these queries by building the formula on which your new custom column is defined.\n\nYou can create formulas for custom columns, as described in the following steps. For more information on M functions available for formulas, see Power Query M function reference.\n• None Select columns from the Available columns list on the right, and then select Insert below the list to add them to the custom column formula. You can also add a column by double-clicking it in the list.\n• None As you enter the formula and build your column, note the indicator in the bottom of the Custom Column window. If there are no errors, there are a green check mark and the message No syntax errors have been detected. If there's a syntax error, there is a warning, along with a link to where the error occurred in your formula.\n• Power BI Desktop adds your custom column to the model and adds the Added Custom step to your query's Applied Steps list in Query Settings.\n• None To modify your custom column, double-click the Added Custom step in the Applied Steps list. The Custom Column window appears with the custom column formula you created.\n\nUse the Advanced Editor for custom columns\n\nAfter you've created your query, you can also use the Advanced Editor to modify any step of your query. To do so, follow these steps:\n• None In the Power Query Editor window, from the View tab on the ribbon, select Advanced Editor. The Advanced Editor window appears, which gives you full control over your query.\n• None Make any changes and then select Done.\n• None You can create a custom column in other ways, such as creating a column based on examples you provide to Power Query Editor. For more information, see Add a column from an example in Power BI Desktop."
    },
    {
        "link": "https://blog.dataddo.com/guide-to-m-code-in-power-bi-a-power-query-formula-language",
        "document": "Power BI is a powerhouse for analyzing and visualizing data. One of the features it offers is Power Query, which allows users to import, transform, and consolidate data from various sources into a more usable state. It can be accessed through the Power Query Editor, a graphical user interface, or Power Query M, a functional programming language.\n\nThis article will focus on how to use Power Query M.\n\nClick to skip down to a specific section:\n• Why use Dataddo to get your data to Power BI?\n\nM code is a mashup language designed to create queries that combine data. It is similar to the F# programming language and is described by Microsoft as a \"mostly pure, higher-order, dynamically typed, partially lazy, functional language.\" M is also case-sensitive, so, for example, words like Source and source are considered different.\n\nM Code allows users to write custom scripts to modify and shape data, and offers automation and fine-grain control for data cleaning, restructuring, and consolidation. Let’s see its syntax.\n\nHere is how to say \"hello world\" in M code:\n• : Starts a block to define variables and their values.\n• : Variable holding the result of the following expression.\n• : Specifies that is the final output of the query.\n\nIf this seems confusing, don't worry. We will discuss examples below to help you grasp M code.\n\nYou can view M code in Power Query Editor by clicking Transform Data in the ribbon, which will open the editor.\n\nM code will appear in the Formula Bar, as shown below:\n\nYou can also open the Advanced Editor window to view it.\n\nNow, let’s build some understanding of Power Query M functions.\n\nIt's impossible to cover all of Power BI's Power Query M functions in this article, but the selection below will give you a good taste of how they work.\n\nPower Query M lets you define custom functions to bundle and reuse specific data transformation steps. These functions can be written within a query or in separate modules.\n\nThe function's body comes after the => symbol, and you can optionally specify type information for parameters and the return value. Functions are defined and called within the body of a ‘let’ statement. Let’s define a simple function that multiplies the input by 2.\n\nThe output for the above function will be 4.\n\nAs stated above, a function maps input values to a single output. It's written by naming the parameters and providing an expression to compute the result. Here’s an example:\n\nWriting your functions can be tiresome; therefore, Power Query provides many built-in functions, and here’s a complete list. Here’s an example of two built-in functions:\n\nText.Proper(): Capitalizes the first letter of each word in the given text value.\n\nDate.DayOfYear(): Returns the day of the year from the given date, datetime, or datetimezone value.\n\nHere’s the result of the above query:\n\nPower Query M allows functions to be grouped into libraries or modules to enhance code organization and reusability. Libraries house collections of related functions that can be shared across various queries or workbooks.\n\nBelow is an example of a library of functions in M code.\n\nNow, let's look at advanced data transformations.\n\nPower Query M supports advanced data transformation techniques, including grouping, aggregation, pivoting, unpivoting, merging, appending tables, and handling errors. These features allow effective shaping and cleaning of data from various sources. Here is an example of advanced data transformation:\n\nTable.Group(): Groups table rows by the key columns defined by key, which can be a single column name or a list of names. A record is created for each group with the key columns and any specified aggregated columns.\n\nHere is the result:\n\nPower Query M functions can reference and use the output of other queries. This allows you to create a data transformation workflow in which queries build on the results of previous ones.\n\nHere, previousQuery is the dependent query used in the filtered result.\n\nQuery folding optimizes resource usage, such as CPU and memory, by minimizing data processing within Power BI. It improves performance by pushing data transformations back to the data source, reducing data transfer and the amount of data processed in Power BI. This can be achieved in two ways:\n\nPower Query M functions can incorporate SQL statements directly within queries, allowing the database server to handle heavy processing and improve query performance.\n\nFirst, connect to the source and query the database. The query will run on the server, and the result will be fetched.\n\nPower Query M functions support filter operations that can be pushed back to the data source. For instance, the data source can execute filtering rows based on a condition for more efficient data retrieval.\n\nThe following code extracts the contents of an Excel file and filters the rows where the value in the second column is 'Germany'.\n\nAnd that's M code in Power BI!\n\nWhy Use Dataddo to Get Your Data to Power BI?\n\nDataddo is a no-code data integration platform that can automate the flow of data from any SaaS app or database to Power BI.\n\nEasily connect services to Dataddo via a streamlined interface. Sync data as frequently as every 5 minutes. Then focus purely on deriving profitable insights from your data in Power BI.\n\nDataddo's engineers proactively monitor and maintain all data connections, so that you never have to wake up to a broken Power BI dashboard in the morning.\n\nYou don't need to manage a dedicated database in order to collect and analyze data from periods past. You can use Dataddo's embedded SmartCache storage.\n\nFilter, monitor, blend, and transform your data automatically in Dataddo, so that you can spend less time preparing it in Power BI for analysis.\n\nDataddo's flow screen. Notice the red boxes—inside are the numbers of data sources combined in a single connection to Power BI.\n\nAll you have to do to get your data flowing is sign up for a free Dataddo account, then go to Dataddo Academy for simple video tutorials on how to set up your data connections.\n\nContinue reading the Dataddo blog for more Power BI tips, tricks, and resources!\n• Smarter Financial Dashboards for SMEs (with Free Power BI Template)\n• How to Connect NetSuite to Power BI: ODBC vs. Dataddo\n• None How to Connect Google Sheets with Power BI: Direct vs. Dataddo\n• How to Connect Sage Accounting to Power BI for FREE: Direct vs. Dataddo\n• How to Connect Google Analytics to Power BI for FREE: Direct vs. Dataddo\n• How to connect JSON with Power BI: Direct vs. Dataddo\n• How to Connect SEMrush to Power BI for FREE\n• How to Integrate Exact Online Data with Power BI (or any BI Tool)"
    },
    {
        "link": "https://community.powerbi.com/t5/Power-Query/Create-Custom-Column-in-Power-Query-M-language-from-DAX-Formula/td-p/3061207",
        "document": "What is the in your DAX? Is it a measure or something else? I don't see this data in your screenshots of two tables. If possible, you can use some natural language and the sample data to explain what you want to calculate in the custom column. This could help us understand the expected result better.\n\nAssume you already have a [IpcaSoma] column in ReD table, you can add two steps to get the custom column.\n\nStep #1: Add a custom step to get the latest value from Ipca table\n\nBest Regards,\n\nCommunity Support Team _ Jing\n\nIf this post helps, please Accept it as Solution to help other members find it."
    },
    {
        "link": "https://campus.datacamp.com/courses/intermediate-power-query-in-excel/custom-columns-2?ex=3",
        "document": "It’s all about customization in this chapter. You’ll learn the fundamentals of M language syntax, and how it underpins every transformation step in query development. You’ll leverage M to create custom conditional columns using logical operators to suit numerous scenarios. You’ll also delve into M table transformation expressions to create custom grouped index columns, enhancing your proficiency in advanced query design."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powerquery-m/table-addcolumn",
        "document": "Adds a column named to the table . The values for the column are computed using the specified selection function with each row taken as an input.\n\nAdd a number column named \"TotalPrice\" to the table, with each value being the sum of the [Price] and [Shipping] columns."
    },
    {
        "link": "https://powerquery.how/table-addcolumn",
        "document": "Table.AddColumn is a Power Query M function that adds a new column to a table, with values calculated using the specified columnGenerator function. The function returns a modified table with the new column added.\n\nThe function in Power Query M adds a new column to an existing table. This function requires you to choose the table to be modified ( ), name the new column ( ), and define a formula or expression ( ) for generating values in the new column.\n\nAdditionally, it supports an optional parameter. Specifying a data type for does not convert the data in your column but tells the M engine to assume that the column is of this specified type. This means the engine won’t perform additional checks or conversions based on this data type assumption. Whereas this feature is a convenient way to add a data type to a column, it can also cause errors when the data type is incompatible with the generated value.\n\nImagine you’re working with a basic table in Power Query M that includes columns for ProductKey, Product, and Sales.\n\nNow, let’s say you want to add a new column to this table to show sales including a Value-Added Tax (VAT) of 10%. Here’s a simple and user-friendly way to do this using Power Query’s function.\n\nTo start, go to the “Add Column” tab in Power Query and select “Custom Column.” This action opens a dialog box where you can input your formula. To calculate the sales including VAT, you can use a straightforward formula like:\n\nThis formula takes each sale and multiplies it by 1.10, effectively adding a 10% VAT. When you apply this formula, Power Query M automatically uses the function as follows:\n\nIn this function, “Source” refers to your original table, “Sales Incl VAT” is your new column name, and the formula for calculating the VAT is specified after . Interestingly, we didn’t type in the word ‘each’ in the Custom Formula Box. Power Query automatically adds it to indicate the start of a function.\n\nAssigning a Data Type to Your New Column\n\nYou might want to specify a data type for your new column. This is where the optional fourth argument of comes in handy. For instance, if you want your new column to be treated as a number, you would write:\n\nHowever, it’s important to note that specifying a data type doesn’t convert the data. It simply tells Power Query M to treat the column as that type. You could label a column containing numbers as and you won’t run into an error within Power Query.\n\nHowever, this leads to errors when loading the data into Power BI or Excel, as the actual content and the assigned type would be inconsistent.\n\nAny expression you provide to Table.AddColumn is evaluated for each row in the table. In some cases, you may want to reference the entire row as a record. This is done by using the underscore symbol in your formula:\n\nThis approach considers the entire row for each iteration in the table.\n\nTo try this out yourself, you can use the following Power Query M code snippet. This code creates a sample table and applies the function in different ways, giving you a hands-on feel for how the function works:\n\nOther functions related to Table.AddColumn are:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/powerquery-m/table-functions",
        "document": "This parameter is a list of text values specifying the column names of the resulting table. This parameter is generally used in the Table construction functions, such as Table.FromRows and Table.FromList.\n\nComparison criterion can be provided as either of the following values:\n• None A number value to specify a sort order. More information: Sort order\n• None To compute a key to be used for sorting, a function of one argument can be used.\n• None To both select a key and control order, comparison criterion can be a list containing the key and order.\n• None To completely control the comparison, a function of two arguments can be used that returns -1, 0, or 1 given the relationship between the left and right inputs. Value.Compare can be used to delegate this logic.\n\nFor examples, go to the description of Table.Sort.\n\nThis criteria is generally used in ordering or row operations. It determines the number of rows returned in the table and can take two forms, a number or a condition.\n• None A number indicates how many values to return inline with the appropriate function.\n• None If a condition is specified, the rows containing values that initially meet the condition is returned. Once a value fails the condition, no further values are considered.\n\nExtra values are used to indicate how the function should handle extra values in a row. This parameter is specified as a number, which maps to the following options:\n\nThis parameter is used to indicate how the function should handle missing columns. This parameter is specified as a number, which maps to the following options:\n\nThis parameter is used in column or transformation operations, for examples, in Table.TransformColumns. More information: MissingField.Type\n\nSort ordering is used to indicate how the results should be sorted. This parameter is specified as a number, which maps to the following options:\n\nEquation criteria for tables can be specified as either:\n• None A function value that is either:\n• None A key selector that determines the column in the table to apply the equality criteria.\n• None A comparer function that is used to specify the kind of comparison to apply. Built-in comparer functions can be specified. More information: Comparer functions\n• None A list of the columns in the table to apply the equality criteria.\n\nFor examples, go to the description of Table.Distinct."
    },
    {
        "link": "https://powerquery.how/table-group",
        "document": "Table.Group is a Power Query M function that groups rows of a table by the key columns defined by key. The function returns a table with grouped rows and a record containing key columns and any aggregated columns.\n\nGroups the rows of by the key columns defined by . The can either be a single column name, or a list of column names. For each group, a record is constructed containing the key columns (and their values), along with any aggregated columns specified by . Optionally, and may also be specified.\n\nIf the data is already sorted by the key columns, then a of GroupKind.Local can be provided. This may improve the performance of grouping in certain cases, since all the rows with a given set of key values are assumed to be contiguous.\n\nWhen passing a , note that if it treats differing keys as equal, a row may be placed in a group whose keys differ from its own.\n\nThis function does not guarantee the ordering of the rows it returns.\n\nIgnore or Respect The Order of Values\n\nImagine you’re working with the following table in a step titled ‘Source‘.\n\nWant to group this table by CustomerID and sum up those prices? Add an aggregate column, let’s call it ‘Total’. This ‘Total’ will sum up the prices like so: “each List.Sum( _[Price] )”.\n\nNotice how we’ve included the optional GroupKind.Type in the 4th argument? That’s us telling Power Query how we want our data grouped. When this argument is unspecified Power Query defaults to GroupKind.Global, which means it will consider all rows when forming groups.\n\nBut what if we want to group data based on the sequence it appears in the input table, i.e., local grouping? You can specify GroupKind.Local instead.\n\nWant to try both methods out for yourself? Copy the code below, create a blank query, and paste it into Power Query’s advanced editor.\n\nWhen comparing values, you can make use of comparer functions. By default the function creates groups in a case sensitive way using Comparer.Ordinal. However, in case your groups should be formed in a case-insensitive way you can make use of Comparer.OrdinalIgnoreCase. Suppose you have the following table:\n\nTo group this value by the column you can use the following code:\n\nSince the Table.Group function uses the GroupKind.Global and Comparer.Ordinal enumerations by default, the following code is identical:\n\nThe fifth argument, that specifies the comparer function instructs the function how to group values. Depending on whether you use Comparer.Ordinal or Comparer.OrdinalIgnoreCase, the following tables are the result:\n\nSpecifying Comparer.Ordinal results in a case-sensitive comparison, where each value in the Name column is a unique group. When we change it to Comparer.OrdinalIgnoreCase, the function ignores capitalization differences and we end up with only three unique groups.\n\nYou can try this for yourself using:\n\nNow let’s look at a scenario that can make use of a custom comparer function. In below table you can find three columns. The table is ordered by date, and whenever there is a contiguous date range, only the first row of the same date will show the date value:\n\nNow suppose we want to group our values by date and show which people bought something on a particular date and at the same time return the total amount. A common way to do that is to use the Fill Down operation on the Date column. Yet, there’s also a way in which we can do that by using a custom comparer. Since we are using GroupKind.Local, we can make use of the simplified comparer below:\n\nThe outcome of this operation is the following table:\n\nSo what happend here? In the expression used, the fifth argument defines a custom comparer function. This function tests whether the underlying values are date values. The comparer function in argument 5 expects a number value of -1, 0 or 1, just like Comparer.Ordinal does. The example uses the Number.From function to turn true values into 1 and false values into 0.\n\nTo make the outcome of the custom function more visual, below table shows a separate column with the outcome of this evaluation:\n\nThe last column returns every time a value is a date. In this dataset, that happens for row 1, 4, 6 and 10. In the context of the Table.Group function, whenever a row meets the required condition, and therefore returns 1, a new group is formed. That means the first group ranges from row 1-3, the second from row 4-5, the third from row 6-9 and the final group is only row 10.\n\nTo try this for yourself you can paste the following code into the advanced editor:\n\nLearn more about Table.Group in the following articles:\n• None Concatenate Text with Group By (Combine Rows) in Power Query \n\nIn this post you learn how to use group by to concatenate text values. It allows you to summarize the data in a comma separated list. » Read more\n• Grouping rows in Power Query can help show your data in a summarized way. You group rows by one or more columns and perform aggregations. » Read more\n• None Using Custom Comparers with Table.Group in Power Query \n\nThis article shows you how to use the Comparer Function in Table.Group. You’ll also learn how to create a custom comparer function for more precise data grouping. » Read more\n\nOther functions related to Table.Group are:"
    },
    {
        "link": "https://community.powerbi.com/t5/Desktop/Power-Query-Add-column-from-related-table/td-p/2678783",
        "document": "I'm trying to add a column from one related table to another in Power Query.\n\nSo in table 1 I have:\n\nAnd in table 2 I have\n\nI want to add the Cust_PostCode column from table 1 to table 2, matching Cust_Ref from both tables, so table 2 has 4 columns.\n\nI know how to do this using Merge Queries but this seems to take a very large amount of processing power, so I need to find another way if possible."
    }
]