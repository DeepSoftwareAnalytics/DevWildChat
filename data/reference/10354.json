[
    {
        "link": "https://dev.to/plazarev/18-best-javascript-gantt-chart-components-2d78",
        "document": "In today's era of high technologies, distributed teams, and remote work, it has become essential for organizations to invest in project management applications. Choosing the right features to equip your project management app is crucial for your team's productivity and budget. According to the Capterra user rating data, project planning and scheduling is the key feature of project management software. The best way to make this feature a part of your project is to use a Gantt chart. Gantt charts give you full control over the project workflow and resource allocation.\n\nIn this article, we will consider popular commercial and open-source JavaScript Gantt components that will help you integrate a Gantt chart into your project management app much faster.\n\nFirst, let us look closely at paid-for Gantt options and highlight their main characteristics. Businesses frequently prefer such products since they have rich feature sets, get regular updates and technical support, and can be used with various JavaScript frameworks (React, Angular, Vue.js) and back-end technologies.\n\nDHTMLX Gantt is a mature and developer-friendly JavaScript library for creating Gantt charts of any complexity and with any number of tasks. With this tool at hand, you can easily add a Gantt chart to any web app and equip it with the right features to cover all of your project management needs. High working loads like 30 000+ tasks and the use of advanced features won’t downgrade the DHTMLX Gantt performance due to dynamic loading and smart rendering.\n\nIn basic usage scenarios, you can create projects with different types of tasks (regular and unscheduled), set task dependencies, sort and filter data, add project summaries with rollup tasks, and make changes on the fly with drag-n-drop, keyboard navigation, and inline editing.\n\nIf the achievement of your objectives requires more sophisticated tools, DHTMLX Gantt has a lot to offer to bring your project management experience to a new level. Here you can enjoy numerous powerful features such as automatic scheduling, critical path calculation, flexible time formatting, split tasks, task constraints, multiple charts on one page, and much more.\n\nDHTMLX Gantt is especially good at handling project resources assigned to tasks on a full- or part-time basis. There are two layout views showing resource workload and allocation – resource load diagram and histogram. These views get in sync with the main Gantt chart, and thus it is easy to balance the workload. You can also group tasks by resources, create working calendars for different resources (usually referring to employees), and merge them into one.\n\nThe comprehensive API of this JavaScript component allows you to make any Gantt element look and behave the way you like. You are free to add new timeline items (baselines, deadlines), custom tasks and time scales, and custom content in timeline cells or on top of Gantt. The UI is flexible and personalizable thanks to the availability of 7 predefined skins, including high-contrast ones, localization (32 locales), accessibility support, and RTL mode.\n\nThe DHTMLX team also offers useful add-ons to reinforce Gantt in your web apps. There are standalone export modules for safely exporting your charts to PDF or PNG format and converting Gantt data for use in popular software - MS Project and Primavera. A Node.js server module is indispensable for performing complex operations on the Gantt chart, integrating it with third-party systems, and providing flawless user experience for teams working simultaneously on multiple devices.\n\nOn top of that, DHTMLX Gantt can be easily integrated with other DHTMLX components such as Scheduler, Kanban, and To Do List for building a versatile web solution for your business.\n\nAbundant developer guides and samples allow you to quickly learn the essentials of working with the Gantt chart and make the most of its capabilities.\n\nDHTMLX Gantt has a flexible licensing model, which allows adjusting the license to the size of your development team and your requirements. Thus, it is perfect for companies of any size, from small startups to medium-sized and large corporations.\n\nBryntum Gantt is a lightweight JavaScript version of Bryntum’s Gantt for Ext JS delivered back in 2019. This product has some noteworthy peculiarities related to managing project data (tasks, resources, dependencies, etc.) on the backend and the presentation of this data in the UI.\n\nUnder the hood, it uses an in-house produced scheduling engine based on the company’s other technology called ChronoGraph for working on projects of different scales. The Gantt engine supports automatic scheduling, backward scheduling, task constraints, 4 scheduling modes, calendars (for projects, events, and resources), recurrent and fixed time intervals for calendars.\n\nThe UI part of the Gantt is based on the Bryntum Grid and inherits most of its features such as filtering, sorting, column resizing, and summarizing. The Gantt structure may include multiple, individually scrollable grid sections (on the right of the timeline). For instance, you can create new sections with inactive tasks or resources and then add these items to the project with drag-and-drop. Bryntum Gantt also allows using conflict resolution popups, baselines, labels, time range indicators, and progress lines in the Gantt timeline to make it more informative. There is also a built-in editor with a programmatic validation of any editing actions.\n\nIf necessary, you can override almost any part of the codebase and adjust Gantt elements to your needs. This component is shipped with five built-in customizable themes that allow specifying the general appearance of the Gantt chart.\n\nHaving a rich feature set, Bryntum Gantt has rather expensive licenses. To my mind, this library is suitable for complex projects in large enterprise companies with big budgets.\n\nWebix Gantt is a relatively new JavaScript widget included in the Webix UI Library. When integrated into a web project, this Gantt component allows creating tasks and subtasks, tracking their progress, assessing potential risks, and detecting bottlenecks in projects. The widget supports all the CRUD operations for handling project tasks.\n\nYou can flexibly configure the Gantt in accordance with your project requirements. If the basic feature set does not satisfy the needs of your project, you can add more advanced features. For instance, it is possible to expand the Gantt functionality with complex scales and zooming, marks on scales, division of tasks, critical path calculation, and more. Webix Gantt also provides instruments for working with project resources (Resource view) and tracking their workload (Resource diagram).\n\nThe widget is based on the Webix Jet micro-framework designed to speed up the development of Webix-based apps. With Webix Jet, the Gantt interface is divided into numerous stand-alone Webix components (views). Thus, you can modify, add, or even remove any part of the UI.\n\nDespite being a newcomer on the JavaScript Gantt landscape, this Gantt widget already has a decent feature set. However, there are not many licensing options for buying Webix Gantt without any extra tools.\n\n Useful resources: documentation, samples, blog, GitHub repository, YouTube channel\n\n Trial version: Webix Gantt\n\n Price: from $798\n\nSyncfusion Gantt is one of the numerous JavaScript controls included in the Essential JS 2 library and carries all of its general features. For instance, you can benefit from a modular architecture, touch support, multiple built-in themes, seamless data binding, and other useful things.\n\nAt the same time, this project management tool is equipped with a pack of features that are specifically dedicated to planning, scheduling, and monitoring one or several projects with involved resources within a single Gantt chart. The Gantt interface allows presenting tasks with their dependencies and manipulating them in different timeline modes (hour, week, month, and year). The timeline may have additional details (working days and holidays, baselines, event markers, tooltips, critical path), making it easier to understand and analyze data. There are many options for specifying the behavior of rows and columns in Gantt.\n\nUsing different template options, you can create custom headers, taskbars, cell contents, editors, and other items. Syncfusion Gantt provides two ways to ensure a good user experience with large volumes of data. You can apply the virtual scrolling to load hefty data sets and enable the immutable mode to bring editing changes to life without delays. If needed, the Gantt content can be exported to PDF and Excel formats.\n\nSyncfusion Gantt is a great solution for those who also plan to use other controls from the Essential JS 2 library since it cannot be purchased as a stand-alone tool. Otherwise, it is not the most favorable price offer when compared with other products.\n\nUseful resources: documentation, samples, blog, YouTube channel, GitHub repository\n\n Trial version: Essential JS 2\n\n Price: from $995 (for the full package of Essential JS 2 components)\n\nDlhSoft Gantt Chart Hyper Library is a package of JavaScript scheduling components for building business web applications. As its name suggests, the centerpiece of this product is the GanttChartView component that gives you an opportunity to add interactive JavaScript Gantt charts to your project.\n\nApart from standard Gantt features, this component allows expanding your project management capabilities with auto-scheduling, task splitting, critical path highlighting, and plain resource allocation. There are configuration options for setting the required time scale, zooming level, working and nonworking time, and some other parameters. Custom appearance settings are available for changing the look of the whole chart or individual items shown in the timeline.\n\nWhen loading and displaying a large number of items in the Gantt chart, it will continue working smoothly thanks to the virtualization feature enabled by default. To access the Gantt data offline, you can save it in PDF, Excel, and Microsoft Project XML files. On top of all that, you have an opportunity to create other types of charts (load chart, PERT chart, network diagram) by using Gantt chart elements or by defining data on the fly.\n\nDlhSoft Gantt Chart Hyper Library is not the most remarkable solution in terms of functional capabilities. But it can be purchased separately or in a bundle with other scheduling instruments at reasonable prices.\n\nUseful resources: documentation, samples, GitHub repository\n\n Trial version: DlhSoft Gantt Chart\n\n Price: from $455 (Mini edition with Gantt component only), from $848 (Standard edition with other scheduling components),\n\nAnyGantt is a JavaScript-based tool provided by the AnyChart company for embedding informative Gantt charts into applications. Using this solution, you can create two types of Gantt charts - Project and Resource. The first Gantt type is intended for visualizing scheduled project workflows, while the second one displays operational assets (workers, equipment, etc.) used for achieving certain goals over periods of time. These Gantts depict different timeline items, but at the same time, they have similar settings.\n\nAll elements of Gantt charts based on AnyGantt can be configured in the desired way via visual settings. When exploring the features directly associated with handling project tasks, you’ll find some useful, but common things, namely markers, tooltips, labels, milestones, etc. Anychart also offers a variety of formatting options for text-based elements and flexible settings for date and time formats. The Live Edit mode helps to introduce changes in the Gantt chart on the go.\n\nAnyGantt supports asynchronous rendering for convenient working with data-intensive charts. This Gantt component uses the GraphicsJS library for customizing timeline elements. Using this JavaScript graphics library, you can replace default items with custom ones in project and resource charts. It is possible to export charts to images (SVG, PNG, JPG), PDF or data files (CSV, Excel).\n\nIf you like what you see in AnyGantt at the moment and want to try it in a pre-revenue startup, you can buy the current version of the product just for $49. For all other scenarios, this product is quite expensive. Even if you want to use it in internal apps, you’ll have to pay $799. The enterprise and OEM license prices are available on request, but I can assume that they are even higher.\n\nUseful resources: documentation, samples, YouTube channel\n\n Trial version: AnyGantt\n\n Price: $49 for pre-revenue startups, from $799 for internal apps\n\nThe Kendo UI for jQuery library by Telerik provides a variety of UI components for implementing various functionalities on the client side, including Gantt charts. For displaying all necessary project planning info, the layout of the jQuery Gantt chart consists of two standard sections - GanttList and Timeline.\n\nThe GanttList section is an extended version of Kendo’s TreeList widget that inherits most of its capabilities and shows tasks, resources, owners, dates, and all other important data in a tabular form. If necessary, you can apply extra editing, filtering, expanding/collapsing, and visibility attributes to grid columns.\n\nUsing Gantt templates, it is not a problem to add new types of content in columns (e.g. images of task owners). The Timeline section serves for illustrating tasks with their duration and dependencies on different timescales (day, week, month). End-users can perform various operations on tasks such as rescheduling, deleting, editing, or changing dependencies between tasks.\n\nBeing a part of the Kendo UI for jQuery library, this jQuery Gantt supports all of its basic features. You can take advantage of customizable stock themes, DataSource library, exporting to PDF and Excel, and accessibility features.\n\nAll in all, I consider this Gantt component a decent investment only for building project management apps based on the Kendo UI library.\n\nUseful resources: documentation, samples, \n\n Trial version: Kendo UI for jQuery\n\n Price: from $899 (for the full package of Kendo UI components)\n\nThe Visual Scheduling Widget (VSW) is a jQuery Gantt component developed by Netronic to facilitate the integration of a multifunctional scheduling chart into enterprise applications. The user interface of this widget seems a bit old-fashioned and cumbersome, but still, there is an extensive function package for managing complex projects.\n\nA timescale is an essential part of any Gantt chart that should be flexible and easy to use, therefore the VSW widget allows changing this parameter dynamically. Resource management is another important feature of modern Gantt charts and VSW gives the possibility to detect resource capacity conflicts by embedding a histogram right in chart rows.\n\nWhen complex projects are split into smaller and more manageable subprojects, VSW will continue visualizing dependencies in a clear manner. Much of multi-level hierarchical data may be confusing for users, therefore VSW provides built-in animations for clarifying what’s happening on the screen. All unscheduled tasks and unassigned resources can be put together in the additional table (backlog) and simply dragged into the Gantt chart when needed.\n\nThe Visual Scheduling Widget (VSW) offers a great variety of possibilities for managing projects of any complexity via Gantt charts, but it may seem overpriced even for well-funded teams.\n\nDayPilot Pro for JavaScript is a JavaScript library comprising scheduling web components for business-oriented solutions. And as you probably guessed, it includes the Gantt component for visualizing different project management scenarios.\n\nDayPilot Gantt allows implementing essential features required for planning and managing project tasks: task types (regular, milestones, task groups), progress bars, bubble tooltips, context menus, etc. The Gantt component is fully customizable, thus you’ll be able to fine-tune Gantt elements to your liking. It also supports full CSS styling. The Gantt chart performance is optimized to process large data sets with the progressive rendering of rows, tasks, and cells during scrolling. If needed, Gantt charts can be saved as images in SVG, PNG, and JPEG formats.\n\nDayPilot offers two useful auxiliary tools for working with the library’s components. The CSS Theme Designer helps to build CSS themes for Gantt and other DayPilot components using the online WYSIWYG editor. The UI builder is used to quickly configure the Gantt UI and generate a downloadable project.\n\nThe Gantt component from DayPilot includes common features required for conveniently scheduling your projects. But I think that it can be a good option only if you need other project management tools included in the DayPilot Pro for JavaScript library (Scheduler, Event Calendar, and Monthly Calendar). The cheapest license option includes only 6 months maintenance subscription and it is not renewable.\n\nUseful resources: documentation, samples, tutorials, DayPilot knowledge base\n\n Trial version: DayPilot Pro for JavaScript\n\n Price: from $549 (for the full package of DayPilot components)\n\nDevExtreme Gantt is one of the latest additions to the collection of enterprise-specific UI widgets developed by DevExpress for building standard web and mobile apps. But it already has a standard set of features for managing project task flows and their dependencies over a certain period of time.\n\nThe DevExtreme Gantt component gives the possibility to avoid issues in task dependencies by defining your own validation rules. Filtering, sorting, and zooming features simplify the work with large Gantt charts. You can also display tasks in different time intervals (from hours to years) and highlight particular time spans in the timeline with strip lines. Moreover, it already allows making resource assignments. You are able to export the Gantt content to a PDF document.\n\nThis JavaScript widget also provides multiple customization capabilities. For example, you can play around with the general chart appearance (via settings or customizable themes), use templates for changing individual tasks, add custom controls to the toolbar, and adjust context menus.\n\nDevExtreme Gantt is a new product that currently lacks many useful features. So I would not hurry to spend money on it but rather give it time to become more mature (unless you are interested in other DevExtreme components as well).\n\nUseful resources: documentation, samples, blog, YouTube channel\n\n Trial version: DevExtreme\n\n Price: from $499 (for the full package of DevExtreme widgets)\n\nHighcharts Gantt is a JavaScript library built by Highsoft on top of the company’s popular charting library named HighchartsJS and in close collaboration with clients.\n\nIn Highcharts Gantt, many commonly used features such as task dependencies, milestones, progress indicators, etc. are available by default. When dealing with big tasks, it is possible to split them into smaller subtasks and group resources and manipulate items in the timeline with simple drag-and-drop actions.\n\nThis Gantt component displays well on devices of any size and supports navigation with touch gestures, a mouse, and a keyboard.\n\nWhen choosing Highcharts Gantt for your next project, you can benefit from the core features offered in all Highcharts products. Using the Highcharts export module, you can export charts to PNG, JPG, PDF, and SVG formats at the touch of a single button or print your Gantt chart right from the page. The WebGL-powered boost module will help to render big data. The Highcharts Debugger is one more instrument that will help to detect errors in your code and accelerate the development process.\n\nHighcharts Gant goes as an additional product to the HighchartsJS charting library, which is included in all license types. Taking into account this fact and current prices, this Gantt can be a viable option in projects where other types of charts from HighchartsJS are also necessary.\n\nUseful resources: documentation, samples, tutorials, YouTube channel, GitHub repository\n\n Trial version: HighCharts Gantt\n\n Price: for internal use - from $182 (annual license), from $420 (perpetual license), prices for OEM license are available on request\n\nFusionCharts is a well-known brand in the field of data visualization. Its flagship product FusionCharts Suite includes a wide variety of simple and complex charts. It also addresses the issue of creating a basic Gantt chart on the web page with the corresponding widget included in the FusionWidgets XT pack.\n\nThe Gantt widget does not support sophisticated features such as critical path calculation or auto-scheduling. But it still offers some useful things to help teams visually plan and track projects. The Gantt structure may include any number of additional columns for displaying extra parameters such as project resources. You can complement your Gantt chart with milestones, progress indicators for each task, trendlines to highlight specific dates ( \"Today\", \"Holiday\",etc.), tooltips, annotations, legends, and more. It is possible to ensure a consistent look of your chart using predefined themes and customize them if needed.\n\nThere are also other customization opportunities for this Gantt widget. The main Gantt elements (grid table, cells, dependency links, date formats) and additional timeline items (tooltips, milestones, legends, labels) can be adjusted to your requirements. The exporting feature will help to save your Gantt projects in JPG, PNG, SVG, and PDF formats.\n\nThis Gantt chart may be a nice option if you are building a dashboard displaying project data in a variety of ways. However, it lacks the major Gantt features necessary for full-fledged project management apps.\n\nUseful resources: documentation, samples, YouTube channel, GitHub repository\n\n Trial version: FusionCharts Suite \n\n Price: from $499 (annual), from $1,299 (perpetual) (prices are indicated for the full package of FusionCharts widgets)\n\nJSCharting is a JavaScript library that offers a way to add different types of charts to a web application, plus Gantt charts (JSGantt).\n\nThe Gantt chart interface may include some common elements for working with tasks as well as more advanced capabilities. For example, it is possible to calculate a critical path, apply auto-scheduling, add task completion indicators, etc. JSGantt is rendered with SVG and HTML5 in all major browsers. All project data can be loaded in the chart from JSON or the user’s database. Simple JavaScript settings allow configuring your Gantt chart as needed.\n\nYou can also count on a variety of general features available for all chart types included in JSCharting. The library is touch and mobile optimized, complies with the main accessibility standards, provides an official export server, supports various globalization and internationalization features, advanced visuals, etc.\n\nJust like with Fusioncharts, this Gantt is too basic to purchase it for a complex project management solution. But it can be a fine choice if you are looking for a collection of charts, where Gantt is just one of the data visualization options you need.\n\nUseful resources: documentation, samples, \n\n Trial version: JSCharting (+JSGantt)\n\n Price: from $995 (for the full package of JSCharting components)\n\nThe gantt-schedule-timeline-calendar (GSTC) is a JavaScript component that can be used in business apps as a universal planning solution. It brings together four tools commonly used in companies all over the world for arranging their day-to-day activities. At the moment, we are primarily interested in the Gantt part of this product.\n\nThe Gantt interface can contain movable and resizable items, collapsible and expandable groups of tasks, multiple items in one row, sortable and searchable list columns, etc. One of the main strengths of GSTC is its elasticity i.e. almost any part of the component from the DOM tree to logic can be adjusted to your requirements with config, state, and custom plugins. It is also not a problem to add any third-party libraries. The HTML Gantt content is modifiable via templates and slots. The use of BEM-based CSS rules makes it easier to change the appearance of your Gantt chart. Moreover, the component is mobile-ready and should perform well with large datasets.\n\nGSTC may not include some advanced features, but it is a four-in-one tool that can also be extended with custom plugins. Thus, GSTC may be a noteworthy instrument for building multi-faceted project management apps.\n\nIf you work on a non-commercial project with a limited budget, one of the following open source Gantts may suit you.\n\nGoogle Charts is a popular data visualization service with a rich selection of data visualization types, and a Gantt chart is one of them. The arsenal of functional capabilities for this chart type is not very diverse, but it provides everything you need for tackling common project management tasks. The Google Charts API comes with a range of configuration options, methods, and events for organizing your Gantt chart in the desired way. Charts are rendered in the browser using SVG technology.\n\nYou can set and edit the main parameters related to the timeframe of project tasks (start/end/duration). If any of these values are not specified by a user, they will be calculated automatically. The Gantt timeline can be displayed with or without dependency arrows. The Gantt chart built with Google displays relevant data on each task via tooltips. Depending on the Gantt configuration, the tooltip content may include the task timing, completion status (in %), project resources, and the presence of a given task on a critical path. Tasks dedicated to a particular area of the project can be combined into groups with resources. Styling settings allow depicting Gantt elements (tracks, dependency lines, critical path) in different colors.\n\nFrappe Gantt is an open source JavaScript library that serves for incorporating simple, interactive Gantt charts into web projects. From the standpoint of functionality, this free-to-use tool does not provide anything fancy, but it still supports some basic features for accurate planning and handling of projects.\n\nIt allows users to create tasks, change their schedule and duration with drag-and-drop, add dependency lines, and review extra information on tasks via tooltips. You can add multiple timescales to the chart. The list of possible options includes Quarter Day, Half Day, Full Day, Week, and Month. There are also some customization opportunities such as changing the tooltip content with custom HTML, modifying the appearance of task bars and dependency lines, and setting the default timescale. It should be noted that Frappe Gantt has two dependencies: momentjs and snapsvg.\n\nTwproject Gantt is an online JavaScript Gantt chart editor engineered by Open Lab as a stand-alone part of a more complex solution (Twproject) for visually planning and tracking projects. Based on jQuery, this tool helps to create an informative Gantt chart with the indication of core parameters such as assignments, dependencies between them, statuses of tasks, and milestones that can be edited at any moment.\n\nAt a more advanced level, the editor allows calculating a critical path to avoid bottlenecks and take care of project resources to ensure their balanced allocation. You can also use progress lines to see whether tasks are behind or right on schedule and compare the current state of the project with the initial plan using baselines. The print option allows saving the current Gantt project in PDF format. This product can be a good choice for those who have some prior experience with MS-Project.\n\nMermaidJS is a JavaScript library for dynamically generating popular types of charts and diagrams such as flowcharts, UML diagrams, pie charts, and of course, Gantt charts. When implementing a Gantt chart with Mermaid, you can set the margins for rendering the chart, split its structure into different sections, and define a date format. It supports common features required for managing tasks such as milestones, dependency lines, non-working days, \"today\" markers, etc. You can also leave comments within your Gantt chart - and the parser will ignore them.\n\n\n\n The Gantt appearance is modified by using customizable themes and defining a number of CSS classes. There are 3 rendering options for your Gantt chart: SVG, PNG, or a Markdown link that can be inserted into docs. Even people without any coding background can create a Gantt chart and other diagrams using the Mermaid Live Editor. Interestingly, GitHub added native support for Mermaid in order to help developers quickly generate diagrams in their open source projects.\n\nAs you can see, there are plenty of commercial as well as open source JavaScript Gantt libraries. And now the hardest part - choosing the right tool for your project. I just provided general information on the functional capabilities of Gantts available out there. What to do next? You should certainly get acquainted with the technical part of all products by using useful resources added for each of them. While pricing and licensing may not be the ultimate driver in your decision, these are still important factors to consider and I shared my thoughts on this matter for each commercial Gantt. And, of course, you cannot make the final decision without practical testing of tools that seem appealing to you."
    },
    {
        "link": "https://bryntum.com/blog/top-5-javascript-gantt-chart-libraries",
        "document": "Looking for a Gantt chart library to use in your project management app? You’ll want to consider how easy a […]\n\nLooking for a Gantt chart library to use in your project management app?\n\nYou’ll want to consider how easy a library is to get started with, what features it offers, and what it costs.\n\nWe compare five common libraries for creating Gantt charts and give you a list of pros and cons for each. We’ll look at the following libraries:\n\nThe Bryntum suite of commercial JavaScript web components for project management and resource scheduling includes Bryntum Gantt, which is easy to use with popular frontend frameworks like React, Vue, and Angular. Bryntum has a good selection of demos that show you how to use their products as web components and help you integrate Bryntum components with PHP or ASP.NET backends, Ionic for mobile app development, and Salesforce.\n\nYou have two options to install the Bryntum Gantt library:\n• Download the package and use the source files.\n\nTo install the Bryntum Gantt component using npm, you need to get access to the private Bryntum npm registry. Follow the Access to npm registry guide in the Bryntum docs to do so. Once you’ve logged in to the registry, install the Gantt component by following the guide here.\n\nTo make a Bryntum Gantt chart, you create an instance of the Gantt chart object and pass in a configuration object to the constructor function. The configuration determines what the Gantt chart looks like and where it gets data from:\n\nThe property is the DOM element that the Gantt chart will be added to as a child. The determines the layout of the timeline view and headers. The property allows you to modify the timeline headers. The property is used to define the data column on the left side of the Gantt.\n\nTo style the Gantt, you can use one of five themes. For example, you can import the Stockholm theme in your CSS file:\n\nYou can modify the themes or create your own custom theme.\n\nBasic Bryntum Gantt data consists of tasks and dependencies. You use the Bryntum Crud Manager to get and sync data changes with a backend. The Crud Manager uses AJAX for fetching and posting data and JSON for encoding data. You can configure the Crud Manager in the property of the Gantt configuration object. For example, in the code below, the property is used to populate the Gantt chart data stores:\n\nYou can configure to sync data changes to a specific URL. For more information, read the project data guide in the Bryntum docs.\n\nYou don’t have to use the Bryntum Crud Manager for data fetching in your Bryntum Gantt. Other methods are available, such as binding existing data to a component.\n\nBryntum Gantt has a lot of functionality out of the box, such as adding, editing, and deleting tasks and dependencies. The component is highly customizable and has extensive documentation that includes live code demos. Advanced features of Bryntum Gantt include:\n• Export and import from Microsoft Project and Primavera P6.\n• Easy integration with other Bryntum project management tools, like Bryntum Task Board.\n\nTake a look at a summary of the Bryntum Gantt features here and view demos of the features here.\n\nBryntum has an active blog where you can read tutorials like How to visualize your Google Sheets data with Bryntum Gantt and customer experiences of using Bryntum components.\n\nThe Bryntum Gantt chart is built with JavaScript ES6+, has no external dependencies, and uses a super-fast rendering engine, making it a performant option for your Gantt chart, even when working with large datasets.\n\nYou can purchase Bryntum components individually or as a discounted bundle. The Bryntum Gantt license starts at $900 per developer, and there are different licenses for small teams, large teams, non-commercial use, and commercial use. The internal, non-commercial EUL license is perpetual and includes free upgrades for one year and forum support. Discounts are offered for charity, environmental, and educational work, as well as for start-ups. Sign up for a free 45-day Bryntum trial here.\n\nBryntum Gantt offers a range of benefits that are ideal for the use in enterprise-grade applications:\n• The Bryntum suite of components have detailed documentation with live code examples and blog post tutorials.\n• A range of demos for Bryntum Gantt and other Bryntum components include source code and tips for integrating with various frameworks. You can search the Bryntum demos page by frontend framework or features, or using a text search.\n• Bryntum Gantt is highly customizable with a wide range of advanced features.\n• Bryntum Gantt is a high-performance library well suited to large datasets.\n• The luxurious Bryntum Gantt UX is a step above its competitors’. The Bryntum UI is clean and focused on critical project information so that you don’t lose essential tasks in customization options or large datasets.\n\nBryntum Grantt is built with both the developer and end user in mind, with a sleek, modern design that makes it a breeze to visually assign tasks and navigate intricate projects. Features like drag-and-drop resource allocation and instantaneous project management recalculations add value to the component that’s hard to beat.\n\nIf you only need a simple Gantt chart, Bryntum Gantt may be an expensive option.\n\nDHTMLX has a number of commercial web components for project management, data analysis, and content management. You can use the DHTMLX Gantt library with popular frontend frameworks React, Vue, and Angular, and the DHTMLX website hosts demos, documentation, and tutorials for various server-side integrations such as with Salesforce, PHP, Node, ASP.NET, and Ruby on Rails.\n\nYou have two options to install the DHTMLX Gantt library:\n• Download the package and use the source files.\n\nTo create a basic Gantt chart with DHTMLX Gantt, initialize the Gantt in an HTML container using the method. You can configure the look of the Gantt chart using the and properties. In the code example below, we define two columns for a Gantt chart:\n\nThe column adds a column with a “+” sign, which you use to create a new task. The and definition code should be above the Gantt initialization.\n\nStyle the Gantt using one of the eight DHTMLX Gantt skins. For example, you can import the default “Terrace” skin in your CSS file:\n\nYou can modify the skins or create your own custom skin by adjusting the CSS styling.\n\nTo load data into your DHTMLX Gantt chart, use the or methods:\n\nSync data changes to a backend using the DataProcessor API or the Gantt AJAX module.\n\nDHTMLX Gantt offers a lot of basic functionality, such as adding, editing, and deleting tasks and dependencies (or “links”, as dependencies are referred to in DHTMLX Gantt).\n\nDHTMLX Gantt is fully customizable and has substantial documentation. You can see the available features here and view demos of the features here. Advanced features include:\n• Integration with other DHTMLX project management tools, such as the DHTMLX To Do List.\n\nDHTMLX has an active blog where you’ll find tutorials like How to Create a JavaScript Gantt Chart with DHTMLX and customer spotlights detailing their experience with using DHTMLX components.\n\nThe DHTMLX Gantt chart is built with JavaScript and has no external dependencies.\n\nLicenses for DHTMLX components come with a year of support. Choose your license from the range of DHTMLX license options based on the size of your team and whether you’ll use the components in a SaaS product. A license for DHTMLX Gantt starts at $699, and you can take advantage of DHTMLX bundle offers if you’d like to use several DHTMLX components. The licensed libraries are the PRO versions. DHTMLX also has open-source standard library versions of their components that are free to use but have fewer features. You can see the differences between the standard and the PRO library features for DHTMLX Gantt here.\n• DHTMLX provides a selection of Gantt demos with source code, including integration with various frameworks. The demos page includes a text search filter.\n• DHTMLX Gantt is highly customizable with many advanced features.\n\nThe cons to DHTMLX Gantt are:\n• The predefined skins for styling DHTMLX Gantt charts look outdated and are not as attractive as the themes for the Syncfusion and Bryntum Gantt chart libraries.\n• The API docs are hard to browse.\n\nSyncFusion is a commercial UI component library for web, desktop, and mobile apps. It has UI components, including a Gantt chart, for the popular JavaScript frameworks React, Angular, and Vue. Syncfusion also supports the non-JavaScript frameworks Blazor and Flutter, which are used for frontend web development.\n\nYou have three options to install the SyncFusion Gantt:\n\nTo create a Gantt chart, you create an instance of the SyncFusion Gantt and pass in the configuration object, which determines how the Gantt will look and where it will get data from.\n\nThe property is used to define the data column on the left side of the Gantt. The method takes in the DOM element that the Gantt chart will be added to as a child.\n\nFor basic data fetching, you can use the browser fetch API and pass the data to the property:\n\nYou can use to simplify getting and syncing data from a backend:\n\nThe property is required to get task details from a data source. It maps task property names to the task property names of the data source. This allows for some variability in the structure of the data source.\n\nTo style the Gantt, import one of the theme CSS stylesheets:\n\nThere are nine themes to choose from, and you can also customize themes using the Theme Studio for Essential JS 2 GUI.\n\nThe Syncfusion Gantt chart is mobile touch-friendly, responsive, and built with accessibility in mind. It’s keyboard navigable and has WAI-ARIA accessibility support. The theme editor GUI makes for easy customization of the Gantt styling.\n\nSyncfusion has an active blog, and Syncfusion Gantt has comprehensive documentation and a demos page that shows the features of the Gantt.\n\nSyncfusion Gantt has many features that make it suitable for creating complex Gantt charts, including:\n\nSyncfusion UI components are sold as bundles. Team licenses start at $395 per month, or you can choose an annual license for a project, company, or company division. Paid-for licenses include 24-hour support, unlimited bug and feature requests, and access to remote support. There is a free community license for companies with less than $1 million in annual gross revenue, less than six developers, and that have not received more than $3 million in capital from an outside source. You can sign up for a 30-day free trial of Syncfusion, which includes the same support services as licensed customers.\n• The Syncfusion Gantt demos page includes source code and links to API documentation, and you can edit the demos on StackBlitz.\n• Syncfusion has comprehensive documentation for the Gantt component.\n• The Syncfusion Gantt is highly customizable with many advanced features.\n\nSyncfusion Gantt is an expensive choice if you don’t qualify for the community license or only want to use the Gantt chart or a few of the Syncfusion components.\n\nJSCharting is a commercial JavaScript chart library with over 150 types of charts, including Gantt. Like Frappe Gantt, JSCharting renders charts with SVG and HTML5. You can use JSCharting with the popular JavaScript frameworks React, Angular, and Vue, and it has a JSCharting PHP bundle to simplify connecting a JSCharting Gantt to a PHP backend that uses a MySQL database.\n\nYou have three options to install JSCharting:\n\nOnce you have installed JSCharting, you create a Gantt chart by creating an instance of the JS chart object using the function. The first argument of this function is the of the HTML element or the element object that this chart will be added to as a child. The second argument is the Gantt configuration object:\n\nThe property is set to for a Gantt chart. The stacked z-axis scale type makes series data points with the same x values take up the same space on the x-axis. JSCharting uses series data to represent tasks or events. Each item in the series data is a task or event with a specific start and end date.\n\nThe underscore syntax is a feature of JSCharting called code expansion that allows you to combine nested property paths into a single property name:\n\nThere are many other configuration properties, for example, to customize the legend, axes, and colors.\n\nTo fetch data, you can use the browser fetch API and pass the data to the property:\n\nJSCharting has utility functions for converting between JSON and delimiter-separated values such as CSV. You can convert data to chartable series and points with the nest object.\n\nJSCharting charts are optimized for touch screen and mobile devices, with responsive styling and good accessibility compliance.\n\nThe JSCharting Gantt chart demos page includes many examples you use as a starting point. Each demo has vanilla JavaScript source code, and you can use the JSCharting editing UI to change the demo code, as you can see in this complex Gantt chart demo. Some demos show advanced features like critical dependency paths and progress line overlays.\n\nThe JSCharting bundle license includes all 150+ chart types. The bundle costs $995 per developer and includes priority support, upgrades, and new releases for one year. You can buy the Gantt chart separately for $195 for one developer. \n\n\n\nYou can register on the JSCharting website to qualify for a free license for non-commercial use with no time restrictions. A Gantt chart created using the free JSCharting license features a small watermark icon that links to the JSCharting website.\n• The JSCharting touchscreen and mobile device optimization are a plus.\n• The JSCharting bundle includes many other charts that you may want to use.\n• You’ll find many example Gantt charts on the JSCharting demos page.\n• Because a JSCharting chart is an SVG, it’s not easy to customize, for example, changing the date rows of a chart.\n• The JSCharting Gantt is relatively simple and unsuitable for more complex Gantt charts.\n• The documentation for the JSCharting Gantt is not very detailed.\n\nFrappe Gantt is a simple, open-source Gantt chart library. Like JSCharting, Frappe Gantt renders charts with SVG and HTML5.\n\nYou can install the Frappe Gantt library using npm or Yarn. You also need to install SASS as a dependency.\n\nTo get started, create an element and give it an , then initialize a new Gantt object:\n\nThe first argument of the Gantt constructor function is the of the element that will be your Gantt chart. The second argument is the task data. The third argument is a configuration object that determines how the Gantt chart looks and functions.\n\nThe determines the view of the Gantt chart. The possible values are: “Quarter Day”, “Half Day”, “Day”, “Week”, and “Month”.\n\nYou can change using the method. You can also add event listeners or customize the HTML popup that displays when you click on a taskbar. If you want any other functionality, you’ll need to code it yourself.\n• Basic visual configuration options such as “bar_height”, “arrow_curve”, and “language”.\n\nFrappe Gantt offers is open source, free-to-use, and is a good option if you need a very basic Gantt chart.\n• The Frappe Gantt documentation is one short demo page and the GitHub repo readme.\n• Like the JSCharting Gantt chart, the Frappe Gantt chart is not easy to customize (for example, changing the date rows) because it is an SVG.\n• Frappe Gantt has a very simple API that lacks a lot of basic functionality that’s commonly used in Gantt charts, such as adding, editing, or deleting tasks. If you want extra functionality, you’ll have to build it yourself.\n• You can only use vanilla JavaScript with Frappe Gantt.\n\nBelow is a table comparing some of the features of the five Gantt chart libraries:\n\n* Only for the standard library, not the PRO library.\n\nOf the libraries we test drove, Bryntum Gantt has the most features out of the box with considered touches like summary rows and task-dependency management. Bryntum Gantt also has the most appealing UX and visual appearance, with Syncfusion coming in second.\n\nBryntum Gantt and Syncfusion Gantt both have built-in UIs to edit dependencies, but DHTMLX Gantt doesn’t.\n\nIf your budget is limited, the best free, open-source Gantt chart is the standard library version of the DHTMLX Gantt chart. Small start-ups that qualify for the free community license might prefer Syncfusion Gantt, but Syncfusion Gantt is an expensive option if you only need their Gantt chart component. Frappe Gantt is good if you want a simple Gantt chart and aren’t concerned about the UI appearance.\n\nDHTMLX Gantt was quite easy to link up with a backend, as its dataProcessor simplifies CRUD API endpoints, and there’s a single CRUD operation per API request. Bryntum Gantt and Syncfusion Gantt backend integrations use multiple CRUD operations per request, which can help improve performance.\n\nHowever, if you need to build complex Gantt charts or work with large datasets, Bryntum Gantt, DHTMLX Gantt, and Syncfusion Gantt are the most suitable options. Each library offers different features, so you’ll need to consider your requirements and check the features and demo pages of the various Gantt chart libraries to see which is most suitable."
    },
    {
        "link": "https://dlhsoft.com/GanttChartHyperLibrary/GanttChartView.html",
        "document": "GanttChartView component displays and manages tasks and dependencies using a hierarchical data grid and an attached interactive Gantt Chart accepting drag and drop operations for scheduling task bars and creating dependency lines. Supports custom appearance settings for standard, summary, and milestone tasks for the entire chart or for individual items, as needed. Responsive in <3 sec. when loading 10,000 items on modern computers.\n• var ganttChartView = document.getElementById(\"ganttChartView\"); var items = [{ content: \"Task 1\", start: new Date(…), finish: new Date(…), … }, { content: \"Task 2\", start: new Date(…), finish: new Date(…), … }, …]; items[1].predecessors = [{ item: items[0], … }, …]; … var settings = { … }; DlhSoft.Controls.GanttChartView.initialize(ganttChartView, items, settings); … ganttChartView.refresh(); Demo\n• /// <reference path='./DlhSoft.ProjectData.GanttChart.HTML.Controls.d.ts' /> import GanttChartView = DlhSoft.Controls.GanttChartView; import TaskItem = GanttChartView.Item; var ganttChartViewElement = document.getElementById(\"ganttChartView\"); var items = <TaskItem[]>[ { content: \"Task 1\", start: new Date(…), finish: new Date(…), … }, { content: \"Task 2\", start: new Date(…), finish: new Date(…), … }, …]; items[1].predecessors = [{ item: items[0], … , …]; … var settings = <GanttChartView.Settings>{ … }; var ganttChartView = GanttChartView.initialize(ganttChartViewElement, items, settings); … ganttChartView.refresh(); Demo\n• var items = [{ content: \"Task 1\", start: new Date(…), finish: new Date(…), … }, { content: \"Task 2\", start: new Date(…), finish: new Date(…), … }, …]; items[1].predecessors = [{ item: items[0], … }, …]; … $scope.items = items; $scope.settings = { … }; Demo\n• import TaskItem = GanttChartView.Item; var items = <TaskItem[]>[ { content: \"Task 1\", start: new Date(…), finish: new Date(…), … }, { content: \"Task 2\", start: new Date(…), finish: new Date(…), … }, …]; items[1].predecessors = [{ item: items[0], … }, …]; … this.items = items; this.settings = { … }; Demo\n• // Dependencies: DlhSoft.ProjectData.GanttChart.HTML.Controls, DlhSoft.ProjectData.GanttChart.React.Components var items = [{ content: \"Task 1\", start: new Date(…), finish: new Date(…), … }, { content: \"Task 2\", start: new Date(…), finish: new Date(…), … }, …]; items[1].predecessors = [{ item: items[0], … }, …]; … return <GanttChartView items={items} settings={…}>…</GanttChartView>; Demo\n• var items = [{ content: \"Task 1\", start: new Date(…), finish: new Date(…), … }, { content: \"Task 2\", start: new Date(…), finish: new Date(…), … }, …]; items[1].predecessors = [{ item: items[0], … }, …]; … var app = new Vue({ el: …, data: { items: items, settings: {…} } }); Demo\n\nTo load and present data with GanttChartView control, initialize the items collection of the component, setting up objects representing timeline tasks identified by these main fields: indentation, content, start, finish, completedFinish, isMilestone, assignmentsContent, and predecessors. Summary items are determined by checking indentation levels of subsequent items, and can be expanded or collapsed. Standard items are presented as rectangular bars, and milestones as special diamond shapes in the view. Date values of start and finish may be initialized using Date objects, but JSON-formatted string values are also supported. Completion rate of a standard item is determined by evaluating completedFinish value, representing the date and time up to which the effort is currently considered completed. By convention, assignmentsContent value may be a string that specifies the resource assignments of the item with optional allocation units in classic format: Resource 1, Resource 2 [50%]. Predecessors collection defines item dependencies and are identified by these fields: item, dependencyType, and lag. DependencyType may be finish-to-start (\"FS\"), start-to-start (\"SS\"), finish-to-finish (\"FF\"), or start-to-finish (\"SF\"). An optional lag time span (specified in milliseconds) is also supported for item dependencies. var items = [{ content: \"Task 1\", isExpanded: false }, { content: \"Task 1.1\", indentation: 1, start: new Date(year, month, 2, 8, 0, 0), finish: new Date(year, month, 4, 16, 0, 0) }, { content: \"Task 1.2\", indentation: 1, start: new Date(year, month, 3, 8, 0, 0), finish: new Date(year, month, 5, 12, 0, 0) }, { content: \"Task 2\", isExpanded: true }, { content: \"Task 2.1\", indentation: 1, start: new Date(year, month, 2, 8, 0, 0), finish: new Date(year, month, 8, 16, 0, 0), completedFinish: new Date(year, month, 5, 16, 0, 0), assignmentsContent: \"Resource 1, Resource 2 [50%]\" }, { content: \"Task 2.2\", indentation: 1 }, { content: \"Task 2.2.1\", indentation: 2, start: new Date(year, month, 11, 8, 0, 0), finish: new Date(year, month, 12, 16, 0, 0), completedFinish: new Date(year, month, 12, 16, 0, 0), assignmentsContent: \"Resource 2\" }, { content: \"Task 2.2.2\", indentation: 2, start: new Date(year, month, 12, 12, 0, 0), finish: new Date(year, month, 14, 16, 0, 0), assignmentsContent: \"Resource 2\" }, { content: \"Task 3\", indentation: 1, start: new Date(year, month, 15, 16, 0, 0), isMilestone: true }]; items[3].predecessors = [{ item: items[0], dependencyType: \"SS\" }]; items[7].predecessors = [{ item: items[6], lag: 2 * 60 * 60 * 1000 }]; items[8].predecessors = [{ item: items[4] }, { item: items[5] }]; DlhSoft.Controls.GanttChartView.initialize(ganttChartView, items, settings);\n\nEnd users may use drag and drop operations to reschedule bars, update start, finish and completion values independently, and create all types of dependencies between items directly from the Gantt Chart area, besides editing values in the attached data grid. MoveItem, moveItemUp, moveItemDown, and moveItemHierarchy operations allow moving specific items in the hierarchy, with or without child items. You may even add a special icon column to allow visual drag and drop operations for moving items around. We have designed the component to achieve maximum runtime performance, loading and displaying thousands of items while remaining highly responsive. Item loading is always asynchronous as the control has the virtualization feature (isVirtualizing field) turned on by default.\n\nYou may configure timeline duration, visible and working days and hours, scales, update interval (for drag and drop operations), and zoom level (width of an hour) in the view. The component can further be zoomed in and out by moving the mouse wheel. Special nonworking days may be defined as a simple array of Date objects. You can also configure working and nonworking time for individual items, when needed, using Schedule objects. Actually, a general calendar may also be provided this way, by setting the schedule field of the component settings. An individual item may have more or less working time than configured at view level, and therefore they will behave differently when setting start and finish values, including when using drag and drop update operations.\n\nBesides data visualization features, the component offers built-in computation functions such as getItemDuration, getItemEffort, getItemCompletedEffort, getItemCompletion, getItemCost, etc., project management algorithms such as baseline initialization and visualization, auto scheduling, critical path enumeration, work optimization, and allocation and resource leveling, optionally based on pre-initialized generic or individual resource usage costs and material resource quantities. Circular dependencies are accepted by default, but are detected and removed automatically if you enable dependency constraints. Gantt Chart component supports loading and saving data in Microsoft Project® XML format by using loadXml and getXml methods a ProjectSerializer instance, allowing you to import and export Microsoft Project® compatible content with ease. Moreover, ProjectSerializer settings offers support for further customizing the way actual loading and saving operations occur, allowing you to inject custom code for XML parsing and generation with handler methods on specific events. If your solution has a server side tier based on Microsoft® .NET, you can also use DlhSoft's ProjectManagementXlsx Adapter API (open source) to generate Excel® files from Project XML formatted content and share task information with more ease. And, of course, you import tasks from an Excel® sheet through Microsoft® Project XML format back into a Gantt Chart component, too. Excel® serialization support is available as well through a separate NuGet package. The adapter requires a license for Project Management Framework. Hyper Library licensees can order a free license for the secondary product. Converter demo\n\nThe component is persistence layer and transport independent, so you can load and save data items from and to any data source, including but not limited to SQL Server® databases, and transport it between the server and client in any custom way. For example, you may use ASP .NET MVC and WebAPI, node.js, or PHP on the server side to generate clean user interface and communicate data to and from the client side using REST services, and initialize and run the component on client side with pure JavaScript® code. DlhSoft JavaScript® code doesn't rely on external dependencies and therefore the component works virtually on any platform – desktop or mobile – and in any type of HTML application – client side, server side, or standalone. SQL Server® + WebAPI node.js PHP LightSwitch® Windows® Store app (UWP) Cordova™ You may customize the column collection of the grid by resetting it or by adding and removing built-in columns and optionally defining new ones using JavaScript® functions initialized as column.cellTemplate. You may also filter items out hierarchically by setting item.isHidden values to true and refreshing the user interface. To be notified when items managed by the component change either by editing grid cells or within the chart area, simply provide a handler function for settings.itemPropertyChanged. Demo\n\nYou may fully customize item appearance, either for the entire chart or for individual entries in the view, using CSS class mappings such as settings.standardBarClass, summaryBarClass, etc. (similar inline style settings are also available, if needed). Moreover, you may easily configure alternativeItemClass and alternativeChartItemClass settings for the grid and chart areas, and item.class and item.barClass fields also apply to the elements of any individual item that needs to be highlighted in the view. When you need to develop advanced features in your timeline based application, chart bars may be fully redesigned using JavaScript® functions that generate SVG content set up as standardTaskTemplate, summaryTaskTemplate, and milestoneTaskTemplate settings of the component. Or, if you only want to add content on top of the default display, define extraTaskTemplate function instead.\n\nIf your solution has a server side tier based on Microsoft® .NET, you can get XML data from the HTML component and send it to GanttChartExporter component available with DlhSoft Project Management Framework, allowing you to export Gantt Chart images for that data, such as using PNG encoding, and redirect the client side to display or download the image bytes directly from there. The XML data to be passed to the exporter extension is obtained by calling getXml method of the ProjectSerializer component. Hyper Library licensees can order a free license for Project Management Framework (or, for JavaScript® server scheduling, for Project Management Hyper Framework instead.) Demo"
    },
    {
        "link": "https://dhtmlx.com/docs/products/dhtmlxGantt",
        "document": "Overhauled Themes and New Dark Theme, Manually Scheduled Summaries, Built-in Baselines, and More in DHTMLX Gantt 9.0\n\nThousands of projects worldwide are managed with tools based on DHTMLX Gantt.\n\nDHTMLX Gantt enables end-users to allocate multiple resources, like personnel and facilities, to projects and tasks. It also helps to adjust the assignments accurately with the help of various load charts and histograms. It is possible to highlight the minimum duration of an entire project and determine the most vital tasks due to the built-in critical path calculation in DHTMLX Gantt. Moreover, the chart allows displaying the slack time and setting the lag and lead times. The DHTMLX JavaScript Gantt chart library includes automatic scheduling functionality. If an end-user changes the duration of a particular task, the auto-scheduling extension updates all due dates automatically, taking into account task dependencies. It is an indispensable tool for external integration with complex CRM or ERP systems, real-time collaboration with many people working simultaneously on the same timeline, and clientless integrations with calculations based on calendars and links performed on the fly. It is a standalone module that you can install locally to export Gantt charts of any size to PDF and PNG formats without the need to send your data to our server. In addition to PDF and PNG, it provides the ability to convert Gantt projects to iCal and Excel files. You can also deploy an export module for MS Project and Primavera P6 on your server. This module serves to export and import Gantt data to the most popular project management formats securely. The DHTMLX JavaScript Gantt chart supports diverse drag-and-drop operations. End-users can move several tasks, create tasks from scratch, and reorder columns in the grid with the help of drag and drop. Developers can control all the behavior via API. Due to a keyboard navigation mode, end-users are free to manage all tasks right in the grid via inline editing. Keyboard shortcuts allow the creation and update of project tasks and their relations. You can add tooltips to any DHTMLX Gantt elements like tasks, connectors, milestones, or anything else. Tooltips can contain any information you need. You can fully customize their appearance and behavior to meet your requirements.\n\nEven if you are not a JavaScript expert, starting your work with our HTML5 Gantt control is straightforward. You can quickly initialize it with a few lines of code and equip it with the desired features in no time. Guides, demos, and video tutorials have got you covered. Full-featured out of the box DHTMLX Gantt is the most complete JavaScript Gantt chart library for project management. It has all the necessary functionality including different task types, scheduling techniques, and resource management. Besides, it is beautiful out of the box. A rich and flexible API allows you to configure each and every JS Gantt chart element: customize time scale, define grid structure, style task bars, fine-tune editing form, and add any kind of custom HTML content. Robust and flawless performance is the key criterion for large projects with thousands of tasks. You can load any number of tasks to the JavaScript Gantt component and it will render them smoothly due to smart rendering and dynamic loading. DHTMLX Gantt is cross-browser and works in Chrome, Firefox, Safari, IE11, and all Chromium-based browsers (e.g., Microsoft Edge, Opera, Vivaldi). Being pure JS, our Gantt chart is compatible with any front-end and back-end technologies. Download the DHTMLX Gantt trial version and evaluate it free of charge for 30 days benefiting from the official technical support of our team.\n\nThe open source version of DHTMLX Gantt (Standard Edition) is distributed under the GPL v2.0 license. If you have an open-source project licensed under a GPLv2-compatible license and do not need PRO features, you may use DHTMLX Gantt Standard Edition for free. This version does not come with official technical support, but you can access assistance through the community forum."
    },
    {
        "link": "https://github.com/topics/gantt-chart?l=javascript&o=desc&s=updated",
        "document": "A streamlined Salesforce Lightning Web Component for visualizing project timelines and resource allocations in a Gantt chart format. Forked and simplified from the Salesforce Labs GanttChart repository, this version serves as the perfect starting point for building custom Gantt chart functionality, including filtering, drag-and-drop, and more."
    },
    {
        "link": "https://medium.com/@AlexanderObregon/beginners-guide-to-creating-dynamic-forms-with-javascript-10aef6a8843d",
        "document": "Dynamic forms are a powerful feature of modern web applications, enabling users to interact with complex and customizable interfaces. With JavaScript, you can build and validate dynamic forms that respond to user input, providing a seamless and intuitive experience. This article will guide you through the basics of building and validating dynamic forms using JavaScript, including form handling and validation techniques.\n\nDynamic forms are web forms that can change their structure, content, or behavior dynamically based on user interactions. For instance, a form might initially ask for a user’s basic information and then, based on their answers, reveal additional fields that are relevant to their specific situation. This approach minimizes the clutter of unnecessary fields and creates a more streamlined and user-friendly experience.\n• Improved User Experience: By responding to user input, dynamic forms provide a more intuitive and engaging interface. Users are only presented with relevant fields, reducing confusion and frustration.\n• Efficiency in Data Collection: Dynamic forms can tailor their questions based on previous answers, ensuring that users provide all necessary information without overwhelming them with irrelevant fields.\n• Flexibility and Scalability: Dynamic forms can be easily updated or expanded to accommodate new requirements or workflows without the need to redesign the entire form.\n• Improved Data Accuracy: By guiding users through a more logical and structured input process, dynamic forms can help reduce errors and omissions.\n\nDynamic forms are used in a variety of scenarios across different industries:\n• E-commerce: Dynamic forms can tailor product recommendations, shipping options, and payment methods based on user selections.\n• Surveys and Feedback Forms: Questions can adapt based on previous answers, making the survey process more efficient and relevant.\n• Job Applications: Application forms can present different sections or questions based on the position being applied for or the applicant’s background.\n• Event Handling: This refers to the process of using JavaScript to listen for and respond to user actions, such as clicks, input changes, or form submissions. Event handlers are the foundation of dynamic form behavior.\n• DOM Manipulation: The Document Object Model (DOM) represents the structure of an HTML document. Using JavaScript, you can dynamically add, remove, or modify elements within the DOM to update the form in real-time.\n• Validation: Ensuring that user input meets specific criteria before allowing form submission is crucial for maintaining data integrity. JavaScript provides various methods for implementing both basic and advanced validation techniques.\n\nTo build a dynamic form, you’ll typically start with a basic HTML structure, then use JavaScript to add the dynamic functionality. Here are some initial steps to consider:\n• Define the HTML Structure: Start by creating the basic form layout in HTML. This includes the form element itself, input fields, and any initial buttons or labels.\n• Add JavaScript for Event Handling: Use JavaScript to listen for user actions, such as clicking a button to add a new field or selecting an option from a dropdown menu.\n• Implement DOM Manipulation: Write JavaScript code to dynamically modify the form’s structure in response to user interactions. This might involve adding new input fields, changing field labels, or removing elements.\n• Incorporate Validation: Make sure that all the user input is validated before the form is submitted. This can be done using simple checks (e.g., required fields) or more complex logic (e.g., pattern matching for email addresses).\n\nConsider a registration form for an event. The form might initially ask for basic information such as name and email address. If the user indicates that they have dietary restrictions, additional fields for specifying those restrictions can be dynamically added to the form. This approach keeps the initial form simple and uncluttered, only presenting additional fields when they are relevant.\n\nCreating dynamic forms with JavaScript involves a few fundamental steps: defining the HTML structure, writing JavaScript to handle user interactions, and manipulating the DOM to update the form dynamically. In this section, we will cover each of these steps in detail and provide practical examples to help you get started.\n\nThe first step in building a dynamic form is to define the basic HTML structure. This involves creating a form element with some initial input fields and buttons. Here’s an example of a simple HTML form:\n\nIn this example, we have a form with one text input field and a button labeled “Add Field”. The button will be used to add new input fields dynamically.\n\nTo add new fields dynamically, we need to write JavaScript that listens for user interactions and manipulates the DOM accordingly. The following JavaScript code demonstrates how to add a new input field each time the “Add Field” button is clicked:\n\nThis script listens for a click event on the “Add Field” button. When the button is clicked, it creates a new element with the class \"form-group\", adds a new text input field to the , and then appends the to the form.\n\nTo provide even more flexibility, you might want to allow users to remove fields they have added. Here’s how you can add a “Remove” button next to each dynamically added field:\n\nIn this code, a “Remove” button is created alongside each new input field. When the “Remove” button is clicked, it removes the corresponding element from the form.\n\nDynamic forms can also include different types of input fields, such as dropdowns, checkboxes, or radio buttons. Here’s an example of how to add a dropdown menu dynamically:\n\nThis script adds a new dropdown menu with two options each time the “Add Field” button is clicked. You can customize the options and the behavior of the dropdown as needed.\n\nFor more complex forms, you might need to handle nested fields, conditional fields, or dynamically generated sections. Here’s an example of how to add a section of fields dynamically:\n\nIn this example, a new containing multiple input fields is added each time the \"Add Section\" button is clicked. This approach is useful for grouping related fields and creating more structured forms.\n\nBy combining these techniques, you can build dynamic forms that are highly interactive and adaptable to a wide range of user inputs and scenarios.\n\nValidation is a critical aspect of form handling, ensuring that the data entered by users meets the required criteria before submission. This step helps maintain data integrity, prevents errors, and improves the overall user experience. In this section, we will discuss various techniques for validating dynamic forms using JavaScript.\n\nTo make sure that all the required fields are filled, you can loop through the form’s input elements and check their values. Here’s an example:\n\nIn this code, the function checks each text input field in the form. If any field is empty, it sets the border color to red and returns , preventing the form from being submitted.\n\nFor fields that require specific formats, such as email addresses, you can use regular expressions to validate the input. Here’s an example of validating an email field:\n\nIn this example, the function uses a regular expression to check the format of the email address. If the email is invalid, it highlights the email field in red and prevents the form from being submitted.\n\nConditional validation is useful when certain fields are only required based on the values of other fields. For example, you might want to validate a secondary phone number field only if the user has entered a primary phone number.\n\nIn this example, the secondary phone number field is validated only if the primary phone number field is not empty. If the secondary phone number is required but not provided, the form will not be submitted, and an alert will be displayed.\n\nCustom validation rules can be implemented to enforce specific business logic. For instance, you might want to make sure that a user’s age is within a certain range or that a password meets complexity requirements.\n\nThis example validates that the user’s age is a number between 18 and 65. If the age is outside this range, the form will not be submitted, and an alert will notify the user.\n\nReal-time validation provides immediate feedback to users as they fill out the form. This approach improves the user experience by allowing users to correct errors as they occur.\n\nIn this code, real-time validation is applied to all text input fields. The border color of each field changes based on whether the input is valid. For the email field, the border color updates based on the email’s validity as the user types.\n\nBy combining these validation techniques, you can make sure that your dynamic forms are both user-friendly and strong, providing immediate feedback and enforcing all necessary validation rules before submission.\n\nDynamic forms are an important feature of modern web applications, providing users with interactive and responsive interfaces. By leveraging JavaScript for event handling, DOM manipulation, and validation, you can create forms that adapt to user input, improving the overall user experience and ensuring data accuracy. The techniques and examples provided in this article offer a solid foundation for building and validating dynamic forms.\n\nThank you for reading! If you find this article helpful, please consider highlighting, clapping, responding or connecting with me on Twitter/X as it’s very appreciated and helps keeps content like this free!"
    },
    {
        "link": "https://stackoverflow.com/questions/62538001/how-to-make-dynamic-form-in-html-based-on-previous-input-in-realtime-using-vanni",
        "document": "I have a form like this and it will generate the amount of form based on the total value that inputted in this form\n\nfor example, if the user filled the input 3 it will generate 3 new forms automatically in real-time\n\nMy application doesn't use jquery so I have to do this in vanilla js. please guide me to do this"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Sending_forms_through_JavaScript",
        "document": "When a user submits an HTML form, for example by clicking the submit button, the browser makes an HTTP request to send the data in the form. But instead of this declarative approach, web apps sometimes use JavaScript APIs such as to send data programmatically to an endpoint that expects a form submission. This article explains why this is an important use case and how to do it.\n\nWhy use JavaScript to submit form data? Standard HTML form submission, as described in our article on sending form data, loads the URL where the data was sent, which means the browser window navigates with a full page load. However, many web apps, especially progressive web apps and single-page apps, use JavaScript APIs to request data from the server and update the relevant parts of the page, avoiding the overhead of a full page load. For this reason, when these web apps want to submit form data, they use HTML forms only to collect input from the user, but not for data submission. When the user tries to send the data, the application takes control and sends the data using a JavaScript API such as .\n\nIf the server endpoint to which the web app sends the form data is under the web app developer's control, then they can send the form data in any way they choose: for example, as a JSON object. However, if the server endpoint is expecting a form submission, the web app must encode the data in a particular way. For example, if the data is just textual, it is made of URL-encoded lists of key/value pairs and sent with a of . If the form includes binary data, it must be sent using the content type. The interface takes care of the process of encoding data in this way, and in the rest of this article we'll provide a quick introduction to . For more details, see our guide to Using FormData objects.\n\nYou can populate a object by calling the object's method for each field you want to add, passing in the field's name and value. The value can be a string, for text fields, or a , for binary fields, including objects. In the following example we send data as a form submission when the user clicks a button: async function sendData(data) { // Construct a FormData instance const formData = new FormData(); // Add a text field formData.append(\"name\", \"Pomegranate\"); // Add a file const selection = await window.showOpenFilePicker(); if (selection.length > 0) { const file = await selection[0].getFile(); formData.append(\"file\", file); } try { const response = await fetch(\"https://example.org/post\", { method: \"POST\", // Set the FormData instance as the request body body: formData, }); console.log(await response.json()); } catch (e) { console.error(e); } } const send = document.querySelector(\"#send\"); send.addEventListener(\"click\", sendData);\n• We first construct a new, empty, object.\n• Next, we call twice, to add two items to the object: a text field and a file.\n• Finally, we make a request using the API, setting the object as the request body. Note that we don't have to set the header: the correct header is automatically set when we pass a object into .\n\nIf the data you're submitting is really coming from a , you can populate the instance by passing the form into the constructor. The JavaScript is as follows: const form = document.querySelector(\"#userinfo\"); async function sendData() { // Associate the FormData object with the form element const formData = new FormData(form); try { const response = await fetch(\"https://example.org/post\", { method: \"POST\", // Set the FormData instance as the request body body: formData, }); console.log(await response.json()); } catch (e) { console.error(e); } } // Take over form submission form.addEventListener(\"submit\", (event) => { event.preventDefault(); sendData(); }); We add a submit event handler for the form element. This first calls to prevent the browser's built-in form submission, so we can take over. Then we call , which retrieves the form element and passes it into the constructor. After that, we send the instance as an HTTP request, using ."
    },
    {
        "link": "https://stackoverflow.com/questions/5042086/javascript-to-generate-render-dynamic-html-form-from-json-or-similar-data",
        "document": "You can always create whatever DOM structure you like using JavaScript. Be it additional inputs or even additional elements. It then depends of course what you use on the server side to process form data and how you do that.\n\nMaybe I haven't understood the nature of your problem because you haven't explained yourself too good.\n\nExtJS is a JavaScript library that does everything on the client side. It also provides the ability to rapidly create user interface by providing Javascript configuration objects that will result in rich widget creation.\n\nYou can do lots with jQuery (and jQueryUI) as well, but it's up to you how to do it. ExtJS just has these very functionally rich and visually consistent set of client controls/widgets that you can use out of the box without much additional development (not to mention bug killing that comes along custom development).\n\nFor instance: When writing an Asp.net MVC application it's very easy to issue an Ajax call that would return HTML of so called partial view with complete HTML of your form that you can then easily display in a modal dialog for instance.\n\nIf you do need all that functionality to create a desktop-like application I suggest you do take a plunge into ExtJS because it is definitely a very good product. I've used it about 3 years ago (version 2) on some project and I was amazed by the work they've done with it. It's very feature rich product that makes it really easy to create desktop like web applications.\n\nBut if you're after a usual web site then a desktop-like experience is probably not what you should give to your visitors."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Your_first_form",
        "document": "The first article in our series provides you with your very first experience of creating a web form, including designing a simple form, implementing it using the right HTML form controls and other HTML elements, adding some very simple styling via CSS, and describing how data is sent to a server. We'll expand on each of these subtopics in more detail later on in the module. To gain familiarity with what web forms are, what they are used for, how to think about designing them, and the basic HTML elements you'll need for simple cases.\n\nWeb forms are one of the main points of interaction between a user and a website or application. Forms allow users to enter data, which is generally sent to a web server for processing and storage (see Sending form data later in the module), or used on the client-side to immediately update the interface in some way (for example, add another item to a list, or show or hide a UI feature). A web form's HTML is made up of one or more form controls (sometimes called widgets), plus some additional elements to help structure the overall form — they are often referred to as HTML forms. The controls can be single or multi-line text fields, dropdown boxes, buttons, checkboxes, or radio buttons, and are mostly created using the element, although there are some other elements to learn about too. Form controls can also be programmed to enforce specific formats or values to be entered (form validation), and paired with text labels that describe their purpose to both sighted and visually impaired users.\n\nBefore starting to code, it's always better to step back and take the time to think about your form. Designing a quick mockup will help you to define the right set of data you want to ask your user to enter. From a user experience (UX) point of view, it's important to remember that the bigger your form, the more you risk frustrating people and losing users. Keep it simple and stay focused: ask only for the data you absolutely need. Designing forms is an important step when you are building a site or application. It's beyond the scope of this article to cover the user experience of forms, but if you want to dig into that topic you should read the following articles:\n• Smashing Magazine has some good articles about forms UX, including an older but still relevant Extensive Guide To Web Form Usability article.\n• UXMatters is also a very thoughtful resource with good advice from basic best practices to complex concerns such as multipage forms. In this article, we'll build a simple contact form. Let's make a rough sketch. Our form will contain three text fields and one button. We are asking the user for their name, their email and the message they want to send. Hitting the button will send their data to a web server.\n\nOur contact form is not complex: the data entry portion contains three text fields, each with a corresponding :\n• The input field for the name is a single-line text field.\n• The input field for the email is an input of type email: a single-line text field that accepts only email addresses.\n• The input field for the message is a ; a multiline text field. In terms of HTML code we need something like the following to implement these form widgets: Update your form code to look like the above. The elements are there to conveniently structure our code and make styling easier (see later in the article). For usability and accessibility, we include an explicit label for each form control. Note the use of the attribute on all elements, which takes as its value the of the form control with which it is associated — this is how you associate a form control with its label. There is great benefit to doing this — it associates the label with the form control, enabling mouse, trackpad, and touch device users to click on the label to activate the corresponding control, and it also provides an accessible name for screen readers to read out to their users. You'll find further details of form labels in How to structure a web form. On the element, the most important attribute is the attribute. This attribute is extremely important because it defines the way the element appears and behaves. You'll find more about this in the Basic native form controls article later on.\n• In our simple example, we use the value text for the first input — the default value for this attribute. It represents a basic single-line text field that accepts any kind of text input.\n• For the second input, we use the value email, which defines a single-line text field that only accepts a well-formed email address. This turns a basic text field into a kind of \"intelligent\" field that will perform some validation checks on the data typed by the user. It also causes a more appropriate keyboard layout for entering email addresses (e.g. with an @ symbol by default) to appear on devices with dynamic keyboards, like smartphones. You'll find out more about form validation in the client-side form validation article later on. Last but not least, note the syntax of vs. . This is one of the oddities of HTML. The tag is a void element, meaning that it doesn't need a closing tag. is not a void element, meaning it should be closed with the proper ending tag. This has an impact on a specific feature of forms: the way you define the default value. To define the default value of an element you have to use the attribute like this: <input type=\"text\" value=\"by default this element is filled with this text\" /> On the other hand, if you want to define a default value for a , you put it between the opening and closing tags of the element, like this: <textarea> by default this element is filled with this text </textarea>\n\nThe markup for our form is almost complete; we just need to add a button to allow the user to send, or \"submit\", their data once they have filled out the form. This is done by using the element; add the following just above the closing tag: The element also accepts a attribute — this accepts one of three values: , , or .\n• A click on a button (the default value) sends the form's data to the web page defined by the attribute of the element.\n• A click on a button resets all the form widgets to their default value immediately. From a UX point of view, this is considered bad practice, so you should avoid using this type of button unless you really have a good reason to include one.\n• A click on a button does nothing! That sounds silly, but it's amazingly useful for building custom buttons — you can define their chosen functionality with JavaScript. Note: You can also use the element with the corresponding to produce a button, for example . The main advantage of the element is that the element only allows plain text in its label whereas the element allows full HTML content, allowing more complex, creative button content.\n\nNow that you have finished writing your form's HTML code, try saving it and looking at it in a browser. At the moment, you'll see that it looks rather ugly. Note: If you don't think you've got the HTML code right, try comparing it with our finished example — see first-form.html (also see it live). Forms are notoriously tricky to style nicely. It is beyond the scope of this article to teach you form styling in detail, so for the moment we will just get you to add some CSS to make it look OK. First of all, add a element to your page, inside your HTML head. It should look like so: Inside the tags, add the following CSS: body { /* Center the form on the page */ text-align: center; } form { display: inline-block; /* Form outline */ padding: 1em; border: 1px solid #ccc; border-radius: 1em; } p + p { margin-top: 1em; } label { /* Uniform size & alignment */ display: inline-block; min-width: 90px; text-align: right; } input, textarea { /* To make sure that all text fields have the same font settings By default, text areas have a monospace font */ font: 1em sans-serif; /* Uniform text field size */ width: 300px; box-sizing: border-box; /* Match form field borders */ border: 1px solid #999; } input:focus, textarea:focus { /* Set the outline width and style */ outline-style: solid; /* To give a little highlight on active elements */ outline-color: #000; } textarea { /* Align multiline text fields with their labels */ vertical-align: top; /* Provide space to type some text */ height: 5em; } .button { /* Align buttons with the text fields */ padding-left: 90px; /* same size as the label elements */ } button { /* This extra margin represent roughly the same space as the space between the labels and their text fields */ margin-left: 0.5em; } Save and reload, and you'll see that your form should look much less ugly. Note: You can find our version on GitHub at first-form-styled.html (also see it live).\n\nThe last part, and perhaps the trickiest, is to handle form data on the server side. The element defines where and how to send the data thanks to the and attributes. We provide a attribute for each form control. The names are important on both the client- and server-side; they tell the browser which name to give each piece of data and, on the server side, they let the server handle each piece of data by name. The form data is sent to the server as name/value pairs. To name the data in a form, you need to use the attribute on each form widget that will collect a specific piece of data. Let's look at some of our form code again: In our example, the form will send 3 pieces of data named , , and . That data will be sent to the URL using the HTTP method. On the server side, the script at the URL will receive the data as a list of 3 key/value items contained in the HTTP request. The way this script will handle that data is up to you. Each server-side language (PHP, Python, Ruby, Java, C#, etc.) has its own mechanism of handling form data. It's beyond the scope of this tutorial to go deeply into that subject, but if you want to know more, we have provided some examples in our Sending form data article later on."
    }
]