[
    {
        "link": "https://stackoverflow.com/questions/48200429/not-able-to-clone-large-repo-code-on-git",
        "document": "That looks like a curl error, typical of a slow internet connection which closes too soon.\n\nAs seen here, try a shallow clone (or switch to ssh)\n\nEven then, as I documented in 2011, you might need to raise the http.postBuffer\n\nBut the idea remains: starting with one commit depth can help.\n\nFrom there, you can gradually increase the depth:\n\nAnd, after a few iteration:"
    },
    {
        "link": "https://github.com/npm/npm/issues/9250",
        "document": ""
    },
    {
        "link": "https://docs.gitlab.com/topics/git/troubleshooting_git",
        "document": "Sometimes things don’t work the way they should or as you might expect when you’re using Git. Here are some tips on troubleshooting and resolving issues with Git.\n\nWhen troubleshooting problems with Git, try these debugging techniques.\n\nGit includes a complete set of traces for debugging Git commands, for example:\n• : enables tracing of performance data, showing how long each particular invocation takes.\n• : enables tracing of what is discovering about the repository and environment it’s interacting with.\n\n‘Broken pipe’ errors can occur when attempting to push to a remote repository. When pushing you usually see:\n\nTo fix this issue, here are some possible solutions.\n\nWhen you attempt to push large repositories with Git over HTTPS, you might get an error message like:\n• None Increase the http.postBuffer value in your local Git configuration. The default value is 1 MB. For example, if fails when cloning a 500 MB repository, execute the following:\n\nIf the local configuration doesn’t resolve the issue, you may need to modify the server configuration. This should be done cautiously and only if you have server access.\n• None Increase the on the server side:\n\nIf you see this error, it may be caused by a slow internet connection:\n\nIf you use Git over HTTP instead of SSH, try one of these fixes:\n• Increase the POST buffer size in the Git configuration with .\n• Switch to the protocol with .\n\nIf neither approach fixes the error, you may need a different internet service provider.\n\nIf pushing over SSH, first check your SSH configuration as ‘Broken pipe’ errors can sometimes be caused by underlying issues with SSH (such as authentication). Make sure that SSH is correctly configured by following the instructions in the SSH troubleshooting documentation.\n\nIf you’re a GitLab administrator with server access, you can also prevent session timeouts by configuring SSH on the client or the server.\n\nTo configure SSH on the client side:\n• None On UNIX, edit (create the file if it doesn’t exist) and add or edit:\n• None On Windows, if you are using PuTTY, go to your session properties, then go to “Connection” and under “Sending of null packets to keep session active”, set Seconds between keepalives (0 to turn off) to .\n\nTo configure SSH on the server side, edit and add:\n\nIf ‘pack-objects’ type errors are also being displayed, you can try to run a before attempting to push to the remote repository again:\n\nIn case you’re running an older version of Git (< 2.9), consider upgrading to >= 2.9 (see Broken pipe when pushing to Git repository).\n\nUsers may experience the following error when attempting to push or pull using Git over SSH:\n\nThis error usually indicates that SSH daemon’s value is throttling SSH connections. This setting specifies the maximum number of concurrent, unauthenticated connections to the SSH daemon. This affects users with proper authentication credentials (SSH keys) because every connection is ‘unauthenticated’ in the beginning. The default value is .\n\nThis can be verified by examining the host’s logs. For systems in the Debian family, refer to , and for RHEL derivatives, check for the following errors:\n\nThe absence of this error suggests that the SSH daemon is not limiting connections, indicating that the underlying issue may be network-related.\n\nIncrease on the GitLab server by adding or modifying the value in :\n\nmeans up to 100 SSH sessions are allowed without restriction, after which 30% of connections are dropped until reaching an absolute maximum of 200.\n\nAfter you modify the value of , check for any errors in the configuration.\n\nIf the configuration check runs without errors, it should be safe to restart the SSH daemon for the change to take effect.\n\nIf pulling/pushing from/to your repository ends up taking more than 50 seconds, a timeout is issued. It contains a log of the number of operations performed and their respective timings, like the example below:\n\nThis could be used to further investigate what operation is performing poorly and provide GitLab with more information on how to improve the service.\n\nIf you encounter an error like this when using Git, it usually indicates a network issue:\n\nTo help identify the underlying issue:\n• Connect through a different network (for example, switch from Wi-Fi to cellular data) to rule out local network or firewall issues.\n• Run this bash command to gather and information: . To learn about MTR and how to read its output, see the Cloudflare article What is My Traceroute (MTR)?.\n\nSometimes, when cloning old or large repositories, the following error is shown when running over HTTP:\n\nThis problem is common in Git itself, due to its inability to handle large files or large quantities of files. Git LFS was created to work around this problem; however, even it has limitations. It’s usually due to one of these reasons:\n• The number of files in the repository.\n• The number of revisions in the history.\n• The existence of large files in the repository.\n\nIf this error occurs when cloning a large repository, you can decrease the cloning depth to a value of . For example:\n\nThis approach doesn’t resolve the underlying cause, but you can successfully clone the repository. To decrease the cloning depth to , run:\n\nPassword expired error on Git fetch with SSH for LDAP user\n\nIf returns this error on GitLab Self-Managed, the password expiration date ( ) for this user in the GitLab database is a date in the past:\n\nRequests made with a SSO account and where is not return this error:\n\nTo resolve this issue, you can update the password expiration by either:\n• None Using the GitLab Rails console to check and update the user data:\n\nThe bug was reported in this issue.\n\nIf you receive an error when using Git over HTTP(S), refer to the two-factor authentication troubleshooting guide.\n\nThis error may also occur with Git for Windows 2.46.0 and later when specifying an empty username. When authenticating with a token, the username can be any value, but an empty value could trigger an authentication error. To resolve this, specify a username string.\n\nWhen cloning a repository with HTTP, the file may show an initial status of (unauthorized), quickly followed by a .\n\nYou should expect this initial log entry for each Git operation performed over HTTP, due to how HTTP Basic authentication works.\n\nWhen the Git client initiates a clone, the initial request sent to GitLab does not provide any authentication details. GitLab returns a result for that request. A few milliseconds later, the Git client sends a follow-up request containing authentication details. This second request should succeed, and result in a log entry.\n\nIf a log entry lacks a corresponding log entry, the Git client is likely using either:\n\nIf not rectified, you could encounter (Forbidden) errors instead.\n\nWhen performing Git operations over HTTP, a (Forbidden) error indicates that your IP address has been blocked by the failed-authentication ban:\n\nThe can be seen in the :\n\nIf your IP address has been blocked, a corresponding log entry exists in the :\n\nThe failed authentication ban limits differ depending if you are using a GitLab Self-Managed or GitLab SaaS."
    },
    {
        "link": "https://confluence.atlassian.com/bitbucketserverkb/troubleshooting-git-779171737.html",
        "document": "Still need help?\n\nThe Atlassian Community is here for you."
    },
    {
        "link": "https://github.com/Homebrew/brew/issues/2487",
        "document": "\n• Confirmed this is a problem with Homebrew/brew and not one or more formulae? If it's a formulae-specific problem please file this issue at https://github.com/Homebrew/homebrew-core/issues/new\n• Ran , fixed as many issues as possible and retried your prior step?\n• Ran and and included their output with your issue?\n\nGiven my problems (http://discourse.brew.sh/t/why-does-homebrew-hardcode-disable-debug-and-whats-the-right-way-to-debug/706/3) I decided to try to build from their git repo.\n\n1. This is at least a documentation bug. If Homebrew is going to do something nonstandard (shallow cloning), it ought to explain that it is doing something different and that there might be reason to question or adjust it: http://www.rubydoc.info/github/Homebrew/brew/master/GitDownloadStrategy\n\nBut there's no mention of this there or in the inherited classes. Although there's a brief allusion to the concept of shallow cloning since is defined (but not explained).\n\nFiguring out what is wrong here by source diving is a painful experience, especially for people who are not git experts and not Homebrew experts (i.e. most people).\n\n2. I would argue that the code should be different as well -- that it should give the user some guidance as to what might be wrong in the error message. Is this controversial?\n\n3. Another doc bug: The easy fix is to change the formula to:\n\nBut the option is not documented.\n\n4. Why is whitelisted? Maybe the idea of the whitelist is to avoid shallow cloning failures with GitDownloadStrategy in places where it's not known to work. Fine. But clearly URLs can generate these failures. Why is it in the whitelist?\n\nSo I see 2 doc bugs and maybe 1 code bug-or-room-for-improvement. And 1 I'm-not-sure.\n\nDo others see it differently?\n\np.s.: Before I got to these, I encountered this direction to before . Does this make sense? The install is going to be versioned differently already, right? So why is this guidance correct?:"
    },
    {
        "link": "https://git-scm.com/docs/git-config",
        "document": "The Git configuration file contains a number of variables that affect the Git commands' behavior. The files .git/config and optionally config.worktree (see the \"CONFIGURATION FILE\" section of git-worktree[1] ) in each repository are used to store the configuration for that repository, and $HOME/.gitconfig is used to store a per-user configuration as fallback values for the .git/config file. The file /etc/gitconfig can be used to store a system-wide default configuration.\n\nThe configuration variables are used by both the Git plumbing and the porcelain commands. The variables are divided into sections, wherein the fully qualified variable name of the variable itself is the last dot-separated segment and the section name is everything before the last dot. The variable names are case-insensitive, allow only alphanumeric characters and - , and must start with an alphabetic character. Some variables may appear multiple times; we say then that the variable is multivalued.\n\nThe following escape sequences (beside \\\" and \\\\ ) are recognized: \n\n for newline character (NL), \\t for horizontal tabulation (HT, TAB) and \\b for backspace (BS). Other char escape sequences (including octal escape sequences) are invalid.\n\nIf value needs to contain leading or trailing whitespace characters, it must be enclosed in double quotation marks ( \" ). Inside double quotation marks, double quote ( \" ) and backslash ( \\ ) characters must be escaped: use \\\" for \" and \\\\ for \\ .\n\nWhitespace characters surrounding name , = and value are discarded. Internal whitespace characters within value are retained verbatim. Comments starting with either # or ; and extending to the end of line are discarded. A line that defines a value can be continued to the next line by ending it with a backslash ( \\ ); the backslash and the end-of-line characters are discarded.\n\nAll the other lines (and the remainder of the line after the section header) are recognized as setting variables, in the form name = value (or just name, which is a short-hand to say that the variable is the boolean \"true\"). The variable names are case-insensitive, allow only alphanumeric characters and - , and must start with an alphabetic character.\n\nThere is also a deprecated [section.subsection] syntax. With this syntax, the subsection name is converted to lower-case and is also compared case sensitively. These subsection names follow the same restrictions as section names.\n\nSubsection names are case sensitive and can contain any characters except newline and the null byte. Doublequote \" and backslash can be included by escaping them as \\\" and \\\\ , respectively. Backslashes preceding other characters are dropped when reading; for example, \\t is read as t and \\0 is read as 0 . Section headers cannot span multiple lines. Variables may belong directly to a section or to a given subsection. You can have [section] if you have [section \"subsection\"] , but you don’t need to.\n\nSections can be further divided into subsections. To begin a subsection put its name in double quotes, separated by space from the section name, in the section header, like in the example below:\n\nThe file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are case-insensitive. Only alphanumeric characters, - and . are allowed in section names. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable.\n\nThe syntax is fairly flexible and permissive. Whitespace characters, which in this context are the space character (SP) and the horizontal tabulation (HT), are mostly ignored. The # and ; characters begin comments to the end of line. Blank lines are ignored.\n\nThe contents of the included file are inserted immediately, as if they had been found at the location of the include directive. If the value of the variable is a relative path, the path is considered to be relative to the configuration file in which the include directive was found. See below for examples.\n\nYou can include a config file from another by setting the special include.path (or includeIf.*.path ) variable to the name of the file to be included. The variable takes a pathname as its value, and is subject to tilde expansion. These variables can be given multiple times.\n\nThe include and includeIf sections allow you to include config directives from another source. These sections behave identically to each other with the exception that includeIf sections may be ignored if their condition does not evaluate to true; see \"Conditional includes\" below.\n\nNote that \"../\" is not special and will match literally, which is unlikely what you want.\n\nThis was not the case in the initial release of this feature in v2.13.0, which only matched the realpath version. Configuration that wants to be compatible with the initial release of this feature needs to either specify only the realpath version, or both versions.\n\nBoth the symlink & realpath versions of paths will be matched outside of $GIT_DIR . E.g. if ~/git is a symlink to /mnt/storage/git, both gitdir:~/git and gitdir:/mnt/storage/git will match.\n\nAs for the naming of this keyword, it is for forwards compatibility with a naming scheme that supports more variable-based include conditions, but currently Git only supports the exact keyword described above.\n\nNote that unlike other includeIf conditions, resolving this condition relies on information that is not yet known at the point of reading the condition. A typical use case is this option being present as a system-level or global-level config, and the remote URL being in a local-level config; hence the need to scan ahead when resolving this condition. In order to avoid the chicken-and-egg problem in which potentially-included files can affect whether such files are potentially included, Git breaks the cycle by prohibiting these files from affecting the resolution of these conditions (thus, prohibiting them from declaring remote URLs).\n\nFiles included by this option (directly or indirectly) are not allowed to contain remote URLs.\n\nThe data that follows this keyword is taken to be a pattern with standard globbing wildcards and two additional ones, **/ and /** , that can match multiple components. The first time this keyword is seen, the rest of the config files will be scanned for remote URLs (without applying any values). If there exists at least one remote URL that matches this pattern, the include condition is met.\n\nIf the pattern ends with / , ** will be automatically added. For example, the pattern foo/ becomes foo/** . In other words, it matches all branches that begin with foo/ . This is useful if your branches are organized hierarchically and you would like to apply a configuration to all the branches in that hierarchy.\n\nThe data that follows the keyword onbranch: is taken to be a pattern with standard globbing wildcards and two additional ones, **/ and /** , that can match multiple path components. If we are in a worktree where the name of the branch that is currently checked out matches the pattern, the include condition is met.\n\nThis is the same as gitdir except that matching is done case-insensitively (e.g. on case-insensitive file systems)\n\nIf the pattern ends with / , ** will be automatically added. For example, the pattern foo/ becomes foo/** . In other words, it matches \"foo\" and everything inside, recursively.\n\nIf the pattern does not start with either ~/ , ./ or / , **/ will be automatically prepended. For example, the pattern foo/bar becomes **/foo/bar and would match /any/path/to/foo/bar .\n\nIf the pattern starts with ./ , it is replaced with the directory containing the current config file.\n\nIf the pattern starts with ~/ , ~ will be substituted with the content of the environment variable HOME .\n\nThe pattern can contain standard globbing wildcards and two additional ones, **/ and /** , that can match multiple path components. Please refer to gitignore[5] for details. For convenience:\n\nThe .git location may be auto-discovered, or come from $GIT_DIR environment variable. If the repository is auto-discovered via a .git file (e.g. from submodules, or a linked worktree), the .git location would be the final location where the .git directory is, not where the .git file is.\n\nThe data that follows the keyword gitdir: is used as a glob pattern. If the location of the .git directory matches the pattern, the include condition is met.\n\nThe condition starts with a keyword followed by a colon and some data whose format and meaning depends on the keyword. Supported keywords are:\n\nYou can conditionally include a config file from another by setting an includeIf.<condition>.path variable to the name of the file to be included.\n\nIf a path starts with %(prefix)/ , the remainder is interpreted as a path relative to Git’s \"runtime prefix\", i.e. relative to the location where Git itself was installed. For example, %(prefix)/bin/ refers to the directory in which the Git executable itself lives. If Git was compiled without runtime prefix support, the compiled-in prefix will be substituted instead. In the unlikely event that a literal path needs to be specified that should not be expanded, it needs to be prefixed by ./ , like so: ./%(prefix)/bin .\n\nA variable that takes a pathname value can be given a string that begins with \" ~/ \" or \" ~user/ \", and the usual tilde expansion happens to such a string: ~/ is expanded to the value of $HOME , and ~user/ to the specified user’s home directory.\n\nFor git’s pre-defined color slots, the attributes are meant to be reset at the beginning of each item in the colored output. So setting color.decorate.branch to black will paint that branch name in a plain black , even if the previous thing on the same output line (e.g. opening parenthesis before the list of branch names in log --decorate output) is set to be painted with bold or some other attribute. However, custom log formats may do more complicated and layered coloring, and the negated forms may be useful there.\n\nAn empty color string produces no color effect at all. This can be used to avoid coloring specific elements without disabling color entirely.\n\nThe pseudo-attribute reset resets all colors and attributes before applying the specified coloring. For example, reset green will result in a green foreground and default background without any active attributes.\n\nThe accepted attributes are bold , dim , ul , blink , reverse , italic , and strike (for crossed-out or \"strikethrough\" letters). The position of any attributes with respect to the colors (before, after, or in between), doesn’t matter. Specific attributes may be turned off by prefixing them with no or no- (e.g., noreverse , no-ul , etc).\n\nColors may also be given as numbers between 0 and 255; these use ANSI 256-color mode (but note that not all terminals may support this). If your terminal supports it, you may also specify 24-bit RGB values as hex, like #ff0ab3 , or 12-bit RGB values like #f1b , which is equivalent to the 24-bit color #ff11bb .\n\nThe color default explicitly resets the color to the terminal default, for example to specify a cleared background. Although it varies between terminals, this is usually not the same as setting to \"white black\".\n\nThe color normal makes no change to the color. It is the same as an empty string, but can be used as the foreground color when specifying a background color alone (for example, \"normal red\").\n\nThe basic colors accepted are normal , black , red , green , yellow , blue , magenta , cyan , white and default . The first color given is the foreground; the second is the background. All the basic colors except normal and default have a bright variant that can be specified by prefixing the color with bright , like brightred .\n\nThe value for a variable that takes a color is a list of colors (at most two, one for foreground and one for background) and attributes (as many as you want), separated by spaces.\n\nThe value for many variables that specify various sizes can be suffixed with k , M ,…​ to mean \"scale the number by 1024\", \"by 1024x1024\", etc.\n\nWhen converting a value to its canonical form using the --type=bool type specifier, git config will ensure that the output is \"true\" or \"false\" (spelled in lowercase).\n\nBoolean true literals are yes , on , true , and 1 . Also, a variable defined without = <value> is taken as true.\n\nWhen a variable is said to take a boolean value, many synonyms are accepted for true and false; these are all case-insensitive.\n\nValues of many variables are treated as a simple string, but there are variables that take values of specific types and there are rules as to how to spell them.\n\nRegular expression used to match reference names. Commits pointed to by references matching this pattern (and meeting the below criteria, like and ) will be considered for inclusion in a pseudo-merge bitmap. Commits are grouped into pseudo-merge groups based on whether or not any reference(s) that point at a given commit match the pattern, which is an extended regular expression. Within a pseudo-merge group, commits may be further grouped into sub-groups based on the capture groups in the pattern. These sub-groupings are formed from the regular expressions by concatenating any capture groups from the regular expression, with a - dash in between. For example, if the pattern is , then all tags (provided they meet the below criteria) will be considered candidates for the same pseudo-merge group. However, if the pattern is instead , then tags from different remotes will be grouped into separate pseudo-merge groups, based on the remote number. Determines the rate at which consecutive pseudo-merge bitmap groups decrease in size. Must be non-negative. This parameter can be thought of as in the function , where is the size of the `n`th group. Setting the decay rate equal to will cause all groups to be the same size. Setting the decay rate equal to will cause the the size of the initial group. Higher values of the decay rate cause consecutive groups to shrink at an increasing rate. The default is . If all groups are the same size, it is possible that groups containing newer commits will be able to be used less often than earlier groups, since it is more likely that the references pointing at newer commits will be updated more often than a reference pointing at an old commit. Determines the proportion of non-bitmapped commits (among reference tips) which are selected for inclusion in an unstable pseudo-merge bitmap. Must be between and (inclusive). The default is . Determines the minimum age of non-bitmapped commits (among reference tips, as above) which are candidates for inclusion in an unstable pseudo-merge bitmap. The default is . Determines the maximum number of pseudo-merge commits among which commits may be distributed. For pseudo-merge groups whose pattern does not contain any capture groups, this setting is applied for all commits matching the regular expression. For patterns that have one or more capture groups, this setting is applied for each distinct capture group. For example, if your capture group is , then this setting will distribute all tags into a maximum of pseudo-merge commits. However, if your capture group is, say, , then this setting will be applied to each remote’s set of tags individually. Must be non-negative. The default value is 64. Determines the minimum age of commits (among reference tips, as above, however stable commits are still considered candidates even when they have been covered by a bitmap) which are candidates for a stable a pseudo-merge bitmap. The default is . Setting this threshold to a smaller value (e.g., 1.week.ago) will cause more stable groups to be generated (which impose a one-time generation cost) but those groups will likely become stale over time. Using a larger value incurs the opposite penalty (fewer stable groups which are more useful). Determines the size (in number of commits) of a stable psuedo-merge bitmap. The default is . Show blank commit object name for boundary commits in git-blame[1]. This option defaults to false. This determines the coloring scheme to be applied to blame output. It can be repeatedLines, highlightRecent, or none which is the default. Specifies the format used to output dates in git-blame[1]. If unset the iso format is used. For supported values, see the discussion of the option at git-log[1]. Show the author email instead of author name in git-blame[1]. This option defaults to false. Do not treat root commits as boundaries in git-blame[1]. This option defaults to false. Ignore revisions listed in the file, one unabbreviated object name per line, in git-blame[1]. Whitespace and comments beginning with are ignored. This option may be repeated multiple times. Empty file names will reset the list of ignored revisions. This option will be handled before the command line option . Mark lines that were changed by an ignored revision that we could not attribute to another commit with a * in the output of git-blame[1]. Mark lines that were changed by an ignored revision that we attributed to another commit with a ? in the output of git-blame[1]. Tells git branch, git switch and git checkout to set up new branches so that git-pull[1] will appropriately merge from the starting point branch. Note that even if this option is not set, this behavior can be chosen per-branch using the and options. The valid settings are: — no automatic setup is done; — automatic setup is done when the starting point is a remote-tracking branch; — automatic setup is done when the starting point is either a local branch or remote-tracking branch; — if the starting point has a tracking configuration, it is copied to the new branch; — automatic setup is done only when the starting point is a remote-tracking branch and the new branch has the same name as the remote branch. This option defaults to true. When a new branch is created with git branch, git switch or git checkout that tracks another branch, this variable tells Git to set up pull to rebase instead of merge (see \"branch.<name>.rebase\"). When , rebase is never automatically set to true. When , rebase is set to true for tracked branches of other local branches. When , rebase is set to true for tracked branches of remote-tracking branches. When , rebase will be set to true for all tracking branches. See \"branch.autoSetupMerge\" for details on how to set up a branch to track another branch. This option defaults to never. This variable controls the sort ordering of branches when displayed by git-branch[1]. Without the \"--sort=<value>\" option provided, the value of this variable will be used as the default. See git-for-each-ref[1] field names for valid values. When on branch <name>, it tells git fetch and git push which remote to fetch from or push to. The remote to push to may be overridden with (for all branches). The remote to push to, for the current branch, may be further overridden by . If no remote is configured, or if you are not on any branch and there is more than one remote defined in the repository, it defaults to for fetching and for pushing. Additionally, (a period) is the current local repository (a dot-repository), see 's final note below. When on branch <name>, it overrides for pushing. It also overrides for pushing from branch <name>. When you pull from one place (e.g. your upstream) and push to another place (e.g. your own publishing repository), you would want to set to specify the remote to push to for all branches, and use this option to override it for a specific branch. Defines, together with branch.<name>.remote, the upstream branch for the given branch. It tells git fetch/git pull/git rebase which branch to merge and can also affect git push (see push.default). When in branch <name>, it tells git fetch the default refspec to be marked for merging in FETCH_HEAD. The value is handled like the remote part of a refspec, and must match a ref which is fetched from the remote given by \"branch.<name>.remote\". The merge information is used by git pull (which first calls git fetch) to lookup the default branch for merging. Without this option, git pull defaults to merge the first refspec fetched. Specify multiple values to get an octopus merge. If you wish to setup git pull so that it merges into <name> from another branch in the local repository, you can point branch.<name>.merge to the desired branch, and use the relative path setting (a period) for branch.<name>.remote. Sets default options for merging into branch <name>. The syntax and supported options are the same as those of git-merge[1], but option values containing whitespace characters are currently not supported. When true, rebase the branch <name> on top of the fetched branch, instead of merging the default branch from the default remote when \"git pull\" is run. See \"pull.rebase\" for doing this in a non branch-specific manner. When (or just m), pass the option to git rebase so that the local merge commits are included in the rebase (see git-rebase[1] for details). When the value is (or just i), the rebase is run in interactive mode. NOTE: this is a possibly dangerous operation; do not use it unless you understand the implications (see git-rebase[1] for details). Branch description, can be edited with . Branch description is automatically added to the format-patch cover letter or request-pull summary. Specify the command to invoke the specified browser. The specified command is evaluated in shell with the URLs passed as arguments. (See git-web--browse[1].) Override the path for the given tool that may be used to browse HTML help (see option in git-help[1]) or a working repository in gitweb (see git-instaweb[1]). The keys may appear in a bundle list file found via the option. These keys currently have no effect if placed in a repository config file, though this will change in the future. See the bundle URI design document for more details. This integer value advertises the version of the bundle list format used by the bundle list. Currently, the only accepted value is . This string value should be either or . This value describes whether all of the advertised bundles are required to unbundle a complete understanding of the bundled information ( ) or if any one of the listed bundle URIs is sufficient ( ). If this string-valued key exists, then the bundle list is designed to work well with incremental commands. The heuristic signals that there are additional keys available for each bundle that help determine which subset of bundles the client should download. The only value currently understood is . The keys are used to describe a single item in the bundle list, grouped under for identification purposes. This string value defines the URI by which Git can reach the contents of this . This URI may be a bundle file or another bundle list. When you run or and only have one remote, it may implicitly fall back on checking out and tracking e.g. . This stops working as soon as you have more than one remote with a reference. This setting allows for setting the name of a preferred remote that should always win when it comes to disambiguation. The typical use-case is to set this to . Currently this is used by git-switch[1] and git-checkout[1] when or will checkout the branch on another remote, and by git-worktree[1] when refers to a remote branch. This setting might be used for other checkout-like commands or functionality in the future. Provides the default value for the or option in and . See git-switch[1] and git-checkout[1]. The number of parallel workers to use when updating the working tree. The default is one, i.e. sequential execution. If set to a value less than one, Git will use as many workers as the number of logical cores available. This setting and affect all commands that perform checkout. E.g. checkout, clone, reset, sparse-checkout, etc. Note: Parallel checkout usually delivers better performance for repositories located on SSDs or over NFS. For repositories on spinning disks and/or machines with a small number of cores, the default sequential checkout often performs better. The size and compression level of a repository might also influence how well the parallel version performs. When running parallel checkout with a small number of files, the cost of subprocess spawning and inter-process communication might outweigh the parallelization gains. This setting allows you to define the minimum number of files for which parallel checkout should be attempted. The default is 100. A boolean to make git-clean refuse to delete files unless -f is given. Defaults to true. The name of the remote to create when cloning a repository. Defaults to . It can be overridden by passing the command-line option to git-clone[1]. Reject cloning a repository if it is a shallow one; this can be overridden by passing the option on the command line. See git-clone[1]. If a partial clone filter is provided (see in git-rev-list[1]) and is used, also apply the filter to submodules. A boolean to enable/disable color in hints (e.g. when a push failed, see for a list). May be set to , (or ) or (or ), in which case colors are used only when the error output goes to a terminal. If unset, then the value of is used ( by default). Specify the line annotation color for depending upon the age of the line. This setting should be set to a comma-separated list of color and date settings, starting and ending with a color, the dates should be set from oldest to newest. The metadata will be colored with the specified colors if the line was introduced before the given timestamp, overwriting older timestamped colors. Instead of an absolute timestamp relative timestamps work as well, e.g. is valid to address anything older than 2 weeks. It defaults to , which colors everything older than one year blue, recent changes between one month and one year old are kept white, and lines introduced within the last month are colored red. Use the specified color to colorize line annotations for , if they come from the same commit as the preceding line. Defaults to cyan. A boolean to enable/disable color in the output of git-branch[1]. May be set to , (or ) or (or ), in which case colors are used only when the output is to a terminal. If unset, then the value of is used ( by default). Use customized color for branch coloration. is one of (the current branch), (a local branch), (a remote-tracking branch in refs/remotes/), (upstream tracking branch), (other refs). Whether to use ANSI escape sequences to add color to patches. If this is set to , git-diff[1], git-log[1], and git-show[1] will use color for all patches. If it is set to or , those commands will only use color when output is to the terminal. If unset, then the value of is used ( by default). This does not affect git-format-patch[1] or the git-diff-* plumbing commands. Can be overridden on the command line with the option. Use customized color for diff colorization. specifies which part of the patch to use the specified color, and is one of (context text - is a historical synonym), (metainformation), (hunk header), func (function in hunk header), (removed lines), (added lines), (commit headers), (highlighting whitespace errors), (deleted lines), (added lines), , , , , (See the <mode> setting of --color-moved in git-diff[1] for details), , , , , , and (see git-range-diff[1] for details). Use customized color for git log --decorate output. is one of , , , or for local branches, remote-tracking branches, tags, stash and HEAD, respectively and for grafted commits. When set to , always highlight matches. When (or ), never. When set to or , use color only when the output is written to the terminal. If unset, then the value of is used ( by default). Use customized color for grep colorization. specifies which part of the line to use the specified color, and is one of non-matching text in context lines (when using , , or ) filename prefix (when not using ) function name lines (when using ) matching text (same as setting and ) matching text in selected lines. Also, used to customize the following git-log[1] subcommands: , , and . non-matching text in selected lines. Also, used to customize the following git-log[1] subcommands: , and . separators between fields on a line ( , , and ) and between hunks ( ) When set to , always use colors for interactive prompts and displays (such as those used by \"git-add --interactive\" and \"git-clean --interactive\"). When false (or ), never. When set to or , use colors only when the output is to the terminal. If unset, then the value of is used ( by default). Use customized color for git add --interactive and git clean --interactive output. may be , , or , for four distinct types of normal output from interactive commands. A boolean to specify whether color modes should colorize output going to the pager. Defaults to true; set this to false if your pager does not understand ANSI color codes. A boolean to enable/disable color in push errors. May be set to , (or ) or (or ), in which case colors are used only when the error output goes to a terminal. If unset, then the value of is used ( by default). If set, keywords at the start of the line are highlighted. The keywords are \"error\", \"warning\", \"hint\" and \"success\", and are matched case-insensitively. May be set to , (or ) or (or ). If unset, then the value of is used ( by default). Use customized color for each remote keyword. may be , , or which match the corresponding keyword. A boolean to enable/disable color in the output of git-show-branch[1]. May be set to , (or ) or (or ), in which case colors are used only when the output is to a terminal. If unset, then the value of is used ( by default). A boolean to enable/disable color in the output of git-status[1]. May be set to , (or ) or (or ), in which case colors are used only when the output is to a terminal. If unset, then the value of is used ( by default). Use customized color for status colorization. is one of (the header text of the status message), or (files which are added but not committed), (files which are changed but not added in the index), (files which are not tracked by Git), (the current branch), (the color the no branch warning is shown in, defaulting to red), or (the local and remote branch names, respectively, when branch and tracking information is displayed in the status short-format), or (files which have unmerged changes). A boolean to enable/disable color when pushes are rejected. May be set to , (or ) or (or ), in which case colors are used only when the error output goes to a terminal. If unset, then the value of is used ( by default). Use customized color when a push was rejected. This variable determines the default value for variables such as and that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the option. Set it to or if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the option. Set it to if you want all output not intended for machine consumption to use color, to or (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal. Specify whether supported commands should output in columns. This variable consists of a list of tokens separated by spaces or commas: These options control when the feature should be enabled (defaults to never): show in columns if the output is to the terminal These options control layout (defaults to column). Setting any of these implies always if none of always, never, or auto are specified. Finally, these options can be combined with a layout option (defaults to nodense): Specify whether to output branch listing in in columns. See for details. Specify the layout when listing items in , which always shows files and directories in columns. See for details. Specify whether to output untracked files in in columns. See for details. Specify whether to output tag listings in in columns. See for details.\n\nThis setting overrides the default of the option in . See git-commit[1] for details. Changing the default can be useful when you always want to keep lines that begin with the comment character in your log message, in which case you would do (note that you will have to remove the help lines that begin with in the commit log template yourself, if you do this). A boolean to specify whether all commits should be GPG signed. Use of this option when doing operations such as rebase can result in a large number of commits being signed. It may be convenient to use an agent to avoid typing your GPG passphrase several times. A boolean to enable/disable inclusion of status information in the commit message template when using an editor to prepare the commit message. Defaults to . Specify the pathname of a file to use as the template for new commit messages. A boolean or int to specify the level of verbosity with . See git-commit[1] for details. Specifies the type of generation number version to use when writing or reading the commit-graph file. If version 1 is specified, then the corrected commit dates will not be written or read. Defaults to 2. Specifies the default value for the option of (c.f., git-commit-graph[1]). Deprecated. Equivalent to commitGraph.changedPathsVersion=-1 if true, and commitGraph.changedPathsVersion=0 if false. (If commitGraph.changedPathVersion is also set, commitGraph.changedPathsVersion takes precedence.) Specifies the version of the changed-path Bloom filters that Git will read and write. May be -1, 0, 1, or 2. Note that values greater than 1 may be incompatible with older versions of Git which do not yet understand those versions. Use caution when operating in a mixed-version environment. If -1, Git will use the version of the changed-path Bloom filters in the repository, defaulting to 1 if there are none. If 0, Git will not read any Bloom filters, and will write version 1 Bloom filters when instructed to write. If 1, Git will only read version 1 Bloom filters, and will write version 1 Bloom filters. If 2, Git will only read version 2 Bloom filters, and will write version 2 Bloom filters. See git-commit-graph[1] for more information. This is only used by git-completion.bash to add or remove commands from the list of completed commands. Normally only porcelain commands and a few select others are completed. You can add more commands, separated by space, in this variable. Prefixing the command with - will remove it from the existing list. Tells Git if the executable bit of files in the working tree is to be honored. Some filesystems lose the executable bit when a file that is marked as executable is checked out, or checks out a non-executable file with executable bit on. git-clone[1] or git-init[1] probe the filesystem to see if it handles the executable bit correctly and this variable is automatically set as necessary. A repository, however, may be on a filesystem that handles the filemode correctly, and this variable is set to true when created, but later may be made accessible from another environment that loses the filemode (e.g. exporting ext4 via CIFS mount, visiting a Cygwin created repository with Git for Windows or Eclipse). In such a case it may be necessary to set this variable to false. See git-update-index[1]. The default is true (when core.filemode is not specified in the config file). (Windows-only) If true, mark newly-created directories and files whose name starts with a dot as hidden. If dotGitOnly, only the directory is hidden, but no other files starting with a dot. The default mode is dotGitOnly. Internal variable which enables various workarounds to enable Git to work better on filesystems that are not case sensitive, like APFS, HFS+, FAT, NTFS, etc. For example, if a directory listing finds \"makefile\" when Git expects \"Makefile\", Git will assume it is really the same file, and continue to remember it as \"Makefile\". The default is false, except git-clone[1] or git-init[1] will probe and set core.ignoreCase true if appropriate when the repository is created. Git relies on the proper configuration of this variable for your operating and file system. Modifying this value may result in unexpected behavior. This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git. If set to true, do not allow checkout of paths that would be considered equivalent to on an HFS+ filesystem. Defaults to on Mac OS, and elsewhere. If set to true, do not allow checkout of paths that would cause problems with the NTFS filesystem, e.g. conflict with 8.3 \"short\" names. Defaults to on Windows, and elsewhere. If set to true, enable the built-in file system monitor daemon for this working directory (git-fsmonitor--daemon[1]). Like hook-based file system monitors, the built-in file system monitor can speed up Git commands that need to refresh the Git index (e.g. ) in a working directory with many files. The built-in monitor eliminates the need to install and maintain an external third-party tool. The built-in file system monitor is currently available only on a limited set of supported platforms. Currently, this includes Windows and MacOS. Otherwise, this variable contains the pathname of the \"fsmonitor\" hook command. This hook command is used to identify all files that may have changed since the requested date/time. This information is used to speed up git by avoiding unnecessary scanning of files that have not changed. See the \"fsmonitor-watchman\" section of githooks[5]. Note that if you concurrently use multiple versions of Git, such as one version on the command line and another version in an IDE tool, that the definition of was extended to allow boolean values in addition to hook pathnames. Git versions 2.35.1 and prior will not understand the boolean values and will consider the \"true\" or \"false\" values as hook pathnames to be invoked. Git versions 2.26 thru 2.35.1 default to hook protocol V2 and will fall back to no fsmonitor (full scan). Git versions prior to 2.26 default to hook protocol V1 and will silently assume there were no changes to report (no scan), so status commands may report incomplete results. For this reason, it is best to upgrade all of your Git versions before using the built-in file system monitor. Sets the protocol version to be used when invoking the \"fsmonitor\" hook. There are currently versions 1 and 2. When this is not set, version 2 will be tried first and if it fails then version 1 will be tried. Version 1 uses a timestamp as input to determine which files have changes since that time but some monitors like Watchman have race conditions when used with a timestamp. Version 2 uses an opaque string so that the monitor can return something that can be used to determine what files have changed without race conditions. If false, the ctime differences between the index and the working tree are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems). See git-update-index[1]. True by default. If true, the split-index feature of the index will be used. See git-update-index[1]. False by default. Determines what to do about the untracked cache feature of the index. It will be kept, if this variable is unset or set to . It will automatically be added if set to . And it will automatically be removed, if set to . Before setting it to , you should check that mtime is working properly on your system. See git-update-index[1]. by default, unless is enabled which sets this setting to by default. When missing or is set to , many fields in the stat structure are checked to detect if a file has been modified since Git looked at it. When this configuration variable is set to , sub-second part of mtime and ctime, the uid and gid of the owner of the file, the inode number (and the device number, if Git was compiled to use it), are excluded from the check among these fields, leaving only the whole-second part of mtime (and ctime, if is set) and the filesize to be checked. There are implementations of Git that do not leave usable values in some fields (e.g. JGit); by excluding these fields from the comparison, the mode may help interoperability when the same repository is used by these other systems at the same time. Commands that output paths (e.g. ls-files, diff), will quote \"unusual\" characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. for TAB, for LF, for backslash) or bytes with values larger than 0x80 (e.g. octal for \"micro\" in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered \"unusual\" any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered \"unusual\". Many commands can output pathnames completely verbatim using the option. The default value is true. Sets the line ending type to use in the working directory for files that are marked as text (either by having the attribute set, or by having and Git auto-detecting the contents as text). Alternatives are lf, crlf and native, which uses the platform’s native line ending. The default value is . See gitattributes[5] for more information on end-of-line conversion. Note that this value is ignored if is set to or . If true, makes Git check if converting is reversible when end-of-line conversion is active. Git will verify if a command modifies a file in the work tree either directly or indirectly. For example, committing a file followed by checking out the same file should yield the original file in the work tree. If this is not the case for the current setting of , Git will reject the file. The variable can be set to \"warn\", in which case Git will only warn about an irreversible conversion but continue the operation. CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository. But for binary files that are accidentally classified as text the conversion can corrupt data. If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in .gitattributes. Right after committing you still have the original file in your work tree and this file is not yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately. Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data. Note, this safety check does not mean that a checkout will generate a file identical to the original file for a different setting of and , but only for the current one. For example, a text file with would be accepted with and could later be checked out with , in which case the resulting file would contain , although the original file contained . However, in both work trees the line endings would be consistent, that is either all or all , but never mixed. A file with mixed line endings would be reported by the mechanism. Setting this variable to \"true\" is the same as setting the attribute to \"auto\" on all files and core.eol to \"crlf\". Set to true if you want to have line endings in your working directory and the repository has LF line endings. This variable can be set to input, in which case no output conversion is performed. A comma and/or whitespace separated list of encodings that Git performs UTF-8 round trip checks on if they are used in an attribute (see gitattributes[5]). The default value is . If false, symbolic links are checked out as small plain files that contain the link text. git-update-index[1] and git-add[1] will not change the recorded type to regular file. Useful on filesystems like FAT that do not support symbolic links. The default is true, except git-clone[1] or git-init[1] will probe and set core.symlinks false if appropriate when the repository is created. A \"proxy command\" to execute (as command host port) instead of establishing direct connection to the remote server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format, the command is applied only on hostnames ending with the specified domain string. This variable may be set multiple times and is matched in the given order; the first match wins. Can be overridden by the environment variable (which always applies universally, without the special \"for\" handling). The special string can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains. If this variable is set, and will use the specified command instead of when they need to connect to a remote system. The command is in the same form as the environment variable and is overridden when the environment variable is set. If true, Git will avoid using lstat() calls to detect if files have changed by setting the \"assume-unchanged\" bit for those tracked files which it has updated identically in both the index and working tree. When files are modified outside of Git, the user will need to stage the modified files explicitly (e.g. see Examples section in git-update-index[1]). Git will not normally detect changes to those files. This is useful on systems where lstat() calls are very slow, such as CIFS/Microsoft Windows. Instead of the default \"symref\" format for HEAD and other symbolic reference files, use symbolic links. This is sometimes needed to work with old scripts that expect HEAD to be a symbolic link. When advertising tips of available history from an alternate, use the shell to execute the specified command instead of git-for-each-ref[1]. The first argument is the absolute path of the alternate. Output must contain one hex object id per line (i.e., the same as produced by ). Note that you cannot generally put directly into the config value, as it does not take a repository path as an argument (but you can wrap the command above in a shell script). When listing references from an alternate, list only references that begin with the given prefix. Prefixes match as if they were given as arguments to git-for-each-ref[1]. To list multiple prefixes, separate them with whitespace. If is set, setting has no effect. If true this repository is assumed to be bare and has no working directory associated with it. If this is the case a number of commands that require a working directory will be disabled, such as git-add[1] or git-merge[1]. This setting is automatically guessed by git-clone[1] or git-init[1] when the repository was created. By default a repository that ends in \"/.git\" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true). Set the path to the root of the working tree. If environment variable is set, core.worktree is ignored and not used for determining the root of working tree. This can be overridden by the environment variable and the command-line option. The value can be an absolute path or relative to the path to the .git directory, which is either specified by --git-dir or GIT_DIR, or automatically discovered. If --git-dir or GIT_DIR is specified but none of --work-tree, GIT_WORK_TREE and core.worktree is specified, the current working directory is regarded as the top level of your working tree. Note that this variable is honored even when set in a configuration file in a \".git\" subdirectory of a directory and its value differs from the latter directory (e.g. \"/path/to/.git/config\" has core.worktree set to \"/different/path\"), which is most likely a misconfiguration. Running Git commands in the \"/path/to\" directory will still use \"/different/path\" as the root of the work tree and can cause confusion unless you know what you are doing (e.g. you are creating a read-only snapshot of the same index to a location different from the repository’s usual working tree). Enable the reflog. Updates to a ref <ref> is logged to the file \" \", by appending the new and old SHA-1, the date/time and the reason of the update, but only when the file exists. If this configuration variable is set to , missing \" \" file is automatically created for branch heads (i.e. under ), remote refs (i.e. under ), note refs (i.e. under ), and the symbolic ref . If it is set to , then a missing reflog is automatically created for any ref under . This information can be used to determine what commit was the tip of a branch \"2 days ago\". This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository. Internal variable identifying the repository format and layout version. See gitrepository-layout[5]. When group (or true), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When all (or world or everybody), the repository will be readable by all users, additionally to being group-shareable. When umask (or false), Git will use permissions reported by umask(2). When 0xxx, where 0xxx is an octal number, files in the repository will have this mode value. 0xxx will override user’s umask value (whereas the other options will only override requested parts of the user’s umask value). Examples: 0660 will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to group unless umask is e.g. 0022). 0640 is a repository that is group-readable but not group-writable. See git-init[1]. False by default. If true, Git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the repository. True by default. An integer -1..9, indicating a default compression level. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If set, this provides a default to other compression variables, such as and . An integer -1..9, indicating the compression level for objects that are not in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to 1 (best speed). Number of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system’s memory manager, but may improve performance when accessing a large number of large pack files. Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms. This should be reasonable for all users/operating systems. You probably do not need to adjust this value. Common unit suffixes of k, m, or g are supported. Maximum number of bytes to map simultaneously into memory from pack files. If Git needs to access more than this many bytes at once to complete an operation it will unmap existing regions to reclaim virtual address space within the process. Default is 256 MiB on 32 bit platforms and 32 TiB (effectively unlimited) on 64 bit platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value. Common unit suffixes of k, m, or g are supported. Maximum number of bytes per thread to reserve for caching base objects that may be referenced by multiple deltified objects. By storing the entire decompressed base objects in a cache Git is able to avoid unpacking and decompressing frequently used base objects multiple times. Default is 96 MiB on all platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value. Common unit suffixes of k, m, or g are supported. The size of files considered \"big\", which as discussed below changes the behavior of numerous git commands, as well as how such files are stored within the repository. The default is 512 MiB. Common unit suffixes of k, m, or g are supported. Files above the configured limit will be:\n• The default limit is primarily set with this use-case in mind. With it, most projects will have their source code and other text files delta compressed, but not larger binary media files. Storing large files without delta compression avoids excessive memory usage, at the slight expense of increased disk usage.\n• Will be treated as if they were labeled \"binary\" (see gitattributes[5]). e.g. git-log[1] and git-diff[1] will not compute diffs for files above this limit.\n• Will generally be streamed when written, which avoids excessive memory usage, at the cost of some fixed overhead. Commands that make use of this include git-archive[1], git-fast-import[1], git-index-pack[1], git-unpack-objects[1] and git-fsck[1]. Specifies the pathname to the file that contains patterns to describe paths that are not meant to be tracked, in addition to (per-directory) and . Defaults to . If is either not set or empty, is used instead. See gitignore[5]. Some commands (e.g. svn and http interfaces) that interactively ask for a password can be told to use an external program given via the value of this variable. Can be overridden by the environment variable. If not set, fall back to the value of the environment variable or, failing that, a simple password prompt. The external program shall be given a suitable prompt as command-line argument and write the password on its STDOUT. In addition to (per-directory) and , Git looks into this file for attributes (see gitattributes[5]). Path expansions are made the same way as for . Its default value is . If is either not set or empty, is used instead. By default Git will look for your hooks in the directory. Set this to different path, e.g. , and Git will try to find your hooks in that directory, e.g. instead of in . The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the \"DESCRIPTION\" section of githooks[5]). This configuration variable is useful in cases where you’d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an where you’ve changed default hooks. Commands such as and that let you edit messages by launching an editor use the value of this variable when it is set, and the environment variable is not set. See git-var[1]. Commands such as and that let you edit messages consider a line that begins with this character commented, and removes them after the editor returns (default #). If set to \"auto\", would select a character that is not the beginning character of any line in existing commit messages. Note that these two variables are aliases of each other, and in modern versions of Git you are free to use a string (e.g., or ) with . Versions of Git prior to v2.45.0 will ignore but will reject a value of that consists of more than a single ASCII byte. If you plan to use your config with older and newer versions of Git, you may want to specify both: [core] # single character for older versions commentChar = \"#\" # string for newer versions (which will override commentChar # because it comes later in the file) commentString = \"//\" The length of time, in milliseconds, to retry when trying to lock an individual reference. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms). The length of time, in milliseconds, to retry when trying to lock the file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second). Text viewer for use by Git commands (e.g., less). The value is meant to be interpreted by the shell. The order of preference is the environment variable, then configuration, then , and then the default chosen at compile time (usually less). When the environment variable is unset, Git sets it to (if environment variable is set, Git does not change it at all). If you want to selectively override Git’s default setting for , you can set to e.g. . This will be passed to the shell by Git, which will translate the final command to . The environment does not set the option but the command line does, instructing less to truncate long lines. Similarly, setting to will deactivate the option specified by the environment from the command-line, deactivating the \"quit if one screen\" behavior of . One can specifically activate some flags for particular commands: for example, setting to enables line truncation only for . Likewise, when the environment variable is unset, Git sets it to . You can override this setting by exporting with another value or setting to . A comma separated list of common whitespace problems to notice. git diff will use to highlight them, and git apply --whitespace=error will consider them as errors. You can prefix to disable any of them (e.g. ):\n• treats trailing whitespaces at the end of the line as an error (enabled by default).\n• treats a space character that appears immediately before a tab character in the initial indent part of the line as an error (enabled by default).\n• treats a line that is indented with space characters instead of the equivalent tabs as an error (not enabled by default).\n• treats a tab character in the initial indent part of the line as an error (not enabled by default).\n• treats blank lines added at the end of file as an error (enabled by default).\n• is a short-hand to cover both and .\n• treats a carriage-return at the end of line as part of the line terminator, i.e. with it, does not trigger if the character before such a carriage-return is not a whitespace (not enabled by default).\n• tells how many character positions a tab occupies; this is relevant for and when Git fixes errors. The default tab width is 8. Allowed values are 1 to 63. A comma-separated list of components of the repository that should be hardened via the core.fsyncMethod when created or modified. You can disable hardening of any component by prefixing it with a -. Items that are not hardened may be lost in the event of an unclean system shutdown. Unless you have special requirements, it is recommended that you leave this option empty or pick one of , , or . When this configuration is encountered, the set of components starts with the platform default value, disabled components are removed, and additional components are added. resets the state so that the platform default is ignored. The empty string resets the fsync configuration to the platform default. The default on most platforms is equivalent to , which has good performance, but risks losing recent work in the event of an unclean system shutdown.\n• hardens objects added to the repo in loose-object form.\n• hardens objects added to the repo in packfile form.\n• hardens the index when it is modified.\n• is an aggregate option that is equivalent to .\n• is an aggregate option that is equivalent to .\n• is an aggregate option that is currently equivalent to . This mode sacrifices some performance to ensure that work that is committed to the repository with or similar commands is hardened.\n• is an aggregate option that is currently equivalent to . This mode sacrifices additional performance to ensure that the results of commands like and similar operations are hardened.\n• is an aggregate option that syncs all individual components above. A value indicating the strategy Git will use to harden repository data using fsync and related primitives.\n• uses the fsync() system call or platform equivalents.\n• issues pagecache writeback requests, but depending on the filesystem and storage hardware, data added to the repository may not be durable in the event of a system crash. This is the default mode on macOS.\n• enables a mode that uses writeout-only flushes to stage multiple updates in the disk writeback cache and then does a single full fsync of a dummy file to trigger the disk cache flush at the end of the operation. Currently mode only applies to loose-object files. Other repository data is made durable as if was specified. This mode is expected to be as safe as on macOS for repos stored on HFS+ or APFS filesystems and on Windows for repos stored on NTFS or ReFS filesystems. This boolean will enable fsync() when writing object files. This setting is deprecated. Use core.fsync instead. This setting affects data added to the Git repository in loose-object form. When set to true, Git will issue an fsync or similar system call to flush caches so that loose-objects remain consistent in the face of a unclean system shutdown. This can speed up operations like git diff and git status especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO’s. Defaults to true. Windows-only: comma-separated list of environment variables' names that need to be unset before spawning any other process. Defaults to to account for the fact that Git for Windows insists on using its own Perl interpreter. Windows-only: override whether spawned processes inherit only standard file handles ( , and ) or all handles. Can be , or . Defaults to , which means on Windows 7 and later, and on older Windows versions. You can set this to link, in which case a hardlink followed by a delete of the source are used to make sure that object creation will not overwrite existing objects. On some file system/operating system combinations, this is unreliable. Set this config setting to rename there; however, this will remove the check that makes sure that existing object files will not get overwritten. When showing commit messages, also show notes which are stored in the given ref. The ref must be fully qualified. If the given ref does not exist, it is not an error but means that no notes should be printed. This setting defaults to \"refs/notes/commits\", and it can be overridden by the environment variable. See git-notes[1]. If true, then git will read the commit-graph file (if it exists) to parse the graph structure of commits. Defaults to true. See git-commit-graph[1] for more information. If set to , behave as if the option was given on the command line. See git[1] and git-replace[1] for more information. Use the multi-pack-index file to track multiple packfiles using a single index. See git-multi-pack-index[1] for more information. Defaults to true. Enable \"sparse checkout\" feature. See git-sparse-checkout[1] for more information. Enables the \"cone mode\" of the sparse checkout feature. When the sparse-checkout file contains a limited set of patterns, this mode provides significant performance advantages. The \"non-cone mode\" can be requested to allow specifying more flexible patterns by setting this variable to false. See git-sparse-checkout[1] for more information. Set the length object names are abbreviated to. If unspecified or set to \"auto\", an appropriate value is computed based on the approximate number of packed objects in your repository, which hopefully is enough for abbreviated object names to stay unique for some time. If set to \"no\", no abbreviation is made and the object names are shown in their full length. The minimum length is 4. The maximum depth Git is willing to recurse while traversing a tree (e.g., \"a/b/cde/f\" has a depth of 4). This is a fail-safe to allow Git to abort cleanly, and should not generally need to be adjusted. When Git is compiled with MSVC, the default is 512. Otherwise, the default is 2048. Specify an external helper to be called when a username or password credential is needed; the helper may consult external storage to avoid prompting the user for the credentials. This is normally the name of a credential helper with possible arguments, but may also be an absolute path with arguments or, if preceded by , shell commands. Note that multiple helpers may be defined. See gitcredentials[7] for details and examples. By default, Git and any configured credential helpers will ask for user input when new credentials are required. Many of these helpers will succeed based on stored credentials if those credentials are still valid. To avoid the possibility of user interactivity from Git, set . Some credential helpers respect this option as well. When acquiring credentials, consider the \"path\" component of an http or https URL to be important. Defaults to false. See gitcredentials[7] for more information. By default, user names and hosts that are shown as part of the password prompt are not allowed to contain control characters (they will be URL-encoded by default). Configure this setting to to override that behavior. By default, Carriage Return characters are not allowed in the protocol that is used when Git talks to a credential helper. This setting allows users to override this default. If no username is set for a network authentication, use this username by default. See credential.<context>.* below, and gitcredentials[7]. Any of the credential.* options above can be applied selectively to some credentials. For example, \"credential.https://example.com.username\" would set the default username only for https connections to example.com. See gitcredentials[7] for details on how URLs are matched. Tell git-credential-cache—​daemon to ignore SIGHUP, instead of quitting. The length of time, in milliseconds, for git-credential-store to retry when trying to lock the credentials file. A value of 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1s). When using to compare with work tree files, do not consider stat-only changes as changed. Instead, silently run to update the cached stat information for paths whose contents in the work tree match the contents in the index. This option defaults to . Note that this affects only Porcelain, and not lower level commands such as . A comma separated list of parameters specifying the default behavior of the option to git-diff[1] and friends. The defaults can be overridden on the command line (using ). The fallback defaults (when not changed by ) are . The following parameters are available: Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given. Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive behavior than the behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other options. Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest behavior, since it does not have to look at the file contents at all. Count changes in a child directory for the parent directory as well. Note that when using , the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the parameter. An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output. Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: . Limit the width of the filename part in output. If set, applies to all commands generating output except . Limit the width of the graph part in output. If set, applies to all commands generating output except . Generate diffs with <n> lines of context instead of the default of 3. This value is overridden by the option. Show the context between diff hunks, up to the specified number of lines, thereby fusing the hunks that are close to each other. This value serves as the default for the command line option. If this config variable is set, diff generation is not performed using the internal diff machinery, but using the given command. Can be overridden with the environment variable. The command is called with parameters as described under \"git Diffs\" in git[1]. Note: if you want to use an external diff program only on a subset of your files, you might want to use gitattributes[5] instead. If this boolean value is set to then the command is expected to return exit code 0 if it considers the input files to be equal or 1 if it considers them to be different, like (1). If it is set to , which is the default, then the command is expected to return exit code regardless of equality. Any other exit code causes Git to report a fatal error. Sets the default value of . Note that this affects only Porcelain, and not lower level commands such as . and also honor this setting when reporting uncommitted changes. Setting it to disables the submodule summary normally shown by and when is set unless it is overridden by using the command-line option. The commands are not affected by this setting. By default this is set to untracked so that any untracked submodules are ignored. If set, uses a prefix pair that is different from the standard and depending on what is being compared. When this configuration is in effect, reverse diff output also swaps the order of the prefixes: compares the (i)ndex and the (w)ork tree; If set, does not show any source or destination prefix. If set, uses this source prefix. Defaults to . If set, uses this destination prefix. Defaults to . If set to , does not show changes outside of the directory and show pathnames relative to the current directory. File indicating how to order files within a diff. See the option to git-diff[1] for details. If is a relative pathname, it is treated as relative to the top of the working tree. The number of files to consider in the exhaustive portion of copy/rename detection; equivalent to the option . If not set, the default value is currently 1000. This setting has no effect if rename detection is turned off. Whether and how Git detects renames. If set to , rename detection is disabled. If set to , basic rename detection is enabled. If set to or , Git will detect copies, as well. Defaults to . Note that this affects only Porcelain like git-diff[1] and git-log[1], and not lower level commands such as git-diff-files[1]. A boolean to inhibit the standard behavior of printing a space before each empty output line. Defaults to . Specify the format in which differences in submodules are shown. The format just shows the names of the commits at the beginning and end of the range. The format lists the commits in the range like git-submodule[1] does. The format shows an inline diff of the changed contents of the submodule. Defaults to . A POSIX Extended Regular Expression used to determine what is a \"word\" when performing word-by-word difference calculations. Character sequences that match the regular expression are \"words\", all other characters are ignorable whitespace. The custom diff driver command. See gitattributes[5] for details. If this boolean value is set to then the command is expected to return exit code 0 if it considers the input files to be equal or 1 if it considers them to be different, like (1). If it is set to , which is the default, then the command is expected to return exit code 0 regardless of equality. Any other exit code causes Git to report a fatal error. The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See gitattributes[5] for details. Set this option to to make the diff driver treat files as binary. See gitattributes[5] for details. The command that the diff driver should call to generate the text-converted version of a file. The result of the conversion is used to generate a human-readable diff. See gitattributes[5] for details. The regular expression that the diff driver should use to split words in a line. See gitattributes[5] for details. Set this option to to make the diff driver cache the text conversion outputs. See gitattributes[5] for details. Set this option to to disable the default heuristics that shift diff hunk boundaries to make patches easier to read. Choose a diff algorithm. The variants are as follows: The basic greedy diff algorithm. Currently, this is the default. Spend extra time to make sure the smallest possible diff is produced. This algorithm extends the patience algorithm to \"support low-occurrence common elements\". Highlight whitespace errors in the , or lines of the diff. Multiple values are separated by comma, resets previous values, reset the list to and is a shorthand for . The whitespace errors are colored with . The command line option overrides this setting. If set to either a valid <mode> or a value, moved lines in a diff are colored differently. For details of valid modes see in git-diff[1]. If simply set to the default color mode will be used. When set to , moved lines are not colored. When moved lines are colored using e.g. the setting, this option controls the mode how spaces are treated. For details of valid modes see in git-diff[1]. Controls which diff tool is used by git-difftool[1]. This variable overrides the value configured in . The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.<tool>.cmd variable is defined. Controls which diff tool is used by git-difftool[1] when the -g/--gui flag is specified. This variable overrides the value configured in . The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.<guitool>.cmd variable is defined. Specify the command to invoke the specified diff tool. The specified command is evaluated in shell with the following variables available: LOCAL is set to the name of the temporary file containing the contents of the diff pre-image and REMOTE is set to the name of the temporary file containing the contents of the diff post-image. See the option in git-difftool[1] for more details. Override the path for the given tool. This is useful in case your tool is not in the PATH. See the option in git-difftool[1] for more details. Prompt before each invocation of the diff tool. Set to use the by default (equivalent to specifying the argument), or to select or depending on the presence of a environment variable value. The default is , where the argument must be provided explicitly for the to be used. Unless otherwise stated, is an error to specify an extension if is not . See gitrepository-layout[5]. Specify a compatibility hash algorithm to use. The acceptable values are and . The value specified must be different from the value of . This allows client level interoperability between git repositories whose objectFormat matches this compatObjectFormat. In particular when fully implemented the pushes and pulls from a repository in whose objectFormat matches compatObjectFormat. As well as being able to use oids encoded in compatObjectFormat in addition to oids encoded with objectFormat to locally specify objects. This extension does not change git’s behavior at all. It is useful only for testing format-1 compatibility. For historical reasons, this extension is respected regardless of the setting. This extension does not change git’s behavior at all. It is useful only for testing format-1 compatibility. Specify the hash algorithm to use. The acceptable values are and . If not specified, is assumed. Note that this setting should only be set by git-init[1] or git-clone[1]. Trying to change it after initialization will not work and will produce hard-to-diagnose issues. When enabled, indicates that the repo was created with a partial clone (or later performed a partial fetch) and that the remote may have omitted sending certain unwanted objects. Such a remote is called a \"promisor remote\" and it promises that all such omitted objects can be fetched from it in the future. The value of this key is the name of the promisor remote. For historical reasons, this extension is respected regardless of the setting. If enabled, indicates that objects in the repository MUST NOT be deleted (e.g., by or ). For historical reasons, this extension is respected regardless of the setting. Specify the ref storage format to use. The acceptable values are:\n• for loose files with packed-refs. This is the default.\n• for the reftable format. This format is experimental and its internals are subject to change. Note that this setting should only be set by git-init[1] or git-clone[1]. Trying to change it after initialization will not work and will produce hard-to-diagnose issues. If enabled, indicates at least one worktree has been linked with relative paths. Automatically set if a worktree has been created or repaired with either the option or with the config set to . If enabled, then worktrees will load config settings from the file in addition to the file. Note that and are the same for the main working tree, while other working trees have equal to . The settings in the file will override settings from any other config files. When enabling this extension, you must be careful to move certain values from the common config file to the main working tree’s file, if present:\n• must be moved from to .\n• If is true, then it must be moved from to . It may also be beneficial to adjust the locations of and depending on your desire for customizable sparse-checkout settings for each worktree. By default, the builtin enables this extension, assigns these config values on a per-worktree basis, and uses the file to specify the sparsity for each worktree independently. See git-sparse-checkout[1] for more details. + For historical reasons, this extension is respected regardless of the setting. If the number of objects imported by git-fast-import[1] is below this limit, then the objects will be unpacked into loose object files. However, if the number of imported objects equals or exceeds this limit, then the pack will be stored as a pack. Storing the pack from a fast-import can make the import operation complete faster, especially on slow filesystems. If not set, the value of is used instead. The config settings that start with modify the defaults of a group of other config settings. These groups are created by the Git developer community as recommended defaults and are subject to change. In particular, new config options may be added with different defaults. Enable config options that are new to Git, and are being considered for future defaults. Config settings included here may be added or removed with each release, including minor version updates. These settings may have unintended interactions since they are so new. Please enable this setting if you are interested in providing feedback on experimental features. The new default values are:\n• may improve fetch negotiation times by skipping more commits at a time, reducing the number of round trips.\n• may improve the time it takes to create a pack by reusing objects from multiple packs instead of just one. Enable config options that optimize for repos with many files in the working directory. With many files, commands such as and may be slow and these new defaults improve performance:\n• speeds up index writes by not computing a trailing checksum. Note that this will cause Git versions earlier than 2.13.0 to refuse to parse the index and Git versions earlier than 2.40.0 will report a corrupted index during .\n• enables the untracked cache. This setting assumes that mtime is working on your machine. This option controls whether (and the underlying fetch in ) will recursively fetch into populated submodules. This option can be set either to a boolean value or to on-demand. Setting it to a boolean changes the behavior of fetch and pull to recurse unconditionally into submodules when set to true or to not recurse at all when set to false. When set to on-demand, fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule’s reference. Defaults to on-demand, or to the value of submodule.recurse if set. If it is set to true, git-fetch-pack will check all fetched objects. See for what’s checked. Defaults to false. If not set, the value of is used instead. Acts like , but is used by git-fetch-pack[1] instead of git-fsck[1]. See the documentation for details. Acts like , but is used by git-fetch-pack[1] instead of git-fsck[1]. See the documentation for details. If the number of objects fetched over the Git native transfer is below this limit, then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of is used instead. If true, fetch will automatically behave as if the option was given on the command line. See also and the PRUNING section of git-fetch[1]. If true, fetch will automatically behave as if the refspec was provided when pruning, if not set already. This allows for setting both this option and to maintain a 1=1 mapping to upstream refs. See also and the PRUNING section of git-fetch[1]. If true, fetch will attempt to update all available remotes. This behavior can be overridden by passing or by explicitly specifying one or more remote(s) to fetch from. Defaults to false. Control how ref update status is printed. Valid values are and . Default value is . See the OUTPUT section in git-fetch[1] for details. Control how information about the commits in the local repository is sent when negotiating the contents of the packfile to be sent by the server. Set to \"consecutive\" to use an algorithm that walks over consecutive commits checking each one. Set to \"skipping\" to use an algorithm that skips commits in an effort to converge faster, but may result in a larger-than-necessary packfile; or set to \"noop\" to not send any information at all, which will almost certainly result in a larger-than-necessary packfile, but will skip the negotiation step. Set to \"default\" to override settings made previously and use the default behaviour. The default is normally \"consecutive\", but if is true, then the default is \"skipping\". Unknown values will cause git fetch to error out. See also the and options to git-fetch[1]. Set to false to enable in git-fetch[1] and git-pull[1] commands. Defaults to true. Specifies the maximal number of fetch operations to be run in parallel at a time (submodules, or remotes when the option of git-fetch[1] is in effect). A value of 0 will give some reasonable default. If unset, it defaults to 1. For submodules, this setting can be overridden using the config setting. Set to true to write a commit-graph after every command that downloads a pack-file from a remote. Using the option, most executions will create a very small commit-graph file on top of the existing commit-graph file(s). Occasionally, these files will merge and the write may take longer. Having an updated commit-graph file helps performance of many Git commands, including , , and . Defaults to false. This value stores a URI for downloading Git object data from a bundle URI before performing an incremental fetch from the origin Git server. This is similar to how the option behaves in git-clone[1]. will set the value if the supplied bundle URI contains a bundle list that is organized for incremental fetches. If you modify this value and your repository has a value, then remove that value before fetching from the new bundle URI. When using to fetch incrementally from a bundle list that uses the \"creationToken\" heuristic, this config value stores the maximum value of the downloaded bundles. This value is used to prevent downloading bundles in the future if the advertised is not strictly larger than this value. The creation token values are chosen by the provider serving the specific bundle URI. If you modify the URI at , then be sure to remove the value for the value before fetching. The command which is used to convert the content of a worktree file to a blob upon checkin. See gitattributes[5] for details. The command which is used to convert the content of a blob object to a worktree file upon checkout. See gitattributes[5] for details. Enable multipart/mixed attachments as the default for format-patch. The value can also be a double quoted string which will enable attachments as the default and set the value as the boundary. See the --attach option in git-format-patch[1]. To countermand an earlier value, set it to an empty string. Provides the default value for the option to format-patch. Accepts a boolean value, or a name and email address. If false, format-patch defaults to , using commit authors directly in the \"From:\" field of patch mails. If true, format-patch defaults to , using your committer identity in the \"From:\" field of patch mails and including a \"From:\" field in the body of the patch mail if different. If set to a non-boolean value, format-patch uses that value instead of your committer identity. Defaults to false. Provides the default value for the option to format-patch. Defaults to false. A boolean which can enable or disable sequence numbers in patch subjects. It defaults to \"auto\" which enables it only if there is more than one patch. It can be enabled or disabled for all messages by setting it to \"true\" or \"false\". See --numbered option in git-format-patch[1]. Additional email headers to include in a patch to be submitted by mail. See git-format-patch[1]. Additional recipients to include in a patch to be submitted by mail. See the --to and --cc options in git-format-patch[1]. The default for format-patch is to output files with the [PATCH] subject prefix. Use this variable to change that prefix. The default mode for format-patch to determine which parts of the cover letter will be populated using the branch’s description. See the option in git-format-patch[1]. The default for format-patch is to output a signature containing the Git version number. Use this variable to change that default. Set this variable to the empty string (\"\") to suppress signature generation. Works just like format.signature except the contents of the file specified by this variable will be used as the signature. The default for format-patch is to output files with the suffix . Use this variable to change that suffix (make sure to include the dot if you want it). Encode email headers that have non-ASCII characters with \"Q-encoding\" (described in RFC 2047) for email transmission. Defaults to true. The default pretty format for log/show/whatchanged command. See git-log[1], git-show[1], git-whatchanged[1]. The default threading style for git format-patch. Can be a boolean value, or or . threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the , and the first patch mail, in this order. threading makes every mail a reply to the previous one. A true boolean value is the same as , and a false value disables threading. A boolean value which lets you enable the option of format-patch by default. Note: Adding the trailer to a patch should be a conscious act and means that you certify you have the rights to submit this work under the same open source license. Please see the SubmittingPatches document for further discussion. A boolean that controls whether to generate a cover-letter when format-patch is invoked, but in addition can be set to \"auto\", to generate a cover-letter only when there’s more than one patch. Default is false. Set a custom directory to store the resulting files instead of the current working directory. All directory components will be created. The maximum length of the output filenames generated by the command; defaults to 64. Can be overridden by the command line option. A boolean value which lets you enable the option of format-patch by default. Can also be set to \"whenAble\" to allow enabling if a suitable base is available, but to skip adding base info otherwise without the format dying. Provides the default value for the option to format-patch. Accepts a boolean value, or a ref which specifies where to get notes. If false, format-patch defaults to . If true, format-patch defaults to . If set to a non-boolean value, format-patch defaults to , where is the non-boolean value. Defaults to false. If one wishes to use the ref , please use that literal instead. This configuration can be specified multiple times in order to allow multiple notes refs to be included. In that case, it will behave similarly to multiple options passed in. That is, a value of will show the default notes, a value of will also show notes from that notes ref and a value of will negate previous configurations and not show notes. will only show notes from . A boolean value which enables the robust \"mboxrd\" format when is in use to escape \"^>+From \" lines. If set, do not show any source or destination prefix in patches. This is equivalent to the option used by (but which is not respected by ). Note that by setting this, the receiver of any patches you generate will have to apply them using the option. During fsck git may find issues with legacy data which wouldn’t be generated by current versions of git, and which wouldn’t be sent over the wire if was set. This feature is intended to support working with legacy repositories containing such data. Setting will be picked up by git-fsck[1], but to accept pushes of such data set instead, or to clone or fetch it set . The rest of the documentation discusses for brevity, but the same applies for the corresponding and . variables. Unlike variables like and , the and variables will not fall back on the configuration if they aren’t set. To uniformly configure the same fsck settings in different circumstances, all three of them must be set to the same values. When is set, errors can be switched to warnings and vice versa by configuring the setting where the is the fsck message ID and the value is one of , or . For convenience, fsck prefixes the error/warning with the message ID, e.g. \"missingEmail: invalid author/committer line - missing email\" means that setting will hide that issue. In general, it is better to enumerate existing objects with problems with , instead of listing the kind of breakages these problematic objects share to be ignored, as doing the latter will allow new instances of the same breakages go unnoticed. Setting an unknown value will cause fsck to die, but doing the same for and will only cause git to warn. See the section of git-fsck[1] for supported values of . The path to a list of object names (i.e. one unabbreviated SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. On versions of Git 2.20 and later, comments (#), empty lines, and any leading and trailing whitespace are ignored. Everything but a SHA-1 per line will error out on older versions. This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored, such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting. Like this variable has corresponding and variants. Unlike variables like and the and variables will not fall back on the configuration if they aren’t set. To uniformly configure the same fsck settings in different circumstances, all three of them must be set to the same values. Older versions of Git (before 2.20) documented that the object names list should be sorted. This was never a requirement; the object names could appear in any order, but when reading the list we tracked whether the list was sorted for the purposes of an internal binary search implementation, which could save itself some work with an already sorted list. Unless you had a humongous list there was no reason to go out of your way to pre-sort the list. After Git version 2.20 a hash implementation is used instead, so there’s now no reason to pre-sort the list. By default, the fsmonitor daemon refuses to work with network-mounted repositories. Setting to overrides this behavior. Only respected when is set to . This Mac OS-specific option, if set, specifies the directory in which to create the Unix domain socket used for communication between the fsmonitor daemon and various Git commands. The directory must reside on a native Mac OS filesystem. Only respected when is set to . The depth parameter used in the delta compression algorithm used by git gc --aggressive. This defaults to 50, which is the default for the option when isn’t in use. See the documentation for the option in git-repack[1] for more details. The window size parameter used in the delta compression algorithm used by git gc --aggressive. This defaults to 250, which is a much more aggressive window size than the default of 10. See the documentation for the option in git-repack[1] for more details. When there are approximately more than this many loose objects in the repository, will pack them. Some Porcelain commands use this command to perform a light-weight garbage collection from time to time. The default value is 6700. Setting this to 0 disables not only automatic packing based on the number of loose objects, but also any other heuristic will otherwise use to determine if there’s work to do, such as . When there are more than this many packs that are not marked with file in the repository, consolidates them into one larger pack. The default value is 50. Setting this to 0 disables it. Setting to 0 will also disable this. See the configuration variable below. When in use, it’ll affect how the auto pack limit works. Make return immediately and run in the background if the system supports it. Default is true. This config variable acts as a fallback in case is not set. If non-zero, all non-cruft packs larger than this limit are kept when is run. This is very similar to except that all non-cruft packs that meet the threshold are kept, not just the largest pack. Defaults to zero. Common unit suffixes of k, m, or g are supported. Note that if the number of kept packs is more than gc.autoPackLimit, this configuration variable is ignored, all packs except the base pack will be repacked. After this the number of packs should go below gc.autoPackLimit and gc.bigPackThreshold should be respected again. If the amount of memory estimated for to run smoothly is not available and is not set, the largest pack will also be excluded (this is the equivalent of running with ). If true, then gc will rewrite the commit-graph file when git-gc[1] is run. When using the commit-graph will be updated if housekeeping is required. Default is true. See git-commit-graph[1] for details. If the file gc.log exists, then will print its content and exit with status zero instead of running unless that file is more than gc.logExpiry old. Default is \"1.day\". See for more ways to specify its value. Running in a repository renders it unclonable by Git versions prior to 1.5.1.2 over dumb transports such as HTTP. This variable determines whether git gc runs . This can be set to to enable it within all non-bare repos or it can be set to a boolean value. The default is . Store unreachable objects in a cruft pack (see git-repack[1]) instead of as loose objects. The default is . Limit the size of new cruft packs when repacking. When specified in addition to , the command line option takes priority. See the option of git-repack[1]. When git gc is run, it will call prune --expire 2.weeks.ago (and repack --cruft --cruft-expiration 2.weeks.ago if using cruft packs via or ). Override the grace period with this config variable. The value \"now\" may be used to disable this grace period and always prune unreachable objects immediately, or \"never\" may be used to suppress pruning. This feature helps prevent corruption when git gc runs concurrently with another process writing to the repository; see the \"NOTES\" section of git-gc[1]. When git gc is run, it calls git worktree prune --expire 3.months.ago. This config variable can be used to set a different grace period. The value \"now\" may be used to disable the grace period and prune immediately, or \"never\" may be used to suppress pruning. git reflog expire removes reflog entries older than this time; defaults to 90 days. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. With \"<pattern>\" (e.g. \"refs/stash\") in the middle the setting applies only to the refs that match the <pattern>. git reflog expire removes reflog entries older than this time and are not reachable from the current tip; defaults to 30 days. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. With \"<pattern>\" (e.g. \"refs/stash\") in the middle, the setting applies only to the refs that match the <pattern>. These types of entries are generally created as a result of using or and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner, which is why the default is more aggressive than . When considering whether or not to remove an object (either when generating a cruft pack or storing unreachable objects as loose), use the shell to execute the specified command(s). Interpret their output as object IDs which Git will consider as \"recent\", regardless of their age. By treating their mtimes as \"now\", any objects (and their descendants) mentioned in the output will be kept regardless of their true age. Output must contain exactly one hex object ID per line, and nothing else. Objects which cannot be found in the repository are ignored. Multiple hooks are supported, but all must exit successfully, else the operation (either generating a cruft pack or unpacking unreachable objects) will be halted. When repacking, use the specified filter to move certain objects into a separate packfile. See the option of git-repack[1]. When repacking and using a filter, see , the specified location will be used to create the packfile containing the filtered out objects. WARNING: The specified location should be accessible, using for example the Git alternates mechanism, otherwise the repo could be considered corrupt by Git as it might not be able to access the objects in that packfile. See the option of git-repack[1] and the section of gitrepository-layout[5]. Records of conflicted merge you resolved earlier are kept for this many days when git rerere gc is run. You can also use more human-readable \"1.month.ago\", etc. The default is 60 days. See git-rerere[1]. Records of conflicted merge you have not resolved are kept for this many days when git rerere gc is run. You can also use more human-readable \"1.month.ago\", etc. The default is 15 days. See git-rerere[1]. Append this string to each commit message. Set to empty string to disable this feature. Defaults to \"via git-CVS emulator\". Whether the CVS server interface is enabled for this repository. See git-cvsserver[1]. Path to a log file where the CVS server interface well…​ logs various stuff. See git-cvsserver[1]. If true, the server will look up the end-of-line conversion attributes for files to determine the modes to use. If the attributes force Git to treat a file as text, the mode will be left blank so CVS clients will treat it as text. If they suppress text conversion, the file will be set with -kb mode, which suppresses any newline munging the client might otherwise do. If the attributes do not allow the file type to be determined, then is used. See gitattributes[5]. This is used if does not resolve the correct -kb mode to use. If true, all unresolved files are sent to the client in mode -kb. This causes the client to treat them as binary files, which suppresses any newline munging it otherwise might do. Alternatively, if it is set to \"guess\", then the contents of the file are examined to decide if it is binary, similar to . Database used by git-cvsserver to cache revision information derived from the Git repository. The exact meaning depends on the used database driver, for SQLite (which is the default driver) this is a filename. Supports variable substitution (see git-cvsserver[1] for details). May not contain semicolons ( ). Default: %Ggitcvs.%m.sqlite Used Perl DBI driver. You can specify any available driver for this here, but it might not work. git-cvsserver is tested with DBD::SQLite, reported to work with DBD::Pg, and reported not to work with DBD::mysql. Experimental feature. May not contain double colons ( ). Default: SQLite. See git-cvsserver[1]. Database user and password. Only useful if setting , since SQLite has no concept of database users and/or passwords. gitcvs.dbUser supports variable substitution (see git-cvsserver[1] for details). Database table name prefix. Prepended to the names of any database tables used, allowing a single database to be used for several repositories. Supports variable substitution (see git-cvsserver[1] for details). Any non-alphabetic characters will be replaced with underscores.\n\nUse this custom program instead of \" \" found on when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, \" \" is run, and the program is expected to signal a good signature by exiting with code 0. To generate an ASCII-armored detached signature, the standard input of \" \" is fed with the contents to be signed, and the program is expected to send the result to its standard output. Specifies which key format to use when signing with . Default is \"openpgp\". Other possible values are \"x509\", \"ssh\". See gitformat-signature[5] for the signature format, which differs based on the selected . Use this to customize the program used for the signing format you chose. (see and ) can still be used as a legacy synonym for . The default value for is \"gpgsm\" and is \"ssh-keygen\". Specifies a minimum trust level for signature verification. If this option is unset, then signature verification for merge operations requires a key with at least trust. Other operations that perform signature verification require a key with at least trust. Setting this option overrides the required trust-level for all operations. Supported values, in increasing order of significance: This command will be run when user.signingkey is not set and a ssh signature is requested. On successful exit a valid ssh public key prefixed with is expected in the first line of its output. This allows for a script doing a dynamic lookup of the correct public key when it is impractical to statically configure . For example when keys or SSH Certificates are rotated frequently or selection of the right key depends on external factors unknown to git. A file containing ssh public keys which you are willing to trust. The file consists of one or more lines of principals followed by an ssh public key. e.g.: See ssh-keygen(1) \"ALLOWED SIGNERS\" for details. The principal is only used to identify the key and is available when verifying a signature. SSH has no concept of trust levels like gpg does. To be able to differentiate between valid signatures and trusted signatures the trust level of a signature verification is set to when the public key is present in the allowedSignersFile. Otherwise the trust level is and git verify-commit/tag will fail. This file can be set to a location outside of the repository and every developer maintains their own trust store. A central repository server could generate this file automatically from ssh keys with push access to verify the code against. In a corporate setting this file is probably generated at a global location from automation that already handles developer ssh keys. A repository that only allows signed commits can store the file in the repository itself using a path relative to the top-level of the working tree. This way only committers with an already valid key can add or change keys in the keyring. Since OpensSSH 8.8 this file allows specifying a key lifetime using valid-after & valid-before options. Git will mark signatures as valid if the signing key was valid at the time of the signature’s creation. This allows users to change a signing key without invalidating all previously made signatures. Using a SSH CA key with the cert-authority option (see ssh-keygen(1) \"CERTIFICATES\") is also valid. Either a SSH KRL or a list of revoked public keys (without the principal prefix). See ssh-keygen(1) for details. If a public key is found in this file then it will always be treated as having trust level \"never\" and signatures will show as invalid. If set to true, enable option by default. If set to true, enable the option by default. Set the default matching behavior. Using a value of basic, extended, fixed, or perl will enable the , , , or option accordingly, while the value default will use the option to choose between basic and extended. If set to true, enable option by default. This option is ignored when the option is set to a value other than default. Number of grep worker threads to use. If unset (or set to 0), Git will use as many threads as the number of logical cores available. If set to true, enable option by default. If set to true, fall back to if is executed outside of a git repository. Defaults to false. Defines how wide the commit message window is in the git-gui[1]. \"75\" is the default. Specifies how many context lines should be used in calls to diff made by the git-gui[1]. The default is \"5\". Determines if git-gui[1] shows untracked files in the file list. The default is \"true\". Specifies the default character encoding to use for displaying of file contents in git-gui[1] and gitk[1]. It can be overridden by setting the encoding attribute for relevant files (see gitattributes[5]). If this option is not set, the tools default to the locale encoding. Determines if new branches created with git-gui[1] should default to tracking remote branches with matching names or not. Default: \"false\". Is used as a suggested name when creating new branches using the git-gui[1]. \"true\" if git-gui[1] should prune remote-tracking branches when performing a fetch. The default value is \"false\". Determines if git-gui[1] should trust the file modification timestamp or not. By default the timestamps are not trusted. Specifies the dictionary used for spell checking commit messages in the git-gui[1]. When set to \"none\" spell checking is turned off. If true, git gui blame uses instead of for original location detection. It makes blame significantly faster on huge repositories at the expense of less thorough copy detection. Specifies the threshold to use in git gui blame original location detection, measured in alphanumeric characters. See the git-blame[1] manual for more information on copy detection. Specifies the radius of history context in days to show in gitk[1] for the selected commit, when the menu item is invoked from git gui blame. If this variable is set to zero, the whole history is shown. Specifies the shell command line to execute when the corresponding item of the git-gui[1] menu is invoked. This option is mandatory for every tool. The command is executed from the root of the working directory, and in the environment it receives the name of the tool as , the name of the currently selected file as FILENAME, and the name of the current branch as CUR_BRANCH (if the head is detached, CUR_BRANCH is empty). Run the tool only if a diff is selected in the GUI. It guarantees that FILENAME is not empty. Run the command silently, without creating a window to display its output. Don’t rescan the working directory for changes after the tool finishes execution. Show a confirmation dialog before actually running the tool. Request a string argument from the user, and pass it to the tool through the environment variable. Since requesting an argument implies confirmation, the confirm option has no effect if this is enabled. If the option is set to true, yes, or 1, the dialog uses a built-in generic prompt; otherwise the exact value of the variable is used. Request a single valid revision from the user, and set the environment variable. In other aspects this option is similar to argPrompt, and can be used together with it. Show only unmerged branches in the revPrompt subdialog. This is useful for tools similar to merge or rebase, but not for things like checkout or reset. Specifies the title to use for the prompt dialog. The default is the tool name. Specifies the general prompt string to display at the top of the dialog, before subsections for argPrompt and revPrompt. The default value includes the actual command. Specify the browser that will be used to display help in the web format. See git-help[1]. Override the default help format used by git-help[1]. Values man, info, web and html are supported. man is the default. web and html are the same. If git detects typos and can identify exactly one valid command similar to the error, git will try to suggest the correct command or even run the suggestion automatically. Possible config values are:\n• 0, \"false\", \"off\", \"no\", \"show\": show the suggested command (default).\n• 1, \"true\", \"on\", \"yes\", \"immediate\": run the suggested command immediately.\n• positive number > 1: run the suggested command after specified deciseconds (0.1 sec).\n• \"never\": don’t run or show any suggested command.\n• \"prompt\": show the suggestion and prompt for confirmation to run the command. Specify the path where the HTML documentation resides. File system paths and URLs are supported. HTML pages will be prefixed with this path when help is displayed in the web format. This defaults to the documentation path of your Git installation. Override the HTTP proxy, normally configured using the http_proxy, https_proxy, and all_proxy environment variables (see ). In addition to the syntax understood by curl, it is possible to specify a proxy string with a user name but no password, in which case git will attempt to acquire one in the same way it does for other credentials. See gitcredentials[7] for more information. The syntax thus is [protocol://][user[:password]@]proxyhost[:port][/path]. This can be overridden on a per-remote basis; see remote.<name>.proxy Any proxy, however configured, must be completely transparent and must not modify, transform, or buffer the request or response in any way. Proxies which are not completely transparent are known to cause various forms of breakage with Git. Set the method with which to authenticate against the HTTP proxy. This only takes effect if the configured proxy string contains a user name part (i.e. is of the form user@host or user@host:port). This can be overridden on a per-remote basis; see . Both can be overridden by the environment variable. Possible values are:\n• - Automatically pick a suitable authentication method. It is assumed that the proxy answers an unauthenticated request with a 407 status code and one or more Proxy-authenticate headers with supported authentication methods. This is the default.\n• - HTTP Digest authentication; this prevents the password from being transmitted to the proxy in clear text The pathname of a file that stores a client certificate to use to authenticate with an HTTPS proxy. Can be overridden by the environment variable. The pathname of a file that stores a private key to use to authenticate with an HTTPS proxy. Can be overridden by the environment variable. Enable Git’s password prompt for the proxy SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted. Can be overridden by the environment variable. Pathname to the file containing the certificate bundle that should be used to verify the proxy with when using an HTTPS proxy. Can be overridden by the environment variable. Attempt authentication without seeking a username or password. This can be used to attempt GSS-Negotiate authentication without specifying a username in the URL, as libcurl normally requires a username for authentication. Attempt authentication without first making an unauthenticated attempt and receiving a 401 response. This can be used to ensure that all requests are authenticated. If is set to true, this value has no effect. If the credential helper used specifies an authentication scheme (i.e., via the field), that value will be used; if a username and password is provided without a scheme, then Basic authentication is used. The value of the option determines the scheme requested from the helper. Possible values are:\n• - Allow the helper to pick an appropriate scheme. Note that TLS should always be used with this configuration, since otherwise it is easy to accidentally expose plaintext credentials if Basic authentication is selected. Control GSSAPI credential delegation. The delegation is disabled by default in libcurl since version 7.21.7. Set parameter to tell the server what it is allowed to delegate when it comes to user credentials. Used with GSS/kerberos. Possible values are:\n• - Delegates if and only if the OK-AS-DELEGATE flag is set in the Kerberos service ticket, which is a matter of realm policy.\n• - Unconditionally allow the server to delegate. Pass an additional HTTP header when communicating with a server. If more than one such entry exists, all of them are added as extra headers. To allow overriding the settings inherited from the system config, an empty value will reset the extra headers to the empty list. The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see ). Set it to an empty string, to accept only new cookies from the server and send them back in successive requests within same connection. NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set. If set, store cookies received during requests to the file specified by http.cookieFile. Has no effect if http.cookieFile is unset, or set to an empty string. Use the specified HTTP protocol version when communicating with a server. If you want to force the default. The available and default version depend on libcurl. Currently the possible values of this option are: Hostname resolution information that will be used first by libcurl when sending HTTP requests. This information should be in one of the following formats: The first format redirects all requests to the given to the provided (s). The second format clears all previous config values for that combination. To allow easy overriding of all the settings inherited from the system config, an empty value will reset all resolution information to the empty list. The SSL version to use when negotiating an SSL connection, if you want to force the default. The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the CURLOPT_SSL_VERSION option; see the libcurl documentation for more details on the format of this option and for the ssl version supported. Currently the possible values of this option are: Can be overridden by the environment variable. To force git to use libcurl’s default ssl version and ignore any explicit http.sslversion option, set to the empty string. A list of SSL ciphers to use when negotiating an SSL connection. The available ciphers depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the CURLOPT_SSL_CIPHER_LIST option; see the libcurl documentation for more details on the format of this list. Can be overridden by the environment variable. To force git to use libcurl’s default cipher list and ignore any explicit http.sslCipherList option, set to the empty string. Whether to verify the SSL certificate when fetching or pushing over HTTPS. Defaults to true. Can be overridden by the environment variable. File containing the SSL certificate when fetching or pushing over HTTPS. Can be overridden by the environment variable. File containing the SSL private key when fetching or pushing over HTTPS. Can be overridden by the environment variable. Enable Git’s password prompt for the SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted. Can be overridden by the environment variable. File containing the certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the environment variable. Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the environment variable. Name of the SSL backend to use (e.g. \"openssl\" or \"schannel\"). This option is ignored if cURL lacks support for choosing the SSL backend at runtime. Type of client certificate used when fetching or pushing over HTTPS. \"PEM\", \"DER\" are supported when using openssl or gnutls backends. \"P12\" is supported on \"openssl\", \"schannel\", \"securetransport\", and gnutls 8.11+. See also libcurl . Can be overridden by the environment variable. Type of client private key used when fetching or pushing over HTTPS. (e.g. \"PEM\", \"DER\", or \"ENG\"). Only applicable when using \"openssl\" backend. \"DER\" is not supported with openssl. Particularly useful when set to \"ENG\" for authenticating with PKCS#11 tokens, with a PKCS#11 URL in sslCert option. See also libcurl . Can be overridden by the environment variable. Used to enforce or disable certificate revocation checks in cURL when http.sslBackend is set to \"schannel\". Defaults to if unset. Only necessary to disable this if Git consistently errors and the message is about checking the revocation status of a certificate. This option is ignored if cURL lacks support for setting the relevant SSL option at runtime. As of cURL v7.60.0, the Secure Channel backend can use the certificate bundle provided via , but that would override the Windows Certificate Store. Since this is not desirable by default, Git will tell cURL not to use that bundle by default when the backend was configured via , unless overrides this behavior. Public key of the https service. It may either be the filename of a PEM or DER encoded public key file or a string starting with sha256// followed by the base64 encoded sha256 hash of the public key. See also libcurl CURLOPT_PINNEDPUBLICKEY. git will exit with an error if this option is set but not supported by cURL. Attempt to use AUTH SSL/TLS and encrypted data transfers when connecting via regular FTP protocol. This might be needed if the FTP server requires it for security reasons or you wish to connect securely whenever remote FTP server supports it. Default is false since it might trigger certificate verification errors on misconfigured servers. How many HTTP requests to launch in parallel. Can be overridden by the environment variable. Default is 5. The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1. Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system. For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests. Note that raising this limit is only effective for disabling chunked transfer encoding and therefore should be used only where the remote server or a proxy only supports HTTP/1.0 or is noncompliant with the HTTP standard. Raising this is not, in general, an effective solution for most push problems, but can increase memory consumption significantly since the entire buffer is allocated even for small pushes. If the HTTP transfer speed, in bytes per second, is less than http.lowSpeedLimit for longer than http.lowSpeedTime seconds, the transfer is aborted. Can be overridden by the and environment variables. A boolean which disables using of EPSV ftp command by curl. This can be helpful with some \"poor\" ftp servers which don’t support EPSV mode. Can be overridden by the environment variable. Default is false (curl will use EPSV). The HTTP USER_AGENT string presented to an HTTP server. The default value represents the version of the Git client such as git/1.7.1. This option allows you to override this value to a more common value such as Mozilla/4.0. This may be necessary, for instance, if connecting through a firewall that restricts HTTP connections to a set of common USER_AGENT strings (but not including those like git/1.7.1). Can be overridden by the environment variable. Whether git should follow HTTP redirects. If set to , git will transparently follow any redirect issued by a server it encounters. If set to , git will treat all redirects as errors. If set to , git will follow redirects only for the initial request to a remote, but not for subsequent follow-up HTTP requests. Since git uses the redirected URL as the base for the follow-up requests, this is generally sufficient. The default is . Any of the http.* options above can be applied selectively to some URLs. For a config key to match a URL, each element of the config key is compared to that of the URL, in the following order:\n• Scheme (e.g., in ). This field must match exactly between the config key and the URL.\n• Host/domain name (e.g., in ). This field must match between the config key and the URL. It is possible to specify a as part of the host name to match all subdomains at this level. for example would match , but not .\n• Port number (e.g., in ). This field must match exactly between the config key and the URL. Omitted port numbers are automatically converted to the correct default for the scheme before matching.\n• Path (e.g., in ). The path field of the config key must match the path field of the URL either exactly or as a prefix of slash-delimited path elements. This means a config key with path matches URL path . A prefix can only match on a slash ( ) boundary. Longer matches take precedence (so a config key with path is a better match to URL path than a config key with just path ).\n• User name (e.g., in ). If the config key has a user name it must match the user name in the URL exactly. If the config key does not have a user name, that config key will match a URL with any user name (including none), but at a lower precedence than a config key with a user name. The list above is ordered by decreasing precedence; a URL that matches a config key’s path is preferred to one that matches its user name. For example, if the URL is a config key match of will be preferred over a config key match of . All URLs are normalized before attempting any matching (the password part, if embedded in the URL, is always ignored for matching purposes) so that equivalent URLs that are simply spelled differently will match properly. Environment variable settings always override any matches. The URLs that are matched against are those given directly to Git commands. This means any URLs visited as a result of a redirection do not participate in matching. Character encoding the commit messages are stored in; Git itself does not care per se, but this information is necessary e.g. when importing commits from emails or in the gitk graphical history browser (and possibly in other places in the future or in other porcelains). See e.g. git-mailinfo[1]. Defaults to utf-8. Character encoding the commit messages are converted to when running git log and friends. The folder to drop the mails into, which is typically the Drafts folder. For example: \"INBOX.Drafts\", \"INBOX/Drafts\" or \"[Gmail]/Drafts\". Required. Command used to set up a tunnel to the IMAP server through which commands will be piped instead of using a direct network connection to the server. Required when imap.host is not set. A URL identifying the server. Use an prefix for non-secure connections and an prefix for secure connections. Ignored when imap.tunnel is set, but required otherwise. The username to use when logging in to the server. The password to use when logging in to the server. An integer port number to connect to on the server. Defaults to 143 for imap:// hosts and 993 for imaps:// hosts. Ignored when imap.tunnel is set. A boolean to enable/disable verification of the server certificate used by the SSL/TLS connection. Default is . Ignored when imap.tunnel is set. A boolean to enable/disable the use of html encoding when sending a patch. An html encoded patch will be bracketed with <pre> and have a content type of text/html. Ironically, enabling this option causes Thunderbird to send the patch as a plain/text, format=fixed email. Default is . Specify the authentication method for authenticating with the IMAP server. If Git was built with the NO_CURL option, or if your curl version is older than 7.34.0, or if you’re running git-imap-send with the option, the only supported method is CRAM-MD5. If this is not set then git imap-send uses the basic IMAP plaintext LOGIN command. Special variables to include other configuration files. See the \"CONFIGURATION FILE\" section in the main git-config[1] documentation, specifically the \"Includes\" and \"Conditional Includes\" subsections. Specifies whether the index file should include an \"End Of Index Entry\" section. This reduces index load time on multiprocessor machines but produces a message \"ignoring EOIE extension\" when reading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise. Specifies whether the index file should include an \"Index Entry Offset Table\" section. This reduces index load time on multiprocessor machines but produces a message \"ignoring IEOT extension\" when reading the index using Git versions before 2.20. Defaults to true if index.threads has been explicitly enabled, false otherwise. When enabled, write the index using sparse-directory entries. This has no effect unless and are both enabled. Defaults to false. Specifies the number of threads to spawn when loading the index. This is meant to reduce index load time on multiprocessor machines. Specifying 0 or true will cause Git to auto-detect the number of CPUs and set the number of threads accordingly. Specifying 1 or false will disable multithreading. Defaults to true. Specify the version with which new index files should be initialized. This does not affect existing repositories. If is enabled, then the default is 4. When enabled, do not compute the trailing hash for the index file. This accelerates Git commands that manipulate the index, such as , , or . Instead of storing the checksum, write a trailing set of bytes with value zero, indicating that the computation was skipped. If you enable , then Git clients older than 2.13.0 will refuse to parse the index and Git clients older than 2.40.0 will report an error during .\n\nSpecify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of git-init[1].) Allows overriding the default branch name e.g. when initializing a new repository. Allows overriding the default object format for new repositories. See in git-init[1]. Both the command line option and the environment variable take precedence over this config. Allows overriding the default ref storage format for new repositories. See in git-init[1]. Both the command line option and the environment variable take precedence over this config. Specify the program that will be used to browse your working repository in gitweb. See git-instaweb[1]. The HTTP daemon command-line to start gitweb on your working repository. See git-instaweb[1]. If true the web server started by git-instaweb[1] will be bound to the local IP (127.0.0.1). The default module path for git-instaweb[1] to use instead of /usr/lib/apache2/modules. Only used if httpd is Apache. The port number to bind the gitweb httpd to. See git-instaweb[1]. When set to true, allow the user to provide one-letter input with a single key (i.e., without hitting the Enter key) in interactive commands. This is currently used by the mode of git-add[1], git-checkout[1], git-restore[1], git-commit[1], git-reset[1], and git-stash[1]. When an interactive command (such as ) shows a colorized diff, git will pipe the diff through the shell command defined by this configuration variable. The command may mark up the diff further for human consumption, provided that it retains a one-to-one correspondence with the lines in the original diff. Defaults to disabled (no filtering). If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume . You may override this option with . Set the default date-time mode for the log command. Setting a value for log.date is similar to using git log's option. See git-log[1] for details. If the format is set to \"auto:foo\" and the pager is in use, format \"foo\" will be used for the date format. Otherwise, \"default\" will be used. Print out the ref names of any commits that are shown by the log command. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. This is the same as the option of the . By default, only shows decorations for certain known ref namespaces. If all is specified, then show all refs as decorations. Exclude the specified patterns from the log decorations. This is similar to the command-line option, but the config option can be overridden by the option. Set diff format to be used when is specified, see in git-log[1] for details. Defaults to . If , will act as if the option was used when a single <path> is given. This has the same limitations as , i.e. it cannot be used to follow multiple files and does not work well on non-linear history. A list of colors, separated by commas, that can be used to draw history lines in . If true, the initial commit will be shown as a big creation event. This is equivalent to a diff against an empty tree. Tools like git-log[1] or git-whatchanged[1], which normally hide the root commit will now show it. True by default. If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume , otherwise assume . True by default. May be \"advertise\" (the default), \"allow\", or \"ignore\". If \"advertise\", the server will respond to the client sending \"unborn\" (as described in gitprotocol-v2[5]) and will advertise support for this feature during the protocol v2 capability advertisement. \"allow\" is the same as \"advertise\" except that the server will not advertise support for this feature; this is useful for load-balanced servers that cannot be updated atomically (for example), since the administrator could configure \"allow\", then after a delay, configure \"advertise\". If true, makes git-mailinfo[1] (and therefore git-am[1]) act by default as if the --scissors option was provided on the command-line. When active, this feature removes everything from the message body before a scissors line (i.e. consisting mainly of \">8\", \"8<\" and \"-\"). The location of an augmenting mailmap file. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself. See git-shortlog[1] and git-blame[1]. Like , but consider the value as a reference to a blob in the repository. If both and are given, both are parsed, with entries from taking precedence. In a bare repository, this defaults to . In a non-bare repository, it defaults to empty. This boolean config option controls whether some commands run after doing their normal work. Defaults to true. Many Git commands trigger automatic maintenance after they have written data into the repository. This boolean config option controls whether this automatic maintenance shall happen in the foreground or whether the maintenance process shall detach and continue to run in the background. If unset, the value of is used as a fallback. Defaults to true if both are unset, meaning that the maintenance process will detach. This string config option provides a way to specify one of a few recommended schedules for background maintenance. This only affects which tasks are run during commands, provided no arguments are provided. Further, if a config value is set, then that value is used instead of the one provided by . The possible strategy strings are:\n• : This default setting implies no tasks are run at any schedule.\n• : This setting optimizes for performing small maintenance activities that do not delete any data. This does not schedule the task, but runs the and tasks hourly, the and tasks daily, and the task weekly. This boolean config option controls whether the maintenance task with name is run when no option is specified to . These config values are ignored if a option exists. By default, only is true. This config option controls whether or not the given runs during a command. The value must be one of \"hourly\", \"daily\", or \"weekly\". This integer config option controls how often the task should be run as part of . If zero, then the task will not run with the option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of reachable commits that are not in the commit-graph file is at least the value of . The default value is 100. This integer config option controls how often the task should be run as part of . If zero, then the task will not run with the option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of loose objects is at least the value of . The default value is 100. This integer config option controls how often the task should be run as part of . If zero, then the task will not run with the option. A negative value will force the task to run every time. Otherwise, a positive value implies the command should run when the number of pack-files not in the multi-pack-index is at least the value of . The default value is 10. Specify the programs that may be used to display help in the man format. See git-help[1]. Specify the command to invoke the specified man viewer. The specified command is evaluated in shell with the man page passed as an argument. (See git-help[1].) Override the path for the given tool that may be used to display help in the man format. See git-help[1]. Specify the style in which conflicted hunks are written out to working tree files upon merge. The default is \"merge\", which shows a conflict marker, changes made by one side, a marker, changes made by the other side, and then a marker. An alternate style, \"diff3\", adds a marker and the original text before the marker. The \"merge\" style tends to produce smaller conflict regions than diff3, both because of the exclusion of the original text, and because when a subset of lines match on the two sides, they are just pulled out of the conflict region. Another alternate style, \"zdiff3\", is similar to diff3 but removes matching lines on the two sides from the conflict region when those matching lines appear near either the beginning or end of a conflict region. If merge is called without any commit argument, merge the upstream branches configured for the current branch by using their last observed values stored in their remote-tracking branches. The values of the that name the branches at the remote named by are consulted, and then they are mapped via to their corresponding remote-tracking branches, and the tips of these tracking branches are merged. Defaults to true. By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to , this variable tells Git to create an extra merge commit in such a case (equivalent to giving the option from the command line). When set to , only such fast-forward merges are allowed (equivalent to giving the option from the command line). If true, this is equivalent to the --verify-signatures command line option. See git-merge[1] for details. In addition to branch names, populate the log message with the branch description text associated with them. Defaults to false. In addition to branch names, populate the log message with at most the specified number of one-line descriptions from the actual commits that are being merged. Defaults to false, and true is a synonym for 20. By adding a glob that matches the names of integration branches to this multi-valued configuration variable, the default merge message computed for merges into these integration branches will omit \"into <branch name>\" from its title. An element with an empty value can be used to clear the list of globs accumulated from previous configuration entries. When there is no variable defined, the default value of is used for backward compatibility. The number of files to consider in the exhaustive portion of rename detection during a merge. If not specified, defaults to the value of diff.renameLimit. If neither merge.renameLimit nor diff.renameLimit are specified, currently defaults to 7000. This setting has no effect if rename detection is turned off. Whether Git detects renames. If set to \"false\", rename detection is disabled. If set to \"true\", basic rename detection is enabled. Defaults to the value of diff.renames. Whether Git detects directory renames, affecting what happens at merge time to new files added to a directory on one side of history when that directory was renamed on the other side of history. If merge.directoryRenames is set to \"false\", directory rename detection is disabled, meaning that such new files will be left behind in the old directory. If set to \"true\", directory rename detection is enabled, meaning that such new files will be moved into the new directory. If set to \"conflict\", a conflict will be reported for such paths. If merge.renames is false, merge.directoryRenames is ignored and treated as false. Defaults to \"conflict\". Tell Git that canonical representation of files in the repository has changed over time (e.g. earlier commits record text files with CRLF line endings, but recent ones use LF line endings). In such a repository, for each file where a three-way content merge is needed, Git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts. For more information, see section \"Merging branches with differing checkin/checkout attributes\" in gitattributes[5]. Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge. True by default. When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run merge on a dirty worktree. However, use with care: the final stash application after a successful merge might result in non-trivial conflicts. This option can be overridden by the and options of git-merge[1]. Defaults to false. Controls which merge tool is used by git-mergetool[1]. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.<tool>.cmd variable is defined. Controls which merge tool is used by git-mergetool[1] when the -g/--gui flag is specified. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.<guitool>.cmd variable is defined. Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2. Can be overridden by the environment variable. Defines a human-readable name for a custom low-level merge driver. See gitattributes[5] for details. Defines the command that implements a custom low-level merge driver. See gitattributes[5] for details. Names a low-level merge driver to be used when performing an internal merge between common ancestors. See gitattributes[5] for details. Override the path for the given tool. This is useful in case your tool is not in the PATH. Specify the command to invoke the specified merge tool. The specified command is evaluated in shell with the following variables available: BASE is the name of a temporary file containing the common base of the files to be merged, if available; LOCAL is the name of a temporary file containing the contents of the file on the current branch; REMOTE is the name of a temporary file containing the contents of the file from the branch being merged; MERGED contains the name of the file to which the merge tool should write the results of a successful merge. Allows the user to override the global value for a specific tool. See for the full description. For a custom merge command, specify whether the exit code of the merge command can be used to determine whether the merge was successful. If this is not set to true then the merge target file timestamp is checked, and the merge is assumed to have been successful if the file has been updated; otherwise, the user is prompted to indicate the success of the merge. Older versions of do not support the option. Git will attempt to detect whether supports by inspecting the output of . Configuring will make Git skip these checks and use the configured value instead. Setting to tells Git to unconditionally use the option, and avoids using . When the is given, meld will merge all non-conflicting parts automatically, highlight the conflicting parts, and wait for user decision. Setting to tells Git to unconditionally use the option with . Setting this value to makes git detect whether is supported and will only use when available. A value of avoids using altogether, and is the default value. Configure the split window layout for vimdiff’s , which is any of , , . Upon launching with (or without if is configured as ), Git will consult to determine the tool’s layout. If the variant-specific configuration is not available, 's is used as fallback. If that too is not available, a default layout with 4 windows will be used. To configure the layout, see the section in git-mergetool[1]. During a merge, Git will automatically resolve as many conflicts as possible and write the MERGED file containing conflict markers around any conflicts that it cannot resolve; LOCAL and REMOTE normally represent the versions of the file from before Git’s conflict resolution. This flag causes LOCAL and REMOTE to be overwritten so that only the unresolved conflicts are presented to the merge tool. Can be configured per-tool via the configuration variable. Defaults to . After performing a merge, the original file with conflict markers can be saved as a file with a extension. If this variable is set to then this file is not preserved. Defaults to (i.e. keep the backup files). When invoking a custom merge tool, Git uses a set of temporary files to pass to the tool. If the tool returns an error and this variable is set to , then these temporary files will be preserved; otherwise, they will be removed after the tool has exited. Defaults to . Git writes temporary BASE, LOCAL, and REMOTE versions of conflicting files in the worktree by default. Git will attempt to use a temporary directory for these files when set . Defaults to . Prompt before each invocation of the merge resolution program. Set to use the by default (equivalent to specifying the argument), or to select or depending on the presence of a environment variable value. The default is , where the argument must be provided explicitly for the to be used. Which merge strategy to choose by default when resolving notes conflicts. Must be one of , , , , or . Defaults to . See the \"NOTES MERGE STRATEGIES\" section of git-notes[1] for more information on each strategy. This setting can be overridden by passing the option to git-notes[1]. Which merge strategy to choose when doing a notes merge into . This overrides the more general . See the \"NOTES MERGE STRATEGIES\" section in git-notes[1] for more information on the available strategies. Which ref (or refs, if a glob or specified more than once), in addition to the default set by or , to read notes from when showing commit messages with the family of commands. This setting can be overridden with the environment variable, which must be a colon separated list of refs or globs. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored. This setting can be disabled by the option to the git-log[1] family of commands, or by the option accepted by those commands. The effective value of (possibly overridden by ) is also implicitly added to the list of refs to be displayed. When rewriting commits with <command> (currently or ), if this variable is , git will not copy notes from the original to the rewritten commit. Defaults to . See also below. This setting can be overridden with the environment variable, which must be a colon separated list of refs or globs. When copying notes during a rewrite (see the option), determines what to do if the target commit already has a note. Must be one of , , , or . Defaults to . This setting can be overridden with the environment variable. When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. May be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times. Does not have a default value; you must configure this variable to enable note rewriting. Set it to to enable rewriting for the default commit notes. Can be overridden with the environment variable. See above for a further description of its format. The size of the window used by git-pack-objects[1] when no window size is given on the command line. Defaults to 10. The maximum delta depth used by git-pack-objects[1] when no maximum depth is given on the command line. Defaults to 50. Maximum value is 4095. The maximum size of memory that is consumed by each thread in git-pack-objects[1] for pack window memory when no limit is given on the command line. The value can be suffixed with \"k\", \"m\", or \"g\". When left unconfigured (or set explicitly to 0), there will be no limit. An integer -1..9, indicating the compression level for objects in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to -1, the zlib default, which is \"a default compromise between speed and compression (currently equivalent to level 6).\" Note that changing the compression level will not automatically recompress all existing objects. You can force recompression by passing the -F option to git-repack[1]. When true or \"single\", and when reachability bitmaps are enabled, pack-objects will try to send parts of the bitmapped packfile verbatim. When \"multi\", and when a multi-pack reachability bitmap is available, pack-objects will try to send parts of all packs in the MIDX. If only a single pack bitmap is available, and is set to \"multi\", reuse parts of just the bitmapped packfile. This can reduce memory and CPU usage to serve fetches, but might result in sending a slightly larger pack. Defaults to true. An extended regular expression configuring a set of delta islands. See \"DELTA ISLANDS\" in git-pack-objects[1] for details. Specify an island name which gets to have its objects be packed first. This creates a kind of pseudo-pack at the front of one pack, so that the objects from the specified island are hopefully faster to copy into any pack that should be served to a user requesting these objects. In practice this means that the island specified should likely correspond to what is the most commonly cloned in the repo. See also \"DELTA ISLANDS\" in git-pack-objects[1]. The maximum memory in bytes used for caching deltas in git-pack-objects[1] before writing them out to a pack. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping. A value of 0 means no limit. The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB. The maximum size of a delta, that is cached in git-pack-objects[1]. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000. Maximum value is 65535. Specifies the number of threads to spawn when searching for best delta matches. This requires that git-pack-objects[1] be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPUs and set the number of threads accordingly. Specify the default pack index version. Valid values are 1 for legacy pack index used by Git versions prior to 1.5.2, and 2 for the new pack index with capabilities for packs larger than 4 GB as well as proper protection against the repacking of corrupted packs. Version 2 is the default. Note that version 2 is enforced and this config option is ignored whenever the corresponding pack is larger than 2 GB. If you have an old Git that does not understand the version 2 file, cloning or fetching over a non-native protocol (e.g. \"http\") that will copy both file and corresponding file from the other side may give you a repository that cannot be accessed with your older version of Git. If the file is smaller than 2 GB, however, you can use git-index-pack[1] on the *.pack file to regenerate the file. The maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected. It can be overridden by the option of git-repack[1]. Reaching this limit results in the creation of multiple packfiles. Note that this option is rarely useful, and may result in a larger total on-disk size (because Git will not store deltas between packs) and worse runtime performance (object lookup within multiple packs is slower than a single pack, and optimizations like reachability bitmaps cannot cope with multiple packs). If you need to actively run Git using smaller packfiles (e.g., because your filesystem does not support large files), this option may help. But if your goal is to transmit a packfile over a medium that supports limited sizes (e.g., removable media that cannot store the whole repository), you are likely better off creating a single large packfile and splitting it using a generic multi-volume archive tool (e.g., Unix ). The minimum size allowed is limited to 1 MiB. The default is unlimited. Common unit suffixes of k, m, or g are supported. When true, git will use pack bitmaps (if available) when packing to stdout (e.g., during the server side of a fetch). Defaults to true. You should not generally need to turn this off unless you are debugging pack bitmaps. When true, Git will use an experimental algorithm for computing reachability queries with bitmaps. Instead of building up complete bitmaps for all of the negated tips and then OR-ing them together, consider negated tips with existing bitmaps as additive (i.e. OR-ing them into the result if they exist, ignoring them otherwise), and build up a bitmap at the boundary instead. When using this algorithm, Git may include too many objects as a result of not opening up trees belonging to certain UNINTERESTING commits. This inexactness matches the non-bitmap traversal algorithm. In many cases, this can provide a speed-up over the exact algorithm, particularly when there is poor bitmap coverage of the negated side of the query. When true, git will default to using the --sparse option in git pack-objects when the --revs option is present. This algorithm only walks trees that appear in paths that introduce new objects. This can have significant performance benefits when computing a pack to send a small change. However, it is possible that extra objects are added to the pack-file if the included commits contain certain types of direct renames. Default is . When selecting which commits will receive bitmaps, prefer a commit at the tip of any reference that is a suffix of any value of this configuration over any other commits in the \"selection window\". Note that setting this configuration to does not mean that the commits at the tips of and will necessarily be selected. This is because commits are selected for bitmaps from within a series of windows of variable length. If a commit at the tip of any reference which is a suffix of any value of this configuration is seen in a window, it is immediately given preference over any other commit in that window. This is a deprecated synonym for . When true, git will include a \"hash cache\" section in the bitmap index (if one is written). This cache can be used to feed git’s delta heuristics, potentially leading to better deltas between bitmapped and non-bitmapped objects (e.g., when serving a fetch between an older, bitmapped pack and objects that have been pushed since the last gc). The downside is that it consumes 4 bytes per object of disk space. Defaults to true. When writing a multi-pack reachability bitmap, no new namehashes are computed; instead, any namehashes stored in an existing bitmap are permuted into their appropriate location when writing a new bitmap. When true, Git will include a \"lookup table\" section in the bitmap index (if one is written). This table is used to defer loading individual bitmaps as late as possible. This can be beneficial in repositories that have relatively large bitmap indexes. Defaults to false. When true, git will read any .rev file(s) that may be available (see: gitformat-pack[5]). When false, the reverse index will be generated from scratch and stored in memory. Defaults to true. When true, git will write a corresponding .rev file (see: gitformat-pack[5]) for each new packfile that it writes in all places except for git-fast-import[1] and in the bulk checkin mechanism. Defaults to true. If the value is boolean, turns on or off pagination of the output of a particular Git subcommand when writing to a tty. Otherwise, turns on pagination for the subcommand using the pager specified by the value of . If or is specified on the command line, it takes precedence over this option. To disable pagination for all commands, set or to . Alias for a --pretty= format string, as specified in git-log[1]. Any aliases defined here can be used just as the built-in pretty formats could. For example, running would cause the invocation to be equivalent to running . Note that an alias with the same name as a built-in format will be silently ignored. If set to \"true\" assume when fetching additional objects for a partial clone. If set to \"true\", a server will use the \"promisor-remote\" capability, see gitprotocol-v2[5], to advertise the promisor remotes it is using, if it uses some. Default is \"false\", which means the \"promisor-remote\" capability is not advertised. If set to \"all\", a client will accept all the promisor remotes a server might advertise using the \"promisor-remote\" capability. If set to \"knownName\" the client will accept promisor remotes which are already configured on the client and have the same name as those advertised by the client. This is not very secure, but could be used in a corporate setup where servers and clients are trusted to not switch name and URLs. If set to \"knownUrl\", the client will accept promisor remotes which have both the same name and the same URL configured on the client as the name and URL advertised by the server. This is more secure than \"all\" or \"knownName\", so it should be used if possible instead of those options. Default is \"none\", which means no promisor remote advertised by a server will be accepted. By accepting a promisor remote, the client agrees that the server might omit objects that are lazily fetchable from this promisor remote from its responses to \"fetch\" and \"clone\" requests from the client. See gitprotocol-v2[5]. If set, provide a user defined default policy for all protocols which don’t explicitly have a policy ( ). By default, if unset, known-safe protocols (http, https, git, ssh) have a default policy of , known-dangerous protocols (ext) have a default policy of , and all other protocols (including file) have a default policy of . Supported policies:\n• - protocol is always able to be used.\n• - protocol is never able to be used.\n• - protocol is only able to be used when is either unset or has a value of 1. This policy should be used when you want a protocol to be directly usable by the user but don’t want it used by commands which execute clone/fetch/push commands without user input, e.g. recursive submodule initialization. Set a policy to be used by protocol with clone/fetch/push commands. See above for the available policies. The protocol names currently used by git are:\n• : the anonymous git protocol over a direct TCP connection (or proxy, if configured)\n• : git over http, both \"smart http\" and \"dumb http\". Note that this does not include ; if you want to configure both, you must do so individually.\n• any external helpers are named by their protocol (e.g., use to allow the helper) If set, clients will attempt to communicate with a server using the specified protocol version. If the server does not support it, communication falls back to version 0. If unset, the default is . Supported versions:\n• - the original wire protocol with the addition of a version string in the initial response from the server. By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to , this variable tells Git to create an extra merge commit in such a case (equivalent to giving the option from the command line). When set to , only such fast-forward merges are allowed (equivalent to giving the option from the command line). This setting overrides when pulling. When true, rebase branches on top of the fetched branch, instead of merging the default branch from the default remote when \"git pull\" is run. See \"branch.<name>.rebase\" for setting this on a per-branch basis. When (or just m), pass the option to git rebase so that the local merge commits are included in the rebase (see git-rebase[1] for details). When the value is (or just i), the rebase is run in interactive mode. NOTE: this is a possibly dangerous operation; do not use it unless you understand the implications (see git-rebase[1] for details). The default merge strategy to use when pulling multiple branches at once. The default merge strategy to use when pulling a single branch. If set to \"true\" assume on default push when no upstream tracking exists for the current branch; this option takes effect with push.default options simple, upstream, and current. It is useful if by default you want new branches to be pushed to the default remote (like the behavior of push.default=current) and you also want the upstream tracking to be set. Workflows most likely to benefit from this option are simple central workflows where all branches are expected to have the same name on the remote. Defines the action should take if no refspec is given (whether from the command-line, config, or elsewhere). Different values are well-suited for specific workflows; for instance, in a purely central workflow (i.e. the fetch source is equal to the push destination), is probably what you want. Possible values are:\n• - do not push anything (error out) unless a refspec is given. This is primarily meant for people who want to avoid mistakes by always being explicit.\n• - push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows.\n• - push the current branch back to the branch whose changes are usually integrated into the current branch (which is called ). This mode only makes sense if you are pushing to the same repository you would normally pull from (i.e. central workflow).\n• - This is a deprecated synonym for .\n• - push the current branch with the same name on the remote. If you are working on a centralized workflow (pushing to the same repository you pull from, which is typically ), then you need to configure an upstream branch with the same name. This mode is the default since Git 2.0, and is the safest option suited for beginners.\n• - push all branches having the same name on both ends. This makes the repository you are pushing to remember the set of branches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push to will have these two branches, and your local maint and master will be pushed there). To use this mode effectively, you have to make sure all the branches you would push out are ready to be pushed out before running git push, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control. This used to be the default, but not since Git 2.0 ( is the new default). If set to true, enable option by default. You may override this configuration at time of push by specifying . May be set to a boolean value, or the string if-asked. A true value causes all pushes to be GPG signed, as if is passed to git-push[1]. The string if-asked causes pushes to be signed if the server supports it, as if is passed to git push. A false value may override a value from a lower-priority config file. An explicit command-line flag always overrides this config option. When no argument is given from the command line, behaves as if each <value> of this variable is given as . This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. in a repository) to clear the values inherited from a lower priority configuration files (e.g. ). Example: /etc/gitconfig push.pushoption = a push.pushoption = b ~/.gitconfig push.pushoption = c repo/.git/config push.pushoption = push.pushoption = b This will result in only b (a and c are cleared). May be \"check\", \"on-demand\", \"only\", or \"no\", with the same behavior as that of \"push --recurse-submodules\". If not set, no is used by default, unless submodule.recurse is set (in which case a true value means on-demand). If set to \"true\", it is equivalent to specifying as an option to git-push[1] in the command line. Adding at the time of push overrides this configuration setting. If set to \"true\", attempt to reduce the size of the packfile sent by rounds of negotiation in which the client and the server attempt to find commits in common. If \"false\", Git will rely solely on the server’s ref advertisement to find commits in common. If set to \"false\", disable use of bitmaps for \"git push\" even if is \"true\", without preventing other git operations from using bitmaps. Default is true. Default backend to use for rebasing. Possible choices are apply or merge. In the future, if the merge backend gains all remaining capabilities of the apply backend, this setting may become unused. Whether to show a diffstat of what changed upstream since the last rebase. False by default. If set to true, enable the option of git-rebase[1] by default for interactive mode. This can be overridden with the option. When set to true, automatically create a temporary stash entry before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts. This option can be overridden by the and options of git-rebase[1]. Defaults to false. If set to true enable option by default. If set to \"warn\", git rebase -i will print a warning if some commits are removed (e.g. a line was deleted), however the rebase will still proceed. If set to \"error\", it will print the previous warning and stop the rebase, git rebase --edit-todo can then be used to correct the error. If set to \"ignore\", no checking is done. To drop a commit without warning or error, use the command in the todo list. Defaults to \"ignore\". A format string, as specified in git-log[1], to be used for the todo list during an interactive rebase. The format will automatically have the commit hash prepended to the format. If set to true, will use abbreviated command names in the todo list resulting in something like this: p deadbee The oneline of the commit p fa1afe1 The oneline of the next commit ... pick deadbee The oneline of the commit pick fa1afe1 The oneline of the next commit ... Automatically reschedule commands that failed. This only makes sense in interactive mode (or when an option was provided). This is the same as specifying the option. If set to false set option by default. Whether and how to set the option by default. Can be , , or a boolean. Setting to true or to is equivalent to , setting to is equivalent to , and setting to false is equivalent to . Passing on the command line, with or without an argument, overrides any configuration. When generating label names from commit subjects, truncate the names to this length. By default, the names are truncated to a little less than (to allow e.g. files to be written for the corresponding loose refs). By default, git-receive-pack will advertise the atomic push capability to its clients. If you don’t want to advertise this capability, set this variable to false. When set to true, git-receive-pack will advertise the push options capability to its clients. False by default. By default, git-receive-pack will run \"git maintenance run --auto\" after receiving data from git-push and updating refs. You can stop it by setting this variable to false. By setting this variable to a string, will accept a and verify it by using a \"nonce\" protected by HMAC using this string as a secret key. When a sends a push certificate with a \"nonce\" that was issued by a receive-pack serving the same repository within this many seconds, export the \"nonce\" found in the certificate to to the hooks (instead of what the receive-pack asked the sending side to include). This may allow writing checks in and a bit easier. Instead of checking environment variable that records by how many seconds the nonce is stale to decide if they want to accept the certificate, they only can check is . If it is set to true, git-receive-pack will check all received objects. See for what’s checked. Defaults to false. If not set, the value of is used instead. Acts like , but is used by git-receive-pack[1] instead of git-fsck[1]. See the documentation for details. Acts like , but is used by git-receive-pack[1] instead of git-fsck[1]. See the documentation for details. After receiving the pack from the client, may produce no output (if was specified) while processing the pack, causing some networks to drop the TCP connection. With this option set, if does not transmit any data in this phase for seconds, it will send a short keepalive packet. The default is 5 seconds; set to 0 to disable keepalives entirely. If the number of objects received in a push is below this limit then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of is used instead. If the size of the incoming pack stream is larger than this limit, then git-receive-pack will error out, instead of accepting the pack file. If not set or set to 0, then the size is unlimited. If set to true, git-receive-pack will deny a ref update that deletes the ref. Use this to prevent such a ref deletion via a push. If set to true, git-receive-pack will deny a ref update that deletes the currently checked out branch of a non-bare repository. If set to true or \"refuse\", git-receive-pack will deny a ref update to the currently checked out branch of a non-bare repository. Such a push is potentially dangerous because it brings the HEAD out of sync with the index and working tree. If set to \"warn\", print a warning of such a push to stderr, but allow the push to proceed. If set to false or \"ignore\", allow such pushes with no message. Defaults to \"refuse\". Another option is \"updateInstead\" which will update the working tree if pushing into the current branch. This option is intended for synchronizing working directories when one side is not easily accessible via interactive ssh (e.g. a live web site, hence the requirement that the working directory be clean). This mode also comes in handy when developing inside a VM to test and fix code on different Operating Systems. By default, \"updateInstead\" will refuse the push if the working tree or the index have any difference from the HEAD, but the hook can be used to customize this. See githooks[5]. If set to true, git-receive-pack will deny a ref update which is not a fast-forward. Use this to prevent such an update via a push, even if that push is forced. This configuration variable is set when initializing a shared repository. This variable is the same as , but applies only to (and so affects pushes, but not fetches). An attempt to update or delete a hidden ref by is rejected. This is a multi-valued variable that defines reference prefixes to match the commands in . Commands matching the prefixes will be executed by an external hook \"proc-receive\", instead of the internal function. If this variable is not defined, the \"proc-receive\" hook will never be used, and all commands will be executed by the internal function. For example, if this variable is set to \"refs/for\", pushing to reference such as \"refs/for/master\" will not create or update a reference named \"refs/for/master\", but may create or update a pull request directly by running the hook \"proc-receive\". Optional modifiers can be provided in the beginning of the value to filter commands for specific actions: create (a), modify (m), delete (d). A can be included in the modifiers to negate the reference prefix entry. E.g.: If set to true, git-receive-pack will run git-update-server-info after receiving data from git-push and updating refs. If set to true, .git/shallow can be updated when new refs require new shallow roots. Otherwise those refs are rejected. The size in bytes used by the reftable backend when writing blocks. The block size is determined by the writer, and does not have to be a power of 2. The block size must be larger than the longest reference name or log entry used in the repository, as references cannot span blocks. Powers of two that are friendly to the virtual memory system or filesystem (such as 4kB or 8kB) are recommended. Larger sizes (64kB) can yield better compression, with a possible increased cost incurred by readers during access. The largest block size is bytes (15.99 MiB). The default value is bytes (4kB). A value of will use the default value. The interval at which to create restart points. The reftable backend determines the restart points at file creation. Every 16 may be more suitable for smaller block sizes (4k or 8k), every 64 for larger block sizes (64k). More frequent restart points reduces prefix compression and increases space consumed by the restart table, both of which increase file size. Less frequent restart points makes prefix compression more effective, decreasing overall file size, with increased penalties for readers walking through more records after the binary search step. A maximum of restart points per block is supported. The default value is to create restart points every 16 records. A value of will use the default value. Whether the reftable backend shall write object blocks. Object blocks are a reverse mapping of object ID to the references pointing to them. The default value is . Whenever the reftable backend appends a new table to the stack, it performs auto compaction to ensure that there is only a handful of tables. The backend does this by ensuring that tables form a geometric sequence regarding the respective sizes of each table. By default, the geometric sequence uses a factor of 2, meaning that for any table, the next-biggest table must at least be twice as big. A maximum factor of 256 is supported. Whenever the reftable backend appends a new table to the stack, it has to lock the central \"tables.list\" file before updating it. This config controls how long the process will wait to acquire the lock in case another process has already acquired it. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 100 (i.e., retry for 100ms). The remote to push to by default. Overrides for all branches, and is overridden by for specific branches. The URL of a remote repository. See git-fetch[1] or git-push[1]. A configured remote can have multiple URLs; in this case the first is used for fetching, and all are used for pushing (assuming no is defined). Setting this key to the empty string clears the list of urls, allowing you to override earlier config. The push URL of a remote repository. See git-push[1]. If a option is present in a configured remote, it is used for pushing instead of . A configured remote can have multiple push URLs; in this case a push goes to all of them. Setting this key to the empty string clears the list of urls, allowing you to override earlier config. For remotes that require curl (http, https and ftp), the URL to the proxy to use for that remote. Set to the empty string to disable proxying for that remote. For remotes that require curl (http, https and ftp), the method to use for authenticating against the proxy in use (probably set in ). See . The default set of \"refspec\" for git-fetch[1]. See git-fetch[1]. The default set of \"refspec\" for git-push[1]. See git-push[1]. If true, pushing to this remote will automatically behave as if the option was given on the command line. A deprecated synonym to (if both are set in the configuration files with different values, the value of the last occurrence will be used). If true, this remote will be skipped when updating using git-fetch[1], the subcommand of git-remote[1], and ignored by the prefetch task of . The default program to execute on the remote side when pushing. See option --receive-pack of git-push[1]. The default program to execute on the remote side when fetching. See option --upload-pack of git-fetch-pack[1]. Setting this value to --no-tags disables automatic tag following when fetching from remote <name>. Setting it to --tags will fetch every tag from remote <name>, even if they are not reachable from remote branch heads. Passing these flags directly to git-fetch[1] can override this setting. See options --tags and --no-tags of git-fetch[1]. Setting this to a value <vcs> will cause Git to interact with the remote with the git-remote-<vcs> helper. When set to true, fetching from this remote by default will also remove any remote-tracking references that no longer exist on the remote (as if the option was given on the command line). Overrides settings, if any. When set to true, fetching from this remote by default will also remove any local tags that no longer exist on the remote if pruning is activated in general via , or . Overrides settings, if any. See also and the PRUNING section of git-fetch[1]. When set to true, this remote will be used to fetch promisor objects. The filter that will be applied when fetching from this promisor remote. Changing or clearing this value will only affect fetches for new commits. To fetch associated objects for commits already present in the local object database, use the option of git-fetch[1]. The default set of server options used when fetching from this remote. These server options can be overridden by the command line arguments. This is a multi-valued variable, and an empty value can be used in a higher priority configuration file (e.g. in a repository) to clear the values inherited from a lower priority configuration files (e.g. ). How git-fetch[1] should handle updates to . The default value is \"create\", which will create if it exists on the remote, but not locally; this will not touch an already existing local reference. Setting it to \"warn\" will print a message if the remote has a different value than the local one; in case there is no local reference, it behaves like \"create\". A variant on \"warn\" is \"warn-if-not-$branch\", which behaves like \"warn\", but if on the remote is it will be silent. Setting it to \"always\" will silently update to the value on the remote. Finally, setting it to \"never\" will never change or create the local reference. The list of remotes which are fetched by \"git remote update <group>\". See git-remote[1]. By default, git-repack[1] creates packs that use delta-base offset. If you need to share your repository with Git older than version 1.4.4, either directly or via a dumb protocol such as http, then you need to set this option to \"false\" and repack. Access from old Git versions over the native protocol are unaffected by this option. If set to true, makes act as if was passed. See git-repack[1] for details. Defaults to normally, but if a bitmap index is being written (either via or ). If set to true, makes act as if was passed. Defaults to . When true, git will write a bitmap index when packing all objects to disk (e.g., when is run). This index can speed up the \"counting objects\" phase of subsequent packs created for clones and fetches, at the cost of some disk space and extra time spent on the initial repack. This has no effect if multiple packfiles are created. Defaults to true on bare repos, false otherwise. If set to false, git-repack[1] will not run git-update-server-info[1]. Defaults to true. Can be overridden when true by the option of git-repack[1]. Parameters used by git-pack-objects[1] when generating a cruft pack and the respective parameters are not given over the command line. See similarly named configuration variables for defaults and meaning. When set to true, updates the index with the resulting contents after it cleanly resolves conflicts using previously recorded resolutions. Defaults to false. Activate recording of resolved conflicts, so that identical conflict hunks can be resolved automatically, should they be encountered again. By default, git-rerere[1] is enabled if there is an directory under the , e.g. if \"rerere\" was previously used in the repository. Setting this variable to true makes behave as if the option is given. Specifies which bare repositories Git will work with. The currently supported values are:\n• : Git works with all bare repositories. This is the default.\n• : Git only works with bare repositories specified via the top-level command-line option, or the environment variable (see git[1]). If you do not use bare repositories in your workflow, then it may be beneficial to set to in your global config. This will protect you from attacks that involve cloning a repository that contains a bare repository and running a Git command within that directory. This config setting is only respected in protected configuration (see SCOPES). This prevents untrusted repositories from tampering with this value. These config entries specify Git-tracked directories that are considered safe even if they are owned by someone other than the current user. By default, Git will refuse to even parse a Git config of a repository owned by someone else, let alone run its hooks, and this config setting allows users to specify exceptions, e.g. for intentionally shared repositories (see the option in git-init[1]). This is a multi-valued setting, i.e. you can add more than one directory via . To reset the list of safe directories (e.g. to override any such directories specified in the system config), add a entry with an empty value. This config setting is only respected in protected configuration (see SCOPES). This prevents untrusted repositories from tampering with this value. The value of this setting is interpolated, i.e. expands to a path relative to the home directory and expands to a path relative to Git’s (runtime) prefix. To completely opt-out of this security check, set to the string . This will allow all repositories to be treated as if their directory was listed in the list. If is set in system config and you want to re-enable this protection, then initialize your list with an empty value before listing the repositories that you deem safe. Giving a directory with appended to it will allow access to all repositories under the named directory. As explained, Git only allows you to access repositories owned by yourself, i.e. the user who is running Git, by default. When Git is running as root in a non Windows platform that provides sudo, however, git checks the SUDO_UID environment variable that sudo creates and will allow access to the uid recorded as its value in addition to the id from root. This is to make it easy to perform a common sequence during installation \"make && sudo make install\". A git process running under sudo runs as root but the sudo command exports the environment variable to record which id the original user has. If that is not what you would prefer and want git to only trust repositories that are owned by root instead, then you can remove the variable from root’s environment before invoking git. A configuration identity. When given, causes values in the sendemail.<identity> subsection to take precedence over values in the sendemail section. The default identity is the value of . See git-send-email[1] for description. Note that this setting is not subject to the identity mechanism. Path to ca-certificates (either a directory or a single file). Set it to an empty string to disable certificate verification. Identity-specific versions of the sendemail.* parameters found below, taking precedence over those when this identity is selected, through either the command-line or . If true (default), a single editor instance will be spawned to edit files you have to edit (patches when is used, and the summary when is used). If false, files will be edited one after the other, spawning a new editor each time. Sets the default for whether to confirm before sending. Must be one of always, never, cc, compose, or auto. See in the git-send-email[1] documentation for the meaning of these values. If true, makes git-send-email[1] assume , otherwise assume . False by default. The location of a git-send-email[1] specific augmenting mailmap file. The default mailmap and are loaded first. Thus, entries in this file take precedence over entries in the default mailmap locations. See gitmailmap[5]. Like , but consider the value as a reference to a blob in the repository. Entries in take precedence over entries here. See gitmailmap[5]. To avoid typing long email addresses, point this to one or more email aliases files. You must also supply . Format of the file(s) specified in sendemail.aliasesFile. Must be one of mutt, mailrc, pine, elm, gnus, or sendmail. What an alias file in each format looks like can be found in the documentation of the email program of the same name. The differences and limitations from the standard formats are described below:\n• Quoted aliases and quoted addresses are not supported: lines that contain a symbol are ignored.\n• Redirection to a file ( ) or pipe ( ) is not supported.\n• Warnings are printed on the standard error output for any explicitly unsupported constructs, and any other lines that are not recognized by the parser. These configuration variables all provide a default for git-send-email[1] command-line options. See its documentation for details. Number of messages to be sent per connection, after that a relogin will happen. If the value is 0 or undefined, send all messages in one connection. See also the option of git-send-email[1]. Seconds to wait before reconnecting to the smtp server. See also the option of git-send-email[1]. To avoid common misconfiguration mistakes, git-send-email[1] will abort with a warning if any configuration options for \"sendmail\" exist. Set this variable to bypass the check. Text editor used by for editing the rebase instruction file. The value is meant to be interpreted by the shell when it is used. It can be overridden by the environment variable. When not configured, the default commit message editor is used instead. The default set of branches for git-show-branch[1]. See git-show-branch[1]. Typically with sparse checkouts, files not matching any sparsity patterns are marked with a SKIP_WORKTREE bit in the index and are missing from the working tree. Accordingly, Git will ordinarily check whether files with the SKIP_WORKTREE bit are in fact present in the working tree contrary to expectations. If Git finds any, it marks those paths as present by clearing the relevant SKIP_WORKTREE bits. This option can be used to tell Git that such present-despite-skipped files are expected and to stop checking for them. The default is , which allows Git to automatically recover from the list of files in the index and working tree falling out of sync. Set this to if you are in a setup where some external factor relieves Git of the responsibility for maintaining the consistency between the presence of working tree files and sparsity patterns. For example, if you have a Git-aware virtual file system that has a robust mechanism for keeping the working tree and the sparsity patterns up to date based on access patterns. Regardless of this setting, Git does not check for present-despite-skipped files unless sparse checkout is enabled, so this config option has no effect unless is . When the split index feature is used, this specifies the percent of entries the split index can contain compared to the total number of entries in both the split index and the shared index before a new shared index is written. The value should be between 0 and 100. If the value is 0, then a new shared index is always written; if it is 100, a new shared index is never written. By default, the value is 20, so a new shared index is written if the number of entries in the split index would be greater than 20 percent of the total number of entries. See git-update-index[1]. When the split index feature is used, shared index files that were not modified since the time this variable specifies will be removed when a new shared index file is created. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. The default value is \"2.weeks.ago\". Note that a shared index file is considered modified (for the purpose of expiration) each time a new split-index file is either created based on it or read from it. See git-update-index[1]. By default, Git determines the command line arguments to use based on the basename of the configured SSH command (configured using the environment variable or or the config setting ). If the basename is unrecognized, Git will attempt to detect support of OpenSSH options by first invoking the configured SSH command with the (print configuration) option and will subsequently use OpenSSH options (if that is successful) or no options besides the host and remote command (if it fails). The config variable can be set to override this detection. Valid values are (to use OpenSSH options), , , , (no options except the host and remote command). The default auto-detection can be explicitly requested using the value . Any other value is treated as . This setting can also be overridden via the environment variable . The current command-line parameters used for each variant are as follows: Except for the variant, command-line parameters are likely to change as git gains new features. If this is set to true, the command will show the untracked files of a stash entry. Defaults to false. See the description of the show command in git-stash[1]. If this is set to true, the command without an option will show the stash entry in patch form. Defaults to false. See the description of the show command in git-stash[1]. If this is set to true, the command without an option will show a diffstat of the stash entry. Defaults to true. See the description of the show command in git-stash[1]. By default, git-status[1] shows paths relative to the current directory. Setting this variable to shows paths relative to the repository root (this was the default for Git prior to v1.5.4). Set to true to enable --short by default in git-status[1]. The option --no-short takes precedence over this variable. Set to true to enable --branch by default in git-status[1]. The option --no-branch takes precedence over this variable. Set to true to enable and false to enable by default in git-status[1] for non-porcelain status formats. Defaults to true. If set to true, git-status[1] will insert a comment prefix before each output line (starting with , i.e. by default). This was the behavior of git-status[1] in Git 1.8.4 and previous. Defaults to false. The number of files to consider when performing rename detection in git-status[1] and git-commit[1]. Defaults to the value of diff.renameLimit. Whether and how Git detects renames in git-status[1] and git-commit[1] . If set to \"false\", rename detection is disabled. If set to \"true\", basic rename detection is enabled. If set to \"copies\" or \"copy\", Git will detect copies, as well. Defaults to the value of diff.renames. If set to true, git-status[1] will display the number of entries currently stashed away. Defaults to false. By default, git-status[1] and git-commit[1] show files which are not currently tracked by Git. Directories which contain only untracked files, are shown with the directory name only. Showing untracked files means that Git needs to lstat() all the files in the whole repository, which might be slow on some systems. So, this variable controls how the commands display the untracked files. Possible values are: If this variable is not specified, it defaults to normal. All usual spellings for Boolean value are taken as and as . This variable can be overridden with the -u|--untracked-files option of git-status[1] and git-commit[1]. Defaults to false. If this is set to a non-zero number or true (identical to -1 or an unlimited number), the submodule summary will be enabled and a summary of commits for modified submodules will be shown (see --summary-limit option of git-submodule[1]). Please note that the summary output command will be suppressed for all submodules when is set to all or only for those submodules where . The only exception to that rule is that status and commit will show staged submodule changes. To also view the summary for ignored submodules you can either use the --ignore-submodules=dirty command-line option or the git submodule summary command, which shows a similar output but does not honor these settings. The URL for a submodule. This variable is copied from the .gitmodules file to the git config via git submodule init. The user can change the configured URL before obtaining the submodule via git submodule update. If neither submodule.<name>.active nor submodule.active are set, the presence of this variable is used as a fallback to indicate whether the submodule is of interest to git commands. See git-submodule[1] and gitmodules[5] for details. The method by which a submodule is updated by git submodule update, which is the only affected command, others such as git checkout --recurse-submodules are unaffected. It exists for historical reasons, when git submodule was the only command to interact with submodules; settings like and are more specific. It is populated by from the gitmodules[5] file. See description of update command in git-submodule[1]. The remote branch name for a submodule, used by . Set this option to override the value found in the file. See git-submodule[1] and gitmodules[5] for details. This option can be used to control recursive fetching of this submodule. It can be overridden by using the --[no-]recurse-submodules command-line option to \"git fetch\" and \"git pull\". This setting will override that from in the gitmodules[5] file. Defines under what circumstances \"git status\" and the diff family show a submodule as modified. When set to \"all\", it will never be considered modified (but it will nonetheless show up in the output of status and commit when it has been staged), \"dirty\" will ignore all changes to the submodule’s work tree and takes only differences between the HEAD of the submodule and the commit recorded in the superproject into account. \"untracked\" will additionally let submodules with modified tracked files in their work tree show up. Using \"none\" (the default when this option is not set) also shows submodules that have untracked files in their work tree as changed. This setting overrides any setting made in .gitmodules for this submodule, both settings can be overridden on the command line by using the \"--ignore-submodules\" option. The git submodule commands are not affected by this setting. Boolean value indicating if the submodule is of interest to git commands. This config option takes precedence over the submodule.active config option. See gitsubmodules[7] for details. A repeated field which contains a pathspec used to match against a submodule’s path to determine if the submodule is of interest to git commands. See gitsubmodules[7] for details. A boolean indicating if commands should enable the option by default. Defaults to false. When set to true, it can be deactivated via the option. Note that some Git commands lacking this option may call some of the above commands affected by ; for instance will call but does not have a option. For these commands a workaround is to temporarily change the configuration value by using . The following list shows the commands that accept and whether they are supported by this setting.\n• , , , , , , , and are always supported.\n• and are not supported.\n• is supported only if is enabled [EXPERIMENTAL] A boolean that enables branching support when using or . Enabling this will allow certain commands to accept and certain commands that already accept will now consider branches. Defaults to false. Specifies how many submodules are fetched/cloned at the same time. A positive integer allows up to that number of submodules fetched in parallel. A value of 0 will give some reasonable default. If unset, it defaults to 1. Specifies how the submodules obtain alternates when submodules are cloned. Possible values are , . By default is assumed, which doesn’t add references. When the value is set to the submodule to be cloned computes its alternates location relative to the superprojects alternate. Specifies how to treat errors with the alternates for a submodule as computed via . Possible values are , , . Default is . Note that if set to or , and if there is an error with the computed alternate, the clone proceeds as if no alternate was specified. A boolean to specify whether annotated tags created should be GPG signed. If is specified on the command line, it takes precedence over this option. This variable controls the sort ordering of tags when displayed by git-tag[1]. Without the \"--sort=<value>\" option provided, the value of this variable will be used as the default. A boolean to specify whether all tags should be GPG signed. Use of this option when running in an automated script can result in a large number of tags being signed. It is therefore convenient to use an agent to avoid typing your gpg passphrase several times. Note that this option doesn’t affect tag signing behavior enabled by \"-u <keyid>\" or \"--local-user=<keyid>\" options. This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value \"user\" indicates that the archiving user’s umask will be used instead. See umask(2) and git-archive[1].\n\nThis variable controls the normal target destination. It may be overridden by the environment variable. The following table shows possible values. This variable controls the performance target destination. It may be overridden by the environment variable. The following table shows possible values. This variable controls the event target destination. It may be overridden by the environment variable. The following table shows possible values.\n• - Writes to the already opened file descriptor.\n• - Writes to the file in append mode. If the target already exists and is a directory, the traces will be written to files (one per process) underneath the given directory.\n• - Write to a Unix DomainSocket (on platforms that support them). Socket type can be either or ; if omitted Git will try both. Boolean. When true , , and fields are omitted from normal output. May be overridden by the environment variable. Defaults to false. Boolean. When true , , and fields are omitted from PERF output. May be overridden by the environment variable. Defaults to false. Boolean. When true , , and fields are omitted from event output. May be overridden by the environment variable. Defaults to false. Integer. Specifies desired depth of nested regions in the event output. Regions deeper than this value will be omitted. May be overridden by the environment variable. Defaults to 2. A comma-separated list of patterns of \"important\" config settings that should be recorded in the trace2 output. For example, would cause the trace2 output to contain events listing each configured remote. May be overridden by the environment variable. Unset by default. A comma-separated list of \"important\" environment variables that should be recorded in the trace2 output. For example, would cause the trace2 output to contain events listing the overrides for HTTP user agent and the location of the Git configuration file (assuming any are set). May be overridden by the environment variable. Unset by default. Boolean. When true Git will print error messages when a trace target destination cannot be opened for writing. By default, these errors are suppressed and tracing is silently disabled. May be overridden by the environment variable. Integer. When writing trace files to a target directory, do not write additional traces if doing so would exceed this many files. Instead, write a sentinel file that will block further tracing to this directory. Defaults to 0, which disables this check. This option tells which characters are recognized as trailer separators. By default only : is recognized as a trailer separator, except that = is always accepted on the command line for compatibility with other git commands. The first character given by this option will be the default character used when another separator is not specified in the config for this trailer. For example, if the value for this option is \"%=$\", then only lines using the format <key><sep><value> with <sep> containing %, = or $ and then spaces will be considered trailers. And % will be the default separator used, so by default trailers will appear like: <key>% <value> (one percent sign and one space will appear between the key and the value). This option tells where a new trailer will be added. This can be , which is the default, , or . If it is , then each new trailer will appear at the end of the existing trailers. If it is , then each new trailer will appear at the start, instead of the end, of the existing trailers. If it is , then each new trailer will appear just after the last trailer with the same <key>. If it is , then each new trailer will appear just before the first trailer with the same <key>. This option makes it possible to choose what action will be performed when there is already at least one trailer with the same <key> in the input. The valid values for this option are: (this is the default), , , or . With , a new trailer will be added only if no trailer with the same (<key>, <value>) pair is above or below the line where the new trailer will be added. With , a new trailer will be added only if no trailer with the same (<key>, <value>) pair is already in the input. With , a new trailer will be added, even if some trailers with the same (<key>, <value>) pair are already in the input. With , an existing trailer with the same <key> will be deleted and the new trailer will be added. The deleted trailer will be the closest one (with the same <key>) to the place where the new one will be added. With , nothing will be done; that is no new trailer will be added if there is already one with the same <key> in the input. This option makes it possible to choose what action will be performed when there is not yet any trailer with the same <key> in the input. The valid values for this option are: (this is the default) and . With , a new trailer will be added. With , nothing will be done. Defines a <keyAlias> for the <key>. The <keyAlias> must be a prefix (case does not matter) of the <key>. For example, in the \"Acked-by\" is the <key> and the \"ack\" is the <keyAlias>. This configuration allows the shorter invocation on the command line using the \"ack\" <keyAlias> instead of the longer . At the end of the <key>, a separator can appear and then some space characters. By default the only valid separator is :, but this can be changed using the config variable. If there is a separator in the key, then it overrides the default separator when adding the trailer. This option takes the same values as the trailer.where configuration variable and it overrides what is specified by that option for trailers with the specified <keyAlias>. This option takes the same values as the trailer.ifexists configuration variable and it overrides what is specified by that option for trailers with the specified <keyAlias>. This option takes the same values as the trailer.ifmissing configuration variable and it overrides what is specified by that option for trailers with the specified <keyAlias>. Deprecated in favor of trailer.<keyAlias>.cmd. This option behaves in the same way as trailer.<keyAlias>.cmd, except that it doesn’t pass anything as argument to the specified command. Instead the first occurrence of substring $ARG is replaced by the <value> that would be passed as argument. Note that $ARG in the user’s command is only replaced once and that the original way of replacing $ARG is not safe. When both trailer.<keyAlias>.cmd and trailer.<keyAlias>.command are given for the same <keyAlias>, trailer.<keyAlias>.cmd is used and trailer.<keyAlias>.command is ignored. This option can be used to specify a shell command that will be called once to automatically add a trailer with the specified <keyAlias>, and then called each time a --trailer <keyAlias>=<value> argument is specified to modify the <value> of the trailer that this option would produce. When the specified command is first called to add a trailer with the specified <keyAlias>, the behavior is as if a special --trailer <keyAlias>=<value> argument was added at the beginning of the \"git interpret-trailers\" command, where <value> is taken to be the standard output of the command with any leading and trailing whitespace trimmed off. If some --trailer <keyAlias>=<value> arguments are also passed on the command line, the command is called again once for each of these arguments with the same <keyAlias>. And the <value> part of these arguments, if any, will be passed to the command as its first argument. This way the command can produce a <value> computed from the <value> passed in the --trailer <keyAlias>=<value> argument. A configured URL can contain plaintext credentials in the form . You may want to warn or forbid the use of such configuration (in favor of using git-credential[1]). This will be used on git-clone[1], git-fetch[1], git-push[1], and any other direct use of the configured URL. Note that this is currently limited to detecting credentials in configuration; it won’t detect credentials in configuration. You might want to enable this to prevent inadvertent credentials exposure, e.g. because:\n• The OS or system where you’re running git may not provide a way or otherwise allow you to configure the permissions of the configuration file where the username and/or password are stored.\n• Even if it does, having such data stored \"at rest\" might expose you in other ways, e.g. a backup process might copy the data to another system.\n• The git programs will pass the full URL to one another as arguments on the command-line, meaning the credentials will be exposed to other unprivileged users on systems that allow them to see the full process list of other users. On linux the \"hidepid\" setting documented in procfs(5) allows for configuring this behavior. If such concerns don’t apply to you then you probably don’t need to be concerned about credentials exposure due to storing sensitive data in git’s configuration files. If you do want to use this, set to one of these values:\n• (default): Git will proceed with its activity without warning.\n• : Git will write a warning message to when parsing a URL with a plaintext credential.\n• : Git will write a failure message to when parsing a URL with a plaintext credential. When or are not set, the value of this variable is used instead. Defaults to false. When set, the fetch or receive will abort in the case of a malformed object or a link to a nonexistent object. In addition, various other issues are checked for, including legacy issues (see ), and potential security issues like the existence of a directory or a malicious file (see the release notes for v2.2.1 and v2.17.1 for details). Other sanity and security checks may be added in future releases. On the receiving side, failing fsckObjects will make those objects unreachable, see \"QUARANTINE ENVIRONMENT\" in git-receive-pack[1]. On the fetch side, malformed objects will instead be left unreferenced in the repository. Due to the non-quarantine nature of the implementation it cannot be relied upon to leave the object store clean like can. As objects are unpacked they’re written to the object store, so there can be cases where malicious objects get introduced even though the \"fetch\" failed, only to have a subsequent \"fetch\" succeed because only new incoming objects are checked, not those that have already been written to the object store. That difference in behavior should not be relied upon. In the future, such objects may be quarantined for \"fetch\" as well. For now, the paranoid need to find some way to emulate the quarantine environment if they’d like the same protection as \"push\". E.g. in the case of an internal mirror do the mirroring in two steps, one to fetch the untrusted objects, and then do a second \"push\" (which will use the quarantine) to another internal repo, and have internal clients consume this pushed-to repository, or embargo internal fetches and only allow them once a full \"fsck\" has run (and no new fetches have happened in the meantime). String(s) and use to decide which refs to omit from their initial advertisements. Use more than one definition to specify multiple prefix strings. A ref that is under the hierarchies listed in the value of this variable is excluded, and is hidden when responding to or . See and for program-specific versions of this config. You may also include a in front of the ref name to negate the entry, explicitly exposing it, even if an earlier entry marked it as hidden. If you have multiple hideRefs values, later entries override earlier ones (and entries in more-specific config files override less-specific ones). If a namespace is in use, the namespace prefix is stripped from each reference before it is matched against patterns. In order to match refs before stripping, add a in front of the ref name. If you combine and , must be specified first. For example, if is specified in and the current namespace is , then is omitted from the advertisements. If is set, will treat in a protocol v2 command as if did not exist. , on the other hand, will still advertise the object id the ref is pointing to without mentioning its name (a so-called \".have\" line). Even if you hide refs, a client may still be able to steal the target objects via the techniques described in the \"SECURITY\" section of the gitnamespaces[7] man page; it’s best to keep private data in a separate repository. When or are not set, the value of this variable is used instead. The default value is 100. Boolean. When true, client and server processes will advertise their unique session IDs to their remote counterpart. Defaults to false. When , local commands will request bundle information from the remote server (if advertised) and download bundles before continuing the clone through the Git protocol. Defaults to . When , the capability is advertised by servers. Defaults to false. If true, allow clients to use to request any tree, whether reachable from the ref tips or not. See the discussion in the \"SECURITY\" section of git-upload-archive[1] for more details. Defaults to . This variable is the same as , but applies only to (and so affects only fetches, not pushes). An attempt to fetch a hidden ref by will fail. See also . When is in effect, allow to accept a fetch request that asks for an object at the tip of a hidden ref (by default, such a request is rejected). See also . Even if this is false, a client may be able to steal objects via the techniques described in the \"SECURITY\" section of the gitnamespaces[7] man page; it’s best to keep private data in a separate repository. Allow to accept a fetch request that asks for an object that is reachable from any ref tip. However, note that calculating object reachability is computationally expensive. Defaults to . Even if this is false, a client may be able to steal objects via the techniques described in the \"SECURITY\" section of the gitnamespaces[7] man page; it’s best to keep private data in a separate repository. Allow to accept a fetch request that asks for any object at all. It implies and . If set to it will enable both of them, it set to it will disable both of them. By default not set. When has started , there may be a quiet period while prepares the pack. Normally it would output progress information, but if was used for the fetch, will output nothing at all until the pack data begins. Some clients and networks may consider the server to be hung and give up. Setting this option instructs to send an empty keepalive packet every seconds. Setting this option to 0 disables keepalive packets entirely. The default is 5 seconds. If this option is set, when would run to create a packfile for a client, it will run this shell command instead. The command and arguments it would have run (including the at the beginning) are appended to the shell command. The stdin and stdout of the hook are treated as if itself was run. I.e., will feed input intended for to the hook, and expects a completed packfile on stdout. Note that this configuration variable is only respected when it is specified in protected configuration (see SCOPES). This is a safety measure against fetching from untrusted repositories. If this option is set, will support partial clone and partial fetch object filtering. Provides a default value for unspecified object filters (see: the below configuration variable). If set to , this will also enable all filters which get added in the future. Defaults to . Explicitly allow or ban the object filter corresponding to , where may be one of: , , , , , or . If using combined filters, both and all of the nested filter kinds must be allowed. Defaults to . Only allow when is no more than the value of . If set, this also implies , unless this configuration variable had already been set. Has no effect if unset. If this option is set, will support the feature of the protocol version 2 command. This feature is intended for the benefit of load-balanced servers which may not have the same view of what OIDs their refs point to due to replication delay. Any URL that starts with this value will be rewritten to start, instead, with <base>. In cases where some site serves a large number of repositories, and serves them with multiple access methods, and some users need to use different access methods, this feature allows people to specify any of the equivalent URLs and have Git automatically rewrite the URL to the best alternative for the particular user, even for a never-before-seen repository on the site. When more than one insteadOf strings match a given URL, the longest match is used. Note that any protocol restrictions will be applied to the rewritten URL. If the rewrite changes the URL to use a custom protocol or remote helper, you may need to adjust the config to permit the request. In particular, protocols you expect to use for submodules must be set to rather than the default of . See the description of above. Any URL that starts with this value will not be pushed to; instead, it will be rewritten to start with <base>, and the resulting URL will be pushed to. In cases where some site serves a large number of repositories, and serves them with multiple access methods, some of which do not allow push, this feature allows people to specify a pull-only URL and have Git automatically use an appropriate URL to push, even for a never-before-seen repository on the site. When more than one pushInsteadOf strings match a given URL, the longest match is used. If a remote has an explicit pushurl, Git will ignore this setting for that remote. The and variables determine what ends up in the and fields of commit objects. If you need the or to be different, the , , , or variables can be set. All of these can be overridden by the , , , , and environment variables. Note that the forms of these variables conventionally refer to some form of a personal name. See git-commit[1] and the environment variables section of git[1] for more information on these settings and the option if you’re looking for authentication credentials instead. Instruct Git to avoid trying to guess defaults for and , and instead retrieve the values only from the configuration. For example, if you have multiple email addresses and would like to use a different one for each repository, then with this configuration option set to in the global config along with a name, Git will prompt you to set up an email before making new commits in a newly cloned repository. Defaults to . If git-tag[1] or git-commit[1] is not selecting the key you want it to automatically when creating a signed tag or commit, you can override the default selection with this variable. This option is passed unchanged to gpg’s --local-user parameter, so you may specify a key using any method that gpg supports. If gpg.format is set to this can contain the path to either your private ssh key or the public key when ssh-agent is used. Alternatively it can contain a public key prefixed with directly (e.g.: \"key::ssh-rsa XXXXXX identifier\"). The private key needs to be available via ssh-agent. If not set Git will call gpg.ssh.defaultKeyCommand (e.g.: \"ssh-add -L\") and try to use the first key available. For backward compatibility, a raw key which begins with \"ssh-\", such as \"ssh-rsa XXXXXX identifier\", is treated as \"key::ssh-rsa XXXXXX identifier\", but this form is deprecated; use the form instead. Deprecated alias for . Ignored if is set. Even when version sort is used in git-tag[1], tagnames with the same base version but different suffixes are still sorted lexicographically, resulting e.g. in prerelease tags appearing after the main release (e.g. \"1.0-rc1\" after \"1.0\"). This variable can be specified to determine the sorting order of tags with different suffixes. By specifying a single suffix in this variable, any tagname containing that suffix will appear before the corresponding main release. E.g. if the variable is set to \"-rc\", then all \"1.0-rcX\" tags will appear before \"1.0\". If specified multiple times, once per suffix, then the order of suffixes in the configuration will determine the sorting order of tagnames with those suffixes. E.g. if \"-pre\" appears before \"-rc\" in the configuration, then all \"1.0-preX\" tags will be listed before any \"1.0-rcX\" tags. The placement of the main release tag relative to tags with various suffixes can be determined by specifying the empty suffix among those other suffixes. E.g. if the suffixes \"-rc\", \"\", \"-ck\", and \"-bfs\" appear in the configuration in this order, then all \"v4.8-rcX\" tags are listed first, followed by \"v4.8\", then \"v4.8-ckX\" and finally \"v4.8-bfsX\". If more than one suffix matches the same tagname, then that tagname will be sorted according to the suffix which starts at the earliest position in the tagname. If more than one different matching suffix starts at that earliest position, then that tagname will be sorted according to the longest of those suffixes. The sorting order between different suffixes is undefined if they are in multiple config files. Specify a web browser that may be used by some commands. Currently only git-instaweb[1] and git-help[1] may use it. If no branch is specified and neither nor nor is used, then defaults to creating a new branch from HEAD. If is set to true, tries to find a remote-tracking branch whose name uniquely matches the new branch name. If such a branch exists, it is checked out and set as \"upstream\" for the new branch. If no such match can be found, it falls back to creating a new branch from the current HEAD. Link worktrees using relative paths (when \"true\") or absolute paths (when \"false\"). This is particularly useful for setups where the repository and worktrees may be moved between different locations or environments. Defaults to \"false\". Note that setting to \"true\" implies enabling the config (see git-config[1]), thus making it incompatible with older versions of Git."
    },
    {
        "link": "https://stackoverflow.com/questions/6842687/the-remote-end-hung-up-unexpectedly-while-git-cloning",
        "document": "Note: I have registered my SSH key with the GIT hosting provider\n\nWhat could be the issue here?\n\nMy git client repeatedly fails with the following error after trying to clone the repository for some time.\n\nThe http.postBuffer trick did not work for me. However: For others experiencing this problem, it may be an issue with GnuTLS. If you set Verbose mode, you may see the underlying error look something along the lines of the code below. Unfortunately, my only solution so far is to use SSH. I've seen a solution posted elsewhere to compile Git with OpenSSL instead of GnuTLS. There is an active bug report for the issue here. GIT_CURL_VERBOSE=1 git clone https://github.com/django/django.git Cloning into 'django'... * Couldn't find host github.com in the .netrc file; using defaults * About to connect() to github.com port 443 (#0) * Trying 192.30.252.131... * Connected to github.com (192.30.252.131) port 443 (#0) * found 153 certificates in /etc/ssl/certs/ca-certificates.crt * server certificate verification OK * common name: github.com (matched) * server certificate expiration date OK * server certificate activation date OK * certificate public key: RSA * certificate version: #3 * subject: * start date: Mon, 10 Jun 2013 00:00:00 GMT * expire date: Wed, 02 Sep 2015 12:00:00 GMT * issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance EV CA-1 * compression: NULL * cipher: ARCFOUR-128 * MAC: SHA1 > GET /django/django.git/info/refs?service=git-upload-pack HTTP/1.1 User-Agent: git/1.8.4 Host: github.com Accept: */* Accept-Encoding: gzip Pragma: no-cache < HTTP/1.1 200 OK < Server: GitHub.com < Date: Thu, 10 Oct 2013 03:28:14 GMT < Content-Type: application/x-git-upload-pack-advertisement < Transfer-Encoding: chunked < Expires: Fri, 01 Jan 1980 00:00:00 GMT < Pragma: no-cache < Cache-Control: no-cache, max-age=0, must-revalidate < Vary: Accept-Encoding < * Connection #0 to host github.com left intact * Couldn't find host github.com in the .netrc file; using defaults * About to connect() to github.com port 443 (#0) * Trying 192.30.252.131... * connected * found 153 certificates in /etc/ssl/certs/ca-certificates.crt * SSL re-using session ID * server certificate verification OK * common name: github.com (matched) * server certificate expiration date OK * server certificate activation date OK * certificate public key: RSA * certificate version: #3 * subject: * start date: Mon, 10 Jun 2013 00:00:00 GMT * expire date: Wed, 02 Sep 2015 12:00:00 GMT * issuer: C=US,O=DigiCert Inc,OU=www.digicert.com,CN=DigiCert High Assurance EV CA-1 * compression: NULL * cipher: ARCFOUR-128 * MAC: SHA1 > POST /django/django.git/git-upload-pack HTTP/1.1 User-Agent: git/1.8.4 Host: github.com Accept-Encoding: gzip Content-Type: application/x-git-upload-pack-request Accept: application/x-git-upload-pack-result Content-Encoding: gzip Content-Length: 2299 * upload completely sent off: 2299out of 2299 bytes < HTTP/1.1 200 OK < Server: GitHub.com < Date: Thu, 10 Oct 2013 03:28:15 GMT < Content-Type: application/x-git-upload-pack-result < Transfer-Encoding: chunked < Expires: Fri, 01 Jan 1980 00:00:00 GMT < Pragma: no-cache < Cache-Control: no-cache, max-age=0, must-revalidate < Vary: Accept-Encoding < remote: Counting objects: 232015, done. remote: Compressing objects: 100% (65437/65437), done. * GnuTLS recv error (-9): A TLS packet with unexpected length was received. * Closing connection #0 error: RPC failed; result=56, HTTP code = 200 fatal: The remote end hung up unexpectedly fatal: early EOF fatal: index-pack failed\n\nI was facing this issue when cloning data (via HTTP) from remote git repo hosted on AWS EC2 instance managed by elastic beanstalk. The cloning itself was also done on AWS EC2 instance. I tried all aforementioned solutions and their combinations:\n• turning off git compression and trying \"shallow\" and then - see fatal: early EOF fatal: index-pack failed\n• tunning GIT memory settings - et al, see here: fatal: early EOF fatal: index-pack failed\n• tunning nginx configuration - setting to both big value and 0 (unlimited); setting After all of this, I was still facing the same issue over and over again, until I found that issue is in Elastic Load Balancer (ELB) cutting the connection. After accessing the EC2 instance (the one hosting git repo) directly instead of going through ELB I've finally managed to clone git repo! I'm still not sure which of ELB (timeout) parameters is responsible for this, so I still have to do some research. It seems that changing Connection Draining policy for AWS Elastic Load Balancer by raising timeout from 20 seconds to 300 seconds resolved this issue for us. The relation between the errors and \"connection draining\" is strange and not obvious to us. It might be that connection draining timeout change caused some internal changes in ELB configuration that fixed the issue with premature connection closing. This is the related question on AWS forum (no answer yet): https://forums.aws.amazon.com/thread.jspa?threadID=258572"
    },
    {
        "link": "https://docs.gitlab.com/topics/git/troubleshooting_git",
        "document": "Sometimes things don’t work the way they should or as you might expect when you’re using Git. Here are some tips on troubleshooting and resolving issues with Git.\n\nWhen troubleshooting problems with Git, try these debugging techniques.\n\nGit includes a complete set of traces for debugging Git commands, for example:\n• : enables tracing of performance data, showing how long each particular invocation takes.\n• : enables tracing of what is discovering about the repository and environment it’s interacting with.\n\n‘Broken pipe’ errors can occur when attempting to push to a remote repository. When pushing you usually see:\n\nTo fix this issue, here are some possible solutions.\n\nWhen you attempt to push large repositories with Git over HTTPS, you might get an error message like:\n• None Increase the http.postBuffer value in your local Git configuration. The default value is 1 MB. For example, if fails when cloning a 500 MB repository, execute the following:\n\nIf the local configuration doesn’t resolve the issue, you may need to modify the server configuration. This should be done cautiously and only if you have server access.\n• None Increase the on the server side:\n\nIf you see this error, it may be caused by a slow internet connection:\n\nIf you use Git over HTTP instead of SSH, try one of these fixes:\n• Increase the POST buffer size in the Git configuration with .\n• Switch to the protocol with .\n\nIf neither approach fixes the error, you may need a different internet service provider.\n\nIf pushing over SSH, first check your SSH configuration as ‘Broken pipe’ errors can sometimes be caused by underlying issues with SSH (such as authentication). Make sure that SSH is correctly configured by following the instructions in the SSH troubleshooting documentation.\n\nIf you’re a GitLab administrator with server access, you can also prevent session timeouts by configuring SSH on the client or the server.\n\nTo configure SSH on the client side:\n• None On UNIX, edit (create the file if it doesn’t exist) and add or edit:\n• None On Windows, if you are using PuTTY, go to your session properties, then go to “Connection” and under “Sending of null packets to keep session active”, set Seconds between keepalives (0 to turn off) to .\n\nTo configure SSH on the server side, edit and add:\n\nIf ‘pack-objects’ type errors are also being displayed, you can try to run a before attempting to push to the remote repository again:\n\nIn case you’re running an older version of Git (< 2.9), consider upgrading to >= 2.9 (see Broken pipe when pushing to Git repository).\n\nUsers may experience the following error when attempting to push or pull using Git over SSH:\n\nThis error usually indicates that SSH daemon’s value is throttling SSH connections. This setting specifies the maximum number of concurrent, unauthenticated connections to the SSH daemon. This affects users with proper authentication credentials (SSH keys) because every connection is ‘unauthenticated’ in the beginning. The default value is .\n\nThis can be verified by examining the host’s logs. For systems in the Debian family, refer to , and for RHEL derivatives, check for the following errors:\n\nThe absence of this error suggests that the SSH daemon is not limiting connections, indicating that the underlying issue may be network-related.\n\nIncrease on the GitLab server by adding or modifying the value in :\n\nmeans up to 100 SSH sessions are allowed without restriction, after which 30% of connections are dropped until reaching an absolute maximum of 200.\n\nAfter you modify the value of , check for any errors in the configuration.\n\nIf the configuration check runs without errors, it should be safe to restart the SSH daemon for the change to take effect.\n\nIf pulling/pushing from/to your repository ends up taking more than 50 seconds, a timeout is issued. It contains a log of the number of operations performed and their respective timings, like the example below:\n\nThis could be used to further investigate what operation is performing poorly and provide GitLab with more information on how to improve the service.\n\nIf you encounter an error like this when using Git, it usually indicates a network issue:\n\nTo help identify the underlying issue:\n• Connect through a different network (for example, switch from Wi-Fi to cellular data) to rule out local network or firewall issues.\n• Run this bash command to gather and information: . To learn about MTR and how to read its output, see the Cloudflare article What is My Traceroute (MTR)?.\n\nSometimes, when cloning old or large repositories, the following error is shown when running over HTTP:\n\nThis problem is common in Git itself, due to its inability to handle large files or large quantities of files. Git LFS was created to work around this problem; however, even it has limitations. It’s usually due to one of these reasons:\n• The number of files in the repository.\n• The number of revisions in the history.\n• The existence of large files in the repository.\n\nIf this error occurs when cloning a large repository, you can decrease the cloning depth to a value of . For example:\n\nThis approach doesn’t resolve the underlying cause, but you can successfully clone the repository. To decrease the cloning depth to , run:\n\nPassword expired error on Git fetch with SSH for LDAP user\n\nIf returns this error on GitLab Self-Managed, the password expiration date ( ) for this user in the GitLab database is a date in the past:\n\nRequests made with a SSO account and where is not return this error:\n\nTo resolve this issue, you can update the password expiration by either:\n• None Using the GitLab Rails console to check and update the user data:\n\nThe bug was reported in this issue.\n\nIf you receive an error when using Git over HTTP(S), refer to the two-factor authentication troubleshooting guide.\n\nThis error may also occur with Git for Windows 2.46.0 and later when specifying an empty username. When authenticating with a token, the username can be any value, but an empty value could trigger an authentication error. To resolve this, specify a username string.\n\nWhen cloning a repository with HTTP, the file may show an initial status of (unauthorized), quickly followed by a .\n\nYou should expect this initial log entry for each Git operation performed over HTTP, due to how HTTP Basic authentication works.\n\nWhen the Git client initiates a clone, the initial request sent to GitLab does not provide any authentication details. GitLab returns a result for that request. A few milliseconds later, the Git client sends a follow-up request containing authentication details. This second request should succeed, and result in a log entry.\n\nIf a log entry lacks a corresponding log entry, the Git client is likely using either:\n\nIf not rectified, you could encounter (Forbidden) errors instead.\n\nWhen performing Git operations over HTTP, a (Forbidden) error indicates that your IP address has been blocked by the failed-authentication ban:\n\nThe can be seen in the :\n\nIf your IP address has been blocked, a corresponding log entry exists in the :\n\nThe failed authentication ban limits differ depending if you are using a GitLab Self-Managed or GitLab SaaS."
    },
    {
        "link": "https://stackoverflow.com/questions/28570836/git-cloning-remote-end-hung-up-unexpectedly-tried-changing-postbuffer-but-stil",
        "document": "If this is an http transaction, you would need to contact BitBucket support for them to diagnose what went wrong on the server side.\n\n As mentioned in, for example, \" \":\n\nNote that when BitBucket will use a Git 2.5+ (Q2 2015), the client might end up with a more explicit error message instead:\n\nSee commit 6bc0cb5 by Jeff King ( ), 20 May 2015.\n\n (Merged by Junio C Hamano -- -- in commit 777e75b, 01 Jun 2015)\n\n Test-adapted-from: Dennis Kaarsemaker ( )\n\nThe new environment variable is :\n\nThe environment variable (or the config variable) may be set to change the largest ref negotiation request that git will handle during a fetch; any fetch requiring a larger buffer will not succeed. This value should not normally need to be changed, but may be helpful if you are fetching from a repository with an extremely large number of refs. The value can be specified with a unit (e.g., for 100 megabytes). The default is 10 megabytes.\n\nThe explanation is very interesting:\n\nWhen spawns \" \" to do ref negotiation, it streams the http request body to , who then streams the http response back to the client as it reads.\n\n In theory, git can go full-duplex; the client can consume our response while it is still sending the request.\n\n In practice, however, HTTP is a half-duplex protocol.\n\n Even if our client is ready to read and write simultaneously, we may have other HTTP infrastructure in the way, including the webserver that spawns our CGI, or any intermediate proxies. In at least one documented case, this leads to deadlock when trying a fetch over http.\n\n What happens is basically:\n• Apache proxies the request to the CGI, http-backend.\n• http-backend gzip-inflates the data and sends the result to upload-pack.\n• upload-pack acts on the data and generates output over the pipe back to Apache. Apache isn't reading because it's busy writing (step 1). This works fine most of the time, because the output ends up in a system pipe buffer, and Apache reads it as soon as it finishes writing. But if both the request and the response exceed the system pipe buffer size, then we deadlock (Apache blocks writing to http-backend, http-backend blocks writing to upload-pack, and upload-pack blocks writing to Apache). We need to break the deadlock by spooling either the input or the output. In this case, it's ideal to spool the input, because Apache does not start reading either stdout or stderr until we have consumed all of the input. So until we do so, we cannot even get an error message out to the client. The solution is fairly straight-forward: we read the request body into an in-memory buffer in http-backend, freeing up Apache, and then feed the data ourselves to ."
    },
    {
        "link": "https://docs.gitlab.co.jp/ee/topics/git/troubleshooting_git.html",
        "document": ""
    }
]