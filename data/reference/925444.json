[
    {
        "link": "https://geeksforgeeks.org/pyqt5-how-to-change-border-style-of-mainwindow",
        "document": "When we create a window in PyQt5, by default, there is no special type of border to it. But we change the style, thickness as well as color of the main window by using method.\n\nBelow is how normal border vs styled border looks like"
    },
    {
        "link": "https://doc.qt.io/qt-6/stylesheet-examples.html",
        "document": "We will now see a few examples to get started with using Qt Style Sheets.\n\nLet's start by setting yellow as the background color of all QLineEdits in an application. This could be achieved like this:\n\nIf we want the property to apply only to the QLineEdits that are children (or grandchildren or grand-grandchildren) of a specific dialog, we would rather do this:\n\nIf we want the property to apply only to one specific QLineEdit, we can give it a name using QObject::setObjectName() and use an ID Selector to refer to it:\n\nAlternatively, we can set the background-color property directly on the QLineEdit, omitting the selector:\n\nTo ensure a good contrast, we should also specify a suitable color for the text:\n\nIt might be a good idea to change the colors used for selected text as well:\n\nThere are many situations where we need to present a form that has mandatory fields. To indicate to the user that the field is mandatory, one effective (albeit esthetically dubious) solution is to use yellow as the background color for those fields. It turns out this is very easy to implement using Qt Style Sheets. First, we would use the following application-wide style sheet:\n\nThis means that every widget whose Qt property is set to true would have a yellow background.\n\nThen, for each mandatory field widget, we would simply create a property on the fly and set it to true. For example:\n\nThis time, we will show how to create a red QPushButton. This QPushButton would presumably be connected to a very destructive piece of code.\n\nFirst, we are tempted to use this style sheet:\n\nHowever, the result is a boring, flat button with no borders:\n\nWhat happened is this:\n• We have made a request that cannot be satisfied using the native styles alone (e.g., the Windows Vista theme engine doesn't let us specify the background color of a button).\n• Therefore, the button is rendered using style sheets.\n• We haven't specified any values for border-width and border-style, so by default we obtain a 0-pixel wide border of style .\n\nLet's improve the situation by specifying a border:\n\nThings look already a lot better. But the button looks a bit cramped. Let's specify some spacing between the border and the text using the padding. Additionally, we will enforce a minimum width, round the corners, and specify a larger font to make the button look nicer:\n\nThe only issue remaining is that the button doesn't react when we press it. We can fix this by specifying a slightly different background color and use a different border style.\n\nSubcontrols give access to the sub-elements of a widget. For example, a QPushButton associated with a menu (using QPushButton::setMenu()) has a menu indicator. Let's customize the menu indicator for the red push button:\n\nBy default, the menu indicator is located at the bottom-right corner of the padding rectangle. We can change this by specifying subcontrol-position and subcontrol-origin to anchor the indicator differently. We can also use top and left to move the indicator by a few pixels. For example:\n\nThis positions the to the center right of the QPushButton's padding rectangle (see subcontrol-origin for more information).\n\nSince red seems to be our favorite color, let's make the text in QLineEdit red by setting the following application-wide stylesheet:\n\nHowever, we would like to give a visual indication that a QLineEdit is read-only by making it appear gray:\n\nAt some point, our design team comes with the requirement that all QLineEdits in the registration form (with the object name ) to be brown:\n\nA few UI design meetings later, we decide that all our QDialogs should have brown colored QLineEdits:\n\nQuiz: What happens if we have a read-only QLineEdit in a QDialog? [Hint: The Conflict Resolution section above explains what happens in cases like this.]\n\nThis section provides examples to customize specific widgets using Style Sheets.\n\nThe background of any QAbstractScrollArea (Item views, QTextEdit and QTextBrowser) can be set using the background properties. For example, to set a background-image that scrolls with the scroll bar:\n\nIf the background-image is to be fixed with the viewport:\n\nStyling of a QCheckBox is almost identical to styling a QRadioButton. The main difference is that a tristate QCheckBox has an indeterminate state.\n\nWe will look at an example where the drop down button of a QComboBox appears \"merged\" with the combo box frame.\n\nThe pop-up of the QComboBox is a QAbstractItemView and is styled using the descendant selector:\n\nThe title bar and the buttons of a QDockWidget can be customized as follows:\n\nIf one desires to move the dock widget buttons to the left, the following style sheet can be used:\n\nA QFrame is styled using the The Box Model.\n\nLet us look at an example that moves the QGroupBox's title to the center.\n\nFor a checkable QGroupBox, use the {#indicator-sub}{::indicator} subcontrol and style it exactly like a QCheckBox (i.e)\n\nQHeaderView is customized as follows:\n\nThe frame of a QLineEdit is styled using the The Box Model. To create a line edit with rounded corners, we can set:\n\nThe password character of line edits that have QLineEdit::Password echo mode can be set using:\n\nThe background of a read only QLineEdit can be modified as below:\n\nThe background color of alternating rows can be customized using the following style sheet:\n\nTo provide a special background when you hover over items, we can use the ::item subcontrol. For example,\n\nThe separator of a QMainWindow can be styled as follows:\n\nIndividual items of a QMenu are styled using the 'item' subcontrol as follows:\n\nFor a more advanced customization, use a style sheet as follows:\n\nQMenuBar is styled as follows:\n\nThe QProgressBar's border, chunk, and text-align can be customized using style sheets. However, if one property or sub-control is customized, all the other properties or sub-controls must be customized as well.\n\nFor example, we change the border to grey and the chunk to cerulean.\n\nThis leaves the text-align, which we customize by positioning the text in the center of the progress bar.\n\nA margin can be included to obtain more visible chunks.\n\nIn the screenshot above, we use a margin of 0.5 pixels.\n\nA QPushButton is styled as follows:\n\nFor a QPushButton with a menu, use the ::menu-indicator subcontrol.\n\nThe indicator of a QRadioButton can be changed using:\n\nThe QScrollBar can be styled using its subcontrols like handle, add-line, sub-line, and so on. Note that if one property or sub-control is customized, all the other properties or sub-controls must be customized as well.\n\nThe scroll bar above has been styled in aquamarine with a solid grey border.\n\nThe left-arrow and right-arrow have a solid grey border with a white background. As an alternative, you could also embed the image of an arrow.\n\nIf you want the scroll buttons of the scroll bar to be placed together (instead of the edges) like on macOS, you can use the following stylesheet:\n\nThe scroll bar using the above stylesheet looks like this:\n\nTo customize a vertical scroll bar use a style sheet similar to the following:\n\nQSizeGrip is usually styled by just setting an image.\n\nYou can style horizontal slider as below:\n\nIf you want to change the color of the slider parts before and after the handle, you can use the add-page and sub-page subcontrols. For example, for a vertical slider:\n\nQSpinBox can be completely customized as below (the style sheet has commentary inline):\n\nA QSplitter derives from a QFrame and hence can be styled like a QFrame. The grip or the handle is customized using the ::handle subcontrol.\n\nWe can provide a background for the status bar and a border for items inside the status bar as follows:\n\nNote that widgets that have been added to the QStatusBar can be styled using the descendant declaration (i.e)\n\nFor the screenshot above, we need a stylesheet as follows:\n\nOften we require the tabs to overlap to look like below:\n\nFor a tab widget that looks like above, we make use of negative margins. Negative values draw the element closer to its neighbors than it would be by default. The resulting stylesheet looks like this:\n\nTo move the tab bar to the center (as below), we require the following stylesheet:\n\nThe tear indicator and the scroll buttons can be further customized as follows:\n\nSince Qt 4.6 the close button can be customized as follow:\n\nSuppose we'd like our selected item in QTableView to have bubblegum pink fade to white as its background.\n\nThis is possible with the selection-background-color property and the syntax required is:\n\nThe corner widget can be customized using the following style sheet\n\nThe QTableView's checkbox indicator can also be customized. In the following snippet the indicator in unchecked state is customized:\n\nThe background and the handle of a QToolBar is customized as below:\n\nThe tabs of the QToolBox are customized using the 'tab' subcontrol.\n\nThere are three types of QToolButtons.\n• The QToolButton has no menu. In this case, the QToolButton is styled exactly like QPushButton. See Customizing QPushButton for an example.\n• The QToolButton has a menu and has the QToolButton::popupMode set to QToolButton::DelayedPopup or QToolButton::InstantPopup. In this case, the QToolButton is styled exactly like a QPushButton with a menu. See Customizing QPushButton for an example of the usage of the menu-indicator pseudo state.\n• The QToolButton has its QToolButton::popupMode set to QToolButton::MenuButtonPopup. In this case, we style it as follows:\n\nQToolTip is customized exactly like a QLabel. In addition, for platforms that support it, the opacity property may be set to adjust the opacity.\n\nThe background color of alternating rows can be customized using the following style sheet:\n\nTo provide a special background when you hover over items, we can use the ::item subcontrol. For example,\n\nThe branches of a QTreeView are styled using the ::branch subcontrol. The following stylesheet color codes the various states when drawing a branch.\n\nColorful, though it is, a more useful example can be made using the following images:\n\nThe resulting tree view looks like this:\n\nThis section lists some common mistakes when using stylesheets.\n\nWhen styling a QPushButton, it is often desirable to use an image as the button graphic. It is common to try the background-image property, but this has a number of drawbacks: For instance, the background will often appear hidden behind the button decoration, because it is not considered a background. In addition, if the button is resized, the entire background will be stretched or tiled, which does not always look good.\n\nIt is better to use the border-image property, as it will always display the image, regardless of the background (you can combine it with a background if it has alpha values in it), and it has special settings to deal with button resizing.\n\nConsider the following snippet:\n\nThis will produce a button looking like this:\n\nThe numbers after the url gives the top, right, bottom and left number of pixels, respectively. These numbers correspond to the border and should not stretch when the size changes. Whenever you resize the button, the middle part of the image will stretch in both directions, while the pixels specified in the stylesheet will not. This makes the borders of the button look more natural, like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/28481109/how-to-change-color-of-qmainwindow-borders-and-title-bar",
        "document": "The below is assigned a dark-gray background-color using QSS. I would also like to change the color of the borders and the color of the title bar.\n\nHow to achieve control of the appearance of the borders and titlebar?\n\nI would like to know how to change their colors and how to control the borders width and the title-bar's height."
    },
    {
        "link": "https://doc.qt.io/qt-6/stylesheet-reference.html",
        "document": "Qt Style Sheets support various properties, pseudo-states, and subcontrols that make it possible to customize the look of widgets.\n\nThe following table lists the Qt widgets that can be customized using style sheets:\n\nThis section lists all the properties supported by Qt Style Sheets. Which values can be given to a property depend on the property's type. Unless otherwise specified, the following properties apply to all widgets. Properties marked with an asterisk * are specific to Qt and have no equivalent in CSS2 or CSS3. The Qt-specific properties are the following:\n\nThe property sets the , which is used to emphasize interactive UI elements. If this property is not set, it defaults to the color.\n\nThe alternate background color used in QAbstractItemView subclasses.\n\nIf this property is not set, the default value is whatever is set for the palette's AlternateBase role.\n\nSee also background and selection-background-color.\n\nShorthand notation for setting the background. Equivalent to specifying , , , and/or .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QDialog, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nOften, it is required to set a fill pattern similar to the styles in Qt::BrushStyle. You can use the background-color property for Qt::SolidPattern, Qt::RadialGradientPattern, Qt::LinearGradientPattern and Qt::ConicalGradientPattern. The other patterns are easily achieved by creating a background image that contains the pattern.\n\nSee also background-origin, selection-background-color, background-clip, background-attachment and alternate-background-color.\n\nThe background color used for the widget.\n\nThe background image used for the widget. Semi-transparent parts of the image let the shine through.\n\nWhether and how the background image is repeated to fill the rectangle.\n\nIf this property is not specified, the background image is repeated in both directions ( ).\n\nThe alignment of the background image within the rectangle.\n\nIf this property is not specified, the alignment is .\n\nDetermines whether the background-image in a QAbstractScrollArea is scrolled or fixed with respect to the viewport. By default, the background-image scrolls with the viewport.\n\nThe widget's rectangle, in which the is drawn.\n\nThis property specifies the rectangle to which the and are clipped.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QDialog, QFrame, QGroupBox, QLabel, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nIf this property is not specified, the default is .\n\nSee also background, background-origin and The Box Model.\n\nThe widget's background rectangle, to use in conjunction with and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QDialog, QFrame, QGroupBox, QLabel, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nIf this property is not specified, the default is .\n\nSee also background and The Box Model.\n\nShorthand notation for setting the widget's border. Equivalent to specifying , , and/or .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nShorthand notation for setting the widget's top border. Equivalent to specifying , , and/or .\n\nShorthand notation for setting the widget's right border. Equivalent to specifying , , and/or .\n\nShorthand notation for setting the widget's bottom border. Equivalent to specifying , , and/or .\n\nShorthand notation for setting the widget's left border. Equivalent to specifying , , and/or .\n\nThe color of all the border's edges. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, QToolTip, and plain QWidgets.\n\nIf this property is not specified, it defaults to color (i.e., the widget's foreground color).\n\nSee also border-style, border-width, border-image, and The Box Model.\n\nThe color of the border's top edge.\n\nThe color of the border's right edge.\n\nThe color of the border's bottom edge.\n\nThe color of the border's left edge.\n\nThe image used to fill the border. The image is cut into nine parts and stretched appropriately if necessary. See Border Image for details.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit and QToolTip.\n\nSee also border-color, border-style, border-width, and The Box Model.\n\nThe radius of the border's corners. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to 0.\n\nSee also border-width and The Box Model.\n\nThe radius of the border's top-left corner.\n\nThe radius of the border's top-right corner.\n\nThe radius of the border's bottom-right corner. Setting this property to a positive value results in a rounded corner.\n\nThe radius of the border's bottom-left corner. Setting this property to a positive value results in a rounded corner.\n\nThe style of all the border's edges.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to .\n\nSee also border-color, border-style, border-image, and The Box Model.\n\nThe style of the border's top edge.\n\nThe style of the border's right edge.\n\nThe style of the border's bottom edge.\n\nThe style of the border's left edge.\n\nThe width of the border. Equivalent to setting , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nSee also border-color, border-radius, border-style, border-image, and The Box Model.\n\nThe width of the border's top edge.\n\nThe width of the border's right edge.\n\nThe width of the border's bottom edge.\n\nThe width of the border's left edge.\n\nIf position is (the default), moves a subcontrol by a certain offset up; specifying is then equivalent to specifying .\n\nIf position is , the property specifies the subcontrol's bottom edge in relation to the parent's bottom edge (see also subcontrol-origin).\n\nSee also left, right, and top.\n\nThe layout of buttons in a QDialogButtonBox or a QMessageBox. The possible values are 0 (WinLayout), 1 (MacLayout), 2 (KdeLayout), 3 (GnomeLayout) and 5 (AndroidLayout).\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_DialogButtonLayout style hint.\n\nThe color used to render text.\n\nThis property is supported by all widgets that respect the QWidget::palette.\n\nIf this property is not set, the default is whatever is set for in the widget's palette for the QWidget::foregroundRole (typically black).\n\nSee also background and selection-color.\n\nWhether the buttons in a QDialogButtonBox show icons\n\nIf this property is set to 1, the buttons of a QDialogButtonBox show icons; if it is set to 0, the icons are not shown.\n\nSee the List of Icons section for information on how to set icons.\n\nShorthand notation for setting the text's font. Equivalent to specifying , , , and/or .\n\nThis property is supported by all widgets that respect the QWidget::font.\n\nIf this property is not set, the default is the QWidget::font.\n\nThe font size. In this version of Qt, only pt and px metrics are supported.\n\nThe weight of the font.\n\nThe color of the grid line in a QTableView.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_Table_GridLineColor style hint.\n\nThe height of a subcontrol (or in some case, a widget).\n\nIf this property is not specified, it defaults to a value that depends on the subcontrol/widget and on the current style.\n\nThe icon that is used, for widgets that have an icon.\n\nThe only widget currently supporting this property is QPushButton.\n\nThe width and height of the icon in a widget.\n\nThe icon size of the following widgets can be set using this property.\n\nThe image that is drawn in the contents rectangle of a subcontrol.\n\nThe image property accepts a list of Urls or an . The actual image that is drawn is determined using the same algorithm as QIcon (i.e) the image is never scaled up but always scaled down if necessary. If a is specified, the image is scaled to the size of the contents rectangle.\n\nSetting the image property on sub controls implicitly sets the width and height of the sub-control (unless the image in a SVG).\n\nIn Qt 4.3 and later, the alignment of the image within the rectangle can be specified using image-position.\n\nThis property is for subcontrols only–we don't support it for other elements.\n\nIn Qt 4.3 and later, the alignment of the image image's position can be specified using relative or absolute position.\n\nIf position is (the default), moves a subcontrol by a certain offset to the right.\n\nIf position is , the property specifies the subcontrol's left edge in relation to the parent's left edge (see also subcontrol-origin).\n\nIf this property is not specified, it defaults to .\n\nSee also right, top, and bottom.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_LineEdit_PasswordCharacter style hint.\n\nThe QLineEdit password mask delay in milliseconds before lineedit-password-character is applied to visible character.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_LineEdit_PasswordMaskDelay style hint.\n\nThe widget's margins. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to .\n\nSee also padding, spacing, and The Box Model.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, and QToolTip.\n\nThe value is relative to the contents rect in the box model.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, and QToolTip.\n\nThe value is relative to the contents rect in the box model.\n\nThe interaction behavior for text in a message box. Possible values are based on Qt::TextInteractionFlags.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_MessageBox_TextInteractionFlags style hint.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, QToolButton, and QToolTip.\n\nIf this property is not specified, the minimum height is derived based on the widget's contents and the style.\n\nThe value is relative to the contents rect in the box model.\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSizeGrip, QSpinBox, QSplitter, QStatusBar, QTextEdit, QToolButton, and QToolTip.\n\nIf this property is not specified, the minimum width is derived based on the widget's contents and the style.\n\nThe value is relative to the contents rect in the box model.\n\nThe opacity for a widget. Possible values are from 0 (transparent) to 255 (opaque). For the moment, this is only supported for tooltips.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_ToolTipLabel_Opacity style hint.\n\nThe outline drawn around the object's border.\n\nThe color of the outline. See also border-color\n\nThe outline's offset from the border of the widget.\n\nSpecifies the pattern used to draw the outline. See also border-style\n\nThe radius for the bottom-left rounded corner of the outline.\n\nThe radius for the bottom-right rounded corner of the outline.\n\nThe radius for the top-left corner of the outline.\n\nThe radius for the top-right rounded corner of the outline.\n\nThe widget's padding. Equivalent to specifying , , , and .\n\nThis property is supported by QAbstractItemView subclasses, QAbstractSpinBox subclasses, QCheckBox, QComboBox, QFrame, QGroupBox, QLabel, QLineEdit, QMenu, QMenuBar, QPushButton, QRadioButton, QSplitter, QTextEdit, and QToolTip.\n\nIf this property is not specified, it defaults to .\n\nSee also margin, spacing, and The Box Model.\n\nWhether the QTreeView paints alternating row colors for the empty area (i.e the area where there are no items)\n\nThe color used for the placeholder text of text editing widgets.\n\nIf this property is not set, the default value is whatever is set for the palette's PlaceholderText role.\n\nWhether offsets specified using left, right, top, and bottom are relative or absolute coordinates.\n\nIf this property is not specified, it defaults to .\n\nIf position is (the default), moves a subcontrol by a certain offset to the left; specifying is then equivalent to specifying .\n\nIf position is , the property specifies the subcontrol's right edge in relation to the parent's right edge (see also subcontrol-origin).\n\nSee also left, top, and bottom.\n\nThe background of selected text or items.\n\nThis property is supported by all widgets that respect the QWidget::palette and that show selection text.\n\nIf this property is not set, the default value is whatever is set for the palette's Highlight role.\n\nSee also selection-color and background.\n\nThe foreground of selected text or items.\n\nThis property is supported by all widgets that respect the QWidget::palette and that show selection text.\n\nIf this property is not set, the default value is whatever is set for the palette's HighlightedText role.\n\nSee also selection-background-color and color.\n\nControls whether selections in a QListView cover the entire row or just the extent of the text.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_ItemView_ShowDecorationSelected style hint.\n\nThis property is supported by QCheckBox, checkable QGroupBoxes, QMenuBar, and QRadioButton.\n\nIf this property is not specified, the default value depends on the widget and on the current style.\n\nSee also padding and margin.\n\nThe origin rectangle of the subcontrol within the parent element.\n\nIf this property is not specified, the default is .\n\nThe alignment of the subcontrol within the origin rectangle specified by subcontrol-origin.\n\nIf this property is not specified, it defaults to a value that depends on the subcontrol.\n\nWhether tool tips are shown on window title bar buttons.\n\nHow much an animation should last (in milliseconds). A value equal to zero means that the animations will be disabled.\n\nIf this property is not specified, it defaults to the value specified by the current style for the SH_Widget_Animation_Duration style hint.\n\nThe alignment of text and icon within the contents of the widget.\n\nIf this value is not specified, it defaults to the value that depends on the native style.\n\nThis property is currently supported only by QPushButton and QProgressBar.\n\nIf position is (the default), moves a subcontrol by a certain offset down.\n\nIf position is , the property specifies the subcontrol's top edge in relation to the parent's top edge (see also subcontrol-origin).\n\nIf this property is not specified, it defaults to .\n\nSee also left, right, and bottom.\n\nThe width of a subcontrol (or a widget in some cases).\n\nIf this property is not specified, it defaults to a value that depends on the subcontrol/widget and on the current style.\n\nThe for the subcontrol or widget based on the chosen role.\n\nThe list of CSS properties that you want to apply Qt-specific styles on.\n\nIcons used in Qt can be customized using the following properties. Each of the properties listed in this section have the type Icon.\n\nNote that for icons to appear in buttons in a QDialogButtonBox, you need to set the dialogbuttonbox-buttons-have-icons property to true. Also, to customize the size of the icons, use the icon-size property.\n\nThe following table summarizes the syntax and meaning of the different property types.\n\nA border image is an image that is composed of nine parts (top left, top center, top right, center left, center, center right, bottom left, bottom center, and bottom right). When a border of a certain size is required, the corner parts are used as is, and the top, right, bottom, and left parts are stretched or repeated to produce a border with the desired size. See the CSS3 Draft Specification for details. Specifies the pattern used to draw a border. See the CSS3 Draft Specification for details. One to four occurrences of Brush, specifying the top, right, bottom, and left edges of a box, respectively. If the left color is not specified, it is taken to be the same as the right color. If the bottom color is not specified, it is taken to be the same as the top color. If the right color is not specified, it is taken to be the same as the top color. One to four occurrences of Length, specifying the top, right, bottom, and left edges of a box, respectively. If the left length is not specified, it is taken to be the same as the right length. If the bottom length is not specified, is it taken to be the same as the top length. If the right length is not specified, it is taken to be the same as the top length. Specifies a Color or a Gradient or an entry in the Palette. Specifies a color as RGB (red, green, blue), RGBA (red, green, blue, alpha), HSV (hue, saturation, value), HSVA (hue, saturation, value, alpha), HSL (hue, saturation, lightness), HSLA (hue, saturation, lightness, alpha) or a named color. The or syntax can be used with integer values between 0 and 255, or with percentages. The value of s, v, l and a in , or must all be in the range 0-255 or with percentages, the value of h must be in the range 0-359. The support for HSL(A) is available since 5.13. Note: The RGB colors allowed are the same as those allowed with CSS 2.1, as listed here. Specifies gradient fills. There are three types of gradient fills:\n• Radial gradients interpolate colors between a focal point and end points on a circle surrounding it. Gradients are specified in Object Bounding Mode. Imagine the box in which the gradient is rendered, to have its top left corner at (0, 0) and its bottom right corner at (1, 1). Gradient parameters are then specified as percentages from 0 to 1. These values are extrapolated to actual box coordinates at runtime. It is possible specify values that lie outside the bounding box (-0.6 or 1.8, for instance). Warning: The stops have to appear sorted in ascending order. A number followed by a measurement unit. The CSS standard recommends that user agents must ignore a declaration with an illegal value. In Qt, it is mandatory to specify measurement units. For compatibility with earlier versions of Qt, numbers without measurement units are treated as pixels in most contexts. The supported units are:\n• : the size of one point (i.e., 1/72 of an inch)\n• : the size relative to the font size of the element (e.g., 2em means 2 times the size of the font)\n• : the x-height of the font (i.e., the height of 'x') However, Qt is limited to font sizes in and and any other size must be in , or . Indicates which of four rectangles to use.\n• : The margin rectangle. The margin falls outside the border.\n• : The border rectangle. This is where any border is drawn.\n• : The padding rectangle. Unlike the margins, padding is located inside the border.\n• : The content rectangle. This specifies where the actual contents go, excluding any padding, border, or margin. These values correspond the Color roles in the widget's QPalette. One or two occurrences of Length. If only one length is specified, it is used as the radius of the quarter circle defining the corner. If two lengths are specified, the first length is the horizontal radius of a quarter ellipse, whereas the second length is the vertical radius. A value indicating the nature of repetition. is the name of a file on the local disk or stored using The Qt Resource System. Setting an image implicitly sets the width and height of the element.\n\nThe following pseudo-states are supported:\n\nThe following subcontrols are available:\n\nSee Customizing the QPushButton's Menu Indicator Sub-Control for an example of how to customize a subcontrol."
    },
    {
        "link": "https://stackoverflow.com/questions/63797015/setting-stylesheet-of-qmainwindow-covers-qwidget",
        "document": "I have made my own progress bar in PyQt5, which is a QWdiget:\n\nWhen I add it in QMainWindow, some parts of it are covered by the color I set to QMainWindow using self.styleSheet. If I comment this line, the background is white and the widget is no longer covered. How could I change this behavior and set a background color without this being covered? This is how I add it:"
    },
    {
        "link": "https://stackoverflow.com/questions/7667552/qt-widget-with-transparent-background",
        "document": "(I'm using PySide, but I think the answer would be the same/similar for any language bindings).\n\nI'm trying to take the shaped clock example, located here, and cause the face of the clock (circle) to be transparent so that all I see are the clock hands and minute ticks. As is, when the example runs, it looks like this. I'm using Windows 7.\n\nSo far, I've tried the following (in the constructor):\n• \n• Clock appears (has presence in task bar), but I can't see it anywhere\n• \n• Clock appears, but entire clock is transparent. I want the background (face) to be transparent, but I want the clock hands to be visible."
    },
    {
        "link": "https://stackoverflow.com/questions/47223179/pyqt5-set-mainwindow-background-transparent",
        "document": "I am attempting to make the top border of my app semi transparent (rounded edges) by using the partially transparent PNG below:\n\nThis does not work and ends up having the corners filled in when the app is launched. A simplified code is below:\n\nUsing the only makes the whole window black. All help appreciated."
    },
    {
        "link": "https://forum.qt.io/topic/127517/how-to-make-qpainter-elements-clickable-through-using-pyqt",
        "document": "I am trying to create a desktop application for Windows 10 using PyQt.\n\nThe application will be an overlay, so it has to be transparent, clickable-through and always on top. An object detector will detect some regions of interest and a rectangle will be painted in that region.\n\nThe overlay is almost fine. Right now it's able to draw random rectangles and while the background is transparent you can click through the background. The problem is that I can't click through the rectangles.\n\nI've tried the WA_TransparentForMouseEvents attribute, but it didn't work correctly. When I set this attribute the buttons stop working (I would expect this behaviour, and I don't care since the buttons are just for debuging), but I still can't click through the buttons or the rectangles.\n\nThis is my code sample:"
    },
    {
        "link": "https://forum.qt.io/topic/121146/qtmediaplayer-wont-work-on-frameless-and-translucent-background-pyqt5",
        "document": "Your browser does not seem to support JavaScript. As a result, your viewing experience will be diminished, and you have been placed in read-only mode.\n\nPlease download a browser that supports JavaScript, or enable it if it's disabled (i.e. NoScript)."
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/7rfwnn/pyqt5_round_window_or_frameless_window_surrounded",
        "document": "So I'm kind of lost here. Every potential solution I've found has failed. The most promising ones rely on libraries that Pycharm refuses to install. PySide. So I'm hoping someone here can help.\n\nI'm trying to make a ui that doesn't conform to the standard rectangle template. I know it's unnecessary, but it's now a mission. It's hard to find an example, so I hope someone gets it. I would like to either make the window round some how. even if that means simply making it transparent and displaying an image to make it look round. The transparent parts would need to ignore mouse events. Or surrounding the frameless window with an image. It's pretty hard to google that so i'm coming up short.\n\nhere's my code so far."
    }
]