[
    {
        "link": "https://numpy.org/doc/2.2/reference/generated/numpy.count_nonzero.html",
        "document": "Counts the number of non-zero values in the array .\n\nThe word “non-zero” is in reference to the Python 2.x built-in method (renamed in Python 3.x) of Python objects that tests an object’s “truthfulness”. For example, any number is considered truthful if it is nonzero, whereas any string is considered truthful if it is not the empty string. Thus, this function (recursively) counts how many elements in (and in sub-arrays thereof) have their or method evaluated to .\n\nThe array for which to count non-zeros. Axis or tuple of axes along which to count non-zeros. Default is None, meaning that non-zeros will be counted along a flattened version of . If this is set to True, the axes that are counted are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. Number of non-zero values in the array along a given axis. Otherwise, the total number of non-zero values in the array is returned."
    },
    {
        "link": "https://numpy.org/devdocs/reference/generated/numpy.count_nonzero.html",
        "document": "Counts the number of non-zero values in the array .\n\nThe word “non-zero” is in reference to the Python 2.x built-in method (renamed in Python 3.x) of Python objects that tests an object’s “truthfulness”. For example, any number is considered truthful if it is nonzero, whereas any string is considered truthful if it is not the empty string. Thus, this function (recursively) counts how many elements in (and in sub-arrays thereof) have their or method evaluated to .\n\nThe array for which to count non-zeros. Axis or tuple of axes along which to count non-zeros. Default is None, meaning that non-zeros will be counted along a flattened version of . If this is set to True, the axes that are counted are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. Number of non-zero values in the array along a given axis. Otherwise, the total number of non-zero values in the array is returned."
    },
    {
        "link": "https://numpy.org/doc/2.0/reference/generated/numpy.count_nonzero.html",
        "document": "Counts the number of non-zero values in the array .\n\nThe word “non-zero” is in reference to the Python 2.x built-in method (renamed in Python 3.x) of Python objects that tests an object’s “truthfulness”. For example, any number is considered truthful if it is nonzero, whereas any string is considered truthful if it is not the empty string. Thus, this function (recursively) counts how many elements in (and in sub-arrays thereof) have their or method evaluated to .\n\nThe array for which to count non-zeros. Axis or tuple of axes along which to count non-zeros. Default is None, meaning that non-zeros will be counted along a flattened version of . If this is set to True, the axes that are counted are left in the result as dimensions with size one. With this option, the result will broadcast correctly against the input array. Number of non-zero values in the array along a given axis. Otherwise, the total number of non-zero values in the array is returned."
    },
    {
        "link": "https://geeksforgeeks.org/numpy-count_nonzero-method-python",
        "document": "function counts the number of non-zero values in the array arr.\n\nParameters : \n\n arr : [array_like] The array for which to count non-zeros.\n\n axis : [int or tuple, optional] Axis or tuple of axes along which to count non-zeros. Default is None, meaning that non-zeros will be counted along a flattened version of arr. Return : [int or array of int] Number of non-zero values in the array along a given axis. Otherwise, the total number of non-zero values in the array is returned."
    },
    {
        "link": "https://stackoverflow.com/questions/42916330/efficiently-count-zero-elements-in-numpy-array",
        "document": "I need to count the number of zero elements in arrays. I'm aware of the numpy.count_nonzero function, but there appears to be no analog for counting zero elements.\n\nMy arrays are not very large (typically less than 1E5 elements) but the operation is performed several millions of times.\n\nOf course I could use , but I wonder if there's a more efficient way to do it.\n\nHere's a MWE of how I do it currently:"
    },
    {
        "link": "https://analyticsvidhya.com/blog/2021/05/image-processing-using-numpy-with-practical-implementation-and-code",
        "document": "Image Processing Using Numpy: With Practical Implementation And Code\n\nNumPy also called Numerical Python is an amazing library open-source Python library for data manipulation and scientific computing. It is used in the domain of linear algebra, Fourier transforms, matrices, and the data science field. which is used. NumPy arrays are way faster than Python Lists.You must have known about Image processing Libraries such as OpenCV, Python Image Library(PIL), Scikit-Image, and many more. If you would like to know more about Image Processing Libraries in Python, then must check out this article.🙂\n\nFor more articles related to machine learning and Python 😊😊 , check out this Link\n\nYou must be wondering that NumPy is also used for Image Processing. The fundamental idea is that we know images are made up of NumPy ndarrays. So we can manipulate these arrays and play with images. I hope this blog will give you a broad overview of NumPy for Image Processing.😍\n\nThis article was published as a part of the Data Science Blogathon.\n\nType below commands in Anaconds Prompt and all the required will get installed.\n\nWe are using numpy, matplotlib, and Python Imaging Library (PIL) libraries for our further analysis.\n\nTo open an image, we are using the open() method from the PIL Image module. Similarly, we can use the matplotlib library to read and show images. It uses an image module for working with images. It offers two useful methods imread() and imshow()\n\nIn this analysis, we are using imshow() method to display the image.\n\nIn this section, we will see what is the dimension, shape, and data type of an image. To check the size of the image, we are using the Image.size property. Check the below code:\n\nTo save a ndarray as an image, we are using the Imag.save() method.\n\nWe are rotating an image from scratch without using the PIL library. If you would like to rotate an image by using the PIL, then use Image.rotate() method.\n\nAlgorithm: image(ndarray) -> transpose -> mirror image across y axis (middle column)\n\nCheck the below code to rotate an image by 90 degrees in a clockwise direction.\n\nCheck the below code to rotate an image by 90 degrees in an anticlockwise direction.\n\nConverting a color image to a negative image is very simple. You to perform only 3 steps for each pixel of the image\n• First, get the RGB values of the pixel\n• Finally, save the new RGB values in the pixel\n\nCheck the below code to convert an image to a negative image.\n\nTo add black padding around an image, use the below code:\n\nTo split the image into each RGB colors, you can use the below code:\n\nWe can reduce the color intensity depends on our needs. Check the below code for color reduction.\n\nWe can trim an image in Numpy using Array Slicing. Check the below code for trimming an image using python.\n\nWe can paste a slice of an image onto another image. Check the below code in Python for pasting a slice of the image.\n\nWe can also binarize an Image using Numpy. Check the below code to binarize an image.\n\nCheck the below code for flipping an image.\n\nAn Alternate way to Flip an Image\n\nCheck the below code for Flipping an Image:\n\nIf you want to blend two images, then you can do that too. Check the below code\n\nCheck the below code for masking an image.\n\nLet’s draw the histogram using a matplotlib hist() function. Check the below code to draw the Pixel Intensity Histogram\n\nSo in this article, we had a detailed discussion on Image Processing Using Numpy. Hope you learn something from this blog and it will help you in the future. Thanks for reading and your patience. Good luck!\n\nThe media shown in this article are not owned by Analytics Vidhya and is used at the Author’s discretion."
    },
    {
        "link": "https://neptune.ai/blog/image-processing-python",
        "document": "Images define the world, each image has its own story, it contains a lot of crucial information that can be useful in many ways. This information can be obtained with the help of the technique known as Image Processing.\n\nIt is the core part of computer vision which plays a crucial role in many real-world examples like robotics, self-driving cars, and object detection. Image processing allows us to transform and manipulate thousands of images at a time and extract useful insights from them. It has a wide range of applications in almost every field.\n\nPython is one of the widely used programming languages for this purpose. Its amazing libraries and tools help in achieving the task of image processing very efficiently.\n\nThis article will teach you about classical algorithms, techniques, and tools to process the image and get the desired output.\n\nLet’s get into it!\n\nAs the name says, image processing means processing the image and this may include many different techniques until we reach our goal.\n\nThe final output can be either in the form of an image or a corresponding feature of that image. This can be used for further analysis and decision making.\n\nBut what is an image?\n\nAn image can be represented as a 2D function F(x,y) where x and y are spatial coordinates. The amplitude of F at a particular value of x,y is known as the intensity of an image at that point. If x,y, and the amplitude value is finite then we call it a digital image. It is an array of pixels arranged in columns and rows. Pixels are the elements of an image that contain information about intensity and color. An image can also be represented in 3D where x,y, and z become spatial coordinates. Pixels are arranged in the form of a matrix. This is known as an RGB image.\n\nThere are various types of images:\n• RGB image: It contains three layers of 2D image, these layers are Red, Green, and Blue channels.\n• Grayscale image: These images contain shades of black and white and contain only a single channel.\n\nMorphological image processing tries to remove the imperfections from the binary images because binary regions produced by simple thresholding can be distorted by noise. It also helps in smoothing the image using opening and closing operations.\n\nMorphological operations can be extended to grayscale images. It consists of non-linear operations related to the structure of features of an image. It depends on the related ordering of pixels but on their numerical values. This technique analyzes an image using a small template known as structuring element which is placed on different possible locations in the image and is compared with the corresponding neighbourhood pixels. A structuring element is a small matrix with 0 and 1 values.\n\nLet’s see the two fundamental operations of morphological image processing, Dilation and Erosion:\n• dilation operation adds pixels to the boundaries of the object in an image\n• erosion operation removes the pixels from the object boundaries.\n\nThe number of pixels removed or added to the original image depends on the size of the structuring element.\n\nAt this point you may be thinking “what is a structuring element?” Let me explain:\n\nStructuring element is a matrix consisting of only 0’s and 1’s that can have any arbitrary shape and size. It is positioned at all possible locations in the image and it is compared with the corresponding neighbourhood of pixels.\n\nThe square structuring element ‘A’ fits in the object we want to select, the ‘B’ intersects the object and ‘C’ is out of the object.\n\nThe zero-one pattern defines the configuration of the structuring element. It’s according to the shape of the object we want to select. The center of the structuring element identifies the pixel being processed.\n\nGaussian blur which is also known as gaussian smoothing, is the result of blurring an image by a Gaussian function.\n\nIt is used to reduce image noise and reduce details. The visual effect of this blurring technique is similar to looking at an image through the translucent screen. It is sometimes used in computer vision for image enhancement at different scales or as a data augmentation technique in deep learning.\n\nThe basic gaussian function looks like:\n\nIn practice, it is best to take advantage of the Gaussian blur’s separable property by dividing the process into two passes. In the first pass, a one-dimensional kernel is used to blur the image in only the horizontal or vertical direction. In the second pass, the same one-dimensional kernel is used to blur in the remaining direction. The resulting effect is the same as convolving with a two-dimensional kernel in a single pass. Let’s see an example to understand what gaussian filters do to an image.\n\nIf we have a filter which is normally distributed, and when its applied to an image, the results look like this:\n\nYou can see that some of the edges have little less detail. The filter is giving more weight to the pixels at the center than the pixels away from the center. Gaussian filters are low-pass filters i.e. weakens the high frequencies. It is commonly used in edge detection.\n\nFourier transform breaks down an image into sine and cosine components.\n\nIt has multiple applications like image reconstruction, image compression, or image filtering.\n\nSince we are talking about images, we will take discrete fourier transform into consideration.\n\nLet’s consider a sinusoid, it comprises of three things:\n\nThe image in the frequency domain looks like this:\n\nThe formula for 2D discrete fourier transform is:\n\nIn the above formula, f(x,y) denotes the image.\n\nThe inverse fourier transform converts the transform back to image. The formula for 2D inverse discrete fourier transform is:\n\nEdge detection is an image processing technique for finding the boundaries of objects within images. It works by detecting discontinuities in brightness.\n\nThis could be very beneficial in extracting useful information from the image because most of the shape information is enclosed in the edges. Classic edge detection methods work by detecting discontinuities in the brightness.\n\nIt can rapidly react if some noise is detected in the image while detecting the variations of grey levels. Edges are defined as the local maxima of the gradient.\n\nThe most common edge detection algorithm is sobel edge detection algorithm. Sobel detection operator is made up of 3*3 convolutional kernels. A simple kernel Gx and a 90 degree rotated kernel Gy. Separate measurements are made by applying both the kernel separately to the image.\n\nResulting gradient can be calculated as:\n\nWe saw a Fourier transform but it is only limited to the frequency. Wavelets take both time and frequency into the consideration. This transform is apt for non-stationary signals.\n\nWe know that edges are one of the important parts of the image, while applying the traditional filters it’s been noticed that noise gets removed but image gets blurry. The wavelet transform is designed in such a way that we get good frequency resolution for low frequency components. Below is the 2D wavelet transform example:\n\nNeural Networks are multi-layered networks consisting of neurons or nodes. These neurons are the core processing units of the neural network. They are designed to act like human brains. They take in data, train themselves to recognize the patterns in the data and then predict the output.\n\nThe input layers receive the input, the output layer predicts the output and the hidden layers do most of the calculations. The number of hidden layers can be modified according to the requirements. There should be atleast one hidden layer in a neural network.\n\nThe basic working of the neural network is as follows:\n• Let’s consider an image, each pixel is fed as input to each neuron of the first layer, neurons of one layer are connected to neurons of the next layer through channels.\n• Each of these channels is assigned a numerical value known as weight.\n• The inputs are multiplied by the corresponding weights and this weighted sum is then fed as input to the hidden layers.\n• The output from the hidden layers is passed through an activation function which will determine whether the particular neuron will be activated or not.\n• The activated neurons transmits data to the next hidden layers. In this manner, data is propagated through the network, this is known as Forward Propagation.\n• In the output layer, the neuron with the highest value predicts the output. These outputs are the probability values.\n• The predicted output is compared with the actual output to obtain the error. This information is then transferred back through the network, the process is known as Backpropagation.\n• Based on this information, the weights are adjusted. This cycle of forward and backward propagation is done several times on multiple inputs until the network predicts the output correctly in most of the cases.\n• This ends the training process of the neural network. The time taken to train the neural network may get high in some cases.\n\nIn the below image, ai’s is the set of inputs, wi’s are the weights, z is the output and g is any activation function.\n\nHere are some guidelines to prepare data for image processing.\n• More data needs to be fed to the model to get the better results.\n• Image dataset should be of high quality to get more clear information, but to process them you may require deeper neural networks.\n• In many cases RGB images are converted to grayscale before feeding them into a neural network.\n\nA convolutional neural network, ConvNets in short has three layers:\n• Convolutional Layer (CONV): They are the core building block of CNN, it is responsible for performing convolution operation.The element involved in carrying out the convolution operation in this layer is called the Kernel/Filter (matrix). The kernel makes horizontal and vertical shifts based on the stride rate until the full image is traversed.\n• Pooling Layer (POOL): This layer is responsible for dimensionality reduction. It helps to decrease the computational power required to process the data. There are two types of Pooling: Max Pooling and Average Pooling. Max pooling returns the maximum value from the area covered by the kernel on the image. Average pooling returns the average of all the values in the part of the image covered by the kernel.\n• Fully Connected Layer (FC): The fully connected layer (FC) operates on a flattened input where each input is connected to all neurons. If present, FC layers are usually found towards the end of CNN architectures.\n\nCNN is mainly used in extracting features from the image with help of its layers. CNNs are widely used in image classification where each input image is passed through the series of layers to get a probabilistic value between 0 and 1.\n\nGenerative models use an unsupervised learning approach (there are images but there are no labels provided).\n\nGANs are composed of two models Generator and Discriminator. Generator learns to make fake images that look realistic so as to fool the discriminator and Discriminator learns to distinguish fake from real images (it tries not to get fooled).\n\nGenerator is not allowed to see the real images, so it may produce poor results in the starting phase while the discriminator is allowed to look at real images but they are jumbled with the fake ones produced by the generator which it has to classify as real or fake.\n\nSome noise is fed as input to the generator so that it’s able to produce different examples every single time and not the same type image. Based on the scores predicted by the discriminator, the generator tries to improve its results, after a certain point of time, the generator will be able to produce images that will be harder to distinguish, at that point of time, the user gets satisfied with its results. Discriminator also improves itself as it gets more and more realistic images at each round from the generator.\n\nPopular types of GANs are Deep Convolutional GANs(DCGANs), Conditional GANs(cGANs), StyleGANs, CycleGAN, DiscoGAN, GauGAN and so on.\n\nGANs are great for image generation and manipulation. Some applications of GANs include : Face Aging, Photo Blending, Super Resolution, Photo Inpainting, Clothing Translation.\n\nIt stands for Open Source Computer Vision Library. This library consists of around 2000+ optimised algorithms that are useful for computer vision and machine learning. There are several ways you can use opencv in image processing, a few are listed below:\n• Converting images from one color space to another i.e. like between BGR and HSV, BGR and gray etc.\n• Performing thresholding on images, like, simple thresholding, adaptive thresholding etc.\n• Smoothing of images, like, applying custom filters to images and blurring of images.\n\nRefer to this link for more details.\n\nIt is an open-source library used for image preprocessing. It makes use of machine learning with built-in functions and can perform complex operations on images with just a few functions.\n\nIt works with numpy arrays and is a fairly simple library even for those who are new to python. Some operations that can be done using scikit image are :\n• To implement thresholding operations use try_all_threshold() method on the image. It will use seven global thresholding algorithms. This is in the filters module.\n• To implement edge detection use sobel() method in the filters module. This method requires a 2D grayscale image as an input, so we need to convert the image to grayscale.\n• To implement gaussian smoothing use gaussian() method in the filters module.\n• To apply histogram equalization, use exposure module, to apply normal histogram equalization to the original image, use equalize_hist() method and to apply adaptive equalization, use equalize_adapthist() method.\n• To rotate the image use rotate() function under the transform module.\n• To rescale the image use rescale() function from the transform module.\n• To apply morphological operations use binary_erosion() and binary_dilation() function under the morphology module.\n\nPIL stands for Python Image Library and Pillow is the friendly PIL fork by Alex Clark and Contributors. It’s one of the powerful libraries. It supports a wide range of image formats like PPM, JPEG, TIFF, GIF, PNG, and BMP.\n\nIt can help you perform several operations on images like rotating, resizing, cropping, grayscaling etc. Let’s go through some of those operations\n\nTo carry out manipulation operations there is a module in this library called Image.\n• To load an image use the open() method.\n• To display an image use show() method.\n• To know the file format use format attribute\n• To know the size of the image use size attribute\n• To know about the pixel format use mode attribute.\n• To save the image file after desired processing, use save() method. Pillow saves the image file in png format.\n• To resize the image use resize() method that takes two arguments as width and height.\n• To crop the image, use crop() method that takes one argument as a box tuple that defines position and size of the cropped region.\n• To rotate the image use rotate() method that takes one argument as an integer or float number representing the degree of rotation.\n• To flip the image use transform() method that take one argument among the following: Image.FLIP_LEFT_RIGHT, Image.FLIP_TOP_BOTTOM, Image.ROTATE_90, Image.ROTATE_180, Image.ROTATE_270.\n\nWith this library you can also perform simple image techniques, such as flipping images, extracting features, and analyzing them.\n\nImages can be represented by numpy multi-dimensional arrays and so their type is NdArrays. A color image is a numpy array with 3 dimensions. By slicing the multi-dimensional array the RGB channels can be separated.\n\nBelow are some of the operations that can be performed using NumPy on the image (image is loaded in a variable named test_img using imread).\n• To flip the image in a vertical direction, use np.flipud(test_img).\n• To flip the image in a horizontal direction, use np.fliplr(test_img).\n• To reverse the image, use test_img[::-1] (the image after storing it as the numpy array is named as <img_name>).\n• To add filter to the image you can do this:\n\nExample: np.where(test_img > 150, 255, 0), this says that in this picture if you find anything with 150, then replace it with 255, else 0.\n• You can also display the RGB channels separately. It can be done using this code snippet:\n\nTo obtain a red channel, do test_img[:,:,0], to obtain a green channel, do test_img[:,:,1] and to obtain a blue channel, do test_img[:,:,2].\n\nIt is a computer vision and image processing library and has more than 100 functions. Many of its algorithms are implemented in C++. Mahotas is an independent module in itself i.e. it has minimal dependencies.\n\nCurrently, it depends only on C++ compilers for numerical computations, there is no need for NumPy module, the compiler does all its work.\n\nHere are names of some of the remarkable algorithms available in Mahotas:\n\nLet’s look at some of the operations that could be done using Mahotas:\n• To read an image use imread() method.\n• To calculate the mean of the image use the mean() method.\n• Eccentricity of an image measures the shortest length of the paths from a given vertex v to reach any other vertex w of a connected graph. To find the eccentricity of an image, use the eccentricity() method under the features module.\n• For dilation and erosion on the image use, dilate() and erode() method under morph module.\n• To find the local maxima of the image use locmax() method.\n\nIn this article, I briefly explained about classical image processing that can be done using Morphological filtering, Gaussian filter, Fourier transform and Wavelet transform.\n\nAll these can be performed using various image processing libraries like OpenCV, Mahotas, PIL, scikit-learn.\n\nI also discussed popular neural networks like CNN and GANs that are used for computer vision.\n\nDeep learning is changing the world with its broadway terminologies and advances in the field of image processing. Researchers are coming up with better techniques to fine tune the whole image processing field, so the learning does not stop here. Keep advancing."
    },
    {
        "link": "https://stackoverflow.com/questions/62616164/quick-pixel-manipulation-with-pillow-and-or-numpy",
        "document": "I'm trying to improve the speed of my image manipulation as it's been too slow for actual use.\n\nWhat I need to do is apply a complex transformation on the colour of every pixel on an image. The manipulation is basically apply a vector transform like or in layman's terms, it's a multiplication of Red and Green values by a constant, a different multiplication for Blue and keep Alpha. But I also need to manipulate it differently if the RGB colour falls under some specific colours, in those cases they must follow a dictionary/transformation table where again keeping alpha.\n\nThe algorithm would be:\n\nIt's simple but speed has been sub-optimal. I believe there's some way using numpy vectors, but I could not find how.\n• I don't care about the original buffer/image (manipulation can be in place)\n• I can use wxPython, Pillow and NumPy\n• Order or dimension of the array is not important as long as the buffer keeps the length\n\nThe buffer is obtained from a wxPython Bitmap and and are transformation tables, the end result will become a wxPython Bitmap too. They're obtained like these:\n\nPillow with and (fastest I achieved, more than twice times faster than others)\n\nI also tried working with but then I could not get it to work. With it worked but the performance was terrible. Other tries with numpy I could not access the RGB together, only as separated bands."
    },
    {
        "link": "https://reintech.io/blog/numpy-for-image-processing-techniques-best-practices",
        "document": "NumPy, short for Numerical Python, is a foundational package for scientific computing in Python. It provides a high-performance multidimensional array object and tools for working with these arrays. When it comes to image processing, NumPy's arrays act as the perfect container for pixel data and its vast library of functions enables developers to perform complex image manipulations efficiently.\n\nTo begin using NumPy for image processing, you need to install the package (if it's not already installed) using pip:\n\nOnce installed, you can import NumPy and other necessary libraries:\n\nUsing the Python Imaging Library (PIL), you can load an image into a NumPy array:\n\nTo display the image from the array, simply use:\n\nTransformations such as rotations, flips, and rescaling are straightforward with NumPy:\n\nConverting images between different color spaces (e.g., RGB to grayscale) involves manipulating the color channels:\n\nFilters can be applied to perform blurring, sharpening, edge detection, etc. For example, a simple box blur can be implemented as follows:\n\nBest Practices in Image Processing with NumPy\n\nEmploying proper techniques and best practices ensures efficient and effective image processing:\n• Vectorization Over Loops: Use NumPy's vectorized operations instead of loops to leverage optimized C code under the hood.\n• Data Type Awareness: Be mindful of the data types used (e.g., uint8 for image arrays) to avoid unnecessary type conversions or overflows.\n• Memory Management: Large images consume significant memory. Use functions like wisely and delete arrays that are no longer needed.\n• Error Handling: Implement try-except blocks to handle exceptions that may occur during file I/O operations or data manipulations.\n\nIf your project requires advanced or extensive use of NumPy for image processing tasks, you might want to consider seeking expert assistance. For instance, organizations can hire data science numpy specialists who are adept at leveraging NumPy's capabilities."
    },
    {
        "link": "https://geeksforgeeks.org/image-processing-with-scipy-and-numpy-in-python",
        "document": "In this tutorial, we will discuss Image Processing in Python using the core scientific modules like NumPy and SciPy. The images are made up of NumPy ndarrays so we can process and manipulate images and SciPy provides the submodule scipy.ndimage that provides functions that can operate on the NumPy arrays.\n\nWe will discuss how to open and write to images, and will also cover different manipulation and filtering techniques. So before getting started let’s see how to install both modules.\n\nNumpy: To install numpy type the below command in the terminal.\n\nSciPy: You can use the above command to install SciPy as well.\n\nThe misc package of SciPy comes with some preloaded images. We will use those images to learn about image processing. One such image is provided by the face() function. The face() function will get a colored image of a raccoon face.\n\nExample: Creating NumPy array from the image\n\nHere we will read the image using the imread() function.\n\nA RAW file is a file containing minimally processed data from an image sensor. We can create this file using the tofile() method of the scipy package.\n\nThis will create a .raw file in our current working directory.\n\nFor opening .raw file we will be needing the NumPy module that will use the fromfile() method. This function is an efficient way of reading binary data with known data type as well as parsing simply formatted text.\n\nExample: Reading from RAW file using NumPy\n\nWe can use the max() and min() functions to get the maximum and minimum along the given axis. And to find the mean we can use the mean() function.\n\nExample: Getting min, max, and mean values\n\nAs we know that images are represented by numbers in a matrix, so changing the value of the matrix will result in changing the original image. Let’s see how to use this idea for cropping the image.\n\nWe can use the flipud() function of the numpy module to flip that image. This function flips the array(entries in each column) in up-down direction, shape preserved.\n\nTo rotate the images we can use the ndarray.rotate() function. This function rotates the image at a specific angle.\n\nExample: Rotate Image using SciPy and NumPy\n\nIn simpler terms image filtering is a process for enhancing or modifying an image where we can increase sharpness, enhance edges, or blurs the image. In Image filtering, some algorithm is applied to the pixel value of the given image and that algorithm determines the value of the output image. Let’s see some image filtering operations that can be done using NumPy and SciPy.\n\nBlurring an image is a process of reducing the level of noise in the image. For this, we can either use a Gaussian filter or a unicorn filter.\n\nExample: Blur Images using SciPy and NumPy\n\nSharpening refers to increase contrast b/w light and dark regions and make the image more defined and brings out image features. There are three main reasons to sharpen your image: to overcome blurring introduced by camera equipment, to draw attention to certain areas, and to increase legibility. If blurry text is present in the image it becomes easy to read.\n\nExample: Sharpening images using NumPy and SciPy\n\nDenoising of an image refers to the process of reconstruction of a signal from noisy images. Denoising is done to remove unwanted noise from image to analyze it in better form. At first, let’s create a noisy image –\n\nTo smooth the edges and the noise we use the Gaussian filter.\n\nWe can also preserve the edges using the median filter.\n\nThe process of image detection involves detecting edges in the image. It works by detecting discontinuities in the brightness. For high-intensity variations, we can use Sobel, a gradient operator-\n\nExample: Edge detection using SciPy and NumPy"
    }
]