[
    {
        "link": "https://cplusplus.com/reference/string/string/substr",
        "document": "main () { std::string str= \"We think in generalities, but we live in details.\" ; std::string str2 = str.substr (3,5); std::size_t pos = str.find( ); std::string str3 = str.substr (pos); // get from \"live\" to the end std::cout << str2 << << str3 << ; 0; }"
    },
    {
        "link": "https://geeksforgeeks.org/substring-in-cpp",
        "document": "The substring function is used for handling string operations like strcat(), append(), etc. It generates a new string with its value initialized to a copy of a sub-string of this object. In C++, the header file which is required for std::substr(), string functions is <string>.\n\nThe substring function takes two values pos and len as an argument and returns a newly constructed string object with its value initialized to a copy of a sub-string of this object. Copying of string starts from pos and is done till pos+len means [pos, pos+len).\n• pos: Index of the first character to be copied.\n• size_t: It is an unsigned integral type.\n• s.substr(*s.begin()-s[0],3) => hel (*s.begin() is ‘h’ then ‘h’-s[0]=> ‘h’-‘h’=0 means substr(0,3) —– three letter from zeroth index\n• s.substr(5,1) => ‘ ‘ (prints blank space , that is at 5th index)\n• s.substr(2,0) => (not output) (selects zero letters from second index)\n• None The index of the first character is 0 (not 1).\n• pos is equal to the string length, the function returns an empty string.\n• pos is greater than the string length, it throws out_of_range. If this happens, there are no changes in the string.\n• len is greater than the size of a string, then returned sub-string is [pos, size())\n• len is not passed as a parameter, then returned sub-string is [pos, size()).\n• None Print all Sub-Strings of a given String\n• None Sum of all Substrings of a string representing a number\n• None Print the maximum value of all substrings of a string representing a number\n• None Print the minimum value of all substrings of a string representing a number\n\nIn this, a string and a character are given and you have to print the sub-string followed by the given character. \n\nExtract everything after the “:” in the string “dog:cat“.\n\nHow to Get a SubString Before a Character?\n\nIn this, a string and a character are given and you have to print the sub-string followed by the given character.\n\nHow to Print all Sub-Strings of a Given String?\n\nGiven a string as an input. We need to write a program that will print all non-empty substrings of that given string.\n\nPrint Sum of all Substrings of a String Representing a Number\n\nGiven an integer represented as a string, we need to get the sum of all possible substrings of this string.\n\nPrint the Maximum Value of all Substrings of a String Representing a Number\n\nGiven an integer represented as a string, we need to get the maximum of all possible substrings of the given string which represents a number.\n\nExplanation: All substrings are { 8, 82, 823, 2, 23, 3 } and the maximum value substring is 823.\n\nPrint the Minimum Value of all Substrings of a String Representing a Number\n\nGiven an integer represented as a string, we need to get the minimum of all possible substrings of the given string which represents a number.\n• Text Searching: Substrings are used to search for words or phrases in larger bodies of text. This is commonly used in search engines, where a user might type in a phrase or keyword and the engine will search for any matches containing that substring.\n• Text Parsing: Substrings are used in text parsing algorithms to break down larger strings into smaller chunks. For example, a parser might be used to extract individual words from a sentence and store them in a data structure.\n• Text Manipulation: Substrings are used in text manipulation applications to find and replace certain words or phrases in larger bodies of text. This can be used to perform search and replace tasks, or to update information in a document.\n• Natural Language Processing: Substrings are used in natural language processing algorithms to identify words and phrases. This is used in applications such as speech recognition, where the algorithm must identify words spoken by a user.\n• Pattern Recognition: Substrings are used in pattern recognition algorithms to identify patterns in data. This can be used to identify trends in financial data, or to detect anomalies in images.\n• Password Security: Substrings are used to verify passwords. This is done by comparing the entered password against a stored substring of the original password. If the two match, then the password is verified. This technique is used in many applications to increase security."
    },
    {
        "link": "https://stackoverflow.com/questions/21012136/c-substring-string-manipulation",
        "document": "I've been building a shell for a while now, and I decided to implement the echo function. However, no matter how much I tried, it returned nothing (literally, nothing. Just blank.). I looked through a ton of different references, but most strings did not include a space, mine typically will.\n\nEdit: The globals, are, indeed, pointless, and were put there to make it easier to copy/paste directly into the shell I was writing, which relied heavily on them."
    },
    {
        "link": "https://udacity.com/blog/2021/05/our-guide-to-cpp-substrings.html",
        "document": "Text processing and manipulation are key to a variety of C++ projects. However, you may not always want to use an entire string of text that’s available through either previous definition or user input. You might instead be looking for a specific keyword or would like to store only a section of a user’s answer.\n\nIn this article, we’ll explore how a substring function can help solve issues that concern only a section of a whole string, before going over some C++ projects in which you might find substrings.\n\nIf you’re an aspiring C++ developer, you probably have an understanding of the string as a one-dimensional sequence of characters. Strings are commonly used to manipulate text in a C++ program. Text can also be manipulated through methods like creating arrays of characters to replace strings. Though the output we obtain from these two methods might look the same, the way they gain input and process it is different.\n\nFor example, we may define a character array by specifying what we expect to be the maximum length of the user’s input, before outputting it:\n\nOn the other hand, if we were to use a string:\n\nIf we input “Wednesday” in either case, our output is:\n\nWhile there are many ways to use and declare strings and char arrays in C++, a key difference from the above examples is that we need to declare the char array length, whereas we don’t need to do so for the string.\n\nBoth options are compatible with substrings; today, however, we’ll focus on the string method.\n\nWhat Is a Substring in C++?\n\nstd::substr() is a C++ method that’s used to manipulate text to store a specific part of string. In short, it “extracts” a string from within a string. For instance, “Wednesday” would be the substring of “Today is Wednesday.”\n\nAs we’ll see in the example below, the substring is still declared as a string. What makes it a substring is the function that handles that string:\n\nThe syntax for using the substring function requires two numerical parameters:\n\n“Position” here refers to the point at which the substring starts, while length specifies how many letters from the defined position the substring should include. This is where it’s helpful to think about the string as a type of character array, especially since arrays start with 0, which is how the position of a character is calculated in a string.\n\nFor example, we could try to get a substring and mark the first position as “1” instead of “0,” like so:\n\nIn that case, the output would be:\n\nHowever, that’s not the case for the length parameter, where the count starts from 1. The letter you determine as the position parameter is the first letter in the length you assign.\n\nBoth conditions can include operatives to shift the position desired. For example:\n\nWe’ll use this knowledge below.\n\nThe C++ Substring in Action\n\nSo when should you use the substring function in C++?\n\n\n\nSay you’re grading a student’s test and they have submitted a massive text file including the test questions and their responses as “true” or “false,” and explanatory paragraphs supporting why they believe their answers to be correct. A small section of that file would look like this:\n\nHaving to deal with this much information can get overwhelming. However, you need to get through your task quickly and simply want to compare the true/false answers to the answer sheet. In the brief section you looked over, you noticed that each answer that really interests you is preceded by a hyphen.\n\n\n\nAccordingly, you can write a program to print out each word that follows a hyphen:\n\nHelpfully, the program extracts only the information we need from our pile of text, by displaying True or False.\n\nNote that the substring has to have its starting position shifted by 2 characters from the end of the preceding sentence. Otherwise, it would also include the hyphen and the space. The method works on a single sentence; however, it would also work for a whole file in C++.\n\nThe substring length was determined by the longest word in this case: “false.” “True” contains 4 letters; however, the 5th character would simply be a period, which does not impact readability and allows us to keep our code simple.\n\nYou can also use the substring function to determine whether a string actually contains a specific substring you’re looking for.\n\nFor example, if you’re suspicious that a friend is sharing a secret code or a specific keyword with someone who is not supposed to see it, you can look for it in one of their cryptic messages by having your program check if it contains the word.\n\n\n\nHere’s how you would go about doing so:\n\nBy using simple if-else statements or other forms of flow control, you can determine the outcome of what happens when the substring is detected. In real-life projects, this can be replaced with an alert.\n\nAs you may imagine, on a larger scale the substring technique can play a crucial role in finding correct documentation.\n\nThe substring function, while simple, has great potential when combined with other functions or C++ capabilities. Interested in learning how to manipulate files in C++? What about managing static and dynamic memory?\n\nLook no further than our C++ Nanodegree program, which gives you the opportunity to truly master C++ by working through five real-world projects.\n\n\n\nEnroll in our C++ Nanodegree program today!"
    },
    {
        "link": "https://geeksforgeeks.org/cpp-string-functions",
        "document": "A string is referred to as an array of characters. In C++, a stream/sequence of characters is stored in a char array. C++ includes the std::string class that is used to represent strings. It is one of the most fundamental datatypes in C++ and it comes with a huge set of inbuilt functions. In this article, will look at the functions of string computations.\n\nCommonly Used String Functions in C++\n\nThe std::string class contains functions to provide some common string operations. The below table contains some of the most commonly used functions in C++:\n\nWe can find the length of the string (number of characters) using either length() or size() function of the std::string class.\n• This function does not take any parameter.\n• This function returns the number of characters in the string object.\n\nIt will return the length of the string text which is 13.\n\nGenerally, we can access the character of a string using the [] array subscript operator and indexing. But std::string also has a function named at() which can be used to access the characters of the string.\n• index: It represents the position of the character in the string.\n• This function returns the character present at the index.\n\nThe std::cout will print K on the console as it is the character present at index 3.\n\nWe can concatenate string in C++ using two methods:\n\nThe + operator is overloaded in the std::string class to perform string concatenation.\n\n+ operator is used to concatenate two strings. The string fullName will be \"GeeksforGeeks\".\n\nThe append() function is another member function to concatenate two strings.\n• string2: This function takes the string to be appended as a parameter. It can be both C or C++ Style string.\n\nThe append() function adds one string to the end of another.\n\nJust like the concatenation, we can do the string comparison using two methods:\n\nThe equality operator can be used to compare the two strings as it is overloaded for this operation in the std::string class.\n\nThis will return true if both the strings are equal, otherwise returns false.\n\nHere, \"Strings are not equal\" will be printed as the == operator will return false.\n\nThe compare() function is a member function of std::string class which can be used to compare two strings.\n• str2: It is the string to be compared. It can be both C or C++ style string.\n• If the strings are equal, return zero.\n• If str1 is greater than str2, return value >0\n• If str2 is greater than str1, return value <0\n\nThe result will contain a value less than zero as str2 is greater than str1.\n\nWe can also compare the substring of str2 using the compare function():\n• position: position of the first character substring.\n\nWe can use the find() function of the std::string class to check whether a given character or a substring is present in the string or a part of string.\n• var: It can be a C style string, C++ style string, or a character that is to be searched in the string.\n• It returns the pointer to the first occurrence of the character or a substring in the string.\n\nThe position variable will contain 4 which is the start of the first occurrence of the string \"Programming\" in string text.\n\nWe can use the substr() function to generate a part of the string as a new string object. It is a member function of the std::string class.\n\nSyntax of substr() in C\n• start: Starting position of the substring to be generated.\n• end: Ending of the substring to be generated.\n\nIn the above example. the sub string will contain the \"World\".\n\nThe following function allows us to modify the current string.\n\nThe insert() function not only allows us to add a string but also allows us to add it at the specified position. It is also a member function of the std::string class.\n• index: position of where to insert the new string\n\nThe replace() function replaces the part of the string with the given other string. Unlike insert, the characters in the part where the new string is to be inserted are removed.\n• index: Index of where to start replacing the new string.\n• size: length of the part of the string that is to be replaced.\n• str2: new string that is to be inserted.\n\nThe erase() function is a member function of std::string class that is used to remove a character or a part of the string.\n\nThe c_str() function is a member function that is used to convert the C++ style string i.e. std::string objects to C style string i.e. array of characters.\n• This function does not take any parameter.\n• Pointer to the equivalent array of characters.\n\nExample of String Functions in C++\n\nThe below code demonstrate the use of the above specified string functions:"
    },
    {
        "link": "https://geeksforgeeks.org/substring-in-cpp",
        "document": "The substring function is used for handling string operations like strcat(), append(), etc. It generates a new string with its value initialized to a copy of a sub-string of this object. In C++, the header file which is required for std::substr(), string functions is <string>.\n\nThe substring function takes two values pos and len as an argument and returns a newly constructed string object with its value initialized to a copy of a sub-string of this object. Copying of string starts from pos and is done till pos+len means [pos, pos+len).\n• pos: Index of the first character to be copied.\n• size_t: It is an unsigned integral type.\n• s.substr(*s.begin()-s[0],3) => hel (*s.begin() is ‘h’ then ‘h’-s[0]=> ‘h’-‘h’=0 means substr(0,3) —– three letter from zeroth index\n• s.substr(5,1) => ‘ ‘ (prints blank space , that is at 5th index)\n• s.substr(2,0) => (not output) (selects zero letters from second index)\n• None The index of the first character is 0 (not 1).\n• pos is equal to the string length, the function returns an empty string.\n• pos is greater than the string length, it throws out_of_range. If this happens, there are no changes in the string.\n• len is greater than the size of a string, then returned sub-string is [pos, size())\n• len is not passed as a parameter, then returned sub-string is [pos, size()).\n• None Print all Sub-Strings of a given String\n• None Sum of all Substrings of a string representing a number\n• None Print the maximum value of all substrings of a string representing a number\n• None Print the minimum value of all substrings of a string representing a number\n\nIn this, a string and a character are given and you have to print the sub-string followed by the given character. \n\nExtract everything after the “:” in the string “dog:cat“.\n\nHow to Get a SubString Before a Character?\n\nIn this, a string and a character are given and you have to print the sub-string followed by the given character.\n\nHow to Print all Sub-Strings of a Given String?\n\nGiven a string as an input. We need to write a program that will print all non-empty substrings of that given string.\n\nPrint Sum of all Substrings of a String Representing a Number\n\nGiven an integer represented as a string, we need to get the sum of all possible substrings of this string.\n\nPrint the Maximum Value of all Substrings of a String Representing a Number\n\nGiven an integer represented as a string, we need to get the maximum of all possible substrings of the given string which represents a number.\n\nExplanation: All substrings are { 8, 82, 823, 2, 23, 3 } and the maximum value substring is 823.\n\nPrint the Minimum Value of all Substrings of a String Representing a Number\n\nGiven an integer represented as a string, we need to get the minimum of all possible substrings of the given string which represents a number.\n• Text Searching: Substrings are used to search for words or phrases in larger bodies of text. This is commonly used in search engines, where a user might type in a phrase or keyword and the engine will search for any matches containing that substring.\n• Text Parsing: Substrings are used in text parsing algorithms to break down larger strings into smaller chunks. For example, a parser might be used to extract individual words from a sentence and store them in a data structure.\n• Text Manipulation: Substrings are used in text manipulation applications to find and replace certain words or phrases in larger bodies of text. This can be used to perform search and replace tasks, or to update information in a document.\n• Natural Language Processing: Substrings are used in natural language processing algorithms to identify words and phrases. This is used in applications such as speech recognition, where the algorithm must identify words spoken by a user.\n• Pattern Recognition: Substrings are used in pattern recognition algorithms to identify patterns in data. This can be used to identify trends in financial data, or to detect anomalies in images.\n• Password Security: Substrings are used to verify passwords. This is done by comparing the entered password against a stored substring of the original password. If the two match, then the password is verified. This technique is used in many applications to increase security."
    },
    {
        "link": "https://stackoverflow.com/questions/42921998/c-efficiently-get-substring-of-string-with-index",
        "document": "Provided you actually need to create copies of the substrings (which string::substr does) I believe you cannot solve this issue with less than calls to the memory manager and copying steps total, where . This is because the standard requires each string to manage its own memory. Sharing (such as with the copy-on-write idiom) is not permitted, thus each substring will copy its contents from the original.\n\nIf a copy is not required and your compiler already supplies std::string_view you could try using that. Unlike , a only holds a pointer to a character and a size (which is exactly what you are creating your substrings from anyways). The required pointer can be acquired using string::data.\n\nHowever, when using you have to make sure the original string remains in scope for as long as the container holding the substrings and that it is not altered after the substrings have been created, as this may invalidate the pointers held by the s. These can be adressed by wrapping everything in a class together like this:\n\nWhere is any container of your choice."
    },
    {
        "link": "https://stackoverflow.com/questions/32618470/c-substring-from-string",
        "document": "Have to walk this through to explain what's going wrong properly so bear with me.\n\nAllocated a temporary array of 17 characters (16 letters plus a the terminating null), placed the characters \"hi, I'm a string\" in it, and ended it off with a null. Temporary means what it sound like. When the function ends, is gone. Anything pointing at is now pointing at garbage. It may shamble on for a while and give some semblance of life before it is reused and overwritten, but really it's a zombie and can only be trusted to kill your program and eat its brains.\n\nCreates myStr, another temporary variable. Called the constructor with the array of characters. So let's take a look at the constructor:\n\nTake a pointer to a character, in this case it will have a pointer to the first element of main's . This pointer will be assigned to MyString's . There is no copying of the \"hi, I'm a string\". Both mains's and MyString's point to the same place in memory. This is a dangerous condition because alterations to one will affect the other. If one goes away, so goes the other. If one is overwritten, so too is the other.\n\nWhat the constructor should do is:\n\nA few caveats: This is really really easy to break. Pass in a str2create that never ends, for example, and the strlen will go spinning off into unassigned memory and the results will be unpredictable.\n\nFor now we'll assume no one is being particularly malicious and will only enter good values, but this has been shown to be really bad assumption in the real world.\n\nThis also forces a requirement for a destructor to release the memory used by\n\nIt also adds a requirement for copy and move constructors and copy and move assignment operators to avoid violating the Rule of Three/Five.\n\nand point at the same place in memory, but this isn't bad yet. Because this program is a trivial one, it never becomes a problem. and both expire at the same point and neither are modified again.\n\nWill print correctly because nothing has changed in or .\n\nRequires us to look at MyString::Substr to see what happens.\n\nCreates a temporary character array of size length. First off, this is non-standard C++. It won't compile under a lot of compilers, do just don't do this in the first place. Second, it's temporary. When the function ends, this value is garbage. Don't take any pointers to because it won't be around long enough to use them. Third, no space was reserved for the terminating null. This string will be a buffer overrun waiting to happen.\n\nOK that's pretty good. Copy from source to destination. What it is missing is the null termination so users of the char array knows when it ends.\n\nAnd that buffer overrun waiting to happen? Just happened. Whups. You got unlucky because it looks like it worked rather than crashing and letting you know that it didn't. Must have been a null in memory at exactly the right place.\n\nAnd this created a new MyString that points to . Right before hit the end of the function and died. This new MyString points to garbage almost instantly.\n\nWhat Substr should do:\n\nBack in OP's code, with the return to the main function that which was starts to be reused and overwritten.\n\nPrints and already we can see some of it has been reused and destroyed.\n\nMore death, more destruction, less string.\n\nThings to not do in the future:\n\nSharing pointers where data should have been copied."
    },
    {
        "link": "https://simplilearn.com/tutorials/cpp-tutorial/cpp-substring",
        "document": ""
    },
    {
        "link": "https://medium.com/@ryan_forrester_/c-string-substrings-practical-guide-7412b45b3a75",
        "document": "In C++, working with substrings is a common task when manipulating text.\n\nWhether you’re parsing input, formatting output, or processing data, knowing how to effectively extract and manipulate parts of strings is crucial.\n\nLet’s dive into the various methods and techniques for working with substrings in C++.\n\nThe most straightforward way to extract a substring in C++ is using the `substr()` function. Here’s a basic example:\n\nThe `substr()` function takes two parameters:\n\n1. The starting index (0-based)\n\n2. The length of the substring (optional)\n\nIf you omit the length parameter, `substr()` will return everything from the starting index to the end of the string:\n\nWhat happens if you try to extract a substring that’s out of range? Let’s see:\n\nThis will output an error message like:\n\nAlways be mindful of string lengths when working with substrings to avoid these exceptions.\n\nOften, you’ll need to find a substring within a larger string. The `find()` function is perfect for this:\n\nThe `find()` function returns `std::string::npos` if the substring isn’t found. You can also specify a starting position for the search:\n\nLet’s look at a more complex example where we extract all words from a string:\n\nThis example uses a stringstream to split the string on commas, but you could modify it to split on any delimiter.\n\nSometimes you need to find a substring regardless of case. Here’s a function to do that:\n\nThis function uses the `std::search` algorithm with a custom comparison function to perform a case-insensitive search.\n\nReplacing substrings is another common operation. Here’s how you can do it:\n\nThis function replaces all occurrences of a substring, not just the first one.\n\nLet’s look at a practical application of substring operations: parsing CSV (Comma-Separated Values) data.\n\nThis example demonstrates how to use substring operations to parse structured data, a common task in many applications.\n\nWhen working with large strings or performing many substring operations, performance can become a concern. Here are a few tips:\n\n`std::string_view` provides a lightweight, non-owning reference to a string, which can be more efficient for passing substrings around.\n\n3. Consider using `std::string::substr` for small substrings and manual pointer arithmetic for large ones:\n\nThe manual method can be faster for very large strings, but be careful — it’s easy to introduce bugs with manual pointer manipulation.\n\nSubstring operations are a fundamental part of string manipulation in C++. From basic extraction with `substr()` to more complex operations like splitting and replacing, understanding these techniques will make your text processing tasks much easier.\n\nRemember to always check your string bounds to avoid out-of-range errors, and consider performance implications when working with very large strings or performing many operations."
    }
]