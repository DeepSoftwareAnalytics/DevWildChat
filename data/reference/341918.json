[
    {
        "link": "https://answers.microsoft.com/en-us/windows/forum/all/trying-to-use-batch-file-to-create-shortcut-on/d80e9c02-4701-4c5f-aa87-63cf0dab8dab",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/30028709/how-do-i-create-a-shortcut-via-command-line-in-windows",
        "document": "I want my .bat script (test.bat) to create a shortcut to itself so that I can copy it to my windows 8 Startup folder.\n\nI have written this line of code to copy the file but I haven't yet found a way to create the said shortcut, as you can see it only copies the script.\n\nCan you help me out?"
    },
    {
        "link": "https://community.spiceworks.com/t/creating-desktop-shortcut-using-batch-file/351925",
        "document": "I want to get away from mapping drives on users computers and create a shortcut on their desktop using a batch file. I have users personal folders on a server that I want to link to. For example, \\servername\\users\\username. I want to create a shortcut on their desktop that only links to that specific users folder on the server. Is there a command that creates a shortcut?\n\nYou could also add the shortcut to the Favorites section in Windows Explorer.\n\nSee if that works. I found it online, but haven’t tried it.\n\nHave you considered using group policy preferences? This should be very straight forward utilizing GPP.\n\nUnfortunately there is no way to create shortcut with command line, thus batch script. You have several options:\n• Use third party tool or shortcut.exe from old Windows support tools\n• Create a predefined shortcut and copy it to user’s desktop with logon scripts\n• Use GPO preferences to create shortcut . This method is recommended.\n\nGPP is much easier and less cluttered than any vbs script. Times have changed guys…scripts have their place for sure but not for this sort of thing. IMHO.\n\nHave you considered using group policy preferences? This should be very straight forward utilizing GPP. I have considered that, however our corporate office in another state handles everything GP related on an enterprise level."
    },
    {
        "link": "https://superuser.com/questions/455364/how-to-create-a-shortcut-using-a-batch-script",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://learn.microsoft.com/en-us/troubleshoot/windows-client/admin-development/create-desktop-shortcut-with-wsh",
        "document": "How to create a desktop shortcut with the Windows Script Host\n\nThis article describes how to create desktop shortcuts by using the Microsoft Windows Script Host (WSH) from within Visual FoxPro.\n\nThe WSH is a tool that allows you to run Microsoft Visual Basic Scripting Edition and JScript natively within the base Operating System, either on Windows 95 or Windows NT 4.0. It also includes several COM automation methods that allow you to do several tasks easily through the Windows Script Host Object Model. The Microsoft Windows Script Host is integrated into Windows 98, Windows 2000, and later versions of the Windows operating system. It is available for Windows NT 4.0 by installing the Windows NT 4.0 Option Pack. To download this tool, visit Scripting.\n\nThis program demonstrates how to use the Windows Script Host to create a shortcut on the Windows Desktop. In order to run this example, you must have the Windows Script Host installed on your computer. To run one of these examples, copy the code below into a new program file and run it.\n\nDepending on the version of Visual FoxPro that you are using, you may need to change the name and the path of the Visual FoxPro executable in Example 2.\n\nExample 3: Add a URL shortcut to the desktop\n\nFor the shortcut to be created, valid parameters must be passed for all methods. No error appears if one of the parameters is incorrect."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/set_1",
        "document": "Displays, sets, or removes cmd.exe environment variables. If used without parameters, set displays the current environment variable settings.\n\nThe set command can also run from the Windows Recovery Console, using different parameters. For more information, see Windows Recovery Environment (WinRE).\n• None If command extensions are enabled (the default) and you run set with a value, it displays all of the variables that begin with that value.\n• None The characters , , , , and are special command shell characters, and they must be preceded by the escape character ( ) or enclosed in quotation marks when used in (for example, \"StringContaining&Symbol\"). If you use quotation marks to enclose a string that contains one of the special characters, the quotation marks are set as part of the environment variable value.\n• None Use environment variables to control the behavior of some batch files and programs and to control the way Windows and the MS-DOS subsystem appears and works. The set command is often used in the Autoexec.nt file to set environment variables.\n• None If you use the set command without any parameters, the current environment settings are displayed. These settings usually include the COMSPEC and PATH environment variables, which are used to help find programs on disk. Two other environment variables used by Windows are PROMPT and DIRCMD.\n• None If you specify values for and , the specified value is added to the environment and is associated with that variable. If the variable already exists in the environment, the new string value replaces the old string value.\n• None If you specify only a variable and an equal sign (without ) for the set command, the value associated with the variable is cleared (as if the variable isn't there).\n• None If you use the /a parameter, the following operators are supported, in descending order of precedence:\n• None If you use logical ( or ) or modulus (%) operators, enclose the expression string in quotation marks. Any non-numeric strings in the expression are considered environment variable names, and their values are converted to numbers before they're processed. If you specify an environment variable name that isn't defined in the current environment, a value of zero is allotted, which allows you to perform arithmetic with environment variable values without using the % to retrieve a value.\n• None If you run set /a from the command line outside of a command script, it displays the final value of the expression.\n• None Numeric values are decimal numbers unless prefixed by 0× for hexadecimal numbers or 0 for octal numbers. Therefore, 0×12 is the same as 18, which is the same as 022.\n• None Delayed environment variable expansion support is disabled by default, but you can enable or disable it by using cmd /v.\n• None When creating batch files, you can use set to create variables, and then use them in the same way that you would use the numbered variables %0 through %9. You can also use the variables %0 through %9 as input for set.\n• None If you call a variable value from a batch file, enclose the value with percent signs (%). For example, if your batch program creates an environment variable named BAUD, you can use the string associated with BAUD as a replaceable parameter by typing %baud% at the command prompt.\n\nTo set the value TEST^1 for the environment variable named , type:\n\nThe set command assigns everything that follows the equal sign (=) to the value of the variable. Therefore, if you type , you'll get the following result, .\n\nTo set the value TEST&1 for the environment variable , type:\n\nTo set an environment variable named include so the string c:\\directory is associated with it, type:\n\nYou can then use the string c:\\directory in batch files by enclosing the name include with percent signs (%). For example, you can use in a batch file to display the contents of the directory associated with the include environment variable. After this command is processed, the string c:\\directory replaces %include%.\n\nTo use the set command in a batch program to add a new directory to the path environment variable, type:\n\nTo display a list of all of the environment variables that begin with the letter p, type:\n\nTo display a list of all of the environment variables on the current device, type:"
    },
    {
        "link": "https://learn.openwaterfoundation.org/owf-learn-windows-shell/batch-file-basics/batch-file-basics",
        "document": "This documentation provides an overview of important batch file concepts. This documentation is not an exhaustive reference for batch files but provides important background and examples that are key to writing batch files.\n\nThe following are useful resources found on the internet. Use the table of contents and index features of each site to find information about a specific batch file language feature, or search the internet.\n\nThe following are important topics to get started:\n\nIn addition to the above basic topics, the following topics are listed roughly in order of complexity and highlight some of the most useful features of batch file syntax.\n\nBatch file names traditionally have the extension (although can also be used), which indicates to Windows (by file extension association) that the batch file can be run with the shell. Other file extensions such as are also interpreted as executable programs.\n\nThe convention of relying on file extensions to identify executable programs is different than Linux, where files must be have execute permissions set in order for the file to be executable (or run with, for example ). Linux shell scripts do not need to have an extension such as or and there are differing opinions on whether using extensions for executable programs is a best practice. However, in a mixed environment such as Cygwin, Git Bash, MinGW, or other system where Linux is run on host Windows operating system, it can be helpful to always use file extensions for Linux scripts to avoid confusion. The Git version control system can store an \"executable bit\" for a file, indicating that it is executable, but this does not apply to batch files since Windows looks at the file extension.\n\nThe default for File Explorer is to not show file extensions. However, selecting the File Explorer View / File name extensions checkbox shows file extensions, which makes it easier to see batch files on the file system.\n\nBatch files can be created in any folder. although it may make sense to use conventions such as placing batch files in a folder, which is traditionally used for executable programs, many of which contain binary content rather than text. If a batch file is globally useful, then saving in a folder in the may make sense (see the next section).\n\nThe Windows operating system and program is generally case-insensitive when specifying program names, commands, and file paths. Consequently, to list directories, use or . This is in contrast to Linux, which is generally case-sensitive.\n\nSpecific programs, in particular external software installed on the computer, may be case sensitive or case insensitive, for example for command parameters. Refer to documentation for each program.\n\nBatch files can be run from the prompt, by clicking on the file in File Explorer, or by calling from another batch file or program.\n\nIf calling a batch file from an executable program, for example a Java, Python, or C# program, it is generally required to call the program with batch file name as an argument. Most languages provide library functions to call shell programs.\n\nIf the folder including a batch file is included in the environment variable, then typing the batch file name at the prompt with our without the extension will cause the batch file to run. The batch file can also be run by entering the full or relative path to the batch file. Unlike Linux, Windows will run a batch file in the current folder even if the current folder ( ) is not in the . On Linux, if is not in the path, then a Linux shell script can be run with .\n\nThere are some considerations for how the batch file is run because of how the treats the scope and exit of the called batch file. For example, if one batch file calls another batch file, the command should be used, similar to the following:\n\nIf is not used before the second batch file name, then the main batch file will exit when the child batch file exits. This is confusing if additional code should run after the batch file is called.\n\nUnlike Linux shell scripts that use to indicate the program to run for the shell script, the first line of a batch file does not have any significance to the command shell or operating system.\n\nBy default, when the batch file is run, each line is echoed to standard output. This tends to be overwhelming and therefore the following first line is typically used to turn off echoing output:\n\nA batch file is entered at the first line. Each command is processed in order unless control commands such as or other code blocks influence the program flow. The following example illustrates typical code organization. Using at the beginning of a line (can be indented) indicates that the line is a comment.\n\nComments in batch files use the statement.\n\nThe following examples illustrates the use of comments.\n• It is OK to indent comments, for example when in an 'if' or 'for' block.\n• Some programmers use double-colon ( ) or other invalid labels to start comments. Although this works and may be more readable to some programmers, the use of is recommended way to insert comments.\n\nVariables in batch files are defined using syntax similar to the following. It is possible to use data types such as strings, integers, and floating point numbers; however, strings are the simplest to deal with, for example:\n• There should be no spaces on either side of the equal sign.\n• For strings, do not surround with double quotes because they will be treated literally as part of the string. Other syntax may allow using surrounding double quotes, for example when processing filenames that contain spaces.\n\nThe value of a variable can be referenced by surrounding variable name with , as in the following syntax. Unlike Linux, which uses at the start of the variable name, or , the are required on both sides of the variable.\n\nIf variable values are not as expected, in particular when using loops and complex logic, then use syntax similar to the following, which uses exclamation point instead of . By default, variable values are set when lines are parsed, which is a holdover of behavior from early versions of the software. However, this behavior does not work properly when loops and other complex logic are used. Consequently the syntax was added later.\n\nThe logic control features of batch files are not as easy to use as those of Linux scripts, although with experience it is possible to write batch files that are modular and highly functional.\n\nA simple control method is to use statements with labels.\n• Multiple labels are typically inserted in code at important logic points.\n• In order to prevent logic from one label code block from bleeding into the next code block, additional statements are needed to jump through logic.\n• It is useful to include standard labels such as to exit with code and to exit with code .\n• Labels are also used to define functions.\n\nThe terms \"commmand\" and \"program\" may be used interchangeably and cause confusion. The program, which is actually an executable program named , behaves as follows:\n• can call external programs by searching the , current folder, and specified paths to programs\n\nFor example, the statement is so fundamental to the shell's functionality that it is compiled into the program. The command is a foundational command and is also compiled into the shell. This can be verified by running:\n\nIn contrast, the program is an external program and when run from command prompt displays the Task Manager.\n\nBuilt-in commands and statements are compiled into the program, whereas external programs are located using the environment variable.\n\nThe statement exits a batch file or function, optionally with an integer return code.\n\nIt is typically to use a (zero) exit code to indicate success, and or other non-zero value to indicate an error. Some programs use specific error code values to communicate the error type with calling code. It is also useful to put one ore more variants of label at the end of the batch file, which can be jumped to from logic (do not use a label named because this seems to confuse the shell). The following is an example of using :\n• The above cannot be called as a function using because the would only return from the function, not exit the batch file.\n• The parameter should typically be used to indicate that the shell that is running the batch file should not itself exit.\n\nThe statement performs conditional processing in batch files so that logic decisions can be made. See:\n\nA typical example is to compare the value of a string to a variable and jump to another point in the batch file. In the following example, and are literal strings. They do not need to be surrounded by double quotes.\n• Spaces are not allowed on either side of the condition operator.\n• If the variable value may be an empty string, use double quotes to surround the variable to ensure that an empty string will not cause a syntax error; if a literal string is compared also surround it with double quotes. The double quotes are essentially treated as literal in the comparison so include on both sides of the comparison.\n\nA single line command such as the above allows only simple logic. The following example shows an statement that uses parentheses to create a multi-line logic block. This example uses the condition to check for file existence.\n• There must be a space before the and no space will cause an error\n• commands within the block can be indented\n\nIt is also possible to perform more complex logic using and statements. However, care must be taken to format the code to prevent syntax errors. The following is an example of valid code:\n• the syntax cannot be used; instead split into two lines with on the first line and on the following line\n• because no (or or ) syntax is supported, complex nested conditions require more nested levels\n• the with parentheses must occur on the same line, with spaces as shown\n• multiple conditions can be used\n• the command shell will treat multi-line blocks as one command; therefore, echo statements may show multiple lines and error messages may appear to originate anywhere in the block, rather than on a specific line\n\nThe statement provides functionality to loop over a list.\n\nBecause of limitations in command shell statements, the statement is also often used to creatively to solve problems, even when it would not be used similarly in other languages.\n\nSee the Useful Batch File Examples for specific examples of the loop.\n\nUsing loops often requires using , as discussed in the section, to ensure that variable values are properly set.\n\nThe following example searches for whether QGIS software is installed in a particular folder on the system (typically like: ), so that the version can be detected, with preference for the latest version.\n• The special varable syntax is used to iterate over variable .\n• The values to iterate over are listed in parentheses.\n• Experience has shown that it is better to keep the list simple and expand strings with spaces, etc. in the block of code following the line.\n• Spaces in the wrong places can cause issues. Use syntax similar to that shown in the above example.\n\nFunctions are implemented in batch files by relying on command, , and command. Batch file functions are similar in concept to functions in Linux shell scripts and other languages; however, the syntax is different.\n\nThe following example illustrates how a function can be defined in a batch file.\n\nThe output from running the above batch file is:\n• The function is declared with a .\n• The function is called using syntax.\n• Parameters to the function are passed after the syntax.\n• Parameters within the function are interpreted as if the function was called as a separate batch file.\n• The function returns an integer exit code using an command. In this case the exit does not exit the batch file."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands",
        "document": "All supported versions of Windows and Windows Server have a set of Win32 console commands built in. This set of documentation describes the Windows Commands you can use to automate tasks by using scripts or scripting tools.\n\nWindows has two command-line shells: the Command shell and PowerShell. Each shell is a software program that provides direct communication between you and the operating system or application, providing an environment to automate IT operations.\n\nThe Command shell was the first shell built into Windows to automate routine tasks, like user account management or nightly backups, with batch (.bat) files. With Windows Script Host, you could run more sophisticated scripts in the Command shell. For more information, see cscript or wscript. You can perform operations more efficiently by using scripts than you can by using the user interface. Scripts accept all commands that are available at the command line.\n\nPowerShell was designed to extend the capabilities of the Command shell to run PowerShell commands called cmdlets. Cmdlets are similar to Windows Commands but provide a more extensible scripting language. You can run both Windows Commands and PowerShell cmdlets in PowerShell, but the Command shell can only run Windows Commands and not PowerShell cmdlets.\n\nFor the most robust, up-to-date Windows automation, we recommend using PowerShell instead of Windows Commands or Windows Script Host for Windows automation.\n\nA reference of exit and error codes for Windows Commands can be found in the Debug system error codes articles that may be helpful to understanding errors produced. Windows Commands also include command redirection operators. To learn more of their use, see Using command redirection operators.\n\nYou can configure the Command shell to automatically complete file and directory names on a computer or user session when a specified control character is pressed. By default this control character is configured to be the tab key for both file and directory names, although they can be different. To change this control character, run and navigate to either of the following registry keys and entries, depending on whether you wish to change the value for the current user only, or for all users of the computer.\n\nSet these values to that of the control character you wish to use. See virtual key codes for a complete list. To disable a particular completion character in the registry, use the value for space (0x20) as it isn't a valid control character. The type of value for this registry entry is REG_DWORD, and can also be specified by hexadecimal or decimal value.\n\nYou can also enable or disable file and directory name completion per instance of a Command shell by running with the parameter and switch or . If name completion is enabled with the parameter and switch, the two control characters used are for directory name completion and for file name completion. User-specified settings take precedence over computer settings, and command-line options take precedence over registry settings.\n\nTo find information about a specific command, in the following A-Z menu, select the letter that the command starts with, and then select the command name."
    },
    {
        "link": "https://tutorialspoint.com/batch_script/batch_script_quick_guide.htm",
        "document": "Batch Script is incorporated to automate command sequences which are repetitive in nature. Scripting is a way by which one can alleviate this necessity by automating these command sequences in order to make ones life at the shell easier and more productive. In most organizations, Batch Script is incorporated in some way or the other to automate stuff.\n\nSome of the features of Batch Script are −\n• None Can read inputs from users so that it can be processed further.\n• None Has control structures such as for, if, while, switch for better automating and scripting.\n• None Supports advanced features such as Functions and Arrays.\n• None Can include other programming codes such as Perl.\n\nSome of the common uses of Batch Script are −\n• None Setting up servers for different purposes.\n• None Automating housekeeping activities such as deleting unwanted files or log files.\n• None Automating the deployment of applications from one environment to another.\n• None Installing programs on various machines at once.\n\nBatch scripts are stored in simple text files containing lines with commands that get executed in sequence, one after the other. These files have the special extension BAT or CMD. Files of this type are recognized and executed through an interface (sometimes called a shell) provided by a system file called the command interpreter. On Windows systems, this interpreter is known as cmd.exe.\n\nRunning a batch file is a simple matter of just clicking on it. Batch files can also be run in a command prompt or the Start-Run line. In such case, the full path name must be used unless the file's path is in the path environment. Following is a simple example of a Batch Script. This Batch Script when run deletes all files in the current directory.\n\nThis chapter explains the environment related to Batch Script.\n\nTypically, to create a batch file, notepad is used. This is the simplest tool for creation of batch files. Next is the execution environment for the batch scripts. On Windows systems, this is done via the command prompt or cmd.exe. All batch files are run in this environment.\n\nFollowing are the different ways to launch cmd.exe −\n\nMethod 1 − Go to C:\\Windows\\System32 and double click on the cmd file.\n\nMethod 2 − Via the run command The following snapshot shows to find the command prompt(cmd.exe) on Windows server 2012.\n\nOnce the cmd.exe is launched, you will be presented with the following screen. This will be your environment for executing your batch scripts.\n\nIn order to run batch files from the command prompt, you either need to go to the location to where the batch file is stored or alternatively you can enter the file location in the path environment variable. Thus assuming that the batch file is stored in the location , you would need to follow these instructions for the PATH variable inclusion.\n\nIn this chapter, we will look at some of the frequently used batch commands.\n\nIn this chapter, we will learn how to create, save, execute, and modify batch files.\n\nBatch files are normally created in notepad. Hence the simplest way is to open notepad and enter the commands required for the script. For this exercise, open notepad and enter the following statements.\n\nAfter your batch file is created, the next step is to save your batch file. Batch files have the extension of either .bat or .cmd. Some general rules to keep in mind when naming batch files −\n• None Try to avoid spaces when naming batch files, it sometime creates issues when they are called from other scripts.\n• None Dont name them after common batch files which are available in the system such as ping.cmd.\n\nThe above screenshot shows how to save the batch file. When saving your batch file a few points to keep in mind.\n• Remember to put the .bat or .cmd at the end of the file name.\n• Choose the Save as type option as All Files.\n• Put the entire file name in quotes .\n\nFollowing are the steps to execute a batch file −\n• None Step 2 − Go to the location where the .bat or .cmd file is stored.\n• None Step 3 − Write the name of the file as shown in the following image and press the Enter button to execute the batch file.\n\nFollowing are the steps for modifying an existing batch file.\n• None Step 2 − Go to the location where the .bat or .cmd file is stored.\n• None Step 3 − Right-click the file and choose the Edit option from the context menu. The file will open in Notepad for further editing.\n\nNormally, the first line in a batch file often consists of the following command.\n\nBy default, a batch file will display its command as it runs. The purpose of this first command is to turn off this display. The command \"echo off\" turns off the display for the whole script, except for the \"echo off\" command itself. The \"at\" sign \"@\" in front makes the command apply to itself as well.\n\nVery often batch files also contains lines that start with the \"Rem\" command. This is a way to enter comments and documentation. The computer ignores anything on a line following Rem. For batch files with increasing amount of complexity, this is often a good idea to have comments.\n\nLets construct our simple first batch script program. Open notepad and enter the following lines of code. Save the file as List.cmd.\n\nThe code does the following −\n• None Uses the echo off command to ensure that the commands are not shown when the code is executed.\n• None The Rem command is used to add a comment to say what exactly this batch file does.\n• None The dir command is used to take the contents of the location C:\\Program Files.\n• None The > command is used to redirect the output to the file C:\\lists.txt.\n• None Finally, the echo command is used to tell the user that the operation is completed.\n\nWhen the above command is executed, the names of the files in C:\\Program Files will be sent to the file C:\\Lists.txt and in the command prompt the message The program has completed will be displayed.\n\nThere are two types of variables in batch files. One is for parameters which can be passed when the batch file is called and the other is done via the set command.\n\nBatch scripts support the concept of command line arguments wherein arguments can be passed to the batch file when invoked. The arguments can be called from the batch files through the variables %1, %2, %3, and so on.\n\nThe following example shows a batch file which accepts 3 command line arguments and echos them to the command line screen.\n\nIf the above batch script is stored in a file called test.bat and we were to run the batch as\n\nFollowing is a screenshot of how this would look in the command prompt when the batch file is executed.\n\nThe above command produces the following output.\n\nIf we were to run the batch as\n\nThe output would still remain the same as above. However, the fourth parameter would be ignored.\n\nThe other way in which variables can be initialized is via the set command. Following is the syntax of the set command.\n• None variable-name is the name of the variable you want to set.\n• None value is the value which needs to be set against the variable.\n• None /A This switch is used if the value needs to be numeric in nature.\n\nThe following example shows a simple way the set command can be used.\n• None In the above code snippet, a variable called message is defined and set with the value of \"Hello World\".\n• None To display the value of the variable, note that the variable needs to be enclosed in the % sign.\n\nThe above command produces the following output.\n\nIn batch script, it is also possible to define a variable to hold a numeric value. This can be done by using the /A switch.\n\nThe following code shows a simple way in which numeric values can be set with the /A switch.\n• None We are first setting the value of 2 variables, a and b to 5 and 10 respectively.\n• None We are adding those values and storing in the variable c.\n• None Finally, we are displaying the value of the variable c.\n\nThe output of the above program would be 15.\n\nAll of the arithmetic operators work in batch files. The following example shows arithmetic operators can be used in batch files.\n\nThe above command produces the following output.\n\nIn any programming language, there is an option to mark variables as having some sort of scope, i.e. the section of code on which they can be accessed. Normally, variable having a global scope can be accessed anywhere from a program whereas local scoped variables have a defined boundary in which they can be accessed.\n\nDOS scripting also has a definition for locally and globally scoped variables. By default, variables are global to your entire command prompt session. Call the SETLOCAL command to make variables local to the scope of your script. After calling SETLOCAL, any variable assignments revert upon calling ENDLOCAL, calling EXIT, or when execution reaches the end of file (EOF) in your script. The following example shows the difference when local and global variables are set in the script.\n\nFew key things to note about the above program.\n• None The globalvar is defined with a global scope and is available throughout the entire script.\n• None The var variable is defined in a local scope because it is enclosed between a SETLOCAL and ENDLOCAL block. Hence, this variable will be destroyed as soon the ENDLOCAL statement is executed.\n\nThe above command produces the following output.\n\nYou will notice that the command echo %var% will not yield anything because after the ENDLOCAL statement, the var variable will no longer exist.\n\nIf you have variables that would be used across batch files, then it is always preferable to use environment variables. Once the environment variable is defined, it can be accessed via the % sign. The following example shows how to see the JAVA_HOME defined on a system. The JAVA_HOME variable is a key component that is normally used by a wide variety of applications.\n\nThe output would show the JAVA_HOME directory which would depend from system to system. Following is an example of an output.\n\nIts always a good practice to add comments or documentation for the scripts which are created. This is required for maintenance of the scripts to understand what the script actually does.\n\nFor example, consider the following piece of code which has no form of comments. If any average person who has not developed the following script tries to understand the script, it would take a lot of time for that person to understand what the script actually does.\n\nThere are two ways to create comments in Batch Script; one is via the Rem command. Any text which follows the Rem statement will be treated as comments and will not be executed. Following is the general syntax of this statement.\n\nwhere Remarks is the comments which needs to be added.\n\nThe following example shows a simple way the Rem command can be used.\n\nThe above command produces the following output. You will notice that the line with the Rem statement will not be executed.\n\nThe other way to create comments in Batch Script is via the :: command. Any text which follows the :: statement will be treated as comments and will not be executed. Following is the general syntax of this statement.\n\nwhere Remarks is the comment which needs to be added.\n\nThe following example shows a simple way the Rem command can be used.\n\nThe above command produces the following output. You will notice that the line with the :: statement will not be executed.\n\nNote − If you have too many lines of Rem, it could slow down the code, because in the end each line of code in the batch file still needs to be executed.\n\nLets look at the example of the large script we saw at the beginning of this topic and see how it looks when documentation is added to it.\n\nYou can now see that the code has become more understandable to users who have not developed the code and hence is more maintainable.\n\nIn DOS, a string is an ordered collection of characters, such as \"Hello, World!\".\n\nArrays are not specifically defined as a type in Batch Script but can be implemented. The following things need to be noted when arrays are implemented in Batch Script.\n• Each element of the array needs to be defined with the set command.\n• The for loop would be required to iterate through the values of the array.\n\nAn array is created by using the following set command.\n\nWhere 0 is the index of the array and 1 is the value assigned to the first element of the array.\n\nAnother way to implement arrays is to define a list of values and iterate through the list of values. The following example show how this can be implemented.\n\nThe above command produces the following output.\n\nYou can retrieve a value from the array by using subscript syntax, passing the index of the value you want to retrieve within square brackets immediately after the name of the array.\n\nIn this example, the index starts from 0 which means the first element can be accessed using index as 0, the second element can be accessed using index as 1 and so on. Let's check the following example to create, initialize and access arrays −\n\nThe above command produces the following output.\n\nTo add an element to the end of the array, you can use the set element along with the last index of the array element.\n\nThe above command produces the following output.\n\nYou can modify an existing element of an Array by assigning a new value at a given index as shown in the following example −\n\nThe above command produces the following output.\n\nIterating over an array is achieved by using the for loop and going through each element of the array. The following example shows a simple way that an array can be implemented.\n\nFollowing things need to be noted about the above program −\n• None Each element of the array needs to be specifically defined using the set command.\n• None The for loop with the /L parameter for moving through ranges is used to iterate through the array.\n\nThe above command produces the following output.\n\nThe length of an array is done by iterating over the list of values in the array since there is no direct function to determine the number of elements in an array.\n\nOutput The above command produces the following output.\n\nStructures can also be implemented in batch files using a little bit of an extra coding for implementation. The following example shows how this can be achieved.\n\nThe following key things need to be noted about the above code.\n• None Each variable defined using the set command has 2 values associated with each index of the array.\n• None The variable i is set to 0 so that we can loop through the structure will the length of the array which is 3.\n• None We always check for the condition on whether the value of i is equal to the value of len and if not, we loop through the code.\n• None We are able to access each element of the structure using the obj[%i%] notation.\n\nThe above command produces the following output.\n\nDecision-making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.\n\nAn operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations.\n\nIn batch script, the following types of operators are possible.\n\nBatch script language supports the normal Arithmetic operators as any language. Following are the Arithmetic operators available.\n\nRelational operators allow of the comparison of objects. Below are the relational operators available.\n\nLogical operators are used to evaluate Boolean expressions. Following are the logical operators available.\n\nThe batch language is equipped with a full set of Boolean logic operators like AND, OR, XOR, but only for binary numbers. Neither are there any values for TRUE or FALSE. The only logical operator available for conditions is the NOT operator.\n\nBatch Script language also provides assignment operators. Following are the assignment operators available.\n\nBitwise operators are also possible in batch script. Following are the operators available.\n\nFollowing is the truth table showcasing these operators.\n\nThe date and time in DOS Scripting have the following two basic commands for retrieving the date and time of the system.\n\nThis command gets the system date.\n\nThe current date will be displayed in the command prompt. For example,\n\nThis command sets or displays the time.\n\nThe current system time will be displayed. For example,\n\nFollowing are some implementations which can be used to get the date and time in different formats.\n\nThe above command produces the following output.\n\nThere are three universal files for keyboard input, printing text on the screen and printing errors on the screen. The Standard In file, known as stdin, contains the input to the program/script. The Standard Out file, known as stdout, is used to write output for display on the screen. Finally, the Standard Err file, known as stderr, contains any error messages for display on the screen.\n\nEach of these three standard files, otherwise known as the standard streams, are referenced using the numbers 0, 1, and 2. Stdin is file 0, stdout is file 1, and stderr is file 2.\n\nOne common practice in batch files is sending the output of a program to a log file. The > operator sends, or redirects, stdout or stderr to another file. The following example shows how this can be done.\n\nIn the above example, the stdout of the command Dir C:\\ is redirected to the file list.txt.\n\nIf you append the number 2 to the redirection filter, then it would redirect the stderr to the file lists.txt.\n\nOne can even combine the stdout and stderr streams using the file number and the & prefix. Following is an example.\n\nThe pseudo file NUL is used to discard any output from a program. The following example shows that the output of the command DIR is discarded by sending the output to NUL.\n\nTo work with the Stdin, you have to use a workaround to achieve this. This can be done by redirecting the command prompts own stdin, called CON.\n\nThe following example shows how you can redirect the output to a file called lists.txt. After you execute the below command, the command prompt will take all the input entered by user till it gets an EOF character. Later, it sends all the input to the file lists.txt.\n\nBy default when a command line execution is completed it should either return zero when execution succeeds or non-zero when execution fails. When a batch script returns a non-zero value after the execution fails, the non-zero value will indicate what is the error number. We will then use the error number to determine what the error is about and resolve it accordingly.\n\nFollowing are the common exit code and their description.\n\nThe environmental variable %ERRORLEVEL% contains the return code of the last executed program or script.\n\nBy default, the way to check for the ERRORLEVEL is via the following code.\n\nIt is common to use the command EXIT /B %ERRORLEVEL% at the end of the batch file to return the error codes from the batch file.\n\nEXIT /B at the end of the batch file will stop execution of a batch file.\n\nUse EXIT /B < exitcodes > at the end of the batch file to return custom return codes.\n\nEnvironment variable %ERRORLEVEL% contains the latest errorlevel in the batch file, which is the latest error codes from the last command executed. In the batch file, it is always a good practice to use environment variables instead of constant values, since the same variable get expanded to different values on different computers.\n\nLets look at a quick example on how to check for error codes from a batch file.\n\nLets assume we have a batch file called Find.cmd which has the following code. In the code, we have clearly mentioned that we if dont find the file called lists.txt then we should set the errorlevel to 7. Similarly, if we see that the variable userprofile is not defined then we should set the errorlevel code to 9.\n\nLets assume we have another file called App.cmd that calls Find.cmd first. Now, if the Find.cmd returns an error wherein it sets the errorlevel to greater than 0 then it would exit the program. In the following batch file, after calling the Find.cnd find, it actually checks to see if the errorlevel is greater than 0.\n\nIn the above program, we can have the following scenarios as the output −\n• None If the file c:\\lists.txt does not exist, then nothing will be displayed in the console output.\n• None If the variable userprofile does not exist, then nothing will be displayed in the console output.\n• None If both of the above condition passes then the string Successful completion will be displayed in the command prompt.\n\nIn the decision making chapter, we have seen statements which have been executed one after the other in a sequential manner. Additionally, implementations can also be done in Batch Script to alter the flow of control in a programs logic. They are then classified into flow of control statements.\n\nThe for statement can also be used for checking command line arguments. The following example shows how the for statement can be used to loop through the command line arguments.\n\nLets assume that our above code is stored in a file called Test.bat. The above command will produce the following output if the batch file passes the command line arguments of 1,2 and 3 as Test.bat 1 2 3.\n\nA function is a set of statements organized together to perform a specific task. In batch scripts, a similar approach is adopted to group logical statements together to form a function.\n\nAs like any other languages, functions in Batch Script follows the same procedure −\n• None Function Declaration − It tells the compiler about a function's name, return type, and parameters.\n• None Function Definition − It provides the actual body of the function.\n\nIn Batch Script, a function is defined by using the label statement. When a function is newly defined, it may take one or several values as input 'parameters' to the function, process the functions in the main body, and pass back the values to the functions as output 'return types'.\n\nEvery function has a function name, which describes the task that the function performs. To use a function, you \"call\" that function with its name and pass its input values (known as arguments) that matches the types of the function's parameters.\n\nFollowing is the syntax of a simple function.\n• None The function_name is the name given to the function which should have some meaning to match what the function actually does.\n• None The EXIT statement is used to ensure that the function exits properly.\n\nFollowing is an example of a simple function.\n\nIn this chapter, we will discuss the various processes involved in Batch Script.\n\nIn Batch Script, the TASKLIST command can be used to get the list of currently running processes within a system.\n\nThe above command will get the list of all the processes running on your local system. Following is a snapshot of the output which is rendered when the above command is run as it is. As you can see from the following output, not only do you get the various processes running on your system, you also get the memory usage of each process.\n\nThe above command takes the output displayed by tasklist and saves it to the process.txt file.\n\nThe above command will only fetch those processes whose memory is greater than 40MB. Following is a sample output that can be rendered.\n\nAllows a user running Microsoft Windows XP professional, Windows 2003, or later to kill a task from a Windows command line by process id (PID) or image name. The command used for this purpose is the TASKILL command.\n\nThe above command kills the open notepad task, if open.\n\nThe above command kills a process which has a process of 9214.\n\nDOS scripting also has the availability to start a new process altogether. This is achieved by using the START command.\n• None command − The command, batch file or executable program to run.\n• None parameters − The parameters passed to the command.\n\nThe above command will run the batch script test.bat in a new window. The windows will start in the minimized mode and also have the title of Test Batch Script.\n\nThe above command will actually run Microsoft word in another process and then open the file TESTA.txt in MS Word.\n\nAliases means creating shortcuts or keywords for existing commands. Suppose if we wanted to execute the below command which is nothing but the directory listing command with the /w option to not show all of the necessary details in a directory listing.\n\nSuppose if we were to create a shortcut to this command as follows.\n\nWhen we want to execute the dir /w command, we can simply type in the word dw. The word dw has now become an alias to the command Dir /w.\n\nAlias are managed by using the doskey command.\n• None macroname − A short name for the macro.\n• None text − The commands you want to recall.\n\nFollowing are the description of the options which can be presented to the DOSKEY command.\n\nCreate a new file called keys.bat and enter the following commands in the file. The below commands creates two aliases, one if for the cd command, which automatically goes to the directory called test. And the other is for the dir command.\n\nOnce you execute the command, you will able to run these aliases in the command prompt.\n\nThe following screenshot shows that after the above created batch file is executed, you can freely enter the d command and it will give you the directory listing which means that your alias has been created.\n\nAn alias or macro can be deleted by setting the value of the macro to NULL.\n\nIn the above example, we are first setting the macro d to d = dir. After which we are setting it to NULL. Because we have set the value of d to NULL, the macro d will deleted.\n\nAn alias or macro can be replaced by setting the value of the macro to the new desired value.\n\nIn the above example, we are first setting the macro d to d = dir. After which we are setting it to dir /w. Since we have set the value of d to a new value, the alias d will now take on the new value.\n\nWindows now has an improved library which can be used in Batch Script for working with devices attached to the system. This is known as the device console DevCon.exe.\n\nWindows driver developers and testers can use DevCon to verify that a driver is installed and configured correctly, including the proper INF files, driver stack, driver files, and driver package. You can also use the DevCon commands (enable, disable, install, start, stop, and continue) in scripts to test the driver. DevCon is a command-line tool that performs device management functions on local computers and remote computers.\n\nDisplay driver and device info DevCon can display the following properties of drivers and devices on local computers, and remote computers (running Windows XP and earlier) −\n• None Hardware IDs, compatible IDs, and device instance IDs. These identifiers are described in detail in device identification strings.\n• None Search for devices DevCon can search for installed and uninstalled devices on a local or remote computer by hardware ID, device instance ID, or device setup class.\n• None Change device settings DevCon can change the status or configuration of Plug and Play (PnP) devices on the local computer in the following ways −\n• None Remove a device from the device tree and delete its device stack.\n• None Add, delete, and reorder the hardware IDs of root-enumerated devices.\n• None Change the upper and lower filter drivers for a device setup class.\n• None Add and delete third-party driver packages from the driver store.\n\nDevCon (DevCon.exe) is included when you install the WDK, Visual Studio, and the Windows SDK for desktop apps. DevCon.exe kit is available in the following locations when installed.\n• None /m:\\\\computer − Runs the command on the specified remote computer. The backslashes are required.\n• None /r − Conditional reboot. Reboots the system after completing an operation only if a reboot is required to make a change effective.\n• None To list and display information about devices on the computer, use the following commands −\n• None To search for information about devices on the computer, use the following commands −\n• None To manipulate the device or change its configuration, use the following commands −\n\nFollowing are some examples on how the DevCon command is used.\n\nThe following command uses the DevCon DriverFiles operation to list the file names of drivers that devices on the system use. The command uses the wildcard character (*) to indicate all devices on the system. Because the output is extensive, the command uses the redirection character (>) to redirect the output to a reference file, driverfiles.txt.\n\nThe following command uses the DevCon status operation to find the status of all devices on the local computer. It then saves the status in the status.txt file for logging or later review. The command uses the wildcard character (*) to represent all devices and the redirection character (>) to redirect the output to the status.txt file.\n\nThe following command enables all printer devices on the computer by specifying the Printer setup class in a DevCon Enable command. The command includes the /r parameter, which reboots the system if it is necessary to make the enabling effective.\n\nThe following command uses the DevCon Install operation to install a keyboard device on the local computer. The command includes the full path to the INF file for the device (keyboard.inf) and a hardware ID (*PNP030b).\n\nThe following command will scan the computer for new devices.\n\nThe following command will rescan the computer for new devices.\n\nThe Registry is one of the key elements on a windows system. It contains a lot of information on various aspects of the operating system. Almost all applications installed on a windows system interact with the registry in some form or the other.\n\nThe Registry contains two basic elements: keys and values. Registry keys are container objects similar to folders. Registry values are non-container objects similar to files. Keys may contain values or further keys. Keys are referenced with a syntax similar to Windows' path names, using backslashes to indicate levels of hierarchy.\n\nThis chapter looks at various functions such as querying values, adding, deleting and editing values from the registry.\n\nBatch script has the facility to work with network settings. The NET command is used to update, fix, or view the network or network settings. This chapter looks at the different options available for the net command.\n\nPrinting can also be controlled from within Batch Script via the NET PRINT command.\n\nThe above command will print the example.txt file to the parallel port lpt1.\n\nAs of Windows 2000, many, but not all, printer settings can be configured from Windows's command line using PRINTUI.DLL and RUNDLL32.EXE\n\nWhere some of the options available are the following −\n• None /F[file] − Location of an INF file that the INF file specified with /f may depend on.\n• None /ii − Install printer using add printer wizard with an inf file.\n• None /k − Print test page to specified printer, cannot be combined with command when installing a printer.\n\nThere can be cases wherein you might be connected to a network printer instead of a local printer. In such cases, it is always beneficial to check if a printer exists in the first place before printing.\n\nThe existence of a printer can be evaluated with the help of the RUNDLL32.EXE PRINTUI.DLL which is used to control most of the printer settings.\n\nThe above command will do the following −\n• None It will first set the printer name and set a file name which will hold the settings of the printer.\n• None The RUNDLL32.EXE PRINTUI.DLL commands will be used to check if the printer actually exists by sending the configuration settings of the file to the file Prt.txt\n\nDebugging a batch script becomes important when you are working on a big complex batch script.\n\nFollowing are the ways in which you can debug the batch file.\n\nA very simple debug option is to make use of echo command in your batch script wherever possible. It will display the message in the command prompt and help you debug where things have gone wrong.\n\nHere is a simple example that displays even numbers based on the input given. The echo command is used to display the result and also if the input is not given. Similarly, the echo command can be used in place when you think that the error can happen. For example, if the input given is a negative number, less than 2, etc.\n\nAnother way is to pause the batch execution when there is an error. When the script is paused, the developer can fix the issue and restart the processing.\n\nIn the example below, the batch script is paused as the input value is mandatory and not provided.\n\nLogging the error messages to another file\n\nIt might get hard to debug the error just looking at a bunch of echo displayed on the command prompt. Another easy way out is to log those messages in another file and view it step by step to understand what went wrong.\n\nHere is an example, consider the following test.bat file:\n\nThe command given in the .bat file is wrong. Let us log the message and see what we get.\n\nExecute the following command in your command line:\n\nThe file testerrors.txt will display the error messages as shown below:\n\nLooking at the above file the developer can fix the program and execute again.\n\nUsing ErrorLevel to detect errors and log them\n\nErrorlevel returns 0 if the command executes successfully and 1 if it fails.\n\nConsider the following example:\n\nDuring execution, you can see errors as well as logs:\n\nIn case of failure, you will see the following logs inside testlog.txt.\n\nLogging in is possible in Batch Script by using the redirection command.\n\nCreate a file called test.bat and enter the following command in the file.\n\nThe above command has an error because the option to the net statistics command is given in the wrong way.\n\nIf the command with the above test.bat file is run as\n\nAnd you open the file testerrors.txt, you will see the following error.\n\nThe syntax of this command is −\n\nMore help is available by typing NET HELPMSG 3506.\n\nIf you open the file called testlog.txt, it will show you a log of what commands were executed."
    },
    {
        "link": "https://hostman.com/tutorials/how-to-create-and-use-batch-files",
        "document": "RDP Protocol: What It Is, What It's Used For, and How It Works\n\nRemote desktop connection to a host can be achieved in various ways, such as using third-party applications like UltraVNC. However, the most common tool for using the Remote Desktop Protocol (RDP) is Microsoft's built-in utility called Remote Desktop. In this article, we'll explore the history of RDP, how it works, and how data is protected during transmission. History of RDP The Remote Desktop Protocol (RDP) was created by Microsoft and initially developed as one of the primary methods for remote access to computers or servers. It was also intended to enable weak local machines to connect to more powerful servers for tasks like complex calculations. Today, RDP is primarily a tool for setting up remote workplaces. Key milestones in the development of RDP: 1998: RDP was first used in Windows NT 4.0 Terminal Server Edition. It continues to be supported in all Windows operating systems, up to Windows 11 and Windows Server 2022. RDP remains a default remote access tool in Windows, despite the existence of other technologies like VNC. There are clients for nearly all major operating systems, including Linux, FreeBSD, macOS, iOS, Android, and more. The current version is RDP 10, which includes features like auto-resizing and enhanced graphics compression using the H.264/AVC codec. General Characteristics of RDP Supported color depths: 32-bit and lower (8, 15, 16, and 24-bit). Data protection: 128-bit encryption using the RC4 algorithm. Other features: Audio redirection, printer and port forwarding, clipboard sharing between the local and remote computers. Citrix Systems played a key role in the early development of remote desktop technology. In the early 1990s, they developed the WinFrame system based on Windows NT 3.51. Citrix eventually collaborated with Microsoft, and in 1997, Microsoft acquired certain rights to Citrix's technology. As a result, Citrix retained rights to the ICA protocol, while Microsoft developed RDP based on the ITU T.120 standard. Citrix and Microsoft remain competitors, with Citrix focusing on high-performance systems and Microsoft leading in the mid-range server market with Terminal Services. Both companies continue to expand their product capabilities to reach more users. Advantages of Terminal Services: Easy application setup for clients. Centralized session management. Functionality tied to active Terminal Services licenses. Network Setup Using Terminal Services Microsoft products allow the use of the RDP protocol in two different modes: for connecting to application servers (Terminal Server Mode) or for managing system settings (Remote Administration Mode). Let's look at both options: Remote Administration Mode All versions of Microsoft Windows support this mode. The only difference is the number of remote connections allowed simultaneously. In desktop versions, only one connection is supported: a local login or a remote host connection. In server versions, the options are broader: two network connections and one local client. Terminal Server Mode This mode is only available on Windows Server editions. The advantage of this mode is that there are no limits on the number of connections—you can have as many as needed. However, you must purchase licenses and configure the system properly to use this mode. The server can be set up as either a dedicated node or a terminal server. Without these steps, access cannot be granted. How RDP Works The Remote Desktop Protocol is an application-layer TCP protocol. Initially, the computers establish a connection. After confirming the connection, the system initiates the RDP session at the transport layer. Once this process is successfully completed, the terminal server begins transmitting the desktop image and allows input from the keyboard and mouse. The display can either be a rendered image or graphical primitives. The system supports the simultaneous use of multiple virtual channels within a single physical connection. This is necessary to enable the following functions: Printing to a printer or data exchange via a serial port. Clipboard functionality and other operations with the disk subsystem. Use of audio playback and recording systems. The parameters for the virtual channels are set at the start, during the initial connection with the host. Two security options are available when initiating a connection: integrated Standard RDP Security and optional Enhanced RDP Security. Let's look at their functionality in more detail and the features of each approach. Standard RDP Security This security approach involves authentication, data encryption, and integrity monitoring through modules integrated into RDP. The encryption uses the RC4 algorithm with a key length between 40-168 bits (depending on the Windows version). When establishing a connection, the system generates a pair of keys to encrypt the information exchanged between the client and the server. The authentication process works as follows: The system generates a pair of RSA keys. It then creates a public key certificate (Proprietary Certificate). This certificate is signed with the RSA key embedded in Windows. The client receives the Proprietary Certificate to access the terminal server. After verifying the certificate, the server's public key is sent to the client. Providing the account and password triggers these actions only upon successful verification. All transmitted data undergoes integrity checks using a Message Authentication Code (MAC) algorithm, based on MD5 and SHA1. The system can be switched to use 3DES encryption, which was introduced in Windows 2003 Server to meet FIPS standards. Enhanced RDP Security The second security option involves using external modules like TLS 1.0 and CredSSP. The TLS protocol was introduced in Windows Server starting with the 2003 release and is used when the client machine supports RDP. Before connecting, it's recommended to check the utility version (RDP 6.0 or higher is required). Users can choose between generating their own certificate or using an existing one from the Windows system. CredSSP (Credential Security Support Provider) is a combined solution that integrates TLS, Kerberos, and NTLM technologies. The advantages of this approach include: Login authorization is verified before completing the RDP connection, saving server resources when dealing with a high number of requests. Encryption and account identification are handled via TLS standards. Single sign-on to the host is supported using Kerberos or NTLM. CredSSP can be selected by enabling the \"Use Network Level Authentication\" option, available in all operating systems starting with Windows Vista/2008 Server. Terminal Services Licensing A popular method for accessing Terminal Services is through a \"thin client.\" Its main feature is creating and activating a license server, without which the system will not function (although connections through a \"thick client\" or to a standard desktop are possible, but only in a remote mode). Licenses are issued in two modes. Without activation, the user is granted a temporary license for the duration of the current session or for a limited period. Once activated, the user is issued a \"permanent\" license on the server. This process involves issuing a digital certificate confirming the connected workstation's legitimacy. Types of Client Licenses: Temporary Terminal Server CAL: A temporary license limited by a specified period. Device Terminal Server CAL: Tied to a specific device. User Terminal Server CAL: Linked to the specific user defined in the settings. External Terminal Server Connector: Designed for external connections. Let's look at these options in more detail. Time-Based License Upon their first connection to the terminal server, a time-based license is issued to the user. Its validity period is 90 days, regardless of the client's activity. If a second connection is successfully established, the server will attempt to assign a permanent license to the client machine. Licenses must be available in the server's storage for this to happen. Device-Based License This option is designed for a client working from a specific physical device. The license is valid for a period ranging from 52 to 89 days. If 7 or fewer days remain before expiration, the server will attempt to replace it with a permanent license upon any connection attempt. If the device is changed, the cycle will restart from the beginning. User-Based License The user-based license is the most flexible option, as it allows users to work from any device, creating convenient conditions for deploying remote workspaces. A notable feature of this mode is that Terminal Services does not have a built-in connection counter. As a result, when additional clients connect, the number of available licenses remains unchanged. This does not comply with Microsoft's licensing rules, but it is a known fact. If you need to issue both device and user licenses simultaneously, the server must be configured for device-based licensing. In a mixed setup, there will also be no counter for tracking different client connections, and limitations can only be enforced by linking them to specific hardware. External User License This is a special type of license for granting rights to external users. It does not limit the number of clients, regardless of the volume specified, because, under the EULA agreement, a dedicated server must be allocated for such users. This restricts external clients' access to corporate sessions. This type of license is not very popular due to its high cost. RDP Connection on macOS Microsoft has released a Remote Desktop utility for macOS, which you can download from the App Store. The connection process is similar to that on Windows: first, you enter the server's IP address or domain, and then, when prompted, enter the username and password of the user who has remote access rights. After launching, you may receive a warning about an untrusted certificate. To resolve this, simply click \"Show Certificate\" and select the \"Always trust...\" option. From then on, the system will connect without asking again. Remote Desktop Connection on Ubuntu When connecting from Windows to a remote host running Ubuntu, the Remote Desktop utility is used, just like on Windows. However, you need to prepare the Ubuntu server by installing support for the technology: sudo apt install xrdp After installation, start the service: sudo systemctl status rdp If you're using Linux as the local machine, the Remmina utility will be useful. You will need to switch the protocol from VNC to RDP. Despite the different systems, the user experience will feel seamless. Other Linux clients include Gnome Connection, Vinagre, Xfreerdp, and Rdesktop. To install the Remmina package: sudo apt-add-repository ppa:remmina-ppa-team/remmina-nextsudo apt-get updatesudo apt-get install remmina remmina-plugin-rdp libfreerdp-plugins-standard Conclusion We've completed our overview of the RDP protocol, covering what it is and how it works. One final note is that a license server can be assigned one of two roles: Domain or Workgroup License Server – operates within a domain or workgroup. Entire Enterprise License Server – operates within an organization. The choice affects how the license server is scanned. In the first case, the system searches through Active Directory, while in the second, it uses NetBIOS broadcast requests."
    }
]