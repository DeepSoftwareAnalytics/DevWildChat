[
    {
        "link": "https://docs.djangoproject.com/en/5.1/howto/custom-template-tags",
        "document": "How to create custom template tags and filters¶\n\nDjango’s template language comes with a wide variety of designed to address the presentation logic needs of your application. Nevertheless, you may find yourself needing functionality that is not covered by the core set of template primitives. You can extend the template engine by defining custom tags and filters using Python, and then make them available to your templates using the tag.\n\nThe most common place to specify custom template tags and filters is inside a Django app. If they relate to an existing app, it makes sense to bundle them there; otherwise, they can be added to a new app. When a Django app is added to , any tags it defines in the conventional location described below are automatically made available to load within templates. The app should contain a directory, at the same level as , , etc. If this doesn’t already exist, create it - don’t forget the file to ensure the directory is treated as a Python package. After adding the module, you will need to restart your server before you can use the tags or filters in templates. Your custom tags and filters will live in a module inside the directory. The name of the module file is the name you’ll use to load the tags later, so be careful to pick a name that won’t clash with custom tags and filters in another app. For example, if your custom tags/filters are in a file called , your app layout might look like this: And in your template you would use the following: The app that contains the custom tags must be in in order for the tag to work. This is a security feature: It allows you to host Python code for many template libraries on a single host machine without enabling access to all of them for every Django installation. There’s no limit on how many modules you put in the package. Just keep in mind that a statement will load tags/filters for the given Python module name, not the name of the app. To be a valid tag library, the module must contain a module-level variable named that is a instance, in which all the tags and filters are registered. So, near the top of your module, put the following: Alternatively, template tag modules can be registered through the argument to . This is useful if you want to use a different label from the template tag module name when loading template tags. It also enables you to register tags without installing an application. For a ton of examples, read the source code for Django’s default filters and tags. They’re in django/template/defaultfilters.py and django/template/defaulttags.py, respectively. For more information on the tag, read its documentation.\n\nCustom filters are Python functions that take one or two arguments:\n• None The value of the variable (input) – not necessarily a string.\n• None The value of the argument – this can have a default value, or be left out altogether. For example, in the filter , the filter would be passed the variable and the argument . Since the template language doesn’t provide exception handling, any exception raised from a template filter will be exposed as a server error. Thus, filter functions should avoid raising exceptions if there is a reasonable fallback value to return. In case of input that represents a clear bug in a template, raising an exception may still be better than silent failure which hides the bug. \"\"\"Removes all values of arg from the given string\"\"\" And here’s an example of how that filter would be used: Most filters don’t take arguments. In this case, leave the argument out of your function: Once you’ve written your filter definition, you need to register it with your instance, to make it available to Django’s template language:\n• None The name of the filter – a string.\n• None The compilation function – a Python function (not the name of the function as a string). You can use as a decorator instead: If you leave off the argument, as in the second example above, Django will use the function’s name as the filter name. Finally, also accepts three keyword arguments, , , and . These arguments are described in and below. If you’re writing a template filter that only expects a string as the first argument, you should use the decorator . This will convert an object to its string value before being passed to your function: This way, you’ll be able to pass, say, an integer to this filter, and it won’t cause an (because integers don’t have methods). When writing a custom filter, give some thought to how the filter will interact with Django’s auto-escaping behavior. Note that two types of strings can be passed around inside the template code:\n• None Raw strings are the native Python strings. On output, they’re escaped if auto-escaping is in effect and presented unchanged, otherwise.\n• None Safe strings are strings that have been marked safe from further escaping at output time. Any necessary escaping has already been done. They’re commonly used for output that contains raw HTML that is intended to be interpreted as-is on the client side. Internally, these strings are of type . You can test for them using code like: # Do something with the \"safe\" string. Template filter code falls into one of two situations:\n• None Your filter does not introduce any HTML-unsafe characters ( , , , or ) into the result that were not already present. In this case, you can let Django take care of all the auto-escaping handling for you. All you need to do is set the flag to when you register your filter function, like so: This flag tells Django that if a “safe” string is passed into your filter, the result will still be “safe” and if a non-safe string is passed in, Django will automatically escape it, if necessary. You can think of this as meaning “this filter is safe – it doesn’t introduce any possibility of unsafe HTML.” The reason is necessary is because there are plenty of normal string operations that will turn a object back into a normal object and, rather than try to catch them all, which would be very difficult, Django repairs the damage after the filter has completed. For example, suppose you have a filter that adds the string to the end of any input. Since this introduces no dangerous HTML characters to the result (aside from any that were already present), you should mark your filter with : When this filter is used in a template where auto-escaping is enabled, Django will escape the output whenever the input is not already marked as “safe”. By default, is , and you can omit it from any filters where it isn’t required. Be careful when deciding if your filter really does leave safe strings as safe. If you’re characters, you might inadvertently leave unbalanced HTML tags or entities in the result. For example, removing a from the input might turn into , which would need to be escaped on output to avoid causing problems. Similarly, removing a semicolon ( ) can turn into , which is no longer a valid entity and thus needs further escaping. Most cases won’t be nearly this tricky, but keep an eye out for any problems like that when reviewing your code. Marking a filter will coerce the filter’s return value to a string. If your filter should return a boolean or other non-string value, marking it will probably have unintended consequences (such as converting a boolean False to the string ‘False’).\n• None Alternatively, your filter code can manually take care of any necessary escaping. This is necessary when you’re introducing new HTML markup into the result. You want to mark the output as safe from further escaping so that your HTML markup isn’t escaped further, so you’ll need to handle the input yourself. To mark the output as a safe string, use . Be careful, though. You need to do more than just mark the output as safe. You need to ensure it really safe, and what you do depends on whether auto-escaping is in effect. The idea is to write filters that can operate in templates where auto-escaping is either on or off in order to make things easier for your template authors. In order for your filter to know the current auto-escaping state, set the flag to when you register your filter function. (If you don’t specify this flag, it defaults to ). This flag tells Django that your filter function wants to be passed an extra keyword argument, called , that is if auto-escaping is in effect and otherwise. It is recommended to set the default of the parameter to , so that if you call the function from Python code it will have escaping enabled by default. For example, let’s write a filter that emphasizes the first character of a string: The flag and the keyword argument mean that our function will know whether automatic escaping is in effect when the filter is called. We use to decide whether the input data needs to be passed through or not. (In the latter case, we use the identity function as the “escape” function.) The function is like except it only escapes input that is not a instance. If a instance is passed to , the data is returned unchanged. Finally, in the above example, we remember to mark the result as safe so that our HTML is inserted directly into the template without further escaping. There’s no need to worry about the flag in this case (although including it wouldn’t hurt anything). Whenever you manually handle the auto-escaping issues and return a safe string, the flag won’t change anything either way. Django’s built-in filters have by default in order to get the proper autoescaping behavior and avoid a cross-site script vulnerability. In older versions of Django, be careful when reusing Django’s built-in filters as defaults to . You’ll need to pass to get autoescaping. For example, if you wanted to write a custom filter called that combined the and filters, the filter would look like: If you write a custom filter that operates on objects, you’ll usually register it with the flag set to : When this flag is set, if the first argument to your filter is a time zone aware datetime, Django will convert it to the current time zone before passing it to your filter when appropriate, according to .\n\nTags are more complex than filters, because tags can do anything. Django provides a number of shortcuts that make writing most types of tags easier. First we’ll explore those shortcuts, then explain how to write a tag from scratch for those cases when the shortcuts aren’t powerful enough. Many template tags take a number of arguments – strings or template variables – and return a result after doing some processing based solely on the input arguments and some external information. For example, a tag might accept a format string and return the time as a string formatted accordingly. To ease the creation of these types of tags, Django provides a helper function, . This function, which is a method of , takes a function that accepts any number of arguments, wraps it in a function and the other necessary bits mentioned above and registers it with the template system. Our function could thus be written like this: A few things to note about the helper function:\n• None Checking for the required number of arguments, etc., has already been done by the time our function is called, so we don’t need to do that.\n• None The quotes around the argument (if any) have already been stripped away, so we receive a plain string.\n• None If the argument was a template variable, our function is passed the current value of the variable, not the variable itself. Unlike other tag utilities, passes its output through if the template context is in autoescape mode, to ensure correct HTML and protect you from XSS vulnerabilities. If additional escaping is not desired, you will need to use if you are absolutely sure that your code does not contain XSS vulnerabilities. For building small HTML snippets, use of instead of is strongly recommended. If your template tag needs to access the current context, you can use the argument when registering your tag: Note that the first argument be called . For more information on how the option works, see the section on . If you need to rename your tag, you can provide a custom name for it: functions may accept any number of positional or keyword arguments. For example: Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (” ”) and must be provided after the positional arguments. For example: It’s possible to store the tag results in a template variable rather than directly outputting it. This is done by using the argument followed by the variable name. Doing so enables you to output the content yourself where you see fit: Another common type of template tag is the type that displays some data by rendering template. For example, Django’s admin interface uses custom template tags to display the buttons along the bottom of the “add/change” form pages. Those buttons always look the same, but the link targets change depending on the object being edited – so they’re a perfect case for using a small template that is filled with details from the current object. (In the admin’s case, this is the tag.) These sorts of tags are called “inclusion tags”. Writing inclusion tags is probably best demonstrated by example. Let’s write a tag that outputs a list of choices for a given object, such as was created in the . We’ll use the tag like this: …and the output will be something like this: First choice Second choice Third choice First, define the function that takes the argument and produces a dictionary of data for the result. The important point here is we only need to return a dictionary, not anything more complex. This will be used as a template context for the template fragment. Example: Next, create the template used to render the tag’s output. This template is a fixed feature of the tag: the tag writer specifies it, not the template designer. Following our example, the template is very short: Now, create and register the inclusion tag by calling the method on a object. Following our example, if the above template is in a file called in a directory that’s searched by the template loader, we’d register the tag like this: # Here, register is a django.template.Library instance, as before Alternatively it is possible to register the inclusion tag using a instance: Sometimes, your inclusion tags might require a large number of arguments, making it a pain for template authors to pass in all the arguments and remember their order. To solve this, Django provides a option for inclusion tags. If you specify in creating a template tag, the tag will have no required arguments, and the underlying Python function will have one argument – the template context as of when the tag was called. For example, say you’re writing an inclusion tag that will always be used in a context that contains and variables that point back to the main page. Here’s what the Python function would look like: Note that the first parameter to the function be called . In that line, we specified and the name of the template. Here’s what the template might look like: Then, any time you want to use that custom tag, load its library and call it without any arguments, like so: Note that when you’re using , there’s no need to pass arguments to the template tag. It automatically gets access to the context. The parameter defaults to . When it’s set to , the tag is passed the context object, as in this example. That’s the only difference between this case and the previous example. functions may accept any number of positional or keyword arguments. For example: Then in the template any number of arguments, separated by spaces, may be passed to the template tag. Like in Python, the values for keyword arguments are set using the equal sign (” ”) and must be provided after the positional arguments. For example: Sometimes the basic features for custom template tag creation aren’t enough. Don’t worry, Django gives you complete access to the internals required to build a template tag from the ground up. The template system works in a two-step process: compiling and rendering. To define a custom template tag, you specify how the compilation works and how the rendering works. When Django compiles a template, it splits the raw template text into ‘’nodes’’. Each node is an instance of and has a method. A compiled template is a list of objects. When you call on a compiled template object, the template calls on each in its node list, with the given context. The results are all concatenated together to form the output of the template. Thus, to define a custom template tag, you specify how the raw template tag is converted into a (the compilation function), and what the node’s method does. For each template tag the template parser encounters, it calls a Python function with the tag contents and the parser object itself. This function is responsible for returning a instance based on the contents of the tag. For example, let’s write a full implementation of our template tag, , that displays the current date/time, formatted according to a parameter given in the tag, in syntax. It’s a good idea to decide the tag syntax before anything else. In our case, let’s say the tag should be used like this: The parser for this function should grab the parameter and create a object: # split_contents() knows not to split quoted strings. tag's argument should be in quotes\"\n• None is the template parser object. We don’t need it in this example.\n• None is a string of the raw contents of the tag. In our example, it’s .\n• None The method separates the arguments on spaces while keeping quoted strings together. The more straightforward wouldn’t be as robust, as it would naively split on spaces, including those within quoted strings. It’s a good idea to always use .\n• None This function is responsible for raising , with helpful messages, for any syntax error.\n• None The exceptions use the variable. Don’t hard-code the tag’s name in your error messages, because that couples the tag’s name to your function. will ‘’always’’ be the name of your tag – even when the tag has no arguments.\n• None The function returns a with everything the node needs to know about this tag. In this case, it passes the argument – . The leading and trailing quotes from the template tag are removed in .\n• None The parsing is very low-level. The Django developers have experimented with writing small frameworks on top of this parsing system, using techniques such as EBNF grammars, but those experiments made the template engine too slow. It’s low-level because that’s fastest. The second step in writing custom tags is to define a subclass that has a method. Continuing the above example, we need to define :\n• None gets the from . Always pass any options/parameters/arguments to a via its .\n• None The method is where the work actually happens.\n• None should generally fail silently, particularly in a production environment. In some cases however, particularly if is , this method may raise an exception to make debugging easier. For example, several core tags raise if they receive the wrong number or type of arguments. Ultimately, this decoupling of compilation and rendering results in an efficient template system, because a template can render multiple contexts without having to be parsed multiple times. The output from template tags is not automatically run through the auto-escaping filters (with the exception of as described above). However, there are still a couple of things you should keep in mind when writing a template tag. If the method of your template tag stores the result in a context variable (rather than returning the result in a string), it should take care to call if appropriate. When the variable is ultimately rendered, it will be affected by the auto-escape setting in effect at the time, so content that should be safe from further escaping needs to be marked as such. Also, if your template tag creates a new context for performing some sub-rendering, set the auto-escape attribute to the current context’s value. The method for the class takes a parameter called that you can use for this purpose. For example: # ... Do something with new_context ... This is not a very common situation, but it’s useful if you’re rendering a template yourself. For example: If we had neglected to pass in the current value to our new in this example, the results would have been automatically escaped, which may not be the desired behavior if the template tag is used inside a block. Once a node is parsed, its method may be called any number of times. Since Django is sometimes run in multi-threaded environments, a single node may be simultaneously rendering with different contexts in response to two separate requests. Therefore, it’s important to make sure your template tags are thread safe. To make sure your template tags are thread safe, you should never store state information on the node itself. For example, Django provides a builtin template tag that cycles among a list of given strings each time it’s rendered: A naive implementation of might look something like this: But, suppose we have two templates rendering the template snippet from above at the same time: The CycleNode is iterating, but it’s iterating globally. As far as Thread 1 and Thread 2 are concerned, it’s always returning the same value. This is not what we want! To address this problem, Django provides a that’s associated with the of the template that is currently being rendered. The behaves like a Python dictionary, and should be used to store state between invocations of the method. Let’s refactor our implementation to use the : Note that it’s perfectly safe to store global information that will not change throughout the life of the as an attribute. In the case of , the argument doesn’t change after the is instantiated, so we don’t need to put it in the . But state information that is specific to the template that is currently being rendered, like the current iteration of the , should be stored in the . Notice how we used to scope the specific information within the . There may be multiple in a given template, so we need to be careful not to clobber another node’s state information. The easiest way to do this is to always use as the key into . If you’re keeping track of several state variables, make a dictionary. Finally, register the tag with your module’s instance, as explained in above. Example:\n• None The name of the template tag – a string. If this is left out, the name of the compilation function will be used.\n• None The compilation function – a Python function (not the name of the function as a string). As with filter registration, it is also possible to use this as a decorator: If you leave off the argument, as in the second example above, Django will use the function’s name as the tag name. Although you can pass any number of arguments to a template tag using , the arguments are all unpacked as string literals. A little more work is required in order to pass dynamic content (a template variable) to a template tag as an argument. While the previous examples have formatted the current time into a string and returned the string, suppose you wanted to pass in a from an object and have the template tag format that date-time: This post was last updated at .\n• None The string (without the surrounding quotes).\n• None The formatting string . The return value from will include the leading and trailing quotes for string literals like this. Now your tag should begin to look like this: # split_contents() knows not to split quoted strings. tag's argument should be in quotes\" You also have to change the renderer to retrieve the actual contents of the property of the object. This can be accomplished by using the class in . To use the class, instantiate it with the name of the variable to be resolved, and then call . So, for example: Variable resolution will throw a exception if it cannot resolve the string passed to it in the current context of the page. The above examples output a value. Generally, it’s more flexible if your template tags set template variables instead of outputting values. That way, template authors can reuse the values that your template tags create. To set a variable in the context, use dictionary assignment on the context object in the method. Here’s an updated version of that sets a template variable instead of outputting it: Note that returns the empty string. should always return string output. If all the template tag does is set a variable, should return the empty string. Here’s how you’d use this new version of the tag: Any variable set in the context will only be available in the same of the template in which it was assigned. This behavior is intentional; it provides a scope for variables so that they don’t conflict with context in other blocks. But, there’s a problem with : The variable name is hard-coded. This means you’ll need to make sure your template doesn’t use anywhere else, because the will blindly overwrite that variable’s value. A cleaner solution is to make the template tag specify the name of the output variable, like so: To do that, you’ll need to refactor both the compilation function and class, like so: # This version uses a regular expression to parse tag contents. # Splitting by None == splitting by spaces. tag's argument should be in quotes\" The difference here is that grabs the format string and the variable name, passing both to . Finally, if you only need to have a simple syntax for your custom context-updating template tag, consider using the shortcut, which supports assigning the tag results to a template variable. Template tags can work in tandem. For instance, the standard tag hides everything until . To create a template tag such as this, use in your compilation function. Here’s how a simplified tag might be implemented: The actual implementation of is slightly different in that it allows broken template tags to appear between and . It does so by calling instead of followed by , thus avoiding the generation of a node list. takes a tuple of names of block tags ‘’to parse until’’. It returns an instance of , which is a list of all objects that the parser encountered ‘’before’’ it encountered any of the tags named in the tuple. In in the above example, is a list of all nodes between the and , not counting and themselves. After is called, the parser hasn’t yet “consumed” the tag, so the code needs to explicitly call . returns an empty string. Anything between and is ignored. Parsing until another block tag, and saving contents¶ In the previous example, discarded everything between and . Instead of doing that, it’s possible to do something with the code between block tags. For example, here’s a custom template tag, , that capitalizes everything between itself and . This will appear in uppercase, . As in the previous example, we’ll use . But this time, we pass the resulting to the : The only new concept here is the in . For more examples of complex rendering, see the source code of in django/template/defaulttags.py and in django/template/smartif.py."
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/ref/templates/builtins",
        "document": "This document describes Django’s built-in template tags and filters. It is recommended that you use the , if available, as this will also include documentation for any custom tags or filters installed.\n\nControls the current auto-escaping behavior. This tag takes either or as an argument and that determines whether auto-escaping is in effect inside the block. The block is closed with an ending tag. When auto-escaping is in effect, all content derived from variables has HTML escaping applied before placing the result into the output (but after any filters are applied). This is equivalent to manually applying the filter to each variable. The only exceptions are variables already marked as “safe” from escaping. Variables could be marked as “safe” by the code which populated the variable, by applying the or filters, or because it’s the result of a previous filter that marked the string as “safe”. Within the scope of disabled auto-escaping, chaining filters, including , may cause unexpected (but documented) results such as the following: The above code will output the joined elements of unescaped. This is because the filter chaining sequence executes first on (without applying escaping to each item since is ), marking the result as safe. Subsequently, this safe result will be fed to filter, which does not apply a second round of escaping. In order to properly escape every element in a sequence, use the filter: Defines a block that can be overridden by child templates. See for more information. Ignores everything between and . An optional note may be inserted in the first tag. For example, this is useful when commenting out code for documenting why the code was disabled. Rendered text with Commented out text with This tag is used for CSRF protection, as described in the documentation for . Produces one of its arguments each time this tag is encountered. The first argument is produced on the first encounter, the second argument on the second encounter, and so forth. Once all arguments are exhausted, the tag cycles to the first argument and produces it again. This tag is particularly useful in a loop: The first iteration produces HTML that refers to class , the second to , the third to again, and so on for each iteration of the loop. You can use variables, too. For example, if you have two template variables, and , you can alternate between their values like this: Variables included in the cycle will be escaped. You can disable auto-escaping with: You can mix variables and strings: In some cases you might want to refer to the current value of a cycle without advancing to the next value. To do this, give the tag a name, using “as”, like this: From then on, you can insert the current value of the cycle wherever you’d like in your template by referencing the cycle name as a context variable. If you want to move the cycle to the next value independently of the original tag, you can use another tag and specify the name of the variable. So, the following template: You can use any number of values in a tag, separated by spaces. Values enclosed in single quotes ( ) or double quotes ( ) are treated as string literals, while values without quotes are treated as template variables. By default, when you use the keyword with the cycle tag, the usage of that initiates the cycle will itself produce the first value in the cycle. This could be a problem if you want to use the value in a nested loop or an included template. If you only want to declare the cycle but not produce the first value, you can add a keyword as the last keyword in the tag. For example: This will output a list of elements with alternating between and . The subtemplate will have access to in its context and the value will match the class of the that encloses it. If the keyword were to be omitted, and would be emitted as normal text, outside the element. When the silent keyword is used on a cycle definition, the silence automatically applies to all subsequent uses of that specific cycle tag. The following template would output , even though the second call to doesn’t specify : You can use the tag to make a tag restart from its first value when it’s next encountered. Outputs a whole load of debugging information, including the current context and imported modules. outputs nothing when the setting is . This tag can be used in two ways:\n• None (with quotes) uses the literal value as the name of the parent template to extend.\n• None uses the value of . If the variable evaluates to a string, Django will use that string as the name of the parent template. If the variable evaluates to a object, Django will use that object as the parent template. See for more information. Normally the template name is relative to the template loader’s root directory. A string argument may also be a relative path starting with or . For example, assume the following directory structure: In , the following paths would be valid: Filters the contents of the block through one or more filters. Multiple filters can be specified with pipes and filters can have arguments, just as in variable syntax. Note that the block includes the text between the and tags. This text will be HTML-escaped, and will appear in all lowercase. The and filters are not acceptable arguments. Instead, use the tag to manage autoescaping for blocks of template code. Outputs the first argument variable that is not “false” (i.e. exists, is not empty, is not a false boolean value, and is not a zero numeric value). Outputs nothing if all the passed variables are “false”. You can also use a literal string as a fallback value in case all passed variables are False: This tag auto-escapes variable values. You can disable auto-escaping with: Or if only some variables should be escaped, you can use: You can use the syntax to store the output inside a variable. Loops over each item in an array, making the item available in a context variable. For example, to display a list of athletes provided in : You can loop over a list in reverse by using . If you need to loop over a list of lists, you can unpack the values in each sublist into individual variables. For example, if your context contains a list of (x,y) coordinates called , you could use the following to output the list of points: There is a point at , This can also be useful if you need to access the items in a dictionary. For example, if your context contained a dictionary , the following would display the keys and values of the dictionary: Keep in mind that for the dot operator, dictionary key lookup takes precedence over method lookup. Therefore if the dictionary contains a key named , will return instead of . Avoid adding keys that are named like dictionary methods if you want to use those methods in a template ( , , , etc.). Read more about the lookup order of the dot operator in the . The for loop sets a number of variables available within the loop: The current iteration of the loop (1-indexed) The current iteration of the loop (0-indexed) The number of iterations from the end of the loop (1-indexed) The number of iterations from the end of the loop (0-indexed) True if this is the first time through the loop True if this is the last time through the loop For nested loops, this is the loop surrounding the current one The tag can take an optional clause whose text is displayed if the given array is empty or could not be found: Sorry, no athletes in this list. The above is equivalent to – but shorter, cleaner, and possibly faster than – the following: Sorry, no athletes in this list. The tag evaluates a variable, and if that variable is “true” (i.e. exists, is not empty, and is not a false boolean value) the contents of the block are output: Number of athletes: Athletes should be out of the locker room soon! No athletes. In the above, if is not empty, the number of athletes will be displayed by the variable. As you can see, the tag may take one or several clauses, as well as an clause that will be displayed if all previous conditions fail. These clauses are optional. tags may use , or to test a number of variables or to negate a given variable: Both athletes and coaches are available. There are no athletes. There are some athletes or some coaches. There are no athletes or there are some coaches. There are some athletes and absolutely no coaches. Use of both and clauses within the same tag is allowed, with having higher precedence than e.g.: will be interpreted like: Use of actual parentheses in the tag is invalid syntax. If you need them to indicate precedence, you should use nested tags. tags may also use the operators , , , , , , , , , and which work as follows: This appears if variable somevar equals the string \"x\" This appears if variable somevar does not equal the string \"x\", or if somevar is not found in the context This appears if variable somevar is less than 100. This appears if variable somevar is greater than 0. Less than or equal to. Example: This appears if variable somevar is less than 100 or equal to 100. Greater than or equal to. Example: This appears if variable somevar is greater than 1 or equal to 1. Contained within. This operator is supported by many Python containers to test whether the given value is in the container. The following are some examples of how will be interpreted: This appears since \"bc\" is a substring of \"abcdef\" If greetings is a list or set, one element of which is the string \"hello\", this will appear. If users is a QuerySet, this will appear if user is an instance that belongs to the QuerySet. Not contained within. This is the negation of the operator. Object identity. Tests if two values are the same object. Example: This appears if and only if somevar is True. This appears if somevar is None, or if somevar is not found in the context. Negated object identity. Tests if two values are not the same object. This is the negation of the operator. Example: This appears if somevar is not True, or if somevar is not found in the context. This appears if and only if somevar is not None. You can also use filters in the expression. For example: You have lots of messages today! All of the above can be combined to form complex expressions. For such expressions, it can be important to know how the operators are grouped when the expression is evaluated - that is, the precedence rules. The precedence of the operators, from lowest to highest, is as follows: (This follows Python exactly). So, for example, the following complex tag: If you need different precedence, you will need to use nested tags. Sometimes that is better for clarity anyway, for the sake of those who do not know the precedence rules. The comparison operators cannot be ‘chained’ like in Python or in mathematical notation. For example, instead of using: Check if a value has changed from the last iteration of a loop. The block tag is used within a loop. It has two possible uses.\n• None Checks its own rendered contents against its previous state and only displays the content if it has changed. For example, this displays a list of days, only displaying the month if it changes:\n• None If given one or more variables, check whether any variable has changed. For example, the following shows the date every time it changes, while showing the hour if either the hour or the date has changed: The tag can also take an optional clause that will be displayed if the value has not changed: Loads a template and renders it with the current context. This is a way of “including” other templates within a template. The template name can either be a variable or a hard-coded (quoted) string, in either single or double quotes. This example includes the contents of the template : Normally the template name is relative to the template loader’s root directory. A string argument may also be a relative path starting with or as described in the tag. This example includes the contents of the template whose name is contained in the variable : The variable may also be any object with a method that accepts a context. This allows you to reference a compiled in your context. Additionally, the variable may be an iterable of template names, in which case the first that can be loaded will be used, as per . An included template is rendered within the context of the template that includes it. This example produces the output :\n• None Context: variable is set to and variable is set to . You can pass additional context to the template using keyword arguments: If you want to render the context only with the variables provided (or even no variables at all), use the option. No other variables are available to the included template: The tag should be considered as an implementation of “render this subtemplate and include the HTML”, not as “parse this subtemplate and include its contents as if it were part of the parent”. This means that there is no shared state between included templates – each include is a completely independent rendering process. Blocks are evaluated they are included. This means that a template that includes blocks from another will contain blocks that have already been evaluated and rendered - not blocks that can be overridden by, for example, an extending template. For example, the following template would load all the tags and filters registered in and located in package : You can also selectively load individual filters or tags from a library, using the argument. In this example, the template tags/filters named and will be loaded from : See for more information. Displays random “lorem ipsum” Latin text. This is useful for providing sample data in templates. The tag can be used with zero, one, two or three arguments. The arguments are: A number (or variable) containing the number of paragraphs or words to generate (default is 1). Either for words, for HTML paragraphs or for plain-text paragraph blocks (default is ). The word , which if given, does not use the common paragraph (“Lorem ipsum dolor sit amet…”) when generating text.\n• None will output the common “lorem ipsum” paragraph and two random paragraphs each wrapped in HTML tags. Displays the current date and/or time, using a format according to the given string. Such string can contain format specifiers characters as described in the filter section. Note that you can backslash-escape a format string if you want to use the “raw” value. In this example, both “o” and “f” are backslash-escaped, because otherwise each is a format string that displays the year and the time, respectively: It is the This would display as “It is the 4th of September”. The format passed can also be one of the predefined ones , , or . The predefined formats may vary depending on the current locale and if is enabled, e.g.: You can also use the syntax to store the output (as a string) inside a variable. This is useful if you want to use inside a template tag like for example: This tag requires a instance, which defaults to if none is provided. If the is empty and no additional parameters are provided, an empty string is returned. Otherwise, the result includes a leading . To use as the default instance, the context processor should be enabled. If it’s not enabled, you must either explicitly pass the object into the template context, or provide a instance to this tag. Outputs the current query string verbatim. So if the query string is , the output would be . Outputs the current query string with the addition of the parameter. Following the previous example, the output would be . You can provide a custom to be used instead of . So if is , this outputs . Adds or modifies parameters in the query string. Each keyword argument will be added to the query string, replacing any existing value for that key. For instance, if the current query string is , the output will be . Passing as the value removes the parameter from the query string. For example, if the current query string is , the output will be . If is , the output will be , preserving the list structure in the query string. A common example of using this tag is to preserve the current query string when displaying a page of results, while adding a link to the next and previous pages of results. For example, if the paginator is currently on page 3, and the current query string is , the following code would output : You can also store the value in a variable. For example, if you need multiple links to the same page, define it as: This complex tag is best illustrated by way of an example: say that is a list of cities represented by dictionaries containing , , and keys: …and you’d like to display a hierarchical list that is ordered by country, like this: You can use the tag to group the list of cities by country. The following snippet of template code would accomplish this: Let’s walk through this example. takes three arguments: the list you want to regroup, the attribute to group by, and the name of the resulting list. Here, we’re regrouping the list by the attribute and calling the result . produces a list (in this case, ) of group objects. Group objects are instances of with two fields:\n• None – the item that was grouped by (e.g., the string “India” or “Japan”).\n• None – a list of all items in this group (e.g., a list of all cities with country=’India’). Because produces objects, you can also write the previous example as: Note that does not order its input! Our example relies on the fact that the list was ordered by in the first place. If the list did order its members by , the regrouping would naively display more than one group for a single country. For example, say the list was set to this (note that the countries are not grouped together): With this input for , the example template code above would result in the following output: The easiest solution to this gotcha is to make sure in your view code that the data is ordered according to how you want to display it. Another solution is to sort the data in the template using the filter, if your data is in a list of dictionaries: Any valid template lookup is a legal grouping attribute for the regroup tag, including methods, attributes, dictionary keys and list items. For example, if the “country” field is a foreign key to a class with an attribute “description,” you could use: Or, if is a field with , it will have a method available as an attribute, allowing you to group on the display string rather than the key: will now display the value fields from the set rather than the keys. Resets a previous cycle so that it restarts from its first item at its next encounter. Without arguments, will reset the last defined in the template. This example would return this HTML: Notice how the first block ends with and the new one starts with . Without the tag, the second block would start with . You can also reset named cycle tags: In this example, we have both the alternating odd/even rows and a “major” row every fifth row. Only the five-row cycle is reset when a category changes. Removes whitespace between HTML tags. This includes tab characters and newlines. This example would return this HTML: Only space between is removed – not space between tags and text. In this example, the space around won’t be stripped: Outputs one of the syntax characters used to compose template tags. The template system has no concept of “escaping” individual characters. However, you can use the tag to display one of the template tag character combinations. The argument tells which template bit to output: See also the tag for another way of including these characters. Returns an absolute path reference (a URL without the domain name) matching a given view and optional parameters. Any special characters in the resulting path will be encoded using . This is a way to output links without violating the DRY principle by having to hard-code URLs in your templates: The first argument is a . It can be a quoted literal or any other context variable. Additional arguments are optional and should be space-separated values that will be used as arguments in the URL. The example above shows passing positional arguments. Alternatively you may use keyword syntax: Do not mix both positional and keyword syntax in a single call. All arguments required by the URLconf should be present. For example, suppose you have a view, , whose URLconf takes a client ID (here, is a method inside the views file ). The URLconf line might look like this: If this app’s URLconf is included into the project’s URLconf under a path such as this: …then, in a template, you can create a link to this view like this: The template tag will output the string . Note that if the URL you’re reversing doesn’t exist, you’ll get an exception raised, which will cause your site to display an error page. If you’d like to retrieve a URL without displaying it, you can use a slightly different call: The scope of the variable created by the syntax is the in which the tag appears. This syntax will cause an error if the view is missing. In practice you’ll use this to link to views that are optional: If you’d like to retrieve a namespaced URL, specify the fully qualified name: This will follow the normal , including using any hints provided by the context as to the current application. Don’t forget to put quotes around the URL pattern , otherwise the value will be interpreted as a context variable! Stops the template engine from rendering the contents of this block tag. A common use is to allow a JavaScript template layer that collides with Django’s syntax. For example: You can also designate a specific closing tag, allowing the use of as part of the unrendered contents: For creating bar charts and such, this tag calculates the ratio of a given value to a maximum value, and then applies that ratio to a constant. If is 175, is 200, and is 100, the image in the above example will be 88 pixels wide (because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88). In some cases you might want to capture the result of in a variable. It can be useful, for instance, in a like this: Caches a complex variable under a simpler name. This is useful when accessing an “expensive” method (e.g., one that hits the database) multiple times. The populated variable (in the example above, ) is only available between the and tags. You can assign more than one context variable: The previous more verbose format is still supported:\n\nAdds the argument to the value. If is , then the output will be . This filter will first try to coerce both values to integers. If this fails, it’ll attempt to add the values together anyway. This will work on some data types (strings, list, etc.) and fail on others. If it fails, the result will be an empty string. and is and is , then the output will be . Strings that can be coerced to integers will be summed, not concatenated, as in the first example above. Adds slashes before quotes. Useful for escaping strings in CSV, for example. If is , the output will be . Capitalizes the first character of the value. If the first character is not a letter, this filter has no effect. If is , the output will be . Centers the value in a field of a given width. If is , the output will be . Removes all values of arg from the given string. If is , the output will be . Formats a date according to the given format. Uses a similar format to PHP’s date() function with some differences. These format characters are not used in Django outside of templates. They were designed to be compatible with PHP to ease transitioning for designers. Day of the month, 2 digits with leading zeros. Day of the month without leading zeros. English ordinal suffix for day of the month, 2 characters. Day of the week, digits without leading zeros. ISO-8601 week number of year, with weeks starting on Monday. Month, locale specific alternative representation usually used for long date representation. Number of days in the given month. ISO-8601 week-numbering year, corresponding to the ISO-8601 week number (W) which uses leap weeks. See Y for the more common year format. or (Note that this is slightly different than PHP’s output, because this includes periods to match Associated Press style.) Time, in 12-hour hours and minutes, with minutes left off if they’re zero. Proprietary extension. Time, in 12-hour hours, minutes and ‘a.m.’/’p.m.’, with minutes left off if they’re zero and the special-case strings ‘midnight’ and ‘noon’ if appropriate. Proprietary extension. Timezone name. Could be in any format, or might return an empty string, depending on the datetime. Daylight saving time, whether it’s in effect or not. Time zone offset in seconds. The offset for timezones west of UTC is always negative, and for those east of UTC is always positive. ISO 8601 format. (Note: unlike other formatters, such as “Z”, “O” or “r”, the “c” formatter will not add timezone offset if value is a naive datetime (see ). , or if the datetime is naive If is a object (e.g., the result of ), the output will be the string . The format passed can be one of the predefined ones , , or , or a custom format that uses the format specifiers shown in the table above. Note that predefined formats may vary depending on the current locale. Assuming that is, for example, , then for: the output would be the string (the format specifier for the locale as shipped with Django is ). When used without a format string, the format specifier is used. Assuming the same settings as the previous example: outputs (the format specifier for the locale is ). Both “d” and “e” are backslash-escaped, because otherwise each is a format string that displays the day and the timezone name, respectively. You can combine with the filter to render a full representation of a value. E.g.: If value evaluates to , uses the given default. Otherwise, uses the value. If is (the empty string), the output will be . If (and only if) value is , uses the given default. Otherwise, uses the value. Note that if an empty string is given, the default value will be used. Use the filter if you want to fallback for empty strings. If is , the output will be . Takes a list of dictionaries and returns that list sorted by the key given in the argument. then the output would be: You can also do more complicated things like: then the output would be: can also order a list of lists (or any other object implementing ) by elements at specified index. For example: then the output would be: You must pass the index as an integer rather than a string. The following produce empty output: Ordering by elements at specified index is not supported on dictionaries. Takes a list of dictionaries and returns that list sorted in reverse order by the key given in the argument. This works exactly the same as the above filter, but the returned value will be in reverse order. Returns if the value is divisible by the argument. If is , the output would be .\n• None (single quote) is converted to\n• None (double quote) is converted to Applying to a variable that would normally have auto-escaping applied to the result will only result in one round of escaping being done. So it is safe to use this function even in auto-escaping environments. If you want multiple escaping passes to be applied, use the filter. For example, you can apply to fields when is off: As mentioned in the section, when filters including are chained together, it can result in unexpected outcomes if preceding filters mark a potentially unsafe string as safe due to the lack of escaping caused by being . In such cases, chaining would not reescape strings that have already been marked as safe. This is especially important when using filters that operate on sequences, for example . If you need to escape each element in a sequence, use the dedicated filter. Escapes characters for use as a whole JavaScript string literal, within single or double quotes, as below. This filter does not make the string safe for use in (the JavaScript backtick syntax). Any other uses not listed above are not supported. It is generally recommended that data should be passed using HTML attributes, or the filter, rather than in embedded JavaScript. Applies the filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as . For example: Formats the value like a ‘human-readable’ file size (i.e. , , , etc.). If is 123456789, the output would be . Strictly speaking, does not conform to the International System of Units which recommends using KiB, MiB, GiB, etc. when byte sizes are calculated in powers of 1024 (which is the case here). Instead, Django uses traditional unit names (KB, MB, GB, etc.) corresponding to names that are more commonly used. Returns the first item in a list. If is the list , the output will be . When used without an argument, rounds a floating-point number to one decimal place – but only if there’s a decimal part to be displayed. For example: If used with a numeric integer argument, rounds a number to that many decimal places. For example: Particularly useful is passing 0 (zero) as the argument which will round the float to the nearest integer. If the argument passed to is negative, it will round a number to that many decimal places – but only if there’s a decimal part to be displayed. For example: If the argument passed to has the suffix, it will force grouping by the for the active locale. For example, when the active locale is (English): Output is always localized (independently of the tag) unless the argument passed to has the suffix, which will force disabling localization. For example, when the active locale is (Polish): Using with no argument is equivalent to using with an argument of . Applies HTML escaping to a string (see the filter for details). This filter is applied and returns a new, escaped string. This is useful in the rare cases where you need multiple escaping or want to apply other filters to the escaped results. Normally, you want to use the filter. For example, if you want to catch the HTML elements created by the filter: Given a whole number, returns the requested digit, where 1 is the right-most digit, 2 is the second-right-most digit, etc. Returns the original value for invalid input (if input or argument is not an integer, or if argument is less than 1). Otherwise, output is always an integer. If is , the output will be . Converts an IRI (Internationalized Resource Identifier) to a string that is suitable for including in a URL. This is necessary if you’re trying to use strings containing non-ASCII characters in a URL. It’s safe to use this filter on a string that has already gone through the filter. If is , the output will be . If is the list , the output will be the string . Safely outputs a Python object as JSON, wrapped in a tag, ready for use with JavaScript. Argument: The optional HTML “id” of the tag. If is the dictionary , the output will be: The resulting data can be accessed in JavaScript like this: XSS attacks are mitigated by escaping the characters “<”, “>” and “&”. For example if is , the output is: This is compatible with a strict Content Security Policy that prohibits in-page script execution. It also maintains a clean separation between passive data and executable code. Returns the last item in a list. If is the list , the output will be the string . Returns the length of the value. This works for both strings and lists. If is or , the output will be . The filter returns for an undefined variable. Replaces line breaks in plain text with appropriate HTML; a single newline becomes an HTML line break ( ) and a new line followed by a blank line becomes a paragraph break ( ). If is , the output will be . Converts all newlines in a piece of plain text to HTML line breaks ( ). If is , the output will be . one two three 1. one 2. two 3. three Left-aligns the value in a field of a given width. If is , the output will be . If is , the output will be . Returns the value turned into a list. For a string, it’s a list of characters. For an integer, the argument is cast to a string before creating a list. If is the string , the output would be the list . If is , the output will be the list . Converts a phone number (possibly containing letters) to its numerical equivalent. The input doesn’t have to be a valid phone number. This will happily convert any string. If is , the output will be . Returns a plural suffix if the value is not , , or an object of length 1. By default, this suffix is . If is , the output will be If is the output will be For words that require a suffix other than , you can provide an alternate suffix as a parameter to the filter. For words that don’t pluralize by simple suffix, you can specify both a singular and plural suffix, separated by a comma. A wrapper around – for debugging, really. Returns a random item from the given list. If is the list , the output could be . Right-aligns the value in a field of a given width. If is , the output will be . Marks a string as not requiring further HTML escaping prior to output. When autoescaping is off, this filter has no effect. If you are chaining filters, a filter applied after can make the contents unsafe again. For example, the following code prints the variable as is, unescaped: Applies the filter to each element of a sequence. Useful in conjunction with other filters that operate on sequences, such as . For example: You couldn’t use the filter directly in this case, as it would first convert the variable into a string, rather than working with the individual elements of the sequence. Uses the same syntax as Python’s list slicing. See the Python documentation for an introduction. If is , the output will be . Converts to ASCII. Converts spaces to hyphens. Removes characters that aren’t alphanumerics, underscores, or hyphens. Converts to lowercase. Also strips leading and trailing whitespace. If is , the output will be . Formats the variable according to the argument, a string formatting specifier. This specifier uses the syntax, with the exception that the leading “%” is dropped. If is , the output will be . Makes all possible efforts to strip all [X]HTML tags. If is , the output will be . Note that doesn’t give any guarantee about its output being HTML safe, particularly with non valid HTML input. So NEVER apply the filter to a output. If you are looking for something more robust, consider using a third-party HTML sanitizing tool. Formats a time according to the given format. Given format can be the predefined one , or a custom format, same as the filter. Note that the predefined format is locale-dependent. If is equivalent to , the output will be the string . Note that you can backslash-escape a format string if you want to use the “raw” value. In this example, both “h” and “m” are backslash-escaped, because otherwise each is a format string that displays the hour and the month, respectively: This would display as “01h 23m”. Assuming that is, for example, , then for: the output will be the string (The format specifier for the locale as shipped with Django is ). The filter will only accept parameters in the format string that relate to the time of day, not the date. If you need to format a value, use the filter instead (or along with if you need to render a full value). There is one exception the above rule: When passed a value with attached timezone information (a instance) the filter will accept the timezone-related , , and . When used without a format string, the format specifier is used: Formats a date as the time since that date (e.g., “4 days, 6 hours”). Takes an optional argument that is a variable containing the date to use as the comparison point (without the argument, the comparison point is ). For example, if is a date instance representing midnight on 1 June 2006, and is a date instance for 08:00 on 1 June 2006, then the following would return “8 hours”: Comparing offset-naive and offset-aware datetimes will return an empty string. Minutes is the smallest unit used, and “0 minutes” will be returned for any date that is in the future relative to the comparison point. Similar to , except that it measures the time from now until the given date or datetime. For example, if today is 1 June 2006 and is a date instance holding 29 June 2006, then will return “4 weeks”. Takes an optional argument that is a variable containing the date to use as the comparison point (instead of ). If contains 22 June 2006, then the following will return “1 week”: Comparing offset-naive and offset-aware datetimes will return an empty string. Minutes is the smallest unit used, and “0 minutes” will be returned for any date that is in the past relative to the comparison point. Converts a string into titlecase by making words start with an uppercase character and the remaining characters lowercase. This tag makes no effort to keep “trivial words” in lowercase. If is , the output will be . Truncates a string if it is longer than the specified number of characters. Truncated strings will end with a translatable ellipsis character (”…”). Argument: Number of characters to truncate to If is , the output will be . Similar to , except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point are closed immediately after the truncation. If is , the output will be . Newlines in the HTML content will be preserved. Processing large, potentially malformed HTML strings can be resource-intensive and impact service performance. limits input to the first five million characters. In older versions, strings over five million characters were processed. Truncates a string after a certain number of words. Argument: Number of words to truncate after If is , the output will be . Newlines within the string will be removed. Similar to , except that it is aware of HTML tags. Any tags that are opened in the string and not closed before the truncation point, are closed immediately after the truncation. This is less efficient than , so should only be used when it is being passed HTML text. If is , the output will be . Newlines in the HTML content will be preserved. Processing large, potentially malformed HTML strings can be resource-intensive and impact service performance. limits input to the first five million characters. In older versions, strings over five million characters were processed. Recursively takes a self-nested list and returns an HTML unordered list – WITHOUT opening and closing tags. The list is assumed to be in the proper format. For example, if contains , then would return: If is , the output will be . Escapes a value for use in a URL. If is , the output will be . An optional argument containing the characters which should not be escaped can be provided. If not provided, the ‘/’ character is assumed safe. An empty string can be provided when characters should be escaped. For example: If is , the output will be . Converts URLs and email addresses in text into clickable links. This template tag works on links prefixed with , , or . For example, will get converted but won’t. It also supports domain-only links ending in one of the original top level domains ( , , , , , , and ). For example, gets converted. Links can have trailing punctuation (periods, commas, close-parens) and leading punctuation (opening parens), and will still do the right thing. Links generated by have a attribute added to them. If is , the output will be . In addition to web links, also converts email addresses into links. If is , the output will be . The filter also takes an optional parameter . If is , the link text and URLs will be escaped using Django’s built-in filter. The default value for is . If is applied to text that already contains HTML markup, or to email addresses that contain single quotes ( ), things won’t work as expected. Apply this filter only to plain text. Converts URLs and email addresses into clickable links just like urlize, but truncates URLs longer than the given character limit. Argument: Number of characters that link text should be truncated to, including the ellipsis that’s added if truncation is necessary. If is , the output would be . As with urlize, this filter should only be applied to plain text. If is , the output will be . Argument: number of characters at which to wrap the text If is , the output would be: Maps values for , , and (optionally) , to the strings “yes”, “no”, “maybe”, or a custom mapping passed as a comma-separated list, and returns one of those strings according to the value:"
    },
    {
        "link": "https://realpython.com/django-template-custom-tags-filters",
        "document": "Django templates help you manage your web application’s HTML. Templates use a mini-language with variables, tags, and filters. You can conditionally include blocks, create loops, and modify variables before they’re shown. Django comes with many built-in tags and filters, but what if they’re not enough? In that case, write your own! This tutorial covers the ins and outs of writing your own Django template custom tags and filters.\n\nIn this tutorial, you’ll learn how to:\n• Understand how autoescaping works in custom tags and filters\n• Use to render a tag based on a subtemplate\n\nBy the end of the tutorial, you’ll be able to write custom filters to modify data in your templates and custom tags that give you access to the full power of Python within your templates.\n\nTo play around with your own Django template custom tags and filters, you’re going to need a Django project. You’ll build dinosoar, a small website with all sorts of dinosaur info. Although the name implies that you’ll only include flying dinos, that’s just for marketing spin. All your favorite heavyweights will be there as well. If you’ve never set up a Django project before or if you need a refresher, you may want to read Get Started With Django Part 1: Build a Portfolio App first. Django is a third-party library, so it should be installed in a virtual environment. If you’re new to virtual environments, check out Python Virtual Environments: A Primer. Create and activate a new virtual environment for yourself and then run the following commands: These commands perform the following actions:\n• Line 3 changes the current working directory to the project.\n• Line 4 uses the command to create a Django app called , where your main view will live.\n• Line 5 migrates any database changes. Even if you aren’t creating models, this line is necessary because the Django admin is active by default. With the project created, it’s time to make some configuration changes and write a quick view to help you test your custom tags and filters. You need to make some changes to your project’s settings to make Django aware of your newly created app and to configure your templates. Edit and add to the list: Within the same file, you’ll need to update the value in the attribute. This tells Django where to look for your template files: Starting with Django 3.1, the value that specifies where the project lives is a object. The change to the value above tells Django to look in a subdirectory within your project directory. Note: If you use Django 3.0 or earlier, you’ll set using the module. In that case, use to specify the path. With the settings changed, don’t forget to create the directory within your project: It’s time to start writing some code. To test your custom template tags and filters, you’ll need a view. Edit as follows: Lines 7 to 15 create a dictionary with some sample data. You’ll use this in your templates to test your tags and filters. The rest of this view does something a little unorthodox: it takes a parameter that specifies the name of a template. The function loads and renders a template. Here, the value gets suffixed with , turning it into the name of a template to load. This is not something you’d normally do, but the rest of this article shows you a lot of templates. Rather than having to write a new view for each experiment, this single view will accomplish the task. The last step before writing a template is to register your view as a URL. Edit so that it looks like this: Line 8 registers the URL with the view. This URL expects an argument called , which will be turned into the name of the template to load inside the view. With the view in place, you’re all set to render some HTML. The next step is to create a template. Most HTML pages are rather repetitive, containing boilerplate header information, meta-info about the page, and navigation tools. Django templates use the power of inheritance to minimize the repetition. To see this in action, create : By defining blocks and extending parent templates, you can avoid a lot of the cookie-cutter duplication that often happens in HTML files across a site. The template above is a base for all future templates in this tutorial. Many of the examples in this tutorial will be in their own template files. You’ll be creating each one, and each will inherit from the base file above. The first example child file you need to create is : Eoraptor Eoraptor was one of the earliest dinosaurs and its name is based on the Greek word for \"dawn\". Add something about height here Some other popular dinosaurs were: This template uses a few common built-in template tags and filters:\n• Line 3 declares that this template inherits from by using the tag.\n• Lines 5 and 27 declare a block called . During the rendering of , the template engine looks for a block with the same name in its parent. The engine replaces the corresponding block in .\n• Line 13 uses the tag to write a comment. The rendered output will not include the contents of this tag.\n• Lines 21 and 23 define a block tag. This works like a loop in Python. It iterates over the value and renders the line within the block for each member.\n• Line 22 is rendered once for each item in the list. Each value gets put inside HTML tags. Note the filter used with the value. Filters get applied to a value through the pipe ( ) symbol. Filters use a value and then modify the rendered result. The filter is similar to the method in Python, rendering the value as lowercase. Everything is in place now. Run the Django development server to see the result: To see the view, visit . Your result should look like this: The comment has disappeared, and the list of dinosaurs is in lowercase. You can find more information by going over the Django documentation about built-in template tags and filters or by checking out Django Templates: Built-In Tags and Filters. There are over seventy-five tags and filters built into Django and several modules on top of that, but that still might not be enough for your use case. But before writing your own custom tags and filters, you should first do some research to see if another package meets your needs. To use a tag or filter that comes with Django but isn’t in the standard set, you need to:\n• Load the template library into your template Many third-party packages are available as well. Using a third-party package is no different, except that you’d need to install the package first using . A popular package that comes with Django but isn’t part of the built-in library is . This library has filters that change numeric data into more readable forms. Because it ships as part of the module in Django, there’s no additional installation step. To register the app, update your list in : Iguanodon Iguanodon (iguana-tooth) were large herbivores. They weighed kg ( lbs). Wow, grams is a lot! The key to using a tag or filter that isn’t built-in is the tag you use on line 4. This is the equivalent of an statement in your Python code. The template uses two filters from :\n• converts a number into a string with a comma every three digits. Visit to see the result: There are a lot of tags in Django, both built-in and included in the module. There are even more third-party libraries out there. But what if you can’t find something that solves your problem? It’s time to do it yourself by writing some Django custom tags and filters. Custom tags and filters live in your Django app in a directory. You can import any files in this directory into a template using the tag. The name of the module you create will be the name you use to load the tag library. For this project, the structure will look like this: This directory is a module like any other Python code, so it requires the file. The file will contain all the code for your custom tags and filters. As you’ll soon explore more, filters are functions. Tags can be either functions or classes, depending on their complexity. Just writing the functions and classes isn’t sufficient—you also need to register the code with Django. Registration requires an instance of a class, which you can then use as a decorator to wrap your tags and filters. The following code is a simplified version of the built-in filter : Think about how this example works:\n• Line 3 creates an instance of used for registration.\n• Line 5 uses the instance’s method as a decorator. This tells Django that the function is a filter.\n• Lines 6 to 7 define the function implementing the filter. The filtered value is the first argument to the function. This implementation assumes the value is a string. The string’s method gets called and the result returned. What you return from your filter function gets rendered in the template. The object provides methods for registering tags and filters. You may call these methods directly, but the better way is to use them as decorators. Decorating the function makes it clear to other programmers that it’s registered as a tag or filter.\n\nYou set up your project and wrote a view to use for testing. Then, you used built-in tags and filters as well as loaded tags from a library. In the previous section, you learned how to register tags and filters. In this section, you’re all set to write your first Django custom filter! As mentioned previously, filters are Python functions. The most basic filters take a single argument: the value to filter. The result of a filter function gets rendered by the template engine. To get started, you’ll write a filter that renders a string composed of the first letter of each item in a list. If you haven’t already, you’ll need to set up your template tag file: With the structure in place, either create or edit the template tag file called : The code above registers a filter called . The function expects an iterable, like a list. It iterates over the list and builds the string. If the value to filter is a list of strings, then is the first letter of each of those strings. To use this filter in action, create : Velociraptor The Velociraptor (swift seizer) was made famous by their appearance in the movie Jurassic Park . Unlike in the movie, these dinosaurs were smaller, about the size of a turkey. They shared something else with turkeys: they likely had feathers. The first letters of our dinosaur variable are . With your template in place, visit to see the result: Recall from that the value is a list containing , , , and . The result above is the first letter of each of these mighty reptiles: . Filters can also take arguments. Now you’ll augment the power of by writing a filter that returns the n-th letter of each item in an iterable. Add this function to : There are a few new things going on here:\n• Line 25 adds the argument to the decorator. This makes the filter’s name in the template different from the implementing function. Here, the filter gets named even though the function that implements it is . Note that indicates to Django that the output of this filter doesn’t contain characters that will break HTML. You’ll explore more about this below.\n• Line 26 defines the function. The value to filter is the first argument, and the filter’s parameter is the second.\n• Lines 28 to 32 iterate over the value and build the resulting string.\n• Line 29 is a safety check. If you’re looking for the tenth index in an eight-letter string, it’ll use a space ( ) instead. Also, if the n-th character isn’t a letter, you use a space to avoid accidentally returning characters that break HTML.\n• Line 34 returns the string to be rendered. Using strings inside of HTML safely is a deep topic. HTML consists of strings with certain characters changing how the browser displays the page. You have to be careful about what string data you pass to the rendering engine, and doubly so if the data was user input. Django extends raw Python strings with a class called . A object has additional information in it that indicates whether the template engine should escape it before rendering. When Django renders a template, parts of the template may be in autoescape mode. These areas automatically escape the values inside, so Django will turn any troublesome characters into the corresponding HTML entity for display. Sometimes the values you’re rendering are supposed to contain HTML, and so they need to be marked safe. In the example above, the argument to the registration decorator tells Django that this filter promises not to output any troublesome characters. A safe string passed to a filter does not get escaped by Django. The default value for is . Note that is not marking your filter result as safe. That’s a separate step for which you are responsible. The call to above ensures that all output from this function is safe, so there’s no need for an extra step. Be careful when determining whether your filter is safe or not, especially when removing characters. A filter that removed all semicolons would break HTML entities that depend on semicolons, like . To play with the filter, create : Albertosaurus Albertosaurus ('Alberta lizard') is a smaller cousin of the T-Rex. These dinosaurs were named after the location of their first discovery, Alberta, Canada. The nth letters of our dinosaur variable are: 3rd: \" \" 5th: \" \" 10th: \" \" Visit to get the resulting HTML: Explore the text and check that your filter works how you’d expect. The Canadian lizard might not have been king, but you probably still wouldn’t want to meet it in a dark alley. The data type of a filter’s argument is the data type of the value used inside the template. The most common data type within HTML documents is the string. Django provides a way to coerce the filter’s input into a string, so you don’t have to do this manually. Now you’ll write a new filter that outputs a sentence summarizing the number of instances of a letter in a string. Add the following to your file: The decorator on line 41 indicates that this filter only takes strings. Django turns the filter’s value into a string before passing it into the filter. There are some other interesting things going on in this function:\n• Line 40 uses the parameter in the registration decorator. This tells Django to add another argument to the filter function: . The value of this argument will indicate whether autoescaping is on or off for the scope of this filter.\n• Line 42 declares the filter function and includes the argument mentioned above. This argument should default to so that you’re in autoescape mode if your code calls the function directly.\n• Lines 43 to 44 replace with the result of if is . The function escapes the string but is smart enough to not escape something that has already been escaped.\n• Lines 46 to 49 build the returning string. Because the filter outputs HTML with bold and italic tags, it has to be autoescape-aware. The f-string on line 47 uses the contents of , which got appropriately escaped in lines 43 to 44, as needed. The string contains in italics and the letter count in bold.\n• Line 51 calls on the variable. Because the filter is outputting HTML that should be displayed, the function must mark the string as safe. This tells Django not to further escape the contents so the bold and italic tags get rendered by your browser. To test out this filter, create the following in : Mosasaurus Mosasaurus ('Meuse River lizard') was an aquatic reptile that lived in the Late Cretaceous. Estimated lengths reach up to 17 meters (56 feet)! Fire up your development server and go to to see the following results: The decorator is a quick shortcut that ensures your filter will only have to deal with strings. The argument and its corresponding argument give you fine-grained control over what the filter does and doesn’t autoescape. Dates and time zones can be tricky things to deal with. Dealing with them on a website has an added wrinkle: whose time zone? The server’s? The user’s? Something else? Django has built-in tools to help deal with this problem. Part of Django’s solution is two key settings: When is , Django does all date work according to the time zone you set in . The default setting for this is UTC. It’s easy to forget that template rendering happens on the server-side. Each visitor is getting their own page rendered, so it’s natural to think of the browser as being responsible. However, since rendering does happen on the server, the server’s time zone is the time zone used—unless Django’s settings make it otherwise. Neither the server’s time zone nor Django’s settings have to correspond to the user’s time zone. This makes filters and dates complicated. To assist with this, filter registration supports an argument called . Django converts objects into the configured time zone when is . To see how this works, add the following code to : This filter returns a bolded version of the passed in datetime object. There are better ways of doing this without a filter, but that wouldn’t show you the time zone effects. With set to in the code above, Django will render the page with a datetime object moved into the time zone specified by the setting. To play around with this, create : Pterodactyl Pterodactyl ('winged finger') is the common name for Pterodactylus, the first of the genus pterosaur to be identified as a flying reptile. This species is thought to have gone extinct 150 million years ago, which is a long time before now ( ). Visit the page to see the filter in action: To see the difference, edit and change the values of or and reload the page. Depending on your choices, the time and possibly even the date will change. Custom filters give you fine-grained control over your HTML output. They enable you to change the appearance of your data through reusable components. However, as filters are data-focused, they’re limited. To have complete control over a block, you need custom tags.\n\nFilters operate on a single value modifying how they’re rendered. Tags are much more flexible than that, allowing you to inject or modify blocks of content as well as manipulate the data context. Like filters, you work with tags by:\n• Declaring them in modules inside an app’s directory Additionally, for more complex tags, you can use rendering classes instead of functions. This is necessary to implement tags that render blocks. To make tag writing more straightforward, Django has the decorator. Structurally, this is similar to a filter: you register a function as a tag, and Django renders its return value. Unlike the filter, tags don’t get associated with values. They’re on their own. You’ll start with the simplest of simple tags by editing the file: Django’s tag is a block and requires a lot of typing. The tag above is a more basic version of the same idea: whatever gets passed into the tag as a parameter gets ignored, and Django renders the tag as an empty string. Create to test your tag: Tyrannosaurus Rex Tyrannosaurus rex ('lizard-tyrant king'), or T-Rex for short, is the largest of a genus of theropods. It had very big teeth. Visit the page to see the filter in action: There’s not much to see in the results, and that’s the point. Everything inside the tag has been removed. Tags, like filters, have to be concerned with whether the content they’re generating is safe for HTML or not. Tags created with are automatically autoescaped but still need to have their content marked safe if it contains HTML. Consider the following tag, which takes a list and renders an HTML bulleted list. Open and add the following function: This function takes an iterable—such as a list—and wraps each of its items in an HTML block. Note the use of on line 79. You don’t want to trust what’s passed into the tag. The variable is a list that starts with a tag, has each item appended, and then ends with the corresponding closing tag. Everything gets joined together into a string, and the string gets marked safe. Use in a template by creating : Brontosaurus Brontosaurus (thunder lizard) is a long necked quadruped whose existence was debated for a long time, with original finds being found to be composed of different animals. In 2015 the name was resurrected after an extensive study showed that there was a distinction between it and its cousin the Apatosaurus. Other Dinosaurs Visit to get the result: Play around with the value from the view inside to see how escaping works. For example, add bold tags to to make it , and you’ll see the tags displayed instead of actually making anything bold. When your view renders a template, you can pass data to the template engine through a dictionary called . All values rendered in a page come from the object, and you can get and set them from within a tag. Create a new tag in : This code is similar to but with a few key changes:\n• Line 89 adds the argument to the tag registration call. Setting this to tells Django to add an argument to the tag’s function call that contains the object.\n• Line 90 declares the function for the tag. Note that the argument comes first. Tags can take a variable number of arguments, so has to come first.\n• Line 92 accesses the argument as a dictionary, getting the value for , which is the same list of dinosaurs used in many other examples.\n• Line 98 writes the string to the context using the key . Create a new file called to test this tag: Apatosaurus Apatosaurus (deceptive lizard) is a long necked quadruped that when originally discovered was confused with parts of what is now called a Brontosaurus. Apatosaurus weighed on average . Let's try this again: Apatosaurus weighed on average . Note the use of the value on lines 13 and 20. The first use is before the tag, and the second use is after. As the value for is added as a side effect of the tag, the first instance should be undefined and therefore blank. The scope of context changes is strictly within the rendering engine. Modifying the context dictionary doesn’t affect any original value in the view. Try out this template by going to : As promised, the sentence Apatosaurus weighed on average ends rather abruptly. The value for isn’t assigned until the template engine renders the tag. The use of the context within tags is a powerful tool for communicating between your tags or saving state for a tag that you run multiple times. The template engine renders whatever your tag function returns. As you have explored in previous examples, you often write HTML snippets inside your tags. Composing HTML inside strings can be cumbersome, so inclusion tags give you another way to accomplish this: your tag itself can use templates. To see how this is done, start by creating the subtemplate : Your tag will use this template. Now you can add the following tag function to : The combination of the template and this new tag achieves the same thing that did, but with less code. The decorator specifies which template to render with this tag, and the tag function returns a dictionary to use as the context within that template. To see the results, create a test page called : Brachiosaurus Brachiosaurus (arm lizard) is yet another long-necked quadruped. Using include_list Go to the usual view to see the page : If you’re writing a tag that uses a lot of HTML, using is a better way to keep the HTML separate from the code.\n\nSimple tags are a quick way of writing a tag for the rendering engine to replace inline. Something you can’t do with a simple tag is build blocked areas. Consider how and are paired together, removing everything between them. In this section, you’ll explore how to build advanced Django custom tags. To build a paired block tag, you’ll need to implement a class that extends . This class is responsible for rendering the tag. Django provides a utility for parsing the content between paired block tags, which it then passes to your class for rendering. To demonstrate paired block tags, you’ll implement a Markdown rendering tag. A library called has already done the heavy lifting for this. Use to install : At the time of writing this tutorial, has been undergoing an overhaul. The 2.0 version is in beta and is drastically different from the examples shown here. Make sure to install version 0.8.4, or be prepared to adjust the calls to the library. Note: For a comprehensive guide to using Markdown in Django, check out How to Render Markdown in a Django Application. Add the following code to : To build a block tag, you need both a function and a class. Here’s how they work:\n• Line 113 registers the function as a tag. Note that it uses the argument to name the tag and that it’s using the decorator, not .\n• Line 114 declares the tag. The arguments are different from a simple tag, taking a parser and a token. The parser is a reference to the template engine’s parser that’s parsing the template. You don’t use the argument in this case, and you’ll explore it later.\n• Line 115 uses the object to continue parsing the template until it sees the end tag, in this case .\n• Line 116 calls to remove the opening tag. What you pass to the class is only what’s between the opening and closing tags.\n• Line 117 instantiates the class that renders the template, and the template engine passes in the tokens from the parsed tag block.\n• Lines 119 to 121 declare and initialize the class.\n• Lines 123 to 126 render the content. For this tag, that involves using to convert the tag block from Markdown into HTML.\n• Line 124 calls on the contents of the block. This ensures that any embedded template content gets handled and allows you to use values and filters inside your embedded Markdown.\n• Line 125 converts the rendered content into a string and then uses to turn that into HTML.\n• Line 126 returns the result to be inserted into the rendered page. Note that the result is not autoescaped. Django expects that you know how to protect your users from HTML exploits if you’re writing an advanced tag. Now you’ll test this new tag with some Markdown content. Create : Stegosaurus **Stegosaurus** ('roof-lizard') is a four-legged plant eater from the *Late Jurassic*. It had: * Bony back plates * Large hindquarters * A tail tipped with spikes Load into your browser to see the finished product: The Markdown from within the block tag pair gets rendered as HTML by the template engine. One thing to keep in mind when playing with Markdown is that indentation is meaningful. If the tag and its contents had not been left-justified, the library would not have been able to convert it properly. This is similar to using a tag in HTML. Suddenly, spacing matters. It’s time to dive deeper into block tags. To see how the parser deals with the contents of a tag, add the following to : The contents of are quite similar to . The only difference is that this time, the class is going to take both and the parsed content as parameters. The method of does the following:\n• Lines 144 to 146 create a list that will contain the results. The list starts out with an HTML bulleted list tag and a title.\n• Lines 148 to 150 iterate through the contents of the token by calling . This token contains the information from the opening tag, including its arguments. The parts of the token get added to the result as a bulleted sublist.\n• Lines 153 to 155 do something similar, but instead of operating on the token, they operate on the contents of the block tag. Each item in this bulleted sublist will be one of the tokens parsed out of the tag block. To see how tag parsing works, create and use as follows: Triceratops Triceratops (three-horned face) is a plant eating quadruped from the Late Cretaceous period. It has a large bony frill around its neck. A fully grown adult weighed . Your tag contains some text, a value, and a tag. See what your debugging tag does by visiting : This page shows you a bit more of what’s going on when you write a block-level Django custom tag. The opening tag had two arguments, and , which can be accessed through . The parser divides the block content into five pieces:\n• A object with the opening part of the sentence\n• A object representing the value that would normally be rendered\n• Another object, ending the first sentence Normally in a block tag, you’d call on any child contents, which would resolve and remove the comment in this case, but you don’t have to. Anything inside your tag’s block is under your control."
    },
    {
        "link": "https://stackoverflow.com/questions/67161212/django-custom-template-tags",
        "document": "The problem is that you don't even use the template tag, furthermore this is not even needed as you can simply write something like so in the template:\n\nBut this is a bit inefficient as we are getting all the posts liked by the user just to check if they like some post. Also if this were in a loop with multiple posts we would be making a query for each post.\n\nInstead we can simply annotate whether the user likes a post in the view itself using an subquery [Django docs] on the model of the many to many:\n\nNow in the template we can simply write:\n\nNote: Your way of saving the count similarly can simply be turned into an annotation using the aggregation function [Django docs]. Generally one should not store calculated attributes in a column since that might lead to inconsistent data when updating and forgetting to update the related count, etc."
    },
    {
        "link": "https://stackoverflow.com/questions/77894051/using-custom-template-tag-inside-built-in-tags-of-django",
        "document": "I am agree with Sri Vidya, i dont see before using , this is one error.\n\ndon't forget. {% calculate_billamount quantity=5 unitprice=4 %} will render it directly, without wariables assessment. I mean - you dont have variable here.\n\nYou can use In this case you add a variable in context. But it will be not rendered automatically, you should do it yourself:\n\nYour code simply not works. add context of template as a first attribut.\n\nFor two attributes you can define filter:\n\nAfter you can use it in template:\n\nI believe - you made all overcomplicated. Simply write in template:\n\nOf corse, in my answer i skip multiple other questions, like: why not change context in template_tag, why using custom template_tags is a bad practice, and many other things. And i am totally agree with comments from @McPherson: it seems, like billamount should be as a calculated property of any bill."
    },
    {
        "link": "https://stackoverflow.com/questions/69854199/in-django-models-how-does-the-foreign-key-field-know-which-field-to-match-with",
        "document": "Foreign key fields do not match with another field in another model. it matches with the model itself.Let's say you want to assign a profile with the name 'victor' to new project model object, it would go like this:\n\nhere, we assigned a user object to the owner property of the project and not a field.\n\nThe field isn't necessary. if you want to create a , i suggest you should look that up or you'll be giving yourself many problems with authentication. You'll have to create a model manager for it after which you can begin to customise. It should look like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/48433682/users-as-foreign-key-in-django",
        "document": "I have the below in my models.py file:\n\nWhen I logged into Django admin I added some films, and then added some comments, selecting which film object the comment related to. I then created a couple of users via the admin panel also.\n\nI would like my relationships to be:\n\nFilm can have many comments / Comments belong to film\n\nUser can have many comments / Comments belong to user\n\nI think, like with comments and films, I just need to define as a foreign key to . I am struggling to do this. I am working through the Django tutorials but I can't see the tutorials covering how I can link other tables to the user.\n\nI thought I would be able to do something like this:\n\nWhile importing User like this:\n\nThe result at the moment is if I keep I get err_connection_refused"
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/topics/db/models",
        "document": "A model is the single, definitive source of information about your data. It contains the essential fields and behaviors of the data you’re storing. Generally, each model maps to a single database table.\n• None Each model is a Python class that subclasses .\n• None Each attribute of the model represents a database field.\n• None With all of this, Django gives you an automatically-generated database-access API; see Making queries.\n\nDefine custom methods on a model to add custom “row-level” functionality to your objects. Whereas methods are intended to do “table-wide” things, model methods should act on a particular model instance. This is a valuable technique for keeping business logic in one place – the model. For example, this model has a few custom methods: The last method in this example is a property. The model instance reference has a complete list of methods automatically given to each model. You can override most of these – see overriding predefined model methods, below – but there are a couple that you’ll almost always want to define: A Python “magic method” that returns a string representation of any object. This is what Python and Django will use whenever a model instance needs to be coerced and displayed as a plain string. Most notably, this happens when you display an object in an interactive console or in the admin. You’ll always want to define this method; the default isn’t very helpful at all. This tells Django how to calculate the URL for an object. Django uses this in its admin interface, and any time it needs to figure out a URL for an object. Any object that has a URL that uniquely identifies it should define this method. There’s another set of model methods that encapsulate a bunch of database behavior that you’ll want to customize. In particular you’ll often want to change the way and work. You’re free to override these methods (and any other model method) to alter behavior. A classic use-case for overriding the built-in methods is if you want something to happen whenever you save an object. For example (see for documentation of the parameters it accepts): You can also prevent saving: # Yoko shall never have her own blog! It’s important to remember to call the superclass method – that’s that business – to ensure that the object still gets saved into the database. If you forget to call the superclass method, the default behavior won’t happen and the database won’t get touched. It’s also important that you pass through the arguments that can be passed to the model method – that’s what the bit does. Django will, from time to time, extend the capabilities of built-in model methods, adding new keyword arguments. If you use in your method definitions, you are guaranteed that your code will automatically support those arguments when they are added. If you wish to update a field value in the method, you may also want to have this field added to the keyword argument. This will ensure the field is saved when is specified. For example: See Specifying which fields to save for more details. Overridden model methods are not called on bulk operations Note that the method for an object is not necessarily called when deleting objects in bulk using a QuerySet or as a result of a . To ensure customized delete logic gets executed, you can use and/or signals. Unfortunately, there isn’t a workaround when or objects in bulk, since none of , , and are called. Another common pattern is writing custom SQL statements in model methods and module-level methods. For more details on using raw SQL, see the documentation on using raw SQL.\n\nModel inheritance in Django works almost identically to the way normal class inheritance works in Python, but the basics at the beginning of the page should still be followed. That means the base class should subclass . The only decision you have to make is whether you want the parent models to be models in their own right (with their own database tables), or if the parents are just holders of common information that will only be visible through the child models. There are three styles of inheritance that are possible in Django.\n• None Often, you will just want to use the parent class to hold information that you don’t want to have to type out for each child model. This class isn’t going to ever be used in isolation, so Abstract base classes are what you’re after.\n• None If you’re subclassing an existing model (perhaps something from another application entirely) and want each model to have its own database table, Multi-table inheritance is the way to go.\n• None Finally, if you only want to modify the Python-level behavior of a model, without changing the models fields in any way, you can use Proxy models. Abstract base classes are useful when you want to put some common information into a number of other models. You write your base class and put in the Meta class. This model will then not be used to create any database table. Instead, when it is used as a base class for other models, its fields will be added to those of the child class. The model will have three fields: , and . The model cannot be used as a normal Django model, since it is an abstract base class. It does not generate a database table or have a manager, and cannot be instantiated or saved directly. Fields inherited from abstract base classes can be overridden with another field or value, or be removed with . For many uses, this type of model inheritance will be exactly what you want. It provides a way to factor out common information at the Python level, while still only creating one database table per child model at the database level. When an abstract base class is created, Django makes any Meta inner class you declared in the base class available as an attribute. If a child class does not declare its own Meta class, it will inherit the parent’s Meta. If the child wants to extend the parent’s Meta class, it can subclass it. For example: Django does make one adjustment to the Meta class of an abstract base class: before installing the Meta attribute, it sets . This means that children of abstract base classes don’t automatically become abstract classes themselves. To make an abstract base class that inherits from another abstract base class, you need to explicitly set on the child. Some attributes won’t make sense to include in the Meta class of an abstract base class. For example, including would mean that all the child classes (the ones that don’t specify their own Meta) would use the same database table, which is almost certainly not what you want. Due to the way Python inheritance works, if a child class inherits from multiple abstract base classes, only the Meta options from the first listed class will be inherited by default. To inherit Meta options from multiple abstract base classes, you must explicitly declare the Meta inheritance. For example: Be careful with and ¶ If you are using or on a or , you must always specify a unique reverse name and query name for the field. This would normally cause a problem in abstract base classes, since the fields on this class are included into each of the child classes, with exactly the same values for the attributes (including and ) each time. To work around this problem, when you are using or in an abstract base class (only), part of the value should contain and .\n• None is replaced by the lowercased name of the child class that the field is used in.\n• None is replaced by the lowercased name of the app the child class is contained within. Each installed application name must be unique and the model class names within each app must also be unique, therefore the resulting name will end up being different. For example, given an app : Along with another app : The reverse name of the field will be and the reverse query name will be . The reverse name of the field will be and the reverse query name will be . Finally, the reverse name of the field will be and the reverse query name will be . It’s up to you how you use the and portion to construct your related name or related query name but if you forget to use it, Django will raise errors when you perform system checks (or run ). If you don’t specify a attribute for a field in an abstract base class, the default reverse name will be the name of the child class followed by , just as it normally would be if you’d declared the field directly on the child class. For example, in the above code, if the attribute was omitted, the reverse name for the field would be in the case and for the field. The second type of model inheritance supported by Django is when each model in the hierarchy is a model all by itself. Each model corresponds to its own database table and can be queried and created individually. The inheritance relationship introduces links between the child model and each of its parents (via an automatically-created ). For example: All of the fields of will also be available in , although the data will reside in a different database table. So these are both possible: If you have a that is also a , you can get from the object to the object by using the lowercase version of the model name: # If p is a Restaurant object, this will give the child class: However, if in the above example was not a (it had been created directly as a object or was the parent of some other class), referring to would raise a exception. The automatically-created on that links it to looks like this: You can override that field by declaring your own with on . In the multi-table inheritance situation, it doesn’t make sense for a child class to inherit from its parent’s Meta class. All the Meta options have already been applied to the parent class and applying them again would normally only lead to contradictory behavior (this is in contrast with the abstract base class case, where the base class doesn’t exist in its own right). So a child model does not have access to its parent’s Meta class. However, there are a few limited cases where the child inherits behavior from the parent: if the child does not specify an attribute or a attribute, it will inherit these from its parent. If the parent has an ordering and you don’t want the child to have any natural ordering, you can explicitly disable it: Because multi-table inheritance uses an implicit to link the child and the parent, it’s possible to move from the parent down to the child, as in the above example. However, this uses up the name that is the default value for and relations. If you are putting those types of relations on a subclass of the parent model, you must specify the attribute on each such field. If you forget, Django will raise a validation error. For example, using the above class again, let’s create another subclass with a : This results in the error: Reverse query name for 'Supplier.customers' clashes with reverse query HINT: Add or change a related_name argument to the definition for Adding to the field as follows would resolve the error: . As mentioned, Django will automatically create a linking your child class back to any non-abstract parent models. If you want to control the name of the attribute linking back to the parent, you can create your own and set to indicate that your field is the link back to the parent class. When using multi-table inheritance, a new database table is created for each subclass of a model. This is usually the desired behavior, since the subclass needs a place to store any additional data fields that are not present on the base class. Sometimes, however, you only want to change the Python behavior of a model – perhaps to change the default manager, or add a new method. This is what proxy model inheritance is for: creating a proxy for the original model. You can create, delete and update instances of the proxy model and all the data will be saved as if you were using the original (non-proxied) model. The difference is that you can change things like the default model ordering or the default manager in the proxy, without having to alter the original. Proxy models are declared like normal models. You tell Django that it’s a proxy model by setting the attribute of the class to . For example, suppose you want to add a method to the model. You can do it like this: The class operates on the same database table as its parent class. In particular, any new instances of will also be accessible through , and vice-versa: You could also use a proxy model to define a different default ordering on a model. You might not always want to order the model, but regularly order by the attribute when you use the proxy: Now normal queries will be unordered and queries will be ordered by . Proxy models inherit attributes in the same way as regular models. s still return the model that was requested¶ There is no way to have Django return, say, a object whenever you query for objects. A queryset for objects will return those types of objects. The whole point of proxy objects is that code relying on the original will use those and your own code can use the extensions you included (that no other code is relying on anyway). It is not a way to replace the (or any other) model everywhere with something of your own creation. A proxy model must inherit from exactly one non-abstract model class. You can’t inherit from multiple non-abstract models as the proxy model doesn’t provide any connection between the rows in the different database tables. A proxy model can inherit from any number of abstract model classes, providing they do not define any model fields. A proxy model may also inherit from any number of proxy models that share a common non-abstract parent class. If you don’t specify any model managers on a proxy model, it inherits the managers from its model parents. If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available. Continuing our example from above, you could change the default manager used when you query the model like this: If you wanted to add a new manager to the Proxy, without replacing the existing default, you can use the techniques described in the custom manager documentation: create a base class containing the new managers and inherit that after the primary base class: # Create an abstract class for the new manager. You probably won’t need to do this very often, but, when you do, it’s possible. Proxy model inheritance might look fairly similar to creating an unmanaged model, using the attribute on a model’s class. With careful setting of you could create an unmanaged model that shadows an existing model and adds Python methods to it. However, that would be very repetitive and fragile as you need to keep both copies synchronized if you make any changes. On the other hand, proxy models are intended to behave exactly like the model they are proxying for. They are always in sync with the parent model since they directly inherit its fields and managers.\n• None If you are mirroring an existing model or database table and don’t want all the original database table columns, use . That option is normally useful for modeling database views and tables not under the control of Django.\n• None If you are wanting to change the Python-only behavior of a model, but keep all the same fields as in the original, use . This sets things up so that the proxy model is an exact copy of the storage structure of the original model when data is saved. Just as with Python’s subclassing, it’s possible for a Django model to inherit from multiple parent models. Keep in mind that normal Python name resolution rules apply. The first base class that a particular name (e.g. Meta) appears in will be the one that is used; for example, this means that if multiple parents contain a Meta class, only the first one is going to be used, and all others will be ignored. Generally, you won’t need to inherit from multiple parents. The main use-case where this is useful is for “mix-in” classes: adding a particular extra field or method to every class that inherits the mix-in. Try to keep your inheritance hierarchies as simple and straightforward as possible so that you won’t have to struggle to work out where a particular piece of information is coming from. Note that inheriting from multiple models that have a common primary key field will raise an error. To properly use multiple inheritance, you can use an explicit in the base models: Or use a common ancestor to hold the . This requires using an explicit from each parent model to the common ancestor to avoid a clash between the fields that are automatically generated and inherited by the child: Field name “hiding” is not permitted¶ In normal Python class inheritance, it is permissible for a child class to override any attribute from the parent class. In Django, this isn’t usually permitted for model fields. If a non-abstract model base class has a field called , you can’t create another model field or define an attribute called in any class that inherits from that base class. This restriction doesn’t apply to model fields inherited from an abstract model. Such fields may be overridden with another field or value, or be removed by setting . Model managers are inherited from abstract base classes. Overriding an inherited field which is referenced by an inherited may cause subtle bugs. See custom managers and model inheritance. Some fields define extra attributes on the model, e.g. a defines an extra attribute with appended to the field name, as well as and on the foreign model. These extra attributes cannot be overridden unless the field that defines it is changed or removed so that it no longer defines the extra attribute. Overriding fields in a parent model leads to difficulties in areas such as initializing new instances (specifying which field is being initialized in ) and serialization. These are features which normal Python class inheritance doesn’t have to deal with in quite the same way, so the difference between Django model inheritance and Python class inheritance isn’t arbitrary. This restriction only applies to attributes which are instances. Normal Python attributes can be overridden if you wish. It also only applies to the name of the attribute as Python sees it: if you are manually specifying the database column name, you can have the same column name appearing in both a child and an ancestor model for multi-table inheritance (they are columns in two different database tables). Django will raise a if you override any model field in any ancestor model. Note that because of the way fields are resolved during class definition, model fields inherited from multiple abstract parent models are resolved in a strict depth-first order. This contrasts with standard Python MRO, which is resolved breadth-first in cases of diamond shaped inheritance. This difference only affects complex model hierarchies, which (as per the advice above) you should try to avoid."
    },
    {
        "link": "https://forum.djangoproject.com/t/setting-up-models-with-multiple-foreign-key-relationships/26758",
        "document": "Thank you for the feedback. I had assumed that concretely inheriting from to create new and classes wouldn’t work without also using a generic foreign key to relate both of these new classes to . But I just tried it and it seems to work if I simply leave as the foreign key. By “work”, I mean that creating a and calling will return a or instead of a , if a or was assigned to the field in the .\n\nBelow are the new class definitions, updated with some additional fields to distinguish between classes:\n\nGoing into the shell with and creating some objects like this…\n\n…then Alice is a , and is returned as a from , as shown below. This means that fields defined in (the field) and (the ) can both be accessed, even though the foreign key in is to a instead of a (I didn’t expect this behavior):\n\nThe team leader (as an object) and members (as a query set) can be accessed directly from a instance:\n\nTrying to add a second leader fails, as expected, due to the one-to-one constraint from to :\n\nI thought about doing this the other way, too, without concrete inheritance… If instead of doing inheritance as above, I added a field to the class with options of “Leader” and “Member”, I think I would need to add a custom method to prevent more than one Person with a role of from being added to a . Additionally, I think I’d need to add methods (or @property) to the class to be able to directly return and as an object and a query set, respectively, i.e., instead of writing queries to access them each time, just put the queries in methods or @property in . (accessing them directly from would make templating easier, etc.)\n\nAll of that behavior comes automatically when using concrete inheritance, though, so inheritance seems like a more direct approach in this case. I’ve seen people say that concrete inheritance is not a great idea, though. What are the potential pitfalls?"
    },
    {
        "link": "https://forum.djangoproject.com/t/join-three-models-with-foreign-keys-b-to-a-c-to-a/24344",
        "document": "Using Django 4.2, I have three models looking as the following: What I want is to join those three models based on the foreign keys and the foreign keys so that I can access A, B and C fields with a single QuerySet in my templates. If possible, I would also want to have B fields equal to null if exists in C but not in B. I have tried using in the following way, but it doesn’t seem to let me access B and C fields: I might need to use a subquery or an , but I really don’t understand how they work. Would anyone, please, be willing to help me?\n\nWriting a query on automatically gives you access to both sets of related objects. Then, for any element of which we’ll name , is the set of all related to . Likewise, is the set of all related to . The clause is not required for access to those collections, it’s only a performance enhancement. If you iterate over both and subsequently reference the and collections in a tempate, you’re going to end up in a query situation - which is what prevents. Now, when it comes to accessing those fields in or , keep in mind that you may have many (or ) related to a single . Side note: If that’s not the case - if there’s only 0 or 1 that can be related to - then you’ve designed your model incorrectly - it would be a OneToOneField that is needed, not a Foreign Key. That means that is a collection, and you would need to iterate over that collection to access the individual fields of the individual members of . The other way you may want to look at this is to realize that what you have effectively created are two separate ManyToMany relationships between and , with two models. (I don’t know whether that helps you visualize what’s going on here or not, but sometimes changing your perspective on an issue helps.)\n\nThank you for your reply.\n\n I think that I understand all of it. To bring more context, there can be many B and many C related to a single A. I am sure not to need OneToOneField instead of my ForeignKey fields. I can see that I have access to the set of all B and to the set of all C related to each element of A. But that is not what I am looking for. I do not want to iterate more than once in my template. That is why I am looking for a solution to obtain a QuerySet with the fields of all three models joined on A and User (which, I forgot to mention, are in models B and C).\n\nI do not want to iterate more than once in my template. Depending upon what exactly you’re trying to generate, that may not be possible. (It would be helpful if you could provide a minimal example showing just a handful of rows of data along with what you’re trying to achieve. I’m not seeing what the output is that you’re trying to create here.)\n\n Keep in mind that regardless of the clause, something like is going to return a queryset and not an individual instance of B.\n\nI basically want to do a left join and access values of A, B and C through the same QuerySet. For example, if my models were to be looking like this: With values for these models looking like this: I would want the resulting QuerySet to be structured as if it was retrieving its values from the following table:"
    },
    {
        "link": "https://docs.djangoproject.com/en/5.1/ref/contrib/admin",
        "document": "One of the most powerful parts of Django is the automatic admin interface. It reads metadata from your models to provide a quick, model-centric interface where trusted users can manage content on your site. The admin’s recommended use is limited to an organization’s internal management tool. It’s not intended for building your entire front end around.\n\nThe admin has many hooks for customization, but beware of trying to use those hooks exclusively. If you need to provide a more process-centric interface that abstracts away the implementation details of database tables and fields, then it’s probably time to write your own views.\n\nIn this document we discuss how to activate, use, and customize Django’s admin interface.\n\nThe admin interface has the ability to edit models on the same page as a parent model. These are called inlines. Suppose you have these two models: You can edit the books authored by an author on the author page. You add inlines to a model by specifying them in a : Django provides two subclasses of and they are: The difference between these two is merely the template used to render them. shares many of the same features as , and adds some of its own (the shared features are actually defined in the superclass). The shared features are: The model which the inline is using. This is required. The name of the foreign key on the model. In most cases this will be dealt with automatically, but must be specified explicitly if there are more than one foreign key to the same parent model. This defaults to . Using your own formset can give you many possibilities of customization. Inlines are built around model formsets. The value for defaults to . This is what is passed through to when creating the formset for this inline. When writing custom validation for forms, be cautious of writing validation that relies on features of the parent model. If the parent model fails to validate, it may be left in an inconsistent state as described in the warning in Validation on a ModelForm. A list or tuple containing extra CSS classes to apply to the fieldset that is rendered for the inlines. Defaults to . As with classes configured in , inlines with a class will be initially collapsed using an expandable widget. using the class now use and elements, provided they define a . This controls the number of extra forms the formset will display in addition to the initial forms. Defaults to 3. See the formsets documentation for more information. For users with JavaScript-enabled browsers, an “Add another” link is provided to enable any number of additional inlines to be added in addition to those provided as a result of the argument. The dynamic link will not appear if the number of currently displayed forms exceeds , or if the user does not have JavaScript enabled. also allows you to customize the number of extra forms. This controls the maximum number of forms to show in the inline. This doesn’t directly correlate to the number of objects, but can if the value is small enough. See Limiting the number of editable objects for more information. also allows you to customize the maximum number of extra forms. This controls the minimum number of forms to show in the inline. See for more information. also allows you to customize the minimum number of displayed forms. By default, Django’s admin uses a select-box interface (<select>) for fields that are . Sometimes you don’t want to incur the overhead of having to select all the related instances to display in the drop-down. is a list of fields you would like to change into an widget for either a or : The template used to render the inline on the page. An override to the from the model’s inner class. An override to the from the model’s inner class. If this isn’t given and the is defined, Django will use + . Specifies whether or not inline objects can be deleted in the inline. Defaults to . Specifies whether or not inline objects that can be changed in the admin have a link to the change form. Defaults to . Returns a class for use in admin add/change views. is the parent object being edited or when adding a new parent. See the example for . Returns the number of extra inline forms to use. By default, returns the attribute. Override this method to programmatically determine the number of extra inline forms. For example, this may be based on the model instance (passed as the keyword argument ): Returns the maximum number of extra inline forms to use. By default, returns the attribute. Override this method to programmatically determine the maximum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument ): Returns the minimum number of inline forms to use. By default, returns the attribute. Override this method to programmatically determine the minimum number of inline forms. For example, this may be based on the model instance (passed as the keyword argument ). Should return if adding an inline object is permitted, otherwise. is the parent object being edited or when adding a new parent. Should return if editing an inline object is permitted, otherwise. is the parent object being edited. Should return if deleting an inline object is permitted, otherwise. is the parent object being edited. The argument passed to methods is the parent object being edited or when adding a new parent. Working with a model with two or more foreign keys to the same parent model¶ It is sometimes possible to have more than one foreign key to the same model. Take this model for instance: If you wanted to display an inline on the admin add/change pages you need to explicitly define the foreign key since it is unable to do so automatically: By default, admin widgets for many-to-many relations will be displayed on whichever model contains the actual reference to the . Depending on your definition, each many-to-many field in your model will be represented by a standard HTML , a horizontal or vertical filter, or a widget. However, it is also possible to replace these widgets with inlines. Suppose we have the following models: If you want to display many-to-many relations using an inline, you can do so by defining an object for the relationship: There are two features worth noting in this example. Firstly - the class references . The attribute is a reference to the model that manages the many-to-many relation. This model is automatically created by Django when you define a many-to-many field. Secondly, the must manually exclude the field. Django displays an admin widget for a many-to-many field on the model that defines the relation (in this case, ). If you want to use an inline model to represent the many-to-many relationship, you must tell Django’s admin to not display this widget - otherwise you will end up with two widgets on your admin page for managing the relation. Note that when using this technique the signals aren’t triggered. This is because as far as the admin is concerned, is just a model with two foreign key fields rather than a many-to-many relation. In all other respects, the is exactly the same as any other. You can customize the appearance using any of the normal properties. When you specify an intermediary model using the argument to a , the admin will not display a widget by default. This is because each instance of that intermediary model requires more information than could be displayed in a single widget, and the layout required for multiple widgets will vary depending on the intermediate model. However, we still want to be able to edit that information inline. Fortunately, we can do this with inline admin models. Suppose we have the following models: The first step in displaying this intermediate model in the admin is to define an inline class for the model: This example uses the default values for the model, and limits the extra add forms to one. This could be customized using any of the options available to classes. Now create admin views for the and models: Finally, register your and models with the admin site: Now your admin site is set up to edit objects inline from either the or the detail pages. Using generic relations as an inline¶ It is possible to use an inline with generically related objects. Let’s say you have the following models: If you want to allow editing and creating an instance on the , add/change views you can use or (both subclasses of ) provided by . They implement tabular and stacked visual layouts for the forms representing the inline objects, respectively, just like their non-generic counterparts. They behave just like any other inline. In your for this example app: See the contenttypes documentation for more specific information.\n\nYou can override many of the templates which the admin module uses to generate the various pages of an admin site. You can even override a few of these templates for a specific app, or a specific model. The admin template files are located in the django/contrib/admin/templates/admin directory. In order to override one or more of them, first create an directory in your project’s directory. This can be any of the directories you specified in the option of the backend in the setting. If you have customized the option, be sure appears before so that your custom templates will be found by the template loading system before those that are included with . Within this directory, create sub-directories named after your app. Within these app subdirectories create sub-directories named after your models. Note, that the admin app will lowercase the model name when looking for the directory, so make sure you name the directory in all lowercase if you are going to run your app on a case-sensitive filesystem. To override an admin template for a specific app, copy and edit the template from the django/contrib/admin/templates/admin directory, and save it to one of the directories you just created. For example, if we wanted to add a tool to the change list view for all the models in an app named , we would copy to the directory of our project, and make any necessary changes. If we wanted to add a tool to the change list view for only a specific model named ‘Page’, we would copy that same file to the directory of our project. Because of the modular design of the admin templates, it is usually neither necessary nor advisable to replace an entire template. It is almost always better to override only the section of the template which you need to change. To continue the example above, we want to add a new link next to the tool for the model. After looking at we determine that we only need to override the block. Therefore here is our new : And that’s it! If we placed this file in the directory, our link would appear on the change form for all models within my_app. Templates which may be overridden per app or model¶ Not every template in may be overridden per app or per model. The following can: For those templates that cannot be overridden in this way, you may still override them for your entire project by placing the new version in your directory. This is particularly useful to create custom 404 and 500 pages. Some of the admin templates, such as are used to render custom inclusion tags. These may be overridden, but in such cases you are probably better off creating your own version of the tag in question and giving it a different name. That way you can use it selectively. If you wish to change the index, login or logout templates, you are better off creating your own instance (see below), and changing the , or properties.\n\nA Django administrative site is represented by an instance of ; by default, an instance of this class is created as and you can register your models and instances with it. If you want to customize the default admin site, you can override it. When constructing an instance of an , you can provide a unique instance name using the argument to the constructor. This instance name is used to identify the instance, especially when reversing admin URLs. If no instance name is provided, a default instance name of will be used. See Customizing the AdminSite class for an example of customizing the class. Templates can override or extend base admin templates as described in Overriding admin templates. The text to put at the top of each admin page, as a (a string). By default, this is “Django administration”. In older versions, was using an tag. The text to put at the end of each admin page’s (a string). By default, this is “Django site admin”. The URL for the “View site” link at the top of each admin page. By default, is . Set it to to remove the link. For sites running on a subpath, the method checks if the current request has set and uses that value if isn’t set to something other than . The text to put at the top of the admin index page (a string). By default, this is “Site administration”. Path to a custom template that will be used by the admin site main index view. Path to a custom template that will be used by the admin site app index view. The string to use for displaying empty values in the admin site’s change list. Defaults to a dash. The value can also be overridden on a per basis and on a custom field within a by setting an attribute on the field. See for examples. A boolean value that determines whether to show the navigation sidebar on larger screens. By default, it is set to . A boolean value that determines whether to add a final catch-all view to the admin that redirects unauthenticated users to the login page. By default, it is set to . Setting this to is not recommended as the view protects against a potential model enumeration privacy issue. Path to a custom template that will be used by the admin site login view. Subclass of that will be used by the admin site login view. Path to a custom template that will be used by the admin site logout view. Path to a custom template that will be used by the admin site password change view. Path to a custom template that will be used by the admin site password change done view. Returns a dictionary of variables to put in the template context for every page in the admin site. Includes the following variables and values by default:\n• None : a list of applications from the application registry available for the current user. Each entry in the list is a dict representing an application with the following keys:\n• None : the URL of the application index in the admin\n• None : a boolean indicating if displaying and accessing of the module’s index page is permitted for the current user\n• None : a list of the models available in the application Each model is a dict with the following keys:\n• None : class name of the model\n• None : plural name of the model\n• None : whether the current page is displayed in a popup window Returns a list of applications from the application registry available for the current user. You can optionally pass an argument to get details for a single app. Each entry in the list is a dictionary representing an application with the following keys:\n• None : the URL of the application index in the admin\n• None : a boolean indicating if displaying and accessing of the module’s index page is permitted for the current user\n• None : a list of the models available in the application\n• None : name of the application Each model is a dictionary with the following keys:\n• None : class name of the model\n• None : plural name of the model Lists of applications and models are sorted alphabetically by their names. You can override this method to change the default order on the admin index page. Returns if the user for the given has permission to view at least one page in the admin site. Defaults to requiring both and to be . Registers the given model class (or iterable of classes) with the given . defaults to (the default admin options). If keyword arguments are given – e.g. – they’ll be applied as options to the admin class. Raises if a model is abstract. and if a model is already registered. Unregisters the given model class (or iterable of classes). Returns an admin class for the given model class. Raises if a model isn’t registered. Returns a queryset for the related instances, shown on the site index page. This method can be overridden to filter the log entries by other criteria. The last step in setting up the Django admin is to hook your instance into your URLconf. Do this by pointing a given URL at the method. It is not necessary to use . In this example, we register the default instance at the URL If you’d like to set up your own admin site with custom behavior, you’re free to subclass and override or add anything you like. Then, create an instance of your subclass (the same way you’d instantiate any other Python class) and register your models and subclasses with it instead of with the default site. Finally, update to reference your subclass. Note that you may not want autodiscovery of modules when using your own instance since you will likely be importing all the per-app modules in your module. This means you need to put instead of in your setting. You can override the default by setting the attribute of a custom to the dotted import path of either a subclass or a callable that returns a site instance. Multiple admin sites in the same URLconf¶ You can create multiple instances of the admin site on the same Django-powered website. Create multiple instances of and place each one at a different URL. In this example, the URLs and feature separate versions of the admin site – using the instances and , respectively: instances take a single argument to their constructor, their name, which can be anything you like. This argument becomes the prefix to the URL names for the purposes of reversing them. This is only necessary if you are using more than one . Just like , provides a method that can be overridden to define additional views for the site. To add a new view to your admin site, extend the base method to include a pattern for your new view. Any view you render that uses the admin templates, or extends the base admin template, should set before rendering the template. It should be set to either if your view is on an or if your view is on a . You can add a password reset feature to the admin site by adding a few lines to your URLconf. Specifically, add these four patterns: (This assumes you’ve added the admin at and requires that you put the URLs starting with before the line that includes the admin app itself). The presence of the named URL will cause a “forgotten your password?” link to appear on the default admin log-in page under the password box.\n\nWhen an is deployed, the views provided by that site are accessible using Django’s URL reversing system. The provides the following named URL patterns: Each instance provides an additional set of named URLs: These named URLs are registered with the application namespace , and with an instance namespace corresponding to the name of the Site instance. So - if you wanted to get a reference to the Change view for a particular object (from the polls application) in the default admin, you would call: This will find the first registered instance of the admin application (whatever the instance name), and resolve to the view for changing instances in that instance. If you want to find a URL in a specific admin instance, provide the name of that instance as a hint to the reverse call. For example, if you specifically wanted the admin view from the admin instance named , you would need to call: For more details, see the documentation on reversing namespaced URLs. To allow easier reversing of the admin urls in templates, Django provides an filter which takes an action as argument: The action in the examples above match the last part of the URL names for instances described above. The variable can be any object which has an and attributes and is usually supplied by the admin views for the current model."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Server-side/Django/Admin_site",
        "document": "The Django admin application can use your models to automatically build a site area that you can use to create, view, update, and delete records. This can save you a lot of time during development, making it very easy to test your models and get a feel for whether you have the right data. The admin application can also be useful for managing data in production, depending on the type of website. The Django project recommends it only for internal data management (i.e. just for use by admins, or people internal to your organization), as the model-centric approach is not necessarily the best possible interface for all users, and exposes a lot of unnecessary detail about the models. All the configuration required to include the admin application in your website was done automatically when you created the skeleton project (for information about actual dependencies needed, see the Django docs here). As a result, all you must do to add your models to the admin application is to register them. At the end of this article we'll provide a brief demonstration of how you might further configure the admin area to better display our model data. After registering the models we'll show how to create a new \"superuser\", login to the site, and create some books, authors, book instances, and genres. These will be useful for testing the views and templates we'll start creating in the next tutorial.\n\nFirst, open admin.py in the catalog application (/django-locallibrary-tutorial/catalog/admin.py). It currently looks like this — note that it already imports : from django.contrib import admin # Register your models here. Register the models by copying the following text into the bottom of the file. This code imports the models and then calls to register each of them. Note: The lines above assume that you accepted the challenge to create a model to represent the natural language of a book (see the models tutorial article)! This is the simplest way of registering a model, or models, with the site. The admin site is highly customizable, and we'll talk more about the other ways of registering your models further down.\n\nLogging in and using the site To login to the site, open the /admin URL (e.g. ) and enter your new superuser userid and password credentials (you'll be redirected to the login page, and then back to the /admin URL after you've entered your details). This part of the site displays all our models, grouped by installed application. You can click on a model name to go to a screen that lists all its associated records, and you can further click on those records to edit them. You can also directly click the Add link next to each model to start creating a record of that type. Click on the Add link to the right of Books to create a new book (this will display a dialog much like the one below). Note how the titles of each field, the type of widget used, and the (if any) match the values you specified in the model. Enter values for the fields. You can create new authors or genres by pressing the + button next to the respective fields (or select existing values from the lists if you've already created them). When you're done you can press SAVE, Save and add another, or Save and continue editing to save the record. Note: At this point we'd like you to spend some time adding a few books, authors, languages, and genres (e.g. Fantasy) to your application. Make sure that each author and genre includes a couple of different books (this will make your list and detail views more interesting when we implement them later on in the article series). When you've finished adding books, click on the Home link in the top bookmark to be taken back to the main admin page. Then click on the Books link to display the current list of books (or on one of the other links to see other model lists). Now that you've added a few books, the list might look similar to the screenshot below. The title of each book is displayed; this is the value returned in the Book model's method that we specified in the last article. From this list you can delete books by selecting the checkbox next to the book you don't want, selecting the delete… action from the Action drop-down list, and then pressing the Go button. You can also add new books by pressing the ADD BOOK button. You can edit a book by selecting its name in the link. The edit page for a book, shown below, is almost identical to the \"Add\" page. The main differences are the page title (Change book) and the addition of Delete, HISTORY and VIEW ON SITE buttons (this last button appears because we defined the method in our model). Note: Clicking the VIEW ON SITE button raises a exception because the method attempts to a named URL mapping ('book-detail') that has not yet been defined. We'll define a URL mapping and associated view in Django Tutorial Part 6: Generic list and detail views. Now navigate back to the Home page (using the Home link in the breadcrumb trail) and then view the Author and Genre lists — you should already have quite a few created from when you added the new books, but feel free to add some more. What you won't have is any Book Instances, because these are not created from Books (although you can create a from a — this is the nature of the field). Navigate back to the Home page and press the associated Add button to display the Add book instance screen below. Note the large, globally unique Id, which can be used to separately identify a single copy of a book in the library. Create a number of these records for each of your books. Set the status as Available for at least some records and On loan for others. If the status is not Available, then also set a future Due back date. That's it! You've now learned how to set up and use the administration site. You've also created records for , , , and that we'll be able to use once we create our own views and templates.\n\nTo change how a model is displayed in the admin interface you define a ModelAdmin class (which describes the layout) and register it with the model. Let's start with the model. Open admin.py in the catalog application (/django-locallibrary-tutorial/catalog/admin.py). Comment out your original registration (prefix it with a #) for the model: Now add a new and registration as shown below. # Define the admin class class AuthorAdmin(admin.ModelAdmin): pass # Register the admin class with the associated model admin.site.register(Author, AuthorAdmin) Now we'll add classes for , and . We again need to comment out the original registrations: Now to create and register the new models; for the purpose of this demonstration, we'll instead use the decorator to register the models (this does exactly the same thing as the syntax): # Register the Admin classes for Book using the decorator @admin.register(Book) class BookAdmin(admin.ModelAdmin): pass # Register the Admin classes for BookInstance using the decorator @admin.register(BookInstance) class BookInstanceAdmin(admin.ModelAdmin): pass Currently all of our admin classes are empty (see ) so the admin behavior will be unchanged! We can now extend these to define our model-specific admin behavior.\n\nThe LocalLibrary currently lists all authors using the object name generated from the model method. This is fine when you only have a few authors, but once you have many you may end up having duplicates. To differentiate them, or just because you want to show more interesting information about each author, you can use list_display to add additional fields to the view. Replace your class with the code below. The field names to be displayed in the list are declared in a tuple in the required order, as shown (these are the same names as specified in your original model). Now navigate to the author list in your website. The fields above should now be displayed, like so: For our model we'll additionally display the and . The is a field (one-to-many) relationship, and so will be represented by the value for the associated record. Replace the class with the version below. Unfortunately we can't directly specify the field in because it is a (Django prevents this because there would be a large database access \"cost\" in doing so). Instead we'll define a function to get the information as a string (this is the function we've called above; we'll define it below). Note: Getting the may not be a good idea here, because of the \"cost\" of the database operation. We're showing you how because calling functions in your models can be very useful for other reasons — for example to add a Delete link next to every item in the list. Add the following code into your model (models.py). This creates a string from the first three values of the field (if they exist) and creates a that can be used in the admin site for this method. def display_genre(self): \"\"\"Create a string for the Genre. This is required to display genre in Admin.\"\"\" return ', '.join(genre.name for genre in self.genre.all()[:3]) display_genre.short_description = 'Genre' After saving the model and updated admin, open your website and go to the Books list page; you should see a book list like the one below: The model (and the model, if you defined one) both have a single field, so there is no point creating an additional model for them to display additional fields. Note: It is worth updating the model list to show at least the status and the expected return date. We've added that as a challenge at the end of this article!\n\nBy default, the detail views lay out all fields vertically, in their order of declaration in the model. You can change the order of declaration, which fields are displayed (or excluded), whether sections are used to organize the information, whether fields are displayed horizontally or vertically, and even what edit widgets are used in the admin forms. Note: The LocalLibrary models are relatively simple so there isn't a huge need for us to change the layout; we'll make some changes anyway however, just to show you how. Controlling which fields are displayed and laid out Update your class to add the line, as shown below: The attribute lists just those fields that are to be displayed on the form, in order. Fields are displayed vertically by default, but will display horizontally if you further group them in a tuple (as shown in the \"date\" fields above). In your website go to the author detail view — it should now appear as shown below: Note: You can also use the attribute to declare a list of attributes to be excluded from the form (all other attributes in the model will be displayed). You can add \"sections\" to group related model information within the detail form, using the fieldsets attribute. In the model we have information related to what the book is (i.e. , , and ) and when it will be available ( , ). We can add these to our class as shown below, using the property. Each section has its own title (or , if you don't want a title) and an associated tuple of fields in a dictionary — the format is complicated to describe, but fairly easy to understand if you look at the code fragment immediately above. Now navigate to a book instance view in your website; the form should appear as shown below:"
    },
    {
        "link": "https://realpython.com/customize-django-admin-python",
        "document": "The Django framework comes with a powerful administrative tool called admin. You can use it out of the box to quickly add, delete, or edit any database model from a web interface. But with a little extra code, you can customize the Django admin to take your admin capabilities to the next level.\n\nIn this tutorial, you’ll learn how to:\n\nThe Django admin provides a web-based interface for creating and managing database model objects. To see it in action, you’ll first need a Django project and some object models. Install Django inside a clean virtual environment: You first create a new Django project named with an app called . Then you migrate the authentication tables and create an administrator. Access to the Django admin screens is restricted to users with or flags, so you use the management command to create a . You also need to modify to include the new app named : The app directory will start with the following files inside: You’re interested in two of these files:\n• registers your models with the Django admin. To demonstrate the outcome when you customize the Django admin, you’ll need some models. Edit : These models represent students taking courses at a school. A has a and a in which it was offered. A has a first and last name and can take zero or more . A contains a percentage score that a received on a . Here’s a model diagram showing the relationships between the objects: The underlying table names in the database are slightly different from this, but they’re related to the models shown above. Each model that you want Django to represent in the admin interface needs to be registered. You do this in the file. Models from are registered in the corresponding file: You’re almost ready to go. Once you’ve migrated your database models, you can run the Django development server and see the results: ./manage.py makemigrations ./manage.py migrate ./manage.py runserver Watching for file changes with StatReloader Now visit to see your admin interface. You’ll be prompted to log in. Use the credentials you created with the management command. The admin home screen lists all the registered database models: You can now use the interface to create objects in your database. Clicking a model name will show you a screen listing all the objects in the database for that model. Here’s the list: The list starts out empty, like your database. Clicking ADD PERSON allows you to create a person in the database. Once you save, you’ll be returned to the list of objects: The good news is you’ve got an object. The bad news is tells you the of the object and nothing else. By default, the Django admin displays each object by calling on it. You can make this screen a little more helpful by adding a method to the class in : Adding changes the display to include the first and last name of the in the interface. You can refresh the screen to see the change: That’s a little better! Now you can see some information about the object. It’s a good idea to add similar methods to both the and the objects: You’ll want to have some data in your database to see the full effect of your customizations. You can have some fun and create your own data now, or you can skip the work and use a fixture. Expand the box below to learn how to load data using a fixture. Django lets you load data to and from the database in files called fixtures. Copy the following into a file named : Once you’ve created the file, you can use the Django management command to load it into your database: Your database now has some sample , , and objects. Now that you have some data to work with, you’re ready to start customizing Django’s admin interface.\n\nThe smart folks who created the Django framework not only built the admin, but they did it in such a way that you can customize it for your projects. When you registered the object earlier, it inherited from . Most of the customization you can do with the Django admin is done by modifying , and you sure can modify it! has over thirty attributes and almost fifty methods. You can use each one of these to fine-tune the admin’s presentation and control your objects’ interfaces. Every one of these options is described in detail in the documentation. To top it all off, the admin is built using Django’s templating interface. The Django template mechanism allows you to override existing templates, and because the admin is just another set of templates, this means you can completely change its HTML. Although it’s beyond the scope of this tutorial, you can even create multiple admin sites. That might seem like overkill, but it allows you to get fancy and define different sites for users with different permissions. The Django admin is split into three major areas: The app index lists your registered models. A change list is automatically created for each registered model and lists the objects for that model. When you add or edit one of those objects, you do so with a change form. In the earlier example, the app index showed the , , and objects. Clicking People shows the change lists for objects. On the change list page, clicking the object takes you to the change form to edit Buffy’s details.\n\nImplementing is a quick way to change the representation of a object from a meaningless string to understandable data. Since this representation will also show up in drop-downs and multi-selects, you definitely want to make it as easy to understand as possible. You can customize change list pages in far more ways than just modifying an object’s string representation. The attribute of an object specifies what columns are shown in the change list. This value is a tuple of attributes of the object being modeled. For example, in , modify as follows: The code above modifies your change list to display the and attributes for each object. Each attribute is shown in a column on the page: The two columns are clickable, allowing you to sort the page by the column data. The admin also respects the attribute of a section: Adding the attribute will default all queries on to be ordered by then . Django will respect this default order both in the admin and when fetching objects. The tuple can reference any attribute of the object being listed. It can also reference a method in the itself. Modify again: In the above code, you add a column to the admin that displays each student’s grade average. is called once for each object displayed in the list. The parameter is the object for the row being displayed. In this case, you use it to query the corresponding objects for the student, with the response averaged over . You can see the results here: Keep in mind that the average grade should really be calculated in the model object. You’ll likely want the data elsewhere, not just in the Django admin. If you had such a method, you could add it to the attribute. The example here shows what you can do in a object, but it probably isn’t the best choice for your code. By default, only those columns that are object attributes are sortable. is not. This is because sorting is performed by an underlying , not on the displayed results. There are ways of sorting these columns in some cases, but that’s beyond the scope of this tutorial. The title for the column is based on the name of the method. You can alter the title by adding an attribute to the method: By default, Django protects you from HTML in strings in case the string is from user input. To have the display include HTML, you must use : now has a custom title, , and is formatted to be in italics: Unfortunately, Django hasn’t yet added f-string support for , so you’re stuck with syntax.\n\nIt’s quite common for objects to reference other objects through the use of foreign keys. You can point at a method that returns an HTML link. Inside , modify the class as follows: This code causes the change list to have three columns:\n• The course name\n• The year in which the course was offered\n• A link displaying the number of students in the course You can see the resulting change in the following screenshot: When you click 2 Students, it takes you to the change list page with a filter applied. The filtered page shows only those students in , Buffy and Willow. Xander didn’t make it to university. The example code uses to look up a URL in the Django admin. You can look up any admin page using the following naming convention: This name structure breaks down as follows:\n• is the name of the app. For the example above, you use to get a reference to the change list page of the object in the app. Here are the available URL names: You can filter the change list page by adding a query string to the URL. This query string modifies the used to populate the page. In the example above, the query string filters the list to only those objects that have a matching value in . These filters support field lookups using double underscores ( ). You can access attributes of related objects as well as use filter modifiers like and . You can find the full details on what you can accomplish with the attribute in the Django admin documentation.\n\nIn addition to filtering data on the change list through the calling URL, you can also filter with a built-in widget. Add the attribute to the object in : The will display a new section on the page with a list of links. In this case, the links filter the page by year. The filter list is automatically populated with the values used by the objects in the database: Clicking a year on the right-hand side will change the list to include only objects with that value. You can also filter based on the attributes of related objects using the field lookup syntax. For example, you could filter objects by , showing the objects for only a certain year of courses. If you’re looking for more control over your filtering, then you can even create filter objects that specify the lookup attributes and the corresponding .\n\nFilters aren’t the only way to reduce the amount of data on the screen. Django admin also supports searching through the option, which adds a search box to the screen. You set it with a tuple containing the names of fields to be used for constructing a search query in the database. Anything the user types in the search box is used in an clause of the fields filtering the . By default, each search parameter is surrounded by signs, meaning if you search for , then any word with an inside will appear in the results. You can be more precise by specifying a modifier on the search field. Edit the in as follows: In the above code, searching is based on last name. The modifier restricts the search to last names that begin with the search parameter. Searching on provides the following results: Whenever a search is performed on a change list page, the Django admin calls your object’s method. It returns a with the search results. You can fine-tune searches by overloading the method and changing the . More details can be found in the documentation.\n\nYou can customize more than just the change list page. The screens used to add or change an object are based on a . Django automatically generates the form based on the model being edited. You can control which fields are included, as well as their order, by editing the option. Modify your object, adding a attribute: The Add and Change pages for now put the attribute before the attribute even though the model itself specifies the other way around: is responsible for creating the for your object. You can override this method to change the form. Add the following method to : \"First Name (Humans only!):\" Now, when the Add or Change page is displayed, the label of the field will be customized. Changing the label might not be sufficient to prevent vampires from registering as students. If you don’t like the that the Django admin created for you, then you can use the attribute to register a custom form. Make the following additions and changes to : The above code enforces additional validation on the Add and Change pages. objects have a rich validation mechanism. In this case, the field is being checked against the name . A prevents students with this name from registering: By changing or replacing the object, you can fully control the appearance and validation of the pages you use to add or change object pages.\n\nThe Django developers implemented the admin using the Django template mechanism. This made their job a little bit easier, but it also benefits you by allowing you to override the templates. You can fully customize the admin by changing the templates used to render pages. You can see all the templates used in the admin by looking inside the Django package in your virtual environment: The Django template engine has a defined order for loading templates. When it loads a template, it uses the first template that matches the name. You can override admin templates by using the same directory structure and file names. The admin templates come in two directories:\n• is for the model object pages.\n• is for password changes and logging in and out. To customize the logout page, you need to override the right file. The relative path leading to the file has to be the same as the one being overridden. The file you’re interested in is . Start by creating the directory in the project: Now tell Django about your new template directory inside your file. Look for the directive and add the folder to the list: # Add the templates directory to the DIR option: The template engine searches directories in the option before the application directories, so anything with the same name as an admin template will be loaded instead. To see this in action, copy the file into your directory, then modify it: You are now leaving Sunnydale You’ve now customized the logout page. If you click LOG OUT, then you’ll see the customized message: Django admin templates are deeply nested and not very intuitive, but you have full control over their presentation if you need it. Some packages, including Grappelli and Django Admin Bootstrap, have fully replaced the Django admin templates to change their appearance. Django Admin Bootstrap is not yet compatible with Django 3, and Grappelli only recently added support, so it may still have some issues. That being said, if you want to see the power of overriding admin templates, then check out those projects!"
    },
    {
        "link": "https://stackoverflow.com/questions/68833776/django-best-practices-regarding-custom-user-models",
        "document": "This is more of a general best practices question. When you start a new project in Django, do you generally create a custom User model, or rely on the default one?\n\nPersonally it seems cleaner to me if I don't mess with the default User model. If there are any additional attributes I want to add, I feel it is simpler to add a or model with a one-to-one/foreign key relation with a User.\n\nA lot of articles I've read about Django, however, disagree with this. Apparently it is recommended to build a custom User model? I'm curious about what everyone does, and what exactly I'm missing out on if I make either of these choices."
    },
    {
        "link": "https://testdriven.io/blog/customize-django-admin",
        "document": "Django's automatically generated admin site is one of the biggest strengths of the framework. The centralized admin interface lets you easily view and manipulate your models' data. This can save you a lot of time while developing and managing content.\n\nEven though the admin site is highly customizable, many developers aren't aware of its full capabilities. This results in developers creating views and functions for things that could be easily implemented with a bit of admin site tweaking.\n\nIn this article, we'll look at how to customize Django's admin site through practical examples. We'll cover the built-in customization options as well as customization via third-party packages such as DjangoQL, django-import-export, and django-admin-interface.\n\nBy the end of this article, you'll be able to:\n• Use to control which model fields are displayed\n• Add custom fields to and format existing ones\n• Enable search and filters via and\n• Handle model inlines for both and relationships\n• Use Django admin actions and create custom ones\n• Import data in and export data to different formats using\n• Modify the appearance of your admin site via\n\nTo demonstrate the different admin site customization options, I've prepared a simple web app. The web app serves as an event ticket sales system. It allows you to manage venues, concerts, concert categories, and tickets.\n\nIt has the following entity-relationship model:\n\nFirst, grab the source code from the repository on GitHub:\n\nInstall the requirements and migrate the database:\n\nOpen your favorite web browser and navigate to http://localhost:8000/admin. Try using your superuser credentials to access the Django admin site. After that, ensure the database is populated with a few venues, concert categories, concerts, and tickets.\n\nBefore continuing, I suggest you check the models in tickets/models.py. Pay attention to what fields a model has and how the models are connected.\n\nThe Django admin site provides some basic configuration options. These options allow you to change the site's title, header, site URL, and more. The setting can be especially convenient if you have multiple environments and want to differentiate between them easily.\n\nThe settings are usually modified in your project's main urls.py file.\n\nRename the Django admin to \"TicketPlus\" and tag the current environment as :\n\nAnother thing you should do is change the default URL. This'll make it more difficult for malicious actors to find your admin panel.\n\nChange your core/urls.py like so:\n\nYour admin site should now be accessible at http://localhost:8000/secretadmin.\n\nSome Django model attributes directly affect the Django admin site. Most importantly:\n• is used to define object's display name\n• class is used to set various metadata options (e.g., and )\n\nHere's an example of how these attributes are used in practice:\n• We provided the plural form since the plural of \"concert category\" isn't \"concert categorys\".\n• By providing the attribute the categories are now ordered by name.\n\nIn this section, we'll take a look at how to use the ModelAdmin class to customize the admin site.\n\nThe list_display attribute allows you to control which model fields are displayed on the model list page. Another great thing about it is that it can display related model fields using the operator.\n\nWait for the server to refresh and check out the concert list page in the admin.\n\nThe new list looks great, but there's a problem. By adding the venue to the , we introduced the N + 1 problem. Since Django needs to fetch the venue name for each concert separately, many more queries get executed.\n\nTo avoid the N + 1 problem, we can use the list_select_related attribute, which works similarly to the select_related method:\n\nNext, set the other s' s for venues and tickets:\n\nThe setting can also be used to add custom fields. To add a custom field, you must define a new method within the class.\n\nAdd a \"Sold Out\" field, which is if no tickets are available:\n\nWe used to set the column name and to tell Django that this column has a boolean value. This way, Django displays the tick/cross icon instead of and . We also had to add our method to .\n\nWe used to tell Django by what field this column is orderable.\n\nSometimes it can be helpful to add links to related model objects instead of just showing their display name. To demonstrate how this is done, we'll link venues on the concert list page.\n\nBefore we do that, let's take a look at the Django admin site URL structure:\n\nTo add a link to the venue change page, we'll have to use the following URL:\n\nAdd the method to like so:\n\nWe used the reverse method to reverse the URL and passed as the .\n\nWait for the development server to refresh and navigate to the concert list page. The venues should now be clickable.\n\nDjango admin makes it easy to filter objects. To enable filtering you must specify which fields or related model fields should be filterable. Best of all, Django can stack filters -- e.g., filter by two or more fields simultaneously.\n\nGo ahead and add the list_filter attribute to like so:\n\nFor more advanced filtering functionality, you can also define custom filters. To define a custom filter, you must specify the options or so-called and a for each .\n\nFor example, to filter by whether a concert is sold out or not, create a and include it in 's :\n\nVisit your admin site and make sure the filters work as expected.\n\nDjango admin provides basic search functionality. It can be enabled by specifying which model fields should be searchable via the attribute. Keep in mind that Django doesn't support fuzzy queries by default.\n\nLet's make our concerts searchable by their names, venues, and venue addresses.\n\nAdd the search_fields attribute to like so:\n\nWait for the server to refresh and test the search box.\n\nThe admin interface allows you to edit models on the same page as the parent model via inlines. Django provides two types of inlines StackedInline and TabularInline. The main difference between them is how they look.\n\nLet's use an inline to display venue concerts on the venue details page.\n\nCreate a and add it to 's like so:\n\nVisit your admin site and navigate to some venue's details page. Scroll down and there should be the \"Concerts\" inline section.\n\nDjango admin actions allow you to perform an \"action\" on an object or a group of objects. An action can be used to modify an object's attributes, delete the object, copy it, and so forth. Actions are primarily utilized for frequently performed \"actions\" or bulk changes.\n\nA perfect example is activating or deactivating a ticket. Suppose we have many tickets we'd like to activate. It would be pretty tedious to click each of them, change their property and save the model. Instead, we can define an action that'll do just that.\n\nDefine and actions and add them to like so:\n\nOpen your admin page once again, navigate to the ticket list view, and you should be able to see the custom actions. Test them by activating and deactivating a number of tickets at once.\n\nBy default, Django automatically generates a ModelForm for your model. That form is then used on the add and change page. If you want to customize the form or implement unique data validation, you'll have to override the form.\n\nTo demonstrate this, let's split into two input boxes and display radio buttons instead of a dropdown for the payment methods.\n\nGo ahead and create a forms.py file in the tickets app:\n• We added the and form fields.\n• We used the class to specify what model this form relates to and what fields to include.\n• On form , we populated the form using model instance data.\n• On , we merged and and saved it as .\n\nNext, set 's like so:\n\nRestart the development server and navigate to a ticket's details page. If everything went well, you should see that the first and last names are now in separate boxes and payment methods use radio buttons instead of a dropdown.\n\nThe Django admin site allows you to customize any visual aspect of it by overriding templates. All you have to do is:\n• Check out Django's source code and copy the original template.\n• Paste the template in \"templates/admin\" or \"templates/registration\", respectively.\n• Modify the template to your liking.\n\nMost of the time, you'll be able to get away with just changing a portion of the original template.\n\nFor example, if we want to add a message above the login form, we can inherit from login.html and then change the block:\n\nNavigate to your login page, and you should be able to see the yellow message.\n\nDjangoQL is a powerful third-party package that allows you to perform advanced queries without relying on raw SQL. It has its own syntax and auto-completion, supports logical operators, and works for any Django model.\n\nNext, add as the parent class to all s where you want to enable advanced searching capabilities.\n\nLet's add it to the for example:\n\nYou can now use the same search box as before to perform advanced queries. Examples:\n• returns tickets for concerts with more than 500 tickets left\n\nIn this section, we'll look at how to import and export object data via django-import-export, which is an excellent package for easily importing and exporting data in different formats, including JSON, CSV, and YAML. The package also comes with built-in admin integration.\n\nNext, add it to in core/settings.py:\n\nAfter that, add as the parent class to all the s you want to be importable/exportable.\n\nHere's an example for the :\n\nIf you navigate to your ticket page now, you should see that the export action has been added. Test it by selecting a few tickets and the desired format. Then, click \"Go\".\n\nYou can then test the import functionality by importing the just exported file.\n\nCustomizing the appearance of the admin site through template overriding can be awkward. You might accidentally break stuff, Django admin templates may change in the future, and it'll be a hassle to maintain.\n\nA better approach to styling your admin site is via the django-admin-interface package. This package comes with beautiful pre-made admin interface themes and allows you to customize different aspects of your admin site easily, including changing the colors, title, favicon, logo, and more.\n\nStart by installing it via pip:\n\nNext, add and to before :\n\nStart the development server and navigate to http://localhost:8000/secretadmin. You'll notice that your Django admin site looks more modern, and there'll be an \"Admin Interface\" section.\n\nClick \"Admin Interface > Themes\" to see all the currently installed themes. By default, there should be only one theme called \"Django\". If you wish, you can install three more themes via fixtures:\n\nClicking on an existing theme allows you to customize all the previously mentioned aspects.\n\nIn this article, we've covered many Django admin customization concepts. You should now be able to apply these concepts in practice and tailor the Django admin site to your project's needs.\n\nI suggest you to also check out our other Django admin related articles:"
    }
]