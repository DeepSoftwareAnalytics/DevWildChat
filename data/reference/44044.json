[
    {
        "link": "https://geeksforgeeks.org/python-string-upper",
        "document": "upper() method in Python is a built-in string method that converts all lowercase letters in a string to uppercase. This method is simple to use and does not modify the original string; instead, it returns a new string with the modifications applied.\n• None The upper() method converts all the lowercase letters to uppercase and returns a new string.\n• None The upper() method does not take any parameters.\n• None This method returns a new string in which all lowercase characters in the original string are converted to uppercase. If the original string has no lowercase letters then it returns the string unchanged.\n\nLet’s consider a scenario where we want to compare two strings without considering their case. The upper() method can help us standardize both strings to uppercase before comparison.\n• None The upper() method converts both s1 and s2 to uppercase.\n• s1.upper() == s2.upper() as both strings become “PYTHON”.\n\nupper() method is also very useful when we have a string with a mix of lowercase and uppercase letters, and we want to convert all characters to uppercase.\n• ‘s’ and converts all lowercase letters to their uppercase equivalents.\n\nQ2. Does the upper() method modify the original string?"
    },
    {
        "link": "https://thehelloworldprogram.com/python/python-string-methods",
        "document": "There are several built-in methods that allow us to easily make modifications to strings in Python. In this tutorial we will cover the .upper(), .lower(), .count(), .find(), .replace() and str() methods.\n\nBut first, let’s take a look at the len() method. While it’s not limited to strings, now is a good time to make the introduction. We use the built-in Python method, len(), to get the length of any sequence, ordered or unordered: strings, lists, tuples, and dictionaries. For example:\n\nThe .upper() and .lower() string methods are self-explanatory. Performing the .upper() method on a string converts all of the characters to uppercase, whereas the lower() method converts all of the characters to lowercase.\n\nThe .count() method adds up the number of times a character or sequence of characters appears in a string. For example:\n\nWhy didn’t it count all of the t‘s? Because ‘T’ is a different character from ‘t’. So, if we want to count all of the t‘s.\n\nWe can also count entire words, which, as we know, are sequences of characters:\n\nWe search for a specific character or characters in a string with the .find() method.\n\nThe results tell us that “hand” begins at the 13th position in the sequence.\n\nBut if we want to find the second “o” we need to specify a range.\n\nThis begins searching at the 8th element and finds “o” at 20. You can also specificy an end to the range, and, like slicing, we can do so backwards:\n\nLet’s say we want to increase the value of a statement. We do so with the .replace() method. For example:\n\nHow does one become one with everything? With the str() method.\n\nNow that you are enlightened, you can stop learning Python and live in the moment. OR: You can learn about lists in our next chapter."
    },
    {
        "link": "https://w3schools.com/python/ref_string_upper.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://ioflood.com/blog/python-uppercase",
        "document": "Are you finding it challenging to convert strings to uppercase in Python? You’re not alone. Many developers find themselves puzzled when it comes to this task. Think of Python’s string manipulation capabilities as a Swiss army knife – versatile and handy for various tasks.\n\nIn this guide, we’ll walk you through the process of converting strings to uppercase in Python, from the basics to more advanced techniques. We’ll cover everything from the function, dealing with special characters, as well as alternative approaches.\n\nTL;DR: How Do I Convert a String to Uppercase in Python?\n\nIn this example, we have a string ‘hello world’. We use the function on this string, which converts all the characters to uppercase. The result is ‘HELLO WORLD’.\n\nPython’s built-in function is your go-to tool for converting any string to uppercase. This function operates on a string and returns a new string where all the lowercase letters have been converted to uppercase.\n\nLet’s illustrate this with a simple example:\n\nIn this example, we have a string ‘python is fun’. We use the function on this string, which converts all the characters to uppercase. The result is ‘PYTHON IS FUN’.\n\nThe function is straightforward to use and effective for transforming strings to uppercase in Python. It’s essential to remember that this function doesn’t modify the original string because strings in Python are immutable. Instead, it returns a new string.\n\nOne of the great things about the function is its simplicity and efficiency. However, it’s worth noting that it may not behave as expected with strings containing non-English characters or special characters. We’ll explore more about this in the advanced usage section.\n\nAs you become more comfortable with Python’s function, you might encounter strings containing special characters or non-English characters. The function handles these cases too, but the results might not always be what you expect.\n\nLet’s see this in action with a string that includes a special character:\n\nIn this example, the special character ‘!’ is unaffected by the function, as it doesn’t have an uppercase version.\n\nNow, let’s consider a string with non-English characters:\n\nIn the case of non-English characters, such as ‘é’ and ‘ó’, the function successfully converts them to their uppercase counterparts.\n\nWhile the function is a powerful tool for string conversion in Python, it’s important to be aware of its limitations and quirks when dealing with special and non-English characters. Understanding these nuances will help you navigate string manipulation tasks more effectively.\n\nWhile the function is a reliable way to convert strings to uppercase in Python, it’s not the only tool at your disposal. Let’s explore some alternative approaches that you can use for this task.\n\nThe function is another built-in Python function that can be used to convert the first character of a string to uppercase. However, keep in mind that this function will make the rest of the string lowercase.\n\nAs you can see, the function converted the first character of the string to uppercase and the rest of the string to lowercase.\n\nPython’s vast ecosystem of third-party libraries also offers solutions for converting strings to uppercase. For instance, the library, commonly used for data manipulation and analysis, provides a method for its Series objects.\n\nHere’s how you can use it:\n\nIn this example, we created a pandas Series and used the method to convert all the strings in the Series to uppercase.\n\nBoth the function and the library provide effective alternatives to the function. However, they come with their own sets of advantages and disadvantages. The function is simple to use but only affects the first character of the string, while the method is powerful but requires understanding of the pandas library. Depending on your specific use case, one method may be more suitable than the others.\n\nAs you gain more experience with Python’s string manipulation capabilities, you may encounter a few common issues. Let’s discuss some of these and provide solutions and workarounds.\n\nOne common issue arises when dealing with mixed case strings. The function will convert all lowercase characters to uppercase, but it leaves the existing uppercase characters as they are. Let’s see this in action:\n\nAs you can see, the function has converted all the lowercase characters to uppercase, while the existing uppercase characters remain the same.\n\nAnother common issue involves handling strings with special characters. As we’ve seen earlier, the function does not affect special characters as they do not have an uppercase version.\n\nIn this code block, the special character ‘!’ is unaffected by the function.\n\nThese are just a few of the common issues you may encounter when converting strings to uppercase in Python. Understanding these potential pitfalls can help you navigate them more effectively in your coding journey.\n\nTo fully grasp the process of converting strings to uppercase in Python, it’s essential to understand some fundamental concepts about Python’s string data type and character encoding.\n\nIn Python, a string is a sequence of characters. It’s considered an immutable data type, meaning that you can’t change an existing string. Any operation that transforms a string will instead create a new string.\n\nLet’s take a look at a simple string declaration in Python:\n\nIn this example, we’ve created a string and assigned it to the variable . This string is a sequence of characters, including letters, a comma, and an exclamation mark.\n\nCharacter encoding is a system that pairs individual characters with their binary representations. Python uses Unicode, a universal character encoding standard that provides a unique number for every character across various platforms and languages.\n\nFor example, the Unicode code point for the letter ‘A’ is U+0041. In Python, you can represent this as a string using the escape sequence ‘\\u0041’:\n\nIn this code block, we’ve created a string that represents the Unicode code point for ‘A’. When we print this string, Python converts the Unicode code point to its corresponding character.\n\nUnderstanding these fundamentals of Python strings and character encoding can provide a solid foundation for mastering string manipulation tasks, such as converting strings to uppercase.\n\nThe Power of String Manipulation in Python: Beyond Uppercase Conversion\n\nString manipulation in Python extends far beyond converting strings to uppercase. It’s a powerful tool that plays a crucial role in various areas of programming and data science.\n\nIn data processing, string manipulation is often used to clean and prepare data. This can involve converting strings to a standard format, removing unwanted characters, or extracting specific information from strings.\n\nText mining is another field where string manipulation is essential. It involves extracting high-quality information from text using patterns and trends. Tasks can include sentiment analysis, topic modeling, and text classification, all of which rely heavily on the ability to manipulate and analyze strings.\n\nIf you’re interested in furthering your understanding of string manipulation in Python, there are several related concepts worth exploring. These include string formatting, which allows you to insert variables into strings, and regular expressions, a powerful tool for matching and manipulating strings.\n\nIn this example, we use string formatting to insert the variable into the string . The before the string indicates that it’s a formatted string.\n\nTo deepen your understanding of string manipulation in Python, here are some resources you might find useful:\n• Python Print: Strengthening Your Output Skills – Master printing in Python by leveraging the full potential of the print() function.\n• None Python Zfill Function – Learn how to use zfill() in Python for formatting numeric strings with fixed widths.\n• None Print to STDERR in Python – Understand how to print error messages to stderr in Python for debugging and logging.\n• None Official Python Documentation on String Methods – Explore Python’s official guide on string methods.\n• None Python String Manipulation Tutorial – Learn the essentials of manipulating strings in Python with this comprehensive tutorial.\n• None Python String Formatting Best Practices – Discover best practices for string formatting in Python.\n\nThese resources provide an in-depth look at Python’s string manipulation capabilities and can help you master this essential skill.\n\nWrapping Up: Mastering the Art of String Conversion in Python\n\nIn this comprehensive guide, we’ve delved into the process of converting strings to uppercase in Python. From using the built-in function to handling special and non-English characters, we’ve covered a wide range of techniques to help you master this fundamental aspect of Python string manipulation.\n\nWe began with the basics, learning how to use the function to convert strings to uppercase. We then ventured into more advanced territory, exploring how to handle strings containing special characters and non-English characters.\n\nWe also looked at alternative methods for converting strings to uppercase, such as using the function and leveraging third-party libraries like .\n\nAlong the way, we tackled common issues you might face when converting strings to uppercase in Python, such as dealing with mixed case strings and special characters, providing you with solutions and workarounds for each issue.\n\nWhether you’re a beginner just starting out with Python or an experienced developer looking to level up your string manipulation skills, we hope this guide has given you a deeper understanding of how to convert strings to uppercase in Python. Happy coding!"
    },
    {
        "link": "https://stackoverflow.com/questions/55010585/changing-string-to-uppercase-in-python",
        "document": "I' trying to change my variable to uppercase and I don't know what I'm getting wrong. Sample code:\n\nWhen I run the above code, is returned instead of ."
    },
    {
        "link": "https://peps.python.org/pep-0008",
        "document": "This document gives coding conventions for the Python code comprising the standard library in the main Python distribution. Please see the companion informational PEP describing style guidelines for the C code in the C implementation of Python. This document and PEP 257 (Docstring Conventions) were adapted from Guido’s original Python Style Guide essay, with some additions from Barry’s style guide . This style guide evolves over time as additional conventions are identified and past conventions are rendered obsolete by changes in the language itself. Many projects have their own coding style guidelines. In the event of any conflicts, such project-specific guides take precedence for that project.\n\nA Foolish Consistency is the Hobgoblin of Little Minds One of Guido’s key insights is that code is read much more often than it is written. The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code. As PEP 20 says, “Readability counts”. A style guide is about consistency. Consistency with this style guide is important. Consistency within a project is more important. Consistency within one module or function is the most important. However, know when to be inconsistent – sometimes style guide recommendations just aren’t applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don’t hesitate to ask! In particular: do not break backwards compatibility just to comply with this PEP! Some other good reasons to ignore a particular guideline:\n• When applying the guideline would make the code less readable, even for someone who is used to reading code that follows this PEP.\n• To be consistent with surrounding code that also breaks it (maybe for historic reasons) – although this is also an opportunity to clean up someone else’s mess (in true XP style).\n• Because the code in question predates the introduction of the guideline and there is no other reason to be modifying that code.\n• When the code needs to remain compatible with older versions of Python that don’t support the feature recommended by the style guide.\n\nContinuation lines should align wrapped elements either vertically using Python’s implicit line joining inside parentheses, brackets and braces, or using a hanging indent . When using a hanging indent the following should be considered; there should be no arguments on the first line and further indentation should be used to clearly distinguish itself as a continuation line: # Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest. # Arguments on first line forbidden when not using vertical alignment. # Further indentation required as indentation is not distinguishable. The 4-space rule is optional for continuation lines. # Hanging indents *may* be indented to other than 4 spaces. When the conditional part of an -statement is long enough to require that it be written across multiple lines, it’s worth noting that the combination of a two character keyword (i.e. ), plus a single space, plus an opening parenthesis creates a natural 4-space indent for the subsequent lines of the multiline conditional. This can produce a visual conflict with the indented suite of code nested inside the -statement, which would also naturally be indented to 4 spaces. This PEP takes no explicit position on how (or whether) to further visually distinguish such conditional lines from the nested suite inside the -statement. Acceptable options in this situation include, but are not limited to: # Add a comment, which will provide some distinction in editors # Since both conditions are true, we can frobnicate. # Add some extra indentation on the conditional continuation line. The closing brace/bracket/parenthesis on multiline constructs may either line up under the first non-whitespace character of the last line of list, as in: or it may be lined up under the first character of the line that starts the multiline construct, as in: Tabs should be used solely to remain consistent with code that is already indented with tabs. Limit all lines to a maximum of 79 characters. For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to 72 characters. Limiting the required editor window width makes it possible to have several files open side by side, and works well when using code review tools that present the two versions in adjacent columns. The default wrapping in most tools disrupts the visual structure of the code, making it more difficult to understand. The limits are chosen to avoid wrapping in editors with the window width set to 80, even if the tool places a marker glyph in the final column when wrapping lines. Some web based tools may not offer dynamic line wrapping at all. Some teams strongly prefer a longer line length. For code maintained exclusively or primarily by a team that can reach agreement on this issue, it is okay to increase the line length limit up to 99 characters, provided that comments and docstrings are still wrapped at 72 characters. The Python standard library is conservative and requires limiting lines to 79 characters (and docstrings/comments to 72). The preferred way of wrapping long lines is by using Python’s implied line continuation inside parentheses, brackets and braces. Long lines can be broken over multiple lines by wrapping expressions in parentheses. These should be used in preference to using a backslash for line continuation. Backslashes may still be appropriate at times. For example, long, multiple -statements could not use implicit continuation before Python 3.10, so backslashes were acceptable for that case: Another such case is with statements. Make sure to indent the continued line appropriately. Should a Line Break Before or After a Binary Operator? For decades the recommended style was to break after binary operators. But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line. Here, the eye has to do extra work to tell which items are added and which are subtracted: # operators sit far away from their operands To solve this readability problem, mathematicians and their publishers follow the opposite convention. Donald Knuth explains the traditional rule in his Computers and Typesetting series: “Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations” . Following the tradition from mathematics usually results in more readable code: In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth’s style is suggested. Surround top-level function and class definitions with two blank lines. Extra blank lines may be used (sparingly) to separate groups of related functions. Blank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations). Use blank lines in functions, sparingly, to indicate logical sections. Python accepts the control-L (i.e. ^L) form feed character as whitespace; many tools treat these characters as page separators, so you may use them to separate pages of related sections of your file. Note, some editors and web-based code viewers may not recognize control-L as a form feed and will show another glyph in its place. Code in the core Python distribution should always use UTF-8, and should not have an encoding declaration. In the standard library, non-UTF-8 encodings should be used only for test purposes. Use non-ASCII characters sparingly, preferably only to denote places and human names. If using non-ASCII characters as data, avoid noisy Unicode characters like z̯̯͡a̧͎̺l̡͓̫g̹̲o̡̼̘ and byte order marks. All identifiers in the Python standard library MUST use ASCII-only identifiers, and SHOULD use English words wherever feasible (in many cases, abbreviations and technical terms are used which aren’t English). Open source projects with a global audience are encouraged to adopt a similar policy.\n• Imports should usually be on separate lines: It’s okay to say this though:\n• Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants. Imports should be grouped in the following order: You should put a blank line between each group of imports.\n• Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on ): However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose: Standard library code should avoid complex package layouts and always use absolute imports.\n• When importing a class from a class-containing module, it’s usually okay to spell this: If this spelling causes local name clashes, then spell them explicitly: and use and .\n• Wildcard imports ( ) should be avoided, as they make it unclear which names are present in the namespace, confusing both readers and many automated tools. There is one defensible use case for a wildcard import, which is to republish an internal interface as part of a public API (for example, overwriting a pure Python implementation of an interface with the definitions from an optional accelerator module and exactly which definitions will be overwritten isn’t known in advance). When republishing names this way, the guidelines below regarding public and internal interfaces still apply. Module level “dunders” (i.e. names with two leading and two trailing underscores) such as , , , etc. should be placed after the module docstring but before any import statements except imports. Python mandates that future-imports must appear in the module before any other code except docstrings: \"\"\"This is the example module.\n\nWhen to Use Trailing Commas Trailing commas are usually optional, except they are mandatory when making a tuple of one element. For clarity, it is recommended to surround the latter in (technically redundant) parentheses: When trailing commas are redundant, they are often helpful when a version control system is used, when a list of values, arguments or imported items is expected to be extended over time. The pattern is to put each value (etc.) on a line by itself, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line. However it does not make sense to have a trailing comma on the same line as the closing delimiter (except in the above case of singleton tuples):\n\nThe naming conventions of Python’s library are a bit of a mess, so we’ll never get this completely consistent – nevertheless, here are the currently recommended naming standards. New modules and packages (including third party frameworks) should be written to these standards, but where an existing library has a different style, internal consistency is preferred. Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation. There are a lot of different naming styles. It helps to be able to recognize what naming style is being used, independently from what they are used for. The following naming styles are commonly distinguished:\n• (or CapWords, or CamelCase – so named because of the bumpy look of its letters ). This is also sometimes known as StudlyCaps. Note: When using acronyms in CapWords, capitalize all the letters of the acronym. Thus HTTPServerError is better than HttpServerError. There’s also the style of using a short unique prefix to group related names together. This is not used much in Python, but it is mentioned for completeness. For example, the function returns a tuple whose items traditionally have names like , , and so on. (This is done to emphasize the correspondence with the fields of the POSIX system call struct, which helps programmers familiar with that.) The X11 library uses a leading X for all its public functions. In Python, this style is generally deemed unnecessary because attribute and method names are prefixed with an object, and function names are prefixed with a module name. In addition, the following special forms using leading or trailing underscores are recognized (these can generally be combined with any case convention):\n• : weak “internal use” indicator. E.g. does not import objects whose names start with an underscore.\n• : used by convention to avoid conflicts with Python keyword, e.g. :\n• : when naming a class attribute, invokes name mangling (inside class FooBar, becomes ; see below).\n• : “magic” objects or attributes that live in user-controlled namespaces. E.g. , or . Never invent such names; only use them as documented. Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names. In some fonts, these characters are indistinguishable from the numerals one and zero. When tempted to use ‘l’, use ‘L’ instead. Identifiers used in the standard library must be ASCII compatible as described in the policy section of PEP 3131. Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged. When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. ). Class names should normally use the CapWords convention. The naming convention for functions may be used instead in cases where the interface is documented and used primarily as a callable. Note that there is a separate convention for builtin names: most builtin names are single words (or two words run together), with the CapWords convention used only for exception names and builtin constants. Names of type variables introduced in PEP 484 should normally use CapWords preferring short names: , , . It is recommended to add suffixes or to the variables used to declare covariant or contravariant behavior correspondingly: Because exceptions should be classes, the class naming convention applies here. However, you should use the suffix “Error” on your exception names (if the exception actually is an error). (Let’s hope that these variables are meant for use inside one module only.) The conventions are about the same as those for functions. Modules that are designed for use via should use the mechanism to prevent exporting globals, or use the older convention of prefixing such globals with an underscore (which you might want to do to indicate these globals are “module non-public”). Function names should be lowercase, with words separated by underscores as necessary to improve readability. Variable names follow the same convention as function names. mixedCase is allowed only in contexts where that’s already the prevailing style (e.g. threading.py), to retain backwards compatibility. Always use for the first argument to instance methods. Always use for the first argument to class methods. If a function argument’s name clashes with a reserved keyword, it is generally better to append a single trailing underscore rather than use an abbreviation or spelling corruption. Thus is better than . (Perhaps better is to avoid such clashes by using a synonym.) Use the function naming rules: lowercase with words separated by underscores as necessary to improve readability. Use one leading underscore only for non-public methods and instance variables. To avoid name clashes with subclasses, use two leading underscores to invoke Python’s name mangling rules. Python mangles these names with the class name: if class Foo has an attribute named , it cannot be accessed by . (An insistent user could still gain access by calling .) Generally, double leading underscores should be used only to avoid name conflicts with attributes in classes designed to be subclassed. Note: there is some controversy about the use of __names (see below). Constants are usually defined on a module level and written in all capital letters with underscores separating words. Examples include and . Always decide whether a class’s methods and instance variables (collectively: “attributes”) should be public or non-public. If in doubt, choose non-public; it’s easier to make it public later than to make a public attribute non-public. Public attributes are those that you expect unrelated clients of your class to use, with your commitment to avoid backwards incompatible changes. Non-public attributes are those that are not intended to be used by third parties; you make no guarantees that non-public attributes won’t change or even be removed. We don’t use the term “private” here, since no attribute is really private in Python (without a generally unnecessary amount of work). Another category of attributes are those that are part of the “subclass API” (often called “protected” in other languages). Some classes are designed to be inherited from, either to extend or modify aspects of the class’s behavior. When designing such a class, take care to make explicit decisions about which attributes are public, which are part of the subclass API, and which are truly only to be used by your base class. With this in mind, here are the Pythonic guidelines:\n• Public attributes should have no leading underscores.\n• If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name. This is preferable to an abbreviation or corrupted spelling. (However, notwithstanding this rule, ‘cls’ is the preferred spelling for any variable or argument which is known to be a class, especially the first argument to a class method.) Note 1: See the argument name recommendation above for class methods.\n• For simple public data attributes, it is best to expose just the attribute name, without complicated accessor/mutator methods. Keep in mind that Python provides an easy path to future enhancement, should you find that a simple data attribute needs to grow functional behavior. In that case, use properties to hide functional implementation behind simple data attribute access syntax. Note 1: Try to keep the functional behavior side-effect free, although side-effects such as caching are generally fine. Note 2: Avoid using properties for computationally expensive operations; the attribute notation makes the caller believe that access is (relatively) cheap.\n• If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with double leading underscores and no trailing underscores. This invokes Python’s name mangling algorithm, where the name of the class is mangled into the attribute name. This helps avoid attribute name collisions should subclasses inadvertently contain attributes with the same name. Note 1: Note that only the simple class name is used in the mangled name, so if a subclass chooses both the same class name and attribute name, you can still get name collisions. Note 2: Name mangling can make certain uses, such as debugging and , less convenient. However the name mangling algorithm is well documented and easy to perform manually. Note 3: Not everyone likes name mangling. Try to balance the need to avoid accidental name clashes with potential use by advanced callers. Any backwards compatibility guarantees apply only to public interfaces. Accordingly, it is important that users be able to clearly distinguish between public and internal interfaces. Documented interfaces are considered public, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. All undocumented interfaces should be assumed to be internal. To better support introspection, modules should explicitly declare the names in their public API using the attribute. Setting to an empty list indicates that the module has no public API. Even with set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still be prefixed with a single leading underscore. An interface is also considered internal if any containing namespace (package, module or class) is considered internal. Imported names should always be considered an implementation detail. Other modules must not rely on indirect access to such imported names unless they are an explicitly documented part of the containing module’s API, such as or a package’s module that exposes functionality from submodules.\n• Code should be written in a way that does not disadvantage other implementations of Python (PyPy, Jython, IronPython, Cython, Psyco, and such). For example, do not rely on CPython’s efficient implementation of in-place string concatenation for statements in the form or . This optimization is fragile even in CPython (it only works for some types) and isn’t present at all in implementations that don’t use refcounting. In performance sensitive parts of the library, the form should be used instead. This will ensure that concatenation occurs in linear time across various implementations.\n• Comparisons to singletons like None should always be done with or , never the equality operators. Also, beware of writing when you really mean if x is not None – e.g. when testing whether a variable or argument that defaults to None was set to some other value. The other value might have a type (such as a container) that could be false in a boolean context!\n• Use operator rather than . While both expressions are functionally identical, the former is more readable and preferred:\n• When implementing ordering operations with rich comparisons, it is best to implement all six operations ( , , , , , ) rather than relying on other code to only exercise a particular comparison. To minimize the effort involved, the decorator provides a tool to generate missing comparison methods. PEP 207 indicates that reflexivity rules are assumed by Python. Thus, the interpreter may swap with , with , and may swap the arguments of and . The and operations are guaranteed to use the operator and the function uses the operator. However, it is best to implement all six operations so that confusion doesn’t arise in other contexts.\n• Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier: The first form means that the name of the resulting function object is specifically ‘f’ instead of the generic ‘<lambda>’. This is more useful for tracebacks and string representations in general. The use of the assignment statement eliminates the sole benefit a lambda expression can offer over an explicit def statement (i.e. that it can be embedded inside a larger expression)\n• Derive exceptions from rather than . Direct inheritance from is reserved for exceptions where catching them is almost always the wrong thing to do. Design exception hierarchies based on the distinctions that code catching the exceptions is likely to need, rather than the locations where the exceptions are raised. Aim to answer the question “What went wrong?” programmatically, rather than only stating that “A problem occurred” (see PEP 3151 for an example of this lesson being learned for the builtin exception hierarchy) Class naming conventions apply here, although you should add the suffix “Error” to your exception classes if the exception is an error. Non-error exceptions that are used for non-local flow control or other forms of signaling need no special suffix.\n• Use exception chaining appropriately. should be used to indicate explicit replacement without losing the original traceback. When deliberately replacing an inner exception (using ), ensure that relevant details are transferred to the new exception (such as preserving the attribute name when converting KeyError to AttributeError, or embedding the text of the original exception in the new exception message).\n• When catching exceptions, mention specific exceptions whenever possible instead of using a bare clause: A bare clause will catch SystemExit and KeyboardInterrupt exceptions, making it harder to interrupt a program with Control-C, and can disguise other problems. If you want to catch all exceptions that signal program errors, use (bare except is equivalent to ). A good rule of thumb is to limit use of bare ‘except’ clauses to two cases:\n• If the exception handler will be printing out or logging the traceback; at least the user will be aware that an error has occurred.\n• If the code needs to do some cleanup work, but then lets the exception propagate upwards with . can be a better way to handle this case.\n• When catching operating system errors, prefer the explicit exception hierarchy introduced in Python 3.3 over introspection of values.\n• Additionally, for all try/except clauses, limit the clause to the absolute minimum amount of code necessary. Again, this avoids masking bugs: # Will also catch KeyError raised by handle_value()\n• When a resource is local to a particular section of code, use a statement to ensure it is cleaned up promptly and reliably after use. A try/finally statement is also acceptable.\n• Context managers should be invoked through separate functions or methods whenever they do something other than acquire and release resources: The latter example doesn’t provide any information to indicate that the and methods are doing something other than closing the connection after a transaction. Being explicit is important in this case.\n• Be consistent in return statements. Either all return statements in a function should return an expression, or none of them should. If any return statement returns an expression, any return statements where no value is returned should explicitly state this as , and an explicit return statement should be present at the end of the function (if reachable):\n• Use and instead of string slicing to check for prefixes or suffixes. startswith() and endswith() are cleaner and less error prone:\n• Object type comparisons should always use isinstance() instead of comparing types directly:\n• For sequences, (strings, lists, tuples), use the fact that empty sequences are false:\n• Don’t write string literals that rely on significant trailing whitespace. Such trailing whitespace is visually indistinguishable and some editors (or more recently, reindent.py) will trim them.\n• Don’t compare boolean values to True or False using :\n• Use of the flow control statements / / within the finally suite of a , where the flow control statement would jump outside the finally suite, is discouraged. This is because such statements will implicitly cancel any active exception that is propagating through the finally suite: With the acceptance of PEP 484, the style rules for function annotations have changed.\n• Function annotations should use PEP 484 syntax (there are some formatting recommendations for annotations in the previous section).\n• The experimentation with annotation styles that was recommended previously in this PEP is no longer encouraged.\n• However, outside the stdlib, experiments within the rules of PEP 484 are now encouraged. For example, marking up a large third party library or application with PEP 484 style type annotations, reviewing how easy it was to add those annotations, and observing whether their presence increases code understandability.\n• The Python standard library should be conservative in adopting such annotations, but their use is allowed for new code and for big refactorings.\n• For code that wants to make a different use of function annotations it is recommended to put a comment of the form: near the top of the file; this tells type checkers to ignore all annotations. (More fine-grained ways of disabling complaints from type checkers can be found in PEP 484.)\n• Like linters, type checkers are optional, separate tools. Python interpreters by default should not issue any messages due to type checking and should not alter their behavior based on annotations.\n• Users who don’t want to use type checkers are free to ignore them. However, it is expected that users of third party library packages may want to run type checkers over those packages. For this purpose PEP 484 recommends the use of stub files: .pyi files that are read by the type checker in preference of the corresponding .py files. Stub files can be distributed with a library, or separately (with the library author’s permission) through the typeshed repo . PEP 526 introduced variable annotations. The style recommendations for them are similar to those on function annotations described above:\n• Annotations for module level variables, class and instance variables, and local variables should have a single space after the colon.\n• There should be no space before the colon.\n• If an assignment has a right hand side, then the equality sign should have exactly one space on both sides:\n• Although the PEP 526 is accepted for Python 3.6, the variable annotation syntax is the preferred syntax for stub files on all versions of Python (see PEP 484 for details)."
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/342374/should-i-really-use-all-uppercase-for-my-constants",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/50794689/should-i-capitalize-constant-in-python",
        "document": "In PEP8, the general rule is to declare constants in UPPER_CASE chars. In real life, there can be a number of situations:\n\nTypically we consider string-type or numeric-type variables as immutable and thus constants, but not object or function. The problem is there is no-way a linter can do type-checking.\n\nHow do you deal with this case? Should I capitalize them or just disable this rule in my linter?"
    },
    {
        "link": "https://medium.com/@rowainaabdelnasser/python-naming-conventions-10-essential-guidelines-for-clean-and-readable-code-fe80d2057bc9",
        "document": "Introduction: Python is known for its simplicity and readability, and adopting consistent naming conventions is a crucial aspect of writing clean and maintainable code. In this article, we will explore the top 10 essential guidelines for Python naming conventions. Following these practices will not only make your code more readable but also improve collaboration among developers and enhance code maintainability.\n\nWhen it comes to naming variables, functions, classes, and modules in Python, the overriding principle is clarity and readability. Your code is read more often than it is written, so prioritize names that clearly convey their purpose and functionality. Remember, descriptive names make your code self-explanatory and help other developers understand it effortlessly\n\nPython offers various naming styles, such as lowercase, lowercase with underscores, CamelCase, and ALL_CAPS. It is crucial to choose a naming style that aligns with your project’s conventions and stick to it consistently. For variables and functions, use lowercase with underscores (snake_case). For classes, use CamelCase.\n\nTo ensure consistency and familiarity among Python developers, it is recommended to follow the guidelines outlined in the Python Enhancement Proposal (PEP) 8 style guide. PEP 8 provides comprehensive recommendations for naming conventions, code layout, and best practices. Adhering to PEP 8 allows for easier collaboration and better code maintainability.\n\nTo prevent conflicts and confusion, certain names should be avoided in Python. For instance, refrain from using built-in functions or module names as variable names. Additionally, single-character variable names should generally be avoided, except for simple counters or iterators. Meaningful and descriptive names enhance code comprehension and reduce ambiguity.\n\nWhile Python supports Unicode characters for variable names, it is recommended to use ASCII characters for compatibility across platforms, editors, and tools. Non-ASCII characters can lead to encoding issues and hinder the portability of your codebase. Stick to ASCII characters to ensure smooth collaboration and consistent code execution.\n\nWhen naming packages and modules in Python, opt for short and concise names that clearly describe their purpose. Avoid using underscores or hyphens in package names to maintain consistency with the Python standard library and third-party packages. However, it is acceptable to use underscores for sub-modules within a package.\n\nFor class names in Python, follow the CamelCase convention. Start each word with an uppercase letter, without any underscores or hyphens. Class names should be descriptive, reflecting the purpose or behavior of the class. Avoid abbreviations or overly generic names to maintain clarity and improve code comprehension.\n\nWhen defining type hints or type variables, adhere to the convention of using CamelCase with a leading capital letter. This practice helps distinguish type variables from regular variables and improves code readability, especially when working with complex type annotations.\n\nException names should be descriptive and convey that they represent an exceptional condition. To make it clear that an object represents an error or exception, it’s recommended to suffix the name with “Error.” This convention differentiates exceptions from regular classes and enhances code comprehension.\n\nConstants are values that are not expected to change during runtime. By convention, constant names are written in uppercase letters with underscores separating words. Defining constants at the module level allows them to be easily accessed and used throughout the project.\n\nConclusion: Following consistent naming conventions is a vital aspect of writing clean, readable, and maintainable Python code. By adopting these top 10 essential guidelines for Python naming conventions, you can improve collaboration, enhance code comprehension, and ensure your codebase remains consistent and easy to maintain. Remember to prioritize clarity and readability when choosing names, and always refer to the PEP 8 style guide for comprehensive guidance on Python coding standards.\n\nYou can check more details about the naming conventions in Python at the following link: PEP 8 — Style Guide for Python Code | peps.python.org"
    },
    {
        "link": "https://stackoverflow.com/questions/159720/what-is-the-naming-convention-in-python-for-variables-and-functions",
        "document": "Coming from a C# background the naming convention for variables and methods are usually either camelCase or PascalCase: In Python, I have seen the above but I have also seen snake_case being used: Is there a more preferable, definitive coding style for Python?"
    }
]