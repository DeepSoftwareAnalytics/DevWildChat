[
    {
        "link": "https://forum.sublimetext.com/t/project-specific-package-settings/57848",
        "document": "In general, setting in a project go into a key in the file. However, it’s up to whatever code is looking things up in settings to know to look to get project specific settings that are set that way, so if the package doesn’t support it, it can’t be done.\n\nI don’t use so I’m not aware offhand if it supports something like that (though it seems like it would based on what it does). Does the documentation for the package say anything about how to configure it?"
    },
    {
        "link": "https://stackoverflow.com/questions/23789410/how-to-edit-sublime-text-build-settings",
        "document": "I want to enable in Sublime Text 3's C++ Single File build on Ubuntu 12.04.\n\nI have already upgraded the tool chain to the latest g++ and do not want to see the following error on every build:\n\nerror: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options.\n\nI browsed to but cannot find any file to edit.\n\nHow can I edit the build settings?"
    },
    {
        "link": "https://sublimetext.com/docs/build_systems.html",
        "document": "Sublime Text provides build systems to allow users to run external programs. Examples of common uses for build systems include: compiling, transpiling, linting, and executing tests.\n\nBuild systems are specified via JSON and saved in a file with the extension .sublime-build. A new build system can be created by the Tools Build System New Build System… menu item or the command palette entry.\n\nBuild systems have various ways they can associate themselves with files and projects. Using this information, Sublime Text can intelligently display only viable build systems to the user. The built-in target provides common options to get up and running quickly. For more complex requirements, build systems can target custom Sublime Text commands written in Python.\n• None Remembering the last used build system A build can be run by one of the following methods: Output will be shown in an output panel displayed at the bottom of the Sublime Text window. By default, Sublime Text uses automatic selection of build systems. When a user invokes a build, the current file’s syntax and filename will be used to pick the appropriate build system. If more than one build system matches the current file type, the user will be prompted to pick the build system they wish to use. Once a build system has been selected, Sublime Text will remember it until the user changes their selection. To change the build system, within the viable options, use one of the following methods: Build systems allow navigation of files specified in the build output. Typically this is used to jump to the location of errors. Navigation can be performed via: An in-process build can be cancelled via:\n\nAll build systems may use the following top-level keys in the .sublime-build file: A selector to match the syntax that this build system should be enabled for. Patterns of file names the build system should be enabled for. File names, if present in one of the opened folders, that will cause the build system to be enabled. Subsidiary build systems that will inherit the options from the top-level build system. Each variant needs to specify a key, and may override or add options to the top-level build system. A string command name, or an array of string options. If a string is specified, the command specified will be used to cancel the build. If an array of strings, the primary will be called, with these options added on. This only needs to be specified when using a custom . The command to run when the build system is invoked. The default value of allows use of the additional options specified in exec Target Options. If a value other than is specified, none of the options in exec Target Options will do anything. See the Advanced Example for a complete example. Options to use when the build system is being executed on a Windows machine. Options to use when the build system is being executed on a Mac machine. Options to use when the build system is being executed on a Linux machine.\n\nThe default of is used by the majority of build systems. It provides the following options to control what program to execute, and how to display the results. The executable to run, plus any arguments to pass to it. Shell constructs such as piping and redirection are not supported – see . A shell command to execute. Unlike the option, this does allow piping and redirection. Will use on Mac and Linux machine, and on Windows. This takes precedence over . If you want to override the in a build variant with a then also set the to . The directory to execute the or within. A regular expression to run on the build output to match file information. The matched file information is used to enable result navigation. The regex should capture 2, 3 or 4 groups. The capture groups should be: A regular expression to run on the build output to match line information. The matched file information is used to enable result navigation. The regex should capture 1, 2 or 3 groups. This regular expression is only necessary when some results contain strictly a line number, line and column numbers, or line and column numbers with a message. When such a match is made, the option will be used to search backwards to find the appropriate file name. The encoding of the build system output. Uses Python codec names. Defaults to . Environment variable values to use when running the or . Reduces the amount of output about the build system invocation. Turns on word wrapping in the build system output panel. The syntax file to use to highlight the build system output panel.\n\nWhen implementing a command to act as a build system target, the command’s keyword arguments are available via options in the .sublime-build file. However, certain parameter names will not work since they conflict with built-in build system functionality. The following names will not be passed as arguments to commands. This also applies to other situations, such as options specified in the , , and options.\n\nThe following variables will be expanded within any string specified in the , or options. If a literal needs to be specified in one of these options, it must be escaped with a . Since JSON uses backslashes for escaping also, will need to be written as . Please note that this substitution will occur for any <span class=”key”>”target”</span>. If a custom target is used, it may implement variable expansion for additional options by using with the result from . </p> The path to the Packages/ folder. The platform Sublime Text is running on: , or . The full path, including folder, to the file in the active view. The path to the folder that contains the file in the active view. The file name (sans folder path) of the file in the active view. The file name, exluding the extension, of the file in the active view. The extension of the file name of the file in the active view. The full path to the first folder listed in the side bar. The full path to the current project file. The path to the folder containing the current project file. The file name (sans folder path) of the current project file. The file name, excluding the extension, of the current project file. The extension of the current project file.\n\nThe following example shows a custom command, with the ability to cancel a build and navigate results. A for a build system should be a . This will provide the instance variable of to allow interaction with the current project, window and active view. Please note that the following example is somewhat simplistic in its implementation, and it won’t handle many common edge cases. The following Python can be saved to a file named Package/User/my_example_build.py: # The Cancel build option should only be available # when the process is still running # A lock is used to ensure only one thread is # the primary matching, but result_line_regex is used # when build output includes some entries that only # listing the file info. The result_base_dir sets the # If exactly the requested number of bytes was # read, there may be more data, and the current # data may contain part of a multibyte char # We pass out to a function to ensure the # timeout gets the value of out right now, The custom can be configured as a build system using the following JSON saved to a file named Packages/User/My Example Build.sublime-build:"
    },
    {
        "link": "https://forum.sublimetext.com/t/project-specific-settings-override/9103",
        "document": "I know this is an old thread. The current documentation of projects seems pretty similar to docs for version 2. Is it still not possible to make os specific settings for projects similar to “osx” , “linux” & “windows” for the build systems? I am looking for a way to reuse my project file on different operating systems and need a way to specify the folder paths differently per operating system.\n\nThe content of my projects is managed with Github and I would like to have the same project settings on different operating systems. I could copy a project file and rename it and change the path. But that would mean that I can’t make sure that edits of other features in it, e.g. build-system or lsp/venv settings would stay in sync. Any idea?"
    },
    {
        "link": "https://docs.sublimetext.info/en/latest/reference/build_systems/configuration.html",
        "document": "The build system framework in Sublime Text tries to be flexible enough to accommodate a large number of build scenarios. Should the default configuration options fall short for your needs, you can implement your own build system mechanism in two main ways:\n• as a custom command (still using the default build system framework)\n• as an entirely new plugin (skipping the build system framework)\n\nThis is a list of standard options that all build systems understand. These options are used internally by Sublime Text. The command does not receive any of these options. A Sublime Text . Defaults to ( ). This command receives all the target command arguments specified in the file (as ). Used to override the default build system command. Note that if you choose to override the default command for build systems, you can add any number of extra options to the file. Used when Tools | Build System | Automatic is set to . Sublime Text uses this scope selector to find the appropriate build system for the active view. Used to selectively apply options by OS. OS-specific values override defaults. Each of the listed items accepts a dictionary of options. A list of dictionaries of options. Variant names will appear in the Command Palette for easy access if the build system’s selector matches for the active file. Using variants it’s possible to specify multiple build system tasks in the same file. Identifies a build system task. If the is ‘Run’, the variant will show up under Tools | Build System. Sublime Text will automatically bind the ‘Run’ task to . Thanks to the setting, which overrides the default command with any other command of your choice, a build system may contain any number of custom arguments that the new command accepts. The , and elements let you provide platform-specific data in the build system. Here’s an example: In this case, will be executed for every platform except Windows, where will be used instead. Here’s a contrived example of a build system with variants: Given these settings, would run the date command, would run the Python interpreter and the remaining variants would appear in the Command Palette as whenever the build system was active.\n\nWhen build systems output text to a results view, it’s possible to capture results data in order to enable result navigation. Results can also mean errors. Often, build systems produce error data. Set the following view settings in a results view if you want to enable results navigation: A Perl-style regular expression to capture up to four fields of error information from a results view, namely: filename, line number, column number and error message. Use groups in the pattern to capture this information. The filename field and the line number field are required. If doesn’t match but exists and does match on the current line, walk backwards through the buffer until a line matching is found, and use the two matches to determine the file and line to go to. Used to find files where results occur. When result data is captured, you can navigate to results in your project’s files with and . If available, the captured error message will be displayed in the status bar.\n\nBuild systems expand the following variables in files: The directory of the current file, e.g., C:\\Files. The full path to the current file, e.g., C:\\Files\\Chapter1.txt. The name portion of the current file, e.g., Chapter1.txt. The extension portion of the current file, e.g., txt. The name-only portion of the current file, e.g., Document. The full path to the Packages folder. The full path to the current project file. The directory of the current project file. The name portion of the current project file. The extension portion of the current project file. The name-only portion of the current project file. Features found in snippets can be used with these variables. For example: This will emit the name of the current project if there is one, otherwise . This will emit the full path of the current file, replacing .php with .txt."
    },
    {
        "link": "https://sublimetext.com/docs",
        "document": ""
    },
    {
        "link": "https://packagecontrol.io/packages/Terminus",
        "document": "The first cross platform terminal for Sublime Text.\n\nThis package is heavily inspired by TerminalView. Compare with TerminalView, this has\n• imgcat support (PS: it also works on Linux / WSL)\n• None OdatNurd has made several videos on Terminus. See, for examples,\n• https://www.youtube.com/watch?v=etIJMVIvVgg (most up to date)\n\nTerminus comes with several shell configurations. The settings file should be quite self explanatory.\n\nYou may find these key bindings useful. To edit, run . Check the details for the arguments of below.\n\nor by passing a custom , say\n• open terminal in a split view by using Origami's\n\nFollowing keybinding can be considered if one wants to use to close terminals.\n• run . Check the details for the arguments of below\n\nor by passing custom , say\n• open terminal in a split tab by using Origami's\n\nIt is possible to use as a build system. The target is a drop in replacement of the default target . It takes exact same arguments as except that their default values are set differently.\n\nis used to cancel the build when user runs triggered by (macOS) or (Windows / Linux).\n\nThe following is an example of build system define in project settings that run a python script\n\nThe same Hello World example could be specified via a file.\n\nInstead of , user could also specify . In macOS and linux, a bash shell will be invoked; and in Windows, cmd.exe will be invoked.\n• None Bash: add the following in or\n• None Zsh: add the following in\n\nSome programs, such as julia, do not recognize the standard keycodes for and . You could bind them to and respectively “json [ { \"keys”: [“alt+left”], “command”: “terminus_keypress”, “args”: {“key”: “b”, “alt”: true}, “context”: [{“key”: “terminus_view”}] }, { “keys”: [“alt+right”], “command”: “terminus_keypress”, “args”: {“key”: “f”, “alt”: true}, “context”: [{“key”: “terminus_view”}] } ]\n• None the setting can be used to identify the terminal and\n• None keybind can be binded with specific tagged terminal\n• text can be sent to the terminal with\n\nIf is not provided or is , the text will be sent to the first terminal found in the current window.\n\nIt is known that Terminus sometimes consumes a lot of memory after extensive use. It is because Sublime Text keeps an infinite undo stack. There is virtually no fix unless upstream provides an API to work with the undo stack. Meanwhile, users could execute to release the memory.\n\nThis issue has been fixed in Sublime Text >= 4114 and Terminus v0.3.20.\n\nIt is known that the color of the scrollback history will be lost when a terminal is maximized or minimized from or to the panel. There is no fix for this issue.\n\nIf you are using DA UI and your terminal panel has weird background color, try playing with the setting or in .\n\nOr, to keep the Find and Replace panels unchanged: “json \"panel_text_output_background_color”: “$background_color”"
    },
    {
        "link": "https://sublimetext.com/docs/1/plugin-basics",
        "document": "Sublime Text is extensible via Python. Extending is simply a matter of placing a python file under the Packages directory (For example C:\\Documents and Settings\\ username \\Application Data\\Sublime Text\\Packages\\User).\n\nEach python file within the Packages directory is automatically scanned for Plugins, and automatically reloaded when changed.\n\nTo make a command that may be bound to a key, placed in a menu, etc, simply create a class extending sublimeplugin.TextCommand and override the run() method.\n\nTo make a plugin that receives notification of file load, save, etc, create a class extending sublimeplugin.Plugin, and implement one or more of the event methods (onLoad, onPostSave, etc). Note that TextCommand and friends themselves extend from Plugin, and may receive events.\n\nWhen developing plugins, all syntax errors and print statements are directed to the console (accessible via Ctrl+~).\n\nNext step: Take a look at some of the examples, or have a look over the API reference."
    },
    {
        "link": "https://sublimerepl.readthedocs.io",
        "document": "SublimeREPL is a plugin for Sublime Text 2 that lets you run interactive interpreters of several languages within a normal editor tab. It also allows connecting to a running remote interpreter (e.g. Clojure/Lein) though a telnet port.\n\nSublimeREPL has a built-in support for command history and transferring code from open buffers to the interpreters for evaluation, enabling interactive programming.\n\nSublimeREPL adds itself as a submenu in Tools. You can choose any one of the preconfigured REPLs and if it’s available in your SYSTEM PATH , it will be launched immediately. Second and more user friendly way to launch any given REPL is through Command Palette. Bring up Command Palette and type “repl”. You will be presented with all preconfigured REPLs. Running REPL through Command Palette has exactly the same result as picking it from Tools > SublimeREPL menu. You may now use a source buffer to either evaluate text from the buffer in the REPL or copy text over to the REPL without evaluation. For this to work, ensure that the language syntax definition for your source buffer matches the REPL.\n\nThe default shortcuts shipped with SublimeREPL are listed below. If you are accustomed to another REPL keymap, or if you intend to work in REPL a lot (lispers pay attention!) you may want to rebind the keys more to your liking. The list below omits the trivial text editing keybindings (e.g. left, right etc). They are nevertheless configurable in keymap files. Walk back to next input, with autocomplete Walk back to next input, no autocomplete The keybindings here use Ctrl+, as a prefix (C-, in emacs notation), meaning press Ctrl, press comma, release both. Pressing the prefix combination and then the letter will immediately send the target text into the REPL and evaluate it as if you pressed enter. If you want to prevent evaluation and send the text for editing in the REPL, press Shift with the prefix combination. Default source buffer keys are identical on all platforms. Send the current “block” to REPL. Currently Clojure-only.\n\nSublimeREPL’s integration with a specific language includes language-specific main menu and palette options for REPL startup, keymaps, and special REPL extensions unique to the target language. An integration may contain several different REPL modes which are based on different underlying classes. The Clojure integration supports Leiningen projects. You must install Leiningen to use Clojure integration. If your Leiningen installation is not system-global, you may need to tweak SublimeREPL configuration (via Preferences > Package Settings > SublimeREPL > Settings - User) so that we can find your lein binary: To start a REPL subprocess with Leiningen project environment, open your and, while it is the current file, use the menu or the command palette to start the REPL.\n• In subprocess REPL mode, the REPL is launched as a subprocess of the editor. This is the mode you should use right now.\n• The telnet mode no longer works because of the changes in Leiningen and nrepl. The source buffer “send block” command (Ctrl+, b) deserves a special mention. Performing this command while the cursor is within the body of a definition will select this (current, top-level) definition and send it to the REPL for evaluation. This means that the latest version of the function you’re currently working on will be installed in the live environment so that you can immediately start playing with it in the REPL. This is similar to [slime -]eval-defun in emacs. Additional keybindings are available for Clojure: Both stock Python and Execnet integrations support virtualenv. Various ways to work with Python, including PDB and IPython, are supported. For virtualenv created environments to be discoverable by SublimeREPL they should be created or symlinked in one of the following: Alternatively, more paths can be added to “python_virtualenv_paths” in the SublimeREPL configuration file. Documentation contributions from a Python specialist are welcome.\n\nSublimeREPL can’t launch the REPL process - OSError(2, ‘No such file or directory’), how do I fix that? Sublime is unable to locate the binary that is needed to launch your REPL in the search paths available to it. This is because the subprocess REPLs are launched, as, well, subprocesses of Sublime environment, which may be different from your interactive environment, especially if your REPL is installed in a directory that is not in a system-wide path (e.g or ‘/home/myusername` on Linux, on Windows etc) If the binary is not in your system path and you can’t or won’t change that, tweak SublimeREPL configuration: I’d like an interactive REPL for Foo and it is not supported, what do? Chances are, you only need a minimal amount of work to add an integration, and necessary steps are described here briefly. If you already have an interactive shell for Foo, you can use the subprocess REPL. For an example, see PHP or Lua integration in . If Foo provides an interactive environment over TCP, you can use the telnet REPL. For an example, see MozRepl integration\n\nIf this is your first time dealing with Sublime plugins, you may find it a bit too magical. Basically, Sublime automatically scans plugin directories loads configuration files and plugin code without manual intervention, and reloads them dynamically as soon as they change. The entry points to a plugin’s code are its commands, which are Python objects that extend Sublime’s standard command class. Sublime calls them when needed. There is no initialization entry point or a “plugin loaded” callback or somesuch. A language integration in SublimeREPL consists of configuration files and, where needed, Python code. The configuration consists of:\n• Menu configuration files which specify the actual REPL object configuration REPLs are started by SublimeREPL command . The command and its arguments is usually specified in the menu configuration file, and the other places refer to that configuration item by file name and ID using the command. Simple language integrations use an existing REPL class (see below) without modification. For these integrations, no additional Python code is needed. They use one of the standard REPL classes as the base, as documented below. In most cases, this will be the subprocess based REPL class. An example of such an integration is Lua. This adds a “Lua” menu item to “Tools > SublimeREPL” which creates a Lua REPL via SublimeREPL command . The important part to take note of here is the attribute ( ). This is the ID by which the command palette configuration file refers to Lua REPL configuration. As you can see, the main way to launch a new REPL is the SublimeREPL command (class ). The menu configuration file (see above) specifies the arguments for the command that are used to locate the desired REPL class and the settings for it so that it can be spawned. The command configuration file looks like this: It is obvious that the REPL configuration is concentrated in the menu files, and the palette configuration only refers to those by ID and file name. The latter is achieved by the command (class ) This command is a wrapper that is used in the command palette configuration. Its function is to execute another command. It takes an ID of a configuration item and the name of a file where the configuration is stored, and scans the available Sublime configuration folders for the file and within the file for the configuration item until one is found. This allows the command palette configuration to specify a reference to the REPL configuration command instead of replicating it. For this reason, actual REPL configuration is concentrated in the menu files. All REPL instances are descendants of . New integrations can either provide their own class, or use one of the base classes that ship with SublimeREPL:\n• Class for subprocess-based REPLs. The process running in the REPL is a subprocess of the editor. The input and output of the process is connected to the output and the input of the REPL\n• Class . The process runs outside of the editor, presumably having been spawned externally, and the REPL connects to it over TCP via Python . There are three integrations that provide their own classes:\n• Class . This is only used by PowerShell integration.\n• Class . This is only used by Execnet Python integration All these can be found in the plugin’s subdirectory. A REPL class is expected to provide a standard interface for SublimeREPL integration: Read and return some bytes from REPL’s incoming stream, blocking as necessary. will set up a separate thread with a pump that keeps polling this method. Write some bytes to REPL’s outgoing stream. User input in the REPL view’s command line will be delivered here.\n• User interaction causes the execution of command. Its arguments are usually taken from a menu configuration file.\n• The open() method of ReplManager is called, where a Repl instance and a ReplView instance get created\n• Within the ReplView constructor, the read and write loops get started. The REPL is now alive. Class is responsible for managing REPL instances (subclasses of ). It initializes new REPLs by:\n• Providing an instance of the Sublime view associated with the REPL by reusing an existing one, or creating a new one\n• Creating and remembering a named instance that couples between the two. A instance is a coupling between a REPL instance and a Sublime view. Its main responsibility is to create Sublime views and maintain the loops that read from, and write to, the REPL.\n• The incoming data from the REPL is read in a separate thread using , because read operations are assumed to be blocking\n• The outgoing data is written into the REPL by ReplView’s method py:method: . This method is called by ReplView’s constructor at the very end and, as long as the associated REPL object is alive, will reschedule itself with Sublime’s py:method: ."
    },
    {
        "link": "https://sublimetext.com/docs/build_systems.html",
        "document": "Sublime Text provides build systems to allow users to run external programs. Examples of common uses for build systems include: compiling, transpiling, linting, and executing tests.\n\nBuild systems are specified via JSON and saved in a file with the extension .sublime-build. A new build system can be created by the Tools Build System New Build System… menu item or the command palette entry.\n\nBuild systems have various ways they can associate themselves with files and projects. Using this information, Sublime Text can intelligently display only viable build systems to the user. The built-in target provides common options to get up and running quickly. For more complex requirements, build systems can target custom Sublime Text commands written in Python.\n• None Remembering the last used build system A build can be run by one of the following methods: Output will be shown in an output panel displayed at the bottom of the Sublime Text window. By default, Sublime Text uses automatic selection of build systems. When a user invokes a build, the current file’s syntax and filename will be used to pick the appropriate build system. If more than one build system matches the current file type, the user will be prompted to pick the build system they wish to use. Once a build system has been selected, Sublime Text will remember it until the user changes their selection. To change the build system, within the viable options, use one of the following methods: Build systems allow navigation of files specified in the build output. Typically this is used to jump to the location of errors. Navigation can be performed via: An in-process build can be cancelled via:\n\nAll build systems may use the following top-level keys in the .sublime-build file: A selector to match the syntax that this build system should be enabled for. Patterns of file names the build system should be enabled for. File names, if present in one of the opened folders, that will cause the build system to be enabled. Subsidiary build systems that will inherit the options from the top-level build system. Each variant needs to specify a key, and may override or add options to the top-level build system. A string command name, or an array of string options. If a string is specified, the command specified will be used to cancel the build. If an array of strings, the primary will be called, with these options added on. This only needs to be specified when using a custom . The command to run when the build system is invoked. The default value of allows use of the additional options specified in exec Target Options. If a value other than is specified, none of the options in exec Target Options will do anything. See the Advanced Example for a complete example. Options to use when the build system is being executed on a Windows machine. Options to use when the build system is being executed on a Mac machine. Options to use when the build system is being executed on a Linux machine.\n\nThe default of is used by the majority of build systems. It provides the following options to control what program to execute, and how to display the results. The executable to run, plus any arguments to pass to it. Shell constructs such as piping and redirection are not supported – see . A shell command to execute. Unlike the option, this does allow piping and redirection. Will use on Mac and Linux machine, and on Windows. This takes precedence over . If you want to override the in a build variant with a then also set the to . The directory to execute the or within. A regular expression to run on the build output to match file information. The matched file information is used to enable result navigation. The regex should capture 2, 3 or 4 groups. The capture groups should be: A regular expression to run on the build output to match line information. The matched file information is used to enable result navigation. The regex should capture 1, 2 or 3 groups. This regular expression is only necessary when some results contain strictly a line number, line and column numbers, or line and column numbers with a message. When such a match is made, the option will be used to search backwards to find the appropriate file name. The encoding of the build system output. Uses Python codec names. Defaults to . Environment variable values to use when running the or . Reduces the amount of output about the build system invocation. Turns on word wrapping in the build system output panel. The syntax file to use to highlight the build system output panel.\n\nWhen implementing a command to act as a build system target, the command’s keyword arguments are available via options in the .sublime-build file. However, certain parameter names will not work since they conflict with built-in build system functionality. The following names will not be passed as arguments to commands. This also applies to other situations, such as options specified in the , , and options.\n\nThe following variables will be expanded within any string specified in the , or options. If a literal needs to be specified in one of these options, it must be escaped with a . Since JSON uses backslashes for escaping also, will need to be written as . Please note that this substitution will occur for any <span class=”key”>”target”</span>. If a custom target is used, it may implement variable expansion for additional options by using with the result from . </p> The path to the Packages/ folder. The platform Sublime Text is running on: , or . The full path, including folder, to the file in the active view. The path to the folder that contains the file in the active view. The file name (sans folder path) of the file in the active view. The file name, exluding the extension, of the file in the active view. The extension of the file name of the file in the active view. The full path to the first folder listed in the side bar. The full path to the current project file. The path to the folder containing the current project file. The file name (sans folder path) of the current project file. The file name, excluding the extension, of the current project file. The extension of the current project file.\n\nThe following example shows a custom command, with the ability to cancel a build and navigate results. A for a build system should be a . This will provide the instance variable of to allow interaction with the current project, window and active view. Please note that the following example is somewhat simplistic in its implementation, and it won’t handle many common edge cases. The following Python can be saved to a file named Package/User/my_example_build.py: # The Cancel build option should only be available # when the process is still running # A lock is used to ensure only one thread is # the primary matching, but result_line_regex is used # when build output includes some entries that only # listing the file info. The result_base_dir sets the # If exactly the requested number of bytes was # read, there may be more data, and the current # data may contain part of a multibyte char # We pass out to a function to ensure the # timeout gets the value of out right now, The custom can be configured as a build system using the following JSON saved to a file named Packages/User/My Example Build.sublime-build:"
    }
]