[
    {
        "link": "https://minecraft.fandom.com/wiki/Tutorials/Command_NBT_tags",
        "document": "NBT tags can be specified for items and entities created with the and commands. Each tag has the format where describes what it does, and is what it applies. Multiple tags are separated by commas. (e.g. ). The contents of List tags are enclosed in square brackets , while the contents of Compound tags are enclosed in curly brackets â€“ note that the entire data tag is itself a Compound tag (All within a set of ). Tag names are case-sensitive, and white space is ignored. Additionally, some tags which are either true or false are stored as Byte tags (Example: )\n\nThe player can quickly find data tags (NBT) without the use of external editors by using to figure out the data for each entity or block entity. See more about this in the article Commands/data.\n\nSee Entity format for the various NBT Tags that are saved for each entity. This page also contains basic information for each NBT Tag.\n\nWhen None is used in a tag name that means that this tag can be put directly into the start of the dataTag.\n\nThese can be used in and commands as well as . For commands such as and , place them inside of a tag.\n\nThese tags can be used on any item.\n\nUsed for any instance of item(s), it includes the resource location of the item(s) ( ), the number of items in the stack ( ) and the NBT data of the item(s) ( ). It may also contain the number which the item is in. Any item with a of less than 1 or more than 127 becomes Air. Used for the addition of enchantments to items, it includes the of the enchantment and the level ( ) of the enchantment. Can specify one enchantment or multiple enchantments. It is possible specify no enchantment, which still applies the enchantment glint over the item. Used to add nbt arguments to spawn eggs or other items that summon entities such as armor stands or item frames. Used for the addition of a custom , colors (leather armor), and lore to items. may have multiple lines. Names and lore must be passed as raw JSON text. can be designated by either game pre-defined colors or a hexadecimal color value. Be aware that using a hexadecimal color value needs a # (comment sign) before the code, which makes the whole value a string. For more information of usable pre-defined colors, see Color codes. A custom RGB color mixer can be found here. At least one An example using a pre-defined color and a hexadecimal color code: {display:{Name:'{\"text\":\"Tunic of Destiny\",\"color\":\"blue\",...}',Lore:['{\"text\":\"A magical blue tunic\"}','{\"text\":\"worn by the gods...\"}',color:'#3C44AA']}} Can be used to add attributes to mobs or items. For more information, see Attribute. Used to make items with durability that never degrades. Used for getting player heads. Used to hide flags (the info in the tool tip) such as enchantments, CanDestroy, CanPlaceOn, etc. To hide multiple tags, you need to add the value of the tags you want to hide. For example, if you want to hide the \"Enchantments\" and the \"Attributes modifiers\" tags, the value you need to put is 3 (1+2). The value ranges from 1 to 255, representing 255 combinations or 8 binary digits.[1] When adding to create a unique value: Adding 32 hides other information, including potion effects, shield pattern info, \"StoredEnchantments\", written book \"generation\" and \"author\", \"Explosion\", \"Fireworks\", and map tooltips This tag is used when making adventure maps to allow a specific tool/item to break a block. Apply the tag to any item/tool. If the value is not a valid block or item it displays as \" \". At least one The number of ticks before an item entity can be picked up. The duration before an item disappears. Any number. Set to -32768 for items that don't disappear. If Age counts up to 6000 (5 minutes if Age started at default value 0), the item disappears. Defines whether a written book is labeled as an \"Original\", a \"Copy of Original\", a \"Copy of a copy\" or \"Tattered\". At least one defines the author of a written_book. Can be hidden by using An array that defines the pages of a written_book. Note that for the book to properly display the text, a title and an author must also be provided, otherwise the book will display the message At least one {pages:['{\"text\":\"Any json text can be used here!\"}','{\"text\":\"Page 2!\"}']} Used when giving yourself firework rockets, this value defines what the rocket will do when launched: color, flight duration, shape, etc. At least one\n\nThe following table describes more details on Enchantments sub-tag.\n\nThe following table describes more details on display sub-tag.\n\nOne can further modify the text with things like italics and boldness like so:\n\nThe following table describes more details on the Fireworks sub-tag.\n\nThese tags are put on blocks as items.\n\nThese tags are used when using the command to spawn entities or when using the to edit the data of entities.\n\nUsed to store all data kept within a block. Mainly used within blocks that can store items or contain various data values, e.g., Command blocks, Chests, Jukeboxes, Dispenser, Beacon, etc. Determines the initial velocity of most entities (all other than Dragon Fireballs, Fireballs, Small Fireballs and Wither Skulls) upon being summoned. Must be entered as double precision floating point values (decimals). Example: {Motion:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. The values could be only -10 to 10, because it could have been to be moved very fast. It normally could lead to a wall clip. Similar to Motion, determines the initial velocity of Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls upon being summoned. This tag is required to summon said entities, otherwise the command fails. Example: {direction:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. This tag determines only the entity's velocity, not the direction that it's facing. Similar to direction, but determines constant acceleration. Example: {power:[0.0,1.0,0.0]} gives the summoned entity a constant upward acceleration of 1.0. Entities are still affected by drag when power is nonzero and eventually reaches a terminal velocity. Affects only Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls. Sets the effects that apply to a mob after it is summoned. Type -1 to apply its countdown to infinity. It should hide its numbers to *. Controls villagers giving xp for trading, set to true or false. Normally, villagers can reward you experience orbs. Sets which entities are riding on top of the base entity. Allows multiple entities to ride one base entity. Riding entities are still able to do all stuff they have coded. Like enemies shooting on each other etc. Do not use a recent mob (if it doesn't exist in your old version Minecraft). Defines what items are being worn by the mob. Items go in slots Feet, Legs, Chest, Head, in that order. Defines what item is within the mainhand and offhand. First item is the mainhand, second is offhand. Determines how likely it is for an entity to drop held Items. The tag Count in the equipment tag must be 1 or greater for this to work. 2 separate float values, one for the main hand and one for the off-hand slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Determines how likely it is for an entity to drop worn Items. The tag Count in the equipment tag must be 1 or greater for this to work. 4 separate float values, one for each slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Makes mobs have no AI, resulting in mobs not moving on their own. However, they still react to other changes in the environment. For example, the Zombie can still burn in the sun. Makes mobs unaffected by gravity. Mobs do not fall. Mobs cannot walk in the air. Makes mobs silent. Does not work for certain sounds, see . Determines how many ticks a mob is on fire. When Fire reaches one, the fire stops, and the mob no longer takes damage. When a mob is not on fire, this value is 1. Makes mobs invulnerable to everything except the Void and players in Creative Mode. Mobs do not attack or run away from invulnerable mobs. Customizes the attributes of the entity. See Attribute for more details Name: see Attribute for a list. Base: the amount to apply. Modifiers: how much and how it should vary. Contains values Name, Amount, Operation, UUID. Number of hearts (for hearts above the default maximum you must change the base value of the 'generic.max_health' attribute). A neutral mob becomes aggressive toward for ticks. Summons a mob with a name that appears above their head. or you can use Alters the visibility of a custom name. 0b Means that the name is only visible when looking at the mob (default), and 1b means the name is always visible. Must use CustomName JSON code first to perform it. Mobs are undisappearable on time. Tamed animals without commands can also evolve this action.\n\nThe following table provides information on each tagname that can be added in an NBT Tag. These tagnames are specific to the command.\n\nThese tags are used when summoning villagers. (Offers NBT can't be done in 1.14+)\n\nThese tags are used when summoning itemframes.\n\nThese tags are used to customize potions\n\nThese tags are used when summoning armor stands.\n\nNote: The Equipment tag also works for armor stands.\n\nThese tags are used when summoning turtles.\n\nTags used in and :\n\nNote: This is also used for Command Block Minecarts\n\nThese tags can be used on most tile entitied blocks\n\nThese tags are used when using or (spawner minecarts) to create spawners. Add only those data tags you want to avoid a potential error.\n\nSub-tags used in the SpawnPotentials data tag."
    },
    {
        "link": "https://reddit.com/r/feedthebeast/comments/smw4yu/is_there_any_way_to_edit_the_stats_of_weapons_and",
        "document": "Hello; Iâ€™m making a modded adventure map. I know itâ€™s possible to change weapon performance via config files, but is it possible to have both edited and unedited weapons exist congruently?\n\nFor example, one of the mods being used is ewewukek's Musket mod, and Iâ€™d like there to be a default musket and a stronger, â€˜late-gameâ€™ variant. Any and all help is appreciated."
    },
    {
        "link": "https://apexminecrafthosting.com/how-to-edit-nbt-files-in-minecraft",
        "document": "How to Edit NBT Files in Minecraft\n\nWhen playing Minecraft on a server with friends or a solo world in singleplayer, we very rarely spend time thinking about how the game keeps track of data. Whether itâ€™s the world settings itself or a playerâ€™s inventory, this information is kept in various files that are often inaccessible to most people. This is no longer the case thanks to a tool called NBTExplorer, which allows you to view and edit any worldâ€™s data files. Whether you want to locate a player or want to know how to disable hardcore mode, this all achievable with this program. This process can be very confusing for first-time users, so we have created this Apex Hosting tutorial to help you get started.\nâ€¢ Press the tab to the far-right to access all downloads.\nâ€¢ Under the area for the latest release, download the NBTExplorer .zip file.\nâ€¢ Extract the .zip contents inside of an easily-accessible folder.\nâ€¢ Launch the file to open the application.\n\nBefore you start editing any NBT data, we recommend locating the desired file, then downloading or making a copy of it to your desktop or other safe location. This can help revert any changes you make in the event of an error.\nâ€¢ Navigate to your Apex Server panel, then stop the server.\nâ€¢ Enter the in the left-hand menu, then log in.\nâ€¢ Locate your desired world folder and click to enter its subdirectory.\nâ€¢ Open your Minecraft launcher, then proceed to the tab at the top.\nâ€¢ Hover over your gameplay profile, then press the icon to the right.\nâ€¢ In the new window, enter the folder, followed by your world file.\nâ€¢ Like before, locate either the or a .dat file from the folder.\nâ€¢ Copy this file to a separate location, such as the desktop.\n\nWith your files safely stored on your device, youâ€™re ready to begin using the NBTExplorer app. To start, simply drag + drop your desired file into the program to open it. Alternatively, go to File > Open, then select your .dat file through there.\n\nWhen adjusting a level.dat file for a world, there will be plenty of sub-menus and values to edit. While many of them are straight forward based on the name alone, we recommend only editing necessary values to prevent any issues. Some of these notable ones include:\n\nGameRules: Want to adjust the gamerules without using any in-game commands? By expanding the dropdown you can manually adjust every rule to your liking.\n\nAllowCommands: This option allows you to permanently enable or disable cheats on a world. This can be especially useful if you created a world but forgot to enable cheats at the beginning.\n\nDifficulty: Similar to the gamerules, this allows you to manually adjust the difficulty option of a world, regardless of cheat command access in-game. This can be beneficial if the difficulty has been locked on the world.\n\nDifficultyLocked: Do you regret locking the difficulty on the world but donâ€™t want to use any commands to bypass it? Adjusting this value will unlock the difficulty of your world, allowing for easy adjustment on singleplayer once again.\n\nHardcore: Whether it was created by accident or not, dealing with a hardcore world can become stressful after a while. Thankfully, a quick change to the value will remove this limitation from your world and restore normal gameplay.\n\nLevelName: Ever tried to rename a Minecraft folder name and noticed it doesnâ€™t change in the singleplayer world selection? Thatâ€™s because of this data string, which can be adjusted to reflect a new name regardless of what the original folder is titled.\n\n\n\nSimilar to the level.dat world data, player data can also be important and changes as well. There are many more data strings available, but many of them may cause issues when changed so we advise proceeding with caution. Some notable adjustments are:\n\nAbilities: Under the category of the same name, the data allows you to adjust a playerâ€™s walkspeed, whether they can fly, build, are invulnerable, and more.\n\nInventory: While itâ€™s far from the most effective way of achieving it, the section allows you to see the contents of any playerâ€™s inventory, as well as the amount. Alternatively, it can be used to modify the inventory directly.\n\nPosition: Trying to find a player or their base? By checking the dropdown, you can view their position coordinates in the world. If necessary, this can be combined with the data if they are not located in the overworld.\n\nHealth/Food: As the name suggests, the and data strings control the characterâ€™s fullness and hearts. 20 is a full bar, while 0 is completely empty.\n\n\n\nWith your changes made and saved, you can now replace the existing file on either your client or server. We highly recommend making an additional backup, which is reflected in the steps below:\nâ€¢ Return to your world or playerdata folder on the client/server from earlier.\nâ€¢ Select the original .dat file, then rename it to end with .\nâ€¢ If present, select and delete the matching .dat.old file as well. \n\n For servers: Press the button in the top-left, then drag + drop your edited .dat file. Once at 100%, verify it was uploaded correctly, then start the server. For singleplayer: Copy + paste or move the edited .dat file into the necessary folder. Once it is done, you may start your game and launch the world.\n\nThe changes did not work:\n\nIf the desired changes didnâ€™t take effect, there are many potential reasons this may occur. First, verify that you are saving your adjusted .dat file and properly uploading it back to the original world folder in the correct location. If the file is uploaded anywhere else, it will not take effect. Additionally, verify that you are changing the correct file and attribute, or you may not notice the changes as intended. Once you have performed these checks and reuploaded the file, restart the game and try again.\n\nHow to restore the original NBT .dat file:\n\nWhether you made a mistake or simply want to revert all your changes, this will be easy to do as long as you perform the above steps correctly. To do this, stop the server/game and return to your .dat file location. Delete or move the current file, then rename the file to just . Afterwards, delete the .dat.old file as well and restart the game. This should return your file back to the original. Keep in mind that performing these steps on a player data file will also revert that playerâ€™s position and inventory."
    },
    {
        "link": "https://minecraft.wiki/w/Tutorial:Command_NBT_tags",
        "document": "NBT tags can be specified for items and entities created with the and commands. Each tag has the format where describes what it does, and is what it applies. Multiple tags are separated by commas. (e.g. ). The contents of List tags are enclosed in square brackets , while the contents of Compound tags are enclosed in curly brackets â€“ note that the entire data tag is itself a Compound tag (All within a set of ). Tag names are case-sensitive, and white space is ignored. Additionally, some tags which are either true or false are stored as Byte tags (Example: )\n\nThe player can quickly find data tags (NBT) without the use of external editors by using to figure out the data for each entity or block entity. See more about this in the article Commands/data.\n\nSee Entity format for the various NBT Tags that are saved for each entity. This page also contains basic information for each NBT Tag.\n\nWhen None is used in a tag name that means that this tag can be put directly into the start of the dataTag.\n\nThese can be used in and commands as well as . For commands such as and , place them inside of a tag.\n\nThese tags can be used on any item.\n\nUsed for any instance of item(s), it includes the resource location of the item(s) ( ), the number of items in the stack ( ) and the NBT data of the item(s) ( ). It may also contain the number which the item is in. Any item with a of less than 1 or more than 127 becomes Air. Used for the addition of enchantments to items, it includes the of the enchantment and the level ( ) of the enchantment. Can specify one enchantment or multiple enchantments. It is possible specify no enchantment, which still applies the enchantment glint over the item. Used to add nbt arguments to spawn eggs or other items that summon entities such as armor stands or item frames. Used for the addition of a custom is a hexadecimal color value, except in decimal. An RGB to hexadecimal converter can be found here and a hexadecimal to decimal converter can be found here. Names and lore must be passed as raw JSON text. At least one [minecraft:custom_name='{text:\"Tunic of Destiny\"}',minecraft:lore=['{text:\"The Tunic worn by the God of Destiny\",color:\"#5454FC\"}']] Can be used to add attributes to mobs or items. For more information, see Attribute. Used to make items with durability that never degrades. [unbreakable={}] is now used to get Unbreakable items Used for getting player heads. Used to hide flags (the info in the tool tip) such as enchantments, CanDestroy, CanPlaceOn, etc. To hide multiple tags, you need to add the value of the tags you want to hide. For example, if you want to hide the \"Enchantments\" and the \"Attributes modifiers\" tags, the value you need to put is 3 (1+2). The value ranges from 1 to 255, representing 255 combinations or 8 binary digits.[1] When adding to create a unique value: Adding 32 hides other information, including potion effects, shield pattern info, \"StoredEnchantments\", written book \"generation\" and \"author\", \"Explosion\", \"Fireworks\", and map tooltips This tag is used when making adventure maps to allow a specific tool/item to break a block. Apply the tag to any item/tool. If the value is not a valid block or item it displays as \" \". At least one The number of ticks before an item entity can be picked up. The duration before an item disappears. Any number. Set to -32768 for items that don't disappear. If Age counts up to 6000 (5 minutes if Age started at default value 0), the item disappears. The id of a filled map. If a value is used that does not correspond to an existing map, the tooltip of the map will display \"Unknown Map\" Any number. Negatives will always result in \"Unknown Map\" under normal conditions. At least one Defines whether a written book is labeled as an \"Original\", a \"Copy of Original\", a \"Copy of a copy\" or \"Tattered\". At least one defines the author of a written_book. Can be hidden by using An array that defines the pages of a written_book. Note that for the book to properly display the text, a title and an author must also be provided, otherwise the book will display the message At least one {pages:['{\"text\":\"Any json text can be used here!\"}','{\"text\":\"Page 2!\"}']} Used when giving yourself firework rockets, this value defines what the rocket will do when launched: color, flight duration, shape, etc. At least one The following table describes more details on Enchantments sub-tag. The resource location of an enchantment. See Enchanting for details on which id correlates to which enchantment. Determines the level of an enchantment. A level between one and ten displays properly on an item as a roman numeral, however, any value above that displays as enchantment.level.lvl. The following table describes more details on display sub-tag. The name of an item displayed in game. For blocks such as Chests and Dispensers the name replaces the default 'Chest' or 'Dispenser' in the upper left hand corner of the GUI. When used on command blocks the name is displayed when executing commands. This can be seen by using the command. Text with JSON object with key \"text\". It's value can be any character that is available within the Minecraft language files (Most characters on your keyboard) The text under the name of the item. Text with JSON array containing JSON objects with key \"text\". Their values can be any character that is available within the Minecraft language files (Most characters on your keyboard) One can further modify the text with things like italics and boldness like so: The following table describes more details on the Fireworks sub-tag. Defines the flight duration of the firework, the flight duration is how long the firework will wait until it explodes. Defines what the firework rocket will do when its flight duration runs out, this is what the firework star is used for. More than one effect can be added as more than one firework star can be added to a rocket is the initial color of the explosion written in decimal format. is the color that the explosion will fade to written in decimal format. is whether the whether the explosion flickers while it fades. This is the effect applied when you add glowstone to the firework star. is whether the particles leave trails as they travel. This effect is applied when you add a diamond to the firework star. is the shape of the firework: These tags are put on blocks as items. This tag is used when making adventure maps to determine which block(s) the player can place a block on. Also used on hoes to make them till dirt and on spawn eggs to place them. If the value is not a valid block or item it displays as \" \". An array of strings, each one of which is a command argument of type block_predicate. However, to use NBT tags, the NBT data of the block must be synchronized to the client (campfires and player heads are two of the blocks that do so). This is used for tile entities, and stores their data for when they are placed down Differs based on the block, see Tutorials/Command NBT tags for details. Example: get a white shield by using a command: This tag is used for blocks, and stores the block state when they are placed down. A compound where each key is a block state key, and the value is the block state value to force place for this block. Differs based on the block, see Block states for details.\n\nThese tags are used when using the command to spawn entities or when using the to edit the data of entities.\n\nUsed to store all data kept within a block. Mainly used within blocks that can store items or contain various data values, e.g., Command blocks, Chests, Jukeboxes, Dispenser, Beacon, etc. Determines the initial velocity of most entities (all other than Dragon Fireballs, Fireballs, Small Fireballs and Wither Skulls) upon being summoned. Must be entered as double precision floating point values (decimals). Example: {Motion:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. The values could be only -10 to 10, because it could have been to be moved very fast. It normally could lead to a wall clip. Similar to Motion, determines the initial velocity of Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls upon being summoned. This tag is required to summon said entities, otherwise the command fails. Example: {direction:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. This tag determines only the entity's velocity, not the direction that it's facing. Similar to direction, but determines constant acceleration. Example: {power:[0.0,1.0,0.0]} gives the summoned entity a constant upward acceleration of 1.0. Entities are still affected by drag when power is nonzero and eventually reaches a terminal velocity. Affects only Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls. Sets the effects that apply to a mob after it is summoned. Type 999999 to apply its countdown to infinity. It should hide its numbers to *. Controls villagers giving xp for trading, set to true or false. Normally, villagers can reward you experience orbs. Sets which entities are riding on top of the base entity. Allows multiple entities to ride one base entity. Riding entities are still able to do all stuff they have coded. Like enemies shooting on each other etc. Do not use a recent mob (if it doesn't exist in your old version Minecraft). Defines what items are being worn by the mob. Items go in slots Feet, Legs, Chest, Head, in that order. Defines what item is within the mainhand and offhand. First item is the mainhand, second is offhand. Determines how likely it is for an entity to drop held Items. The tag Count in the equipment tag must be 1 or greater for this to work. 2 separate float values, one for the main hand and one for the off-hand slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Determines how likely it is for an entity to drop worn Items. The tag Count in the equipment tag must be 1 or greater for this to work. 4 separate float values, one for each slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Makes mobs have no AI, resulting in mobs not moving on their own. However, they still react to other changes in the environment. For example, the Zombie can still burn in the sun. Makes mobs unaffected by gravity. Mobs do not fall. Mobs cannot walk in the air. Makes mobs silent. Does not work for certain sounds, see . Determines how many ticks a mob is on fire. When Fire reaches one, the fire stops, and the mob no longer takes damage. When a mob is not on fire, this value is 1. Makes mobs invulnerable to everything except the Void and players in Creative Mode. Mobs do not attack or run away from invulnerable mobs. Customizes the attributes of the entity. See Attribute for more details Name: see Attribute for a list. Base: the amount to apply. Modifiers: how much and how it should vary. Contains values Name, Amount, Operation, UUID. Number of hearts (for hearts above the default maximum you must change the base value of the 'generic.max_health' attribute). A neutral mob becomes aggressive toward for ticks. Summons a mob with a name that appears above their head. or you can use Alters the visibility of a custom name. 0b Means that the name is only visible when looking at the mob (default), and 1b means the name is always visible. Must use CustomName JSON code first to perform it. Mobs are undisappearable on time. Tamed animals without commands can also evolve this action.\n\nThe following table provides information on each tagname that can be added in an NBT Tag. These tagnames are specific to the command.\n\nThese tags are used when summoning villagers. (Offers NBT can't be done in 1.14+)\n\nThese tags are used when summoning itemframes.\n\nThese tags are used to customize potions\n\nThese tags are used when summoning armor stands.\n\nNote: The Equipment tag also works for armor stands.\n\nThese tags are used when summoning turtles.\n\nTags used in and :\n\nNote: This is also used for Command Block Minecarts\n\nThese tags can be used on most tile entitied blocks\n\nThese tags are used when using or (spawner minecarts) to create spawners. Add only those data tags you want to avoid a potential error.\n\nSub-tags used in the SpawnPotentials data tag."
    },
    {
        "link": "https://reddit.com/r/MinecraftCommands/comments/1cj9996/nbt_data_on_items_in_1205_with_commands",
        "document": "I made a datapack during 1.20.4 that added potion effects to tools called SwordEffects that used scoreboards and the /give command to add tags to items:\n\n/execute at @a[nbt={SelectedItem:{tag:{EffectDealt.poison:1}}},scores={SwordEffects=1..}] as @e[distance=..7,nbt={HurtTime:10s}] unless entity @s[nbt={SelectedItem:{tag:{EffectDealt.poison:1}}},scores={SwordEffects=1..}] run effect give @s minecraft:poison 10 0 false\n\nThis worked as intended. However, after the update, the ability to edit other properties of items with /give was added which replaced this feature and also probably changed something in the /execute command. Does anyone know how to change this to work for 1.20.5 and above?"
    },
    {
        "link": "https://minecraft.fandom.com/wiki/Tutorials/Command_NBT_tags",
        "document": "NBT tags can be specified for items and entities created with the and commands. Each tag has the format where describes what it does, and is what it applies. Multiple tags are separated by commas. (e.g. ). The contents of List tags are enclosed in square brackets , while the contents of Compound tags are enclosed in curly brackets â€“ note that the entire data tag is itself a Compound tag (All within a set of ). Tag names are case-sensitive, and white space is ignored. Additionally, some tags which are either true or false are stored as Byte tags (Example: )\n\nThe player can quickly find data tags (NBT) without the use of external editors by using to figure out the data for each entity or block entity. See more about this in the article Commands/data.\n\nSee Entity format for the various NBT Tags that are saved for each entity. This page also contains basic information for each NBT Tag.\n\nWhen None is used in a tag name that means that this tag can be put directly into the start of the dataTag.\n\nThese can be used in and commands as well as . For commands such as and , place them inside of a tag.\n\nThese tags can be used on any item.\n\nUsed for any instance of item(s), it includes the resource location of the item(s) ( ), the number of items in the stack ( ) and the NBT data of the item(s) ( ). It may also contain the number which the item is in. Any item with a of less than 1 or more than 127 becomes Air. Used for the addition of enchantments to items, it includes the of the enchantment and the level ( ) of the enchantment. Can specify one enchantment or multiple enchantments. It is possible specify no enchantment, which still applies the enchantment glint over the item. Used to add nbt arguments to spawn eggs or other items that summon entities such as armor stands or item frames. Used for the addition of a custom , colors (leather armor), and lore to items. may have multiple lines. Names and lore must be passed as raw JSON text. can be designated by either game pre-defined colors or a hexadecimal color value. Be aware that using a hexadecimal color value needs a # (comment sign) before the code, which makes the whole value a string. For more information of usable pre-defined colors, see Color codes. A custom RGB color mixer can be found here. At least one An example using a pre-defined color and a hexadecimal color code: {display:{Name:'{\"text\":\"Tunic of Destiny\",\"color\":\"blue\",...}',Lore:['{\"text\":\"A magical blue tunic\"}','{\"text\":\"worn by the gods...\"}',color:'#3C44AA']}} Can be used to add attributes to mobs or items. For more information, see Attribute. Used to make items with durability that never degrades. Used for getting player heads. Used to hide flags (the info in the tool tip) such as enchantments, CanDestroy, CanPlaceOn, etc. To hide multiple tags, you need to add the value of the tags you want to hide. For example, if you want to hide the \"Enchantments\" and the \"Attributes modifiers\" tags, the value you need to put is 3 (1+2). The value ranges from 1 to 255, representing 255 combinations or 8 binary digits.[1] When adding to create a unique value: Adding 32 hides other information, including potion effects, shield pattern info, \"StoredEnchantments\", written book \"generation\" and \"author\", \"Explosion\", \"Fireworks\", and map tooltips This tag is used when making adventure maps to allow a specific tool/item to break a block. Apply the tag to any item/tool. If the value is not a valid block or item it displays as \" \". At least one The number of ticks before an item entity can be picked up. The duration before an item disappears. Any number. Set to -32768 for items that don't disappear. If Age counts up to 6000 (5 minutes if Age started at default value 0), the item disappears. Defines whether a written book is labeled as an \"Original\", a \"Copy of Original\", a \"Copy of a copy\" or \"Tattered\". At least one defines the author of a written_book. Can be hidden by using An array that defines the pages of a written_book. Note that for the book to properly display the text, a title and an author must also be provided, otherwise the book will display the message At least one {pages:['{\"text\":\"Any json text can be used here!\"}','{\"text\":\"Page 2!\"}']} Used when giving yourself firework rockets, this value defines what the rocket will do when launched: color, flight duration, shape, etc. At least one\n\nThe following table describes more details on Enchantments sub-tag.\n\nThe following table describes more details on display sub-tag.\n\nOne can further modify the text with things like italics and boldness like so:\n\nThe following table describes more details on the Fireworks sub-tag.\n\nThese tags are put on blocks as items.\n\nThese tags are used when using the command to spawn entities or when using the to edit the data of entities.\n\nUsed to store all data kept within a block. Mainly used within blocks that can store items or contain various data values, e.g., Command blocks, Chests, Jukeboxes, Dispenser, Beacon, etc. Determines the initial velocity of most entities (all other than Dragon Fireballs, Fireballs, Small Fireballs and Wither Skulls) upon being summoned. Must be entered as double precision floating point values (decimals). Example: {Motion:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. The values could be only -10 to 10, because it could have been to be moved very fast. It normally could lead to a wall clip. Similar to Motion, determines the initial velocity of Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls upon being summoned. This tag is required to summon said entities, otherwise the command fails. Example: {direction:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. This tag determines only the entity's velocity, not the direction that it's facing. Similar to direction, but determines constant acceleration. Example: {power:[0.0,1.0,0.0]} gives the summoned entity a constant upward acceleration of 1.0. Entities are still affected by drag when power is nonzero and eventually reaches a terminal velocity. Affects only Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls. Sets the effects that apply to a mob after it is summoned. Type -1 to apply its countdown to infinity. It should hide its numbers to *. Controls villagers giving xp for trading, set to true or false. Normally, villagers can reward you experience orbs. Sets which entities are riding on top of the base entity. Allows multiple entities to ride one base entity. Riding entities are still able to do all stuff they have coded. Like enemies shooting on each other etc. Do not use a recent mob (if it doesn't exist in your old version Minecraft). Defines what items are being worn by the mob. Items go in slots Feet, Legs, Chest, Head, in that order. Defines what item is within the mainhand and offhand. First item is the mainhand, second is offhand. Determines how likely it is for an entity to drop held Items. The tag Count in the equipment tag must be 1 or greater for this to work. 2 separate float values, one for the main hand and one for the off-hand slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Determines how likely it is for an entity to drop worn Items. The tag Count in the equipment tag must be 1 or greater for this to work. 4 separate float values, one for each slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Makes mobs have no AI, resulting in mobs not moving on their own. However, they still react to other changes in the environment. For example, the Zombie can still burn in the sun. Makes mobs unaffected by gravity. Mobs do not fall. Mobs cannot walk in the air. Makes mobs silent. Does not work for certain sounds, see . Determines how many ticks a mob is on fire. When Fire reaches one, the fire stops, and the mob no longer takes damage. When a mob is not on fire, this value is 1. Makes mobs invulnerable to everything except the Void and players in Creative Mode. Mobs do not attack or run away from invulnerable mobs. Customizes the attributes of the entity. See Attribute for more details Name: see Attribute for a list. Base: the amount to apply. Modifiers: how much and how it should vary. Contains values Name, Amount, Operation, UUID. Number of hearts (for hearts above the default maximum you must change the base value of the 'generic.max_health' attribute). A neutral mob becomes aggressive toward for ticks. Summons a mob with a name that appears above their head. or you can use Alters the visibility of a custom name. 0b Means that the name is only visible when looking at the mob (default), and 1b means the name is always visible. Must use CustomName JSON code first to perform it. Mobs are undisappearable on time. Tamed animals without commands can also evolve this action.\n\nThe following table provides information on each tagname that can be added in an NBT Tag. These tagnames are specific to the command.\n\nThese tags are used when summoning villagers. (Offers NBT can't be done in 1.14+)\n\nThese tags are used when summoning itemframes.\n\nThese tags are used to customize potions\n\nThese tags are used when summoning armor stands.\n\nNote: The Equipment tag also works for armor stands.\n\nThese tags are used when summoning turtles.\n\nTags used in and :\n\nNote: This is also used for Command Block Minecarts\n\nThese tags can be used on most tile entitied blocks\n\nThese tags are used when using or (spawner minecarts) to create spawners. Add only those data tags you want to avoid a potential error.\n\nSub-tags used in the SpawnPotentials data tag."
    },
    {
        "link": "https://reddit.com/r/MinecraftCommands/comments/2h04ww/how_to_give_items_with_custom_nbt_data",
        "document": "Hey guys! So I know that you can only edit the colors of minecraft item names and lore with 3rd Party Programs, but the only methods I have found require you to select a chest with items in it, and enter the custom NBT data. The only thing is, how do I give that item to the player now? I know I can just put a few in a chest and have them pick them up, but if I need unlimited amounts, can I duplicate the item somehow, so I can directly give it to the player?\n\nIf not that's fine, I'll just use chests."
    },
    {
        "link": "https://minecraft.fandom.com/wiki/Commands/data",
        "document": "The command allows the user to get, merge, modify, and remove NBT data of a block entity, entity, or Command NBT storage.\n\nThere are four instructions for ( , , , ), and the targets/sources referenced by each instruction command may be either , , or .\nâ€¢ To get the saturation level of the current player:\nâ€¢ To make the nearest item within 10 blocks unable to be picked up by players:\nâ€¢ To get the Y-position of a random item:\nâ€¢ To get the item ID of the item in the first hotbar slot of the nearest player:\nâ€¢ To set the armor attribute of the dolphin closest to coordinates (0, 64, 0) to 20:\nâ€¢ To change the first item in a chest located at coordinates (1, 64, 1) into a diamond block, keeping all NBT data:\nâ€¢ To make the nearest zombie have a 80% chance to drop items in its off-hand when it dies, and never drop items in the main hand:\nâ€¢ To make the nearest zombie have a 80% chance to drop items in its off-hand when it dies, without affecting the chance for the main hand:\n\nThe command storage of NBT data is an efficient way for commands to access or save NBT data without an overhead for block entities or entities reading from or writing to the NBT data.\n\nEach command storage is a general purpose, key-value storage, identified by a resource location to prevent unintentional conflicts.\n\nand can read from the storage, while , , , and can write to the storage.\n\nA storage array can hold up to 2304 objects before maxing out.\n\nThe command storage is accessible with JSON text as well."
    },
    {
        "link": "https://minecraft.wiki/w/Tutorial:Command_NBT_tags",
        "document": "NBT tags can be specified for items and entities created with the and commands. Each tag has the format where describes what it does, and is what it applies. Multiple tags are separated by commas. (e.g. ). The contents of List tags are enclosed in square brackets , while the contents of Compound tags are enclosed in curly brackets â€“ note that the entire data tag is itself a Compound tag (All within a set of ). Tag names are case-sensitive, and white space is ignored. Additionally, some tags which are either true or false are stored as Byte tags (Example: )\n\nThe player can quickly find data tags (NBT) without the use of external editors by using to figure out the data for each entity or block entity. See more about this in the article Commands/data.\n\nSee Entity format for the various NBT Tags that are saved for each entity. This page also contains basic information for each NBT Tag.\n\nWhen None is used in a tag name that means that this tag can be put directly into the start of the dataTag.\n\nThese can be used in and commands as well as . For commands such as and , place them inside of a tag.\n\nThese tags can be used on any item.\n\nUsed for any instance of item(s), it includes the resource location of the item(s) ( ), the number of items in the stack ( ) and the NBT data of the item(s) ( ). It may also contain the number which the item is in. Any item with a of less than 1 or more than 127 becomes Air. Used for the addition of enchantments to items, it includes the of the enchantment and the level ( ) of the enchantment. Can specify one enchantment or multiple enchantments. It is possible specify no enchantment, which still applies the enchantment glint over the item. Used to add nbt arguments to spawn eggs or other items that summon entities such as armor stands or item frames. Used for the addition of a custom is a hexadecimal color value, except in decimal. An RGB to hexadecimal converter can be found here and a hexadecimal to decimal converter can be found here. Names and lore must be passed as raw JSON text. At least one [minecraft:custom_name='{text:\"Tunic of Destiny\"}',minecraft:lore=['{text:\"The Tunic worn by the God of Destiny\",color:\"#5454FC\"}']] Can be used to add attributes to mobs or items. For more information, see Attribute. Used to make items with durability that never degrades. [unbreakable={}] is now used to get Unbreakable items Used for getting player heads. Used to hide flags (the info in the tool tip) such as enchantments, CanDestroy, CanPlaceOn, etc. To hide multiple tags, you need to add the value of the tags you want to hide. For example, if you want to hide the \"Enchantments\" and the \"Attributes modifiers\" tags, the value you need to put is 3 (1+2). The value ranges from 1 to 255, representing 255 combinations or 8 binary digits.[1] When adding to create a unique value: Adding 32 hides other information, including potion effects, shield pattern info, \"StoredEnchantments\", written book \"generation\" and \"author\", \"Explosion\", \"Fireworks\", and map tooltips This tag is used when making adventure maps to allow a specific tool/item to break a block. Apply the tag to any item/tool. If the value is not a valid block or item it displays as \" \". At least one The number of ticks before an item entity can be picked up. The duration before an item disappears. Any number. Set to -32768 for items that don't disappear. If Age counts up to 6000 (5 minutes if Age started at default value 0), the item disappears. The id of a filled map. If a value is used that does not correspond to an existing map, the tooltip of the map will display \"Unknown Map\" Any number. Negatives will always result in \"Unknown Map\" under normal conditions. At least one Defines whether a written book is labeled as an \"Original\", a \"Copy of Original\", a \"Copy of a copy\" or \"Tattered\". At least one defines the author of a written_book. Can be hidden by using An array that defines the pages of a written_book. Note that for the book to properly display the text, a title and an author must also be provided, otherwise the book will display the message At least one {pages:['{\"text\":\"Any json text can be used here!\"}','{\"text\":\"Page 2!\"}']} Used when giving yourself firework rockets, this value defines what the rocket will do when launched: color, flight duration, shape, etc. At least one The following table describes more details on Enchantments sub-tag. The resource location of an enchantment. See Enchanting for details on which id correlates to which enchantment. Determines the level of an enchantment. A level between one and ten displays properly on an item as a roman numeral, however, any value above that displays as enchantment.level.lvl. The following table describes more details on display sub-tag. The name of an item displayed in game. For blocks such as Chests and Dispensers the name replaces the default 'Chest' or 'Dispenser' in the upper left hand corner of the GUI. When used on command blocks the name is displayed when executing commands. This can be seen by using the command. Text with JSON object with key \"text\". It's value can be any character that is available within the Minecraft language files (Most characters on your keyboard) The text under the name of the item. Text with JSON array containing JSON objects with key \"text\". Their values can be any character that is available within the Minecraft language files (Most characters on your keyboard) One can further modify the text with things like italics and boldness like so: The following table describes more details on the Fireworks sub-tag. Defines the flight duration of the firework, the flight duration is how long the firework will wait until it explodes. Defines what the firework rocket will do when its flight duration runs out, this is what the firework star is used for. More than one effect can be added as more than one firework star can be added to a rocket is the initial color of the explosion written in decimal format. is the color that the explosion will fade to written in decimal format. is whether the whether the explosion flickers while it fades. This is the effect applied when you add glowstone to the firework star. is whether the particles leave trails as they travel. This effect is applied when you add a diamond to the firework star. is the shape of the firework: These tags are put on blocks as items. This tag is used when making adventure maps to determine which block(s) the player can place a block on. Also used on hoes to make them till dirt and on spawn eggs to place them. If the value is not a valid block or item it displays as \" \". An array of strings, each one of which is a command argument of type block_predicate. However, to use NBT tags, the NBT data of the block must be synchronized to the client (campfires and player heads are two of the blocks that do so). This is used for tile entities, and stores their data for when they are placed down Differs based on the block, see Tutorials/Command NBT tags for details. Example: get a white shield by using a command: This tag is used for blocks, and stores the block state when they are placed down. A compound where each key is a block state key, and the value is the block state value to force place for this block. Differs based on the block, see Block states for details.\n\nThese tags are used when using the command to spawn entities or when using the to edit the data of entities.\n\nUsed to store all data kept within a block. Mainly used within blocks that can store items or contain various data values, e.g., Command blocks, Chests, Jukeboxes, Dispenser, Beacon, etc. Determines the initial velocity of most entities (all other than Dragon Fireballs, Fireballs, Small Fireballs and Wither Skulls) upon being summoned. Must be entered as double precision floating point values (decimals). Example: {Motion:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. The values could be only -10 to 10, because it could have been to be moved very fast. It normally could lead to a wall clip. Similar to Motion, determines the initial velocity of Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls upon being summoned. This tag is required to summon said entities, otherwise the command fails. Example: {direction:[0.0,1.0,0.0]} summons with an initial upward velocity of 1.0. This tag determines only the entity's velocity, not the direction that it's facing. Similar to direction, but determines constant acceleration. Example: {power:[0.0,1.0,0.0]} gives the summoned entity a constant upward acceleration of 1.0. Entities are still affected by drag when power is nonzero and eventually reaches a terminal velocity. Affects only Dragon Fireballs, Fireballs, Small Fireballs, and Wither Skulls. Sets the effects that apply to a mob after it is summoned. Type 999999 to apply its countdown to infinity. It should hide its numbers to *. Controls villagers giving xp for trading, set to true or false. Normally, villagers can reward you experience orbs. Sets which entities are riding on top of the base entity. Allows multiple entities to ride one base entity. Riding entities are still able to do all stuff they have coded. Like enemies shooting on each other etc. Do not use a recent mob (if it doesn't exist in your old version Minecraft). Defines what items are being worn by the mob. Items go in slots Feet, Legs, Chest, Head, in that order. Defines what item is within the mainhand and offhand. First item is the mainhand, second is offhand. Determines how likely it is for an entity to drop held Items. The tag Count in the equipment tag must be 1 or greater for this to work. 2 separate float values, one for the main hand and one for the off-hand slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Determines how likely it is for an entity to drop worn Items. The tag Count in the equipment tag must be 1 or greater for this to work. 4 separate float values, one for each slot. 0.0-1.0 determines likelihood of dropping, but applies a random durability if it does. Anything greater than 1.0 makes it always drop with full durability. Since it is a float value, it must be phrased as \"X.Y\", with X and Y being values of your choice. Makes mobs have no AI, resulting in mobs not moving on their own. However, they still react to other changes in the environment. For example, the Zombie can still burn in the sun. Makes mobs unaffected by gravity. Mobs do not fall. Mobs cannot walk in the air. Makes mobs silent. Does not work for certain sounds, see . Determines how many ticks a mob is on fire. When Fire reaches one, the fire stops, and the mob no longer takes damage. When a mob is not on fire, this value is 1. Makes mobs invulnerable to everything except the Void and players in Creative Mode. Mobs do not attack or run away from invulnerable mobs. Customizes the attributes of the entity. See Attribute for more details Name: see Attribute for a list. Base: the amount to apply. Modifiers: how much and how it should vary. Contains values Name, Amount, Operation, UUID. Number of hearts (for hearts above the default maximum you must change the base value of the 'generic.max_health' attribute). A neutral mob becomes aggressive toward for ticks. Summons a mob with a name that appears above their head. or you can use Alters the visibility of a custom name. 0b Means that the name is only visible when looking at the mob (default), and 1b means the name is always visible. Must use CustomName JSON code first to perform it. Mobs are undisappearable on time. Tamed animals without commands can also evolve this action.\n\nThe following table provides information on each tagname that can be added in an NBT Tag. These tagnames are specific to the command.\n\nThese tags are used when summoning villagers. (Offers NBT can't be done in 1.14+)\n\nThese tags are used when summoning itemframes.\n\nThese tags are used to customize potions\n\nThese tags are used when summoning armor stands.\n\nNote: The Equipment tag also works for armor stands.\n\nThese tags are used when summoning turtles.\n\nTags used in and :\n\nNote: This is also used for Command Block Minecarts\n\nThese tags can be used on most tile entitied blocks\n\nThese tags are used when using or (spawner minecarts) to create spawners. Add only those data tags you want to avoid a potential error.\n\nSub-tags used in the SpawnPotentials data tag."
    },
    {
        "link": "https://minecraft.wiki/w/Item_modifier",
        "document": "Item modifiers (also known as loot modifiers) used to apply modifications to item stacks, such as adjusting the stack size or adding enchantments. They can be defined in data packs as JSON files, or used in loot tables. And command accepts item modifiers in SNBT format.\n\nA single modification in item modifiers is called item function or loot function.\n\nAn item modifier is a single loot function or an array of loot functions to apply to the item. The root element of an item modifier can be either an [NBT Compound / JSON Object] JSON object or NBT compound tag, following the structure of a loot function below, or an [NBT List / JSON Array] JSON array or NBT list, containing multiple loot functions.\n\nItem modifiers are defined using the JSON format in data packs, or the SNBT format in command.\n\nItem modifiers defined in data packs in the following directory structure, highlighted below:\n\nItem modifiers can be invoked with the command. When doing so, it is required to specify a target slot to invoke the modifier upon, either an item inside a container block's contents, or inside an entity's inventory.\n\nThere are two variations of this command: invokes a modifier alone upon the target slot, replaces the item in the target slot with another and subsequently invokes a modifier upon it.\n\nIn loot tables, item modifiers can be defined without the need for a separate file; however, separate files can also be explicitly referenced using the function.\n\nThe format of a single loot function is:\n\nMultiple loot functions may be entered into one item modifier by placing them into a JSON array or an NBT list:\n\nThe possible resource locations (namespace is omitted) for [String] function field and associated extra contents:\n\nIssues relating to \"Item modifier\" are maintained on the bug tracker. Issues should be reported and viewed there."
    }
]