[
    {
        "link": "https://php.net/manual/en/mysqli.quickstart.prepared-statements.php",
        "document": "The MySQL database supports prepared statements. A prepared statement or a parameterized statement is used to execute the same statement repeatedly with high efficiency and protect against SQL injections.\n\nThe prepared statement execution consists of two stages: prepare and execute. At the prepare stage a statement template is sent to the database server. The server performs a syntax check and initializes server internal resources for later use.\n\nThe MySQL server supports using anonymous, positional placeholder with .\n\nPrepare is followed by execute. During execute the client binds parameter values and sends them to the server. The server executes the statement with the bound values using the previously created internal resources.\n\nA prepared statement can be executed repeatedly. Upon every execution the current value of the bound variable is evaluated and sent to the server. The statement is not parsed again. The statement template is not transferred to the server again.\n\nEvery prepared statement occupies server resources. Statements should be closed explicitly immediately after use. If not done explicitly, the statement will be closed when the statement handle is freed by PHP.\n\nUsing a prepared statement is not always the most efficient way of executing a statement. A prepared statement executed only once causes more client-server round-trips than a non-prepared statement. This is why the is not run as a prepared statement above.\n\nAlso, consider the use of the MySQL multi-INSERT SQL syntax for INSERTs. For the example, multi-INSERT requires fewer round-trips between the server and client than the prepared statement shown above.\n\nThe MySQL Client Server Protocol defines a different data transfer protocol for prepared statements and non-prepared statements. Prepared statements are using the so called binary protocol. The MySQL server sends result set data \"as is\" in binary format. Results are not serialized into strings before sending. Client libraries receive binary data and try to convert the values into appropriate PHP data types. For example, results from an SQL column will be provided as PHP integer variables.\n\nThis behavior differs from non-prepared statements. By default, non-prepared statements return all results as strings. This default can be changed using a connection option. If the connection option is used, there are no differences.\n\nResults from prepared statements can either be retrieved by binding output variables, or by requesting a mysqli_result object.\n\nOutput variables must be bound after statement execution. One variable must be bound for every column of the statements result set.\n\nPrepared statements return unbuffered result sets by default. The results of the statement are not implicitly fetched and transferred from the server to the client for client-side buffering. The result set takes server resources until all results have been fetched by the client. Thus it is recommended to consume results timely. If a client fails to fetch all results or the client closes the statement before having fetched all data, the data has to be fetched implicitly by .\n\nIt is also possible to buffer the results of a prepared statement using mysqli_stmt::store_result().\n\nInstead of using bound results, results can also be retrieved through the mysqli_result interface. mysqli_stmt::get_result() returns a buffered result set.\n\nUsing the mysqli_result interface offers the additional benefit of flexible client-side result set navigation.\n\nBound variables are sent to the server separately from the query and thus cannot interfere with it. The server uses these values directly at the point of execution, after the statement template is parsed. Bound parameters do not need to be escaped as they are never substituted into the query string directly. A hint must be provided to the server for the type of bound variable, to create an appropriate conversion. See the mysqli_stmt::bind_param() function for more information.\n\nSuch a separation is sometimes considered the only security feature to prevent SQL injection, but the same degree of security can be achieved with non-prepared statements, if all the values are formatted correctly. It should be noted that correct formatting is not the same as escaping and involves more logic than simple escaping. Thus, prepared statements are simply a more convenient and less error-prone approach to this element of database security.\n\nThe API does not include emulation for client-side prepared statement emulation."
    },
    {
        "link": "https://w3schools.com/php/php_mysql_prepared_statements.asp",
        "document": "Prepared statements are very useful against SQL injections.\n\nA prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with high efficiency.\n• Prepare: An SQL statement template is created and sent to the database. Certain values are left unspecified, called parameters (labeled \"?\"). Example: INSERT INTO MyGuests VALUES(?, ?, ?)\n• The database parses, compiles, and performs query optimization on the SQL statement template, and stores the result without executing it\n• Execute: At a later time, the application binds the values to the parameters, and the database executes the statement. The application may execute the statement as many times as it wants with different values\n\nCompared to executing SQL statements directly, prepared statements have three main advantages:\n• Prepared statements reduce parsing time as the preparation on the query is done only once (although the statement is executed multiple times)\n• Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and not the whole query\n• Prepared statements are very useful against SQL injections, because parameter values, which are transmitted later using a different protocol, need not be correctly escaped. If the original statement template is not derived from external input, SQL injection cannot occur.\n\nThe following example uses prepared statements and bound parameters in MySQLi:\n\nCode lines to explain from the example above:\n\nIn our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or blob value.\n\nThen, have a look at the bind_param() function:\n\nThis function binds the parameters to the SQL query and tells the database what the parameters are. The \"sss\" argument lists the types of data that the parameters are. The s character tells mysql that the parameter is a string.\n\nThe argument may be one of four types:\n\nWe must have one of these for each parameter.\n\nBy telling mysql what type of data to expect, we minimize the risk of SQL injections.\n\nThe following example uses prepared statements and bound parameters in PDO:\n\n<?php\n\n$servername = \"localhost\";\n\n$username = \"username\";\n\n$password = \"password\";\n\n$dbname = \"myDBPDO\";\n\n\n\ntry {\n\n $conn = new PDO(\"mysql:host=$servername;dbname=$dbname\", $username, $password);\n\n // set the PDO error mode to exception\n\n $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n\n\n // prepare sql and bind parameters\n\n $stmt = $conn->prepare(\"INSERT INTO MyGuests (firstname, lastname, email) \n\n VALUES (:firstname, :lastname, :email)\");\n\n $stmt->bindParam(':firstname', $firstname);\n\n $stmt->bindParam(':lastname', $lastname);\n\n $stmt->bindParam(':email', $email);\n\n \n\n // insert a row\n\n $firstname = \"John\";\n\n $lastname = \"Doe\";\n\n $email = \"john@example.com\";\n\n $stmt->execute();\n\n\n\n // insert another row\n\n $firstname = \"Mary\";\n\n $lastname = \"Moe\";\n\n $email = \"mary@example.com\";\n\n $stmt->execute();\n\n\n\n // insert another row\n\n $firstname = \"Julie\";\n\n $lastname = \"Dooley\";\n\n $email = \"julie@example.com\";\n\n $stmt->execute();\n\n \n\n echo \"New records created successfully\";\n\n} catch(PDOException $e) {\n\n echo \"Error: \" . $e->getMessage();\n\n}\n\n $conn = null;\n\n ?>"
    },
    {
        "link": "https://php.net/manual/en/pdo.prepared-statements.php",
        "document": "Many of the more mature databases support the concept of prepared statements. What are they? They can be thought of as a kind of compiled template for the SQL that an application wants to run, that can be customized using variable parameters. Prepared statements offer two major benefits:\n• The query only needs to be parsed (or prepared) once, but can be executed multiple times with the same or different parameters. When the query is prepared, the database will analyze, compile and optimize its plan for executing the query. For complex queries this process can take up enough time that it will noticeably slow down an application if there is a need to repeat the same query many times with different parameters. By using a prepared statement the application avoids repeating the analyze/compile/optimize cycle. This means that prepared statements use fewer resources and thus run faster.\n• The parameters to prepared statements don't need to be quoted; the driver automatically handles this. If an application exclusively uses prepared statements, the developer can be sure that no SQL injection will occur (however, if other portions of the query are being built up with unescaped input, SQL injection is still possible).\n\nPrepared statements are so useful that they are the only feature that PDO will emulate for drivers that don't support them. This ensures that an application will be able to use the same data access paradigm regardless of the capabilities of the database.\n\nThis example performs an INSERT query by substituting a and a for the named placeholders. \"INSERT INTO REGISTRY (name, value) VALUES (:name, :value)\" // insert another row with different values\n\n\n\nThis example performs an INSERT query by substituting a and a for the positional placeholders. \"INSERT INTO REGISTRY (name, value) VALUES (?, ?)\" // insert another row with different values\n\n\n\nExample #4 Calling a stored procedure with an output parameter If the database driver supports it, an application may also bind parameters for output as well as input. Output parameters are typically used to retrieve values from stored procedures. Output parameters are slightly more complex to use than input parameters, in that a developer must know how large a given parameter might be when they bind it. If the value turns out to be larger than the size they suggested, an error is raised.\n\nExample #5 Calling a stored procedure with an input/output parameter Developers may also specify parameters that hold values both input and output; the syntax is similar to output parameters. In this next example, the string 'hello' is passed into the stored procedure, and when it returns, hello is replaced with the return value of the procedure.\n\nExample #6 Invalid use of placeholder \"SELECT * FROM REGISTRY where name LIKE '%?%'\" // placeholder must be used in the place of the whole value\n\n \"SELECT * FROM REGISTRY where name LIKE ?\""
    },
    {
        "link": "https://stackoverflow.com/questions/71771090/php-mysql-prepared-statement-procedural-insert-update-example",
        "document": "I struggle to understand prepared statements in PHP to allow users to edit a MySQL-database. The user input is UTF-8, typical examples are the name in Arabic, Chinese, ... It also generates a problem when using Geo-location as 47°23'15\"N, 4°12°27\"E, as is visible i.e. in Wikipedia.\n\nBest lead I found to my problem to insert, insert ignore, on duplicate key ... to update datasets in a database from user-input using prepared statements. An interesting lead is in PHP Insert Prepared Statement, but that's \"PDO\", which I happen to lack any experience with. So far I tried to sanitize, now it seems to me that it might be far easier and safer to use prepared statements. But. I'm bloody amateur. And use procedural statements. And never tried a prepared statement before. And the input expects better understanding.\n\nSo I would like to take something like\n\n[1] Which is i.e. 47°23'15\"N, 4°12'27\"E and I am not sure how to properly escape it? returns 47°23\\'15\\\"N, 4°12\\'27\\\"E?\n\nThen to enter this into an SQL database like traditional\n\nOkayokay, using added code to make sure the database connection works, the query is processed properly and failure handling. But I want to simplify.\n\nMy question would be, how I would prepare such group of values for a prepared statement. And I believe to understand I must replace mysqli_query with mysqli_prepare and I need a count of the fields addressed and use \"ssss\" but don't find any explanation in any of the manuals what the s's (multiple \"s\") do.\n\nWhat I tried didn't work (yet) and I need a working example to understand what I have to do. I tried to adjust the example in above linked article without PDO to no success. And I am worried if/how the prepared data is transferred in strings when using ON DUPLICATE KEY, as I don't find any explanation there either (PEBKAS?)."
    },
    {
        "link": "https://dev.mysql.com/doc/en/sql-prepared-statements.html",
        "document": "MySQL 8.4 provides support for server-side prepared statements. This support takes advantage of the efficient client/server binary protocol. Using prepared statements with placeholders for parameter values has the following benefits:\n\nThe following sections provide an overview of the characteristics of prepared statements:\n\nYou can use server-side prepared statements through client programming interfaces, including the MySQL C API client library for C programs, MySQL Connector/J for Java programs, and MySQL Connector/NET for programs using .NET technologies. For example, the C API provides a set of function calls that make up its prepared statement API. See C API Prepared Statement Interface. Other language interfaces can provide support for prepared statements that use the binary protocol by linking in the C client library, one example being the extension, available in PHP 5.0 and later.\n\nAn alternative SQL interface to prepared statements is available. This interface is not as efficient as using the binary protocol through a prepared statement API, but requires no programming because it is available directly at the SQL level:\n\nSQL syntax for prepared statements is intended to be used for situations such as these:\n\nSQL syntax for prepared statements is based on three SQL statements:\n\nThe following examples show two equivalent ways of preparing a statement that computes the hypotenuse of a triangle given the lengths of the two sides.\n\nThe first example shows how to create a prepared statement by using a string literal to supply the text of the statement:\n\nThe second example is similar, but supplies the text of the statement as a user variable:\n\nHere is an additional example that demonstrates how to choose the table on which to perform a query at runtime, by storing the name of the table as a user variable:\n\nA prepared statement is specific to the session in which it was created. If you terminate a session without deallocating a previously prepared statement, the server deallocates it automatically.\n\nA prepared statement is also global to the session. If you create a prepared statement within a stored routine, it is not deallocated when the stored routine ends.\n\nTo guard against too many prepared statements being created simultaneously, set the system variable. To prevent the use of prepared statements, set the value to 0.\n\nThe following SQL statements can be used as prepared statements:\n\nOther statements are not supported.\n\nFor compliance with the SQL standard, which states that diagnostics statements are not preparable, MySQL does not support the following as prepared statements:\n\nGenerally, statements not permitted in SQL prepared statements are also not permitted in stored programs. Exceptions are noted in Section 27.8, “Restrictions on Stored Programs”.\n\nMetadata changes to tables or views referred to by prepared statements are detected and cause automatic repreparation of the statement when it is next executed. For more information, see Section 10.10.3, “Caching of Prepared Statements and Stored Programs”.\n\nPlaceholders can be used for the arguments of the clause when using prepared statements. See Section 15.2.13, “SELECT Statement”.\n\nIn prepared statements used with and , placeholder support for and parameters is available beginning with MySQL 8.4. See Section 15.2.1, “CALL Statement”, for an example and a workaround for earlier versions. Placeholders can be used for parameters regardless of version.\n\nSQL syntax for prepared statements cannot be used in nested fashion. That is, a statement passed to cannot itself be a , , or statement.\n\nSQL syntax for prepared statements is distinct from using prepared statement API calls. For example, you cannot use the C API function to prepare a , , or statement.\n\nSQL syntax for prepared statements can be used within stored procedures, but not in stored functions or triggers. However, a cursor cannot be used for a dynamic statement that is prepared and executed with and . The statement for a cursor is checked at cursor creation time, so the statement cannot be dynamic.\n\nSQL syntax for prepared statements does not support multi-statements (that is, multiple statements within a single string separated by characters).\n\nTo write C programs that use the SQL statement to execute stored procedures that contain prepared statements, the flag must be enabled. This is because each returns a result to indicate the call status, in addition to any result sets that might be returned by statements executed within the procedure.\n\ncan be enabled when you call , either explicitly by passing the flag itself, or implicitly by passing (which also enables ). For additional information, see Section 15.2.1, “CALL Statement”."
    },
    {
        "link": "https://php.net/manual/en/mysqli.error.php",
        "document": "information at saunderswebsolutions dot com ¶ The mysqli_sql_exception class is not available to PHP 5.05\n\n\n\nI used this code to catch errors \n\n The problem with this is that valid values for $res are: a mysqli_result object , true or false\n\nThis doesn't tell us that there has been an error with the sql used.\n\nIf you pass an update statement, false is a valid result if the update fails.\n\n\n\nSo, a better way is:\n\n \n\nThis would output something like:\n\nUnexpected PHP error [mysqli::query() [<a href='function.query'>function.query</a>]: (42S22/1054): Unknown column 'XXname' in 'field list'] severity [E_WARNING] in [G:\\database.php] line [249]\n\n\n\nVery frustrating as I wanted to also catch the sql error and print out the stack trace. \n\n\n\nA better way is:\n\n\n\n Prints out something like:\n\nError No: 1054\n\nUnknown column 'XXname' in 'field list'\n\nQuery: \n\nSELECT XXname FROM customer_table\n\n\n\n#0 G:\\\\database.php(251): database->dbError('Unknown column ...', 1054, 'getQuery()', 'SELECT XXname F...')\n\n#1 G:\\data\\WorkSites\\1framework5\\tests\\dbtest.php(29): database->getString('SELECT XXname F...')\n\n#2 c:\\PHP\\includes\\simpletest\\runner.php(58): testOfDB->testGetVal()\n\n#3 c:\\PHP\\includes\\simpletest\\runner.php(96): SimpleInvoker->invoke('testGetVal')\n\n#4 c:\\PHP\\includes\\simpletest\\runner.php(125): SimpleInvokerDecorator->invoke('testGetVal')\n\n#5 c:\\PHP\\includes\\simpletest\\runner.php(183): SimpleErrorTrappingInvoker->invoke('testGetVal')\n\n#6 c:\\PHP\\includes\\simpletest\\simple_test.php(90): SimpleRunner->run()\n\n#7 c:\\PHP\\includes\\simpletest\\simple_test.php(498): SimpleTestCase->run(Object(HtmlReporter))\n\n#8 c:\\PHP\\includes\\simpletest\\simple_test.php(500): GroupTest->run(Object(HtmlReporter))\n\n#9 G:\\all_tests.php(16): GroupTest->run(Object(HtmlReporter))\n\n\n\nThis will actually print out the error, a stack trace and the offending sql statement. Much more helpful when the sql statement is generated somewhere else in the code.\n\nse (at) brainbits (dot) net ¶ The decription \"mysqli_error -- Returns a string description of the LAST error\" is not exactly that what you get from mysqli_error. You get the error description from the last mysqli-function, not from the last mysql-error.\n\n\n\nIf you have the following situation\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n $mysqli->query(\"ROLLBACK;\")\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n}\n\n\n\nyou don't get an error-message, if the ROLLBACK-Query didn't failed, too. In order to get the right error-message you have to write:\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n $mysqli->query(\"ROLLBACK;\")\n\n}\n\ncallforeach at gmail dot com ¶ I had to set mysqli_report(MYSQLI_REPORT_ALL) at the begin of my script to be able to catch mysqli errors within the catch block of my php code.\n\n\n\nInitially, I used the below code to throw and subsequent catch mysqli exceptions\n\n\n\n I realized the exception was being thrown before the actual block was not being called 'm able to trap all mysqli errors\n\nasmith16 at littlesvr dot ca ¶ Please note that the string returned may contain data initially provided by the user, possibly making your code vulnerable to XSS. \n\n\n\nSo even if you escape everything in your SQL query using mysqli_real_escape_string(), make sure that if you plan to display the string returned by mysqli_error() you run that string through htmlspecialchars().\n\n\n\nAs far as I can tell the two escape functions don't escape the same characters, which is why you need both (the first for SQL and the second for HTML/JS)."
    },
    {
        "link": "https://stackoverflow.com/questions/27837641/php-mysqli-best-practice-error-handling",
        "document": "I'm new to PHP and mysqli, and I've managed to connect to my MySQL database using this PHP code:\n\nI'm wondering about error handling: Is there a best practice for database error handling in PHP? I'm thinking something like:\n\nAnd there should be something similar to handle if the DB connection fails. Could anyone help me out with finding the best practice for database related error handling in PHP?\n\nEDIT: After reading comments, I've removed all '@'characters from my code, since they suppress the warnings that PHP produces."
    },
    {
        "link": "https://stackoverflow.com/questions/14712379/mysqli-error-handling",
        "document": "I started using OO-MySQLi after procedural MySQL and I have a problem.\n\nIn production environment my system displays all errors as a custom page. MySQLi errors is an \"error\" too and I want catch them, but in documentation described only one way to do this:\n\n(just for example). This is a very bad way, because in my system I'm doing many things when error occurred, like logging, calling events, etc.\n\nOf course, I can extend mysqli class, for example:\n\nBut this way I need to extend almost ALL methods where error can occur. Moreover, MySQLi provides prepared statements (mysqli_stmt class) that has its own errors!\n\nCan you know a better way to handle MySQLi errors? Thank you in advance.\n\nAbout exceptions: Do I understand correctly that with exceptions I need do something like this:\n\nBut this is similar to"
    },
    {
        "link": "https://w3schools.com/php/func_mysqli_error.asp",
        "document": "Return the last error description for the most recent function call, if any:\n\n<?php\n\n $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n \n\nif ($mysqli -> connect_errno) {\n\n echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\n\n exit();\n\n }\n\n\n\n// Perform a query, check for error\n\nif (!$mysqli -> query(\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\n\n echo(\"Error description: \" . $mysqli -> error);\n\n }\n\n \n\n$mysqli -> close();\n\n?>"
    },
    {
        "link": "https://linkedin.com/advice/0/how-can-you-avoid-common-errors-when-using-mysqli-avzxc",
        "document": ""
    },
    {
        "link": "https://php.net/manual/en/book.mysqli.php",
        "document": "and to navigate\n• to select\n• to close\n\nPress without selection to search using Google"
    },
    {
        "link": "https://php.net/manual/en/class.mysqli.php",
        "document": "and to navigate\n• to select\n• to close\n\nPress without selection to search using Google"
    },
    {
        "link": "https://stackoverflow.com/questions/68266359/mysqli-with-php-8-0-6-unsupported-anymore",
        "document": "i was updating my production server with php 8 and i discovered an error \"Fatal Error: Class mysqli not found\". So i asked to the support and they told me that \"according to php official manual, mysqli is not supported anymore in php 8\".\n\nI tried to find any news on the internet about this, but i can't find anything.\n\nLooking at the php changelog, they talk about bugfixes for mysqli library until PHP 8.0.2, then nothing. Looking at the MySQLi official page on the php manual, there is only \"PHP5, PHP7\" as supported (while there is PHP 8 on PDO instead).\n\nSo, has somebody any news about this? What happened?\n\nI got the same problem installing Wamp Server on a local machine with PHP 8.0.6, so i think they really removed MySQLi from the library, but in both local and production doing a phpinfo() i can clearly see \"mysqli\" extension installed.\n\nAbout the production server, basically, provider told me \"use sp-php instead of php\", and now mysqli works. About the PHP.net, i think they forgot to add the support."
    },
    {
        "link": "https://php.net/manual/en/mysqli.requirements.php",
        "document": "In order to have these functions available, you must compile PHP with support for the mysqli extension.\n\nWhen running a PHP version before 7.1.16, or PHP 7.2 before 7.2.4, set MySQL 8 Server's default password plugin to mysql_native_password or else you will see errors similar to The server requested authentication method unknown to the client [caching_sha2_password] even when caching_sha2_password is not used.\n\nThis is because MySQL 8 defaults to caching_sha2_password, a plugin that is not recognized by the older PHP (mysqlnd) releases. Instead, change it by setting in . The caching_sha2_password plugin is fully supported as of PHP 7.4.4. For older releases, the mysql_xdevapi extension does support it."
    },
    {
        "link": "https://dev.mysql.com/doc/en",
        "document": "This is the MySQL Reference Manual. It documents MySQL 8.4 through 8.4.4, as well as NDB Cluster 8.4 through 8.4.4, respectively. It may include documentation of features of MySQL versions that have not yet been released. For information about which versions have been released, see the MySQL 8.4 Release Notes.\n\nMySQL 8.4 features. This manual describes features that are not included in every edition of MySQL 8.4; such features may not be included in the edition of MySQL 8.4 licensed to you. If you have any questions about the features included in your edition of MySQL 8.4, refer to your MySQL 8.4 license agreement or contact your Oracle sales representative.\n\nFor notes detailing the changes in each release, see the MySQL 8.4 Release Notes.\n\nFor legal information, including licensing information, see the Preface and Legal Notices.\n\nFor help with using MySQL, please visit the MySQL Forums, where you can discuss your issues with other MySQL users."
    }
]