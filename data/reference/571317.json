[
    {
        "link": "https://w3schools.com/html/html_layout.asp",
        "document": "London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.\n\nStanding on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium."
    },
    {
        "link": "https://netgen.io/blog/html-and-css-best-practices",
        "document": "HTML and CSS are the building blocks of web development. While both are relatively straightforward to learn, mastering best practices is essential for writing clean, maintainable, and scalable code.\n\nSemantic HTML tags add meaning to the content. They improve accessibility and SEO by giving search engines and screen readers more context about your content. Avoid overuse of non-semantic elements like <div> and <span> , opt for more meaningful elements like <nav>, <aside> etc.\n\n1.1. Headings (<h1> to <h6>) for titles and subtitles\n• <h1> tag is the main heading (subject of the web page) while the <h6> tag is the least important heading. Keep in mind that each page should only have one <h1>. Having only one <h1> element on a web page is vital for Search Engine Optimization (SEO). It helps search engines understand what a web page is all about (the main idea of a web page). Don't use <h1> and then jump to <h3> when using header tags. It's difficult for web visitors using a screen reader to understand the contents of your web page when you skip heading levels.\n\n1.3. Lists (<ul>, <ol>, <li>) for ordered and unordered lists, and <dl> for description lists to improve readability and semantics.\n\n1.4. Sectioning elements like <header>, <footer>, <section>, <article>, and <aside> to structure the layout.\n• <header> element shows the navigation or the opening part of the web page\n• <footer> element shows copyright information or navigation links about the web page\n• <section> element represents a specific section of a web page with a distinct topic or purpose\n• <aside> element identifies some content aside from the content it is placed in and should be indirectly related to the surrounding content (example: glossaries, bibliographies, pull quotes, sidebars, or even advertisements\n\n1.5. It's advisable to use the <figure> element when adding captions to your images. It is important to use the <figcaption> element along with the <figure> element for it to work. It is important to add captions to your images this way because:\n• Search engine optimization (it is easier to find your images on search engines)\n• It will be easier for web visitors who use screen readers to understand the content of your web page\n• If you use <p> element as image caption: In a situation where the image fails to load you will have the alt text and the text on the <p> element showing on the screen. It will be difficult for a web visitor using a screen reader to tell the difference between the <p> and alt text.\n\n1.6. Avoid using <b> and <i> for bolding and italics because they have no semantic meaning. Use the font-weight CSS property or use the <strong> and the <em> tags instead.\n\nA consistent structure in HTML refers to organizing the elements in a logical and predictable way, ensuring the code reflects the content hierarchy and relationships between elements. Indentation involves spacing elements in a nested hierarchy, visually representing parent-child relationships.\n\nHTML does not rely on indentation for functionality. Browsers interpret and render HTML based on the elements and their attributes, not on how the code is formatted or indented. However, proper indentation is important for readability and maintainability. It helps developers and teams understand the structure of the document more easily, especially in larger or more complex projects.\n• Consistent indentation (2 or 4 spaces) to make HTML more readable.\n• Organizing HTML structure with proper nesting and closing of tags.\n• Keeping lines short. Try to break long lines of code, especially within attributes, so they remain readable without horizontal scrolling.\n• Using prettier (code formatter). It enforces a consistent style by parsing code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.\n\nStructure is, also, very important in CSS. How you organize and structure your CSS code can have a significant impact on the maintainability, scalability, and performance of your website or web application.\n\nIt is designed to prevent specificity issues by organizing the code in an inverted triangle, from broad to narrow rules.\n\nEnsuring that your HTML and CSS are accessible means designing your website or application to be usable by as many people as possible.\n• alt: Provides an alternative description for images, important for accessibility.\n• title: Provides additional information, but don’t rely solely on it for accessibility since some screen readers do not read it.\n\n3.2. Ensuring forms are labeled correctly using <label> tags and Use <fieldset> and <legend> for grouping related form fields for better structure and context.\n\n3.4. Implementing responsive typography, where text sizes and line heights adjust based on the viewport size to maintain readability across devices.\n\n3.5 Avoid color and image as the sole method to convey meaning\n\nKeeping CSS in external files rather than inline or embedded within <style> tags in HTML. This makes styles reusable, improves maintainability and keeps HTML clean.\n\n5.1. Writing HTML before CSS (helps to define the skeleton of your page).\n\n5.2. Breaking CSS into smaller, reusable files or sections - common styles for buttons, forms, and grids that can be reused throughout the website.\n• CSS preprocessors are used to write styles in a special syntax that is then compiled into standard CSS. They extend the functionality of standard CSS by introducing features like variables, nesting, mixins, and functions. By using preprocessors, you can take advantage of advanced features that are not available in plain CSS.\n\n5.4. Using variables in modern CSS (via CSS/SCSS custom properties) to store values like colors, fonts, or spacing units.\n\n5.5 Sticking to class selectors (.classname) for styling. IDs (#idname) are more specific and harder to override, making CSS less flexible\n• The !important tag can be used to identify properties that are more important than others. This can get tricky as often you’ll end up needing to use multiple !important tags – each to override a previous one in specific scenarios. And doing this too much can cause your site to break or your styles to load incorrectly. Most often, this tag is used as a short-term solution but it often becomes permanent and then can cause issues later when it’s time to debug, in particular.\n\nStrategies used to create consistent, meaningful, and maintainable class names CSS code. They aim to prevent naming conflicts, improve readability, and make styles more modular.\n\nmy favorite, although I can still run into problems (look at drawbacks)\n\nBEM is a popular naming methodology that focuses on the concept of breaking down the user interface into independent blocks. Each block contains elements and can be modified with a modifier.\n• Overuse of BEM can lead to code redundancy.\n• The need to define many classes can lead to increased CSS file size.\n\nSMACSS is more of a style guide than a strict naming convention. It focuses on organizing CSS into reusable components and avoids deep nesting (divides CSS into categories)\n• Divides CSS into categories like Base, Layout, Module, State, and Theme, which can sometimes be unclear.\n• Scalability issues with larger projects - the structure can become fragmented over time, reducing maintainability.\n• Relies heavily on naming conventions, which requires discipline to ensure consistency.\n\nThis methodology focuses on creating reusable styles by splitting the visual properties (skin) from the structural properties (container).\n\nStructure: encourages separating structure from skin (appearance) and aims to create reusable \"objects.\"\n• Increases the number of classes added to an element.\n• It may be excessive for small projects.\n\nAtomic CSS is an approach where each class corresponds to a single, small, specific rule. This reduces repetition but can lead to more class names being used in the markup.\n\nStructure: Uses very small, single-purpose class names for each property.\n• Often used in utility-first frameworks like Tailwind CSS.\n• Can make HTML more verbose (each element may require multiple classes to achieve the desired styling).\n• Defining all the necessary utility classes upfront can be time-consuming.\n• For developers accustomed to traditional, semantic CSS methodologies, adopting Atomic CSS can require a significant shift in mindset and workflow.\n\nCSS Specificity is a fundamental concept in CSS that determines the order of style application. It is calculated based on the types of selectors used, including inline styles, IDs, classes, attributes, and element types.\n\nCan see it as points 0, 0, 0, 0 and read it like a number 0000\n• If the element has inline styling, apply 1,0,0,0 points\n• For each ID value, apply 0,1,0,0 points\n• For each class value (or pseudo-class or attribute selector), apply 0,0,1,0 points\n\n#my-id .my-class:hover has a specificity of (0, 1, 1, 0) or 110 points.\n\n.my-class p has a specificity of (0, 0, 1, 1) or 11 points.\n\nThe rule with the highest specificity wins.\n• The universal selector (*) has no specificity value (0,0,0,0)\n• Pseudo-elements (e.g. :first-line) get 0,0,0,1 unlike psuedo-class (e.g. :first-child) which get 0,0,1,0\n• The pseudo-class:not() adds no specificity by itself, only what’s inside its parentheses.\n\nImages and other media elements can significantly impact page load time, especially on mobile devices. Properly managing these elements helps optimize performance and accessibility. Using loading=\"lazy\" on images to load them only when they’re about to come into the user’s view, improving performance.\n\nPrefer rem and em units for font sizing, padding, and margins to allow for more scalable and responsive designs, instead of fixed units like px.\n\nWhether you're just starting out or refining your skills, these few practices will help you get started.\n\nAdopting best practices for HTML and CSS ensures that your web pages are well-structured, maintainable, accessible, and performant."
    },
    {
        "link": "https://freecodecamp.org/news/css-spacing-guide-for-web-devs",
        "document": "In this tutorial, we're going to talk about spacing in CSS spacing – sounds so basic, right? Well, it's not as basic as you might think.\n\nTake, for instance, when you visit your favorite e-commerce site to scout for products. The first thing that welcomes you to the platform is an intuitive design with a clear presentation of products. This gives you a great browsing experience.\n\nNow take a second to imagine how your favorite e-commerce website would look if all the space separating products, descriptions, reviews, and other related items were eliminated. Trust me, it would only be a matter of time before you'd find a new favorite e-commerce website.\n\nIf navigating through a website becomes a hassle, people will go elsewhere. Efficiently scanning through a website would be nearly impossible if there wasn't a clear visual distinction between different products, important text, and images.\n\nIn this article, I will teach you how to better create a highly accessible and visually appealing website. I'll cover all you need to know about spacing in CSS and how you can implement it effectively. Without further ado, let’s dive right in.\n\nCSS spacing is an essential feature that helps you arrange and organize every other element of your web application in a neat and sensible manner. This helps improve web accessibility and creates a better user experience.\n\nTo go more in-depth, CSS spacing refers to how you insert space within and between CSS elements on a web page. It plays a very important role in web design and is used to enhance readability, usability, and the overall aesthetic of a webpage.\n\nSpacing consists of various parts, which include , , and . Each of these contributes to the spatial relationship between elements.\n\nImage showing the difference between elements spaced properly and elements squished together.\n\nIn the image above, you can distinguish between the example with CSS spacing and the one without, given the definition I gave of what CSS spacing is. You can also likely see which of the two images is better structured, more aesthetically pleasing, and more readable.\n\nThis shows you how important CSS spacing is. With that being said, let’s talk more in-depth about the importance of CSS spacing.\n\nWe have already seen some benefits of CSS spacing and why it is important, but here are the main reasons why you should always consider CSS spacing whenever you are building a webpage:\n• Enhancing Readability: With thoughtful CSS Spacing, there is a clear distinction between various elements and segments of your web page, which improves readability. You can make sure everything is spaced properly by adjusting margins, padding, and many other CSS properties.\n• Increasing User Engagement and Navigation: With proper CSS spacing, you can avoid cluttered web pages which discourage users from engaging with your webpage contents. It also directs the flow of information on a webpage, which gives users a sense of where their attention should be focused.\n• Facilitating Responsive Design: With good CSS spacing, you can account for minor changes when it comes to responsive designs. For instance, with a decent amount of padding, you can ensure your web page's elements don't overlap on different devices.\n• Emphasizing Important Elements: You can use CSS spacing to highlight key information on your web page. By having a little bit more than the regular amount of space, the user’s attention will simply be drawn to certain elements.\n• Adding Professional Aesthetics: In minimalist design, spacing is very important. It gives a more elegant and luxurious feeling to your webpage, giving attention to only the vital information on the page.\n\nWhen talking about the types of spacing in CSS, there are a lot of properties associated with it. They include, , , and . But overall, there are two main types of spacing:\n\nTo completely understand each of these types of spacing, let’s consider this example:\n\nGiven the code above, we have two boxes that illustrate both internal and external spacing. As you can see, we added . This added of internal space to our boxes.\n\nAlso, to separate one box from the other, we added a to the first box. This results in that external space you see below our first box in the image below. We also added worth of external space to the left side of our second box.\n\nIf you've noticed, the internal spacing increases the size of our element, while the external spacing either adjusts or changes the position of either the parent element or surrounding elements.\n\nIllustration of internal space vs external space based on the above code.\n\nInternal space is usually created with padding, and external space is usually created with margins. Here are a few differences between the two types of spacing:\n\nTo fully understand CSS spacing, you must understand the CSS box model. This is a fundamental concept in CSS that shows the layout of elements. Every element follows the box model, so it is essential that you know how it works.\n\nThere are four components that make up the box model, and they include:\n\nThe content is the core of the box model, and it is where the text, image, and so on of the element reside.\n\nPadding is the internal space that surrounds the content. It's used to provide spacing between the content and the border. It also increases the dimension of the background of an element.\n\nThe border is the bridge between internal space and external space. It goes all around the padding, and its shape, size, and color are controlled by the border property. The main aim of the border property is to create a boundary around the element. It also adds aesthetics to the element.\n\nThe margin is the external space, and its main purpose is to create space between different elements. This is used to enhance readability and visual organization.\n\nTo estimate the total size of an element, you'll need to consider all these components. Full knowledge of the box model will give you the power to control the CSS spacing and alignment of elements on the page.\n\nLet’s consider this code to illustrate how the box model works:\n\nSeems like pretty self-explanatory code, right? As you can see, we tried as much as possible to use all the components of the box model.\n\nWe started off by defining the dimensions of the content component, giving it a width and height of . Using the Flexbox layout model, we aligned the content to the center.\n\nNext, we added a padding of . This increased the inner spacing, which increased the dimension of the box, making the background larger.\n\nYou can see the blueish border, which goes around the padding. It separates the inner spacing from the outer spacing. It was set using the border property and has a size of .\n\nLastly, we have the margin set to . This is responsible for creating outer spacing that separates elements from each other.\n\nHere is what our result looks like:\n\nAs you can see in the image above, we have all the elements of a box model present. This may not always be the case, as most of these components can be manually assigned values or can also be totally removed.\n\nThere are several other layout models you can use when designing your websites. And keep in mind that CSS spacing works a bit differently in these other models.\n\nFirstly, let’s look at the other major layout models that are widely in use and how CSS spacing works when you're using them. They include:\n\nExplaining in detail how CSS Flexbox works is beyond the scope of this article – but if you want to learn more about it, you can read the documentation. You can also check out this crash course on freeCodeCamp's YouTube channel.\n\nOur main focus here will be on the property. You can use this property for both CSS Flexbox and CSS Grid. In CSS Flexbox, you use it to create space between each flex item, which lets you control the space between items.\n\nLet’s take for instance this code:\n\nIn the code above, we have three flex items. We set a property of , which places a space in between each child.\n\nYou can also use various other CSS properties in the CSS Flexbox model for CSS spacing. They include:\n• Justify-content: This controls the spacing along the main-axis. The kind of spacing is determined by the value set on this property, such as , , , , , and .\n• Align content: This is kind of similar to the justify-content property, but it controls the spacing along the cross-axis instead. Here are some of the values we can use on the Align-content property: , , , , , , and .\n• Flex-basis: This is used to determine the initial size of flex items, which allows you to create flex items of equal size.\n\nHere is an image that shows some of these properties and how their values function:\n\nSpacing in the Grid model isn’t so different from the Flexbox model. Let’s explore some of the properties that control spacing in CSS grid.\n• grid-gap: This property performs the same job as the gap property, which is to space the rows and columns of CSS grids. You can also use the gap property to perform this function, as it’s the newer way.\n• grid-row-gap and grid-column-gap: some times you don’t want a uniform gap between rows and columns. Instead, you can use these properties to define the size of the gap between grid rows and columns, respectively.\n\nTo illustrate, consider this code:\n\nHere we set the display property to grid. The grid is then set to have three equal-sized columns using .\n\nWe then used the property to create a gap of 50px between the columns, while creates a gap of 20px between the rows.\n\nBelow is the result we get from having six grid items:\n\nWhen we discussed the box model, we classified text as part of the content component of the box model. Well, there are several properties you can use on text to add spacing in order to meet your specific needs. Some of these properties include:\n• letter-spacing: This property is used to create space between each character in the text.\n• word-spacing: This property is used to create space between each word in the text.\n• line-height: This property is used to create vertical spacing between lines of text.\n• text-align: This property is used to control how text is positioned horizontally. The default value is and the most-used value is .\n• text-indent: This property is used to indent the first line of the block element, which simply creates a space at the start of the text.\n• white-space: This property defines how the text within your elements is displayed. The default value for this property is but when set to the text just flows horizontally without wrapping up to begin a new line.\n\nHere is some code that shows how each of these properties operates:\n\nIn the code above, we created several divs with a class of text, each having a p tag with a class name that describes the property that the text will have.\n\nThe first p tag is used to illustrate the property, and we set a space between each letter.\n\nNext, we have the property, and with this property, we gave a gap between each word.\n\nThe property here gives the p tag a vertical gap.\n\nAnd for the p tag with the property value set to center, we have equal space on the left and right sides of the text.\n\nAnother property we illustrated was the property. We set its value to , and this well indents the text, giving it a space at the start of the first line of the text.\n\nLast but not least, we set the last p tag to have a property value of ,\" which makes the text flow in a horizontal line without ever wrapping to the next line.\n\nHere is a screenshot of what this code produces when it appears in the browser:\n\nExample of text spacing properties in action\n\nUse Case: How to Create a Review Form\n\nWe have discussed a lot of details about CSS spacing. Now to wrap it up, let’s build a simple review form so you see CSS spacing in action.\n\nThe code above shows our review form. We have which holds the form title. Next, we have the description in a tag. Last but not least, we have our form, which holds the input fields and a submit button.\n\nIn the code above, we have added our CSS spacing. You can see the properties such as the , , , , and some other properties we talked about earlier and the values we gave to them.\n\nIf we run our code and view it in the browser, this is the result we get:\n\nImage showing the form with and without proper spacing\n\nWith our CSS Spacing, we have been able to align the and to the center, and we have been able to make our input fields look presentable with the padding in the input fields. By applying margin, we have been able to separate elements from each other, like the , , , and the submit .\n\nFrom the image above, you can clearly tell which is the better version. CSS spacing makes the review form look better and is also easier to understand.\n\nIn conclusion, CSS spacing is a fundamental aspect of web development, and mastering these concepts is essential for every front-end developer.\n\nWith proper use of , , and all the other spacing properties we talked about, you can create designs that are both intuitive and comfortable, guiding your user’s eyes smoothly from one element to another.\n\nWhile CSS spacing may appear to be a simple concept at first glance, it requires a bit of practice to comfortably choose between spacing properties and use them correctly.\n\nAlways remember that good spacing breathes life into your pages, making them more readable, engaging, classy, and intuitive. Happy coding!\n\nFeel free to connect with me on the following platforms:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Introduction",
        "document": "This lesson recaps some of the CSS layout features we've already touched upon in previous modules, such as different values, as well as introducing some of the concepts we'll be covering throughout this module. It also covers the concept of normal flow in depth.\n• Recognise the methods used to implement modern page layouts.\n• Understand that normal flow is the default way a browser lays out block and inline content.\n• Know that properties such as , , and are intended to change how the browser lays out content. CSS page layout techniques allow us to take elements contained in a web page and control where they're positioned relative to the following factors: their default position in normal layout flow, the other elements around them, their parent container, and the main viewport/window. The page layout techniques we'll mention below and cover in detail through the module have their uses, advantages, and disadvantages. No technique is designed to be used in isolation. By understanding what each layout method is designed for you'll be in a good position to understand which method is most appropriate for each task.\n\nElements on a webpage lay out in normal flow if you haven't applied any CSS to change the way they behave. You can change how elements behave either by adjusting their position in normal flow or by removing them from it altogether. Starting with a solid, well-structured document that's readable in normal flow is the best way to begin any webpage. It ensures that your content is readable even if the user's using a very limited browser or a device such as a screen reader that reads out the content of the page. In addition, since normal flow is designed to make a readable document, by starting in this way you're working with the document rather than struggling against it as you make changes to the layout. Before digging deeper into different layout methods, it's worth revisiting some of the things you have studied in previous modules with regard to normal document flow.\n\nHow are elements laid out by default? The process begins as the boxes of individual elements are laid out in such a way that any padding, border, or margin they happen to have is added to their content. This is what we call the box model. By default, a block-level element's content fills the available inline space of the parent element containing it, growing along the block dimension to accommodate its content. The size of inline-level elements is just the size of their content. You can set or on some elements that have a default property value of , like , but the value will still remain . If you want to control the property of an inline-level element in this manner, use CSS to set it to behave like a block-level element (e.g., with or , which mixes characteristics from both). That explains how elements are structured individually, but how about the way they're structured when they interact with one another? The normal layout flow (mentioned in the layout introduction article) is the system by which elements are placed inside the browser's viewport. By default, block-level elements are laid out in the block flow direction, which is based on the parent's writing mode (initial: horizontal-tb). Each element will appear on a new line below the last one, with each one separated by whatever margin that's been specified. In English, for example, (or any other horizontal, top to bottom writing mode) block-level elements are laid out vertically. Inline elements behave differently. They don't appear on new lines; instead, they all sit on the same line along with any adjacent (or wrapped) text content as long as there is space for them to do so inside the width of the parent block level element. If there isn't space, then the overflowing content will move down to a new line. If two vertically adjacent elements both have a margin set on them and their margins touch, the larger of the two margins remains and the smaller one disappears. This is known as margin collapsing. Collapsing margins is only relevant in the vertical direction.\n\nLet's look at a simple example that explains all of this: <h1>Basic document flow</h1> <p> I am a basic block level element. My adjacent block level elements sit on new lines below me. </p> <p> By default we span 100% of the width of our parent element, and we are as tall as our child content. Our total width and height is our content + padding + border width/height. </p> <p> We are separated by our margins. Because of margin collapsing, we are separated by the size of one of our margins, not both. </p> <p> Inline elements <span>like this one</span> and <span>this one</span> sit on the same line along with adjacent text nodes, if there is space on the same line. Overflowing inline elements will <span>wrap onto a new line if possible (like this one containing text)</span>, or just go on to a new line if not, much like this image will do: <img src=\"https://mdn.github.io/shared-assets/images/examples/long.jpg\" alt=\"snippet of cloth\" /> </p> Note how the HTML is displayed in the exact order in which it appears in the source code, with block elements stacked on top of one another. For many of the elements on your page, the normal flow will create exactly the layout you need. However, for more complex layouts you will need to alter this default behavior using some of the tools available to you in CSS. Starting with a well-structured HTML document is very important because you can then work with the way things are laid out by default rather than fighting against it.\n\nThe methods that can override normal flow and change how elements are laid out in CSS, which we will cover in detail in this module, are: Standard values such as , or can change how elements behave in normal flow, for example, by making a block-level element behave like an inline-level element (we covered these back in the Box model lesson). Applying a value such as can cause block-level elements to wrap along one side of an element, like the way images sometimes have text floating around them in magazine layouts. The property allows you to precisely control the placement of boxes inside other boxes. positioning is the default in normal flow, but you can cause elements to be laid out differently using other values, for example, fixing them to the top of the browser viewport using . We also have entire layout methods that are enabled via specific values. The most important ones for you to know about are CSS grid and Flexbox, which both alter how child elements are laid out inside their parents. Responsive design refers to creating layouts that adapt to different devices the web page is rendered on (for example, desktops and mobile phones). Responsive design doesn't provide any specific layout tools of its own; its most significant component is the at-rule, which allows you to apply different layouts depending on device attributes such as screen width or resolution."
    },
    {
        "link": "https://web.dev/learn/css/spacing",
        "document": "Chrome is back at Google I/O on May 20-21! Register now\n\nSay you've got a collection of three boxes, stacked on top of each other and you want space between them. How many ways can you think of to do that in CSS?\n\nThe property might give you what you need, but it also might add additional spacing that you don't want. For example, how do you target just the space in between each of those elements? Something like might be more appropriate in this case. There are many ways to adjust spacing within a UI, each with its own strengths and caveats.\n\nHTML itself provides some methods to space elements. The and elements allow you to space elements in the block direction, which if you are in a latin-based language, is top-to-bottom.\n\nIf you use a element, it will create a line-break, just like if you were to press your enter key in a word processor.\n\nThe creates a horizontal line with space either-side, known as .\n\nAlong with using HTML elements, HTML entities can create space. An HTML entity is a reserved string of characters that are replaced with character entities by the browser. For example, if you were to type in your HTML file, it would be converted into a © character. The entity is converted into a non-breaking space character, which provides an inline space. Be careful though, because the non-breaking aspect of this character stitches the two elements together, which can result in odd behaviour.\n\nIf you want to add space to the outside of an element, you use the property. Margin is like adding a cushion around your element. The property is shorthand for , , and .\n\nThe shorthand applies properties in a particular order: top, right, bottom and left. You can remember these with trouble: TRouBLe.\n\nThe shorthand can also be used with one, two, or three values. Adding a fourth value lets you set each individual side. These are applied as follows:\n• One value will be applied to all sides. ( ).\n• Two values: the first value will be applied to the top and bottom sides, and the second value will be applied to the left and right sides. ( )\n• Three values: the first value is , the second value is and , and the third value is . ( ).\n\nMargin can be defined with a length, percentage or auto value, such as or . If you use a percentage, the value will be calculated based on the width of your element's containing block.\n\nThis means that if your element's containing block has a width of and your element has a value of : each side of your element will have a computed margin of .\n\nYou can also use a value of for margin. For block level elements with a restricted size, an margin will take up available space in the direction that it is applied to. A good example is this one, from the flexbox module, where the items push away from each other.\n\nAnother good example of margin is a horizontally centered wrapper which has a max width. This sort of wrapper is often used to create a consistent center column on a website.\n\nHere, margin is removed from the top and bottom (block) sides, and shares the space between the left and right (inline) sides.\n\nNegative values can also be used for margin. Instead of adding space between adjacent sibling elements, it will reduce space between them. This can result in overlapping elements, if you declare a negative value that's more than the available space.\n\nMargin collapse is a tricky concept, but it's something you'll run into very commonly when building interfaces. Say you have two elements: a heading and a paragraph that both have vertical margin on them:\n\nAt first glance, you would be forgiven for thinking that the paragraph will be spaced from the heading, because and combined calculate to . Because vertical margin collapses, though, the space is actually .\n\nMargin collapse works by selecting the largest value of two adjoining elements with vertical margin set on the adjoining sides. The bottom of the meets the top of the , so the largest value of the 's bottom margin and the 's top margin is selected. If the were to have of bottom margin, the space between them both would then be because that is larger than . Only block margins collapse, not inline (horizontal) margins.\n\nMargin collapse also helps with empty elements. If you have a paragraph that has a top and bottom margin of , it will only create of space: not . If anything is added to the inside of this element though, including , its margin will no longer collapse in itself and will be treated as any box with content.\n\nIf you make an element absolutely positioned, using , the margin will no longer collapse. The margin also won't collapse if you use the property, too.\n\nIf you have an element with no margin between two elements with block margin, the margin won't collapse either, because the two elements with block margin are no longer adjacent siblings: they are just siblings.\n\nIn the layout lesson, you learned that flexbox and grid containers are very similar to block containers, but handle their child elements very differently. This is the case with margin collapse, too.\n\nIf we take the original example from the lesson and apply flexbox with column direction, the margins are combined, instead of collapsed. This can provide predictability with layout work, which is what flexbox and grid containers are designed for.\n\nMargin and margin collapse can be tricky to understand, but understanding how they work, in detail, is very useful, so this detailed explainer is strongly recommended.\n\nInstead of creating space on the outside of your box, like does, the property creates space on the inside of your box instead: like insulation.\n\nDepending on which box model you are using—which was covered back in the box model lesson — can also affect the overall dimensions of the element too.\n\nThe property is shorthand for , , and . Just like , has logical properties, too: , , and .\n\nAlso covered in the layout module, if you set a value for that is anything other than , you can space elements with the , , and properties. There are some differences with how these directional values behave:\n• An element with will maintain its place in the document flow, even when you set these values. They will be relative to your element's position too.\n• An element with will base the directional values from the relative parent's position.\n• An element with will base the directional values on the viewport.\n• An element with will only apply the directional values when it is in its docked/stuck state.\n\nIn the logical properties module, you learn about the and properties, which allow you to set directional values that honor writing mode.\n\nBoth properties are shorthands combining the and values and as such accept either one value to be set for and or two individual values.\n\nLastly, in both grid and flexbox you can use the property to create space between child elements. The property is shorthand for and , it accepts one or two values, which can be lengths or percentages. You can also use keywords such as , and . If you define only one value, the same will be applied to both the rows and columns, but if you define both values, the first value is and the second value is .\n\nWith both flexbox and grid, you can also create space using their distribution and alignment capabilities, which we cover in the grid module and flexbox module.\n\nIt is a really good idea to choose a strategy and stick with it to help you create a consistent user interface that has good flow and rhythm. A good way to achieve this is use consistent measures for your spacing.\n\nFor example, you could commit to using as a consistent measure for all gaps between elements—known as gutters—so all layouts look and feel consistent. You could also decide to use as the vertical spacing between flow content, which would achieve consistent spacing based on the element's . Whatever you choose, you should save these values as variables (or CSS custom properties) to tokenize those values and make the consistency a bit easier.\n\nUsing custom properties like this allows you to define them once, then use them throughout your CSS. When they are updated, either locally within an element or globally, the values will pass down through the cascade and the updated values will be reflected."
    },
    {
        "link": "https://stackoverflow.com/questions/4908525/styling-the-hr-element",
        "document": "I am trying to make my (hr) element pinkish, and am using the following css rule for this:\n\nBut there is still a black line showing through it.\n\n(here is a look at it on the site that I am making: http://www.yemon.org/ , its the only horizontal line in the design.\n\nHow do i get the line uniform pink?"
    },
    {
        "link": "https://w3schools.com/howto/howto_css_style_hr.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://w3schools.com/tags/tag_hr.asp",
        "document": "Use the <hr> tag to define thematic changes in the content:\n\n<h1>The Main Languages of the Web</h1>\n\n\n\n<p>HTML is the standard markup language for creating Web pages. HTML describes the structure of a Web page, and consists of a series of elements. HTML elements tell the browser how to display the content.</p>\n\n\n\n<hr>\n\n\n\n<p>CSS is a language that describes how HTML elements are to be displayed on screen, paper, or in other media. CSS saves a lot of work, because it can control the layout of multiple web pages all at once.</p>\n\n\n\n<hr>\n\n\n\n<p>JavaScript is the programming language of HTML and the Web. JavaScript can change HTML content and attribute values. JavaScript can change CSS. JavaScript can hide and show HTML elements, and more.</p>"
    },
    {
        "link": "https://robertnyman.com/2007/03/09/a-hard-challenge-styling-an-hr-element",
        "document": "One of the web sites I’m currently working on has a lot of line dividers, and they had been added somewhat inconsistently. Therefore, I decided to go the semantic route and throw out all and elements, and replace them with one single class-free . Oh man, did I open up a can of worms…\n\nLet me first show you how to basically style a element with CSS:\n\nOk, so far so good. Let’s get to the real problem.\n\nJust as with certain form elements, IE is a master (or bitch) at applying space, margin and padding that can’t be removed with normal CSS; something which works for all other web browsers on all platforms:\n\nThe challenging thing here is that it seems that top and bottom margins just can’t be removed in IE, no matter how hard you try. And if you think will help here, think again. All it did was, ironically, centering the content instead of aligning it to the left-hand side… 😐\n\nOne way to go here is to keep the element for semantic and CSS-less reasons, and then wrap it in a that hides the and creates a line effect with a border or background color:\n\nBut this time, I decided not to cave and go down that road; I’m not backing down! Determined to “win”, I continued. In the web site context I was working on, I needed to have the line with a top and bottom margin of 20 pixels, so I thought (read: hoped) that having a margin wouldn’t cause any problem in IE. How wrong I were…\n\nApparently, if you do want a margin, just setting the desired value will, in IE, not result in what you expected (either). The basic code for a 20 pixel top and bottom margin would be:\n\nHowever, in IE there’s two problems. For some annoying reason I can’t understand, it adds 7 pixels (even number, right?) to the top and bottom margin, and margin-collapsing also fails miserably. So, to make it work, I had to give IE a special top and bottom margin to get the wanted 20 pixel margin:\n\nRight about now, you probably say: eh, what?! Let me guide you: the bottom margin part is the easy one. It has a 13 pixel margin plus the magical 7 pixels IE adds, which together equals in 20 pixels. Great!\n\nThe 3 pixel top margin is first 20 pixels minus the IE-added 7 pixels, which would then be 13 pixels. However, since it fails to collapse the margin together with the preceding element’s bottom margin, it instead adds them together. Luckily for me, all the places where the line divider is used is following either a paragraph or a list with a bottom margin of 10 pixels, so you need to deduct that as well from the top margin, which leaves us with just a mere 3 pixel top margin in the CSS for IE, but with a result of 20 pixels…\n\nThe challenge to you\n\nConclusively, I did win over IE in this case, since a margin was needed. All I had to do was to find the magic IE formula. The challenge, though, is:\n\nHow do you use elements in IE with no margins whatsoever, and without using any container element?"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-style-an-hr-element-with-css",
        "document": "How to Style an hr Element with CSS?\n\nThe <hr> element in HTML is used to create a horizontal line or thematic break between sections of a webpage. By default, it shows as a solid, thin line that spans the width of its container. You can easily customize the appearance of the <hr> element using CSS to match your website's design and style. This allows you to adjust the thickness, color, and style of the line for a more personalized look.\n\nThese are the following approaches:\n\nThe border property is a shorthand property that allows you to set the style, width, and color of an element's border in a single declaration.\n• border-width: Specifies the thickness of the border. It can be a length value (e.g., 2px, 0.5rem) or one of the predefined values (thin, medium, thick).\n• border-style: Specifies the line style of the border. Possible values include solid, dashed, dotted, double, groove, ridge, inset, and outset.\n• border-color: Specifies the color of the border. It can be a named color (e.g., red), a hexadecimal value (e.g., #333), an RGB value (e.g., rgb(51, 51, 51)), or a CSS color keyword (e.g., transparent).\n\nExample: In this example, different border styles (solid, dashed, and dotted) are applied to elements to create visually distinct horizontal lines for section separation.\n\nThe background property can be used to set the color and thickness of the <hr> by combining background-color and height.\n• background-color: Specifies the background color of the element. It can be a named color, a hexadecimal value, an RGB value, or a CSS color keyword.\n• height: Specifies the height of the element. For the <hr> element, it determines the thickness of the horizontal rule.\n\nExample: In this example, the background color and height of elements are customized to create distinct horizontal lines (dark gray, light blue, and red) for better visual separation.\n\nUsing the height and background-color properties\n\nFor better readability and maintenance, you can style the <hr> using separate height and background-color properties.\n\nExample: In this example, the height and background color of <hr> elements are customized to create visually distinct lines (green, orange, and purple), adding separation and enhancing layout structure."
    }
]