[
    {
        "link": "https://stackoverflow.com/questions/42695519/export-document-as-html-using-microsoft-office-interop-word-in-net",
        "document": "I am trying to export a word document in HTML using . Unfortunately the only formats supported for export are PDF and XPS. Is there a way to work around this and force export to html or should I rather use COM?\n\nany library that would allow me to export into HTML?"
    },
    {
        "link": "https://stackoverflow.com/questions/63343506/export-word-to-pdf-with-c-sharp-and-word-interop-dont-export-links-to-bookmarks",
        "document": "I have a program in C# where I create a report in .docx using Word Interop. This document is created perfectly with few \"headings\" with links to bookmarks on pages inside the document and then saved. Then I try to export it to pdf using ExportAsFixedFormat and the exported file includes those \"headings\" but without links to bookmarks, but in blue color and underlined.\n\nAny idea where I went wrong?\n\nPS: If I open that word document with MS word and export it as PDF manually, then the exported version is as it should be, with all the links in it, so the problem must be in use of ExportAsFixedFormat."
    },
    {
        "link": "https://ironsoftware.com/csharp/word/blog/compare-to-other-components/microsoft-office-interop-word-csharp-example-alternatives",
        "document": "Test in production without watermarks.\n\nWorks wherever you need it to."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word.document?view=word-pia",
        "document": "The Document object is a member of the Documents collection. The Documents collection contains all the Document objects that are currently open in Microsoft Word.\n\nUseDocuments ) where is the document name or index number to return a single Document object.\n\nThe index number represents the position of the document in the Documents collection.\n\nUse the ActiveDocument property to refer to the document with the focus.\n\nThis is a .NET interface derived from a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this derived interface to access all method, property, and event members of the COM object. However, if a method or event you want to use shares the same name under the same COM object, cast to the corresponding primary interface to call the method, and cast to the latest events interface to connect to the event. Refer to this topic for information about the COM object. For information about the method and property members of the COM object, see _Document. For information about the event members of the COM object, see DocumentEvents2_Event\n\nReturns the name of the active theme plus the theme formatting options for the specified document. (Inherited from _Document) Returns the display name of the active theme for the specified document. (Inherited from _Document) Returns or sets the writing style for a specified language in the specified document. (Inherited from _Document) Returns an Application object that represents the Microsoft Word application. (Inherited from _Document) Returns a Template object that represents the template attached to the specified document. (Inherited from _Document) Returns or sets a Boolean that represents whether automatic formatting options override formatting restrictions in a document where formatting restrictions are in effect. (Inherited from _Document) Determines if automatic hyphenation is turned on for the specified document. (Inherited from _Document) Returns a Shape object that represents the background image for the specified document. (Inherited from _Document) Returns a Bookmarks collection that represents all the bookmarks in a document. (Inherited from _Document) Returns a Broadcast object that represents a broadcast session, in which presenters can present Word documents to remote participants over the web without the participants needing to have rich clients installed. (Inherited from _Document) Returns a DocumentProperties collection that represents all the built-in document properties for the specified document. (Inherited from _Document) Returns a Characters collection that represents the characters in a document. (Inherited from _Document) Returns or sets a Boolean (bool in C#) that specifies whether charts in the active document use cell-reference data-point tracking. Read-write. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Returns or sets the default paragraph style applied to text by the Click and Type feature in the specified document. (Inherited from _Document) Returns a CoAuthoring object that provides an entry point to co-authoring-related object model in the document. (Inherited from _Document) Returns the code name for the specified document. (Inherited from _Document) Returns a CommandBars collection that represents the menu bar and all the toolbars in Microsoft Word. (Inherited from _Document) Returns a Comments collection that represents all the comments in the specified document. (Inherited from _Document) Determines if the specified compatibility option is enabled. (Inherited from _Document) Returns a long that specifies the compatibility mode that Word 2010 uses when opening the document. (Inherited from _Document) Returns or sets the maximum number of consecutive lines that can end with hyphens. (Inherited from _Document) Returns the object that represents the container application for the specified OLE object. (Inherited from _Document) Returns all of the content controls in a document. Read-only. (Inherited from _Document) Returns the metadata stored in a document, such as author name, subject, and company. Read-only. (Inherited from _Document) Returns a 32-bit integer that indicates the application in which the specified object was created. (Inherited from _Document) Returns a random number that Word assigns to changes in a document. Read-only. (Inherited from _Document) Returns a DocumentProperties collection that represents all the custom document properties for the specified document. (Inherited from _Document) Returns a CustomXMLParts#SameCHM collection that represents the custom XML in the XML data store. Read-only. (Inherited from _Document) Returns an Object that represents the table style that is applied to all newly created tables in a document. (Inherited from _Document) Returns or sets the interval (in points) between the default tab stops in the specified document. (Inherited from _Document) Returns or sets a String indicating the browser frame in which to display a Web page reached through a hyperlink. (Inherited from _Document) Determines if all features introduced after the version specified in the DisableFeaturesIntroducedAfter property are disabled. (Inherited from _Document) Disables all features introduced after a specified version of Microsoft Word in the document only. (Inherited from _Document) Returns a DocumentInspectors collection that enables you to locate hidden personal information, such as author name, company name, and revision date. Read-only. (Inherited from _Document) Returns a DocumentLibraryVersions collection that represents the collection of versions of a shared document that has versioning enabled and that is stored in a document library on a server. (Inherited from _Document) Returns an OfficeTheme object that represents the Microsoft Office theme applied to a document. Read-only. (Inherited from _Document) Returns an Email object that contains all the e-mail – related properties of the current document. (Inherited from _Document) Determines if Microsoft Word embeds speech and handwriting, stores East Asian IME keystrokes, and controls text service data received from devices. (Inherited from _Document) Determines if Microsoft Word saves the smart tag information in a document. (Inherited from _Document) ReturnsTrue if Microsoft Word embeds TrueType fonts in a document when it's saved. (Inherited from _Document) Returns a String specifying the name of the algorithm encryption provider that Microsoft Office Word uses when encrypting documents. Read/write. (Inherited from _Document) Returns an Endnotes collection that represents all the endnotes in a range, selection, or document. (Inherited from _Document) Returns or sets a Boolean that represents whether formatting restrictions are enforced in a protected document. (Inherited from _Document) Returns an Envelope object that represents envelope functionality and the envelope in the specified document. (Inherited from _Document) Returns or sets the East Asian language to use when breaking lines of text in the specified document or template. (Inherited from _Document) Returns or sets the line break control level for the specified document. (Inherited from _Document) Returns a read-only Fields collection that represents all the fields in the document, range, or selection. (Inherited from _Document) Returns or sets a Boolean that indicates whether a document is final. Read/write. (Inherited from _Document) Returns a Footnotes collection that represents all the footnotes in a range, selection, or document. (Inherited from _Document) Determines if Microsoft Word is to show clear formatting in the Styles and Formatting task pane. (Inherited from _Document) Returns or sets a WdShowFilter constant that represents the styles and formatting displayed in the Styles and Formatting task pane. (Inherited from _Document) Determines if Microsoft Word displays font formatting in the Styles and Formatting task pane. (Inherited from _Document) Returns or sets a Boolean that represents whether Microsoft Office Word shows the next heading level when the previous heading level is used. Read/write. (Inherited from _Document) Determines if Microsoft Word displays number formatting in the Styles and Formatting task pane. (Inherited from _Document) Determines if Microsoft Word displays paragraph formatting in the Styles and Formatting task pane. (Inherited from _Document) Returns or sets a Boolean that represents whether to show user-defined styles. Read/write. (Inherited from _Document) Returns a FormFields collection that represents all the form fields in the document, range, or selection. (Inherited from _Document) Returns True if the specified document is in form design mode. (Inherited from _Document) Returns a Frames collection that represents all the frames in a document, range, or selection. (Inherited from _Document) Returns a Frameset object that represents an entire frames page or a single frame on a frames page. (Inherited from _Document) Specifies the name of a document, template, or cascading style sheet, including the drive or Web path. (Inherited from _Document) Determines if a grammar check has been run on the specified range or document. (Inherited from _Document) Returns a ProofreadingErrors collection that represents the sentences that failed the grammar check on the specified document or range. (Inherited from _Document) Returns or sets the amount of horizontal space between the invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the specified document. (Inherited from _Document) Returns or sets the amount of vertical space between the invisible gridlines that Microsoft Word uses when you draw, move, and resize AutoShapes or East Asian characters in the specified document. (Inherited from _Document) Determines if Microsoft Word starts the character grid from the upper-left corner of the page. (Inherited from _Document) Returns or sets the point, relative to the left edge of the page, where you want the invisible grid for drawing, moving, and resizing AutoShapes or East Asian characters to begin in the specified document. (Inherited from _Document) Returns or sets the point, relative to the top of the page, where you want the invisible grid for drawing, moving, and resizing AutoShapes or East Asian characters to begin in the specified document. (Inherited from _Document) Returns or sets the interval at which Microsoft Word displays horizontal character gridlines in print layout view. (Inherited from _Document) Returns or sets the interval at which Microsoft Word displays vertical character gridlines in print layout view. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Returns True if a password is required to open the specified document. (Inherited from _Document) Determines if the specified document has a routing slip attached to it. (Inherited from _Document) Returns a Boolean that represents whether a document has an attached Microsoft Visual Basic for Applications project. Read-only. (Inherited from _Document) Returns an HTMLDivisions object that represents an HTML division in a Web document. (Inherited from _Document) Returns an HTMLProject object in the specified document that represents a top-level project branch, as in the Project Explorer of the Microsoft Script Editor. (Inherited from _Document) Returns a Hyperlinks collection that represents all the hyperlinks in the specified document, range, or selection. (Inherited from _Document) Determine if words in all capital letters can be hyphenated. (Inherited from _Document) Returns or sets the width of the hyphenation zone, in points. (Inherited from _Document) Returns an Indexes collection that represents all the indexes in the specified document. (Inherited from _Document) Returns an InlineShapes collection that represents all the InlineShape objects in a document, range, or selection. (Inherited from _Document) True if the most recent firing of the Application.DocumentBeforeSave Event (Word)event was the result of an automatic save, and not a manual save by the user. Read-only. (Inherited from _Document) Determines if the specified document is a master document. (Inherited from _Document) Determines if the specified document is opened in a separate document window as a subdocument of a master document. (Inherited from _Document) Returns or sets the character spacing adjustment for the specified document. (Inherited from _Document) Determines if Microsoft Word kerns half-width Latin characters and punctuation marks in the specified document. (Inherited from _Document) Returns or sets the format type that Microsoft Word uses when automatically formatting the specified document. (Inherited from _Document) Returns or sets a value that specifies whether Microsoft Word has detected the language of the specified text. (Inherited from _Document) Returns a ListParagraphs collection that represents all the numbered paragraphs in the document. (Inherited from _Document) Returns a Lists collection that contains all the formatted lists in the specified document. (Inherited from _Document) Returns a ListTemplates collection that represents all the list formats for the specified document. (Inherited from _Document) Returns or sets a Boolean that represents whether users can change which set of Quick Styles is being used. Read/write. (Inherited from _Document) Returns or sets a Boolean that represents whether a user can change a document theme. Read/write. (Inherited from _Document) Returns an MsoEnvelope object that represents an e-mail header for a document. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Returns a MailMerge object that represents the mail merge functionality for the specified document. (Inherited from _Document) Returns the name of the specified object. (Inherited from _Document) Returns or sets the kinsoku characters after which Microsoft Word will not break a line. (Inherited from _Document) Returns or sets the kinsoku characters before which Microsoft Word will not break a line. (Inherited from _Document) Returns or sets a WdOMathBreakBin enumeration value that represents where Microsoft Office Word places binary operators when equations span two or more lines. Read/write. (Inherited from _Document) Returns or sets a WdOMathBreakSub enumeration value that represents how Microsoft Office Word handles a subtraction operator that falls before a line break. Read/write. (Inherited from _Document) Returns the name of the font used in a document to display equations. Read/write. (Inherited from _Document) Returns or sets a Boolean that represents the default location of limits for integrals. Read/write. (Inherited from _Document) Returns or sets the default justification—left, right, centered, or centered as a group—of a group of equations. Read/write. (Inherited from _Document) Returns or sets the left margin for equations. Read/write. (Inherited from _Document) Returns or sets a Boolean that represents the default location of limits for -ary objects other than integrals. Read/write. (Inherited from _Document) Returns or sets the right margin for equations. Read/write. (Inherited from _Document) Returns the OMath objects within the specified range. Read-only. (Inherited from _Document) Returns or sets a Boolean that represents whether to use small fractions in equations contained within the document. Read/write. (Inherited from _Document) Returns the placement of the second line of an equation that wraps to a new line. Read/write. (Inherited from _Document) Returns the encoding used to open the specified document. (Inherited from _Document) Determines if Microsoft Word optimizes the current document for viewing in Word 97. (Inherited from _Document) Returns the document title for the original document after running a legal-blackline document compare function. Read-only. (Inherited from _Document) Returns a PageSetup object that's associated with the specified document. (Inherited from _Document) Returns a Paragraphs collection that represents all the paragraphs in the specified document. (Inherited from _Document) Returns an object that represents the parent object of the specified object. (Inherited from _Document) Sets a password that must be supplied to open the specified document. (Inherited from _Document) Returns a String indicating the algorithm Microsoft Word uses for encrypting documents with passwords. (Inherited from _Document) Returns an Integer indicating the key length of the algorithm Microsoft Word uses when encrypting documents with passwords. (Inherited from _Document) Returns the name of the algorithm encryption provider that Microsoft Word uses when encrypting documents with passwords. (Inherited from _Document) Returns the disk or Web path to the specified object. (Inherited from _Document) Returns a Permission object that represents the permission settings in the specified document. (Inherited from _Document) Determines if Microsoft Word prints onto a preprinted form only the data entered in the corresponding online form. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Determines if PRINT field instructions (such as PostScript commands) in a document are to be printed on top of text and graphics when a PostScript printer is used. (Inherited from _Document) Determines if revision marks are printed with the document. (Inherited from _Document) Returns the protection type for the specified document. (Inherited from _Document) Returns a ReadabilityStatistics collection that represents the readability statistics for the specified document. (Inherited from _Document) Returns or sets an Integer that represents the width of pages in a document when it is displayed in reading layout view and is frozen for entering handwritten markup. (Inherited from _Document) Returns or sets an Integer that represents the height of pages in a document when it is displayed in reading layout view and is frozen for entering handwritten markup. (Inherited from _Document) Sets or returns a Boolean that represents whether pages displayed in reading layout view are frozen to a specified size for inserting handwritten markup into a document. (Inherited from _Document) Determines if changes to the document cannot be saved to the original document. (Inherited from _Document) Determines if Word displays a message box whenever a user opens the document, suggesting that it be opened as read-only. (Inherited from _Document) Returns or sets a Boolean indicating whether a document stores the date and time metadata for tracked changes. (Inherited from _Document) Determines if Microsoft Word removes all user information from comments, revisions, and the Properties dialog box upon saving a document. (Inherited from _Document) Returns the document title for a revised document after running a legal-blackline document compare function. Read-only. (Inherited from _Document) Returns a Revisions collection that represents the tracked changes in the document or range. (Inherited from _Document) Determines if the specified document has been routed to the next recipient. (Inherited from _Document) Returns a RoutingSlip object that represents the routing slip information for the specified document. (Inherited from _Document) Determines if the specified document or template hasn't changed since it was last saved. (Inherited from _Document) Returns or sets the encoding to use when saving a document. (Inherited from _Document) Returns an Integer representing the file format of the specified document or file converter. (Inherited from _Document) Determines if Microsoft Word saves the data entered in a form as a tab-delimited record for use in a database. (Inherited from _Document) Determines if Microsoft Word saves a subset of the embedded TrueType fonts with the document. (Inherited from _Document) Returns a Scripts collection that represents the collection of HTML scripts in the specified object. (Inherited from _Document) Returns a Sections collection that represents the sections in the specified document. (Inherited from _Document) Returns a Sentences collection that represents all the sentences in the document. (Inherited from _Document) Returns the policy specified for a document stored on a server running Microsoft Office SharePoint Server 2007. Read-only. (Inherited from _Document) Returns a Shapes collection that represents all the Shape objects in the specified document. (Inherited from _Document) Returns a SharedWorkspace object that represents the Document Workspace in which a specified document is located. (Inherited from _Document) Determines if grammatical errors are marked by a wavy green line in the specified document. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Determines if Microsoft Word underlines spelling errors in the document. (Inherited from _Document) Determines if an automatic summary is displayed for the specified document. (Inherited from _Document) Returns a SignatureSet object that represents the digital signatures for a document. (Inherited from _Document) Returns a SmartDocument object that represents the settings for a smart document solution. (Inherited from _Document) Determines whether Microsoft Word creates an XML header containing smart tag information when a document containing smart tags is saved as HTML. (Inherited from _Document) Determines if AutoShapes or East Asian characters are automatically aligned with an invisible grid when they are drawn, moved, or resized in the specified document. (Inherited from _Document) Determines if Microsoft Word automatically aligns AutoShapes or East Asian characters with invisible gridlines that go through the vertical and horizontal edges of other AutoShapes or East Asian characters in the specified document. (Inherited from _Document) Determines if spelling has been checked throughout the specified range or document. (Inherited from _Document) Returns a ProofreadingErrors collection that represents the words identified as spelling errors in the specified document or range. (Inherited from _Document) Returns a StoryRanges collection that represents all the stories in the specified document. (Inherited from _Document) Returns a Styles collection for the specified document. (Inherited from _Document) Returns a StyleSheets object that represents the Web style sheets attached to a document. (Inherited from _Document) Returns or sets the sort method to use when sorting styles in the Styles task pane. Read/write. (Inherited from _Document) Returns a Subdocuments collection that represents all the subdocuments in the specified range or document. (Inherited from _Document) Returns or sets the length of the summary as a percentage of the document length. (Inherited from _Document) Returns or sets the way a summary is displayed. (Inherited from _Document) Returns a Tables collection that represents all the tables in the specified document. (Inherited from _Document) Returns a TablesOfAuthorities collection that represents the tables of authorities in the specified document. (Inherited from _Document) Returns a TablesOfAuthoritiesCategories collection that represents the available tables of authorities categories for the specified document. (Inherited from _Document) Returns a TablesOfContents collection that represents the tables of contents in the specified document. (Inherited from _Document) Returns a TablesOfFigures collection that represents the tables of figures in the specified document. (Inherited from _Document) Returns or sets the code page, or character set, that Microsoft Word uses for a document saved as an encoded text file. (Inherited from _Document) Returns or sets a WdLineEndingType constant indicating how Microsoft Word marks the line and paragraph breaks in documents saved as text files. (Inherited from _Document) Returns or sets a Boolean that represents whether to track formatting changes when change tracking is turned on. Read/write. (Inherited from _Document) Returns or sets aBoolean that represents whether to mark moved text when Track Changes is turned on. Read/write. (Inherited from _Document) Determines if changes are tracked in the specified document. (Inherited from _Document) Determines if the styles in the specified document are updated to match the styles in the attached template each time the document is opened. (Inherited from _Document) Returns or sets a Boolean that represents whether to use the default math settings when creating new equations. Read/write. (Inherited from _Document) Determines if the document or application was created or opened by the user. (Inherited from _Document) Returns a Variables collection that represents the variables stored in the specified document. (Inherited from _Document) Determines if the Visual Basic for Applications (VBA) project for the specified document has been digitally signed. (Inherited from _Document) Returns the VBProject object for the specified template or document. (Inherited from _Document) Returns a Versions collection that represents all the versions of the specified document. (Inherited from _Document) Returns the WebOptions object, which contains document-level attributes used by Microsoft Word when you save a document as a Web page or open a Web page. (Inherited from _Document) Returns a Windows collection that represents all windows for the specified document (for example, Sales.doc:1 and Sales.doc:2). (Inherited from _Document) Returns the flat XML format for the Word Open XML contents of the document. Read-only. (Inherited from _Document) Returns a Words collection that represents all the words in a document. (Inherited from _Document) Sets a password for saving changes to the specified document. (Inherited from _Document) Determines if the specified document is protected with a write password. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Returns or sets a String that specifies the path and file name for the Extensible Stylesheet Language Transformation (XSLT) to apply when a user saves a document. (Inherited from _Document) Returns an XMLSchemaReferences collection that represents the schemas attached to a document. (Inherited from _Document) This object, member, or enumeration is deprecated and is not intended to be used in your code. (Inherited from _Document) Returns or sets a Boolean that represents whether error message text is generated from the built-in Microsoft Word error messages or from the Microsoft XML Core Services (MSXML) 5.0 component included with Office. (Inherited from _Document) Returns a Boolean that represents whether to save a document through an Extensible Stylesheet Language Transformation (XSLT). (Inherited from _Document)"
    },
    {
        "link": "https://syncfusion.com/blogs/post/mail-merge-word-csharp-ultimate-guide",
        "document": "Today I am going to show you how to perform mail merge in C# using the Syncfusion .NET Word Library (Essential DocIO) without Microsoft Word or Office interop dependencies.\n\nSyncfusion’s .NET Word Library has powerful mail merge APIs to generate personalized reports like letters, invoice, payroll, and email content. It saves you effort and time by helping you automate the generation of personalized documents programmatically in C# and VB.NET. The resultant documents can be saved as Word documents (DOC, DOCX), PDFs, images, HTML, and more.\n\nIn this blog, we are going to learn how to perform mail merge in C# and use other mail merge features.\n• Mail merge in C# using Syncfusion mail merge API\n• Different ways to mail merge\n• Mail merge options\n• Start each record on a new page\n\nMail merge is a process of creating multiple documents with similar text, graphics, layout, and formatting by replacing the placeholder (merge fields) with specific information such as name, address, etc., from a data source into each Word document to create personalized, individual documents such as letters, labels, envelopes, or email messages.\n• Template Word document: This document contains the static, template text and graphics along with merge fields (that are placeholders) for replacing dynamic data from a data source.\n• Data source: This represents a file or database containing data to replace the merge fields in the template Word document.\n• Final merged document: This resultant document is a combination of the template Word document and the data from the data source. The mail merge process pulls the information from the data source and replaces the merge fields (placeholders) in your template Word document.\n\nMail merge in C# using Syncfusion mail merge API\n\nLet’s learn how to generate personalized letters step by step through the mail merge process on a Word document in C# using Syncfusion’s mail merge API.\n\nCreate a template Word document with merge fields for generating a personalized letter using any Word editors, like Microsoft Word. By using a Word editor application, you can take advantage of the visual interface to design a unique layout, formatting, and more for your letter template interactively.\n\nThis mail merge example uses the following template Word document.\n\nThe template document can be downloaded from LetterTemplate.docx.\n\nIf you want to replace a merge field with an image, then define the merge field name with the prefix “Image:”.\n\nFor example, the merge field name should be like: “Image:Photo” («Image:MergeFieldName»)\n\nYou can define how the merge field result should be displayed in your final report by adding necessary format switches in the merge field.\n\nThere are three types of switches:\n\nThe switch “\\* Upper” in the merge field FirstName displays the result in upper case as “FIRSTNAME”.\n\nThe switch “\\# $#,##0.00” in the merge field TotalSales displays the result as “$4,455.70”.\n\nStep 1: Create a new C# console application (.NET Core) project.\n\n Step 2: Install the Syncfusion.DocIO.Net.Core NuGet package as a reference to your console application (.NET Core) from NuGet.org.\n\nStep 3: Include the following namespace in the Program.cs file.\n\nAdd the following C# code in main method of the Program.cs file to generate personalized letters by performing mail merge in a Word document.\n\nStep 4: Open the template Word document in C# using the Syncfusion Word Library.\n\nStep 5: Prepare the data source to mail merge the Word template and generate the letter. Here, the string arrays load the data for mail merge.\n\nStep 6: Execute mail merge on the Word template and generate the final letter as a Word document.\n\nBy executing the application, you will get the output Word document as follows.\n\nA complete, working example can be downloaded from GitHub.\n\nThe Syncfusion mail merge API populates the template Word document with data from all the common data sources of .NET Framework:\n• It allows data as two string arrays, the first array holding the field names and second array holding the field values.\n• NET objects of type such as DataRow, DataSet, DataTable, DataView, DbConnection, IDataReader, and OleDbDataReader can be used to get data from several types of databases to be used for the mail merge process.\n• An IEnumerable collection holding .NET objects or dynamic objects can be used.\n• Easily load data from an XML or JSON file as ADO.NET objects or an IEnumerable collection of .NET objects and use it for the mail merge process.\n• Syncfusion has its own wrapper class, MailMergeDataTable, which holds the data using an IEnumerable collection, like DataTable. And MailMergeDataSet holds multiple MailMergeDataTable objects for performing a nested mail merge, like DataSet.\n\nDifferent ways to mail merge in C#\n\nLet’s see how to generate personalized reports using the Syncfusion mail merge API several ways.\n\nA simple mail merge replaces all the merge fields in the template document with data by repeating the whole document automatically for each record in the data source in a fraction of a second. It inserts the document contents at the end as a new section while repeating for next record in the data source. Executing mail merge for a whole document can be achieved by using the Execute method.\n\nCreate envelopes using mail merge in C#\n\nLet’s see how to create a batch of personalized envelopes for everyone in the mailing list.\n\nDesign your template Word document for an envelope with the required layout, formatting, graphics, and merge fields for personalized information using Microsoft Word. Prepare the mailing list as an IEnumerable collection and execute mail merge in C# using the Syncfusion mail merge API.\n\nThis mail merge example creates envelopes using the following template Word document.\n\nThe template document can be downloaded from Template.docx.\n\nThe following C# code example illustrates how to create envelopes for mailing using mail merge.\n\nRefer to the following C# code definition of the GetRecipients method, which provides data for mail merge.\n\nThe following C# code shows the Recipient class.\n\nA complete, working example can be downloaded from GitHub.\n\nGenerate multiple Word documents using mail merge in C#\n\nThe Syncfusion Word Library can mail merge the template Word document with all the records in the data source and generate the report as just one consolidated document. To generate individual documents for each record in your data source, execute mail merge multiple times. This can be done like this:\n• Loop through all records in the data source.\n• Mail merge the Word template for each record and save the document.\n\nThis mail merge example generates multiple Word documents using the following template Word document.\n\nThe template document can be downloaded from LetterTemplate.docx.\n\nThe following C# code example illustrates how to generate a personalized letter as an individual Word document for each record using mail merge.\n\nRefer to the following C# code definition of the GetRecipients method, which provides data for the mail merge. You can download the database from CustomerDetails.mdb.\n\nA complete, working example can be downloaded from GitHub.\n\nCreate and send email messages using mail merge in C#\n\nWith Syncfusion Word Library, you can create email messages by converting the mail merged document to HTML. You can send the merged document as emails, either inline or as a file attachment.\n\nThis mail merge example of creating and sending email messages uses the following template Word document.\n\nThe template document can be downloaded from Template.docx.\n\nThe following C# code example illustrates how to create personalized letters and send bulk email messages using mail merge.\n\nRefer to the following C# code definition of the GetRecipients method, which provides data for the mail merge. You can download the JSON file from CustomerDetails.json.\n\nThe following C# code example illustrates how to send an email message.\n\nA complete, working example can be downloaded from GitHub.\n\nGenerate barcode labels using mail merge in C#\n\nGenerate barcodes using the Syncfusion PDF Library and insert the generated barcode as an image into a Word document through a mail merge event. The MergeImageField event allows you to insert images from a file system, modify image data, and resize the merged images.\n\nThis mail merge example for generating barcode labels uses the following template Word document.\n\nThe template document can be downloaded from Template.docx.\n\nIn this template Word document, the NEXT field is inserted at the end of each cell. This field instructs Word library to merge the next record from the data source. You can view the NEXT field by opening this template document in the Microsoft Word application and pressing the Alt+F9 shortcut key to toggle field codes.\n\nThe following C# code example illustrates how to insert a barcode as an image through the MergeImageField event during mail merge.\n\nPlease refer to the following C# code definition of the GetDataTable method, which provides data for mail merge.\n\nPlease refer to the following C# code definition of the InsertBarcode method, which is assigned to the merge image field event handler.\n\nThe following C# code example illustrates how to generate a barcode and convert it to an image using the Syncfusion PDF Library. You can get more information from the documentation.\n\nNote: Install the Syncfusion.Pdf.WinForms NuGet package as a reference to your application from NuGet.org to use this barcode-related code.\n\nA complete, working example can be downloaded from GitHub.\n\nAlternatively, you can insert a barcode as text by applying barcode font for the merge fields at the Word template level. It automatically displays the merged data as barcode in the generated document.\n\nGroup mail merge replaces all the merge fields within a region in the template with data by repeating a region of the document automatically for each record in the data source. The merge fields with the following names represent the mail merge region or group:\n• «TableStart:TableName» and «BeginGroup:GroupName»: Denotes the entry point of the region.\n• «TableEnd:TableName» and «EndGroup:GroupName»: Denotes the end of the region.\n\nExecuting mail merge for a group or region in a Word document can be achieved by using the ExecuteGroup method.\n\nSyncfusion Excel Library (Essential XlsIO) allows you to import data from an Excel spreadsheet and use it for a mail merge. See the documentation for more information.\n\nThis example for group mail merge uses the following template Word document.\n\nThe template document for a stock market report example can be downloaded from Template.docx.\n\nThe following C# code example illustrates how to execute mail merge for a group in the Word document by importing data from an Excel spreadsheet.\n\nPlease refer to the following C# code definition of the GetData method, which provides data for mail merge. You can download the Excel spreadsheet from StockDetails.xlsx.\n\nNote: Install the Syncfusion.XlsIO.Net.Core NuGet package as a reference to your application from NuGet.org to use this Excel-related code.\n\nThe following C# code shows the StockDetail class.\n\nA complete, working example can be downloaded from GitHub.\n\nThe Syncfusion mail merge API by default uses merge fields with the prefixes BeginGroup and EndGroup to execute mail merges inside the document body, to repeat a region for each record. It uses merge fields with the prefixes TableStart and TableEnd to execute mail merges inside tables, to repeat a row group inside the table for each record.\n\nLet’s see a special requirement. Add each record as a new row inside the table when the row group contains only one cell, i.e. the merge fields denoting group start and end present inside the same cell.\n\nA behavior conflict! Either the next record will be added as a new row or inside the same cell. Every requirement is unique, so some require adding a new row and some require adding the record inside the same cell.\n\nNo worries, Syncfusion’s intuitive mail merge API allows you to switch between these behaviors through the InsertAsNewRow property. It adds the next record as a new row if this property is true; otherwise it adds the next record inside the same cell.\n\nConditional fields during mail merge in C#\n\nYou can use conditional fields (IF, Formula) combined with merge fields when you require intelligent decisions in addition to a simple mail merge (replace merge fields with result text).\n\nFor example, you can use the conditional IF fields in the mail merge document for inserting gender-specific pronouns such as he or she and his or her.\n\nThe following field syntax illustrates the structure of the IF field to display “He” or “She”, depending on the result of the nested merge field “Gender”.\n\nThe above stock market report example uses a formula field with nested merge fields in the template Word document to display profit and loss. The mail merge process replaces those merge fields with numeric data. Later, the formula field with a numeric expression can be updated using the update fields functionality of Syncfusion Word Library.\n\nThe following field syntax illustrates the structure of the formula field defined in the template Word document.\n\nMail merge for nested groups in C#\n\nMail merge for nested groups replaces all the merge fields within nested regions with relational (hierarchical) data by repeating nested regions of the document automatically for each record in the data source.\n\nExecuting mail merge for nested groups or regions in a Word document can be achieved by using the ExecuteNestedGroup method.\n\nSyncfusion Word Library provides an API to execute nested mail merge with relational data in two ways:\n• Using the internally nested structure of relational data (e.g., XML, JSON with nested elements).\n• Using multiple tables and commands to link data (table name and expression).\n\nThis example illustrates nested mail merge with an internally nested structure of relational data from an XML file. Refer to the documentation for more information about linking data for nested mail merge through commands.\n\nThis mail merge example for a nested group uses the following template Word document.\n\nThe template document can be downloaded from Template.docx.\n\nThe following C# code example illustrates how to execute mail merge for nested groups or regions in the Word document.\n\nPlease refer to the following C# code definition of the GetRelationalData method, which provides data for a mail merge. You can download the XML file from CustomerDetails.xml.\n\nA complete, working example can be downloaded from GitHub.\n\nUsing a mail merge event, you can format the merged text easily. Also, you can modify merged text, images, or other elements in the document through mail merge events.\n\nSyncfusion Word Library provides four mail merge events that facilitate several customizations in the mail merge document during the mail merge process:\n• BeforeClearGroupField: triggers before removing an unmerged group of merge fields.\n\nThis example of mail merge events uses the following template Word document.\n\nThe template document can be downloaded from Template.docx.\n\nThe following C# code example illustrates how to format the merged text using the MergeField event during mail merge. Also, it updates the image using the MergeImageField event.\n\nPlease refer to the following C# code definition of the GetData method, which provides data for the mail merge.\n\nThe following C# code illustrates how to format the merged text of alternate rows with different text colors.\n\nThe following C# code example shows how to update an image from the file system.\n\nA complete, working example can be downloaded from GitHub.\n\nStart each record on a new page\n\nIf you are required to generate reports, letters, invoices, or payrolls for each record on a new page of a Word document, you can enable the StartAtNewPage property. This will save you from the headache of formatting each page in a Word document manually.\n\nTo achieve this, design the template document with the corresponding group start and end mail merge fields present in the text body.\n\nFor example, you can see the Invoice group present in the body of the following template Word document.\n\nYou can download the example template document from Template.docx.\n\nThe following C# code example illustrates how to generate an invoice for each record on a new page during a mail merge.\n\nBy executing the previous code, we will get an output Word document like in the following screenshot.\n\nYou can download the complete working example from GitHub.\n\nThe Syncfusion mail merge API automatically maps the merge fields in the Word template with fields or columns in the data source by comparing their names (case-insensitive string comparison). In case there is a mismatch, you can add custom mapping through the MappedFields property. You can get details from the documentation.\n\nNow you may ask: is it possible to identify the mismatch programmatically?\n\nYes, there are APIs to retrieve the merge field names from the template Word document.\n• The merge field doesn’t have a mapping field or column in the data source.\n• The merge field has a mapping field or column in the data source, but the data is null or DBNull.Value or string.Empty.\n\nThe mail merge process removes the unmerged merge fields from the Word template. You can keep the unmerged merge fields in the generated document by setting the ClearFields property to false before the mail merge execution statement. For more details, refer to the documentation.\n\nA paragraph that contains only merge fields becomes empty when the mail merge process removes all its merge fields as unmerged. These empty paragraphs may add unwanted space and affect the look of the generated report. So these empty paragraphs can be removed along with their unmerged merge fields by setting the RemoveEmptyParagraphs property to true. Refer to the documentation for more information.\n\nA mail merge group becomes empty when there is no data available to replace the merge fields. The static contents (other than merge fields) present within a mail merge group may add unwanted contents and affect the look of the generated report. So, these empty mail merge groups can be removed by setting the RemoveEmptyGroup property to true.\n• Work without Microsoft Office: Syncfusion Word Library was built in C# from scratch and does not require Microsoft Word or Office interop dependencies\n• Create or design templates: You can easily create a template Word document with merge fields through the intuitive Document Object Model (API). Or design a template Word document with required layout, formatting, and graphics using Microsoft Word with placeholders, and replace the placeholders with merge fields using Syncfusion Word Library.\n• Achieve more with conditional fields: You can update conditional fields such as if expressions and formulas. With an if expression, you can add a conditional option in your template to display either of two values in the final report based on the merged data.\n• Use a complete mail merge solution: Syncfusion provides a complete solution for mail merge automation with an intuitive mail merge API; a high-performance Excel Library for importing data from an Excel spreadsheet; a Barcode control for creating barcodes from data, which you can then merge by converting them to images.\n• Save in supported file formats: You can save the resultant merged document in multiple file formats, like Word documents (DOC, DOCX), HTML, PDF, image, RTF, TXT, and ODT. You can email the merged documents as an email message using HTML format or as an attachment by saving them as Word or PDF.\n• Take advantage of platform independence: The same mail merge code works in any .NET Framework, .NET Core, Xamarin, or UWP application.\n• Enjoy a cost-effective and hassle-free license model: There are no distribution fees, per-server licensing fees, or royalties, making the Syncfusion mail merge and other word processing solutions very cost-effective.\n\nWhat if you aren’t a software developer, but need this mail merge solution for your organization? No worries! You can approach Syncfusion Solution Services to develop a solution for your requirements.\n\nAs you can see, Syncfusion Word Library facilitates a complete solution for all your mail merge requirements. You can use it to effectively generate personalized reports with high performance and process large amounts of data. Take a moment to peruse the documentation, where you’ll find other options and features, all with accompanying code examples. Using the library, you can create, edit, and merge Word documents, as well as convert them to PDF, image, HTML, RTF and more.\n\nIf you are new to our Word Library (Essential DocIO), it is highly recommended to check out our Getting Started guide.\n\nAre you already a Syncfusion user? You can download the product setup here. If you’re not yet a Syncfusion user, you can download a free, 30-day trial here.\n\nIf you have any questions or require clarification about these features, please let us know in the comments below. You can also contact us through our support forum, Direct-Trac, or Feedback Portal. We are happy to assist you!"
    },
    {
        "link": "https://ironsoftware.com/csharp/word/blog/using-ironword/csharp-convert-word-to-pdf-tutorial",
        "document": "Test in production without watermarks.\n\nWorks wherever you need it to."
    },
    {
        "link": "https://stackoverflow.com/questions/63343506/export-word-to-pdf-with-c-sharp-and-word-interop-dont-export-links-to-bookmarks",
        "document": "I have a program in C# where I create a report in .docx using Word Interop. This document is created perfectly with few \"headings\" with links to bookmarks on pages inside the document and then saved. Then I try to export it to pdf using ExportAsFixedFormat and the exported file includes those \"headings\" but without links to bookmarks, but in blue color and underlined.\n\nAny idea where I went wrong?\n\nPS: If I open that word document with MS word and export it as PDF manually, then the exported version is as it should be, with all the links in it, so the problem must be in use of ExportAsFixedFormat."
    },
    {
        "link": "https://stackoverflow.com/questions/607669/how-do-i-convert-word-files-to-pdf-programmatically",
        "document": "I have found several open-source/freeware programs that allow you to convert .doc files to .pdf files, but they're all of the application/printer driver variety, with no SDK attached.\n\nI have found several programs that do have an SDK allowing you to convert .doc files to .pdf files, but they're all of the proprietary type, $2,000 a license or thereabouts.\n\nDoes anyone know of any clean, inexpensive (preferably free) programmatic solution to my problem, using C# or VB.NET?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/answers/questions/1079839/how-to-convert-a-word-document-to-pdf-document-usi",
        "document": "Word: A family of Microsoft word processing software products for creating web, email, and print documents. Management: The act or process of organizing, handling, directing or controlling something."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word._document.exportasfixedformat?view=word-pia",
        "document": "Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\nThe path and file name name of the new PDF or XPS file.\n\nSpecifies whether the export range is the entire document, the current page, a range of text, or the current selection. the default is to export the entire document.\n\nSpecifies whether to copy IRM permissions to an XPS document if the source document has IRM protections. Default value is True.\n\nSpecifies whether to include extra data to help screen readers, for example information about the flow and logical organization of the content. Default value is True.\n\nSpecifies whether to include a bitmap of the text. Set this parameter to True when font licenses do not permit a font to be embedded in the PDF file. If False, the font is referenced, and the viewer's computer substitutes an appropriate font if the authored one is not available. Default value is True.\n\nSpecifies whether to limit PDF usage to the PDF subset standardized as ISO 19005-1. If True, the resulting files are more reliably self-contained but may be larger or show more visual artifacts due to the restrictions of the format. Default value is False.\n\nSpecifies a pointer to an add-in that allows calls to an alternate implementation of code. The alternate implementation of code interprets the EMF and EMF+ page descriptions that are generated by the applications to make their own PDF or XPS. For more information, see \"Extending the Office (2007) Fixed-Format Export Feature\" on MSDN.\n\nYou can save as a PDF or XPS file from a 2007 Microsoft Office system program only after you install an add-in. For more information, search for \"Enable support for other file formats, such as PDF and XPS\" on Office Online."
    }
]