[
    {
        "link": "https://firebase.google.com/docs/reference/admin/python",
        "document": "Save and categorize content based on your preferences."
    },
    {
        "link": "https://firebase.google.com/docs/admin/setup",
        "document": "Firebase is back at Cloud Next on April 9 - 11. Register now.\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nThe Admin SDK is a set of server libraries that lets you interact with Firebase from privileged environments to perform actions like:\n• Perform queries and mutations on a service for bulk data management and other operations with full admin privileges.\n• Programmatically send messages using a simple, alternative approach to the server protocols.\n• Access resources like buckets and databases associated with your Firebase projects.\n• Create your own simplified admin console to do things like look up user data or change a user's email address for authentication.\n\nIf you are interested in using the Node.js SDK as a client for end-user access (for example, in a Node.js desktop or IoT application), as opposed to admin access from a privileged environment (like a server), you should instead follow the instructions for setting up the client JavaScript SDK.\n\nHere is a feature matrix showing what Firebase features are supported in each language:\n\nTo learn more about Admin SDK integration for these uses, see the corresponding Realtime Database, FCM, Authentication, Remote Config, and Cloud Storage documentation. The rest of this page focuses on basic setup for the Admin SDK.\n• None Make sure that you have a server app.\n• None Make sure that your server runs the following depending on which Admin SDK that you use:\n\nTo use the Firebase Admin SDK, you'll need the following:\n• A Firebase Admin SDK service account to communicate with Firebase. This service account is created automatically when you create a Firebase project or add Firebase to a Google Cloud project.\n\nIf you don't already have a Firebase project, you need to create one in the Firebase console. Visit Understand Firebase Projects to learn more about Firebase projects.\n\nIf you are setting up a new project, you need to install the SDK for the language of your choice.\n\nThe Firebase Admin Node.js SDK is available on npm. If you don't already have a file, create one via . Next, install the npm package and save it to your : To use the module in your application, it from any JavaScript file: If you are using ES2015, you can the module: The Firebase Admin Java SDK is published to the Maven central repository. To install the library, declare it as a dependency in your file: If you use Maven to build your application, you can add the following dependency to your : The Firebase Admin Python SDK is available via pip. You can install the library for all users via : Or, you can install the library for just the current user by passing the flag: The Go Admin SDK can be installed using the utility: The .NET Admin SDK can be installed using the .NET package manager: Alternatively, install it using the command-line utility: Or, you can install it by adding the following package reference entry to your file:\n\nOnce you have created a Firebase project, you can initialize the SDK with Google Application Default Credentials. Because default credentials lookup is fully automated in Google environments, with no need to supply environment variables or other configuration, this way of initializing the SDK is strongly recommended for applications running in Google environments such as Cloud Run, App Engine, and Cloud Functions.\n\nTo optionally specify initialization options for services such as Realtime Database, Cloud Storage, or Cloud Functions, use the environment variable. If the content of the variable begins with a it will be parsed as a JSON object. Otherwise the SDK assumes that the string is the path of a JSON file containing the options.\n\nOnce it is initialized, you can use the Admin SDK to accomplish the following types of tasks:\n• Read and write data from the\n\nThe Admin SDK also provides a credential which allows you to authenticate with a Google OAuth2 refresh token:\n\nIf you are working in a non-Google server environment in which default credentials lookup can't be fully automated, you can initialize the SDK with an exported service account key file.\n\nFirebase projects support Google service accounts, which you can use to call Firebase server APIs from your app server or trusted environment. If you're developing code locally or deploying your application on-premises, you can use credentials obtained via this service account to authorize server requests.\n\nTo authenticate a service account and authorize it to access Firebase services, you must generate a private key file in JSON format.\n\nTo generate a private key file for your service account:\n• None Click Generate New Private Key, then confirm by clicking Generate Key.\n• None Securely store the JSON file containing the key.\n\nWhen authorizing via a service account, you have two choices for providing the credentials to your application. You can either set the environment variable, or you can explicitly pass the path to the service account key in code. The first option is more secure and is strongly recommended.\n\nSet the environment variable to the file path of the JSON file that contains your service account key. This variable only applies to your current shell session, so if you open a new session, set the variable again.\n\nAfter you've completed the above steps, Application Default Credentials (ADC) is able to implicitly determine your credentials, allowing you to use service account credentials when testing or running in non-Google environments.\n\nIn most cases, you only have to initialize a single, default app. You can access services off of that app in two equivalent ways:\n\nSome use cases require you to create multiple apps at the same time. For example, you might want to read data from the Realtime Database of one Firebase project and mint custom tokens for another project. Or you might want to authenticate two apps with separate credentials. The Firebase SDK allows you create multiple apps at the same time, each with their own configuration information.\n\nIf you're using a Google Compute Engine VM with Google Application Default Credentials for Realtime Database or Authentication, make sure to also set the right access scopes. For Realtime Database and Authentication, you need scopes ending in and either or . To check the existing access scopes and change them, run the following commands using gcloud.\n\nWhen testing the Admin SDK locally with Google Application Default Credentials obtained by running , additional changes are needed to use Firebase Authentication due to the following:\n• does not accept gcloud end user credentials generated using the gcloud OAuth client ID.\n• requires the project ID to be provided on initialization for these type of end user credentials.\n\nAs a workaround, you can generate Google Application Default Credentials in gcloud using your own OAuth 2.0 client ID. The OAuth client ID has to be a Desktop app application type.\n\nYou can specify the project ID explicitly on app initialization or just use the environment variable. The latter avoids the need to make any additional changes to test your code.\n\nTo explicitly specify the project ID:\n• None Explore the open source code in GitHub for Node.js, Java, and Python.\n• None Read Admin SDK-related blog posts by one of the creators of the Admin SDK. For example: Accessing Firestore and Firebase through a proxy server.\n• Store info with or blob data with ."
    },
    {
        "link": "https://stackoverflow.com/questions/66201983/how-to-initialize-firebase-admin-sdk-in-cloud-function-python",
        "document": "I found a similar question on here, but it was for JavaScript and I am using Python. I'm trying to use the Firebase-Admin SDK so I can verify Firebase Authentication id_tokens in my cloud function. In my requirements.txt I have included firebase-admin, and my main.py file looks like this:\n\nThere are probably other problems with the above code, but my main issue is I am getting the error \"in returnSQLresponse default_app = firebase_admin.initialize_app() NameError: name 'firebase_admin' is not defined\". How do I initialize the Firebase Admin SDK in Python so I can verify this token? I tried following the guide here: https://firebase.google.com/docs/auth/admin/verify-id-tokens#verify_id_tokens_using_the_firebase_admin_sdk. This guide lead me to where I am at now."
    },
    {
        "link": "https://cloud.google.com/identity-platform/docs/install-admin-sdk",
        "document": "Save and categorize content based on your preferences.\n\nThis document shows you how to install the Identity Platform Admin SDK. The Admin SDK lets you manage Identity Platform from a server environment, and perform administrator actions such as migrating users, setting custom claims, and configuring identity providers.\n\nTo use the Admin SDK, you need a server app running one of the following:\n\nThe following table lists the features supported by each SDK language:\n\nAdditionally, you'll need a service account and key for your project:\n• In the Google Cloud console, go to the Create service account page. Go to Create service account\n• In the Service account name field, enter a name. The Google Cloud console fills in the Service account ID field based on this name. In the Service account description field, enter a description. For example, .\n• Grant the Other > Identity Toolkit Admin role to the service account. To grant the role, find the Select a role list, then select Other > Identity Toolkit Admin. Note: The Role field affects which resources the service account can access in your project. You can revoke these roles or grant additional roles later.\n• Click Done to finish creating the service account. Do not close your browser window. You will use it in the next step.\n• In the Google Cloud console, click the email address for the service account that you created.\n• Click Add key, and then click Create new key.\n• Click Create. A JSON key file is downloaded to your computer.\n• Replace with a name for the service account.\n• Grant the IAM role to the service account:\n• : the name of the service account\n• : the project ID where you created the service account Note: The flag affects which resources the service account can access in your project. You can revoke these roles or grant additional roles later.\n• \n• : a name for the key file\n• : the name of the service account\n• : the project ID where you created the service account\n\nProvide authentication credentials to your application code by setting the environment variable . This variable applies only to your current shell session. If you want the variable to apply to future shell sessions, set the variable in your shell startup file, for example in the or file.\n\nThe Node.js Admin SDK is available on npm. If you don't already have a file, create one using . Next, install the npm package and save it to your : To use the module in your app, it from any JavaScript file: If you are using ES2015, you can the module instead: The Java Admin SDK is published to the Maven central repository. To install the library, declare it as a dependency in your file: If you use Maven to build your app, you can add the following dependency to your : The Python Admin SDK is available using pip. Use the utility to install the Go Admin SDK: Install the .NET Admin SDK using the .NET package manager: Alternatively, install it using the command-line utility: Or, you can install it by adding the following package reference entry to your file:\n\nAdd the following code to your server app to initialize the Admin SDK using the default credentials:\n\nYou can also manually specify a service account key file:\n\nTypically, you'll only want to initialize a single, default app. However, you can also create multiple app instances, each with its own configuration options and authentication state.\n\n// Initialize another app with a different config // Use the shorthand notation to retrieve the default app's services // Initialize another app with a different config // Use the shorthand notation to retrieve the default app's services // Use the otherApp variable to retrieve the other app's services # Initialize another app with a different config # Use the `app` argument to retrieve the other app's services // Initialize another app with a different config // Initialize another app with a different config // Use the shorthand notation to retrieve the default app's services // Use the otherApp variable to retrieve the other app's services\n\nIf you're using a Compute Engine VM with Google Application Default Credentials for authentication, you''ll need to set the right access scopes. Identity Platform requires the and access scopes.\n\nTo check your existing access scopes, run the following:\n\nThe command will return information about the service account. For example:\n\nTo update access scopes, stop the VM, then run the following:\n• View the source code and additional documentation for the Admin SDK on GitHub:"
    },
    {
        "link": "https://stackoverflow.com/questions/73590414/initializing-2-firebase-apps-in-python",
        "document": "As part of my project, I've made 2 different Firestore databases. Usually, when I work with 1, it sets up fine in my project file. Now that I'm implementing BOTH of them in my python file (running discord.py), it throws up an error! Here's the code for reference:\n\nIf I comment out the last 4 lines, it works fine, however, if I don't then the following error shows up:\n\nI understood I need to add another argument, and I even went over the official firebase-admin docs for the package, yet I don't know how to add the required argument as there is no mention of it in the documentation."
    },
    {
        "link": "https://firebase.google.com/docs/admin/setup",
        "document": "Firebase is back at Cloud Next on April 9 - 11. Register now.\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nThe Admin SDK is a set of server libraries that lets you interact with Firebase from privileged environments to perform actions like:\n• Perform queries and mutations on a service for bulk data management and other operations with full admin privileges.\n• Programmatically send messages using a simple, alternative approach to the server protocols.\n• Access resources like buckets and databases associated with your Firebase projects.\n• Create your own simplified admin console to do things like look up user data or change a user's email address for authentication.\n\nIf you are interested in using the Node.js SDK as a client for end-user access (for example, in a Node.js desktop or IoT application), as opposed to admin access from a privileged environment (like a server), you should instead follow the instructions for setting up the client JavaScript SDK.\n\nHere is a feature matrix showing what Firebase features are supported in each language:\n\nTo learn more about Admin SDK integration for these uses, see the corresponding Realtime Database, FCM, Authentication, Remote Config, and Cloud Storage documentation. The rest of this page focuses on basic setup for the Admin SDK.\n• None Make sure that you have a server app.\n• None Make sure that your server runs the following depending on which Admin SDK that you use:\n\nTo use the Firebase Admin SDK, you'll need the following:\n• A Firebase Admin SDK service account to communicate with Firebase. This service account is created automatically when you create a Firebase project or add Firebase to a Google Cloud project.\n\nIf you don't already have a Firebase project, you need to create one in the Firebase console. Visit Understand Firebase Projects to learn more about Firebase projects.\n\nIf you are setting up a new project, you need to install the SDK for the language of your choice.\n\nThe Firebase Admin Node.js SDK is available on npm. If you don't already have a file, create one via . Next, install the npm package and save it to your : To use the module in your application, it from any JavaScript file: If you are using ES2015, you can the module: The Firebase Admin Java SDK is published to the Maven central repository. To install the library, declare it as a dependency in your file: If you use Maven to build your application, you can add the following dependency to your : The Firebase Admin Python SDK is available via pip. You can install the library for all users via : Or, you can install the library for just the current user by passing the flag: The Go Admin SDK can be installed using the utility: The .NET Admin SDK can be installed using the .NET package manager: Alternatively, install it using the command-line utility: Or, you can install it by adding the following package reference entry to your file:\n\nOnce you have created a Firebase project, you can initialize the SDK with Google Application Default Credentials. Because default credentials lookup is fully automated in Google environments, with no need to supply environment variables or other configuration, this way of initializing the SDK is strongly recommended for applications running in Google environments such as Cloud Run, App Engine, and Cloud Functions.\n\nTo optionally specify initialization options for services such as Realtime Database, Cloud Storage, or Cloud Functions, use the environment variable. If the content of the variable begins with a it will be parsed as a JSON object. Otherwise the SDK assumes that the string is the path of a JSON file containing the options.\n\nOnce it is initialized, you can use the Admin SDK to accomplish the following types of tasks:\n• Read and write data from the\n\nThe Admin SDK also provides a credential which allows you to authenticate with a Google OAuth2 refresh token:\n\nIf you are working in a non-Google server environment in which default credentials lookup can't be fully automated, you can initialize the SDK with an exported service account key file.\n\nFirebase projects support Google service accounts, which you can use to call Firebase server APIs from your app server or trusted environment. If you're developing code locally or deploying your application on-premises, you can use credentials obtained via this service account to authorize server requests.\n\nTo authenticate a service account and authorize it to access Firebase services, you must generate a private key file in JSON format.\n\nTo generate a private key file for your service account:\n• None Click Generate New Private Key, then confirm by clicking Generate Key.\n• None Securely store the JSON file containing the key.\n\nWhen authorizing via a service account, you have two choices for providing the credentials to your application. You can either set the environment variable, or you can explicitly pass the path to the service account key in code. The first option is more secure and is strongly recommended.\n\nSet the environment variable to the file path of the JSON file that contains your service account key. This variable only applies to your current shell session, so if you open a new session, set the variable again.\n\nAfter you've completed the above steps, Application Default Credentials (ADC) is able to implicitly determine your credentials, allowing you to use service account credentials when testing or running in non-Google environments.\n\nIn most cases, you only have to initialize a single, default app. You can access services off of that app in two equivalent ways:\n\nSome use cases require you to create multiple apps at the same time. For example, you might want to read data from the Realtime Database of one Firebase project and mint custom tokens for another project. Or you might want to authenticate two apps with separate credentials. The Firebase SDK allows you create multiple apps at the same time, each with their own configuration information.\n\nIf you're using a Google Compute Engine VM with Google Application Default Credentials for Realtime Database or Authentication, make sure to also set the right access scopes. For Realtime Database and Authentication, you need scopes ending in and either or . To check the existing access scopes and change them, run the following commands using gcloud.\n\nWhen testing the Admin SDK locally with Google Application Default Credentials obtained by running , additional changes are needed to use Firebase Authentication due to the following:\n• does not accept gcloud end user credentials generated using the gcloud OAuth client ID.\n• requires the project ID to be provided on initialization for these type of end user credentials.\n\nAs a workaround, you can generate Google Application Default Credentials in gcloud using your own OAuth 2.0 client ID. The OAuth client ID has to be a Desktop app application type.\n\nYou can specify the project ID explicitly on app initialization or just use the environment variable. The latter avoids the need to make any additional changes to test your code.\n\nTo explicitly specify the project ID:\n• None Explore the open source code in GitHub for Node.js, Java, and Python.\n• None Read Admin SDK-related blog posts by one of the creators of the Admin SDK. For example: Accessing Firestore and Firebase through a proxy server.\n• Store info with or blob data with ."
    },
    {
        "link": "https://firebase.google.com/support/guides/service-accounts",
        "document": "Save and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nFirebase uses service accounts to operate and manage services without sharing user credentials. When you create a Firebase project or add Firebase to an existing Google Cloud project, you might notice that a couple service accounts are already available in your Firebase project.\n\nYou might also notice that new service accounts are added to your Firebase project when you start using services or perform certain actions (for example, linking a Firebase product to BigQuery). Some of these service accounts are added directly by Firebase; others are added by the Google Cloud project associated with your Firebase project.\n\nYou can view all service accounts for your project in the Service accounts tab of your settings > Project Settings in the Firebase console.\n\nHere is the list of Firebase-related service accounts:\n\nWhen account is added to project To manage and link Firebase services to projects (required for all Firebase projects) Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project Note: Some Firebase projects don't contain this service account. In case it's missing, a developer can manually add this service account to their project as \"Firebase Service Management Service Agent\" ( ) in the console. To provide credentials for the Firebase Admin SDK Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project To build, run, and monitor your app. It also has permission to authenticate the Admin SDK with Application Default Credentials, for performing operations like loading data from Cloud Firestore. Learn more about this service account. Added at the time of enabling Firebase App Hosting (as of 2020) Added at the time of enabling the Cloud Functions API in the project (legacy) Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project Might have already existed for some Google Cloud projects before adding Firebase to the project. To manage access via for (as of 2021) Added at the time of provisioning the project's first Cloud Firestore instance (legacy) Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project To manage resources associated with : (as of 2021) Added at the time of provisioning the project's App Engine app (legacy) Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project Might have already existed for some Google Cloud projects before adding Firebase to the project. Added at the time of provisioning the project's first Cloud Storage for Firebase bucket / importing an existing Cloud Storage bucket into Firebase In 2022, this service account was added to all existing projects that had a Cloud Storage for Firebase bucket. See the FAQ. Added at the time of linking any Firebase product to Added at the time of linking any Firebase product to To export data to using streaming export Added at the time of enabling streaming export to Added at the time of linking any Firebase product to Added at the time of linking any Firebase product to To import data into from any Firebase product (that is, , , , and ) Added at the time of linking any Firebase product to To manage installation of and to run a Firebase extension Added at the time of installing an extension (each extension instance has its own service account) Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project Might have already existed for some Google Cloud projects before adding Firebase to the project. (deprecated)\n\n To manage and link Firebase services to projects Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project As of 2022, the service account is no longer added to new projects. See the FAQ. Added at the time of creating a Firebase project / adding Firebase services to an existing Google Cloud project"
    },
    {
        "link": "https://cloud.google.com/iam/docs/keys-create-delete",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nThis page explains how to create and delete service account keys using the Google Cloud console, the Google Cloud CLI, the Identity and Access Management API, or one of the Google Cloud Client Libraries.\n\nNote: If you need to access resources from a workload that runs outside of Google Cloud, such as on Amazon Web Services (AWS) or Microsoft Azure, consider using Workload Identity Federation instead of service account keys. Federation lets your workloads access resources directly, using a short-lived access token, and eliminates the maintenance and security burden associated with service account keys.\n• Select the tab for how you plan to use the samples on this page: When you use the Google Cloud console to access Google Cloud services and APIs, you don't need to set up authentication. At the bottom of the Google Cloud console, a Cloud Shell session starts and displays a command-line prompt. Cloud Shell is a shell environment with the Google Cloud CLI already installed and with values already set for your current project. It can take a few seconds for the session to initialize. To use the .NET samples on this page in a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.\n• If you're using an external identity provider (IdP), you must first sign in to the gcloud CLI with your federated identity.\n• To initialize the gcloud CLI, run the following command:\n• If you're using a local shell, then create local authentication credentials for your user account: You don't need to do this if you're using Cloud Shell. If an authentication error is returned, and you are using an external identity provider (IdP), confirm that you have signed in to the gcloud CLI with your federated identity. For more information, see Set up ADC for a local development environment in the Google Cloud authentication documentation. To use the C++ samples on this page in a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.\n• If you're using an external identity provider (IdP), you must first sign in to the gcloud CLI with your federated identity.\n• To initialize the gcloud CLI, run the following command:\n• If you're using a local shell, then create local authentication credentials for your user account: You don't need to do this if you're using Cloud Shell. If an authentication error is returned, and you are using an external identity provider (IdP), confirm that you have signed in to the gcloud CLI with your federated identity. For more information, see Set up ADC for a local development environment in the Google Cloud authentication documentation. To use the Go samples on this page in a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.\n• If you're using an external identity provider (IdP), you must first sign in to the gcloud CLI with your federated identity.\n• To initialize the gcloud CLI, run the following command:\n• If you're using a local shell, then create local authentication credentials for your user account: You don't need to do this if you're using Cloud Shell. If an authentication error is returned, and you are using an external identity provider (IdP), confirm that you have signed in to the gcloud CLI with your federated identity. For more information, see Set up ADC for a local development environment in the Google Cloud authentication documentation. To use the Java samples on this page in a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.\n• If you're using an external identity provider (IdP), you must first sign in to the gcloud CLI with your federated identity.\n• To initialize the gcloud CLI, run the following command:\n• If you're using a local shell, then create local authentication credentials for your user account: You don't need to do this if you're using Cloud Shell. If an authentication error is returned, and you are using an external identity provider (IdP), confirm that you have signed in to the gcloud CLI with your federated identity. For more information, see Set up ADC for a local development environment in the Google Cloud authentication documentation. To use the Python samples on this page in a local development environment, install and initialize the gcloud CLI, and then set up Application Default Credentials with your user credentials.\n• If you're using an external identity provider (IdP), you must first sign in to the gcloud CLI with your federated identity.\n• To initialize the gcloud CLI, run the following command:\n• If you're using a local shell, then create local authentication credentials for your user account: You don't need to do this if you're using Cloud Shell. If an authentication error is returned, and you are using an external identity provider (IdP), confirm that you have signed in to the gcloud CLI with your federated identity. For more information, see Set up ADC for a local development environment in the Google Cloud authentication documentation. To use the REST API samples on this page in a local development environment, you use the credentials you provide to the gcloud CLI. After installing the Google Cloud CLI, initialize it by running the following command: If you're using an external identity provider (IdP), you must first sign in to the gcloud CLI with your federated identity. For more information, see Authenticate for using REST in the Google Cloud authentication documentation.\n\nTo get the permissions that you need to create and delete service account keys, ask your administrator to grant you the Service Account Key Admin ( ) IAM role on the project, or the service account whose keys you want to manage. For more information about granting roles, see Manage access to projects, folders, and organizations.\n\nYou might also be able to get the required permissions through custom roles or other predefined roles.\n\nFor more information, see Service Accounts roles.\n\nDepending on your organization policy configuration, you might also need to allow service account keys to be created in your project before creating a key.\n\nTo get the permissions that you need to allow service account keys to be created in a project, ask your administrator to grant you the following IAM roles on your organization:\n\nFor more information about granting roles, see Manage access to projects, folders, and organizations.\n\nThese predefined roles contain the permissions required to allow service account keys to be created in a project. To see the exact permissions that are required, expand the Required permissions section:\n\nYou might also be able to get these permissions with custom roles or other predefined roles.\n\nBefore you create a service account key, make sure that the organization policy constraint isn't enforced for your project. If this constraint is enforced for your project, you can't create service account keys in that project.\n\nNote: If your organization was created on or after May 3, 2024, this constraint is enforced by default.\n\nWe recommend enforcing this constraint for most projects and only exempting projects that truly require service account keys. For more information about alternative authentication methods, see Choose the right authentication method for your use case.\n\nTo exempt a project from the organization policy constraint, ask an organization policy administrator to do the following:\n• At the organization level, create a tag key and tag value that you will use to define whether a resource should be exempt from the organization policy. We recommend creating a tag with the key and the values and . To learn how to create tag keys and tag values, see Creating and defining a new tag.\n• Attach the tag to the organization and set its value to . All resources in the organization inherit this tag value, unless it's overwritten with a different tag value. To learn how to attach tags to resources, see Attaching tags to resources.\n• For each project or folder that you want to exempt from the organization policy, attach the tag and set its value to . Setting a tag value for a project or folder in this way overrides the tag value inherited from the organization.\n• Create or update the organization policy that prevents the creation of service account keys so that it doesn't enforce the constraint for exempt resources. This policy should have the following rules:\n• Configure the constraint to not be enforced on any resources with the tag. The condition in this rule should look like the following:\n• Configure the constraint to be enforced on all other resources.\n\nTo use a service account from outside of Google Cloud, such as on other platforms or on-premises, you must first establish the identity of the service account. Public/private key pairs provide a secure way of accomplishing this goal. When you create a service account key, the public portion is stored on Google Cloud, while the private portion is available only to you. For more information about public/private key pairs, see Service account keys.\n\nYou can create a service account key using the Google Cloud console, the gcloud CLI, the method, or one of the client libraries. A service account can have up to 10 keys.\n\nBy default, service account keys never expire. You can use an organization policy constraint to specify the length of time for which a service account key is valid. For details, see Expiry times for user-managed keys.\n\nIn the examples below, is the name of your service account, and is the ID of your Google Cloud project. You can retrieve the string from the Service Accounts page in the Google Cloud console.\n\nDeleting a service account key permanently prevents you from using the key to authenticate with Google APIs.\n\nYou cannot undelete a deleted key. Before you delete a key, we recommend that you disable the key, then wait until you are sure that the key is no longer needed. You can then delete the key.\n\nAs a best practice, rotate your service account keys regularly. To learn more about rotating service account keys, see Service account key rotation.\n• Learn how to list and get service account keys.\n• Learn how to upload your own public service account keys.\n• Understand the best practices for managing service account keys.\n• Learn about alternatives to service account keys for authentication."
    },
    {
        "link": "https://freecodecamp.org/news/how-to-get-started-with-firebase-using-python",
        "document": "This article a detailed guide that'll help you set up your Firebase database and perform simple CRUD operations on it using Python.\n\nFirebase, as you might know, is a platform provided by Google to accelerate app development. It offers BaaS or backend as a service, which means that Firebase takes care of cloud infrastructure and all your backend needs. This lets you develop and deploy faster.\n\nFirebase offers several amazing products, such as Realtime Database, Cloud Firestore, and Authentication. And it also allows hosting and offers API's for machine learning tasks like text recognition, image labelling and so much more!\n\nHead over to their site linked here and drool over the wonderful options available.\n\nHow to Set Up a Firebase Realtime Database\n\nCreate a new project on Firebase – let's name it BookStoreProject. Once it has been set up, create a Realtime Database by selecting the Create Database option.\n\nWhen you click on Create Database, you have to specify the location of the database and the security rules. Two rules are available:\n• locked mode, which denies all reads and writes to the database, and\n• test mode, which allows read and write access for a default 30 days (after which all read and writes are denied unless the security rules get updated).\n\nSince we will be using the database for read, write, and edit, we choose test mode. Once that is done, the database is all ready for our usage!\n\nHow to Write to Firebase Realtime Database Using Python\n\nThe immediate next step is to find out how we can connect to our database using Python. We are going to use the Admin Database API. You'll need to install the required library.\n\nFor more information on using for Python, check out the official docs linked here.\n\nTo connect to Firebase, we need the following lines of code:\n\nTo make the code work however, we need some prerequisites.\n\nFirst, we need to specify the path to a Service Account key that will be used for initializing the admin SDK.\n\nFirebase will allow access to Firebase server APIs from Google Service Accounts. To authenticate the Service Account, we require a private key in JSON format.\n\nThe path to this JSON file must be provided to create the credentials object. To generate the key, go to project settings, click Generate new private key, download the file, and place it in your directory structure.\n\nFor an in-depth explanation of this process, refer to the official docs linked here.\n\nNext, we need the databaseURL, which is simply the URL that gives access to our database. It is present on the Realtime Database Firebase Console page itself.\n\nHow to Write Using the set() Function\n\nWe set the reference to the root of the database (or we could also set it to a key value or child key value). The question that naturally arises is what schema is allowed for storing data in Realtime databases?\n\nAll data to be stored must be in JSON format, that is, a sequence of key value pairs. If you need a system generated key, you could opt for using the function which we'll cover shortly.\n\nLet's construct a suitable JSON which can be saved in the database. We have information regarding four books as follows:\n\nWe load the required JSON file and save data to the database like this:\n\nThe database now looks like this:\n\nHow to Write Using the push() Function\n\nFirebase provides us with the function that saves data under a unique system generated key. This method ensures that if multiple writes are being performed to the same key, they do not overwrite themselves.\n\nFor example, if multiple sources try to make a write at /Books/Best_Sellers/ then whichever source makes the last write, that value will persist in the database. This introduces the possibility that data will be overwritten. solves this issue by using unique keys for each new child that's added.\n\nPlease note that and aren't atomic. This means that there is no guarantee that both functions will execute together without interruption as a single indivisible unit.\n\nWhilst the database is being updated, if we try to fetch the data, it may happen that has finished but hasn't – so the JSON we receive will have a system generated key without a value field.\n\nUpdating the database is as simple as setting the reference at the required point and using the function. Let's say that the price of the books by J. R. R. Tolkien is reduced to 80 units to offer a discount.\n\nHow to Retrieve Data from Firebase Using Python\n\nWe have already retrieved data using the method when we were trying to update a particular key. Now we'll see a few more methods and club them together to make complex queries.\n\nLet's get all books in order sorted by price using the method. To apply this method, we have to first set the key by which we are ordering as the index field via rule in Firebase Security rules.\n\nIf we want to sort by price, then price must be listed as the index. You can set the value like this:\n\nGo to Rules tab and type in the schema structure at which you want to set the index\n\nThe return value of the method is an OrderedDict. To order by key, use . To get the book with maximum price, we use the method as follows:\n\nAlternatively, to get the least priced book, we write this:\n\nTo get books that are exactly priced at 80 units, we use this:\n\nFor more examples and methods to query the database as per your requirements, check out the official documentation here.\n\nHow to Delete Data from Firebase Using Python\n\nDeleting data is pretty simple. Let's delete all best seller books with J.R.R. Tolkien as the author.\n\nIn this post, we learned how to create a Firebase Realtime database, populate it with data, and delete, update and query the data using Python.\n\nI hope this helps a Python developer out there who's just discovered the beauty of Firebase but is feeling overwhelmed with so many different options and methods to choose from. If you've read this far, thank you so much! Take care, and happy coding!"
    },
    {
        "link": "https://clemfournier.medium.com/how-to-get-my-firebase-service-account-key-file-f0ec97a21620",
        "document": "HOW TO GET THE FILE\n\nIn order to get this file, let’s go to your Firebase projects page, then select your project and as shown below, go to your Project Settings.\n\nClick on the Service accounts tab, then Generate new private key.\n\nA file named <your-project>-firebase-adminsdk-<first-numbers-of your-key>.json get generated, and it is your ServiceAccount.json file! Rename it (or change the path) and you’re ready to go.\n\n⚠️ Your file can be generated only 1 time, if you create a new key, it will be a different one. Although, your previous key/file will still working until you decide to delete it (click on Manage service account permissions)."
    }
]