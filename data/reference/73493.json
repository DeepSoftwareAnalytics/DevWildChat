[
    {
        "link": "https://man7.org/linux/man-pages/man1/date.1.html",
        "document": "Pages that refer to this page: cronnext(1), dir(1), gawk(1), locale(1), ls(1), pmdashping(1), pmdate(1), timedatectl(1), vdir(1), clock_getres(2), gettimeofday(2), stime(2), time(2), ctime(3), difftime(3), posix_spawn(3), strftime(3), tzset(3), rtc(4), crontab(5), locale(5), utmp(5), lvmreport(7), time(7), hwclock(8), rtcwake(8)"
    },
    {
        "link": "https://baeldung.com/linux/date-command",
        "document": "When we work in the Linux command-line or write shell scripts, we often need to handle date and time values, such as outputting a date in our required formats, getting a relative date-time, or changing the system date and time.\n\nIn this tutorial, we’ll take a closer look at the date utility and learn its common usage.\n\nThe date command is preinstalled by default in all Linux distros since it’s part of the GNU coreutils package.\n\nThe syntax of using the date command is:\n\nIf we don’t give any options, the date command will print the current system date and time, including the day of the week, month, time, year and timezone:\n\nHowever, if we pass different options, the date command can do more than that.\n\nSome common usages of the date command are:\n• display the current date and time from a given timezone\n• display the date and time in the required format\n• display the date and time from a given string\n\nLet’s go through some examples to learn how to handle each of these.\n\nThe date command will output the date and time in the timezone defined in our system.\n\nUTC is a special timezone. The date command supports the option -u to display the date and time in UTC:\n\nThe date command will, by default, use the timezone defined by /etc/localtime. The /etc/localtime file is usually a symbolic link pointing to a timezone file:\n\nSometimes, we want to know the date and time in another timezone. We can set the environment variable TZ to override the timezone setting for the date command:\n\nWe can assign the TZ variable with a timezone abbreviation, such as the EST in the example above, or a name in the timezone database:\n\nThe changed environment variable TZ is only for the following date command. The system timezone retains the original value:\n\n4. Display Date and Time in Various Formats\n\nThe date command supports many display formatting options. We can pass the required format to date:\n\nLet’s see a couple of examples of changing the date format:\n\nSome commonly used formats are:\n• %A – locale’s full weekday name (for example, Sunday)\n• %y – last two digits of the year (00..99)\n\nWe can find the full list of supported format sequences on the man page or the output of date –help.\n\nBy default, the date command doesn’t support displaying a date and time in milliseconds. However, the date command supports the nanoseconds format %N. For example, we can get the nanoseconds of the current time:\n\nIf we round the nanoseconds to ​the first three digits, we’ll have the milliseconds:\n\nWe can combine the “%3N” format with other formats to display a date and time with milliseconds.\n\nLet’s get the milliseconds since 1970-01-01 00:00:00 UTC:\n\nWe can also display the current date and time in milliseconds:\n\nWe can pass a static date or time string value together with the -d option to the date command and let it parse and print the date and time in our required format.\n\nFor example, we can pass a date string to indicate 18 Nov 1976 18:18:18 to the date command in several ways:\n\nFrom the examples above, we see that the date string pattern supported by the date command is pretty flexible. It can be a Unix timestamp following a @, an ISO date format, or even a human-readable date string.\n\nIn the previous section, we’ve seen how flexible the date string for the -d option can be. In this section, we’ll continue using -d’dateString’ to let the date command calculate a relative date and time in the past or future.\n\nFurthermore, all examples of relative date calculation will be based on the current date and time:\n\nLet’s start with getting one day before and after the current date. It is pretty straightforward, we just pass yesterday and tomorrow with the -d option:\n\n6.2. next, ago and last\n\nPassing yesterday or tomorrow with the -d option is helpful for us to get one single day before and after the base date.\n\nBut what if we want to get an arbitrary number of days before and after? Or even in other units, such as weeks, months, years and so on?\n\nThe next, ago, and last expressions can help us with that:\n\nIn addition to those human-readable date strings such as next and last, we can also pass a number with a unit to the -d option. A positive number will get a date-time in the future, while, a negative number indicates a date-time in the past:\n\nThis makes it easy to calculate relative date-time programmatically, for example, in a shell script.\n\nSo far, we’ve seen some examples of getting a relative date and time based on the current date-time. They’ll work for a given date string as well.\n\nLet’s see some examples of getting relative date-time based on 1976-11-18:\n\nWe can use the date command with the -s option to change the system clock manually. Since changing the system time will affect current running programs, only the root user is allowed to do that change.\n\nFor example, the next command will set our system time to 1976-11-18 18:18:18 :\n\nNow, let’s discuss how to see the current month’s name in Linux.\n\nWe can use the date command to display the name of the current month:\n\nAdditionally, using the locale settings, we can display the month’s name in different languages.\n\nFirst, we check the default locale settings:\n\nThe output shows a list of locales that are available in our system. Let’s understand the output:\n\nTherefore, the output en_GB.utf8 denotes the English language used in Great Britain.\n\nFurthermore, let’s say we want to see the current month in French. In such a case, we need to open and edit the locale.gen file:\n\nHere, we need to uncomment the line with fr_FR.UTF-8. After editing, we save the file and exit from the text editor.\n\nFinally, let’s display the name of the current month in French using the date command:\n\nSimilarly, we can use different language codes to change the output language.\n\nThe date command is a very convenient utility for handling date, time and month values.\n\nIn this article, we’ve focused on and explored its common, practical usage."
    },
    {
        "link": "https://redhat.com/en/blog/formatting-date-command",
        "document": "The command is simple. However, it has several useful options that enhance it. It's also capable of giving you practical information about past or future dates. This article shows you some of the format controls to manipulate the command's output. At the end of the article, I offer some practical suggestions about how you can use this command in conjunction with common tasks.\n\nThe most basic syntax for the command is simply to type in the command with no options and no format controls. Here is an example of the command and its resulting output:\n\nOne modification for the command is the option. This option converts the output to Coordinated Universal Time (UTC). Here is an example:\n\n[ You might also enjoy: Using at for single-use cron jobs in Linux ]\n\nThe real customization of the command occurs when you start adding format controls. The controls can order output fields, manage abbreviations, set the format of the date on the screen or in a file, etc. At the end of the article, I show some examples of how you might use , and you'll see how controlling the format is useful.\n\nUse one or more format controls to display information. Here is the general syntax:\n\nLet's look at a few examples.\n\nIf you want the output labeled, you can use this format:\n\nChange the order of the fields\n\nYou can alter the order in which the fields are displayed. This is one of the most useful customizations of because it allows you to display the output in whatever format is most useful or familiar to you. Here is one way to do it:\n\nHere is another example:\n\nThis example reverses the results:\n\nUse dashes, slashes, or spaces between the fields\n\nMaybe you need to format the output to meet particular standards, such as date information separated by dash, slash, or space characters. Here are a couple of different examples:\n\nDisplay information from outside my current locale or time zone\n\nIt's embarrassing to say, but for whatever reason, time zones completely mess with my mind. They always have and they probably always will. That's why I was excited to discover that the command can save me from having to visualize the sun's position over a particular geographical location to figure out the appropriate time zone.\n\nFirst, you must know the name of the time zone you wish to check. You can use the command to display this information.\n\nNext, combine the TZ value with the command to display the time zone's time and date information. To show the time on the east coast of the US, run this command:\n\nRun the following command to display the time in Tokyo:\n\nWhat if you're coordinating a meeting with someone on the east coast of the US, and you want to confirm or display a particular future time? You can use the command to display that information.\n\nFirst, you could display the date and time information for next Friday:\n\nHere is an example that displays the local time for 10 AM next Friday on the east coast of the US:\n\nYou can also use to display past information.\n\n\n\n This example shows time and date information from 15 days ago:\n\nIt's one thing to know these tricks when using the command, but it's another to understand how to apply them. Here are a few straightforward scenarios to get you thinking about your own tasks where might be useful.\n\nYou can redirect the command into a text file. You can use any of the format controls above to customize the output. For example, what if you are conducting a very simple server documentation project? You might use the following commands:\n\nDo you prefer the date and time to be displayed in a specific format different from the default? Set an alias for that shows the information the way you like it. You can do this in your file.\n\nYou can also set the configuration as a variable on your system.\n\nCreate a template file, then copy/paste the content into scripts depending on the format desired\n\nPerhaps you create or manage various scripts, and the output is needed in several of them. However, the format must be different in each script. You could create a master template file that stores the required formats and then copy/paste the appropriate template into your new scripts.\n\n[ A free course for you: Virtualization and Infrastructure Migration Technical Overview. ]\n\nLike many things in Linux, the command is simple but also very flexible. You can control the format of the data that returned to you, ensuring you get the information you need as efficiently as possible. How have you used the command to make your life easier?"
    },
    {
        "link": "https://geeksforgeeks.org/date-command-linux-examples",
        "document": "How to Display and Set Date and Time in Linux | date Command\n\nUnlock the full potential of the date command in Linux—a versatile tool that does more than just show the current date and time. With this command, you can set your system’s clock, synchronize time across networks, and even calculate past or future dates for tasks like scheduling or logging. In this comprehensive tutorial, you’ll learn how to:\n\nIn this tutorial, we will walk you through the process of how to display date and time in Linux, change system settings, and work with Linux date format specifiers to format output.\n\nThe date command in Linux allows the user to display the current date and time in a variety of formats and set the system date and time. Being a part of the core utilities in Linux and Unix-like operating systems, it makes it an essential command for system configuration and scripting.\n\nHowever, by default, the date displays the current time in the system’s configured timezone. It supports formatting using the special date format specifiers to display the time exactly the way you need it.\n\nKey uses of the date Command\n\nThe basic syntax for the date command is:\n• OPTION: Refers to different flags & arguments that modify the behaviour of the command.\n• FORMAT: Refers to “how you want to display” the date, format specifiers.\n\nIn this guide, we’re going to explore different methods of displaying the system’s date and time in Linux. Let’s get this started:\n\nThe date command displays the current date and time, including the abbreviated day name, abbreviated month name, day of the month, the time separated by colons, the time zone name, and the year.\n\nThe option with the command allows you to display the current time in GMT (Greenwich Mean Time) or UTC (Coordinated Universal Time) instead of your system’s local time zone.\n\n–date or -d Option: Displays the given date string in the format of date. But this will not affect the system’s actual date and time value.Rather it uses the date and time given in the form of string.\n\nYou can also display past dates using tje –date option. Below, we’re displaying the date and time of 2 years ago:\n\nThis command can be used to display any specific future date and time. Here’s the syntax below:\n\nDate and time of upcoming particular week day.\n\nDate and time after two days.\n\nDate and time of next day.\n\nDate and time after 1 year on the current day.\n\nUse the or option to set the system date and time to a specific value.\n\n–file or -f Option: This is used to display the date string present at each line of file in the date and time format.This option is similar to –date option but the only difference is that in –date we can only give one date string but in a file we can give multiple date strings at each line.\n\nThe option is used to display the last modified timestamp of a specified file.\n\nWe can modify the timestamp of a datefile by using touch command:\n\nThe %d option is used to list of all format specifiers, adjoining to it different apprevations are used to specify the exact day, month or year. Have a look at the syntax below:\n\n5. Display Full Date and Time with Day, Month, Date, Time, and Year\n\n1. Ensure to cross-verify the changes that you’re about to make with the date command.\n\n2. Also, ensure that the format you’re using is correct to display the correct desired timing or date. (you may also combine multiple specifiers for any custom format).\n\n3. You can use date-based scripting to automate tasks such as file backup, log file rotations, or system maintenance tasks.\n\nThe date command in Linux is one of the most versatile and essential tool for managing date and time. Whether you’re trying to set the system date, or looking to display specific date formats, or calculating past and future dates, it works like a charm. By using the options and format specifiers outlined in this, you can automate tasks, format time (in different ways), and ensure your Linux system’s time settings are accurate.\n\nHow to use time command in Linux?\n\nHow do I display time in GMT/UTC?"
    },
    {
        "link": "https://ioflood.com/blog/date-linux-command",
        "document": "Are you finding it challenging to understand the ‘date’ command in Linux? You’re not alone. Many users find themselves puzzled when it comes to handling date and time in Linux, but we’re here to help.\n\nThink of the ‘date’ command in Linux as a digital calendar – allowing us to manipulate and display date and time, providing a versatile and handy tool for various tasks.\n\nIn this guide, we’ll walk you through the process of mastering the ‘date’ command in Linux, from its basic usage to more advanced techniques. We’ll cover everything from displaying the current date and time to manipulating and formatting it, as well as alternative approaches and troubleshooting common issues.\n\nTL;DR: How Do I Use the ‘date’ Command in Linux?\n\nIn this example, we’ve used the ‘date’ command without any options or arguments. The command returns the current system date and time in the default format.\n\nThe ‘date’ command might seem simple at first glance, but it comes with a wealth of functionality that’s worth exploring. Let’s start with the basics.\n\nThe primary use of the ‘date’ command in Linux is to display the current date and time. You can achieve this by simply typing into the terminal and pressing enter. However, this is just the tip of the iceberg when it comes to the ‘date’ command’s capabilities.\n\nLet’s try a different approach. If you want to display the date in a specific format, you can use the option. For example, to display the date in ‘Day-Month-Year’ format, you would use the following command:\n\nIn this example, , , and are format codes representing day of the month, month, and year respectively. The output of this command will be the current date in ‘Day-Month-Year’ format.\n\nThis is a simple demonstration of the ‘date’ command’s flexibility. As we progress through this guide, you’ll discover more ways to manipulate and format date and time using this versatile command.\n\nAs you become more familiar with the ‘date’ command’s basic usage, you can begin to explore its more advanced features. These include various options and flags that allow you to manipulate and format the date and time to your liking.\n\nBefore we delve deeper, let’s look at a table of some commonly used options and flags with the ‘date’ command in Linux:\n\nNow that we have a basic understanding of the ‘date’ command line options, let’s dive into some advanced usage examples.\n\nYou can use the flag to display a specific date, not the current one. For example, if you want to know the date two days ago, you can use the following command:\n\nThe flag allows you to set the system date and time. For example, to set the date to ‘2 days ago’, you can use the following command:\n\nNote: Only the system administrator can change the system date and time.\n\nTo display the date and time in Coordinated Universal Time (UTC), you can use the flag. Here’s an example:\n\nThese are just a few examples of the ‘date’ command’s advanced usage. As you can see, the ‘date’ command is a powerful tool for manipulating and formatting date and time in Linux.\n\nWhile the ‘date’ command is incredibly versatile, there are other commands and techniques in Linux that can be used to manipulate date and time. These alternatives come with their own set of benefits and drawbacks, and understanding them can help you make informed decisions about the best approach for your specific needs.\n\nThe ‘hwclock’ command allows you to access the Hardware Clock, also known as the RTC (Real Time Clock), CMOS clock, or BIOS clock. This command can be particularly useful for setting the system time or synchronizing the system clock with the hardware clock.\n\nHere’s an example of how to display the date and time from the hardware clock:\n\nIn this example, the ‘hwclock –show’ command displays the current date and time stored in the hardware clock.\n\nThe ‘timedatectl’ command is part of the systemd system and service manager, and it allows you to query and change the system clock and its settings. It can display the current time and date, both locally and in UTC, and it can also set the system time and date.\n\nHere’s an example of how to use the ‘timedatectl’ command to display the current date and time:\n\nIn this example, the ‘timedatectl’ command displays detailed information about the system clock, including the local time, universal time, RTC time, time zone, NTP settings, and DST changes.\n\nThese are just a couple of the alternative approaches to manipulating date and time in Linux. Each command and technique comes with its own set of advantages and considerations, so the best approach will depend on your specific needs and circumstances.\n\nLike any command in Linux, the ‘date’ command can sometimes produce unexpected results or errors. Understanding common issues and their solutions can help you troubleshoot effectively and make the most of this versatile command.\n\nWhen trying to set the system date and time using the ‘date’ command, you might encounter a ‘Permission denied’ error. This happens because only the system administrator (root) can change the system date and time.\n\nTo resolve this issue, you can use the ‘sudo’ command to execute the ‘date’ command with root privileges:\n\nIf you provide an invalid date string to the ‘date’ command, it will return an ‘Invalid date’ error. For example:\n\nIn this case, the solution is to correct the date string. Remember that the ‘date’ command follows the Gregorian calendar, so the date ’30 February 2022′ is invalid because February only has 28 or 29 days.\n\nWhen using the ‘date’ command in Linux, here are a few tips to optimize your experience:\n• Always double-check your date strings to avoid ‘Invalid date’ errors.\n• Use the ‘date’ command with root privileges if you need to change the system date and time.\n• Explore the man pages ( ) to learn more about the ‘date’ command and its options.\n• Practice using the ‘date’ command regularly to familiarize yourself with its options and flags.\n\nLinux, like other Unix-like operating systems, tracks time in a unique way. Instead of storing date and time as a string or multiple integers, Linux represents time as a single integer. This integer is the number of seconds that have passed since the ‘Unix Epoch’ – 00:00:00 on January 1, 1970, Coordinated Universal Time (UTC).\n\nThis method of timekeeping is known as ‘Unix Time’ or ‘Epoch Time’, and it’s the fundamental way that Linux tracks time. The ‘date’ command is a tool that interacts with this Unix Time, converting it into a human-readable format and allowing us to manipulate it.\n\nThe Importance of Time Zones in Linux\n\nOne crucial aspect of handling date and time in Linux is understanding time zones. When you run the ‘date’ command without any options, it displays the date and time in the system’s current time zone. However, you can use the environment variable to display the date and time in a different time zone.\n\nHere’s how you can use the environment variable to display the date and time in New York (Eastern Standard Time):\n\nIn this example, we’ve set the environment variable to ‘America/New_York’ for the duration of the ‘date’ command, causing the command to display the date and time in Eastern Standard Time.\n\nWhile the ‘date’ command is a powerful tool for handling date and time in Linux, it’s not the only tool available. Commands like ‘hwclock’ and ‘timedatectl’, which we’ve discussed earlier, offer different ways to interact with the system’s date and time.\n\nMoreover, understanding the concept of ‘cron jobs’ can be beneficial. A ‘cron job’ is a scheduled task in Linux, and it relies heavily on the system’s date and time. With ‘cron jobs’, you can schedule tasks to run at specific times or on specific days, making them a powerful tool for automating tasks in Linux.\n\nIn conclusion, the ‘date’ command is just the tip of the iceberg when it comes to handling date and time in Linux. By understanding the underlying principles and related concepts, you can leverage the full power of Linux’s timekeeping capabilities.\n\nThe ‘date’ command in Linux isn’t just a standalone tool; it’s a building block that you can use in larger scripts or projects. Its versatility makes it a common addition to many Linux scripts, particularly those that involve scheduling tasks, logging events, or tracking the duration of processes.\n\nOne common use of the ‘date’ command is in Bash scripts. Here, the ‘date’ command can be used to generate timestamps for logging events or measuring the duration of processes. Here’s an example of how you might use the ‘date’ command in a Bash script to log the start and end times of a process:\n\nIn this script, we’re using the ‘date’ command to capture the start and end times of the ‘sleep’ command, which simply pauses the script for a specified number of seconds. This is a simple example, but you can imagine how useful the ‘date’ command might be in more complex scripts.\n\nThe ‘date’ command often works in tandem with other commands in typical use cases. For instance, ‘cron’ is a time-based job scheduler in Unix-like operating systems. Users can schedule jobs (commands or scripts) to run at specific times. The ‘date’ command is frequently used in conjunction with ‘cron’ to schedule tasks based on the system’s date and time.\n\nFurther Resources for Mastering Date and Time in Linux\n\nIf you’re interested in diving deeper into the world of date and time manipulation in Linux, here are some additional resources you might find helpful:\n• Date command Documentation: This is the official documentation for the ‘date’ command from GNU Coreutils. It’s a comprehensive resource that covers all the options and flags for the ‘date’ command.\n• None Date Command in Bash: LinuxHint provides a helpful tutorial on using the date command in Bash, showcasing its various options and formats.\n• None Getting Tomorrow’s Date in Bash: TecAdmin offers a concise guide on obtaining tomorrow’s date in Bash, providing a simple script and explanation.\n\nRemember, mastering the ‘date’ command and other aspects of handling date and time in Linux is a journey. Don’t be afraid to experiment, make mistakes, and learn as you go!\n\nIn this comprehensive guide, we’ve navigated the world of the ‘date’ command in Linux, a powerful tool for manipulating and displaying date and time.\n\nWe started with the basics, understanding how to display the current date and time using the ‘date’ command. We then dived into more advanced techniques, uncovering the various options and flags that can be used with the ‘date’ command to manipulate and format the date and time to our liking.\n\nAlong the way, we tackled common issues you might encounter when using the ‘date’ command, such as ‘Permission Denied’ and ‘Invalid Date String’ errors, and provided solutions to help you overcome these challenges. We also explored alternative approaches to handling date and time in Linux, like using the ‘hwclock’ and ‘timedatectl’ commands.\n\nWhether you’re just starting out with the ‘date’ command or you’re looking to level up your Linux skills, we hope this guide has given you a deeper understanding of the ‘date’ command and its capabilities. With its balance of simplicity and versatility, the ‘date’ command is a powerful tool for handling date and time in Linux. Happy scripting!"
    },
    {
        "link": "https://redhat.com/en/blog/formatting-date-command",
        "document": "The command is simple. However, it has several useful options that enhance it. It's also capable of giving you practical information about past or future dates. This article shows you some of the format controls to manipulate the command's output. At the end of the article, I offer some practical suggestions about how you can use this command in conjunction with common tasks.\n\nThe most basic syntax for the command is simply to type in the command with no options and no format controls. Here is an example of the command and its resulting output:\n\nOne modification for the command is the option. This option converts the output to Coordinated Universal Time (UTC). Here is an example:\n\n[ You might also enjoy: Using at for single-use cron jobs in Linux ]\n\nThe real customization of the command occurs when you start adding format controls. The controls can order output fields, manage abbreviations, set the format of the date on the screen or in a file, etc. At the end of the article, I show some examples of how you might use , and you'll see how controlling the format is useful.\n\nUse one or more format controls to display information. Here is the general syntax:\n\nLet's look at a few examples.\n\nIf you want the output labeled, you can use this format:\n\nChange the order of the fields\n\nYou can alter the order in which the fields are displayed. This is one of the most useful customizations of because it allows you to display the output in whatever format is most useful or familiar to you. Here is one way to do it:\n\nHere is another example:\n\nThis example reverses the results:\n\nUse dashes, slashes, or spaces between the fields\n\nMaybe you need to format the output to meet particular standards, such as date information separated by dash, slash, or space characters. Here are a couple of different examples:\n\nDisplay information from outside my current locale or time zone\n\nIt's embarrassing to say, but for whatever reason, time zones completely mess with my mind. They always have and they probably always will. That's why I was excited to discover that the command can save me from having to visualize the sun's position over a particular geographical location to figure out the appropriate time zone.\n\nFirst, you must know the name of the time zone you wish to check. You can use the command to display this information.\n\nNext, combine the TZ value with the command to display the time zone's time and date information. To show the time on the east coast of the US, run this command:\n\nRun the following command to display the time in Tokyo:\n\nWhat if you're coordinating a meeting with someone on the east coast of the US, and you want to confirm or display a particular future time? You can use the command to display that information.\n\nFirst, you could display the date and time information for next Friday:\n\nHere is an example that displays the local time for 10 AM next Friday on the east coast of the US:\n\nYou can also use to display past information.\n\n\n\n This example shows time and date information from 15 days ago:\n\nIt's one thing to know these tricks when using the command, but it's another to understand how to apply them. Here are a few straightforward scenarios to get you thinking about your own tasks where might be useful.\n\nYou can redirect the command into a text file. You can use any of the format controls above to customize the output. For example, what if you are conducting a very simple server documentation project? You might use the following commands:\n\nDo you prefer the date and time to be displayed in a specific format different from the default? Set an alias for that shows the information the way you like it. You can do this in your file.\n\nYou can also set the configuration as a variable on your system.\n\nCreate a template file, then copy/paste the content into scripts depending on the format desired\n\nPerhaps you create or manage various scripts, and the output is needed in several of them. However, the format must be different in each script. You could create a master template file that stores the required formats and then copy/paste the appropriate template into your new scripts.\n\n[ A free course for you: Virtualization and Infrastructure Migration Technical Overview. ]\n\nLike many things in Linux, the command is simple but also very flexible. You can control the format of the data that returned to you, ensuring you get the information you need as efficiently as possible. How have you used the command to make your life easier?"
    },
    {
        "link": "https://geeksforgeeks.org/date-command-linux-examples",
        "document": "How to Display and Set Date and Time in Linux | date Command\n\nUnlock the full potential of the date command in Linux—a versatile tool that does more than just show the current date and time. With this command, you can set your system’s clock, synchronize time across networks, and even calculate past or future dates for tasks like scheduling or logging. In this comprehensive tutorial, you’ll learn how to:\n\nIn this tutorial, we will walk you through the process of how to display date and time in Linux, change system settings, and work with Linux date format specifiers to format output.\n\nThe date command in Linux allows the user to display the current date and time in a variety of formats and set the system date and time. Being a part of the core utilities in Linux and Unix-like operating systems, it makes it an essential command for system configuration and scripting.\n\nHowever, by default, the date displays the current time in the system’s configured timezone. It supports formatting using the special date format specifiers to display the time exactly the way you need it.\n\nKey uses of the date Command\n\nThe basic syntax for the date command is:\n• OPTION: Refers to different flags & arguments that modify the behaviour of the command.\n• FORMAT: Refers to “how you want to display” the date, format specifiers.\n\nIn this guide, we’re going to explore different methods of displaying the system’s date and time in Linux. Let’s get this started:\n\nThe date command displays the current date and time, including the abbreviated day name, abbreviated month name, day of the month, the time separated by colons, the time zone name, and the year.\n\nThe option with the command allows you to display the current time in GMT (Greenwich Mean Time) or UTC (Coordinated Universal Time) instead of your system’s local time zone.\n\n–date or -d Option: Displays the given date string in the format of date. But this will not affect the system’s actual date and time value.Rather it uses the date and time given in the form of string.\n\nYou can also display past dates using tje –date option. Below, we’re displaying the date and time of 2 years ago:\n\nThis command can be used to display any specific future date and time. Here’s the syntax below:\n\nDate and time of upcoming particular week day.\n\nDate and time after two days.\n\nDate and time of next day.\n\nDate and time after 1 year on the current day.\n\nUse the or option to set the system date and time to a specific value.\n\n–file or -f Option: This is used to display the date string present at each line of file in the date and time format.This option is similar to –date option but the only difference is that in –date we can only give one date string but in a file we can give multiple date strings at each line.\n\nThe option is used to display the last modified timestamp of a specified file.\n\nWe can modify the timestamp of a datefile by using touch command:\n\nThe %d option is used to list of all format specifiers, adjoining to it different apprevations are used to specify the exact day, month or year. Have a look at the syntax below:\n\n5. Display Full Date and Time with Day, Month, Date, Time, and Year\n\n1. Ensure to cross-verify the changes that you’re about to make with the date command.\n\n2. Also, ensure that the format you’re using is correct to display the correct desired timing or date. (you may also combine multiple specifiers for any custom format).\n\n3. You can use date-based scripting to automate tasks such as file backup, log file rotations, or system maintenance tasks.\n\nThe date command in Linux is one of the most versatile and essential tool for managing date and time. Whether you’re trying to set the system date, or looking to display specific date formats, or calculating past and future dates, it works like a charm. By using the options and format specifiers outlined in this, you can automate tasks, format time (in different ways), and ensure your Linux system’s time settings are accurate.\n\nHow to use time command in Linux?\n\nHow do I display time in GMT/UTC?"
    },
    {
        "link": "https://baeldung.com/linux/date-command",
        "document": "When we work in the Linux command-line or write shell scripts, we often need to handle date and time values, such as outputting a date in our required formats, getting a relative date-time, or changing the system date and time.\n\nIn this tutorial, we’ll take a closer look at the date utility and learn its common usage.\n\nThe date command is preinstalled by default in all Linux distros since it’s part of the GNU coreutils package.\n\nThe syntax of using the date command is:\n\nIf we don’t give any options, the date command will print the current system date and time, including the day of the week, month, time, year and timezone:\n\nHowever, if we pass different options, the date command can do more than that.\n\nSome common usages of the date command are:\n• display the current date and time from a given timezone\n• display the date and time in the required format\n• display the date and time from a given string\n\nLet’s go through some examples to learn how to handle each of these.\n\nThe date command will output the date and time in the timezone defined in our system.\n\nUTC is a special timezone. The date command supports the option -u to display the date and time in UTC:\n\nThe date command will, by default, use the timezone defined by /etc/localtime. The /etc/localtime file is usually a symbolic link pointing to a timezone file:\n\nSometimes, we want to know the date and time in another timezone. We can set the environment variable TZ to override the timezone setting for the date command:\n\nWe can assign the TZ variable with a timezone abbreviation, such as the EST in the example above, or a name in the timezone database:\n\nThe changed environment variable TZ is only for the following date command. The system timezone retains the original value:\n\n4. Display Date and Time in Various Formats\n\nThe date command supports many display formatting options. We can pass the required format to date:\n\nLet’s see a couple of examples of changing the date format:\n\nSome commonly used formats are:\n• %A – locale’s full weekday name (for example, Sunday)\n• %y – last two digits of the year (00..99)\n\nWe can find the full list of supported format sequences on the man page or the output of date –help.\n\nBy default, the date command doesn’t support displaying a date and time in milliseconds. However, the date command supports the nanoseconds format %N. For example, we can get the nanoseconds of the current time:\n\nIf we round the nanoseconds to ​the first three digits, we’ll have the milliseconds:\n\nWe can combine the “%3N” format with other formats to display a date and time with milliseconds.\n\nLet’s get the milliseconds since 1970-01-01 00:00:00 UTC:\n\nWe can also display the current date and time in milliseconds:\n\nWe can pass a static date or time string value together with the -d option to the date command and let it parse and print the date and time in our required format.\n\nFor example, we can pass a date string to indicate 18 Nov 1976 18:18:18 to the date command in several ways:\n\nFrom the examples above, we see that the date string pattern supported by the date command is pretty flexible. It can be a Unix timestamp following a @, an ISO date format, or even a human-readable date string.\n\nIn the previous section, we’ve seen how flexible the date string for the -d option can be. In this section, we’ll continue using -d’dateString’ to let the date command calculate a relative date and time in the past or future.\n\nFurthermore, all examples of relative date calculation will be based on the current date and time:\n\nLet’s start with getting one day before and after the current date. It is pretty straightforward, we just pass yesterday and tomorrow with the -d option:\n\n6.2. next, ago and last\n\nPassing yesterday or tomorrow with the -d option is helpful for us to get one single day before and after the base date.\n\nBut what if we want to get an arbitrary number of days before and after? Or even in other units, such as weeks, months, years and so on?\n\nThe next, ago, and last expressions can help us with that:\n\nIn addition to those human-readable date strings such as next and last, we can also pass a number with a unit to the -d option. A positive number will get a date-time in the future, while, a negative number indicates a date-time in the past:\n\nThis makes it easy to calculate relative date-time programmatically, for example, in a shell script.\n\nSo far, we’ve seen some examples of getting a relative date and time based on the current date-time. They’ll work for a given date string as well.\n\nLet’s see some examples of getting relative date-time based on 1976-11-18:\n\nWe can use the date command with the -s option to change the system clock manually. Since changing the system time will affect current running programs, only the root user is allowed to do that change.\n\nFor example, the next command will set our system time to 1976-11-18 18:18:18 :\n\nNow, let’s discuss how to see the current month’s name in Linux.\n\nWe can use the date command to display the name of the current month:\n\nAdditionally, using the locale settings, we can display the month’s name in different languages.\n\nFirst, we check the default locale settings:\n\nThe output shows a list of locales that are available in our system. Let’s understand the output:\n\nTherefore, the output en_GB.utf8 denotes the English language used in Great Britain.\n\nFurthermore, let’s say we want to see the current month in French. In such a case, we need to open and edit the locale.gen file:\n\nHere, we need to uncomment the line with fr_FR.UTF-8. After editing, we save the file and exit from the text editor.\n\nFinally, let’s display the name of the current month in French using the date command:\n\nSimilarly, we can use different language codes to change the output language.\n\nThe date command is a very convenient utility for handling date, time and month values.\n\nIn this article, we’ve focused on and explored its common, practical usage."
    },
    {
        "link": "https://labex.io/tutorials/linux-linux-date-command-with-practical-examples-422628",
        "document": "In this step, we will explore the basic syntax and usage of the command in Linux. The command is a powerful tool for displaying and manipulating date and time information on your system.\n\nTo view the basic syntax of the command, you can run the following command:\n\nThis will display the available options and usage examples for the command.\n\nThe basic syntax of the command is as follows:\n\nHere, the represents various flags and parameters that you can use to customize the output of the command. The allows you to specify the desired output format for the date and time information.\n\nFor example, to display the current date and time in the default format, you can simply run:\n\nYou can also use the option to display the date and time in a specific format. For instance, to display the date in the format \"YYYY-MM-DD\", you can use:\n\nThe option supports a wide range of formatting specifiers, such as for the 4-digit year, for the 2-digit month, for the 2-digit day, for the 24-hour hour, for the minutes, and for the seconds.\n\nBy understanding the basic syntax and options of the command, you can effectively display and manipulate date and time information on your Linux system."
    },
    {
        "link": "https://shell-tips.com/linux/how-to-format-date-and-time-in-linux-macos-and-bash",
        "document": "What is the Right Way to do Bash Loops?"
    }
]