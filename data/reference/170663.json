[
    {
        "link": "https://dataset.com/blog/getting-started-quickly-powershell-logging",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_logging_windows?view=powershell-7.5",
        "document": "PowerShell logs internal operations from the engine, providers, and cmdlets to the Windows event log.\n\nPowerShell logs details about PowerShell operations, such as starting and stopping the engine and providers, and executing PowerShell commands.\n\nFor information about logging in Windows PowerShell 5.1, see about_Logging.\n• None Module logging - Record the pipeline execution events for members of specified modules. Module logging must be enabled for both the session and specific modules. For more information about configuring this logging, see about_PowerShell_Config. If module logging is enabled through configuration, you can enable and disable logging for specific modules in a session by setting the value of the LogPipelineExecutionDetails property of the module. For example, to enable module logging for the PSReadLine module:\n• None Script block logging - Record the processing of commands, script blocks, functions, and scripts whether invoked interactively, or through automation. When you enable Script Block Logging, PowerShell records the content of all script blocks that it processes. Once enabled, any new PowerShell session logs this information. For more information, see Enabling Script Block Logging.\n\nUnlike Linux or macOS, Windows requires the event provider to be registered before events can be written to the event log. To enable the PowerShell event provider, run the following command from an elevated PowerShell prompt.\n\nPowerShell logs can be viewed using the Windows Event Viewer. The event log is located in the Application and Services Logs group and is named PowerShellCore. The associated ETW provider GUID is .\n\nWhen Script Block Logging is enabled, PowerShell logs the following events to the PowerShellCore/Operational log:\n\nRegistering the event provider places a lock in the binary library used to decode events. To update this library, the provider must be unregistered to release this lock.\n\nTo unregister the PowerShell provider, run the following command from an elevated PowerShell prompt.\n\nAfter updating PowerShell, run to register the updated event provider.\n\nWhen you enable Script Block Logging, PowerShell records the content of all script blocks that it processes. Once enabled, any new PowerShell session logs this information.\n\nScript Block Logging can be enabled via Group Policy or a registry setting.\n\nTo enable automatic transcription, enable the Turn on PowerShell Script Block Logging feature in Group Policy through Administrative Templates -> PowerShell Core.\n\nYou can set the option in the file that controls how PowerShell behaves. For more information, see about_PowerSHell_Config.\n\nIncreasing the level of logging on a system increases the possibility that logged content may contain sensitive data. For example, with script logging enabled, credentials or other sensitive data used by a script can be written to the event log. When a machine that has logged sensitive data is compromised, the logs can provide an attacker with information needed to extend their reach.\n\nTo protect this information, Windows 10 introduces Protected Event Logging. Protected Event Logging lets participating applications encrypt sensitive data written to the event log. Later, you can decrypt and process these logs on a more secure and centralized log collector.\n\nEvent log content is protected using the IETF Cryptographic Message Syntax (CMS) standard. CMS uses public key cryptography. The keys used to encrypt content and decrypt content are kept separate.\n\nThe public key can be shared widely and isn't sensitive data. Any content encrypted with this public key can only be decrypted by the private key. For more information about Public Key Cryptography, see Wikipedia - Public Key Cryptography.\n\nTo enable a Protected Event Logging policy, deploy a public key to all machines that have event log data to protect. The corresponding private key is used to post-process the event logs at a more secure location such as a central event log collector, or SIEM aggregator. You can set up SIEM in Azure. For more information, see Generic SIEM integration.\n\nTo enable Protected Event Logging, enable the feature in Group Policy through . This setting requires an encryption certificate, which you can provide in one of several forms:\n• The content of a base-64 encoded X.509 certificate (for example, as offered by the option in Certificate Manager).\n• The thumbprint of a certificate that can be found in the Local Machine certificate store (can be deployed by PKI infrastructure).\n• The full path to a certificate (can be local, or a remote share).\n• The path to a directory containing a certificate or certificates (can be local, or a remote share).\n• The subject name of a certificate that can be found in the Local Machine certificate store (can be deployed by PKI infrastructure).\n\nThe resulting certificate must have as an enhanced key usage ( ), and either or key usages enabled.\n\nThe following script retrieves and decrypts events, assuming that you have the private key:"
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/phf9md/how_does_an_organization_detect_a_powershell",
        "document": "I have a bit of a strange question I guess. I wrote a very simple script for my father:\n\nBasically, clicks NUMLOCK 2 times (to save the setting that the user currently has) every 4 minutes 30 seconds.\n\nHis organization limits inactivity to 5 minutes and because he is working on a legacy system he gets kicked out from everywhere the moment the screen turns off. So if he goes for a piss or to get a coffee he gets kicked out of everywhere and needs to spend the next 10 minutes logging in and opening everything again just to start from where he left off.\n\nThat is why I wrote the above mentioned script. It was working fine for the better part of an year, but now they contacted him that he is using something to fake productivity and he was forced to turn it off.Does anyone have an idea how the script was detected? Was it due to the repetitive nature of the clicking? If I randomize and add additional buttons and use a random interval between 1 and 270 seconds would that help?It is also possible that they just detected that he is using PowerShell as a non-IT person and that was enough to raise suspicion.\n\nWhat do you guys think?"
    },
    {
        "link": "https://scriptrunner.com/en/blog/powershell-security-best-practices",
        "document": "Changelogs keep your software updates clear and organized. Learn the best practices for creating and managing them in..."
    },
    {
        "link": "https://reddit.com/r/PowerShell/comments/2fwk7u/how_to_handle_logging_in_production_powershell",
        "document": "Hi fellow coders and admins, I have been assigned a task to rewrite a series of shitty outdated batch scripts that run on a schedule in production to shiny new PowerShell scripts.\n\nThe question im wondering however, is how to best handle logging? Should I implement returning of error levels, like in batch? Should I use some logging library (I used to use Log4Net back when I coded in C#) or write my own? Or maybe the best practice is to write logs to windows event log?\n\nAlso, is there some flag I could attach at the beginning of scripts for example to make it log as much as it can automatically? I don't exactly want writing try catch blocks for every little thing that I do.\n\nI would love to see examples too if you have any. I am trying to learn as much as I can here before I start writing."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/smbshare/new-smbshare?view=windowsserver2025-ps",
        "document": "Example 3: Create an SMB share with Multiple Permissions\n\nThis command creates an SMB share named and grants Change permissions to the domain groups and . Full Access permissions to the builtin group. This example uses splatting to pass parameter values from the variable to the command. Learn more about Splatting.\n\nSpecifies which users are granted modify permission to access the share. Multiple users can be specified by using a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nSpecifies the maximum number of concurrently connected users that the new SMB share may accommodate. If this parameter is set to zero (0), then the number of users is unlimited. The default value is zero (0).\n\nSpecifies an optional description of the SMB share. A description of the share is displayed by running the cmdlet. The description may not contain more than 256 characters. The default value is no description or an empty description.\n\nSpecifies which files and folders in the SMB share are visible to users. The acceptable values for this parameter are:\n• . SMB doesn't display the files and folders for a share to a user unless that user has rights to access the files and folders. By default, access-based enumeration is disabled for new SMB shares.\n• . SMB displays files and folders to a user even when the user doesn't have permission to access the items. The default value is .\n\nSpecifies which accounts are granted full permission to access the share. Use a comma-separated list to specify multiple accounts. Each entry in the comma-separated list must be contained within single or double quotes, for example . An account may not be specified more than once in the FullAccess, ChangeAccess, or ReadAccess parameter lists, but may be specified once in the FullAccess, ChangeAccess, or ReadAccess parameter list and once in the NoAccess parameter list.\n\nSpecifies a name for the SMB share. The names and are reserved for use by the computer. Share names can be up to a maximum of 80 characters long. The SMB share name can use any character allowed by Windows for files and directories. To learn more about naming conventions for files read the Naming Files, Paths, and Namespaces articles.\n\nThe Microsoft.Management.Infrastructure.CimInstance object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign ( ) provides the namespace and class name for the underlying WMI object. This cmdlet returns a MSFT_SmbShare object that represents the SMB share."
    },
    {
        "link": "https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/smbshare/New-SmbShare.md",
        "document": "The cmdlet exposes a file system folder to remote clients as a Server Message Block (SMB) share.\n\nTo delete a share that was created by this cmdlet, use the cmdlet.\n\nThis command creates an SMB share named and grants Full Access permissions to , and .\n\nThis example uses splatting to pass parameter values from the variable to the command. Learn more about Splatting.\n\nThis command creates an SMB share named and grants Change permissions to the domain groups and . Full Access permissions to the builtin group.\n\nThis example uses splatting to pass parameter values from the variable to the command. Learn more about Splatting.\n\nRuns the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.\n\nSpecifies the caching mode of the offline files for the SMB share. There are five caching modes:\n• BranchCache - Enables BranchCache and manual caching of documents on the shared folder.\n• Manual - Allows users to identify the documents and programs that they want to store offline.\n• None - Prevents users from storing documents and programs offline.\n\nSpecifies the continuous availability time-out for the share.\n\nSpecifies which users are granted modify permission to access the share. Multiple users can be specified by using a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that SMB compression is requested for all client connections that support it.\n\nSpecifies the maximum number of concurrently connected users that the new SMB share may accommodate. If this parameter is set to zero (0), then the number of users is unlimited. The default value is zero (0).\n\nIndicates that the share is continuously available.\n\nSpecifies an optional description of the SMB share. A description of the share is displayed by running the cmdlet. The description may not contain more than 256 characters. The default value is no description or an empty description.\n\nIndicates that the share is encrypted.\n\nSpecifies which files and folders in the SMB share are visible to users. The acceptable values for this parameter are:\n• . SMB doesn't display the files and folders for a share to a user unless that user has rights to access the files and folders. By default, access-based enumeration is disabled for new SMB shares.\n• . SMB displays files and folders to a user even when the user doesn't have permission to access the items.\n\nThe default value is .\n\nSpecifies which accounts are granted full permission to access the share. Use a comma-separated list to specify multiple accounts. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nAn account may not be specified more than once in the FullAccess, ChangeAccess, or ReadAccess parameter lists, but may be specified once in the FullAccess, ChangeAccess, or ReadAccess parameter list and once in the NoAccess parameter list.\n\nSpecifies SMB leasing and oplock behaviors for application compatibility. The acceptable values for this parameter are:\n• : Use default lease and oplock behaviors from SMB3.\n• : Grant read-caching lease but not write or handle-caching.\n• : No oplocks or leases, behave like SMB1 (not recommended).\n\nSpecifies a name for the SMB share. The names and are reserved for use by the computer. Share names can be up to a maximum of 80 characters long. The SMB share name can use any character allowed by Windows for files and directories. To learn more about naming conventions for files read the Naming Files, Paths, and Namespaces articles.\n\nSpecifies which accounts are denied access to the SMB share. Multiple accounts can be specified by supplying a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nSpecifies the path of the location of the folder to share. The path must be fully qualified. Relative paths or paths that contain wildcard characters aren't permitted.\n\nSpecifies which users are granted read permission to access the share. Multiple users can be specified by supplying a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nSpecifies the scope name of the share. For use with Windows Server failover cluster file server resources.\n\nSpecifies the security descriptor for the SMB share in string format.\n\nSpecifies the new SMB share is temporary and will not persist beyond the next restart of the computer. By default, new SMB shares aren't temporary.\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of is entered, then Windows PowerShell calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer.\n\nPrompts you for confirmation before running the cmdlet.\n\nShows what would happen if the cmdlet runs. The cmdlet isn't run.\n\nThis cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\n\nThe Microsoft.Management.Infrastructure.CimInstance object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign ( ) provides the namespace and class name for the underlying WMI object. This cmdlet returns a MSFT_SmbShare object that represents the SMB share."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/smbshare?view=windowsserver2025-ps",
        "document": "Retrieves basic information about the files that are open on behalf of the clients of the SMB server.\n\nRetrieves information about the SMB sessions that are currently established between the SMB server and the associated clients.\n\nRemoves an alternative port for the Server Message Block (SMB) protocol on the local server.\n\nRemoves all of the allow ACEs for a trustee from the security descriptor of the SMB share.\n\nSets the ACL for the file system folder to match the ACL used by an SMB share.\n\nConfigures the alternative ports for the Server Message Block (SMB) protocol on the local server.\n\nRemoves all of the deny ACEs for the trustee from the security descriptor of the SMB share."
    },
    {
        "link": "https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2025-ps/smbshare/New-SmbShare.md",
        "document": "The cmdlet exposes a file system folder to remote clients as a Server Message Block (SMB) share.\n\nTo delete a share that was created by this cmdlet, use the cmdlet.\n\nThis command creates an SMB share named and grants Full Access permissions to , and .\n\nThis example uses splatting to pass parameter values from the variable to the command. Learn more about Splatting.\n\nThis command creates an SMB share named and grants Change permissions to the domain groups and . Full Access permissions to the builtin group.\n\nThis example uses splatting to pass parameter values from the variable to the command. Learn more about Splatting.\n\nRuns the cmdlet as a background job. Use this parameter to run commands that take a long time to complete.\n\nSpecifies the caching mode of the offline files for the SMB share. There are five caching modes:\n• BranchCache - Enables BranchCache and manual caching of documents on the shared folder.\n• Manual - Allows users to identify the documents and programs that they want to store offline.\n• None - Prevents users from storing documents and programs offline.\n\nSpecifies the continuous availability time-out for the share.\n\nSpecifies which users are granted modify permission to access the share. Multiple users can be specified by using a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nRuns the cmdlet in a remote session or on a remote computer. Enter a computer name or a session object, such as the output of a New-CimSession or Get-CimSession cmdlet. The default is the current session on the local computer.\n\nIndicates that SMB compression is requested for all client connections that support it.\n\nSpecifies the maximum number of concurrently connected users that the new SMB share may accommodate. If this parameter is set to zero (0), then the number of users is unlimited. The default value is zero (0).\n\nIndicates that the share is continuously available.\n\nSpecifies an optional description of the SMB share. A description of the share is displayed by running the cmdlet. The description may not contain more than 256 characters. The default value is no description or an empty description.\n\nIndicates that the share is encrypted.\n\nSpecifies which files and folders in the SMB share are visible to users. The acceptable values for this parameter are:\n• . SMB doesn't display the files and folders for a share to a user unless that user has rights to access the files and folders. By default, access-based enumeration is disabled for new SMB shares.\n• . SMB displays files and folders to a user even when the user doesn't have permission to access the items.\n\nThe default value is .\n\nSpecifies which accounts are granted full permission to access the share. Use a comma-separated list to specify multiple accounts. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nAn account may not be specified more than once in the FullAccess, ChangeAccess, or ReadAccess parameter lists, but may be specified once in the FullAccess, ChangeAccess, or ReadAccess parameter list and once in the NoAccess parameter list.\n\nSpecifies SMB leasing and oplock behaviors for application compatibility. The acceptable values for this parameter are:\n• : Use default lease and oplock behaviors from SMB3.\n• : Grant read-caching lease but not write or handle-caching.\n• : No oplocks or leases, behave like SMB1 (not recommended).\n\nSpecifies a name for the SMB share. The names and are reserved for use by the computer. Share names can be up to a maximum of 80 characters long. The SMB share name can use any character allowed by Windows for files and directories. To learn more about naming conventions for files read the Naming Files, Paths, and Namespaces articles.\n\nSpecifies which accounts are denied access to the SMB share. Multiple accounts can be specified by supplying a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nSpecifies the path of the location of the folder to share. The path must be fully qualified. Relative paths or paths that contain wildcard characters aren't permitted.\n\nSpecifies which users are granted read permission to access the share. Multiple users can be specified by supplying a comma-separated list. Each entry in the comma-separated list must be contained within single or double quotes, for example .\n\nSpecifies the scope name of the share. For use with Windows Server failover cluster file server resources.\n\nSpecifies the security descriptor for the SMB share in string format.\n\nSpecifies the new SMB share is temporary and will not persist beyond the next restart of the computer. By default, new SMB shares aren't temporary.\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of is entered, then Windows PowerShell calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer.\n\nPrompts you for confirmation before running the cmdlet.\n\nShows what would happen if the cmdlet runs. The cmdlet isn't run.\n\nThis cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters.\n\nThe Microsoft.Management.Infrastructure.CimInstance object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign ( ) provides the namespace and class name for the underlying WMI object. This cmdlet returns a MSFT_SmbShare object that represents the SMB share."
    },
    {
        "link": "https://pdq.com/powershell/new-smbshare",
        "document": "The New-SmbShare cmdlet exposes a file system folder to remote clients as a Server Message Block (SMB) share.\n\nTo delete a share that was created by this cmdlet, use the Remove-SmbShare cmdlet.\n\nSpecifies the caching mode of the offline files for the SMB share. There are five caching modes: -- None. Prevents users from storing documents and programs offline. -- Manual. Allows users to identify the documents and programs they want to store offline. -- Programs. Automatically stores documents and programs offline. -- Documents. Automatically stores documents offline. -- BranchCache. Enables BranchCache and manual caching of documents on the shared folder.\n\nSpecifies the maximum number of concurrently connected users that the new SMB share may accommodate. If this parameter is set to zero (0), then the number of users is unlimited. The default value is zero (0).\n\nSpecifies an optional description of the SMB share. A description of the share is displayed by running the Get-SmbShare cmdlet. The description may not contain more than 256 characters. The default value no description, or an empty description.\n\nSpecifies which files and folders in the SMB share are visible to users. The acceptable values for this parameter are: -- AccessBased. SMB does not the display the files and folders for a share to a user unless that user has rights to access the files and folders. By default, access-based enumeration is disabled for new SMB shares.-- Unrestricted. SMB displays files and folders to a user even when the user does not have permission to access the items. The default value is Unrestricted.\n\nSpecifies which accounts are granted full permission to access the share. Use a comma-separated list to specify multiple accounts. An account may not be specified more than once in the FullAccess, ChangeAccess, or ReadAccess parameter lists, but may be specified once in the FullAccess, ChangeAccess, or ReadAccess parameter list and once in the NoAccess parameter list.\n• This value is\n\nSpecifies a name for the SMB share. The name may be composed of any valid file name characters, but must be less than 80 characters long. The names pipe and mailslot are reserved for use by the computer.\n• This value is\n\nSpecifies the maximum number of concurrent operations that can be established to run the cmdlet. If this parameter is omitted or a value of 0 is entered, then Windows PowerShellr calculates an optimum throttle limit for the cmdlet based on the number of CIM cmdlets that are running on the computer. The throttle limit applies only to the current cmdlet, not to the session or to the computer.\n\nThe Microsoft.Management.Infrastructure.CimInstance object is a wrapper class that displays Windows Management Instrumentation (WMI) objects. The path after the pound sign (#) provides the namespace and class name for the underlying WMI object. This cmdlet returns a MSFT_SmbShare object that represents the SMB share."
    }
]