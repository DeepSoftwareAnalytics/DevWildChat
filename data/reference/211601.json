[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa",
        "document": "The method of the interface creates a Base64-encoded ASCII string from a binary string (i.e., a string in which each character in the string is treated as a byte of binary data). You can use this method to encode data which may otherwise cause communication problems, transmit it, then use the method to decode the data again. For example, you can encode control characters such as ASCII values 0 through 31. Also consider using the method if your data is in a object to avoid creating a string containing raw bytes.\n\nBase64, by design, expects binary data as its input. In terms of JavaScript strings, this means strings in which the code point of each character occupies only one byte. So if you pass a string into containing characters that occupy more than one byte, you will get an error, because this is not considered binary data: Since interprets the code points of its input string as byte values, calling on a string will cause a \"Character Out Of Range\" exception if a character's code point exceeds . For use cases where you need to encode arbitrary Unicode text, it is necessary to first convert the string to its constituent bytes in UTF-8, and then encode the bytes. The simplest solution is to use and to convert between UTF-8 and single-byte representations of the string:\n\nThe and functions in the previous section can be used directly to convert between Base64 strings and s. For better performance, asynchronous conversion between base64 data URLs is possible natively within the web platform via the and APIs: Note: For supporting environments, also consider the native , , and methods."
    },
    {
        "link": "https://stackoverflow.com/questions/68849233/convert-a-string-to-base64-in-javascript-btoa-and-atob-are-deprecated",
        "document": "TLDR: These functions btoa and atob are deprecated for Node JS. If you are coding for the web browser you just need to prepend the window to get rid of this deprecation mark.\n\nOtherwise, you could install buffer with \"yarn add buffer\" or \"npm i buffer\" to run on browser. The buffer module's API is identical to node's Buffer API.\n\nHere is a React sample using javascript module to browser, but it can run on any modern javascript frontend app that uses webpack or parcel or even vanilla javascript with script src:\n\nThe above react hook will result:\n\nbtoa(): accepts a string where each character represents an 8bit byte. If you pass a string containing characters that cannot be represented in 8 bits, it will probably break. Probably that's why btoa is deprecated.\n\natob(): returns a string where each character represents an 8-bit byte.\n\nIf you are using nodejs just replace atob and btoa with Buffer. Here is the official documentation Buffers in nodejs:"
    },
    {
        "link": "https://codedamn.com/news/javascript/base64-encoding-decoding",
        "document": "Base64 encoding and decoding is an important aspect of web development, as it allows you to convert binary data into ASCII text format and vice versa. This can be useful when you need to store binary data in a more readable format, such as when transmitting data over a network or when saving data in a database. In this blog post, we will explore how to encode and decode Base64 using JavaScript with various examples. We will also briefly discuss how to perform these operations in Node.js using the Buffer class.\n\nBase64 encoding is a technique to convert binary data into ASCII text format, which consists of a set of 64 different characters (hence the name \"Base64\"). These characters include uppercase letters (A-Z), lowercase letters (a-z), digits (0-9), and two special characters (+ and /). An additional character, \"=\", is used as a padding character when the binary data being encoded is not divisible by 3.\n\nThis encoding scheme is widely used in various applications such as embedding images in HTML, XML, or JSON data, and transmitting binary data over text-based protocols like HTTP and SMTP.\n\nThe function is a built-in JavaScript function that takes a binary string as an argument and returns its Base64-encoded equivalent. It is supported in modern browsers and can be used to encode strings as follows:\n\nNote that the function only accepts binary strings, which means that if you have other types of data (like an array of numbers or an ArrayBuffer), you need to first convert them to a binary string before using the function.\n\nIf you need more control over the encoding process or need to support older browsers that do not have the function, you can manually implement Base64 encoding using JavaScript. Here's an example of how to do this:\n\nThe function is the counterpart of the function and is used to decode Base64-encoded strings back to their original binary form. It is also supported in modern browsers and can be used as follows:\n\nSimilar to encoding, you can also manually implement Base64 decoding if you need more control over the process or need to support older browsers that do not have the function. Here's an example of how to do this:\n\nIn Node.js, you can use the class to encode and decode Base64 data without the need for the and functions. Here's an example:\n\nQ: Can I use the and functions in Node.js?\n\n A: No, these functions are not available in Node.js by default. Instead, you can use the class as shown in the Node.js example above.\n\nQ: Is Base64 encoding secure for storing sensitive data?\n\n A: No, Base64 encoding is not a secure method for storing sensitive data, as it can be easily decoded. It is mainly used for making binary data more readable and suitable for transmission over text-based protocols.\n\nQ: Can I encode and decode non-string data using Base64?\n\n A: Yes, you can encode and decode other types of data, like ArrayBuffer or an array of numbers, by first converting them to a binary string and then using the appropriate encoding/decoding functions.\n\nQ: Are there any performance implications when using Base64 encoding/decoding?\n\n A: Encoding and decoding Base64 data has some overhead, as it increases the size of the data by approximately 33%. This can impact performance, especially when dealing with large amounts of data. However, the performance impact is generally minimal for small to moderate amounts of data, and the benefits of having a more readable format often outweigh the performance drawbacks.\n\nWe hope this blog post has provided you with a clear understanding of how to encode and decode Base64 in JavaScript with various examples. If you have any questions or need further clarification, feel free to explore the official Mozilla Developer Network (MDN) documentation on the and functions. And remember, if you're looking to learn more about web development, be sure to check out the codedamn platform for interactive learning, coding challenges, and projects. Happy coding!"
    },
    {
        "link": "http://w3schools.com/JSREF/met_win_btoa.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://i-m-prabhat.medium.com/understanding-the-btoa-method-in-javascript-a-comprehensive-guide-84f5e4f8b62e",
        "document": "In the world of web development, encoding and decoding data efficiently and securely is crucial. One such encoding technique is Base64 encoding, a method widely used to encode binary data into a text format. JavaScript provides a built-in method called to facilitate this encoding. In this blog post, we’ll explore what is, how it works, and some practical use cases to understand its importance in web development.\n\nThe (binary to ASCII) method in JavaScript encodes a string of data into Base64 format. Base64 encoding converts binary data into an ASCII string, ensuring safe transmission over text-based protocols like HTTP. This method is particularly useful when dealing with data that includes special characters or binary content, such as images or files.\n\nBase64 encoding represents binary data using 64 different ASCII characters, including uppercase and lowercase letters, numbers, and a few special symbols. The method converts each byte of binary data into a group of four ASCII characters, making it safe to include in URLs, HTTP headers, and other text-based formats.\n\nThe syntax for is straightforward:\n\nHere’s a simple example to illustrate how works:\n\nIn this example, the string “Hello, World!” is encoded into its Base64 representation, “SGVsbG8sIFdvcmxkIQ==”.\n\nBase64 encoding is often used to embed images directly into HTML or CSS files. This approach can reduce the number of HTTP requests needed to load a webpage.\n\nData URLs are used to embed small files directly in web pages. Using , you can encode files and include them in URLs.\n\nWhen transmitting sensitive data via URLs or APIs, Base64 encoding ensures the data remains intact and free from corruption during transport.\n\nLet’s see a practical example of using in a React application. We’ll create a simple app that encodes video IDs for use in URLs.\n\nSet up routing in your React app:\n\nCreate a Home component with links to videos, encoding the video IDs using :\n\nCreate a VideoPage component to decode the Base64-encoded video IDs using :\n\nThe method is a powerful tool for encoding data into Base64 format, making it suitable for various web development tasks. Whether you're embedding images, creating data URLs, or ensuring secure data transmission, provides a straightforward solution for encoding binary data as ASCII strings. By understanding and utilizing this method, you can enhance the functionality and security of your web applications."
    },
    {
        "link": "https://stackoverflow.com/questions/32662304/javascript-replacing-textarea-text-with-base64",
        "document": "I'm trying to make a quick base64 converter for an example project, and I was successful with outputting the text as an alert, but not when replacing the text in the textarea. Oddly, I was able to get it to work once, but once I refreshed the page to try again it stopped working. I tried JSFiddle, but it didn't show any errors in my JavSCript code, but it may be an issue with something else? Code below."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-encode-and-decode-strings-with-base64-in-javascript",
        "document": "In JavaScript, it is possible to use Base64 to encode and decode strings.\n\nIn this article, you will be introduced to the and JavaScript functions that are available in modern web browsers.\n\nTo follow along with this article, you will need:\n• An understanding of strings in JavaScript. You can consult How To Work with Strings in JavaScript to learn more.\n• An understanding of using functions available to the or .\n• An understanding of the Developer Console. You can consult How To Use the JavaScript Developer Console to learn more.\n\nand are two Base64 helper functions that are a core part of the HTML specification and available in all modern browsers.\n\ntakes a string and encodes it to Base64.\n\nLet’s say you have a string, , and wish to encode it to Base64. In your browser’s web developer console, define the string, encode it, and display the encoded string:\n\nThe output of this code is a string of characters with letters and numbers:\n\ntakes a string and decodes it from Base64.\n\nLet’s take the encoded string from earlier, , and decode it from Base64. In your browser’s web developer console, define the string, decode it, and display the decoded string:\n\nThe output of this code reveals the string has been converted back to its original message:\n\nNow, you have two tools for encoding and decoding Base64.\n\nYou can also use Base64 to represent binary data in a way that is compatible with HTML, JavaScript, and CSS. For example, you can embed an image inline in a CSS or JavaScript file using Base64.\n\nIt is possible to use Base64 to convert input, like form data or JSON, to a string with a reduced character set that is URL-safe. However, due to how certain servers may interpret plus ( ) and forward-slash ( ) characters, it is recommended to use instead.\n\nBase64 is in no way meant to be a secure encryption method.\n\nBase64 is also not a compression method. Encoding a string to Base64 typically results in 33% longer output.\n\nIn this article, you were introduced to and to encode and decode Base64 strings.\n\nIf you’d like to learn more about JavaScript, check out our JavaScript topic page for exercises and programming projects."
    },
    {
        "link": "https://stackoverflow.com/questions/51216332/fill-and-submit-textarea-programmatically-in-javascript",
        "document": "I'm trying to automate the submission of replies to my Steemit posts using plain JS or Jquery.\n\nI used the javascript code below but the button remains disabled and therefore does not allow to post the reply/comment.\n\nHow can I correctly trigger keydown / keypress / keyup events on the textarea in order to simulate the user \"classic\" interaction to send a reply?\n\nNotes: This code fills the textarea but the button is still disabled. Simply manually clicking on the textarea and typing anything the button gets enabled instead.\n\nAlso, the textarea value inserted programmatically disappears after clicking for instance on the background but it does not when entered normally."
    },
    {
        "link": "https://refine.dev/blog/how-to-base64-upload",
        "document": "Uploading files using Base64 encoding is a common practice. In this guide, I'm going to show you how to upload files using base64 encoding\n\nis the most widely used technique for storing or transmitting binary data by converting it to text. With this technique, binary data, which basically consists of 8-bit bytes, is divided into 6-bit (2^6 = 64) parts. 64 different numbers expressed in 6 bits are matched with 64 different characters expressed as Printable Characters in the character set.\n\nBase64 encoding is most commonly used to attach binary files to electronic mail in applications of the MIME (Multipurpose Internet Mail Extensions) standard.\n\nAnother usage area of ​​Base64 Encoding is adding images and other files to HTML and CSS documents by encoding with Base64 using Data URLs format in modern browsers.\n\nIn our example, we will upload the image file by encoding the image as Base64. First, let's write simple HTML and set the Bootstrap CSS link.\n\nThen we need to use the HTML input tag to receive an image file from the user.\n\nWe will use because it must be the input type file we want to receive.\n\nNow we have an input to interact with the user and select a file. Let's add the HTML elements that will show the image file and Base64 code we received from the user.\n\nOur fields are ready to display the image file and Base64 code. Now let's do our operations on the JavaScript side.\n\nHere we take data in file format and encode it as Base64. Then we show this encoded image and Base64 encoding output.\n\nThe Base64 file upload process with Refine is very simple. How to use it is explained step by step in the guide and example.\n\nRefer to the Refine Base64 Upload guide for more information. →"
    },
    {
        "link": "https://formcarry.com/blog/how-to-upload-files-as-base64",
        "document": "Uploading files using Base64 encoding is a common practice, the usage of the technique has been increased since React and Vue.js like frameworks gained popularity.\n\nIn this guide I'm going to show you how to upload files using base64 encoding\n\nTo understand it better I recommend you to take a look at that wonderful article from base64.guru and What is Base64 Encoding by Akshay Kumar\n\nWe can't just send the Base64 string to our server and process it, what makes it different than any other string? How do you know the file is a image or PDF file? That's where Data URI comes in.\n\nData URI or Data URL is a format that we can use some data as an inline string. In order to process our Base64 data in server we need to know the mime type (which can be tricked), which Data URI format provides this.\n\nThis is the Data URI or Data URL format:\n\nFor example this a Base64 string wrapped as a Data URI:\n\nTry it yourself! Choose a file and see base64 encoding of it.\n\nWanna play with it? Use our CodeSandbox Example\n\nLet's create a very simple form, we are going to handle it with Javascript\n\nWe have built free form generator tool that you can customize and get HTML code, make sure you check it out if you need form template.\n\nIn order to upload files as Base64, we need to listen the change event of our file input, and the process is async so we need to hold some state to determinate whether we can submit the form or not.\n\nWe are going to use later to check if the async process has been completed or not, it's true by default because there are no files in the input when the page loads, if you want to make it required you can change it to\n\nLet's try what happens:\n\nAs you can see, we can access our files, now it's time for the fun part.\n\nWe are going to use native FileReader API to read files from the input\n\nNow we can access FileReader data using but we need to transform it to Base64 string, let's do that:\n\nSo now we have converted our file to Base64 string and pushed it inside the object. every time our input get changes, is going to erase all the data it holds and will process everything again.\n\nWe have converted our files to Base64 string but that's not enough to upload files, we need to convert it to Data URI, it should look like this;\n\nFortunately, we can access the MimeType, so that's going to be easy like that:\n\nSo now it's ready to upload. But let's make some tweaks before we go on.\n\nI have named our file input as picture for the example, let's make our code dynamic so it can get the file input name attribute\n\nthat way if you change your input name to it will yield as\n\nConverting multiple files to base64 at once\n\nLet's cover our code so it can support multiple file input;\n\nSo in that case, we want to check if input has single or multiple files, if it has single file we want to name it right according to input name, in our example it would be but if it has more than one file, we are going to name with file lengths such as ,\n\nLet's cover our form submit event, what we want to do in that case is we will check if the files are ready, if they're not we are going to show an alert to user\n\nAll of the code we wrote so far should look like this;\n\nLet's create an object of our form values in the form submit event;\n\nLet's try it out:\n\nWe've done all the necessary stuff on the front-end except network request part.\n\nAt formcarry we allow our customers to upload files as Base64 (pro feature).\n\nYou can either use our service to handle your form, or you can write a server code to process Base64 Data URI.\n\nLuckily for you, I'm going to cover both of them.\n\nNow we can send our data to formcarry, the important thing in this step is converting our object to JSON and setting the Content Type as application/json.\n\n1.2- Try it out\n\nSubmit your form by filling out all of the fields, then refresh your dashboard\n\nFormcarry will automagically convert your base64 to download-ready file.\n\nI'm going to use Express.js for our example, let's create an express app using express-generator\n\nApproximately Base64 files are 33% heavier than the original file, you might want to keep that in mind.\n\nNow, let's allow our server to process large body data by getting into the and change:\n\nAlso we need to enable CORS to perform request from our front-end app:\n\nEnable it like this:\n\nI'm going to remove all the unnecessary stuff, you can replace this with your app.js:\n\nNow we need to create a Express route to process our form data.\n\nBut first we are going to use a tiny package called which will help us to save base64 images to our disk.\n\nThe flow should be like this;\n• If it's valid extract the Base64 string from Data URI\n\nThat's where package comes in, it will automatically extract Base64 string from Data URI, and append the file extension after the file name automatically.\n\nImport it in our\n\nLet's create our route, go to and add following:\n\nFinal code should look like:\n\nNow run the app using:\n\nLet's get back to our front-end code and point our form to the back-end our server runs at and our route is\n\nThanks for following the blog post to the end, base64 is a tricky issue that's why I wanted to prepare an end-to-end fully functional tutorial.\n\nI hope it's beneficial for you, if you have any questions just leave a comment and I'll try my best.\n\nIf you want to support us, just take a look at our service formcarry for a hassle free form handling."
    }
]