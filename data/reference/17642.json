[
    {
        "link": "https://stackoverflow.com/questions/3751274/ado-and-exception-handling",
        "document": "Def appears to be the default, i.e. the function tries to get column n out of the current row (rs) and if it fails, it returns the default. I don't think this is an error rather a particular use case. It's a fairly stanard pattern to allow the caller to avoid checking for missing values esp. from the db, and to specify a default one as a fallback.\n\nHaving said that, it could be an error as it swallows serisous errors, however maybe the code is written so that the caller can carry on regardless of the how the ADO call results."
    },
    {
        "link": "https://forums.codeguru.com/showthread.php?492158-C-Unhandled-Exception-with-ADO-Connection",
        "document": "\n• Hi..\n\n \n\n i was writing a very simple application that (beside the other things) had to access a database..but something goes wrong when i call the ADO Connection (this happens also on the Recordset one) Object's Open and/or Close methods, because i get an unhandled exception from the compiler (Standard Compiler Exception '0xE06D7363'.. I'd like to know the cause of this error that is very opaque to me...\n\n \n\n This is the code that generates the error: (The line with the Open and Close members calls)..\n\n \n\n CoInitialize(NULL);\n\n _ConnectionPtr conn = NULL;\n\n \n\n ///Codice\n\n // Creazione della connessione\n\n conn.CreateInstance(__uuidof(Connection));\n\n conn->Open(\"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=C:\\\\ALEX\\\\Programmi di Alex\\\\Controllore_forno\\\\Database\\\\Database.xls;Extended Properties=Excel 8.0;HDR=Yes\",\"\",\"\",0);\n\n conn->Close();\n\n conn.Release();\n\n CoUninitialize();\n\n return 0;\n\n \n\n \n\n Any ideas?\n• One question:\n\n \n\n Why does your code not check for errors? It assumes that everything is OK. I would expect try/catch blocks to catch any errors.\n\n \n\n Regards,\n\n \n\n Paul McKenzie\n• I agree with Paul: it is impossible to use ADO without try/catch blocks.\n\n And don't use \"trial-n-error\" method in the cases you can use something more reliable. Begin with the ADO Code Examples in Visual C++\n• Yes..this only is a snippet of the code...on the complete code the try-catch block is of course present... but i am absolutely sure the error regards those lines (I've tried deleting them and there were no errors!)..\n• P.S. I anyway (also with the catch block get 'Unspecified Error')\n• You should also check these errors\n• Only a single backslash is required in the data path\n\n \n\n \n\n ATP BE400 CE500 (C550B-SPW) CE560XL MU300 CFI CFII\n\n \n\n \"The speed of non working code is irrelevant\"... Of course that is just my opinion, I could be wrong. \n\n \n\n \"Nothing in the world can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and determination are omnipotent. The slogan 'press on' has solved and always will solve the problems of the human race.\"...Calvin Coolidge 30th President of the USA.\n• Only a single backslash is required in the data path If it's a literal string, then the backslash must be represented by two backslashes. If not, the string has illegal escape sequences within it.\n\n \n\n So two backslashes are necessary.\n\n \n\n Regards,\n\n \n\n Paul McKenzie\n• If it's a literal string, then the backslash must be represented by two backslashes. If not, the string has illegal escape sequences within it.\n\n \n\n So two backslashes are necessary.\n\n \n\n Regards,\n\n \n\n Paul McKenzie \n\n From MSDN...\n\n http://technet.microsoft.com/en-us/l.../ee692882.aspx\n\n \n\n From Connectionstrings.com\n\n \n\n \n\n \n\n ATP BE400 CE500 (C550B-SPW) CE560XL MU300 CFI CFII\n\n \n\n \"The speed of non working code is irrelevant\"... Of course that is just my opinion, I could be wrong. \n\n \n\n \"Nothing in the world can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and determination are omnipotent. The slogan 'press on' has solved and always will solve the problems of the human race.\"...Calvin Coolidge 30th President of the USA.\n• You are forgetting that the string is appearing in a C++ source program. Therefore any string that you have in quotes that contains backslashes must be escaped using double backslashes.\n\n \n\n The C++ compiler doesn't care what you're using the string for. If it contains backslashes, you have to escape it correctly. \n\n \n\n Regards,\n\n \n\n Paul McKenzie\n• This connects on my end...\n\n \n\n BOOL CLoadDBDlg::ConnectExcel() { CString csDataSource; HRESULT hRes = -1; _ConnectionPtr m_pConnection = NULL; csDataSource = \"Provider=Microsoft.Jet.OLEDB.4.0; Data Source=E:\\\\Aircraft\\\\Airplane\\\\122209.xls;Extended Properties=\"\"Excel 8.0\"\"\"; try { CoInitialize(NULL); hRes = m_pConnection.CreateInstance(__uuidof(Connection)); if(SUCCEEDED(hRes)) { m_pConnection->CursorLocation = adUseClient; m_pConnection->ConnectionTimeout = 10; m_pConnection->Mode = adModeShareDenyNone; hRes = -1; hRes = m_pConnection->Open( _bstr_t((LPCTSTR)csDataSource), _bstr_t(L\"\"), _bstr_t(L\"\"), adConnectUnspecified); if(SUCCEEDED(hRes)) { SetWindowText(\"Connected To Excel\"); } } } catch(_com_error &e) { // get info from _com_error _bstr_t bstrSrc(e.Source()); _bstr_t bstrDes(e.Description()); TRACE( \"Exception thrown for #import generated class\n\n\" ); TRACE( \"\\tCode = %081x\n\n\", e.Error() ); TRACE( \"\\tMeaning = %s\n\n\", e.ErrorMessage() ); TRACE( \"\\tSource = %s\n\n\", (LPCTSTR) bstrSrc ); TRACE( \"\\tDescription = %s\n\n\", (LPCTSTR) bstrDes ); CString csTempError; csTempError.Format(\"Description = %s - Meaning = %s - Source = %s - Function = %s\\r\n\n\", (LPCTSTR) bstrDes, (LPCTSTR)e.ErrorMessage(), (LPCTSTR) bstrSrc, \"ConnectExcel\"); SetWindowText(\"Connection FAILED To Excel\"); AfxMessageBox(csTempError, MB_OK, 0); CoUninitialize(); return(FALSE); } catch(...) { TRACE( \"An unhandled exception has occured\" ); } return(TRUE); } Last edited by Vanaj; February 5th, 2010 at . \n\n ATP BE400 CE500 (C550B-SPW) CE560XL MU300 CFI CFII\n\n \n\n \"The speed of non working code is irrelevant\"... Of course that is just my opinion, I could be wrong. \n\n \n\n \"Nothing in the world can take the place of persistence. Talent will not; nothing is more common than unsuccessful men with talent. Genius will not; unrewarded genius is almost a proverb. Education will not; the world is full of educated derelicts. Persistence and determination are omnipotent. The slogan 'press on' has solved and always will solve the problems of the human race.\"...Calvin Coolidge 30th President of the USA.\n• You may not post new threads\n• You may not post replies\n• You may not post attachments\n• You may not edit your posts\n\n\n\n\n\n\n\n \n\n \n\n Click Here to Expand Forum to Full Width \n\n \n\n * The Best Reasons to Target Windows 8\n\n Learn some of the best reasons why you should seriously consider bringing your Android mobile development expertise to bear on the Windows 8 platform.\n• * Porting from Android to Windows 8: The Real Story\n\n Do you have an Android application? How hard would it really be to port to Windows 8?\n• * Guide to Porting Android Applications to Windows 8\n\n If you've already built for Android, learn what do you really need to know to port your application to Windows Phone 8.\n• * HTML5 Development Center\n\n Our portal for articles, videos, and news on HTML5, CSS3, and JavaScript\n• * Windows App Gallery\n\n See the Windows 8.x apps we've spotlighted or submit your own app to the gallery!"
    },
    {
        "link": "https://stackoverflow.com/questions/18720796/how-to-close-the-ado-connection-if-the-database-connection-fails-while-inside-a",
        "document": "I am using ADO via C++, and let's suppose that I have begun a transaction via ADO when the connection drops out.\n\nI wish to abandon my database changes and close my ADO database connection object, in order to return to another code module which can display an error message (without leaving this module in a dodgy state).\n\n1) I cannot close the database connection because the error adErrInTransaction (0x800a0cae) is thrown (connection object cannot be explicitly closed while in a transaction)\n\n2) I cannot rollback the transaction because the error 0x8000ffff is thrown (catastrophic failure, .... connection failure)\n\nThis appears to be a catch 22 situation. Had it been that the transaction was not started then calling Close on the ADO connection succeeds, but unfortunately with the transaction open I appear to be stuck!\n\nIs the only solution to record the fact that it's failed within a transaction, so that when the database connection is restored, I can complete the rollback before attempting anything else?\n\nThis was tested with SQLServer 2008 if it's relevant, though I don't really want a SQLServer-specific solution."
    },
    {
        "link": "https://learn.microsoft.com/en-us/cpp/cpp/errors-and-exception-handling-modern-cpp?view=msvc-170",
        "document": "Modern C++ best practices for exceptions and error handling\n\nIn modern C++, in most scenarios, the preferred way to report and handle both logic errors and runtime errors is to use exceptions. It's especially true when the stack might contain several function calls between the function that detects the error, and the function that has the context to handle the error. Exceptions provide a formal, well-defined way for code that detects errors to pass the information up the call stack.\n\nProgram errors are often divided into two categories:\n• Logic errors caused by programming mistakes. For example, an \"index out of range\" error.\n• Runtime errors that are beyond the control of programmer. For example, a \"network service unavailable\" error.\n\nIn C-style programming and in COM, error reporting is managed either by returning a value that represents an error code or a status code for a particular function, or by setting a global variable that the caller may optionally retrieve after every function call to see whether errors were reported. For example, COM programming uses the return value to communicate errors to the caller. And the Win32 API has the function to retrieve the last error reported by the call stack. In both of these cases, it's up to the caller to recognize the code and respond to it appropriately. If the caller doesn't explicitly handle the error code, the program might crash without warning. Or, it might continue to execute using bad data and produce incorrect results.\n\nExceptions are preferred in modern C++ for the following reasons:\n• An exception forces calling code to recognize an error condition and handle it. Unhandled exceptions stop program execution.\n• An exception jumps to the point in the call stack that can handle the error. Intermediate functions can let the exception propagate. They don't have to coordinate with other layers.\n• The exception stack-unwinding mechanism destroys all objects in scope after an exception is thrown, according to well-defined rules.\n• An exception enables a clean separation between the code that detects the error and the code that handles the error.\n\nThe following simplified example shows the necessary syntax for throwing and catching exceptions in C++:\n\nExceptions in C++ resemble ones in languages such as C# and Java. In the block, if an exception is thrown it is caught by the first associated block whose type matches that of the exception. In other words, execution jumps from the statement to the statement. If no usable catch block is found, is invoked and the program exits. In C++, any type may be thrown; however, we recommend that you throw a type that derives directly or indirectly from . In the previous example, the exception type, , is defined in the standard library in the header file. C++ doesn't provide or require a block to make sure all resources are released if an exception is thrown. The resource acquisition is initialization (RAII) idiom, which uses smart pointers, provides the required functionality for resource cleanup. For more information, see How to: Design for exception safety. For information about the C++ stack-unwinding mechanism, see Exceptions and stack unwinding.\n\nRobust error handling is challenging in any programming language. Although exceptions provide several features that support good error handling, they can't do all the work for you. To realize the benefits of the exception mechanism, keep exceptions in mind as you design your code.\n• Use asserts to check for conditions that should always be true or always be false. Use exceptions to check for errors that might occur, for example, errors in input validation on parameters of public functions. For more information, see the Exceptions versus assertions section.\n• Use exceptions when the code that handles the error is separated from the code that detects the error by one or more intervening function calls. Consider whether to use error codes instead in performance-critical loops, when code that handles the error is tightly coupled to the code that detects it.\n• For every function that might throw or propagate an exception, provide one of the three exception guarantees: the strong guarantee, the basic guarantee, or the nothrow ( ) guarantee. For more information, see How to: Design for exception safety.\n• Throw exceptions by value, catch them by reference. Don't catch what you can't handle.\n• Don't use exception specifications, which are deprecated in C++11. For more information, see the Exception specifications and section.\n• Use standard library exception types when they apply. Derive custom exception types from the Class hierarchy.\n• Don't allow exceptions to escape from destructors or memory-deallocation functions.\n\nThe exception mechanism has a minimal performance cost if no exception is thrown. If an exception is thrown, the cost of the stack traversal and unwinding is roughly comparable to the cost of a function call. Other data structures are required to track the call stack after a block is entered, and more instructions are required to unwind the stack if an exception is thrown. However, in most scenarios, the cost in performance and memory footprint isn't significant. The adverse effect of exceptions on performance is likely to be significant only on memory-constrained systems. Or, in performance-critical loops, where an error is likely to occur regularly and there's tight coupling between the code to handle it and the code that reports it. In any case, it's impossible to know the actual cost of exceptions without profiling and measuring. Even in those rare cases when the cost is significant, you can weigh it against the increased correctness, easier maintainability, and other advantages that are provided by a well-designed exception policy.\n\nExceptions and asserts are two distinct mechanisms for detecting run-time errors in a program. Use statements to test for conditions during development that should always be true or always be false if all your code is correct. There's no point in handling such an error by using an exception, because the error indicates that something in the code has to be fixed. It doesn't represent a condition that the program has to recover from at run time. An stops execution at the statement so that you can inspect the program state in the debugger. An exception continues execution from the first appropriate catch handler. Use exceptions to check error conditions that might occur at run time even if your code is correct, for example, \"file not found\" or \"out of memory.\" Exceptions can handle these conditions, even if the recovery just outputs a message to a log and ends the program. Always check arguments to public functions by using exceptions. Even if your function is error-free, you might not have complete control over arguments that a user might pass to it.\n\nBoth C and C++ programs can use the structured exception handling (SEH) mechanism in the Windows operating system. The concepts in SEH resemble the ones in C++ exceptions, except that SEH uses the , , and constructs instead of and . In the Microsoft C++ compiler (MSVC), C++ exceptions are implemented for SEH. However, when you write C++ code, use the C++ exception syntax.\n\nFor more information about SEH, see Structured Exception Handling (C/C++).\n\nException specifications were introduced in C++ as a way to specify the exceptions that a function might throw. However, exception specifications proved problematic in practice, and are deprecated in the C++11 draft standard. We recommend that you don't use exception specifications except for , which indicates that the function allows no exceptions to escape. If you must use exception specifications of the deprecated form , MSVC support is limited. For more information, see Exception Specifications (throw). The specifier is introduced in C++11 as the preferred alternative to .\n\nHow to: Interface between exceptional and non-exceptional code\n\n C++ language reference\n\n C++ Standard Library"
    },
    {
        "link": "https://forums.codeguru.com/showthread.php?467530-C-Connection-Pooling-not-working-Using-ADO",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/3266532/ok-to-use-tadoconnection-in-threads",
        "document": "I have created an TCPip server application. The application has one global TADOConnection. This global ado connection is used both for main thread queries and also within threaded processes.\n\nIs this ok? Does the ADOConnection have built in mechanisms to handle multiple queries at the same time?\n\nMy application works find in testing environments (2-5 connections). But deployed in a production environment I am getting \"unexplainable\" access violations at the point the TADOQuery linked to the ADOConnection are set to opened.\n\nShould I be using ADOConnection or should all queries just make the connection to the database on their own (which is probably a bit more resource costly)?"
    },
    {
        "link": "https://stackoverflow.com/questions/4993768/working-with-tadoquery-in-thread",
        "document": "I'm writing the application, which connects to the DB and repetitively (1 minute interval) reads the data from a database. It's something like RSS feed reader, but with local DB. If the data reading fails, I try to reestablish the connection. I've designed it with TADOConnection and TADOQuery placed on the form (so with no dynamic creation). My aim is to keep the application \"alive\" from the user's point of view, so I placed the connection and the reading part into a single thread. The question is, how to do it best way ?\n\nMy design looks like this:\n• application start, the TADOConnection and TADOQuery are created along with the form\n• if the connection is established, suspend the connection thread, start the timer on the form, which periodically resumes another thread for data reading\n• if the reading thread succeeds, nothing happens and form timer keeps going, if it fails, the thread stops the timer and resume connection thread\n\nIs it better to create TADOConnection or TADOQuery dynamically or it doesn't matter ? Is it better to use e.g. critical section in the threads or something (I have only one access to the component at the same time and only one thread) ?\n\nThanks for your suggestions"
    },
    {
        "link": "https://blogs.embarcadero.com/this-is-how-to-use-ado-and-firedac-with-databases",
        "document": "From this article, you will learn the difference between working with databases via the ADO technology and the FireDAC library. Using the right database technology is often a critical part of designing your apps, particularly for Windows application development where there is a very rich array of database choices, not all of which may be hosted on a Windows server.\n• ADO (ActiveX Data Objects) s an app programming interface developed by Microsoft and based on the component technology ActiveX. ADO allows providing data from different sources (relational databases, text files, etc.) in an object-oriented format.\n• FireDAC is a universal data access library that is intended for developing apps for different devices that should be connected to corporate databases. Thanks to a universal and highly-effective architecture, FireDAC ensures high-speed direct native access from Delphi and C++Builder to InterBase, SQLite, MySQL, SQL Server, Oracle, PostgreSQL, DB2, SQL Anywhere, Advantage DB, Firebird, Access, Informix, etc.\n\nIt’s important to understand that FireDAC is a library. At the same time, ADO is a global technology that ensures access not only to databases but also to texts, documents, tables, and others.\n\nIn this article, we will consider the connection to MS Access and SQLite databases using both technologies, conduct data sampling and display them on the grid.\n\nHow to set up a connection to MS Access databases using ADO?\n\nTo get connected to the MS Access database we need to add a TADOConnection component to the form and tune it.\n\nFor setting the connection we can move to the ConnectionString property in the object inspector and press the button with three dots “…” or make a double-click on the component.\n\nWe will see a form where it will be required to choose an option Use Connection String and press a Build button.\n\nIn the next form, it is necessary to choose Microsoft Jet 4.0 OLE DB Provider and press Next >>\n\nWe will get to the next tab “Connection”. Here we need to indicate the path to the database file and click OK.\n\nThen we need to click OK once again in the window where you can see our Connection String\n\nWe have only one step left. In the Object Inspector window, it is necessary to switch the LoginPrompt property to False so that after connecting to the database we won’t get a window for inserting login and password.\n\nIf everything is set correctly, we are able to add the Connected property to True and our component will connect to the database. But we won’t do that. The best practice is to get connected to a database during the program launch. For doing that, we can make a double-click on the form and open a code editor where we will see a procedure for a form creation event and add there one code line as you can see in the screenshot below.\n\nThen we need to add a TADOQuery component to the form and make all the settings. First of all, we need to set the Connection property. In order to do it, from the dropdown list we need to choose ADOConnection1 which has been set at the previous steps.\n\nNow in the SQL property, we will set a question for data sampling.\n\nAfter that let’s go back to the code editor and continue writing our code for the form creation procedure.\n\nAfter setting Connected in True we should check whether everything is okay with our connection and execute our inquiry.\n\nNow it is necessary to insert our data into the form. We will use the TDBGrid component. Let’s place it onto the form and choose the Align property in alClient in order to place it on the entire form.\n\nHow to link the database data to visual controls on the screen?\n\nEverything is almost ready for displaying our data. There is only one thing left. To link data in the dataset (ADOQuery1) with the grid we need to add the TDataSource component and indicate ADOQuery1 in its DataSet property and then go to the grid parameters and indicate DataSource1 in the DataSource.\n\nNow we can start our app.\n\nAs you can see in the screenshot above, when the program was started it got connected to the database, opened the data set, and using the data source, displayed the content in the grid.\n\nHow to connect to a SQLite database via ADO?\n\nThe next task that we will fulfill is the connection to a SQLite database using the ADO technology.\n\nWe will need the same component set that’s why we offer to continue working with an app, changing just the way of getting connected to a database.\n\nBut before we proceed to settings we need to install a provider for SQLite databases into the system. You can download it following the link http://www.ch-werner.de/sqliteodbc/\n\nNow we need to come back to settings. Again let’s open the ConnectionString property of the ADOConnection1 component for editing. Now let’s choose another provider. It will be the Microsoft OLE DB Provider for ODBC Drivers.\n\nNow our window “Connection” for connection property editing looks a little bit different.\n\nHere we need to indicate a data source. In the dropdown list, we can see only SQLite3 Datasource that doesn’t refer to data.\n\nNow it is necessary to add our source to the system. For doing that we need to open a system window ODBC Data Sources that is shown below.\n\nLet’s press the Add button, find the necessary SQLite3 ODBC Driver button and press the Finish button.\n\nNow we see a setting window for the chosen driver.\n\nHere it is important to indicate the name of the data source and the path to the database. After pressing OK we will see that our data source is now displayed on our list.\n\nNow let’s make sure that the source is available to us from Delphi. In order to do it, in the window with connection properties we need to press the Refresh button and check the list.\n\nWe see that our SQLite Demo source has appeared there. We need to choose it and confirm our choice by pressing OK. We can see now that the connection row has changed.\n\nHow to view SQLite data in a grid?\n\nNow we should start our app again and we will see that the app is working just the same way.\n\nIt’s worth mentioning that we have used the databases that were provided by the Embarcadero company together with code samples, that’s why despite the fact that we have got connected to different databases, they contain identical data.\n\nHow to connect to an MS Access Database via ADO and FireDAC?\n\nNow we will try to repeat all our actions and to get connected to the same databases but now using FireDAC.\n\nLet’s continue using our app and fulfill a small preparation. We need to delete the ADOConnection1 and ADOQuery1 components from the form as well as the code that we wrote for connecting with databases.\n\nNow we can proceed directly to the connection setting with FireDAC.\n\nLet’s add the TFDConnection component to the form, make a double-click and move to settings. In the form that will be opened let’s choose MSAcc from the Driver ID dropdown list and then indicate the path to the database in the Database parameter (highlighted with yellow in the screenshot)\n\nLet’s save the settings and set the LoginPromt property with the value False as we’ve done in the case of ADO.\n\nThe next step will be to add a TFDQuery component to the form. It’s worth mentioning that in this case, the Connection property of the component will be automatically filled in with the value FDConnection1. If it doesn’t happen, it is necessary to do it manually.\n\nNow with the help of a double-click, we need to open a window for editing an inquiry and insert the necessary one. Using the Execute button, we can check the correctness.\n\nIn order to fully finish our preparations, it is necessary to indicate our FDQuery1 in the DataSet property of the DataSource1 component that we have in the form.\n\nIn order to start our app and to get the data displayed, we need to add a code for creating a form, connecting to a database and opening a dataset.\n\nIf we start the program, we will see the same parameters.\n\nHow to connect to a SQLite database using FireDAC?\n\nLet’s have a look at the method that allows us to get connected to a SQLite database using the same FireDAC. Let’s continue the app modification. Now we need to open the database connection window once again by making a double-click on a FDConnection1 component and to change the Driver ID to SQLite. The list of parameters now differs. Again, we need to indicate the path to a database in the database parameter.\n\nNow we can start the app again. Everything is working correctly.\n\nIf you have fulfilled all the steps that are described in this article and managed to get connected to different databases via ADO and FireDAC, you may have noticed that it was significantly easier to do that with FireDAC. It is enough just to place a component into the form, choose the necessary driver from RAD Studio and indicate the necessary parameters for the connection. Work with data via ADO requires additional settings in the system as well as the support of the technology from the side of the operating system.\n\nIn programming, developers may have different tasks that’s why skills of working with different technologies are an important advantage. But which of them to use in this or that case is up to you to decide.\n\nWe’d also like to add that as RAD Studio supports the creation of cross-platform apps, the use of such a powerful in-built tool as FireDAC will be rather convenient.\n\nThis article was written by Embarcadero Tech Partner Softacom. Softacom specialize in all sorts of software development focused on Delphi. Read more about their services on the Softacom website."
    },
    {
        "link": "https://thoughtco.com/multithreaded-delphi-database-queries-1058158",
        "document": "By design, a Delphi application runs in one thread. To speed up some parts of the application you might want to decide to add several simultaneous paths of execution in your Delphi application.\n\nIn most scenarios, database applications you create with Delphi are single threaded—a query you run against the database needs to finish (processing of the query results) before you can fetch another set of data.\n\nTo speed up data processing, for example, fetching data from the database to create reports, you can add an additional thread to fetch and operate on the result (recordset).\n\nContinue reading to learn about the 3 traps in multithreaded ADO database queries:\n• Solve: \"Canvas does not allow drawing\".\n• Main TADoConnection cannot be used!\n\nIn the well-known scenario where a customer places orders containing items, you might need to display all the orders for a particular customer along the total number of items per each order.\n\nIn a \"normal\" single threaded application you would need to run the query to fetch the data then iterate over the recordset to display the data.\n\nIf you want to run this operation for more than one customer, you need to sequentially run the procedure for each of the selected customers.\n\nIn a multithreaded scenario you can run the database query for every selected customer in a separate thread—and thus have the code execute several times faster.\n\nLet's say you want to display orders for 3 selected customers in a Delphi list box control.\n\nThis is the interface part of a custom thread class we are going to use to fetch and operate on all the orders for a selected customer.\n\nEvery order gets displayed as an item in a list box control (ListBox field). The ConnStr field holds the ADO connection string. The TicksLabel holds a reference to a TLabel control that will be used to display thread executing times in a synchronized procedure.\n\nThe RunThread procedure creates and runs an instance of the TCalcThread thread class.\n\nWhen the 3 customers are selected from the drop down box, we create 3 instances of the CalcThread:\n\nThe main code goes in the thread's Execute method:\n\nThere are 3 traps you need to know how to solve when creating multithreaded Delphi ADO database applications:\n• CoInitialize and CoUninitialize must be called manually before using any of the dbGo objects. Failing to call CoInitialize will result in the \"CoInitialize was not called\" exception. The CoInitialize method initializes the COM library on the current thread. ADO is COM.\n• You *cannot* use the TADOConnection object from the main thread (application). Every thread needs to create its own database connection.\n• You must use the Synchronize procedure to \"talk\" to the main thread and access any controls on the main form."
    },
    {
        "link": "https://buymeacoffee.com/delphifanforum/how-connect-different-libraries-components-delphi-different-databases",
        "document": "Delphi provides developers with a wide range of libraries and components for connecting to different databases. Each database provider has its own set of libraries and components, and choosing the right one can sometimes be a challenging task. In this post, we'll explore some of the most popular libraries and components for connecting to different databases and provide some examples of how to use them in Delphi.\n• None ADO (ActiveX Data Objects) ADO is a set of components provided by Microsoft for connecting to different data sources. ADO provides a unified interface for connecting to different databases such as Microsoft SQL Server, Oracle, MySQL, and others. Here's an example of how to connect to a SQL Server database using ADO:\n\nIn this example, we are creating a new object and setting its property to connect to a SQL Server database. After opening the connection, you can perform various database operations, and then close the connection.\n• None FireDAC FireDAC is a set of components provided by Embarcadero for connecting to different databases. FireDAC provides a unified interface for connecting to different databases such as Oracle, PostgreSQL, SQLite, and others. Here's an example of how to connect to a PostgreSQL database using FireDAC:\n\nIn this example, we are creating a new object and setting its property to connect to a PostgreSQL database. After setting the connection parameters, you can open the connection, perform various database operations, and then close the connection.\n• None UniDAC UniDAC is a set of components provided by Devart for connecting to different databases. UniDAC provides a unified interface for connecting to different databases such as Oracle, SQL Server, MySQL, and others. Here's an example of how to connect to a MySQL database using UniDAC:\n\nIn this example, we are creating a new object and setting its property to connect to a MySQL database. After setting the connection parameters, you can connect to the database, perform various database operations, and then disconnect from the database.\n\nThese are just a few examples of how you can connect to different databases using various libraries and components available in Delphi. Here are some more examples:\n• None IBX (InterBase Express) IBX is a set of components provided by Embarcadero for connecting to InterBase and Firebird databases. Here's an example of how to connect to an InterBase database using IBX:\n\nIn this example, we are creating a new object and setting its property to connect to an InterBase database. After setting the connection parameters, you can connect to the database, create a new object, execute a query, and then close the query and disconnect from the database.\n• None SDAC (SQL Server Data Access Components) SDAC is a set of components provided by Devart for connecting to SQL Server databases. Here's an example of how to connect to a SQL Server database using SDAC:\n\nIn this example, we are creating a new object and setting its properties to connect to a SQL Server database. After setting the connection parameters, you can connect to the database, create a new object, execute a query, and then close the query and disconnect from the database.\n\nThese are just a few examples of how to connect to different databases using various libraries and components available in Delphi. Depending on the database provider you're using, there may be other libraries or components available for connecting to the database. The key is to choose the right one that suits your needs and provides the necessary features and functionality for your application."
    }
]