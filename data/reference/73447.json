[
    {
        "link": "https://developer.paypal.com/api/nvp-soap/PayPalSOAPAPIArchitecture",
        "document": "The PayPal SOAP API is based on open standards known collectively as web services, which include the Simple Object Access Protocol (SOAP), Web Services Definition Language (WSDL), and the XML Schema Definition language (XSD). A wide range of development tools on a variety of platforms support web services.\n\nLike many web services, PayPal SOAP is a combination of client-side and server-side schemas, hardware and software servers, and core services.\n\nIn an object-oriented processing model, the interface to SOAP requests/responses is an object in your application's native programming language. Your third-party SOAP client generates business-object interfaces and network stubs from PayPal-provided WSDL and XSD files that specify the PayPal SOAP message structure, its contents, and the PayPal API service bindings. A business application works with data in the form of object properties to send and receive data by calling object methods. The SOAP client handles the details of building the SOAP request, sending it to the PayPal service, and converting the response back to an object.\n\nThe PayPal Web Services schema and its underlying eBay Business Language (eBL) base and core components are required for developing applications with the PayPal Web Services API. The following are the locations of the WSDL and XSD files.\n\nThe PayPal SOAP API comprises individual API definitions for specific business functions. As a foundation, the API relies on eBay Business Language (eBL) base and core components. The core eBL structures and are the basis of the SOAP request and response of each PayPal API. is also the framework for error messages common across all PayPal APIs.\n\nPayPal has made some schema design decisions that can affect how businesses design their own applications.\n• None Enumerations — Enumerations are defined directly in the PayPal API schema.\n• None Troubleshooting information — The PayPal API returns information about elements that trigger errors.\n• None Backward compatibility — The PayPal API is versioned so that business applications are backward compatible when new elements are introduced to the server-side schema.\n\nThe PayPal SOAP API service is protected to ensure that only authorized PayPal members use it. There are four levels of security:\n• None A third required authentication mechanism, which is either one of the following:\n• None If you're calling the API on behalf of a third-party merchant, you must specify the email address on file with PayPal of the third-party merchant or the merchant's account ID (sometimes called Payer ID) in the field. Note: Third-parties can obtain their merchant ID by logging in to paypal.com, clicking the profile icon on the top right side of the page and then selecting Profile and settings in the Business Profile menu. (If the profile icon at the top of the page is not visible, click Profile, which appears in the top menu when the My Account tab is selected.) Click My business info on the left, and the Merchant account ID is displayed in the list of profile items on the right. Typically, a merchant grants third-party permissions to a shopping cart, so the shopping cart can call the API on the merchant's behalf. The merchant must have previously granted you permission to execute the API operation.\n• None Transport Layer Security (TLS) data transport. See the PayPal developer Information Security guidelines for more information on TLS.\n\nA failure of authenticated security at any one of these levels denies access to the PayPal SOAP API service.\n\nFor the security of your business, PayPal must verify that merchants or third-party developers are permitted to initiate a transaction before they make one. PayPal authenticates each request. If the request cannot be authenticated, a SOAP security fault is returned.\n\nIn the SOAP request header, your SOAP client must set the , elements to pass an API username/password combination. In addition, you can set the to specify your API signature string. If you're calling the API on behalf of a third-party merchant, you must set the element to specify the authorizing third-party's email address or merchant account ID (sometimes called Payer ID).\n\nTypically, a merchant grants third-party permissions to a shopping cart, so the shopping cart can call the API on the merchant's behalf. The merchant must have previously granted you permission to execute the API operation.\n\nThe following example shows part of the elements.\n\nMost of these elements are required for all SOAP requests.\n\nThe service endpoint that processes your SOAP requests depends on your API credentials type.\n\nThe following diagram illustrates the contents of a PayPal SOAP request envelope.\n\nAll PayPal APIs are based on two core structures: and .\n\nThe following annotated description of the SOAP request structure shows the elements required by the PayPal SOAP API.\n\nPayPal uses SOAP messaging, not . With , a single service interface call passes an XML document in the request to the PayPal API server, which responds with an XML document instance.\n\nThe following is an annotated description of the structure of a successful SOAP response from the PayPal API where :\n\nThe start and end elements. An example of an API operation is . See the for a complete list. Each API response contains a with its date and time in UTC/GMT format. The acknowledgment ( ) element contains the string indicating the corresponding request was successfully processed. When there's an error, is set to a value other than , and the response body contains an element with information to help you troubleshoot the cause of the error. See for more information. The element contains information about the PayPal application that processed the request. Use the value of this element if you need to troubleshoot a problem with one of your requests. The different PayPal APIs return different elements depending on their response definitions. For detailed information, see the descriptions in the . Because a field is defined in the formal structure of an API response, this does not mean that the field is necessarily returned. Data is returned in a response only if PayPal has recorded data that corresponds to the field.\n\nIf the value is not , the payment or desired action may not go through.\n\nPossible values of the response field are the following:\n• None — The request was successful but a warning error code was also returned.\n• None — The API request failed. See error messages for details.\n• None — The API request failed and additional warning messages were returned.\n\nIf a request is malformed or contains some other error, the body of the SOAP response contains an element with other elements that can help you troubleshoot the cause of the error.\n\nThe structure of error messages is as follows:\n\nThe most important of these additional elements are as follows:\n\nAdditional information can appear as part of . For example, if the response returned within the element is , the element would contain a third-party card processor's specific error, such as . Values set in the are not set by PayPal; rather, they are passed through from the source.\n\nThe following example shows the error response if your API username and password do not match a legitimate API username and password on file with PayPal.\n\nExample of the SOAP Error Response: Bad Username or Password\n\nThe value returned in is important for PayPal to determine the precise cause of any error you might encounter. If you have to troubleshoot a problem with your requests, we suggest that you capture the value of so you can report it to PayPal.\n\nThe PayPal API assumes that all data in requests is in Unicode, specifically, the Unicode (or UCS) Transformation Format, 8-bit encoding form (UTF-8).\n\nIn responses, the API always returns data in UTF-8.\n\nThe PayPal SOAP API schema defines date/time values as Coordinated Universal Time (UTC/GMT), using ISO 8601 format, and of type .\n\nAn example date/time stamp is 2006-08-24T05:38:48Z\n\nThe core currency amount data type is called and is derived from . All currency amount fields have the following structure:\n• None The amount must have two decimal places, except in the case of currencies that do not support decimal amounts\n• None The decimal separator must be a period (\".\").\n• None You must not use any thousands separator.\n• None , which defines a large number of different currency codes. However, for your processing to succeed, you must set\n\nThe field name, , is an example; actual field names can vary depending on the specific API operation."
    },
    {
        "link": "https://paypal-community.com/t5/Merchant-Products-and-Services/How-do-I-enable-UTF-8-characters-on-paypal/td-p/1862208",
        "document": "The Paypal instructions I followed are pasted below. When I get to the last page, the \"paypal button language encoding\" option isn't there. Is there another way to access it?\n\n\n\nIf you use one of the charsets in the preceding list, you may need to log in to your PayPal account and change the encoding language for your button. Here's how to change the encoding language for your button.\n• Click Website payments under \"Products & Services\" on the left of the page."
    },
    {
        "link": "https://developer.paypal.com/api/rest/responses",
        "document": "PayPal API calls return HTTP status codes. Some API calls also return JSON response bodies that include information about the resource including one or more contextual HATEOAS links. Use these links to request more information about and construct an API flow that is relative to a specific request. Each REST API request returns an HTTP status code.\n\nNote: An HTTP or network timeout from an or endpoint could have resulted in the creation of a PayPal transaction. To be informed of the transaction, it is recommended that you repeat the same or call at least once, with the same HTTP header as before. See: API idempotency\n\nFor all errors except Identity errors, PayPal returns an error response body that includes additional error details in this format.\n\nThe response body for Identity errors includes additional error details in this format:\n\nTo prevent validation errors, ensure that parameters are the right type and conform to constraints:\n\nIn this example, an invalid client ID is passed in the request to get an access token.\n\nHypermedia as the Engine of Application State (HATEOAS) is a constraint of the REST application architecture that distinguishes it from other network application architectures.\n\nThis excerpt from a sample response shows an array of HATEOAS links:\n\nUse the links in this example, as follows:\n• To get more information about the request, combine the method and the target of the link.\n• To request a refund, combine the method and the target of the link.\n• To get information about the parent payment, combine the method and the target of the link."
    },
    {
        "link": "https://stackoverflow.com/questions/18416504/paypal-rest-api-shipping-address-does-not-understand-utf8-characters",
        "document": "I'm requesting out of a node application via the nodejs sdk:\n\nThe payload looks like this:\n\nThe utf-8 character in key's value causes a error. If I replace it by everything works fine.\n\nDoes paypal's REST api understand utf-8?\n\n Do I have to setup the character encoding somewhere?"
    },
    {
        "link": "https://paypal-community.com/t5/Merchant-Products-and-Services/How-do-I-enable-UTF-8-characters-on-paypal/m-p/1862208",
        "document": "The Paypal instructions I followed are pasted below. When I get to the last page, the \"paypal button language encoding\" option isn't there. Is there another way to access it?\n\n\n\nIf you use one of the charsets in the preceding list, you may need to log in to your PayPal account and change the encoding language for your button. Here's how to change the encoding language for your button.\n• Click Website payments under \"Products & Services\" on the left of the page."
    },
    {
        "link": "https://stackoverflow.com/questions/9254891/what-does-content-type-application-json-charset-utf-8-really-mean",
        "document": "The header just denotes what the content is encoded in. It is not necessarily possible to deduce the type of the content from the content itself, i.e. you can't necessarily just look at the content and know what to do with it. That's what HTTP headers are for, they tell the recipient what kind of content they're (supposedly) dealing with.\n\ndesignates the content to be in JSON format, encoded in the UTF-8 character encoding. Designating the encoding is somewhat redundant for JSON, since the default (only?) encoding for JSON is UTF-8. So in this case the receiving server apparently is happy knowing that it's dealing with JSON and assumes that the encoding is UTF-8 by default, that's why it works with or without the header.\n\nNo. You can send anything you want in the header and the body. But, if the two don't match, you may get wrong results. If you specify in the header that the content is UTF-8 encoded but you're actually sending Latin1 encoded content, the receiver may produce garbage data, trying to interpret Latin1 encoded data as UTF-8. If of course you specify that you're sending Latin1 encoded data and you're actually doing so, then yes, you're limited to the 256 characters you can encode in Latin1."
    },
    {
        "link": "https://stackoverflow.com/questions/52464129/how-do-i-get-proper-utf-8-name-information-from-paypals-pdt",
        "document": "I'm trying to fix my auto return page to generate a name based license for some software. I've got PDT working and it gives me data back. However the name info has been converted to something other than Unicode and destroyed.\n\nMy test data is a user in the sandbox with a Japanese name. I attempt to run a transaction as that user and get this back:\n\nIn the PDT response. Some what ironically PayPal reports the content type as utf-8:\n\nYah, nope. The test user's name is actually: 木家 寿司. Just some random Japanese characters.\n\nOf note I set Accept-Charset to utf-8. I've also tried setting the content-type to include utf-8 as the charset. And also putting \"charset=utf-8\" in the form fields themselves.\n\nSeems like PDT is just broken when it comes to unicode. Or am I doing something wrong here?\n\nEdit: Bah, this is solved here."
    },
    {
        "link": "https://gist.github.com/liximomo/de8f6ae6ede225c5d6b71d7a91137d6e",
        "document": "You signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://developer.paypal.com/api/rest/webhooks/rest",
        "document": "This guide covers technical details for implementing a webhook listener and verifying messages received.\n\nThere are two ways to subscribe a URL to webhook events:\n• In Application management, under each App's settings\n\nWhen you subscribe a listener URL, it will have a Webhook ID. Record the ID as it is needed for verification of all webhook messages sent to that URL.\n\nYour listener should be an app or script deployed at the corresponding URL that listens on HTTPS port 443. For webhook message deliveries to be successful, the listener must respond with an HTTP 2xx success status every time one is posted. Otherwise — for example if there is no response, PayPal cannot connect, or if the server responds with a 404 or 500 error — PayPal will retry each delivery up to 25 times over 3 days.\n\nIf your system is programmatically capable, self cryptographic verification is the preferred method as it will be faster and avoid extra API dependency and latency. The alternative (not usable for mock test webhooks) is to post the same information back to PayPal and have it perform the verification for you.\n\nForm the following original message string for a signature check:\n\nThe fields in the string are:\n\nSample code for a listener that does the above:\n\nOnce a listener URL is able to receive mock events successfully, the next step is to subscribe it to a sandbox REST App's events in Application management and generate actual test events with an integration that uses the app (for example, make a subscription payment resulting in a PAYMENT.SALE.COMPLETED event). Then you can proceed with having the listener do something useful with the message data (for instance, write to a database).\n\nIf PayPal cannot connect to a listener URL and receives no HTTP status code response, the most common reasons are if incoming HTTPS connections on port 443 are being blocked by a firewall or other rule, or if the domain webhooks are being sent to is marked as malware, phishing, or as involved in some other abuse by url filtering services. One place where you can check the status of a domain is: urlfiltering.paloaltonetworks.com. (If your domain is marked as abusive or having malware, take action to secure it and request recategorization there, or use a different domain to receive webhooks from PayPal)\n\nIf a status code is being returned but is non-2xx, such as a 404 or 500, this indicates a problem with the listener app/script or its webserver configuration and must be troubleshooted there."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Content-Type",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 .\n\nThe HTTP representation header is used to indicate the original media type of a resource before any content encoding is applied.\n\nIn responses, the header informs the client about the media type of the returned data. In requests such as or , the client uses the header to specify the type of content being sent to the server. If a server implementation or configuration is strict about content type handling, a client error response may be returned.\n\nThe header differs from in that helps the recipient understand how to decode data to its original form.\n\nNote: This value may be ignored if browsers perform MIME sniffing (or content sniffing) on responses. To prevent browsers from using MIME sniffing, set the header value to . See MIME type verification for more details.\n\n* Values can't contain a CORS-unsafe request header byte: , Delete , and control characters to except for Tab . It also needs to have a media type of its parsed value (ignoring parameters) of either , , or ."
    }
]