[
    {
        "link": "https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer",
        "document": "[Wanna try LIVE SERVER++ (BETA) ? It'll enable live changes without saving file. https://github.com/ritwickdey/vscode-live-server-plus-plus ]\n\n[NOTE: In case if you don't have any or file in your workspace then you have to follow method no 4 & 5 to start server.]\n• None Open a project and click to from the status bar to turn the server on/off.\n• None Right click on a file from Explorer Window and click on . .\n• None Open a HTML file and right-click on the editor and click on .\n• None Hit to Open the Server and to Stop the server (You can change the shortcut form keybinding). [On MAC, and ]\n• None Open the Command Pallete by pressing or and type to start a server or type to stop a server.\n• Start or Stop server by a single click from status bar.\n• Support for any browser (Eg: Firefox Nightly) using advance Command Line.\n• Remote Connect through WLAN (E.g.: Connect with mobile) [Need Help? See FAQ Section]\n• Use preferable host name (localhost or 127.0.0.1).\n• Customizable Supporting Tag for Live Reload feature. (Default is or )\n• Support for any file even dynamic pages through Live Server Web Extension.\n\nAll settings are now listed here Settings Docs.\n\nAll FAQs are now listed here FAQ Docs\n• \n• [NEW] Intregation of with [#352 - Thanks to Kenneth Auchenberg]\n• [NEW] Fallback to random port If given port is busy. [#330 - Thanks to Ali Almohaya ]\n\nA special thanks to Max Schmitt, Joydip Roy & Ayo Adesugba for contributing their valueable time on this project.\n\nThis extension is licensed under the MIT License"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-enable-live-server-on-visual-studio-code",
        "document": "When working on web development projects, you often need to manually refresh the browser to see the changes you make in your code. The Live Server extension for Visual Studio Code automates this process by creating a local development server. With Live Server, any time you save your HTML, CSS, or JavaScript files, the browser will automatically refresh to reflect those changes instantly. This significantly enhances your productivity and eliminates the need for constant manual refreshing.\n\nSteps for Installing and Enabling Live Server on VS Code\n\nBelow is a step-by-step guide to install and enable Live Server on VS Code:\n• Activity Bar on the left side, click on the Extensions icon (it looks like a square with four squares inside, located on the bottom of the sidebar).\n• None Alternatively, you can use the shortcut\n• None Look for the extension titled “Live Server” Ritwick Dey (this is the most popular and widely used extension).\n• None After installation, you will see a “Installed”\n• None You can also check the Extensions sidebar, and Live Server should now be listed among your installed extensions.\n• HTML file you want to preview in the browser.\n• None At the bottom-right corner of the VS Code window, you will see a Go Live button. Click on it to start the Live Server.\n• None Alternatively, you can right-click on your HTML file and select “Open with Live Server”\n• None Your default web browser will open automatically with a live preview of your HTML page.\n• None As you make changes to your code in VS Code, simply save the file ( ), and the browser will automatically refresh, reflecting the changes instantly.\n• None To stop the Live Server, simply click on the “Port: [number]” Port: 5500 ) at the bottom-right corner of VS Code, or press (Mac). This will stop the live server and close the browser window.\n• None You can also use the Stop Live Server VS Code status bar\n\nWhat to Do If the “Go Live” Button is Not Showing in VS Code (but Live Server is Working)\n\nIf you’ve installed the Live Server extension successfully, but the “Go Live” button is not showing up at the bottom-right corner of Visual Studio Code, don’t worry—there are a few common reasons why this might happen and simple solutions to fix it. Here’s how to troubleshoot:\n\n1. Ensure You Have an HTML File Open\n\nThe “Go Live” button typically appears when you have an HTML file open in your workspace. Live Server works by serving HTML files in your default web browser, so make sure you’re working on an HTML file.Fix: If you’re working with other files like CSS or JavaScript and need to see them live, open an HTML file to activate the “Go Live” button.\n\n2. Check the File is Part of a Workspace\n\nIf you’re opening a single file without a workspace (for instance, just opening a single HTML file directly), the Go Live button may not appear. Live Server generally works better when you’re working in a folder or project workspace.Fix: Open the entire folder or project in VS Code instead of just a single file. You can do this by selecting File → Open Folder and navigating to your project folder.\n\nSometimes, the “Go Live” button may not appear immediately due to a minor glitch or issue when loading VS Code.Fix: Simply restart VS Code and open your workspace again. This should refresh the editor and make the “Go Live” button visible if everything else is working.\n\nOther extensions might conflict with Live Server and prevent the button from showing up. Extensions like Live Preview or Browser Preview may cause such issues.Fix: Try disabling other conflicting extensions temporarily to see if that resolves the issue. You can disable extensions by going to the Extensions panel ( ), finding the extension, and clicking Disable.\n\nIf nothing else works, the Live Server extension itself may not have installed properly.Fix: Uninstall and reinstall the Live Server extension:\n\nIf the “Go Live” button is still not showing, you can always manually start the Live Server:\n• None Right-click on your HTML file in the editor or Explorer and select “Open with Live Server”\n• None This will open your HTML file in your browser and start a live server.\n\nSometimes, settings within VS Code may prevent the button from appearing or functioning properly.Fix: Check your VS Code settings related to Live Server:\n• Live Server and ensure the settings are configured correctly (such as default browser, port number, etc.).\n\nMake sure that both VS Code and the Live Server extension are up to date. Sometimes, an update may fix bugs that prevent the Go Live button from showing.Fix:\n• Help → Check for Updates in VS Code to ensure you’re running the latest version of the editor.\n• Live Server extension by navigating to the Extensions Panel Update\n\nIf you want to change the default port used by Live Server (which is typically 5500), you can do this by:\n• Live Server and look for Custom Browser and Port options to set the port number according to your preference.\n\nTo launch a specific file (e.g., ) directly on Live Server, simply right-click on that file and select Open with Live Server.\n\nIn addition to the custom port, you can configure Live Server to open in a specific browser, set the wait time for automatic refresh, and control other behaviors from the settings menu.\n• Live Server: Open with Live Server : Right-click on your HTML file and choose this option.\n• Live Server: Stop Live Server : If you need to manually stop the server, use this command.\n\nLive Server works not only with HTML files but also with other web development files, including CSS and JavaScript. As long as your code is part of a web development project, you can preview it live in the browser.\n\nEnabling Live Server in Visual Studio Code streamlines the web development process by providing automatic live previews in your browser. The simple installation steps and automatic refresh make it a must-have tool for front-end developers. By following the above steps, you’ll have Live Server up and running in no time, allowing you to see your changes instantly without manual browser refresh.\n\nWhat if the “Go Live” button is not visible?\n\nCan I use Live Server for non-HTML files?\n\nHow do I set a custom browser for Live Server?"
    },
    {
        "link": "https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server",
        "document": "This is the pre-release edition of Live Preview for early feedback and testing. It works best with VS Code Insiders. ⚠️ WARNING: This extension is still under development! ⚠️ An extension that hosts a local server for you to preview your web projects on! This extension is most useful for projects where a server is not already created (e.g. not for apps using React, Angular, etc.). To work with these, feel free to run the command that is already built-in with VS Code. Preview your HTML files quickly by clicking the preview button in the top right corner of your editor or using the context menu. A preview is available in-editor for the files hosted by the server. The simple embedded browser features the following:\n• Expandable menu, allowing users to:\n• Perform a page search\n• Tip: You can also use CTRL+F to open the find box and Enter to go to the next result See the changes as you make them. By default, changes appear as you make them in the editor. You can also change this in the extension settings (via ) to refresh the preview on save or not at all. Individual pages can opt out of live refreshing by adding the attribute . If you're looking for a persistent server to run, you can run a task, which also logs the server traffic. This can also be launched using the command. You can click on the traffic to open the file location of the file returned by the server. Although all of the images above use the embedded browser, you can also experience the same features in an external browser. You can edit the preview target in the extension settings. The external browser preview also supports debugging via the built-in js-debug extension and attaching to the Edge Devtools Extension. This allows support for features such as setting breakpoints and inspecting elements. Run in the command palette to get these debugging features. For a simple view of the embedded preview's console messages, go to the tab and select in the dropdown. No workspace? No problem! For a quick preview of your file, the server can also access files outside of your workspace to preview.\n• Files without a workspace will be served on its own server instance and will use its absolute path as the file path.\n• Linked files for these pages may not be correct if they are relative to a specific root (e.g. a project root).\n• Tasks do not work outside of a workspace, so a server will just launch in the background upon external preview when outside of a workspace. You can use the command to kill the server in this case. Live Preview works cleanly with your multi-root workspaces! It will simply open an additional server for each root that you open a preview on. You can view the ports that are open for Live Preview by hovering the status bar indicator (usually located in the bottom-right corner of the window). You can install the extension in the marketplace here. To contribute, see the contributing page. Q. What does the \"Previewing a file that is not a child of the server root. To see fully correct relative file links, please open a workspace at the project root or consider changing your server root settings for Live Preview.\" message mean?\n• You have no workspace open and opened a preview.\n• You opened a preview for a file that is not a part of your workspace(s).\n• You have the setting set to a sub-folder in your workspace and your file is not a child of that subfolder. The server is hosted from the root of the workspace that the user opens (or a subfolder of the workspace based on ). Files outside of this can be previewed, but some file paths (such as a link to the root) may not go to the right place. If you are working on a web project, it is advised that you open a workspace at the root of the project. Q. I'm trying to use Live Preview in Codespaces and the embedded preview isn't working. A. Currently, you will need to manually navigate to the links host the forwarded port content before it works In the area of the editor where the integrated terminal usually is, navigate to and open the local addresses (usually at ports 3000 and 3001) in the browser. You can do this by using CTRL+Click on the URLs in the menu. Allow the browser to perform the necessary redirects, then close the windows. Re-open the preview window and it should work now. Q. Why does my external browser preview look different than the preview in the embedded browser preview? A. Aspects such as styling might look different based on the browser cache of your external browser or any other client-side state. Try clearing your cache and restarting your browser. Special thanks to the following extensions for inspiring Live Preview! 💡 Please file issues against the VS Code Live Preview repository. See the project's changelog here."
    },
    {
        "link": "https://code.visualstudio.com/docs/getstarted/getting-started",
        "document": "In this tutorial, you learn about the key features of Visual Studio Code to help you get started with coding quickly. You learn about the different components of the user interface and how to customize it to your liking. You then write some code and use the built-in code editing features, such as IntelliSense and Code Actions, and you learn about running and debugging your code. By installing a language extension, you add support for a different programming language.\n• Download and install Visual Studio Code on your computer\n\nYou can use VS Code to work on individual files to make quick edits, or you can open a folder, also known as a workspace.\n\nLet's start by creating a folder and opening it in VS Code. You'll use this folder throughout the tutorial.\n• When you first open VS Code, you should see the Welcome page with different actions to get started.\n• Select File > Open Folder... from the menu to open a folder.\n• Select New Folder, create a new folder named , and then select Select Folder (Open on macOS). The folder you create is the root of your workspace.\n• On the Workspace Trust dialog, select Yes, I trust the authors to enable all features in the workspace. Because you created the folder on your computer, you can trust the code in the folder. Workspace Trust lets you decide whether code in your project folder can be executed by VS Code. When you download code from the internet, you should first review it to make sure it's safe to run. Get more info about Workspace Trust.\n• You should now see the Explorer view on the left, showing the name of the folder. You'll use the Explorer view to view and manage the files and folders in your workspace.\n\nNow that you have a folder open in VS Code, let's take a quick tour of the user interface.\n\nSwitch between views with the Activity Bar\n• Use the Activity Bar to switch between different views. Hover over the Activity Bar to see the name of each view and the corresponding keyboard shortcut. You can toggle a view open and closed by selecting the view again or pressing the keyboard shortcut.\n• When you select a view in the Activity Bar, the Primary Side Bar opens to show view-specific information. For example, the Run and Debug view enables you to configure and start debugging sessions.\n\nView and edit files with the Editor\n• Select the Explorer view in the Activity Bar, and select the New File... button to create a new file in your workspace.\n• Enter the name and press Enter. A file is added to your workspace and an Editor opens in the main area of the window.\n• Start typing some HTML code in the file. As you type, you should see suggestions popping up that help you complete your code (IntelliSense). You can use the Up and Down keys to navigate the suggestions, and Tab to insert the selected suggestion.\n• Add more files to your workspace and notice that each file opens a new Editor tab. You can open as many editors as you like and view them side by side vertically or horizontally. Learn more about side by side editing.\n\nAccess the terminal from the Panel area\n• VS Code has an integrated terminal. Open it by pressing ⌃` (Windows, Linux Ctrl+`). You can choose between different shells, such as PowerShell, Command Prompt, or Bash, depending on your operating system configuration.\n• In the terminal, enter the following command to create a new file in your workspace. The default working folder is the root of your workspace. Notice that the Explorer view automatically picks up and shows the new file.\n• You can open multiple terminals simultaneously. Select the Launch Profile dropdown to view the available shells and choose one.\n• Open the Command Palette by pressing ⇧⌘P (Windows, Linux Ctrl+Shift+P). You can also use the View > Command Palette... menu item. Many of the commands in VS Code are available through the Command Palette. When you install extensions, they can also add commands to the Command Palette. Notice that the Command Palette shows the default keyboard shortcut for commands that have one. You can use the keyboard shortcut to run the command directly.\n• The Command Palette supports different modes of operation:\n• After the symbol, start typing to filter the command list. For example, type to find commands to move the terminal to a new window.\n• Remove the character and start typing to search for files in your workspace. You can use the ⌘P (Windows, Linux Ctrl+P) keyboard shortcut to open the Command Palette and start searching for files directly.\n\nYou can customize almost every part of VS Code by configuring settings. You can use the Settings Editor to modify the settings in VS Code or directly modify the file.\n• Press ⌘, (Windows, Linux Ctrl+,) to open the Settings Editor (or select the File > Preferences > Settings menu item). Use the search box to filter the list of settings that are shown.\n• By default, VS Code doesn't automatically save modified files. Select a value from the Auto Save dropdown to change this behavior. VS Code automatically applies changes to settings. When you modify a file in your workspace, it should now be automatically saved.\n• To revert a setting to its default value, select the gear icon next to the setting and select Reset Setting. You can quickly find all modified settings by typing in the search box or selecting the Modified filter.\n• You can use the tabs in the Settings Editor to switch between User settings and Workspace settings. User settings apply across all your workspaces. Workspace settings only apply to the current workspace. Workspace settings override user settings. Get more information about settings in VS Code.\n\nVS Code has built-in support for JavaScript, TypeScript, HTML, CSS, and more. In this tutorial, you create a sample JavaScript file and use some of the code editing features that VS Code offers.\n\nVS Code supports many programming languages and in a next step, you'll install a language extension to add support for a different language, namely Python.\n• In the Explorer view, create a new file , and start typing the following JavaScript code: As you type, you should see suggestions popping up that help you complete your code (IntelliSense). You can use the Up and Down keys to navigate the suggestions, and Tab to insert the selected suggestion. Notice also the formatting of the code (syntax highlighting), to help you distinguish between different parts of the code.\n• When you put the cursor on the string , you should see a lightbulb icon appear to indicate there's a Code Action. You can also use the ⌃Space (Windows, Linux Ctrl+Space) keyboard shortcut to open the lightbulb menu.\n• Select the lightbulb icon, and then select Convert to template string. Code Actions are suggestions to apply quick fixes to your code. In this case, the Code Action converts into a template string , which is a special JavaScript construct to embed expressions in strings.\n\nLearn more about code editing features, IntelliSense, code navigation, and refactoring in VS Code.\n\nLet's use the built-in Git support to commit the changes you've made previously.\n• Select the Source Control view in the Activity Bar to open the Source Control view.\n• Make sure you have Git installed on your computer. If you don't have Git installed, you'll see a button in the Source Control view to install it on your machine.\n• Select Initialize Repository to create a new Git repository for your workspace. After you initialize a repository, the Source Control view shows the changes you've made in your workspace.\n• You can stage individual changes by hovering over a file and selecting next to a file. To stage all changes, hover over Changes and select the Stage All Changes button.\n• Enter a commit message, for example , and then select the Commit to commit the changes to your Git repository. Select Graph in the Source Control view to show a visual representation of the commit history of your Git repository.\n\nThere's a lot more to discover about source control in VS Code. Get more info about source control in VS Code.\n\nVS Code has a rich ecosystem of extensions that let you add languages, debuggers, and tools to your installation to support your specific development workflow. There are thousands of extensions available in the Visual Studio Marketplace.\n\nLet's install a language extension to add support for Python, or any other programming language you are interested in.\n• Select the Extensions view in the Activity Bar. The Extensions view enables you to browse and install extensions from within VS Code.\n• Enter Python in the Extension view search box to browse for Python-related extensions. Select the Python extension published by Microsoft, and then select the Install button.\n• Now, create a new Python file in your workspace, and start typing the following Python code: Notice that you now also get suggestions and IntelliSense for the Python code.\n\nVS Code has built-in support for running and debugging Node.js applications. In this tutorial, you use the Python extension you installed in the previous step to debug a Python program.\n\nLet's debug the program that you created in the previous step.\n• Make sure that Python 3 is installed on your computer. If there's no Python interpreter installed on your computer, you'll see a notification in the lower right corner of the window. Select Select Interpreter to open the Command Palette and select the Python interpreter you want to use or install one.\n• In the file, place the cursor on the line and press F9 to set a breakpoint. A red dot appears in the left margin of the editor, indicating that a breakpoint is set. With a breakpoint, you can pause the execution of your program at a specific line of code.\n• Notice that the program starts and that the execution stops at the breakpoint you set. Inspect the value of the variable by hovering over it in the editor while the execution is paused. You can view the value of variables at any time in the Variables view in the Run and Debug view.\n• Press the Continue button in the Debug toolbar or press F5 to continue the execution.\n\nThere are many more debugging features in VS Code, such as watch variables, conditional breakpoints, and launch configurations. Dive into the details of debugging in VS Code.\n\nEnhance your coding with AI and GitHub Copilot\n\nGitHub Copilot is an AI-powered assistant that helps you write code faster, and can help you with a wide range of tasks, such as code completion, code refactoring, and fixing errors.\n\nLet's get started by getting code suggestions from Copilot.\n• Make sure you have set up Copilot in VS Code. Follow the steps in our Copilot Setup guide. If you don't have a Copilot subscription yet, you can use Copilot for free by signing up for the Copilot Free plan and get a monthly limit of completions and chat interactions.\n• In the file, place the cursor at the end of the file and type this function header. GitHub Copilot will automatically suggest the rest of the function. Accept the code suggestion by pressing Tab.\n• Next, let's invoke our new function. Notice that there's a squiggle on the keyword, indicating that there's an error.\n• Put the cursor, on the keyword, select the lightbulb icon, and then select Fix with Copilot. GitHub Copilot will suggest a fix for the error. Select Accept if you're happy with the suggestion. You can also use the ⌘. (Windows, Linux Ctrl+.) keyboard shortcut to manually trigger a quick fix.\n\nThere's a lot more you can do with Copilot in VS Code. Discover more about GitHub Copilot in VS Code with our Copilot Quickstart.\n\nCongratulations! You've completed the tutorial and explored some of the key features of Visual Studio Code. Now that you've learned the basics of Visual Studio Code, get more info about how to:\n• Discover and run unit tests for your code"
    },
    {
        "link": "https://github.com/ritwickdey/live-server-web-extension/blob/master/docs/Setup.md",
        "document": "Neither the browser add-on nor the VS Code extension will host a server for: , or . It will give you the reloading function, so you do not need to refresh the page every time you save.\n\nIn other words. If you just want the reload feature when working with .html files, then you do not need this add-on at all.\n• Install and run a server on your machine: Servers and Frameworks\n• Place your app on the server you want to use and open your project there.\n• Enter the neccesary fields (screenshot below)\n• Actual Server Address: is the address where your server is located and the port.\n• Live Server Address: is the address where your VS code extension is running.\n• Push the -button in your editor's statusbar.\n• Install and run a server on your machine: Servers and Frameworks\n• Place your app on the server you want to use and open your project there.\n• Enter the neccesary values (code block below)\n• enable: whether it is enabled or not.\n• baseUri: is the path to the folder you want proxy from. The path is relative to the workspace.\n• proxyUri: is the address where your server (xampp or similar server) is located, and the port.\n• Push the -button in your editor's statusbar.\n\n: // This means that you change your real URL (current PHP url) // to another URL (which Live Sever starts). : : : :\n\nNote: You need to stay on the new host that will be provided by Live Server."
    },
    {
        "link": "https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer",
        "document": "[Wanna try LIVE SERVER++ (BETA) ? It'll enable live changes without saving file. https://github.com/ritwickdey/vscode-live-server-plus-plus ]\n\n[NOTE: In case if you don't have any or file in your workspace then you have to follow method no 4 & 5 to start server.]\n• None Open a project and click to from the status bar to turn the server on/off.\n• None Right click on a file from Explorer Window and click on . .\n• None Open a HTML file and right-click on the editor and click on .\n• None Hit to Open the Server and to Stop the server (You can change the shortcut form keybinding). [On MAC, and ]\n• None Open the Command Pallete by pressing or and type to start a server or type to stop a server.\n• Start or Stop server by a single click from status bar.\n• Support for any browser (Eg: Firefox Nightly) using advance Command Line.\n• Remote Connect through WLAN (E.g.: Connect with mobile) [Need Help? See FAQ Section]\n• Use preferable host name (localhost or 127.0.0.1).\n• Customizable Supporting Tag for Live Reload feature. (Default is or )\n• Support for any file even dynamic pages through Live Server Web Extension.\n\nAll settings are now listed here Settings Docs.\n\nAll FAQs are now listed here FAQ Docs\n• \n• [NEW] Intregation of with [#352 - Thanks to Kenneth Auchenberg]\n• [NEW] Fallback to random port If given port is busy. [#330 - Thanks to Ali Almohaya ]\n\nA special thanks to Max Schmitt, Joydip Roy & Ayo Adesugba for contributing their valueable time on this project.\n\nThis extension is licensed under the MIT License"
    },
    {
        "link": "https://reddit.com/r/webdev/comments/1dahcph/how_to_realtime_edit_a_website_from_vscode",
        "document": "I have a Drupal site which I want to real-time edit in VSCode. I mean editing the entire website's code files (like HTML, CSS, JS) in VSCode or another similar app.\n\nAny easy extension or method please? I am confused how to establish this connection.\n\nI have FileZilla also on my Mac, and it is connected successfully to my site."
    },
    {
        "link": "https://stackoverflow.com/questions/61517252/how-to-start-a-live-server-with-vscode",
        "document": "You could also try from the current directory.\n\nThis would serve the current directory tree for access.\n\nwill load contents of this directory on your accessible browser."
    },
    {
        "link": "https://medium.com/@aleksej.gudkov/how-to-use-live-server-in-visual-studio-code-for-real-time-web-development-c1914a4e7f24",
        "document": "Live Server is a powerful extension for Visual Studio Code (VS Code) that provides real-time previews of your web projects. It automatically refreshes your browser whenever you save your files, making it an invaluable tool for web developers. This article will guide you through how to install, configure, and use Live Server in VS Code for an efficient development workflow.\n\nWhy Use Live Server in VS Code?\n• Real-Time Preview: Automatically opens your HTML, CSS, and JavaScript files in the browser and updates them as you make changes.\n• Boosts Productivity: Live reload allows you to see changes immediately without manually refreshing the browser.\n• Simple Setup: Installing and using Live Server is quick and straightforward.\n• Cross-Browser Testing: You can test your project across different browsers simultaneously.\n\nSteps to Use Live Server in Visual Studio Code\n\nIf you don’t have Visual Studio Code installed yet, download it from the official website.\n• Go to the Extensions view by clicking on the Extensions icon in the Activity Bar on the side of the window or press .\n• Click on the Install button for the first result (the extension by Ritwick Dey).\n• Once installed, the Live Server icon will appear in the status bar at the bottom of the VS Code window.\n• Open the folder containing your web project in Visual Studio Code by selecting File > Open Folder.\n• Make sure your project includes an file or any HTML file you want to serve.\n• Right-click on your (or the HTML file you want to preview).\n• Select Open with Live Server from the context menu.\n• Alternatively, you can click the Go Live button in the bottom-right corner of the status bar in VS Code to start the server.\n• Your default web browser will open automatically and display your project. Any changes you make to the code will be automatically reflected in the browser after saving.\n\nTo stop the server, you can:\n• Click on the Port: [number] or Go Live button again in the bottom-right corner.\n\nYou can customize how Live Server behaves through the settings in VS Code. For example, you might want to change the default port or disable auto-open browser.\n• Press (Windows/Linux) or (Mac) to open the Command Palette.\n• Add or modify the following configurations:\n\nThis allows you to tailor the Live Server extension to fit your development needs."
    },
    {
        "link": "https://stackoverflow.com/questions/76913847/how-do-i-make-a-live-server-split-screen-using-visual-studio-code",
        "document": "As a beginner starting my first project, I wanted to download an extension so that I could see my code while coding it and do a split screen thing. So following instructions I got from chatgpt I installed the extension live server ( by ritwickdey) and when I clicked on its file, at the bottom right of the page there was a small symbol that says go live when you hover over it, I clicked and it directed to my web project live server which was fine now from there I have both my visual studio code and live web browser sever opened I go on VSC and right click on my HTML file specifically then click split to the right. I was expecting to have the live web browser split to the right vertically and adjustable but it wasn't it was my current HTML code but just copied and split to the right I tried other options from what it gave me before that remotely related to what I was trying to do like open with the live server but they didn't work. I tried some troubleshooting like copy-pasting the link into a different browser and trying again and closing the app and trying again. After that, I went searching for another way to do split screen I found one on a yt tutorial and started by going on the view option at the top left click on it, and from there going to the command palette then searching live server/open with the live server then from there I go on the HTML tab at the top right click then click split right I was expecting for it to work and have my live web server browser open but it didn't. Can anyone help me and tell me what I should do?"
    }
]