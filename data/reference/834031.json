[
    {
        "link": "https://developers.google.com/admob/android/rewarded",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nWhen building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.\n\nThe easiest way to load test ads is to use our dedicated test ad unit ID for Android rewarded ads:\n\nIt's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.\n\nFor more information about how the Mobile Ads SDK's test ads work, see Test Ads.\n\nRewarded ads are loaded by calling the static method on the class and passing in a . This is usually done in the method of an . Notice that like other format load callbacks, leverages to provide higher fidelity error details.\n\nTip: You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour.\n\nThe handles events related to displaying your . Before you show your , make sure to set the callback like so:\n\nWhen you show a rewarded ad, you will use an object to handle reward events.\n\nApps that require extra data in server-side verification callbacks should use the custom data feature of rewarded ads. Any string value set on a rewarded ad object is passed to the query parameter of the SSV callback. If no custom data value is set, the query parameter value won't be present in the SSV callback.\n\nThe following code sample demonstrates how to set custom data on a rewarded ad object before requesting an ad.\n\nIf you want to set the custom reward string, you must do so before showing the ad.\n\nIs there a timeout for the initialization call? After 10 seconds, the Google Mobile Ads SDK invokes the even if a mediation network still hasn't completed initialization. What if some mediation networks aren't ready when I get the initialization callback? We recommend loading an ad inside the callback of the . Even if a mediation network is not ready, the Google Mobile Ads SDK still asks that network for an ad. So if a mediation network finishes initializing after the timeout, it can still service future ad requests in that session. You can continue to poll the initialization status of all adapters throughout your app session by calling . How do I find out why a particular mediation network isn't ready? describes why an adapter is not ready to service ad requests. Does the callback always get called before the callback? For Google ads, all calls occur before . For ads served through mediation, the third-party ad network SDK's implementation determines the callback order. For ad network SDKs that provide a single close callback with reward information, the mediation adapter invokes before ."
    },
    {
        "link": "https://admob.google.com/home/resources/rewarded-ads-playbook",
        "document": "Sign into your account or talk to your account manager to learn more.\n\nRewarded ads are a popular ad format that gives users an opportunity to watch a video or engage with a playable ad in exchange for a reward within the app. Unlike traditional ad models that rely on a “push strategy” — where developers decide when to show a user an ad — rewarded ads follow a “pull strategy” — where users choose when to watch an ad.\n\nCreating a successful app business involves balancing the needs of three different groups: strong revenue for your business, a great app experience for users, and user engagement for advertisers. AdMob rewarded ads are a winning combination that delivers across the board.\n• Developers: Users are 20-40% more likely to opt in to rewarded ads versus other ad formats, meaning that developers see a higher and steadier flow of revenue.\n• Users: Rewarded ads provide a non-intrusive way to gain valuable items, such as premium app versions, by watching an ad instead of paying for them.\n• Advertisers: Rewards make ads more compelling, and combined with a better user experience, people are opting in to watch more rewarded ads — resulting in a higher return on ad spend (ROAS) for advertisers. We want people to keep playing our games, and rewarded ads helps us do that. It’s a good experience for the user to watch an ad in exchange for a reward. AdMob’s innovation has helped us scale, and we now use them for every game we launch.\n\nThe rewarded ad funnel has four steps: the ad prompt, the ad impression, the ad reward, and the moment the item is used. In this guide, we will be focusing on the two steps developers control: the ad prompt and the ad reward. Below are some general rules to follow as you begin to design your ad.\n\n1. Focus on clear messaging that delivers value to your user. Your prompt should clearly communicate the value exchange that is about to occur.\n• In this example from Playdots, their prompt is clear, in line with their app — including design and color scheme — and clearly explains that you will get a Booster Box in exchange for watching an ad.\n\n2. Find a value middle ground for your rewards. The rewards you offer should not be so valuable that they hurt your in-app purchases (IAPs), but valuable enough that users want to watch the ads in exchange for the reward(s).\n• In this example from Game Insight, rubies are valuable currency that can be exchanged for multiple in-game items. You’ll note, however, that players get only 5 rubies for watching an ad. If they need more, they will need to make an IAP.\n\nOptimizing your rewarded ad placements can be the push you need to see a major revenue boost. For example, when CookApps, a video game developer in South Korea, tailored the placement of their rewarded ads — their revenue grew 86%. Follow these best practices to make sure users can easily find your ad.\n\n1. Place the ad in an area that has high user traffic. One great place for your ad is the homepage, where 100% of your users are guaranteed to end up. You can also use pop-up opt-in prompts to increase discovery of your ad.\n• In this example by CookApps, they placed their rewarded ad prompt at the end of their game session — where active users will eventually end up. CookApps also made this rewarded ad prompt a pop-up, boosting discoverability and engagement. With rewarded ads, CookApps saw an 86% boost in ad revenue and a 4% increase in average revenue per daily active user (ARPDAU).\n\n2. Place your ad somewhere crucial to the user experience. Through rigorous user testing, you can find which parts of your app have higher opt-in rates. Showing ads areas with higher opt-in rates leads to increased engagement and more revenue.\n• In this example by Four Thirty-Three Publishing’s, Boxing Star game, they show a rewarded ad when a player has lost their boxing round. To further ensure the ad’s success, they make the ad appear more valuable by giving users 10 seconds to decide whether they want to opt-in or not, and making the ad value equivalent to 50 gold bars.\n\n3. Leverage your IAP store to drive purchases. Rewarded ads as a great way for users to discover other in-app rewards that might not be attainable through ads. Rewarded ads can also help you bring awareness to new app features — such as boosters, supplies, or premium access.\n• Another example by Four Thirty-Three places an ad prompt within their in-app game store. Users frequent this area of the app to watch ads, so it provides great exposure to other in-app rewards."
    },
    {
        "link": "https://support.google.com/admob/answer/6128543?hl=en",
        "document": "Publishers who wish to participate in AdMob must comply with our online AdSense Program policies\n\nAll publishers are required to adhere to the following policies, so please read them carefully. If you fail to comply with these policies without permission from Google, we reserve the right to disable ad serving to your app and/or disable your AdMob account at any time. If your account is disabled, you will not be eligible for further participation in the AdSense and/or AdMob program(s)."
    },
    {
        "link": "https://developers.google.com/admob/api",
        "document": "Save and categorize content based on your preferences.\n\nLearn the basics. Follow a tutorial to quickly get up and running. Client libraries provide better language integration, improved security, and support for making calls that require user authorization."
    },
    {
        "link": "https://support.google.com/admob/thread/241234345/policies-and-guidelines?hl=en",
        "document": "Get personalized optimization tips, understand your account health and set up completion on the improved \"My AdMob page\"."
    },
    {
        "link": "https://codelabs.developers.google.com/codelabs/admob-firebase-codelabs-101-android",
        "document": "Ads are a crucial part of your app's overall user experience. Good ad implementations can help improve your overall app experience and even improve user retention and engagement. For example, Rewarded ads enable you to provide users with in-app currency or items for watching video ads, so that users can reach new heights where otherwise they may get stuck and would have churned. However, making an excellent ads experience isn't easy. You may have questions like: How often should you show these ads? Where and when should you show them? What should the award be? Unfortunately, the answer differs from app to app and from placement to placement. There is no one-size-fits-all answer. With Google Analytics for Firebase, AdMob, and several other powerful yet easy-to-use tools that Firebase offers, fine tuning your app in a data-driven way has become much easier and more streamlined. Today, we'll be showing you how you can get started! This codelab is the first of three codelabs that will guide you through building an app called Awesome Drawing Quiz, a game that lets players guess the name of the drawing. It will demonstrate how you can incorporate Rewarded Ads and Firebase services in your game. In this codelab, you'll integrate Google Analytics for Firebase to record some important app events. Also, you'll learn how to read the app analytics shown in the Firebase console. Related Codelabs can be found at:\n• AdMob+Firebase 102 Android: Fine-tune the app behavior without an app update If you run into any issues (code bugs, grammatical errors, unclear wording, etc.) as you work through this codelab, please report the issue via the Report a mistake link in the lower left corner of the codelab.\n• How to setup Google Analytics for Firebase in your app\n• How to record the app events\n• How to read the app analytics shown in the Firebase console\n• A test device with Android 5.0+ with a USB cable to connect your device, or an Android Emulator running AVD (Android Virtual Device) with a system image that supports Play Store/Google APIs How would you rate your level of experience with AdMob? How would you rate your level of experience with Firebase?\n\nThe starter app already includes a dedicated Rewarded Video Ad Unit for your convenience. You are entirely free to skip this step if you don't want to create a new one under your AdMob account. Important: If you choose to run the codelab with a newly created ad unit, note that it usually takes a few hours for a new ad unit to be able to serve ads. To create a new AdMob app in your account, please follow the instructions as follows:\n• Go to the AdMob Console.\n• When asked \"Have you published your app on Google Play or the App Store,\" answer \"NO.\"\n• Name the app \"Awesome Drawing Quiz,\" choose \"Android\" as the Platform, then click \"Add\". Once you created an AdMob app in your account, follow the steps described below to create a new Rewarded Video Ad Unit.\n• Click the Apps menu in AdMob frontend, then select \"Awesome Drawing Quiz\" from the app list.\n• Provide the name of the ad unit as you prefer. Then, set the reward amount to 1, and the reward item to \"hint\" (this is the reward that the app currently gives to users). Click CREATE AD UNIT to create a new Rewarded Video ad unit.\n• When successfully created, you will see the instructions similar to the following:\n• Go back to the Android project, and update the AdMob app id and ad unit id constants to the ones that you have created in the previous step. <!-- Update the value with your AdMob app id --> <string name=\"admob_app_id\">YOUR_ADMOB_APP_ID</string>\n\nTip: You can also set up a Firebase Project by using Firebase Assistant in Android Studio. (Tools > Firebase) Create a new project from the Firebase Console\n• Go to the Firebase console.\n• Select Add Project, and name your project \"Awesome Drawing Quiz\". Make sure that the Enable Google Analytics for this project radio button is turned on.\n• Select the Google Analytics account you plan to use. For most, selecting the Default Account for Firebase option should suffice, but if you have another Google Analytics account you would like to use, select that here.\n• From the overview screen of your new project, click Add Firebase to your Android app.\n• Leave the SHA-1 field blank since SHA-1 is not required for this project. Next, you will be prompted a screen where you can download a configuration file that contains all the necessary Firebase metadata for your app. Click Download google-service.json and copy the file into the app directory in your project. Let's start by adding the version of each dependency required to integrate Firebase in the project. Open file located at the project root, then add google-services plugin, Firebase Analytics SDK and Firebase Core SDK version. The google-services plugin uses the file to configure your application to use Firebase. Add google-services as a classpath in the file located at the project root directory. Then, apply the google-services plugin by adding a line in file as follows: Still in your file, add the Analytics SDK to the app dependencies. To make sure that all dependencies are available to your app, sync your project with Gradle files. Select File > Sync Project with Gradle Files menu to sync your project with Gradle files.\n\nNote: If you're going to use the dedicated Rewarded Ad unit provided by this Codelab, feel free to skip this step. Complete the steps below to link your apps to Firebase.\n• Sign in to your AdMob account at https://apps.admob.com.\n• Select \"Awesome Drawing Quiz\". If you don't see it in the list of recent apps, you can click View all apps to search a list of all of the apps you've added to AdMob.\n• Select \"Link to an existing Firebase project and create a new Firebase app\" option. Then Select \"Awesome Drawing Quiz\" project from the dropdown menu.\n• After you click the \"CONTINUE\" button, you'll see \"Successfully linked\" message. Click the \"DONE\" button to finish. Once you link your AdMob app to Firebase Project, it will unlock some additional features both on AdMob and Firebase console as follows: Note: It takes a few hours for the following stats to populate in the AdMob and Google Analytics for Firebase console. From the Revenue card, you can take a holistic look at all possible revenue streams in a single place. Supported revenue sources are as follows: From the user metrics card, you can see how changes to your ads experience might impact user behavior. The Rewarded Ads Report offers a variety of metrics that will help publishers understand how users are interacting with their rewarded ads. After you link your AdMob app to Firebase, Total revenue card on Firebase dashboard will display the revenue from the AdMob along with in-app-purchases and e-commerce purchases. Ad-specific events (click, impression, and reward events) are automatically collected and available for use in Google Analytics for Firebase.\n\nOnce you compile and run the project, you'll see the following screen when the app starts. Once you click START A GAME, you'll see a drawing on the screen. Your mission is to guess the name of the drawing by using the hint displayed on the top, from which you can infer the first letter and the length of the drawing's name. If you don't have any idea what the name of the drawing is, you can skip the level by clicking the ‘SKIP' button. You may want an additional clue that helps you guess the answer. You can get an extra clue by clicking the ‘HINT' button and watching a Rewarded Video ad. After you complete watching the ad, one extra letter will be disclosed as a reward.\n\nTo deeply understand the user journey in the Awesome Drawing Quiz, you will define a few custom events that track user's behavior in the game as follows: when a user starts a new level (a new drawing quiz) within a stage. (there are 6 levels in one stage) when a user taps the hint button, and is prompted to watch a Rewarded Video Ad Description of each parameter associated with each event is as follows: Name of the drawing shown in the level (e.g., \"banana\") An ad unit id used to display a Rewarded Video Ad An ad unit id used to display a Rewarded Video Ad Name of the drawing shown in the level (e.g., \"banana\") Whether a user used a hint (watched a Rewarded Video Ad) or not to clear a level (1: used a hint / 0: cleared a level without a hint) Name of the drawing shown in the level (e.g., \"banana\") Whether a user used a hint (watched a Rewarded Video Ad) or not to clear a level (1: used a hint / 0: cleared a level without a hint) Number of levels cleared in the game Note: Google Analytics for Firebase lets you specify up to 25 custom parameters per event. To log the analytics event with ease, you will create a helper class to manage custom events. First, create a new Kotlin file (not a Kotlin class) and name it under package. Create fields that define the name of your custom events and their parameters. Next, add extension functions that help you log custom events in your game. Note that most of the custom events include parameters so that you have more context of each event. Also note that a couple of event names and parameters ( and ) are already defined by Analytics, so we're going to use those. ... fun FirebaseAnalytics.logGameStart() = logEvent(EVENT_GAME_START, null) fun FirebaseAnalytics.logLevelStart(levelName: String) { logEvent(FirebaseAnalytics.Event.LEVEL_START) { param(FirebaseAnalytics.Param.LEVEL_NAME, levelName) } } fun FirebaseAnalytics.logLevelWrongAnswer(levelName: String) { logEvent(EVENT_LEVEL_WRONG_ANSWER) { param(FirebaseAnalytics.Param.LEVEL_NAME, levelName) } } fun FirebaseAnalytics.logAdRewardPrompt(adUnitId: String) { logEvent(EVENT_AD_REWARD_PROMPT) { param(PARAM_AD_UNIT_ID, adUnitId) } } fun FirebaseAnalytics.logAdRewardImpression(adUnitId: String) { logEvent(EVENT_AD_REWARD_IMPRESSION) { param(PARAM_AD_UNIT_ID, adUnitId) } } fun FirebaseAnalytics.logLevelSuccess( levelName: String, numberOfAttempts: Int, elapsedTimeSec: Int, hintUsed: Boolean ) { logEvent(EVENT_LEVEL_SUCCESS) { param(FirebaseAnalytics.Param.LEVEL_NAME, levelName) param(PARAM_NUMBER_OF_ATTEMPTS, numberOfAttempts.toLong()) param(PARAM_ELAPSED_TIME_SEC, elapsedTimeSec.toLong()) param(PARAM_HINT_USED, if (hintUsed) 1 else 0) } } fun FirebaseAnalytics.logLevelFail( levelName: String, numberOfAttempts: Int, elapsedTimeSec: Int, hintUsed: Boolean ) { logEvent(EVENT_LEVEL_FAIL) { param(FirebaseAnalytics.Param.LEVEL_NAME, levelName) param(PARAM_NUMBER_OF_ATTEMPTS, numberOfAttempts.toLong()) param(PARAM_ELAPSED_TIME_SEC, elapsedTimeSec.toLong()) param(PARAM_HINT_USED, if (hintUsed) 1 else 0) } } fun FirebaseAnalytics.logGameComplete( numberOfCorrectAnswers: Int ) { logEvent(EVENT_GAME_COMPLETE) { param(PARAM_NUMBER_OF_CORRECT_ANSWERS, numberOfCorrectAnswers.toLong()) } } In the class, add a new property for the instance. Next, in the class, add a new property as you previously did in . Next, in the class, add the function and update the function to pass the instance to the . Now you're ready to implement custom events. First, in the function, call to indicate a game has started. Because is an extension function of class, you can call it from the instance of the class. Next, in the function, add and events. Next, in the function, add level_fail event to mark the level as failed. Next, implement and functions to track the user's behavior regarding the Rewarded Video Ad. Finally, modify and function to add level_start and game_complete custom events.\n\nYou can use DebugView in the Firebase console to verify that events are being correctly logged. DebugView enables you to see the raw event data logged by your app on development devices in near real-time. This is very useful for validation purposes during the instrumentation phase of development and can help you discover any errors in your analytics implementation. Generally, events logged in your app are batched together over a period of approximately one hour and uploaded together. To validate your analytics implementation on the fly, you need to enable Debug mode on your development device to upload events with minimal delays. To enable Debug mode, complete the following steps:\n• Execute the following command (make sure test Android device is connected to your computer or Android Emulator is running): This behavior persists until you explicitly disable Debug mode by executing the following command: Once you have enabled Debug mode on your test device, go to your project in the Firebase console and select Analytics > DebugView from the menu. Then, on your test device, play your game to see events being logged and shown on the DebugView report. You can access detailed information about each event by clicking on the event name. As an example, the following screenshot shows parameter details associated with the event. Please refer to DebugView help center article for more details.\n\n10. Get insights from the Event report Note: It takes a few hours for data to populate in Google Analytics for Firebase, so your graph might not have any data at the moment. To look at the dashboard with real app data, you can access the Firebase demo project. It is a standard Firebase project with fully functioning Analytics, Remote Config features, etc. As you've added a few events in the game, you should be able to answer the questions regarding the user behavior of the game. Here are a few insights that you can get from the Firebase events report. Which level has the highest number of wrong answers? To answer this question, you should find out how many events were triggered per each level. Click the from the events report. In the event report, find the card. You'll see the values associated with the parameter on that card as follows. According to the above screenshot, you can easily find out the horizon has the highest number of wrong answers, which means it's difficult to users compared to the other levels. By using the insight you've got from here, you can decide not to provide difficult levels to novice users to keep a high retention rate. How many attempts were made to clear a level, on average? In the Awesome Drawing Quiz, users can submit the answer to each level as much as they want. Because you've enabled parameter reporting on the parameter in the event, you can see the detailed metrics for that parameter. Click the event from the events report. In the event report, find the card. You'll see the average number of attempts on that card as follows: You can use the insight from here to optimize the difficulty of the game on average. For example, if the average number of attempts are too close to 1, you may consider making the game a little bit more challenging. Did users try to solve the question by getting a hint, even though they failed to clear a level at last? When a user decides to skip a level, a event is triggered. There can be many reasons for the user's decision. However, since the game can give them a hint after they watch a Rewarded Video Ad, it's important to know whether the user tried to clear the level with the help of the hint. Click the event from the events report. In the event report, find the card. You'll see the average number of event parameters. Note that the parameter's value is 1 if a hint was used and 0 if a hint wasn't used. If the numbers on the card are close to 0, it's the signal that the reward (hint) is not helpful enough for these users. Also, you're losing the opportunity to increase the revenue from a Rewarded Video Ad. Therefore, you should consider offering a larger reward, so users can engage with the game more deeply, providing you with an uplift in revenue from Rewarded Video Ads. How many levels were cleared in each game, on average? There are a total of 6 levels for each game in the Awesome Drawing Quiz. Once the user finishes 6 levels (no matter whether they cleared or failed each level), a event is triggered with as a parameter. The parameter indicates the number of levels where the user provided a correct answer. Click event from the events report. In the game_complete event report, find the card. You'll see the average number of event parameters. If the average number of cleared levels is too low, you should consider rearranging the levels in the game to help people beat the earlier levels more easily, so they can keep playing your game without losing interest."
    },
    {
        "link": "https://admob.google.com/home/resources/rewarded-ads-playbook",
        "document": "Sign into your account or talk to your account manager to learn more.\n\nRewarded ads are a popular ad format that gives users an opportunity to watch a video or engage with a playable ad in exchange for a reward within the app. Unlike traditional ad models that rely on a “push strategy” — where developers decide when to show a user an ad — rewarded ads follow a “pull strategy” — where users choose when to watch an ad.\n\nCreating a successful app business involves balancing the needs of three different groups: strong revenue for your business, a great app experience for users, and user engagement for advertisers. AdMob rewarded ads are a winning combination that delivers across the board.\n• Developers: Users are 20-40% more likely to opt in to rewarded ads versus other ad formats, meaning that developers see a higher and steadier flow of revenue.\n• Users: Rewarded ads provide a non-intrusive way to gain valuable items, such as premium app versions, by watching an ad instead of paying for them.\n• Advertisers: Rewards make ads more compelling, and combined with a better user experience, people are opting in to watch more rewarded ads — resulting in a higher return on ad spend (ROAS) for advertisers. We want people to keep playing our games, and rewarded ads helps us do that. It’s a good experience for the user to watch an ad in exchange for a reward. AdMob’s innovation has helped us scale, and we now use them for every game we launch.\n\nThe rewarded ad funnel has four steps: the ad prompt, the ad impression, the ad reward, and the moment the item is used. In this guide, we will be focusing on the two steps developers control: the ad prompt and the ad reward. Below are some general rules to follow as you begin to design your ad.\n\n1. Focus on clear messaging that delivers value to your user. Your prompt should clearly communicate the value exchange that is about to occur.\n• In this example from Playdots, their prompt is clear, in line with their app — including design and color scheme — and clearly explains that you will get a Booster Box in exchange for watching an ad.\n\n2. Find a value middle ground for your rewards. The rewards you offer should not be so valuable that they hurt your in-app purchases (IAPs), but valuable enough that users want to watch the ads in exchange for the reward(s).\n• In this example from Game Insight, rubies are valuable currency that can be exchanged for multiple in-game items. You’ll note, however, that players get only 5 rubies for watching an ad. If they need more, they will need to make an IAP.\n\nOptimizing your rewarded ad placements can be the push you need to see a major revenue boost. For example, when CookApps, a video game developer in South Korea, tailored the placement of their rewarded ads — their revenue grew 86%. Follow these best practices to make sure users can easily find your ad.\n\n1. Place the ad in an area that has high user traffic. One great place for your ad is the homepage, where 100% of your users are guaranteed to end up. You can also use pop-up opt-in prompts to increase discovery of your ad.\n• In this example by CookApps, they placed their rewarded ad prompt at the end of their game session — where active users will eventually end up. CookApps also made this rewarded ad prompt a pop-up, boosting discoverability and engagement. With rewarded ads, CookApps saw an 86% boost in ad revenue and a 4% increase in average revenue per daily active user (ARPDAU).\n\n2. Place your ad somewhere crucial to the user experience. Through rigorous user testing, you can find which parts of your app have higher opt-in rates. Showing ads areas with higher opt-in rates leads to increased engagement and more revenue.\n• In this example by Four Thirty-Three Publishing’s, Boxing Star game, they show a rewarded ad when a player has lost their boxing round. To further ensure the ad’s success, they make the ad appear more valuable by giving users 10 seconds to decide whether they want to opt-in or not, and making the ad value equivalent to 50 gold bars.\n\n3. Leverage your IAP store to drive purchases. Rewarded ads as a great way for users to discover other in-app rewards that might not be attainable through ads. Rewarded ads can also help you bring awareness to new app features — such as boosters, supplies, or premium access.\n• Another example by Four Thirty-Three places an ad prompt within their in-app game store. Users frequent this area of the app to watch ads, so it provides great exposure to other in-app rewards."
    },
    {
        "link": "https://firebase.google.com/docs/admob",
        "document": "Firebase is back at Cloud Next on April 9 - 11. Register now.\n\nSave and categorize content based on your preferences.\n\nShow ads from millions of Google advertisers in real time or use AdMob mediation to earn from over 40 premium networks. Simplify your ad operations, improve competition, and earn more, for free. AdMob mediation has ad network optimization built in, which automatically adjusts the positions of your other ad networks in your mediation stack, which maximizes your revenue. Native ads create a positive user experience as you monetize by matching the look and feel of your app. Choose from different ad templates, customize them, and experiment with different layout. When your app is a global or domestic hit, you can monetize users quickly with AdMob, by showing ads to users in more than 200 markets. Do you have more than one app? House ads from AdMob is a free tool that enables you to cross-promote your apps to your user base, across your family of apps. is the premier monetization platform for mobile. While generating ad revenue, also produces its own monetization reports that you can use to make smarter decisions about product strategy.\n\nHow does it work?\n\nGoogle AdMob helps you monetize your mobile app through in-app advertising. Ads can be displayed using various format options which are seamlessly added to platform native UI components. On Android, you can additionally display in-app purchase ads, allowing users to purchase advertised products from within your app.\n\nTo display ads, you'll need an AdMob-registered app that integrates the Google Mobile Ads SDK (iOS | Android). You can then activate one or more Ad Unit IDs which are unique identifiers for the places in your app to display ads.\n\nThe Mobile Ads SDK helps you gain insights about your users, drive more in-app purchases, and maximize ad revenue. To do all this, the default integration of the SDK collects device information, publisher-provided location information, and general in-app purchase information (such as item purchase price and currency).\n\nTo make informed decisions about optimizing your app's user experience and your ad revenue, you'll need metrics and data from your app. Working together, AdMob, Firebase, and Google Analytics offer additional levels of configuration to help you achieve your optimization goals.\n• Enable user metrics in your AdMob account to access new data and powerful reports, such as the rewarded report, that may help inform your monetization strategy.\n• None Explore and work with your analytics data via Firebase Link your AdMob app to Firebase to help you improve app monetization and user engagement. For example, you can build custom audiences and even use BigQuery with your analytics data.\n• None Access more customization features for your analytics data Add the Firebase SDK for Google Analytics to implement more customized analytics (like custom events), view more complete user metrics in your AdMob account, and start using other Firebase products.\n\nLearn more about the benefits of these additional levels of configuration!\n• None Learn how to get started on iOS or Android.\n• None Follow the quickstart, a tutorial that guides you through setting up AdMob on iOS and Android.\n• None Optimize ad monetization for your app by trying out different ad formats or configurations with a small subset of users, and then making data driven decisions about implementing the ad for all your users. To learn more, check out the following tutorials:"
    },
    {
        "link": "https://firebase.google.com/docs/admob/android/quick-start",
        "document": "Firebase is back at Cloud Next on April 9 - 11. Register now.\n\nSave and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nThis quickstart guide is for publishers and developers who want to use AdMob to monetize an app that's built with Firebase. If you don't plan to include Firebase in your app, visit the standalone AdMob guide instead.\n\nIf you haven't yet, learn about all the benefits of using AdMob, Firebase, and Google Analytics together.\n• None If you don't already have a Firebase project and a Firebase app, follow the Firebase getting started guide: Add Firebase to your Android project.\n• None Make sure that Google Analytics is enabled in your Firebase project:\n• None If you're creating a new Firebase project, enable Google Analytics during the project creation workflow.\n• None If you have an existing Firebase project that doesn't have Google Analytics enabled, you can enable Google Analytics from the Integrations tab of your . Note: to your app is optional but strongly recommended. Learn more about the Adding the Firebase SDK forto your app is optional but strongly recommended. Learn more about the benefits of adding the Firebase SDK for\n\nStep 1: Set up your app in your account\n• None Register your app as an AdMob app.\n• None Sign into or sign up for an AdMob account.\n• None Register your app with AdMob. This step creates an AdMob app with a unique AdMob App ID that you'll need later in this guide. You'll be asked to add the Mobile Ads SDK to your app. Find detailed instructions for this task later in this guide.\n• None Link your AdMob app to your Firebase app. This step is optional but strongly recommended. Learn more about the benefits of enabling user metrics and linking your AdMob app to Firebase. Complete the following two steps in the Apps dashboard of your AdMob account:\n• None Enable User Metrics to allow AdMob to process and display curated analytics data in your AdMob account. It's also a required setting for you to link your AdMob app to Firebase.\n• None Link your AdMob app to your existing Firebase project and Firebase app. Make sure that you enter the same package name as you entered for your Firebase app. Find your Firebase app's package name in the Your apps card of your .\n\nStep 2: Add your App ID to your file\n\nAdd your AdMob App ID to your app's file by adding the tag as shown below.\n• None Add the dependency for the Google Mobile Ads SDK to your module (app-level) Gradle file (usually or ):\n• This call initializes the SDK and calls back a completion listener once initialization is complete (or after a 30-second timeout). Call this method only once and as early as possible, ideally at app launch. Warning: Ads may be preloaded by the SDK or mediation partner SDKs upon calling . If you need to take any action before loading ads, make sure that you do so before initializing the SDK. Here are some examples of actions that might be needed prior to initialization:\n• Obtain consent from users in the European Economic Area (EEA)\n• Set any request-specific flags (such as or ) Learn more in the AdMob documentation. Here's an example of how to call the method in an Activity:\n\nAfter its initialization, the Mobile Ads SDK automatically starts logging analytics events and user properties from your app. You can view this data without adding any additional code to your app or implementing any ads. Here's where you can see this analytics data:\n• None In the User metrics card of your AdMob account (Home or Apps dashboard), you can view curated user metrics derived from the collected analytics data, like average session duration, , and retention.\n• None In the Analytics dashboard of the Firebase console, you can view aggregated statistics and summaries of key metrics. If you add the Firebase SDK for Google Analytics, you can also mark conversions for ad campaigns and build custom audiences in the Firebase console.\n\nNote that to better represent and metrics, you might want to include data from an analytics custom event called in the revenue calculation for these metrics (learn how).\n\nStep 5: (Optional) Use more features of and Firebase\n\nTake advantage of more opportunities and features to improve app monetization and user engagement:\n• None Add and use the Firebase SDK for Google Analytics\n• None Include event data in the revenue calculation for and metrics. To learn more, visit the guide for using Google Analytics and Firebase with AdMob apps.\n• None Use other Firebase products in your app After you add the Firebase SDK for Google Analytics, use other Firebase products to optimize ads in your app.\n• None Remote Config enables you to change the behavior and appearance of your app without publishing an app update, at no cost, for unlimited daily active users.\n• None A/B Testing gives you the power to test changes to your app’s UI, features, or engagement campaigns to learn if they make an impact on your key metrics (like revenue and retention) before rolling the changes out widely.\n• Try out different ad formats or configurations with a small subset of users, and then make data driven decisions about implementing the ad for all your users. To learn more, check out the following tutorials:\n\nStep 6: Choose an ad format to implement in your app\n\nAdMob offers a number of different ad formats, so you can choose the format that best fits the user experience of your app. Click a button for an ad format to view detailed implementation instructions in the AdMob documentation.\n\nRectangular ads that appear at the top or bottom of the device screen\n\nBanner ads stay on screen while users are interacting with the app, and can refresh automatically after a certain period of time. If you're new to mobile advertising, they're a great place to start.\n\nFull-screen ads that cover the interface of an app until closed by the user\n\nInterstitial ads are best used at natural pauses in the flow of an app's execution, such as between levels of a game or just after a task is completed.\n\nCustomizable ads that match the look and feel of your app\n\nNative ads are a component-based ad format. You decide how and where Native ads are placed so that the layout is more consistent with your app's design. By choosing fonts, colors, and other details for yourself, you can create natural, unobtrusive ad presentations that can add to a rich user experience.\n\nAds that reward users for watching short videos and interacting with playable ads and surveys\n\nRewarded (or \"reward-based\") ads can help monetize free-to-play users."
    },
    {
        "link": "https://developers.google.com/admob/ios/rewarded",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nRewarded ads are ads that users have the option of interacting with in exchange for in-app rewards. This guide shows you how to integrate rewarded ads from AdMob into an iOS app. Read some customer success stories: case study 1, case study 2.\n\nWhen building and testing your apps, make sure you use test ads rather than live, production ads. Failure to do so can lead to suspension of your account.\n\nThe easiest way to load test ads is to use our dedicated test ad unit ID for iOS rewarded ads:\n\nIt's been specially configured to return test ads for every request, and you're free to use it in your own apps while coding, testing, and debugging. Just make sure you replace it with your own ad unit ID before publishing your app.\n\nFor more information about how the Mobile Ads SDK's test ads work, see Test Ads.\n\nThe primary steps to integrate rewarded ads are as follows:\n• Display the ad and handle the reward event\n\nLoading an ad is accomplished using the method on the class.\n\nTip: You can use ad load calls to build up a cache of preloaded ads before you intend to show them, so that ads can be shown with zero latency when needed. Since ads expire after an hour, you should clear this cache and reload with new ads every hour.\n\nApps that require extra data in server-side verification callbacks should use the custom data feature of rewarded ads. Any string value set on a rewarded ad object is passed to the query parameter of the SSV callback. If no custom data value is set, the query parameter value won't be present in the SSV callback.\n\nThe following code sample demonstrates how to set custom data on a rewarded ad object before requesting an ad.\n\nIn order to receive notifications for presentation events, you must implement the protocol and assign it to the property of the returned ad. The protocol handles callbacks for when the ad presents successfully or unsuccessfully, and when it is dismissed. The following code shows how to implement the protocol and assign it to the ad:\n\nis a one-time-use object. This means that once a rewarded ad is shown, it cannot be shown again. A best practice is to load another rewarded ad in the method on so that the next rewarded ad starts loading as soon as the previous one is dismissed.\n\nDisplay the ad and handle the reward event\n\nBefore displaying a rewarded ad to users, you must present the user with an explicit choice to view rewarded ad content in exchange for a reward. Rewarded ads must always be an opt-in experience.\n\nWhen presenting your ad, you must provide a object to handle the reward for the user.\n\nThe following code presents the best method for displaying a rewarded ad.\n\nView the full rewarded ads examples in your preferred language:"
    }
]