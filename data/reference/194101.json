[
    {
        "link": "https://geeksforgeeks.org/strlen-function-in-c",
        "document": "The strlen() function in C calculates the length of a given string. The strlen() function is defined in string.h header file. It doesn’t count the null character ‘\\0’.\n\nThe syntax of strlen() function in C is as follows:\n• str: It represents the string variable whose length we have to find.\n• This function returns the integral length of the string passed.\n\nExample of C strlen()\n\nThe below programs illustrate the strlen() function in C:\n\nThe following points should be kept in mind while using strlen():\n• strlen() does not count the NULL character ‘\\0’.\n• The time complexity of strlen() is O(n), where n is the number of characters in the string.\n• Its return type is size_t ( which is generally unsigned int )."
    },
    {
        "link": "https://geeksforgeeks.org/scanf-in-c",
        "document": "In C, scanf is a function that stands for Scan Formatted String. It is the most used function to read data from stdin (standard input stream i.e. usually keyboard) and stores the result into the given arguments. It can accept character, string, and numeric data from the user using standard input. It also uses format specifiers like printf.\n\nExplanation: In this example, scanf(“%d”, &n) reads an integer from the keyboard and stores it in the integer variable n. The %d format specifier indicates that an integer is expected, and &n provides the memory address of n so that scanf can store the input value there.\n\nThe syntax of scanf() in C is similar to the syntax of printf().\n• format: It is the format string that contains the format specifiers(s).\n• address_of_args: Address of the variables where we want to store the input.\n\nWe use & operator to find the address of the variables by appending it before the variable name. If you’re interested in learning more about input handling and integrating it into complex data structures, the C Programming Course Online with Data Structures covers practical applications of input functions in C.\n\nTo know more about format specifiers, refer to this article – Format Specifiers in C\n\nThe scanf in C returns three types of values:\n• >0: The number of values converted and assigned successfully.\n• 0: No value was assigned.\n• <0: Read error encountered or end-of-file (EOF) reached before any assignment was made.\n\nThe below examples demonstrate the use of scanf for different types of input:\n\nExplanation: The scanf(“%f”, &f) statement reads a floating-point number from user input and stores it in the variable f. The %f format specifier ensures the correct interpretation of the input, and &f passes the memory address of f to store the value.\n\nTake Two Integers as Input\n\nExplanation: scanf(“%d %d”, &a, &b) read two integers from the standard input. The space in the format string %d %d tells scanf to expect whitespace (spaces, tabs, or newlines/enters) between the two numbers. When you press Enter after typing the first number, it’s interpreted as whitespace, and scanf proceeds to read the second integer. The values are then stored in the integer variables a and b, respectively.\n\nExplanation: The scanf(“%s”, name) function reads a single input until the first space, so when “Abhishek Sharma” is entered, only “Abhishek” will be stored in name. Also, we don’t need to use the &operator for the address of name.\n\nIn C, scanf() provides a feature called scanset characters, which allows you to read custom pattern of input. For example, reading only specific characters, reading text with whitespaces, etc.\n• set: A sequence of characters that defines the pattern. This can include individual characters, ranges of characters (e.g., a-z for lowercase letters), or negated sets (e.g., [^0-9] to exclude digits).\n\nExplanation: The scanf(“%[^\n\n]s”, name) function reads an entire line, including spaces, until a newline (\n\n) is encountered. This allows storing full names like “Abhishek Sharma” in the name array. The program then prints the entered name using printf()."
    },
    {
        "link": "https://programiz.com/c-programming/library-function/string.h/strlen",
        "document": "Learn to code solving problems and writing code with our hands-on C Programming course.\n\nLearn to code solving problems with our hands-on C Programming course!"
    },
    {
        "link": "https://sternumiot.com/iot-blog/scanf-c-function-syntax-examples-and-security-best-practices",
        "document": "What Is the scanf() C Function\n\nIn C programming, the function is used to read formatted input from the standard input device ( ). The< code>scanf() function is part of the standard library and is used to receive data from the user. The syntax of the function is as follows:\n\nThis function reads the data, formats it according to the parameter format, and then stores the data in the addresses of the variables passed. In essence, the function allows us to interact with our programs and input data directly.\n\nUnderstanding the function is important for any C programmer. It allows you to create interactive programs, capture user input, and manipulate data effectively. At the same time, the improper use of can open the door to buffer overflow vulnerabilities.\n\nCommon Use Cases for the scanf() Function\n\nOne of the most common uses of the C Function is reading single and multiple values from user input. This function can read a variety of data types, including integers, floating-point numbers, and characters. For instance, if you want to read an integer, you would use the %d format specifier, and for a floating-point number, you would use %f.\n\nReading multiple values is also straightforward. You simply need to include multiple format specifiers and variables in the function. For example, if you want to read two integers, you would use:\n\nThis tells the function to read two integers and store them in the variables num1 and num2.\n\nThe function is also capable of reading strings and lines of text. This is done using the %s format specifier. For instance, to read a string, you would use:\n\nThis tells the function to read a string and store it in the variable str. However, the function stops reading a string when it encounters a white space. To read a full line of text, including white spaces, you can use the function instead. This function reads a line of text until it encounters a newline character or reaches the end of the specified length.\n\nThe function can also read complex data structures, such as arrays and structures. For instance, to read an array of integers, you would use a loop with the function inside it.\n\nEach iteration of the loop would read a single integer and store it in the current index of the array. Similarly, to read a structure, you would use the function for each member of the structure.\n\nLet’s take a deeper look at how the C function works. The syntax of the function is as follows:\n\nThe function takes two parameters: a constant character pointer to a format string, and a variable number of arguments. The format string specifies the type and quantity of data to be read, and the arguments are the variables in which to store the data.\n\nHere’s a simple code example that demonstrates how it works:\n\nIn this example, the program prompts the user to enter a number. The function then reads the number and stores it in the variable num. The program then prints the number back to the user.\n\nThe syntax of these functions is as follows:\n\nThe and functions are common alternatives to :\n• The function reads a line from stdin into the buffer pointed to by str, until it reaches either a terminating newline or EOF.\n• In contrast, the function reads in at most (n-1) characters, where n is the length of the string, and stores them into the buffer pointed to by the str ariable. Both functions have their unique advantages and drawbacks.\n\nThe function does not respect the buffer’s boundaries, which can lead to a buffer overflow. On the other hand, pays respect to the buffer’s boundaries, thus it is more secure than .\n\nHowever, note that leaves the newline character in the input buffer, which needs to be handled properly to avoid unexpected behavior.\n\nThe syntax of these functions is as follows:\n\nThe and functions are two other alternatives to :\n• reads the next character from the stream and returns it as an unsigned char cast to an int, or EOF on end of file or error. It is excellent for reading formatted input from files\n• reads data from the stream and stores it according to the parameter format into the locations pointed by the additional arguments. It can be used to read a file character by character\n\nIn terms of security, the function, can lead to buffer overflows if not properly implemented. The function is not as vulnerable, but it can present other risks:\n• It reads input character by character, which can be slower and might expose to attacks where the attacker controls the input rate (DoS)\n• Without proper error and EOF handling, it can potentially lead to unexpected program behavior\n\nHere are a few best practices that can help you use the scanf() function safely and avoid security vulnerabilities.\n\nWhen using the , always remember to check its return value, which indicates the number of items successfully read. If the return value is less than the number of items you tried to read, it means that an error has occurred or the end of file has been reached.\n\nWhen using to read strings, it’s important to limit the string length to prevent buffer overflow. This can be done by using the width specifier in the format string. For example, if you have a character array of size 100, you can use this code to read a string:\n\nThis will ensure that the function reads at most 99 characters, leaving one space for the null terminator.\n\nThe %n format specifier in is used to store the number of characters read so far. However, it’s important to be aware that %n does not consume any input and can lead to unexpected results if not used correctly. Thus, it’s advisable to use %n with caution.\n\nBefore using a variable with , always be sure to initialize it. Using uninitialized variables can lead to undefined behavior and hard-to-find bugs. Thus, it’s a good practice to always initialize your variables – here an in general.\n\nThe vast majority of IoT/embedded devices use C code, and are prone to related memory and code vulnerabilities, including vulnerabilities stemming from improper use of and similar functions.\n\nSternum’s patented EIV™ (embedded integrity verification) technology protects from these with runtime (RASP-like) protection that deterministically prevents all memory and code manipulation attempts, offering blanket protection from a broad range of software weaknesses (CWEs).\n\nEmbedding itself directly in the firmware code, EIV™ is agentless and connection agnostic. Operating at the bytecode level, it is also universally compatible with any IoT device or operating system (RTOS, Linux, OpenWrt, Zephyr, Micirum, FreeRTOS, etc.) and has a low overhead of only 1-3%, even on legacy devices.\n\nThe runtime protection features are also augmented by (XDR-like) threat detection capabilities of Sternum’s Cloud platform, its AI-powered anomaly detection, and extended monitoring capabilities.\n\nTo learn more, check out these case studies of how this technology was used to:\n\nAlso check out the video below to see Sternum EIV™ in action, as it provides out-of-the-box mitigation of Ripple20 malware, used for memory corruption attacks."
    },
    {
        "link": "https://tutorialspoint.com/c_standard_library/c_function_strlen.htm",
        "document": "The C library strlen() function is used to calculates the length of the string. This function doesn't count the null character '\\0'.\n\nIn this function, we pass the pointer to the first character of the string whose length we want to determine and as a result it returns the length of the string.\n\nFollowing is the syntax of the C library strlen() function −\n• None str − This is the string whose length is to be found.\n\nThis function returns the length of the string.\n\nFollowing is the C library program that illustrate the given string to find the length using strlen() function.\n\nOn execution of above code, we get the following result −\n\nHere, we are using two functions − strcpy() which create the first string by copying the second parameter. Then we calculate the length of string with the help of strlen().\n\nAfter executing the code, we get the following result −\n\nBelow the example demonstrate the strlen() function in loop iteration to get the count of given specified character.\n\nThe above code produces the following result −"
    },
    {
        "link": "https://stackoverflow.com/questions/40551751/reading-in-a-string-with-spaces-in-c",
        "document": "I am trying to read in a string that may or may not include spaces ex. \"hello world\". By doing the following with a number select menu that is inputted by the user. This is just a small replica of what I am trying to do.\n\nWhy is it that after I enter 1 to change the line, it prints the statement asking what I want to replace it with and will automatically enter nothing then printing the strings with the first one as empty?\n\nI also have already tried reading the line with without any luck. Any ideas?"
    },
    {
        "link": "https://stackoverflow.com/questions/74466658/reading-a-string-in-c-using-fgets",
        "document": "A string in C is a sequence of characters including the terminating zero character .\n\ncan contain a string with in maximum three characters apart from the terminating zero character .\n\nIf you want to enter more than three characters you need to declare the array at least like\n\nAnd then you can write\n\nIn this case the new line character that corresponds to the pressed key Enter will not be stored in the array and will stay in the input buffer.\n\nAs a result if you after that will call one more then a string that contains only that new line character (if not to count the terminating zero character ) will be read.\n\nSo it is better to declare the array like\n\nTo remove the new line character from the array you can write\n\nAs for this call\n\nthen it will invoke undefined behavior if you will try to enter four characters because the terminating zero character will be written by the function in memory outside the array.\n\nAs for the function then you could use it the following way\n\nPay attention to the leading space in the format string. It allows to skip white space characters as for example the new ,line character that can be stored in the buffer after a preceding call of ."
    },
    {
        "link": "https://geeksforgeeks.org/taking-string-input-space-c-3-different-methods",
        "document": "We can take string input in C using scanf(“%s”, str). But, it accepts string only until it finds the first space. \n\nThere are 4 methods by which the C program accepts a string with space in the form of user input.\n\nLet us have a character array (string) named str[]. So, we have declared a variable as char str[20].\n\nNote : gets() has been removed from c11. So it might give you a warning when implemented. \n\nWe see here that it doesn’t bother about the size of the array. So, there is a chance of Buffer Overflow.\n\nMethod 2 : To overcome the above limitation, we can use fgets as :\n\nSyntax : char *fgets(char *str, int size, FILE *stream)\n\nExample : fgets(str, 20, stdin); as here, 20 is MAX_LIMIT according to declaration.\n\nExplanation : Here, [] is the scanset character. ^\n\n tells to take input until newline doesn’t get encountered. Then, with this %*c, it reads newline character and here used * indicates that this newline character is discarded.\n\n\n\nExplanation : Here, [] is the scanset character. ^\n\n tells to take input until newline doesn’t get encountered. Here we used ^ (XOR -Operator ) which gives true until both characters are different. Once the character is equal to New-line (‘\n\n’), ^ (XOR Operator ) gives false to read the string. So we use “%[^\n\n]s” instead of “%s”. So to get a line of input with space we can go with scanf(“%[^\n\n]s”,str);\n\nThis article is contributed by Mukesh patel."
    },
    {
        "link": "https://reddit.com/r/C_Programming/comments/52eb02/confusion_with_fgets_whitespace_behaviour",
        "document": "Im trying to print a string without any whitespaces using fgets and it's not working. however when i replace the space key with the char 'a' it works perfectly and is able to remove the letter. I was under the impression fgets was able to take strings with spaces in them but it doesn't seem to be working right now. Any advice?"
    },
    {
        "link": "https://geeksforgeeks.org/read-a-paragraph-of-text-with-spaces-in-c",
        "document": "How to Read a Paragraph of Text with Spaces in C?\n\nIn C, we may need to read the input entered by the user that includes the paragraph of text with spaces. In this article, we will learn how to read a paragraph of text with spaces in C.\n\nReading a Paragraph with Space in C\n\nIn C, reading a paragraph of text that includes spaces can be done by using , This function reads a line from the specified stream and stores it into the string pointed to by str. It stops when either (n-1) characters are read, the newline character is read, or the end-of-file is reached, whichever comes first.\n\nC Program to Read a Paragraph of Text with Spaces\n\nThe below program demonstrates how we can use the fgets function to read a paragraph of text with Spaces:\n\n\n\n\n\n This is a tutorial on Reading a Paragraph of Text with Spaces in C \n\n\n\n\n\n\n\n This is a tutorial on Reading a Paragraph of Text with Spaces in C\n\nTime Complexity: O(N), where N is the total number of characters in the paragraph.\n\nAuxiliary Space: O(N)"
    }
]