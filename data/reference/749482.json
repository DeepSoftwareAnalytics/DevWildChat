[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.worksheetfunction.counta",
        "document": "Counts the number of cells that are not empty and the values within the list of arguments.\n\nUse CountA to count the number of cells that contain data in a range or array.\n\nA value is any type of information, including error values and empty text (\"\"). A value does not include empty cells.\n\nIf an argument is an array or reference, only values in that array or reference are used. Empty cells and text values in the array or reference are ignored.\n\nIf you don't need to count logical values, text, or error values, use the Count function.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://wallstreetmojo.com/vba-counta",
        "document": "One truth is that the COUNTA function is not a VBA function. So your question is if it is not a VBA function, how do we use it? Nothing worries, even though it is not a VBA function; still, we can use it under the worksheet function class in VBA coding.\n\nLet us write the code to apply the Excel VBA COUNTA.\n\nStep 2: Now, decide where we will store the result of the VBA COUNTA function. In this example, I want to keep the work in cell C2. So my code will be Range(“C2”).Value.\n\nStep 3: In cell C2, we need the value of the VBA COUNTA function. So, to apply the Excel VBA COUNTA function, let's first use the worksheet function class.\n\nStep 4: After applying the worksheet function class, select the formula COUNTA by putting a dot.\n\nStep 5: We need to supply the range of cells for counting. In this example, we need to calculate the range of cells from A1 to A11. Then, to provide the cells using the VBA RANGE object.\n\nLet us run the code to get the result in cell C2.\n\nSo, the VBA COUNTA returns the same result as well.\n\nLike this, we can use COUNTA to count the non-empty or non-blank cells from the supplied range."
    },
    {
        "link": "https://statology.org/vba-counta",
        "document": "You can use the CountA method in VBA to count the number of non-empty cells in a specific range.\n\nHere is one common way to use this method in practice:\n\nThis particular example counts the number of non-empty cells in the range A1:A10 and outputs the result in cell C1.\n\nIf you would instead like to display the number of non-empty cells in a message box, you can use the following syntax:\n\nThe following examples shows how to use each of these methods in practice with the following column of values in Excel:\n\nExample 1: Count Non-Empty Cells in Range and Display Results in Cell\n\nSuppose we would like to calculate the number of non-empty cells in the range A1:A10 and output the results in a specific cell.\n\nWe can create the following macro to do so:\n\nWhen we run this macro, we receive the following output:\n\nNotice that cell C1 contains a value of 7.\n\nThis tells us that there are 7 non-empty cells in the range A1:A10.\n\nCount Non-Empty Cells in Range and Display Results in\n\nSuppose we would instead like to count the number of non-empty cells in the range A1:A10 and output the results in a message box.\n\nWe can create the following macro to do so:\n\nWhen we run this macro, we receive the following output:\n\nThe message box tells us that there are 7 non-empty cells in the range A1:A10.\n\nNote that if you’d like to instead count the number of non-empty cells in an entire column you could type A:A instead.\n\nThis will calculate the number of non-empty cells in all of column A.\n\nNote: You can find the complete documentation for the VBA CountA method here.\n\nThe following tutorials explain how to perform other common tasks in VBA:\n\nVBA: How to Write AVERAGEIF and AVERAGEIFS Functions\n\n VBA: How to Write SUMIF and SUMIFS Functions\n\n VBA: How to Write COUNTIF and COUNTIFS Functions"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.excel.worksheetfunction.counta?view=excel-pia",
        "document": "Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\nUse CountA to count the number of cells that contain data in a range or array.\n\nA value is any type of information, including error values and empty text (\"\"). A value does not include empty cells.\n\nIf an argument is an array or reference, only values in that array or reference are used. Empty cells and text values in the array or reference are ignored.\n\nIf you do not need to count logical values, text, or error values, use the Count(Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object, Object) function."
    },
    {
        "link": "https://educba.com/vba-counta",
        "document": "You may have often used the COUNT and COUNTA functions within Microsoft Excel. Wherein COUNT captures all the numerical values in a cell, COUNTA captures all the non-empty cells (including strings). Is by any means possible to use COUNTA function through VBA? Absolutely, YES! You can use the COUNTA function through VBA as a worksheet function (as it is a part of WorksheetFunction family inside VBA) to count the non-empty cells through a given worksheet range. The benefit of COUNTA over COUNT function is – it can count anything (numbers, strings, special characters, Error-values, etc.) except empty cells in a given range whereas, COUNT can only count the number of cells that consist the numeric values.\n\nThe syntax for VBA COUNTA function is as shown below:\n\nArg1 – Specifies the argument for this function which is mandatory and can take any non-empty value such as number, string, error values (like #N/A, #DIV/0!), special characters, etc. rest other arguments are optional.\n\nThis function can take a maximum of 30 arguments in a single call. An argument can consist of a range of cells or a single value which is inputted manually.\n\nHow to Use COUNTA Function in Excel VBA?\n\nBelow are the different examples to use COUNTA Function in Excel using VBA Code.\n\nExample #1 – VBA COUNTA with Manual Arguments as an Input\n\nWe will see how COUNTA function works when we provide manual arguments to it in VBA. Follow the below-mentioned steps:\n\nStep 1: Insert a new module in Visual Basic Editor (VBE). Click on Insert tab > select Module.\n\nStep 2: Define a new sub-procedure within the newly inserted module, that can hold your macro.\n\nStep 3: Decide where we want to store the output for the COUNTA function. I want to store it in cell A2 of sheet named “Example 1”. In order to do that, we need to use Sheets.Range method in VBA. See the following screenshot for your reference:\n\nThis piece of code selects the cell A2 as a range from the sheet named Example 1.\n\nStep 4: Use an assignment operator so that we can assign the value to the cell that is going to be accessed through the code above. Add the object named WorksheetFunction so that we can access COUNTA function under it.\n\nStep 5: Put a dot (.) after object specified and you will see a list of functions available to use under it. Select COUNTA from the list of multiple available functions which allows you to count the non-empty cells or values.\n\nStep 6: Specify the arguments manually under the COUNTA function. Arguments are: “Rajnish”, “#N/A”, 1, “*”, True. We have tried to bring all the data types as an argument to this function.\n\nStep 7: Run this piece of code by hitting F5 or Run button and see the output under cell A2 of sheet “Example 1” in the active workbook.\n\nIn this code, we want the system to count the input arguments and store the count under cell A2 of sheet Example 1.\n\nExample #2 – VBA COUNTA to Count Non-Empty Cells in a Given Range\n\nSuppose I have data all across column A and I need to count what are the non-empty rows in the entire column. As the entire column consists of more than 10 Lac’s rows, it is an ideal time-consuming for me to navigate towards and count each non-empty cell. See the partial screenshot of the data below.\n\nStep 1: Define a new sub-procedure which can hold your macro.\n\nStep 2: Define two new variables under this sub-procedure as a Range using Dim. One variable will be helpful to hold the range of input argument column and other variables will be helpful in holding the cell where we want the output as a counted number.\n\nHere, rng_1 will store the input range for COUNTA function. The output of COUNTA will be stored under op_cell variable.\n\nStep 3: Now, set the range for both of the variables using VBA Set property. This is to be done because we can’t directly assign a value to a variable defined as a range object.\n\nHere, rng_1 variable has been set to the range of entire column named A. op_cell is set to cell B1 as it would be the cell that contains the output of the COUNTA.\n\nStep 4: Now, use general assignment operator against op_cell variable, so that we can store the output under the cell which is set to that variable. This can be considered as an output initialization.\n\nStep 5: Use WorksheetFunction object on the right-hand side of assignment operator (it would be an expression that will get evaluated and value will be stored under cell set to variable op_cell) to initialize the class within which we can access as well as use COUNTA function.\n\nStep 6: As soon as you hit dot (.) after WorksheetFunction object, you can access all the functions available under that class. Navigate towards the COUNTA function and double click it to select.\n\nStep 7: Use rng_1 variable as an input argument under COUNTA. Therefore, this function under worksheet function object class can count the non-empty cells present within the entire column A.\n\nStep 8: Run this code by hitting the F5 or Run button and you can see the output as shown below in cell B1 of an active sheet from the workbook.\n\nIn cell B1 we can see a number as 17. Which means that, we have 17 non-empty cells present in column A of the worksheet. You may not be seeing at all the 17 through this screenshot as it is a partial one. You better could see the worksheet and navigate through column A.\n• You can use VBA COUNTA function when you have to count the number of non-empty cells present in the given range.\n• COUNTA considers all the values like numbers, strings, error values, Booleans, empty text (“”). However, it does not consider the cell which is empty.\n• The empty cells will not be counted using the COUNTA function and will be ignored.\n• You can use arguments manually in the VBA COUNTA function and it still works.\n\nThis is a guide to VBA COUNTA Function. Here we discuss how to use COUNTA Function in Excel VBA along with practical examples and downloadable excel template. You can also go through our other suggested articles –"
    },
    {
        "link": "http://erlandsendata.no?t=vbatips&c=recent&p=4084",
        "document": "BubbleSort: Sorting small one- or two-dimensional arrays (<= 1000 items):\n\n The BubbleSort algorithm is suitable for sorting small arrays, usually with 1000 items or less.\n\n BubbleSort is a stable sort method, something that might be important when you are sorting data with multiple columns.\n\n When you use a stable sort method items with equal sort keys are returned in the same order in the sorted result as they had before being sorted.\n\n BubbleSort can be painfully slow when sorting large arrays.\n\n Use BubbleSort1 on one-dimensional arrays and BubbleSort on two-dimensional arrays.\n\n BubbleSort can also be used to sort two-dimensional arrays that has a header row.\n\n\n\n NOTE: The sorting algorithm in this document is adapted for use in VBA based on detailed descriptions found in Wikipedia.\n\n\n\n See this post if you need information about how to read from and write to worksheet cells using array variables (including code for the Array_ReplaceErrors macro).\n• Sorting a large one-dimensional array (> 1000 items): QuickSort (might use a lot of memory)\n• Sorting a large one-dimensional array (> 1000 items): ShellSort (uses less memory than QuickSort)\n\nHere are some of the options you can use to sort data in Excel using VBA:RangeSort, TableSort, BubbleSort, MergeSort and the SORT worksheet function are stable sort methods:Items with equal sort keys are returned in the same order in the sorted result as they had before being sorted.QuickSort and ShellSort are not stable sort methods and you would normally not want to use these with two-dimensional arrays."
    },
    {
        "link": "https://stackoverflow.com/questions/52619676/sort-multiple-columns-excel-vba",
        "document": "Just reiterating Jeeped's answer here but with a slightly different take:\n\n1) should really be defined as a Long or Integer\n\n2) The ranges declared with should be defined as the same worksheet\n\n3) The keys for and are outside of the which again, should be defined as being on the same worksheet also\n\nI've stuck with your same code but added the worksheet definition to all ranges, and changed your set range to include up to column\n\nI'm assuming is there because sometimes you only want to sort the top set of a range of data. I also added a line to all the sortfields, just in case you run many different sorters on this sheet."
    },
    {
        "link": "https://wellsr.com/vba/2018/excel/vba-bubble-sort-macro-to-sort-array",
        "document": "There are a number of ways to sort a VBA array. This tutorial presents a VBA bubble sort macro to show you how to sort small one-dimensional VBA arrays. The VBA bubble sort algorithm is not suitable for large arrays, say greater than a couple thousand entries, because it’s rather slow. If you’re looking for a super fast sorting algorithm for large arrays, check out the VBA quicksort macro.\n\nI’ll explain the pros and cons of the bubble sort algorithm throughout this tutorial.\n\nMake powerful macros with our free VBA Developer Kit\n\n It’s easy to copy and paste a macro like this, but it’s harder make one on your own. To help you make macros like this, we built a free VBA Developer Kit and wrote the Big Book of Excel VBA Macros full of hundreds of pre-built macros to help you master file I/O, arrays, strings and more - grab your free copy below.\n\nThe bubble sort algorithm steps through each element in an array and compares it to the adjacent element. If the next element in the array is larger than the current element in the array, it swaps the two entries. It keeps doing this until no swaps remain and the array is completely sorted from smallest to largest.\n\nSorting arrays with the Bubble Sort algorithm is helpful, but how do you handle your array after it’s sorted? To become really good at using arrays, you’ll need to grab a copy of our comprehensive VBA Arrays Cheat Sheet with over 20 pre-built macros and dozens of tips designed to make it easy for you to handle arrays.\n\nSince bubble sort compares adjacent entries over and over, it is not efficient for large arrays. To loop through your array, bubble sort makes N*(N-1)/2 comparisons until your array is fully sorted, where N is the number of elements in your array. What does that mean in practice? That means that if you have an array with 1,000 elements, it can take almost half a million iterations to completely sort your array! The number of iterations is proportional to the square of the number of elements in your array.\n\nWhy use the VBA Bubble Sort algorithm\n\nIt should come as no surprise that VBA is not the fastest programming language out there. That makes the use of bubble sort even less attractive for large arrays. So why do people use the bubble sort algorithm? Because it’s easy to implement! Coding the logic for bubble sort in VBA is pretty simple. You can look at the example and intuitively understand how it works.\n\nIf you’re working with arrays that are smaller than a couple thousand entries, a good ole fashion VBA bubble sort algorithm will do the job just fine. It will sort your array from smallest to largest reasonably quickly so you can continue on with your data analysis. To implement the sorting algorithm into your projects even quicker, download wellsrPRO and select the bubble sort macro directly from your Excel ribbon whenever you need it.\n\nHow to Use the VBA Bubble Sort Macro\n\nLet’s say you have a column of data in Column A of your spreadsheet. You store each element in a one-dimensional VBA array and you want to sort the array from smallest to largest. You may find yourself needing to sort your data like this if you want to perform some statistical analysis, for example, on the bottom 10% or middle 20% of data. Here’s how you would call the BubbleSort example macro:\n\nThe line calls the VBA BubbleSort macro presented at the top of this tutorial and sorts your array from smallest to largest. After this, you can do whatever you want with your sorted VBA array! For more information on how this demo macro works, check out these related VBA tutorials:\n\nI’ve incorporated the bubble sort algorithm into a number of my financial forecast spreadsheets. In these spreadsheets, I run Monte Carlo simulations on account balances over time and I analyze the probability of certain outcomes. To do this, I store the account balances of each iteration for each year into arrays using VBA and I sort them with the bubble sort sorting algorithm. Once sorted, I’m able to group the account balance outcomes into histograms or return average balances for a subset of outcomes.\n\nThat’s just one example of where a good sorting algorithm, like bubble sort, can come in handy. How do you plan on using this VBA sorting macro? Just remember, bubble sort is an easy algorithm to implement and understand, but it’s not going to be the fastest sorting algorithm you’ll find. For a speed test comparison between bubble sort and a super fast sorting algorithm, check out my VBA quicksort tutorial.\n\nBefore you go, please take a moment to share this article with your friends on Facebook and Twitter. Social media is a great way to grow the site and reach more users, so I genuinely appreciate it when you share my articles with friends on your favorite platform! :)\n\nAs always, when you’re ready to take your VBA to the next level, subscribe using the form below."
    },
    {
        "link": "https://excel.tv/excel-vba-sort-multiple-columns",
        "document": "We all know the power of harnessing Excel VBA to dynamically sort tables, columns, and dashboards based on user input. But is there a simpler, more elegant way to achieve this? The answer is yes! This guide will walk you through the process of sorting tables and ranges using Excel VBA—from sorting multiple columns to sorting arrays alphabetically.\n\nExcel MVP Jordan Goldmeier has shared insights that make sorting with VBA not only powerful but also efficient and intuitive. Let’s explore how to make Excel VBA sorting work for you.\n\nWhy Use Excel VBA for Sorting?\n\nExcel VBA offers unparalleled flexibility when it comes to sorting data. While Excel’s built-in sorting tools are great for quick tasks, VBA allows for dynamic and automated sorting. Whether you’re working with large datasets or need to apply specific sorting logic repeatedly, Excel VBA can:\n• Sort Ranges Dynamically: Use VBA to sort a range by multiple keys without manual intervention.\n• Sort Tables by Column Name: Automatically sort tables based on column headers.\n• Sort Arrays Alphabetically: Organize data in arrays for more advanced applications.\n• Handle Multiple Columns: Sort by multiple columns in ascending or descending order with ease.\n\nTo sort data using VBA, you’ll need to understand the basics of the method. This method allows you to sort ranges, tables, and arrays based on your criteria.\n\nHere’s how you can sort a range in ascending order by a single column:\n\nThis code sorts the range by the first column in ascending order. You can modify the and parameters to sort by other columns or in descending order.\n\nExample 2: Excel VBA Sort Table by Column Name\n\nSorting a table by column name can be incredibly useful when working with structured data. Here’s an example:\n\nThis code sorts the table named “Table1” by the “Sales” column in descending order. Replace “Sales” with any column name to customize the sort.\n\nSorting by multiple columns is essential when you need to prioritize data hierarchies. Here’s how to sort by multiple keys:\n\nThis code sorts the range first by column A in ascending order and then by column B in descending order. You can add more for additional keys.\n\nSorting arrays alphabetically can be helpful when working with data in memory. Here’s an example:\n\nThis code sorts a string array alphabetically and prints the result to the Immediate Window.\n• Define Your Range Clearly: Always specify the exact range or table you want to sort.\n• Use Dynamic Ranges: Utilize named ranges or dynamic references to make your code adaptable.\n• Test Your Code: Run your VBA scripts on sample data to ensure the sorting logic works as intended.\n• Combine Sorting with Filters: For complex datasets, consider applying filters before sorting to isolate relevant data.\n\nThe image below shows an illustrative data set, where A, B and C are metrics were are interested in. Also, the Result can be interpreted as an overall score (based on these metrics) representing the effectiveness of each project.\n\nThe problem at our hand is to have a sorted version of this table based on what the user chooses from the metrics or the Result.\n\nThe image below shows the setup we will be using. Of course, you can use any template you like. The important thing is to get an understanding of the technique.\n\nThe User Choice is a dropdown menu containing the choices A, B, C and Result. The end-user can choose any of them based on their interests. The Match just returns index of User Choice from the green highlighted set of cells. Note that we will always be using an exact match.\n\nIn this step we will add a column to our data to fetch the information we are interested in. As demonstrated in the image below, we just index the value we are interested in.\n\nOf course, the value to fetch depends on the result of our Match from the Setup above. Since we selected C in our template, for example, the Match was 3. ‘Sorted Data’!$C$3 represents the location of this 3 in our template chosen. Hence, as expected this formula would return 70.0.\n\nNow, in our template, we would be using the LARGE function to sort the data into descending order. The image below shows the input formula.\n\nWe selected the array “Sorted Column” from the data, and the LARGE function returned the 1st largest value. Dragging the formula down to Index 2 will give the 2nd largest value, then the 3rd and so on.\n\nIn the Match Index column in our template, we try to find row number of the value returned by the LARGE function from the data. It has been illustrated in the image below.\n\nOnce we know this row number, it is easy to use the INDEX function to fetch the Program Name, A, B, C and Result from this row in the data. The result will look something like this:\n\nNotice how the projects are listed in a descending order according to metric C. However, there is one problem: some entries are repeated! Well, this actually was expected. Let’s address this now.\n\nAs you might have guessed it, the problem occurs because multiple projects can have the same score. And since the MATCH function always picks up the first one, it gets repeated multiple times. Now, we will attempt to change the Sorted Column part of our data to prevent this repetition.\n\nAs shown in the picture, we just add the index number divided by 10,000 or 100,000. Since no project has the same index number, no project will have the same number in this column. And now when we turn to our template, we see that the duplicates have vanished!\n\nSee how the same sorting template is also working perfectly when Result is selected in User Choice.\n\nThis process of adding varying amounts of very small quantities to the data to make every entry unique is known as data jittering. And this technique is commonly employed in graphing problems.\n\nExcel VBA sorting is a game-changer for automating data organization. Whether you’re sorting ranges, tables, or arrays, VBA gives you the power to customize sorting logic to fit your needs. From sorting multiple columns to dynamically sorting tables by column name, the possibilities are endless. Use the examples and best practices in this guide to elevate your Excel skills and streamline your workflow.\n\nAnd do not forget to share your thoughts and experiences with us in the comments section below. Cheers!"
    },
    {
        "link": "https://stackoverflow.com/questions/4873182/sorting-a-multidimensionnal-array-in-vba",
        "document": "Here's a multi-column and a single-column QuickSort for VBA, modified from a code sample posted by Jim Rech on Usenet.\n\nYou'll notice that I do a lot more defensive coding than you'll see in most of the code samples out there on the web: this is an Excel forum, and you've got to anticipate nulls and empty values... Or nested arrays and objects in arrays if your source array comes from (say) a third-party realtime market data source.\n\nEmpty values and invalid items are sent to the end of the list.\n\nTo sort multi-column arrays, your call will be:\n\n...Passing '2' as the column to sort on and excluding the optional parameters that pass the upper and lower bounds of the search domain.\n\nHere too excluding the optional parameters.\n\n[EDITED] - fixed an odd formatting glitch in the <code> tags, which seem to have a problem with hyperlinks in code comments.\n\nThe Hyperlink I excised was Detecting an Array Variant in VBA.\n\nI used to use BubbleSort for this kind of thing, but it slows down, severely, after the array exceeds 1024 rows. I include the code below for your reference: please note that I haven't provided source code for ArrayDimensions, so this will not compile for you unless you refactor it - or split it out into 'Array' and 'vector' versions.\n\nThis answer may have arrived a bit late to solve your problem when you needed to, but other people will pick it up when they Google for answers for similar problems."
    }
]