[
    {
        "link": "https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes",
        "document": "Next.js has two server runtimes you can use in your application:\n• The Node.js Runtime (default), which has access to all Node.js APIs and compatible packages from the ecosystem.\n• The Edge Runtime which contains a more limited set of APIs.\n\nThe Edge Runtime is the default runtime for Middleware. However, this can be changed to the Node.js runtime. See the Middleware documentation for more details.\n• The Node.js Runtime is used for rendering your application.\n• The Edge Runtime is used for Middleware (routing rules like redirects, rewrites, and setting headers).\n• The Edge Runtime does not support all Node.js APIs. Some packages may not work as expected. Learn more about the unsupported APIs in the Edge Runtime.\n• The Edge Runtime does not support Incremental Static Regeneration (ISR).\n• Both runtimes can support streaming depending on your deployment infrastructure."
    },
    {
        "link": "https://reddit.com/r/nextjs/comments/1idjr5i/nextjs_runtimes_edge_vs_nodejs",
        "document": "I'm working on a Next.js project where my API routes are located within the same directory as my other components (using the App Router). I'm a bit confused about how the Next.js runtime (Edge vs. Node.js) applies in this scenario.\n\nThe Next.js documentation mentions that Edge Runtime requires specific configuration within the route definition (e.g., export const runtime = 'edge'). I haven't explicitly added this to my API routes, so I assume they're running on the Node.js runtime by default.\n\nHowever, I've encountered a problem. When deploying to Vercel, I'm using rate-limiting libraries in my API routes. I'm getting errors indicating that these libraries are incompatible with the Edge Runtime. This suggests that maybe my APIs are actually running on the Edge Runtime, even though I haven't explicitly configured them for it. Can someone clarify how Next.js determines the runtime for API routes within the App Router structure, especially when no explicit runtime configuration is present? Is there a default behavior I'm missing? And how can I definitively confirm which runtime my API routes are using?\n\nAny insights would be greatly appreciated! Thanks in advance!"
    },
    {
        "link": "https://nextjs.org/docs/pages/api-reference/edge",
        "document": "The Next.js Edge Runtime is used for Middleware and supports the following APIs:\n\nYou can use to access Environment Variables for both and .\n\nThe Edge Runtime has some restrictions including:\n• Native Node.js APIs are not supported. For example, you can't read or write to the filesystem.\n• can be used, as long as they implement ES Modules and do not use native Node.js APIs.\n• Calling directly is not allowed. Use ES Modules instead.\n\nThe following JavaScript language features are disabled, and will not work:\n\nIn rare cases, your code could contain (or import) some dynamic code evaluation statements which can not be reached at runtime and which can not be removed by treeshaking. You can relax the check to allow specific files with your Middleware configuration:\n\nis a glob , or an array of globs, ignoring dynamic code evaluation for specific files. The globs are relative to your application root folder.\n\nBe warned that if these statements are executed on the Edge, they will throw and cause a runtime error."
    },
    {
        "link": "https://medium.com/@rameshkannanyt0078/next-js-runtimes-unveiled-edge-vs-node-js-choosing-the-right-runtime-for-your-application-453c09a6adfc",
        "document": "In the dynamic world of web development, Next.js offers developers powerful runtime options that can significantly impact application performance, scalability, and functionality. Understanding the nuances between Edge and Node.js runtimes is crucial for making informed architectural decisions.\n\nRuntimes in Next.js define the environment where your code executes. They determine:"
    },
    {
        "link": "https://stackoverflow.com/questions/72113316/nextjs-middleware-use-default-runtime-instead-of-edge-runtime",
        "document": "By default, a NextJs middleware is run using the Edge runtime and from what I understand this is because the middleware is meant to be run on the edge network instead of the main server (being run on the edge network reduces the latency so this offers improved performance in some scenarios).\n\nThe downside of this is that the Edge runtime comes with some restrictions in terms of what it can run (list here).\n\nMy question is: is there any way to make a middleware run using the default runtime instead of the Edge runtime?\n\nIn my situation, we're not hosting anything on the edge so the Edge runtime imposes some restrictions on us without providing any benefits. A possible workaround would be to use a custom middleware instead of a NextJs one, but unless this is the only choice, I would rather use the NextJs middleware architecture & plumbing instead of building our own.\n\nP.s.: We're using NextJs ( version at the moment of writing this question)"
    },
    {
        "link": "https://github.com/shadcn-ui/ui/issues/1644",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://stackoverflow.com/questions/78368196/triggering-a-radix-dialog-or-shadcn-dialog-via-a-react-component-not-a-button",
        "document": "I'm building a nextjs app with typescript and tailwind and also using shadcn components.\n\nThere's a behaviour I'm trying to create, and for the most part I am able to, but not without hydration errors on the frontend.\n\nThe behaviour I'm looking to create:\n• I have a custom component that contains a markdown text editor.\n• I'm putting that component in a Dialog, as the trigger, so that when user clicks anywhere on the text editor, it opens a popup.\n\nI know why this is happening but don't know how to fix it. The expected input for radix DialogTrigger is a button. The expected input for a shadcn DialogTrigger is just plain text (which then becomes the text on the button). I'm passing a whole component to it. The way shadcn dialog is implemented seems like it should allow it but it doesn't quite in action.\n\nHow I'm passing my editor to shadcn dialog:\n\nHow can I achieve my desired behavior?\n\nThank you so much"
    },
    {
        "link": "https://github.com/radix-ui/themes/issues/103",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://radix-ui.com/primitives/docs/components/dialog",
        "document": "A window overlaid on either the primary window or another dialog window, rendering the content underneath inert.\n\nInstall the component from your command line.\n\nImport all parts and piece them together.\n\nContains all the parts of a dialog.\n\nThe button that opens the dialog.\n\nWhen used, portals your overlay and content parts into the .\n\nA layer that covers the inert portion of the view when the dialog is open.\n\nContains content to be rendered in the open dialog.\n\nThe button that closes the dialog.\n\nAn accessible title to be announced when the dialog is opened.\n\nIf you want to hide the title, wrap it inside our Visually Hidden utility like this .\n\nAn optional accessible description to be announced when the dialog is opened.\n\nIf you want to hide the description, wrap it inside our Visually Hidden utility like this . If you want to remove the description entirely, remove this part and pass to .\n\nUse the controlled props to programmatically close the Dialog after an async operation has completed.\n\nMove the content inside the overlay to render a dialog with overflow.\n\nCustomise the element that your dialog portals into.\n\nCreate your own API by abstracting the primitive parts into your own component.\n\nAbstract the overlay and the close button\n\nThis example abstracts the and parts."
    },
    {
        "link": "https://stackoverflow.com/questions/72944447/radix-ui-typescript-typings",
        "document": "Using radix-ui to make reusable components in typescript and react (bit of a typescript novice). The API documentation includes different props that can be used in the component but they are broken into sections (ex: Root, Trigger, Content, https://www.radix-ui.com/docs/primitives/components/dropdown-menu). I would like to extend the props from the component so i could use the 'open' prop from Root and 'onSelect' from Item but this code\n\nonly lets me pull props from the root props; I cant access the onSelect prop.\n\nthis example code gives me access to the 'onSelect' prop.\n\nThere isnt one single 'Parent Props' that can be extended. Feel like if you are using a library a single extension import should give you access to all of them? Or is there a way to combine the two extensions that im missing? Looking for a way to get access to all the props available on the component."
    }
]