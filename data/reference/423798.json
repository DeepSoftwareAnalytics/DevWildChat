[
    {
        "link": "https://geeksforgeeks.org/python-program-to-find-area-of-rectangle",
        "document": "The task of calculating the Area of a Rectangle in Python involves taking the length and width as input, applying the mathematical formula for the area of a rectangle, and displaying the result.\n• Length is the longer side of the rectangle.\n• Width is the shorter side of the rectangle.\n\nFor example, if Length = 5 and Width = 8, the area is calculated as Area=5×8=40.\n\nThe direct multiplication approach is the most efficient way to find the area of a rectangle . It involves multiplying the length and width directly using the * operator.\n\nExplanation: This code calculates the area of a rectangle using the formula length * width. Here, x = 5 represents the length and y = 8 represents the width. The multiplication x * y is stored in res, which holds the area value.\n\nA lambda function provides a quick and concise way to compute the area of a rectangle in a single line. It is often used in cases where you need an inline solution, especially when working with functional programming concepts like map() or reduce().\n\nExplanation: It multiplies x = 5 and y = 8 in a single line area = (lambda length, width: length * width)(x, y) and the result 40, is stored in area.\n\nNumPy is a powerful library for numerical computations, but using it to find the area of a single rectangle is overkill. It is more suitable when dealing with arrays of lengths and widths. This approach is only recommended when performing bulk calculations involving multiple rectangles.\n\nExplanation np.multiply(x, y) performs element-wise multiplication of x and y using NumPy's multiply() function and stores the result (area) in the variable area."
    },
    {
        "link": "https://systechgroup.in/blog-python-program-to-find-area-of-rectangle",
        "document": "Calculating the area of a rectangle in Python is more than just applying a formula. It’s about writing clean, efficient, and maintainable code that can adapt to real-world applications. Whether you’re using a simple function or advanced techniques like OOP and NumPy, following best practices ensures robust and error-free implementations.\n\nNow, it’s your turn to apply these methods and bring geometric calculations to life in your Python projects!"
    },
    {
        "link": "https://stackoverflow.com/questions/71885654/rectangle-area-calculation-function-problem",
        "document": "Your issue is scope; you're using the variables and but when you assign values to them within a function, because you haven't declared them , the assignment won't affect anything outside of that function. It also seems like you've declared and above somewhere, considering that you're executing but haven't actually declared or in that scope in your example.\n\nYou also seem to think that if you pass in and as arguments to , that they will be affected in the original function. That's not how variables work in Python. If you pass an object, you can alter properties of that object when you pass the object to a function, but if you tried to change which object the variable was pointing to, that would only work if you declared a .\n\nAll you have to do is remove and from the arguments of your functions, and instead, return them from . Also, using f-strings makes the printing simpler:\n\nIf you had used globals instead, your code could look like this - you don't need to return anything, but you do have to declare and as globals if you want their value to change outside of the function:\n\nLastly, you could use a class to store a and b, so that you don't have to declare them as globals:"
    },
    {
        "link": "https://medium.com/@techwithjulles/python-calculates-and-displays-the-area-and-perimeter-of-a-rectangle-fc9577f6a9bc",
        "document": "Rectangles are one of the most common shapes in geometry, and they have a variety of applications in fields like architecture, engineering, and computer graphics. In this article, we will explore how to use Python to calculate the area and perimeter of a rectangle, two important properties of this shape.\n\nA rectangle is a four-sided figure with opposite sides that are parallel and equal in length. The corners of a rectangle are right angles, which means that the sum of the interior angles is 360 degrees. Rectangles are used in many real-world applications, such as building blueprints, electrical circuit diagrams, and video game levels.\n\nHow to Calculate the Area of a Rectangle\n\nThe area of a rectangle is the amount of space that it occupies. To calculate the area of a rectangle, you need to multiply its length by its width. The formula for calculating the area of a rectangle is:\n\nFor example, if a rectangle has a length of 5 units and a width of 3 units, its area can be calculated as:\n\nIn Python, you can use the “*” operator to multiply two numbers, as shown in the following code:\n\nWhen you run this code, you should see the following output:\n\nNote that we used the “print()” function to display the result on the screen.\n\nHow to Calculate the Perimeter of a Rectangle\n\nThe perimeter of a rectangle is the total length of its sides. To calculate the perimeter of a rectangle, you need to add the lengths of its four sides. The formula for calculating the perimeter of a rectangle is:\n\nFor example, if a rectangle has a length of 5 units and a width of 3 units, its perimeter can be calculated as:\n\nIn Python, you can use the “+” operator to add two numbers, and the “()” operator to group operations, as shown in the following code:\n\nWhen you run this code, you should see the following output:\n\nNote that we used the same “print()” function as before to display the result.\n\nWriting a Python Program to Calculate the Area and Perimeter of a Rectangle\n\nNow that we know how to calculate the area and perimeter of a rectangle, we can write a Python program that prompts the user for the length and width of a rectangle, calculates its area and perimeter, and displays the results on the screen.\n\nHere’s the code for such a program:\n\nLet’s break down this code step by step:\n• We use the “input()” function to prompt the user to enter the length and width of the rectangle. The “float()” function is used to convert the user’s input to a decimal number, so that we can perform calculations using those numbers.\n• We use the formulas that we discussed earlier to calculate the area and perimeter of the rectangle.\n• We use the “print()” function to display the results on the screen, along with a descriptive message.\n\nWhen you run this program, you should see the following output:\n\nNote that we used the “float()” function to ensure that the input values are treated as decimal numbers. If you omit this function, Python will treat the input values as strings, which can cause errors in the calculations.\n\nIn this article, we explored how to use Python to calculate the area and perimeter of a rectangle. We learned about the formulas for these calculations, and we wrote a Python program that prompts the user for input and displays the results on the screen. Rectangles are a fundamental shape in geometry, and knowing how to calculate their properties is an essential skill for anyone working with mathematical concepts or real-world applications.\n\nCode — Calculates and Displays the Area and Perimeter — Replit\n\nIf you enjoyed this article and would like to show your support, feel free to buy me a coffee! Your support is greatly appreciated and it helps me continue creating content that you love. You can make a contribution by following this link: Buy Me a Coffee. Thank you for your generosity and for being a part of this journey!"
    },
    {
        "link": "https://geeksforgeeks.org/calculating-areas-of-different-shapes-using-python",
        "document": "We are going to make a Python program for Calculating Areas Of some mathematical Shapes.\n\nIn this program, We will ask the user to input the shape’s name. If it exists in our program then we will proceed to find the entered shape’s area according to their respective formulas. If that shape doesn’t exist then we will print “Sorry! We cannot find this shape.” message on the screen.\n\nBelow is the implementation:"
    },
    {
        "link": "https://w3schools.com/graphics/canvas_rectangles.asp",
        "document": "The three most used methods for drawing rectangles in canvas are:\n\nThe method has the following parameters:\n\nNotice that the method does not draw the rectangle (it just defines it). So, in addition, you have to use the method (or the method) to actually draw it.\n\nThe method has the following parameters:\n\nThe fill-color is specified with the property. If the property is not set, the fill-color defaults to black.\n\nThe method has the following parameters:\n\nThe stroke-color is specified with the property. If the property is not set, the stroke-color defaults to black."
    },
    {
        "link": "https://stackoverflow.com/questions/67280674/drawing-a-series-of-rectangles-in-html5-canvas-to-completely-fill-the-canvas",
        "document": "I am new to HTML and javascript and trying to fill a HTML5 canvas with a series of rectangles each with increasing height and each of them next to previous. I want to my code to run on a variety of screen sizes hence i am finding the width and height of canvas dynamically from javascript. I want the number of bars 'n' to be input by the user in the future. This is what i've tried.\n\nThis is not giving all the the bars at all, sometimes it gives me 3 other times 5 or 8 and it changes with the browser and platform( JS-fiddle gives me 5 on chrome and 7.5 on firefox here is the code https://jsfiddle.net/8b9a4de5/) and on my computer it gives 2-3.\n• What is the problem here and how to solve the problem?\n• Is there a better way to do this in vanilla javascript since i do not know any other libraries/frameworks\n\nPS: Sorry if this is a repeat question i couldn't find any with my limited english."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Drawing_shapes",
        "document": "Before we can start drawing, we need to talk about the canvas grid or coordinate space. Our HTML skeleton from the previous page had a canvas element 150 pixels wide and 150 pixels high. Normally 1 unit in the grid corresponds to 1 pixel on the canvas. The origin of this grid is positioned in the top left corner at coordinate (0,0). All elements are placed relative to this origin. So the position of the top left corner of the blue square becomes x pixels from the left and y pixels from the top, at coordinate (x,y). Later in this tutorial we'll see how we can translate the origin to a different position, rotate the grid and even scale it, but for now we'll stick to the default.\n\nUnlike SVG, only supports two primitive shapes: rectangles and paths (lists of points connected by lines). All other shapes must be created by combining one or more paths. Luckily, we have an assortment of path drawing functions which make it possible to compose very complex shapes. First let's look at the rectangle. There are three functions that draw rectangles on the canvas: Clears the specified rectangular area, making it fully transparent. Each of these three functions takes the same parameters. and specify the position on the canvas (relative to the origin) of the top-left corner of the rectangle. and provide the rectangle's size. Below is the function from the previous page, but now it is making use of these three functions.\n\nNow let's look at paths. A path is a list of points, connected by segments of lines that can be of different shapes, curved or not, of different width and of different color. A path, or even a subpath, can be closed. To make shapes using paths, we take some extra steps:\n• First, you create the path.\n• Then you use drawing commands to draw into the path.\n• Once the path has been created, you can stroke or fill the path to render it. Here are the functions used to perform these steps: Creates a new path. Once created, future drawing commands are directed into the path and used to build the path up. Methods to set different paths for objects. Adds a straight line to the path, going to the start of the current sub-path. Draws the shape by stroking its outline. The first step to create a path is to call the . Internally, paths are stored as a list of sub-paths (lines, arcs, etc.) which together form a shape. Every time this method is called, the list is reset and we can start drawing new shapes. Note: When the current path is empty, such as immediately after calling , or on a newly created canvas, the first path construction command is always treated as a , regardless of what it actually is. For that reason, you will almost always want to specifically set your starting position after resetting a path. The second step is calling the methods that actually specify the paths to be drawn. We'll see these shortly. The third, and an optional step, is to call . This method tries to close the shape by drawing a straight line from the current point to the start. If the shape has already been closed or there's only one point in the list, this function does nothing. Note: When you call , any open shapes are closed automatically, so you don't have to call . This is not the case when you call .\n\nOne very useful function, which doesn't actually draw anything but becomes part of the path list described above, is the function. You can probably best think of this as lifting a pen or pencil from one spot on a piece of paper and placing it on the next. Moves the pen to the coordinates specified by and . When the canvas is initialized or is called, you typically will want to use the function to place the starting point somewhere else. We could also use to draw unconnected paths. Take a look at the smiley face below. To try this for yourself, you can use the code snippet below. Just paste it into the function we saw earlier. The result looks like this: If you'd like to see the connecting lines, you can remove the lines that call . Note: To learn more about the function, see the Arcs section below.\n\nFor drawing straight lines, use the method. Draws a line from the current drawing position to the position specified by and . This method takes two arguments, and , which are the coordinates of the line's end point. The starting point is dependent on previously drawn paths, where the end point of the previous path is the starting point for the following, etc. The starting point can also be changed by using the method. The example below draws two triangles, one filled and one outlined. This starts by calling to start a new shape path. We then use the method to move the starting point to the desired position. Below this, two lines are drawn which make up two sides of the triangle. You'll notice the difference between the filled and stroked triangle. This is, as mentioned above, because shapes are automatically closed when a path is filled, but not when they are stroked. If we left out the for the stroked triangle, only two lines would have been drawn, not a complete triangle.\n\nTo draw arcs or circles, we use the or methods. Draws an arc which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction indicated by counterclockwise (defaulting to clockwise). Draws an arc with the given control points and radius, connected to the previous point by a straight line. Let's have a more detailed look at the method, which takes six parameters: and are the coordinates of the center of the circle on which the arc should be drawn. is self-explanatory. The and parameters define the start and end points of the arc in radians, along the curve of the circle. These are measured from the x axis. The parameter is a Boolean value which, when , draws the arc counterclockwise; otherwise, the arc is drawn clockwise. Note: Angles in the function are measured in radians, not degrees. To convert degrees to radians you can use the following JavaScript expression: . The following example is a little more complex than the ones we've seen above. It draws 12 different arcs all with different angles and fills. The two loops are for looping through the rows and columns of arcs. For each arc, we start a new path by calling . In the code, each of the parameters for the arc is in a variable for clarity, but you wouldn't necessarily do that in real life. The and coordinates should be clear enough. and are fixed. The starts at 180 degrees (half a circle) in the first column and is increased by steps of 90 degrees, culminating in a complete circle in the last column. The statement for the parameter results in the first and third row being drawn as clockwise arcs and the second and fourth row as counterclockwise arcs. Finally, the statement makes the top half stroked arcs and the bottom half filled arcs. Note: This example requires a slightly larger canvas than the others on this page: 150 x 200 pixels. function draw() { const canvas = document.getElementById(\"canvas\"); if (canvas.getContext) { const ctx = canvas.getContext(\"2d\"); for (let i = 0; i < 4; i++) { for (let j = 0; j < 3; j++) { ctx.beginPath(); const x = 25 + j * 50; // x coordinate const y = 25 + i * 50; // y coordinate const radius = 20; // Arc radius const startAngle = 0; // Starting point on circle const endAngle = Math.PI + (Math.PI * j) / 2; // End point on circle const counterclockwise = i % 2 !== 0; // clockwise or counterclockwise ctx.arc(x, y, radius, startAngle, endAngle, counterclockwise); if (i > 1) { ctx.fill(); } else { ctx.stroke(); } } } } }\n\nThe next type of paths available are Bézier curves, available in both cubic and quadratic varieties. These are generally used to draw complex organic shapes. Draws a quadratic Bézier curve from the current pen position to the end point specified by and , using the control point specified by and . Draws a cubic Bézier curve from the current pen position to the end point specified by and , using the control points specified by ( , ) and ( , ). The difference between these is that a quadratic Bézier curve has a start and an end point (blue dots) and just one control point (indicated by the red dot) while a cubic Bézier curve uses two control points. The and parameters in both of these methods are the coordinates of the end point. and are the coordinates of the first control point, and and are the coordinates of the second control point. Using quadratic and cubic Bézier curves can be quite challenging, because unlike vector drawing software like Adobe Illustrator, we don't have direct visual feedback as to what we're doing. This makes it pretty hard to draw complex shapes. In the following example, we'll be drawing some simple organic shapes, but if you have the time and, most of all, the patience, much more complex shapes can be created. There's nothing very difficult in these examples. In both cases we see a succession of curves being drawn which finally result in a complete shape. This example uses multiple quadratic Bézier curves to render a speech balloon. This example draws a heart using cubic Bézier curves.\n\nAs we have seen in the last example, there can be a series of paths and drawing commands to draw objects onto your canvas. To simplify the code and to improve performance, the object, available in recent versions of browsers, lets you cache or record these drawing commands. You are able to play back your paths quickly. Let's see how we can construct a object: The constructor returns a newly instantiated object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data. new Path2D(); // empty path object new Path2D(path); // copy from another Path2D object new Path2D(d); // path from SVG path data All path methods like , , or , etc., which we got to know above, are available on objects. The API also adds a way to combine paths using the method. This can be useful when you want to build objects from several components, for example. Adds a path to the current path with an optional transformation matrix."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 .\n\nThe method of the Canvas 2D API draws a rectangle that is filled according to the current .\n\nThis method draws directly to the canvas without modifying the current path, so any subsequent or calls will have no effect on it."
    },
    {
        "link": "https://w3schools.com/jsref/canvas_rect.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    }
]