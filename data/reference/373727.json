[
    {
        "link": "https://docs.python.org/3/library/random.html",
        "document": "This module implements pseudo-random number generators for various distributions.\n\nFor integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.\n\nOn the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available.\n\nAlmost all module functions depend on the basic function , which generates a random float uniformly in the half-open range . Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.\n\nThe functions supplied by this module are actually bound methods of a hidden instance of the class. You can instantiate your own instances of to get generators that don’t share state.\n\nClass can also be subclassed if you want to use a different basic generator of your own devising: see the documentation on that class for more details.\n\nThe module also provides the class which uses the system function to generate random numbers from sources provided by the operating system.\n\nReturn a random element from the non-empty sequence seq. If seq is empty, raises . Return a k sized list of elements chosen from the population with replacement. If the population is empty, raises . If a weights sequence is specified, selections are made according to the relative weights. Alternatively, if a cum_weights sequence is given, the selections are made according to the cumulative weights (perhaps computed using ). For example, the relative weights are equivalent to the cumulative weights . Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work. If neither weights nor cum_weights are specified, selections are made with equal probability. If a weights sequence is supplied, it must be the same length as the population sequence. It is a to specify both weights and cum_weights. The weights or cum_weights can use any numeric type that interoperates with the values returned by (that includes integers, floats, and fractions but excludes decimals). Weights are assumed to be non-negative and finite. A is raised if all weights are zero. For a given seed, the function with equal weighting typically produces a different sequence than repeated calls to . The algorithm used by uses floating-point arithmetic for internal consistency and speed. The algorithm used by defaults to integer arithmetic with repeated selections to avoid small biases from round-off error. Changed in version 3.9: Raises a if all weights are zero. To shuffle an immutable sequence and return a new shuffled list, use instead. Note that even for small , the total number of permutations of x can quickly grow larger than the period of most random number generators. This implies that most permutations of a long sequence can never be generated. For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator. Return a k length list of unique elements chosen from the population sequence. Used for random sampling without replacement. Returns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples. This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices). Members of the population need not be hashable or unique. If the population contains repeats, then each occurrence is a possible selection in the sample. Repeated elements can be specified one at a time or with the optional keyword-only counts parameter. For example, is equivalent to . To choose a sample from a range of integers, use a object as an argument. This is especially fast and space efficient for sampling from a large population: . If the sample size is larger than the population size, a is raised. Changed in version 3.11: The population must be a sequence. Automatic conversion of sets to lists is no longer supported.\n\nThe following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution’s equation, as used in common mathematical practice; most of these equations can be found in any statistics text. Return the next random floating-point number in the range Return a random floating-point number N such that for and for . The end-point value may or may not be included in the range depending on floating-point rounding in the expression . Return a random floating-point number N such that and with the specified mode between those bounds. The low and high bounds default to zero and one. The mode argument defaults to the midpoint between the bounds, giving a symmetric distribution. Beta distribution. Conditions on the parameters are and . Returned values range between 0 and 1. Exponential distribution. lambd is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called “lambda”, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if lambd is positive, and from negative infinity to 0 if lambd is negative. Changed in version 3.12: Added the default value for . Gamma distribution. (Not the gamma function!) The shape and scale parameters, alpha and beta, must have positive values. (Calling conventions vary and some sources define ‘beta’ as the inverse of the scale). Normal distribution, also called the Gaussian distribution. mu is the mean, and sigma is the standard deviation. This is slightly faster than the function defined below. Multithreading note: When two threads call this function simultaneously, it is possible that they will receive the same return value. This can be avoided in three ways. 1) Have each thread use a different instance of the random number generator. 2) Put locks around all calls. 3) Use the slower, but thread-safe function instead. Changed in version 3.11: mu and sigma now have default arguments. Log normal distribution. If you take the natural logarithm of this distribution, you’ll get a normal distribution with mean mu and standard deviation sigma. mu can have any value, and sigma must be greater than zero. Normal distribution. mu is the mean, and sigma is the standard deviation. Changed in version 3.11: mu and sigma now have default arguments. mu is the mean angle, expressed in radians between 0 and 2*pi, and kappa is the concentration parameter, which must be greater than or equal to zero. If kappa is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*pi. Weibull distribution. alpha is the scale parameter and beta is the shape parameter.\n\n# Even integer from 0 to 100 inclusive ['four', 'two', 'ace', 'three'] # of 52 playing cards, and determine the proportion of cards # Estimate the probability of getting 5 or more heads from 7 spins # of a biased coin that settles on heads 60% of the time. # Probability of the median of 5 samples being in middle two quartiles Example of statistical bootstrapping using resampling with replacement to estimate a confidence interval for the mean of a sample: Example of a resampling permutation test to determine the statistical significance or p-value of an observed difference between the effects of a drug versus a placebo: # Example from \"Statistics is Easy\" by Dennis Shasha and Manda Wilson 'at least as extreme as the observed difference of leads us to reject the null' 'hypothesis that there is no difference between the drug and the placebo.' Simulation of arrival times and service deliveries for a multiserver queue: # time when each server becomes available Statistics for Hackers a video tutorial by Jake Vanderplas on statistical analysis using just a few fundamental concepts including simulation, sampling, shuffling, and cross-validation. Economics Simulation a simulation of a marketplace by Peter Norvig that shows effective use of many of the tools and distributions provided by this module (gauss, uniform, sample, betavariate, choice, triangular, and randrange). A Concrete Introduction to Probability (using Python) a tutorial by Peter Norvig covering the basics of probability theory, how to write simulations, and how to perform data analysis using Python.\n\nThese recipes show how to efficiently make random selections from the combinatoric iterators in the module: \"Choose r elements with replacement. Order the result to match the iterable.\" # Result will be in set(itertools.combinations_with_replacement(iterable, r)). The default returns multiples of 2⁻⁵³ in the range 0.0 ≤ x < 1.0. All such numbers are evenly spaced and are exactly representable as Python floats. However, many other representable floats in that interval are not possible selections. For example, isn’t an integer multiple of 2⁻⁵³. The following recipe takes a different approach. All floats in the interval are possible selections. The mantissa comes from a uniform distribution of integers in the range 2⁵² ≤ mantissa < 2⁵³. The exponent comes from a geometric distribution where exponents smaller than -53 occur half as often as the next larger exponent. All real valued distributions in the class will use the new method: The recipe is conceptually equivalent to an algorithm that chooses from all the multiples of 2⁻¹⁰⁷⁴ in the range 0.0 ≤ x < 1.0. All such numbers are evenly spaced, but most have to be rounded down to the nearest representable Python float. (The value 2⁻¹⁰⁷⁴ is the smallest positive unnormalized float and is equal to .) Generating Pseudo-random Floating-Point Values a paper by Allen B. Downey describing ways to generate more fine-grained floats than normally generated by ."
    },
    {
        "link": "https://w3schools.com/python/module_random.asp",
        "document": "Python has a built-in module that you can use to make random numbers.\n\nThe module has a set of methods:"
    },
    {
        "link": "https://geeksforgeeks.org/python-randint-function",
        "document": "randint() is an inbuilt function of the random module in Python3. The random module gives access to various useful functions one of them being able to generate random numbers, which is randint(). In this article, we will learn about randint in Python.\n\nIn this example, we are using the randint() method in Python to find a random number in a given range.\n\nIn this example, we are making multiple random.randint() method calls in Python.\n\nIn this example, we are seeing that if we passes the floating point values as parameters in the randint() function then a ValueError occurs.\n\nIn this example, we can see that if we pass string or character literals as parameters in the randint() function then a TypeError occurs.\n\nApplications : The randint() function can be used to simulate a lucky draw situation. Let’s say User has participated in a lucky draw competition. The user gets three chances to guess the number between 1 and 10. If guess is correct user wins, else loses the competition.\n\nWhat Does the\n\nWhat is the Difference Between the\n\nHow to Generate a Random Number from 1 to 10 in Python?\n\nWhat is the Use of the\n\nThe function is used to generate a random float number between 0.0 and 1.0. It’s useful when you need a random decimal value within this range, and it is commonly used in simulations, games, testing, and wherever random sampling is required. Because it generates a number up to but not including 1.0, it’s particularly useful when combined with other functions or scaled to fit a desired range. For example, multiplying the result by 100 would provide a random float from 0.0 to 100.0, not inclusive of 100."
    },
    {
        "link": "https://geeksforgeeks.org/python-random-module",
        "document": "Python Random module generates random numbers in Python. These are pseudo-random numbers means they are not truly random.\n\nThis module can be used to perform random actions such as generating random numbers, printing random a value for a list or string, etc. It is an in-built function in Python.\n\nList of all the functions Python Random Module\n\nThere are different random functions in the Random Module of Python. Look at the table below to learn more about these functions:\n\nLet’s discuss some common operations performed by Random module in Python.\n\nExample 1: Printing a random value from a list in Python.\n\nThis code uses the module to select a random element from the list using the function. It prints a random element from the list, demonstrating how to pick a random item from a sequence in Python.\n\nExample 2: Creating random numbers with Python seed() in Python.\n\nAs stated above random module creates pseudo-random numbers. Random numbers depend on the seeding value. For example, if the seeding value is 5 then the output of the below program will always be the same. Therefore, it must not be used for encryption.\n\nThe code sets the random number generator’s seed to 5 using , ensuring reproducibility. It then prints two random floating-point numbers between 0 and 1 using . The seed makes these numbers the same every time you run the code with a seed of 5, providing consistency in the generated random values.\n\nrandom.randint() method is used to generate random integers between the given range.\n\nThis code uses the ‘ module to generate random integers within specific ranges. It first generates a random integer between 5 and 15 (inclusive) and then between -10 and -2 (inclusive). The generated integers are printed with appropriate formatting.\n\nA random.random() method is used to generate random floats between 0.0 to 1.\n\nIn this code, we are using the function from the ‘ module in Python. It prints a random floating-point number between 0 and 1 when you call .\n\nRandom sampling from a list in Python (random.choice, and sample)\n\nExample 1: Python random.choice() function is used to return a random item from a list, tuple, or string.\n\nThe code uses the function from the module to randomly select elements from different data types. It demonstrates selecting a random element from a list, a string, and a tuple. The chosen elements will vary each time you run the code, making it useful for random selection from various data structures.\n\nExample 2: Python random.sample() function is used to return a random item from a list, tuple, or string.\n\nThis code utilizes the function from the ‘ module to obtain random samples from various data types. It selects three random elements without replacement from a list, a tuple, and a string, demonstrating its versatility in generating distinct random samples. With each execution, the selected elements will differ, providing random subsets from the input data structures.\n\nA random.shuffle() method is used to shuffle a sequence (list). Shuffling means changing the position of the elements of the sequence. Here, the shuffling operation is inplace.\n\nThis code uses the function from the ‘ module to shuffle the elements of a list named ‘ . It first prints the original order of the list, then shuffles it twice. The second shuffle creates a new random order, and the list’s content is displayed after each shuffle. This demonstrates how the elements are rearranged randomly in the list with each shuffle operation.\n\nIn this article we discussed about Python Random module, and also saw some examples of functions in random module in Python. Random module in Python is very important and contains very useful functions.\n\nHope this helps you in using Python Random module functions.\n\nWhat is a random module in Python?\n\nWhat is random vs Randint in Python?\n\nHow many functions are there in the random module?\n\nWhat is the syntax of the random function?\n\nWhat is the difference between the math module and the random module?"
    },
    {
        "link": "https://w3schools.com/python/ref_random_randint.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://docs.python.org/3/library/time.html",
        "document": "This module provides various time-related functions. For related functionality, see also the and modules.\n\nAlthough this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.\n\nAn explanation of some terminology and conventions is in order.\n• None The epoch is the point where the time starts, the return value of . It is January 1, 1970, 00:00:00 (UTC) on all platforms.\n• None The term seconds since the epoch refers to the total number of elapsed seconds since the epoch, typically excluding leap seconds. Leap seconds are excluded from this total on all POSIX-compliant platforms.\n• None The functions in this module may not handle dates and times before the epoch or far in the future. The cut-off point in the future is determined by the C library; for 32-bit systems, it is typically in 2038.\n• None Function can parse 2-digit years when given format code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69–99 are mapped to 1969–1999, and values 0–68 are mapped to 2000–2068.\n• None UTC is Coordinated Universal Time and superseded Greenwich Mean Time or GMT as the basis of international timekeeping. The acronym UTC is not a mistake but conforms to an earlier, language-agnostic naming scheme for time standards such as UT0, UT1, and UT2.\n• None DST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.\n• None The precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock “ticks” only 50 or 100 times a second.\n• None On the other hand, the precision of and is better than their Unix equivalents: times are expressed as floating-point numbers, returns the most accurate time available (using Unix where available), and will accept a time with a nonzero fraction (Unix is used to implement this, where available).\n• None The time value as returned by , , and , and accepted by , and , is a sequence of 9 integers. The return values of , , and also offer attribute names for individual fields. See for a description of these objects. Changed in version 3.3: The type was extended to provide the and attributes when platform supports corresponding members. Changed in version 3.6: The attributes and are now available on all platforms.\n• None Use the following functions to convert between time representations:\n\nConvert a tuple or representing a time as returned by or to a string of the following form: . The day field is two characters long and is space padded if the day is a single digit, e.g.: . If t is not provided, the current time as returned by is used. Locale information is not used by . Unlike the C function of the same name, does not add a trailing newline. Return the clk_id of the thread-specific CPU-time clock for the specified thread_id. Use or the attribute of objects to get a suitable value for thread_id. Passing an invalid or expired thread_id may result in undefined behavior, such as segmentation fault. See the man page for pthread_getcpuclockid(3) for further information. Return the resolution (precision) of the specified clock clk_id. Refer to Clock ID Constants for a list of accepted values for clk_id. Return the time of the specified clock clk_id. Refer to Clock ID Constants for a list of accepted values for clk_id. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Set the time of the specified clock clk_id. Currently, is the only accepted value for clk_id. Use to avoid the precision loss caused by the type. Similar to but set time with nanoseconds. Convert a time expressed in seconds since the epoch to a string of a form: representing local time. The day field is two characters long and is space padded if the day is a single digit, e.g.: . If secs is not provided or , the current time as returned by is used. is equivalent to . Locale information is not used by . Get information on the specified clock as a namespace object. Supported clock names and the corresponding functions to read their value are: The result has the following attributes:\n• None adjustable: if the clock can be changed automatically (e.g. by a NTP daemon) or manually by the system administrator, otherwise\n• None implementation: The name of the underlying C function used to get the clock value. Refer to Clock ID Constants for possible values.\n• None monotonic: if the clock cannot go backward, otherwise\n• None resolution: The resolution of the clock in seconds ( ) Convert a time expressed in seconds since the epoch to a in UTC in which the dst flag is always zero. If secs is not provided or , the current time as returned by is used. Fractions of a second are ignored. See above for a description of the object. See for the inverse of this function. Like but converts to local time. If secs is not provided or , the current time as returned by is used. The dst flag is set to when DST applies to the given time. may raise , if the timestamp is outside the range of values supported by the platform C or functions, and on or failure. It’s common for this to be restricted to years between 1970 and 2038. This is the inverse function of . Its argument is the or full 9-tuple (since the dst flag is needed; use as the dst flag if it is unknown) which expresses the time in local time, not UTC. It returns a floating-point number, for compatibility with . If the input value cannot be represented as a valid time, either or will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries). The earliest date for which it can generate a time is platform-dependent. Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. Use to avoid the precision loss caused by the type. Changed in version 3.5: The function is now always available and always system-wide. Changed in version 3.10: On macOS, the function is now system-wide. Similar to , but return time as nanoseconds. Return the value (in fractional seconds) of a performance counter, i.e. a clock with the highest available resolution to measure a short duration. It does include time elapsed during sleep and is system-wide. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. CPython implementation detail: On CPython, use the same clock as and is a monotonic clock, i.e. a clock that cannot go backwards. Use to avoid the precision loss caused by the type. Changed in version 3.10: On Windows, the function is now system-wide. Changed in version 3.13: Use the same clock as . Similar to , but return time as nanoseconds. Return the value (in fractional seconds) of the sum of the system and user CPU time of the current process. It does not include time elapsed during sleep. It is process-wide by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Suspend execution of the calling thread for the given number of seconds. The argument may be a floating-point number to indicate a more precise sleep time. If the sleep is interrupted by a signal and no exception is raised by the signal handler, the sleep is restarted with a recomputed timeout. The suspension time may be longer than requested by an arbitrary amount, because of the scheduling of other activity in the system. On Windows, if secs is zero, the thread relinquishes the remainder of its time slice to any other thread that is ready to run. If there are no other threads ready to run, the function returns immediately, and the thread continues execution. On Windows 8.1 and newer the implementation uses a high-resolution timer which provides resolution of 100 nanoseconds. If secs is zero, is used.\n• None Use if available (resolution: 1 nanosecond);\n• None Or use if available (resolution: 1 nanosecond); To emulate a “no-op”, use instead of . To voluntarily relinquish the CPU, specify a real-time scheduling policy and use instead. Changed in version 3.5: The function now sleeps at least secs even if the sleep is interrupted by a signal, except if the signal handler raises an exception (see PEP 475 for the rationale). Changed in version 3.11: On Unix, the and functions are now used if available. On Windows, a waitable timer is now used. Convert a tuple or representing a time as returned by or to a string as specified by the format argument. If t is not provided, the current time as returned by is used. format must be a string. is raised if any field in t is outside of the allowed range. 0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one. The following directives can be embedded in the format string. They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the result: Day of the month as a decimal number [01,31]. Day of the year as a decimal number [001,366]. Locale’s equivalent of either AM or PM. Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0. Day of the week (Monday is 1; Sunday is 7) as a decimal number [1, 7]. Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0. Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. Time zone name (no characters if no time zone exists). Deprecated. ISO 8601 year (similar to but follows the rules for the ISO 8601 calendar year). The year starts with the week that contains the first Thursday of the calendar year. ISO 8601 week number (as a decimal number [01,53]). The first week of the year is the one that contains the first Thursday of the year. Weeks start on Monday.\n• None The format directive only applies to , not to . However, see also and where the format directive applies to microseconds.\n• None When used with the function, the directive only affects the output hour field if the directive is used to parse the hour.\n• None The range really is to ; value is valid in timestamps representing leap seconds and value is supported for historical reasons.\n• None When used with the function, and are only used in calculations when the day of the week and the year are specified. Here is an example, a format for dates compatible with that specified in the RFC 2822 Internet email standard. Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C. To see the full set of format codes supported on your platform, consult the strftime(3) documentation. On some platforms, an optional field width and precision specification can immediately follow the initial of a directive in the following order; this is also not portable. The field width is normally 2 except for where it is 3. Parse a string representing a time according to a format. The return value is a as returned by or . The format parameter uses the same directives as those used by ; it defaults to which matches the formatting returned by . If string cannot be parsed according to format, or if it has excess data after parsing, is raised. The default values used to fill in any missing data when more accurate values cannot be inferred are . Both string and format must be strings. Support for the directive is based on the values contained in and whether is true. Because of this, it is platform-specific except for recognizing UTC and GMT which are always known (and are considered to be non-daylight savings timezones). Only the directives specified in the documentation are supported. Because is implemented per platform it can sometimes offer more directives than those listed. But is independent of any platform and thus does not necessarily support all directives available that are not documented as supported. The type of the time value sequence returned by , , and . It is an object with a named tuple interface: values can be accessed by index and by attribute name. The following values are present: Note that unlike the C structure, the month value is a range of [1, 12], not [0, 11]. In calls to , may be set to 1 when daylight savings time is in effect, and 0 when it is not. A value of -1 indicates that this is not known, and will usually result in the correct state being filled in. When a tuple with an incorrect length is passed to a function expecting a , or having elements of the wrong type, a is raised. Return the time in seconds since the epoch as a floating-point number. The handling of leap seconds is platform dependent. On Windows and most Unix systems, the leap seconds are not counted towards the time in seconds since the epoch. This is commonly referred to as Unix time. Note that even though the time is always returned as a floating-point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls. The number returned by may be converted into a more common time format (i.e. year, month, day, hour, etc…) in UTC by passing it to function or in local time by passing it to the function. In both cases a object is returned, from which the components of the calendar date may be accessed as attributes. Use to avoid the precision loss caused by the type. Similar to but returns time as an integer number of nanoseconds since the epoch. Return the value (in fractional seconds) of the sum of the system and user CPU time of the current thread. It does not include time elapsed during sleep. It is thread-specific by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls in the same thread is valid. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Reset the time conversion rules used by the library routines. The environment variable specifies how this is done. It will also set the variables (from the environment variable), (non-DST seconds West of UTC), (DST seconds west of UTC) and (to 0 if this timezone does not have any daylight saving time rules, or to nonzero if there is a time, past, present or future when daylight saving time applies). Although in many cases, changing the environment variable may affect the output of functions like without calling , this behavior should not be relied on. The environment variable should contain no whitespace. The standard format of the environment variable is (whitespace added for clarity): Where the components are: Three or more alphanumerics giving the timezone abbreviations. These will be propagated into time.tzname The offset has the form: . This indicates the value added the local time to arrive at UTC. If preceded by a ‘-’, the timezone is east of the Prime Meridian; otherwise, it is west. If no offset follows dst, summer time is assumed to be one hour ahead of standard time. Indicates when to change to and back from DST. The format of the start and end dates are one of the following: The Julian day n (1 <= n <= 365). Leap days are not counted, so in all years February 28 is day 59 and March 1 is day 60. The zero-based Julian day (0 <= n <= 365). Leap days are counted, and it is possible to refer to February 29. The d’th day (0 <= d <= 6) of week n of month m of the year (1 <= n <= 5, 1 <= m <= 12, where week 5 means “the last d day in month m” which may occur in either the fourth or the fifth week). Week 1 is the first week in which the d’th day occurs. Day zero is a Sunday. has the same format as except that no leading sign (‘-’ or ‘+’) is allowed. The default, if time is not given, is 02:00:00. On many Unix systems (including *BSD, Linux, Solaris, and Darwin), it is more convenient to use the system’s zoneinfo (tzfile(5)) database to specify the timezone rules. To do this, set the environment variable to the path of the required timezone datafile, relative to the root of the systems ‘zoneinfo’ timezone database, usually located at . For example, , , or .\n\nThe offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if is nonzero. See note below. Nonzero if a DST timezone is defined. See note below. The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). See note below. A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. If no DST timezone is defined, the second string should not be used. See note below. For the above Timezone constants ( , , , and ), the value is determined by the timezone rules in effect at module load time or the last time is called and may be incorrect for times in the past. It is recommended to use the and results from to obtain timezone information. More object-oriented interface to dates and times. Internationalization services. The locale setting affects the interpretation of many format specifiers in and . General calendar-related functions. is the inverse of from this module."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/python-time-sleep",
        "document": "Hello everyone, hope you are learning python well. In this tutorial we will learn about python time sleep() method. Python sleep function belongs to the python time module that is already discussed earlier\n\nPython time sleep function is used to add delay in the execution of a program. We can use python sleep function to halt the execution of the program for given time in seconds. Notice that python time sleep function actually stops the execution of current thread only, not the whole program.\n\nPython sleep() is a method of python time module. So, first we have to import the time module then we can use this method. Way of using python sleep() function is: Here the argument of the sleep() method t is in seconds. That means, when the statement time.sleep(t) is executed then the next line of code will be executed after t seconds. See the following example:\n\nIf you run the above code then you will see that the second print executes after 5 seconds. So you can make delay in your code as necessary. The argument can be in floating value also to have more precise delay. For example you want to make delay for 100 milliseconds which is 0.1 seconds, as following:\n\nLet’s see the following example of python time sleep function.\n\nElapsed time is greater than 5 because each time in the for loop, execution is halted for 1 second. The extra time is because of the execution time of the program, operating system thread scheduling etc.\n\nSometimes you may need to delay for different seconds of time. You can do it as follows:\n\nYou may need to print some message in a dramatic way, you can do it as following:\n\nIf you run the above code then, you will see that after printing every character of the message it’s taking some time, which seems like dramatic.\n\nPython time sleep() function is very important method for multithreading. Below is a simple example showing that the python time sleep function halts the execution of current thread only in multithreaded programming.\n\nBelow image shows the output produced by above python thread sleep example. From the output it’s very clear that only the threads are being stopped from execution and not the whole program by python time sleep function. That’s all about python time sleep function or python sleep function. Reference: StackOverFlow Post, API Doc"
    },
    {
        "link": "https://datacamp.com/tutorial/python-time-sleep",
        "document": "Master the basics of data analysis with Python in just four hours. This online course will introduce the Python interface and explore popular packages."
    },
    {
        "link": "https://geeksforgeeks.org/sleep-in-python",
        "document": "Python time sleep() function suspends execution for the given number of seconds.\n\nSometimes, there is a need to halt the flow of the program so that several other executions can take place or simply due to the utility required. sleep() can come in handy in such a situation which provides an accurate and flexible way to halt the flow of code for any period of time. This function discusses the insight of this function.\n\nThe start time and end time will be printed with 6 seconds delay.\n\nThe list will be displayed after the delay of 3 minutes\n\nAfter the delay of 3 minutes, the list will be displayed as:\n\nThere are many applications that sleep() is used for. Be its execution of the background thread which is repeated at regular intervals, this can be implemented with the help of sleep(). Another popular application is using sleep() to print the words letter by letter for a good user interface. The latter is represented in the code below.\n\nExample 1: Creating Time Delay in the Python loop\n\nNote: Visible effect of sleep() can be seen in the local editor.\n\nAfter the delay of 5 seconds, we will get the output as:\n\nAfter the delay of 4 seconds, we will get the output as:\n\nAfter every 7 seconds, the items on the list will be displayed as:\n\nAfter the delay of 5 seconds, the list will be displayed as:\n\nThen after every 13 seconds, the items on the list will be displayed as:"
    },
    {
        "link": "https://analyticsvidhya.com/blog/2024/01/time-sleep-in-python",
        "document": "In the programming realm, precise timing is critical. Whether scripting, implementing timers, or simulating real-time processes, having control over code execution timing is indispensable. Enter the time.sleep() function in Python—an essential tool for introducing pauses in your code. This article delves into the intricacies of this potent function, covering advanced usage, common pitfalls, and troubleshooting techniques. Practical examples and use cases are provided to guide you in effectively leveraging time.sleep() in your projects.\n\nThe time.sleep() function, a built-in Python feature, enables you to halt code execution for a specified duration. It proves beneficial for introducing delays, synchronizing threads or processes, and simulating real-time processes, providing control over code timing and flow.\n\nThe syntax of the time.sleep() function is straightforward:\n\nIn the programming realm, precise timing is critical. Whether scripting, implementing timers, or simulating real-time processes, having control over code execution timing is indispensable. Enter the time.sleep() function in Python—an essential tool for introducing pauses in your code. This article delves into the intricacies of this potent function, covering advanced usage, common pitfalls, and troubleshooting techniques. Practical examples and use cases are provided to guide you in effectively leveraging time.sleep() in your projects.\n\nHere, “seconds” is the parameter specifying the delay duration in seconds, allowing for floating-point values for fractional seconds. For instance, time.sleep(2.5) pauses execution for 2.5 seconds.\n\nA primary use case of time.sleep() is inserting delays into your code. Consider a script requiring a pause before executing the next line.\n\nThis example introduces a 2-second delay before executing the second line, useful for creating pauses between actions or simulating real-world scenarios.\n\nAnother crucial aspect involves handling exceptions with time.sleep(). When encountering an exception, introducing a delay before retrying the operation can prevent system overload or further errors:\n\nHere, time.sleep(5) introduces a 5-second delay before attempting the operation again, beneficial for scenarios like network requests or database connections facing temporary issues.\n\nAn advanced use case involves implementing timers and delays using time.sleep(). For instance, creating a countdown timer displaying remaining time after each second:\n\nHere, time.sleep(1) introduces a 1-second delay between displaying each remaining time, showcasing the versatility of time.sleep() in timer implementation.\n\nTime.sleep() can be creatively used for animation effects by introducing delays between frames. For example, simulating the movement of a bouncing ball:\n\nIn this instance, time.sleep(0.5) introduces a 0.5-second delay between frames, creating a smooth animation effect.\n\nThe function proves useful in simulating real-time processes. Suppose you’re modeling the behavior of a traffic signal:\n\nHere, the loop with time.sleep() simulates a traffic signal’s behavior with delays between each signal change, adding a realistic touch to the simulation.\n\nTime.sleep() aids in synchronizing multiple threads or processes. In scenarios requiring coordinated actions, introducing delays using time.sleep() ensures synchronization:\n\nIn this example, time.sleep(2) introduces a 2-second delay between starting two threads, synchronizing their actions.\n\nWhile potent, time.sleep() may lead to unexpected behavior, especially if used in a loop without considering other operation times. To overcome this, use the time module’s time.perf_counter() to accurately measure elapsed time.\n\nExcessive delays can hinder code responsiveness. Analyze and determine optimal delay times to avoid making your code less efficient.\n\nConsider interruptions and signals when using time.sleep(). For example, use the signal module to gracefully handle keyboard interrupts (Ctrl+C) by catching the KeyboardInterrupt exception.\n\nDelaying script execution is a common use case. For example, introducing a 3-second delay before executing specific code:\n\nAnother practical use is creating a countdown timer, displaying remaining time after each second:\n\nSimulating user interaction is achievable using time.sleep(). For instance, automating actions on a website with delays between each action.\n\nImplementing a rate limiter is another practical use. For instance, limiting requests per second in a web scraping project:\n\nIn Python, time.wait() is another function for introducing delays. However, a crucial difference exists: time.sleep() pauses the current thread, while time.wait() halts the entire program. In most cases, time.sleep() is preferred for introducing delays.\n\nWhen dealing with multiple threads or processes, time.sleep() impact on overall performance should be considered. Inefficient resource utilization can be addressed by exploring alternatives such as threading.Timer or multiprocessing.Queue for delays without blocking other threads or processes.\n\nWhile time.sleep() is versatile, alternative approaches exist. For example, asyncio for asynchronous programming provides advanced features for managing delays and concurrency. Libraries like gevent and Twisted offer alternative ways to handle delays and asynchronous tasks.\n\nThis article delved into the Python time.sleep() function and its diverse use cases. By mastering time.sleep(), you gain control over the timing and flow of your Python programs, enhancing efficiency and responsiveness. Experiment with time.sleep() to unlock the full potential of your projects.\n\nIf you found this article informative, then please share it with your friends and comment below your queries and feedback. I have listed some amazing Python articles below for your reference:\n• Datetime in Python: A Comprehensive Guide to Working with Dates and Times"
    }
]