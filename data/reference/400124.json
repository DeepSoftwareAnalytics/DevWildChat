[
    {
        "link": "https://code.visualstudio.com/docs/cpp/configure-intellisense",
        "document": "This article is about configuring the C/C++ extension to provide C++ specific IntelliSense suggestions in Visual Studio Code. IntelliSense is a helpful tool built into VS Code that provides various code editing features to help you code faster and more efficiently. For example, code completion, parameter info, syntax highlighting, Code Actions (light bulbs), and member lists are all generated using IntelliSense.\n\nC/C++ IntelliSense only requires a C/C++ compiler to be installed on your system. The C/C++ compiler provides C++ specific information to IntelliSense, such as the locations of system include paths and other settings. For project level configurations, reference Project level IntelliSense configuration section.\n\nWhen will the C/C++ extension configure core IntelliSense features for me?\n\nA compiler is the only requirement to configure core IntelliSense functionality. To identify a compiler for IntelliSense, the C/C++ extension scans common paths on your machine for compilers such as Clang, GCC, MinGW, cygwin, cygwin64, and MSVC. If any of these compilers are identified and in a secure location, they are automatically configured for IntelliSense. Otherwise, a notification is displayed asking you to confirm that this compiler should be configured for IntelliSense. In either of these scenarios, the compiler selected is also set as the default compiler.\n\nHow to check whether IntelliSense is configured\n\nIf you don't have IntelliSense configured, the C/C++ extension shows a yellow indicator in the status bar with a warning sign labeled Configure IntelliSense.\n\nTo configure, select the status bar indicator, which brings up the configuration Quick Pick. The Quick Pick can help you select or install a C/C++ compiler.\n\nIf you do not see a status bar indicator, you can also check your project's file. This file stores all of your IntelliSense configuration settings. Navigate to this file by selecting C/C++: Edit Configurations (UI) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)). Check the to find your configuration. To learn more about the file, you can review the schema reference.\n\nIntelliSense configuration is stored in the file, which is automatically created in your workspace. All three of the following options are different ways of editing the file:\n\nOpen the Quick Pick by entering Select IntelliSense Configuration in the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)), which shows you a dropdown with all of the configuration options found by the C/C++ extension on your machine.\n\nSelect one of the options available. If you select a compiler, this compiler is used by IntelliSense by default. You can return to the Configure IntelliSense Quick Pick at any point to change which option is used to configure IntelliSense.\n\nIf no options are available in the Quick Pick, no compiler could be identified in your system. You can browse your machine manually or install a C/C++ compiler. To install on a Windows machine, select the Help me install a compiler option that redirects you to the step-by-step walkthrough of how to install a C/C++ compiler. On a macOS or Linux machine, select Install a compiler and navigate through the prompts to have a C++ compiler installed on your machine.\n\nOption 2. Edit your IntelliSense configurations through the UI\n\nOpen your IntelliSense configuration by selecting C/C++: Edit Configurations (UI) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)). This view is a user interface for the file.\n\nSet the Compiler path field to the full path of the compiler you're using to build your project. For example, when using the default install path for GCC on Linux, the compiler path is . Set the IntelliSense mode to the architecture-specific variant of the compiler you're using.\n\nYou can edit the file directly to customize your configuration. Use the C/C++ Edit Configurations (JSON) command from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)), then the file is created in the folder of your workspace.\n\nUse the variable to add a compiler. This variable is the full path of the compiler you're using to build your project. For example, when using the default install path for GCC on Linux, the compiler path is .\n\nFor more information about the file, review the schema reference.\n\nSelect the sample below based on your operating system for a file:\n\nConfiguring IntelliSense with a compiler provides you with core IntelliSense features. This setup is called the base configuration. For more complex usage scenarios, such as setting up a project that requires:\n• Additional include paths, such as references to one or multiple different libraries\n• Specific compiler arguments that influence the behavior of the language(and therefore IntelliSense)\n\nThere are multiple other ways to configure IntelliSense. You can provide these additional configurations either through:\n• A custom configuration provider in the form of another VS Code extension (for example, the Makefile Tools or CMake Tools extensions)\n\nA custom configuration provider is another extension in VS Code that can potentially provide more accurate C++ IntelliSense configuration than the C/C++ extension. For example, for the CMake or Make build systems, where the Makefile Tools or CMake Tools extensions can be configuration providers. To add an extension as a configuration provider, either select the extension through the configuration Quick Pick, add it to configuration UI by editing the Configuration provider field under Advanced Settings, or add the field to your file. For example, for the CMake extension, the path to add would be .\n\nThe C/C++ extension scans your system for custom configuration providers. If it identifies only one custom configuration provider, this configuration provider is automatically configured for IntelliSense. If there are multiple configuration providers identified, you need to select which the extension should use by opening the configuration Quick Pick.\n\nAnother option to provide IntelliSense configuration is a compile_commands.json file, which describes the exact compile commands used for every file in a project. This file is often generated by a build system, such as CMake or Bazel, by setting command line arguments when configuring your project. A file can be selected for configuration through the same methods as discussed in the How to configure IntelliSense section via the configuration Quick Pick, editing configurations through the UI, or editing the file directly. In the configuration UI, the file can be added under Advanced Configurations and the Compile commands field. For example, if your file is in the root of your workspace, enter in the Compile commands field. Otherwise, it can be added to the file directly using the configuration property.\n\nIf the compile commands database does not contain an entry for the translation unit that corresponds to the file you opened in the editor, your base configuration (found in ) is used instead (such as your and ). If the C/C++ extension reverts to the base configuration, the language status bar indicator shows you the label Configure IntelliSense in the status bar.\n\nIf you specified a custom configuration provider and a file, the custom configuration provider is queried first for an IntelliSense configuration.\n\nIf your program includes header files that aren't in your workspace or that aren't in the standard library path, you can modify the Include Path. The C/C++ extension populates the include path by querying the compiler specified by Compiler path. If the extension can't find the path for the target system libraries, you can enter the include path manually.\n\nYou can determine if IntelliSense is actively working on your file using the language status bar. To invoke the language status bar, open a C++ file. The status bar shows the text {} C++. Hover over the {} symbol to open the language status bar flyout. The top item in the flyout indicates the IntelliSense status. Here are the different statuses and their meanings:\n• IntelliSense: Ready = IntelliSense is configured for the C/C++ extension and automatically activates if you interact with the editor, for example, by writing code.\n• IntelliSense: Updating = IntelliSense is actively working to determine any code completions, syntax highlighting, etc. based on changes you're making to your code.\n\nYou can select the pin icon on the right of any item in the language status bar flyout to permanently pin it to your status bar.\n• For more information about IntelliSense configuration, see Customizing default settings.\n• If you have trouble configuring the settings, please start a discussion at GitHub discussions, or if you find an issue that needs to be fixed, file an issue at GitHub issues.\n• Review the Overview of the C++ extension."
    },
    {
        "link": "https://code.visualstudio.com/docs/languages/cpp",
        "document": "C/C++ support for Visual Studio Code is provided by a Microsoft C/C++ extension to enable cross-platform C and C++ development on Windows, Linux, and macOS. When you create a file, the extension adds features such as syntax highlighting (colorization), smart completions and hovers (IntelliSense), and error checking.\n• Select the Extensions view icon on the Activity bar or use the keyboard shortcut ( ).\n\nSet up your C++ Environment\n\nC++ is a compiled language meaning your program's source code must be translated (compiled) before it can be run on your computer. The C/C++ extension doesn't include a C++ compiler or debugger, since VS Code as an editor relies on command-line tools for the development workflow. You need to install these tools or use the tools already installed on your computer.\n\nCheck if you have a compiler installed\n\nCommon compilers that already come preinstalled on some platforms are the GNU Compiler Collection (GCC) on Linux and the Clang tools with Xcode on macOS.\n\nTo check if you already have them installed:\n• Open a new VS Code terminal window using (⌃⇧` (Windows, Linux Ctrl+Shift+`))\n• Use the following command to check for the GCC compiler : Or this command for the Clang compiler :\n\nThe output should show you the compiler version and details. If neither are found, make sure your compiler executable is in your platform path ( on Windows, on Linux and macOS) so that the C/C++ extension can find it. Otherwise, use the instructions in the section below to install a compiler.\n\nIf you don't have a compiler installed, you can follow one of our installation tutorials:\n\nGo to the MSVC tutorial\n\nGo to the MinGW tutorial\n\nGo to the GCC tutorial\n\nGo to the Clang tutorial\n\nTo understand the process, let's install Mingw-w64 via MSYS2. Mingw-w64 is a popular, free toolset on Windows. It provides up-to-date native builds of GCC, Mingw-w64, and other helpful C++ tools and libraries.\n• Download using this direct link to the MinGW installer.\n• Run the installer and follow the steps of the installation wizard. Note, MSYS2 requires 64 bit Windows 8.1 or newer.\n• In the wizard, choose your desired Installation Folder. Record this directory for later. In most cases, the recommended directory is acceptable. The same applies when you get to setting the start menu shortcuts step. When complete, ensure the Run MSYS2 now box is checked and select Finish. A MSYS2 terminal window will then automatically open.\n• In this terminal, install the MinGW-w64 toolchain by running the following command:\n• A list of available packages will be displayed\n• Accept the default number of packages in the group by pressing Enter.\n• Enter when prompted whether to proceed with the installation.\n• Add the path of your MinGW-w64 folder to the Windows environment variable by using the following steps:\n• In the Windows search bar, type Settings to open your Windows Settings.\n• Search for Edit environment variables for your account.\n• In your User variables, select the variable and then select Edit.\n• Select New and add the MinGW-w64 destination folder you recorded during the installation process to the list. If you selected the default installation steps, the path is: .\n• Select OK, and then select OK again in the Environment Variables window to update the environment variable. You have to reopen any console windows for the updated environment variable to be available.\n• Check that your MinGW-w64 tools are correctly installed and available, open a new Command Prompt and type:\n\nYou should see output that states which versions of GCC, g++ and GDB you have installed. If this is not the case, make sure your PATH entry matches the Mingw-w64 binary location where the compiler tools are located or reference the troubleshooting section.\n\nTo make sure the compiler is installed and configured correctly, lets create a Hello World C++ program.\n• On Windows, launch a Windows command prompt (Enter Windows command prompt in the Windows search bar). On macOS and Linux, you can enter these commands in the terminal.\n• Run the following commands. They are creating an empty folder called where you can place all your VS Code projects. The next commands create and navigate you to a subfolder called . From there, you are opening directly in VS Code using the command.\n\nThe \"code .\" command opens VS Code in the current working folder, which becomes your \"workspace\". Accept the Workspace Trust dialog by selecting Yes, I trust the authors since this is a folder you created.\n\nNow create a new file called with the New File button in the File Explorer or File > New File command.\n\nPaste in the following source code:\n\nNow press ⌘S (Windows, Linux Ctrl+S) to save the file. You can also enable AutoSave to automatically save your file changes, by checking Auto Save in the main File menu.\n• Make sure you have open so it is the active file in your editor.\n• Press the play button in the top right corner of the editor.\n• Choose C/C++: g++.exe build and debug active file from the list of detected compilers on your system.\n\nYou are only prompted to choose a compiler the first time you run . This compiler becomes \"default\" compiler set in your file.\n• After the build succeeds, you should see \"Hello World\" appear in the integrated Terminal.\n\nCongratulations! You've just run your first C++ program in VS Code! The next step is to learn more about the Microsoft C/C++ extension's language features such as IntelliSense, code navigation, build configuration, and debugging using one of the Tutorials in the next section.\n\nGet started with C++ and VS Code with tutorials for your environment:\n\nYou can find more documentation on using the Microsoft C/C++ extension under the C++ section of the VS Code website, where you can find articles on:\n\nVS Code and the C++ extension support Remote Development allowing you to work over SSH on a remote machine or VM, inside a Docker container, or in the Windows Subsystem for Linux (WSL).\n• If the remote source files are hosted in WSL, use the WSL extension.\n• If you are connecting to a remote machine with SSH, use the Remote - SSH extension.\n• If the remote source files are hosted in a container (for example, Docker), use the Dev Containers extension.\n\nGitHub Copilot is an AI-powered code completion tool that helps you write code faster and smarter. You can use the GitHub Copilot extension in VS Code to generate code, or to learn from the code it generates.\n\nGitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.\n\nYou can learn more about how to get started with Copilot in the Copilot documentation.\n\nIf you run into any issues or have suggestions for the Microsoft C/C++ extension, please file issues and suggestions on GitHub. If you haven't already provided feedback, you can take this quick survey."
    },
    {
        "link": "https://code.visualstudio.com/docs/cpp/config-msvc",
        "document": "Configure VS Code for Microsoft C++\n\nIn this tutorial, you configure Visual Studio Code to use the Microsoft Visual C++ compiler and debugger on Windows.\n\nAfter configuring VS Code, you will compile and debug a simple Hello World program in VS Code. This tutorial does not teach you details about the Microsoft C++ toolset or the C++ language. For those subjects, there are many good resources available on the Web.\n\nIf you have any problems, feel free to file an issue for this tutorial in the VS Code documentation repository.\n\nTo successfully complete this tutorial, you must do the following:\n• Install the C/C++ extension for VS Code. You can install the C/C++ extension by searching for 'c++' in the Extensions view (⇧⌘X (Windows, Linux Ctrl+Shift+X)).\n• If you have a recent version of Visual Studio, open the Visual Studio Installer from the Windows Start menu and verify that the C++ workload is checked. If it's not installed, then check the box and select the Modify button in the installer. You can also install the Desktop development with C++ workload without a full Visual Studio IDE installation. From the Visual Studio Downloads page, scroll down until you see Tools for Visual Studio under the All Downloads section and select the download for Build Tools for Visual Studio 2022. This will launch the Visual Studio Installer, which will bring up a dialog showing the available Visual Studio Build Tools workloads. Check the Desktop development with C++ workload and select Install.\n\nTo use MSVC from a command line or VS Code, you must run from a Developer Command Prompt for Visual Studio. An ordinary shell such as PowerShell, Bash, or the Windows command prompt does not have the necessary path environment variables set.\n\nTo open the Developer Command Prompt for VS, start typing 'developer' in the Windows Start menu, and you should see it appear in the list of suggestions. The exact name depends on which version of Visual Studio or the Visual Studio Build Tools you have installed. Select the item to open the prompt.\n\nYou can test that you have the C++ compiler, , installed correctly by typing 'cl' and you should see a copyright message with the version and basic usage description.\n\nIf the Developer Command Prompt is using the BuildTools location as the starting directory (you wouldn't want to put projects there), navigate to your user folder ( ) before you start creating new projects.\n\nFrom the Developer Command Prompt, create an empty folder called \"projects\" where you can store all your VS Code projects, then create a subfolder called \"helloworld\", navigate into it, and open VS Code ( ) in that folder ( ) by entering the following commands:\n\nThe \"code .\" command opens VS Code in the current working folder, which becomes your \"workspace\". As you go through the tutorial, you will see three files created in a folder in the workspace:\n\nIn the File Explorer title bar, select the New File button and name the file .\n\nNow paste in this source code:\n\nNow press ⌘S (Windows, Linux Ctrl+S) to save the file. Notice how the file you just added appears in the File Explorer view (⇧⌘E (Windows, Linux Ctrl+Shift+E)) in the side bar of VS Code:\n\nYou can also enable Auto Save to automatically save your file changes, by checking Auto Save in the main File menu.\n\nThe Activity Bar on the far left lets you open different views such as Search, Source Control, and Run. You'll look at the Run view later in this tutorial. You can find out more about the other views in the VS Code User Interface documentation.\n\nIn your new file, hover over or to see type information. After the declaration of the variable, start typing as you would when calling a member function. You should immediately see a completion list that shows all the member functions, and a window that shows the type information for the object:\n\nYou can press the Tab key to insert the selected member; then, when you add the opening parenthesis, you will see information about any arguments that the function requires.\n\nRemember, the C++ extension uses the C++ compiler you have installed on your machine to build your program. Make sure you have a C++ compiler installed before attempting to run and debug in VS Code.\n• Open so that it is the active file.\n• Press the play button in the top right corner of the editor.\n• Choose C/C++: cl.exe build and debug active file from the list of detected compilers on your system.\n\nYou'll only be asked to choose a compiler the first time you run . This compiler will be set as the \"default\" compiler in file.\n• After the build succeeds, your program's output will appear in the integrated Terminal.\n\nIf you get an error trying to build and debug with cl.exe, make sure you have started VS Code from the Developer Command Prompt for Visual Studio using the shortcut.\n\nThe first time you run your program, the C++ extension creates , which you'll find in your project's folder. stores build configurations.\n\nYour new file should look similar to the JSON below:\n\nThe setting specifies the program to run; in this case that is \"cl.exe\". The array specifies the command-line arguments that will be passed to cl.exe. These arguments must be specified in the order expected by the compiler.\n\nThis task tells the C++ compiler to take the active file ( ), compile it, and create an executable file ( switch) in the current directory ( ) with the same name as the active file but with the extension ( ), resulting in for our example.\n\nThe value is what you will see in the tasks list; you can name this whatever you like.\n\nThe value is what you will as the description of the task in the tasks list. It's highly recommended to rename this value to differentiate it from similar tasks.\n\nThe value selects the output parser to use for finding errors and warnings in the compiler output. For cl.exe, you'll get the best results if you use the problem matcher.\n\nFrom now on, the play button will read from to figure out how to build and run your program. You can define multiple build tasks in , and whichever task is marked as the default will be used by the play button. In case you need to change the default compiler, you can run Tasks: Configure default build task. Alternatively you can modify the file and remove the default by replacing this segment:\n\nYou can modify your to build multiple C++ files by using an argument like instead of .This will build all files in your current folder. You can also modify the output filename by replacing with a hard-coded filename (for example ).\n• Go back to so that it is the active file.\n• Set a breakpoint by clicking on the editor margin or using F9 on the current line.\n• From the drop-down next to the play button, select Debug C/C++ File.\n• Choose C/C++: cl.exe build and debug active file from the list of detected compilers on your system (you'll only be asked to choose a compiler the first time you run or debug ).\n\nThe play button has two modes: Run C/C++ File and Debug C/C++ File. It will default to the last-used mode. If you see the debug icon in the play button, you can select the play button to debug, instead of selecting the drop-down menu item.\n\nIf you get an error trying to build and debug with cl.exe, make sure you have started VS Code from the Developer Command Prompt for Visual Studio using the shortcut.\n\nBefore you start stepping through the code, let's take a moment to notice several changes in the user interface:\n• The Integrated Terminal appears at the bottom of the source code editor. In the Debug Output tab, you see output that indicates the debugger is up and running.\n• The editor highlights the line where you set a breakpoint before starting the debugger:\n• The Run and Debug view on the left shows debugging information. You'll see an example later in the tutorial.\n• At the top of the code editor, a debugging control panel appears. You can move this around the screen by grabbing the dots on the left side.\n\nNow you're ready to start stepping through the code.\n• Click or press the Step over icon in the debugging control panel. This will advance program execution to the first line of the for loop, and skip over all the internal function calls within the and classes that are invoked when the variable is created and initialized. Notice the change in the Variables window on the left. In this case, the errors are expected because, although the variable names for the loop are now visible to the debugger, the statement has not executed yet, so there is nothing to read at this point. The contents of are visible, however, because that statement has completed.\n• Press Step over again to advance to the next statement in this program (skipping over all the internal code that is executed to initialize the loop). Now, the Variables window shows information about the loop variables.\n• Press Step over again to execute the statement. (Note that the C++ extension does not print any output to the Debug Console until the loop exits.)\n• If you like, you can keep pressing Step over until all the words in the vector have been printed to the console. But if you are curious, try pressing the Step Into button to step through source code in the C++ standard library! To return to your own code, one way is to keep pressing Step over. Another way is to set a breakpoint in your code by switching to the tab in the code editor, putting the insertion point somewhere on the statement inside the loop, and pressing F9. A red dot appears in the gutter on the left to indicate that a breakpoint has been set on this line. Then press F5 to start execution from the current line in the standard library header. Execution will break on . If you like, you can press F9 again to toggle off the breakpoint.\n\nSometimes you might want to keep track of the value of a variable as your program executes. You can do this by setting a watch on the variable.\n• Place the insertion point inside the loop. In the Watch window, select the plus sign and in the text box, type , which is the name of the loop variable. Now view the Watch window as you step through the loop.\n• Add another watch by adding this statement before the loop: . Then, inside the loop, add this statement: . Now add a watch for as you did in the previous step.\n• To quickly view the value of any variable while execution is paused on a breakpoint, you can hover over it with the mouse pointer.\n\nWhen you debug with the play button or F5, the C++ extension creates a dynamic debug configuration on the fly.\n\nThere are cases where you'd want to customize your debug configuration, such as specifying arguments to pass to the program at runtime. You can define custom debug configurations in a file.\n\nTo create , choose Add Debug Configuration from the play button drop-down menu.\n\nYou'll then see a dropdown for various predefined debugging configurations. Choose C/C++: cl.exe build and debug active file.\n\nVS Code creates a file, which looks something like this:\n\nIn the JSON above, specifies the program you want to debug. Here it is set to the active file folder ( ) and active filename with the extension ( ), which if is the active file will be . The property is an array of arguments to pass to the program at runtime.\n\nBy default, the C++ extension won't add any breakpoints to your source code and the value is set to .\n\nChange the value to to cause the debugger to stop on the method when you start debugging.\n\nIf you want more control over the C/C++ extension, you can create a file, which will allow you to change settings such as the path to the compiler, include paths, C++ standard (default is C++17), and more.\n\nYou can view the C/C++ configuration UI by running the command C/C++: Edit Configurations (UI) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)).\n\nThis opens the C/C++ Configurations page. When you make changes here, VS Code writes them to a file called in the folder.\n\nVisual Studio Code places these settings in . If you open that file directly, it should look something like this:\n\nYou only need to add to the Include path array setting if your program includes header files that are not in your workspace or in the standard library path.\n\nThe setting is an important setting in your configuration. The extension uses it to infer the path to the C++ standard library header files. When the extension knows where to find those files, it can provide useful features like smart completions and Go to Definition navigation.\n\nThe C/C++ extension attempts to populate with the default compiler location based on what it finds on your system. The extension looks in several common compiler locations.\n• First check for the Microsoft Visual C++ compilerOpe\n• Then look for g++ on Windows Subsystem for Linux (WSL)\n\nIf you have g++ or WSL installed, you might need to change to match the preferred compiler for your project. For Microsoft C++, the path should look something like this, depending on which specific version you have installed: \"C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/cl.exe\".\n\nVS Code is now configured to use the Microsoft C++ compiler. The configuration applies to the current workspace. To reuse the configuration, just copy the JSON files to a folder in a new project folder (workspace) and change the names of the source file(s) and executable as needed.\n\nRun VS Code outside the Developer Command Prompt\n\nIn certain circumstances, it isn't possible to run VS Code from Developer Command Prompt for Visual Studio (for example, in Remote Development through SSH scenarios). In that case, you can automate initialization of Developer Command Prompt for Visual Studio during the build using the following configuration:\n\nThe term 'cl.exe' is not recognized\n\nIf you see the error \"The term 'cl.exe' is not recognized as the name of a cmdlet, function, script file, or operable program.\", this usually means you are running VS Code outside of a Developer Command Prompt for Visual Studio and VS Code doesn't know the path to the compiler.\n\nVS Code must either be started from the Developer Command Prompt for Visual Studio, or the task must be configured to run outside a Developer Command Prompt.\n\nYou can always check that you are running VS Code in the context of the Developer Command Prompt by opening a new Terminal (⌃⇧` (Windows, Linux Ctrl+Shift+`)) and typing 'cl' to verify is available to VS Code.\n\nIn this case, is available to VS Code through the environment variable, but VS Code still needs to either be started from the Developer Command Prompt for Visual Studio, or be configured to run outside the Developer Command Prompt. Otherwise, does not have access to important environment variables such as .\n• Review the Overview of the C++ extension.\n• Create a new workspace, copy your JSON files to it, adjust the necessary settings for the new workspace path, program name, and so on, and start coding!"
    },
    {
        "link": "https://devblogs.microsoft.com/cppblog/c-in-vs-code-getting-started-configuring-intellisense",
        "document": "Ever wondered how you can configure IntelliSense in the C++ Extension in Visual Studio Code? Or the easiest way to run your C++ code? With the new features added to the C++ extension, configuring IntelliSense and setting up a project is easier than ever. This includes a “Getting Started with C++” walkthrough, configure IntelliSense indicator, and the language status bar.\n\nhe new Getting Started walkthrough helps you set up your environment and will have you running your C++ code in no time. Invoke it by running the Open Walkthrough command in the command palette and selecting the C++ walkthrough. You can also follow along with this step-by-step tutorial:\n\nWhile this video is specifically using macOS, the walkthrough can be used with any platform. It includes steps on how to up a C++ environment, create a file, run your code, debug your code, and use advanced debugging features. It also helps you install a C++ compiler based on your operating system and configure IntelliSense to use the newly installed compiler.\n\nThis leads to the question – what is IntelliSense? Why does it need to be configured? IntelliSense is a tool built into VS Code that provides various code editing features that will help you code faster and more efficiently. For example, code completion, parameter info, code actions (light bulbs), and member lists are all generated by IntelliSense.\n\nIntelliSense is powered by a language service, which provides language specific completions for your code. For these to be C++ specific, IntelliSense needs to first be configured. This configuration can be done via a compiler, compile_commands.json file, or another VS Code extension (e.g. the Makefile or CMake extension).\n\nThe C++ Extension will, on most occasions, configure IntelliSense automatically for you. For details on this process, reference the IntelliSense documentation. But how can you check if IntelliSense is already configured?\n\nIf you do not have IntelliSense configured for your workspace, you will see now see a new indicator in the status bar with a warning sign, as shown below:\n\nClick on the “Configure IntelliSense” button to open the Configuration Q Pick, as explained below, which will help you get configured.\n\nIf no options are listed, there are multiple ways to install a compiler on your machine. On Windows, select “Help me install a compiler” from the dropdown which will take you to the step-by-step installation instructions in the walkthrough. On a MacOS or Linux machine, choose “Install a compiler” to have the C++ Extension install a C++ compiler for you. For either scenario, the installed compiler will automatically be configured for IntelliSense by the C++ Extension. To learn more, reference the Configuring IntelliSense documentation.\n\nTo check whether IntelliSense is configured and actively doing work in the background, use the new language status bar. Hover over the {} in the status bar which will show you the IntelliSense status. It also indicates the status of whether your workspace has been parsed and indexed, as well as the option to run code analysis. For IntelliSense, you are looking for the “IntelliSense: Ready” status, indicating it is configured and ready for code evaluation.\n\nIf “IntelliSense: Not configured” is displayed, you need to configure IntelliSense in your workspace. Follow the steps described previously to select an IntelliSense configuration through the configuration Q Pick.\n\nHave issues with getting IntelliSense configured?\n\nIf you run into any issues with configuring IntelliSense, please feel free to start a discussion or raise an issue in our GitHub repository. We can also be reached via the comments below, per email at visualcpp@microsoft.com, or through our team on X (formerly known as Twitter) at @VisualC."
    },
    {
        "link": "https://learn.microsoft.com/en-us/cpp/build/vscpp-step-0-installation?view=msvc-170",
        "document": "Install C and C++ support in Visual Studio\n\nIf you haven't installed Visual Studio and the Microsoft C and C++ tools yet, here's how to get started.\n\nWelcome to Visual Studio 2022! In this version, it's easy to choose and install just the features you need. Because of its reduced minimum footprint, Visual Studio installs quickly and with less system impact. This article applies to installation of Visual Studio on Windows. Visual Studio Code is a lightweight, cross-platform development environment that runs on Windows, Mac, and Linux systems. The Microsoft C/C++ for Visual Studio Code extension supports IntelliSense, debugging, code formatting, autocompletion. Visual Studio for Mac doesn't support Microsoft C++, but does support .NET languages and cross-platform development. For installation instructions, see Install Visual Studio for Mac. To learn what else is new in this version, see the Visual Studio release notes. Ready to install? Use the following step-by-step guide.\n• None Check the system requirements. These requirements help you know whether your computer supports Visual Studio 2022.\n• None Apply the latest Windows updates. These updates ensure that your computer has both the latest security updates and the required system components for Visual Studio.\n• None Reboot your computer. The reboot ensures that any pending installs or updates don't hinder the Visual Studio install.\n• None Free up disk space. Remove unneeded files and applications from your %SystemDrive% by, for example, running the Disk Cleanup app. For questions about running previous versions of Visual Studio side by side with Visual Studio 2022, see the Visual Studio 2022 Platform Targeting and Compatibility page. Select the following button to go to the Visual Studio download page, and download the Visual Studio bootstrapper file. Select the edition of Visual Studio that you want and choose the Free trial or Free download button. The Community edition is for individual developers, classroom learning, academic research, and open source development. For other uses, install Visual Studio 2022 Professional or Visual Studio 2022 Enterprise. Run the bootstrapper file you downloaded to install the Visual Studio Installer. This new lightweight installer includes everything you need to both install and customize Visual Studio.\n• None From your Downloads folder, double-click the bootstrapper file called VisualStudioSetup.exe. If you receive a User Account Control notice, choose Yes to allow the bootstrapper to run.\n• None We ask you to acknowledge the Microsoft License Terms and the Microsoft Privacy Statement. Choose Continue. You can use the installer to customize your installation by selecting the workloads, or feature sets, that you want.\n• None Find the workload you want in the Installing Visual Studio screen. For core C and C++ support, choose the Desktop development with C++ workload. It comes with the default core editor, which includes basic code editing support for more than 20 languages, the ability to open and edit code from any folder without requiring a project, and integrated source code control. The Installation details pane lists the included and optional components installed by each workload. You can select or deselect optional components in this list. For example, to support development by using the Visual Studio 2017 or 2015 compiler toolsets, choose the MSVC v141 or MSVC v140 optional components. You can add support for MFC, the experimental Modules language extension, IncrediBuild, and more. Other workloads support more kinds of development. For example, choose the Universal Windows Platform development workload to create apps that use the Windows Runtime for the Microsoft Store. Choose Game development with C++ to create games that use DirectX, Unreal, or Cocos2d. Choose Linux development with C++ to target Linux platforms, including IoT development.\n• None After you choose the workloads and optional components you want, choose Install. Next, status screens appear that show the progress of your Visual Studio installation. At any time after installation, you can install workloads or components that you didn't install initially. If you have Visual Studio open, go to Tools > Get Tools and Features... which opens the Visual Studio Installer. Or, open Visual Studio Installer from the Start menu. From there, you can choose the workloads or components that you wish to install. Then, choose Modify. If you don't want to use the Workloads feature to customize your Visual Studio installation, or you want to add more components than a workload installs, you can do so by installing or adding individual components from the Individual components tab. Choose what you want, and then follow the prompts. By default, the installer program tries to match the language of the operating system when it runs for the first time. To install Visual Studio in a language of your choosing, choose the Language packs tab from the Visual Studio Installer, and then follow the prompts. Change the installer language from the command line Another way that you can change the default language is by running the installer from the command line. For example, you can force the installer to run in English by using the following command: . The installer remembers this setting when it's run the next time. The installer supports the following language tokens: zh-cn, zh-tw, cs-cz, en-us, es-es, fr-fr, de-de, it-it, ja-jp, ko-kr, pl-pl, pt-br, ru-ru, and tr-tr. You can reduce the installation footprint of Visual Studio on your system drive. You can choose to move the download cache, shared components, SDKs, and tools to different drives, and keep Visual Studio on the drive that runs it the fastest. You can select a different drive only when you first install Visual Studio. If you've already installed it and want to change drives, you must uninstall Visual Studio and then reinstall it.\n• None After Visual Studio installation is complete, choose the Launch button to get started developing with Visual Studio.\n• None On the start window, choose Create a new project.\n• None In the search box, enter the type of app you want to create to see a list of available templates. The list of templates depends on the workloads that you chose during installation. To see different templates, choose different workloads. You can also filter your search for a specific programming language by using the Language dropdown list. You can filter by using the Platform list and the Project type list, too.\n• None Visual Studio opens your new project, and you're ready to code!\n\nWelcome to Visual Studio 2019! In this version, it's easy to choose and install just the features you need. Because of its reduced minimum footprint, Visual Studio installs quickly and with less system impact. This article applies to installation of Visual Studio on Windows. Visual Studio Code is a lightweight, cross-platform development environment that runs on Windows, Mac, and Linux systems. The Microsoft C/C++ for Visual Studio Code extension supports IntelliSense, debugging, code formatting, autocompletion. Visual Studio for Mac doesn't support Microsoft C++, but does support .NET languages and cross-platform development. For installation instructions, see Install Visual Studio for Mac. To learn what else is new in this version, see the Visual Studio release notes. Ready to install? Use the following step-by-step guide.\n• None Check the system requirements. These requirements help you know whether your computer supports Visual Studio 2019.\n• None Apply the latest Windows updates. These updates ensure that your computer has both the latest security updates and the required system components for Visual Studio.\n• None Reboot your computer. The reboot ensures that any pending installs or updates don't hinder the Visual Studio install.\n• None Free up disk space. Remove unneeded files and applications from your %SystemDrive% by, for example, running the Disk Cleanup app. For questions about running previous versions of Visual Studio side by side with Visual Studio 2019, see the Visual Studio 2019 Platform Targeting and Compatibility page. Select the following button to go to the Visual Studio older downloads page, and download the Visual Studio 2019 bootstrapper file. Run the bootstrapper file you downloaded to install the Visual Studio Installer. This new lightweight installer includes everything you need to both install and customize Visual Studio.\n• None From your Downloads folder, double-click the bootstrapper file. If you receive a User Account Control notice, choose Yes to allow the bootstrapper to run.\n• None We ask you to acknowledge the Microsoft License Terms and the Microsoft Privacy Statement. Choose Continue. You can use the installer to customize your installation by selecting the workloads, or feature sets, that you want.\n• None Find the workload you want in the Installing Visual Studio screen. For core C and C++ support, choose the Desktop development with C++ workload. It comes with the default core editor, which includes basic code editing support for over 20 languages, the ability to open and edit code from any folder without requiring a project, and integrated source code control. The Installation details pane lists the included and optional components installed by each workload. You can select or deselect optional components in this list. For example, to support development by using the Visual Studio 2017 or 2015 compiler toolsets, choose the MSVC v141 or MSVC v140 optional components. You can add support for MFC, the experimental Modules language extension, IncrediBuild, and more. Other workloads support more kinds of development. For example, choose the Universal Windows Platform development workload to create apps that use the Windows Runtime for the Microsoft Store. Choose Game development with C++ to create games that use DirectX, Unreal, and Cocos2d. Choose Linux development with C++ to target Linux platforms, including IoT development.\n• None After you choose the workloads and optional components you want, choose Install. Next, status screens appear that show the progress of your Visual Studio installation. At any time after installation, you can install workloads or components that you didn't install initially. If you have Visual Studio open, go to Tools > Get Tools and Features... which opens the Visual Studio Installer. Or, open Visual Studio Installer from the Start menu. From there, you can choose the workloads or components that you wish to install. Then, choose Modify. If you don't want to use the Workloads feature to customize your Visual Studio installation, or if you want to add more components than a workload installs, you can do so by installing or adding individual components from the Individual components tab. Choose what you want, and then follow the prompts. By default, the installer program tries to match the language of the operating system when it runs for the first time. To install Visual Studio in a language of your choosing, choose the Language packs tab from the Visual Studio Installer, and then follow the prompts. Change the installer language from the command line Another way that you can change the default language is by running the installer from the command line. For example, you can force the installer to run in English by using the following command: . The installer will remember this setting when it's run the next time. The installer supports the following language tokens: zh-cn, zh-tw, cs-cz, en-us, es-es, fr-fr, de-de, it-it, ja-jp, ko-kr, pl-pl, pt-br, ru-ru, and tr-tr. You can reduce the installation footprint of Visual Studio on your system drive. You can choose to move the download cache, shared components, SDKs, and tools to different drives, and keep Visual Studio on the drive that runs it the fastest. You can select a different drive only when you first install Visual Studio. If you've already installed it and want to change drives, you must uninstall Visual Studio and then reinstall it.\n• None After Visual Studio installation is complete, choose the Launch button to get started developing with Visual Studio.\n• None On the start window, choose Create a new project.\n• None In the search box, enter the type of app you want to create to see a list of available templates. The list of templates depends on the workloads that you chose during installation. To see different templates, choose different workloads. You can also filter your search for a specific programming language by using the Language dropdown list. You can filter by using the Platform list and the Project type list, too.\n• None Visual Studio opens your new project, and you're ready to code!\n\nIn Visual Studio 2017, it's easy to choose and install just the features you need. Because of its reduced minimum footprint, it installs quickly and with less system impact.\n• None A computer that runs Microsoft Windows 7 or later versions. We recommend the latest version of Windows for the best development experience. Make sure that the latest updates are applied to your system before you install Visual Studio.\n• None Enough free disk space. Visual Studio requires at least 7 GB of disk space, and can take 50 GB or more if many common options are installed. We recommend you install it on your C: drive. For details on the disk space and operating system requirements, see Visual Studio Product Family System Requirements. The installer reports how much disk space is required for the options you select.\n• None To download the Visual Studio 2017 installer for Windows, go to the Visual Studio older downloads page. Expand the 2017 section, and choose the Download button.\n• None Find the installer file you downloaded and run it. The downloaded file might be displayed in your browser, or you might find it in your Downloads folder. The installer needs Administrator privileges to run. You might see a User Account Control dialog asking you to give permission to let the installer make changes to your system; choose Yes. If you're having trouble, find the downloaded file in File Explorer, right-click on the installer icon, and choose Run as Administrator from the context menu.\n• None The installer presents you with a list of workloads, which are groups of related options for specific development areas. Support for C++ is now part of optional workloads that aren't installed by default. For C and C++, select the Desktop development with C++ workload and then choose Install.\n• None When the installation completes, choose the Launch button to start Visual Studio. The first time you run Visual Studio, you're asked to sign in with a Microsoft Account. If you don't have one, you can create one for free. You must also choose a theme. Don't worry, you can change it later if you want to. It might take Visual Studio several minutes to get ready for use the first time you run it.\n• None When Visual Studio opens, check to see if the flag icon in the title bar is highlighted: If it's highlighted, select it to open the Notifications window. If there are any updates available for Visual Studio, we recommend you install them now. Once the installation is complete, restart Visual Studio.\n\nTo install Visual Studio 2015, go to the Visual Studio older downloads page. Expand the 2015 section, and choose the Download button. Run the downloaded setup program and choose Custom installation and then choose the C++ component. To add C and C++ support to an existing Visual Studio 2015 installation, select on the Windows Start button and type Add Remove Programs. Open the program from the results list and then find your Visual Studio 2015 installation in the list of installed programs. Double-click it, then choose Modify and select the Visual C++ components to install. In general, we highly recommend that you use the latest version of Visual Studio even if you need to compile your code using the Visual Studio 2015 compiler. For more information, see Use native multi-targeting in Visual Studio to build old projects.\n\nWhen Visual Studio is running, you're ready to continue to the next step."
    },
    {
        "link": "https://code.visualstudio.com/docs/cpp/config-mingw",
        "document": "In this tutorial, you configure Visual Studio Code to use the GCC C++ compiler (g++) and GDB debugger from mingw-w64 to create programs that run on Windows. After configuring VS Code, you will compile, run, and debug a Hello World program.\n\nThis tutorial does not teach you about GCC, GDB, minGW-w64, or the C++ language. For those subjects, there are many good resources available on the Web.\n\nIf you have any problems, feel free to file an issue for this tutorial in the VS Code documentation repository.\n\nTo successfully complete this tutorial, you must do the following steps:\n• Install the C/C++ extension for VS Code. You can install the C/C++ extension by searching for 'C++' in the Extensions view (⇧⌘X (Windows, Linux Ctrl+Shift+X)).\n\nGet the latest version of MinGW-w64 via MSYS2, which provides up-to-date native builds of GCC, MinGW-w64, and other helpful C++ tools and libraries. This will provide you with the necessary tools to compile your code, debug it, and configure it to work with IntelliSense.\n\nTo install the MinGW-w64 toolchain, check out this video or follow the steps below:\n• You can download the latest installer from the MSYS2 page or use this direct link to the installer.\n• Run the installer and follow the steps of the installation wizard. Note that MSYS2 requires 64 bit Windows 8.1 or newer.\n• In the wizard, choose your desired Installation Folder. Record this directory for later. In most cases, the recommended directory is acceptable. The same applies when you get to setting the start menu shortcuts step. When complete, ensure the Run MSYS2 now box is checked and select Finish. This will open a MSYS2 terminal window for you.\n• In this terminal, install the MinGW-w64 toolchain by running the following command:\n• Accept the default number of packages in the group by pressing Enter.\n• Enter when prompted whether to proceed with the installation.\n• Add the path of your MinGW-w64 folder to the Windows environment variable by using the following steps:\n• In the Windows search bar, type Settings to open your Windows Settings.\n• Search for Edit environment variables for your account.\n• In your User variables, select the variable and then select Edit.\n• Select New and add the MinGW-w64 destination folder you recorded during the installation process to the list. If you used the default settings above, then this will be the path: .\n• Select OK, and then select OK again in the Environment Variables window to update the environment variable. You have to reopen any console windows for the updated environment variable to be available.\n\nTo check that your MinGW-w64 tools are correctly installed and available, open a new Command Prompt and type:\n\nYou should see output that states which versions of GCC, g++ and GDB you have installed. If this is not the case:\n• Make sure your PATH variable entry matches the MinGW-w64 binary location where the toolchain was installed. If the compilers do not exist at that PATH entry, make sure you followed the previous instructions.\n• If has the correct output but not , then you need to install the packages you are missing from the MinGW-w64 toolset.\n• If on compilation you are getting the \"The value of miDebuggerPath is invalid.\" message, one cause can be you are missing the package.\n\nFirst, lets get a project set up.\n• Run the following commands. These will create an empty folder called where you can place all your VS Code projects. There, the next commands will create and navigate to a subfolder called . From there, you will open directly in VS Code.\n\nThe \"code .\" command opens VS Code in the current working folder, which becomes your \"workspace\". Accept the Workspace Trust dialog by selecting Yes, I trust the authors since this is a folder you created.\n\nAs you go through the tutorial, you will see three files created in a folder in the workspace:\n\nIn the File Explorer title bar, select the New File button and name the file .\n\nNow paste in this source code:\n\nNow press ⌘S (Windows, Linux Ctrl+S) to save the file. Notice how the file you just added appears in the File Explorer view (⇧⌘E (Windows, Linux Ctrl+Shift+E)) in the side bar of VS Code:\n\nYou can also enable Auto Save to automatically save your file changes, by selecting File > Auto Save. You can find out more about the other views in the VS Code User Interface documentation.\n\nIntelliSense is a tool to help you code faster and more efficiently by adding code editing features such as code completion, parameter info, quick info, and member lists.\n\nTo see IntelliSense in action, hover over or to see their type information. If you type in line 10, you can see a completion list of recommended member functions to call, all generated by IntelliSense:\n\nYou can press the Tab key to insert a selected member. If you then add open parenthesis, IntelliSense will show information on which arguments are required.\n\nIf IntelliSense is not already configured, open the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)) and enter Select IntelliSense Configuration. From the dropdown of compilers, select to configure. More information can be found in the IntelliSense configuration documentation.\n\nRemember, the C++ extension uses the C++ compiler you have installed on your machine to build your program. Make sure you have completed the \"Installing the MinGW-w64 toolchain\" step before attempting to run and debug in VS Code.\n• Open so that it is the active file.\n• Press the play button in the top right corner of the editor.\n• Choose C/C++: g++.exe build and debug active file from the list of detected compilers on your system.\n\nYou'll only be asked to choose a compiler the first time you run . This compiler will be set as the \"default\" compiler in file.\n• After the build succeeds, your program's output will appear in the integrated Terminal.\n\nCongratulations! You've just run your first C++ program in VS Code!\n\nThe first time you run your program, the C++ extension creates a file, which you'll find in your project's folder. stores your build configurations.\n\nYour new file should look similar to the JSON below:\n\nThe setting specifies the program to run; in this case that is .\n\nThe array specifies the command-line arguments passed to g++. These arguments are listed in this file in the specific order expected by the compiler.\n\nThis task tells g++ to take the active file ( ), compile it, and create an output file ( switch) in the current directory ( ) with the same name as the active file but with the extension ( ). For us, this results in .\n\nThe value is what you will see in the tasks list; you can name this whatever you like.\n\nThe value is what you will see as the description of the task in the tasks list. It's highly recommended to rename this value to differentiate it from similar tasks.\n\nThe value selects the output parser to use for finding errors and warnings in the compiler output. For GCC, you'll get the best results if you use the problem matcher.\n\nFrom now on, the play button will read from to figure out how to build and run your program. You can define multiple build tasks in , and whichever task is marked as the default will be used by the play button. In case you need to change the default compiler, you can run Tasks: Configure Default Build Task in the Command Palette. Alternatively you can modify the file and remove the default by replacing this segment:\n\nStarting November 3, 2024, MSYS2 has disabled wildcard support for by default. This change impacts how wildcards like are processed in build commands. To build multiple C++ files in your , you must explicitly list the files, use a build system like or or implement the following workarounds: https://www.msys2.org/docs/c/#expanding-wildcard-arguments.\n\nIf you previously used to compile all files in the current folder, this will no longer work directly. Instead, you can manually list the files or define a build script.\n• Go back to so that it is the active file.\n• Set a breakpoint by clicking on the editor margin or using F9 on the current line.\n• From the drop-down next to the play button, select Debug C/C++ File.\n• Choose C/C++: g++ build and debug active file from the list of detected compilers on your system (you'll only be asked to choose a compiler the first time you run or debug ).\n\nThe play button has two modes: Run C/C++ File and Debug C/C++ File. It will default to the last-used mode. If you see the debug icon in the play button, you can just select the play button to debug, instead of using the drop-down.\n\nBefore you start stepping through the code, let's take a moment to notice several changes in the user interface:\n• The Integrated Terminal appears at the bottom of the source code editor. In the Debug Console tab, you see output that indicates the debugger is up and running.\n• The editor highlights the line where you set a breakpoint before starting the debugger:\n• The Run and Debug view on the left shows debugging information. You'll see an example later in the tutorial.\n• At the top of the code editor, a debugging control panel appears. You can move this around the screen by grabbing the dots on the left side.\n\nNow you're ready to start stepping through the code.\n• Select the Step over icon in the debugging control panel. This will advance program execution to the first line of the for loop, and skip over all the internal function calls within the and classes that are invoked when the variable is created and initialized. Notice the change in the Variables window on the left. In this case, the errors are expected because, although the variable names for the loop are now visible to the debugger, the statement has not executed yet, so there is nothing to read at this point. The contents of are visible, however, because that statement has completed.\n• Press Step over again to advance to the next statement in this program (skipping over all the internal code that is executed to initialize the loop). Now, the Variables window shows information about the loop variables.\n• Press Step over again to execute the statement. (Note that the C++ extension does not print any output to the Debug Console until the loop exits.)\n• If you like, you can keep pressing Step over until all the words in the vector have been printed to the console. But if you are curious, try pressing the Step Into button to step through source code in the C++ standard library! To return to your own code, one way is to keep pressing Step over. Another way is to set a breakpoint in your code by switching to the tab in the code editor, putting the insertion point somewhere on the statement inside the loop, and pressing F9. A red dot appears in the gutter on the left to indicate that a breakpoint has been set on this line. Then press F5 to start execution from the current line in the standard library header. Execution will break on . If you like, you can press F9 again to toggle off the breakpoint. When the loop has completed, you can see the output in the Integrated Terminal, along with some other diagnostic information that is output by GDB.\n\nSometimes you might want to keep track of the value of a variable as your program executes. You can do this by setting a watch on the variable.\n• Place the insertion point inside the loop. In the Watch window, select the plus sign and in the text box, type , which is the name of the loop variable. Now view the Watch window as you step through the loop.\n• Add another watch by adding this statement before the loop: . Then, inside the loop, add this statement: . Now add a watch for as you did in the previous step.\n• To quickly view the value of any variable while execution is paused on a breakpoint, you can hover over it with the mouse pointer.\n\nWhen you debug with the play button or F5, the C++ extension creates a dynamic debug configuration on the fly.\n\nThere are cases where you'd want to customize your debug configuration, such as specifying arguments to pass to the program at runtime. You can define custom debug configurations in a file.\n\nTo create , choose Add Debug Configuration from the play button drop-down menu.\n\nYou'll then see a dropdown for various predefined debugging configurations. Choose C/C++: g++.exe build and debug active file.\n\nVS Code creates a file in the folder`, which looks something like this:\n\nIn the JSON above, specifies the program you want to debug. Here it is set to the active file folder ( ) and active filename with the extension ( ), which if is the active file will be . The property is an array of arguments to pass to the program at runtime.\n\nBy default, the C++ extension won't add any breakpoints to your source code and the value is set to .\n\nChange the value to to cause the debugger to stop on the method when you start debugging.\n\nIf you want more control over the C/C++ extension, you can create a file, which will allow you to change settings such as the path to the compiler, include paths, C++ standard (default is C++17), and more.\n\nYou can view the C/C++ configuration UI by running the command C/C++: Edit Configurations (UI) from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)).\n\nThis opens the C/C++ Configurations page. When you make changes here, VS Code writes them to a file called in the folder.\n\nHere, we've changed the Configuration name to GCC, set the Compiler path dropdown to the g++ compiler, and the IntelliSense mode to match the compiler (gcc-x64).\n\nVisual Studio Code places these settings in . If you open that file directly, it should look something like this:\n\nYou only need to add to the Include path array setting if your program includes header files that are not in your workspace or in the standard library path. It is strongly recommended not to add the system include path to the setting for compilers that we support.\n\nThe extension uses the setting to infer the path to the C++ standard library header files. When the extension knows where to find those files, it can provide features like smart completions and Go to Definition navigation.\n\nThe C/C++ extension attempts to populate with a default compiler based on what it finds on your system. The extension looks in several common compiler locations but will only automatically select one that is in either one of the \"Program Files\" folders or whose path is listed in the PATH environment variable. If the Microsoft Visual C++ compiler can be found it will be selected, otherwise it will select a version of gcc, g++, or clang.\n\nIf you have more than one compiler installed, you might need to change to match the preferred compiler for your project. You may also use the C/C++: Select InteliSense Configuration... command in the Command Palette to select one of the compilers that the extension detected.\n\nMSYS2 is installed, but g++ and gdb are still not found\n\nYou must follow the steps on the MSYS2 website to use the MSYS CLI to install the full MinGW-w64 toolchain( ), as well as all required prerequisites. The toolchain includes g++ and gdb.\n\nAs a Windows user, running the pacman command gives me an error\n\nUCRT on Windows machines is only included in Windows 10 or later. If you are using another version of Windows, run the following command that does not use UCRT:\n\nWhen adding the the MinGW-w64 destination folder to your list of environment variables, the default path will then be: .\n\nIf you need a 32-bit version of the MinGW toolset, consult the Downloading section on the MSYS2 wiki. It includes links to both 32-bit and 64-bit installation options.\n• Review the Overview of the C++ extension.\n• Create a new workspace, copy your JSON files to it, adjust the necessary settings for the new workspace path, program name, etc. and start coding!"
    },
    {
        "link": "https://phoenixnap.com/kb/install-gcc-windows",
        "document": "The GNU Compiler Collection (GCC) is a versatile set of compilers developed by the GNU Project. It supports a wide range of programming languages like C, C++, Fortran, and Go. Originally built for the GNU operating system, GCC has become an essential tool across multiple platforms, including Windows.\n\nWhile GCC typically comes preinstalled on many Linux distributions, this is not the case with Windows. Additionally, due to differences in system architecture, installing GCC on Windows can be a bit more involved.\n\nIn this tutorial, you will learn to install GCC on Windows.\n\nThe minGW-w64 tool collection provides a straightforward way to install the GCC compiler and related Windows tools, supporting 32-bit and 64-bit architectures. This section outlines the steps for installing GCC using minGW-w64.\n\nNavigate to the GitHub minGW-w64 page and scroll down to the Assets section. From the list of files, select the one you want to use on your system:\n\nWe use Windows 11 64-bit and will download the x86_64-14.2.0-release-posix-seh-ucrt-rt_v12-rev0.7z release. This version uses modern Windows runtime (ucrt), POSIX threading for cross-platform compatibility, and SEH for 64-bit Windows exception handling.\n\nExtract the downloaded archive to a folder that is easy to access. For example, we will place it at the root of the C drive:\n\nAfter extracting the archive, navigate to the bin folder and copy the folder path. Add the path to the system's PATH environment variable for it to function.\n\nThis section shows how to set the PATH environment variable on Windows to instruct the system where the executable files are.\n\n1. Press the Windows key and search for Environment variables. Press Enter to open the System Properties window and click the Environment Variables button.\n\n2. Under the System variables section, find Path, select it, and click Edit...\n\n3. Click New and paste the path to the bin folder from the previous step.\n\n4. Click OK in each window to apply the changes.\n\n5. Check if GCC was properly installed by opening the Command Prompt and running the following command:\n\nThe system should output the program version, which means that it has been properly installed.\n\nAnother way to install GCC on Windows is to use Chocolatey, a package manager designed for the Windows OS. It simplifies the process of installing, updating, and managing software through the command line. It is especially useful for developers and system administrators because it reduces the time and effort required to download and configure tools like GCC manually.\n\nThe upside is that Chocolatey completely automates the installation, while the downside is that you will probably not get the bleeding edge version you would get from installing manually.\n\nFollow the steps below to install GCC via Chocolatey:\n\nOpen the Command Prompt as an administrator and run the following command to install the mingw installer:\n\nWhen prompted, type y and press Enter to confirm the installation.\n\nAfter the installation process completes, close and reopen the Command Prompt or run the following command to load the changes made to the PATH environment variable:\n\nConfirm the installation by checking the GCC program version:\n\nInstall GCC on Windows via Subsystem for Linux (WSL)\n\nWindows Subsystem for Linux (WSL) allows you to run a Linux environment directly on Windows. Doing so enables you to install and use GCC as you would on a native Linux system.\n\nFollow the steps listed in the sections below.\n\nWSL is a preinstalled feature on new Windows versions. However, you still need to enable it and install a Linux distribution to use it:\n\n1. Press the Windows key and type powershell. Select the Run as administrator option from the right panel to open PowerShell as Administrator.\n\n2. Run the following command to enable WSL and install Ubuntu:\n\n3. Restart the system when prompted and the installation continues automatically. Type in the username and password you want to use for your Linux distro:\n\nAfter the installation process completes, you can install GCC:\n\nIn the Linux terminal, run the following command to confirm the installation:\n\nThis tutorial showed how to install GCC on a Windows system using three different methods. GCC supports a wide range of programming languages and provides a robust, open-source platform for compiling code, making it essential for software development.\n\nNext, learn how to install the GCC compiler on Ubuntu, or check out our list of 15 best DevOps tools on the market."
    },
    {
        "link": "https://cpp-lang.net/tools/standalone/compilers/setup-gcc-windows",
        "document": "In this article, we will show you how to install one of the of the GCC compiler that will allow you to create programs in C++.\n\nOn Windows, the GCC compiler is part of the MSYS2 package. You can download it from this page:\n\nThe steps described below are also on their main page.\n\nJust click forward through their installer.\n\nAfter installation, start the MSYS2 console through the start bar menu for the phrase .\n\nEnter the following commands on it:\n\nWhen the following information appears in the console:\n\nThen type again when this information appears:\n\nAgain, the question we confirm with :\n\nAnd we enter the command that will allow us to install MinGW-w64\n\nWhen the information pops up:\n\nEnter the numbers of the packages marked in green:\n\nIf you have followed the steps above correctly, you already have the GCC compiler installed on your computer.\n\nTo be able to use it efficiently, you also need to add the path to the folder to the system environment variable named .\n\nIf you chose the default installation path ( ), this path will look like this:\n\nFinally, it's a good idea to test if the compiler works.\n\nCreate an empty folder, e.g. on the desktop and create a file using a code editor or even Notepad, with the name and extension:\n\nSave the following code in it (you can copy from the site):\n\nThen run the console in the folder with the file , eg by using the shortcut in the middle of the folder and pressing \"Open the Powershell window here\".\n\nAfter a while, the following effect should appear in the console:"
    },
    {
        "link": "https://linkedin.com/pulse/installing-gcc-compiler-windows-run-c-program-gitbash-david-michael",
        "document": "GCC, or GNU Compiler Collection, is a popular open-source compiler used for developing and executing various programming languages, including C, C++, Fortran, Ada, and more. In this article, we will guide you through the process of installing GCC on a Windows operating system and setting the PATH variable.\n\nOnce the download is complete, double-click on the MinGW-w64 installer file to start the installation process. The installer will guide you through the installation process and prompt you to select the components you wish to install.\n• First, you have to install the MinGW32-base package. This package is used to compile the C program, including linker and other binary tools. Right-click on the MinGW32-base option and select Mark for Installation.\n• Now you have to install the MinGW32-gcc-g++ package. This package is used to compile C++ source code. This is an optional component of the MinGW Compiler. It is only required if you are going to program in C++ language only. To select the MinGW32-gcc-g++ right-click on it and select Mark for Installation.\n• At last, you have to install the MinGW32-gcc-objc package. This package is used to compile objective C language. It is an optional component. It is only required if you are going to program in objective C. To select the MinGW32-gcc-objc package, right-click on it and select Mark for Installation.\n\nThis process might take a while, you just be patient. After the installation of MinGW is finished. To check if it is installed or not, open Command Prompt and type g++ — version.\n\nThe MinGW compiler (GCC) is not being detected by the command prompt because the environment path variable has not been set. The environment path variable is crucial in detecting the compiler throughout the system and creates an alias name for the compiler, indicating its location. To set the environment path variable for MinGW on a Windows system, follow the steps outlined below.\n\nWhen you install the MinGW, it creates a folder named MinGW in C: Drive. To set the compiler’s path, we need the path to the bin directory of MinGW. So, first,\n• Now, inside the bin folder, click on the address bar and copy the address.\n• We require this address to be set as the path in the environment variable.\n• If your install location was somewhere else, you may go to that location where you have installed MinGW.\n• Open the Start menu and type “Environment Variables” in the search bar.\n• Click on “Edit the system environment variables” and then click on “Environment Variables”.\n• In the Environment Variables window, scroll down to the “System Variables” section and find the “Path” variable.\n• Click on the “Edit” button next to the “Path” variable.\n• In the Edit Environment Variable window, click on “New” and then paste the path you copied earlier from your bin.\n• Click “OK” to save the changes."
    },
    {
        "link": "https://quora.com/How-do-I-download-install-GCC-Compiler-for-C-in-Windows",
        "document": "Something went wrong. Wait a moment and try again."
    }
]