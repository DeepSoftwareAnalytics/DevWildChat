[
    {
        "link": "https://css-tricks.com/snippets/css/a-guide-to-flexbox",
        "document": "The (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”). The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow. Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.). Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts.\n\nSince flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as “flex container”) whereas the others are meant to be set on the children (said “flex items”). If “regular” layout is based on both block and inline flow directions, the flex layout is based on “flex-flow directions”. Please have a look at this figure from the specification, explaining the main idea behind the flex layout. Items will be laid out following either the (from to ) or the cross axis (from to ).\n• main axis – The main axis of a flex container is the primary axis along which flex items are laid out. Beware, it is not necessarily horizontal; it depends on the property (see below).\n• main-start | main-end – The flex items are placed within the container starting from main-start and going to main-end.\n• main size – A flex item’s width or height, whichever is in the main dimension, is the item’s main size. The flex item’s main size property is either the ‘width’ or ‘height’ property, whichever is in the main dimension.\n• cross axis – The axis perpendicular to the main axis is called the cross axis. Its direction depends on the main axis direction.\n• cross-start | cross-end – Flex lines are filled with items and placed into the container starting on the cross-start side of the flex container and going toward the cross-end side.\n• cross size – The width or height of a flex item, whichever is in the cross dimension, is the item’s cross size. The cross size property is whichever of ‘width’ or ‘height’ that is in the cross dimension.\n\nThis defines a flex container; inline or block depending on the given value. It enables a flex context for all its direct children. Note that CSS columns have no effect on a flex container. \n\nThis establishes the main-axis, thus defining the direction flex items are placed in the flex container. Flexbox is (aside from optional wrapping) a single-direction layout concept. Think of flex items as primarily laying out either in horizontal rows or vertical columns.\n• (default): left to right in ; right to left in\n• : right to left in ; left to right in\n• : same as but top to bottom\n• : same as but bottom to top By default, flex items will all try to fit onto one line. You can change that and allow the items to wrap as needed with this property.\n• (default): all flex items will be on one line\n• : flex items will wrap onto multiple lines, from top to bottom.\n• : flex items will wrap onto multiple lines from bottom to top. There are some visual demos of here. This is a shorthand for the and properties, which together define the flex container’s main and cross axes. The default value is . \n\nThis defines the alignment along the main axis. It helps distribute extra free space leftover when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.\n• (default): items are packed toward the start of the flex-direction.\n• : items are packed toward the end of the flex-direction.\n• : items are packed toward the start of the direction.\n• : items are packed toward the end of the direction.\n• : items are packed toward left edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are packed toward right edge of the container, unless that doesn’t make sense with the , then it behaves like .\n• : items are centered along the line\n• : items are evenly distributed in the line; first item is on the start line, last item on the end line\n• : items are evenly distributed in the line with equal space around them. Note that visually the spaces aren’t equal, since all the items have equal space on both sides. The first item will have one unit of space against the container edge, but two units of space between the next item because that next item has its own spacing that applies.\n• : items are distributed so that the spacing between any two items (and the space to the edges) is equal. Note that that browser support for these values is nuanced. For example, never got support from some versions of Edge, and start/end/left/right aren’t in Chrome yet. MDN has detailed charts. The safest values are , , and . There are also two additional keywords you can pair with these values: and . Using ensures that however you do this type of positioning, you can’t push an element such that it renders off-screen (e.g. off the top) in such a way the content can’t be scrolled too (called “data loss”). \n\nThis defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the version for the cross-axis (perpendicular to the main-axis).\n• / / : items are placed at the start of the cross axis. The difference between these is subtle, and is about respecting the rules or the rules.\n• / / : items are placed at the end of the cross axis. The difference again is subtle and is about respecting rules vs. rules.\n• : items are centered in the cross-axis\n• : items are aligned such as their baselines align The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. \n\nThis aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note: This property only takes effect on multi-line flexible containers, where is set to either or ). A single-line flexible container (i.e. where is set to its default value, ) will not reflect .\n• (default): items are packed in their default position as if no value was set.\n• / : items packed to the start of the container. The (more supported) honors the while honors the direction.\n• / : items packed to the end of the container. The (more support) honors the while end honors the direction.\n• : items evenly distributed; the first line is at the start of the container while the last one is at the end\n• : items evenly distributed with equal space around each line\n• : items are evenly distributed with equal space around them\n• : lines stretch to take up the remaining space The and modifier keywords can be used in conjunction with all the rest of these keywords (although note browser support), and deal with helping you prevent aligning elements such that the content becomes inaccessible. The property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The behavior could be thought of as a minimum gutter, as if the gutter is bigger somehow (because of something like ) then the gap will only take effect if that space would end up smaller. It is not exclusively for flexbox, works in grid and multi-column layout as well. \n\nBy default, flex items are laid out in the source order. However, the property controls the order in which they appear in the flex container. Items with the same revert to source order. \n\nThis defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. If all items have set to , the remaining space in the container will be distributed equally to all children. If one of the children has a value of , that child would take up twice as much of the space as either one of the others (or it will try, at least). This defines the ability for a flex item to shrink if necessary. This defines the default size of an element before the remaining space is distributed. It can be a length (e.g. 20%, 5rem, etc.) or a keyword. The keyword means “look at my width or height property” (which was temporarily done by the keyword until deprecated). The keyword means “size it based on the item’s content” – this keyword isn’t well supported yet, so it’s hard to test and harder to know what its brethren , , and do. If set to , the extra space around content isn’t factored in. If set to , the extra space is distributed based on its value. See this graphic. This is the shorthand for and combined. The second and third parameters ( and ) are optional. The default is , but if you set it with a single number value, like , that changes the to 0%, so it’s like setting . It is recommended that you use this shorthand property rather than set the individual properties. The shorthand sets the other values intelligently. \n\nThis allows the default alignment (or the one specified by ) to be overridden for individual flex items. Please see the explanation to understand the available values. Note that , and have no effect on a flex item.\n\nFlexbox requires some vendor prefixing to support the most browsers possible. It doesn’t just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an “old”, “tweener”, and “new” versions. Perhaps the best way to handle this is to write in the new (and final) syntax and run your CSS through Autoprefixer, which handles the fallbacks very well. Alternatively, here’s a Sass to help with some of the prefixing, which also gives you an idea of what kind of things need to be done:\n\nLet’s start with a very very simple example, solving an almost daily problem: perfect centering. It couldn’t be any simpler if you use flexbox. .parent { display: flex; height: 300px; /* Or whatever */ } .child { width: 100px; /* Or whatever */ height: 100px; /* Or whatever */ margin: auto; /* Magic! */ } This relies on the fact a margin set to in a flex container absorb extra space. So setting a margin of will make the item perfectly centered in both axes. Now let’s use some more properties. Consider a list of 6 items, all with fixed dimensions, but can be auto-sized. We want them to be evenly distributed on the horizontal axis so that when we resize the browser, everything scales nicely, and without media queries. .flex-container { /* We first create a flex layout context */ display: flex; /* Then we define the flow direction and if we allow the items to wrap * Remember this is the same as: * flex-direction: row; * flex-wrap: wrap; */ flex-flow: row wrap; /* Then we define how is distributed the remaining space */ justify-content: space-around; } Done. Everything else is just some styling concern. Below is a pen featuring this example. Be sure to go to CodePen and try resizing your windows to see what happens. Let’s try something else. Imagine we have a right-aligned navigation element on the very top of our website, but we want it to be centered on medium-sized screens and single-columned on small devices. Easy enough. /* Large */ .navigation { display: flex; flex-flow: row wrap; /* This aligns items to the end line on main-axis */ justify-content: flex-end; } /* Medium screens */ @media all and (max-width: 800px) { .navigation { /* When on medium sized screens, we center it by evenly distributing empty space around items */ justify-content: space-around; } } /* Small screens */ @media all and (max-width: 500px) { .navigation { /* On small screens, we are no longer using row direction but column */ flex-direction: column; } } Let’s try something even better by playing with flex items flexibility! What about a mobile-first 3-columns layout with full-width header and footer. And independent from source order. .wrapper { display: flex; flex-flow: row wrap; } /* We tell all items to be 100% width, via flex-basis */ .wrapper > * { flex: 1 100%; } /* We rely on source order for mobile-first approach * in this case: * 1. header * 2. article * 3. aside 1 * 4. aside 2 * 5. footer */ /* Medium screens */ @media all and (min-width: 600px) { /* We tell both sidebars to share a row */ .aside { flex: 1 auto; } } /* Large screens */ @media all and (min-width: 800px) { /* We invert order of first sidebar and main * And tell the main element to take twice as much width as the other two sidebars */ .main { flex: 3 0px; } .aside-1 { order: 1; } .main { order: 2; } .aside-2 { order: 3; } .footer { order: 4; } }"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Typical_use_cases_of_flexbox",
        "document": "A common pattern for navigation is to have a list of items displayed as a horizontal bar. It's probably the most common of flexbox examples, and could be considered an ideal flexbox use case. When we have a set of items that we want to display horizontally, we may well end up with additional space. We need to decide what to do with that space, and have a couple of options. We either display the space outside of the items — therefore spacing them out with white space between or around them — or we absorb the extra space inside the items and therefore need a method of allowing the items to grow and take up this space.\n\nTo distribute the space between or around the items, we use the alignment properties in flexbox, and the property. You can read more about this property in Aligning items in a flex container, which deals with aligning items on the main axis. In this example, we display the items at their natural size and use to space the items equally. You can change how the space is distributed using the or values. You could also use to put the space at the end of the items, to place it before them, or to center the navigation items.\n\nA different pattern for navigation would be to distribute the available space within the items themselves, rather than create space between them. The properties allow items to grow and shrink in proportion to one another as described in Controlling ratios of flex items along the main axis. If you wanted to respect the size property of your navigation items but have the available space shared out equally among them, you might use , which is the shorthand for — all items grow and shrink from a flex-basis of . This would mean that the longer item would have more space because it started from a larger size, even though the same amount of available space is assigned to it as the others. In the live example below try changing to . This shorthand for causes all of the items to become the same width, as they are working from a of , allowing all of the space to be distributed evenly.\n\nAnother way to align items on the main axis is to use auto margins. This enables the design pattern of a navigation bar where one group of items are aligned left and another group aligned right. Here we are using the auto margins technique described in Using auto margins for main axis alignment. The items are aligned on the main axis with , which behaves as , as this is the initial behavior of flexbox. The property creates gaps between items. And we are aligning the last item to the right by giving it a value of . You can move the class from one item to another to change where the split happens.\n\nA long-standing joke among developers is that the hardest problem in web design is vertical centering. Vertically centering content is very straightforward with flexbox alignment properties, as the following live example shows. Click \"Play\" and try changing the alignment, for example aligning the item to the start with or end with : With CSS box alignment properties, you can vertically center an element inside another without flexbox. In the example above, try removing the flex properties from the box and adding . Then add to the element you want to horizontally center.\n\nWhether you use flexbox or grid to lay out a list of card components, these layout methods only work on direct children of the flex or grid component. This means that if you have variable amounts of content, the card will stretch to the height of the grid area or flex container. Any content inside uses regular block layout, meaning that on a card with less content the footer will rise up to the bottom of the content rather than stick to the bottom of the card. Flexbox solves this. We make the card a flex container, with . We then set the content area to , which is the shorthand for — the item can grow and shrink from a flex basis of . As this is the only item that can grow, it takes up all available space in the flex container and pushes the footer to the bottom. If you remove the property from the live example you will see the footer moves up to sit directly under the content. <div class=\"cards\"> <div class=\"card\"> <div class=\"content\"> <p>This card doesn't have much content.</p> </div> <footer>Card footer</footer> </div> <div class=\"card\"> <div class=\"content\"> <p> This card has a lot more content which means that it defines the height of the container the cards are in. I've laid the cards out using grid layout, so the cards themselves will stretch to the same height. </p> </div> <footer>Card footer</footer> </div> </div>\n\nThe media object — an image or other media element with some descriptive text side-by-side — is a common pattern in web design. Media objects should be able to be flipped — moving the image from one side to the other. This pattern is used for comments and other places where images are placed next to their descriptions. We can use flexbox to allow the part of the media object containing the image to take its sizing information from the image with the content of the media object flexing to take up the remaining space. In this example, the media object is aligned to and the is set to grow, with the grow factor set to . These properties are the same as those used for our column layout card pattern above. <div class=\"media\"> <div class=\"image\"> <img alt=\"A colorful balloon against a blue sky\" src=\"https://mdn.github.io/shared-assets/images/examples/balloon.jpg\" /> </div> <div class=\"content\"> This is the content of my media object. Items directly inside the flex container will be aligned to flex-start. </div> </div> Some things that you might want to try in this live example relate to the different ways you might want to constrain the media object in your design. To prevent the image from growing too large, you should add a to the image. As that side of the media object uses the initial values of flexbox, it can shrink, but not grow, and uses a of auto. Any or applied to the image will become the . You could also allow both sides to grow and shrink in proportion. If you set both sides to , they will grow and shrink from a of , so you will end up with two equal-sized columns. You could either take the content as a guide and set both to , in which case they would grow and shrink from the size of the content or any size applied directly to the flex items such as a on the image. You could also give each side different factors, for example setting the side with the image to and the content side to . This will mean they use a of but distribute that space at different rates according to the factor you have assigned. The flex properties we use to do this are described in detail in the guide Controlling ratios of flex items along the main axis.\n\nFlexbox is particularly useful when it comes to styling form controls. Forms have several small elements that we typically want to align with each other. A common pattern is to have a and pair combined with a , perhaps for a search form or a newsletter sign-up form where you want your visitor to enter their email address. Flexbox makes this type of layout easy to achieve. The , and are contained in a wrapper that is set to . The flex properties allow the field to grow, while the button and label do not grow. The text input field will grow and shrink depending on the space available. Patterns like this can make it much easier to create a library of form elements for your design, which easily accommodate additional elements being added. You are taking advantage of the flexibility of flexbox by mixing items that do not grow with those that do."
    },
    {
        "link": "https://joshwcomeau.com/css/interactive-guide-to-flexbox",
        "document": "Flexbox is a remarkably powerful layout mode. When we truly understand how it works, we can build dynamic layouts that respond automatically, rearranging themselves as-needed.\n\nFor example, check this out:\n\nThis demo is heavily inspired by Adam Argyle’s incredible “4 layouts for the price of 1” (opens in new tab) codepen. It uses no media/container queries. Instead of setting arbitrary breakpoints, it uses fluid principles to create a layout that flows seamlessly.\n\nI remember running into demos like this and being completely baffled. I knew the basics of Flexbox, but this seemed like absolute wizardry!\n\nIn this blog post, I want to refine your mental model for Flexbox. We'll build an intuition for how the Flexbox algorithm works, by learning about each of these properties. Whether you're a CSS beginner, or you've been using Flexbox for years, I bet you'll learn quite a bit!\n\nCSS is comprised of many different layout algorithms, known officially as “layout modes”. Each layout mode is its own little sub-language within CSS. The default layout mode is Flow layout, but we can opt in to Flexbox by changing the property on the parent container:\n\nWhen we flip to , we create a “flex formatting context”. This means that, by default, all children will be positioned according to the Flexbox layout algorithm.\n\nEach layout algorithm is designed to solve a specific problem. The default “Flow” layout is meant to create digital documents; it's essentially the Microsoft Word layout algorithm. Headings and paragraphs stack vertically as blocks, while things like text, links, and images sit inconspicuously within these blocks.\n\nSo, what problem does Flexbox solve? Flexbox is all about arranging a group of items in a row or column, and giving us a ridiculous amount of control over the distribution and alignment of those items. As the name suggests, Flexbox is all about flexibility. We can control whether items grow or shrink, how the extra space is distributed, and more.\n\nAs mentioned, Flexbox is all about controlling the distribution of elements in a row or column. By default, items will stack side-by-side in a row, but we can flip to a column with the property:\n\nWith , the primary axis runs horizontally, from left to right. When we flip to , the primary axis runs vertically, from top to bottom.\n\nIn Flexbox, everything is based on the primary axis. The algorithm doesn't care about vertical/horizontal, or even rows/columns. All of the rules are structured around this primary axis, and the cross axis that runs perpendicularly.\n\nThis is pretty cool. When we learn the rules of Flexbox, we can switch seamlessly from horizontal layouts to vertical ones. All of the rules adapt automatically. This feature is unique to the Flexbox layout mode.\n\nThe children will be positioned by default according to the following 2 rules:\n• None Primary axis: Children will be bunched up at the start of the container.\n• None Cross axis: Children will stretch out to fill the entire container.\n\nIn Flexbox, we decide whether the primary axis runs horizontally or vertically. This is the root that all Flexbox calculations are pegged to.\n\nWe can change how children are distributed along the primary axis using the property:\n\nWhen it comes to the primary axis, we don't generally think in terms of aligning a single child. Instead, it's all about the distribution of the group.\n\nWe can bunch all the items up in a particular spot (with , , and ), or we can spread them apart (with , , and ).\n\nFor the cross axis, things are a bit different. We use the property:\n\nIt's interesting… With , we have some of the same options as , but there isn't a perfect overlap.\n\nWhy don't they share the same options? We'll unravel this mystery shortly, but first, I need to share one more alignment property: .\n\nUnlike and , is applied to the child element, not the container. It allows us to change the alignment of a specific child along the cross axis:\n\nhas all the same values as . In fact, they change the exact same thing. is syntactic sugar, a convenient shorthand that automatically sets the alignment on all the children at once.\n\nThere is no At least, not in Flexbox. The property is implemented in the Grid layout mode. . To understand why not, we need to dig deeper into the Flexbox algorithm.\n\nSo, based on what we've learned so far, Flexbox might seem pretty arbitrary. Why is it and , and not , or ?\n\nFor that matter, why is there an , but not a ??\n\nThese questions get at one of the most important and misunderstood things about Flexbox. To help me explain, I'd like to use a metaphor.\n\nIn Flexbox, items are distributed along the primary axis. By default, they're nicely lined up, side-by-side. I can draw a straight horizontal line that skewers all of the children, like a Meat on a stick. AKA skewers, souvlaki, shish-kabob :\n\nThe cross axis is different, though. A straight vertical line will only ever intersect one of the children.\n\nIt's less like a kebab, and more like a group of Bite-sized hot dogs / vienna sausages :\n\nThere's a significant difference here. With the cocktail wieners, each item can move along its stick without interfering with any of the other items:\n\nBy contrast, with our primary axis skewering each sibling, a single item can’t move along its stick without bumping into its siblings! Try dragging the middle piece side to side:\n\nThis is the fundamental difference between the primary/cross axis. When we're talking about alignment in the cross axis, each item can do whatever it wants. In the primary axis, though, we can only think about how to distribute the group.\n\nThat's why there's no . What would it mean for that middle piece to set ? There's already another piece there!\n\nWith all of this context in mind, let's give a proper definition to all 4 terms we've been talking about:\n• None — to position something along the primary axis.\n• None — to position something along the cross axis.\n• None — a group of “stuff” that can be distributed.\n• None — single items that can be positioned individually.\n\nAnd so: we have to control the distribution of the group along the primary axis, and we have to position each item individually along the cross axis. These are the two main properties we use to manage layout with Flexbox.\n\nThere's no for the same reason that there's no ; when it comes to the primary axis, we have to think of the items as a group, as content that can be distributed.\n\nWhat about ? Actually, this does exist within Flexbox! We'll cover it a little later on, when we talk about the property.\n\nLet's talk about one of the most eye-opening realizations I've had about Flexbox.\n\nSuppose I have the following CSS:\n\nA reasonable person might look at this and say: “alright, so we'll get an item that is 2000 pixels wide”. But will that always be true?\n\nThis is interesting, isn't it?\n\nBoth items have the exact same CSS applied. They each have . And yet, the first item is much wider than the second!\n\nThe difference is the layout mode. The first item is being rendered using Flow layout, and in Flow layout, is a hard constraint. When we set , we'll get a 2000-pixel wide element, even if it has to burst through the side of the viewport like the Horrifying North American cartoon character known for bursting through walls .\n\nIn Flexbox, however, the property is implemented differently. It's more of a suggestion than a hard constraint.\n\nThe specification has a name for this: the hypothetical size. It's the size an element would be, in a perfect utopian world, with nothing getting in the way.\n\nAlas, things are rarely so simple. In this case, the limiting factor is that the parent doesn't have room for a 2000px-wide child. And so, the child's size is reduced so that it fits.\n\nThis is a core part of the Flexbox philosophy. Things are fluid and flexible and can adjust to the constraints of the world.\n\nSo, we've seen that the Flexbox algorithm has some built-in flexibility, with hypothetical sizes. But to really see how fluid Flexbox can be, we need to talk about 3 properties: , , and .\n\nLet's look at each property.\n\nI admit it: for a long time, I didn't really understand what the deal was with . 😅\n\nTo put it simply: In a Flex row, does the same thing as . In a Flex column, does the same thing as .\n\nAs we've learned, everything in Flexbox is pegged to the primary/cross axis. For example, will distribute the children along the primary axis, and it works exactly the same way whether the primary axis runs horizontally or vertically.\n\nand don't follow this rule, though! will always affect the horizontal size. It doesn't suddenly become when we flip from to .\n\nAnd so, the Flexbox authors created a generic “size” property called . It's like or , but pegged to the primary axis, like everything else. It allows us to set the hypothetical size of an element in the primary-axis direction, regardless of whether that's horizontal or vertical.\n\nGive it a shot here. Each child has been given , but you can tweak the first child:\n\nLike we saw with , is more of a suggestion than a hard constraint. At a certain point, there just isn't enough space for all of the elements to sit at their assigned size, and so they have to compromise, in order to avoid an overflow.\n\nBy default, elements in a Flex context will shrink down to their minimum comfortable size along the primary axis. This often creates extra space.\n\nWe can specify how that space should be consumed with the property:\n\nThe default value for is 0, which means that growing is opt-in. If we want a child to gobble up any extra space in the container, we need to explicitly tell it so.\n\nWhat if multiple children set ? In this case, the extra space is divided proportionally between children based on their value.\n\nI think it'll be easier to explain visually. Try incrementing/decrementing each child:\n\nThe first child wants 1 unit of extra space, while the second child wants 1 unit . That means the total # of units is 2 ( 1 + 1 ). Each child gets a proportional share of that extra space.\n\nIn most of the examples we've seen so far, we've had extra space to work with. But what if our children are too big for their container?\n\nLet's test it. Try shrinking the container to see what happens:\n\nInteresting, right? Both items shrink, but they shrink proportionally. The first child is always 2x the width of the second child. You might see some rounding issues that suggest it's off by a pixel or two. This is likely a flaw with my overengineered demo!\n\nAs a friendly reminder, serves the same purpose as . We'll use because it's conventional, but we'd get the exact same result if we used !\n\nand set the elements' hypothetical size. The Flexbox algorithm might shrink elements below this desired size, but by default, they'll always scale together, preserving the ratio between both elements.\n\nNow, what if we don't want our elements to scale down proportionally? That's where the property comes in.\n\nTake a couple of minutes and poke at this demo. See if you can figure out what's going on here. We'll explore below.\n\nAlright, so: we have two children, each with a hypothetical size of 250px. The container needs to be at least 500px wide to contain these children at their hypothetical size.\n\nLet's suppose we shrink the container to 400px. Well, we can't stuff 500px worth of content into a 400px bag! We have a deficit of 100px. Our elements will need to give up 100px total, in order for them to fit.\n\nThe property lets us decide how that balance is paid.\n\nLike , it's a ratio. By default, both children have , and so each child pays ½ of the balance. They each forfeit 50px, their actual size shrinking from 250px to 200px.\n\nNow, let's suppose we crank that first child up to :\n\nWe have a total deficit of 100px. Normally, each child would pay ½, but because we've tinkered with , the first element winds up paying ¾ (75px), and the second element pays ¼ (25px).\n\nNote that the absolute values don't matter, it's all about the ratio. If both children have , each child will pay ½ of the total deficit. If both children are cranked up to , each child will pay 1000/2000 of the total deficit. Either way, it works out to the same thing.\n\nI had an epiphany a while back about : we can think of it as the “inverse” of . They're two sides of the same coin:\n• None controls how the extra space is distributed when the items are smaller than their container.\n• None controls how space is removed when the items are bigger than their container.\n\nThis means that only one of these properties can be active at once. If there's extra space, has no effect, since the items don't need to shrink. And if the children are too big for their container, has no effect, because there's no extra space to divvy up.\n\nI like to think of it as two separate realms. You're either on Earth, or in the The evil alternative dimension from Stranger Things . Each world has its own rules.\n\nSometimes, we don't want some of our Flex children to shrink.\n\nI notice this all the time with SVG icons and shapes. Let's look at a simplified example:\n\nWhen the container gets narrow, our two circles get squashed into gross ovals. What if we want them to stay circular?\n\nWe can do this by setting :\n\nWhen we set to 0, we essentially “opt out” of the shrinking process altogether. The Flexbox algorithm will treat (or ) as a hard minimum limit.\n\nHere's the full code for this demo, if you're curious:\n\nThere's one more thing we need to talk about here, and it's super important. It may be the single most helpful thing in this entire article!\n\nLet's suppose we're building a fluid search form for an e-commerce store:\n\nWhen the container shrinks below a certain point, the content overflows!\n\nBut why?? has a default value of , and we haven't removed it, so the search input should be able to shrink as much as it needs to! Why is it refusing to shrink?\n\nHere's the deal: In addition to the hypothetical size, there's another important size that the Flexbox algorithm cares about: the minimum size.\n\nThe Flexbox algorithm refuses to shrink a child below its minimum size. The content will overflow rather than shrink further, no matter how high we crank !\n\nText inputs have a default minimum size of 170px-200px (it varies between browsers). That's the limitation we're running into above.\n\nIn other cases, the limiting factor might be the element's content. For example, try resizing this container:\n\nFor an element containing text, the minimum width is the length of the longest unbreakable string of characters.\n\nHere's the good news: We can redefine the minimum size with the property.\n\nBy setting directly on the Flex child, we tell the Flexbox algorithm to overwrite the “built-in” minimum width. Because we've set it to 0px, the element can shrink as much as necessary.\n\nThis same trick can work in Flex columns with the property (although the problem doesn't seem to come up as often).\n\nOne of the biggest Flexbox quality-of-life improvements in recent years has been the property:\n\nallows us to create space in-between each Flex child. This is great for things like navigation headers:\n\nis a relatively new addition to the Flexbox language, but it's been implemented across all modern browsers (opens in new tab) since early 2021.\n\nThere's one other spacing-related trick I want to share. It's been around since the early days of Flexbox, but it's relatively obscure, and it blew my mind when I first discovered it.\n\nThe property is used to add space around a specific element. In some layout modes, like Flow and Positioned, it can even be used to center an element, with .\n\nAuto margins are much more interesting in Flexbox:\n\nEarlier, we saw how the property can gobble up any extra space, applying it to a child.\n\nAuto margins will gobble up the extra space, and apply it to the element's margin. It gives us precise control over where to distribute the extra space.\n\nA common header layout features the logo on one side, and some navigation links on the other side. Here's how we can build this layout using auto margins:\n\nThe Corpatech logo is the first list item in the list. By giving it , we gather up all of the extra space, and force it between the 1st and 2nd item.\n\nWe can see what's going on here using the browser devtools:\n\nThere are lots of other ways we could have solved this problem: we could have grouped the navigation links in their own Flex container, or we could have grown the first list item with . But personally, I love the auto-margins solution. We're treating the extra space as a resource, and deciding exactly where it should go.\n\nPhew! We've covered a lot of stuff so far. There's just one more big takeaway I want to share.\n\nSo far, all of our items have sat side-by-side, in a single row/column. The property allows us to change that.\n\nMost of the time when we work in two dimensions, we'll want to use CSS Grid, but Flexbox + definitely has its uses! This particular example showcases the “deconstructed pancake” (opens in new tab) layout, where 3 items stack into an inverted pyramid on mid-sized screens.\n\nWhen we set , items won't shrink below their hypothetical size. At least, not when wrapping onto the next row/column is an option!\n\nBut wait! What about our kebab / cocktail weenie metaphor??\n\nWith , we no longer have a single primary axis line that can skewer each item. Effectively, each row acts as its own mini flex container. Instead of 1 big skewer, each row gets its own skewer:\n\nAll of the rules we've learned so far continue to apply, within this reduced scope. , for example, will distribute the two pieces on each stick.\n\nBut hmm... How does work, now that we have multiple rows? The cross axis could intersect multiple items now!\n\nTake a moment to consider. What do you think will happen when we change this property? Once you have your answer (or at least an idea), see if it's right:\n\nEach row is its own mini Flexbox environment. will move each item up or down within the invisible box that wraps around each row.\n\nBut what if we want to align the rows themselves? We can do that with the property:\n• None gives us two rows of stuff.\n• None Within each row, lets us slide each individual child up or down\n• None Zooming out, however, we have these two rows within a single Flex context! The cross axis will now intersect two rows, not one. And so, we can't move the rows individually, we need to distribute them as a group.\n• None Using our definitions from above, we're dealing with content, not items. But we're also still talking about the cross axis! And so the property we want is .\n\nSo I want to acknowledge something: this has been a dense tutorial. We've gone way down the rabbit hole, and unless you're already a Flexbox pro, I expect your head is spinning a bit. 😅\n\nLike so much in CSS, Flexbox might seem simple when you first get started, but the complexity ramps up quickly when you get beyond the basics.\n\nAs a result, so many of us hit an early plateau with CSS. We know enough to get things done, but it's a constant struggle. The language feels rickety and unpredictable, like an ancient rope bridge that could give out at any second. When it snaps, we hurl random StackOverflow snippets at the problem, hoping something will help.\n\nIt's no fun. And that sucks, since CSS is a pretty big part of most front-end dev jobs!\n\nThe thing is, CSS is actually a deeply robust and consistent language. The problem is that most of our mental models are incomplete and inaccurate. When we take the time to build a proper intuition for the language, things start to click, and CSS becomes an absolute joy to use. ✨\n\nMy solution to this problem is a comprehensive course called CSS for JavaScript Developers (opens in new tab).\n\nThe course is “multi-modality”, meaning that it uses lots of different forms of media. I built my own course platform from scratch, so that it supports:\n\nIf you found this blog post helpful, you'll love the course. It follows a similar approach, but for the entire CSS language, and with exercises and projects to make sure you're actually developing new skills.\n\nIt's specifically built for folks who use a JS framework like React/Angular/Vue. 80% of the course focuses on CSS fundamentals, but we also see how to integrate those fundamentals into a modern JS application, how to structure our CSS, stuff like that.\n\nIf you struggle with CSS, I hope you'll check it out. Gaining confidence with CSS is game-changing, especially if you're already comfortable with HTML and JS. When you complete the holy trinity, it becomes so much easier to stay in flow, to truly enjoy developing web applications.\n\nYou can learn more here:\n\nAt the start of this tutorial, we saw the following “4 layouts for the price of 1” demo:\n\nNow that we've learned all about the Flexbox algorithm, can you figure out how this works? Feel free to experiment with the code here:\n\nLet's walk through how this works:\n\nThanks so much for reading! This blog post was a ton of work, and I'm thrilled to have it out in the world! I hope you found it useful. 💖"
    },
    {
        "link": "https://freecodecamp.org/news/the-css-flexbox-handbook",
        "document": "Flexbox is a useful tool for creating beautiful and responsive layouts for web pages. In this guide, you will learn everything you need to know to start using CSS Flexbox like a pro. We'll also go through loads of practice examples.\n\nThis is a perfect resource for you if you are a beginner web developer. It'll also be useful if you're an experienced developer who wants to brush up on your responsive web design skills.\n• What are the benefits of using Flexbox?\n• The main axis and the cross axis\n• How to Center an Element With Flexbox\n• Are There Bugs in CSS Fexbox?\n\nFlexbox is short for \"Flexible Box Layout\". It's a CSS layout model that simplifies creating complex layouts. It provides a flexible way to align elements and distribute space within a container element.\n\nThe Flexbox layout model is bidirectional. This means you can either arrange your elements in rows, columns, or both. More on that later.\n\nWhat are the benefits of using Flexbox?\n\nBefore Flexbox, it was hard to create complex layouts and responsive web pages. You needed a combination of CSS floats and position properties. This required many workarounds and hacks.\n\nBut with Flexbox, you can now do the following with less difficulty and fewer lines of code:\n• Align and center elements using properties like and .\n• Create same-height columns without any extra HTML elements or background images.\n\nNow you know what Flexbox is, along with some of the things you can do with it. Let's see how you can use it.\n\nThe main axis and the cross-axis\n\nThe first thing you need to understand about Flexbox is the concept of axes. Every flex container (an element with a property set to or ) has a main axis and a cross axis.\n\nThe main axis is either horizontal or vertical depending on the value of the . No worries if you are not familiar with . You are about to learn it.\n\nThe cross axis and main axis when the is\n\nIn this example, the main axis is horizontal and the cross axis is vertical.\n\nThe following is an example where the the main axis is vertical and the cross axis, is horizontal.\n\nThe main axis and cross axis when the is\n\nTo use all of Flexbox's properties, you need to set the property for an element to or .\n\nThis turns the element into a flex container, and the children of that element become flex items.\n\nThe element is now a flex container. The three div elements are direct children of the element, which makes them flex items.\n\nBut the paragraph element inside the third div is not a flex item. This is because it's not a direct child of the element.\n\nYou can use both and to make an element a flex container. The difference is in how they interact with surrounding elements.\n\nThis makes the flex container behave like a block-level element. The flex-container takes up the entire available width of its parent element. It starts on a new line, and the element that comes after it also starts on a new line.\n\nFlex containers behave like block elements when you use\n\nThe element takes up the entire available width of the body (its parent element).\n\nThis makes the flex-container behave like an inline-level element. This allows other inline elements (like buttons) to flow alongside it. Using the previous example, this is how the elements will be arranged when you change from to .\n\nFlex containers behave like when you use\n\nThe flex container does not take up the entire width of its parent. It uses only as much horizontal space as necessary for its content.\n\nPractice using flex and inline-flex on StackBlitz\n\nThe flex container properties allow you to control the layout and alignment of the flex items within a flex container.\n\nNOTE: You apply these properties on the flex container, and not on its items.\n\nThe following are the flex container properties:\n\nThe property defines the direction for displaying the flex items. It is what sets the flex container's main axis. This property can take any of these four values:\n\nNow, let's look at some examples to see how it all works.\n\nIn the following code snippet, we have a with four names:\n\nLet's see the different ways you can arrange the names using the property.\n\nThis displays the flex-items horizontally from left to right.\n\nThis displays the flex-items vertically from top to bottom.\n\nThis is the opposite of the row value. It displays the flex items from right to left.\n\nThis is the opposite of the column value. It displays the flex items from the bottom to the top.\n\nA note on the reverse values and accessibility:\n\nThere's something you need to keep in mind when you use and . As you've already seen, both affect the visual order of elements on the screen.\n\nBut the order in your HTML remains unchanged. And that is the order that screen readers and keyboard navigation controls use.\n\nIn the example, when you use , you see Jack's name first on the screen, followed by Jane, John, and Jill.\n\nBut for someone using a screen reader, they will hear the names as they appear in the HTML and not as they appear on screen. In this case, they will first hear Jill's name, followed by John, Jane, and Jack.\n\nSometimes, the space within the flex container will not be enough for the flex items.\n\nIn such cases, you use the property to choose whether to let the flex-items overflow or begin on a new line.\n\nThe property accepts any of the following values:\n\nTo see in action, let's add four more names to our :\n\nThis keeps all the flex items on a single line either in a row or column. It allows the flex items to overflow if there's not enough room in the flex container. See the example below:\n\nFlex items overflows because is set to\n\nIn this example, three names overflow out of the container because there is not enough space for them.\n\nThis will wrap or push the flex items to the next line if there's not enough room for them.\n\nFlex items wrap or moves to the next line when is set to\n\nThis is the opposite of . It moves the overflow items to the next line but in a reverse direction.\n\nFor example, using on the names container moves overflow items to the next top line instead of the next line below.\n\nThe property is a shorthand for the and properties. This means that when you use , you can apply both properties with only a single line of code.\n\nSee the example below using the names container. You can give the container and properties.\n\nOr you can use the shorthand to get the same result.\n\nThis property handles the alignment of flex items on the main axis of the flex container.\n\nYou can use it to take care of how space is distributed on the main axis. This property takes any of the following values:\n\nThis places the items at the start of the flex-direction. If the main axis is horizontal with a of (like the example below), it aligns the items to the left. And if it's vertical (with a of ), it aligns the items to the top.\n\nUsing the names container example, this is how would look like:\n\nThis will place the flex items at the end of the flex-direction of the main axis.\n\nThis places the flex items at the center of the flex container's main axis.\n\nThis will place the first flex item at the start of the main axis. And also place the last item at the end of the main axis. Then space on the main axis is distributed equally among the the elements.\n\nThis distributes space equally among the flex items. This means the space before and after each item is the same.\n\nThis also distributes space equally between the flex items. The key difference here is that the space before the first item and after the last item is half the space between the flex items.\n\nThe property handles the alignment of flex items on the cross-axis of the flex container. It can take any of the following values:\n\nThis stretches the flex items to fill up the space within the flex-container.\n\nSee the example below using a new names container with name cards of different sizes:\n\nThis will place the flex items at the start of the cross-axis of the flex container. If the cross-axis is vertical like in the example below, will place the items at the top.\n\nThis will place the flex items at the end of the cross-axis of the flex container. If the cross-axis is vertical like in the example below, will place the items at the bottom.\n\nThis aligns flex items at the center of the cross-axis of the flex container.\n\nWhen you use the value, flex items are arranged such that their baselines are aligned. See the example below:\n\nThe baseline is indicated with the dotted white line\n\nWhen you have a flex container with wrap (or more than one flex line), you may need to align the lines to distribute the space as you want. That is when you use . This property can take any of the following values:\n\nIn the example below, there are 11 names in the names container. And the names container element has a value of . This means you can apply the property to change the alignment of the flex lines.\n\nThis stretches the flex lines to fill up the space within the flex container's cross-axis.\n\nThis places the flex lines at the start of the container's cross-axis. For example, if the cross axis is vertical like that of the names container, it will place the flex lines at the top.\n\nThis places the flex lines at the end of the container's cross-axis.\n\nThis places the flex lines at the center of the container's cross-axis.\n\nThis will place the first flex line at the start of the cross-axis. It also places the last flex line at the end of the cross axis. Then space on the cross-axis is distributed equally between the the lines.\n\nThis distributes space equally between the flex lines. This means the space before and after each line is the same.\n\nThis also distributes space equally between the flex lines. The key difference here is the space before the first line and after the last line is half the space between the flex lines.\n\nIf you need to use both the and properties, you use the shorthand property.\n\nIt can take one or two values. When you give it a single value, the browser will apply the same value for both and .\n\nAnd when you give 2 values for , the first value will be for and the second for .\n\nLet's look at an example:\n\nInstead of writing this:\n\nYou can instead write the following and it will have the same effect:\n\nExample of using the shorthand\n\nEvery direct child of a flex container is a flex item. So far, you've learned the properties of the flex containers.\n\nFlexbox also has properties that you can apply to individual flex items. They include the following:\n\nThe property determines the order of appearance for the flex items.\n\nThe value you give to this property must be a number. A flex item with a lower number will appear before one with a higher number.\n\nIn the HTML code, the order for the four names is as follows:\n\nYou can change the order of appearance on the screen using the property. See the example below.\n\nHere's how they appear with no properties:\n\nName cards before add the property\n\nNow, see how they appear when you add the following order properties:\n\nThe property changes the order of appearance\n\nPractice using the order property on StackBlitz.\n\nWord of caution: Even though the order of appearance changes on screen, the order in the HTML remains unchanged. And it's the order in the HTML that screen readers use. Where possible, it's best practice to change the order in the HTML rather than doing it with Flexbox.\n\nYou can use the property to give a flex item a different alignment from the other items.\n\nIt works the same way as the property. The difference is that whereas applies to all flex items, the property is applied to only specific items.\n\nExample of with a value\n\nIn the example, the property for the names container has a value of . This aligns all the names at the center.\n\nBut using the property, you are able to align Jill's name card to the top with a value of .\n\nPractice using the align-self property on StackBlitz.\n\nWhen you set a container's display to , often there will be some extra space after the items are arranged. See the example below:\n\nThe flex container has more than enough space for the flex items\n\nThe browser treats the extra as a value of . This means when you give a value of to only one of the flex items, the browser will add half of the remaining space to the item's size.\n\nThe property makes the Jill's larger than its initial size\n\nAnd if you add a value of to only one of the flex items, the browser will add all the extra space to that item.\n\nNOTE: If only one item in the container has a value, then any value of 1 or more will make it take up all the extra space.\n\nFor example, the two code snippets below will have the same effect on Jill's card:\n\nWhen only one card has a of or more\n\nWhat happens when you add values to more than one element?\n\nThe browser will share the extra space proportionately for them.\n\nFor example, when you give Jane a of and Jack a of , the browser will share the extra space with a ratio.\n\nThis means the total value of the extra space becomes (3+1). will then get of the extra space. And will get of it.\n\nThe extra space is shared proportionately betwee and\n\nPractice using the flex-grow property on StackBlitz.\n\nThe property is the opposite of .\n\nYou use when you want to increase the flex item's size if there's extra space. But, you use when you want to decrease the flex-item's size if there's not enough space in the flex container.\n\nSee the example below:\n\nThe first card shrinks to make room for the others\n\nIn the example, each of the four numbers has a width of 150px (that's a total of 600px). But the has a width of 400px which is not enough.\n\nThe cards have to shrink to fit in the available space. But Number which with a value of 2 shrinks to become twice as small as the other numbers.\n\nWhat if you don't want a flex item to shrink?\n\nTo prevent a flex item from shrinking, give it a value of .\n\nFor example, when you give Number a of , it will maintain the width of 150px. And the other flex items will shrink to fit in the remaining space.\n\nThe first card does not shrink because it has a value of\n\nPractice using the flex-shrink property on StackBlitz.\n\nYou can use the property to set the default length of a specific flex item. This is either the width or height of the item depending on the .\n\nIf the is or , the value for becomes the initial width of the item.\n\nAnd if is or , then the value for becomes the initial height of the item.\n\nExample of setting the height of an item\n\nIn the example, the height for the divs is set at 20px. But Jane gets a value of 60px. And that overrides the 20px given to all the divs.\n\nNote: The flex-basis of 60px becomes the height for Jane because the is . This means the main axis is vertical.\n\nHere is another example. This time, the is . This means the will set the width of the item.\n\nExample of setting the width of an item\n\nWhile all the other divs have a width of 70px, Jane has a width of 140px set by the .\n\nPractice using the flex-basis property on StackBlitz.\n\nYou can use as a shorthand for the , , and properties.\n\nFor example, instead of writing the following:\n\nYou can use the shorthand like so and it will have the same effect:\n\nThe property can take up to three values. The order of the values is important. The browser assigns the first value for , the second for , and the third for .\n\nThe default values for are .\n\nThis means if you give a single value of 2, the browser uses 2 for . And then it sets to 0 and to auto.\n\nPractice using the property on StackBlitz.\n\nHow to Center an Element With Flexbox\n\nOne of the headaches for many front-end developers is centering elements. Flexbox has a perfect solution for that.\n\nThere are two steps involved.\n• Make the parent element a flex container by setting to .\n• Give a value of to both and .\n\nThat's it! Your element will be perfectly centered.\n\nExample of centering an element with Flexbox\n\nWhether you're trying to center text, images, or even an entire navigation bar, this will work just fine.\n\nYou can use the property to adjust the space between flex items.\n\nNOTE: You apply the gap property on the flex container and not the flex items.\n\ncan take two values: the first value for gaps between the rows and the second value for gaps between the columns.\n\nExample of giving two values for the gap property\n\nIf the gap you want between the rows and the columns is the same, you can use a single value. The browser will apply the same value to both rows and columns.\n\nExample of using only one value for both rows and columns gap\n\nYou can also use the properties if you need to apply a specific gap value between only the rows. and if you need to add gaps between only the columns.\n\nExample: Adding gaps between only the rows:\n\nExample of using\n\nExample: Adding gaps between only the columns:\n\nExample of using\n\nPractice using the gap property on StackBlitz.\n\nWant to practice Flexbox in an interactive way? Check out the following games. They provide a hands-on experience for practicing Flexbox in a fun and engaging way.\n\nAre There Bugs in CSS Flexbox?\n\nWhile CSS Flexbox is a powerful layout tool, it's got a few bugs that may surprise you.\n\nA common example is that some HTML elements cannot act as flex containers. These include the , , and elements.\n\nThe workaround is to use an element like a to wrap around the element's children. Then use Flexbox on the wrapper .\n\nIf you are curious about other Flexbox bugs and workarounds, you can have a look at the Flexbugs repository on GitHub.\n\nIn this guide, you learned all the Flexbox properties, their values, and how to use them to create responsive layouts. You also learned about some games like Flexbox Froggy you can use for practice.\n\nThank you for reading, and happy coding! For more in-depth tutorials, feel free to subscribe to my YouTube channel."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox",
        "document": "The flexible box layout module (usually referred to as flexbox) is a one-dimensional layout model for distributing space between items and includes numerous alignment capabilities. This article gives an outline of the main features of flexbox, which we will explore in more detail in the rest of these guides. When we describe flexbox as being one-dimensional we are describing the fact that flexbox deals with layout in one dimension at a time — either as a row or as a column. This can be contrasted with the two-dimensional model of CSS Grid Layout, which controls columns and rows together.\n\nAnother vital area of understanding is how flexbox makes no assumption about the writing mode of the document. Flexbox doesn't just assume that all lines of text start at the top left of a document and run towards the right-hand side, with new lines appearing one under the other. Rather, it supports all writing modes, like other logical properties and values. You can read more about the relationship between flexbox and writing modes in a later article; however, the following description should help explain why we do not talk about left and right and top and bottom when we describe the direction that our flex items flow in. If the is and I am working in English, then the start edge of the main axis will be on the left, the end edge on the right. If I were to work in Arabic, then the start edge of my main axis would be on the right and the end edge on the left. In both cases the start edge of the cross-axis is at the top of the flex container and the end edge at the bottom, as both languages have a horizontal writing mode. After a while, thinking about start and end rather than left and right becomes natural, and will be useful to you when dealing with other layout methods such as CSS Grid Layout which follow the same patterns.\n\nWhile flexbox is a one dimensional model, it is possible to make flex items wrap across multiple lines. If you do this, you should consider each line as a new flex container. Any space distribution will happen across each line, without reference to the previous or subsequent lines. To cause wrapping behavior add the property with a value of . Now, if your items are too large to all display in one line, they will wrap onto another line. The live sample below contains items that have been given a . The total width of the items is too wide for the flex container. As is set to , the items wrap across multiple lines. If you set it to , which is the initial value, they will shrink to fit the container. They shrink because they are using initial flexbox values, including , that allows items to shrink. Using would cause an overflow if the items were not able to shrink, or could not shrink small enough to fit. Find out more about wrapping flex items in the guide Mastering wrapping of flex items.\n\nTo control the inline-size of each flex item, we target them directly via three properties: We will take a brief look at these properties below, but if you want more comprehensive information, take a look at the Controlling ratios of flex items on the main axis guide. Before we can make sense of these properties we need to consider the concept of available space. What we are doing when we change the value of these flex properties is to change the way that available space is distributed amongst our items. This concept of available space is also important when we come to look at aligning items. If we have three 100 pixel-wide items in a container which is 500 pixels wide, then the space we need to lay out our items is 300 pixels. This leaves 200 pixels of available space. If we don't change the initial values then flexbox will put that space after the last item. If we instead would like the items to grow and fill the space, then we need to have a method of distributing the leftover space between the items. The properties that we apply to the items themselves, enable dictating how that available space should be distributed among the sibling flex items.\n\nWith the property set to a positive integer, if there is available space, the flex item can grow along the main axis from its . Whether the item stretches to take up all the available space on that axis, or just a portion of the available space depends on if the other items are allowed to grow too and the value of their properties. Each item with a positive value consumes a portion of any available space based on their value. If we gave all of our items in the example above a value of 1 then the available space in the flex container would be equally shared between our items and they would stretch to fill the container on the main axis. If we give our first item a value of 2, and the other items a value of 1 each, there are a total of 4 parts; 2 parts of the available space will be given to the first item (100px out of 200px in the case of the example above) and 1 part each the other two (50px each out of the 200px total).\n\nWhere the property deals with adding space in the main axis, the property controls how it is taken away. If we do not have enough space in the container to lay out our items, and is set to a positive integer, then the item can become smaller than the . As with , different values can be assigned in order to cause one item to shrink faster than others — an item with a higher value set for will shrink faster than its siblings that have lower values. An item can shrink down to its size. This minimum size is taken into account while working out the actual amount of shrinkage that will happen, which means that has the potential to appear less consistent than in behavior. We'll therefore take a more detailed look at how this algorithm works in the article Controlling ratios of items along the main axis. Note: These values for and are proportions. Typically if we had all of our items set to and then wanted one item to grow at twice the rate, we would set that item to . However you could also use and if you wanted.\n\nYou will very rarely see the , , and properties used individually; instead they are combined into the shorthand. The shorthand allows you to set the three values in this order — , , . The live sample below allows you to test out the different values of the flex shorthand; remember that the first value is . Giving this a positive value means the item can grow. The second is — with a positive value the items can shrink, but only if their total values overflow the main axis. The final value is ; this is the value the items are using as their base value to grow and shrink from. .box > * { border: 2px solid rgb(96 139 168); border-radius: 5px; background-color: rgb(96 139 168 / 0.2); } .box { border: 2px dotted rgb(96 139 168); display: flex; } .one { flex: 1 1 auto; } .two { flex: 1 1 auto; } .three { flex: 1 1 auto; } There are also some predefined shorthand values which cover most of the use cases. You will often see these used in tutorials, and in many cases these are all you will need to use. The predefined values are as follows: The value is a CSS-wide value that represents the initial value for a property. Setting resets the item to the initial values of the three longhand properties, which is the same as . The initial value of is , so items will not grow larger than their size. The initial value of is , so items can shrink if they need to rather than overflowing. The initial value of is . Items will either use any size set on the item in the main dimension, or they will get their size from the content size. Using is the same as using ; this is similar to , except that the items can grow and fill the container as well as shrink if needed. Using will create fully inflexible flex items. It is as if you wrote . The items cannot grow or shrink and will be laid out using flexbox with a of . The shorthand you often see in tutorials is or and so on. This is the same as writing or and so on, respectively. The items get minimum size due to and then proportionally grow to fill the available space. In this case, the value of is redundant because the items start with minimum size — they're not given any size that could cause them to overflow the flex container. Try these shorthand values in the live sample below. .box > * { border: 2px solid rgb(96 139 168); border-radius: 5px; background-color: rgb(96 139 168 / 0.2); } .box { border: 2px dotted rgb(96 139 168); display: flex; } .one { flex: 1; } .two { flex: 1; } .three { flex: 1; }"
    },
    {
        "link": "https://dev.to/majeedatwahab/building-responsive-card-layouts-with-html-and-css-flexbox-163j",
        "document": "In our previous articles, we’ve explored the importance of structured HTML and how CSS Flexbox simplifies web layouts. This article builds on those concepts by bringing them together to create something practical, a responsive card layout. Think of it as a way to solidify everything we’ve learned so far, while also leveling up your web development skills.\n\nWhen building web layouts, card components are everywhere, product-listings, blog posts and more. A well-designed card is both functional and visually appealing, and its responsive design ensures it looks great on any device. In this article, we'll walk through how to build responsive card layouts step-by-step using semantic HTML and CSS Flexbox.\n\nWe will create a responsive card layout that:\n\n3. Uses semantic HTML for accessibility and maintainability.\n\nLet's start by creating a structure for our cards. We will make use of semantic HTML to ensure the content is meaningful and accessible.\n• Use for the container, as it groups related content.\n• Each card is an , signifying that it's a self-contained piece of content.\n• The , , and are semantically grouped to enhance readability and accessibility.\n• The uses to allow cards to stack when the screen size shrinks.\n• Each is styled with a flexible column layout and proper spacing between elements.\n\nNow, it's time to make sure the card layout looks great on all screen sizes.\n• For screens smaller than 768px, the switches from a row layout to a column layout.\n• This ensures the cards are stacked vertically, making them easier to read on mobile devices.\n• On larger screens : the cards will align side-by-side with space between them.👇\n• On smaller screens : the cards will stack on top of each other for a clean layout. 👇\n\nTo wrap things up, here’s what we’ve learned:\n• None Flexbox Fundamentals: Use Flexbox to align and space elements effortlessly.\n• None Responsive Design: Apply media queries to make layouts adapt to different devices.\n\nTake this example and make it your own. Experiment with different card designs, just play around with it because the more you practice, the better you’ll get.\n\nUntil next time, your friendly neighborhood writer, MJ. 👋 Bye!!!"
    },
    {
        "link": "https://codingnepalweb.com/create-responsive-cards-in-html-css",
        "document": "You may have seen cards on different websites. Cards are important web elements used to showcase short articles, product descriptions, or user profiles. If you’re a beginner web developer, creating responsive cards can be a valuable project to understand CSS fundamental concepts such as positing, flexbox, and grid layouts.\n\nIn this blog post, I will guide you through the process of creating a responsive card design using HTML and CSS. There will be 3 cards displayed on the screen; each card contains an image, a title, and a button. When you hover over the card, a simple border animation will appear.\n\nTo create this card, we will use commonly used HTML elements such as div a, image, heading, and basic CSS properties to style the card and make it responsive. This project is simple and straightforward, so you should not have any trouble following the steps and understanding the codes.\n\nSteps to Create Responsive Card in HTML and CSS\n\nTo create a responsive card design using HTML and CSS, follow these simple step-by-step instructions:\n• First, create a folder with any name you like. Then, put the necessary files inside it.\n• Create a file called to serve as the main file.\n• Finally, download the Images folder and place it in your project directory. This folder contains all the images you’ll need for this card project.\n\nTo start, add the following HTML codes to your file: This code includes essential HTML markup with different semantic tags like div, image, and heading to create our card layout.\n\nNext, add the following CSS codes to your file to make your card stylish and responsive. Feel free to experiment with different CSS properties, such as colors, fonts, backgrounds, etc., to make your card even more beautiful.\n\nIn conclusion, creating responsive CSS cards is a simple but practical project for beginner web developers to apply their newly learned HTML and CSS skills. I believe that by following the steps and the codes in this post, you’ve successfully created your own CSS cards.\n\nTo further improve your skills in HTML and CSS, I suggest you try recreating other practical website elements such as card designs, login forms, navigation bars, website homepages, etc.\n\nIf you encounter any problems while creating your responsive card design, you can download the source code files for this form project for free by clicking the Download button. You can also view a live demo of it by clicking the View Live button."
    },
    {
        "link": "https://medium.com/@AryanVora/building-a-responsive-card-layout-with-flexbox-and-css-grid-d3c1121cb2b9",
        "document": "Creating a responsive card layout is a fundamental skill for web developers and designers. Whether you’re showcasing products, articles, or portfolio items, a well-structured card layout can greatly enhance the user experience. In this tutorial, we will explore how to build a responsive card layout using the power of Flexbox and CSS Grid.\n\nBefore diving into the code, let’s briefly understand what Flexbox and CSS Grid are:\n• Flexbox: Flexbox is a one-dimensional layout model that excels at distributing space along a single axis, either horizontally or vertically. It’s perfect for creating flexible and dynamic layouts within a single container.\n• CSS Grid: CSS Grid is a two-dimensional layout model that allows you to create complex grid-based layouts with both rows and columns. It’s ideal for aligning and arranging items within a grid structure.\n\nFirst, let’s set up our HTML structure. We’ll create a container that holds our cards, and each card will contain information such as an image, title, and description.\n\nLet’s start by creating a basic card layout using Flexbox. We’ll arrange the cards horizontally in a row and make them responsive.\n\nIn this example, we set up a basic Flexbox layout for the , making sure that the cards wrap onto the next line when the viewport width is reduced. The line ensures that if there is a very long word that goes past the container it will break up the word into different lines.\n\nNow, let’s take our card layout to the next level using CSS Grid. We’ll create a grid that automatically adjusts based on the available space.\n\nWith this CSS Grid implementation, we define the grid container’s columns using . The value automatically adjusts the column count based on the available space, ensuring that the cards remain responsive.\n\nIn this tutorial, we’ve explored how to create a responsive card layout using both Flexbox and CSS Grid. Flexbox is great for simple layouts where you want items to flex along a single axis, while CSS Grid shines when you need more complex grid-based layouts. Combine these techniques to build versatile card layouts that adapt seamlessly to various screen sizes, making your content look stunning on any device. Remember to customize the styles, add more cards, and enhance the layout to suit your specific project’s needs. Happy coding!"
    },
    {
        "link": "https://netgen.io/blog/html-and-css-best-practices",
        "document": "HTML and CSS are the building blocks of web development. While both are relatively straightforward to learn, mastering best practices is essential for writing clean, maintainable, and scalable code.\n\nSemantic HTML tags add meaning to the content. They improve accessibility and SEO by giving search engines and screen readers more context about your content. Avoid overuse of non-semantic elements like <div> and <span> , opt for more meaningful elements like <nav>, <aside> etc.\n\n1.1. Headings (<h1> to <h6>) for titles and subtitles\n• <h1> tag is the main heading (subject of the web page) while the <h6> tag is the least important heading. Keep in mind that each page should only have one <h1>. Having only one <h1> element on a web page is vital for Search Engine Optimization (SEO). It helps search engines understand what a web page is all about (the main idea of a web page). Don't use <h1> and then jump to <h3> when using header tags. It's difficult for web visitors using a screen reader to understand the contents of your web page when you skip heading levels.\n\n1.3. Lists (<ul>, <ol>, <li>) for ordered and unordered lists, and <dl> for description lists to improve readability and semantics.\n\n1.4. Sectioning elements like <header>, <footer>, <section>, <article>, and <aside> to structure the layout.\n• <header> element shows the navigation or the opening part of the web page\n• <footer> element shows copyright information or navigation links about the web page\n• <section> element represents a specific section of a web page with a distinct topic or purpose\n• <aside> element identifies some content aside from the content it is placed in and should be indirectly related to the surrounding content (example: glossaries, bibliographies, pull quotes, sidebars, or even advertisements\n\n1.5. It's advisable to use the <figure> element when adding captions to your images. It is important to use the <figcaption> element along with the <figure> element for it to work. It is important to add captions to your images this way because:\n• Search engine optimization (it is easier to find your images on search engines)\n• It will be easier for web visitors who use screen readers to understand the content of your web page\n• If you use <p> element as image caption: In a situation where the image fails to load you will have the alt text and the text on the <p> element showing on the screen. It will be difficult for a web visitor using a screen reader to tell the difference between the <p> and alt text.\n\n1.6. Avoid using <b> and <i> for bolding and italics because they have no semantic meaning. Use the font-weight CSS property or use the <strong> and the <em> tags instead.\n\nA consistent structure in HTML refers to organizing the elements in a logical and predictable way, ensuring the code reflects the content hierarchy and relationships between elements. Indentation involves spacing elements in a nested hierarchy, visually representing parent-child relationships.\n\nHTML does not rely on indentation for functionality. Browsers interpret and render HTML based on the elements and their attributes, not on how the code is formatted or indented. However, proper indentation is important for readability and maintainability. It helps developers and teams understand the structure of the document more easily, especially in larger or more complex projects.\n• Consistent indentation (2 or 4 spaces) to make HTML more readable.\n• Organizing HTML structure with proper nesting and closing of tags.\n• Keeping lines short. Try to break long lines of code, especially within attributes, so they remain readable without horizontal scrolling.\n• Using prettier (code formatter). It enforces a consistent style by parsing code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.\n\nStructure is, also, very important in CSS. How you organize and structure your CSS code can have a significant impact on the maintainability, scalability, and performance of your website or web application.\n\nIt is designed to prevent specificity issues by organizing the code in an inverted triangle, from broad to narrow rules.\n\nEnsuring that your HTML and CSS are accessible means designing your website or application to be usable by as many people as possible.\n• alt: Provides an alternative description for images, important for accessibility.\n• title: Provides additional information, but don’t rely solely on it for accessibility since some screen readers do not read it.\n\n3.2. Ensuring forms are labeled correctly using <label> tags and Use <fieldset> and <legend> for grouping related form fields for better structure and context.\n\n3.4. Implementing responsive typography, where text sizes and line heights adjust based on the viewport size to maintain readability across devices.\n\n3.5 Avoid color and image as the sole method to convey meaning\n\nKeeping CSS in external files rather than inline or embedded within <style> tags in HTML. This makes styles reusable, improves maintainability and keeps HTML clean.\n\n5.1. Writing HTML before CSS (helps to define the skeleton of your page).\n\n5.2. Breaking CSS into smaller, reusable files or sections - common styles for buttons, forms, and grids that can be reused throughout the website.\n• CSS preprocessors are used to write styles in a special syntax that is then compiled into standard CSS. They extend the functionality of standard CSS by introducing features like variables, nesting, mixins, and functions. By using preprocessors, you can take advantage of advanced features that are not available in plain CSS.\n\n5.4. Using variables in modern CSS (via CSS/SCSS custom properties) to store values like colors, fonts, or spacing units.\n\n5.5 Sticking to class selectors (.classname) for styling. IDs (#idname) are more specific and harder to override, making CSS less flexible\n• The !important tag can be used to identify properties that are more important than others. This can get tricky as often you’ll end up needing to use multiple !important tags – each to override a previous one in specific scenarios. And doing this too much can cause your site to break or your styles to load incorrectly. Most often, this tag is used as a short-term solution but it often becomes permanent and then can cause issues later when it’s time to debug, in particular.\n\nStrategies used to create consistent, meaningful, and maintainable class names CSS code. They aim to prevent naming conflicts, improve readability, and make styles more modular.\n\nmy favorite, although I can still run into problems (look at drawbacks)\n\nBEM is a popular naming methodology that focuses on the concept of breaking down the user interface into independent blocks. Each block contains elements and can be modified with a modifier.\n• Overuse of BEM can lead to code redundancy.\n• The need to define many classes can lead to increased CSS file size.\n\nSMACSS is more of a style guide than a strict naming convention. It focuses on organizing CSS into reusable components and avoids deep nesting (divides CSS into categories)\n• Divides CSS into categories like Base, Layout, Module, State, and Theme, which can sometimes be unclear.\n• Scalability issues with larger projects - the structure can become fragmented over time, reducing maintainability.\n• Relies heavily on naming conventions, which requires discipline to ensure consistency.\n\nThis methodology focuses on creating reusable styles by splitting the visual properties (skin) from the structural properties (container).\n\nStructure: encourages separating structure from skin (appearance) and aims to create reusable \"objects.\"\n• Increases the number of classes added to an element.\n• It may be excessive for small projects.\n\nAtomic CSS is an approach where each class corresponds to a single, small, specific rule. This reduces repetition but can lead to more class names being used in the markup.\n\nStructure: Uses very small, single-purpose class names for each property.\n• Often used in utility-first frameworks like Tailwind CSS.\n• Can make HTML more verbose (each element may require multiple classes to achieve the desired styling).\n• Defining all the necessary utility classes upfront can be time-consuming.\n• For developers accustomed to traditional, semantic CSS methodologies, adopting Atomic CSS can require a significant shift in mindset and workflow.\n\nCSS Specificity is a fundamental concept in CSS that determines the order of style application. It is calculated based on the types of selectors used, including inline styles, IDs, classes, attributes, and element types.\n\nCan see it as points 0, 0, 0, 0 and read it like a number 0000\n• If the element has inline styling, apply 1,0,0,0 points\n• For each ID value, apply 0,1,0,0 points\n• For each class value (or pseudo-class or attribute selector), apply 0,0,1,0 points\n\n#my-id .my-class:hover has a specificity of (0, 1, 1, 0) or 110 points.\n\n.my-class p has a specificity of (0, 0, 1, 1) or 11 points.\n\nThe rule with the highest specificity wins.\n• The universal selector (*) has no specificity value (0,0,0,0)\n• Pseudo-elements (e.g. :first-line) get 0,0,0,1 unlike psuedo-class (e.g. :first-child) which get 0,0,1,0\n• The pseudo-class:not() adds no specificity by itself, only what’s inside its parentheses.\n\nImages and other media elements can significantly impact page load time, especially on mobile devices. Properly managing these elements helps optimize performance and accessibility. Using loading=\"lazy\" on images to load them only when they’re about to come into the user’s view, improving performance.\n\nPrefer rem and em units for font sizing, padding, and margins to allow for more scalable and responsive designs, instead of fixed units like px.\n\nWhether you're just starting out or refining your skills, these few practices will help you get started.\n\nAdopting best practices for HTML and CSS ensures that your web pages are well-structured, maintainable, accessible, and performant."
    },
    {
        "link": "https://stackoverflow.com/questions/68651961/responsive-card-layout-with-html-css",
        "document": "I'm designing a card using this media card code pen as reference. Here's what I want to do:\n• I want to make the image fit the top half of my card and have the text below.\n• I'm trying to add a card link that takes the user to another page, either by clicking on the title or anywhere on the card.\n\nThere's also an issue with the card layout:\n• when I reduce the screen size, the right border gets covered like this\n\nEdits: Fixed the issue with the above card layout. Added the heading before the card (it stretches outside the image container when the screen width is very small, not sure if that's a big issue) and improved some formatting (added media query, modified margin, height).\n\nHow do I create my card to make it similar to the code pen reference?"
    }
]