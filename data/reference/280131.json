[
    {
        "link": "https://sqlshack.com/common-use-cases-of-sql-select-distinct",
        "document": "This article talks about the commonly used scenarios of SQL Select Distinct in an easily understandable format equally suitable for beginners and professionals.\n\nThe article also brings into light some of the data analysis performed based on the Distinct keyword.\n\nAdditionally, the readers of the article are going to get hands-on experience in implementing the common use cases discussed in this article by simply copying and running the scripts against the sample database of their choice.\n\nLet us try to get a clear understanding of using distinct with SELECT statements in SQL with the help of simple examples first.\n\nPlease build a simple sample database called StudentExamDemo currently with one table named Student to see even the simplest of our examples in action.\n\nWe are using an on-premises SQL instance to build the database and its objects (tables) while you are free to build an Azure SQL database or on-premises SQL database.\n\nRun the following script against the master database (to create a database):\n\nNext, create a Student table by running the following script against the sample database:\n\nBefore we jump to SQL SELECT Distinct, we must understand that the SELECT statement itself simply returns the rows of a table based on the columns you mention with your select statement.\n\nHowever, there is one more important thing to know about the SELECT statement, it, by default returns all the records of a table including duplicate values of the columns.\n\nSo, technically in all SELECT statements by default the keyword ALL is included unless stated otherwise.\n\nLet us view all the rows of the Student table (which we just build earlier) by using the SELECT statement as follows:\n\nThe output is as follows:\n\nNow we will run the same script with an additional ALL keyword at the start:\n\nThe results are as follows:\n\nSo, we can see that SELECT without the mention of any specific clause is using the ALL keyword as we have seen in the above two examples.\n\nWe also discovered one more thing a student record seems to be a duplicate as we assume it was inserted twice by mistake.\n\nThe Distinct keyword in the SELECT statement can help us to show only distinct records based on a column and this means we are not going to see duplicate rows that we saw earlier in the first example.\n\nLet us see it in action by running the following script:\n\nThe query output is as follows:\n\nWe don’t see the student Atif record twice this time because we are looking at distinct names (Name column values) and as a result, we have temporarily prevented the duplicate row to show up in the result set.\n\nAbout the position of the distinct keyword\n\nPlease note that in a T-SQL script (SQL query) Distinct should be the first word after SELECT as you cannot use distinct with the second column leaving the first column as it is.\n\nFor example, running the following script shows an error:\n\nLet us now discuss the common use cases of SQL SELECT Distinct statement.\n\nSuppose we are doing some crucial analysis of the data and during the analysis, we would like to understand the accuracy of the data that is being analyzed.\n\nNow let us say our accuracy depends on the uniqueness of column Name in the Student table so we are going to make use of the SQL SELECT Distinct command to understand how good our data is in terms of accuracy.\n\nOne way is to count distinct values against the total values of the table and if they are not the same that means some duplicate records are present which can impact our analysis results.\n\nLet us run the following script to prove this:\n\nThe queries output is as follows:\n\nFrom the output it is clear that we have fewer unique names (two) than expected (three) so this can affect the results of our analysis if we think that this is because a record has been inserted twice by mistake.\n\nSimilarly, we can use this information to remove duplicates as a means to improve our data analysis outcome. Let us fix the issue by replacing the duplicate name with another name to ensure that we have three unique rows and there is no duplicate data in our table.\n\nThe final output is as follows:\n\nWe can use SQL SELECT Distinct to find unique references of data. For example, we have a result set that shows different rows of a table and each row consists of columns. Now sometimes we are more interested in unique patterns of the data rather than the data itself which is one of the key things in investigative analysis.\n\nWe need to build the Subject and StudentSubject table by running the following script:\n\nLet us now focus on the StudentSubject table which contains the records of all the students who obtained marks in the exam against their subjects.\n\nSo, we have the following items of interest in this scenario:\n\nPlease note that students are already defined in a reference table named Student and likewise we also have a reference table for Subjects. Now keeping in mind the reference tables we can say students showing up in the StudentSubject table actually originated in their reference table.\n\nLet us run the script to view the StudentSubject data first:\n\nHowever, we are interested in a slightly different piece of information which we referred to as finding unique references or patterns of data. This means we want to know how many distinct marks were obtained by the students so far against any subject which will give us a distinct pattern of the obtained marks.\n\nLet us find it out with the help of the SQL SELECT Distinct command as follows:\n\nThe query output is as follows:\n\nThis information not only tells us students are brilliant but also see that the Marks column follows a unique pattern of 70, 80, 90. We can then use this pattern to build another table called Unique_Marks_Pattern and then investigate further.\n\nThis one is rather a rare or less common scenario but shows the tremendous power of SQL SELECT Distinct that changes your script to serve the purpose.\n\nAssume you are a SQL/BI developer who is working on a staging data logic. Staging data logic means you are building SQL scripts to successfully pull the data from the sources for your data warehouse to be loaded initially into a staging environment which is quite a common practice in data warehouse business intelligence solutions.\n\nThe problem is you need to stage data from a table with multiple unique columns whereas in a standard practice you cannot introduce unique constraints on the staging tables as they should be free from any constraints for straightforward data transfer.\n\nLet us see it in action by running the following script:\n\n— Adding more rows to the StudentSubject table with existing subjects for the same students\n\nThe results are shown below:\n\nNow we are only keen to stage the data for student and subject from this table ignoring the marks obtained so a simple query will get us duplicates as follows:\n\nThe query output is as follows:\n\nHowever, we need to build a staging script to only pull both unique student and subject and this is possible through SQL SELECT Distinct as follows:\n\nThe result set is as follows:\n\nFinally, we can build a staging id column for further processing as follows:\n\nThe results are shown below:\n\nCongratulations, you have just learned the common use case scenarios of SQL SELECT Distinct with the help of examples."
    },
    {
        "link": "https://w3schools.com/sql/sql_distinct.asp",
        "document": "The statement is used to return only distinct (different) values.\n\nSelect all the different countries from the \"Customers\" table: Try it Yourself »\n\nInside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.\n\nBelow is a selection from the Customers table used in the examples:\n\nIf you omit the keyword, the SQL statement returns the \"Country\" value from all the records of the \"Customers\" table:\n\nBy using the keyword in a function called , we can return the number of different countries.\n\nHere is a workaround for MS Access:\n\nYou will learn about the COUNT function later in this tutorial."
    },
    {
        "link": "https://stackoverflow.com/questions/42932927/is-select-distinct-bad-practice-when-you-know-a-join-will-produce-duplicates",
        "document": "I don't know if there is necessarily a best practice in this case. Typically, you always want your join semantics to match the logical representation of your data and the desired result. In other words, if logically the join criteria should be across multiple columns because this is how part descriptions logically relate to a part, then that is what you should do.\n\nOtherwise, I always default to what is more readable from a query perspective and how the query will perform. Placing the inside a sub-query results in a somewhat bloated query for others to try and understand. Also, the DBMS might even perform worse from a performance perspective with the sub-query approach since it could cause indexes to be eliminated).\n\nObviously, I don't understand your data model, but each of these queries could actually produce different results depending on how a part description is logically associated to a part.\n\nIt appears that a part description is associated to a part based on both a part number and bin number (this fact is based on the structure of the table). However, in this specific case, all part numbers (but with different bin numbers) happen to have the same part description.\n\nWhat if the descriptions were not the same (e.g. different for each part number/bin number combination). Then only your more specific join would return the correct results (e.g. the part description for a specific part). So again, it all goes back to writing your query such that the logic used matches the logical representation of your data and the result set you are looking for.\n\nThis is just my 2 cents."
    },
    {
        "link": "https://reddit.com/r/dataengineering/comments/17qge22/is_select_distinct_really_that_bad",
        "document": "I have been pushing back on DBT (sql on Sowflake) Pull Requests that use SELECT DISTINCT and instead ask people to create a surrogate key and aggregate/de-dupe explicitly on the keys they want to define uniqueness by. This is a lot more work. Yet, we all know the urge to SELECT DISTINCT “just in case” to avoid the dreaded duplicates test error or find by a stakeholder.\n\nI find myself wondering lately if my blanket rule against SELECT DISTINCT and blocking people’s work because of it, is outdated and misguided, Am I unnecessarily asking more work without enough evidence to the value add or risk mitigation? Because I’ve been so strict on this my whole career (14 yrs) and my teammates along the way have also agreed, major issues resulting from its use has not come up in recent memory.\n\nBut I am now in the process of transferring the ownership of these models and reviewer pool admin to a new group who disagrees with me on this point.\n\nDoes anyone have any horror stories of how SELECT DISTINCT caused problems? Query runtimes, cost, troubleshooting issues? Or the opposite—Has using SELECT DISTINCT consistently, made your life easier? I of course can do some testing myself and query plan analyses but I’m also looking for anecdotes and others’ experiences."
    },
    {
        "link": "https://stackoverflow.com/questions/15479224/using-distinct-and-top-in-the-same-query",
        "document": "I want to use and in the same query. I tried\n\nbut I still have a duplicate , so I tought to do:\n\nBut here the syntax is wrong. How do I do it correctly?"
    },
    {
        "link": "https://dba.stackexchange.com/questions/93158/how-to-speed-up-select-distinct",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/6598778/solution-for-speeding-up-a-slow-select-distinct-query-in-postgres",
        "document": "Pretending that I'm 100% certain the portion of the query is the reason it runs slowly, I've omitted the rest of the query to avoid confusion, since it is the distinct portion's slowness that I'm primarily concerned with (distinct is always a source of slowness).\n\nThe table in question has 2.5 million rows of data. The is needed for purposes not listed here (because I don't want back a modified query, but rather just general information about making distinct queries run faster at the DBMS level, if possible).\n\nHow can I make run quicker (using Postgres 9, specifically) without altering the SQL (ie, I can't alter this SQL coming in, but have access to optimize something at the DB level)?"
    },
    {
        "link": "https://timescale.com/blog/how-we-made-distinct-queries-up-to-8000x-faster-on-postgresql",
        "document": "Learn how to make PostgreSQL faster with our documentation\n\nLearn how to use PostgreSQL for Al with our documentation"
    },
    {
        "link": "https://stackoverflow.com/questions/66814349/sql-can-where-clause-increase-a-select-distinct-querys-speed",
        "document": "So here's the specific situation: I have primary unique indexed keys set to each entry in the database, but each row has a secondID referring to an attribute of the entry, and as such, the secondIDs are not unique. There is also another attribute of these rows, let's call it isTitle, which is NULL by default, but each group of entries with the same secondID have at least one entry with 1 isTitle value.\n\nConsidering the conditions above, would a WHERE clause increase the processing speed of the query or not? See the following:\n\nThe first query without the WHERE clause is faster, but could someone explain me why? Algorithmically the process should be faster with having only one 'if' in the cycle, no?"
    },
    {
        "link": "https://dev.mysql.com/doc/en/distinct-optimization.html",
        "document": "combined with needs a temporary table in many cases.\n\nBecause may use , learn how MySQL works with columns in or clauses that are not part of the selected columns. See Section 14.19.3, “MySQL Handling of GROUP BY”.\n\nIn most cases, a clause can be considered as a special case of . For example, the following two queries are equivalent:\n\nDue to this equivalence, the optimizations applicable to queries can be also applied to queries with a clause. Thus, for more details on the optimization possibilities for queries, see Section 10.2.1.17, “GROUP BY Optimization”.\n\nWhen combining with , MySQL stops as soon as it finds unique rows.\n\nIf you do not use columns from all tables named in a query, MySQL stops scanning any unused tables as soon as it finds the first match. In the following case, assuming that is used before (which you can check with ), MySQL stops reading from (for any particular row in ) when it finds the first row in :"
    }
]