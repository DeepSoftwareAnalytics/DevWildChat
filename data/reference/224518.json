[
    {
        "link": "https://developers.google.com/maps/documentation/geocoding/overview",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nThe Geocoding API is a service that accepts a place as an address, latitude and longitude coordinates, or Place ID. It converts the address into latitude and longitude coordinates and a Place ID, or converts latitude and longitude coordinates or a Place ID into an address.\n\nWhy use the Geocoding API\n\nUse the Geocoding API for website or mobile application when you want to use geocoding data within maps provided by one of the Google Maps Platform APIs. With the Geocoding API, you use addresses to place markers on a map, or convert a marker on a map to an address. This service is designed for geocoding predefined, static addresses for placement of application content on a map.\n\nWhat you can do with the Geocoding API\n\nYou can use the Geocoding API to obtain geocoding data for one or more addresses or places, including the following:\n• Addresses for sets of latitude and longitude coordinates.\n\nYou can control where the results appear and constrain the results to a particular region, county, or postal code.\n\nThe Geocoding API does both geocoding and reverse geocoding:\n• Geocoding: Converts addresses such as \"1600 Amphitheatre Parkway, Mountain View, CA\" into latitude and longitude coordinates or Place IDs. You can use these coordinates to place markers on a map, or to center or reposition the map within the view frame.\n• Reverse geocoding: Converts latitude/longitude coordinates or a Place ID into a human-readable address. You can use addresses for a variety of scenarios, including deliveries or pickups.\n\nThe following demo uses the Geocoding Service through the Maps JavaScript API to demonstrate how the Geocoding API works. Open the map in a separate tab to see more options and details.\n\nThe following table summarizes the resources available through the Geocoding API along with the data each endpoint returns.\n\nHow to use the Geocoding API\n\nCall this API in the language of your choice through one of the following client libraries:\n\nThe Java Client, Python Client, Go Client and Node.js Client for Google Maps Services are community-supported client libraries, open sourced under the Apache 2.0 License. Download them from GitHub, where you can also find installation instructions and sample code.\n• Start using the Geocoding API: Go to Set up your Google Cloud project.\n• Get started with sample requests and responses: Go to Geocoding requests and responses\n• Follow best practices: Go to Geocoding Addresses Best Practices."
    },
    {
        "link": "https://npmjs.com/package/node-geocoder",
        "document": "Node library for geocoding and reverse geocoding. Can be used as a nodejs library\n• : APlace.io Geocoding service. Supports geocoding and reverse. Requires an access token (read about access tokens here) using\n• For you can use simple string parameter or an object containing the different parameters ( , , , , , and ). See available values for and parameters here\n• For , you can pass over\n• For both methods, use (either or ) to specify the language of the results\n• : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use to specify a local instance\n• : Geocodio, Supports address geocoding and reverse geocoding (US only)\n• : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use and (privateKey) for business licence. You can also use and to specify language and region, respectively.\n• : HereGeocoder. Supports address geocoding and reverse geocoding. You must specify with your Here API key. You can also use , (read about political views here), , and .\n• : LocationIQGeocoder. Supports address geocoding and reverse geocoding just like openstreetmap but does require only a locationiq api key to be set.\n• For you can use simple parameter or an object containing the different parameters defined here: http://locationiq.org/#docs\n• For , you can pass over and additional parameters defined in http://locationiq.org/#docs\n• No need to specify referer or email addresses, just locationiq api key, note that there are rate limits!\n• : MapBoxGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n• : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n• : Same geocoder as , but queries the MapQuest servers. You need to specify\n• : OpenCage Geocoder. Aggregates many different open geocoder. Supports address and reverse geocoding with many optional parameters. You need to specify which can be obtained at OpenCage.\n• : OpendataFranceGeocoder supports forward and reverse geocoding in France; for more information, see OpendataFrance API documentation\n• : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\n• : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use and to specify a language and a contact email address.\n• For , you can use an object as value, specifying one or several parameters\n• For , you can use additional parameters\n• You should specify a specific or header field as required by the OpenStreetMap Usage Policy\n• Set to use custom nominatim server. Example: you can setup local nominatim server by following these instructions and set to use local server.\n• : PickPoint Geocoder. Supports address geocoding and reverse geocoding. You need to specify obtained at PickPoint.\n• As parameter for function you can use a string representing an address like \"13 rue sainte catherine\" or an object with parameters described in Forward Geocoding Reference.\n• For function you should use an object where are required parameters. Additional parameters like are available, see details in Reverse Geocoding Reference.\n• : Smarty street geocoder (US only), you need to specify and\n• : Teleport supports city and urban area forward and reverse geocoding; for more information, see Teleport API documentation\n• : TomTomGeocoder. Supports address geocoding. You need to specify and can use to specify a language\n• : VirtualEarthGeocoder (Bing maps). Supports address geocoding. You need to specify\n• : Yandex support address geocoding, you can use to specify language\n\nWith the you can provide your own method to fetch data. This method should be compatible with the Fetch API.\n\nThis allow you to specify a proxy to use, a custom timeout, specific headers, ...\n• : format result to an String array (you need to specify key)\n\nYou can try node-geocoder here http://node-geocoder.herokuapp.com/\n\nYou can use node-geocoder-cli to geocode in shell\n\nYou can add new geocoders by implementing the two methods and :\n\nYou can also add formatter implementing the following interface\n\nYou can improve this project by adding new geocoders."
    },
    {
        "link": "https://github.com/nchaulet/node-geocoder/blob/master/README.md",
        "document": "Node library for geocoding and reverse geocoding. Can be used as a nodejs library\n• : APlace.io Geocoding service. Supports geocoding and reverse. Requires an access token (read about access tokens here) using\n• For you can use simple string parameter or an object containing the different parameters ( , , , , , and ). See available values for and parameters here\n• For , you can pass over\n• For both methods, use (either or ) to specify the language of the results\n• : DataScienceToolkitGeocoder. Supports IPv4 geocoding and address geocoding. Use to specify a local instance\n• : Geocodio, Supports address geocoding and reverse geocoding (US only)\n• : GoogleGeocoder. Supports address geocoding and reverse geocoding. Use and (privateKey) for business licence. You can also use and to specify language and region, respectively.\n• : HereGeocoder. Supports address geocoding and reverse geocoding. You must specify with your Here API key. You can also use , (read about political views here), , and .\n• : LocationIQGeocoder. Supports address geocoding and reverse geocoding just like openstreetmap but does require only a locationiq api key to be set.\n• For you can use simple parameter or an object containing the different parameters defined here: http://locationiq.org/#docs\n• For , you can pass over and additional parameters defined in http://locationiq.org/#docs\n• No need to specify referer or email addresses, just locationiq api key, note that there are rate limits!\n• : MapBoxGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n• : MapQuestGeocoder. Supports address geocoding and reverse geocoding. Needs an apiKey\n• : Same geocoder as , but queries the MapQuest servers. You need to specify\n• : OpenCage Geocoder. Aggregates many different open geocoder. Supports address and reverse geocoding with many optional parameters. You need to specify which can be obtained at OpenCage.\n• : OpendataFranceGeocoder supports forward and reverse geocoding in France; for more information, see OpendataFrance API documentation\n• : Open MapQuestGeocoder (based on OpenStreetMapGeocoder). Supports address geocoding and reverse geocoding. Needs an apiKey\n• : OpenStreetMapGeocoder. Supports address geocoding and reverse geocoding. You can use and to specify a language and a contact email address.\n• For , you can use an object as value, specifying one or several parameters\n• For , you can use additional parameters\n• You should specify a specific or header field as required by the OpenStreetMap Usage Policy\n• Set to use custom nominatim server. Example: you can setup local nominatim server by following these instructions and set to use local server.\n• : PickPoint Geocoder. Supports address geocoding and reverse geocoding. You need to specify obtained at PickPoint.\n• As parameter for function you can use a string representing an address like \"13 rue sainte catherine\" or an object with parameters described in Forward Geocoding Reference.\n• For function you should use an object where are required parameters. Additional parameters like are available, see details in Reverse Geocoding Reference.\n• : Smarty street geocoder (US only), you need to specify and\n• : Teleport supports city and urban area forward and reverse geocoding; for more information, see Teleport API documentation\n• : TomTomGeocoder. Supports address geocoding. You need to specify and can use to specify a language\n• : VirtualEarthGeocoder (Bing maps). Supports address geocoding. You need to specify\n• : Yandex support address geocoding, you can use to specify language\n\nWith the you can provide your own method to fetch data. This method should be compatible with the Fetch API.\n\nThis allow you to specify a proxy to use, a custom timeout, specific headers, ...\n• : format result to an String array (you need to specify key)\n\nYou can try node-geocoder here http://node-geocoder.herokuapp.com/\n\nYou can use node-geocoder-cli to geocode in shell\n\nYou can add new geocoders by implementing the two methods and :\n\nYou can also add formatter implementing the following interface\n\nYou can improve this project by adding new geocoders."
    },
    {
        "link": "https://developers.google.com/maps/documentation/javascript/geocoding",
        "document": "New basemap styling is coming soon to Google Maps Platform. This update to map styling includes a new default color palette, modernized pins, and improvements to map experiences and usability. All map styles will be automatically updated in March 2025. For more information on availability and how to opt in earlier, see New map style for Google Maps Platform\n\nStay organized with collections Save and categorize content based on your preferences.\n\nGeocoding is the process of converting addresses (like \"1600 Amphitheatre Parkway, Mountain View, CA\") into geographic coordinates (like latitude 37.423021 and longitude -122.083739), which you can use to place markers or position the map.\n\nReverse geocoding is the process of converting geographic coordinates into a human-readable address (see Reverse geocoding (Address Lookup)).\n\nYou can also use the geocoder to find the address for a given place ID.\n\nThe Maps JavaScript API provides a Geocoder class for geocoding and reverse geocoding dynamically from user input. If instead you wish to geocode static, known addresses, see the Geocoding web service.\n\nBefore using the Geocoding service in the Maps JavaScript API, first ensure that the Geocoding API is enabled in the Google Cloud console, in the same project you set up for the Maps JavaScript API.\n\nTo view your list of enabled APIs:\n• Go to the Google Cloud console.\n• Click the Select a project button, then select the same project you set up for the Maps JavaScript API and click Open.\n• From the list of APIs on the Dashboard, look for Geocoding API.\n• If you see the API in the list, you’re all set. If the API is not listed, enable it:\n• At the top of the page, select ENABLE API to display the Library tab. Alternatively, from the left side menu, select Library.\n• Search for Geocoding API, then select it from the results list.\n• Select ENABLE. When the process finishes, Geocoding API appears in the list of APIs on the Dashboard.\n\nEffective July 16, 2018, a new pay-as-you-go pricing plan went into effect for Maps, Routes, and Places. To learn more about the new pricing and usage limits for your use of the JavaScript Geocoding service, see Usage and Billing for the Geocoding API.\n\nUse of the Geocoding service must be in accordance with the policies described for the Geocoding API.\n\nAccessing the Geocoding service is asynchronous, since the Google Maps API needs to make a call to an external server. For that reason, you need to pass a callback method to execute upon completion of the request. This callback method processes the result(s). Note that the geocoder may return more than one result.\n\nYou access the Google Maps API geocoding service within your code via the constructor object. The method initiates a request to the geocoding service, passing it a object literal containing the input terms and a callback method to execute upon receipt of the response.\n\nThe object literal contains the following fields:\n\nRequired parameters: You must supply one, and only one, of the following fields:\n• — The address which you want to geocode. \n\n or \n\n — The (or ) for which you wish to obtain the closest, human-readable address. The geocoder performs a reverse geocode. See Reverse Geocoding for more information. \n\n or \n\n — The place ID of the place for which you wish to obtain the closest, human-readable address. See more about retrieving an address for a place ID.\n• — The within which to bias geocode results more prominently. The parameter will only influence, not fully restrict, results from the geocoder. See more information about viewport biasing below.\n• — Used to restrict results to a specific area. See more information about component filtering below.\n• — The region code, specified as a specified as a two-character (non-numeric) Unicode region subtag. In most cases, these tags map directly to familiar ccTLD (\"top-level domain\") two-character values. The parameter will only influence, not fully restrict, results from the geocoder. See more information about region code biasing below.\n• — The only allowed value for this parameter is . See address descriptors for more details.\n• — Fulfill the promise on a ZERO_RESULT status in the response. This may be desired because even with zero geocoding results there may still be additional response level fields returned. See Fulfill on Zero Results for more details.\n\nThe Geocoding service requires a callback method to execute upon retrieval of the geocoder's results. This callback should pass two parameters to hold the and a code, in that order. Note: The Geocoding response also contains and fields at the response level, but these are not accessible through the callback. Instead, they should be accessed through the promise. See Fulfill on Zero Results for more details.\n\nThese fields are explained below:\n• is an array indicating the address type of the returned result. This array contains a set of zero or more tags identifying the type of feature returned in the result. For example, a geocode of \"Chicago\" returns \"locality\" which indicates that \"Chicago\" is a city, and also returns \"political\" which indicates it is a political entity. See more information about address types and address component types below.\n• is a string containing the human-readable address of this location. Often this address is equivalent to the postal address. Note that some countries, such as the United Kingdom, do not allow distribution of true postal addresses due to licensing restrictions. The formatted address is logically composed of one or more address components. For example, the address \"111 8th Avenue, New York, NY\" consists of the following components: \"111\" (the street number), \"8th Avenue\" (the route), \"New York\" (the city) and \"NY\" (the US state). Do not parse the formatted address programmatically. Instead you should use the individual address components, which the API response includes in addition to the formatted address field.\n• None is an array containing the separate components applicable to this address. Each address component typically contains the following fields:\n• is an array indicating the type of the address component. See the list of supported types.\n• is the full text description or name of the address component as returned by the Geocoder.\n• is an abbreviated textual name for the address component, if available. For example, an address component for the state of Alaska may have a of \"Alaska\" and a of \"AK\" using the 2-letter postal abbreviation. Note the following facts about the array:\n• The array of address components may contain more components than the .\n• The array does not necessarily include all the political entities that contain an address, apart from those included in the . To retrieve all the political entities that contain a specific address, you should use reverse geocoding, passing the latitude/longitude of the address as a parameter to the request.\n• The format of the response is not guaranteed to remain the same between requests. In particular, the number of varies based on the address requested and can change over time for the same address. A component can change position in the array. The type of the component can change. A particular component may be missing in a later response. See more information about address types and address component types below.\n• indicates that the geocoder did not return an exact match for the original request, though it was able to match part of the requested address. You may wish to examine the original request for misspellings and/or an incomplete address. Partial matches most often occur for street addresses that do not exist within the locality you pass in the request. Partial matches may also be returned when a request matches two or more locations in the same locality. For example, \"Hillpar St, Bristol, UK\" will return a partial match for both Henry Street and Henrietta Street. Note that if a request includes a misspelled address component, the geocoding service may suggest an alternative address. Suggestions triggered in this way will also be marked as a partial match.\n• is a unique identifier of a place, which can be used with other Google APIs. For example, you can use the with the Google Places API library to get details of a local business, such as phone number, opening hours, user reviews, and more. See the place ID overview.\n• is an array denoting all the localities contained in a postal code, and is only present when the result is a postal code that contains multiple localities.\n• None contains the following information:\n• contains the geocoded latitude,longitude value. Note that we return this location as a object, not as a formatted string.\n• stores additional data about the specified location. The following values are currently supported:\n• indicates that the returned result reflects a precise geocode.\n• indicates that the returned result reflects an approximation (usually on a road) interpolated between two precise points (such as intersections). Interpolated results are generally returned when rooftop geocodes are unavailable for a street address.\n• indicates that the returned result is the geometric center of a result such as a polyline (for example, a street) or polygon (region).\n• indicates that the returned result is approximate.\n• stores the recommended viewport for the returned result.\n\nThe addresses will be returned by the Geocoder using the browser's preferred language setting, or the language specified when loading the API JavaScript using the parameter. (For more information, see Localization.)\n\nThe array in the GeocoderResult indicates the address type. The array may also be returned within a GeocoderAddressComponent to indicate the type of the particular address component. Addresses returned by the geocoder may have multiple types; the types may be considered tags. For example, many cities are tagged with the and type.\n\nThe following types are supported and returned by the geocoder in both the address types and address component types:\n• indicates a named route (such as \"US 101\").\n• indicates a major intersection, usually of two major roads.\n• indicates a political entity. Usually, this type indicates a polygon of some civil administration.\n• indicates the national political entity, and is typically the highest order type returned by the Geocoder.\n• indicates a first-order civil entity below the country level. Within the United States, these administrative levels are states. Not all nations exhibit these administrative levels. In most cases, administrative_area_level_1 short names will closely match ISO 3166-2 subdivisions and other widely circulated lists; however this is not guaranteed as our geocoding results are based on a variety of signals and location data.\n• indicates a second-order civil entity below the country level. Within the United States, these administrative levels are counties. Not all nations exhibit these administrative levels.\n• indicates a third-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n• indicates a fourth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n• indicates a fifth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n• indicates a sixth-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n• indicates a seventh-order civil entity below the country level. This type indicates a minor civil division. Not all nations exhibit these administrative levels.\n• indicates a commonly-used alternative name for the entity.\n• indicates an incorporated city or town political entity.\n• indicates a first-order civil entity below a locality. For some locations may receive one of the additional types: to . Each sublocality level is a civil entity. Larger numbers indicate a smaller geographic area.\n• indicates a named location, usually a building or collection of buildings with a common name.\n• indicates an addressable entity below the premise level, such as an apartment, unit, or suite.\n• indicates an encoded location reference, derived from latitude and longitude. Plus codes can be used as a replacement for street addresses in places where they do not exist (where buildings are not numbered or streets are not named). See https://plus.codes for details.\n• indicates a postal code as used to address postal mail within the country.\n• indicates a named point of interest. Typically, these \"POI\"s are prominent local entities that don't easily fit in another category, such as \"Empire State Building\" or \"Eiffel Tower\".\n\nAn empty list of types indicates there are no known types for the particular address component, for example, Lieu-dit in France.\n\nIn addition to the above, address components may include the types below.\n\nNote: This list is not exhaustive, and is subject to change.\n• indicates the floor of a building address.\n• typically indicates a place that has not yet been categorized.\n• indicates a nearby place that is used as a reference, to aid navigation.\n• indicates a grouping of geographic areas, such as and , used for mailing addresses in some countries.\n• indicates the room of a building address.\n• , and indicate the location of a bus, train or public transit stop.\n\nThe code may return one of the following values:\n• indicates that no errors occurred; the address was successfully parsed and at least one geocode was returned.\n• indicates that the geocode was successful but returned no results. This may occur if the geocoder was passed a non-existent .\n• indicates that you are over your quota.\n• indicates that your request was denied. The web page is not allowed to use the geocoder.\n• generally indicates that the query ( , or ) is missing.\n• indicates that the request could not be processed due to a server error. The request may succeed if you try again.\n• indicates that the request timed out or there was a problem contacting the Google servers. The request may succeed if you try again.\n\nIn this example, we geocode an address and place a marker at the returned latitude and longitude values. Note that the handler is passed as an anonymous function literal.\n\nYou can instruct the Geocoding Service to prefer results within a given viewport (expressed as a bounding box). You do so by setting the parameter within the object literal to define the bounds of this viewport. Note that biasing only prefers results within the bounds; if more relevant results exist outside of these bounds, they may be included.\n\nFor example, a geocode for \"Winnetka\" generally returns this suburb of Chicago:\n\nHowever, specifying a parameter defining a bounding box for the San Fernando Valley of Los Angeles results in this geocode returning the neighborhood named \"Winnetka\" in that location:\n\nYou can set the Geocoding Service to return results biased to a particular region explicitly using the parameter. This parameter takes a region code, specified as a two-character (non-numeric) Unicode region subtag. These tags map directly to familiar ccTLD (\"top-level domain\") two-character values such as \"uk\" in \"co.uk\" for example. In some cases, the tag also supports ISO-3166-1 codes, which sometimes differ from ccTLD values (\"GB\" for \"Great Britain\" for example).\n\nWhen using the parameter:\n• Specify only one country or region. Multiple values are ignored, and could result in a failed request.\n• Use only two-character region subtags (Unicode CLDR format). All other inputs will result in errors.\n• Only the countries and regions listed in Google Maps Platform Coverage Details are supported.\n\nGeocoding requests can be sent for every domain in which the main Google Maps application offers geocoding. Note that biasing only prefers results for a specific domain; if more relevant results exist outside of this domain, they may be included.\n\nFor example, a geocode for \"Toledo\" returns this result, as the default domain for the Geocoding Service is set to the United States:\n\nA geocode for \"Toledo\" with the field set to (Spain) will return the Spanish city:\n\nYou can set the Geocoding Service to return address results restricted to a specific area, by using a components filter. Specify the filter in the parameter. Filter values support the same methods of spelling correction and partial matching as other geocoding requests.\n\nThe geocoder returns only the results that match all the component filters. That is, it evaluates the filter specifications as an AND, not an OR.\n\nA components filter consists of one or more of the following items:\n• matches long or short name of a route.\n• matches all the levels of administrative area.\n• matches a country name or a two letter ISO 3166-1 country code. Note: The API follows the ISO standard for defining countries, and the filtering works best when using the corresponding ISO code of the country.\n\nThe following example demonstrates using the parameter to filter by and :\n\nFor reverse geocoding, by default the promise is broken on . However, the additional response level fields of and may still be populated in this case. If true is provided for the parameter, the promise is not broken and these additional fields are accessible from the promise if present.\n\nThe following is an example of this behavior for a latitude/longitude in Antarctica. Even though there are no reverse geocoding results, we can still print the plus code in the promise if we set .\n\nAddress descriptors include additional information that help describe a location using landmarks and areas. Check out the address descriptors demo to explore the feature.\n\nAddress descriptors can be enabled through the use of the parameter. Include in a geocoding request , reverse geocoding request , or a places geocoding request to receive address descriptors in your response.\n\nThe following query contains the address of a place in Delhi.\n\nThe following query contains the latitude/longitude value for a location in Delhi.\n\nAn example is as follows.\n\nThere are two arrays in each object: and . The array contains up to 5 results ranked in order of relevance by taking account of proximity to the requested coordinate, the prevalence of the landmark and its visibility. Each landmark result contains the following values:\n• is the place ID of the landmarks result. See the place ID overview.\n• is the display name of the landmark and contains and .\n• is the point to point distance in meters between the input coordinate and the landmarks result.\n• is the distance in meters as traveled via the road network (ignoring road restrictions) between the input coordinate and the landmarks result.\n• is the estimated relationship between the input coordinate and the landmarks result:\n• is the default relationship when none of the following applies.\n• when the input coordinate is contained within the bounds of the structure associated with the landmark.\n• when the input coordinate is directly adjacent to the landmark or landmark's access point.\n• when the input coordinate is directly opposite of the landmark on the other side of the route.\n• when the input coordinate is along the same route as the landmark, but not or .\n• when the input coordinate is along a perpendicular route as the landmark (restricted to a single turn).\n• when the input coordinate is spatially close to the landmark, but far from its access point.\n• are the Place types of the landmark.\n\nThe object contains up to 3 responses and limits itself to places that represent small regions, such as neighborhoods, sublocalities, and large complexes. Areas that contain the requested coordinate are listed first and ordered from smallest to largest. Each result contains the following values:\n• is the place ID of the areas result. See the place ID overview.\n• is the display name of the area and contains and .\n• is the estimated containment relationship between the input coordinate and the areas result:\n• is the default relationship when none of the following applies.\n• when the input coordinate is close to the center of the area.\n• when the input coordinate is close to the edge of the area.\n\nThis feature is only available in select countries.\n\nThis is a Preview feature and we would appreciate feedback. Please email us at address-descriptors-feedback@google.com.\n\nThe term geocoding generally refers to translating a human-readable address into a location on a map. The process of doing the converse, translating a location on the map into a human-readable address, is known as reverse geocoding.\n\nInstead of supplying a textual , supply a comma-separated latitude/longitude pair in the parameter.\n\nThe following example geocodes a latitude/longitude value and centers the map at that location, bringing up an info window with the formatted address:\n\nNote that in the previous example we showed the first result by selecting . The reverse geocoder often returns more than one result. Geocoded addresses are not just postal addresses, but any way to geographically name a location. For example, when geocoding a point in the city of Chicago, the geocoded point may be labeled as a street address, as the city (Chicago), as its state (Illinois) or as a country (The United States). All are addresses to the geocoder. The reverse geocoder returns all of these results.\n\nThe reverse geocoder matches political entities (countries, provinces, cities and neighborhoods), street addresses, and postal codes.\n\nHere's an example of the list of addresses that the above query may return:\n\nAddresses are returned in the order of best to least matches. Generally, the more exact address is the most prominent result, as it is in this case. Note that we return different types of addresses, from the most specific street address to less specific political entities such as neighborhoods, cities, counties, states, etc. If you wish to match a more general address, you may wish to inspect the field.\n\nNote: Reverse geocoding is not an exact science. The geocoder will attempt to find the closest addressable location within a certain tolerance.\n\nSupply a to find the address for a given place ID. The place ID is a unique identifier that can be used with other Google APIs. For example, you can supply the returned by the Roads API to get the address for a snapped point. For more information about place IDs, see the place ID overview.\n\nWhen you supply a , the request cannot contain any of the following fields:\n\nThe following example accepts a place ID, finds the corresponding address, and centers the map at that location. It also brings up an info window showing the formatted address of the relevant place:"
    },
    {
        "link": "https://stackoverflow.com/questions/6548504/how-can-i-get-city-name-from-a-latitude-and-longitude-point",
        "document": "Is there a way to get a city name from a latitude and longitude point using the google maps api for javascript?\n\nIf so could I please see an example?"
    },
    {
        "link": "https://clouddefense.ai/code/javascript/example/geolib",
        "document": "Dive into secure and efficient coding practices with our curated list of the top 10 examples showcasing ' geolib ' in functional components in JavaScript. Our advanced machine learning engine meticulously scans each line of code, cross-referencing millions of open source libraries to ensure your implementation is not just functional, but also robust and secure. Elevate your React applications to new heights by mastering the art of handling side effects, API calls, and asynchronous operations with confidence and precision."
    },
    {
        "link": "https://npmjs.com/package/geolib",
        "document": "Library to provide basic geospatial operations like distance calculation, conversion of decimal coordinates to sexagesimal and vice versa, etc. This library is currently 2D, meaning that altitude/elevation is not yet supported by any of its functions!\n\nA detailed changelog can be found in CHANGELOG.md\n\nThere is a UMD build and an ES Module build. You can either use the UMD build in Node like any other library:\n\nor in the browser by using a simple script element:\n\nIf you load it in the browser, you can access all the functions via .\n\nIf you're working with a bundler (like Webpack or Parcel) or have an environment that supports ES Modules natively, you can either import certain functions from the package directly:\n\nor load the whole library:\n\nor you can import single functions directly to potentially make use of treeshaking (recommended):\n\nThis library is written in TypeScript. You don't have to know TypeScript to use Geolib but the type definitions give you valuable information about the general usage, input parameters etc.\n\nAll methods that are working with coordinates accept either an object with a / and a / / property, or a GeoJSON coordinates array, like: . All values can be either in decimal ( ) or sexagesimal ( ) format.\n\nDistance values are always floats and represent the distance in meters.\n\nCalculates the distance between two geo coordinates.\n\nThis function takes up to 3 arguments. First 2 arguments must be valid (e.g. ). Coordinates can be in sexagesimal or decimal format. The third argument is accuracy (in meters). By default the accuracy is 1 meter. If you need a more accurate result, you can set it to a lower value, e.g. to for centimeter accuracy. You can set it higher to have the result rounded to the next value that is divisible by your chosen accuracy (e.g. with an accuracy of becomes ).\n\nReturns the distance in meters as a numeric value.\n\nCalculates the distance between two geo coordinates. This method is more accurate then , especially for long distances but it is also slower. It is using the Vincenty inverse formula for ellipsoids.\n\nIt takes the same (up to 3) arguments as .\n\nCalculates the geographical center of all points in a collection of geo coordinates. Takes an array of coordinates and calculates the center of it.\n\nCalculates the center of the bounds of geo coordinates.\n\nTakes an array of coordinates, calculate the border of those, and gives back the center of that rectangle.\n\nOn polygons like political borders (eg. states), this may gives a closer result to human expectation, than , because that function can be disturbed by uneven distribution of point in different sides.\n\nImagine the US state Oklahoma: on that gives a southern point, because the southern border contains a lot more nodes, than the others.\n\nIt returns minimum and maximum latitude and minimum and maximum longitude as an object:\n\nChecks whether a point is inside of a polygon or not.\n\nChecks whether a point is inside of a circle or not.\n\nGets rhumb line bearing of two points. Find out about the difference between rhumb line and great circle bearing on Wikipedia. Rhumb line should be fine in most cases:\n\nFunction is heavily based on Doug Vanderweide's great PHP version (licensed under GPL 3.0) http://www.dougv.com/2009/07/13/calculating-the-bearing-and-compass-rose-direction-between-two-latitude-longitude-coordinates-in-php/\n\nGets great circle bearing of two points. This is more accurate than rhumb line bearing but also slower.\n\nGets the compass direction from an origin coordinate to a destination coordinate. Optionally a function to determine the bearing can be passed as third parameter. Default is .\n\nSorts an array of coords by distance to a reference coordinate.\n\nReturns an array of points ordered by their distance to the reference point.\n\nFinds the single one nearest point to a reference coordinate. It's actually just a convenience method that uses under the hood and returns the first result.\n\nReturns the point nearest to the reference point.\n\nCalculates the length of a collection of coordinates. Expects an array of points as first argument and optionally a function to determine the distance as second argument. Default is .\n\nReturns the length of the path in meters as number.\n\nGets the minimum distance from a point to a line of two points.\n\nReturns the shortest distance to the given line as number.\n\nNote: if all points are too close together the function might return NaN. In this case it usually helps to slightly increase the accuracy (e.g. ).\n\nComputes the bounding coordinates of all points on the surface of the earth less than or equal to the specified great circle distance.\n\nReturns an array with the southwestern and northeastern coordinates.\n\nCalculates if given point lies in a line formed by start and end.\n\nReturns the new value as decimal number.\n\nReturns the new value as sexagesimal string.\n\nReturns the latitude/longitude for a given point and converts it to decimal. If the second argument is set to true it does not convert the value to decimal.\n\nReturns the value as decimal or in its original format if the second argument was set to true.\n\nChecks if a coordinate is already in decimal format and, if not, converts it to. Works with single values (e.g. ) and complete coordinates (e.g. ) as long as it in a supported format.\n\nReturns a decimal value for the given input value.\n\nComputes the destination point given an initial point, a distance (in meters) and a bearing (in degrees). If no radius is given it defaults to the mean earth radius of 6,371,000 meters.\n\nAttention: this formula is not 100% accurate (but very close though).\n\nReturns the destination in the same format as the input coordinates. So if you pass a GeoJSON point, you will get a GeoJSON point.\n\nReturns the result as number in square meters.\n\nGets the property names of that are used in the point in a normalized form:\n\nReturns an object with a and a property. Their values are the property names for latitude and longitude that are used in the passed point. Should probably only be used internally.\n\nIs used by under the hood and returns the property name out of a list of possible names.\n\nReturns the name of the property as string or if no there was no match.\n\nChecks if a given point has at least a latitude and a longitude and is in a supported format.\n\nCalculates the speed between two points within a given time span.\n\nReturn the speed in meters per second as number.\n\nConverts the result from into a more human friendly format. Currently available units are and .\n\ncan be one of:\n\nReturns the converted value as number.\n\nConverts a given distance (in meters) into another unit.\n\ncan be one of:\n\nConverts the result from into a different unit.\n\ncan be one of:\n\nConverts the Well-known text (a.k.a WKT) to polygon that Geolib understands. https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Geometric_Objects\n\nBreaking Changes in 3.0.0 and migration from 2.x.x\n\nIn version 3.0.0 I'm trying to get a little bit back to the roots. Geolib was once started because I needed a handful of methods to perform very specific geo related tasks like getting the distance or the direction between two points. Since it was one of the very first libraries on npm back then to do these kind of things in a very simple way it became very popular (with more than 300k downloads per month as of April 2019!) and as a consequence got a lot of contributions over the years. Many of which I just merged as long as they had accompanying tests, without looking at consistency, conventions, complexity, coding style or even the overall quality of the functions that I sometimes didn't even fully understand.\n\nI have now cleaned up the codebase completely, rebuilt the entire library \"from scratch\", unified all the function arguments, removed a few functions where I wasn't sure if they should be in here (feel free to add them back of you're using them!) or if they were even used (did a few searches on GitHub for the function names, turned out there are zero results).\n\nElevation support was dropped, as well as a few functions that unnecessarily made the library really large in size (e.g. alone was over 700[!] lines of code and was basically taken from a different library).\n\nI removed Grunt from the build process, added \"modern\" tools like ESLint and Prettier. I switched from Travis CI to Circle CI and I am in the process of further automating the release process of new versions using and . I also switched from pure JavaScript to TypeScript because I think it does have some benefits.\n• All functions are pure functions now. No input data is mutated anymore. You give the same input, you get the same output. No side effects or whatsoever.\n• I changed the default function from being the slow, accurate one to being the fast, slightly inaccurate one. The old function is now named while the old function is now the default function. You can, however, pass as argument to any function that uses distance calculation internally.\n• Artificial limitation to 8 decimal places in decimal coordinates was removed\n• now returns the exact coordinates due to the removal of the artificial 8 decimal place limitation\n• does no longer return an object with an exact and a rough direction but only the exact direction as string\n• third argument to is no longer a string (\"circle\", \"line\") but a function to determine the bearing (you can pass or ). The function receives the origin and the destination as first and second argument. If no 3rd argument was given, is used by default.\n• There is now a new helper function if you really only need a very rough (and potentially inaccurate or inappropriate) direction. Better don't use it.\n• does no longer modify its input so does not add a and property to the returned coordinates.\n• The result of is now always returned as meters per second. It can be converted using the new convenience function\n• Relevant value (usually point or distance) is now consistently the first argument for each function (it wasn't before, how confusing is that?)\n• does no longer take and arguments. It's only a convenience method to get the single one nearest point from a set of coordinates. If you need more than one, have a look at the implementation and implement your own logic using\n• Whereever distances are involved, they are returned as meters or meters per second. No more inconsistent defaults like kilometers or kilometers per hour.\n• The method how sexagesimal is formatted differs a little bit. It may now potentially return ugly float point units like in rare cases but it is also more accurate than it was before.\n• Dropped support for Meteor (feel free to add it back if you like)\n\nFunctions with the same name\n• -> remamed to convertDistance, because name was too ambiguous\n• renamed to to be more explicit\n• -> removed (might be re-added as getCoordinate or getNormalizedCoordinate)\n• alias -> removed (too ambiguous) - use or\n• to calculate the area of a polygon\n• to get a property name (e.g. or of an object based on an array of possible names)"
    },
    {
        "link": "https://stackoverflow.com/questions/18883601/function-to-calculate-distance-between-two-coordinates",
        "document": "What you're using is called the haversine formula, which calculates the distance between two points on a sphere as the crow flies. The Google Maps link you provided shows the distance as 2.2 km because it's not a straight line.\n\nWolfram Alpha is a great resource for doing geographic calculations, and also shows a distance of 1.652 km between these two points.\n\nIf you're looking for straight-line distance (as the crow files), your function is working correctly. If what you want is driving distance (or biking distance or public transportation distance or walking distance), you'll have to use a mapping API (Google or Bing being the most popular) to get the appropriate route, which will include the distance.\n\nIncidentally, the Google Maps API provides a packaged method for spherical distance, in its namespace (look for ). It's probably better than rolling your own (for starters, it uses a more precise value for the Earth's radius).\n\nFor the picky among us, when I say \"as the crow flies\" or \"straight-line distance\", I'm referring to a \"straight line on a sphere\", which is actually a curved line (i.e. the great-circle distance), of course."
    },
    {
        "link": "https://npmjs.com/package/geolib/v/2.0.17",
        "document": "Library to provide basic geospatial operations like distance calculation, conversion of decimal coordinates to sexagesimal and vice versa, etc.\n\nCalculates the distance between two geo coordinates\n\nTakes 2 or 3 arguments. First 2 arguments must be objects that each have latitude and longitude properties (e.g. )Works with:. Coordinates can be in sexagesimal or decimal format. 3rd argument is accuracy (in meters). So a calculated distaWorks with:nce of 1248 meters with an accuracy of 100 is returned as (accuracy 10 = etc.).\n\nReturn value is always an integer and represents the distance in meters.\n\nCalculates the geographical center of all points in a collection of geo coordinates\n\nTakes an object or array of coordinates and calculates the center of it.\n\nChecks whether a point is inside of a polygon or not. Note: the polygon coords must be in correct order!\n\nSimilar to is point inside: checks whether a point is inside of a circle or not.\n\nSorts an object or array of coords by distance from a reference coordinate\n\nCalculates the length of a collection of coordinates\n\nReturns the length of the path in meters\n\nCalculates the speed between two points within a given time span.\n\nReturns the speed in options.unit (default is km/h).\n\nConverts a given distance (in meters) to another unit.\n\ncan be one of:\n\ndistance to be converted (source must be in meter)\n\nReturns the latitude/longitude/elevation for a given point and converts it to decimal.\n\nChecks if a coordinate is already in decimal format and, if not, converts it to\n\n- Dropped support for IE6, IE7, IE8 - Added new methods `geolib.latitude()`, `geolib.longitude()`, `geolib.elevation()` to get latitude, longitude or elevation of points. Will be converted to decimal format automatically - Added new method `geolib.extend()` to extend geolib object - Added support for GeoJSON format (`[lon, lat, elev]`) - Added property `geolib.version` to query the currently used version - Moved `geolib.elevation` to an optional module (`geolib.elevation.js`) - Using `Object.create(Geolib.prototype)` instead of object literal `{}` - New folder structure: compiled `geolib.js` can now be found in `dist/` instead of root dir - Improved Grunt build task"
    },
    {
        "link": "https://github.com/ifit/Geolib",
        "document": "A small library to provide some basic geo functions like distance calculation, conversion of decimal coordinates to sexagesimal and vice versa, etc.\n\nCalculates the distance between two geo coordinates\n\nTakes 2 or 3. First 2 arguments must be an object with a latitude and a longitude property (e.g. {latitude: 52.518611, longitude: 13.408056}). Coordinates can be in sexagesimal or decimal format. 3rd argument is accuracy (in meters). So a calculated distance of 1248 meters with an accuracy of 100 is returned as 1200.\n\nReturn value is always an integer and represents the distance in meters.\n\nCalculates the geographical center of all points in a collection of geo coordinates\n\nTakes an object or array of coordinates and calculates the center of it.\n\nChecks whether a point is inside of a polygon or not. Note: the polygon coords must be in correct order!\n\nSimilar to is point inside: checks whether a point is inside of a circle or not.\n\nSorts an object or array of coords by distance from a reference coordinate\n\nCalculates the length of a collection of coordinates\n\nReturns the length of the path in kilometers\n\nConverts a given distance (in meters) to another unit.\n\ncan be one of:\n\ndistance to be converted (source must be in meter)\n\nChecks if a coordinate is already in decimal format and, if not, converts it to"
    },
    {
        "link": "https://blog.risingstack.com/node-js-async-best-practices-avoiding-callback-hell-node-js-at-scale",
        "document": "In this post, we cover what tools and techniques you have at your disposal when handling Node.jsNode.js is an asynchronous event-driven JavaScript runtime and is the most effective when building scalable network applications. Node.js is free of locks, so there's no chance to dead-lock any process. asynchronous operations: asyncAsynchrony, in software programming, refers to events that occur outside of the primary program flow and methods for dealing with them. External events such as signals or activities prompted by a program that occur at the same time as program execution without causing the program to block and wait for results are examples of this category. Asynchronous input/output is an....js, promises, and async functions.\n\nAfter reading this article, you’ll know how to use the latest async tools at your disposal provided by Node.js!\n\nSee all chapters of Node.js at Scale:\n• Using npm is a software registry that serves over 1.3 million packages. npm is used by open source developers from all around the world to share and borrow code, as well as many businesses. There are three components to npm: the website the Command Line Interface (CLI) the registry Use the website to discover and download packages, create user profiles, and...\n• Testing + Node\n• Node.js Testing and Getting TDD Right\n• Node.js in Production\n• How to Debug Node.js with the Best Tools Available\n• Node.js + Microservices are not a tool, rather a way of thinking when building software applications. Let's begin the explanation with the opposite: if you develop a single, self-contained application and keep improving it as a whole, it's usually called a monolith. Over time, it's more and more difficult to maintain and update it without breaking anything, so the development cycle may...\n\nPreviously we have gathered a strong knowledge about asynchronous programming in JavaScript and understood how the Node.js event loop works.\n\nIf you have not read these articles, I highly recommend them as introductions!\n\nNode.js itself is single-threaded, but some tasks can run in parallel thanks to its asynchronous nature.\n\nBut what does running in parallel mean in practice?\n\nSince we program a single-threaded VM, it is essential that we do not block execution by waiting for I/O, but handle operations concurrently with the help of Node.js’s event-driven APIs.\n\nLet’s take a look at some fundamental patterns, and learn how we can write resource-efficient, non-blocking code, with the built-in solutions of Node.js.\n\nLet’s take a look at these simple async operations. They do nothing special, just fire a timer and call a function once the timer finished.\n\nOur higher-order functions can be executed sequentially or in parallel with the basic “pattern” by nesting callbacks – but using this method can lead to an untameable callback-hell.\n\nNever use the nested callback approach for handling asynchronous Node,js operations!\n\nLet me show you some of the tools we can use to organize our code in a nice and maintainable way!\n\nThere have been native promises in javascript since 2014, receiving an important boost in performance in Node.js 8. We will make use of them in our functions to make them non-blocking – without the traditional callbacks. The following example will call the modified version of both our previous functions in such a manner:\n\nPlease note that will fail as soon as any of the promises inside it fails.\n\nThe previous functions have been modified slightly to return promises. Our new function, asyncRunner, will also return a promise, that will resolve when all the contained functions resolve, and this also means that wherever we call our asyncRunner, we’ll be able to use the .then and .catch methods to deal with the possible outcomes:\n\nSince node@12.9.0, there is a method called , that we can use to get the result of all the passed in promises regardless of rejections. Much like Promise.all, this function expects an array of promises, and returns an array of objects that has a status of “fulfilled” or “rejected”, and either the resolved value or the error that occurred.\n\nIn previous node versions, where is not available, we can implement our own version in just a few lines:\n\nTo make sure your tasks run in a specific order – maybe successive functions need the return value of previous ones, or depend on the run of previous functions less directly – which is basically the same as for functions that return a Promise. As long as it’s missing from everyone’s favorite utility library, you can easily create a chain from an array of your async functions:\n\nIn case of a failure, this will skip all the remaining promises, and go straight to the error handling branch. You can tweak it some more in case you need the result of all of the promises regardless if they resolved or rejected.\n\nNode also provides a handy utility function called “promisify”, that you can use to convert any old function expecting a callback that you just have to use into one that returns a promise. All you need to do is import it in your project:\n\nIt’s actually not that hard to implement a promisify function of our own, to learn more about how it works. We can even handle additional arguments that our wrapped functions might need!\n\nWe just wrap the original callback-based function in a promise, and then reject or resolve based on the result of the operation.\n\nFor better support of callback based code – legacy code, ~50% of the npm modules – Node also includes a function, essentially the opposite of , which takes an async function that returns a promise, and returns a function that expects a callback as its single argument.\n\n#2: Meet Async – aka how to write async code in 2020\n\nWe can use another javascript feature since node@7.6 to achieve the same thing: the async and awaitIn an async function, you can await any Promise or catch its rejection cause. In ECMAScript 2017, the async and await keywords were introduced. These features make writing asynchronous code easier and more readable in the long run. They aid in the transition from asynchronicity to synchronism by making it appear more like classic synchronous code, so they're well worth learning. keywords. They allow you to structure your code in a way that is almost synchronous looking, saving us the chaining as well as callbacks:\n\nThis is the same async runner we’ve created before, but it does not require us to wrap our code in calls to gain access to the results. For handling errors, we have the option to use try & catch blocks, as presented above, or use the same calls that we’ve seen previously with promises. This is possible because async-await is an abstraction on top of promises – async functions always return a promise, even if you don’t explicitly declare them to do so.\n\nThe await keyword can only be used inside functions that have the async tag. This also means that we cannot currently utilize it in the global scope.\n\nSince Node 10, we also have access to the method, which allows us to run code regardless of whether the promise resolve or rejected. It can be used to run tasks that we had to call in both the and paths previously, saving us some code duplication.\n\nUsing all of this in Practice\n\nAs we have just learned several tools and tricks to handle async, it is time to do some practice with fundamental control flows to make our code more efficient and clean.\n\nLet’s take an example and write a route for our web app, where the request can be resolved after 3 steps: , and .\n\nIf you’d like to write them without any helper, you’d most probably end up with something like this. Not so nice, right?\n\nInstead of the callback-hell, we can use promises to refactor our code, as we have already learned:\n\nLet’s take it a step further! Rewrite it to use the async and await keywords:\n\nIt feels like a “synchronous” code but still doing async operations one after each other.\n\nEssentially, a new callback is injected into the functions, and this is how async knows when a function is finished.\n\nFortunately, Node.js eliminates the complexities of writing thread-safe code. You just have to stick to these rules to keep things smooth:\n\nAs a rule of thumb, prefer async, because using a non-blocking approach gives superior performance over the synchronous scenario, and the async – await keywords gives you more flexibility in structuring your code. Luckily, most libraries now have promise based APIs, so compatibility is rarely an issue, and can be solved with util.promisify should the need arise.\n\nIf you have any questions or suggestions for the article, please let me know in the comments!\n\nIn case you’re looking for help with Node.js consulting or development, feel free to reach out to us! Our team of experienced engineers is ready to speed up your development process, or educate your team on JavaScript, Node, React, Microservices and Kubernetes.\n\nIn the next part of the Node.js at Scale series, we take a look at Event Sourcing with Examples.\n\nThis article was originally written by Tamas Hodi, and was released on 2017, January 17. The revised second edition was authored by Janos Kubisch and Tamas Hodi and it was released on 2020 February 10."
    },
    {
        "link": "https://blog.bitsrc.io/async-await-in-javascript-simplifying-asynchronous-code-39075ea4cd03",
        "document": "Async/await is a feature of JavaScript that simplifies asynchronous programming. We will define , describe how it functions, and give some practical examples in this blog article.\n\nAsynchronous programming is a programming pattern where tasks are completed simultaneously and the results are returned as soon as they are ready. Traditional synchronous programming executes tasks sequentially, which might cause the user to wait a very long time.\n\nJavascript offers asynchronous programming in primarily three different ways: callbacks, promises, and .\n\nCallbacks are functions that are executed after a task is completed and are passed as arguments in other functions. Promises are objects that stand in for values that might not be available right away but will be fulfilled eventually. Async/await is a modern method for managing asynchronous programming that makes the code syntax simpler and more readable.\n\nI recommend to read JavaScript Promise before delving into Async/await for a better understanding of the underlying concepts.\n\nProgrammers can write asynchronous code more synchronously using JavaScript’s syntax feature. It is based on and offers a cleaner, more legible approach to construct asynchronous programmes.\n\nWhen a function is marked with the “ ” prefix, it means that it will always return a . The “ ” keyword is used to halt the execution of the programme inside an async function until the Promise is fulfilled.\n\nHow to use Async/Await?\n\nlet’s look at an example to understand working of . Consider the case where a function returns a Promise that resolves after some time:\n\nWe can use this function to create a delay in our code. For instance, We can delay the execution of the function by one second by using the code below:\n\nIn this code, we have marked the “delayedFunction” as asynchronous using the “ ” keyword. We have also used the “ ” keyword to pause the execution of the code until the returned by “wait” function is resolved. Once the Promise is resolved, the console will log the message “Delayed function executed”.\n\nError handling is simplified when async/await is used, which is one of its advantages. We can use the “try/catch” to handle the error in a more synchronous way. For instance, that we have a function that returns a Promise which expires after some time:\n\nWe can use this function to simulate an error in our code. For example, we can handle the error in the following way:\n\nIn this code, we have used the “ ” statement to handle the error thrown by the Promise returned by “waitAndReject”. If the is rejected, the error message “Error” will be logged to the console.\n\nLet’s take a look at how to use async/await with the Fetch API to retrieve data from a third-party API:\n\nIn this code, we have used with the Fetch API to make an HTTP request to the Chuck Norris Jokes API and retrieve a random joke for a given category. We have also used to handle any errors that may occur during the request.\n\nThe Chuck Norris Jokes API is a public API that provides random jokes about Chuck Norris in different categories such as “dev”, “science”, “movie”, etc. This example demonstrates how to use async/await to retrieve data from a third-party API and use it in your application.\n\nUsing has several benefits over traditional asynchronous programming methods. First, it simplifies the syntax and makes the code more readable by avoiding callback nesting and chaining. Second, it allows for better error handling by using try/catch blocks to handle exceptions. Finally, it improves the performance of web applications by allowing tasks to execute concurrently and reducing the wait time for the user.\n\nBest Practices for Using Async/Await\n\nWhile async/await provides a simpler and more concise way to write asynchronous code, there are still some best practices to keep in mind. Here are a few tips to help you write efficient and maintainable async/await code:\n• Always use blocks to handle exceptions and errors.\n• Use method to execute multiple asynchronous tasks and return the result of the first task that resolves or rejects.\n• Avoid using inside loops, as it can block the execution of other tasks.\n• Use third-party libraries such as or to handle complex asynchronous tasks."
    },
    {
        "link": "https://blog.risingstack.com/mastering-async-await-in-nodejs",
        "document": "In this article, you will learn how you can simplify your callback or Promise based Node.jsNode.js is an asynchronous event-driven JavaScript runtime and is the most effective when building scalable network applications. Node.js is free of locks, so there's no chance to dead-lock any process. application with asyncAsynchrony, in software programming, refers to events that occur outside of the primary program flow and methods for dealing with them. External events such as signals or activities prompted by a program that occur at the same time as program execution without causing the program to block and wait for results are examples of this category. Asynchronous input/output is an... functions (async awaitIn an async function, you can await any Promise or catch its rejection cause. In ECMAScript 2017, the async and await keywords were introduced. These features make writing asynchronous code easier and more readable in the long run. They aid in the transition from asynchronicity to synchronism by making it appear more like classic synchronous code, so they're well worth learning.).\n\nWhether you’ve looked at async/await and promises in JavaScript before, but haven’t quite mastered them yet, or just need a refresher, this article aims to help you.\n\nWhat are async functions in Node.js?\n\nAsync functions are available natively in Node and are denoted by the keyword in their declaration. They always return a promise, even if you don’t explicitly write them to do so. Also, the keyword is only available inside async functions at the moment – it cannot be used in the global scope.\n\nIn an async function, you can await any or catch its rejection cause.\n\nSo if you had some logic implemented with promises:\n\nYou can make it look like synchronous code using :\n\nCurrently in Node you get a warning about unhandled promise rejections, so you don’t necessarily need to bother with creating a listener. However, it is recommended to crash your app in this case as when you don’t handle an error, your app is in an unknown state. This can be done either by using the CLI flag, or by implementing something like this:\n\nAutomatic process exit will be added in a future Node release – preparing your code ahead of time for this is not a lot of effort, but will mean that you don’t have to worry about it when you next wish to update versions.\n\nThere are quite a couple of use cases when the ability to handle asynchronous operations as if they were synchronous comes very handy, as solving them with Promises or callbacks requires the use of complex patterns.\n\nSince node@10.0.0, there is support for async iterators and the related for-await-of loop. These come in handy when the actual values we iterate over, and the end state of the iteration, are not known by the time the iterator method returns – mostly when working with streams. Aside from streams, there are not a lot of constructs that have the async iterator implemented natively, so we’ll cover them in another post.\n\nThis would get the job done, but we can rewrite it with and make it a lot more simple.\n\nA lot more pleasing to the eye isn’t it?\n\nNot as hideous as the previous example, but if you have a case where 3 asynchronous functions depend on each other the following way, then you have to choose from several ugly solutions.\n\nWith this solution, we get from the surrounding closure of the 3rd and as the value the previous Promise resolves to. We cannot flatten out the Christmas tree as we would lose the closure and would be unavailable for .\n\nIn the Christmas tree, we used a higher scope to make available as well. This case works similarly, but now we created the variable outside the scope of the -s, so we can assign the value of the first resolved Promise to it.\n\nThis one definitely works, flattens the chain and is semantically correct. However, it also opens up ways for new bugs in case the variable name is used elsewhere in the function. We also need to use two names — and — for the same value.\n\nThere is no other reason for to be passed on in an array together with the Promise then to be able to flatten the tree. They might be of completely different types, so there is a high probability of them not belonging to an array at all.\n\nYou can, of course, write a helper function to hide away the context juggling, but it is quite difficult to read, and may not be straightforward to understand for those who are not well versed in functional magic.\n\nBy using our problems are magically gone:\n\nThis is similar to the previous one. In case you want to execute several asynchronous tasks at once and then use their values at different places, you can do it easily with :\n\nAs we’ve seen in the previous example, we would either need to move these values into a higher scope or create a non-semantic array to pass these values on.\n\nYou can use , and with async functions, although they behave pretty unintuitively. Try guessing what the following scripts will print to the console:\n\nIf you log the returned values of the iteratee with you will see the array we expect: . The only problem is that each value is wrapped in a Promise by the .\n\nSo if you want to get your values, you’ll need to unwrap them by passing the returned array to a :\n\nOriginally, you would first wait for all your promises to resolve and then map over the values:\n\nThis seems a bit more simple, doesn’t it?\n\nThe version can still be useful if you have some long running synchronous logic in your iteratee and another long-running async task.\n\nThis way you can start calculating as soon as you have the first value – you don’t have to wait for all the Promises to be resolved to run your computations. Even though the results will still be wrapped in Promises, those are resolved a lot faster then if you did it the sequential way.\n\nWhat about ? Something is clearly wrong…\n\nWell, you guessed it: even though the returned values are , they will be wrapped in promises, which are truthy, so you’ll get back all the values from the original array. Unfortunately, all you can do to fix this is to resolve all the values and then filter them.\n\nReducing is pretty straightforward. Bear in mind though that you need to wrap the initial value into , as the returned accumulator will be wrapped as well and has to be -ed.\n\n.. As it is pretty clearly intended to be used for imperative code styles.\n\nTo make your chains more “pure” looking, you can use Ramda’s and functions.\n\nAsync functions return a by default, so you can rewrite any callback based function to use Promises, then their resolution. You can use the function in Node.js to turn callback-based functions to return a Promise-based ones.\n\nSimple chains can be upgraded in a pretty straightforward way, so you can move to using right away.\n• If you liked the good old concepts of conditionals and loops,\n• if you believe that a block is the way errors are meant to be handled,\n\nyou will have a great time rewriting your services using .\n\nAs we have seen, it can make several patterns a lot easier to code and read, so it is definitely more suitable in several cases than chains. However, if you are caught up in the functional programming craze of the past years, you might wanna pass on this language feature.\n\nAre you already using in production, or you plan on never touching it? Let’s discuss it in the comments below."
    },
    {
        "link": "https://arunangshudas.medium.com/asynchronous-patterns-and-best-practices-in-node-js-87ba2a7c0477",
        "document": "Asynchronous programming is the cornerstone of Node.js, enabling it to handle high concurrency with minimal resources. However, with great power comes great responsibility. Misusing or misunderstanding asynchronous patterns can lead to issues like callback hell, memory leaks, or inefficient code.\n\nNode.js operates on a single-threaded event loop, making it inherently non-blocking. This means that instead of waiting for a task (e.g., reading a file, querying a database) to complete, Node.js can handle other operations. Here’s how it achieves this:\n• Callbacks: The original way of handling async operations.\n• Promises: Introduced in ES6 to make asynchronous code more readable.\n• Async/Await: A syntactic sugar over promises introduced in ES8, enabling a synchronous look and feel.\n\nCallbacks were the first way to handle async operations in JavaScript. They involve passing a function as an argument to another function, which gets executed after the operation completes.\n\nPitfall: Overuse of callbacks can lead to callback hell — a nested and difficult-to-read structure.\n\nBest Practice: Use callbacks judiciously or refactor to promises or async/await for cleaner code.\n\nPromises represent a value that may be available now, or in the future, or never. They chain and for cleaner asynchronous flows.\n• Provides better error handling with .\n\nAsync/Await is built on promises but offers a more synchronous style of coding, improving readability.\n\nBest Practices for Asynchronous Programming in Node.js\n\nIf you find yourself with nested callbacks, it’s time to refactor. Transition to promises or async/await to simplify your code.\n\nAlways handle errors in your asynchronous operations. Whether using callbacks, promises, or async/await, ensure error paths are covered.\n\nNode.js has native support for promises in many modules like ( ). Always prefer these over manually promisifying older APIs.\n\nWhen handling multiple independent asynchronous tasks, use to execute them concurrently.\n\nFor large data processing, streams are more memory-efficient than reading the entire file into memory.\n\nDebugging asynchronous code can be tricky. Use tools like:\n\nAvoid blocking the event loop with synchronous code. Use asynchronous methods for expensive operations.\n\nIn conclusion, mastering asynchronous programming in Node.js is key to building fast and scalable applications. By embracing best practices like proper error handling, avoiding callback hell, and using modern features like promises and async/await, you can write cleaner, more maintainable code. Optimizing concurrency and understanding how the event loop works also play a big role in keeping your apps responsive and efficient. With the right techniques and mindset, you’ll be well on your way to creating high-performance Node.js applications.\n\nYou may also like:\n\n1) How do you optimize a website’s performance?\n\n2) Change Your Programming Habits Before 2025: My Journey with 10 CHALLENGES\n\n4) What is Database Indexing, and Why is It Important?"
    },
    {
        "link": "https://peeyushjss.medium.com/mastering-async-await-in-node-js-simplifying-asynchronous-programming-13daf9abb9bc",
        "document": "A fundamental component of Node.js development is asynchronous programming, which enables applications to manage input/output tasks effectively and without stopping. The async/await syntax in ES8 (ECMAScript 2017) was introduced by Node.js to significantly simplify asynchronous programming, but callbacks and promises have long been the standard tools for managing asynchronous code. In this blog post, we’ll explore the syntax in Node.js, its benefits, and best practices for leveraging it effectively in your applications.\n\nis a syntactic sugar built on top of promises, offering an asynchronous code development method that is more user-friendly. It makes it possible to construct asynchronous code that appears synchronous, which facilitates understanding and maintenance.\n\nAn async function returns a promise implicitly, allowing you to use the keyword within the function.\n\nThe keyword can only be used inside async functions. It pauses the execution of the function until the promise is resolved or rejected.\n\nA. Readability: Async/await syntax makes asynchronous code look more like synchronous code, improving readability and reducing cognitive load.\n\nB. Error Handling: Error handling is simplified with try/catch blocks, making it easier to handle errors in asynchronous code.\n\nC. Debugging: Debugging an asynchronous code becomes easier as the code executes in a more linear fashion, allowing for easier tracing of execution flow.\n\nA. Use Async/Await with Promises: Async/await works well with promises, so leverage existing promise-based APIs and libraries in your code.\n\nB. Error Handling: Always use try/catch blocks to handle errors in async functions to prevent unhandled promise rejections.\n\nC. Avoid Blocking Operations: Avoid using with blocking operations, as it defeats the purpose of asynchronous programming.\n\nNode.js has a strong feature called async/await, which makes asynchronous programming easier to understand and enhances code readability. Developers can build more understandable, maintainable, and debug-friendly asynchronous code by utilizing await keywords and async functions. Async/await is a vital tool in your Node.js toolset, whether you’re handling intricate processes, connecting with databases, or retrieving data from APIs. Accept async/await to simplify your asynchronous code and create Node.js apps that are more reliable and scalable.\n\nHappy Learning! Feel free to connect with me over LinkedIn!"
    }
]