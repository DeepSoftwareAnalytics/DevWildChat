[
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/fileio/listing-the-files-in-a-directory",
        "document": "The following example calls FindFirstFile, FindNextFile, and FindClose to list files in a specified directory."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-findfirstfilea",
        "document": "Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used).\n\nTo specify additional attributes to use in a search, use the FindFirstFileEx function.\n\nTo perform this operation as a transacted operation, use the FindFirstFileTransacted function.\n\nThe directory or path, and the file name. The file name can include wildcard characters, for example, an asterisk (*) or a question mark (?).\n\nThis parameter should not be NULL, an invalid string (for example, an empty string or a string that is missing the terminating null character), or end in a trailing backslash (\\).\n\nIf the string ends with a wildcard, period (.), or directory name, the user must have access permissions to the root and all subdirectories on the path.\n\nBy default, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, prepend \"\\\\?\\\" to the path. For more information, see Naming Files, Paths, and Namespaces.\n\nA pointer to the WIN32_FIND_DATA structure that receives information about a found file or directory.\n\nIf the function succeeds, the return value is a search handle used in a subsequent call to FindNextFile or FindClose, and the lpFindFileData parameter contains information about the first file or directory found.\n\nIf the function fails or fails to locate files from the search string in the lpFileName parameter, the return value is INVALID_HANDLE_VALUE and the contents of lpFindFileData are indeterminate. To get extended error information, call the GetLastError function.\n\nIf the function fails because no matching files can be found, the GetLastError function returns ERROR_FILE_NOT_FOUND.\n\nThe FindFirstFile function opens a search handle and returns information about the first file that the file system finds with a name that matches the specified pattern. This may or may not be the first file or directory that appears in a directory-listing application (such as the dir command) when given the same file name string pattern. This is because FindFirstFile does no sorting of the search results. For additional information, see FindNextFile.\n\nThe following list identifies some other search characteristics:\n• The search is performed strictly on the name of the file, not on any attributes such as a date or a file type (for other options, see FindFirstFileEx).\n• The search includes the long and short file names.\n• An attempt to open a search with a trailing backslash always fails.\n• Passing an invalid string, NULL, or empty string for the lpFileName parameter is not a valid use of this function. Results in this case are undefined.\n\nAfter the search handle is established, you can use it to search for other files that match the same pattern by using the FindNextFile function.\n\nWhen the search handle is no longer needed, close it by using the FindClose function, not CloseHandle.\n\nAs stated previously, you cannot use a trailing backslash (\\) in the lpFileName input string for FindFirstFile, therefore it may not be obvious how to search root directories. If you want to see files or get the attributes of a root directory, the following options would apply:\n• To examine files in a root directory, you can use \"C:\\*\" and step through the directory by using FindNextFile.\n• To get the attributes of a root directory, use the GetFileAttributes function.\n\nNote Prepending the string \"\\\\?\\\" does not allow access to the root directory.\n\nOn network shares, you can use an lpFileName in the form of the following: \"\\\\Server\\Share\\*\". However, you cannot use an lpFileName that points to the share itself; for example, \"\\\\Server\\Share\" is not valid.\n\nTo examine a directory that is not a root directory, use the path to that directory, without a trailing backslash. For example, an argument of \"C:\\Windows\" returns information about the directory \"C:\\Windows\", not about a directory or file in \"C:\\Windows\". To examine the files and directories in \"C:\\Windows\", use an lpFileName of \"C:\\Windows\\*\".\n\nBe aware that some other thread or process could create or delete a file with this name between the time you query for the result and the time you act on the information. If this is a potential concern for your application, one possible solution is to use the CreateFile function with CREATE_NEW (which fails if the file exists) or OPEN_EXISTING (which fails if the file does not exist).\n\nIf you are writing a 32-bit application to list all the files in a directory and the application may be run on a 64-bit computer, you should call the Wow64DisableWow64FsRedirection function before calling FindFirstFile and call Wow64RevertWow64FsRedirection after the last call to FindNextFile. For more information, see File System Redirector.\n\nIf the path points to a symbolic link, the WIN32_FIND_DATA buffer contains information about the symbolic link, not the target.\n\nIn Windows 8 and Windows Server 2012, this function is supported by the following technologies.\n\nThe following C++ example shows you a minimal use of FindFirstFile.\n\nFor another example, see Listing the Files in a Directory."
    },
    {
        "link": "https://stackoverflow.com/questions/56566845/how-to-use-findnextfile-call-in-windows-to-list-directory-contents",
        "document": "In your first code snippet, you are clearly compiling your project with defined (as evident by you being able to pass a to without error). When is defined, maps to . But wants a instead. So the simpliest solution to that error is to just change to to satisfy the call to . But then you will have a new error because you would be passing a to , which wants a instead. So you will need to call instead to fix that error:\n\nIn your second code snippet, does not have an overloaded for data, but it does have an overload for . The field is a array, which decays into a pointer to the 1st character, and all pointers are implicitly convertible to . So that is why you are seeing memory addresses being printed. You need to use instead:\n\nMost Win32 APIs that deal with string data have (ANSI) and (Wide, Unicode) flavors, and provide generic -based macros to map to one or the other based on the conditional. In this case, maps to either or , maps to either or , map to either or , etc.\n\nSo the general rule is, the suffix you explicitly state (or omit) in an API function call should also be repeated in any related variable declarations as needed. If you call an API function explicitly, use appropriate variable types explicitly. If you call a API function explicitly, use appropriate variable types explicitly. If you omit / in an API function call, omit it in variable declarations (or replace with for , if needed)."
    },
    {
        "link": "https://stackoverflow.com/questions/2314542/listing-directory-contents-using-c-and-windows",
        "document": "I'm looking to list and store the contents of a directory in a struct using C on Windows.\n\nI'm not necessarily looking for anyone to write out the code I'm looking for, rather point me in the right direction when it comes to which library I should be looking at.\n\nI've been Googling for a few hours now and all I'm finding is C#, C++ solutions so any help would be greatly appreciated."
    },
    {
        "link": "https://cboard.cprogramming.com/c-programming/146543-tons-file-directory-manipulation.html",
        "document": "Right 98% of the time, and don't care about the other 3%.If I seem grumpy or unhelpful in reply to you, or tell you you need to demonstrate more effort before you can expect help, it is likely you deserve it. Suck it up, Buttercup, and read this this , and this before posting again."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-win32_find_dataa",
        "document": "Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.\n\nFor possible values and their descriptions, see File Attribute Constants.\n\nThe FILE_ATTRIBUTE_SPARSE_FILE attribute on the file is set if any of the streams of the file have ever been sparse.\n\nA FILETIME structure that specifies when a file or directory was created.\n\nIf the underlying file system does not support creation time, this member is zero.\n\nFor a file, the structure specifies when the file was last read from, written to, or for executable files, run.\n\nFor a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.\n\nOn the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.\n\nFor a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used. The date and time are not updated when file attributes or security descriptors are changed.\n\nFor a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.\n\nThe high-order DWORD value of the file size, in bytes.\n\nThis value is zero unless the file size is greater than MAXDWORD.\n\nThe size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.\n\nThe low-order DWORD value of the file size, in bytes.\n\nIf the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag.\n\nOtherwise, this value is undefined and should not be used.\n\nFor more information see Reparse Point Tags.\n\nThe name of the file.\n\nAn alternative name for the file.\n\nThis name is in the classic 8.3 file name format.\n\nIf a file has a long file name, the complete name appears in the cFileName member, and the 8.3 format truncated version of the name appears in the cAlternateFileName member. Otherwise, cAlternateFileName is empty. If the FindFirstFileEx function was called with a value of FindExInfoBasic in the fInfoLevelId parameter, the cAlternateFileName member will always contain a NULL string value. This remains true for all subsequent calls to the FindNextFile function. As an alternative method of retrieving the 8.3 format version of a file name, you can use the GetShortPathName function. For more information about file names, see File Names, Paths, and Namespaces.\n\nNot all file systems can record creation and last access times, and not all file systems record them in the same manner. For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds, and access time has a resolution of 1 day. The NTFS file system delays updates to the last access time for a file by up to 1 hour after the last access. For more information, see File Times."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-win32_find_dataw",
        "document": "Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile function.\n\nFor possible values and their descriptions, see File Attribute Constants.\n\nThe FILE_ATTRIBUTE_SPARSE_FILE attribute on the file is set if any of the streams of the file have ever been sparse.\n\nA FILETIME structure that specifies when a file or directory was created.\n\nIf the underlying file system does not support creation time, this member is zero.\n\nFor a file, the structure specifies when the file was last read from, written to, or for executable files, run.\n\nFor a directory, the structure specifies when the directory is created. If the underlying file system does not support last access time, this member is zero.\n\nOn the FAT file system, the specified date for both files and directories is correct, but the time of day is always set to midnight.\n\nFor a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used. The date and time are not updated when file attributes or security descriptors are changed.\n\nFor a directory, the structure specifies when the directory is created. If the underlying file system does not support last write time, this member is zero.\n\nThe high-order DWORD value of the file size, in bytes.\n\nThis value is zero unless the file size is greater than MAXDWORD.\n\nThe size of the file is equal to (nFileSizeHigh * (MAXDWORD+1)) + nFileSizeLow.\n\nThe low-order DWORD value of the file size, in bytes.\n\nIf the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag.\n\nOtherwise, this value is undefined and should not be used.\n\nFor more information see Reparse Point Tags.\n\nThe name of the file.\n\nAn alternative name for the file.\n\nThis name is in the classic 8.3 file name format.\n\nIf a file has a long file name, the complete name appears in the cFileName member, and the 8.3 format truncated version of the name appears in the cAlternateFileName member. Otherwise, cAlternateFileName is empty. If the FindFirstFileEx function was called with a value of FindExInfoBasic in the fInfoLevelId parameter, the cAlternateFileName member will always contain a NULL string value. This remains true for all subsequent calls to the FindNextFile function. As an alternative method of retrieving the 8.3 format version of a file name, you can use the GetShortPathName function. For more information about file names, see File Names, Paths, and Namespaces.\n\nNot all file systems can record creation and last access times, and not all file systems record them in the same manner. For example, on the FAT file system, create time has a resolution of 10 milliseconds, write time has a resolution of 2 seconds, and access time has a resolution of 1 day. The NTFS file system delays updates to the last access time for a file by up to 1 hour after the last access. For more information, see File Times."
    },
    {
        "link": "http://jasinskionline.com/windowsapi/ref/w/win32_find_data.html",
        "document": "WIN32_FIND_DATA-type variables hold information found about a file from a file search operation. This information includes the file's attributes; its creation, last-access, and last-modified times; the size of the file; its long filename; and its short filename. The file size is a 64-bit value split into two halves of 32 bits each: a high-order and a low-order half. The actual file size can be found by concatenating the binary or hexadecimal equivalents of the two halves. It can also be found by using the formula = * 2^32 + .\n\nGo back to the alphabetical Structure listing.\n\n Go back to the Reference section index.\n\nThis page is copyright © 2000 Paul Kuliniewicz. Copyright Information.\n\n Go back to the Windows API Guide home page.\n\n E-mail: vbapi@vbapi.com Send Encrypted E-Mail\n\n This page is at http://www.vbapi.com/ref/w/win32_find_data.html"
    },
    {
        "link": "https://documentation.help/Far-Manager/win32_find_data.html",
        "document": "The WIN32_FIND_DATA structure describes a file found by the FindFirstFile, FindFirstFileEx or FindNextFile function.\n\nThe file or directory is an archive file or directory. Applications use this attribute to mark files for backup or removal. The file or directory is compressed. For a file, this means that all of the data in the file is compressed. For a directory, this means that compression is the default for newly created files and subdirectories. The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories. The file or directory is hidden. It is not included in an ordinary directory listing. The file or directory has no other attributes set. This attribute is valid only if used alone. The file data is not immediately available. This attribute indicates that the file data has been physically moved to offline storage. The file or directory is read-only. Applications can read the file but cannot write to it or delete it. In the case of a directory, applications cannot delete it. The file has an associated reparse point. The file or directory is part of the operating system or is used exclusively by the operating system. The file is being used for temporary storage. File systems attempt to keep all of the data in memory for quicker access, rather than flushing it back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed. The file or directory is not be indexed by the content indexing service. Specifies the file attributes of the file found. This member can be one or more of the following values.\n\nSpecifies the high-order DWORD value of the file size, in bytes. This value is zero unless the file size is greater than MAXDWORD. The size of the file is equal to .\n\nSpecifies the low-order DWORD value of the file size, in bytes.\n\nIf the member includes the attribute, this member specifies the reparse tag. Otherwise, this value is undefined and should not be used.\n\nA null-terminated string that is the name of the file.\n\nA null-terminated string that is an alternative name for the file. This name is in the classic 8.3 (filename.ext) file name format."
    },
    {
        "link": "https://cdn.callback.com/shellboost/doc/Reference/ShellBoost-Core-Assembly/html/09a01256-9a42-cb94-24f4-36a43bd51261.htm",
        "document": "Contains information about the file that is found by the FindFirstFile, FindFirstFileEx, or FindNextFile functions.\n\nThe WIN32_FIND_DATA type exposes the following members.\n\nAn alternative name for the file. This name is in the classic 8.3 file name format. If the dwFileAttributes member includes the FILE_ATTRIBUTE_REPARSE_POINT attribute, this member specifies the reparse point tag. Otherwise, this value is undefined and should not be used. The high-order DWORD value of the file size, in bytes. The low-order DWORD value of the file size, in bytes. Specifies when a file or directory was created. Specifies when a file or directory was created. For a file, the structure specifies when the file was last read from, written to, or for executable files, run. For a directory, the structure specifies when the directory is created.If the underlying file system does not support last access time, this member is zero. For a file, the structure specifies when the file was last read from, written to, or for executable files, run. For a directory, the structure specifies when the directory is created.If the underlying file system does not support last access time, this member is zero. For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used. The date and time are not updated when file attributes or security descriptors are changed. For a directory, the structure specifies when the directory is created.If the underlying file system does not support last write time, this member is zero. For a file, the structure specifies when the file was last written to, truncated, or overwritten, for example, when WriteFile or SetEndOfFile are used. The date and time are not updated when file attributes or security descriptors are changed. For a directory, the structure specifies when the directory is created.If the underlying file system does not support last write time, this member is zero. Top"
    }
]