[
    {
        "link": "https://dataquest.io/blog/excel-and-pandas",
        "document": "Using Excel with Python and Pandas\n\nWhy learn to work with Excel with Python? Excel is one of the most popular and widely-used data tools; it's hard to find an organization that doesn't work with it in some way. From analysts, to sales VPs, to CEOs, various professionals use Excel for both quick stats and serious data crunching.\n\nWith Excel being so pervasive, data professionals must be familiar with it. Working with data in Python or R offers serious advantages over Excel's UI, so finding a way to work with Excel using code is critical. Thankfully, there's a great tool already out there for using Excel with Python called .\n\nPandas has excellent methods for reading all kinds of data from Excel files. You can also export your results from pandas back to Excel, if that's preferred by your intended audience. Pandas is great for other routine data analysis tasks, such as:\n• taking cleaned and processed data to any number of data tools\n\nPandas is better at automating data processing tasks than Excel, including processing Excel files.\n\nIn this tutorial, we are going to show you how to work with Excel files in pandas. We will cover the following concepts.\n• setting up your computer with the necessary software\n• reading in data from Excel files into pandas\n• visualizing data in pandas using the matplotlib visualization library\n\nNote that this tutorial does not provide a deep dive into pandas. To explore pandas more, check out our course.\n\nWe will use Python 3 and Jupyter Notebook to demonstrate the code in this tutorial.In addition to Python and Jupyter Notebook, you will need the following Python modules:\n\nThere are multiple ways to get set up with all the modules. We cover three of the most common scenarios below.\n• If you have Python installed via Anaconda package manager, you can install the required modules using the command . For example, to install pandas, you would execute the command - .\n• If you already have a regular, non-Anaconda Python installed on the computer, you can install the required modules using . Open your command line program and execute command to install a module. You should replace with the actual name of the module you are trying to install. For example, to install pandas, you would execute command - .\n• If you don't have Python already installed, you should get it through the Anaconda package manager. Anaconda provides installers for Windows, Mac, and Linux Computers. If you choose the full installer, you will get all the modules you need, along with Python and pandas within a single package. This is the easiest and fastest way to get started.\n\nIn this tutorial, we will use a multi-sheet Excel file we created from Kaggle's IMDB Scores data. You can download the file here.\n\nOur Excel file has three sheets: '1900s,' '2000s,' and '2010s.' Each sheet has data for movies from those years.\n\nWe will use this data set to find the ratings distribution for the movies, visualize movies with highest ratings and net earnings and calculate statistical information about the movies. We will be analyzing and exploring this data using Python and pandas, thus demonstrating pandas capabilities for working with Excel data in Python.\n\nWe need to first import the data from the Excel file into pandas. To do that, we start by importing the pandas module.\n\nWe then use the pandas' read_excel method to read in data from the Excel file. The easiest way to call this method is to pass the file name. If no sheet name is specified then it will read the first sheet in the index (as shown below).\n\nHere, the method read the data from the Excel file into a pandas DataFrame object. Pandas defaults to storing data in DataFrames. We then stored this DataFrame into a variable called .\n\nPandas has a built-in method that we can use to easily display the first few rows of our DataFrame. If no argument is passed, it will display first five rows. If a number is passed, it will display the equal number of rows from the top.\n\nExcel files quite often have multiple sheets and the ability to read a specific sheet or all of them is very important. To make this easy, the pandas method takes an argument called that tells pandas which sheet to read in the data from. For this, you can either use the sheet name or the sheet number. Sheet numbers start with zero. If the argument is not given, it defaults to zero and pandas will import the first sheet.\n\nBy default, pandas will automatically assign a numeric index or row label starting with zero. You may want to leave the default index as such if your data doesn't have a column with unique values that can serve as a better index. In case there is a column that you feel would serve as a better index, you can override the default behavior by setting property to a column. It takes a numeric value for setting a single column as index or a list of numeric values for creating a multi-index.\n\nIn the below code, we are choosing the first column, 'Title', as index (index=0) by passing zero to the argument.\n\nAs you noticed above, our Excel data file has three sheets. We already read the first sheet in a DataFrame above. Now, using the same syntax, we will read in rest of the two sheets too.\n\nSince all the three sheets have similar data but for different recordsmovies, we will create a single DataFrame from all the three DataFrames we created above. We will use the pandas method for this and pass in the names of the three DataFrames we just created and assign the results to a new DataFrame object, . By keeping the DataFrame name same as before, we are over-writing the previously created DataFrame.\n\nWe can check if this concatenation by checking the number of rows in the combined DataFrame by calling the method on it that will give us the number of rows and columns.\n\nUsing the ExcelFile class to read multiple sheets\n\nWe can also use the ExcelFile class to work with multiple sheets from the same Excel file. We first wrap the Excel file using and then pass it to method.\n\nIf you are reading an Excel file with a lot of sheets and are creating a lot of DataFrames, is more convenient and efficient in comparison to . With ExcelFile, you only need to pass the Excel file once, and then you can use it to get the DataFrames. When using , you pass the Excel file every time and hence the file is loaded again for every sheet. This can be a huge performance drag if the Excel file has many sheets with a large number of rows.\n\nNow that we have read in the movies data set from our Excel file, we can start exploring it using pandas. A pandas DataFrame stores the data in a tabular format, just like the way Excel displays the data in a sheet. Pandas has a lot of built-in methods to explore the DataFrame we created from the Excel file we just read in.\n\nWe already introduced the method in the previous section that displays few rows from the top from the DataFrame. Let's look at few more methods that come in handy while exploring the data set.\n\nWe can use the method to find out the number of rows and columns for the DataFrame.\n\nThis tells us our Excel file has 5042 records and 25 columns or observations. This can be useful in reporting the number of records and columns and comparing that with the source data set.\n\nWe can use the method to view the bottom rows. If no parameter is passed, only the bottom five rows are returned.\n\nIn Excel, you're able to sort a sheet based on the values in one or more columns. In pandas, you can do the same thing with the method. For example, let's sort our movies DataFrame based on the Gross Earnings column.\n\nSince we have the data sorted by values in a column, we can do few interesting things with it. For example, we can display the top 10 movies by Gross Earnings.\n\nWe can also create a plot for the top 10 movies by Gross Earnings. Pandas makes it easy to visualize your data with plots and charts through matplotlib, a popular data visualization library. With a couple lines of code, you can start plotting. Moreover, matplotlib plots work well inside Jupyter Notebooks since you can displace the plots right under the code.\n\nFirst, we import the matplotlib module and set matplotlib to display the plots right in the Jupyter Notebook.\n\nWe will draw a bar plot where each bar will represent one of the top 10 movies. We can do this by calling the plot method and setting the argument to . This tells to draw a horizontal bar plot.\n\nLet's create a histogram of IMDB Scores to check the distribution of IMDB Scores across all movies. Histograms are a good way to visualize the distribution of a data set. We use the method on the IMDB Scores series from our movies DataFrame and pass it the argument.\n\nThis data visualization suggests that most of the IMDB Scores fall between six and eight.\n\nGetting statistical information about the data\n\nPandas has some very handy methods to look at the statistical data about our data set. For example, we can use the method to get a statistical summary of the data set.\n\nThe method displays below information for each of the columns.\n• the count or number of values\n\nPlease note that this information will be calculated only for the numeric values.\n\nWe can also use the corresponding method to access this information one at a time. For example, to get the mean of a particular column, you can use the method on that column.\n\nJust like mean, there are methods available for each of the statistical information we want to access. You can read about these methods in our free pandas cheat sheet.\n\nReading files with no header and skipping records\n\nEarlier in this tutorial, we saw some ways to read a particular kind of Excel file that had headers and no rows that needed skipping. Sometimes, the Excel sheet doesn't have any header row. For such instances, you can tell pandas not to consider the first row as header or columns names. And If the Excel sheet's first few rows contain data that should not be read in, you can ask the method to skip a certain number of rows, starting from the top.\n\nFor example, look at the top few rows of this Excel file.\n\nThis file obviously has no header and first four rows are not actual records and hence should not be read in. We can tell read_excel there is no header by setting argument to and we can skip first four rows by setting argument to four.\n\nWe skipped four rows from the sheet and used none of the rows as the header. Also, notice that one can combine different options in a single read statement. To skip rows at the bottom of the sheet, you can use option , which works just like , the only difference being the rows are counted from the bottom upwards.\n\nThe column names in the previous DataFrame are numeric and were allotted as default by the pandas. We can rename the column names to descriptive ones by calling the method on the DataFrame and passing the column names as a list.\n\nNow that we have seen how to read a subset of rows from the Excel file, we can learn how to read a subset of columns.\n\nAlthough read_excel defaults to reading and importing all columns, you can choose to import only certain columns. By passing parse_cols=6, we are telling the method to read only the first columns till index six or first seven columns (the first column being indexed zero).\n\nAlternatively, you can pass in a list of numbers, which will let you import columns at particular indexes.\n\nOne of the much-used features of Excel is to apply formulas to create new columns from existing column values. In our Excel file, we have Gross Earnings and Budget columns. We can get Net earnings by subtracting Budget from Gross earnings. We could then apply this formula in the Excel file to all the rows. We can do this in pandas also as shown below.\n\nAbove, we used pandas to create a new column called Net Earnings, and populated it with the difference of Gross Earnings and Budget. It's worth noting the difference here in how formulas are treated in Excel versus pandas. In Excel, a formula lives in the cell and updates when the data changes - with Python, the calculations happen and the values are stored - if Gross Earnings for one movie was manually changed, Net Earnings won't be updated.\n\nLet's use the method to sort the data by the new column we created and visualize the top 10 movies by Net Earnings.\n\nAdvanced Excel users also often use pivot tables. A pivot table summarizes the data of another table by grouping the data on an index and applying operations such as sorting, summing, or averaging. You can use this feature in pandas too.\n\nWe need to first identify the column or columns that will serve as the index, and the column(s) on which the summarizing formula will be applied. Let's start small, by choosing Year as the index column and Gross Earnings as the summarization column and creating a separate DataFrame from this data.\n\nWe now call on this subset of data. The method takes a parameter . As mentioned, we want to use Year as the index.\n\nThis gave us a pivot table with grouping on Year and summarization on the sum of Gross Earnings. Notice, we didn't need to specify Gross Earnings column explicitly as pandas automatically identified it the values on which summarization should be applied.\n\nWe can use this pivot table to create some data visualizations. We can call the method on the DataFrame to create a line plot and call the method to display the plot in the notebook.\n\nWe saw how to pivot with a single column as the index. Things will get more interesting if we can use multiple columns. Let's create another DataFrame subset but this time we will choose the columns, Country, Language and Gross Earnings.\n\nWe will use columns Country and Language as the index for the pivot table. We will use Gross Earnings as summarization table, however, we do not need to specify this explicitly as we saw earlier.\n\nLet's visualize this pivot table with a bar plot. Since there are still few hundred records in this pivot table, we will plot just a few of them.\n\nIf you're going to be working with colleagues who use Excel, saving Excel files out of pandas is important. You can export or write a pandas DataFrame to an Excel file using pandas method. Pandas uses the Python module internally for writing to Excel files. The method is called on the DataFrame we want to export.We also need to pass a filename to which this DataFrame will be written.\n\nBy default, the index is also saved to the output file. However, sometimes the index doesn't provide any useful information. For example, the DataFrame has a numeric auto-increment index, that was not part of the original Excel data.\n\nYou can choose to skip the index by passing along index-False.\n\nWe need to be able to make our output files look nice before we can send it out to our co-workers. We can use pandas class along with the Python module to apply the formatting.\n\nWe can do use these advanced output options by creating a object and use this object to write to the EXcel file.\n\nWe can apply customizations by calling on the workbook we are writing to. Here we are setting header format as bold.\n\nFinally, we save the output file by calling the method on the writer object.\n\nAs an example, we saved the data with column headers set as bold. And the saved file looks like the image below.\n\nLike this, one can use to apply various formatting to the output Excel file.\n\nPandas is not a replacement for Excel. Both tools have their place in the data analysis workflow and can be very great companion tools. As we demonstrated, pandas can do a lot of complex data analysis and manipulations, which depending on your need and expertise, can go beyond what you can achieve if you are just using Excel. One of the major benefits of using Python and pandas over Excel is that it helps you automate Excel file processing by writing scripts and integrating with your automated data workflow. Pandas also has excellent methods for reading all kinds of data from Excel files. You can export your results from pandas back to Excel too if that's preferred by your intended audience.\n\nOn the other hand, Excel is a such a widely used data tool, it's not a wise to ignore it. Acquiring expertise in both pandas and Excel and making them work together gives you skills that can help you stand out in your organization.\n\nIf you’d like to learn more about this topic, check out Dataquest's interactive Pandas and NumPy Fundamentals course, and our Data Analyst in Python, and Data Scientist in Python paths that will help you become job-ready in around 6 months."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/python-in-excel-dataframes-a10495b2-8372-4f0f-9179-32771fe0dc04",
        "document": "Python in Excel is available to Enterprise and Business users running the Current Channel on Windows, starting with Version 2408 (Build 17928.20114), and Monthly Enterprise Channel on Windows, starting with Version 2408 (Build 17928.20216). It's also available in Excel on the web for Enterprise and Business users. Python in Excel is available in preview for Family and Personal users in Excel on the web or running the Current Channel on Windows starting with Version 2405 (Build 17628.20164). It's available in preview for Education users running the Current Channel (Preview) through the Microsoft 365 Insider Program. It's not currently available for the Semi-Annual Enterprise Channel. Python in Excel is available in preview on Excel for Mac through the Microsoft 365 Insider Program. Choose the Beta Channel Insider level and install the latest build of Excel. It's available starting with Version 16.95 (Build 25021921). For more availability information, see Python in Excel availability. If you encounter any concerns with Python in Excel, please report them by selecting Help > Feedback in Excel. New to Python in Excel? Begin by reading Introduction to Python in Excel and Get started with Python in Excel.\n\nA DataFrame is a two-dimensional data structure in computer programming languages, similar to an Excel table. In Python, a DataFrame is an object in the pandas library. The pandas library is a core library used by Python in Excel, and DataFrame objects are a key structure for analyzing data with Python in Excel. Note: Python in Excel uses a DataFrame as the default object for two-dimensional ranges. Python in Excel can output a DataFrame in two ways: as a Python object or converted to Excel values. When a DataFrame is returned as a Python object, the cell displays the text \"DataFrame\", preceded by a card icon. The following screenshot shows a DataFrame as a Python object in an Excel cell. To view the information within a DataFrame, select the card icon in the cell or use Ctrl+Shift+F5. The following screenshot shows a DataFrame object with the card view open. This example DataFrame repeats the data in cells A1:B3 on the worksheet. You can also import external data into Excel and then process that data with Python in Excel. To import external data, use Power Query. To learn more about this, see Use Power Query to import data for Python in Excel.\n\nThe data within a DataFrame can be returned as Excel values instead of as a Python object. Output a DataFrame as Excel values to incorporate other Excel-based analytics like charts, Excel formulas, and conditional formatting. Use the Python output menu in the formula bar to control how Python calculations are returned. The following screenshot shows the Python output menu in the formula bar. The following screenshot shows the preceding DataFrame data, but this time the data is returned as Excel values. Because this DataFrame repeats the data in cells A1:B3 on the worksheet, the Python result in cells C1:D3 matches cells A1:B3. Note: If a cell in the output range, which in the preceding scenario is range C1:D3, already contains a value, then the Python cell returns the #SPILL! error instead of the Python output. To learn more, see Troubleshoot Python in Excel errors and How to correct a #SPILL! error. Important: When the output type of a DataFrame is set to Excel values, the DataFrame only outputs the index column if one of the following conditions is met.\n• If values of the index column are not numeric (like the result of describe() or group_by()).\n• If the index column name has been set. You can also use the right-click or Ctrl+click menu on any Python cell to change output types. Open the right-click menu and select Output As to change the output."
    },
    {
        "link": "https://stackoverflow.com/questions/58326392/how-to-create-excel-table-with-pandas-to-excel",
        "document": "Here is one way to do it using XlsxWriter:\n\nUpdate: I've added a similar example to the XlsxWriter docs: Example: Pandas Excel output with a worksheet table"
    },
    {
        "link": "https://stackoverflow.com/questions/51132108/creating-an-excel-table-in-python",
        "document": "I have exported data to excel using pandas dataframes and my next plan is to use the data I've exported with PowerApps. However, in order to do this the data needs to be formatted as an excel table and I was wondering if there's a way to automate this?\n\nI've had a good look around and am struggling to find anything - please bear in mind I am in no way a python pro and am very new to pandas! Here's a condensed version of what I've got so far:\n\nIdeally I'd like to do this in python rather than try and merge what I've done with VBA (which would seem like the more obvious choice I'm guessing) as I've no experience whatsoever in VBA nor would know how to link the code to signal the other.. However I'm happy to hear all suggestions! Thank you very much in advance\n\nEDIT: What i'm wondering is if there's a way to turn this:"
    },
    {
        "link": "https://xlsxwriter.readthedocs.io/example_pandas_table.html",
        "document": "# An example of adding a dataframe to an worksheet table in an xlsx file # Tables in Excel are used to group rows and columns of data into a single # structure that can be referenced in a formula or formatted collectively. # Order the columns if necessary. # Create a Pandas Excel writer using XlsxWriter as the engine. # Write the dataframe data to XlsxWriter. Turn off the default header and # index and skip one row to allow us to insert a user defined header. # Get the xlsxwriter workbook and worksheet objects. # Get the dimensions of the dataframe. # Create a list of column headers, to use in add_table(). # Add the Excel table structure. Pandas will add the data. # Close the Pandas Excel writer and output the Excel file."
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.ExcelWriter.html",
        "document": "Default is to use:\n• None xlsxwriter for xlsx files if xlsxwriter is installed otherwise openpyxl\n\nThe writer should be used as a context manager. Otherwise, call to save and close any opened file handles.\n\nPath to xls or xlsx or ods file. Engine to use for writing. If None, defaults to . NOTE: can only be passed as a keyword argument. File mode to use (write or append). Append does not work with fsspec URLs. Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to as header options. For other URLs (e.g. starting with “s3://”, and “gcs://”) the key-value pairs are forwarded to . Please see and for more details, and for more examples on storage options refer here. How to behave when trying to write to a sheet that already exists (append mode only).\n• None new: Create a new sheet, with a name determined by the engine.\n• None replace: Delete the contents of the sheet before writing to it.\n• None overlay: Write contents to the existing sheet without first removing, but possibly over top of, the existing contents. Keyword arguments to be passed into the engine. These will be passed to the following functions of the respective engines:\n\nFor compatibility with CSV writers, ExcelWriter serializes lists and dicts to strings before writing.\n\nTo write to separate sheets in a single file:\n\nYou can set the date format or datetime format:\n\nYou can also append to an existing Excel file:\n\nHere, the parameter can be set to replace a sheet if it already exists:\n\nYou can also write multiple DataFrames to a single sheet. Note that the parameter needs to be set to :\n\nYou can store Excel file in RAM:\n\nYou can pack Excel file into zip archive:\n\nYou can specify additional arguments to the underlying engine:\n\nIn append mode, are passed through to openpyxl’s :"
    },
    {
        "link": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_excel.html",
        "document": "To write a single object to an Excel .xlsx file it is only necessary to specify a target file name. To write to multiple sheets it is necessary to create an object with a target file name, and specify a sheet in the file to write to.\n\nMultiple sheets may be written to by specifying unique . With all data written to the file it is necessary to save the changes. Note that creating an object with a file name that already exists will result in the contents of the existing file being erased.\n\nName of sheet which will contain DataFrame. Format string for floating point numbers. For example will format 0.1234 to 0.12. Write out the column names. If a list of string is given it is assumed to be aliases for the column names. Column label for index column(s) if desired. If not specified, and and are True, then the index names are used. A sequence should be given if the DataFrame uses MultiIndex. Write engine to use, ‘openpyxl’ or ‘xlsxwriter’. You can also set this via the options or . Representation for infinity (there is no native representation for infinity in Excel). Specifies the one-based bottommost row and rightmost column that is to be frozen. Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to as header options. For other URLs (e.g. starting with “s3://”, and “gcs://”) the key-value pairs are forwarded to . Please see and for more details, and for more examples on storage options refer here.\n\nFor compatibility with , to_excel serializes lists and dicts to strings before writing.\n\nOnce a workbook has been saved it is not possible to write further data without rewriting the whole workbook.\n\nTo specify the sheet name:\n\nIf you wish to write to more than one sheet in the workbook, it is necessary to specify an ExcelWriter object:\n\nExcelWriter can also be used to append to an existing Excel file:\n\nTo set the library that is used to write the Excel file, you can pass the keyword (the default engine is automatically chosen depending on the file extension):"
    },
    {
        "link": "https://pandas.pydata.org/docs/dev/reference/api/pandas.ExcelWriter.html",
        "document": "Default is to use:\n• None xlsxwriter for xlsx files if xlsxwriter is installed otherwise openpyxl\n\nThe writer should be used as a context manager. Otherwise, call to save and close any opened file handles.\n\nPath to xls or xlsx or ods file. Engine to use for writing. If None, defaults to . NOTE: can only be passed as a keyword argument. File mode to use (write or append). Append does not work with fsspec URLs. Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to as header options. For other URLs (e.g. starting with “s3://”, and “gcs://”) the key-value pairs are forwarded to . Please see and for more details, and for more examples on storage options refer here. How to behave when trying to write to a sheet that already exists (append mode only).\n• None new: Create a new sheet, with a name determined by the engine.\n• None replace: Delete the contents of the sheet before writing to it.\n• None overlay: Write contents to the existing sheet without first removing, but possibly over top of, the existing contents. Keyword arguments to be passed into the engine. These will be passed to the following functions of the respective engines:\n\nFor compatibility with CSV writers, ExcelWriter serializes lists and dicts to strings before writing.\n\nTo write to separate sheets in a single file:\n\nYou can set the date format or datetime format:\n\nYou can also append to an existing Excel file:\n\nHere, the parameter can be set to replace a sheet if it already exists:\n\nYou can also write multiple DataFrames to a single sheet. Note that the parameter needs to be set to :\n\nYou can store Excel file in RAM:\n\nYou can pack Excel file into zip archive:\n\nYou can specify additional arguments to the underlying engine:\n\nIn append mode, are passed through to openpyxl’s :"
    },
    {
        "link": "https://xlsxwriter.readthedocs.io/working_with_pandas.html",
        "document": "Python Pandas is a Python data analysis library. It can read, filter and re-arrange small and large data sets and output them in a range of formats including Excel.\n\nPandas writes Excel xlsx files using either openpyxl or XlsxWriter.\n\nTo use XlsxWriter with Pandas you specify it as the Excel writer engine: # Create a Pandas Excel writer using XlsxWriter as the engine. # Convert the dataframe to an XlsxWriter Excel object. # Close the Pandas Excel writer and output the Excel file. The output from this would look like the following: See the full example at Example: Pandas Excel example.\n\nIn order to apply XlsxWriter features such as Charts, Conditional Formatting and Column Formatting to the Pandas output we need to access the underlying workbook and worksheet objects. After that we can treat them as normal XlsxWriter objects. Continuing on from the above example we do that as follows: # Create a Pandas Excel writer using XlsxWriter as the engine. # Convert the dataframe to an XlsxWriter Excel object. # Get the xlsxwriter objects from the dataframe writer object. This is equivalent to the following code when using XlsxWriter on its own: The Workbook and Worksheet objects can then be used to access other XlsxWriter features, see below.\n\nOnce we have the Workbook and Worksheet objects, as shown in the previous section, we we can use them to apply other features such as adding a chart: # Get the xlsxwriter objects from the dataframe writer object. # Get the dimensions of the dataframe. # Configure the series of the chart from the dataframe data. # Insert the chart into the worksheet. The output would look like this: See the full example at Example: Pandas Excel output with a chart.\n\nXlsxWriter and Pandas provide very little support for formatting the output data from a dataframe apart from default formatting such as the header and index cells and any cells that contain dates or datetimes. In addition it isn’t possible to format any cells that already have a default format applied. If you require very controlled formatting of the dataframe output then you would probably be better off using Xlsxwriter directly with raw data taken from Pandas. However, some formatting options are available. For example it is possible to set the default date and datetime formats via the Pandas interface: See the full example at Example: Pandas Excel output with datetimes. It is possible to format any other, non date/datetime column data using : # Set the format but not the column width. See the full example at Example: Pandas Excel output with column formatting.\n\nPandas writes the dataframe header with a default cell format. Since it is a cell format it cannot be overridden using . If you wish to use your own format for the headings then the best approach is to turn off the automatic header from Pandas and write your own. For example: # Turn off the default header and skip one row to allow us to insert a # Get the xlsxwriter workbook and worksheet objects. # Write the column headers with the defined format. See the full example at Example: Pandas Excel output with user defined header format.\n\nAs explained in Working with Worksheet Tables, tables in Excel are a way of grouping a range of cells into a single entity, like this: The way to do this with a Pandas dataframe is to first write the data without the index or header, and by starting 1 row forward to allow space for the table header: We then create a list of headers to use in : Finally we add the Excel table structure, based on the dataframe and with the column headers we generated from the dataframe columns: See the full example at Example: Pandas Excel output with a worksheet table.\n\nAs explained in Working with Autofilters, autofilters in Excel are a way of filtering a 2d range of data to only display rows that match a user defined criteria. The way to do this with a Pandas dataframe is to first write the data without the index (unless you want to include it in the filtered data): We then get the dataframe and add the autofilter: We can also add an optional filter criteria. The placeholder “Region” in the filter is ignored and can be any string that adds clarity to the expression: However, it isn’t enough to just apply the criteria. The rows that don’t match must also be hidden. We use Pandas to figure our which rows to hide: This gives us a filtered worksheet like this: See the full example at Example: Pandas Excel output with an autofilter.\n\nIt is possible to write more than one dataframe to a worksheet or to several worksheets. For example to write multiple dataframes to multiple worksheets: # Write each dataframe to a different worksheet. See the full example at Example: Pandas Excel with multiple dataframes. It is also possible to position multiple dataframes within the same worksheet: # Position the dataframes in the worksheet. # Write the dataframe without the header and index. See the full example at Example: Pandas Excel dataframe positioning."
    },
    {
        "link": "https://pandas.pydata.org/pandas-docs/version/2.2.1/reference/api/pandas.ExcelWriter.html",
        "document": "Default is to use:\n• None xlsxwriter for xlsx files if xlsxwriter is installed otherwise openpyxl\n\nThe writer should be used as a context manager. Otherwise, call to save and close any opened file handles.\n\nPath to xls or xlsx or ods file. Engine to use for writing. If None, defaults to . NOTE: can only be passed as a keyword argument. File mode to use (write or append). Append does not work with fsspec URLs. Extra options that make sense for a particular storage connection, e.g. host, port, username, password, etc. For HTTP(S) URLs the key-value pairs are forwarded to as header options. For other URLs (e.g. starting with “s3://”, and “gcs://”) the key-value pairs are forwarded to . Please see and for more details, and for more examples on storage options refer here. How to behave when trying to write to a sheet that already exists (append mode only).\n• None new: Create a new sheet, with a name determined by the engine.\n• None replace: Delete the contents of the sheet before writing to it.\n• None overlay: Write contents to the existing sheet without first removing, but possibly over top of, the existing contents. Keyword arguments to be passed into the engine. These will be passed to the following functions of the respective engines:\n\nFor compatibility with CSV writers, ExcelWriter serializes lists and dicts to strings before writing.\n\nTo write to separate sheets in a single file:\n\nYou can set the date format or datetime format:\n\nYou can also append to an existing Excel file:\n\nHere, the parameter can be set to replace a sheet if it already exists:\n\nYou can also write multiple DataFrames to a single sheet. Note that the parameter needs to be set to :\n\nYou can store Excel file in RAM:\n\nYou can pack Excel file into zip archive:\n\nYou can specify additional arguments to the underlying engine:\n\nIn append mode, are passed through to openpyxl’s :"
    }
]