[
    {
        "link": "https://docs.python.org/3/library/turtle.html",
        "document": "Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an , give it the command , and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves. Give it the command , and it rotates in-place 25 degrees clockwise. Turtle can draw intricate shapes using programs that repeat simple moves. In Python, turtle graphics provides a representation of a physical “turtle” (a little robot with a pen) that draws on a sheet of paper on the floor. It’s an effective and well-proven way for learners to encounter programming concepts and interaction with software, as it provides instant, visible feedback. It also provides convenient access to graphical output in general. Turtle drawing was originally created as an educational tool, to be used by teachers in the classroom. For the programmer who needs to produce some graphical output it can be a way to do that without the overhead of introducing more complex or external libraries into their work.\n\nNew users should start here. In this tutorial we’ll explore some of the basics of turtle drawing. In a Python shell, import all the objects of the module: If you run into a error, you’ll have to install the on your system. You should see (most likely, in a new window on your display) a line drawn by the turtle, heading East. Change the direction of the turtle, so that it turns 120 degrees left (anti-clockwise): Notice how the turtle, represented by an arrow, points in different directions as you steer it. Experiment with those commands, and also with and . Try changing the color - for example, - and width of the line - for example, - and then drawing again. You can also move the turtle around without drawing, by lifting up the pen: before moving. To start drawing again, use . Send your turtle back to its starting-point (useful if it has disappeared off-screen): The home position is at the center of the turtle’s screen. If you ever need to know them, get the turtle’s x-y coordinates with: And after a while, it will probably help to clear the window so we can start anew: Using loops, it’s possible to build up geometric patterns: - which of course, are limited only by the imagination! Let’s draw the star shape at the top of this page. We want red lines, filled in with yellow: Just as and determine whether lines will be drawn, filling can be turned on and off: is a good way to know when the turtle is back at its home position.\n\nThis section covers some typical turtle use-cases and approaches. Get started as quickly as possible¶ One of the joys of turtle graphics is the immediate, visual feedback that’s available from simple commands - it’s an excellent way to introduce children to programming ideas, with a minimum of overhead (not just children, of course). The turtle module makes this possible by exposing all its basic functionality as functions, available with . The turtle graphics tutorial covers this approach. It’s worth noting that many of the turtle commands also have even more terse equivalents, such as for . These are especially useful when working with learners for whom typing is not a skill. You’ll need to have the installed on your system for turtle graphics to work. Be warned that this is not always straightforward, so check this in advance if you’re planning to use turtle graphics with a learner. Using is convenient - but be warned that it imports a rather large collection of objects, and if you’re doing anything but turtle graphics you run the risk of a name conflict (this becomes even more an issue if you’re using turtle graphics in a script where other modules might be imported). The solution is to use - becomes , becomes and so on. (If typing “turtle” over and over again becomes tedious, use for example instead.) It’s recommended to use the module namespace as described immediately above, for example: Another step is also required though - as soon as the script ends, Python will also close the turtle’s window. Add: to the end of the script. The script will now wait to be dismissed and will not exit until it is terminated, for example by closing the turtle graphics window. Other than for very basic introductory purposes, or for trying things out as quickly as possible, it’s more usual and much more powerful to use the object-oriented approach to turtle graphics. For example, this allows multiple turtles on screen at once. In this approach, the various turtle commands are methods of objects (mostly of objects). You can use the object-oriented approach in the shell, but it would be more typical in a Python script. The example above then becomes: Note the last line. is an instance of the that a Turtle instance exists on; it’s created automatically along with the turtle. The turtle’s screen can be customised, for example:\n\nMethods of RawTurtle/Turtle and corresponding functions¶ Most of the examples in this section refer to a Turtle instance called . Move the turtle forward by the specified distance, in the direction the turtle is headed. Move the turtle backward by distance, opposite to the direction the turtle is headed. Do not change the turtle’s heading. Turn turtle right by angle units. (Units are by default degrees, but can be set via the and functions.) Angle orientation depends on the turtle mode, see . Turn turtle left by angle units. (Units are by default degrees, but can be set via the and functions.) Angle orientation depends on the turtle mode, see . If y is , x must be a pair of coordinates or a (e.g. as returned by ). Move turtle to an absolute position. If the pen is down, draw line. Do not change the turtle’s orientation. Move turtle to an absolute position. Unlike goto(x, y), a line will not be drawn. The turtle’s orientation does not change. If currently filling, the polygon(s) teleported from will be filled after leaving, and filling will begin again after teleporting. This can be disabled with fill_gap=True, which makes the imaginary line traveled during teleporting act as a fill barrier like in goto(x, y). Set the turtle’s first coordinate to x, leave second coordinate unchanged. Set the turtle’s second coordinate to y, leave first coordinate unchanged. Set the orientation of the turtle to to_angle. Here are some common directions in degrees: Move turtle to the origin – coordinates (0,0) – and set its heading to its start-orientation (which depends on the mode, see ). Draw a circle with given radius. The center is radius units left of the turtle; extent – an angle – determines which part of the circle is drawn. If extent is not given, draw the entire circle. If extent is not a full circle, one endpoint of the arc is the current pen position. Draw the arc in counterclockwise direction if radius is positive, otherwise in clockwise direction. Finally the direction of the turtle is changed by the amount of extent. As the circle is approximated by an inscribed regular polygon, steps determines the number of steps to use. If not given, it will be calculated automatically. May be used to draw regular polygons.\n• None size – an integer >= 1 (if given) Draw a circular dot with diameter size, using color. If size is not given, the maximum of pensize+4 and 2*pensize is used. Stamp a copy of the turtle shape onto the canvas at the current turtle position. Return a stamp_id for that stamp, which can be used to delete it by calling . stampid – an integer, must be return value of previous call Delete all or first/last n of turtle’s stamps. If n is , delete all stamps, if n > 0 delete first n stamps, else if n < 0 delete last n stamps. Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer. speed – an integer in the range 0..10 or a speedstring (see below) Set the turtle’s speed to an integer value in the range 0..10. If no argument is given, return current speed. If input is a number greater than 10 or smaller than 0.5, speed is set to 0. Speedstrings are mapped to speedvalues as follows: Speeds from 1 to 10 enforce increasingly faster animation of line drawing and turtle turning. Attention: speed = 0 means that no animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly.\n• None x – a number or a pair/vector of numbers or a turtle instance\n• None y – a number if x is a number, else Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle. This depends on the turtle’s start orientation which depends on the mode - “standard”/”world” or “logo”. Return the turtle’s current heading (value depends on the turtle mode, see ).\n• None x – a number or a pair/vector of numbers or a turtle instance\n• None y – a number if x is a number, else Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units. Set angle measurement units, i.e. set number of “degrees” for a full circle. Default value is 360 degrees. # Change angle measurement unit to grad (also known as gon, # grade, or gradian and equals 1/100-th of the right angle.) Set the angle measurement units to radians. Equivalent to . Pull the pen down – drawing when moving. Pull the pen up – no drawing when moving. Set the line thickness to width or return it. If resizemode is set to “auto” and turtleshape is a polygon, that polygon is drawn with the same line thickness. If no argument is given, the current pensize is returned. # from here on lines of width 10 are drawn\n• None pen – a dictionary with some or all of the below listed keys\n• None pendict – one or more keyword-arguments with the below listed keys as keywords Return or set the pen’s attributes in a “pen-dictionary” with the following key/value pairs: This dictionary can be used as argument for a subsequent call to to restore the former pen-state. Moreover one or more of these attributes can be provided as keyword-arguments. This can be used to set several pen attributes in one statement. Return if pen is down, if it’s up. Return the current pencolor as color specification string or as a tuple (see example). May be used as input to another color/pencolor/fillcolor call. Set pencolor to colorstring, which is a Tk color specification string, such as , , or . Set pencolor to the RGB color represented by the tuple of r, g, and b. Each of r, g, and b must be in the range 0..colormode, where colormode is either 1.0 or 255 (see ). Set pencolor to the RGB color represented by r, g, and b. Each of r, g, and b must be in the range 0..colormode. If turtleshape is a polygon, the outline of that polygon is drawn with the newly set pencolor. Return the current fillcolor as color specification string, possibly in tuple format (see example). May be used as input to another color/pencolor/fillcolor call. Set fillcolor to colorstring, which is a Tk color specification string, such as , , or . Set fillcolor to the RGB color represented by the tuple of r, g, and b. Each of r, g, and b must be in the range 0..colormode, where colormode is either 1.0 or 255 (see ). Set fillcolor to the RGB color represented by r, g, and b. Each of r, g, and b must be in the range 0..colormode. If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor. Several input formats are allowed. They use 0 to 3 arguments as follows: Return the current pencolor and the current fillcolor as a pair of color specification strings or tuples as returned by and . Inputs as in , set both, fillcolor and pencolor, to the given value. Equivalent to and and analogously if the other input format is used. If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors. To be called just before drawing a shape to be filled. Fill the shape drawn after the last call to . Whether or not overlap regions for self-intersecting polygons or multiple shapes are filled depends on the operating system graphics, type of overlap, and number of overlaps. For example, the Turtle star above may be either all yellow or have some white regions. Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values. Delete the turtle’s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected.\n• None arg – object to be written to the TurtleScreen\n• None align – one of the strings “left”, “center” or right” Write text - the string representation of arg - at the current turtle position according to align (“left”, “center” or “right”) and with the given font. If move is true, the pen is moved to the bottom-right corner of the text. By default, move is . Make the turtle invisible. It’s a good idea to do this while you’re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably. Return if the Turtle is shown, if it’s hidden. name – a string which is a valid shapename Set turtle shape to shape with given name or, if name is not given, return name of current shape. Shape with name must exist in the TurtleScreen’s shape dictionary. Initially there are the following polygon shapes: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”. To learn about how to deal with shapes see Screen method . rmode – one of the strings “auto”, “user”, “noresize” Set resizemode to one of the values: “auto”, “user”, “noresize”. If rmode is not given, return current resizemode. Different resizemodes have the following effects:\n• None “auto”: adapts the appearance of the turtle corresponding to the value of pensize.\n• None “user”: adapts the appearance of the turtle according to the values of stretchfactor and outlinewidth (outline), which are set by .\n• None “noresize”: no adaption of the turtle’s appearance takes place. is called by when used with arguments. Return or set the pen’s attributes x/y-stretchfactors and/or outline. Set resizemode to “user”. If and only if resizemode is set to “user”, the turtle will be displayed stretched according to its stretchfactors: stretch_wid is stretchfactor perpendicular to its orientation, stretch_len is stretchfactor in direction of its orientation, outline determines the width of the shape’s outline. Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do not change the turtle’s heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared. Rotate the turtleshape by angle from its current tilt-angle, but do not change the turtle’s heading (direction of movement). Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do not change the turtle’s heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement). Set or return the current transformation matrix of the turtle shape. If none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements. Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row t11, t12 and second row t21, t22. The determinant t11 * t22 - t12 * t21 must not be zero, otherwise an error is raised. Modify stretchfactor, shearfactor and tiltangle according to the given matrix. Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape.\n• None fun – a function with two arguments which will be called with the coordinates of the clicked point on the canvas\n• None btn – number of the mouse-button, defaults to 1 (left mouse button)\n• None add – or – if , a new binding will be added, otherwise it will replace a former binding Bind fun to mouse-click events on this turtle. If fun is , existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way: # Now clicking into the turtle will turn it.\n• None fun – a function with two arguments which will be called with the coordinates of the clicked point on the canvas\n• None btn – number of the mouse-button, defaults to 1 (left mouse button)\n• None add – or – if , a new binding will be added, otherwise it will replace a former binding Bind fun to mouse-button-release events on this turtle. If fun is , existing bindings are removed.\n• None fun – a function with two arguments which will be called with the coordinates of the clicked point on the canvas\n• None btn – number of the mouse-button, defaults to 1 (left mouse button)\n• None add – or – if , a new binding will be added, otherwise it will replace a former binding Bind fun to mouse-move events on this turtle. If fun is , existing bindings are removed. Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle. Subsequently, clicking and dragging the Turtle will move it across the screen thereby producing handdrawings (if pen is down). Start recording the vertices of a polygon. Current turtle position is first vertex of polygon. Stop recording the vertices of a polygon. Current turtle position is last vertex of polygon. This will be connected with the first vertex. Create and return a clone of the turtle with same position, heading and turtle properties. Return the Turtle object itself. Only reasonable use: as a function to return the “anonymous turtle”: Return the object the turtle is drawing on. TurtleScreen methods can then be called for that object. Set or disable undobuffer. If size is an integer, an empty undobuffer of given size is installed. size gives the maximum number of turtle actions that can be undone by the method/function. If size is , the undobuffer is disabled. Return number of entries in the undobuffer. To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class explicitly as described below:\n• None Add as many components to this object as desired, using the method.\n• None Now add the Shape to the Screen’s shapelist and use it: The class is used internally by the method in different ways. The application programmer has to deal with the Shape class only when using compound shapes like shown above!\n\nMethods of TurtleScreen/Screen and corresponding functions¶ Most of the examples in this section refer to a TurtleScreen instance called . args – a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers Set or return background color of the TurtleScreen. picname – a string, name of a gif-file or , or Set background image or return name of current backgroundimage. If picname is a filename, set the corresponding image as background. If picname is , delete background image, if present. If picname is , return the filename of the current backgroundimage. This TurtleScreen method is available as a global function only under the name . The global function is a different one derived from the Turtle method . Delete all drawings and all turtles from the TurtleScreen. Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on. This TurtleScreen method is available as a global function only under the name . The global function is another one derived from the Turtle method . Reset all Turtles on the Screen to their initial state.\n• None canvwidth – positive integer, new width of canvas in pixels\n• None canvheight – positive integer, new height of canvas in pixels If no arguments are given, return current (canvaswidth, canvasheight). Else resize the canvas the turtles are drawing on. Do not alter the drawing window. To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before. e.g. to search for an erroneously escaped turtle ;-)\n• None urx – a number, x-coordinate of upper right corner of canvas\n• None ury – a number, y-coordinate of upper right corner of canvas Set up user-defined coordinate system and switch to mode “world” if necessary. This performs a . If mode “world” is already active, all drawings are redrawn according to the new coordinates. ATTENTION: in user-defined coordinate systems angles may appear distorted. Set or return the drawing delay in milliseconds. (This is approximately the time interval between two consecutive canvas updates.) The longer the drawing delay, the slower the animation. Turn turtle animation on/off and set delay for update drawings. If n is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see ). Perform a TurtleScreen update. To be used when tracer is turned off. See also the RawTurtle/Turtle method . Set focus on TurtleScreen (in order to collect key-events). Dummy arguments are provided in order to be able to pass to the onclick method.\n• None fun – a function with no arguments or Bind fun to key-release event of key. If fun is , event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method .)\n• None fun – a function with no arguments or Bind fun to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method .)\n• None fun – a function with two arguments which will be called with the coordinates of the clicked point on the canvas\n• None btn – number of the mouse-button, defaults to 1 (left mouse button)\n• None add – or – if , a new binding will be added, otherwise it will replace a former binding Bind fun to mouse-click events on this screen. If fun is , existing bindings are removed. Example for a TurtleScreen instance named and a Turtle instance named : # Subsequently clicking into the TurtleScreen will # make the turtle move to the clicked point. This TurtleScreen method is available as a global function only under the name . The global function is another one derived from the Turtle method . Starts event loop - calling Tkinter’s mainloop function. Must be the last statement in a turtle graphics program. Must not be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics. Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, prompt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return . Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for input, maxval: maximum value for input. The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled, return . mode – one of the strings “standard”, “logo” or “world” Set turtle mode (“standard”, “logo” or “world”) and perform reset. If mode is not given, current mode is returned. Mode “standard” is compatible with old . Mode “logo” is compatible with most Logo turtle graphics. Mode “world” uses user-defined “world coordinates”. Attention: in this mode angles appear distorted if unit-ratio doesn’t equal 1. cmode – one of the values 1.0 or 255 Return the colormode or set it to 1.0 or 255. Subsequently r, g, b values of color triples have to be in the range 0..*cmode*. Return the Canvas of this TurtleScreen. Useful for insiders who know what to do with a Tkinter Canvas. Return a list of names of all currently available turtle shapes. There are three different ways to call this function:\n• None name is the name of a gif-file and shape is : Install the corresponding image shape. Image shapes do not rotate when turning the turtle, so they do not display the heading of the turtle!\n• None name is an arbitrary string and shape is a tuple of pairs of coordinates: Install the corresponding polygon shape.\n• None name is an arbitrary string and shape is a (compound) object: Install the corresponding compound shape. Add a turtle shape to TurtleScreen’s shapelist. Only thusly registered shapes can be used by issuing the command . Return the list of turtles on the screen. Return the height of the turtle window. Return the width of the turtle window. Methods specific to Screen, not inherited from TurtleScreen¶ Bind method to mouse clicks on the Screen. If the value “using_IDLE” in the configuration dictionary is (default value), also enter mainloop. Remark: If IDLE with the switch (no subprocess) is used, this value should be set to in . In this case IDLE’s own mainloop is active also for the client script. Set the size and position of the main window. Default values of arguments are stored in the configuration dictionary and can be changed via a file.\n• None width – if an integer, a size in pixels, if a float, a fraction of the screen; default is 50% of screen\n• None height – if an integer, the height in pixels, if a float, a fraction of the screen; default is 75% of screen\n• None startx – if positive, starting position in pixels from the left edge of the screen, if negative from the right edge, if , center window horizontally\n• None starty – if positive, starting position in pixels from the top edge of the screen, if negative from the bottom edge, if , center window vertically # sets window to 200x200 pixels, in upper left of screen # sets window to 75% of screen by 50% of screen and centers titlestring – a string that is shown in the titlebar of the turtle graphics window \"Welcome to the turtle zoo!\"\n\nHow to use help¶ The public methods of the Screen and Turtle classes are documented extensively via docstrings. So these can be used as online-help via the Python help facilities:\n• None When using IDLE, tooltips show the signatures and first lines of the docstrings of typed in function-/method calls.\n• None Calling on methods or functions displays the docstrings: Help on method bgcolor in module turtle: Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. Help on method penup in module turtle: Pull the pen up -- no drawing when moving.\n• None The docstrings of the functions which are derived from methods have a modified form: Help on function bgcolor in module turtle: Set or return backgroundcolor of the TurtleScreen. Arguments (if given): a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers. Help on function penup in module turtle: Pull the pen up -- no drawing when moving. These modified docstrings are created automatically together with the function definitions that are derived from the methods at import time. Translation of docstrings into different languages¶ There is a utility to create a dictionary the keys of which are the method names and the values of which are the docstrings of the public methods of the classes Screen and Turtle. Create and write docstring-dictionary to a Python script with the given filename. This function has to be called explicitly (it is not used by the turtle graphics classes). The docstring dictionary will be written to the Python script . It is intended to serve as a template for translation of the docstrings into different languages. If you (or your students) want to use with online help in your native language, you have to translate the docstrings and save the resulting file as e.g. . If you have an appropriate entry in your file this dictionary will be read in at import time and will replace the original English docstrings. At the time of this writing there are docstring dictionaries in German and in Italian. (Requests please to glingl@aon.at.) How to configure Screen and Turtles¶ The built-in default configuration mimics the appearance and behaviour of the old turtle module in order to retain best possible compatibility with it. If you want to use a different configuration which better reflects the features of this module or which better fits to your needs, e.g. for use in a classroom, you can prepare a configuration file which will be read at import time and modify the configuration according to its settings. The built in configuration would correspond to the following :\n• None The first four lines correspond to the arguments of the method.\n• None Line 5 and 6 correspond to the arguments of the method .\n• None shape can be any of the built-in shapes, e.g: arrow, turtle, etc. For more info try .\n• None If you want to use no fill color (i.e. make the turtle transparent), you have to write (but all nonempty strings must not have quotes in the cfg file).\n• None If you want to reflect the turtle its state, you have to use .\n• None If you set e.g. the docstringdict will be loaded at import time (if present on the import path, e.g. in the same directory as ).\n• None The entries exampleturtle and examplescreen define the names of these objects as they occur in the docstrings. The transformation of method-docstrings to function-docstrings will delete these names from the docstrings.\n• None using_IDLE: Set this to if you regularly work with IDLE and its switch (“no subprocess”). This will prevent to enter the mainloop. There can be a file in the directory where is stored and an additional one in the current working directory. The latter will override the settings of the first one. The directory contains a file. You can study it as an example and see its effects when running the demos (preferably not from within the demo-viewer)."
    },
    {
        "link": "https://datacamp.com/tutorial/turtle-graphics",
        "document": "Learn how to create, customize, and share data visualizations using Matplotlib."
    },
    {
        "link": "https://geeksforgeeks.org/turtle-programming-python",
        "document": "“Turtle” is a Python feature like a drawing board, which lets us command a turtle to draw all over it! We can use functions like turtle.forward(…) and turtle.right(…) which can move the turtle around. Commonly used turtle methods are :\n\n\n\nTo make use of the turtle methods and functionalities, we need to import turtle.”turtle” comes packed with the standard Python package and need not be installed externally. The roadmap for executing a turtle program follows 4 steps:\n• Draw around using the turtle methods.\n\nSo as stated above, before we can use turtle, we need to import it. We import it as :\n\nAfter importing the turtle library and making all the turtle functionalities available to us, we need to create a new drawing board(window) and a turtle. Let’s call the window as wn and the turtle as skk. So we code as:\n\nNow that we have created the window and the turtle, we need to move the turtle. To move forward 100 pixels in the direction skk is facing, we code:\n\nWe have moved skk 100 pixels forward, Awesome! Now we complete the program with the done() function and We’re done!\n\nSo, we have created a program that draws a line 100 pixels long. We can draw various shapes and fill different colors using turtle methods. There’s plethora of functions and programs to be coded using the turtle library in python. Let’s learn to draw some of the basic shapes. \n\n\n\nVisit pythonturtle.org to get a taste of Turtle without having python pre-installed. The shell in PythonTurtle is a full Python shell, and you can do with it almost anything you can with a standard Python shell. You can make loops, define functions, create classes, etc.\n\n1. Spiral Square Outside In and Inside Out"
    },
    {
        "link": "https://una.pressbooks.pub/python-textbook/chapter/chapter-12-turtle-graphics",
        "document": "Using turtle graphics is a fun way to hone your problem solving and programming skills, as well as a writing code that can generate graphics. It was part of the original Logo programming language developed in 1967.\n\nImporting the turtle module into your Python program allows you to create simple drawings on the screen. The name turtle, or turtle graphics, is a term in computing that means “using a relative cursor to draw on a Cartesian plane”. The relative cursor is called the turtle. The Logo programming language compared the drawing capabilities to that of a turtle, with a pen attached to its tail, crawling around on the screen. If the tail was down, a line was produced, but if the tail was raised, the movement of the turtle left no visible trace.\n\nThe graphic turtle begins at (0,0) in the x-y plane. By default, it is facing to the right. To begin drawing, you must first import the turtle module and then create a turtle object. The forward command will move the turtle a given number of pixels. Let’s jump right to an example and start exploring the options and functions available.\n\nWhen you run a turtle program, it will pop up a new “Python Turtle Graphics” window for your drawing. After importing the turtle module, you should create a turtle object by calling the Turtle() method. I named my turtle “Tom”, but you can create the turtle object using any variable name.\n\nIn the sample program, the pencolor() method was used to change the turtle to blue. Next, the shape of the turtle was changed from a small arrowhead to an actual turtle. The forward() command will move the turtle straight ahead by a distance of the number of pixels passed as the argument. A pixel, short for picture element, is one of over a million little dots that make up your screen display. A blue line of 300 pixels was drawn left-to-right from the origin.\n\nTom the turtle turned 90 degrees to the left() and then changed its color to red. After the turn, Tom is now facing upwards and draws a vertical line of 200 pixels. The method exitonclick() will cause the window to disappear whenever the user clicks anywhere in the window.\n\nIn our next program, we will show two ways to draw a square. In the first example, Tina the turtle repeats the steps “move forward 200 pixels and turn 90 degrees left” four times. A second square, this one green, is created by using a for loop to repeat the forward() and left() methods.\n\nWhen the previous program is executed, it produces the window shown below. In order to avoid drawing a line that connected the two squares, the penup() method was used to move 100 pixels to the left of the black square. Before drawing the green square, the pendown() method was called to resume drawing. The output is shown next:\n\nThis third turtle graphics program introduces several new turtle methods:\n\nFirst, we show how the hideturtle() will make that shape invisible. Next, we show how the write() method can be used to display a string at the current turtle position. One optional parameter allows you to change the font.\n\nThe begin_fill() and end_fill() methods can be used to change the background color of a shape created using a concave set of points. The fillcolor() method should be called to set the shape’s background color. You first use the goto(x,y) method to position the turtle to the first point of your polygon. After that, a series of goto(x,y) calls are used to create the shape. Once the end_fill() method is called, the interior color of the shape is filled.\n\nFinally, we show how the dot() method can be used to draw a small circle on the window. With the pendown() activated, this could be used to create a line graph. With penup() active, you could use the dot() method to create a scatter plot.\n\n* Note: There are hundreds of different color names that you can use. Also, there are literally millions of colors that you can create by using RGB or hex codes. The following web site provides a great way to check out many of the available Turtle colors:\n\nINTERACTIVE – What does the turtle say?\n\nCheck out the Turtle graphics program below, but do not run it. Try to figure out what the output will look like first. Then, go ahead and run it and verify if you are the turtle master or not.\n\n12.1. What is a pixel and approximately how many of them appear on a screen?\n\n12.2. Explain what each of the following turtle graphic methods do?\n\n12.1. Using Turtle Graphics, write a program that asks the user to type in the following inputs:\n\nYour program should then draw a regular polygon with those properties.\n\n12.2. Write a Python program to generate the graph below:"
    },
    {
        "link": "https://eecs.wsu.edu/~schneidj/PyBook/chap13.pdf",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3/library/time.html",
        "document": "This module provides various time-related functions. For related functionality, see also the and modules.\n\nAlthough this module is always available, not all functions are available on all platforms. Most of the functions defined in this module call platform C library functions with the same name. It may sometimes be helpful to consult the platform documentation, because the semantics of these functions varies among platforms.\n\nAn explanation of some terminology and conventions is in order.\n• None The epoch is the point where the time starts, the return value of . It is January 1, 1970, 00:00:00 (UTC) on all platforms.\n• None The term seconds since the epoch refers to the total number of elapsed seconds since the epoch, typically excluding leap seconds. Leap seconds are excluded from this total on all POSIX-compliant platforms.\n• None The functions in this module may not handle dates and times before the epoch or far in the future. The cut-off point in the future is determined by the C library; for 32-bit systems, it is typically in 2038.\n• None Function can parse 2-digit years when given format code. When 2-digit years are parsed, they are converted according to the POSIX and ISO C standards: values 69–99 are mapped to 1969–1999, and values 0–68 are mapped to 2000–2068.\n• None UTC is Coordinated Universal Time and superseded Greenwich Mean Time or GMT as the basis of international timekeeping. The acronym UTC is not a mistake but conforms to an earlier, language-agnostic naming scheme for time standards such as UT0, UT1, and UT2.\n• None DST is Daylight Saving Time, an adjustment of the timezone by (usually) one hour during part of the year. DST rules are magic (determined by local law) and can change from year to year. The C library has a table containing the local rules (often it is read from a system file for flexibility) and is the only source of True Wisdom in this respect.\n• None The precision of the various real-time functions may be less than suggested by the units in which their value or argument is expressed. E.g. on most Unix systems, the clock “ticks” only 50 or 100 times a second.\n• None On the other hand, the precision of and is better than their Unix equivalents: times are expressed as floating-point numbers, returns the most accurate time available (using Unix where available), and will accept a time with a nonzero fraction (Unix is used to implement this, where available).\n• None The time value as returned by , , and , and accepted by , and , is a sequence of 9 integers. The return values of , , and also offer attribute names for individual fields. See for a description of these objects. Changed in version 3.3: The type was extended to provide the and attributes when platform supports corresponding members. Changed in version 3.6: The attributes and are now available on all platforms.\n• None Use the following functions to convert between time representations:\n\nConvert a tuple or representing a time as returned by or to a string of the following form: . The day field is two characters long and is space padded if the day is a single digit, e.g.: . If t is not provided, the current time as returned by is used. Locale information is not used by . Unlike the C function of the same name, does not add a trailing newline. Return the clk_id of the thread-specific CPU-time clock for the specified thread_id. Use or the attribute of objects to get a suitable value for thread_id. Passing an invalid or expired thread_id may result in undefined behavior, such as segmentation fault. See the man page for pthread_getcpuclockid(3) for further information. Return the resolution (precision) of the specified clock clk_id. Refer to Clock ID Constants for a list of accepted values for clk_id. Return the time of the specified clock clk_id. Refer to Clock ID Constants for a list of accepted values for clk_id. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Set the time of the specified clock clk_id. Currently, is the only accepted value for clk_id. Use to avoid the precision loss caused by the type. Similar to but set time with nanoseconds. Convert a time expressed in seconds since the epoch to a string of a form: representing local time. The day field is two characters long and is space padded if the day is a single digit, e.g.: . If secs is not provided or , the current time as returned by is used. is equivalent to . Locale information is not used by . Get information on the specified clock as a namespace object. Supported clock names and the corresponding functions to read their value are: The result has the following attributes:\n• None adjustable: if the clock can be changed automatically (e.g. by a NTP daemon) or manually by the system administrator, otherwise\n• None implementation: The name of the underlying C function used to get the clock value. Refer to Clock ID Constants for possible values.\n• None monotonic: if the clock cannot go backward, otherwise\n• None resolution: The resolution of the clock in seconds ( ) Convert a time expressed in seconds since the epoch to a in UTC in which the dst flag is always zero. If secs is not provided or , the current time as returned by is used. Fractions of a second are ignored. See above for a description of the object. See for the inverse of this function. Like but converts to local time. If secs is not provided or , the current time as returned by is used. The dst flag is set to when DST applies to the given time. may raise , if the timestamp is outside the range of values supported by the platform C or functions, and on or failure. It’s common for this to be restricted to years between 1970 and 2038. This is the inverse function of . Its argument is the or full 9-tuple (since the dst flag is needed; use as the dst flag if it is unknown) which expresses the time in local time, not UTC. It returns a floating-point number, for compatibility with . If the input value cannot be represented as a valid time, either or will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries). The earliest date for which it can generate a time is platform-dependent. Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. Use to avoid the precision loss caused by the type. Changed in version 3.5: The function is now always available and always system-wide. Changed in version 3.10: On macOS, the function is now system-wide. Similar to , but return time as nanoseconds. Return the value (in fractional seconds) of a performance counter, i.e. a clock with the highest available resolution to measure a short duration. It does include time elapsed during sleep and is system-wide. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. CPython implementation detail: On CPython, use the same clock as and is a monotonic clock, i.e. a clock that cannot go backwards. Use to avoid the precision loss caused by the type. Changed in version 3.10: On Windows, the function is now system-wide. Changed in version 3.13: Use the same clock as . Similar to , but return time as nanoseconds. Return the value (in fractional seconds) of the sum of the system and user CPU time of the current process. It does not include time elapsed during sleep. It is process-wide by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Suspend execution of the calling thread for the given number of seconds. The argument may be a floating-point number to indicate a more precise sleep time. If the sleep is interrupted by a signal and no exception is raised by the signal handler, the sleep is restarted with a recomputed timeout. The suspension time may be longer than requested by an arbitrary amount, because of the scheduling of other activity in the system. On Windows, if secs is zero, the thread relinquishes the remainder of its time slice to any other thread that is ready to run. If there are no other threads ready to run, the function returns immediately, and the thread continues execution. On Windows 8.1 and newer the implementation uses a high-resolution timer which provides resolution of 100 nanoseconds. If secs is zero, is used.\n• None Use if available (resolution: 1 nanosecond);\n• None Or use if available (resolution: 1 nanosecond); To emulate a “no-op”, use instead of . To voluntarily relinquish the CPU, specify a real-time scheduling policy and use instead. Changed in version 3.5: The function now sleeps at least secs even if the sleep is interrupted by a signal, except if the signal handler raises an exception (see PEP 475 for the rationale). Changed in version 3.11: On Unix, the and functions are now used if available. On Windows, a waitable timer is now used. Convert a tuple or representing a time as returned by or to a string as specified by the format argument. If t is not provided, the current time as returned by is used. format must be a string. is raised if any field in t is outside of the allowed range. 0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one. The following directives can be embedded in the format string. They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the result: Day of the month as a decimal number [01,31]. Day of the year as a decimal number [001,366]. Locale’s equivalent of either AM or PM. Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0. Day of the week (Monday is 1; Sunday is 7) as a decimal number [1, 7]. Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0. Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. Time zone name (no characters if no time zone exists). Deprecated. ISO 8601 year (similar to but follows the rules for the ISO 8601 calendar year). The year starts with the week that contains the first Thursday of the calendar year. ISO 8601 week number (as a decimal number [01,53]). The first week of the year is the one that contains the first Thursday of the year. Weeks start on Monday.\n• None The format directive only applies to , not to . However, see also and where the format directive applies to microseconds.\n• None When used with the function, the directive only affects the output hour field if the directive is used to parse the hour.\n• None The range really is to ; value is valid in timestamps representing leap seconds and value is supported for historical reasons.\n• None When used with the function, and are only used in calculations when the day of the week and the year are specified. Here is an example, a format for dates compatible with that specified in the RFC 2822 Internet email standard. Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C. To see the full set of format codes supported on your platform, consult the strftime(3) documentation. On some platforms, an optional field width and precision specification can immediately follow the initial of a directive in the following order; this is also not portable. The field width is normally 2 except for where it is 3. Parse a string representing a time according to a format. The return value is a as returned by or . The format parameter uses the same directives as those used by ; it defaults to which matches the formatting returned by . If string cannot be parsed according to format, or if it has excess data after parsing, is raised. The default values used to fill in any missing data when more accurate values cannot be inferred are . Both string and format must be strings. Support for the directive is based on the values contained in and whether is true. Because of this, it is platform-specific except for recognizing UTC and GMT which are always known (and are considered to be non-daylight savings timezones). Only the directives specified in the documentation are supported. Because is implemented per platform it can sometimes offer more directives than those listed. But is independent of any platform and thus does not necessarily support all directives available that are not documented as supported. The type of the time value sequence returned by , , and . It is an object with a named tuple interface: values can be accessed by index and by attribute name. The following values are present: Note that unlike the C structure, the month value is a range of [1, 12], not [0, 11]. In calls to , may be set to 1 when daylight savings time is in effect, and 0 when it is not. A value of -1 indicates that this is not known, and will usually result in the correct state being filled in. When a tuple with an incorrect length is passed to a function expecting a , or having elements of the wrong type, a is raised. Return the time in seconds since the epoch as a floating-point number. The handling of leap seconds is platform dependent. On Windows and most Unix systems, the leap seconds are not counted towards the time in seconds since the epoch. This is commonly referred to as Unix time. Note that even though the time is always returned as a floating-point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls. The number returned by may be converted into a more common time format (i.e. year, month, day, hour, etc…) in UTC by passing it to function or in local time by passing it to the function. In both cases a object is returned, from which the components of the calendar date may be accessed as attributes. Use to avoid the precision loss caused by the type. Similar to but returns time as an integer number of nanoseconds since the epoch. Return the value (in fractional seconds) of the sum of the system and user CPU time of the current thread. It does not include time elapsed during sleep. It is thread-specific by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls in the same thread is valid. Use to avoid the precision loss caused by the type. Similar to but return time as nanoseconds. Reset the time conversion rules used by the library routines. The environment variable specifies how this is done. It will also set the variables (from the environment variable), (non-DST seconds West of UTC), (DST seconds west of UTC) and (to 0 if this timezone does not have any daylight saving time rules, or to nonzero if there is a time, past, present or future when daylight saving time applies). Although in many cases, changing the environment variable may affect the output of functions like without calling , this behavior should not be relied on. The environment variable should contain no whitespace. The standard format of the environment variable is (whitespace added for clarity): Where the components are: Three or more alphanumerics giving the timezone abbreviations. These will be propagated into time.tzname The offset has the form: . This indicates the value added the local time to arrive at UTC. If preceded by a ‘-’, the timezone is east of the Prime Meridian; otherwise, it is west. If no offset follows dst, summer time is assumed to be one hour ahead of standard time. Indicates when to change to and back from DST. The format of the start and end dates are one of the following: The Julian day n (1 <= n <= 365). Leap days are not counted, so in all years February 28 is day 59 and March 1 is day 60. The zero-based Julian day (0 <= n <= 365). Leap days are counted, and it is possible to refer to February 29. The d’th day (0 <= d <= 6) of week n of month m of the year (1 <= n <= 5, 1 <= m <= 12, where week 5 means “the last d day in month m” which may occur in either the fourth or the fifth week). Week 1 is the first week in which the d’th day occurs. Day zero is a Sunday. has the same format as except that no leading sign (‘-’ or ‘+’) is allowed. The default, if time is not given, is 02:00:00. On many Unix systems (including *BSD, Linux, Solaris, and Darwin), it is more convenient to use the system’s zoneinfo (tzfile(5)) database to specify the timezone rules. To do this, set the environment variable to the path of the required timezone datafile, relative to the root of the systems ‘zoneinfo’ timezone database, usually located at . For example, , , or .\n\nThe offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Only use this if is nonzero. See note below. Nonzero if a DST timezone is defined. See note below. The offset of the local (non-DST) timezone, in seconds west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). See note below. A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. If no DST timezone is defined, the second string should not be used. See note below. For the above Timezone constants ( , , , and ), the value is determined by the timezone rules in effect at module load time or the last time is called and may be incorrect for times in the past. It is recommended to use the and results from to obtain timezone information. More object-oriented interface to dates and times. Internationalization services. The locale setting affects the interpretation of many format specifiers in and . General calendar-related functions. is the inverse of from this module."
    },
    {
        "link": "https://stackoverflow.com/questions/510348/how-do-i-make-a-time-delay",
        "document": "This function actually suspends the processing of the thread in which it is called by the operating system, allowing other threads and processes to execute while it sleeps.\n\nUse it for that purpose, or simply to delay a function from executing. For example:\n\nExample using with multiple threads and processes\n\nAgain, suspends your thread - it uses next to zero processing power.\n\nTo demonstrate, create a script like this (I first attempted this in an interactive Python 3.5 shell, but sub-processes can't find the function for some reason):\n\nExample output from this script:\n\nYou can trigger a function to be called at a later time in a separate thread with the threading object:\n\nThe blank line illustrates that the function printed to my standard output, and I had to hit to ensure I was on a prompt.\n\nThe upside of this method is that while the thread was waiting, I was able to do other things, in this case, hitting one time - before the function executed (see the first empty prompt).\n\nThere isn't a respective object in the multiprocessing library. You can create one, but it probably doesn't exist for a reason. A sub-thread makes a lot more sense for a simple timer than a whole new subprocess."
    },
    {
        "link": "https://geeksforgeeks.org/python-time-module",
        "document": "In this article, we will discuss the time module and various functions provided by this module with the help of good examples.\n\nAs the name suggests Python time module allows to work with time in Python. It allows functionality like getting the current time, pausing the Program from executing, etc. So before starting with this module, we need to import it.\n\nThe time module comes with Python’s standard utility module, so there is no need to install it externally. We can simply import it using the import statement.\n\nThe epoch is the point where the time starts and is platform-dependent. On Windows and most Unix systems, the epoch is January 1, 1970, 00:00:00 (UTC), and leap seconds are not counted towards the time in seconds since the epoch. To check what the epoch is on a given platform we can use time.gmtime(0).\n\nThe code uses the module to print the result of , which represents the time in the GMT (Greenwich Mean Time) timezone at the Unix epoch (January 1, 1970, 00:00:00 UTC).\n\nNote: The time before the epoch can still be represented in seconds but it will be negative. For example, 31 December 1969 will be represented as -86400 seconds.\n\nGetting current time in seconds since epoch\n\ntime.time() methods return the current time in seconds since epoch. It returns a floating-point number.\n\nExample: Current time in seconds since epoch\n\nThe code uses the module to retrieve the current time in seconds since the Unix epoch (January 1, 1970).\n\ntime.ctime() function returns a 24 character time string but takes seconds as argument and computes time till mentioned seconds. If no argument is passed, time is calculated till the present.\n\nExample: Getting time string from seconds\n\nThe code uses the module to convert a specified timestamp (1627908313.717886) into a human-readable date and time format.\n\nExecution can be delayed using time.sleep() method. This method is used to halt the program execution for the time specified in the arguments.\n\nExample: Delaying execution time of programs in Python.\n\nThis code uses the module to introduce a one-second delay using inside a loop that iterates four times.\n\nStruct_time class helps to access local time i.e. non-epochal timestamps. It returns a named tuple whose value can be accessed by both index and attribute name. Its object contains the following attributes –\n\nThis class contains various functions. Let’s discuss each function in detail.\n\nlocaltime() method returns the struct_time object in local time. It takes the number of seconds passed since epoch as an argument. If the seconds parameter is not given then the current time returned by time.time() method is used.\n\nExample: Getting local time from epoch\n\nThe code uses the module to convert a specified timestamp (1627987508.6496193) into a object representing the corresponding date and time.\n\ntime.mktime() is the inverse function of time.localtime() which converts the time expressed in seconds since the epoch to a time.struct_time object in local time.\n\nExample: Converting the struct_time object to seconds since epoch\n\nThis code first uses the module to convert a specified timestamp (1627987508.6496193) into a object in the GMT (Greenwich Mean Time) timezone using . Then, it uses to convert this object back into a timestamp.\n\ntime.gmtime() is used to convert a time expressed in seconds since the epoch to a time.struct_time object in UTC in which tm_isdst attribute is always 0. If the seconds parameter is not given then the current time returned by time.time() method is used.\n\nExample: Use of time.gmtime() method\n\nThe code uses the module to convert a specified timestamp (1627987508.6496193) into a object representing the corresponding date and time in the GMT (Greenwich Mean Time) timezone.\n\ntime.strftime() function converts a tuple or struct_time representing a time as returned by gmtime() or localtime() to a string as specified by the format argument. If t is not provided, the current time as returned by localtime() is used. The format must be a string. ValueError is raised if any field in t is outside of the allowed range.\n\nExample: Converting struct_time object to a string using strftime() method\n\nThe code uses the function from the module to convert a specified timestamp (1627987508.6496193) into a formatted string using . The output represents the date and time in the GMT (Greenwich Mean Time) timezone in the format specified by the format string.\n\ntime.asctime() method is used to convert a tuple or a time.struct_time object representing a time as returned by time.gmtime() or time.localtime() method to a string of the following form:\n\nExample: Converting tuple to time.struct_time object to string\n\nThis code uses the module to convert a specified timestamp (1627987508.6496193) into a human-readable date and time format using . It does so both for the GMT (Greenwich Mean Time) timezone and the local timezone.\n\ntime.strptime() method converts the string representing time to the struct_time object.\n\nThis code uses the module to parse a formatted string representing a date and time and convert it into a object. The function is used for this purpose.\n\nWhat is Module Time in Python?\n\nHow to Install Time Module in Python?"
    },
    {
        "link": "https://realpython.com/python-sleep",
        "document": "Have you ever needed to make your Python program wait for something? Most of the time, you’d want your code to execute as quickly as possible. But there are times when letting your code sleep for a while is actually in your best interest.\n\nFor example, you might use a Python call to simulate a delay in your program. Perhaps you need to wait for a file to upload or download, or for a graphic to load or be drawn to the screen. You might even need to pause between calls to a web API, or between queries to a database. Adding Python calls to your program can help in each of these cases, and many more!\n\nIn this tutorial, you’ll learn how to add Python calls with:\n\nThis article is intended for intermediate developers who are looking to grow their knowledge of Python. If that sounds like you, then let’s get started!\n\nPython has built-in support for putting your program to sleep. The module has a function that you can use to suspend execution of the calling thread for however many seconds you specify. Here’s an example of how to use : If you run this code in your console, then you should experience a delay before you can enter a new statement in the REPL. Note: In Python 3.5, the core developers changed the behavior of slightly. The new Python system call will last at least the number of seconds you’ve specified, even if the sleep is interrupted by a signal. This does not apply if the signal itself raises an exception, however. You can test how long the sleep lasts by using Python’s module: python3 -m timeit -n 3 loops, best of 5: 3 sec per loop Here, you run the module with the parameter, which tells how many times to run the statement that follows. You can see that ran the statement 3 times and that the best run time was 3 seconds, which is what was expected. The default number of times that will run your code is one million. If you were to run the above code with the default , then at 3 seconds per iteration, your terminal would hang for approximately 34 days! The module has several other command line options that you can check out in its documentation. Let’s create something a bit more realistic. A system administrator needs to know when one of their websites goes down. You want to be able to check the website’s status code regularly, but you can’t query the web server constantly or it will affect performance. One way to do this check is to use a Python system call: Here you create , which takes a URL as its argument. The function then attempts to open that URL with . If there’s an or , then the program catches it and prints out the error. (In a live environment, you would log the error and probably send out an email to the webmaster or system administrator.) If no errors occur, then your code prints out that all is well. Regardless of what happens, your program will sleep for 60 seconds. This means that you only access the website once every minute. The URL used in this example is bad, so it will output the following to your console once every minute: Go ahead and update the code to use a known good URL, like . Then you can re-run it to see it work successfully. You can also try to update the code to send an email or log the errors. For more information on how to do this, check out Sending Emails With Python and Logging in Python.\n\nThere are times when you need to retry a function that has failed. One popular use case for this is when you need to retry a file download because the server was busy. You usually won’t want to make a request to the server too often, so adding a Python call between each request is desirable. Another use case that I’ve personally experienced is where I need to check the state of a user interface during an automated test. The user interface might load faster or slower than usual, depending on the computer I’m running the test on. This can change what’s on the screen at the moment my program is verifying something. In this case, I can tell the program to sleep for a moment and then recheck things a second or two later. This can mean the difference between a passing and failing test. You can use a decorator to add a Python system call in either of these cases. If you’re not familiar with decorators, or if you’d like to brush up on them, then check out Primer on Python Decorators. Let’s look at an example: is your decorator. It accepts a value and the number of times it should , which defaults to 3. Inside is another function, , which accepts the decorated function. Finally, the innermost function accepts the arguments and keyword arguments that you pass to the decorated function. This is where the magic happens! You use a loop to retry calling the function. If there’s an exception, then you call , increment the counter, and try running the function again. Now rewrite to use your new decorator: # Re-raise the exception for the decorator # Re-raise the exception for the decorator Here, you decorate with a of 3 seconds. You’ve also removed the original loop, as well as the old call to . The decorator now takes care of this. One other change you’ve made is to add a inside of the exception handling blocks. This is so that the decorator will work properly. You could write the decorator to handle these errors, but since these exceptions only apply to , you might be better off keeping the decorator the way it is. That way, it will work with a wider variety of functions. Note: If you’d like to brush up on exception handling in Python, then check out Python Exceptions: An Introduction. There are a few improvements that you could make to your decorator. If it runs out of retries and still fails, then you could have it re-raise the last error. The decorator will also wait 3 seconds after the last failure, which might be something you don’t want to happen. Feel free to try these out as an exercise!\n\nThere are also times when you might want to add a Python call to a thread. Perhaps you’re running a migration script against a database with millions of records in production. You don’t want to cause any downtime, but you also don’t want to wait longer than necessary to finish the migration, so you decide to use threads. Note: Threads are a method of doing concurrency in Python. You can run multiple threads at once to increase your application’s throughput. If you’re not familiar with threads in Python, then check out An Intro to Threading in Python. To prevent customers from noticing any kind of slowdown, each thread needs to run for a short period and then sleep. There are two ways to do this:\n• Use as before.\n• Use from the module. Let’s start by looking at . The Python Logging Cookbook shows a nice example that uses . Python’s module is thread-safe, so it’s a bit more useful than statements for this exercise. The following code is based on this example: Here, you use Python’s module to create two threads. You also create a logging object that will log the to stdout. Next, you start both threads and initiate a loop to log from the main thread every so often. You use to catch the user pressing + . Try running the code above in your terminal. You should see output similar to the following: As each thread runs and then sleeps, the logging output is printed to the console. Now that you’ve tried an example, you’ll be able to use these concepts in your own code. The module provides an that you can use like . However, has the added benefit of being more responsive. The reason for this is that when the event is set, the program will break out of the loop immediately. With , your code will need to wait for the Python call to finish before the thread can exit. The reason you’d want to use here is because is non-blocking, whereas is blocking. What this means is that when you use , you’ll block the main thread from continuing to run while it waits for the call to end. solves this problem. You can read more about how all this works in Python’s threading documentation. Here’s how you add a Python call with : In this example, you create and pass it to . (Recall that in the previous example, you instead passed a dictionary.) Next, you set up your loops to check whether or not is set. If it’s not, then your code prints a message and waits a bit before checking again. To set the event, you can press + . Once the event is set, will return and the loop will break, ending the program. Note: If you’d like to learn more about dictionaries, then check out Dictionaries in Python. Take a closer look at the code block above. How would you pass in a different sleep time to each worker thread? Can you figure it out? Feel free to tackle this exercise on your own!\n\nAsynchronous capabilities were added to Python in the 3.4 release, and this feature set has been aggressively expanding ever since. Asynchronous programming is a type of parallel programming that allows you to run multiple tasks at once. When a task finishes, it will notify the main thread. is a module that lets you add a Python call asynchronously. If you’re unfamiliar with Python’s implementation of asynchronous programming, then check out Async IO in Python: A Complete Walkthrough and Python Concurrency & Parallel Programming. Here’s an example from Python’s own documentation: In this example, you run and have it sleep for one second between two calls. Here’s a more compelling example from the Coroutines and Tasks portion of the documentation: In this code, you create a worker called that takes in the number of seconds to and the to print out. Then, you use Python’s keyword to wait for the code to run. is required here because has been marked as an function, so you can’t call it like you would a normal function. When you run this code, your program will execute 3 times. The code will wait for 1, 2, and 3 seconds, for a total wait time of 6 seconds. You can also rewrite the code so that the tasks run in parallel: Now you’re using the concept of tasks, which you can make with . When you use tasks in , Python will run the tasks asynchronously. So, when you run the code above, it should finish in 3 seconds total instead of 6.\n\nCommand-line applications aren’t the only place where you might need to add Python calls. When you create a Graphical User Interface (GUI), you’ll occasionally need to add delays. For example, you might create an FTP application to download millions of files, but you need to add a call between batches so you don’t bog down the server. GUI code will run all its processing and drawing in a main thread called the event loop. If you use inside of GUI code, then you’ll block its event loop. From the user’s perspective, the application could appear to freeze. The user won’t be able to interact with your application while it’s sleeping with this method. (On Windows, you might even get an alert about how your application is now unresponsive.) Fortunately, there are other methods you can use besides . In the next few sections, you’ll learn how to add Python calls in both Tkinter and wxPython. is a part of the Python standard library. It may not be available to you if you’re using a pre-installed version of Python on Linux or Mac. If you get an , then you’ll need to look into how to add it to your system. But if you install Python yourself, then should already be available. You’ll start by looking at an example that uses . Run this code to see what happens when you add a Python call the wrong way: Once you’ve run the code, press the button in your GUI. The button will stick down for three seconds as it waits for to finish. If the application had other buttons, then you wouldn’t be able to click them. You can’t close the application while it’s sleeping, either, since it can’t respond to the close event. To get to sleep properly, you’ll need to use : Here you create an application that is 400 pixels wide by 400 pixels tall. It has no widgets on it. All it will do is show a frame. Then, you call where is a reference to the object. takes two arguments:\n• The number of milliseconds to sleep\n• The method to call when the sleep is finished In this case, your application will print a string to stdout after 3 seconds. You can think of as the version of , but it also adds the ability to call a function after the sleep has finished. You could use this functionality to improve user experience. By adding a Python call, you can make the application appear to load faster and then start some longer-running process after it’s up. That way, the user won’t have to wait for the application to open. There are two major differences between wxPython and Tkinter:\n• wxPython has many more widgets.\n• wxPython aims to look and feel native on all platforms. The wxPython framework is not included with Python, so you’ll need to install it yourself. If you’re not familiar with wxPython, then check out How to Build a Python GUI Application With wxPython. In wxPython, you can use to add a Python call: Here, you subclass directly and then call . This function takes the same parameters as Tkinter’s :\n• The number of milliseconds to sleep\n• The method to call when the sleep is finished When you run this code, you should see a small blank window appear without any widgets. After 4 seconds, you’ll see the string printed to stdout. One of the benefits of using is that it’s thread-safe. You can use this method from within a thread to call a function that’s in the main wxPython application."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-add-time-delay-in-python",
        "document": "In this article, we are going to discuss how to add delay in Python.\n• In order to add time delay in our program code, we use the sleep() function from the time module. This is the in-built module in Python we don’t need to install externally.\n• Time delay means we are adding delay during the execution time in our program code. It should be between two statements or between any part of the program code according to you.\n• For adding time delay during execution we use the sleep() function between the two statements between which we want the delay. In the sleep() function passing the parameter as an integer or float value.\n• Notice the delay in the execution time.\n\nWhat is the Syntax of time.sleep\n\nTo understand the topic perfectly. Let’s see the implementation by taking some examples.\n\nExample 1: Printing the numbers by adding a time delay.\n\nExample 2: Dramatic printing using sleep() for every character.\n\nExample 3: Printing the pattern by taking range from the user and adding time delay.\n\nThe threading.Event.wait procedure, the thread waits until the set() method execution is not complete. Time can be used in it; if a specific time is set, execution will halt until that time has passed; after that, it will resume while the set() of an event is still active.\n\nWhat is the Syntax of threading.Event.wait function\n\nActions that need to be scheduled to begin at a specific time are represented by timer objects. These items are scheduled to execute on a different thread that performs the action.\n\nWhat is the Syntax of threading.Timer function\n\nThe time.monotonic() function returns the value of a monotonic clock, which is not subject to system clock changes. The time.monotonic_ns() function returns the value of the monotonic clock in nanoseconds.\n\n1.Set the value of delay in seconds.\n\n2.Get the current time using time.monotonic() and assign it to start_time.\n\n3.Enter a loop that runs indefinitely.\n\n4.Get the current time again and calculate the elapsed time by subtracting start_time from it.\n\n5.If the elapsed time is greater than or equal to the desired delay, break out of the loop.\n\n6.Print a message indicating that the delay is over.\n\nThe time complexity of this code is O(n) where n is the number of times the loop runs, which depends on the duration of the delay. The auxiliary space is O(1) as it does not require any additional memory."
    }
]