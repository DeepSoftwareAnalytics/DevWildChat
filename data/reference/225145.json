[
    {
        "link": "https://git-scm.com/docs/git-log",
        "document": "Continue listing the history of a file beyond renames (works only for a single file). Print out the ref names of any commits that are shown. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. The option is short-hand for . Default to configuration value of if configured, otherwise, . For each candidate reference, do not use it for decoration if it matches any patterns given to or if it doesn’t match any of the patterns given to . The config option allows excluding refs from the decorations, but an explicit pattern will override a match in . If none of these options or config settings are given, then references are used as decoration if they match , , , , or . When specified, this option clears all previous or options and relaxes the default decoration filter to include all references. This option is assumed if the config value is set to . Print out the ref name given on the command line by which each commit was reached. Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See git-shortlog[1]. Without this flag, shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that \"<path>…​\" limits only commits, and doesn’t limit diff for those commits. Note that this affects all diff-based output types, e.g. those produced by , etc. Include a line “log size <number>” in the output for each commit, where <number> is the length of that commit’s message in bytes. Intended to speed up tools that read log messages from output by allowing them to allocate space in advance. Trace the evolution of the line range given by <start>,<end>, or by the function name regex <funcname>, within the <file>. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments, and <start> and <end> (or <funcname>) must exist in the starting revision. You can specify this option more than once. Implies . Patch output can be suppressed using , but other diff formats (namely , , , , , , , ) are not currently implemented. <start> and <end> can take one of these forms:\n• If <start> or <end> is a number, it specifies an absolute line number (lines count from 1).\n• This form will use the first line matching the given POSIX regex. If <start> is a regex, it will search from the end of the previous range, if any, otherwise from the start of file. If <start> is , it will search from the start of file. If <end> is a regex, it will search starting at the line given by <start>.\n• This is only valid for <end> and will specify a number of lines before or after the line given by <start>. If is given in place of <start> and <end>, it is a regular expression that denotes the range from the first funcname line that matches <funcname>, up to the next funcname line. searches from the end of the previous range, if any, otherwise from the start of file. searches from the start of file. The function names are determined in the same way as works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5]). Show only commits in the specified revision range. When no <revision-range> is specified, it defaults to (i.e. the whole history leading to the current commit). specifies all the commits reachable from the current commit (i.e. ), but not from . For a complete list of ways to spell <revision-range>, see the Specifying Ranges section of gitrevisions[7]. Show only commits that are enough to explain how the files that match the specified paths came to be. See History Simplification below for details and other simplification modes. Paths may need to be prefixed with to separate them from options or the revision range, when confusion arises. Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied. Using more options generally further limits the output (e.g. limits to commits newer than , and using it with further limits to commits whose log message has a line that matches ), unless otherwise noted. Note that these are applied before commit ordering and formatting options, such as . Limit the number of commits to output. Skip number commits before starting to show the commit output. Show all commits more recent than a specific date. This visits all commits in the range, rather than stopping at the first commit which is older than a specific date. Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one , commits whose author matches any of the given patterns are chosen (similarly for multiple ). Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one , commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless is in use. Limit the commits output to ones with a log message that matches the specified pattern (regular expression). With more than one , commits whose message matches any of the given patterns are chosen (but see ). When is in effect, the message from the notes is matched as if it were part of the log message. Limit the commits output to ones that match all given , instead of ones that match at least one. Limit the commits output to ones with a log message that do not match the pattern specified with . Match the regular expression limiting patterns without regard to letter case. Consider the limiting patterns to be basic regular expressions; this is the default. Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions. Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression). Consider the limiting patterns to be Perl-compatible regular expressions. Support for these types of regular expressions is an optional compile-time dependency. If Git wasn’t compiled with support for them providing this option will cause it to die. Stop when a given path disappears from the tree. Print only merge commits. This is exactly the same as . Do not print commits with more than one parent. This is exactly the same as . Show only commits which have at least (or at most) that many parent commits. In particular, is the same as , is the same as . gives all root commits and all octopus merges. and reset these limits (to no limit) again. Equivalent forms are (any commit has 0 or more parents) and (negative numbers denote no upper limit). When finding commits to include, follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge. This option also changes default diff format for merge commits to , see for details. When finding commits to exclude (with a ^), follow only the first parent commit upon seeing a merge commit. This can be used to find the set of changes in a topic branch from the point where it diverged from the remote branch, given that arbitrary merges can be valid topic branch changes. Reverses the meaning of the ^ prefix (or lack thereof) for all following revision specifiers, up to the next . When used on the command line before --stdin, the revisions passed through stdin will not be affected by it. Conversely, when passed via standard input, the revisions passed on the command line will not be affected by it. Pretend as if all the refs in , along with , are listed on the command line as <commit>. Pretend as if all the refs in are listed on the command line as <commit>. If <pattern> is given, limit branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied. Pretend as if all the refs in are listed on the command line as <commit>. If <pattern> is given, limit tags to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied. Pretend as if all the refs in are listed on the command line as <commit>. If <pattern> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks ?, *, or [, /* at the end is implied. Pretend as if all the refs matching shell glob <glob-pattern> are listed on the command line as <commit>. Leading refs/, is automatically prepended if missing. If pattern lacks ?, *, or [, /* at the end is implied. Do not include refs matching <glob-pattern> that the next , , , , or would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next , , , , or option (other options or arguments do not clear accumulated patterns). The patterns given should not begin with , , or when applied to , , or , respectively, and they must begin with when applied to or . If a trailing /* is intended, it must be given explicitly. Do not include refs that would be hidden by , or by consulting the appropriate , or configuration along with (see git-config[1]). This option affects the next pseudo-ref option or and is cleared after processing them. Pretend as if all objects mentioned by reflogs are listed on the command line as . Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in . The set of included objects may be modified by , etc. See git-config[1]. By default, all working trees will be examined by the following options when there are more than one (see git-worktree[1]): , and . This option forces them to examine the current working tree only. Upon seeing an invalid object name in the input, pretend as if the bad input was not given. Pretend as if the bad bisection ref was listed and as if it was followed by and the good bisection refs on the command line. In addition to getting arguments from the command line, read them from standard input as well. This accepts commits and pseudo-options like and . When a separator is seen, the following input is treated as paths and used to limit the result. Flags like which are read via standard input are only respected for arguments passed in the same way and will not influence any subsequent command line arguments. Like (see below) but mark equivalent commits with rather than omitting them, and inequivalent ones with . Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference. For example, if you have two branches, and , a usual way to list all commits on only one side of them is with (see the example below in the description of the option). However, it shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output. List only commits on the respective side of a symmetric difference, i.e. only those which would be marked resp. by . For example, omits those commits from which are in or are patch-equivalent to a commit in . In other words, this lists the commits from . More precisely, gives the exact list. A synonym for ; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with , similar to . Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, ^commit, commit1..commit2, and commit1...commit2 notations cannot be used). With format other than and (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. The reflog designator in the output may be shown as (where <Nth> is the reverse-chronological index in the reflog) or as (with the <timestamp> for that entry), depending on a few rules:\n• If the starting point is specified as , show the index format.\n• If the starting point was specified as , show the timestamp format.\n• If neither was used, but was given on the command line, show the timestamp in the format requested by . Under , the commit message is prefixed with this information on the same line. This option cannot be combined with . See also git-reflog[1]. Under , this information will not be shown at all. Show commits touching conflicted paths in the range , where is the first existing pseudoref in , , or . Only works when the index has unmerged entries. This option can be used to show relevant commits when resolving conflicts from a 3-way merge. Sometimes you are only interested in parts of the history, for example the commits modifying a particular <path>. But there are two parts of History Simplification, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history. The following options select the commits to be shown: Commits modifying the given <paths> are selected. Commits that are referred by some branch or tag are selected. Note that extra commits can be shown to give a meaningful history. The following options affect the way the simplification is performed: Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it prunes some side branches if the end result is the same (i.e. merging branches with the same content) Include all commits from the default mode, but also any merge commits that are not TREESAME to the first parent but are TREESAME to a later parent. This mode is helpful for showing the merge commits that \"first introduced\" a change to a branch. Same as the default mode, but does not prune some history. Only the selected commits are shown, plus some to have a meaningful history. All commits in the simplified history are shown. Additional option to to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge. When given a range of commits to display (e.g. commit1..commit2 or commit2 ^commit1), and a commit <commit> in that range, only display commits in that range that are ancestors of <commit>, descendants of <commit>, or <commit> itself. If no commit is specified, use commit1 (the excluded part of the range) as <commit>. Can be passed multiple times; if so, a commit is included if it is any of the commits given or if it is an ancestor or descendant of one of them. Suppose you specified as the <paths>. We shall call commits that modify !TREESAME, and the rest TREESAME. (In a diff filtered for , they look different and equal, respectively.) In the following, we will always refer to the same example history to illustrate the differences between simplification settings. We assume that you are filtering for a file in this commit graph: The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:\n• is the initial commit, in which exists with contents “asdf”, and a file exists with contents “quux”. Initial commits are compared to an empty tree, so is !TREESAME.\n• In , contains just “foo”.\n• contains the same change as . Its merge is trivial and hence TREESAME to all parents.\n• does not change , but its merge changes it to “foobar”, so it is not TREESAME to any parent.\n• sets to “baz”. Its merge combines the strings from and to “foobarbaz”; i.e., it is not TREESAME to any parent.\n• changes to “xyzzy”, and its merge combines the strings to “quux xyzzy”. is TREESAME to , but not to .\n• is an independent root commit that added a new file , and modified it. is TREESAME to . Its merge added to , and is TREESAME to , but not to . walks backwards through history, including or excluding commits based on whether and/or parent rewriting (via or ) are used. The following settings are available. Commits are included if they are not TREESAME to any parent (though this can be changed, see below). If the commit was a merge, and it was TREESAME to one parent, follow only that parent. (Even if there are several TREESAME parents, follow only one of them.) Otherwise, follow all parents. Note how the rule to only follow the TREESAME parent, if one is available, removed from consideration entirely. was considered via , but is TREESAME. Root commits are compared to an empty tree, so is !TREESAME. Parent/child relations are only visible with , but that does not affect the commits selected in default mode, so we have shown the parent lines. This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get was excluded because it is TREESAME to both parents. , and were all walked, but only was !TREESAME, so the others do not appear. Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected. Ordinary commits are only included if they are !TREESAME (though this can be changed, see below). Merges are always included. However, their parent list is rewritten: Along each parent, prune away commits that are not included themselves. This results in Compare to without rewriting above. Note that was pruned away because it is TREESAME, but the parent list of P was rewritten to contain 's parent . The same happened for and , and , and . In addition to the above settings, you can change whether TREESAME affects inclusion: Commits that are walked are included if they are not TREESAME to any parent. All commits that are walked are included. Note that without , this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked. First, build a history graph in the same way that with parent rewriting does (see above). Then simplify each commit to its replacement in the final history according to the following rules:\n• Replace each parent of with its simplification . In the process, drop parents that are ancestors of other parents or that are root commits TREESAME to an empty tree, and remove duplicates, but take care to never drop all parents that we are TREESAME to.\n• If after this parent rewriting, is a root or merge commit (has zero or >1 parents), a boundary commit, or !TREESAME, it remains. Otherwise, it is replaced with its only parent. The effect of this is best shown by way of comparing to with parent rewriting. The example turns into: Note the major differences in , , and over :\n• 's parent list had removed, because it is an ancestor of the other parent . Still, remained because it is !TREESAME.\n• 's parent list similarly had removed. was then removed completely, because it had one parent and is TREESAME.\n• 's parent list had simplified to . was then removed, because it was a TREESAME root. was then removed completely, because it had one parent and is TREESAME. There is another simplification mode available: Limit the displayed commits to those which are an ancestor of <commit>, or which are a descendant of <commit>, or are <commit> itself. As an example use case, consider the following commit history: A regular D..M computes the set of commits that are ancestors of , but excludes the ones that are ancestors of . This is useful to see what happened to the history leading to since , in the sense that “what does have that did not exist in ”. The result in this example would be all the commits, except and (and itself, of course). When we want to find out what commits in are contaminated with the bug introduced by and need fixing, however, we might want to view only the subset of D..M that are actually descendants of , i.e. excluding and . This is exactly what the option does. Applied to the D..M range, it results in: We can also use instead of which means the same thing when applied to the D..M range but is just more explicit. If we instead are interested in a given topic within this range, and all commits affected by that topic, we may only want to view the subset of which contain that topic in their ancestry path. So, using for example would result in: Whereas would result in Before discussing another option, , we need to create a new example history. A common problem users face when looking at simplified history is that a commit they know changed a file somehow does not appear in the file’s simplified history. Let’s demonstrate a new example and show how options such as and works in that case: For this example, suppose created which was modified by , , and in different ways. The single-parent commits , , and do not change . The merge commit was created by resolving the merge conflict to include both changes from and and hence is not TREESAME to either. The merge commit , however, was created by ignoring the contents of at and taking only the contents of at . Hence, is TREESAME to but not . Finally, the natural merge resolution to create is to take the contents of at , so is TREESAME to but not . The merge commits and are TREESAME to their first parents, but not to their second parents, and respectively. When using the default mode, and both have a TREESAME parent, so those edges are walked and the others are ignored. The resulting history graph is: When using , Git walks every edge. This will discover the commits and and the merge , but also will reveal the merge commits and . With parent rewriting, the resulting graph is: Here, the merge commits and contribute extra noise, as they did not actually contribute a change to . They only merged a topic that was based on an older version of . This is a common issue in repositories using a workflow where many contributors work in parallel and merge their topic branches along a single trunk: many unrelated merges appear in the results. When using the option, the commits and disappear from the results. This is because the rewritten second parents of and are reachable from their first parents. Those edges are removed and then the commits look like single-parent commits that are TREESAME to their parent. This also happens to the commit , resulting in a history view as follows: In this view, we see all of the important single-parent changes from , , and . We also see the carefully-resolved merge and the not-so-carefully-resolved merge . This is usually enough information to determine why the commits and \"disappeared\" from history in the default view. However, there are a few issues with this approach. The first issue is performance. Unlike any previous option, the option requires walking the entire commit history before returning a single result. This can make the option difficult to use for very large repositories. The second issue is one of auditing. When many contributors are working on the same repository, it is important which merge commits introduced a change into an important branch. The problematic merge above is not likely to be the merge commit that was used to merge into an important branch. Instead, the merge was used to merge and into the important branch. This commit may have information about why the change came to override the changes from and in its commit message. In addition to the commits shown in the default history, show each merge commit that is not TREESAME to its first parent but is TREESAME to a later parent. When a merge commit is included by , the merge is treated as if it \"pulled\" the change from another branch. When using on this example (and no other options) the resulting graph is: Here, the merge commits and are included because they pulled the commits and into the base branch, respectively. These merges are the reason the commits and do not appear in the default history. When is paired with , the graph includes all of the necessary information: Notice that since is reachable from , the edge from to was simplified away. However, still appears in the history as an important commit because it \"pulled\" the change into the main branch. The option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line. All other commits are marked as TREESAME (subject to be simplified away). By default, the commits are shown in reverse chronological order. Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order. Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order. Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed. For example, in a commit history like this: where the numbers denote the order of commit timestamps, and friends with show the commits in the timestamp order: 8 7 6 5 4 3 2 1. With , they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together. Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with . These options are mostly targeted for packing of Git repositories. Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument is given, the commits are shown in the order they were given on the command line. Otherwise (if or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with . Pretty-print the contents of the commit logs in a given format, where <format> can be one of oneline, short, medium, full, fuller, reference, email, raw, format:<string> and tformat:<string>. When <format> is none of the above, and has %placeholder in it, it acts as if --pretty=tformat:<format> were given. See the \"PRETTY FORMATS\" section for some additional details for each format. When =<format> part is omitted, it defaults to medium. Note: you can specify the default pretty format in the repository configuration (see git-config[1]). Instead of showing the full 40-byte hexadecimal commit object name, show a prefix that names the object uniquely. \"--abbrev=<n>\" (which also modifies diff output, if it is displayed) option can be used to specify the minimum length of the prefix. This should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals. Show the full 40-byte hexadecimal commit object name. This negates , either explicit or implied by other options such as \"--oneline\". It also overrides the variable. This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together. Commit objects record the character encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in and we are outputting in , we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output. Likewise, if iconv(3) fails to convert the commit, we will quietly output the original object verbatim. Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is a multiple of <n>) in the log message before showing it in the output. is a short-hand for , and is a short-hand for , which disables tab expansion. By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. medium, which is the default, full, and fuller). Show the notes (see git-notes[1]) that annotate the commit, when showing the commit log message. This is the default for , and commands when there is no , , or option given on the command line. By default, the notes shown are from the notes refs listed in the and variables (or corresponding environment overrides). See git-config[1] for more details. With an optional <ref> argument, use the ref to find the notes to display. The ref can specify the full refname when it begins with ; when it begins with , and otherwise is prefixed to form the full name of the ref. Multiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s). Do not show notes. This negates the above option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\". Show the default notes unless options for displaying specific notes are given. These options are deprecated. Use the above --notes/--no-notes options instead. Check the validity of a signed commit object by passing the signature to and show the output. Only takes effect for dates shown in human-readable format, such as when using . config variable sets a default value for the log command’s option. By default, dates are shown in the original time zone (either committer’s or author’s). If is appended to the format (e.g., ), the user’s local time zone is used instead. shows dates relative to the current time, e.g. “2 hours ago”. The option has no effect for . is an alias for . (or ) shows timestamps in a ISO 8601-like format. The differences to the strict ISO 8601 format are:\n• a space instead of the date/time delimiter\n• no colon between hours and minutes of the time zone (or ) shows timestamps in RFC 2822 format, often found in email messages. shows only the date, but not the time, in format. shows the date as seconds since the epoch (1970-01-01 00:00:00 UTC), followed by a space, and then the timezone as an offset from UTC (a or with four digits; the first two are hours, and the second two are minutes). I.e., as if the timestamp were formatted with ). Note that the option does not affect the seconds-since-epoch value (which is always measured in UTC), but does switch the accompanying timezone value. shows the timezone if the timezone does not match the current time-zone, and doesn’t print the whole date if that matches (ie skip printing year for dates that are \"this year\", but also skip the whole date itself if it’s in the last few days and we can just say what weekday it was). For older dates the hour and minute is also omitted. shows the date as a Unix epoch timestamp (seconds since 1970). As with , this is always in UTC and therefore has no effect. feeds the format to your system , except for %s, %z, and %Z, which are handled internally. Use to show the date in your system locale’s preferred format. See the manual for a complete list of format placeholders. When using , the correct syntax is . is the default format, and is based on ctime(3) output. It shows a single line with three-letter day of the week, three-letter month, day-of-month, hour-minute-seconds in \"HH:MM:SS\" format, followed by 4-digit year, plus timezone information, unless the local time zone is used, e.g. . Print also the parents of the commit (in the form \"commit parent…​\"). Also enables parent rewriting, see History Simplification above. Print also the children of the commit (in the form \"commit child…​\"). Also enables parent rewriting, see History Simplification above. Mark which side of a symmetric difference a commit is reachable from. Commits from the left side are prefixed with and those from the right with . If combined with , those commits are prefixed with . For example, if you have this topology: you would get an output like this: $ git rev-list --left-right --boundary --pretty=oneline A...B >bbbbbbb... 3rd on b >bbbbbbb... 2nd on b <aaaaaaa... 3rd on a <aaaaaaa... 2nd on a -yyyyyyy... 1st on b -xxxxxxx... 1st on a Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with . This enables parent rewriting, see History Simplification above. This implies the option by default, but the option may also be specified. When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If is specified, it is the string that will be shown instead of the default one.\n\nIf the commit is a merge, and if the pretty-format is not oneline, email or raw, an additional line is inserted before the Author: line. This line begins with \"Merge: \" and the hashes of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the direct parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file. There are several built-in formats, and you can define additional formats by setting a pretty.<name> config option to either another format name, or a format: string, as described below (see git-config[1]). Here are the details of the built-in formats:\n• This is designed to be as compact as possible.\n• This format is used to refer to another commit in a commit message and is the same as . By default, the date is formatted with unless another option is explicitly specified. As with any with format placeholders, its output is not affected by other options like and .\n• Like email, but lines in the commit message starting with \"From \" (preceded by zero or more \">\") are quoted with \">\" so they aren’t confused as starting a new commit.\n• The raw format shows the entire commit exactly as stored in the commit object. Notably, the hashes are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and parents information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with . To get full object names in a raw diff format, use .\n• The format:<format-string> format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with %n instead of \n\n. E.g, format:\"The author of %h was %an, %ar%nThe title was >>%s<<%n\" would show something like this: The author of fe6e0ee was Junio C Hamano, 23 hours ago The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<\n• %x followed by two hexadecimal digits is replaced with a byte with the hexadecimal digits' value (we will call this \"literal formatting code\" in the rest of this document).\n• Placeholders that affect formatting of later placeholders: color specification, as described under Values in the \"CONFIGURATION FILE\" section of git-config[1]. By default, colors are shown only when enabled for log output (by , , or , and respecting the settings of the former if we are going to a terminal). is accepted as a historical synonym for the default (e.g., ). Specifying will show the colors even when color is not otherwise enabled (though consider just using to enable color for the whole output, including this format and anything else git might color). alone (i.e. ) will turn on auto coloring on the next placeholders until the color is switched again. switch line wrapping, like the -w option of git-shortlog[1]. make the next placeholder take at least N column widths, padding spaces on the right if necessary. Optionally truncate (with ellipsis ..) at the left (ltrunc) , the middle (mtrunc) , or the end (trunc) , if the output is longer than N columns. Note 1: that truncating only works correctly with N >= 2. Note 2: spaces around the N and M (see below) values are optional. Note 3: Emojis and other wide characters will take two display columns, which may over-run column boundaries. Note 4: decomposed character combining marks may be misplaced at padding boundaries. make the next placeholder take at least until Mth display column, padding spaces on the right if necessary. Use negative M values for column positions measured from the right hand edge of the terminal window. similar to %<( <N> ), %<|( <M> ) respectively, but padding spaces on the left similar to %>( <N> ), %>|( <M> ) respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces similar to %<( <N> ), %<|( <M> ) respectively, but padding both sides (i.e. the text is centered)\n• Placeholders that expand to information extracted from the commit: author name (respecting .mailmap, see git-shortlog[1] or git-blame[1]) author email local-part (the part before the @ sign) author local-part (see %al) respecting .mailmap, see git-shortlog[1] or git-blame[1]) author date, human style (like the option of git-rev-list[1]) committer name (respecting .mailmap, see git-shortlog[1] or git-blame[1]) committer email local-part (the part before the @ sign) committer local-part (see %cl) respecting .mailmap, see git-shortlog[1] or git-blame[1]) committer date, human style (like the option of git-rev-list[1]) ref names, like the --decorate option of git-log[1] ref names with custom decorations. The string may be followed by a colon and zero or more comma-separated options. Option values may contain literal formatting codes. These must be used for commas ( ) and closing parentheses ( ), due to their role in the option syntax.\n• prefix=<value>: Shown before the list of ref names. Defaults to \" \".\n• suffix=<value>: Shown after the list of ref names. Defaults to \" \".\n• pointer=<value>: Shown between HEAD and the branch it points to, if any. Defaults to \" \". For example, to produce decorations with no wrapping or tag annotations, and spaces as separators: human-readable name, like git-describe[1]; empty string for undescribable commits. The string may be followed by a colon and zero or more comma-separated options. Descriptions can be inconsistent when tags are added or removed at the same time.\n• tags[=<bool-value>]: Instead of only considering annotated tags, consider lightweight tags as well.\n• abbrev=<number>: Instead of using the default number of hexadecimal digits (which will vary according to the number of objects in the repository with a default of 7) of the abbreviated object name, use <number> digits, or as many digits as needed to form a unique object name.\n• match=<pattern>: Only consider tags matching the given pattern, excluding the \"refs/tags/\" prefix.\n• exclude=<pattern>: Do not consider tags matching the given pattern, excluding the \"refs/tags/\" prefix. ref name given on the command line by which the commit was reached (like ), only works with show \"G\" for a good (valid) signature, \"B\" for a bad signature, \"U\" for a good signature with unknown validity, \"X\" for a good signature that has expired, \"Y\" for a good signature made by an expired key, \"R\" for a good signature made by a revoked key, \"E\" if the signature cannot be checked (e.g. missing key) and \"N\" for no signature show the name of the signer for a signed commit show the key used to sign a signed commit show the fingerprint of the key used to sign a signed commit show the fingerprint of the primary key whose subkey was used to sign a signed commit show the trust level for the key used to sign a signed commit reflog selector, e.g., or ; the format follows the rules described for the option. The portion before the is the refname as given on the command line (so would yield ). shortened reflog selector; same as , but the refname portion is shortened for human readability (so becomes just ). reflog identity name (respecting .mailmap, see git-shortlog[1] or git-blame[1]) display the trailers of the body as interpreted by git-interpret-trailers[1]. The string may be followed by a colon and zero or more comma-separated options. If any option is provided multiple times, the last occurrence wins.\n• key=<key>: only show trailers with specified <key>. Matching is done case-insensitively and trailing colon is optional. If option is given multiple times trailer lines matching any of the keys are shown. This option automatically enables the option so that non-trailer lines in the trailer block are hidden. If that is not desired it can be disabled with . E.g., shows trailer lines with key .\n• only[=<bool>]: select whether non-trailer lines from the trailer block should be included.\n• separator=<sep>: specify the separator inserted between trailer lines. Defaults to a line feed character. The string <sep> may contain the literal formatting codes described above. To use comma as separator one must use as it would otherwise be parsed as next option. E.g., shows all trailer lines whose key is \"Ticket\" separated by a comma and a space.\n• unfold[=<bool>]: make it behave as if interpret-trailer’s option was given. E.g., unfolds and shows all trailer lines.\n• keyonly[=<bool>]: only show the key part of the trailer.\n• valueonly[=<bool>]: only show the value part of the trailer.\n• key_value_separator=<sep>: specify the separator inserted between the key and value of each trailer. Defaults to \": \". Otherwise it shares the same semantics as separator=<sep> above. Some placeholders may depend on other options given to the revision traversal engine. For example, the reflog options will insert an empty string unless we are traversing reflog entries (e.g., by ). The and placeholders will use the \"short\" decoration format if was not already provided on the command line. The boolean options accept an optional value . The values taken by git-config[1], like and , are all accepted. Giving a boolean option without is equivalent to giving it with . If you add a (plus sign) after % of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string. If you add a (minus sign) after % of a placeholder, all consecutive line-feeds immediately preceding the expansion are deleted if and only if the placeholder expands to an empty string. If you add a ` ` (space) after % of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.\n• The tformat: format works exactly like format:, except that it provides \"terminator\" semantics instead of \"separator\" semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the \"oneline\" format does. For example: $ git log -2 --pretty=format:%h 4da45bef \\ | perl -pe '$_ .= \" -- NO NEWLINE\n\n\" unless /\n\n/' 4da45be 7134973 -- NO NEWLINE $ git log -2 --pretty=tformat:%h 4da45bef \\ | perl -pe '$_ .= \" -- NO NEWLINE\n\n\" unless /\n\n/' 4da45be 7134973 In addition, any unrecognized string that has a in it is interpreted as if it has in front of it. For example, these two are equivalent:\n\nBy default, does not generate any diff output. The options below can be used to show the changes made by each commit. Note that unless one of variants (including short , , , and options) is explicitly given, merge commits will not show a diff, even if a diff format like is selected, nor will they match search options like . The exception is when is in use, in which case is the default format for merge commits. Suppress all output from the diff machinery. Useful for commands like that show the patch by default to squelch their output, or to cancel the effect of options like , earlier on the command line in an alias. Show diffs for merge commits in the default format. This is similar to , except will produce no output unless is given as well. Produce diff with respect to first parent for both merge and regular commits. Shortcut for . Specify diff format to be used for merge commits. Default is `off` unless is in use, in which case is the default. The following formats are supported: Disable output of diffs for merge commits. Useful to override implied value. Make diff output for merge commits to be shown in the default format. The default format can be changed using configuration variable, whose default value is . Show full diff with respect to first parent. This is the same format as produces for non-merge commits. Show full diff with respect to each of parents. Separate log entry and diff is generated for each parent. Show differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time. Furthermore, it lists only files which were modified from all parents. Further compress output produced by by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification. Remerge two-parent merge commits to create a temporary tree object—​potentially containing files with conflict markers and such. A diff is then shown between that temporary tree and the actual merge commit. The output emitted when this option is used is subject to change, and so is its interaction with other options (unless explicitly documented). Cause combined diffs (used for merge commits) to list the name of the file from all parents. It thus only has effect when is in use, and is likely only useful if filename changes are detected (i.e. when either rename or copy detection have been requested). Generate diffs with <n> lines of context instead of the usual three. Implies . Output to a specific file instead of stdout. Specify the character used to indicate new, old or context lines in the generated patch. Normally they are , and ' ' respectively. For each commit, show a summary of changes using the raw diff format. See the \"RAW OUTPUT FORMAT\" section of git-diff[1]. This is different from showing the log itself in raw format, which you can achieve with . Show the tree objects in the diff output. Enable the heuristic that shifts diff hunk boundaries to make patches easier to read. This is the default. Spend extra time to make sure the smallest possible diff is produced. This option may be specified more than once. If a line exists in both the source and destination, exists only once, and starts with <text>, this algorithm attempts to prevent it from appearing as a deletion or addition in the output. It uses the \"patience diff\" algorithm internally. Choose a diff algorithm. The variants are as follows: The basic greedy diff algorithm. Currently, this is the default. Spend extra time to make sure the smallest possible diff is produced. This algorithm extends the patience algorithm to \"support low-occurrence common elements\". For instance, if you configured the variable to a non-default value and want to use the default one, then you have to use option. Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <width>. The width of the filename part can be limited by giving another width <name-width> after a comma or by setting . The width of the graph part can be limited by using or by setting . Using or affects all commands generating a stat graph, while setting or does not affect . By giving a third parameter <count>, you can limit the output to the first <count> lines, followed by if there are more. These parameters can also be set individually with , and . Output a condensed summary of extended header information such as file creations or deletions (\"new\" or \"gone\", optionally if it’s a symlink) and mode changes ( or for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies . Similar to , but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two instead of saying . Output only the last line of the format containing total number of modified files, as well as number of added and deleted lines. Output the distribution of relative amount of changes for each sub-directory. The behavior of can be customized by passing it a comma separated list of parameters. The defaults are controlled by the configuration variable (see git-config[1]). The following parameters are available: Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given. Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive behavior than the behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other options. Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest behavior, since it does not have to look at the file contents at all. Count changes in a child directory for the parent directory as well. Note that when using , the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the parameter. An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output. Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: . Output a condensed summary of extended header information such as creations, renames and mode changes. Separate the commits with NULs instead of newlines. Also, when or has been given, do not munge pathnames and use NULs as output field terminators. Without this option, pathnames with \"unusual\" characters are quoted as explained for the configuration variable (see git-config[1]). Show only the name of each changed file in the post-image tree. The file names are often encoded in UTF-8. For more information see the discussion about encoding in the git-log[1] manual page. Show only the name(s) and status of each changed file. See the description of the option on what the status letters mean. Just like the file names are often encoded in UTF-8. Specify how differences in submodules are shown. When specifying the format is used. This format just shows the names of the commits at the beginning and end of the range. When or is specified, the format is used. This format lists the commits in the range like git-submodule[1] does. When is specified, the format is used. This format shows an inline diff of the changes in the submodule contents between the commit range. Defaults to or the format if the config option is unset. Show colored diff. (i.e. without ) is the same as . <when> can be one of , , or . Turn off colored diff. It is the same as . Moved lines of code are colored differently. The <mode> defaults to if the option is not given and to if the option with no mode is given. The mode must be one of: Is a synonym for . This may change to a more sensible mode in the future. Any line that is added in one location and was removed in another location will be colored with . Similarly will be used for removed lines that are added somewhere else in the diff. This mode picks up any moved line, but it is not very useful in a review to determine if a block of code was moved without permutation. Blocks of moved text of at least 20 alphanumeric characters are detected greedily. The detected blocks are painted using either the color. Adjacent blocks cannot be told apart. Blocks of moved text are detected as in mode. The blocks are painted using either the color or . The change between the two colors indicates that a new block was detected. Similar to , but additional dimming of uninteresting parts of moved code is performed. The bordering lines of two adjacent blocks are considered interesting, the rest is uninteresting. is a deprecated synonym. Turn off move detection. This can be used to override configuration settings. It is the same as . This configures how whitespace is ignored when performing the move detection for . These modes can be given as a comma separated list: Do not ignore whitespace when performing move detection. Ignore changes in whitespace at EOL. Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent. Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none. Initially ignore any whitespace in the move detection, then group the moved code blocks only into a block if the change in whitespace is the same per line. This is incompatible with the other modes. Do not ignore whitespace when performing move detection. This can be used to override configuration settings. It is the same as . By default, words are delimited by whitespace; see below. The <mode> defaults to , and must be one of: Show words as and . Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous. Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a / /` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde on a line of its own. Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled. Use <regex> to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies unless it was already enabled. Every non-overlapping match of the <regex> is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline. For example, will treat each character as a word and, correspondingly, show differences character by character. The regex can also be set via a diff driver or configuration option, see gitattributes[5] or git-config[1]. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings. Equivalent to plus (if a regex was specified) . Turn off rename detection, even when the configuration file gives the default to do so. Whether to use empty blobs as rename source. Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by configuration. By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with . Highlight whitespace errors in the , or lines of the diff. Multiple values are separated by comma, resets previous values, reset the list to and is a shorthand for . When this option is not given, and the configuration variable is not set, only whitespace errors in lines are highlighted. The whitespace errors are colored with . Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output. In addition to , output a binary diff that can be applied with . Implies . Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show the shortest prefix that is at least <n> hexdigits long that uniquely refers the object. In diff-patch output format, takes higher precedence, i.e. if is specified, full blob names will be shown regardless of . Non default number of digits can be specified with . Break complete rewrite changes into pairs of delete and create. This serves two purposes: It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <m> controls this aspect of the option (defaults to 60%). specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines). When used with , a totally-rewritten file is also considered as the source of a rename (usually only considers a file that disappeared as the source of a rename), and the number <n> controls this aspect of the option (defaults to 50%). specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file. If generating diffs, detect and report renames for each commit. For following files across renames while traversing history, see . If <n> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a sign, the number is to be read as a fraction, with a decimal point before it. I.e., becomes 0.5, and is thus the same as . Similarly, is the same as . To limit detection to exact renames, use . The default similarity index is 50%. Detect copies as well as renames. See also . If <n> is specified, it has the same meaning as for . For performance reasons, by default, option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one option has the same effect. Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and . The resulting patch is not meant to be applied with or ; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option. When used together with , omit also the preimage in the deletion part of a delete/create pair. The and options involve some preliminary steps that can detect subsets of renames/copies cheaply, followed by an exhaustive fallback portion that compares all remaining unpaired destinations to all relevant sources. (For renames, only remaining unpaired sources are relevant; for copies, all original sources are relevant.) For N sources and destinations, this exhaustive check is O(N^2). This option prevents the exhaustive portion of rename/copy detection from running if the number of source/destination files involved exceeds the specified number. Defaults to . Note that a value of 0 is treated as unlimited. Select only files that are Added ( ), Copied ( ), Deleted ( ), Modified ( ), Renamed ( ), have their type (i.e. regular file, symlink, submodule, …​) changed ( ), are Unmerged ( ), are Unknown ( ), or have had their pairing Broken ( ). Any combination of the filter characters (including none) can be used. When (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected. Also, these upper-case letters can be downcased to exclude. E.g. excludes added and deleted paths. Note that not all diffs can feature all types. For instance, copied and renamed entries cannot appear if detection for those types is disabled. Look for differences that change the number of occurrences of the specified <string> (i.e. addition/deletion) in a file. Intended for the scripter’s use. It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into , and keep going until you get the very first version of the block. Binary files are searched as well. Look for differences whose patch text contains added/removed lines that match <regex>. To illustrate the difference between and , consider a commit with the following diff in the same file: While will show this commit, will not (because the number of occurrences of that string did not change). Unless is supplied patches of binary files without a textconv filter will be ignored. See the pickaxe entry in gitdiffcore[7] for more information. Look for differences that change the number of occurrences of the specified object. Similar to , just the argument is different in that it doesn’t search for a specific string but for a specific object id. The object can be a blob or a submodule commit. It implies the option in to also find trees. When or finds a change, show all the changes in that changeset, not just the files that contain the change in <string>. Treat the <string> given to as an extended POSIX regular expression to match. Control the order in which files appear in the output. This overrides the configuration variable (see git-config[1]). To cancel , use . The output order is determined by the order of glob patterns in <orderfile>. All files with pathnames that match the first pattern are output first, all files with pathnames that match the second pattern (but not the first) are output next, and so on. All files with pathnames that do not match any pattern are output last, as if there was an implicit match-all pattern at the end of the file. If multiple pathnames have the same rank (they match the same pattern but no earlier patterns), their output order relative to each other is the normal order. <orderfile> is parsed as follows:\n• Blank lines are ignored, so they can be used as separators for readability.\n• Lines starting with a hash (\" \") are ignored, so they can be used for comments. Add a backslash (\" \") to the beginning of the pattern if it starts with a hash.\n• Each other line contains a single pattern. Patterns have the same syntax and semantics as patterns used for (3) without the flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern \" \" matches \" \" and \" \" but not \" \". Discard the files before the named <file> from the output (i.e. skip to), or move them to the end of the output (i.e. rotate to). These options were invented primarily for the use of the command, and may not be very useful otherwise. Swap two inputs; that is, show differences from index or on-disk file to tree contents. When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a <path> as an argument. can be used to countermand both config option and previous . Ignore carriage-return at the end of line when doing a comparison. Ignore changes in whitespace at EOL. Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent. Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none. Ignore changes whose lines are all blank. Ignore changes whose all lines match <regex>. This option may be specified more than once. Show the context between diff hunks, up to the specified <number> of lines, thereby fusing hunks that are close to each other. Defaults to or 0 if the config option is unset. Show whole function as context lines for each change. The function names are determined in the same way as works out patch hunk headers (see \"Defining a custom hunk-header\" in gitattributes[5]). Allow an external diff helper to be executed. If you set an external diff driver with gitattributes[5], you need to use this option with git-log[1] and friends. Allow (or disallow) external text conversion filters to be run when comparing binary files. See gitattributes[5] for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for git-diff[1] and git-log[1], but not for git-format-patch[1] or diff plumbing commands. Ignore changes to submodules in the diff generation. is the default. Using will consider the submodule modified when it either contains untracked or modified files or its differs from the commit recorded in the superproject and can be used to override any settings of the option in git-config[1] or gitmodules[5]. When is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using hides all changes to submodules. Show the given source <prefix> instead of \"a/\". Show the given destination <prefix> instead of \"b/\". Do not show any source or destination prefix. Use the default source and destination prefixes (\"a/\" and \"b/\"). This overrides configuration variables such as , , , and (see git-config[1]). Prepend an additional <prefix> to every line of output. By default entries added by appear as an existing empty file in and a new file in . This option makes the entry appear as a new file in and non-existent in . This option could be reverted with . Both options are experimental and could be removed in future. For more detailed explanation on these common options, see also gitdiffcore[7].\n\nAny diff-generating command can take the or option to produce a combined diff when showing a merge. This is the default format when showing merges with git-diff[1] or git-show[1]. Note also that you can give suitable option to any of these commands to force generation of diffs in a specific format. A \"combined diff\" format looks like this: diff --combined describe.c index fabadb8,cc95eb0..4866510 --- a/describe.c +++ b/describe.c @@@ -98,20 -98,12 +98,20 @@@ return (a_date > b_date) ? -1 : (a_date == b_date) ? 0 : 1; } - static void describe(char *arg) -static void describe(struct commit *cmit, int last_one) ++static void describe(char *arg, int last_one) { + unsigned char sha1[20]; + struct commit *cmit; struct commit_list *list; static int initialized = 0; struct commit_name *n; + if (get_sha1(arg, sha1) < 0) + usage(describe_usage); + cmit = lookup_commit_reference(sha1); + if (!cmit) + usage(describe_usage); + if (!initialized) { initialized = 1; for_each_ref(get_name);\n• It is preceded by a \"git diff\" header, that looks like this (when the option is used): or like this (when the option is used):\n• It is followed by one or more extended header lines (this example shows a merge with two parents): The line appears only if at least one of the <mode> is different from the rest. Extended headers with information about detected content movement (renames and copying detection) are designed to work with the diff of two <tree-ish> and are not used by combined diff format.\n• It is followed by a two-line from-file/to-file header: Similar to the two-line header for the traditional unified diff format, is used to signal created or deleted files. However, if the --combined-all-paths option is provided, instead of a two-line from-file/to-file, you get an N+1 line from-file/to-file header, where N is the number of parents in the merge commit: This extended format can be useful if rename or copy detection is active, to allow you to see the original name of the file in different parents.\n• Chunk header format is modified to prevent people from accidentally feeding it to . Combined diff format was created for review of merge commit changes, and was not meant to be applied. The change is similar to the change in the extended index header: There are (number of parents + 1) characters in the chunk header for combined diff format. Unlike the traditional unified diff format, which shows two files A and B with a single column that has (minus — appears in A but removed in B), (plus — missing in A but added to B), or (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it. A character in the column N means that the line appears in fileN but it does not appear in the result. A character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent). In the above example output, the function signature was changed from both files (hence two removals from both file1 and file2, plus to mean one line that was added does not appear in either file1 or file2). Also, eight other lines are the same from file1 but do not appear in file2 (hence prefixed with ). When shown by , it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by , it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").\n\nSee git-config[1] for core variables and git-diff[1] for settings related to diff generation. Default for the option. (See Pretty Formats above.) Defaults to . Encoding to use when displaying logs. (See Discussion above.) Defaults to the value of if set, and UTF-8 otherwise. Everything above this line in this section isn’t included from the git-config[1] documentation. The content that follows is the same as what’s found there: If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume . You may override this option with . Set the default date-time mode for the log command. Setting a value for log.date is similar to using git log's option. See git-log[1] for details. If the format is set to \"auto:foo\" and the pager is in use, format \"foo\" will be used for the date format. Otherwise, \"default\" will be used. Print out the ref names of any commits that are shown by the log command. If short is specified, the ref name prefixes refs/heads/, refs/tags/ and refs/remotes/ will not be printed. If full is specified, the full ref name (including prefix) will be printed. If auto is specified, then if the output is going to a terminal, the ref names are shown as if short were given, otherwise no ref names are shown. This is the same as the option of the . By default, only shows decorations for certain known ref namespaces. If all is specified, then show all refs as decorations. Exclude the specified patterns from the log decorations. This is similar to the command-line option, but the config option can be overridden by the option. Set diff format to be used when is specified, see in git-log[1] for details. Defaults to . If , will act as if the option was used when a single <path> is given. This has the same limitations as , i.e. it cannot be used to follow multiple files and does not work well on non-linear history. A list of colors, separated by commas, that can be used to draw history lines in . If true, the initial commit will be shown as a big creation event. This is equivalent to a diff against an empty tree. Tools like git-log[1] or git-whatchanged[1], which normally hide the root commit will now show it. True by default. If true, makes git-log[1], git-show[1], and git-whatchanged[1] assume , otherwise assume . True by default. Which merge strategy to choose by default when resolving notes conflicts. Must be one of , , , , or . Defaults to . See the \"NOTES MERGE STRATEGIES\" section of git-notes[1] for more information on each strategy. This setting can be overridden by passing the option to git-notes[1]. Which merge strategy to choose when doing a notes merge into . This overrides the more general . See the \"NOTES MERGE STRATEGIES\" section in git-notes[1] for more information on the available strategies. Which ref (or refs, if a glob or specified more than once), in addition to the default set by or , to read notes from when showing commit messages with the family of commands. This setting can be overridden with the environment variable, which must be a colon separated list of refs or globs. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored. This setting can be disabled by the option to the git-log[1] family of commands, or by the option accepted by those commands. The effective value of (possibly overridden by ) is also implicitly added to the list of refs to be displayed. When rewriting commits with <command> (currently or ), if this variable is , git will not copy notes from the original to the rewritten commit. Defaults to . See also below. This setting can be overridden with the environment variable, which must be a colon separated list of refs or globs. When copying notes during a rewrite (see the option), determines what to do if the target commit already has a note. Must be one of , , , or . Defaults to . This setting can be overridden with the environment variable. When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. May be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times. Does not have a default value; you must configure this variable to enable note rewriting. Set it to to enable rewriting for the default commit notes. Can be overridden with the environment variable. See above for a further description of its format."
    },
    {
        "link": "https://git-scm.com/docs/pretty-formats",
        "document": "If the commit is a merge, and if the pretty-format is not oneline, email or raw, an additional line is inserted before the Author: line. This line begins with \"Merge: \" and the hashes of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the direct parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.\n\nThere are several built-in formats, and you can define additional formats by setting a pretty.<name> config option to either another format name, or a format: string, as described below (see git-config[1]). Here are the details of the built-in formats:\n• This is designed to be as compact as possible.\n• This format is used to refer to another commit in a commit message and is the same as . By default, the date is formatted with unless another option is explicitly specified. As with any with format placeholders, its output is not affected by other options like and .\n• Like email, but lines in the commit message starting with \"From \" (preceded by zero or more \">\") are quoted with \">\" so they aren’t confused as starting a new commit.\n• The raw format shows the entire commit exactly as stored in the commit object. Notably, the hashes are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and parents information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with . To get full object names in a raw diff format, use .\n• The format:<format-string> format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with %n instead of \n\n. E.g, format:\"The author of %h was %an, %ar%nThe title was >>%s<<%n\" would show something like this: The author of fe6e0ee was Junio C Hamano, 23 hours ago The title was >>t4119: test autocomputing -p<n> for traditional diff input.<<\n• %x followed by two hexadecimal digits is replaced with a byte with the hexadecimal digits' value (we will call this \"literal formatting code\" in the rest of this document).\n• Placeholders that affect formatting of later placeholders: color specification, as described under Values in the \"CONFIGURATION FILE\" section of git-config[1]. By default, colors are shown only when enabled for log output (by , , or , and respecting the settings of the former if we are going to a terminal). is accepted as a historical synonym for the default (e.g., ). Specifying will show the colors even when color is not otherwise enabled (though consider just using to enable color for the whole output, including this format and anything else git might color). alone (i.e. ) will turn on auto coloring on the next placeholders until the color is switched again. switch line wrapping, like the -w option of git-shortlog[1]. make the next placeholder take at least N column widths, padding spaces on the right if necessary. Optionally truncate (with ellipsis ..) at the left (ltrunc) , the middle (mtrunc) , or the end (trunc) , if the output is longer than N columns. Note 1: that truncating only works correctly with N >= 2. Note 2: spaces around the N and M (see below) values are optional. Note 3: Emojis and other wide characters will take two display columns, which may over-run column boundaries. Note 4: decomposed character combining marks may be misplaced at padding boundaries. make the next placeholder take at least until Mth display column, padding spaces on the right if necessary. Use negative M values for column positions measured from the right hand edge of the terminal window. similar to %<( <N> ), %<|( <M> ) respectively, but padding spaces on the left similar to %>( <N> ), %>|( <M> ) respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces similar to %<( <N> ), %<|( <M> ) respectively, but padding both sides (i.e. the text is centered)\n• Placeholders that expand to information extracted from the commit: author name (respecting .mailmap, see git-shortlog[1] or git-blame[1]) author email local-part (the part before the @ sign) author local-part (see %al) respecting .mailmap, see git-shortlog[1] or git-blame[1]) author date, human style (like the option of git-rev-list[1]) committer name (respecting .mailmap, see git-shortlog[1] or git-blame[1]) committer email local-part (the part before the @ sign) committer local-part (see %cl) respecting .mailmap, see git-shortlog[1] or git-blame[1]) committer date, human style (like the option of git-rev-list[1]) ref names, like the --decorate option of git-log[1] ref names with custom decorations. The string may be followed by a colon and zero or more comma-separated options. Option values may contain literal formatting codes. These must be used for commas ( ) and closing parentheses ( ), due to their role in the option syntax.\n• prefix=<value>: Shown before the list of ref names. Defaults to \" \".\n• suffix=<value>: Shown after the list of ref names. Defaults to \" \".\n• pointer=<value>: Shown between HEAD and the branch it points to, if any. Defaults to \" \". For example, to produce decorations with no wrapping or tag annotations, and spaces as separators: human-readable name, like git-describe[1]; empty string for undescribable commits. The string may be followed by a colon and zero or more comma-separated options. Descriptions can be inconsistent when tags are added or removed at the same time.\n• tags[=<bool-value>]: Instead of only considering annotated tags, consider lightweight tags as well.\n• abbrev=<number>: Instead of using the default number of hexadecimal digits (which will vary according to the number of objects in the repository with a default of 7) of the abbreviated object name, use <number> digits, or as many digits as needed to form a unique object name.\n• match=<pattern>: Only consider tags matching the given pattern, excluding the \"refs/tags/\" prefix.\n• exclude=<pattern>: Do not consider tags matching the given pattern, excluding the \"refs/tags/\" prefix. ref name given on the command line by which the commit was reached (like ), only works with show \"G\" for a good (valid) signature, \"B\" for a bad signature, \"U\" for a good signature with unknown validity, \"X\" for a good signature that has expired, \"Y\" for a good signature made by an expired key, \"R\" for a good signature made by a revoked key, \"E\" if the signature cannot be checked (e.g. missing key) and \"N\" for no signature show the name of the signer for a signed commit show the key used to sign a signed commit show the fingerprint of the key used to sign a signed commit show the fingerprint of the primary key whose subkey was used to sign a signed commit show the trust level for the key used to sign a signed commit reflog selector, e.g., or ; the format follows the rules described for the option. The portion before the is the refname as given on the command line (so would yield ). shortened reflog selector; same as , but the refname portion is shortened for human readability (so becomes just ). reflog identity name (respecting .mailmap, see git-shortlog[1] or git-blame[1]) display the trailers of the body as interpreted by git-interpret-trailers[1]. The string may be followed by a colon and zero or more comma-separated options. If any option is provided multiple times, the last occurrence wins.\n• key=<key>: only show trailers with specified <key>. Matching is done case-insensitively and trailing colon is optional. If option is given multiple times trailer lines matching any of the keys are shown. This option automatically enables the option so that non-trailer lines in the trailer block are hidden. If that is not desired it can be disabled with . E.g., shows trailer lines with key .\n• only[=<bool>]: select whether non-trailer lines from the trailer block should be included.\n• separator=<sep>: specify the separator inserted between trailer lines. Defaults to a line feed character. The string <sep> may contain the literal formatting codes described above. To use comma as separator one must use as it would otherwise be parsed as next option. E.g., shows all trailer lines whose key is \"Ticket\" separated by a comma and a space.\n• unfold[=<bool>]: make it behave as if interpret-trailer’s option was given. E.g., unfolds and shows all trailer lines.\n• keyonly[=<bool>]: only show the key part of the trailer.\n• valueonly[=<bool>]: only show the value part of the trailer.\n• key_value_separator=<sep>: specify the separator inserted between the key and value of each trailer. Defaults to \": \". Otherwise it shares the same semantics as separator=<sep> above.\n\nThe boolean options accept an optional value . The values taken by git-config[1], like and , are all accepted. Giving a boolean option without is equivalent to giving it with .\n\nIf you add a (plus sign) after % of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.\n\nIf you add a (minus sign) after % of a placeholder, all consecutive line-feeds immediately preceding the expansion are deleted if and only if the placeholder expands to an empty string.\n\nIf you add a ` ` (space) after % of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.\n• The tformat: format works exactly like format:, except that it provides \"terminator\" semantics instead of \"separator\" semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the \"oneline\" format does. For example: $ git log -2 --pretty=format:%h 4da45bef \\ | perl -pe '$_ .= \" -- NO NEWLINE\n\n\" unless /\n\n/' 4da45be 7134973 -- NO NEWLINE $ git log -2 --pretty=tformat:%h 4da45bef \\ | perl -pe '$_ .= \" -- NO NEWLINE\n\n\" unless /\n\n/' 4da45be 7134973 In addition, any unrecognized string that has a in it is interpreted as if it has in front of it. For example, these two are equivalent:"
    },
    {
        "link": "https://atlassian.com/git/tutorials/git-log",
        "document": "First, this article will take a look at the many ways in which ’s output can be formatted. Most of these come in the form of flags that let you request more or less information from . If you don’t like the default format, you can use ’s aliasing functionality to create a shortcut for any of the formatting options discussed below. Please see in The git config Command for how to set up an alias. The flag condenses each commit to a single line. By default, it displays only the commit ID and the first line of the commit message. Your typical output will look something like this: 0e25143 Merge branch 'feature'\n\nad8621a Fix a bug in the feature\n\n16b36c6 Add a new feature\n\n23ad9ad Add the initial code base This is very useful for getting a high-level overview of your project.\n\nMany times it’s useful to know which branch or tag each commit is associated with. The flag makes display all of the references (e.g., branches, tags, etc) that point to each commit. This can be combined with other configuration options. For example, running will format the commit history like so: 0e25143 (HEAD, main) Merge branch 'feature'\n\nad8621a (feature) Fix a bug in the feature\n\n16b36c6 Add a new feature\n\n23ad9ad (tag: v0.9) Add the initial code base This lets you know that the top commit is also checked out (denoted by ) and that it is also the tip of the branch. The second commit has another branch pointing to it called , and finally the 4th commit is tagged as . Branches, tags, , and the commit history are almost all of the information contained in your Git repository, so this gives you a more complete view of the logical structure of your repository. The command includes many options for displaying diffs with each commit. Two of the most common options are and . The option displays the number of insertions and deletions to each file altered by each commit (note that modifying a line is represented as 1 insertion and 1 deletion). This is useful when you want a brief summary of the changes introduced by each commit. For example, the following commit added 67 lines to the file and removed 38 lines: The amount of and signs next to the file name show the relative number of changes to each file altered by the commit. This gives you an idea of where the changes for each commit can be found. If you want to see the actual changes introduced by each commit, you can pass the option to . This outputs the entire patch representing that commit: For commits with a lot of changes, the resulting output can become quite long and unwieldy. More often than not, if you’re displaying a full patch, you’re probably searching for a specific change. For this, you want to use the pickaxe option. The command is a special version of intended for creating release announcements. It groups each commit by author and displays the first line of each commit message. This is an easy way to see who’s been working on what. For example, if two developers have contributed 5 commits to a project, the output might look like the following: Mary (2):\n\n Fix a bug in the feature\n\n Fix a serious security hole in our framework\n\n\n\nJohn (3):\n\n Add the initial code base\n\n Add a new feature\n\n Merge branch 'feature' By default, sorts the output by author name, but you can also pass the option to sort by the number of commits per author. The option draws an ASCII graph representing the branch structure of the commit history. This is commonly used in conjunction with the and commands to make it easier to see which commit belongs to which branch: For a simple repository with just 2 branches, this will produce the following: * 0e25143 (HEAD, main) Merge branch 'feature'\n\n|\\ \n\n| * 16b36c6 Fix a bug in the new feature\n\n| * 23ad9ad Start a new feature\n\n* | ad8621a Fix a critical security issue\n\n|/ \n\n* 400e4b7 Fix typos in the documentation\n\n* 160e224 Add the initial code base The asterisk shows which branch the commit was on, so the above graph tells us that the and commits are on a topic branch and the rest are on the branch. While this is a nice option for simple repositories, you’re probably better off with a more full-featured visualization tool like or Sourcetree for projects that are heavily branched. For all of your other formatting needs, you can use the option. This lets you display each commit however you want using -style placeholders. For example, the , and characters in the following command are replaced with the committer name, abbreviated commit hash, and the committer date, respectively. This results in the following format for each commit: John committed 400e4b7 on Fri Jun 24 12:30:04 2014 -0500 John committed 89ab2cf on Thu Jun 23 17:09:42 2014 -0500 Mary committed 180e223 on Wed Jun 22 17:21:19 2014 -0500 John committed f12ca28 on Wed Jun 22 13:50:31 2014 -0500 The complete list of placeholders can be found in the Pretty Formats section of the manual page. Aside from letting you view only the information that you’re interested in, the option is particularly useful when you’re trying to pipe output into another command.\n\nFormatting how each commit gets displayed is only half the battle of learning . The other half is understanding how to navigate the commit history. The rest of this article introduces some of the advanced ways to pick out specific commits in your project history using . All of these can be combined with any of the formatting options discussed above. The most basic filtering option for is to limit the number of commits that are displayed. When you’re only interested in the last few commits, this saves you the trouble of viewing all the commits in a page. You can limit ’s output by including the option. For example, the following command will display only the 3 most recent commits. If you’re looking for a commit from a specific time frame, you can use the or flags for filtering commits by date. These both accept a variety of date formats as a parameter. For example, the following command only shows commits that were created after July 1st, 2014 (inclusive): You can also pass in relative references like and : To search for a commits that were created between two dates, you can provide both a and date. For instance, to display all the commits added between July 1st, 2014 and July 4th, 2014, you would use the following: For commits with a lot of changes, the resulting output can become quite long and unwieldy. More often than not, if you’re displaying a full patch, you’re probably searching for a specific change. For this, you want to use the pickaxe option. When you’re only looking for commits created by a particular user, use the flag. This accepts a regular expression, and returns all commits whose author matches that pattern. If you know exactly who you’re looking for, you can use a plain old string instead of a regular expression: This displays all commits whose author includes the name John. The author name doesn’t need to be an exact match—it just needs to contain the specified phrase. You can also use regular expressions to create more complex searches. For example, the following command searches for commits by either Mary or John. Note that the author’s email is also included with the author’s name, so you can use this option to search by email, too. If your workflow separates committers from authors, the flag operates in the same fashion. To filter commits by their commit message, use the flag. This works just like the flag discussed above, but it matches against the commit message instead of the author. For example, if your team includes relevant issue numbers in each commit message, you can use something like the following to pull out all of the commits related to that issue: You can also pass in the parameter to to make it ignore case differences while pattern matching. Many times, you’re only interested in changes that happened to a particular file. To show the history related to a file, all you have to do is pass in the file path. For example, the following returns all commits that affected either the or the file: The parameter is used to tell that subsequent arguments are file paths and not branch names. If there’s no chance of mixing it up with a branch, you can omit the . It’s also possible to search for commits that introduce or remove a particular line of source code. This is called a pickaxe, and it takes the form of . For example, if you want to know when the string Hello, World! was added to any file in the project, you would use the following command: If you want to search using a regular expression instead of a string, you can use the flag instead. This is a very powerful debugging tool, as it lets you locate all of the commits that affect a particular line of code. It can even show you when a line was copied or moved to another file. You can pass a range of commits to to show only the commits contained in that range. The range is specified in the following format, where and are commit references: This command is particularly useful when you use branch references as the parameters. It’s a simple way to show the differences between 2 branches. Consider the following command: The range contains all of the commits that are in the branch, but aren’t in the branch. In other words, this is how far has progressed since it forked off of . You can visualize this as follows: Note that if you switch the order of the range ( ), you will get all of the commits in , but not in . If outputs commits for both versions, this tells you that your history has diverged. By default, includes merge commits in its output. But, if your team has an always-merge policy (that is, you merge upstream changes into topic branches instead of rebasing the topic branch onto the upstream branch), you’ll have a lot of extraneous merge commits in your project history. You can prevent from displaying these merge commits by passing the flag: On the other hand, if you’re only interested in the merge commits, you can use the flag: This returns all commits that have at least two parents.\n\nYou should now be fairly comfortable using ’s advanced parameters to format its output and select which commits you want to display. This gives you the power to pull out exactly what you need from your project history. These new skills are an important part of your Git toolkit, but remember that is often used in conjunction other Git commands. Once you’ve found the commit you’re looking for, you typically pass it off to , , or some other tool for manipulating your commit history. So, be sure to keep on learning about Git’s advanced features."
    },
    {
        "link": "https://stackoverflow.com/questions/54825213/git-log-source-in-pretty-format",
        "document": "You should take a look at this post. It gives a very nice exemple of a customize git log. And also an oneliner to define it with a Git alias.\n\nTo try it, you can type:\n\nTo define it in an alias:\n\nTo use it :\n\nIf you want to go further in the configuration, you should look at the Git pretty-formats documentation (placeholders section).\n\nFor the date you were talking about, you could change the %cr by %ad because this format respects the --date=option. So you could use --date=short as you want.\n\nTo finish there is a very powerful tool you could use if you are a command line lover like me: Tig"
    },
    {
        "link": "https://git-scm.com/docs/git-grep",
        "document": "Search files in the current directory that is not managed by Git, or by ignoring that the current directory is managed by Git. This is rather similar to running the regular utility with its option specified, but with some additional benefits, such as using pathspec patterns to limit paths; see the pathspec entry in gitglossary[7] for more information. This option cannot be used together with or . See also in CONFIGURATION below.\n\nRecursively search in each submodule that is active and checked out in the repository. When used in combination with the <tree> option the prefix of all submodule output will be the name of the parent project’s <tree> object. This option cannot be used together with , and it has no effect if is specified.\n\nOpen the matching files in the pager (not the output of grep). If the pager happens to be \"less\" or \"vi\", and the user specified only one pattern, the first file is positioned at the first match automatically. The argument is optional; if specified, it must be stuck to the option without a space. If is unspecified, the default pager will be used (see in git-config[1]).\n\nShow the surrounding text from the previous line containing a function name up to the one before the next function name, effectively showing the whole function in which the match was found. The function names are determined in the same way as works out patch hunk headers (see Defining a custom hunk-header in gitattributes[5]).\n\nRead patterns from <file>, one per line. Passing the pattern via <file> allows for providing a search pattern containing a \\0. Not all pattern types support patterns containing \\0. Git will error out if a given pattern type can’t support such a pattern. The pattern type when compiled against the PCRE v2 backend has the widest support for these types of patterns. In versions of Git before 2.23.0 patterns containing \\0 would be silently considered fixed. This was never documented, there were also odd and undocumented interactions between e.g. non-ASCII patterns containing \\0 and . In future versions we may learn to support patterns containing \\0 for more search backends, until then we’ll die when the pattern type in question doesn’t support them."
    },
    {
        "link": "https://stackoverflow.com/questions/43824526/multiple-git-commands-in-single-command-executed-in-order-they-are-encountered-b",
        "document": "I have following list of commands that I run in respective order so that a source project can be committed and pushed to the repository on Bitbucket:\n\nNow instead of putting each and every line at their respective time and order, I want to know, if there is a possibility that I can chain all these into single command and maintain the same order, something like below ?\n\nOr atleast combine multiple same category params like below ?\n\nI need to know possibility of both scenarios with examples."
    },
    {
        "link": "https://gist.github.com/luismts/495d982e8c5b1a0ced4a57cf3d93cf60",
        "document": "A commit should be a wrapper for related changes. For example, fixing two different bugs should produce two separate commits. Small commits make it easier for other developers to understand the changes and roll them back if something went wrong. With tools like the staging area and the ability to stage only parts of a file, Git makes it easy to create very granular commits.\n\nCommitting often keeps your commits small and, again, helps you commit only related changes. Moreover, it allows you to share your code more frequently with others. That way it‘s easier for everyone to integrate changes regularly and avoid having merge conflicts. Having large commits and sharing them infrequently, in contrast, makes it hard to solve conflicts.\n\nYou should only commit code when a logical component is completed. Split a feature‘s implementation into logical chunks that can be completed quickly so that you can commit often. If you‘re tempted to commit just because you need a clean working copy (to check out a branch, pull in changes, etc.) consider using Git‘s «Stash» feature instead.\n\nResist the temptation to commit something that you «think» is completed. Test it thoroughly to make sure it really is completed and has no side effects (as far as one can tell). While committing half-baked things in your local repository only requires you to forgive yourself, having your code tested is even more important when it comes to pushing/sharing your code with others.\n\nBegin your message with a short summary of your changes (up to 50 characters as a guideline). Separate it from the following body by including a blank line. The body of your message should provide detailed answers to the following questions: – What was the motivation for the change? – How does it differ from the previous implementation? Use the imperative, present tense («change», not «changed» or «changes») to be consistent with generated messages from commands like git merge. Having your files backed up on a remote server is a nice side effect of having a version control system. But you should not use your VCS like it was a backup system. When doing version control, you should pay attention to committing semantically (see «related changes») - you shouldn‘t just cram in files.\n\nBranching is one of Git‘s most powerful features - and this is not by accident: quick and easy branching was a central requirement from day one. Branches are the perfect tool to help you avoid mixing up different lines of development. You should use branches extensively in your development workflows: for new features, bug fixes, ideas...\n\nGit lets you pick from a lot of different workflows: long-running branches, topic branches, merge or rebase, git-flow... Which one you choose depends on a couple of factors: your project, your overall development and deployment workflows and (maybe most importantly) on your and your teammates‘ personal preferences. However you choose to work, just make sure to agree on a common workflow that everyone follows.\n\nThe following document is based on experience doing code development, bug troubleshooting and code review across a number of projects using GIT, including libvirt, QEMU and OpenStack Nova. Examination of other open source projects such as the Kernel, CoreUtils, GNULIB and more suggested they all follow a fairly common practice. It is motivated by a desire to improve the quality of the Nova GIT history. Quality is a hard term to define in computing; one man's \"Thing of Beauty\" is another man's \"Evil Hack\". We can, however, come up with some general guidelines for what to do, or conversely what not to do, when publishing GIT commits for merge with a project, in this case, OpenStack.\n\nThis topic can be split into two areas of concern\n• The structured set/split of the code changes\n• The information provided in the commit message\n• More detailed explanatory text, if necessary. Wrap it to about 72 characters. In some contexts, the first line is treated as the subject of an email and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); tools like rebase can get confused if you run the two together.\n• Always leave the second line blank.\n• Write your commit message in the imperative: \"Fix bug\" and not \"Fixed bug\" or \"Fixes bug.\" This convention matches up with commit messages generated by commands like git merge and git revert.\n• Further paragraphs come after blank lines.\n• Bullet points are okay, too\n• Typically a hyphen or asterisk is used for the bullet, preceded by a single space, with blank lines in between, but conventions vary here\n\nExample 1 (no description, only summary)"
    },
    {
        "link": "https://stackoverflow.com/questions/26983700/git-run-shell-command-for-each-commit",
        "document": "I would like to walk through a range of commits and perform a shell command on each. If the command fails, I would like the walk to stop, otherwise keep going. I have looked at , but I don't want to re-write the commits, just check them out. does not seem to allow you to specify a range to act on.\n\nMy specific problem is that I created a bunch of commits and I would like to ensure that each commit is buildable. I would like to do something like:\n\nI could of course write a shell script to do this, but it seems like the sort of thing that git might have a nice way to do."
    },
    {
        "link": "https://comptia.org/blog/linux-and-git",
        "document": ""
    },
    {
        "link": "https://medium.com/@catalinaturlea/clean-git-history-a-step-by-step-guide-eefc0ad8696d",
        "document": "Steps to get to a clean commit history:\n• understand rebase and replace pulling remote changes with rebase to remove merge commits on your working branch\n• use fast-forward or squash merging option when adding your changes to the target branch\n• use atomic commits — learn how to amend, squash or restructure your commits\n\nThis would be the common scenario I am sure you can relate to: you are working on finishing your tasks on a separate branch while the rest of the team is doing the same — either working on their own branches or have already merged new changes into the shared branch.\n\nYou already have a few commits but an important change has been made on the shared branch which you need to continue your work (or another team member worked on the same file and you have a conflict when creating the pull request).\n\nYou have here 2 options:\n• you merge the shared branch into yours resulting in a merge commit which contains the changes between the remote branch and your commits since the last commit you have in common. If you have conflicts , your need to solve them and then commit.\n• you rebase your commits on top of the remote branch — what this does is that it takes the latest commit on your shared_branch and then applies, one by one the commits from your working branch. If you have conflicts on any of the commits, your need to solve them and then continue the rebase.\n\nThe output might look something like this if you have conflicts\n\nIf your local branch had already been pushed to remote, you will need to force push after the rebase. This will replace the old remote version with the newly rebased and updated one of your local branch.\n\nThe results for the 2 operations are the following:\n\nAlthough this is a very simple example, you can definitely see that the rebased branch history is so much easier to understand, read and the relationship between the branches can be grasped in a second. The same goes for the order of the commits.\n\nMerging working branches into your shared branch — e.g development or master\n\nNow you have created your pull request and the review went through and you want to merge it to the shared branch. If you are using bitbucket or github, both platforms have options when merging a PR about how the commit on the shared/target branch should look like.\n\nIf you would like to do this manually, here’s the git commands for it:\n\nThen the shared branch would look like this:\n\nThe bitbucket option for this flow was added just during the course of writing this article.\n\nIf your source branch has only one commit, the squash and fast forward merges will have the same result. The fast-forward merge is more strict though, your branch needs to be rebased on the shared branch before this can succeed. This is not necessary for squash, excluding the case where there are conflicts.\n\nOne other thing you can do to make sure your git history is as meaningful as possible and it contains atomic steps in the development is to rework your commits when necessary.\n\n⚠️This should only happen before the PR, never on the shared branch (master or development)\n• you need to make small changes to the previous commit — which are not meaningful on their own — like typos, extra spaces etc.\n• you realized you can reorganize your commits better to ease review and understanding for your team.\n• there are conflicts to the target branch in a file/files you have modified in multiple commits on your branch — meaning you will have to solve the conflicts on every single step of the rebase. So why not make your life easier and put all those changes that might cause the conflict into one commit and only fix them once? 🤷‍♀️\n\nLet’s go through the available options and to which cases these would be more convenient:\n• Interactive rebase — this allows you the possibility to manipulate multiple commits at once\n\nRunning this in the terminal will end up looking something like the following:\n\nYou have the available commands listed above.\n\nA possible situation for using this would be if you had addressed the comments to your PR in various commits and you would like to group them together into one. \n\nAn even more interesting situation would be when you want to change something in a commit that is not the last one — which is covered with then amend option.\n• Reverting to a previous commit and reordering the changes into one or more new commits\n\nWith this option you can completely rearrange one or more commits you have already made. You can reset to the shared branch and then commit all the changes in one big commit or in multiple smaller ones.\n\nIf you have significant changes and there are merge conflicts with the target branch, you can use this option to reduce the amount of times you need to fix the conflicts — for example, only once instead on at every rebase step.\n\nThis will add the new changes to the previous state of the last commit on your branch.\n\nThe commit will have a new hash and if the branch had already been pushed to remote you will need to force push afterwards. This option can also be used without any changes when you want your commit to appear new — for example, to trigger some web hook in your CI."
    }
]