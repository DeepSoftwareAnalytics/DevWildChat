[
    {
        "link": "https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/accessing-github-using-two-factor-authentication",
        "document": "With two-factor authentication (2FA) enabled, you'll need to use a second factor when accessing GitHubthrough your browser. When you first configure 2FA, your account will enter a check up period for 28 days to ensure your account's 2FA methods are setup correctly. You can exit the check up period by successfully performing 2FA within 28 days. If you don't authenticate within 28 days, you'll be asked to perform 2FA inside one of your existing GitHub sessions. If you cannot perform 2FA to pass the 28th day checkup, use the provided shortcut to reconfigure your 2FA settings and retain access to GitHub. For more information, see Configuring two-factor authentication.\n\nIf you access GitHub using other methods, such as the API or the command line, you'll authenticate using a token, application, or SSH key. For more information, see About authentication to GitHub.\n\nPerforming 2FA when signing in to the website\n\nAfter you sign in to GitHub using your password, you'll need to provide an authentication code, tap a notification in GitHub Mobile, or use a security key to perform 2FA.\n\nGitHub will only ask you to provide your 2FA authentication code again if you've logged out, are using a new device, are performing a sensitive action, or your session expires. For more information on 2FA for sensitive actions, see Sudo mode.\n\nIf you chose to set up two-factor authentication using a TOTP application, you can generate an authentication code for GitHub at any time. In most cases, just launching the application will generate a new code. You should refer to your application's documentation for specific instructions.\n\nIf you delete your authenticator application after configuring two-factor authentication, you'll need to provide your recovery code to get access to your account. Many TOTP apps support the secure backup of your authentication codes in the cloud and can be restored if you lose access to your device. For more information, see Recovering your account if you lose your 2FA credentials.\n\nIf you've set up a security key on your account, and your browser supports security keys, you can use it to complete your sign in.\n• Using your username and password, sign in to GitHub through your browser.\n• If you use a physical security key, ensure it's connected to your device.\n• To trigger the security key prompt from your operating system, select \"Use security key.\"\n• Select the appropriate option in the prompt. Depending on your security key configuration, you may type a PIN, complete a biometric prompt, or use a physical security key.\n\nIf you have enabled 2FA, and you have added a passkey to your account, you can use the passkey to sign in. Since passkeys satisfy both password and 2FA requirements, you can complete your sign in with a single step. See About passkeys.\n\nIf you set up two-factor authentication via text messages, GitHub will send you a text message with your authentication code.\n\nIf you have installed and signed in to GitHub Mobile, you may choose to authenticate with GitHub Mobile for two-factor authentication.\n• Sign in to GitHub with your browser, using your username and password.\n• GitHub will send you a push notification to verify your sign in attempt. Opening the push notification or opening the GitHub Mobile app will display a prompt, asking you to approve or reject this sign in attempt. This prompt may require you to enter a two-digit number displayed within the browser you are signing in to.\n• Upon approving the login attempt using GitHub Mobile, your browser will complete the sign in attempt automatically.\n• Rejecting the sign in attempt will prevent the authentication from finishing. For more information, see Keeping your account and data secure.\n\nUsing two-factor authentication with the command line\n\nAuthenticating on the command line using Git Credential Manager\n\nGit Credential Manager is a secure Git credential helper that runs on Windows, macOS, and Linux. For more information about Git credential helpers, see Avoiding repetition in the Pro Git book.\n\nSetup instructions vary based on your computer's operating system. For more information, see Download and install in the GitCredentialManager/git-credential-manager repository.\n\nAuthenticating on the command line using HTTPS\n\nYou must create a personal access token to use as a password when authenticating to GitHub on the command line using HTTPS URLs.\n\nWhen prompted for a username and password on the command line, use your GitHub username and personal access token. The command line prompt won't specify that you should enter your personal access token when it asks for your password.\n\nFor more information, see Managing your personal access tokens.\n\nAuthenticating on the command line using SSH\n\nEnabling 2FA doesn't change how you authenticate to GitHub on the command line using SSH URLs. For more information about setting up and using an SSH key, see Connecting to GitHub with SSH.\n\nIf you lose access to your two-factor authentication credentials, you can use your recovery codes or another recovery method (if you've set one up) to regain access to your account. For more information, see Recovering your account if you lose your 2FA credentials.\n\nIf your authentication fails several times, you may wish to synchronize your phone's clock with your mobile provider. Often, this involves checking the \"Set automatically\" option on your phone's clock, rather than providing your own time zone.\n• Recovering your account if you lose your 2FA credentials"
    },
    {
        "link": "https://docs.github.com/en/authentication/securing-your-account-with-two-factor-authentication-2fa/configuring-two-factor-authentication",
        "document": "As of March 2023, GitHub required all users who contribute code on GitHub.com to enable one or more forms of two-factor authentication (2FA). If you were in an eligible group, you would have received a notification email when that group was selected for enrollment, marking the beginning of a 45-day 2FA enrollment period, and you would have seen banners asking you to enroll in 2FA on GitHub.com. If you didn't receive a notification, then you were not part of a group required to enable 2FA, though we strongly recommend it. For more information about the 2FA enrollment rollout, see this blog post.\n\nYou can configure two-factor authentication (2FA) using a TOTP app on mobile or desktop or via text message. After you have configured 2FA using a TOTP app or via text message, you can then also add security keys as alternate 2FA methods.\n\nWe strongly recommend using a time-based one-time password (TOTP) application to configure 2FA, and security keys as backup methods instead of SMS. TOTP applications are more reliable than SMS, especially for locations outside the United States. Many TOTP apps support the secure backup of your authentication codes in the cloud and can be restored if you lose access to your device.\n\nAfter you configure 2FA, your account will enter a 28-day check up period. You can leave the check up period by successfully performing 2FA in those 28 days. Otherwise, you will be prompted to perform 2FA in an existing GitHub session on the 28th day. If you cannot perform 2FA to pass the checkup, you must use the provided shortcut to reconfigure your 2FA settings and retain access to GitHub.\n\nIf you're a member of an enterprise with managed users, you cannot configure 2FA for your managed user account account unless you're signed in as the setup user. For users other than the setup user, an administrator must configure 2FA on your identity provider (IdP).\n\nA time-based one-time password (TOTP) application automatically generates an authentication code that changes after a certain period of time. These apps can be downloaded to your phone or desktop. We recommend using cloud-based TOTP apps. GitHub is app-agnostic when it comes to TOTP apps, so you have the freedom to choose any TOTP app you prefer. Just search for in your browser to find various options. You can also refine your search by adding keywords like or to match your preferences.\n• Download a TOTP app of your choice to your phone or desktop.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• In the \"Two-factor authentication\" section of the page, click Enable two-factor authentication.\n• Under \"Scan the QR code\", do one of the following:\n• Scan the QR code with your mobile device's app. After scanning, the app displays a six-digit code that you can enter on GitHub.\n• If you can't scan the QR code, click setup key to see a code, the TOTP secret, that you can manually enter in your TOTP app instead.\n• The TOTP application saves your account on GitHub.com and generates a new authentication code every few seconds. On GitHub, type the code into the field under \"Verify the code from the app.\"\n• Under \"Save your recovery codes\", click Download to download your recovery codes to your device. Save them to a secure location because your recovery codes can help you get back into your account if you lose access.\n• After saving your two-factor recovery codes, click I have saved my recovery codes to enable two-factor authentication for your account.\n• Optionally, you can configure additional 2FA methods to reduce your risk of account lockout. For more details on how to configure each additional method, see Configuring two-factor authentication using a security key and Configuring two-factor authentication using GitHub Mobile.\n\nIf you are unable to scan the setup QR code or wish to setup a TOTP app manually and require the parameters encoded in the QR code, they are:\n• Label: where is your handle on GitHub, for example\n• Secret: This is the encoded setup key, shown if you click \"Setup key\" during configuration\n• Algorithm: The default of SHA1 is used\n• Digits: The default of 6 is used\n• Period: The default of 30 (seconds) is used\n\nIf you're unable to configure a TOTP app, you can also register your phone number to receive SMS messages.\n\nBefore using this method, be sure that you can receive text messages. Carrier rates may apply.\n\nWe strongly recommend using a TOTP application for two-factor authentication instead of SMS, and security keys as backup methods instead of SMS. GitHub doesn't support sending SMS messages to phones in every country. Before configuring authentication via text message, review the list of countries where GitHub supports authentication via SMS. For more information, see Countries where SMS authentication is supported. Organizations and enterprises have the ability to prevent content access to members who have SMS 2FA configured. If you are a member of any organization or enterprise that has made this decision, you should enable TOTP application-configured 2FA instead. Outside collaborators may not enable SMS 2FA if their organization or enterprise has disallowed it. To continue working on content within an organization, enable 2FA with a TOTP application and disable SMS 2FA.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• In the \"Two-factor authentication\" section of the page, click Enable two-factor authentication.\n• Complete the CAPTCHA challenge, which helps protect against spam and abuse.\n• Under \"Verify account\", select your country code and type your mobile phone number, including the area code. When your information is correct, click Send authentication code.\n• You'll receive a text message with a security code. On GitHub, type the code into the field under \"Verify the code sent to your phone\" and click Continue.\n• If you need to edit the phone number you entered, you'll need to complete another CAPTCHA challenge.\n• Under \"Save your recovery codes\", click Download to download your recovery codes to your device. Save them to a secure location because your recovery codes can help you get back into your account if you lose access.\n• After saving your two-factor recovery codes, click I have saved my recovery codes to enable two-factor authentication for your account.\n• Optionally, you can configure additional 2FA methods to reduce your risk of account lockout. For more details on how to configure each additional method, see Configuring two-factor authentication using a security key and Configuring two-factor authentication using GitHub Mobile.\n\nPasskeys allow you to sign in securely to GitHub in your browser, without having to input your password.\n\nIf you use two-factor authentication (2FA), passkeys satisfy both password and 2FA requirements, so you can complete your sign in with a single step. If you don't use 2FA, using a passkey will skip the requirement to verify a new device via email. You can also use passkeys for sudo mode and resetting your password. See About passkeys.\n• You must have already configured 2FA via a TOTP mobile app or via SMS.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• If prompted, authenticate with your password, or use another existing authentication method.\n• Under “Configure passwordless authentication”, review the prompt, then click Add passkey.\n• At the prompt, follow the steps outlined by the passkey provider.\n• On the next page, review the information confirming that a passkey was successfully registered, then click Done.\n\nNot all FIDO authenticators can be used as passkeys, but you can still register those authenticators as security keys. Security keys are also WebAuthn credentials, but unlike passkeys they don't require user validation. Since security keys only need to verify user presence, they only count as a second factor and must be used in conjunction with your password.\n\nRegistering a security key for your account is available after enabling 2FA with a TOTP application or a text message. If you lose your security key, you'll still be able to use your phone's code to sign in.\n• You must have already configured 2FA via a TOTP mobile app or via SMS.\n• Ensure that you have a WebAuthn compatible security key inserted into your device.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• Type a nickname for the security key, then click Add.\n• Following your security key's documentation, activate your security key.\n• Confirm that you've downloaded and can access your recovery codes. If you haven't already, or if you'd like to generate another set of codes, download your codes and save them in a safe place. For more information, see Configuring two-factor authentication recovery methods.\n\nYou can use GitHub Mobile for 2FA when signing into your GitHub account in a web browser. 2FA with GitHub Mobile does not rely on TOTP, and instead uses public-key cryptography to secure your account.\n\nOnce you have configured a TOTP application, or SMS, you can also use GitHub Mobile to authenticate. If, in the future, you no longer have access to GitHub Mobile, you will still be able to use security keys or TOTP applications to sign in.\n• You must have already configured 2FA via a TOTP mobile app or via SMS.\n• Sign in to your GitHub account from GitHub Mobile.\n• Ensure GitHub Mobile can send push notifications. If you have not opted in to push notifications, you can turn them on within notification settings in GitHub Mobile.\n\nAfter signing in and turning on push notifications, you can now use your device for 2FA.\n• Recovering your account if you lose your 2FA credentials"
    },
    {
        "link": "https://docs.github.com/en/enterprise-server@3.14/authentication/securing-your-account-with-two-factor-authentication-2fa/accessing-github-using-two-factor-authentication",
        "document": "With two-factor authentication enabled, you'll need to provide an authentication code or use a security key when accessing GitHub through your browser. If you access GitHub using other methods, such as the API or the command line, you'll need to use an alternative form of authentication. For more information, see About authentication to GitHub.\n\nPerforming 2FA when signing in to the website\n\nAfter you sign in to GitHub using your password, you'll need to provide an authentication code or use a security key to perform 2FA.\n\nGitHub will only ask you to provide your 2FA authentication code again if you've logged out, are using a new device, are performing a sensitive action, or your session expires. For more information on 2FA for sensitive actions, see Sudo mode.\n\nIf you chose to set up two-factor authentication using a TOTP application, you can generate an authentication code for GitHub at any time. In most cases, just launching the application will generate a new code. You should refer to your application's documentation for specific instructions.\n\nIf you delete your authenticator application after configuring two-factor authentication, you'll need to provide your recovery code to get access to your account. Many TOTP apps support the secure backup of your authentication codes in the cloud and can be restored if you lose access to your device. For more information, see Recovering your account if you lose your 2FA credentials.\n\nIf you've set up a security key on your account, and your browser supports security keys, you can use it to complete your sign in.\n• Using your username and password, sign in to GitHub through your browser.\n• If you use a physical security key, ensure it's connected to your device.\n• To trigger the security key prompt from your operating system, select \"Use security key.\"\n• Select the appropriate option in the prompt. Depending on your security key configuration, you may type a PIN, complete a biometric prompt, or use a physical security key.\n\nIf you have enabled 2FA, and you have added a passkey to your account, you can use the passkey to sign in. Since passkeys satisfy both password and 2FA requirements, you can complete your sign in with a single step. See About passkeys.\n\nUsing two-factor authentication with the command line\n\nAfter you've enabled 2FA, you will no longer use your password to access GitHub on the command line. Instead, use Git Credential Manager, a personal access token, or an SSH key.\n\nAuthenticating on the command line using Git Credential Manager\n\nGit Credential Manager is a secure Git credential helper that runs on Windows, macOS, and Linux. For more information about Git credential helpers, see Avoiding repetition in the Pro Git book.\n\nSetup instructions vary based on your computer's operating system. For more information, see Download and install in the GitCredentialManager/git-credential-manager repository.\n\nAuthenticating on the command line using HTTPS\n\nYou must create a personal access token to use as a password when authenticating to GitHub on the command line using HTTPS URLs.\n\nWhen prompted for a username and password on the command line, use your GitHub username and personal access token. The command line prompt won't specify that you should enter your personal access token when it asks for your password.\n\nFor more information, see Managing your personal access tokens.\n\nAuthenticating on the command line using SSH\n\nEnabling 2FA doesn't change how you authenticate to GitHub on the command line using SSH URLs. For more information about setting up and using an SSH key, see Connecting to GitHub with SSH.\n\nIf you lose access to your two-factor authentication credentials, you can use your recovery codes or another recovery method (if you've set one up) to regain access to your account. For more information, see Recovering your account if you lose your 2FA credentials.\n\nIf your authentication fails several times, you may wish to synchronize your phone's clock with your mobile provider. Often, this involves checking the \"Set automatically\" option on your phone's clock, rather than providing your own time zone.\n• Recovering your account if you lose your 2FA credentials"
    },
    {
        "link": "https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/about-authentication-to-github",
        "document": "To keep your account secure, you must authenticate before you can access certain resources on GitHub. When you authenticate to GitHub, you supply or confirm credentials that are unique to you to prove that you are exactly who you declare to be.\n\nYou can access your resources in GitHub in a variety of ways: in the browser, via GitHub Desktop or another desktop application, with the API, or via the command line. Each way of accessing GitHub supports different modes of authentication.\n• Username and password with two-factor authentication, or a passkey\n\nIf you're a member of an enterprise with managed users, you will authenticate to GitHub in your browser using your IdP. For more information, see About Enterprise Managed Users in the GitHub Enterprise Cloud documentation.\n\nIf you're not a member of an enterprise with managed users, you will authenticate using your GitHub username and password, or a passkey. You may also use two-factor authentication and SAML single sign-on, which can be required by organization and enterprise owners.\n\nAs of March 2023, GitHub required all users who contribute code on GitHub.com to enable one or more forms of two-factor authentication (2FA). If you were in an eligible group, you would have received a notification email when that group was selected for enrollment, marking the beginning of a 45-day 2FA enrollment period, and you would have seen banners asking you to enroll in 2FA on GitHub.com. If you didn't receive a notification, then you were not part of a group required to enable 2FA, though we strongly recommend it. For more information about the 2FA enrollment rollout, see this blog post.\n\nIf you need to use multiple accounts on GitHub.com, such as a personal account and a service account, you can quickly switch between your accounts without always needing to reauthenticate each time. For more information, see Switching between accounts.\n• \n• You'll create a password when you create your account on GitHub. We recommend that you use a password manager to generate a random and unique password. For more information, see Creating a strong password.\n• If you have not enabled 2FA, GitHub may ask for additional verification when you first sign in from a new or unrecognized device, such as a new browser profile, a browser where the cookies have been deleted, or a new computer. For more information, see Verifying new devices when signing in.\n• \n• If you enable 2FA, after you successfully enter your username and password, we'll also prompt you to provide a code that's generated by a time-based one time password (TOTP) application on your mobile device or sent as a text message (SMS).\n• After you configure 2FA, your account enters a check up period for 28 days. You can leave the check up period by successfully performing 2FA within those 28 days. If you don't perform 2FA in that timespan, you'll then be asked to perform 2FA inside one of your existing GitHub sessions.\n• If you cannot perform 2FA to pass the 28th day checkup, you will be provided a shortcut that lets you reconfigure your 2FA settings. You must reconfigure your settings before you can access the rest of GitHub. For more information, see Accessing GitHub using two-factor authentication and Configuring two-factor authentication.\n• In addition to authentication with a TOTP application or a text message, you can optionally add an alternative method of authentication with GitHub Mobile or a security key using WebAuthn. See Configuring two-factor authentication using GitHub Mobile or Configuring two-factor authentication using a security key. If you cannot use any recovery methods, you have permanently lost access to your account. However, you can unlink an email address tied to the locked account. The unlinked email address can then be linked to a new or existing account. For more information, see Unlinking your email address from a locked account.\n• \n• You can add a passkey to your account to enable a secure, passwordless login. Passkeys satisfy both password and 2FA requirements, so you can complete your sign in with a single step. See About passkeys.\n• \n• Before you can access resources owned by an organization or enterprise account that uses SAML single sign-on, you may need to also authenticate through an IdP. For more information, see About authentication with SAML single sign-on in the GitHub Enterprise Cloud documentation.\n\nGitHub uses cookies to provide services and increase security. You can review details about GitHub's cookies in the privacy/cookies repository.\n• The gist.github.com and github.com domains use separate cookies.\n• GitHub typically marks a user session for deletion after two weeks of inactivity.\n• GitHub does not immediately delete a session when you sign out. Periodically, GitHub automatically deletes expired sessions.\n\nYou can authenticate with GitHub Desktop using your browser. For more information, see Authenticating to GitHub in GitHub Desktop.\n\nYou can authenticate with the API in different ways. For more information, see Authenticating to the REST API.\n\nAuthenticating to the API with a personal access token\n\nIf you want to use the GitHub REST API for personal use, you can create a personal access token. If possible, GitHub recommends that you use a fine-grained personal access token instead of a personal access token (classic). For more information about creating a personal access token, see Managing your personal access tokens.\n\nAuthenticating to the API with an app\n\nIf you want to use the API on behalf of an organization or another user, GitHub recommends that you use a GitHub App. For more information, see About authentication with a GitHub App.\n\nYou can also create an OAuth token with an OAuth app to access the REST API. However, GitHub recommends that you use a GitHub App instead. GitHub Apps allow more control over the access and permission that the app has.\n\nAuthenticating to the API in a GitHub Actions workflow\n\nIf you want to use the API in a GitHub Actions workflow, GitHub recommends that you authenticate with the built-in instead of creating a token. You can grant permissions to the with the key.\n\nNote that can only access resources within the repository that contains the workflow. If you need to make changes to resources outside of the workflow repository, you will need to use a personal access token or GitHub App.\n\nFor more information, see Automatic token authentication.\n\nYou can access repositories on GitHub from the command line in two ways, HTTPS and SSH, and both have a different way of authenticating. The method of authenticating is determined based on whether you choose an HTTPS or SSH remote URL when you clone the repository. For more information about which way to access, see About remote repositories.\n\nYou can work with all repositories on GitHub over HTTPS, even if you are behind a firewall or proxy.\n\nIf you authenticate with GitHub CLI, you can either authenticate with a personal access token or via the web browser. For more information about authenticating with GitHub CLI, see .\n\nIf you authenticate without GitHub CLI, you must authenticate with a personal access token. When Git prompts you for your password, enter your personal access token. Alternatively, you can use a credential helper like Git Credential Manager. Password-based authentication for Git has been removed in favor of more secure authentication methods. For more information, see Managing your personal access tokens. Every time you use Git to authenticate with GitHub, you'll be prompted to enter your credentials, unless you cache them with a credential helper.\n\nYou can work with all repositories on GitHub over SSH, although firewalls and proxies might refuse to allow SSH connections.\n\nIf you authenticate with GitHub CLI, the CLI will find SSH public keys on your machine and will prompt you to select one for upload. If GitHub CLI does not find a SSH public key for upload, it can generate a new SSH public/private keypair and upload the public key to your account on GitHub.com. Then, you can either authenticate with a personal access token or via the web browser. For more information about authenticating with GitHub CLI, see .\n\nIf you authenticate without GitHub CLI, you will need to generate an SSH public/private keypair on your local machine and add the public key to your account on GitHub.com. For more information, see Generating a new SSH key and adding it to the ssh-agent. Every time you use Git to authenticate with GitHub, you'll be prompted to enter your SSH key passphrase, unless you've stored the key.\n\nTo use a personal access token or SSH key to access resources owned by an organization that uses SAML single sign-on, you must also authorize the personal token or SSH key. For more information, see Authorizing a personal access token for use with SAML single sign-on or Authorizing an SSH key for use with SAML single sign-on in the GitHub Enterprise Cloud documentation.\n\nGitHub issues tokens that begin with a prefix to indicate the token's type."
    },
    {
        "link": "https://docs.github.com/articles/configuring-two-factor-authentication",
        "document": "As of March 2023, GitHub required all users who contribute code on GitHub.com to enable one or more forms of two-factor authentication (2FA). If you were in an eligible group, you would have received a notification email when that group was selected for enrollment, marking the beginning of a 45-day 2FA enrollment period, and you would have seen banners asking you to enroll in 2FA on GitHub.com. If you didn't receive a notification, then you were not part of a group required to enable 2FA, though we strongly recommend it. For more information about the 2FA enrollment rollout, see this blog post.\n\nYou can configure two-factor authentication (2FA) using a TOTP app on mobile or desktop or via text message. After you have configured 2FA using a TOTP app or via text message, you can then also add security keys as alternate 2FA methods.\n\nWe strongly recommend using a time-based one-time password (TOTP) application to configure 2FA, and security keys as backup methods instead of SMS. TOTP applications are more reliable than SMS, especially for locations outside the United States. Many TOTP apps support the secure backup of your authentication codes in the cloud and can be restored if you lose access to your device.\n\nAfter you configure 2FA, your account will enter a 28-day check up period. You can leave the check up period by successfully performing 2FA in those 28 days. Otherwise, you will be prompted to perform 2FA in an existing GitHub session on the 28th day. If you cannot perform 2FA to pass the checkup, you must use the provided shortcut to reconfigure your 2FA settings and retain access to GitHub.\n\nIf you're a member of an enterprise with managed users, you cannot configure 2FA for your managed user account account unless you're signed in as the setup user. For users other than the setup user, an administrator must configure 2FA on your identity provider (IdP).\n\nA time-based one-time password (TOTP) application automatically generates an authentication code that changes after a certain period of time. These apps can be downloaded to your phone or desktop. We recommend using cloud-based TOTP apps. GitHub is app-agnostic when it comes to TOTP apps, so you have the freedom to choose any TOTP app you prefer. Just search for in your browser to find various options. You can also refine your search by adding keywords like or to match your preferences.\n• Download a TOTP app of your choice to your phone or desktop.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• In the \"Two-factor authentication\" section of the page, click Enable two-factor authentication.\n• Under \"Scan the QR code\", do one of the following:\n• Scan the QR code with your mobile device's app. After scanning, the app displays a six-digit code that you can enter on GitHub.\n• If you can't scan the QR code, click setup key to see a code, the TOTP secret, that you can manually enter in your TOTP app instead.\n• The TOTP application saves your account on GitHub.com and generates a new authentication code every few seconds. On GitHub, type the code into the field under \"Verify the code from the app.\"\n• Under \"Save your recovery codes\", click Download to download your recovery codes to your device. Save them to a secure location because your recovery codes can help you get back into your account if you lose access.\n• After saving your two-factor recovery codes, click I have saved my recovery codes to enable two-factor authentication for your account.\n• Optionally, you can configure additional 2FA methods to reduce your risk of account lockout. For more details on how to configure each additional method, see Configuring two-factor authentication using a security key and Configuring two-factor authentication using GitHub Mobile.\n\nIf you are unable to scan the setup QR code or wish to setup a TOTP app manually and require the parameters encoded in the QR code, they are:\n• Label: where is your handle on GitHub, for example\n• Secret: This is the encoded setup key, shown if you click \"Setup key\" during configuration\n• Algorithm: The default of SHA1 is used\n• Digits: The default of 6 is used\n• Period: The default of 30 (seconds) is used\n\nIf you're unable to configure a TOTP app, you can also register your phone number to receive SMS messages.\n\nBefore using this method, be sure that you can receive text messages. Carrier rates may apply.\n\nWe strongly recommend using a TOTP application for two-factor authentication instead of SMS, and security keys as backup methods instead of SMS. GitHub doesn't support sending SMS messages to phones in every country. Before configuring authentication via text message, review the list of countries where GitHub supports authentication via SMS. For more information, see Countries where SMS authentication is supported. Organizations and enterprises have the ability to prevent content access to members who have SMS 2FA configured. If you are a member of any organization or enterprise that has made this decision, you should enable TOTP application-configured 2FA instead. Outside collaborators may not enable SMS 2FA if their organization or enterprise has disallowed it. To continue working on content within an organization, enable 2FA with a TOTP application and disable SMS 2FA.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• In the \"Two-factor authentication\" section of the page, click Enable two-factor authentication.\n• Complete the CAPTCHA challenge, which helps protect against spam and abuse.\n• Under \"Verify account\", select your country code and type your mobile phone number, including the area code. When your information is correct, click Send authentication code.\n• You'll receive a text message with a security code. On GitHub, type the code into the field under \"Verify the code sent to your phone\" and click Continue.\n• If you need to edit the phone number you entered, you'll need to complete another CAPTCHA challenge.\n• Under \"Save your recovery codes\", click Download to download your recovery codes to your device. Save them to a secure location because your recovery codes can help you get back into your account if you lose access.\n• After saving your two-factor recovery codes, click I have saved my recovery codes to enable two-factor authentication for your account.\n• Optionally, you can configure additional 2FA methods to reduce your risk of account lockout. For more details on how to configure each additional method, see Configuring two-factor authentication using a security key and Configuring two-factor authentication using GitHub Mobile.\n\nPasskeys allow you to sign in securely to GitHub in your browser, without having to input your password.\n\nIf you use two-factor authentication (2FA), passkeys satisfy both password and 2FA requirements, so you can complete your sign in with a single step. If you don't use 2FA, using a passkey will skip the requirement to verify a new device via email. You can also use passkeys for sudo mode and resetting your password. See About passkeys.\n• You must have already configured 2FA via a TOTP mobile app or via SMS.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• If prompted, authenticate with your password, or use another existing authentication method.\n• Under “Configure passwordless authentication”, review the prompt, then click Add passkey.\n• At the prompt, follow the steps outlined by the passkey provider.\n• On the next page, review the information confirming that a passkey was successfully registered, then click Done.\n\nNot all FIDO authenticators can be used as passkeys, but you can still register those authenticators as security keys. Security keys are also WebAuthn credentials, but unlike passkeys they don't require user validation. Since security keys only need to verify user presence, they only count as a second factor and must be used in conjunction with your password.\n\nRegistering a security key for your account is available after enabling 2FA with a TOTP application or a text message. If you lose your security key, you'll still be able to use your phone's code to sign in.\n• You must have already configured 2FA via a TOTP mobile app or via SMS.\n• Ensure that you have a WebAuthn compatible security key inserted into your device.\n• In the upper-right corner of any page on GitHub, click your profile photo, then click Settings.\n• In the \"Access\" section of the sidebar, click Password and authentication.\n• Type a nickname for the security key, then click Add.\n• Following your security key's documentation, activate your security key.\n• Confirm that you've downloaded and can access your recovery codes. If you haven't already, or if you'd like to generate another set of codes, download your codes and save them in a safe place. For more information, see Configuring two-factor authentication recovery methods.\n\nYou can use GitHub Mobile for 2FA when signing into your GitHub account in a web browser. 2FA with GitHub Mobile does not rely on TOTP, and instead uses public-key cryptography to secure your account.\n\nOnce you have configured a TOTP application, or SMS, you can also use GitHub Mobile to authenticate. If, in the future, you no longer have access to GitHub Mobile, you will still be able to use security keys or TOTP applications to sign in.\n• You must have already configured 2FA via a TOTP mobile app or via SMS.\n• Sign in to your GitHub account from GitHub Mobile.\n• Ensure GitHub Mobile can send push notifications. If you have not opted in to push notifications, you can turn them on within notification settings in GitHub Mobile.\n\nAfter signing in and turning on push notifications, you can now use your device for 2FA.\n• Recovering your account if you lose your 2FA credentials"
    },
    {
        "link": "https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",
        "document": "You can access and write data in repositories on GitHub using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine. For more information, see About SSH.\n\nWhen you generate an SSH key, you can add a passphrase to further secure the key. Whenever you use the key, you must enter the passphrase. If your key has a passphrase and you don't want to enter the passphrase every time you use the key, you can add your key to the SSH agent. The SSH agent manages your SSH keys and remembers your passphrase.\n\nIf you don't already have an SSH key, you must generate a new SSH key to use for authentication. If you're unsure whether you already have an SSH key, you can check for existing keys. For more information, see Checking for existing SSH keys.\n\nIf you want to use a hardware security key to authenticate to GitHub, you must generate a new SSH key for your hardware security key. You must connect your hardware security key to your computer when you authenticate with the key pair. For more information, see the OpenSSH 8.2 release notes.\n\nYou can generate a new SSH key on your local machine. After you generate the key, you can add the public key to your account on GitHub.com to enable authentication for Git operations over SSH.\n\nAs of that date, DSA keys ( ) are no longer supported. You cannot add new DSA keys to your personal account on GitHub. RSA keys ( ) with a before November 2, 2021 may continue to use any signature algorithm. RSA keys generated after that date must use a SHA-2 signature algorithm. Some older clients may need to be upgraded in order to use SHA-2 signatures.\n• Paste the text below, replacing the email used in the example with your GitHub email address. If you are using a legacy system that doesn't support the Ed25519 algorithm, use: This creates a new SSH key, using the provided email as a label. When you're prompted to \"Enter a file in which to save the key\", you can press Enter to accept the default file location. Please note that if you created SSH keys previously, ssh-keygen may ask you to rewrite another key, in which case we recommend creating a custom-named SSH key. To do so, type the default file location and replace id_ALGORITHM with your custom key name. > Enter file which to save the key (/c/Users/YOU/.ssh/id_ALGORITHM):[ ]\n• At the prompt, type a secure passphrase. For more information, see Working with SSH key passphrases. Enter same passphrase again: [Type passphrase again]\n\nAdding your SSH key to the ssh-agent\n\nBefore adding a new SSH key to the ssh-agent to manage your keys, you should have checked for existing SSH keys and generated a new SSH key. When adding your SSH key to the agent, use the default macOS command, and not an application installed by macports, homebrew, or some other external source.\n• Start the ssh-agent in the background. Depending on your environment, you may need to use a different command. For example, you may need to use root access by running before starting the ssh-agent, or you may need to use or to run the ssh-agent.\n• If you're using macOS Sierra 10.12.2 or later, you will need to modify your file to automatically load keys into the ssh-agent and store passphrases in your keychain.\n• First, check to see if your file exists in the default location. The file /Users/YOU/.ssh/config does not exist.\n• If the file doesn't exist, create the file.\n• Open your file, then modify the file to contain the following lines. If your SSH key file has a different name or path than the example code, modify the filename or path to match your current setup.\n• If you chose not to add a passphrase to your key, you should omit the line.\n• If you see a error, add an additional line to the configuration's' section.\n• Add your SSH private key to the ssh-agent and store your passphrase in the keychain. If you created your key with a different name, or if you are adding an existing key that has a different name, replace id_ed25519 in the command with the name of your private key file. The option stores the passphrase in your keychain for you when you add an SSH key to the ssh-agent. If you chose not to add a passphrase to your key, run the command without the option. The option is in Apple's standard version of . In macOS versions prior to Monterey (12.0), the and flags used the syntax and , respectively. If you don't have Apple's standard version of installed, you may receive an error. For more information, see Error: ssh-add: illegal option -- apple-use-keychain. If you continue to be prompted for your passphrase, you may need to add the command to your file (or your file for bash).\n• Add the SSH public key to your account on GitHub. For more information, see Adding a new SSH key to your GitHub account.\n\nIf you are using macOS or Linux, you may need to update your SSH client or install a new SSH client prior to generating a new SSH key. For more information, see Error: Unknown key type.\n• Insert your hardware security key into your computer.\n• Paste the text below, replacing the email address in the example with the email address associated with your GitHub account. If the command fails and you receive the error or you may be using a hardware security key that does not support the Ed25519 algorithm. Enter the following command instead.\n• When you are prompted, touch the button on your hardware security key.\n• When you are prompted to \"Enter a file in which to save the key,\" press Enter to accept the default file location.\n• When you are prompted to type a passphrase, press Enter. Enter same passphrase again: [Type passphrase again]\n• Add the SSH public key to your account on GitHub. For more information, see Adding a new SSH key to your GitHub account."
    },
    {
        "link": "https://git-scm.com/book/en/v2/Git-on-the-Server-Generating-Your-SSH-Public-Key",
        "document": "Many Git servers authenticate using SSH public keys. In order to provide a public key, each user in your system must generate one if they don’t already have one. This process is similar across all operating systems. First, you should check to make sure you don’t already have a key. By default, a user’s SSH keys are stored in that user’s directory. You can easily check to see if you have a key already by going to that directory and listing the contents:\n\nYou’re looking for a pair of files named something like or and a matching file with a extension. The file is your public key, and the other file is the corresponding private key. If you don’t have these files (or you don’t even have a directory), you can create them by running a program called , which is provided with the SSH package on Linux/macOS systems and comes with Git for Windows:\n\nFirst it confirms where you want to save the key ( ), and then it asks twice for a passphrase, which you can leave empty if you don’t want to type a password when you use the key. However, if you do use a password, make sure to add the option; it saves the private key in a format that is more resistant to brute-force password cracking than is the default format. You can also use the tool to prevent having to enter the password each time.\n\nNow, each user that does this has to send their public key to you or whoever is administrating the Git server (assuming you’re using an SSH server setup that requires public keys). All they have to do is copy the contents of the file and email it. The public keys look something like this:\n\nFor a more in-depth tutorial on creating an SSH key on multiple operating systems, see the GitHub guide on SSH keys at https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent."
    },
    {
        "link": "https://ssh.com/academy/ssh/keygen",
        "document": "is a tool for creating new authentication key pairs for SSH. Such key pairs are used for automating logins, single sign-on, and for authenticating hosts.\n\nThe SSH protocol uses public key cryptography for authenticating hosts and users. The authentication keys, called SSH keys, are created using the program.\n\nSSH introduced public key authentication as a more secure alternative to the older authentication. It improved security by avoiding the need to have password stored in files, and eliminated the possibility of a compromised server stealing the user's password.\n\nHowever, SSH keys are authentication credentials just like passwords. Thus, they must be managed somewhat analogously to user names and passwords. They should have a proper termination process so that keys are removed when no longer needed.\n\nThe simplest way to generate a key pair is to run without arguments. In this case, it will prompt for the file in which to store keys. Here's an example:\n\nFirst, the tool asked where to save the file. SSH keys for user authentication are usually stored in the user's directory under the home directory. However, in enterprise environments, the location is often different. The default key file name depends on the algorithm, in this case when using the default RSA algorithm. It could also be, for example, or .\n\nThen it asks to enter a passphrase. The passphrase is used for encrypting the key, so that it cannot be used even if someone obtains the private key file. The passphrase should be cryptographically strong. Our online random password generator is one possible tool for generating strong passphrases.\n\nSSH supports several public key algorithms for authentication keys. These include:\n• - an old algorithm based on the difficulty of factoring large numbers. A key size of at least 2048 bits is recommended for RSA; 4096 bits is better. RSA is getting old and significant advances are being made in factoring. Choosing a different algorithm may be advisable. It is quite possible the RSA algorithm will become practically breakable in the foreseeable future. All SSH clients support this algorithm.\n• - an old US government Digital Signature Algorithm. It is based on the difficulty of computing discrete logarithms. A key size of 1024 would normally be used with it. DSA in its original form is no longer recommended.\n• - a new Digital Signature Algorithm standarized by the US government, using elliptic curves. This is probably a good algorithm for current applications. Only three key sizes are supported: 256, 384, and 521 (sic!) bits. We would recommend always using it with 521 bits, since the keys are still small and probably more secure than the smaller keys (even though they should be safe as well). Most SSH clients now support this algorithm.\n• - this is a new algorithm added in OpenSSH. Support for it in clients is not yet universal. Thus its use in general purpose applications may not yet be advisable.\n\nThe algorithm is selected using the option and key size using the option. The following commands illustrate:\n\nSpecifying the File Name\n\nNormally, the tool prompts for the file in which to store the key. However, it can also be specified on the command line using the option.\n\nCopying the Public Key to the Server\n\nTo use public key authentication, the public key must be copied to a server and installed in an authorized_keys file. This can be conveniently done using the ssh-copy-id tool. Like this:\n\nOnce the public key has been configured on the server, the server will allow any connecting user that has the private key to log in. During the login process, the client proves possession of the private key by digitally signing the key exchange.\n\nis a program that can hold a user's private key, so that the private key passphrase only needs to be supplied once. A connection to the agent can also be forwarded when logging into a server, allowing SSH commands on the server to use the agent running on the user's desktop.\n\nFor more information on using and configuring the SSH agent, see the ssh-agent page.\n\nThe tool is also used for creating host authentication keys. Host keys are stored in the directory.\n\nHost keys are just ordinary SSH key pairs. Each host can have one host key for each algorithm. The host keys are almost always stored in the following files:\n\nThe host keys are usually automatically generated when an SSH server is installed. They can be regenerated at any time. However, if host keys are changed, clients may warn about changed keys. Changed keys are also reported when someone tries to perform a man-in-the-middle attack. Thus it is not advisable to train your users to blindly accept them. Changing the keys is thus either best done using an SSH key management tool that also changes them on clients, or using certificates.\n\nOpenSSH does not support X.509 certificates. Tectia SSH does support them. X.509 certificates are widely used in larger organizations for making it easy to change host keys on a period basis while avoiding unnecessary warnings from clients. They also allow using strict host key checking, which means that the clients will outright refuse a connection if the host key has changed.\n\nOpenSSH has its own proprietary certificate format, which can be used for signing host certificates or user certificates. For user authentication, the lack of highly secure certificate authorities combined with the inability to audit who can access a server by inspecting the server makes us recommend against using OpenSSH certificates for user authentication.\n\nHowever, OpenSSH certificates can be very useful for server authentication and can achieve similar benefits as the standard X.509 certificates. However, they need their own infrastructure for certificate issuance.\n\nIt is easy to create and configure new SSH keys. In the default configuration, OpenSSH allows any user to configure new keys. The keys are permanent access credentials that remain valid even after the user's account has been deleted.\n\nIn organizations with more than a few dozen users, SSH keys easily accumulate on servers and service accounts over the years. We have seen enterprises with several million keys granting access to their production servers. It only takes one leaked, stolen, or misconfigured key to gain access.\n\nIn any larger organization, use of SSH key management solutions is almost necessary. SSH keys should also be moved to root-owned locations with proper provisioning and termination processes. For more information, see how to manage SSH keys. A widely used SSH key management tool for OpenSSH is Universal SSH Key Manager.\n\nPractically all cybersecurity regulatory frameworks require managing who can access what. SSH keys grant access, and fall under this requirement. This, organizations under compliance mandates are required to implement proper management processes for the keys. NIST IR 7966 is a good starting point.\n\nMake Sure There Is Enough Randomness\n\nIt is important to ensure there is enough unpredictable entropy in the system when SSH keys are generated. There have been incidents when thousands of devices on the Internet have shared the same host key when they were improperly configured to generate the key without proper randomness.\n\nOn general purpose computers, randomness for SSH key generation is usually not a problem. It may be something of an issue when initially installing the SSH server and generating host keys, and only people building new Linux distributions or SSH installation packages generally need to worry about it.\n\nOur recommendation is to collect randomness during the whole installation of the operating system, save that randomness in a random seed file. Then boot the system, collect some more randomness during the boot, mix in the saved randomness from the seed file, and only then generate the host keys. This maximizes the use of the available randomness. And make sure the random seed file is periodically updated, in particular make sure that it is updated after generating the SSH host keys.\n\nMany modern general-purpose CPUs also have hardware random number generators. This helps a lot with this problem. The best practice is to collect some entropy in other ways, still keep it in a random seed file, and mix in some entropy from the hardware random number generator. This way, even if one of them is compromised somehow, the other source of randomness should keep the keys secure.\n\nAvailable entropy can be a real problem on small IoT devices that don't have much other activity on the system. They may just not have the mechanical randomness from disk drive mechanical movement timings, user-caused interrupts, or network traffic. Furthermore, embedded devices often run on low-end processors that may not have a hardware random number generator.\n\nThe availability of entropy is also critically important when such devices generate keys for HTTPS.\n\nOur recommendation is that such devices should have a hardware random number generator. If the CPU does not have one, it should be built onto the motherboard. The cost is rather small.\n\nHere's a summary of commonly used options to the keygen tool:\n\n-b “Bits” This option specifies the number of bits in the key. The regulations that govern the use case for SSH may require a specific key length to be used. In general, 2048 bits is considered to be sufficient for RSA keys.\n\n-e “Export” This option allows reformatting of existing keys between the OpenSSH key file format and the format documented in RFC 4716, “SSH Public Key File Format”.\n\n-p “Change the passphrase” This option allows changing the passphrase of a private key file with and , .\n\n-t “Type” This option specifies the type of key to be created. Commonly used values are: - rsa for RSA keys - dsa for DSA keys - ecdsa for elliptic curve DSA keys\n\n-i \"Input\" When ssh-keygen is required to access an existing key, this option designates the file.\n\n-f \"File\" Specifies name of the file in which to store the created key.\n\n-N \"New\" Provides a new passphrase for the key.\n\n-P \"Passphrase\" Provides the (old) passphrase when reading a key.\n\n-c \"Comment\" Changes the comment for a keyfile.\n\n-l \"Fingerprint\" Print the fingerprint of the specified public key.\n\n-F Search for a specified hostname in a known_hosts file.\n\n-R Remove all keys belonging to a hostname from a known_hosts file.\n\n-y Read a private OpenSSH format file and print an OpenSSH public key to stdout.\n\nThis only listed the most commonly used options. For full usage, including the more exotic and special-purpose options, use the command."
    },
    {
        "link": "https://atlassian.com/git/tutorials/git-ssh",
        "document": "SSH keys are generated through a public key cryptographic algorithm, the most common being RSA or DSA. At a very high level SSH keys are generated through a mathematical formula that takes 2 prime numbers and a random seed variable to output the public and private key. This is a one-way formula that ensures the public key can be derived from the private key but the private key cannot be derived from the public key. SSH keys are created using a key generation tool. The SSH command line tool suite includes a keygen tool. Most git hosting providers offer guides on how to create an SSH Key. Generate an SSH Key on Mac and Linux Both OsX and Linux operating systems have comprehensive modern terminal applications that ship with the SSH suite installed. The process for creating an SSH key is the same between them. 1. execute the following to begin the key creation\n\nThis command will create a new SSH key using the email as a label 2. You will then be prompted to \"Enter a file in which to save the key.\"\n\n You can specify a file location or press “Enter” to accept the default file location. > Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]\n\n 3. The next prompt will ask for a secure passphrase. A passphrase will add an additional layer of security to the SSH and will be required anytime the SSH key is used. If someone gains access to the computer that private keys are stored on, they could also gain access to any system that uses that key. Adding a passphrase to keys will prevent this scenario. > Enter passphrase (empty for no passphrase): [Type a passphrase]\n\n> Enter same passphrase again: [Type passphrase again] At this point, a new SSH key will have been generated at the previously specified file path. 4. Add the new SSH key to the ssh-agent The ssh-agent is another program that is part of the SSH toolsuite. The ssh-agent is responsible for holding private keys. Think of it like a keychain. In addition to holding private keys it also brokers requests to sign SSH requests with the private keys so that private keys are never passed around unsecurly. Before adding the new SSH key to the ssh-agent first ensure the ssh-agent is running by executing: Once the ssh-agent is running the following command will add the new SSH key to the local SSH agent. The new SSH key is now registered and ready to use!\n\nWindows environments do not have a standard default unix shell. External shell programs will need to be installed for to have a complete keygen experience. The most straight forward option is to utilize Git Bash. Once Git Bash is installed the same steps for Linux and Mac can be followed within the Git Bash shell.\n\nSSH keys are used to authenticate secure connections. Following this guide, you will be able to create and start using an SSH key. Git is capable of using SSH keys instead of traditional password authentication when pushing or pulling to remote repositories. Modern hosted git solutions like Bitbucket support SSH key authentication."
    },
    {
        "link": "https://docs.gitlab.com/user/ssh",
        "document": "Git is a distributed version control system, which means you can work locally, then share or push your changes to a server. In this case, the server you push to is GitLab.\n\nGitLab uses the SSH protocol to securely communicate with Git. When you use SSH keys to authenticate to the GitLab remote server, you don’t need to supply your username and password each time.\n\nSSH uses two keys, a public key and a private key.\n• The public key can be distributed.\n• The private key should be protected.\n\nIt is not possible to reveal confidential data by uploading your public key. When you need to copy or upload your SSH public key, make sure you do not accidentally copy or upload your private key instead.\n\nYou can use your private key to sign commits, which makes your use of GitLab and your data even more secure. This signature then can be verified by anyone using your public key.\n\nFor details, see Asymmetric cryptography, also known as public-key cryptography.\n\nTo use SSH to communicate with GitLab, you need:\n• The OpenSSH client, which comes pre-installed on GNU/Linux, macOS, and Windows 10.\n• SSH version 6.5 or later. Earlier versions used an MD5 signature, which is not secure.\n\nTo view the version of SSH installed on your system, run .\n\nTo communicate with GitLab, you can use the following SSH key types:\n• ECDSA (As noted in Practical Cryptography With Go, the security issues related to DSA also apply to ECDSA.)\n\nAdministrators can restrict which keys are permitted and their minimum lengths.\n\nThe book Practical Cryptography With Go suggests that ED25519 keys are more secure and performant than RSA keys.\n\nOpenSSH 6.5 introduced ED25519 SSH keys in 2014, and they should be available on most operating systems.\n\nTo use ED25519_SK SSH keys on GitLab, your local client and GitLab server must have OpenSSH 8.2 or later installed.\n\nTo use ECDSA_SK SSH keys on GitLab, your local client and GitLab server must have OpenSSH 8.2 or later installed.\n\nAvailable documentation suggests ED25519 is more secure than RSA.\n\nIf you use an RSA key, the US National Institute of Standards and Technology in Publication 800-57 Part 3 (PDF) recommends a key size of at least 2048 bits. Due to limitations in Go, RSA keys cannot exceed 8192 bits.\n\nThe default key size depends on your version of . Review the page for your installed command for details.\n\nSee if you have an existing SSH key pair\n\nBefore you create a key pair, see if a key pair already exists.\n• Go to your home directory.\n• Go to the subdirectory. If the subdirectory doesn’t exist, you are either not in the home directory, or you haven’t used before. In the latter case, you need to generate an SSH key pair.\n• See if a file with one of the following formats exists:\n\nIf you do not have an existing SSH key pair, generate a new one:\n• None Run followed by the key type and an optional comment. This comment is included in the file that’s created. You may want to use an email address for the comment. For example, for ED25519:\n• None Press . Output similar to the following is displayed: Enter file in which to save the key (/home/user/.ssh/id_ed25519):\n• None Accept the suggested filename and directory, unless you are generating a deploy key or want to save in a specific directory where you store other keys. You can also dedicate the SSH key pair to a specific host.\n• None A confirmation is displayed, including information about where your files are stored.\n\nA public and private key are generated. Add the public SSH key to your GitLab account and keep the private key secure.\n\nConfigure SSH to point to a different directory\n\nIf you did not save your SSH key pair in the default directory, configure your SSH client to point to the directory where the private key is stored.\n• None Save these settings in the file. For example:\n\nFor more information on these settings, see the page in the SSH configuration manual.\n\nPublic SSH keys must be unique to GitLab because they bind to your account. Your SSH key is the only identifier you have when you push code with SSH. It must uniquely map to a single user.\n\nYou can update the passphrase for your SSH key:\n• None At the prompts, enter the passphrase and then press .\n\nUpgrade your RSA key pair to a more secure format\n\nIf your version of OpenSSH is between 6.5 and 7.8, you can save your private RSA SSH keys in a more secure OpenSSH format by opening a terminal and running this command:\n\nAlternatively, you can generate a new RSA key with the more secure encryption format with the following command:\n\nTo generate ED25519_SK or ECDSA_SK SSH keys, you must use OpenSSH 8.2 or later:\n• None Run followed by the key type and an optional comment. This comment is included in the file that’s created. You may want to use an email address for the comment. For example, for ED25519_SK: If your security key supports FIDO2 resident keys, you can enable this when creating your SSH key: indicates that the key should be stored on the FIDO authenticator itself. Resident key is easier to import to a new computer because it can be loaded directly from the security key by or .\n• None Press . Output similar to the following is displayed: You may need to touch your authenticator to authorize key generation.\n• None Touch the button on the hardware security key.\n• None Enter file in which to save the key (/home/user/.ssh/id_ed25519_sk):\n• None A confirmation is displayed, including information about where your files are stored.\n\nA public and private key are generated. Add the public SSH key to your GitLab account.\n\nYou can use 1Password and the 1Password browser extension to either:\n• Use an existing SSH key in your 1Password vault to authenticate with GitLab.\n• On the left sidebar, select your avatar.\n• Select Key, and you should see the 1Password helper appear.\n• You can then select Create SSH Key or select an existing SSH key to fill in the public key.\n• In the Title box, enter a description, like or .\n• Optional. Select the Usage type of the key. It can be used either for or or both. is the default value.\n\nFor more information about using 1Password with SSH keys, see the 1Password documentation.\n\nAdd an SSH key to your GitLab account\n\nTo use SSH with GitLab, copy your public key to your GitLab account:\n• None Copy the contents of your public key file. You can do this manually or use a script. For example, to copy an ED25519 key to the clipboard: Replace with your filename. For example, use for RSA.\n• None On the left sidebar, select your avatar.\n• None In the Key box, paste the contents of your public key. If you manually copied the key, make sure you copy the entire key, which starts with , , , , , , , or , and may end with a comment.\n• None In the Title box, type a description, like or .\n• None Optional. Select the Usage type of the key. It can be used either for or or both. is the default value.\n• None\n• Administrators can view expiration dates and use them for guidance when deleting keys.\n• GitLab checks all SSH keys at 01:00 AM UTC every day. It emails an expiration notice for all SSH keys that are scheduled to expire seven days from now.\n• GitLab checks all SSH keys at 02:00 AM UTC every day. It emails an expiration notice for all SSH keys that expire on the current date.\n\nVerify that you can connect\n\nVerify that your SSH key was added correctly.\n\nThe following commands use the example hostname . Replace this example hostname with your GitLab instance’s hostname, for example, . By default, GitLab uses username to authenticate. It can be different if it was changed by the administrator.\n• None To ensure you’re connecting to the correct server, check the server’s SSH host keys fingerprint. For:\n• GitLab.com or another GitLab instance, see where is (for GitLab.com) or the address of the GitLab instance.\n• None Open a terminal and run this command, replacing with your GitLab instance URL:\n• None If this is the first time you connect, you should verify the authenticity of the GitLab host. If you see a message like: The authenticity of host 'gitlab.example.com (35.231.145.151)' can't be established. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added 'gitlab.example.com' (ECDSA) to the list of known hosts.\n• None Run the command again. You should receive a Welcome to GitLab, ! message.\n\nIf the welcome message doesn’t appear, you can troubleshoot by running in verbose mode:\n\nUse different keys for different repositories\n\nYou can use a different key for each repository.\n\nThis command does not use the SSH Agent and requires Git 2.10 or later. For more information on command options, see the pages for both and .\n\nTo view the SSH keys for your account:\n• On the left sidebar, select your avatar.\n\nYour existing SSH keys are listed at the bottom of the page. The information includes:\n• The title for the key\n\nYou can revoke or delete your SSH key to permanently remove it from your account.\n\nRemoving your SSH key has additional implications if you sign your commits with the key. For more information, see Signed commits with removed SSH keys.\n\nIf your SSH key becomes compromised, revoke the key.\n• The SSH key must have the or usage type.\n• On the left sidebar, select your avatar.\n• Next to the SSH key you want to revoke, select Revoke.\n• On the left sidebar, select your avatar.\n• Next to the key you want to delete, select Remove ( ).\n\nUse different accounts on a single GitLab instance\n\nYou can use multiple accounts to connect to a single instance of GitLab. You can do this by using the command in the previous topic. However, even if you set to , you cannot sign in if an exists outside of a block.\n\nInstead, you can assign aliases to hosts in the file.\n• For the , use an alias like and . Advanced configurations are more difficult to maintain, and these strings are easier to understand when you use tools like .\n• For the , use the path the private key.\n\nNow, to clone a repository for , use in the command:\n\nTo update a previously-cloned repository that is aliased as :\n\nYou can set up two-factor authentication (2FA) for Git over SSH. You should use ED25519_SK or ECDSA_SK SSH keys.\n\nIf you are using EGit, you can add your SSH key to Eclipse.\n\nIf you’re running Windows 10, you can either use the Windows Subsystem for Linux (WSL) with WSL 2 which has both and preinstalled, or install Git for Windows to use SSH through PowerShell.\n\nThe SSH key generated in WSL is not directly available for Git for Windows, and vice versa, as both have a different home directory:\n\nYou can either copy over the directory to use the same key, or generate a key in each environment.\n\nIf you’re running Windows 11 and using OpenSSH for Windows, ensure the environment variable is set correctly. Otherwise, your private SSH key might not be found.\n• PuTTYgen 0.81 and later (earlier versions are vulnerable to disclosure attacks)\n\nGitLab integrates with the system-installed SSH daemon and designates a user (typically named ) through which all access requests are handled. Users who connect to the GitLab server over SSH are identified by their SSH key instead of their username.\n\nSSH client operations performed on the GitLab server are executed as this user. You can modify this SSH configuration. For example, you can specify a private SSH key for this user to use for authentication requests. However, this practice is not supported and is strongly discouraged as it presents significant security risks.\n\nGitLab checks for this condition, and directs you to this section if your server is configured this way. For example:\n\nRemove the custom configuration as soon as you can. These customizations are explicitly not supported and may stop working at any time.\n\nThe GitLab SSH folder and files must have the following permissions:\n• The folder must be owned by the group and the user, with permissions set to .\n• The file must have permissions set to .\n• The file must have permissions set to .\n\nTo verify that these permissions are correct, run the following:\n\nIf the permissions are wrong, sign in to the application server and run:"
    }
]