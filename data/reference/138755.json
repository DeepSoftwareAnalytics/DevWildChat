[
    {
        "link": "https://stackoverflow.com/questions/72589432/how-can-i-fix-this-buildozer-build-error",
        "document": "I'm getting an error while trying to build a kivy app into apk on buildozer, I'll show you the logs:\n\nHow can I resolve this?"
    },
    {
        "link": "https://github.com/kivy/buildozer/issues/874",
        "document": "I am testing the operation of the packaging of python applications for android. I have taken a simple example of kyvi and I am trying to create the apk file, for android.\n\n I have not modified the file \"buildozer.spec\", I follow the steps \"buildozer -v android debug\" and I get an error. I have been modifying parameters of the file and it always gives an error. I have seen that automake, autoconf and libltdl-dev have to be installed. which I have installed but still giving error.\n\nAnyone can help me"
    },
    {
        "link": "https://buildozer.readthedocs.io/en/latest/installation.html",
        "document": "Buildozer is tested on Python 3.8 and above but may work on earlier versions, back to Python 3.3. Depending the platform you want to target, you might need more tools installed. Buildozer tries to give you hints or tries to install few things for you, but it doesn’t cover every situation.\n\nFirst, install the buildozer project with:\n\nsudo apt update sudo apt install -y git zip unzip openjdk-17-jdk python3-pip autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev libssl-dev pip3 install --user --upgrade Cython==0.29.33 virtualenv # the --user should be removed if you do this in a venv # add the following line at the end of your ~/.bashrc file export PATH=$PATH:~/.local/bin/ If openjdk-17 is not compatible with other installed programs, for Buildozer the minimum compatible openjdk version is 11. To use buildozer in Windows you need first to enable Windows Subsystem for Linux (WSL) and install a Linux distribution: https://docs.microsoft.com/en-us/windows/wsl/install. These instructions were tested with WSL 1 and Ubuntu 18.04 LTS, and WSL2 with Ubuntu 20.04 and 22.04. After installing WSL and Ubuntu on your Windows machine, open Ubuntu, run the commands listed in the previous section, and restart your WSL terminal to enable the path change. Copy your Kivy project directory from the Windows partition to the WSL partition, and follow the Quickstart Instructions. Do not change to the project directory on the Windows partition and build there, this may give unexpected and obscure fails. For debugging, WSL does not have direct access to USB. Copy the .apk file to the Windows partition and run ADB (Android Debug Bridge) from a Windows prompt. ADB is part of Android Studio, if you do not have this installed you can install just the platform tools which also contain ADB.\n• Go to https://developer.android.com/studio/releases/platform-tools and click on “Download SDK Platform-Tools for Windows”.\n• Unzip the downloaded file to a new folder. For example, “C:\\platform-tools”. If you wish, clone your code to a new folder, where the build process will run. You don’t need to create a virtualenv for your code requirements. But just add these requirements to a configuration file called buildozer.spec as you will see in the following sections. Before running buildozer in your code folder, remember to go into the buildozer folder and activate the buildozer virtualenv. # the --user should be removed if you do this in a venv Then press “y” then enter to accept the license."
    },
    {
        "link": "https://stackoverflow.com/questions/66179737/buildozer-fails-to-build-apk",
        "document": "I'm trying to build an apk out of a simple kivy python file however I get this error when using the command \"buildozer -v android debug\" to build the apk.\n\nI'm running on a Ubuntu virtual machine, java jdk is version 8 something, I was using version 14 earlier, but saw some post talking about needing version 8. Not entirely sure though if it was for the same problem that I'm facing."
    },
    {
        "link": "https://github.com/kivy/buildozer/issues/1685",
        "document": "This is a review of the way Buildozer's (pre-run) dependencies are set-up, and how that set-up is tested.\n\nI hope to follow up with a PR shortly.\n• pip should be able to find all the package dependencies of a project (and only those package dependencies).\n• If there are version dependencies, pip should be able to find them to select the best version - especially when there are multiple packages to install.\n• If dependencies only apply to some uses (testing, generation of documentation, building for a particular platform, etc.) they should be specified in . They will only be installed for users who want that functionality, and allow those users to install all dependencies with relative ease.\n• The documentation should reflect this, so people know how to set-up their environment.\n• The integration tests should confirm that all the necessary dependencies are installed.\n• [Outside the scope here: It should be PEP 517 compatible.]\n\nThe current system falls short of this ideal in the following ways:\n• Buildozer does not specify the version of Cython.\n• There is a known issue that Buildozer doesn't work with Cython V3 and above. See Use a pinned version of for now, as most of the recipes are incompatible with\n• The tests pre-install a version to pin to 0.29.36.\n• However, the specification of acceptable versions should be done in , so anyone who doesn't pre-install Cython still gets the right version.\n• Thus, the integration tests should NOT pre-install it. They should be testing that the setup process gets it right.\n• Buildozer does not specify that it needs to run the unit-tests in the directory.\n• This triggers warnings in some static-checkers, such as those in PyCharm\n• is currently named as a dependency , but you can run unit-tests without tox. The dependency should be added to extras_require for \"tests\" in .\n• is also installed by tox, but it is not required to run the tests, so need not be mentioned in .\n• Tox still needs to install pytest because it doesn't install Buildozer; it just copies the files.\n• The Android integration test installs . This is not required for Android. It should be removed to both save time and to show it is not required.\n• The Android integration messes with links on MacOs: This is not documented and not required. Notably, it doesn't appear in the ios version. It should be removed.\n• \n• It isn't used by Buildozer. has been part of Python since 3.3, and we no longer support earlier versions than that.\n• It can be removed. (See also existing PR .)\n• The documentation tells ios developers to manually . That instruction should be removed.\n• \n• It isn't used by Buildozer.\n• However, removing it can cause IOS builds to fail! Because needs it. So, the dependency should be from , not Buildozer. Unexpectedly, does list in its requires. It turns out Buildozer's TargetIos attempts to install from Github, but doesn't actually install it (with pip). It just copies the files across. The dependencies are never resolved.\n• Remove 'sh' from . Replace it with an for ios, that installs . That will install its dependencies, such as sh.\n• The documentation tells ios developers are to manually pip install . That instruction should be replaced with installing , and let the system work out the individual dependencies.\n• \n• They appear to be spurious.\n• Buildozer does not specify that it needs to generate the documents in the directory.\n• Add it to for .\n• The tests of the documentation (added in ) should be updated to install buildozer[docs], and not directly install sphinx.\n• Tox doesn't need to special-case Python 3 any more.\n• The tests shouldn't install Buildozer as an \"editable install\" (i.e. the option on )\n• They should test the behaviour the client will see.\n• It is incompatible with PEP 517 - and hopefully one day Buildozer will be compatible with PEP 517."
    },
    {
        "link": "https://kivy.org/doc/stable/guide/packaging-android.html",
        "document": "You can create a package for android using the python-for-android project. This page explains how to download and use it directly on your own machine (see Packaging your application into APK or AAB) or use the Buildozer tool to automate the entire process. You can also see Packaging your application for the Kivy Launcher to run kivy programs without compiling them.\n\nFor new users, we recommend using Buildozer as the easiest way to make a full APK or AAB. You can also run your Kivy app without a compilation step with the Kivy Launcher app.\n\nKivy applications can be released on an Android market such as the Play store, with a few extra steps to create a fully signed AAB (Android App Bundle).\n\nThe Kivy project includes tools for accessing Android APIs to accomplish vibration, sensor access, texting etc. These, along with information on debugging on the device, are documented at the main Android page.\n\nBuildozer is a tool that automates the entire build process. It downloads and sets up all the prerequisites for python-for-android, including the android SDK and NDK, then builds an apk that can be automatically pushed to the device. Buildozer currently works only in Linux and macOS (You can still use it on Windows via WSL), and can significantly simplify the apk build. Please find the installation instructions here Afterwards, navigate to your project directory and run: This creates a file controlling your build configuration. You should edit it appropriately with your app name etc. You can set variables to control most or all of the parameters passed to python-for-android. Finally, plug in your android device and run: to build, push and automatically run the apk on your device. Buildozer has many available options and tools to help you, the steps above are just the simplest way to build and run your APK. The full documentation is available here. You can also check the Buildozer README at https://github.com/kivy/buildozer.\n\nPackaging your application for the Kivy Launcher¶ The Kivy launcher is an Android application that runs any Kivy examples stored on your SD Card. To install the Kivy launcher, you must:\n• None Go on Google Play Store and search for from\n• None Select your phone… And you’re done! If you don’t have access to the Google Play Store on your phone/tablet, you can download and install the APK manually from https://github.com/kivy/kivy-launcher/releases Once the Kivy launcher is installed, you can put your Kivy applications in the Kivy directory in your external storage directory (often available at even in devices where this memory is internal), e.g. should be a directory containing: # Some info Kivy requires about your app on android: The file must contain: These options are just a very basic configuration. If you create your own APK using the tools above, you can choose many other settings. Kivy comes with many examples, and these can be a great place to start trying the Kivy launcher. You can run them as below: #. Unzip the contents and go to the folder `kivydemo-for-android` #. Copy all the the subfolders here to\n• None Run the launcher and select one of the Pictures, Showcase, Touchtracer, Cymunk or other demos…\n\nIf you have built your own APK with Buildozer or with python-for-android, you can create a release version that may be released on the Play store or other Android markets. To do this, you must run Buildozer with the parameter (e.g. ), or if using python-for-android use the option to build.py. This creates a release AAB in the directory, which you must properly sign and zipalign. The procedure for doing this is described in the Android documentation at https://developer.android.com/studio/publish/app-signing.html#signing-manually - all the necessary tools come with the Android SDK."
    },
    {
        "link": "https://kivy.org/doc/stable-1.10.1/guide/packaging-android.html",
        "document": "You can create a package for android using the python-for-android project. This page explains how to download and use it directly on your own machine (see Packaging with python-for-android) or use the Buildozer tool to automate the entire process. You can also see Packaging your application for the Kivy Launcher to run kivy programs without compiling them.\n\nFor new users, we recommend using Buildozer as the easiest way to make a full APK. You can also run your Kivy app without a compilation step with the Kivy Launcher app.\n\nKivy applications can be released on an Android market such as the Play store, with a few extra steps to create a fully signed APK.\n\nThe Kivy project includes tools for accessing Android APIs to accomplish vibration, sensor access, texting etc. These, along with information on debugging on the device, are documented at the main Android page.\n\nBuildozer is a tool that automates the entire build process. It downloads and sets up all the prequisites for python-for-android, including the android SDK and NDK, then builds an apk that can be automatically pushed to the device. Buildozer currently works only in Linux, and is an alpha release, but it already works well and can significantly simplify the apk build. You can get buildozer at https://github.com/kivy/buildozer: This will install buildozer in your system. Afterwards, navigate to your project directory and run: This creates a file controlling your build configuration. You should edit it appropriately with your app name etc. You can set variables to control most or all of the parameters passed to python-for-android. Finally, plug in your android device and run: to build, push and automatically run the apk on your device. Buildozer has many available options and tools to help you, the steps above are just the simplest way to build and run your APK. The full documentation is available here. You can also check the Buildozer README at https://github.com/kivy/buildozer.\n\nPackaging your application for the Kivy Launcher¶ The Kivy launcher is an Android application that runs any Kivy examples stored on your SD Card. To install the Kivy launcher, you must:\n• Go to the Kivy Launcher page on the Google Play Store\n• Select your phone… And you’re done! If you don’t have access to the Google Play Store on your phone/tablet, you can download and install the APK manually from http://kivy.org/#download. Once the Kivy launcher is installed, you can put your Kivy applications in the Kivy directory in your external storage directory (often available at even in devices where this memory is internal), e.g. should be a directory containing: # Some info Kivy requires about your app on android: The file must contain: These options are just a very basic configuration. If you create your own APK using the tools above, you can choose many other settings. Kivy comes with many examples, and these can be a great place to start trying the Kivy launcher. You can run them as below: #. Unzip the contents and go to the folder `kivydemo-for-android` #. Copy all the the subfolders here to\n• Run the launcher and select one of the Pictures, Showcase, Touchtracer, Cymunk or other demos…\n\nIf you have built your own APK with Buildozer or with python-for-android, you can create a release version that may be released on the Play store or other Android markets. To do this, you must run Buildozer with the parameter (e.g. ), or if using python-for-android use the option to build.py. This creates a release APK in the directory, which you must properly sign and zipalign. The procedure for doing this is described in the Android documentation at https://developer.android.com/studio/publish/app-signing.html#signing-manually - all the necessary tools come with the Android SDK."
    },
    {
        "link": "https://stackoverflow.com/questions/65524613/buildozer-not-using-correct-kivy-version-when-packaging-for-android",
        "document": "I am having a couple of problems packaging my Kivy app for android which may, or may not be related:\n• The only packages my app imports other than Kivy, are the time, and math modules. When I add either or both of them to the requirements in the buildozer spec file, I get a \"pip._internal.exceptions.DistributionNotFound: No matching distribution for time.\" error. When I don't include them in my requirements, the build is successful, but crashes upon open with the error:\n• \"Exception: The version of Kivy installed on this system is too old. (You have 1.11.1, but the application requires 2.0.0)\"\n\nI am doing the install in a VirutalBox on Ubuntu, and have followed the installation procedure outlined in the Kivy, and Buildozer documentation, as well as following a tutorial by Eric Sandberg on YouTube. I have set the Kivy version in the buildozer spec file, and installed Kivy 2.0.0 on the VM using pip. When I pip freeze, it shows the correct version of Kivy. One thing I have noticed is the when I try and install it with \"apt-get install python3-kivy\", it says kivy 1.10 is installed and that this is the most up to date version.\n\nThis seems like an easy problem to address but I have cannot figure out why it is trying to use this version of Kivy! Please let me know if any other information is required to debug. The spec file is hardly changed, other then specifying Kivy=2.0.0 in requirements.\n\nHere are the logs:\n\nHere are the requirements:"
    },
    {
        "link": "https://stackoverflow.com/questions/73539112/ndk-version-conflict-in-buildozer-for-kivy-app",
        "document": "So I've just ran into that problem and found a solution.\n\n The issue was that to build scipy python for android needs an android ndk that was built with fortran support. These appear to be only supported with NDK version 21 and lower and the NDK needs to be specifically built with fortran support. Luckily someone hosts prebuilt versions for that purpose. https://github.com/mzakharo/android-gfortran/releases (Linux only, if you are building the APK from windows you need to build your own NDK toolchain as described in the readme of that project)\n\nThen you have to do the following:\n\nFirst you need to download the legacy NDK via buildozer For this modifiy in :\n\nWhen it fails (this is ok since we only ran buildozer to download the r21 NDK):\n\nNote: change to the path where buildozer stores your ndks\n\nThen revert the changes to :\n\nNow you can build and deploy with\n\nNote: change as described above"
    },
    {
        "link": "https://kivy.org/doc/stable-1.11.0/guide/packaging-android.html",
        "document": "You can create a package for android using the python-for-android project. This page explains how to download and use it directly on your own machine (see Packaging with python-for-android) or use the Buildozer tool to automate the entire process. You can also see Packaging your application for the Kivy Launcher to run kivy programs without compiling them.\n\nFor new users, we recommend using Buildozer as the easiest way to make a full APK. You can also run your Kivy app without a compilation step with the Kivy Launcher app.\n\nKivy applications can be released on an Android market such as the Play store, with a few extra steps to create a fully signed APK.\n\nThe Kivy project includes tools for accessing Android APIs to accomplish vibration, sensor access, texting etc. These, along with information on debugging on the device, are documented at the main Android page.\n\nBuildozer is a tool that automates the entire build process. It downloads and sets up all the prequisites for python-for-android, including the android SDK and NDK, then builds an apk that can be automatically pushed to the device. Buildozer currently works only in Linux, and is an alpha release, but it already works well and can significantly simplify the apk build. You can get buildozer at https://github.com/kivy/buildozer: This will install buildozer in your system. Afterwards, navigate to your project directory and run: This creates a file controlling your build configuration. You should edit it appropriately with your app name etc. You can set variables to control most or all of the parameters passed to python-for-android. Finally, plug in your android device and run: to build, push and automatically run the apk on your device. Buildozer has many available options and tools to help you, the steps above are just the simplest way to build and run your APK. The full documentation is available here. You can also check the Buildozer README at https://github.com/kivy/buildozer.\n\nPackaging your application for the Kivy Launcher¶ The Kivy launcher is an Android application that runs any Kivy examples stored on your SD Card. To install the Kivy launcher, you must:\n• None Go to the Kivy Launcher page on the Google Play Store\n• None Select your phone… And you’re done! If you don’t have access to the Google Play Store on your phone/tablet, you can download and install the APK manually from http://kivy.org/#download. Once the Kivy launcher is installed, you can put your Kivy applications in the Kivy directory in your external storage directory (often available at even in devices where this memory is internal), e.g. should be a directory containing: # Some info Kivy requires about your app on android: The file must contain: These options are just a very basic configuration. If you create your own APK using the tools above, you can choose many other settings. Kivy comes with many examples, and these can be a great place to start trying the Kivy launcher. You can run them as below: #. Unzip the contents and go to the folder `kivydemo-for-android` #. Copy all the the subfolders here to\n• None Run the launcher and select one of the Pictures, Showcase, Touchtracer, Cymunk or other demos…\n\nIf you have built your own APK with Buildozer or with python-for-android, you can create a release version that may be released on the Play store or other Android markets. To do this, you must run Buildozer with the parameter (e.g. ), or if using python-for-android use the option to build.py. This creates a release APK in the directory, which you must properly sign and zipalign. The procedure for doing this is described in the Android documentation at https://developer.android.com/studio/publish/app-signing.html#signing-manually - all the necessary tools come with the Android SDK."
    }
]