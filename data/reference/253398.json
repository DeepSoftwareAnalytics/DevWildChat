[
    {
        "link": "https://geeksforgeeks.org/cpp-ternary-or-conditional-operator",
        "document": "In C++, the ternary or conditional operator ( ? : ) is the shortest form of writing conditional statements. It can be used as an inline conditional statement in place of if-else to execute some conditional code.\n\nExplanation: Here, two integers x and y are initialized to 10 and 20, respectively. The ternary operator (x > y) ? x : y checks whether x is greater than y. If true, it assigns x to max_val. Otherwise, it assigns y. Since y is greater, max_val becomes 20.\n\nThe syntax of the ternary (or conditional) operator is:\n\nAs the name suggests, the ternary operator works on three operands where\n• statement_1 : Statement that will be executed if the expression evaluates to true.\n• statement_2: Code to be executed if the expression evaluates to false.\n\nThe above statement of the ternary operator is equivalent to the if-else statement given below:\n\nThe below examples demonstrate the use of ternary operator in C programs.\n\nExplanation: In the above code, we have used the ternary operator to assign the value of the variable n depending upon the value of another variable named t. It is one of the most common applications of this operator\n\nLargest of the Three Numbers\n\nLike if-else statements, the ternary operator can also be nested inside one another. We can use this to shorten the code for complex conditions.\n\nAs we can see it is possible to nest ternary operators in one another but the code gets complex to read and understand. So, it is generally avoided to use nested ternary operators.\n\nThe ternary operator should only be used for short conditional code. For larger code, the other conditional statements should be preferred. The below table highlights some more differences:\n\nCan the ternary operator be used for multiple conditions?\n\nIs the ternary operator faster than if-else?\n\nCan I use functions or expressions as results in the ternary operator?"
    },
    {
        "link": "https://learncpp.com/cpp-tutorial/the-conditional-operator",
        "document": "The conditional operator ( ) (also sometimes called the arithmetic if operator) is a ternary operator (an operator that takes 3 operands). Because it has historically been C++’s only ternary operator, it’s also sometimes referred to as “the ternary operator”.\n\nThe operator provides a shorthand method for doing a particular type of if-else statement.\n\nTo recap, an if-else statement takes the following form:\n\nIf evaluates to , then is executed, otherwise is executed. The and are optional.\n\nThe operator takes the following form:\n\nIf evaluates to , then is evaluated, otherwise is evaluated. The and are not optional.\n\nConsider an if-else statement that looks like this:\n\nThis can be rewritten as:\n\nIn such cases, the conditional operator can help compact code without losing readability.\n\nConsider the following example:\n\nFirst, let’s enter and as input (so is , and is ). When is initialized, the expression is evaluated. Since is false, this yields , which evaluates to . The program prints:\n\nNow let’s enter and as input (so is , and is ). In this case, we get , which is , which evaluates to . The program prints:\n\nThe conditional operator evaluates as part of an expression\n\nSince the conditional operator is evaluated as part of an expression, it can be used anywhere an expression is accepted. In cases where the operands of the conditional operator are constant expressions, the conditional operator can be used in a constant expression.\n\nThis allows the conditional operator to be used in places where statements cannot be used.\n\nFor example, when initializing a variable:\n\nThere’s no direct if-else replacement for this.\n\nYou might think to try something like this:\n\nHowever, this won’t compile, and you’ll get an error message that isn’t defined. Much like how variables defined inside functions die at the end of the function, variables defined inside an if-statement or else-statement die at the end of the if-statement or else-statement. Thus, has already been destroyed by the time we try to print it.\n\nIf you want to use an if-else, you’d have to do something like this:\n\nThis one works because is an expression, and the if-else logic is inside a function (where we can use statements). But this is a lot of extra code when we could just use the conditional operator instead.\n\nBecause C++ prioritizes the evaluation of most operators above the evaluation of the conditional operator, it’s quite easy to write expressions using the conditional operator that don’t evaluate as expected.\n\nYou might expect this to evaluate as (which would evaluate to ) but it actually evaluates as (which evaluates to ).\n\nHere’s another example that exhibits a common mistake:\n\nYou might expect this to print , but it actually prints .\n\nHere’s what’s happening in the above example. First, evaluates to . The partially evaluated expression is now . Because has higher precedence than , this expression evaluates as if it were written as . Thus is evaluated, which prints (and returns ). The partially evaluated expression is now . Since is all that is remaining in the condition, the compiler will try to convert it to a so the condition can be resolved. Perhaps surprisingly, has a defined conversion to , which will most likely return . Assuming it returns , we now have , which evaluates to . So our fully evaluated statement is . An expression statement that is just a literal (in this case, a string literal) has no effect, so we’re done.\n\nTo avoid such evaluation prioritization issues, the conditional operator should be parenthesized as follows:\n• Parenthesize the entire conditional operation (including operands) when used in a compound expression (an expression with other operators).\n• For readability, consider parenthesizing the condition if it contains any operators (other than the function call operator).\n\nThe operands of the conditional operator do not need to be parenthesized.\n\nLet’s take a look at some statements containing the conditional operator and how they should be parenthesized:\n\nThe type of the expressions must match or be convertible\n\nTo comply with C++’s type checking rules, one of the following must be true:\n• The type of the second and third operand must match.\n• The compiler must be able to find a way to convert one or both of the second and third operands to matching types. The conversion rules the compiler uses are fairly complex and may yield surprising results in some cases.\n\nIn general, it’s okay to mix operands with fundamental types (excluding mixing signed and unsigned values). If either operand is not a fundamental type, it’s generally best to explicitly convert one or both operands to a matching type yourself so you know exactly what you’ll get.\n\nIf the compiler can’t find a way to convert the second and third operands to a matching type, a compile error will result:\n\nIn the above example, one of the expressions is an integer, and the other is a C-style string literal. The compiler will not be able to find a matching type on its own, so a compile error will result.\n\nIn such cases, you can either do an explicit conversion, or use an if-else statement:\n\nSo when should you use the conditional operator?\n\nThe conditional operator is most useful when doing one of the following:\n• Initializing an object with one of two values.\n• Assigning one of two values to an object.\n• Passing one of two values to a function.\n• Returning one of two values from a function.\n• Printing one of two values.\n\nComplicated expressions should generally avoid use of the conditional operator, as they tend to be error prone and hard to read."
    },
    {
        "link": "https://learn.microsoft.com/en-us/cpp/cpp/conditional-operator-q?view=msvc-170",
        "document": "The conditional operator (? :) is a ternary operator (it takes three operands). The conditional operator works as follows:\n• None The first operand is implicitly converted to . It is evaluated and all side effects are completed before continuing.\n• None If the first operand evaluates to (1), the second operand is evaluated.\n• None If the first operand evaluates to (0), the third operand is evaluated.\n\nThe result of the conditional operator is the result of whichever operand is evaluated — the second or the third. Only one of the last two operands is evaluated in a conditional expression.\n\nConditional expressions have right-to-left associativity. The first operand must be of integral or pointer type. The following rules apply to the second and third operands:\n• None If both operands are of the same type, the result is of that type.\n• None If both operands are of arithmetic or enumeration types, the usual arithmetic conversions (covered in Standard Conversions) are performed to convert them to a common type.\n• None If both operands are of pointer types or if one is a pointer type and the other is a constant expression that evaluates to 0, pointer conversions are performed to convert them to a common type.\n• None If both operands are of reference types, reference conversions are performed to convert them to a common type.\n• None If both operands are of type void, the common type is type void.\n• None If both operands are of the same user-defined type, the common type is that type.\n• None If the operands have different types and at least one of the operands has user-defined type then the language rules are used to determine the common type. (See warning below.)\n\nAny combinations of second and third operands not in the preceding list are illegal. The type of the result is the common type, and it is an l-value if both the second and third operands are of the same type and both are l-values.\n\nIf the types of the second and third operands are not identical, then complex type conversion rules, as specified in the C++ Standard, are invoked. These conversions may lead to unexpected behavior including construction and destruction of temporary objects. For this reason, we strongly advise you to either (1) avoid using user-defined types as operands with the conditional operator or (2) if you do use user-defined types, then explicitly cast each operand to a common type."
    },
    {
        "link": "https://programiz.com/cpp-programming/ternary-operator",
        "document": "In C++, the ternary operator is a concise, inline method used to execute one of two expressions based on a condition. It is also called the conditional operator.\n\nA ternary operator evaluates the test condition and executes an expression out of two based on the result of the condition.\n\nHere, is evaluated and\n• if is , is executed.\n• if is , is executed.\n\nThe ternary operator takes 3 operands ( , and ). Hence, the name ternary operator.\n\nSuppose the user enters 80. Then, the condition evaluates to . Hence, the first expression is assigned to .\n\nNow, suppose the user enters 39.5. Then, the condition evaluates to . Hence, the second expression is assigned to .\n\nNote: We should only use the ternary operator if the resulting statement is short.\n\nThe ternary operator is best for simple, inline conditional assignments where readability is not compromised. For example, In this example, the condition is evaluated. If it's true, is assigned to status; if it's false, is assigned. This is much more concise than using a full statement, which would look like this: Here, the statement takes up more lines and can clutter code when used for many simple conditional assignments. The statement is better suited for complex decision-making processes and when clarity and readability are prioritized over brevity. Suppose you need to categorize weather based on multiple conditions. Using a ternary operator with multiple conditional statements would be cumbersome and hard to read. In such cases, we use . Let's look at an example. int temperature = 25; string category; if (temperature < 10) { category = \"Cold\"; } else if (temperature <= 25) { category = \"Moderate\"; } else if (temperature > 25) { category = \"Hot\"; } else { category = \"Inhabitable\"; } Let's look at an example to justify this point. Here, the ternary operator returns the value based on the condition . The returned value is stored in the variable. In contrast, does not inherently return a value. Thus, assignment to a variable is explicit. int number = -4; string result; // explicit assignment with if...else if (number > 0) result = \"Positive Number\"; else result = \"Negative Number\";\n\nIt is also possible to use one ternary operator inside another ternary operator. It is called the nested ternary operator in C++.\n\nHere's a program to find whether a number is positive, negative, or zero using the nested ternary operator.\n\nIn the above example, notice the use of ternary operators,\n• is the first test condition that checks if is 0 or not. If it is, then it assigns the string value to .\n• Else, the second test condition is evaluated if the first condition is .\n\nNote: It is not recommended to use nested ternary operators. This is because it makes our code more complex."
    },
    {
        "link": "https://stackoverflow.com/questions/9619424/conditional-operator-used-in-cout-statement",
        "document": "By trying, I came to know that it is necessary to put parentheses around a conditional operator in a cout statement. Here a small example:\n\nWhy are these parentheses necessary? The resulting type of the conditional operator is known in both cases, isn't it?"
    },
    {
        "link": "https://programiz.com/cpp-programming/ternary-operator",
        "document": "In C++, the ternary operator is a concise, inline method used to execute one of two expressions based on a condition. It is also called the conditional operator.\n\nA ternary operator evaluates the test condition and executes an expression out of two based on the result of the condition.\n\nHere, is evaluated and\n• if is , is executed.\n• if is , is executed.\n\nThe ternary operator takes 3 operands ( , and ). Hence, the name ternary operator.\n\nSuppose the user enters 80. Then, the condition evaluates to . Hence, the first expression is assigned to .\n\nNow, suppose the user enters 39.5. Then, the condition evaluates to . Hence, the second expression is assigned to .\n\nNote: We should only use the ternary operator if the resulting statement is short.\n\nThe ternary operator is best for simple, inline conditional assignments where readability is not compromised. For example, In this example, the condition is evaluated. If it's true, is assigned to status; if it's false, is assigned. This is much more concise than using a full statement, which would look like this: Here, the statement takes up more lines and can clutter code when used for many simple conditional assignments. The statement is better suited for complex decision-making processes and when clarity and readability are prioritized over brevity. Suppose you need to categorize weather based on multiple conditions. Using a ternary operator with multiple conditional statements would be cumbersome and hard to read. In such cases, we use . Let's look at an example. int temperature = 25; string category; if (temperature < 10) { category = \"Cold\"; } else if (temperature <= 25) { category = \"Moderate\"; } else if (temperature > 25) { category = \"Hot\"; } else { category = \"Inhabitable\"; } Let's look at an example to justify this point. Here, the ternary operator returns the value based on the condition . The returned value is stored in the variable. In contrast, does not inherently return a value. Thus, assignment to a variable is explicit. int number = -4; string result; // explicit assignment with if...else if (number > 0) result = \"Positive Number\"; else result = \"Negative Number\";\n\nIt is also possible to use one ternary operator inside another ternary operator. It is called the nested ternary operator in C++.\n\nHere's a program to find whether a number is positive, negative, or zero using the nested ternary operator.\n\nIn the above example, notice the use of ternary operators,\n• is the first test condition that checks if is 0 or not. If it is, then it assigns the string value to .\n• Else, the second test condition is evaluated if the first condition is .\n\nNote: It is not recommended to use nested ternary operators. This is because it makes our code more complex."
    },
    {
        "link": "https://geeksforgeeks.org/cpp-ternary-or-conditional-operator",
        "document": "In C++, the ternary or conditional operator ( ? : ) is the shortest form of writing conditional statements. It can be used as an inline conditional statement in place of if-else to execute some conditional code.\n\nExplanation: Here, two integers x and y are initialized to 10 and 20, respectively. The ternary operator (x > y) ? x : y checks whether x is greater than y. If true, it assigns x to max_val. Otherwise, it assigns y. Since y is greater, max_val becomes 20.\n\nThe syntax of the ternary (or conditional) operator is:\n\nAs the name suggests, the ternary operator works on three operands where\n• statement_1 : Statement that will be executed if the expression evaluates to true.\n• statement_2: Code to be executed if the expression evaluates to false.\n\nThe above statement of the ternary operator is equivalent to the if-else statement given below:\n\nThe below examples demonstrate the use of ternary operator in C programs.\n\nExplanation: In the above code, we have used the ternary operator to assign the value of the variable n depending upon the value of another variable named t. It is one of the most common applications of this operator\n\nLargest of the Three Numbers\n\nLike if-else statements, the ternary operator can also be nested inside one another. We can use this to shorten the code for complex conditions.\n\nAs we can see it is possible to nest ternary operators in one another but the code gets complex to read and understand. So, it is generally avoided to use nested ternary operators.\n\nThe ternary operator should only be used for short conditional code. For larger code, the other conditional statements should be preferred. The below table highlights some more differences:\n\nCan the ternary operator be used for multiple conditions?\n\nIs the ternary operator faster than if-else?\n\nCan I use functions or expressions as results in the ternary operator?"
    },
    {
        "link": "https://cplusplus.com/forum/articles/14631",
        "document": "So I was reading some code and I saw something that I'd never seen before:\n\n \n\n I pried open my C book (K&R) to find out what it was. \"Ternary Operator\" it said.\n\n \n\n Some people might not know how to use it, so I thought I'd write a simple explanation:\n\n \n\n \n\n The ternary operator (?:) is a very useful conditional expression used in C and C++. It's effects are similar to the if statement but with some major advantages.\n\n \n\n The basic syntax of using the ternary operator is thus:\n\n \n\n Which is basically the same as:\n\n \n\n \n\n Therefore if \"condition\" is true, the second expression is executed (\"if_true\"), if not, the third is executed (\"if_false\").\n\n \n\n Now take the following example:\n\n \n\n That requires 7 lines and is unsuitable for something like a MIN/MAX function:\n\n \n\n The above code can be used like this:\n\n \n\n and will correctly assign a or b to largest.\n\n \n\n Instead of the lengthy and more annoying (in this case) if statement we can use the ternary operator:\n\n \n\n \n\n The main fundamental difference is that the ternary operator is an whereas the if structure is a . A ternary operator expression's result can be assigned to a variable -- the results of an if statement cannot.\n\n \n\n Obviously the only advantage really that the if statement has is that you can have multiple clauses, where as with the ternary operator you can have only two.\n\n \n\n However, according to wikipedia:\n\n A GNU extension to C allows the second operand to be omitted, and the first operand is implicitly used as the second as well:\n\n \n\n \n\n \n\n The expression is equivalent to\n\n \n\n \n\n \n\n except that if x is an expression, it is evaluated only once. The difference is significant if evaluating the expression has side effects. \n\n \n\n If you're still unsure, try running the following code:\n\n \n\n \n\n Output:\n\n \n\n Note: Stuff in bold is my input.\n\n \n\n Please feedback :)\n\n \n\n Sources:\n\n The C Programming Language -- Brian Kernighan and Dennis Ritchie\n\n http://en.wikipedia.org/wiki/Conditional_operator\n\n \n\n Edits:\n\n 1. Fixed error noted by kempofighter,\n\n 2. Fixed errors in MIN & MAX macro functions where a & b were declared as A & B;\n\n 3. Fixed missing bracket in MAX(a, b) macro. Note: It has become apparent that what is known as the ternary operator in C is in fact called the \"Conditional Operator\" in C++. Thank you, Grey Wolf.So I was reading some code and I saw something that I'd never seen before:I pried open my C book (K&R) to find out what it was. \"Ternary Operator\" it said.Some people might not know how to use it, so I thought I'd write a simple explanation:The ternary operator (?:) is a very useful conditional expression used in C and C++. It's effects are similar to the if statement but with some major advantages.The basic syntax of using the ternary operator is thus:Which is basically the same as:Therefore if \"condition\" is true, the second expression is executed (\"if_true\"), if not, the third is executed (\"if_false\").Now take the following example:That requires 7 lines and is unsuitable for something like a MIN/MAX function:The above code can be used like this:and will correctly assign a or b to largest.Instead of the lengthy and more annoying (in this case) if statement we can use the ternary operator:The main fundamental difference is that the ternary operator is anwhereas the if structure is a. A ternary operator expression's result can be assigned to a variable -- the results of an if statement cannot.Obviously the only advantage really that the if statement has is that you can have multiple clauses, where as with the ternary operator you can have only two.However, according to wikipedia:If you're still unsure, try running the following code:Output:Note: Stuff in bold is my input.Please feedback :)Sources:The C Programming Language -- Brian Kernighan and Dennis RitchieEdits:1. Fixed error noted by kempofighter,2. Fixed errors in MIN & MAX macro functions where a & b were declared as A & B;3. Fixed missing bracket in MAX(a, b) macro.\n\n\n\n \n\n One additional note regarding the differences between ?: and if(), as I mentioned in that thread, is that other control statements cannot be embedded in the ?: operator. It is an operator, and thus must follow all the restrictions placed on parameters to operators.\n\n \n\n So, something like this is an invalid use of ?:\n\n \n\n \n\n Function calls can be made within the ?:, just as they can be made within expressions using other operators, with one interesting example.\n\n \n\n The following code is valid, so long as the value returned by myFunc can be assigned to somevar. This must hold true with ?: as well, but here is the interesting example. ?: can be used without an actual assignment, so the following code:\n\n \n\n \n\n is perfectly valid even if modifyB() and modifyA() are declared as void functions, since there is no assignment occurring. If that expression was getting assigned to some variable however, those two functions would have to return a compatible type.\n\n \n\n And one minor nitpick that has no tangible affect on your article, the ternary operator is not an expression itself. It's an operator that can be used, by itself or in conjunction with other operators, to formulate expressions.\n\n It's too bad I didn't see this previously, it relates well to a thread a couple days ago on why a particular use of the ternary operator wouldn't compile. (or conditional operator, if that's what you prefer).One additional note regarding the differences between ?: and if(), as I mentioned in that thread, is that other control statements cannot be embedded in the ?: operator. It is an operator, and thus must follow all the restrictions placed on parameters to operators.So, something like this is an invalid use of ?:Function calls can be made within the ?:, just as they can be made within expressions using other operators, with one interesting example.The following codeis valid, so long as the value returned by myFunc can be assigned to somevar. This must hold true with ?: as well, but here is the interesting example. ?: can be used without an actual assignment, so the following code:is perfectly valid even if modifyB() and modifyA() are declared as void functions, since there is no assignment occurring. If that expression was getting assigned to some variable however, those two functions would have to return a compatible type.And one minor nitpick that has no tangible affect on your article, the ternary operator isan expression itself. It's an operator that can be used, by itself or in conjunction with other operators, to formulate expressions.\n\nIt's threads like this, that makes me think that a good TEST forum for articles before they are published is a good idea. Once all the bugs in the article have been sorted out, then the OP would\n\n publish it it the Articles forum (read only, no replies, locked, only the OP would be allowed to write/update)\n\n\n\nI was merely trying to be helpful.\n\n What do you think is better; an article that is mostly correct and local, and easy to find; or someone having to search for an article that may or may not be correct?\n\n At least this way, other members of the forum can make addendums and corrections such that the readers and writer(s) of an article can all learn from it? The way it is posted on this forum, where other, more experienced members can add more information? In this way the post can be improved and therefore benefits even the writer of the article.\n\n \n\n I enjoy the fact that I can post mostly correct and helpful information and other people can add things and make it more correct. I would hate the idea that other people would think my article is \"sacred\" and that they can't correct me where I'm wrong -- that way, other people learn wrong things and I get it wrong aswell. The current way benefits reader and writer and as such is better.\n\n \n\n I sincerely disagree with you there.\n\nI understand what guestgulkan is getting at. While this is a forum, the article section really should just contain articles and not posts on corrections. It can be a bit confusing for a reader especially not knowing if the information was ever updated. The problem with forum article sections is that anyone can post. Quite often you'll find people that just learned something 1 hour ago posting an article on it which leads to revision after revision which really pisses me off. Quite honestly if you don't have experience with the specific subject matter, you sure as hell shouldn't be posting an article about it as a learning experience. On the other hand, locking the article so that only the OP could update it could be a huge problem, especially if the OP has no freaking clue about what they posted."
    },
    {
        "link": "https://w3schools.com/cpp/cpp_conditions_shorthand.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/392932/how-do-i-use-the-conditional-ternary-operator",
        "document": "This is called a \"Ternary operator\", and the and are another way of writing an if-else statement.\n\nLook at the \"Example #1\" in this Codepen, and un-comment it... you'll notice what it does.\n\nNow comment \"Example #1\", un-comment \"Example #2\", and see what happens. The code does the exact same thing... but this time with only 5 lines of code. Notice how whatever appears before the sign is the (conditional), and whatever comes AFTER the is the thing to be executed.\n\nBut what if you have a conditional that requires an \"else-if\" (with more than 2 possible outcomes) like the one in the Codepen's \"Example #3\" (which adds the possibility of the user writing a specific wrong answer)? Then the ternary operator might not be as useful, but you can certainly concatenate several conditions with the ternary operator, like on this ES6 fizzbuzz example."
    }
]