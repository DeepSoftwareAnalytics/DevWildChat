[
    {
        "link": "https://pub.dev/packages/webview_flutter",
        "document": "On iOS the WebView widget is backed by a WKWebView. On Android the WebView widget is backed by a WebView.\n\nYou can now display a WebView by:\n\nSee the Dartdocs for WebViewController and WebViewWidget for more details.\n\nThis plugin uses Platform Views to embed the Android's WebView within the Flutter app.\n\nYou should however make sure to set the correct in if it was previously lower than 19:\n\nMany classes have a subclass or an underlying implementation that provides access to platform-specific features.\n\nTo access platform-specific features, start by adding the platform implementation packages to your app or package:\n\nNext, add the imports of the implementation packages to your app or package:\n\nNow, additional features can be accessed through the platform implementations. Classes WebViewController, WebViewWidget, NavigationDelegate, and WebViewCookieManager pass their functionality to a class provided by the current platform. Below are a couple of ways to access additional functionality provided by the platform and is followed by an example.\n• Pass a creation params class provided by a platform implementation to a constructor (e.g. , , etc.).\n• Call methods on a platform implementation of a class by using the field (e.g. , , etc.).\n\nBelow is an example of setting additional iOS/macOS and Android parameters on the .\n\nSee https://pub.dev/documentation/webview_flutter_android/latest/webview_flutter_android/webview_flutter_android-library.html for more details on Android features.\n\nSee https://pub.dev/documentation/webview_flutter_wkwebview/latest/webview_flutter_wkwebview/webview_flutter_wkwebview-library.html for more details on iOS/macOS features.\n\nTo use Material Components when the user interacts with input elements in the WebView, follow the steps described in the Enabling Material Components instructions.\n\nCurrently, setting custom headers when making a post request with the WebViewController's method is not supported on Android. If you require this functionality, a workaround is to make the request manually, and then load the response data using instead.\n\nIn version 3.0 and below, could only be retrieved in a callback after the was added to the widget tree. Now, must be instantiated and can be used before it is added to the widget tree. See section above for an example.\n\nThe class has been removed and its functionality has been split into and .\n\nhandles all functionality that is associated with the underlying web view provided by each platform. (e.g., loading a url, setting the background color of the underlying platform view, or clearing the cache).\n\nSee the Dartdocs for WebViewController and WebViewWidget for more details.\n\nThe PlatformView implementation for Android uses Texture Layer Hybrid Composition on versions 23+ and automatically fallbacks to Hybrid Composition for version 19-23. See section and AndroidWebViewWidgetCreationParams.displayWithHybridComposition to manually switch to Hybrid Composition on versions 23+.\n\nBelow is a non-exhaustive list of changes to the API:\n• no longer clears local storage. Please use .\n• has been removed. Please use .\n• has been removed. Please use or .\n• and have been removed and have been replaced by .\n• now returns an and not a . This will attempt to return a or if the return value can be parsed.\n• has been removed. Use before calling .\n• callback includes errors that are not from the main frame. Use the field to filter errors.\n• The following fields from have been moved to . They can be added to a WebView with .\n• The following fields from have been moved to :\n• The following features have been moved to an Android implementation class. See section for details on accessing Android platform-specific features.\n• The following features have been moved to an iOS implementation class. See section for details on accessing iOS platform-specific features."
    },
    {
        "link": "https://codelabs.developers.google.com/codelabs/flutter-webview",
        "document": "With the WebView Flutter plugin you can add a WebView widget to your Android or iOS Flutter app. On iOS the WebView widget is backed by a WKWebView, while on Android the WebView widget is backed by a WebView. The plugin can render Flutter widgets over the web view. So for example it's possible to render a drop down menu over the web view. In this codelab, you'll build a mobile app step by step featuring a WebView using the Flutter SDK. Your app will:\n• Control the through the\n• Load and display HTML from assets, files or Strings containing HTML In this codelab you'll learn how to use the plugin in a variety of ways, including:\n• How to configure the plugin\n• How to listen for page load progress events\n• How to command the to go backwards and forwards through its history\n• How to evaluate JavaScript, including using returned results\n• How to register callbacks to call Dart code from JavaScript\n• How to load and display HTML pages from assets or files or String containing HTML\n• Android Studio 4.1 or later (for Android development)\n• Xcode 12 or later (for iOS development)\n• A code editor, such as Android Studio, Visual Studio Code, or Emacs.\n\nThere are a variety of ways of creating a new Flutter project, with both Android Studio and Visual Studio Code providing tooling for this task. Either follow the linked procedures to create a project, or execute the following commands in a handy command line terminal. $ flutter create --platforms=android,ios webview_in_flutter Creating project webview_in_flutter... Resolving dependencies in `webview_in_flutter`... Downloading packages... Got dependencies in `webview_in_flutter`. Wrote 74 files. All done! You can find general documentation for Flutter at: https://docs.flutter.dev/ Detailed API documentation is available at: https://api.flutter.dev/ If you prefer video documentation, consider: https://www.youtube.com/c/flutterdev In order to run your application, type: $ cd webview_in_flutter $ flutter run Your application code is in webview_in_flutter/lib/main.dart. Adding additional capability to a Flutter app is easy using Pub packages. In this codelab you will add the plugin to your project. Run the following commands in the terminal. $ cd webview_in_flutter $ flutter pub add webview_flutter Resolving dependencies... Downloading packages... collection 1.18.0 (1.19.0 available) leak_tracker 10.0.5 (10.0.7 available) leak_tracker_flutter_testing 3.0.5 (3.0.7 available) material_color_utilities 0.11.1 (0.12.0 available) + plugin_platform_interface 2.1.8 string_scanner 1.2.0 (1.3.0 available) test_api 0.7.2 (0.7.3 available) + webview_flutter 4.9.0 + webview_flutter_android 3.16.7 + webview_flutter_platform_interface 2.10.0 + webview_flutter_wkwebview 3.15.0 Changed 5 dependencies! 6 packages have newer versions incompatible with dependency constraints. Try `flutter pub outdated` for more information. If you inspect your pubspec.yaml, you will now see it has a line in the dependencies section for the plugin. To use the plugin on Android you need to set the to . Modify your file as follows:\n\nIn this step you will add a to your application. WebViews are hosted native views, and you as an app developer have a choice on how to host these native views in your app. On Android you have a choice between Virtual Displays, currently the default for Android, and Hybrid composition. However, iOS always uses Hybrid composition. For an in depth discussion of the differences between Virtual Displays and Hybrid composition, please read through the documentation on Hosting native Android and iOS views in your Flutter app with Platform Views. Replace the contents of with the following: Running this on iOS or Android will show a WebView as a full bleed browser window on your device, which means that the browser is shown on your device in fullscreen without any form of border or margin. As you scroll, you will notice parts of the page that might look a bit odd. This is because JavaScript is currently disabled and rendering flutter.dev properly requires JavaScript. Run the Flutter app in either iOS or Android to see a Webview, which displays the flutter.dev website. Alternatively run the app in either an Android emulator or an iOS simulator. Feel free to replace the initial WebView URL with for example your own website. Assuming that you have the appropriate simulator or emulator running, or a physical device attached, after compiling and deploying the app to your device, you should see something like the following:\n\nThe widget provides several page load progress events, which your app can listen to. During the page load cycle there are three different page load events that are fired: , , and . In this step you will implement a page load indicator. As a bonus, this will show that you can render Flutter content over the content area. Create a new source file at and fill it with the following content: This code has wrapped the widget in a , conditionally overlaying the with a when the page load percentage is less than 100%. As this involves program state that changes over time, you have stored this state in a class associated with a . To make use of this new widget, modify your as follows: When you run the app, depending on your network conditions, and whether the browser has cached the page you are navigating to, you will see a page loading indicator overlaid on top of the content area.\n\nAccessing the WebViewController from the WebView Widget The widget enables programmatic control with a . This controller is made available after the construction of the widget through a callback. The asynchronous nature of the availability of this controller makes it a prime candidate for Dart's asynchronous class. The widget now uses a controller created in the surrounding widget. This will enable the controller for the to be shared with other parts of the app easily. Having a working is one thing, but being able to navigate backwards and forwards through the page history, and reload the page, would be a useful set of additions. Thankfully, with a you can add this functionality to your app. Create a new source file at and fill it with the following: This widget uses the shared with it at construction time to enable the user control the through a series of s. With the updated , and the newly crafted in hand, it is now time for you to put it all together in an updated . This is where we construct the shared . With near the top of the Widget tree in this app, it makes sense to create it at this level. Running the app should reveal a web page with controls:\n\n7. Keeping track of navigation with the NavigationDelegate provides your app with a which enables your app to track and control the page navigation of the widget. When a navigation is initiated by the for example when a user clicks on a link, the is called. The callback can be used to control whether the proceeds with the navigation. In this step, you will register a callback to block navigation to YouTube.com. Note, this simplistic implementation also blocks inline YouTube content, which appears in various Flutter API documentation pages. Update the as follows: In the next step, you will add a menu item to enable testing your by using the class. It is left as an exercise to the reader to augment the logic of the callback to only block full page navigation to YouTube.com, and still allow the inline YouTube content in the API documentation.\n\nThe can evaluate JavaScript expressions in the context of the current page. There are two different ways to evaluate JavaScript: for JavaScript code that doesn't return a value, use , and for JavaScript code that does return a value, use . To enable JavaScript, you need to configure the with the property set to . By default, is set to . Update the class by adding the setting as follows: Now that the can execute JavaScript, you can add an option to the menu to use the method. Using either your Editor or some keyboard work, convert the Menu class to a StatefulWidget. Modify to match the following: When you tap on the ‘Show user-agent' menu option, the result of executing the JavaScript expression is shown in a . When running the app, you might notice that the Flutter.dev page looks different. This is the result of running with JavaScript enabled.\n\nJavascript Channels enable your app to register callback handlers in the 's JavaScript context that can be invoked to convey values back to the App's Dart code. In this step you will register a channel that will be called with the result of a . Update the class as follows: For each JavaScript Channel in the , a channel object is made available in the JavaScript context as a window property named with the same name as the JavaScript Channel . Using this from the JavaScript context involves calling on the JavaScript Channel to send a message that is passed to the named 's callback handler. To make use of the Javascript Channel added above, add another menu item that executes an in the JavaScript context and passes back the results using the JavaScript Channel. Now that knows about our JavaScript Channels you will add an example to expand the app further. To do this, add an extra to the class and add the extra functionality. Update with the extra menu option, by adding the enumeration value, and add an implementation to the class as follows: This JavaScript is executed when the user chooses the JavaScript Channel Example menu option. This code sends a request to a Public IP Address API, returning the device's IP address. This result is shown in a by invoking on the .\n\nYour app can manage cookies in the by using the class. In this step, you are going to show a list of cookies, clear the list of cookies, delete cookies, and set new cookies. Add entries to the for each of the cookie use cases as follows: The rest of the changes in this step are focused on the class, including the conversion of the class from stateless to stateful. This change is important because the needs to own the , and mutable state in stateless widgets is a bad combination. Add the CookieManager to the resulting State class as follows: The class will contain the code previously added in the class, along with the newly added . In the next series of sections, you will add helper functions to that will, in turn, be invoked by the yet to be added menu items. Get a list of all cookies You are going to use JavaScript to get a list of all the cookies. To achieve this, add a helper method to the end of class, called . Using the method, your helper method executes in the JavaScript context, returning a list of all cookies. Add the following to the class: To clear all the cookies in the WebView, use the method of the class. The method returns a that resolves to if the cleared the cookies, and if there were no cookies to clear. Add the following to the class: Adding a cookie can be done by invoking JavaScript. The API used to add a Cookie to a JavaScript document is documented in depth on MDN. Add the following to the class: Cookies can also be set using the CookieManager as follows. Add the following to the class: Removing a cookie involves adding a cookie, with an expiry date set in the past. Add the following to the class: All that remains is to add the menu options, and wire them to the helper methods you just added. Update the class as follows: To use all the functionality you have just added to the app, try the following steps:\n• Select List cookies. It should list the Google Analytics cookies set by flutter.dev.\n• Select Clear cookies. It should report that the cookies were indeed cleared.\n• Select Clear cookies again. It should report that no cookies were available to clear.\n• Select List cookies. It should report that there are no cookies.\n• Select Add cookie. It should report the cookie as added.\n• Select Set cookie. It should report the cookie as set.\n• Select List cookies, and then as a final flourish, select Remove cookie.\n\n12. Load Flutter assets, files and HTML strings in the WebView Your app can load HTML files using different methods and display them in the WebView. In this step you will load a Flutter asset specified in the file, load a file located at the specified path and load a page using a HTML String. If you want to load a file located at a specified path, you will need to add the to the . This is a Flutter plugin for finding commonly used locations on the filesystem. On the command line, run the following command: For loading the asset we need to specify the path to the asset in the . In the add the following lines: To add the assets to your project, do the following steps:\n• Create a new Directory with the name in the root folder of your project.\n• Create a new Directory with the name in the folder.\n• Create a new Directory with the name in the folder.\n• Create a new File with the name in the folder.\n• Create a new File with the name in the folder. Copy and paste the following code in the file: For the style.css use the following few lines to set the HTML header style: Now that the assets are set and ready to use, you can implement the methods that are needed for loading and displaying Flutter assets, files or HTML Strings. For loading the asset you just created, all you need to do is call the method using the and give as parameter the path to the asset. Add the following method at the end of your code: For loading a file on your device you can add a method that will use the method, again by using the which takes a containing the path to the file. You need to make a file containing the HTML code first. You can simply do this by adding the HTML code as a String at the top of your code in the file just beneath the imports. < > < > < > < < > < > < < > This is an example page used to demonstrate how to load a local file or HTML < > < > < > To create a and write the HTML String to the file you will add two methods. The will load the file by providing the path as a String which is returned by the method. Add the following methods to your code: To display a page by providing a HTML string is pretty straight forward. The has a method you can use called where you can give the HTML String as an argument. The will then display the provided HTML page. Add the following method to your code: Now that the assets are set and ready for use, and the methods with all the functionality are made, the menu can be updated. Add the following entries to the enum: Now that the enum is updated you can add the menu options, and wire them to the helper methods you just added. Update the class as follows: To test if the code worked that you just implemented, you can run the code on your device and click on one of the newly added menu items. Notice how the uses the we added to change the header of the HTML file to the color blue."
    },
    {
        "link": "https://stackoverflow.com/questions/55794348/webview-in-flutter-not-working-getting-a-platform-error",
        "document": "I Faced this problem and solved it by changing the Android to you can find it in :\n\nbecause I got the exception after using the plugin and in the documentation of the plugin they stated that you should use android , unfortunately flutter use by default , thats why I got\n\nMy Recommendation Dear reader is to look carefully at the plugins you are using and what version they are supporting on both Android and iOS\n\nThats all I know ..."
    },
    {
        "link": "https://pub.dev/packages/webview_flutter/changelog",
        "document": "Bumped the minimal Flutter SDK to 1.22 where platform views are out of developer preview, and performing better on iOS. Flutter 1.22 no longer requires adding the flag to ."
    },
    {
        "link": "https://github.com/arnaudelub/flutter_polywebview",
        "document": "This is just fork of pichillilorenzo/flutter_inappwebview plugin. Apparently it's not maintained anymore, or at least at the moment. So we will maintain this one until pichillilorenzo came back and if so, we will merge the diff to the original plugin This package can be found here on pub =>\n\nA Flutter plugin that allows you to add an inline webview or open an in-app browser window.\n• Android: and add support for (see AndroidX Migration to migrate an existing app)\n\nIf you are starting a new fresh app, you need to create the Flutter App with to add support for , otherwise it won't work (see AndroidX Migration to migrate an existing app).\n\nDuring the build, if Android fails with Error: uses-sdk:minSdkVersion 16 cannot be smaller than version 17 declared in library , it means that you need to update the of your file to at least .\n\nAlso, you need to add in the file in order to give minimum permission to perform network operations in your application.\n\nBecause of Flutter AndroidX compatibility, the latest version that doesn't use is .\n\nIf you are starting a new fresh app, you need to create the Flutter App with (see flutter/flutter#13422 (comment)), otherwise, you will get this message:\n\nIf you still have this problem, try to edit iOS like this (see #15):\n\nInstead, if you have already a non-swift project, you can check this issue to solve the problem: Friction adding swift plugin to objective-c project.\n\nFor help getting started with Flutter, view our online documentation.\n\nFor help on editing plugin code, view the documentation.\n\nFirst, add as a dependency in your pubspec.yaml file.\n• InAppWebView: Flutter Widget for adding an inline native WebView integrated into the flutter widget tree. To use class on iOS you need to opt-in for the embedded views preview by adding a boolean property to the app's file, with the key and the value .\n• ChromeSafariBrowser: In-App Browser using Chrome Custom Tabs on Android / SFSafariViewController on iOS.\n• InAppLocalhostServer: This class allows you to create a simple server on . The default value is .\n• CookieManager: This class implements a singleton object (shared instance) which manages the cookies used by WebView instances. NOTE for iOS: available from iOS 11.0+.\n• HttpAuthCredentialDatabase: This class implements a singleton object (shared instance) which manages the shared HTTP auth credentials cache.\n• WebStorageManager: This class implements a singleton object (shared instance) which manages the web storage used by WebView instances.\n\nSee the online API Reference to get the full documentation.\n\nThe API showed in this file shows only a part of the documentation that conforms to the master branch only. So, here you could have methods, options, and events that aren't published yet. If you need a specific version, change the GitHub branch to your version or use the online API Reference (recommended).\n\nTo be able to load your local files (assets, js, css, etc.), you need to add them in the section of the file, otherwise they cannot be found!\n\nFlutter Widget for adding an inline native WebView integrated into the flutter widget tree.\n\nThe plugin relies on Flutter's mechanism (in developers preview) for embedding Android and iOS native views: AndroidView and UiKitView. Known issues are tagged with the platform-views label in the Flutter official repo. Keyboard support within webviews is also experimental.\n\nTo use class on iOS you need to opt-in for the embedded views preview by adding a boolean property to the app's file, with the key and the value .\n\nUse to control the WebView instance. Example:\n• : Gets the URL for the current page.\n• : Gets the title for the current page.\n• : Gets the progress for the current page. The progress value is between 0 and 100.\n• : Gets the content html of the page.\n• : Gets the list of all favicons for the current page.\n• : Loads the given url with optional headers specified as a map from name to value.\n• : Loads the given url with postData using method into this WebView.\n• : Loads the given data into this WebView.\n• : Loads the given with optional headers specified as a map from name to value.\n• : Goes back in the history of the WebView.\n• : Returns a boolean value indicating whether the WebView can move backward.\n• : Goes forward in the history of the WebView.\n• : Returns a boolean value indicating whether the WebView can move forward.\n• : Goes to the history item that is the number of steps away from the current item. Steps is negative if backward and positive if forward.\n• : Returns a boolean value indicating whether the WebView can go back or forward the given number of steps. Steps is negative if backward and positive if forward.\n• : Navigates to a from the back-forward and sets it as the current item.\n• : Check if the WebView instance is in a loading state.\n• : Evaluates JavaScript code into the WebView and returns the result of the evaluation.\n• : Injects an external JavaScript file into the WebView from a defined url.\n• : Injects a JavaScript file into the WebView from the flutter assets directory.\n• : Injects an external CSS file into the WebView from a defined url.\n• : Injects a CSS file into the WebView from the flutter assets directory.\n• : Adds a JavaScript message handler callback that listen to post messages sent from JavaScript by the handler with name .\n• : Removes a JavaScript message handler previously added with the associated to key.\n• : Takes a screenshot (in PNG format) of the WebView's visible viewport and returns a . Returns if it wasn't be able to take it.\n• : Sets the WebView options with the new options and evaluates them.\n• : Gets the current WebView options. Returns the options with value if they are not set yet.\n• : Gets the for this WebView. This contains the back/forward list for use in querying each item in the history stack.\n• : Finds all instances of find on the page and highlights them. Notifies listener.\n• : Highlights and scrolls to the next match found by . Notifies listener.\n• : Gets the html (with javascript) of the Chromium's t-rex runner game. Used in combination with .\n• : Gets the css of the Chromium's t-rex runner game. Used in combination with .\n• : Scrolls the WebView to the position.\n• : Moves the scrolled position of the WebView.\n• : On Android, it pauses all layout, parsing, and JavaScript timers for all WebViews. This is a global requests, not restricted to just this WebView. This can be useful if the application has been paused. On iOS, it is restricted to just this WebView.\n• : On Android, it resumes all layout, parsing, and JavaScript timers for all WebViews. This will resume dispatching all timers. On iOS, it resumes all layout, parsing, and JavaScript timers to just this WebView.\n• : Gets the current scale of this WebView.\n\nAndroid-specific methods can be called using the attribute.\n• : Sets the list of hosts (domain names/IP addresses) that are exempt from SafeBrowsing checks. The list is global for all the WebViews.\n• : Returns a URL pointing to the privacy policy for Safe Browsing reporting. This value will never be .\n• : Clears the SSL preferences table stored in response to proceeding with SSL certificate errors.\n• : Clears the client certificate preferences stored in response to proceeding/cancelling client cert requests.\n• : Does a best-effort attempt to pause any processing that can be paused safely, such as animations and geolocation. Note that this call does not pause JavaScript.\n• : Gets the URL that was originally requested for the current page.\n\niOS-specific methods can be called using the attribute.\n• : Reloads the current page, performing end-to-end revalidation using cache-validating conditionals if possible.\n\nThe Android implementation uses addJavascriptInterface. The iOS implementation uses addScriptMessageHandler\n\nThe JavaScript function that can be used to call the handler is , where are rest parameters. The will be stringified automatically using method and then they will be decoded on the Dart side.\n\nIn order to call properly, you need to wait and listen the JavaScript event . This event will be dispatched as soon as the platform (Android or iOS) is ready to handle the method.\n\nreturns a JavaScript Promise that can be used to get the json result returned by [JavaScriptHandlerCallback]. In this case, simply return data that you want to send and it will be automatically json encoded using [jsonEncode] from the library.\n\nSo, on the JavaScript side, to get data coming from the Dart side, you will use:\n\nInstead, on the WebView event, you can use directly:\n• : Set to to be able to listen at the event. The default value is .\n• : Set to to be able to listen at the event. The default value is .\n• : Set to to be able to listen at the event. The default value is .\n• : Set to to have all the browser's cache cleared before the new window is opened. The default value is .\n• : Sets the user-agent for the WebView.\n• : Append to the existing user-agent. Setting userAgent will override this.\n• : Set to to enable JavaScript. The default value is .\n• : Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application.\n• : Set to to allow JavaScript open windows without user interaction. The default value is .\n• : Set to to prevent HTML5 audio or video from autoplaying. The default value is .\n• : Sets the minimum font size. The default value is for Android, for iOS.\n• : Define whether the vertical scrollbar should be drawn or not. The default value is .\n• : Define whether the horizontal scrollbar should be drawn or not. The default value is .\n• : List of custom schemes that the WebView must handle. Use the event to intercept resource requests with custom scheme.\n• : List of that are a set of rules used to block content in the browser window.\n• : Sets the content mode that the WebView needs to use when loading and rendering a webpage. The default value is .\n• : Set to to be able to listen at the event. The default value is .\n• : Set to to be able to listen at the event. The default value is .\n• : Set to to open a browser window with incognito mode. The default value is .\n• : Sets whether WebView should use browser caching. The default value is .\n• : Set to to make the background of the WebView transparent. If your app has a dark theme, this can prevent a white flash on initialization. The default value is .\n• : Set to to disable vertical scroll. The default value is .\n• : Set to to disable horizontal scroll. The default value is .\n• : Sets the text zoom of the page in percent. The default value is .\n• : Set to to have the session cookie cache cleared before the new window is opened.\n• : Set to if the WebView should use its built-in zoom mechanisms. The default value is .\n• : Set to if the WebView should display on-screen zoom controls when using the built-in zoom mechanisms. The default value is .\n• : Set to if the WebView should not support zooming using its on-screen zoom controls and gestures. The default value is .\n• : Set to if you want the database storage API is enabled. The default value is .\n• : Set to if you want the DOM storage API is enabled. The default value is .\n• : Set to if the WebView should enable support for the \"viewport\" HTML meta tag or should use a wide viewport.\n• : Sets whether Safe Browsing is enabled. Safe Browsing allows WebView to protect against malware and phishing attacks by verifying the links.\n• : Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin.\n• : Enables or disables content URL access within WebView. Content URL access allows WebView to load content from a content provider installed in the system. The default value is .\n• : Enables or disables file access within WebView. Note that this enables or disables file system access only.\n• : Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs.\n• : Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin.\n• : Sets the path to the Application Caches files. In order for the Application Caches API to be enabled, this option must be set a path to which the application can write.\n• : Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes). The default value is .\n• : Sets whether the WebView should not load resources from the network. The default value is .\n• : Overrides the way the cache is used. The way the cache is used is based on the navigation type. For a normal page load, the cache is checked and content is re-validated as needed.\n• : Sets the cursive font family name. The default value is .\n• : Sets the default fixed font size. The default value is .\n• : Sets the default font size. The default value is .\n• : Sets the default text encoding name to use when decoding html pages. The default value is .\n• : Disables the action mode menu items according to menuItems flag.\n• : Sets the fantasy font family name. The default value is .\n• : Sets the fixed font family name. The default value is .\n• : Set the force dark mode for this WebView. The default value is .\n• : Sets whether Geolocation API is enabled. The default value is .\n• : Sets the underlying layout algorithm. This will cause a re-layout of the WebView.\n• : Sets whether the WebView loads pages in overview mode, that is, zooms out the content to fit on screen by width.\n• : Sets whether the WebView should load image resources. Note that this method controls loading of all images, including those embedded using the data URI scheme.\n• : Sets the minimum logical font size. The default is .\n• : Sets the initial scale for this WebView. 0 means default. The behavior for the default scale depends on the state of and .\n• : Tells the WebView whether it needs to set a node. The default value is .\n• : Sets whether this WebView should raster tiles when it is offscreen but attached to a window.\n• : Sets the sans-serif font family name. The default value is .\n• : Sets the serif font family name. The default value is .\n• : Sets the standard font family name. The default value is .\n• : Sets whether the WebView should save form data. In Android O, the platform has implemented a fully functional Autofill feature to store form data.\n• : Boolean value to enable third party cookies in the WebView.\n• : Boolean value to enable Hardware Acceleration in the WebView.\n• : Sets whether the WebView whether supports multiple windows.\n• : Regular expression used by event to cancel navigation for frames that are not the main frame. If the url request of a subframe matches the regular expression, then the request of that subframe is canceled.\n• : Set to to disable the bouncing of the WebView when the scrolling has reached an edge of the content. The default value is .\n• : Set to to allow a viewport meta tag to either disable or restrict the range of user scaling. The default value is .\n• : Set to if you want the WebView suppresses content rendering until it is fully loaded into memory. The default value is .\n• : Set to to allow AirPlay. The default value is .\n• : Set to to allow the horizontal swipe gestures trigger back-forward list navigations. The default value is .\n• : Set to to allow that pressing on a link displays a preview of the destination for the link. The default value is .\n• : Set to if you want that the WebView should always allow scaling of the webpage, regardless of the author's intent.\n• : Set to to allow HTML5 media playback to appear inline within the screen layout, using browser-supplied controls rather than native controls.\n• : Set to to allow HTML5 videos play picture-in-picture. The default value is .\n• : A Boolean value indicating whether warnings should be shown for suspected fraudulent content such as phishing or malware.\n• : The level of granularity with which the user can interactively select content in the web view.\n• : Specifying a dataDetectoryTypes value adds interactivity to web content that matches the value.\n• : Set if shared cookies from should used for every load request in the WebView.\n\nEvent names that starts with or are events platform-specific.\n• : Event fired when the InAppWebView is created.\n• : Event fired when the InAppWebView starts to load an url.\n• : Event fired when the InAppWebView finishes loading an url.\n• : Event fired when the InAppWebView encounters an error loading an url.\n• : Event fired when the InAppWebView main page receives an HTTP error.\n• : Event fired when the current progress of loading a page is changed.\n• : Give the host application a chance to take control when a URL is about to be loaded in the current WebView (to use this event, the option must be ). This event is not called on the initial load of the WebView.\n• : Event fired when the host application updates its visited links database. This event is also fired when the navigation state of the InAppWebView changes, for example through the usage of the javascript History API functions.\n• : Event fired when the InAppWebView loads a resource (to use this event, the option must be ).\n• : Event fired when InAppWebView recognizes and starts a downloadable file (to use this event, the option must be ).\n• : Event fired when the InAppWebView finds the while loading a resource. Here you can handle the url request and return a CustomSchemeResponse to load a specific resource encoded to .\n• : Event fired when the InAppWebView requests the host application to create a new window, for example when trying to open a link with or when is called by JavaScript side.\n• : Event fired when javascript calls the method to display an alert dialog.\n• : Event fired when javascript calls the method to display a confirm dialog.\n• : Event fired when javascript calls the method to display a prompt dialog.\n• : Event fired when the WebView received an HTTP authentication request. The default behavior is to cancel the request.\n• : Event fired when the WebView need to perform server trust authentication (certificate validation).\n• : Notify the host application to handle an SSL client certificate request.\n• : Event fired when an is sent to a server (to use this event, the option must be ).\n• : Event fired whenever the attribute of an changes (to use this event, the option must be ).\n• : Event fired as an progress (to use this event, the option must be ).\n• : Event fired when a request is sent to a server through Fetch API (to use this event, the option must be ).\n• : Event fired when is called from JavaScript side.\n• : Event fired when the webview notifies that a loading URL has been flagged by Safe Browsing (available only on Android).\n• : Event fired when the webview is requesting permission to access the specified resources and the permission currently isn't granted or denied (available only on Android).\n• : Event that notifies the host application that web content from the specified origin is attempting to use the Geolocation API, but no permission state is currently set for that origin (available only on Android).\n• : Notify the host application that a request for Geolocation permissions, made with a previous call to has been canceled. (available only on Android).\n\ncan be used to access the API.\n\nCreate a Class that extends the Class in order to override the callbacks to manage the browser events. Example:\n• : Opens an in a new instance.\n• : Opens the given file in a new instance. The other arguments are the same of .\n• : Opens a new instance with as a content, using as the base URL for it.\n• : This is a static method that opens an in the system browser. You wont be able to use the methods here!\n• : Displays an window that was opened hidden. Calling this has no effect if the was already visible.\n• : Hides the window. Calling this has no effect if the was already hidden.\n• : Check if the Web View of the instance is hidden.\n• : Sets the options with the new and evaluates them.\n• : Gets the current options as a . Returns if the options are not setted yet.\n• : Returns if the instance is opened, otherwise .\n\nThey are the same of the class. Specific options of the class are:\n• : Set to to create the browser and load the page, but not show it. Omit or set to to have the browser open and load normally. The default value is .\n• : Set to to hide the toolbar at the top of the WebView. The default value is .\n• : Set the custom background color of the toolbar at the top.\n• : Set to to hide the url bar on the toolbar at the top. The default value is .\n• : Set to if you want the title should be displayed. The default value is .\n• : Set to to not close the InAppBrowser when the user click on the back button and the WebView cannot go back to the history. The default value is .\n• : Set to to hide the progress bar at the bottom of the toolbar at the top. The default value is .\n• : Set to to hide the toolbar at the bottom of the WebView. The default value is .\n• : Set the custom background color of the toolbar at the bottom.\n• : Set to to set the toolbar at the bottom translucent. The default value is .\n• : Set the custom text for the close button.\n• : Set the custom color for the close button.\n• : Set the custom modal presentation style when presenting the WebView. The default value is .\n• : Set to the custom transition style when presenting the WebView. The default value is .\n• : Set to to hide the spinner when the WebView is loading a page. The default value is .\n\nThey are the same of the class, except for event. Specific events of the class are:\n• : Event fired when the is created.\n• : Event fired when the window is closed.\n\nYou can initialize the instance with an fallback instance.\n\nCreate a Class that extends the Class in order to override the callbacks to manage the browser events. Example:\n• : Opens an in a new instance.\n• : Returns if the instance is opened, otherwise .\n• : Set to if you don't want the default share button. The default value is .\n• : Set to if the title shouldn't be shown in the custom tab. The default value is .\n• : Set the custom background color of the toolbar.\n• : Set to to enable the url bar to hide as the user scrolls down on the page. The default value is .\n• : Set to to enable Instant Apps. The default value is .\n• : Set to if Reader mode should be entered automatically when it is available for the webpage. The default value is .\n• : Set to to enable bar collapsing. The default value is .\n• : Set the custom style for the dismiss button. The default value is .\n• : Set the custom background color of the navigation bar and the toolbar.\n• : Set the custom color of the control buttons on the navigation bar and the toolbar.\n• : Set the custom modal presentation style when presenting the WebView. The default value is .\n• : Set to the custom transition style when presenting the WebView. The default value is .\n• : Event fires when the is opened.\n• : Event fires when the is loaded.\n• : Event fires when the is closed.\n\nThis class allows you to create a simple server on in order to be able to load your assets file on a server. The default value is .\n\nThis class implements a singleton object (shared instance) which manages the cookies used by WebView instances.\n\nNOTE for iOS: available from iOS 11.0+.\n• : Sets a cookie for the given . Any existing cookie with the same , and will be replaced with the new cookie. The cookie being set will be ignored if it is expired.\n• : Gets all the cookies for the given .\n• : Gets a cookie by its for the given .\n• : Removes a cookie by its for the given , and .\n• : Removes all cookies for the given , and .\n\nThis class implements a singleton object (shared instance) which manages the shared HTTP auth credentials cache. On iOS, this class uses the URLCredentialStorage class. On Android, this class has a custom implementation using because WebViewDatabase doesn't offer the same functionalities as iOS .\n• : Gets a map list of all HTTP auth credentials saved.\n• : Gets all the HTTP auth credentials saved for that .\n• : Saves an HTTP auth for that .\n• : Removes an HTTP auth for that .\n• : Removes all the HTTP auth credentials saved for that .\n• : Removes all the HTTP auth credentials saved in the database.\n\nThis class implements a singleton object (shared instance) which manages the web storage used by WebView instances.\n\nOn Android, it is implemented using WebStorage. On iOS, it is implemented using WKWebsiteDataStore.default()\n\nNOTE for iOS: available from iOS 9.0+.\n\nAndroid-specific methods can be called using the attribute.\n\nclass is used to manage the JavaScript storage APIs provided by the WebView. It manages the Application Cache API, the Web SQL Database API and the HTML5 Web Storage API.\n• : Gets the origins currently using either the Application Cache or Web SQL Database APIs.\n• : Clears all storage currently being used by the JavaScript storage APIs.\n• : Clears the storage currently being used by both the Application Cache and Web SQL Database APIs by the given .\n• : Gets the storage quota for the Web SQL Database API for the given .\n• : Gets the amount of storage currently being used by both the Application Cache and Web SQL Database APIs by the given .\n\niOS-specific methods can be called using the attribute.\n\nclass represents various types of data that a website might make use of. This includes cookies, disk and memory caches, and persistent data such as WebSQL, IndexedDB databases, and local storage.\n• : Fetches data records containing the given website data types.\n• : Removes website data of the given types for the given data records.\n• : Removes all website data of the given types that has been modified since the given date."
    },
    {
        "link": "https://docs.flutter.dev/cookbook/networking/send-data",
        "document": "Sending data to the internet is necessary for most apps. The package has got that covered, too.\n\nThis recipe uses the following steps:\n• Send data to a server using the package.\n\nTo add the package as a dependency, run :\n\nIf you are deploying to Android, edit your file to add the Internet permission.\n\nLikewise, if you are deploying to macOS, edit your and files to include the network client entitlement.\n\nThis recipe covers how to create an by sending an album title to the JSONPlaceholder using the method.\n\nImport for access to to encode the data:\n\nUse the method to send the encoded data:\n\nThe method returns a that contains a .\n• is a core Dart class for working with asynchronous operations. A Future object represents a potential value or error that will be available at some time in the future.\n• The class contains the data received from a successful http call.\n• The method takes an argument that is sent to the server to create an .\n\nWhile it's easy to make a network request, working with a raw isn't very convenient. To make your life easier, convert the into a Dart object.\n\nFirst, create an class that contains the data from the network request. It includes a factory constructor that creates an from JSON.\n\nConverting JSON with pattern matching is only one option. For more information, see the full article on JSON and serialization.\n\nUse the following steps to update the function to return a :\n• Convert the response body into a JSON with the package.\n• If the server returns a response with a status code of 201, then convert the JSON into an using the factory method.\n• If the server doesn't return a response with a status code of 201, then throw an exception. (Even in the case of a \"404 Not Found\" server response, throw an exception. Do not return . This is important when examining the data in , as shown below.)\n\nHooray! Now you've got a function that sends the title to a server to create an album.\n\nNext, create a to enter a title and a to send data to server. Also define a to read the user input from a .\n\nWhen the is pressed, the is set to the value returned by method.\n\nOn pressing the Create Data button, make the network request, which sends the data in the to the server as a request. The Future, , is used in the next step.\n\nTo display the data on screen, use the widget. The widget comes with Flutter and makes it easy to work with asynchronous data sources. You must provide two parameters:\n• The you want to work with. In this case, the future returned from the function.\n• A function that tells Flutter what to render, depending on the state of the : loading, success, or error.\n\nNote that only returns when the snapshot contains a non-null data value. This is why the function should throw an exception even in the case of a \"404 Not Found\" server response. If returns , then displays indefinitely."
    },
    {
        "link": "https://stackoverflow.com/questions/50278258/http-post-with-json-on-body-flutter-dart",
        "document": "This is my code to make a request to an API:\n\nI have a problem with the response from the request, where its suppose to have a body with json, but something went wrong and i think is with the json that i send on the body request, because it is a nested json object, and the value of the key is a json object. i would love to know how i can parse the json right and insert into body of the request.\n\nthis is the header response:\n\nand this is how is suppose to be:\n\nthe body response came empty and i think its because the body i sent on the request, can anyone help me with the nested json object in value??"
    },
    {
        "link": "https://pub.dev/packages/http",
        "document": "This package contains a set of high-level functions and classes that make it easy to consume HTTP resources. It's multi-platform (mobile, desktop, and browser) and supports multiple implementations.\n\nThe easiest way to use this library is via the top-level functions. They allow you to make individual HTTP requests with minimal hassle:\n\nIf you're making multiple requests to the same server, you can keep open a persistent connection by using a Client rather than making one-off requests. If you do this, make sure to close the client when you're done:\n\nYou can also exert more fine-grained control over your requests and responses by creating Request or StreamedRequest objects yourself and passing them to Client.send.\n\nThis package is designed to be composable. This makes it easy for external libraries to work with one another to add behavior to it. Libraries wishing to add behavior should create a subclass of BaseClient that wraps another Client and adds the desired behavior:\n\nprovides a class to wrap an underlying which transparently retries failing requests.\n\nBy default, this retries any request whose response has status code 503 Temporary Failure up to three retries. It waits 500ms before the first retry, and increases the delay by 1.5x each time. All of this can be customized using the constructor.\n\nThere are multiple implementations of the interface. By default, uses on the web and on all other platforms. You can choose a different implementation based on the needs of your application.\n\nYou can change implementations without changing your application code, except for a few lines of configuration.\n\nTo use an HTTP client implementation other than the default, you must:\n• Connect the HTTP client to the code that uses it.\n\nTo add a package compatible with the Dart SDK to your project, use .\n\nTo add a package that requires the Flutter SDK, use .\n\nDifferent implementations may require different configuration options.\n\nAdd a function that returns a correctly configured . You can return a different on different platforms.\n\nIf your application can be run in the browser and natively, you must put your browser and native configurations in separate files and import the correct file based on the platform.\n\n3. Connect the HTTP client to the code that uses it. #\n\nThe best way to pass to the places that use it is explicitly through arguments.\n\nWhen using the Flutter SDK, you can use a one of many state management approaches.\n\nWhen using the Dart SDK, you can use to ensure that the correct is used when explicit argument passing is not an option. For example, if you depend on code that uses top-level functions (e.g. ) or calls the constructor. When an Isolate is spawned, it does not inherit any variables from the calling Zone, so needs to be used in each Isolate that uses .\n\nYou can ensure that only the that you have explicitly configured is used by defining in the environment. This will also allow the default implementation to be removed, resulting in a reduced application size."
    },
    {
        "link": "https://dart.dev/tutorials/server/fetch-data",
        "document": "Most applications require some form of communication or data retrieval from the internet. Many apps do so through HTTP requests, which are sent from a client to a server to perform a specific action for a resource identified through a URI (Uniform Resource Identifier).\n\nData communicated over HTTP can technically be in any form, but using JSON (JavaScript Object Notation) is a popular choice due to its human-readability and language independent nature. The Dart SDK and ecosystem also have extensive support for JSON with multiple options to best meet your app's requirements.\n\nIn this tutorial, you will learn more about HTTP requests, URIs, and JSON. Then you will learn how to use as well as Dart's JSON support in the library to fetch, decode, then use JSON-formatted data retrieved from an HTTP server.\n\nThe following sections provide some extra background and information around the technologies and concepts used in the tutorial to facilitate fetching data from the server. To skip directly to the tutorial content, see Retrieve the necessary dependencies.\n\nJSON (JavaScript Object Notation) is a data-interchange format that has become ubiquitous across application development and client-server communication. It is lightweight but also easy for humans to read and write due to being text based. With JSON, various data types and simple data structures such as lists and maps can be serialized and represented by strings.\n\nMost languages have many implementations and parsers have become extremely fast, so you don't need to worry about interoperability or performance. For more information about the JSON format, see Introducing JSON. To learn more about working with JSON in Dart, see the Using JSON guide.\n\nHTTP (Hypertext Transfer Protocol) is a stateless protocol designed for transmitting documents, originally between web clients and web servers. You interacted with the protocol to load this page, as your browser uses an HTTP request to retrieve the contents of a page from a web server. Since its introduction, use of the HTTP protocol and its various versions have expanded to applications outside the web as well, essentially wherever communication from a client to a server is needed.\n\nHTTP requests sent from the client to communicate with the server are composed of multiple components. HTTP libraries, such as , allow you to specify the following kinds of communication:\n• An HTTP method defining the desired action, such as to retrieve data or to submit new data.\n• The location of the resource through a URI.\n• The version of HTTP being used.\n• Headers that provide extra information to the server.\n• An optional body, so the request can send data to the server, not just retrieve it.\n\nTo learn more about the HTTP protocol, check out An overview of HTTP on the mdn web docs.\n\nTo make an HTTP request, you need to provide a URI (Uniform Resource Identifier) to the resource. A URI is a character string that uniquely identifies a resource. A URL (Uniform Resource Locator) is a specific kind of URI that also provides the location of the resource. URLs for resources on the web contain three pieces of information. For this current page, the URL is composed of:\n• The scheme used for determining the protocol used:\n• The authority or hostname of the server:\n• The path to the resource:\n\nThere are other optional parameters as well that aren't used by the current page:\n• An anchor, that isn't sent to the server, which points to a specific location in the resource:\n\nTo learn more about URLs, see What is a URL? on the mdn web docs.\n\nThe library provides a cross-platform solution for making composable HTTP requests, with optional fine-grained control.\n\nTo add a dependency on , run the following command from the top of your repo:\n\nTo use in your code, import it and optionally specify a library prefix:\n\nTo learn more specifics about , see its page on the pub.dev site and its API documentation.\n\nAs previously mentioned, to make an HTTP request, you first need a URL that identifies the resource being requested or endpoint being accessed.\n\nIn Dart, URLs are represented through objects. There are many ways to build an , but due to its flexibility, parsing a string with to create one is a common solution.\n\nThe following snippet shows two ways to create a object pointing to mock JSON-formatted information about hosted on this site:\n\nTo learn about other ways of building and interacting with URIs, see the documentation.\n\nIf you just need to quickly fetch a string representation of a requested resource, you can use the top-level function found in that returns a or throws a if the request wasn't successful. The following example uses to retrieve the mock JSON-formatted information about as a string, then prints it out:\n\nThis results in the following JSON-formatted output, which can also be seen in your browser at .\n\nNote the structure of the data (in this case a map), as you will need it when decoding the JSON later on.\n\nIf you need other information from the response, such as the status code or the headers, you can instead use the top-level function that returns a with a .\n\nThe following snippet uses to get the whole response in order to exit early if the request was not successful, which is indicated with a status code of 200:\n\nThere are many other status codes besides 200 and your app might want to handle them differently. To learn more about what different status codes mean, see HTTP response status codes on the mdn web docs.\n\nSome server requests require more information, such as authentication or user-agent information; in this case you might need to include HTTP headers. You can specify headers by passing in a of the key-value pairs as the optional named parameter:\n\nIf you're making multiple requests to the same server, you can instead keep a persistent connection through a , which has similar methods to the top-level ones. Just make sure to clean up with the method when done:\n\nTo enable the client to retry failed requests, import and wrap your created in a :\n\nThe has a default behavior for how many times to retry and how long to wait between each request, but its behavior can be modified through parameters to the or constructors.\n\nhas much more functionality and customization, so make sure to check out its page on the pub.dev site and its API documentation.\n\nWhile you now have made a network request and retrieved the returned data as string, accessing specific portions of information from a string can be a challenge.\n\nSince the data is already in a JSON format, you can use Dart's built-in function in the library to convert the raw string into a JSON representation using Dart objects. In this case, the JSON data is represented in a map structure and, in JSON, map keys are always strings, so you can cast the result of to a :\n\nTo provide the decoded JSON with more structure, making it easier to work with, create a class that can store the retrieved data using specific types depending on the schema of your data.\n\nThe following snippet shows a class-based representation that can store the package information returned from the mock JSON file you requested. This structure assumes all fields except the are required and provided every time.\n\nNow that you have a class to store your data in, you need to add a mechanism to convert the decoded JSON into a object.\n\nConvert the decoded JSON by manually writing a method matching the earlier JSON format, casting types as necessary and handling the optional field:\n\nA handwritten method, such as in the previous example, is often sufficient for relatively simple JSON structures, but there are more flexible options as well. To learn more about JSON serialization and deserialization, including automatic generation of the conversion logic, see the Using JSON guide.\n\nNow you have a class to store your data and a way to convert the decoded JSON object into an object of that type. Next, you can write a function that pulls everything together:\n• Create your based off a passed-in package name.\n• Use to retrieve the data for that package.\n• If the request didn't succeed, throw an or preferably your own custom subclass.\n• If the request succeeded, use to decode the response body into a JSON string.\n• Converted the decoded JSON string into a object using the factory constructor you created.\n\nNow that you've retrieved data and converted it to a more easily accessible format, you can use it however you'd like. Some possibilities include outputting information to a CLI, or displaying it in a web or Flutter app.\n\nHere is complete, runnable example that requests, decodes, then displays the mock information about the and packages:\n\nNow that you have retrieved, parsed, and used data from the internet, consider learning more about Concurrency in Dart. If your data is large and complex, you can move retrieval and decoding to another isolate as a background worker to prevent your interface from becoming unresponsive.\n\nUnless stated otherwise, the documentation on this site reflects Dart 3.7.1. Page last updated on 2025-02-12. View source or report an issue."
    },
    {
        "link": "https://docs.flutter.dev/cookbook/networking/fetch-data",
        "document": "Fetching data from the internet is necessary for most apps. Luckily, Dart and Flutter provide tools, such as the package, for this type of work.\n\nThis recipe uses the following steps:\n• Fetch and display the data with Flutter.\n\nThe package provides the simplest way to fetch data from the internet.\n\nTo add the package as a dependency, run :\n\nIf you are deploying to Android, edit your file to add the Internet permission.\n\nLikewise, if you are deploying to macOS, edit your and files to include the network client entitlement.\n\nThis recipe covers how to fetch a sample album from the JSONPlaceholder using the method.\n\nThe method returns a that contains a .\n• is a core Dart class for working with async operations. A Future object represents a potential value or error that will be available at some time in the future.\n• The class contains the data received from a successful http call.\n\nWhile it's easy to make a network request, working with a raw isn't very convenient. To make your life easier, convert the into a Dart object.\n\nFirst, create an class that contains the data from the network request. It includes a factory constructor that creates an from JSON.\n\nConverting JSON using pattern matching is only one option. For more information, see the full article on JSON and serialization.\n\nNow, use the following steps to update the function to return a :\n• Convert the response body into a JSON with the package.\n• If the server does return an OK response with a status code of 200, then convert the JSON into an using the factory method.\n• If the server does not return an OK response with a status code of 200, then throw an exception. (Even in the case of a \"404 Not Found\" server response, throw an exception. Do not return . This is important when examining the data in , as shown below.)\n\nHooray! Now you've got a function that fetches an album from the internet.\n\nCall the method in either the or methods.\n\nThe method is called exactly once and then never again. If you want to have the option of reloading the API in response to an changing, put the call into the method. See for more details.\n\nThis Future is used in the next step.\n\nTo display the data on screen, use the widget. The widget comes with Flutter and makes it easy to work with asynchronous data sources.\n\nYou must provide two parameters:\n• The you want to work with. In this case, the future returned from the function.\n• A function that tells Flutter what to render, depending on the state of the : loading, success, or error.\n\nNote that only returns when the snapshot contains a non-null data value.\n\nBecause can only return non-null values, the function should throw an exception even in the case of a \"404 Not Found\" server response. Throwing an exception sets the to which can be used to display an error message.\n\nOtherwise, the spinner will be displayed.\n\nAlthough it's convenient, it's not recommended to put an API call in a method.\n\nFlutter calls the method every time it needs to change anything in the view, and this happens surprisingly often. The method, if placed inside , is repeatedly called on each rebuild causing the app to slow down.\n\nStoring the result in a state variable ensures that the is executed only once and then cached for subsequent rebuilds.\n\nFor information on how to test this functionality, see the following recipes:"
    }
]