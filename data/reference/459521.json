[
    {
        "link": "https://github.com/proj4js/proj4js",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations. Originally a port of PROJ (then known as PROJ.4) and GCTCP C (Archive) it is a part of the MetaCRS group of projects.\n\nor just manually grab the file from the latest release's folder.\n\nIf you do not want to download anything, Proj4js is also hosted on cdnjs for direct use in your browser applications.\n\nProjections can be proj or wkt strings.\n\nWkt strings must be in form of version 1 (earlier than 2015). Have a look at the wkt-parser for more info, or use proj strings instead.\n\nCoordinates may be an object of the form or an array of the form .\n\nWhen all 3 arguments are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\n\nThe library can also parse coordinates provided with an elevation and measure, again as an object of the form or an array of the form .\n\nIf only 1 projection is given then it is assumed that it is being projected from WGS84 (fromProjection is WGS84).\n\nIf no coordinates are given an object with two methods is returned, its methods are which projects from the first projection to the second and which projects from the second to the first.\n\nAnd as above if only one projection is given, it's assumed to be coming from wgs84:\n\nNote: The generation of the floating point value in this example represents the fact that some variance in precision is involved in any conversion between one coordinate reference system and another.\n\nIf you prefer to define a projection as a string and reference it that way, you may use the proj4.defs method which can be called 2 ways, with a name and projection:\n\nor with an array\n\nyou can then do\n\ninstead of writing out the whole proj definition, by default proj4 has the following projections predefined:\n• 'EPSG:4326', which has the following alias\n• 'EPSG:3857', which has the following aliases\n\nDefined projections can also be accessed through the proj4.defs function ( ).\n\nproj4.defs can also be used to define a named alias:\n\nBy default, proj4 uses axis order for projected (cartesian) coordinate systems and for geographic coordinates. To enforce the axis order of the provided proj or wkt string, use the\n\nTo use in a proj definition, first read your NTv2 file (e.g. from https://github.com/OSGeo/proj-datumgrid) into an ArrayBuffer, then pass it to . E.g:\n\nthen use the given key in your definition, e.g. . See Grid Based Datum Adjustments.\n\nOptionally, if your file does not contain latitude and longitude error columns, you can provide an object argument to the call, setting the property to , e.g:\n\nIf the options argument is omitted, is assumed to be true.\n\nTypeScript implementation was added to the DefinitelyTyped repository.\n\nTo set up build tools make sure you have node and grunt-cli installed and then run .\n\nTo do the complete build and browser tests run\n\nTo create a build with only default projections (latlon and Mercator) run\n\nTo create a build with only custom projections include a comma separated list of projections codes (the file name in 'lib/projections' without the '.js') after a colon, e.g."
    },
    {
        "link": "http://proj4js.org",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations. Originally a port of PROJ (then known as PROJ.4) and GCTCP C (Archive) it is a part of the MetaCRS group of projects.\n\nor just manually grab the file from the latest release’s folder.\n\nIf you do not want to download anything, Proj4js is also hosted on cdnjs for direct use in your browser applications.\n\nProjections can be proj or wkt strings.\n\nWkt strings must be in form of version 1 (earlier than 2015). Have a look at the wkt-parser for more info, or use proj strings instead.\n\nCoordinates may be an object of the form or an array of the form .\n\nWhen all 3 arguments are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\n\nThe library can also parse coordinates provided with an elevation and measure, again as an object of the form or an array of the form .\n\nIf only 1 projection is given then it is assumed that it is being projected from WGS84 (fromProjection is WGS84).\n\nIf no coordinates are given an object with two methods is returned, its methods are which projects from the first projection to the second and which projects from the second to the first.\n\nAnd as above if only one projection is given, it’s assumed to be coming from wgs84:\n\nNote: The generation of the floating point value in this example represents the fact that some variance in precision is involved in any conversion between one coordinate reference system and another.\n\nIf you prefer to define a projection as a string and reference it that way, you may use the proj4.defs method which can be called 2 ways, with a name and projection:\n\nor with an array\n\nyou can then do\n\ninstead of writing out the whole proj definition, by default proj4 has the following projections predefined:\n• ‘EPSG:4326’, which has the following alias\n• ‘EPSG:3857’, which has the following aliases\n\nDefined projections can also be accessed through the proj4.defs function ( ).\n\nproj4.defs can also be used to define a named alias:\n\nBy default, proj4 uses axis order for projected (cartesian) coordinate systems and for geographic coordinates. To enforce the axis order of the provided proj or wkt string, use the\n\nTo use in a proj definition, first read your NTv2 file (e.g. from https://github.com/OSGeo/proj-datumgrid) into an ArrayBuffer, then pass it to . E.g:\n\nthen use the given key in your definition, e.g. . See Grid Based Datum Adjustments.\n\nTypeScript implementation was added to the DefinitelyTyped repository.\n\nTo set up build tools make sure you have node and grunt-cli installed and then run .\n\nTo do the complete build and browser tests run\n\nTo create a build with only default projections (latlon and Mercator) run\n\nTo create a build with only custom projections include a comma separated list of projections codes (the file name in ‘lib/projections’ without the ‘.js’) after a colon, e.g."
    },
    {
        "link": "https://proj.org",
        "document": "PROJ is a generic coordinate transformation software that transforms geospatial coordinates from one coordinate reference system (CRS) to another. This includes cartographic projections as well as geodetic transformations. PROJ is released under the X/MIT open source license\n\nPROJ includes command line applications for easy conversion of coordinates from text files or directly from user input. In addition to the command line utilities PROJ also exposes an application programming interface, or API in short. The API lets developers use the functionality of PROJ in their own software without having to implement similar functionality themselves.\n\nPROJ started purely as a cartography application letting users convert geodetic coordinates into projected coordinates using a number of different cartographic projections. Over the years, as the need has become apparent, support for datum shifts has slowly worked its way into PROJ as well. Today PROJ supports more than a hundred different map projections and can transform coordinates between datums using all but the most obscure geodetic techniques.\n\nYou can download the source code for PROJ on the download section and find links to prepackaged executables in the installation section."
    },
    {
        "link": "https://github.com/garmin/proj4js",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations. Originally a port of PROJ.4 and GCTCP C it is a part of the MetaCRS group of projects.\n\nor just manually grab the file from the latest release.\n\nif you do not want to download anything, Proj4js is also hosted on cdnjs for direct use in your browser applications.\n\nProjections can be proj or wkt strings.\n\nCoordinates may an object of the form or an array of the form .\n\nWhen all 3 arguments are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\n\nIf only 1 projection is given then it is assumed that it is being projected from WGS84 (fromProjection is WGS84).\n\nIf no coordinates are given an object with two methods is returned, its methods are which projects from the first projection to the second and which projects from the second to the first.\n\nand as above if only one projection is given, it's assumed to be coming from wgs84\n\nIf you prefer to define a projection as a string and reference it that way, you may use the proj4.defs method which can be called 2 ways, with a name and projection:\n\nor with an array\n\nyou can then do\n\ninstead of writing out the whole proj definition, by default proj4 has the following projections predefined:\n• 'EPSG:4326', which has the following alias\n• 'EPSG:3857', which has the following aliases\n\ndefined projections can also be accessed through the proj4.defs function ( ).\n\nproj4.defs can also be used to define a named alias:\n\n##Developing to set up build tools make sure you have node and grunt-cli installed and then run\n\nto do the complete build and browser tests run\n\nto create a build with only default projections (latlon and Mercator) run\n\nto create a build with only custom projections include a comma separated list of projections codes (the file name in 'lib/projections' without the '.js') after a colon, e.g."
    },
    {
        "link": "https://docs.gossinteractive.com/article/8917/proj4js",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations.\n\nThis library is distributed under the MIT license, its source and full documentation can be found at https://github.com/proj4js/proj4js (opens new window).\n\nThis example takes long/lat coordinates in Plymouth and converts them to British National Grid.\n\nIt uses the proj4.defs method to define a projection (you can find definitions in open source projects online, for example https://epsg.io/27700 includes Proj4js in its list of export examples).\n\nNote that by default proj4 uses the axis order [x=longitude,y=latitude] for geographic coordinates.\n\nSee the documentation linked to above for lots more information."
    },
    {
        "link": "https://github.com/proj4js/proj4js",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations. Originally a port of PROJ (then known as PROJ.4) and GCTCP C (Archive) it is a part of the MetaCRS group of projects.\n\nor just manually grab the file from the latest release's folder.\n\nIf you do not want to download anything, Proj4js is also hosted on cdnjs for direct use in your browser applications.\n\nProjections can be proj or wkt strings.\n\nWkt strings must be in form of version 1 (earlier than 2015). Have a look at the wkt-parser for more info, or use proj strings instead.\n\nCoordinates may be an object of the form or an array of the form .\n\nWhen all 3 arguments are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\n\nThe library can also parse coordinates provided with an elevation and measure, again as an object of the form or an array of the form .\n\nIf only 1 projection is given then it is assumed that it is being projected from WGS84 (fromProjection is WGS84).\n\nIf no coordinates are given an object with two methods is returned, its methods are which projects from the first projection to the second and which projects from the second to the first.\n\nAnd as above if only one projection is given, it's assumed to be coming from wgs84:\n\nNote: The generation of the floating point value in this example represents the fact that some variance in precision is involved in any conversion between one coordinate reference system and another.\n\nIf you prefer to define a projection as a string and reference it that way, you may use the proj4.defs method which can be called 2 ways, with a name and projection:\n\nor with an array\n\nyou can then do\n\ninstead of writing out the whole proj definition, by default proj4 has the following projections predefined:\n• 'EPSG:4326', which has the following alias\n• 'EPSG:3857', which has the following aliases\n\nDefined projections can also be accessed through the proj4.defs function ( ).\n\nproj4.defs can also be used to define a named alias:\n\nBy default, proj4 uses axis order for projected (cartesian) coordinate systems and for geographic coordinates. To enforce the axis order of the provided proj or wkt string, use the\n\nTo use in a proj definition, first read your NTv2 file (e.g. from https://github.com/OSGeo/proj-datumgrid) into an ArrayBuffer, then pass it to . E.g:\n\nthen use the given key in your definition, e.g. . See Grid Based Datum Adjustments.\n\nOptionally, if your file does not contain latitude and longitude error columns, you can provide an object argument to the call, setting the property to , e.g:\n\nIf the options argument is omitted, is assumed to be true.\n\nTypeScript implementation was added to the DefinitelyTyped repository.\n\nTo set up build tools make sure you have node and grunt-cli installed and then run .\n\nTo do the complete build and browser tests run\n\nTo create a build with only default projections (latlon and Mercator) run\n\nTo create a build with only custom projections include a comma separated list of projections codes (the file name in 'lib/projections' without the '.js') after a colon, e.g."
    },
    {
        "link": "https://omurbilgili.medium.com/unveiling-the-magic-of-proj4js-transforming-geospatial-data-with-ease-81724cf2d53a",
        "document": "In the world of geospatial data and mapping, Proj4js stands out as a powerful and versatile JavaScript library. With its ability to perform coordinate system transformations, it has become an essential tool for developers and GIS professionals alike. This article explores the wonders of Proj4js, delving into its features, applications, and the transformative impact it has had on geospatial data processing.\n\nProj4js, an open-source JavaScript library, is a port of the popular Proj.4 library that has been widely used in the geospatial community for coordinate system transformations. Proj4js enables developers to convert coordinates between different projection systems, making it easier to overlay and integrate data from various sources.\n\nThe library provides a comprehensive set of functions for both forward and inverse transformations, allowing users to convert coordinates from one coordinate system to another seamlessly. Proj4js supports a wide range of coordinate systems and projections, including popular ones like UTM (Universal Transverse Mercator), WGS84 (World Geodetic System 1984), and Lambert Conformal Conic, among others.\n\nTo get started with Proj4js, download latest release from here and include the library in your web project:\n\nor install using node to your project:\n\nProj4js boasts a plethora of features that make it an indispensable tool for geospatial data processing. Firstly, it offers a simple and intuitive API, making it easy to integrate into web applications. The library supports both 2D and 3D transformations, accommodating a wide range of use cases.\n\nAdditionally, Proj4js provides extensive parameterization options, allowing users to fine-tune their coordinate conversions. It supports datum shifting, datum grids, and custom coordinate systems, enabling precise transformations based on specific needs. The library also offers robust error handling and supports chaining multiple transformations, facilitating complex data manipulations.\n\nProj4js simplifies the conversion of coordinates from one projection system to another. Take a look at this code snippet:\n\nProj4js supports datum shifting, allowing you to handle coordinate transformations that involve different geodetic datums. It also accommodates custom coordinate systems, providing the flexibility required for specialized applications.\n\nIf you’d rather define a projection as a string and refer to it that way, you can use the proj4.defs method, which can be invoked in two ways, with a name and a projection:\n\nor using an array:\n\nand then you can do:\n\nProj4js has emerged as a powerful tool for geospatial data processing, offering developers the ability to seamlessly transform coordinates between different projection systems. Its rich feature set, intuitive API, and support for various coordinate systems make it an indispensable library for web mapping applications, geolocation services, data integration, and analysis. Proj4js empowers developers to overcome the challenges of working with diverse geospatial datasets, unlocking new possibilities in the realm of mapping and geospatial analysis. As the demand for interactive mapping and geospatial applications continues to grow, Proj4js will undoubtedly remain a vital component in the developer’s toolkit."
    },
    {
        "link": "http://proj4js.org",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations. Originally a port of PROJ (then known as PROJ.4) and GCTCP C (Archive) it is a part of the MetaCRS group of projects.\n\nor just manually grab the file from the latest release’s folder.\n\nIf you do not want to download anything, Proj4js is also hosted on cdnjs for direct use in your browser applications.\n\nProjections can be proj or wkt strings.\n\nWkt strings must be in form of version 1 (earlier than 2015). Have a look at the wkt-parser for more info, or use proj strings instead.\n\nCoordinates may be an object of the form or an array of the form .\n\nWhen all 3 arguments are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\n\nThe library can also parse coordinates provided with an elevation and measure, again as an object of the form or an array of the form .\n\nIf only 1 projection is given then it is assumed that it is being projected from WGS84 (fromProjection is WGS84).\n\nIf no coordinates are given an object with two methods is returned, its methods are which projects from the first projection to the second and which projects from the second to the first.\n\nAnd as above if only one projection is given, it’s assumed to be coming from wgs84:\n\nNote: The generation of the floating point value in this example represents the fact that some variance in precision is involved in any conversion between one coordinate reference system and another.\n\nIf you prefer to define a projection as a string and reference it that way, you may use the proj4.defs method which can be called 2 ways, with a name and projection:\n\nor with an array\n\nyou can then do\n\ninstead of writing out the whole proj definition, by default proj4 has the following projections predefined:\n• ‘EPSG:4326’, which has the following alias\n• ‘EPSG:3857’, which has the following aliases\n\nDefined projections can also be accessed through the proj4.defs function ( ).\n\nproj4.defs can also be used to define a named alias:\n\nBy default, proj4 uses axis order for projected (cartesian) coordinate systems and for geographic coordinates. To enforce the axis order of the provided proj or wkt string, use the\n\nTo use in a proj definition, first read your NTv2 file (e.g. from https://github.com/OSGeo/proj-datumgrid) into an ArrayBuffer, then pass it to . E.g:\n\nthen use the given key in your definition, e.g. . See Grid Based Datum Adjustments.\n\nTypeScript implementation was added to the DefinitelyTyped repository.\n\nTo set up build tools make sure you have node and grunt-cli installed and then run .\n\nTo do the complete build and browser tests run\n\nTo create a build with only default projections (latlon and Mercator) run\n\nTo create a build with only custom projections include a comma separated list of projections codes (the file name in ‘lib/projections’ without the ‘.js’) after a colon, e.g."
    },
    {
        "link": "https://github.com/garmin/proj4js",
        "document": "Proj4js is a JavaScript library to transform point coordinates from one coordinate system to another, including datum transformations. Originally a port of PROJ.4 and GCTCP C it is a part of the MetaCRS group of projects.\n\nor just manually grab the file from the latest release.\n\nif you do not want to download anything, Proj4js is also hosted on cdnjs for direct use in your browser applications.\n\nProjections can be proj or wkt strings.\n\nCoordinates may an object of the form or an array of the form .\n\nWhen all 3 arguments are given, the result is that the coordinates are transformed from projection1 to projection 2. And returned in the same format that they were given in.\n\nIf only 1 projection is given then it is assumed that it is being projected from WGS84 (fromProjection is WGS84).\n\nIf no coordinates are given an object with two methods is returned, its methods are which projects from the first projection to the second and which projects from the second to the first.\n\nand as above if only one projection is given, it's assumed to be coming from wgs84\n\nIf you prefer to define a projection as a string and reference it that way, you may use the proj4.defs method which can be called 2 ways, with a name and projection:\n\nor with an array\n\nyou can then do\n\ninstead of writing out the whole proj definition, by default proj4 has the following projections predefined:\n• 'EPSG:4326', which has the following alias\n• 'EPSG:3857', which has the following aliases\n\ndefined projections can also be accessed through the proj4.defs function ( ).\n\nproj4.defs can also be used to define a named alias:\n\n##Developing to set up build tools make sure you have node and grunt-cli installed and then run\n\nto do the complete build and browser tests run\n\nto create a build with only default projections (latlon and Mercator) run\n\nto create a build with only custom projections include a comma separated list of projections codes (the file name in 'lib/projections' without the '.js') after a colon, e.g."
    },
    {
        "link": "https://observablehq.com/@fil/proj4js-d3",
        "document": "Experiment and prototype by building visualizations in live JavaScript notebooks. Collaborate with your team and decide which concepts to build out.\n\nUse Observable Framework to build data apps locally. Use data loaders to build in any language or library, including Python, SQL, and R.\n\nSeamlessly deploy to Observable. Test before you ship, use automatic deploy-on-commit, and ensure your projects are always up-to-date."
    }
]