[
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/desktop/winforms/event-handlers-overview-windows-forms?view=netframeworkdesktop-4.8",
        "document": "An event handler is a method that is bound to an event. When the event is raised, the code within the event handler is executed. Each event handler provides two parameters that allow you to handle the event properly. The following example shows an event handler for a Button control's Click event.\n\nThe first parameter, , provides a reference to the object that raised the event. The second parameter, , in the example above, passes an object specific to the event that is being handled. By referencing the object's properties (and, sometimes, its methods), you can obtain information such as the location of the mouse for mouse events or data being transferred in drag-and-drop events.\n\nTypically each event produces an event handler with a different event-object type for the second parameter. Some event handlers, such as those for the MouseDown and MouseUp events, have the same object type for their second parameter. For these types of events, you can use the same event handler to handle both events.\n\nYou can also use the same event handler to handle the same event for different controls. For example, if you have a group of RadioButton controls on a form, you could create a single event handler for the Click event and have each control's Click event bound to the single event handler. For more information, see How to: Connect Multiple Events to a Single Event Handler in Windows Forms."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events",
        "document": "Events enable a class or object to notify other classes or objects when something of interest occurs. The class that sends (or raises) the event is called the publisher and the classes that receive (or handle) the event are called subscribers.\n\nIn a typical C# Windows Forms or Web application, you subscribe to events raised by controls such as buttons and list boxes. You can use the Visual C# integrated development environment (IDE) to browse the events that a control publishes and select the ones that you want to handle. The IDE provides an easy way to automatically add an empty event handler method and the code to subscribe to the event. For more information, see How to subscribe to and unsubscribe from events.\n\nEvents have the following properties:\n• The publisher determines when an event is raised; the subscribers determine what action is taken in response to the event.\n• An event can have multiple subscribers. A subscriber can handle multiple events from multiple publishers.\n• Events that have no subscribers are never raised.\n• Events are typically used to signal user actions such as button clicks or menu selections in graphical user interfaces.\n• When an event has multiple subscribers, the event handlers are invoked synchronously when an event is raised. To invoke events asynchronously, see Calling Synchronous Methods Asynchronously.\n• In the .NET class library, events are based on the EventHandler delegate and the EventArgs base class.\n\nFor more information, see:\n• How to subscribe to and unsubscribe from events\n• How to publish events that conform to .NET Guidelines\n• How to raise base class events in derived classes\n\nFor more information, see Events in the C# Language Specification. The language specification is the definitive source for C# syntax and usage."
    },
    {
        "link": "https://stackoverflow.com/questions/6442697/how-to-implement-a-in-program-documentation-in-c-sharp-winforms",
        "document": "For a student project we want to implement a help / documentation form.\n\nIn this form we want to display text and images that should describe / help with the application.\n\nThe information could be represented in some kind of FAQ with questions and answers. These questions could the grouped into different categories like: (General information, function X, function y, function z, ...)\n\nUnfortunately I don't know what would be a good way to implement / display this. The following possibilites come into my mind:\n• Create a PDF for each category, use a treeview for the category selection and display the PDF for the selected category\n• Use a richtext textbox in the design time and set the editable function to false in the runtime. (I do dislike this idea)\n\nI also think that updating the documentation will also be a issue. I guess I'd prefer to use an external program to write the documentation and to just include it into the program.\n\nHas anyone some advice on this issue? (C# 4.0, Winforms)"
    },
    {
        "link": "https://stackoverflow.com/questions/11732638/events-and-windows-forms-in-c-sharp",
        "document": "So I just read through the Events tutorial on MSDN and am having some problems applying it in my program. I was wondering if someone here could give me a hand.\n\nSo I have two forms, a parent called and a child called . The child has a button called . Currently, there is a single subscriber called subscribed to this event. The existing subscriber is on the child form. I want to add a second subscriber to this event, but this subscriber will be on the parent form. Here is the function on my parent form:\n\nAnd here is my attempt to subscribe the function to my child's event:"
    },
    {
        "link": "https://geeksforgeeks.org/introduction-to-c-sharp-windows-forms-applications",
        "document": "Windows Forms is a Graphical User Interface(GUI) class library which is bundled in .Net Framework. Its main purpose is to provide an easier interface to develop the applications for desktop, tablet, PCs. It is also termed as the WinForms. The applications which are developed by using Windows Forms or WinForms are known as the Windows Forms Applications that runs on the desktop computer. WinForms can be used only to develop the Windows Forms Applications not web applications. WinForms applications can contain the different type of controls like labels, list boxes, tooltip etc.\n• First, open the Visual Studio then Go to File -> New -> Project to create a new project and then select the language as Visual C# from the left menu. Click on Windows Forms App(.NET Framework) in the middle of current window. After that give the project name and Click OK. Here the solution is like a container which contains the projects and files that may be required by the program.\n• After that following window will display which will be divided into three parts as follows:\n• Editor Window or Main Window: Here, you will work with forms and code editing. You can notice the layout of form which is now blank. You will double click the form then it will open the code for that.\n• Solution Explorer Window: It is used to navigate between all items in solution. For example, if you will select a file form this window then particular information will be display in the property window.\n• Properties Window: This window is used to change the different properties of the selected item in the Solution Explorer. Also, you can change the properties of components or controls that you will add to the forms.\n• Now to add the controls to your WinForms application go to Toolbox tab present in the extreme left side of Visual Studio. Here, you can see a list of controls. To access the most commonly used controls go to Common Controls present in Toolbox tab.\n• Now drag and drop the controls that you needed on created Form. For example, if you can add TextBox, ListBox, Button etc. as shown below. By clicking on the particular dropped control you can see and change its properties present in the right most corner of Visual Studio. In the above image, you can see the TextBox is selected and its properties like TextAlign, MaxLength etc. are opened in right most corner. You can change its properties’ values as per the application need. The code of controls will be automatically added in the background. You can check the Form1.Designer.cs file present in the Solution Explorer Window.\n• To run the program you can use an F5 key or Play button present in the toolbar of Visual Studio. To stop the program you can use pause button present in the ToolBar. You can also run the program by going to Debug->Start Debugging menu in the menubar.\n\nC# Windows Forms is a graphical user interface (GUI) framework that enables developers to create desktop applications for the Windows operating system. Windows Forms applications are created using the C# programming language and the .NET framework. They are built by dragging and dropping controls such as buttons, text boxes, labels, and other user interface elements onto a form.\n• The Windows Forms framework provides a rich set of controls that developers can use to build applications with. These controls are designed to provide a consistent and familiar user interface for Windows users. Developers can customize the appearance and behavior of these controls by setting various properties and handling events.\n• To create a Windows Forms application in C#, you can use Microsoft Visual Studio, which is an integrated development environment (IDE) that provides a visual designer to create and layout the user interface elements. The visual designer is a drag-and-drop interface for building your UI, and you can easily configure each control’s properties through a user-friendly interface.\n• In addition to the visual designer, Visual Studio also provides a code editor that enables developers to write the C# code for the application’s logic. Developers can handle events and perform tasks such as data validation, data manipulation, and business logic implementation.\n• Windows Forms applications are versatile and can be used to create various types of applications such as data entry, management, and reporting applications, as well as games and multimedia applications.\n\nOverall, Windows Forms applications provide an easy-to-use and familiar graphical user interface for Windows users, making it an ideal choice for building desktop applications that require a high degree of interactivity and user engagement."
    },
    {
        "link": "https://stackoverflow.com/questions/14768010/simple-bubble-sort-c-sharp",
        "document": "All I am attempting to do is a simple bubble sort with this array. I would like to figure out why the sorting is screwed up. In example, here is when the array is :\n\nHere is what gets displayed:\n\nI am thinking that I might be missing something in the comparison."
    },
    {
        "link": "https://stackoverflow.com/questions/62323464/how-to-implement-bubble-sort-on-an-array-of-names-strings-to-sort-alphabetical",
        "document": "So i can't get the bubble sort algorithm working on an array of names / strings in C#, can anyone provide an example of how to do this\n\nI already did it to some integers, but can't seem to do it with names, i just don't know how\n\nhere's the numbers code, it can sort the integers, but i can't figure out how to make this work for a list of names:"
    },
    {
        "link": "https://medium.com/@nile.bits/understanding-the-bubble-sort-algorithm-a647dbc5ed72",
        "document": "Computer science, programming and sorting is an essential operation. This is the practice of placing items or data into an organized fashion usually based on increasing or decreasing values so that information can be easily navigated through and worked with. Different sorting algorithms can be taken up, each providing one benefit or another. The simplest sorting algorithm is known as the Bubble Sort. This post is about exploring the bubble sort algorithm using C# code.\n\nBubble Sort is a straightforward comparison-based sorting algorithm that repeatedly steps through the list to be sorted, compares adjacent elements, and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The algorithm is named because smaller or larger elements “bubble” to the top of the list as the sorting process progresses.\n• Comparing Adjacent Elements: Bubble Sort starts by comparing the first two elements of the list.\n• Swapping if Necessary: If the first element is greater than the second element (for ascending order), they are swapped.\n• Moving to the Next Pair: The algorithm proceeds to compare the second and third elements, then the third and fourth, and so on.\n• Iterating Through the List: This process continues for multiple iterations until no more swaps are needed.\n• Termination: The algorithm terminates when no swaps are made in an entire pass through the list, indicating that the list is sorted.\n\nTo help you understand Bubble Sort better, let’s dive into some C# code examples.\n\nLet’s implement the Bubble Sort algorithm in C# using an array of integers.\n\nIn this example, we create an array arr of integers and then use the BubbleSortArray method to sort it. The PrintArray method is used to display the array before and after sorting.\n\nTo better understand the Bubble Sort algorithm, let’s visualize a pass through the array:\n• Pass 1:Comparing and swapping 64 and 34: [34, 64, 25, 12, 22, 11, 90]Comparing and swapping 64 and 25: [34, 25, 64, 12, 22, 11, 90]Comparing and swapping 64 and 12: [34, 25, 12, 64, 22, 11, 90]Comparing and swapping 64 and 22: [34, 25, 12, 22, 64, 11, 90]Comparing and swapping 64 and 11: [34, 25, 12, 22, 11, 64, 90]No more swaps needed in Pass 1.\n• Pass 2:Comparing and swapping 34 and 25: [25, 34, 12, 22, 11, 64, 90]Comparing and swapping 34 and 12: [25, 12, 34, 22, 11, 64, 90]Comparing and swapping 34 and 22: [25, 12, 22, 34, 11, 64, 90]Comparing and swapping 34 and 11: [25, 12, 22, 11, 34, 64, 90]No more swaps needed in Pass 2.\n• Pass 3:Comparing and swapping 25 and 12: [12, 25, 22, 11, 34, 64, 90]Comparing and swapping 25 and 22: [12, 22, 25, 11, 34, 64, 90]Comparing and swapping 25 and 11: [12, 22, 11, 25, 34, 64, 90]No more swaps needed in Pass 3.\n• Pass 4:Comparing and swapping 22 and 11: [12, 11, 22, 25, 34, 64, 90]No more swaps needed in Pass 4.\n\nThe array is now sorted, and Bubble Sort terminates. The final sorted array is: [11, 12, 22, 25, 34, 64, 90].\n\nBubble Sort has a time complexity of O(n²) in the worst and average cases, making it inefficient for large datasets. However, it has a best-case time complexity of O(n) when the array is already sorted, as no swaps are needed.\n\nOne of the easiest examples of how to sort an information is Bubble Sort — it is easily comprehensible and easy to write. Nevertheless, it takes much time and is unsuitable for large datasets. Mostly meant for school work and not good for production coding.\n\nWhen compared to these efficient sorting algorithms like Quick Sort or Merge Sort, such kind of algorithms is better suited for real-world scenarios. Learning Bubble sort is a good entry point for those looking to dive into sorting algorithms, with the potential to lead to deeper exploration of more complex sorting methods.\n\nI’m sure this blog post on the Bubble Sort algorithm in C# has been helpful for you. Feel free to ask me any question if you are still not clear about something. Happy coding!"
    },
    {
        "link": "https://gist.github.com/kyvycodes/6f119924edd80eba840129c342c85211",
        "document": "Write a function that takes in an array of integers and returns a sorted version of that array. Use the Bubble sort algorithm to sort the array.\n\nYou may provide your interviewee with these examples if you like. I would use replt for this one.\n• Make sure your interviewee knows what bubble sort is - The idea behind bubble sort is that every pair of adjacent values is compared, and then the two values swap positions if the first value is greater than the second. This way during each pass through the array, the largest value “bubbles up” to the top, and after each pass the elements furthest to the right are in the correct order.\n• There are no major edge cases to consider during this problem.\n• If your partner is familiar with the naive solution (brute force) and gets to it in a timely manner have them try out refactoring using the helper function (solution 2) if they need more of a challenge, have them add the boolean used in solution 3 and discuss why (we will be touching base on this in the morning)\n• Here is an example for interviewer comprehension using [5,3,1,4,6] as the input array."
    },
    {
        "link": "https://simplilearn.com/tutorials/c-sharp-tutorial/sorting-algorithms-in-c-sharp",
        "document": ""
    }
]