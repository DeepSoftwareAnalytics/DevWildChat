[
    {
        "link": "https://0-11-x.docs.colyseus.io/authentication",
        "document": "This section covers the configuration and usage of .\n\nis an experimental module that provides general-purpose backend services to speed-up your multiplayer game development experience. The API is open for suggestions and improvement.\n• Import and expose the Express routes provided by .\n\nThe module provides the MongoDB models, and the token validation function available for you to use.\n\nThe hook is triggered before a user logs in or registers.\n\nThe hooks is triggered before a user update his own information through the save() method.\n\nYou can modify the , , , , , and from the client-side, and then call the method."
    },
    {
        "link": "https://github.com/colyseus/colyseus/issues/660",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://0-12-x.docs.colyseus.io/authentication",
        "document": "This section covers the configuration and usage of .\n\nis an experimental module that provides general-purpose backend services to speed-up your multiplayer game development experience. The API is open for suggestions and improvement.\n• Import and expose the Express routes provided by .\n\nThe module provides the MongoDB models, and the token validation function available for you to use.\n\nThe hook is triggered before a user logs in or registers.\n\nThe hooks is triggered before a user update his own information through the save() method.\n\nYou can modify the , , , , , and from the client-side, and then call the method."
    },
    {
        "link": "https://0-14-x.docs.colyseus.io/colyseus/tools/colyseus-social",
        "document": "The module is going to be fully deprecated soon. For now, we suggest using Firebase, Auth0, or other authentication provider of your choice.\n\nThis section covers the configuration and usage of .\n\nis an experimental module that provides general-purpose backend services to speed-up your multiplayer game development experience. The API is open for suggestions and improvement.\n• Import and expose the Express routes provided by .\n\nThe module provides the MongoDB models, and the token validation function available for you to use.\n\nThe hook is triggered before a user logs in or registers.\n\nThe hook is triggered before a user updates his own information through the save() method.\n\nYou can modify the , , , , , and from the client-side, and then call the method."
    },
    {
        "link": "https://0-10-x.docs.colyseus.io/server/authentication",
        "document": "You may implement the method to validate the authenticity of your clients.\n\nWhen requesting to join a room, this is the order of methods which will be called in your room handler:\n• - should check if a room is available for new clients\n• - should validate the client based on the options provided (i.e. auth token)\n• - should initialize the new client into your room's state.\n\nFrom the client-side, you'd call the method with a token from some authentication service of your choice (i. e. Facebook):\n\nThe method in your room handler should return a truthy value if the access token is valid.\n\nYou may also return custom user-related data, which will be passed on the third parameter of .\n\nYou can immediatelly return a value.\n\nYou can return a , and perform some asynchronous task to validate the client.\n\nAlternatively, you can use / , which will return a under the hood."
    },
    {
        "link": "https://github.com/colyseus/colyseus/issues/660",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://docs.colyseus.io/server/room",
        "document": "The class is meant to implement a game session, and/or serve as the communication channel between a group of clients.\n• Rooms are created on demand during matchmaking by default\n• Room classes must be exposed using\n• Optional / is supported on every lifecycle event.\n\nCalled once, when the room is created by the matchmaker. is the merged values specified on Server#define() with the options provided from the SDK at or .\n\nThe server may overwrite options during for authortity over client-provided options:\n\nOn this example, the option is during , and during .\n\nThe method is called before , and it is responsible for validating the client’s request to join a room.\n\nTriggered when a client successfully joins the room, after a successful .\n• : A reference to the client that joined the room.\n• : Options provided by the Client SDK. (Merged with default values provided by Server#define())\n\nIf the client leaves the room by closing the browser tab, the method is called with set to . If the client leaves the room by calling , the method is called with set to .\n\nYou may define this function as :\n\nThe method is called before the room is destroyed, which happens when:\n• there are no more clients left in the room, and is set to (default)\n\nYou may define an asynchronous method in order to persist some data in the database. In fact, this is a great place to persist player’s data in the database after a game match ends.\n\nOpt-in to catch unhandled exceptions in your room. This method is called when an unhandled exception occurs in any of the lifecycle methods.\n\nThe lifecycle hook is triggered before state synchronization, at patch rate frequency. (see setPatchRate())\n\nAn optional hook to cache external data when is enabled. (See restoring data outside the room’s state)\n\nAn optional hook to reprocess/restore data which was returned and stored from the previous hook when Development Mode is enabled.\n\nThe lifecycle hook is called as part of the Graceful Shutdown process. The process will only truly shutdown after all rooms have been disposed.\n\nBy default, the room will disconnect all clients and dispose itself immediately.\n\nYou may customize how the room should behave during the shutdown process:\n\nRoom handlers have these methods available.\n\nRegister a callback to process a type of message sent by the client-side.\n• The argument can be either or .\n• You can only define a single callback per message type. (Defining a callback more than once will result in overriding the previous one)\n\nYou can register a single callback as a fallback to handle other types of messages.\n\nYou may provide a validation function as the third argument to . This function will be called before the message is processed, and if it throws an error, the message will be ignored.\n\nThe data returned by the validation function will be passed as on the message handler.\n\nSet the synchronizable room state. See State Synchronization and Schema for more details.\n\nOptional: Set a simulation interval that can change the state of the game. The simulation interval is your game loop. Default simulation interval: 16.6ms (60fps)\n\nSet frequency the patched state should be sent to all clients. Default is (20fps)\n\nSet the room listing as private - or revert it to public, if is provided.\n\nSet metadata to this room. Each room instance may have metadata attached to it - the only purpose for attaching metadata is to differentiate one room from another when getting the list of available rooms via Lobby Room or Match-maker API.\n\nSet the number of seconds a room can wait for a client to effectively join the room. You should consider how long your will have to wait for setting a different seat reservation time. The default value is 15 seconds.\n\nYou may set the environment variable if you’d like to change the seat reservation time globally.\n• : a , or array of instances not to send the message to\n• : waits until next patch to broadcast the message\n\nLocking the room will remove it from the pool of available rooms for new clients to connect to.\n\nUnlocking the room returns it to the pool of available rooms for new clients to connect to.\n\nAllow the specified client to into the room. Must be used inside method.\n• : number of seconds to wait for client to perform , or , to allow for manual reconnection rejection (see second example)\n• The returned instance is a promise-like structure, you can forcibly reject the reconnection by calling on it. (see second example)\n• type can forcibly reject the promise by calling (see second example)\n\nThis method will check whether mutations have occurred in the , and broadcast them to all connected clients.\n\nIf you’d like to have control over when to broadcast patches, you can do this by disabling the default patch interval:\n\nYou may replace during .\n\nThe name of the room you provided as first argument for .\n\nThe synchronized state of the room.\n\nThe array of connected clients. See Client instance.\n\nMaximum number of clients allowed to connect into the room. When room reaches this limit, it is locked automatically. Unless the room was explicitly locked by you via lock() method, the room will be unlocked as soon as a client disconnects from it.\n\nFrequency to send the room state to connected clients, in milliseconds. Default is ms (20fps)\n\nAutomatically dispose the room when last client disconnects. Default is\n\nThis property will change on these situations:\n• The maximum number of allowed clients has been reached ( )\n• You manually locked, or unlocked the room using or .\n\nIt is recommended to use the instance for and methods, as timers and intervals are automatically cleared when the room is disposed - preventing memory leaks.\n\nThe is used as a shared in-memory database for your cluster, and for pub/sub operations between rooms.\n\nYou may access the global instance from your Room code.\n\nThe instance from the server-side is responsible for the transport layer between the server and the client. It should not be confused with the from the client-side SDK, as they have completely different purposes.\n\nYou operate on instances from , , and .\n\nThe can be used to store player-specific data easily accessible via the instance. This property is meant for convenience.\n\nThe property holds the data returned by the method.\n\nSend a type of message to the client. Messages are encoded with MsgPack and can hold any JSON-seriazeable data structure.\n\nThe can be either a or a .\n\nThe can be either a or a .\n\nThis is useful if you’d like to manually encode a message, rather than the default encoding (MsgPack).\n\nSend an error with code and message to the client. The client can handle it on\n\nForce disconnection of the with the room. You may send a custom when closing the connection, with values betweeen and (see table of WebSocket close codes)"
    },
    {
        "link": "https://docs.colyseus.io/server",
        "document": "The Colyseus instance holds the server configuration options, such as transport options, presence, matchmaking driver, etc.\n• Transport is the layer for bidirectional communication between server and client.\n• Presence is the implementation that enables communication between rooms and/or Node.js processes.\n• Driver is the storage driver used for storing and querying rooms during matchmaking.\n\nThe recommended structure to initialize a new Colyseus server is created using command.\n\nIt includes a basic structure with Express and an empty room handler, ready to be customized.\n\nYou may add your own Room Definitions, and API routes to your server:\n\nWhen using the recommended structure from the template project, the instance is created automatically. You may customize the server options by editing the file.\n\nThe Transport Layer is responsible for the networked communication between the server and the client. Colyseus uses TCP/WebSockets for communication by default.\n\nEach Transport has its own options you may customize.\n\nThe match-making driver. Rooms are cached and queried against a Driver implementation. When scaling your Colyseus servers, you may need to provide a option that fits your needs.\n\nWhen scaling Colyseus through multiple processes / machines, you need to provide a presence server. Read more about Scalability, and the .\n\nThe is a callback that allows you to customize which processs the new rooms should be created at, when your deployment uses multiple Colyseus processes.\n\nBy default, the process with the least amount of rooms is selected to create a new room.\n\nA common alternative is to use the process with least amount of connections:\n\nWhen is enabled, it is capable of restoring previous Rooms and Room State when the server restarts due to a code change, when iteratively updating your room code in a local environment.\n\nIf disabled, you should call method manually in your shutdown process.\n\nThe HTTP server to bind the WebSocket Server into. You may use for your server too.\n\nDefine a new type of room for the match-maker.\n• Rooms are not created during\n• Rooms are created upon client request (See client-side methods)\n• - The public name of the room. You’ll use this name when joining the room from the client-side\n• - (optional) Default options to provide for room creation and / methods\n\nWhenever a room is created by the or methods, only the defined by the method are going to be stored internally, and used to filter out rooms in further or calls.\n\nYou can also give a different priority for joining rooms depending on their information upon creation.\n\nThe parameter is a key-value object containing the field name in the left, and the sorting direction in the right. Sorting direction can be one of these values: , , , , or .\n\nTo allow the to receive updates from a specific room type, you should define them with realtime listing enabled:\n\nYou can listen for matchmaking events from outside the room instance scope, such as:\n• - when a room has been created\n• - when a room has been disposed\n• - when a room has been locked\n• - when a room has been unlocked\n\nRevert a call. Makes a unavailable for matchmaking. This method is usually not recommended but it may be useful in some scenarios.\n\nColyseus allows you to simulate latency between the server and the client. This is a convenience method for simulating clients with high latency during development.\n\nBinds the Transport layer into the specified port.\n\nRegister a custom callback that is called before the Graceful Shutdown routine starts.\n\nRegister a custom callback that is called after the graceful shutdown is fully complete.\n\nThis method is called automatically when the process received or signal.\n\nIf has been provided on constructor, you should call this method manually."
    },
    {
        "link": "https://github.com/colyseus/colyseus/issues/315",
        "document": "This would be a big breaking change, I'd like to know your thoughts and opinions about this. Will it be valuable/worth doing? Feedback is highly appreciated!\n\nThis is already supported by the server-side. See below plans to support this from client-side as well.\n\nto handle messages sent from the clients\n\nAllow sending the type of a message along with its data:\n\nAllow sending a Schema structure from the client-side (this will be specially useful for strongly-typed languages, such as C#, C++, etc.)\n\nAs always suggestions are welcome."
    },
    {
        "link": "https://0-11-x.docs.colyseus.io/authentication",
        "document": "This section covers the configuration and usage of .\n\nis an experimental module that provides general-purpose backend services to speed-up your multiplayer game development experience. The API is open for suggestions and improvement.\n• Import and expose the Express routes provided by .\n\nThe module provides the MongoDB models, and the token validation function available for you to use.\n\nThe hook is triggered before a user logs in or registers.\n\nThe hooks is triggered before a user update his own information through the save() method.\n\nYou can modify the , , , , , and from the client-side, and then call the method."
    }
]