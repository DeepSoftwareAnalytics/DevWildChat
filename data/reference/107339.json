[
    {
        "link": "https://developer.android.com/jetpack/androidx/releases/compose-material3",
        "document": "Save and categorize content based on your preferences.\n\nBuild Jetpack Compose UIs with Material Design 3 Components, the next evolution of Material Design. Material 3 includes updated theming and components and Material You personalization features like dynamic color, and is designed to be cohesive with the new Android 12 visual style and system UI.\n\nCompose is combination of seven Maven Group IDs within . Each Group contains a targeted subset of functionality, each with its own set of release notes.\n\nThis table explains the groups and links to each set of release notes.\n\nTo add a dependency on Compose, you must add the Google Maven repository to your project. Read Google's Maven repository for more information.\n\nAdd the dependencies for the artifacts you need in the file for your app or module:\n\nFor more information about dependencies, see Add build dependencies.\n\nYour feedback helps make Jetpack better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues in this library before you create a new one. You can add your vote to an existing issue by clicking the star button.\n\nSee the Issue Tracker documentation for more information.\n\n, , and are released. Version 1.0.0-alpha01 contains these commits.\n\nThemeless components that can be used to build Material Design components:\n\n, , and are released. Version 1.0.0-alpha07 contains these commits.\n\n, , and are released. Version 1.0.0-alpha06 contains these commits.\n\n, , and are released. Version 1.0.0-alpha05 contains these commits.\n\n, , and are released. Version 1.0.0-alpha04 contains these commits.\n• Update Material3 adaptive dependencies to the new module paths. (Ibc421)\n• Migrate to use Window Manager version of window size classes. (I3794d)\n\n, , and are released. Version 1.0.0-alpha03 contains these commits.\n• Update package name to navigationsuite from navigation-suite (I7eff7)\n• Material3 components exposing a in their API have been updated to now expose a nullable that defaults to null. There are no semantic changes here: passing null means that you do not wish to hoist the , and it will be created inside the component if needed. Changing to null allows for some components to never allocate a , and allows for other components to only lazily create an instance when they need to, which improves performance across these components. If you are not using the you pass to these components, it is recommended that you pass null instead. It is also recommended that you make similar changes in your own components. (I41abb, b/298048146)\n\n, , and are released. Version 1.0.0-alpha02 contains these commits.\n\nis released. Version 1.0.0-alpha01 contains these commits.\n\n, , and are released. Version 1.0.0-alpha06 contains these commits.\n\n, , and are released. Version 1.0.0-alpha05 contains these commits.\n• Support history-awareness in scaffold navigation and value calc (I71d46)\n\n, , and are released. Version 1.0.0-alpha04 contains these commits.\n• Moved hinge bounds properties in Posture to a list of hinge info (I24f90)\n\n, , and are released. Version 1.0.0-alpha03 contains these commits.\n\n, , and are released. Version 1.0.0-alpha02 contains these commits.\n• Fix panes are not switched when is not used (d88f181)\n\nis released. Version 1.0.0-alpha01 contains these commits.\n\nis released. Version 1.4.0-alpha10 contains these commits.\n• has been deprecated in favor of . (Ib36b3)\n• and are deprecated in favor of Primary and Secondary variants of each. Primary and Secondary tab rows are more performant and accurate to spec. (I918e2)\n• Added to to control the auto-snapping mechanism, disabling it may be useful for custom animations. (I07745)\n• Scrollable tab row's minimum tab width is now a parameter. Primary and Secondary tab row variants are no longer experimental. (If6f15, b/226665301)\n\nis released. Version 1.4.0-alpha09 contains these commits.\n• Rename ’s setting fields in the default state; separate pressed and dragged states; make the default sizes be public. (I787b9)\n• Updates to the API. Removed the lambda parameter and added separate parameters for the expanded and collapsed heights. (Idd677, b/306697446, b/229134133, b/268068946)\n• The bottom app bars now observe the touch exploration service (e.g., ) and keep them visible whenever the service is on. (I4b34d)\n\nis released. Version 1.4.0-alpha08 contains these commits.\n• None Added an API that can be used for , or to have a switchable version. (Id2d83)\n• \n• Collapsed search bars and expanded search \"views\" are now separate composables.\n• and represent the search bar in the expanded state. These open in a new window.\n• to control the state of the search bar\n• New overload of which uses (Ie0723, b/261496232, b/283311462, b/350916229, b/352872248)\n• Added samples and defaults for the connected variant for . (I5c8ce)\n• Make state param the last one in and . (I9cc7b)\n• Added custom accessibility actions to the so accessibility services can now expand or collapse all variations. The FAB-equipped version applies this to the FAB, while the FAB-less version applies it to the main content. (I26420)\n• The now observe the touch exploration service (e.g., TalkBack) and keep the toolbar expanded and visible whenever the service is on. (I02172)\n• Fixed a crash at the progress and loading indicators in case a is passed in as a progress. (I4fa96, b/352364576)\n\nis released. Version 1.4.0-alpha07 contains these commits.\n• Added more flexibility in customizing the appearance of Checkboxes with a new API. This API provides Stroke parameters that allow for greater control over how the checkmark and the checkbox-outline are rendered. (I65a88)\n• Added API, a more customizable alternative to Medium and Large app bars for creating two-row top app bars. Developers now have control over the content of titles and subtitles in both collapsed and expanded states, with customizable heights for each state. (I0be3c, b/306697446, b/229134133, b/268068946)\n• Renamed an experimental variation to , providing more control over content arrangement and height. (Iaa448)\n• Update naming for properties in Button Group default object to be . Update the name of to be more precise to the behavior that it's representing. (I545cd)\n• Adding overloads for common buttons that allow for animated shapes on press interaction. Added cached button shapes. (I5ec20)\n• You can now control how a with FAB reacts to scrolling by providing a . For toolbars positioned along a center edge (like top or bottom center), we recommend using a scroll behavior to hide the entire component on scroll for a cleaner look. This also prevents the FAB from becoming off-center, which could happen when using the flag for collapsing. (I33f67)\n• Updates the experimental APIs to use instead of a custom when setting the alignment of the title and subtitle. (I70ca2)\n• is now public to give more control to the user (I104eb)\n• Introduce to allow for animation of the navigation component. Also introduce overloads of and that have a state param. (I6a8c9, b/328674235)\n• Move and classes from back to . (I3c233)\n\nis released. Version 1.4.0-alpha06 contains these commits.\n• Added to the group of insets that Material components take into account by default, to avoid content overlapping with the display cutout. This is a behavior change that will impact how inset-aware components behave around a display cutout. This includes the default value of the parameter for inset-aware Material 3 components, and the values provided in the component Defaults objects for both Material 2 and Material 3. If this change causes undesirable behavior, manually specify the parameter on a per-component basis. (I43ee9, b/362508045)\n• Updates to the API. Rename the medium and large top app bars with a subtitle to . Unified the color variations into a single function, and added a color parameter to be applied for a provided subtitle Composable (I41b65)\n• Add a new Track that allows specifying custom external track corners and track icons. (I436a4)\n• Update the floating toolbar APIs to use the object instead of a single container color. (I9a054)\n• Add and use new experimental annotation (Ia1eaf)\n• now takes a shape for the text field to handle clipping. (I8c5f3, b/380704151)\n• Added a new that can be attached to a scrollable container to update the floating toolbar expansion state based on a scroll motion that crosses a threshold. (I6d65f)\n• Introducing a new API for creating a floating toolbar with an attached Floating Action Button (FAB). The API provides flexible customization options, allowing you to arrange the toolbar horizontally or vertically and place the FAB at the start or end of the toolbar. (I9e350)\n• Fix a Snackbar accessibility issue that caused it to announce itself on dismiss when is on. (/I9db53)\n• Commonized in foundation and in material3. (Ifc2e6)\n\nis released. Version 1.4.0-alpha05 contains these commits.\n• Replace type in value for an enum for better readability (I2d6ab)\n• change Shape api from data class to class for binary compatibility. (I53812)\n• Added a tooltip API that has a parameter so makers can decide what happens when a user clicks outside of the tooltip. Deprecated the old API that doesn't contain this new parameter. (I99aef)\n• Change naming of to . Making the modifier internal. Replace padding parameter with max start and end offset. (I0b904)\n• Change to have current/target value, remove enums in favor of boolean. (Idfa29, b/356039090)\n• Fix the top and bottom app-bar behaviors to reliably change color when content is scrolled all the way. (Idc4e8, b/293665988)\n• Scroll behavior functions for top and bottom app bars now return a remembered behavior to perform better across recompositions. (I0fdbe, b/207957336)\n• Modifier pararemeter is now applied after internal modifiers such as dragging behavior and semantics, instead of before. This affects the ordering in which modifiers are applied. (I8d83f)\n• Move modifier parameter to the scaffolds root, as documented. This aligns implementation with M2. (I0235e, b/372311595)\n\nis released. Version 1.4.0-alpha04 contains these commits.\n• Revert color changes introduced in aosp/3212478 to , , , and . Moved the now-reverted behavior into a new set of functions called and so forth to emphasize the high contrast colors being returned. (Iffd8d)\n• Introduce to handle collapsing/expanding of the rail, allow to be dismissible and delete . (I88568)\n• Filter chip trailing icon color has been updated from Primary to , per spec. All chip outline colors have been updated from Outline to Outline Variant, per spec. (I68bd4)\n\nis released. Version 1.4.0-alpha03 contains these commits.\n• constructor with density has been deprecated in favor of positional and velocity thresholds. (Ifd16e)\n• Added that contains an updated positioning logic. Deprecated and . (Ie66e2)\n• Additional allow for customization of status and navigation bar colors. By default, these update based on content color instead of system dark theme status. (Ib874e, b/362539765)\n• Improved the input experience for date pickers: when in input mode, the date text field will be focused for immediate text entry. The change adds a parameter to the and the . You may prevent a focus by passing . (I12d09, b/286399710, b/340102743)\n• Caching the shape defaults into the Shape object. Making the shape defaults for toggle button. Collapsing the shapes into one shape default since the variants point to the same token file. (Iaa014)\n• Optimize Scaffold behavior to avoid always recomposing the body content when the changes. (I8c8e2, b/373904168)\n• renamed to . Interface members have been removed. (If75c6)\n• Fixed an issue with the in input mode where validation errors could cause the component's height to change. (I2e229, b/280462363)\n• Make the material Slider change its value when control keys are pressed. (I1c442)\n\nis released. Version 1.4.0-alpha02 contains these commits.\n• Updates to the date pickers to ensure consistent Locale usage throughout the and when setting a Locale directly through a or a . Note that when setting Locales directly to the state, it's up to you to ensure that the title and headline texts are localized accordingly, as their default text will still be applied according to the default platform Locale. (I37073, b/326490763, b/321657276)\n• now correctly take precedence over any conflicting colors defined at the theme's Typography text styles. Also note that this update adjusts the parameter's position in the date picker functions and introduces a parameter for customizing the header and title text colors. (I30d03, b/347031394)\n• Rename to and remove color variants APIs, variants will be achieve by re-using button variants provided by . (I44c36)\n• Renamed the and the to standard and expressive. Both functions are now accessible through the companion object by calling and . (Iceccf)\n• Adding parameter to plain and rich tooltips. It defaults to the design spec of 200 dp for plain tooltips and 320 dp for rich tooltips. (I30ce9)\n• The and now correctly update the displayed month when set via their state's . (If9e47, b/333414302)\n• content now moves content away from status bar. (I5114c, b/321877275, b/336962418, b/342093067)\n• [Bottom Sheet] Change back callback priority to to allow IME keyboard to dismiss first. (I447fb)\n• Fix crashes in the and when the minimum selectable year is set to a future year. (I78656, b/319395747)\n• Fix a date-picker issue to update the UI when an updated instance is applied. (Iad59a, b/290135807, b/339898760)\n\nis released. Version 1.4.0-alpha01 contains these commits.\n• Library no longer adds a dependency to so if your project relied on that, you will have to explicitly add that dependency in your files. (I735ff, b/349894318)\n• and ’s active label color change from to in order to improve usability, color contrast and improve coherence within the system (Ibc297), to revert to the previous behavior, copy the default colors and change the to .\n• Material 3 components are now using the new to define their motion. (Ie0f93)\n• Update and for better color contrast. (I2743d)\n• Updated container and content color for and . (Ic5d0f)\n• Added an optional parameter to the 's function to better support content that was set with a . (I4e0e5)\n• does no longer have default implementation for (I6a593)\n• Added new overloads of Material and that use . Added decoration box APIs that are compatible with . (If13a1)\n• Added parameter to control text field's . Using allows the UI pattern of displaying a label and placeholder in a text field at the same time even when the field is unfocused. (I1ef2c)\n• ’s is now an extension val instead of a var in the interface, renamed to (I89a97)\n• Updated to auto-calculate the and not require a . (Idf349)\n• Updates to the API to fix the naming at its defaults object. Added a constant at the . (I1d72b)\n• Updates to the API to fix the naming at its defaults object. Added a constant at the . (I1d72b)\n• Added an and a parameters to the indeterminate variations of the and the . (I2a0c5)\n• Support changing an icon toggle button's shape based on its pressed or checked state. (Ibc781)\n• shape morphs based on default / pressed state. Removed api because api can offer the same customizations (I95066)\n• Add modifier to animate showing and hiding of FAB, e.g. when content scrolls. (I8338d)\n• Adding connected button group shapes and spacing to to be used in a sample. (I68e30)\n• Split button add horizontal padding for trailing button and enable optical centering calculated from start and end corner differences (I122e2)\n• Introducing a new Material to allow setting a scheme for the component's motion. The scheme is set through the . (Id50c2)\n• Apply the correct focus traversal index to child Composables. The order is , , fab, content, snackbar. (I5936b)\n• Fixed an issue at the and where in certain locales and format-skeletons some of the date elements (e.g. month names) did not start with a capital letter. (I1430f)\n• Integrate FAB and FAB Menu component tokens (minor visual updates to paddings and text) (Ib57f3)\n• is now first in semantic traversal order, followed by the scrim. (I436f9, b/358594665)\n• Fix bottom app bar not disappearing entirely when scrolling under the navigation pill in edge to edge mode (I3ee21)\n\nis released. Version 1.3.1 contains these commits.\n• The and now correctly update the displayed month when set via their state's . (If9e47, b/333414302)\n• Fix crashes in the and when the minimum selectable year is set to a future year. (I78656, b/319395747)\n• Fix a date-picker issue to update the UI when an updated instance is applied. (Iad59a, b/290135807, b/339898760)\n• Change back callback priority used by bottom sheets to to allow IME keyboard to dismiss first. (I447fb)\n\nis released. Version 1.3.0 contains these commits.\n• Nav Drawer ( and ) now supports Predictive Back on U+ as opt-in (Ie5b0b)\n• Updated Slider to improve accessibility by adding a gap and stop indicator. (I3058e)\n• Updated to improve accessibility by adding a gap and stop indicator. (I21451)\n• Added a default caret for rich tooltip, support custom caret to be drawn given anchor . (Ifd42c) Breaking Changes\n• New pull-to-refresh APIs:\n• Simplified to use fractional values instead of Dp units.\n• state is controlled by the user instead of .\n• Separated out the nested scroll connection from . It is handled by the new or .\n• This update is a breaking change to previous experimental APIs. (I0adeb, b/314496282, b/317177684, b/323787138, b/324573502, b/317177683) Visual Breaking Changes\n• Update focus state overlay to be 0.1f to ensure sufficient color contrast. (I7ea77)\n• Small adjustments to surface and background color defaults in and . (I9db52)\n• Updated Slider and colors to follow the new Non-Text Contrast specs. (I26807)\n• variants are now used by components. Components which formally calculated color with and now use roles by default, which are not affected by tonal elevation. (b/304584161)\n• Surface and Surface container baseline roles have been slightly adjusted, providing more tint in light and dark themes. (I677a5)\n\nis released. Version 1.3.0-rc01 contains these commits.\n• is now first in semantic traversal order, followed by the scrim. (I436f9, b/358594665)\n\nis released. Version 1.3.0-beta05 contains these commits.\n• Fixed issue where content is missing or cut off on Android N and O (a10a2d)\n• Increased slider’s semantics bounds in order for to properly show the focus indicators around the thumbs. (0b5a1d)\n\nis released. Version 1.3.0-beta04 contains these commits.\n\nis released. Version 1.3.0-beta03 contains these commits.\n\nis released. Version 1.3.0-beta02 contains these commits.\n• supports elevation, update Pull To Refresh APIs to have enabled be a boolean, instead of a lambda. Support content alignment in (I75679)\n• Making a sealed interface and creating an internal implementation to use in and Label. (I3833e)\n• Added two new modifiers to - and - to easily add a shape and border to any carousel item (Id67a1)\n• is now an interface and allows for setting the time (I88546)\n• Updated API for styling the links: moved the to the and removed the from material. (I5477b)\n• status and nav bar icons now respond to dark theme status. (Ie1fe7, b/338342149)\n\nis released. Version 1.3.0-beta01 contains these commits.\n• Using instead of . Removing . Rename to . (Id9a76)\n• Updated the API for getting Material themed links in text. Specifically, removed the methods from the for constructing themed and parse HTML with themed links. Instead, added a class that allows to style the links as a parameter to the Text composable. (I31b93)\n\nis released. Version 1.3.0-alpha06 contains these commits.\n• \n• Simplified to use fractional values instead of Dp units.\n• state is controlled by the user instead of .\n• Separated out the nested scroll connection from . It is handled by the new or .\n• This update is a breaking change to previous experimental APIs. (I0adeb, b/314496282, b/317177684, b/323787138, b/324573502, b/317177683)\n• has been removed, and has been made nullable. To disable a ripple, instead of providing a with , provide to . (I22725)\n• more accurately draws scrim over status bar when edge to edge is enabled. Modal bottom sheet content can now consume window insets, allowing for visible content above the navigation bar. parameter renamed to to specify where the insets will be applied, these are no longer tied to window logic. type has been changed to a function which returns , to allow it to be resolved within its new window. (I39630, b/274872542, b/300280229, b/290893168)\n• and now use custom layout instead of subcomposition, which should improve performance. (I991e0)\n• Text links got pressed state styling option in addition to normal styling, hovered and focused. methods each got a argument to support that. (Ic473f, b/139312671)\n• top padding for label now accounts for system font size. (Idc781)\n• [Predictive Back] Update predictive back animations to use interpolation curve of (0.1, 0.1, 0, 1) (I2591a)\n\nis released. Version 1.3.0-alpha05 contains these commits.\n• and have new overloads that take a text field parameter. This allows styling the text field separately from the rest of the search bar as well as passing in custom text fields. The text field of the current implementation has been made available as . (I50c73, b/275074248, b/278773336, b/326627700)\n• the lambda has been added to the public API in order to customize the ticks if needed (I0c048)\n• Text links got pressed state styling option in addition to normal styling, hovered and focused (I5f864, b/139312671)\n• Updated to expose a mask Rect that the item is being clipped by (I785d8)\n• Removed from the Material 3 public API. Its functionality is combined with until Foundation's is stabilized. (Icda29)\n• Added a object that contains methods to construct a and parse HTML-tagged string which apply to the links (I98532, b/139312671)\n• no longer permits subclasses. Exposed dropdown menus now have a which should be passed to to support better a11y. This should be used instead of passing to , which is now deprecated. has a new parameter to control state. (I55ee6, b/257209915, b/308840226)\n• Fixed the border color of when disabled. Added overload that takes the enabled state. (Ie650b, b/318461363)\n• Added a new class to help clients get information about the item sizes. (I9070c)\n• constructor without surface containers is now deprecated. Please migrate to the constructor that includes surface containers. (I35c11)\n• will no longer scroll from nested scroll if is false. (I5e1c1, b/306464779)\n\nis released. Version 1.3.0-alpha04 contains these commits.\n• Added two experimental versions of the Material3 Carousel - and (I88d64)\n• Updated Compose M3 Nav Drawer ( and ) to support Predictive Back on U+ as opt-in (Ie5b0b)\n• Added a new API in Icon to allow passing color tint as lambda to avoid recomposing. (I5b5a2)\n• Top app bar APIs now support custom heights for both fixed and collapsible sections. (Ib8b0c, b/323403446)\n• Top app bar APIs now support custom heights for both fixed and collapsible sections. Fixed an issue that caused single-line top app bars to recompose too many times when scrolling content. Resolved an issue where truncated titles on devices with large font/display settings. (Ib8b0c, b/323403446, b/300953236, b/286296147, b/330410290, b/308540676)\n• and associated APIs are now stable (I8a158)\n• , , and are now marked stable. (I5f000)\n• Deprecate and introduced to replace it. (I7a7ac)\n• Removed text field APIs that were marked as deprecated and experimental. (I1305f)\n\nis released. Version 1.3.0-alpha03 contains these commits.\n• Update focus state overlay to be 0.1f to ensure sufficient color contrast. (I7ea77)\n• Small adjustments to surface and background color defaults in and . (I9db52)\n• Added parameters to customize . In particular, menus now have a parameter (default ) that should be set to when working with editable text fields. (I4184c, b/323694447, b/278609042)\n• The flag has been removed. (Ie2a4b)\n• is now marked as . (If6112, b/327660613)\n• is now marked as . (I42a30, b/298064514)\n• is now implemented using . The behavior should be the same except focusable menus with editable text fields may be dismissed when typing on the keyboard.\n• Surface and Surface container baseline roles have been slightly adjusted, providing more tint in light and dark themes. (I677a5)\n• Updated Slider and colors to follow the new Non-Text Contrast specs. (I26807)\n• Update focus state overlay to be 0.1f to ensure sufficient color contrast. (I7ea77)\n• Small adjustments to surface and background color defaults in and . (I9db52)\n\nis released. Version 1.3.0-alpha02 contains these commits.\n• Making the slider states stable again. Making a val again. Wrapping in a . (I82ab2, b/322269951)\n• The Navigation components now use the new roles. now provides distinct and attributes. is now . (I7fbac)\n• Removing from the states of since we're changing to a . (Ied34a, b/322269951)\n• and animation spec is now a , updated from a spring animation. This resolves an issue with a visible overshoot. Deprecated constructors without density have now been removed. (I7babc, b/285847707)\n• variants are now used by components. Components which formally calculated color with Surface and now use roles by default, which are not affected by tonal elevation. (b/304584161)\n• Fixed bug that caused 's unselected, disabled container color to be black. (I400e6, b/322407043)\n• Fix indeterminate progress indicator when the progress is 0 (Id6582)\n• Fixed an issue with and on RTL layout (Iab0e1)\n• Adding for the slider range calculation since Float rounding can be inaccurate. (Ic918a, b/324934900)\n• Ensure that the displays its buttons when nesting a or when displaying any type of date picker on small screens with larger fonts. (Ie4758, b/325107799, b/277768544)\n• now leverages the role for container color. is now . (I135b7)\n• now leverages the role for container color. (I4dced)\n• container color is now . is now . (Ida753)\n• container color is now . is now . (I88604)\n• Updates switch disabled and unselected tracks/icons to leverage the color role. (I7687a)\n• container color is now . color is now . (I41630)\n• container color is now . ’s container color of . (I35141)\n• container color is now . ’s when unselected now have a container color of . (I792c9)\n\nis released. Version 1.3.0-alpha01 contains these commits.\n• Updated Slider to improve accessibility by adding a gap and stop indicator. (I3058e)\n• Updated to improve accessibility by adding a gap and stop indicator. (I21451)\n• Adding a default caret for rich tooltip, new rich tooltip API now allows for custom caret to be drawn given anchor . (Ifd42c)\n• Material components have been migrated to use the new ripple APIs, and no longer query .\n• The fun is now public. (I3f59f)\n• Material3 components exposing a in their API have been updated to now expose a nullable that defaults to . There are no semantic changes here: passing null means that you do not wish to hoist the , and it will be created inside the component if needed. Changing to null allows for some components to never allocate a , and allows for other components to only lazily create an instance when they need to, which improves performance across these components. If you are not using the you pass to these components, it is recommended that you pass null instead. It is also recommended that you make similar changes in your own components. (I41abb, b/298048146)\n• Adds and to allow for per-component / sub-tree customization of ripples using fixed values. For example, to change the color of a component you don't control, or to disable a ripple for a component. In most cases the default values should be used: these APIs are an escape hatch for customization of individual components / limited sub-trees. For wider changes and custom design systems, you should instead build your own ripple using . (I7b5d6, b/298048146)\n• Adds new ripple API in material3 which replaces the deprecated . Also adds a temporary , , to revert material3 components to using the deprecated / APIs. This will be removed in the next stable release, and is only intended to be a temporary migration aid for cases where you are providing a custom . (I34cbc, b/298048146)\n• Removed subcomposition inside to improve performance. Fixed an issue where could crash in specific scenarios in combination with . (I2a198)\n• Removed subcomposition inside to improve performance. Fixed an issue where would crash in specific scenarios in combination with . (Ie6401)\n• The badge alignment is adjusted to be closer to the center of the anchor content in respect to the top-right corner. (I18a28)\n• Fix an a11y issue with the where the Month-Year text title was conveyed as actionable to the screen reader, Switch access, and Voice access users. (I2ac55)\n\nis released. Version 1.2.1 contains these commits.\n• Make the Slider states stable again. Making a val again. Wrapping in a . (Ie8fd0, b/322269951)\n• Removing from the states of since we're changing to a . (I82ba1, b/322269951)\n• Fix regression in to make it focusable again (3fcec1, b/323694447)\n\nis released. Version 1.2.0 contains these commits.\n• A View-Compose interop rendering bug was introduced in as part of a performance improvement change. The workaround is to use with\n• Please see this blog post for more details!\n\nis released. Version 1.2.0-rc01 contains these commits.\n• Fixed a bug introduced in in that did not update based on the param value. (Iee041, b/319671246)\n• Fixed a bug in introduced in and added small optimization. (I6dda1, b/318428829)\n\nis released. Version 1.2.0-beta02 contains these commits.\n• A bug in will by default assign to an alpha (0.38f) of instead of the user specified . The workaround is to explicitly set the . This will be fixed in the next release.\n• Adding the capability to enable tooltip carets for Plain APIs. (Ibf767)\n• , and are all renamed to have . (I68d6d)\n• Fixed end padding value to align with spec. (Ibd68b, b/305342674)\n• Outline color for outlined card is now correctly mapped to . (I75480, b/310979715)\n• Dynamic color now pulls from system defined color roles. This improves contrast for accessible content, and more closely aligns dynamic color to the Material spec. (I1de96)\n\nis released. Version 1.2.0-beta01 contains these commits.\n• Change new overloads to not use subcompositions. This results in a different way to build the indicators with custom modifiers provided. (Ife741)\n• Deprecate and API's. These have been merged to , whose values indicate both position and direction of . is now marked as a between and . deprecated Saver and Constructor have now been removed. component, state and defaults object have been remarked as experimental. (Ib54f2)\n• The default indicator for is now an open arrowhead instead of a solid triangle. (I67be3)\n\nis released. Version 1.2.0-alpha12 contains these commits.\n• now takes a Kotlin range (e.g., ) instead of a custom value class. now also uses a Kotlin range. (I025cb)\n\nis released. Version 1.2.0-alpha11 contains these commits.\n• Implements and , which together provide a pull to refresh implementation in Material3. (I16456, b/261760718)\n• Mark the and as experimental. (I517b0)\n• Rename to . Rename to and to trailing lambda. (I7f4d3)\n• Make the constructor for and public. (Ie0c48, b/308432421)\n• Adding . Moving into . Adding and to . These new booleans help determine how modal bottom sheet should handle IME events. (Iea56f, b/278216859)\n• Updated and states to remove , the initial prefixes, and appropriate kdocs. (I57d30)\n• Deprecate class and its associated function calls, recommend using directly instead. (I89cc2)\n• and are no longer deprecated. The new Primary and Secondary variants are marked as experimental. (I0def6)\n• Filter and input chips now use directly. (I07a8d)\n• Renamed the generic function to , and deprecate the previous function. (Idbe52)\n• Rename APIs to , and promote the new APIs to stable. (I14cbe)\n• Adding and to tooltip APIs. Additionally, moving , , and APIs back to experimental since they were accidentally released as stable. (If0f66, b/293939035)\n• Removed the annotation from the Material3 clickable Cards. (I88dbf)\n• Fixed an issue where would crash in certain scenarios with nested Lookahead and Lazy layouts. (Ica8d1, b/297226562)\n\nis released. Version 1.2.0-alpha10 contains these commits.\n• Adding as a parameter to , so users can define the behavior for . (Icdac8, b/296250262)\n• Added new overloads of and that take as a lambda. These should be more performant than the previous versions. (I824e6, b/295616656)\n• Fix a crash when quickly clicking the navigation arrow buttons when the displayed month is at the edge of the allowed range of years. (I46f36, b/290954897, b/297002119)\n\nis released. Version 1.2.0-alpha09 contains these commits.\n• Migrated and to use new APIs. 's has been replaced by the open and close methods, and the offset is now exposed as a float instead of a state object. You can access the offset directly through . (I0a72c)\n• Non-Composable functions have been added for creating a and directly. These functions can be used as an alternative to the Composable and functions when needed. (I70326, b/291524052)\n• Fixed and Scrollable now have Primary and Secondary variants. These correctly map to the color and indicator behavior as defined in Material3.\n• Adding a new parameter that developers can set to specify a maximum width that the sheet will span. Dp.Unspecified can be passed in for the parameter if a sheet that spans the entire screen width is desired. (Ifb7c9, b/266697696)\n• Fix a crash when the is initialized with a that has certain date skeletons that stay the same when converted to date patterns (such as YY). (I01f29)\n\nis released. Version 1.2.0-alpha08 contains these commits.\n• is now Immutable, making individual color updates less efficient, but making more common usage of colors more efficient. The reasoning behind this change is that the majority of apps wouldn't have updating individual colors as a main use case. This is still possible but it will recompose more than before, in turn we significantly decrease the amount of state subscriptions through all of Material code and will impact initialization and runtime cost of more standard use cases. (Ic447d, b/297212873)\n• Tonal Elevation no longer animates in different interaction states to match spec. (Icdd12)\n• Added a new that takes as parameter a in order to auto-hide it when content is scrolled. Also added allowing the FAB to overlay the bottom app bar in the scaffold instead of being anchored above it. (Iecb47)\n• Added a simple Label component that builds on top of that won't dismiss when tapping outside of the bounds of the label. (I821f9)\n• Removed the use of for tooltips. (Icc131, b/299500338)\n• Introduced a temporary flag to control whether Scaffold should measure its children during measurement or during placement. By default, this will measure in measurement. If you are facing issues with the new behavior, please file an issue. (I0b354)\n• Fixed horizontal Edge to Edge in by using the correct measurement for device screen width. (I1df0c, b/299058752)\n• Fixed a bug where was not calling when dismissing it by swiping down on the sheet. (Idfdd8)\n\nis released. Version 1.2.0-alpha07 contains these commits.\n• Auto-mirror icons support has been added in , please see the release notes for details on auto-mirror icons.\n• Change shape to be a required param. Rename to in shape helper function. (I34941)\n• Updates the to include a map that is used as a cache for performance improvements. (I3195f)\n• Added to and updated and to use with new and composables. (I79e1d)\n• and now return higher chroma colors for surface and roles. (I5e901)\n• Fixed an issue where some components using Subcomposition (e.g. ) inside a Scaffold inside a were attempting to read their size too early. (I297b4, I871f1, b/295536718)\n\nis released. Version 1.2.0-alpha06 contains these commits.\n• Fixed 's calculation so x offsets depend solely on the local layout direction, and y offsets will no longer be reversed when the menu is near the bottom of the screen. (Iccc74, b/294103942)\n• Fixed 's calculation so x offsets depend solely on the local layout direction, and y offsets will no longer be reversed when the menu is near the bottom of the screen. (Ib87a2, b/294103942)\n\nis released. Version 1.2.0-alpha05 contains these commits.\n• Updates to the Checkbox and colors. The now only affects the border of the checkbox. Special cases that require you to set the internal box color when disabled and unchecked requires a custom constructed instance of a with the desired color values. (I77d17, b/291943198)\n\nis released. Version 1.2.0-alpha04 contains these commits.\n• Dividers now have a parameter to control orientation to support vertical dividers. (I4c899, b/288438593)\n• We are moving the density dependency to the component level. This applies to the following components: and Sheet based components. Please use the new overload provided where density is a parameter. (I1846e)\n• Additional annotations to specify allowed inputs to composables (Ief234)\n• Add an icon parameter to segmented button, split semantics so that segmented buttons can be selectable to implement single-select, and toggleable to implement multi-select, with and respectively. (I38740)\n• Divider has been renamed to . Added functionality. (I5975c)\n• Change the use of for the lighter weight in experimental Material3 APIs to minimize autoboxing. (I4aab5)\n\nis released. Version 1.2.0-alpha03 contains these commits.\n• is now by default in Material 3 typography. The default line height style has also been changed to and , and explicit (in sp) have been added to the s of . Consult the API docs if you want to customize these values, and see the blog post for an in-depth explainer of these changes. (I6266f, Icabc3)\n• Added an overload for that is a stateful version of the component. Created that holds all of the information for the current active track, the measurements of the components of the , and the drag and gesture logic. (I8c270)\n• Search bar now supports shadows via the newly added parameter. (Ia5369, b/271040353)\n• Surface tonal elevation overlay can now be disabled with the composition local. (Ic203c, b/277774590)\n• Adding focusable parameter to both tooltip APIs, so that developers can have the tooltip consume touch events or not. Be cautious that this might break accessibility focus automatic traversal. (Ie32d8)\n• Scaffold's parameter now respects consumed window insets. Note that the behavior of content padding based on and remains unchanged when these parameters are provided. (I08b73, b/264601542)\n• Fix the alignment of the center top app bar to ensure that a long title doesn't render over the action icons or the navigation icon. (I4369f, b/236994621)\n• Tab positions now enforce a minimum content width of 24.dp. This provides an accessible touch target for tab indicators. (Id8861)\n• Dynamic color palettes from and now support new surface roles. (I1252e)\n• Updating the badge notification alignment to not clip when colliding with great grandparent. (Idf75a)\n\nis released. Version 1.2.0-alpha02 contains these commits.\n• Add window insets parameter to .\n• Scrim for may now be drawn behind status bar with set to zero\n• Updated default functionality to stay outside of system bars including navigation\n• Status bar inset handling is provided by drag handle in edge-to-edge mode.\n• Deprecate and add / to match the M3 specs. matches the width of the tab's content whereas spans the full available width. is equivalent to the now deprecated and can be a direct replacement. (I27604)\n• Added an option to pass in a when constructing a or an for controlling the vertical scroll state of the displayed menu items. (Ia0734, b/185304441)\n• Added an overload for that is a stateful version of the component. Created that holds all of the information for the current active track, the measurements of the components of the , and the drag and gesture logic. (I124a5)\n• Made , , and public interfaces. Added and for default states. Added functions to obtain these implemented states. Removed in favor of an . (I7813d)\n• Updated the to include additional customization options for the date picker divider, navigation, and text input fields colors. (I1a685, b/274626815)\n• and the are now public interfaces with default implementations that can be retrieved by the and . (I71c52)\n• Removed the from and and introduced a interface that can be set on the state to control which dates or years are selectable in the UI. (Ic2fc6)\n• removed from stable API, further changes are expected in the state API (I3f39a)\n• moved to android only. is not recommended for desktop use, and the functionality is not actively maintained. (Ib3778)\n• Fixed the dismiss action to appear below the confirm action when the actions stacked over each other to fit into the dialog's width. This fix aligns the implementation with the Material Design spec. (I029de, b/235454277)\n• Fixed bug in using incorrect padding for three-line items. (I6e235)\n\nand are released. Version 1.2.0-alpha01 contains these commits.\n\nand are released. Version 1.1.2 contains these commits.\n• Fixed modifier incorrectly being passed to two composables. (b/282761472)\n\nand are released. Version 1.1.1 contains these commits.\n• Adds call for without param for binary compatibility. (Ib7959)\n• Add window insets parameter to .\n• Scrim for may now be drawn behind status bar with set to zero\n• Updated default functionality to stay outside of system bars including navigation\n• Status bar inset handling is provided by drag handle in edge-to-edge mode.\n\nand are released. Version 1.1.0 contains these commits.\n\nPlease see this blog post for more details!\n\nand are released. Version 1.1.0-rc01 contains these commits.\n• removed from stable API, further changes are expected in the state API (I3f39a)\n• moved to android only. is not recommended for desktop use, and the functionality is not actively maintained. (Ib3778)\n\nand are released. Version 1.1.0-beta02 contains these commits.\n• now has a defined Hidden anchor, though it is disabled by default\n• has been renamed as (I839f4, b/273870234)\n• Do not switch the dial face from hour to minute when touch exploration is enabled. (I717d0)\n• and drag handle semantics are now merged. (I05afb)\n• modifier, and parameters now only affect content. (I992cb)\n\nand are released. Version 1.1.0-beta01 contains these commits.\n• Add layout type param to composable. It allows to use different layouts, depending on the screen configuration (Ia0e16)\n• has been marked as experimental. (I65561)\n• Added support for displaying the date pickers without the header part. API changes to allow passing a null headline when creating a date picker. You can now pass null headline, title, and in order to display a headless picker. (Id3f3a, b/266132421, b/267194809)\n• Updated the to allow selecting a range with the same date for its start and end. (I16529, b/272882497)\n• Text fields now properly position their text elements when font size is smaller than expected. This may result in a few pixels change in your apps based on font settings and script. (I8b8d0)\n\nand are released. Version 1.1.0-alpha08 contains these commits.\n• Added functionality to the and the to allow setting dates after the initial creation of the state, as well as resetting selections by setting null timestamps. Setting dates manually should be made with caution, and the new function will throw an exception in case a provided date fails a precondition (see documentation). (Ifa645, b/268609314, b/270427389)\n• Rename Collapsed to to more accurately and flexibly depict behavior in this state. (Ia1491)\n• Updated parameter names to _content instead of _text. Default getters are now where relevant. (I69a25)\n• Fixed an issue where 's state was calculated incorrectly and the sheet would appear to be floating. (I45e84, b/268411386)\n• is now also handled during nested scroll flings. (I655c5, b/268433166)\n\nand are released. Version 1.1.0-alpha07 contains these commits.\n• Add a Time Input composable that works with , it follows the M3 spec for time input (Ia4fab)\n• Added a Material 3 input mode support for selecting date ranges via the API. (Ifdbc4)\n• Text field colors now allow customizing:\n• The input field and placeholder text colors based on focus and error state. The parameter has been renamed to , and has been renamed to .\n• The container color for filled text fields based on error state with the new param.\n• Exposed dropdown menu text field colors have been updated with parameters to support the new prefix and suffix API. (I9c8b4, b/254284181, b/264766350)\n• Reverting some Slider API versions and removing redundant Slider overloads that are covered by the new experimental Slider with custom thumb and track. Promoting to be stable. (Ie8fbd)\n• The following Material 3 text field APIs are no longer experimental: , , , , . (Ieb5c0, b/261561819)\n• default shape is now always . (I0dfca)\n• Fix bug where max height constraint is propagated and may crash. (I30d8c)\n• Removed semantic roles from clickable and selectable surfaces, updated components that used them to set roles using modifier.semantics (I793d9)\n\nand are released. Version 1.1.0-alpha06 contains these commits.\n• Added a function to show a time picker following the Material 3 spec, used in conjunction with and convenience method (I71910)\n• A date input is now a display mode at the . Added support for switching between date picker and date input modes. (Ieeff7)\n• Modal bottom sheet implementation for Material 3, including and . Also introduces and which can be used for future sheet components. (I0853a, b/244189383)\n• Stablize the APIs for assist chip and suggestion chip (Ibb67b, b/261424370)\n• Promoting , , and to stable and adding non-experimental and APIs that contain custom thumbs and track. Also deprecating the previous and APIs. (Ie5ea6, b/261566890)\n• Made public, so devs can pass it to the anchor to indicate a tooltip should be displayed on long press. Updated API to no longer make nullable and now has a default. (Ie2fb7)\n• has been marked for consistency. (Id29cc)\n• Restored property getter and mark it as deprecated and redirect to . (I60dd5)\n\nand are released. Version 1.1.0-alpha05 contains these commits.\n• and now depend on Lifecycle 2.6.0.\n\nand are released. Version 1.1.0-alpha04 contains these commits.\n• Initial API for picking a single date via a calendar UI. This API is still undergoing changes. (I722b9)\n• Added in semantics property on Surfaces. This property will be used in a later change that determines traversal order based on the semantic meaning of elements such as surfaces. (I63379)\n• Added a track color parameter for circular progress indicators, and a stroke cap parameter for both circular and linear progress indicators. (Ie668c, b/216325962, b/222964817)\n• Add . It can be used to reserve at least 48.dp in size to disambiguate touch interactions if the element would measure smaller. (I33f58, b/258495559)\n• Added experimental API for composable that has a content slot. (Iec4a2)\n• Progress for progress indicators is now properly bounded to its expected range. (I8a7eb, b/262262727)\n• When updating from to , you might experience a error. Here is where the issue was orginially reported. A fix has been submitted, and will be available on the next Compose update. As a work around, update your and libraries to the latest version(1.1.0-alpha04) or downgrade your to 1.4.0-alpha03.\n\nand are released. Version 1.1.0-alpha03 contains these commits.\n• Renamed to and to and made the Modifiers public. (Ie44e1)\n• Add new default content padding for text button with icon to use. (I8f662)\n• Used in to correctly delay press interactions, when gestures could become scroll events.\n• Fixed not correctly delaying ripples, when used inside an .\n• Updated Drawers and Sheets to correctly delay presses in case gestures can become scroll events.\n• and now depend on Lifecycle 2.5.1. (I05ab0, b/258038814)\n\nand are released. Version 1.1.0-alpha02 contains these commits.\n• and now accept a for greater flexibility (also fixes showing a menu while scrolling).(I7579a, b/212091796)\n• Added parameter into material and material3 Text, and which allows setting the minimum height of the component in terms of number of lines (I4af1d)\n• Deprecate the function in favor of a new function that should be used when creating a . (Ie6cb9)\n• Added parameter to the and . It allows to set the minimum height of these composables in terms of number of lines (I24294, b/122476634)\n• Clip the content of a Material3 and to the component's state-layer shape (e.g. circular shape). (I9da8f)\n• Updates Material3 Medium and Large top app bars to apply the same background color across their entire surface, and to allow setting overriding the default colors with transparent color values. (I67659, b/249688556, b/250838918)\n\nand are released. Version 1.1.0-alpha01 contains these commits.\n• Fixes to the top app bar when title is applied with a TextStyle and a Brush. (If667e)\n\nand are released. Version 1.0.1 contains these commits.\n• Updates Material3 Medium and Large top app bars to apply the same background color across their entire surface, and to allow setting overriding the default colors with transparent color values. (I67659, b/249688556, b/250838918)\n\nand are released. Version 1.0.0 contains these commits.\n\nThis is the first stable release of Compose Material 3!\n• None is a new library that provides support for window size classes: a set of opinionated viewport breakpoints for you to design, develop, and test resizable application layouts against. You can use to retrieve a window size class instance, which you can use to determine how your UI should appear, such as showing a navigation rail instead of bottom navigation for larger window sizes. For more information and sample usage see the API reference documentation for .\n• None Please see this blog post for more details!\n\nand are released. Version 1.0.0-rc01 contains these commits.\n\nand are released. Version 1.0.0-beta03 contains these commits.\n• now exposes a padding value for menu items. (I34ee1)\n• now has a modifier that should be passed to the text field for proper a11y behavior. (I27fa3)\n• Adding two overloaded methods for the current Slider API to allow users to pass in a thumb or track to populate the slider. (I21c00)\n• Updated dark theme color mapping for On Error Container to tone 90 (Ic5612)\n• Fix to allow setting a transparent background for small Material 3 top app bars. (I645e2, b/245575782)\n\nand are released. Version 1.0.0-beta02 contains these commits.\n• Default components insets introduced in m3 components in beta01 version no longer account for IME insets.\n• Material3 Scaffold component now has a parameter, allowing to specify the amount of insets to handle for the content slot. (Icf11a, b/243713323)\n• Deprecates the experimental Material 3 function and introduces an equivalent function. Please migrate your usage to the new one. (I74404, b/226918634)\n• Adds control over the top app bar fling and snap behaviors. (I15c81)\n• Removes startIndent from Divider, moves color to last parameter. (If7be2)\n• Have Dialogs identify themselves to talkback users by announcing the word Dialog when they are displayed. (I857ef)\n\nand are released. Version 1.0.0-beta01 contains these commits.\n\nTo see latest theming, component and other composables available check out the Compose Material 3 API reference overview.\n• Updated the Material 3 top app bar to snap into a fully collapsed to a fully extended state. Also, updated the behavior function to be Composables and provide default values for their top app bar state and animation spec. (I642b3)\n• Added insets Build-in support for Top app bars, drawers, navigation bar and rail. These components, when used separately or with Scaffold will automatically handle insets for developers. Note: This change doesn't add automatic handling of status bar icons and transparency of the status and navigation bars. Please, continue to do it manually to ensure the best edge-to-edge experience. (I7e4e6, b/183161866)\n• Updated component defaults to reduce API surface for future flexibility and performance improvements. (I31820)\n• Reordered chip and navigation drawer sheet parameters to maintain consistency within the API (I45d0b)\n• Removed from Divider and moved color to be the last parameter.(If7be2)\n\nand are released. Version 1.0.0-alpha16 contains these commits.\n• Reorder Tab and Leading icon tab parameters to maintain consistency within the API (Ie2637)\n• Reorder Slider parameters in Material 3 to maintain consistency within the API (I0aee7)\n• Reorder and parameters to maintain consistency within the API (I51cda)\n• Reorder parameters in Material 3 to maintain consistency across the API. (If4ae1)\n• Reorder Slider parameters in Material 3 to maintain consistency within the API (I62673)\n• Renamed icons parameter to actions to be consistent with top app bar (Id75be)\n• Mark and as experimental because the anchor alignment is still influx. (I1712e, b/236524516)\n• Separated a navigation drawer's content to its own composable to support specifying a custom width on it. (Ia7f10)\n\nand are released. Version 1.0.0-alpha15 contains these commits.\n• Allow dragging the top app bar from the bar itself. (I65c00, b/205873416)\n• Updates to the and APIs to remove the slot and promote reusing the for displaying a selected state. (Ie5dc2)\n• Changes to the top app bar API to better reflect the meaning of its state properties. Also, mark the top app bar API as experimental. (Ic0ad8)\n• Text selection colors have now been added to for better discoverability. (Iba1b8)\n• Adding to be used with buttons that contain an icon. (I2bf9c)\n• Text fields have been marked as experimental to allow for more flexibility in future API changes. (I127b5)\n• Removed the annotation from the function. (I5eefc)\n• Removed the annotation from the function. (I17e2a)\n• Removed the annotation from the non-interactive Cards. (I9bd49)\n• Updates various component defaults objects to include colors, shapes etc. (I96e11)\n• Removed non-functioning trailing icons from input chip samples to avoid user confusion in the catalog app. (I9846a)\n\nand are released. Version 1.0.0-alpha14 contains these commits.\n• Added M3 list implementation, see the documentation for sample usage (Id7a20)\n• Change parameter name from values to value in (I3b79a)\n• API changes to the implementation to support a selectable state per the Material Design spec. Additional support at the colors for selected disabled state. (I55244, b/235792432)\n• Interfaces in compose libraries are now built using jdk8 default interface methods (I5bcf1)\n• and now implement Comparable, so they can be compared using operators (<, <=, >=, >) and other APIs. (I747d0)\n• Adds option to use the system font size to the Material 3 catalog's theme picker. (I10605)\n\nand are released. Version 1.0.0-alpha13 contains these commits.\n\nand are released. Version 1.0.0-alpha12 contains these commits.\n• Slider parent can now have 0 width. (b/231707291)\n\nand are released. Version 1.0.0-alpha11 contains these commits.\n• Renamed composable that draws a border stroke in to . (I5f295)\n• Allow passing colors to the standard icon buttons. (Ia2445)\n• Add lint check to material3/Scaffold to ensure that the inner padding is used (I72293, b/226951418)\n\nand are released. Version 1.0.0-alpha10 contains these commits.\n• is a new library that provides support for window size classes: a set of opinionated viewport breakpoints for you to design, develop, and test resizable application layouts against. You can use to retrieve a window size class instance, which you can use to determine how your UI should appear, such as showing a navigation rail instead of bottom navigation for larger window sizes. For more information and sample usage see the API reference documentation for . For more information on window size class definitions, see the public guidance on supporting different screen sizes.\n• Adds default FAB elevation for , removes trailing lambda from with FAB. (I92c47)\n• Updates Material 3 Snackbar API to accept color values for the optional action and dismiss-action. (Ibe4b4)\n• Partial consumption (down OR position) has been deprecated in . You can use to consume the change completely. You can use to determine whether or not someone else has previously consumed the change.\n• now always makes a shallow copy. It means that copies of will be consumed once one of the copies is consumed. If you want to create an unbound , use constructor instead. (Ie6be4, b/225669674)\n• Changes to the Cards API to receive the container and content colors via a interface, and to support a disabled state for clickable cards. (I927df)\n• The parameter has been renamed in Material 3 text fields for improved consistency with other components. (I6fbd9)\n• Updates to the standard to align it with the Material3 spec. (I09eab)\n• Move the top bar height of material3 Scaffold into the padding passed to content, allowing the content to render underneath the top app bar. If the are ignored, then the content might be obscured by the top bar. (I83cbc, b/217776202)\n\nis released. Version 1.0.0-alpha09 contains these commits.\n• Added support for dropdown menus with text fields (aka 'exposed dropdown menus' or 'combo boxes'.) (I1b832)\n• Added shape parameter to MaterialTheme and Shape sub system. (I37426)\n• Added an expanded parameter to to control whether the FAB is expanded or collapsed, with animations between each state. Added Extended FAB overload for extended FABs with trailing text for ExtendedFABs without icon. (Iba7f1)\n\nis released. Version 1.0.0-alpha08 contains these commits.\n• Fix at the Material3 Button to read its default text style value from the MaterialTheme. (Ie62fc)\n\nis released. Version 1.0.0-alpha07 contains these commits.\n• Updates to Material 3 Surface API that brings back the overloaded functions for clickable Surfaces, as well as adding a function to support selectable and toggleable Surfaces. (I4bf18)\n• and are now stable. (I307c0)\n• and all related apis were moved into .grid subpackage. Please update your imports from androidx.compose.foundation.lazy to androidx.compose.foundation.lazy.grid. (I2d446)\n• Reverted previous change of relying solely on a View for , and again require a Window which is required for managing some window flags. Deprecated in favor of to ensure that the correct Window is used (such as if the View is in a dialog). (I660ae, b/219572936)\n• Updates to the Card API to follow changes at the Surface API (I3c8b9)\n\nis released. Version 1.0.0-alpha06 contains these commits.\n• is added that represents a single destination within the drawers (Ic396f, b/218286829)\n• and have been added as experimental APIs. Those are the drawers suitable well for large screen devices. (I5f8ab, b/218286829)\n• has been renamed to (I1807d, b/218286829)\n• Added Tab implementation, see the documentation for sample usage (Ie0146)\n• Fixed an issue where the screen reader linear navigation selected an empty top app bar title. (Id4690)\n• Bug fix for hidden buttons when a long text is added with a . (Ib2cc9, b/216663029)\n\nis released. Version 1.0.0-alpha05 contains these commits.\n• Deprecated function that takes an onClick callback. Clickable surfaces should be created with an and a . (I211c6)\n• Changed the API to receive an InteractionSource which allows controlling its appearance in different states. (Iafbc8)\n\nis released. Version 1.0.0-alpha04 contains these commits.\n• Added to methods that are overloads of existing methods without complex logic. This reduces compiler generated memoization checks (equals) for all parameters which are repeated in the inner function that is called. (I90490)\n• Mark the Checkbox and RadioButton with an experimental API annotation. (Ie44bb)\n\nis released. Version 1.0.0-alpha03 contains these commits.\n• Fix the corner radius that is applied for Checkboxes (I38b03, b/175198975, b/202309440)\n\nis released. Version 1.0.0-alpha02 contains these commits.\n• Updated to be compatible with Kotlin\n• Port string fast path for changes from (I30b03)\n• Fixed but that hardcoded button to always be enabled. (Iea832, b/205335456)\n\nis released. Version 1.0.0-alpha01 contains these commits.\n\nFor more information, check out the Material Design 3 and Material You section in the Material Theming in Compose guide."
    },
    {
        "link": "https://developer.android.com/jetpack/androidx/releases/compose-foundation",
        "document": "Save and categorize content based on your preferences.\n\nWrite Jetpack Compose applications with ready to use building blocks and extend foundation to build your own design system pieces.\n\nCompose is combination of 7 Maven Group Ids within . Each Group contains a targeted subset of functionality, each with its own set of release notes.\n\nThis table explains the groups and links to each set of release notes.\n\nTo add a dependency on Compose, you must add the Google Maven repository to your project. Read Google's Maven repository for more information.\n\nAdd the dependencies for the artifacts you need in the file for your app or module:\n\nFor more information about dependencies, see Add build dependencies.\n\nYour feedback helps make Jetpack better. Let us know if you discover new issues or have ideas for improving this library. Please take a look at the existing issues in this library before you create a new one. You can add your vote to an existing issue by clicking the star button.\n\nSee the Issue Tracker documentation for more information.\n\nis released. Version 1.8.0-rc01 contains these commits.\n\nis released. Version 1.8.0-beta03 contains these commits.\n• Added a new semantics property that captures a textfield's value before output transformation is applied. (Iae46a, b/395911609, b/176949051)\n• Removed deprecated overloads. Please use the APIs serving the same function. (I2c90f)\n• Fixed a caching issue with where a second layout pass with the same constraints could result in using the second-biggest fitting font size instead of the biggest. (Id367f)\n\nis released. Version 1.8.0-beta02 contains these commits.\n• Fixed an issue where overscroll implementations using would not work correctly inside scrolling containers.\n\nis released. Version 1.8.0-beta01 contains these commits.\n• has been removed. Use instead. (Ie397a)\n• Rewrite API to exist outside of autofill manager. (Id1929)\n• and have been marked as deprecated. This experimental component was introduced in 1.7 and had not yet been stabilized, and the implementation has been deemed undesirable. In the future, a component solving the use cases this component was meant to solve may be provided.\n• and have experimental overloads that were introduced in 1.7 that include an parameter. The use of this parameter has been deprecated, and the overloads without this parameter can be used instead. The default \"overflow\" behavior for these overloads will be \"Clip\", as it was since its introduction.\n• Many use cases for can be accomplished using , but we acknowledge that is not true in full generality. is completely implementable in user-space, and one can attempt to copy its implementation and adapt if desired. In the future, we hope to solve these use cases in a different way. (Ibafec)\n• Fix text layout with ellipsis sometimes translating incorrectly during animations, see b/389707025 for more info (Ie55b1, b/389707025)\n• Fixed a bug in with and set to 1. (Ic0450, b/376834366)\n• Text's minimum intrinsics height now takes parameter into account. It means that minimum intrinsics height reported won't be smaller than the height required to satisfy the parameter (I225f9, b/388299762)\n\nis released. Version 1.8.0-alpha08 contains these commits.\n• AutoSize: Renamed to and published APIs that enable creating custom implementations. See for an example of a custom text auto size implementation. (I85756)\n• Moved the feature flag to and renamed it to . The old flag is deprecated and will now delegate to instead. (I62932)\n• Enabled by default. APIs now use the new dispatching behavior (immediate dispatch) by default. (I9f2bc, b/369648479)\n• Commonized in foundation and in material3. (Ifc2e6)\n• Added a new Clipboard interface and a composition local for it. (I80809)\n\nis released. Version 1.8.0-alpha07 contains these commits.\n• Deleted flag that helped revert the removal of internal from . If you were using this flag please let us know of the reasons by filing a bug. Also you can just pass in to your calls to achieve the same behavior as before. (Id9f90)\n• Follow-up fix for an issue in 's target calculation where it could settle at the wrong anchor for specific swipes. (I23b87, b/367660226)\n• Add to UI, which provides a new way to implement Bring Into View functionality as well as allows implementing in on a platform level (Ia6dd8)\n• We are ever slightly changing the way the cursor is drawn. You can use to disable the cursor drawing in tests. (I4c697)\n\nis released. Version 1.8.0-alpha06 contains these commits.\n• Deprecated 's . Instead of vetoing state changes, disallowed anchors should not be in the active anchor set, and an should be used to indicate the unavailability of the requested action. (Ia717f)\n• Changes Autofill manager to be an interface. (I84914, b/376080755)\n• Adds and APIs - these APIs create a wrapped instance of the provided overscroll effect that doesn't draw / handle events respectively, which allows for rendering overscroll in a separate component from the component that is dispatching events. For example, disabling drawing the overscroll inside a lazy list, and then drawing the overscroll separately on top / elsewhere. (Idbb3d, b/266550551, b/204650733, b/255554340, b/229537244)\n• Deprecates and , and adds to create an instance of / customize parameters of the default overscroll implementation. To disable overscroll, instead of , use . To change the glow color / padding, instead of , use . (Ie71f9, b/255554340, b/234451516)\n• Changed the property on to be , consistent with other APIs. (Ic0b46, b/255554340)\n• Removed the experimental API. It's intended use was to run accessibility checks, see for that purpose instead. (I59322)\n\nis released. Version 1.8.0-alpha05 contains these commits.\n• Support for auto-sizing text. Pass an instance (e.g. ) to your favorite text composable (like ) and see your text size adapt to the available space! (Ice7e0, b/139320827)\n• Adds and APIs to allow configuring overscroll within a hierarchy. The value provided through will be used by default to create an . To create and remember an effect from the current provided factory, use . (I51ca4, b/255554340)\n• Introduce that can be used to modify the hue of Autofill's successful filling highlight. (I32092)\n• Removed - instead you should use . This will create an instance of the current overscroll implementation provided with . (I1651a, b/255554340),(b/234451516)\n• Introduces new interface that can be used to fine-tune users' Autofill journey and a flag to turn on this new version of Autofill. (I9d484)\n• Removes . This experimental API was temporarily exposed to unblock performance work, but is no longer needed. Instead you should directly use as with other modifier APIs. (I4b658)\n• Adds overloads to , , , , , , , , , and with support for specifying a custom . The provided will receive events, and be rendered within the bounds of these components. Note that drawing the same twice is unsupported - so you cannot draw the same provided to one of these components separately with . The use case of drawing the overscroll outside of the bounds of these components will be addressed separately in the future. (I2dc42, b/266550551, b/234274772, b/224572538, b/353805117)\n\nis released. Version 1.8.0-alpha04 contains these commits.\n• Adds and callbacks to allow updating node state when these change. (I04f3e, b/340662451)\n• Paragraph and now takes a list of all annotations applied to the , previously it only had a list of . (I12f80)\n• Introduced , which can be used to enlarge the touch bounds of a single pointer input modifier. (Iccf02, b/335339283)\n• Fixed a bug where positional thresholds passed to were not considered correctly in some scenarios. (Ifdf0d, b/367660226)\n• Introduce a fix for nested scrollables that are removed from the node tree during an ongoing fling. Now these nodes will cancel the fling and correctly send the event with the remaining velocity. We're also introducing the flag to control the behavior in case of regressions. The flag will be removed before beta. (I05c37, b/371168883)\n• Fixed a bug where passed to would receive 2D deltas instead of 1D. (Ie52c0)\n\nis released. Version 1.8.0-alpha03 contains these commits.\n• Introduced a new Semantics Role called Carousel to emulate the list behavior in Pagers for a11y services. (Id354b, b/354109776, b/239672673)\n• Removed the implicit modifier from composable. Added experimental flag to be able to revert to the old behavior. (Ie478d)\n• Added to allow children in the hierarchy to use even when parents aligned them without . (I7f9e4)\n• Implement gesture pick-up in , draggables and scrollables. Now if a child draggable gives up on a gesture, the parent has the opportunity to pick it up. This allows for a more continuous and integrated gesture handling. (Ic88fe)\n• Update fling cancellation behavior in scrollables. Now if a scrollable flings and hits the bounds it will correctly pass on the fling velocity to the next scrollable in the chain instead of continue to drive the fling. (I9326a)\n\nis released. Version 1.8.0-alpha02 contains these commits.\n• and are now available which allows to place ellipsis at the start or middle of the line of the single line text (I38913, b/185418980)\n\nis released. Version 1.8.0-alpha01 contains these commits.\n\nis released. Version 1.7.8 contains these commits.\n• Fix crash in with input transformation when replacing part of the pasted text. (I73702)\n\nis released. Version 1.7.7 contains these commits.\n• Fixed infinite recomposition in some edge cases with links. (I04a03)\n• A bug was identified that can cause text to wrap unexpectedly in rare scenarios on Android API level 35. It cannot be fixed in 1.7, so it will be fixed in 1.8. (b/391378120)\n\nis released. Version 1.7.6 contains these commits.\n• Fixed text inline content not being visible to accessibility services.\n• Fixed an issue where would not reset properly and be stuck when reusing in a lazy list.\n\nis released. Version 1.7.5 contains these commits.\n• Ensure that pinned items are not subcomposed twice in the content padding area. (Ic6224)\n\nis released. Version 1.7.4 contains these commits.\n• Removed at the root of Lazy layout items. This was a potential root cause for “measure called on a deactivated node” crashes. (Id6e60)\n\nis released. Version 1.7.3 contains these commits.\n• Fixed a memory leak with when minLines is set to a non-default value.\n\nis released. Version 1.7.2 contains these commits.\n• Fix issue with draggable that was missing down events which caused flings to look slower than normal.\n• No changes to Android artifacts. artifacts were removed and and artifacts were added. None of these targets are meant to be used, they are placeholders to help Jetbrains Compose efforts.\n\nis released. Version 1.7.0 contains these commits.\n• Performance of , , , and has been significantly improved. As a part of this effort, the following API changes were made in addition to internal changes\n• Added a new Indication API, . This leads to more performant Indication implementations compared to the previous (now deprecated) API. For migration information, see developer.android.com.\n• / / / now accepts a nullable parameter. If null, and the provided Indication is an , the Indication can be lazily created only when needed, which improves performance. If you are not hoisting and using the , it is recommended to pass null instead of passing .\n• has been deprecated. It has a high unavoidable performance penalty, and prevents other optimizations. Instead, you should use the new API.\n• using a is now stable and we advise all call-sites to begin migration from to .\n• The has been deprecated. To add clickable links to your text, use with the new annotation in your . allows for custom styling based on link state (e.g. focused, hovered).\n• Introducing and with and . We are excited to announce enhancements to the experimental and , now featuring and overflow support, alongside the debut of and . This update is designed to provide performance optimal components, where is perfect for a large number of items making use of a small maxLines config and dynamic +N see more buttons, and and is perfect for a small number of items, less than 100 items. Important: To maintain existing behavior in or where all items are composed regardless of if they fit the cross axis max, set overflow to or during initialization. Explore and for examples of these new features in action. (Ib9135, b/293577082)\n• Item appearance and disappearance animation support was added into and . Previously it was possible to add modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (I2d7f7, b/150812265)\n• Implemented experimental support for long screenshots in Compose scroll containers using the official Android API ( ).\n• sources Drag and Fling are being replaced by and to accommodate for the extended definition of these sources that now include animations (Side Effect) and Mouse Wheel and Keyboard ( ).\n• prefetch requests can be marked as urgent now, meaning that we expect this item to be needed in the next frame and want to ignore frame budget to make sure to do more work in advance (Id513f)\n• Various APIs have been promoted to stable\n\nis released. Version 1.7.0-rc01 contains these commits.\n• Fixed a regression where the crash occurred when any element is focused inside a parent that is focusable (or clickable) and disabled. (b/317561689)\n\nis released. Version 1.7.0-beta07 contains these commits.\n• Text input related functions , , and is now going to throw assertion errors when they are called on read only . (I4ae8f)\n• Fixed modifier not working with some IMEs.\n• Velocity generation: Prevent propagation of NaN values in Compose UI and Foundation.\n\nis released. Version 1.7.0-beta06 contains these commits.\n\nis released. Version 1.7.0-beta05 contains these commits.\n• Fix for treatment of Nan values in and Pager.\n\nis released. Version 1.7.0-beta04 contains these commits.\n• Fixes measurement of very large text causing crash in the new (6b7575)\n• Reverts a behavior change in Row/Column measurement that breaks Text usage in certain scenarios (69e8ba)\n\nis released. Version 1.7.0-beta03 contains these commits.\n\nis released. Version 1.7.0-beta02 contains these commits.\n• Adds an experimental API for configuring prefetch behavior of similar to the existing experimental API for . This includes support for prefetching items in nested . Similiar to , the implementation default is to prefetch the first 2 nested items of each grid, but this can be configured by the new and APIs. (I591c4)\n• Renamed to and changes to a val . The property is now a boolean and always specified by text fields. (I8acd8)\n• Update API for styling the links: moved the to the and removed the from material (I5477b)\n• Renamed to to better reflect its purpose. Renamed related function to calculate coordinates based on that flag. (I3a330)\n• Removed from the class. Instead, is part of the constructor and the method (I90b2b)\n• Fixed a bug where Pager would snap when flinging towards a bound while already settled at the bound. (I9f373, b/339171222)\n\nis released. Version 1.7.0-beta01 contains these commits.\n• now reverses drag deltas by default for components with a Horizontal orientation when used in an RTL layout. (I3c6d9)\n• Updated the API for getting Material themed links in text. Specifically, removed the methods from the for constructing themed and parse HTML with themed links. Instead, added a class that allows to style the links as a parameter to the Text composable. (I31b93)\n• Fixed a bug where Pager would crash when the was bigger than the incoming constraints. Pager now coerces negative values returned from to 0. (Iba5d8, b/314008560)\n\nis released. Version 1.7.0-alpha08 contains these commits.\n• Added right-click context menu to and with items for cut, copy, paste, and select-all actions. (If8c93, Ia2b49, I6f268)\n• prefetch requests can be marked as urgent now, meaning that we expect this item to be needed in the next frame and want to ignore frame budget to make sure to do more work in advance (Id513f)\n• Renamed to . Note that it now has the reverse effect, meaning that by default, most introduce a frame of reference, and, only when placed under direct manipulation the property will be false. To query position with only those that introduce a frame of reference, use . Or from a . (Ifc5f7)\n• Change action lambda for as per API council feedback. (Ibc74a)\n• Added \"Select all\" to all text contextual menus in . (Ib750e, b/240143283)\n• Fixed an issue where 's would change when approaching the state's bounds. (Iea30b, b/333846848)\n• Renamed -> to better reflect its responsibilities. (Ib9154)\n• Added support for prefetching items in nested (e.g. a that renders nested ). This change is expected to reduce frame drops during scrolling for these . The implementation default is to prefetch the first 2 nested items, however this behavior can be controlled by the new and APIs. (I51952)\n\nis released. Version 1.7.0-alpha07 contains these commits.\n• Added a object that contains methods to construct a and parse HTML-tagged string which apply to the links. (I98532, b/139312671)\n• Item appearance and disappearance animation support was added into and . Previously it was possible to add modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (Ib7d12, b/330510929)\n• Item appearance and disappearance animation support was added into and . Previously it was possible to add modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (I69bc9, b/330511290)\n• Adds and the associated . The colors of the context menu on text fields and selectable text can be modified by providing the composition local. (Ifa154)\n• Text links got pressed state styling option in addition to normal styling, hovered and focused. (I5f864, b/139312671)\n• Removed for the 1.7 release since we didn't have time to finish stabilizing the rest of the related API surface. This function will be re-introduced in 1.8 (I6cf61, b/333421581, b/332900232)\n• When querying Layout coordinates, you may now use the argument to exclude the offset set by parent Layouts that placed their children using . Likewise, a Layout that changes the position of its children frequently may now place them using (such as Scroll, implemented by default). This helps based animations to be more intuitive, having now the opportunity to differentiate what offset to animate, and what to apply directly when deciding to animate their approach. (I60ec7)\n• Introduce for . For each measure-pass, the client may now opt-out of maintaining index based on the key by calling . This does not change existing behavior in any way unless is called. (I63983)\n• Introduce in Pager. For each measure-pass, the client may now opt-out of maintaining index based on the key by calling . This does not change existing behavior in any way unless is called. (Ic4213)\n• Introduced for . For each measure-pass, the client may now opt-out of maintaining index based on the key by calling . This does not change existing behavior in any way unless is called. (I0a7a0)\n• is marked as deprecated. To add links to the text, create an with a corresponding to your link and pass this to the composable (I34d4b, b/323346994)\n• is deprecated, use instead. If you're using Material theming, then use object to create the annotation with Material theming applied to it (I8d180, b/323346545)\n• Added styling arguments ( , , ) and a link interaction listener to the method. When parsing the HTML-tagged string with tags, the method will construct a for each such tag and pass the styling objects and link interaction listener to each annotation. (I7c977)\n• now takes the state-based styling arguments and a . Add this annotation to the to get a hyperlink. By passing and/or you can define the visual configuration for links when they are focused and/or hovered. (I81ce4, b/139312671)\n• The feature flag for long screenshots has been removed. (I28648, b/329128246)\n• will now render sticky headers correctly in long screenshots. (I8d239, b/329296635)\n• Stabilized majority of the remaining experimental APIs that were introduced with the new . (I714e2)\n• Added parameter to that controls which character to use while obfuscating the contents. (I0588b)\n• sources Drag and Fling are being replaced by and to accommodate for the extended definition of these sources that now include animations (Side Effect) and Mouse Wheel and Keyboard ( ). (I40579)\n• Introduce , a platform dependent focus scrolling behavior that is applied at the Scrollable modifier layer. (I27aa5, b/317453911)\n• Removed . is replaced with and . (I2c7d6)\n• is no longer nullable. If you want to pass an empty Locale list, please use . (Ic5bc4)\n• When are joined with , their are now properly merged by individual options using the new method. (Ie5304, b/295951492)\n• 's now does not consider positional thresholds anymore. It now has an implicit threshold of 50%, meaning that the changes at the midpoint between two anchors. (I82c2c)\n\nis released. Version 1.7.0-alpha06 contains these commits.\n• Item appearance and disappearance animation support was added into and . Previously it was possible to add modifier in order to support placement (reordering) animations. We deprecated this modifier and introduced a new non-experimental modifier called which allows you to support all three animation types: appearance (fade in), disappearance (fade out) and reordering. (I2d7f7, b/150812265)\n• Clients of may now opt-out of maintaining an index based on the key for the upcoming measure-pass by calling a non-suspend . (I98036, b/209652366)\n• Added method for styled strings: it allows to convert a string marked with HTML tags into . Note that not all tags are supported, for example you won't be able to display bullet lists yet. (I84d3d)\n• Implemented experimental support for long screenshots in Compose scroll containers using the official Android API ( ). This feature is experimental and may not currently handle all cases correctly. For that reason it is currently disabled by default. To opt-in, set the flag to true. This flag will be removed before 1.7 beta. (I2b055, b/329296471)\n• Introduce new API to provide more flexibility in placement and rendering of instances and support intrinsic rendering features without needing to coordinate with Composable implementations to specify modifier instances.\n• All parameters now have an unspecified value by default. Added method.\n• Renamed to and made it nullable, where null indicates no value was specified. (Ia8ba0, b/295951492)\n• Reorganized parameters. Removed . Instead now carries this value with the same name. Also removed the parameter. now is the receiver scope on the function. (I919cc)\n• variant and now use instead of to process actions taken by the software keyboard. (I58dda)\n• Removed parameter from . Developers were already encouraged to check the received 's media type since it could be incompatible with the configured . (I82f99)\n• Reordered the parameters of . Removed and parameters in favor of full class while keeping the same defaults appropriate for . Also removed the parameter. (Ibbfa9)\n• 's type is changed from to just . Therefore, added and to read the current selection and composition values directly from the state object.\n• Removed and functions. Please use to read the current clip entry's metadata. Also check 's result if it's null or not to understand whether Clipboard has a current clip. (I50498)\n• now accepts null to be able to clear the Clipboard. (I7d2e9)\n• is converted to a function interface. Also overload that takes in a lambda is removed since is a function interface now.\n• Fixed a bug where variant did not work with CJK(composition based) keyboards. (I54425)\n• Fixed a bug where could reference stale data in certain scenarios with re-use. (I05bb1)\n• Reverted a recent contract change where calls would snap at the end of an operation. (I95715)\n\nis released. Version 1.7.0-alpha05 contains these commits.\n• Removed experimental override of with argument. A replacement API for hyperlinks support will follow in the future. (I107d5)\n• Removed Codepoints related methods and properties under and . Also removed the suffixes from the remaining selection and composition related APIs. (Ief7ce)\n• 's will now update when passing through an anchor point. Use to receive the previous semantics, only updating when settling at an anchor. The progress is now exposed as a function (requiring a starting and end point) instead of a property. (Ibe6e8, b/318707189, b/298271489, b/294991954)\n• Introduced for helping write low-level IME-related tests and other low-level IME use cases. has been deprecated. (I862ed, b/322680547)\n• Split to two methods: and (I6d7fd)\n• Added 2 new API / to check scroll direction for latest scroll action, return false if no scroll action yet. (I63a0e)\n\nis released. Version 1.7.0-alpha04 contains these commits.\n• Added to to provide with the ability to hint IMEs with specific locales to preset a preferred language. (Id18c2)\n• Removed the Experimental and overloads that took and parameters. (I568b4)\n• Add an optional function to to influence the semantics of the that it's applied to. (I74a2f, b/170648072)\n• In this CL we are adding the semantic action so we can pipe up information about the components being scrolled in compose to the a11y system. This CL also applies the usage of said property in Foundation Scrollable Lists. (Ic5fa2)\n• Introduced to allow modifier nodes to make requests directly. (I2b3b7, b/299939840)\n• Introduced to allow modifier nodes to get the current Android without reading a composition local. (I40768)\n• Introducing contextual layout information within Contextual Flow Row Scope and Contextual Flow Column Scope, featuring line index, position, and constraints on maximum width and height to stay in specified position. Items exceeding maximum width/height may flow to the next line or be omitted based on overflow settings. (Id13f8, b/292114798)\n• Fixed a bug where in certain conditions toggling or attributes of would cause a crash. (Iae17b)\n\nis released. Version 1.7.0-alpha03 contains these commits.\n• Introduced as a way to get a 's current without needing to override and store the coordinates in a property yourself. (Ia8657)\n• Introduced as a way to get a 's current without needing to override and store the coordinates in a property yourself. (Iaebaa)\n• Performance optimizations in used by . (I89cff)\n• and related APIs under package are moved to . (I9f635)\n• no longer accepts a parameter. Use or . (Id34ff)\n• Added method to compare only the annotations of two . (I32659)\n• Introducing and Enhanced / with and . We are excited to announce enhancements to the experimental and , now featuring and overflow support, alongside the debut of and . This update is designed to provide performance optimal components, where is perfect for a large number of items making use of a small config and dynamic +N see more buttons, and and is perfect for a small number of items, less than 100 items. Important: To maintain existing behavior in or where all items are composed regardless of if they fit the cross axis max, set to or during initialization. Explore and for examples of these new features in action. (Ib9135, b/293577082)\n• Cursor animation no longer requests frames between on and off states. (Ia2253)\n• ' deprecated copy constructors will now correctly copy all properties. (If12de)\n\nis released. Version 1.7.0-alpha02 contains these commits.\n• , and are promoted to stable. (I67660, b/316966909)\n• Added composition local that allows to change the style of the links in Text across the app. If you're using your own theme in the app, you should be setting this composition local according to your theming. When using Material theme the color of the link by default will be set to Material's primary color. (I7eb10)\n• Introduced modifier that provides developers with a way to receive rich content in Jetpack Compose.\n• integrates with to accept rich content provided by the software keyboard, or via Clipboard paste action. (I81b72)\n• In this change we're replacing with in pager to unlock other use cases and provide greater flexibility. (I762ea)\n• In this change we're making Snapping APIs Stable. We're also cleaning up some of the testing code and adding more samples to Snapping. (Id8da9)\n• Introduce , a that allows propagating information about the state of the ongoing animation and it's target scroll offset. (I6a207)\n• now keeps the cursor in view while typing when it has been scrolled out of view or would move out of view due to input. (Ieb856, b/237190748)\n• Adds an experimental API for configuring prefetch behavior of LazyLists. (I022a4)\n\nis released. Version 1.7.0-alpha01 contains these commits.\n• Added a new , . This leads to more performant implementations compared to the previous (now deprecated) API. For migration information, see developer.android.com.\n• now accepts a nullable parameter. If null, and the provided is an , the can be lazily created only when needed, which improves performance. If you are not hoisting and using the , it is recommended to pass null.\n• Introduce in , this change adds a parameter to allowing to use decay animation when settling to one of the anchors. The change also includes renaming the existing to to help understanding the use case of each spec.\n• is available for experimental use. It should be roughly at feature parity with , and behavior should be production-ready. However, the API remains experimental for now. Before stabilizing, it will be renamed to and moved into the same package.\n• Introduced the first draft of the API for . This API replaces most of the use cases of in the old . However it is not complete yet, and some things won't work correctly, but we'd appreciate any feedback on the API usability for your use cases. (aosp/2708848)\n• Introduced that allows to add links and clickables into text. Links feature is not complete yet and more API changes are coming.\n• Introduced modifier that provides developers with a way to receive rich content in Jetpack Compose.\n• integrates with to accept rich content provided by the software keyboard, or via paste from Clipboard.\n• allows you to disable the default behavior of of requesting a software keyboard on focus.\n• and are now deprecated. Use to integrate directly with platform IME APIs instead. (aosp/2862698)\n• has been deprecated. It has a high unavoidable performance penalty, and prevents other optimizations. Instead, you should use the new API.\n• will now pre-validate a small selection of offset mappings when is passed. This helps catch common coding errors that lead to unrecoverable exceptions in later measure or draw passes. By throwing during composition, it is more likely developers will see these errors during development helping avoid production crashes. (I0fd42)\n• will not throw if you return an invalid index for an invalid index (b/316401857 )\n\nis released. Version 1.6.8 contains these commits.\n\nis released. Version 1.6.7 contains these commits.\n\nis released. Version 1.6.6 contains these commits.\n• Fixed a bug where in certain conditions toggling or attributes of would cause a crash. (Iae17b)\n\nis released. Version 1.6.5 contains these commits.\n• Adds debugging logs to hard-to-reproduce bugs in Row/Column: (b/300280216 and b/297974033)\n\nis released. Version 1.6.4 contains these commits.\n• A long-press-then-drag selection gesture which moves out of the text’s layout bounds in the first frame of the drag no longer crashes. (Icdf90, b/325307463)\n\nis released. Version 1.6.3 contains these commits.\n\nis released. Version 1.6.2 contains these commits.\n• Fix issue where of text would be over-cached in some circumstances. (3cd398, b/217910352)\n\nis released. Version 1.6.1 contains these commits.\n• Fix placement of 0-sized items at the start of the staggered grid. (785f94)\n• Call onRelease callback in the same order as onForgotten. (31ce3b)\n\nis released. Version 1.6.0 contains these commits.\n• New Modifier that unlocks the ability to drag and animate between predefined set of anchors. This modifier is intended to be a replacement for . Learn how to use it and migrate from in the migration guide.\n• Drag and drop functionality between apps and components has been added. Refer to , and other APIs to get started\n• is the new modifier that allows for easy 2d dragging support. See Sample.\n• and have been added to make it easier to add surface-driven components in compose\n• Various API changes and improvements in and\n• Various focus, text and insets APIs have been promoted to stable APIs\n\nis released. Version 1.6.0-rc01 contains these commits.\n• The extension constructor has been removed. Create a new instance using . (I32318)\n\nis released. Version 1.6.0-beta03 contains these commits.\n• Fix crash that impacted very large text measured with infinite constraints. (I1a7df, b/312294386)\n• is now a concrete class instead of an interface. (If40a4)\n\nis released. Version 1.6.0-beta02 contains these commits.\n• Fix for not being updated after relayout-only scroll. (I60a86)\n• Fix for and after small scrolls. (I3a2b7)\n\nis released. Version 1.6.0-beta01 contains these commits.\n• The modifier now takes in the receiving explicitly and has a lambda to opt into a drag and drop session. There are now two factory functions for a . One for receiving transfers and one for transferring data (I69481)\n• Updated to be represented as Float. Updated documentation to be more clear about the unity. (I8adc7)\n• None in the factory has been renamed to . has been added to the to accept from a drag and drop session. This lambda returns a viable if interested in a drag and drop session. Other lambdas for processing drag events have been replaced by this. a factory function has been added to receive from drag and drop sessions (Iebf3a)\n• None Exposing in gives control for detecting dragging gestures when using it. It is useful to set it when the widget is animating to a target anchor. See Sample. (Ie6d13, b/285139987)\n• None Removed as a type now takes parameters for the , decoration size and drag decoration lambda has methods for particular drag and drop events instead of being a single abstract method in the factory function for a has been renamed to to better communicate that the provided is valid for a given drag and drop session only The has been removed (I645b1)\n• None The children of (and layouts like based on it) which are retained to be reused in future are considered deactivated. New test API was introduced to test such nodes. The rest of the test apis will filter out deactivated nodes by default. (I2ef84, b/187188981)\n• None parameter of is renamed to .\n• None parameter of is made nullable preserving the same default behavior. (I6aa66)\n• None Material APIs (for Cards and Chips) now rely on a slot based API (as recommended by Compose) instead of data class based instances to create those slots. This is a breaking change, please see the demo and sample code for examples on how to use the new API. (Ia8943)\n• Fixed a bug that would cause layout to not shrink when changed and less than initial measure constraints (Idb19c)\n• Remove material core layer for Material3 Chip/Button as the microbenchmarks show better performance without it. (I55555)\n\nis released. Version 1.6.0-alpha08 contains these commits.\n• is the new modifier that allows for easy 2d dragging support. See Sample (Id95f5, b/214412658)\n• has had the lambda renamed to and has had the size parameter renamed to . (Id0e30, b/303904810)\n• 's parameter is renamed to . Its type is also changed to an equivalent fun interface . (I23c1c)\n\nis released. Version 1.6.0-alpha07 contains these commits.\n• Added temporary flag to disable non-linear font scaling. Set in your tests if you need time to clean them up. This flag will be removed in Compose 1.6.0-beta01. (Ic9486)\n• This change removes which has been turned into an implementation detail of the implementations of . (I65f6d)\n• Adds Modifier for starting drag and drop sessions, and Modifier for receiving from drag and drop sessions (Ib7828, b/286038936)\n• Update documentation and position method. Introduce content paddings to the position method in . (Id7938, b/300116110)\n• Added to that provides the ability to undo/redo the changes made by the user. (Icc024)\n\nis released. Version 1.6.0-alpha06 contains these commits.\n• New Composable wrappers for and and . It is an experimental API and is subject to changes and modifications. (I9ddb2)\n• is now a stable API. This includes the removal of in favor of inline parameters in the modifier itself. (I83bec, b/298381260, b/262367109, b/261438887)\n• Introduced and in , these are the last pieces necessary to allowing customization of animated scroll through . (I9cad5, b/267744105, b/243786897)\n• Remove density from . All implementations of already have a way of accessing the density, the receiver scope could be removed which will lead to a less complex implementation of both and . (I153c3)\n• Removed from . The calculation should be done using the Layout information and provided through the approach or snapping offsets. (If320c)\n• Compose now uses non-linear font scaling for better readability and accessibility. When font scale > 100% in system settings, small text will increase in size normally, but already-large text will only increase a little bit. Also, line heights defined in SP will automatically adjust to stay proportional to the 100% scale intended height. See the Font Scaling Best Practices for more info. (I11518)\n• Remove the use of for tooltips. (Icc131, b/299500338)\n\nis released. Version 1.6.0-alpha05 contains these commits.\n• Add overloads for that accept an immutable value and a callback to change that value, just like the current API. (Ia4882)\n• Add to mark as composable as preferring to keep clear of floating windows on API 33 and above. (Ib51d5, b/297260115)\n• Fling velocities in View components like and are capped at . Compose now contains its own version of which now applies to . (Ibf974)\n• Added to and updated and to use with new and composables. (I79e1d)\n\nis released. Version 1.6.0-alpha04 contains these commits.\n• Add interface for managing lifecycle and reuse of subcompositions. (I812d1, b/252846775)\n• has been promoted to stable APIs. (I7ffa3)\n• Add overloads for that accept an immutable value and a callback to change that value, just like the current API. (I3f2b8)\n• Canvas that accepts is now a stable API. (Ib3d29)\n• Introduced in , a way of knowing the size of the component that uses after measuring happens. (I8b85a, b/283102682)\n• Fixed an issue where the prefetching in Pager did not match the behavior in Views. (I93352, b/289088847)\n• is now stable.\n• API is now removed. Use instead. (Id72bb)\n\nis released. Version 1.6.0-alpha03 contains these commits.\n• Overload of added, it accepts a lambda of , not a plain object as it was before. The previous overload is deprecated. (I42a5a)\n• Fixed text fields showing keyboard and being editable when is true. Also fixed the keyboard not showing when is changed from true to false while focused. (I34a19, b/246909589)\n\nis released. Version 1.6.0-alpha02 contains these commits.\n• Introduced with information collected after a measure pass in . Also introduced , the information about a single measured Page in . (Iad003, b/283098900)\n• Additional annotations to specify allowed inputs to composables (I51109)\n• Added as a more convenient and discoverable way to request focus in tests. (Ie8722)\n• and are no longer experimental. is also now a proper . (I4c364)\n• now provides pan delta in parameter to help determine the direction of the pan to allow or disallow it. (I692aa, b/266829800)\n• Updates the modifier to extend the superclass (Iacd74, b/269479941)\n\nis released. Version 1.6.0-alpha01 contains these commits.\n• Introduced a new API in Foundation. It can be used to build components that can be dragged between discrete states, like modal bottom sheets. This API replaces Material's API. (I4a2ed)\n• Introduced to allow custom animation specs. Updated to . (Idb741)\n• Add type to wrap throwables thrown when attempting to load bitmap assets with a description of the asset path that failed to load. (I19f44, b/230166331, b/278424788)\n• Introduced a API that can be used to customize how components like respond to requests. Changed the overload of scrollable to optionally accept an instance of . (Iaf5af)\n• Added a lint check to warn if you are creating a in composition without remembering it, similar to the lint checks for creating mutable state / . (I5daae)\n• Added support for selection by mouse. Touch based selection will expand by word, and shrink by character. (Ic0c6c, b/180639271)\n• Added interface that can be used to create a custom . (I9790e)\n\nis released. Version 1.5.4 contains these commits.\n\nis released. This version has no changes.\n\nis released. Version 1.5.2 contains these commits.\n• Fixed a bug in text that led to crashes in certain circumstances when semantics were invalidated.\n\nis released. Version 1.5.1 contains these commits.\n• Fixed text fields showing keyboard and being editable when is true. Also fixed the keyboard not showing when is changed from true to false while focused. (I34a19, b/246909589)\n\nis released. Version 1.5.0 contains these commits.\n• Many foundational modifiers, including , , , layout modifier and more have been migrated to API, reducing the overhead on the initial composition.\n• Improvements in Pagers stability. Many bugs have been addressed.\n• parameters now lives in instead of the Pager itself\n\nis released. Version 1.5.0-rc01 contains these commits.\n• None An optional inspection to recommend migrating calls to their corresponding specialized types for primitives is available. Its lint ID is . Previously, this inspection was enabled by default for all projects. To see this warning in Android Studio's editor and your project's lint outputs, change its severity from informational to warning (or higher) by declaring inside your module's or configuration as shown (I34f7e):\n\nis released. Version 1.5.0-beta03 contains these commits.\n\nis released. Version 1.5.0-beta02 contains these commits.\n\nis released. Version 1.5.0-beta01 contains these commits.\n• Implement to provide heart rate and daily steps. interface is removed from the public API. (I55b84)\n\nand are released. Version 1.5.0-alpha04 contains these commits.\n• Introduce a that can be used with . (I92134, b/269237141, b/260914964)\n• Experimental was added for the lazy staggered grids item scope. You can apply it on the items in order to achieve the automation position change/reordering animations. (I4b62d, b/257034719)\n• Promote to stable. defines a where each cell takes exact size on cross axis, with the remaining space distributed by cross axis arrangement. (I8542f)\n• Introduced receiver scope for Pager and an utility function for calculation a given page offset. (If2577)\n• Introduce the when creating a snap fling behavior. Use this parameter to specify a positional threshold to short snapping in Pager. (If8f7f)\n• Replaced with . In this new method we simply request the next offset to snap to. The calculation of the bounds should be performed at the implementation level as this may differ depending on how one needs snapping to happen. (I923a4)\n• APIs have been promoted to stable. (I633a5)\n• Remove from . This should be provided at the state creation. Updated and to accept the . (Ieb52d, b/266965072)\n• Remove from . This should be provided at the state creation. Updated and to accept the . (Ifa3cb, b/266965072)\n• Calls to get semantics on Text when constraints have and no longer crash. (Ibd072)\n• Fixed regression where keyboard wasn't showing for text fields inside dialogs not created by the composable. (I82551, b/262140644)\n\nand are released. Version 1.5.0-alpha03 contains these commits.\n\nThis release enables the new text rendering stack for Compose. The new stack is performance optimized, and you should see no visible changes.\n\nIf you do see changes in rendered text, you can debug by setting to confirm the behavior difference. Setting this will force recomposition. Please file any behavior differences as bugs.\n\nThe debug flag will be removed before the 1.5 beta01 release.(Iada23, b/246960758)\n\nand are released. Version 1.5.0-alpha02 contains these commits.\n• Added support for fixed size cells in and arranging them with cross axis arrangement. (I83ed9, b/235121277, b/267942510)\n• Added support for fixed size lanes in and arranging them with cross axis arrangement. (I7d519)\n• s in s can now be opened via accessibility services like . (If4d82, b/253292081)\n• Text-related test actions (e.g. ) will now request focus directly, using the semantics action, instead of clicking on the field. (I6ed05)\n• Adds support for cross axis spacing/arrangement using the in and in . We also remove the top-level and in . Developers can use instead. This reduces confusion between the naming conventions of and . (I87b60, b/268365538)\n\nand are released. Version 1.5.0-alpha01 contains these commits.\n• Text and is refactored to use the new modifier system. This leads to substantial performance improvements in many cases. No changes should be visible. (If1d17, b/246961435)\n• Added the semantics action to invoke the IME action on text editor nodes. (Ic606f, b/269633506)\n• Updated internals of . The modifier will only be shown in the inspector if it is enabled. (I82103)\n\nand are released with no changes (only a version bump).\n\nand are released. Version 1.4.2 contains these commits.\n\nand are released. Version 1.4.1 contains these commits.\n\nand are released. Version 1.4.0 contains these commits.\n• Added Emoji compat integration to and , as well as the lower level Paragraph. It is enabled by default when emojicompat is configured.\n• can be configured on a specific Text using .\n• Introduced new experimental overloads for the function and functions that accept parameters. The context will be used for the test composition and any and calls in the composition. (I10614, b/265177763)\n• and are now available as that allow for a more flexible row and column based layout of components that will break to a new line if there is not enough space on the main axis. (I3a7b2)\n• is available as experimental for displaying content with a scrolling marquee effect. (I2df44, b/139321650)\n\nand are released. Version 1.4.0-rc01 contains these commits.\n• Introduced new low-level API for building custom text input implementations that talk directly to platform APIs. (I58df4)\n• 's semantics action will now update the text buffer using the same code path as IME updates and the testing functions (e.g. ).\n• Text testing functions , , and now use . (I0807d, b/269633168, b/269624358)\n\nand are released. Version 1.4.0-beta02 contains these commits.\n• Added a new callback allowing you to reset some local state to properly handle the case when the will be reused (for example as an item of ). Fixed to properly reset the focused state. (I65495, b/265201972)\n• Added parameter to , , and methods to support different blending algorithms when drawing text on Canvas. (I57508)\n• Removed the API. Please extend from directly instead. (Ie6d21)\n\nand are released. Version 1.4.0-beta01 contains these commits.\n• Since 1.3, added Emoji compat integration to and , as well as the lower level Paragraph. It is enabled by default when emojicompat is configured.\n• can be configured on a specific Text using .\n• Added common implementation of API used in all to retain items that exit composition, but still need to be active. (If45a4)\n\nand are released. Version 1.4.0-alpha05 contains these commits.\n• Introduced new experimental overloads for the function and functions that accept parameters. The context will be used for the test composition and any and calls in the composition. (I10614, b/265177763)\n• Merges the pre/post APIs of into combined 'decorator' and functions. See the updated samples in the documentation for examples of how to implement an overscroll effect with the new API shape. (I8a9c4, b/255554340)\n• and APIs in are graduated to stable. (Ic1e1d)\n• The cursor in text fields will now continue to blink even when animations are disabled. (I95e70, b/265177763)\n• now animates even when animations are disabled in the system settings. (I23389, b/262298306, b/265177763)\n• methods in and are not deprecated again. (I23a04, b/262648050)\n\nand are released. Version 1.4.0-alpha04 contains these commits.\n• and are now available as that allow for a more flexible row and column based layout of components that will break to a new line if there is not enough space on the main axis. (I3a7b2)\n• is available as experimental for displaying content with a scrolling marquee effect. (I2df44, b/139321650)\n• is deprecated in favor of (I7f4d7, b/247708726, b/255352203, b/253043481, b/247716483, b/254529934, b/251840112, b/251859987, b/257141589)\n• constructor with is now a stable API, and can be used to create new types of font descriptors. (I5adcc, b/261565807)\n• Introduced api propagated by lazy lists via a composition local which allows to pin current item. This means such item will not be disposed when it is scrolled away from the view. For example, will pin the current focused item via this mechanism. (Ib8881, b/259274257, b/195049010)\n• Rewrote the way scrollables respond to and focusables to better model the complexity of those operations and handle more edge cases. (I2e5fe, b/241591211, b/192043120, b/237190748, b/230756508, b/239451114)\n• Added experimental to to define Text either to be or Animated. Use if Text is going to be scaled, translated, or rotated via animation. (I24dd7)\n• Replaced argument in with to be inline with other functions. is set to by default which should not change the previous default behavior. (Icd27d)\n• Adjustments in the snapping physics in for a more natural feel.\n• When updating from to , you might experience a error. Here is where the issue was orginially reported. A fix has been submitted, and will be available on the next Compose update. As a work around, update your and libraries to the latest version(1.1.0-alpha04) or downgrade your to 1.4.0-alpha03.\n\nand are released. Version 1.4.0-alpha03 contains these commits.\n• In UI tests using a Compose rule, continuations resumed during callbacks will not be dispatched until after all frame callbacks have finished running. This matches the behavior of compose when running normally. However, tests that rely on the old behavior may fail. This should only affect code that calls or directly, and has logic outside of callback passed to those functions that may need to be moved inside the callbacks. See the animation test changes in this CL for examples.\n• Added optional parameter to constructor and factory function to run code after callbacks but before resuming callers' coroutines. (Idb413, b/254115946, b/222093277, b/255802670)\n• Introduce Page accessibility actions: , , , . Note that these are only available from API 29. (Ida4ab)\n• Introduce and , a way of showing composables in a Pager manner. Introduced to control the Pagers as well as query information about the Pager's current state. Introduced , a way of controlling the size of a Pager's page, this can be used to create a carousel like Pagers. Introduced , a way to control how snapping will work in Pager's fling behavior. (I01120)\n• Introduced an overload in to help to understand where the fling will settle. (I569f6)\n• Removed . Instead of needing to remember and set this flag, just don't dispatch events to the overscroll effect in cases where you do not want overscroll to show (for example if both return false). (I1a4b0, b/255554340, b/255557085)\n• Added and to query whether a has room to scroll in either direction (whether it is at the minimum / maximum of its range). This defaults to true for backwards compatibility with existing implementations of . Consumers can use this to show indication to the user that there is still room to scroll, and this could also be used to avoid dispatching delta to that have no room to scroll in a given direction, to reduce unnecessary work. (Idf1a0, b/255557085)\n• Used in to correctly delay press interactions, when gestures could become scroll events.\n• Fixed not correctly delaying ripples, when used inside an .\n• Updated Drawers and Sheets to correctly delay presses in case gestures can become scroll events.\n• Update naming to be consistent with other methods in . (Ife67c)\n• Renamed to and to and made the Modifiers public. (Ie44e1)\n• The crash with and Lazy grids was fixed. It was happening in some conditions when the new items count is smaller then the previous one. (I0bcac, b/253195989)\n\nand are released. Version 1.4.0-alpha02 contains these commits.\n• and now accept a for greater flexibility. (I7579a, b/212091796)\n• Introduced parameter in Lazy APIs to compose and place out of viewport items (I69e89, b/172029355)\n• Added parameter to the and . It allows to set the minimum height of these composables in terms of number of lines (I24294, b/122476634)\n\nand are released. Version 1.4.0-alpha01 contains these commits.\n• A new method, , for gesture detectors was added. It operates similar to , but the loop over gestures operates entirely within the so events can't be lost between iterations.\n• has been deprecated in favor of because it allows events to be lost between gestures. (Iffc3f, b/251260206)\n• Added e and to determine the animation progress and know where the IME will be after animation completes. (I356f1, b/217770337)\n\nand are released. Version 1.3.1 contains these commits.\n• will not read layout coordinates unless attached (aosp/2241316)\n\nand are released. Version 1.3.0 contains these commits.\n• Experimental versions of and were introduced.\n• , and other corresponding APIs were added as experimental.\n• , , and now show ripples if clicked with the keyboard or d-pad on a remote control.\n\nand are released. Version 1.3.0-rc01 contains these commits.\n• Introduced used by the approach step when there's not enough fling velocity to decay. (Iaeb27)\n• Added new experimental API Hyphens to support automatic hyphenation in Text (Iaa869)\n\nand are released. Version 1.3.0-beta03 contains these commits.\n• s are now able to get the most up-to-date bounds of a request while processing it. (If86a5, b/241591211)\n• Introduce support for spacings between items to experimental (I10b82)\n• Changed argument with in method to support minimum width constraints. (I37530, b/242707525)\n• Added to get consumed for use outside .\n• Added to allow easily changing without recomposition. (I7fd28, b/237019262, b/243119659)\n\nand are released. Version 1.3.0-beta02 contains these commits.\n• Renamed and to and (Ia4262, b/183746982)\n• Introduced a overload that provides a quick way of enabling snapping in . (Ifb48a)\n• Replaced the factory with a concrete class. Scoped methods to Density to make Dp<->Px conversions easier for the API users. (I54a11)\n• Update to return list of placeables, highlighting desired immutability of the returned value. (I48b7c)\n• Introduced which takes a to create an instance of that can be used to enable a snap for . (I2dd10)\n\nand are released. Version 1.3.0-beta01 contains these commits.\n• Removed from - effects that care about pointer position can use in the to get the current pointer position instead. (I9f606, b/241239306)\n• Exposed as additional building block for more complex gesture detection (I04374, b/181577176)\n• Introduced , a fling behavior that enables list snapping. Provide an instance of with information about your snapping layout. (Ie754c)\n\nand are released. Version 1.3.0-alpha03 contains these commits.\n• Text fields will now throw more detailed exceptions when the provided by a returns invalid indices. (Ie73f9, b/229378536)\n• Deprecated and moved the semantics id to instead. (Iac808, b/203559524)\n• Deprecate . Please use instead in app code and in IME-management code. (I14e4c, b/183448615)\n\nand are released. Version 1.3.0-alpha02 contains these commits.\n• Added extension function on to provide a way to draw multi-styled text on composables and modifiers that operate on a like and . (I16a62, b/190787898)\n• Soft keyboard will now be hidden when a text field is disabled while focused. (I6e3e4, b/237308379)\n• When adding events to Velocity Tracker we will consider now deltas instead of positions, this will guarantee the velocity is correctly calculated for all cases even if the target element moves (Icea9d, b/216582726, b/223440806, b/227709803)\n• When a scrollable has a focused child, it will now correctly scroll to keep the focused child in view when its size is decreased, even when the size is animated. (I80867, b/230756508, b/220119990)\n• Fixed a crash where is cleared and refilled while selection is active. (I1235b, b/208655565, b/214253689)\n\nand are released. Version 1.3.0-alpha01 contains these commits.\n• Introduced the annotation type and associated methods to support link support in s. (I1c754, b/231495122)\n• may now be animated without restarting the cursor timer. (I812e6, b/236383522)\n\nand are released. Version 1.2.1 contains these commits.\n\nand are released. Version 1.2.0 contains these commits.\n• and are stable now.\n• You can now specify a content type for items in Lazy lists and grids. This will allow the components to reuse elements more efficiently.\n• Lazy lists and grids now have param which allows to disable scrolling via the user gestures.\n• A new experimental API called was added. It It is the API we use internally to power Lazy lists and grids.\n• API has been introduced as experimental. You can define custom overscroll effects as well as adding a standard platform one to custom scrollable containers.\n• Nested scrolling interoperability APIs have been introduced to allow for interoperability between views and compose scrolling actors.\n• Mouse and trackpad scrolling has been added to all scrolling containers.\n\nand are released. Version 1.2.0-rc03 contains these commits.\n• No changes since 1.2.0-rc02.\n\nand are released. Version 1.2.0-rc02 contains these commits.\n\nand are released. Version 1.2.0-rc01 contains these commits.\n• An experimental has been introduced to allow for custom overscroll effects, alongside the overloads that accept it.\n• Experimental has been moved from to foundation package and renamed to (If19fb, b/204650733)\n• Interfaces in compose libraries are now built using jdk8 default interface methods (I5bcf1)\n• Introduced an experimental api which allows to check that we do not nest scrollable containers. You can use it when create your own scrollable lazy layouts via . (Id6fab, b/233352497)\n• Removed deprecated from package. The new stable api is located in (I73c76, b/225192009)\n\nand are released. Version 1.2.0-beta03 contains these commits.\n• Added new experimental and . It allows to represent some list of values via multiple intervals. It will be useful when you want to define your own dsl similar to the one used by where list items can be defined via multiple item/items calls. (I2d05e, b/228580728)\n• Clarified the documentation for to state that insets are reported as far back as API 23, but only animated on 30+. (Ia7fc0, b/230756508)\n• Pressing the forward delete key when the cursor is at the end of a text field will no longer crash.\n• and now require their constructor arguments to be non-negative. (Ica8e6, b/199919707)\n\nand are released. Version 1.2.0-beta02 contains these commits.\n• Downloadable font resolution that does not change the layout size of Text or previously would not redraw, leading to stale font display. This bugfix ensures that text layout always triggers redraw (b/229727404). (I1d49e, b/229727404)\n\nand are released. Version 1.2.0-beta01 contains these commits.\n• This is the first beta release of 1.2!\n• Added experimental that can be used by custom implementations of when they layout items beyond visible bounds (Ifabfb, b/184670295)\n• Added default values for the optional members of interface. (Iba8a0)\n• In the api instead of a factory returning the composable lambda by index we now have a simpler composable function Item accepting the index. (Id2196)\n• Added Brush to and to provide a way to draw text with gradient coloring. (I53869, b/187839528)\n• , attributes of changed into a single enum: . have values of 4 states defined by two booleans: , , Both and None (Ifc6a5, b/181155707)\n• None Added to the and controls whether line height is applied to the top of the first line and to the bottom of the last line. It also defines the alignment of line in the space provided by ( ). For example it is possible to get a behavior similar to what CSS defines via .\n• None , configurations works correctly only when is false. (I97332, b/181155707)\n• None Added experimental modifier so that developers can control the IME through scrolling. (I60759)\n• Fixed regression where text fields would not hide the keyboard when removed from the composition while focused. (I7a410, b/230536793, b/225541817)\n• Support ellipsis when height is limited and doesn't fit all text lines (Ie528c, b/168720622)\n• will now always suspend until the request is either completed or was interrupted by a newer, non-overlapping request. Overlapping requests will be queued. (I43e7f, b/216790855)\n• Concurrent calls for rectangles that are completely overlapping will now only honor the larger rectangle's request. (I34be7, b/216790855, b/184760918)\n• Turned on default . It is possible to turn off the using attribute. In the near future we will change the default behavior however until that time this allows us to better integrate line height improvements (aosp/2058653) and solve clipping issues. (I01423, b/171394808)\n• is now inverted on Android if we scroll vertically (if someDelta is positive, it will scroll downward) (Ifb697, b/224992993)\n\nand are released. Version 1.2.0-alpha08 contains these commits.\n• Display all available weights for systems fonts on Android when using . This will use fallback font names like sans-serif-medium internally on API 21-28. This is a behavior change as previously only weights 400 and 700 were supported on API 21-28. (I380fe, b/156048036, b/226441992)\n• Paragraph and MultiParagraph are now accepting Constraints parameter. Passing is a no-op at the moment but will allow to do some calculation in the future, like ellipsizing based on the height. (I6afee, b/168720622)\n• now accepts a custom MutableSet-like class which doesn't allow adding new items in it. (Icd314)\n• Partial consumption (down OR position) has been deprecated in . You can use to consume the change completely. You can use to determine whether or not someone else has previously consumed the change.\n• now always makes a shallow copy. It means that copies of will be consumed once one of the copies is consumed. If you want to create an unbound , use constructor instead. (Ie6be4, b/225669674)\n• New experimental API is introduced. This allows you to build your own components like of . Note that the API is in its early stages and can be changed in the future releases. (Iba2bc, b/166591700)\n• companion now exposes the visibility (whether they are on the screen, regardless of whether they intersect with the window) and the size they could be if they are available on the device, but not currently active. (I65182, b/217770337)\n\nand are released. Version 1.2.0-alpha07 contains these commits.\n• Added a API that allows children of lazy layouts to prevent the currently composed items from being disposed (Ibbdd0, b/184670295)\n• and now have and fields (I3b628, b/200920410)\n• Added as an alternative to for specifically including decimal separator in IME. (Iec4c8, b/209835363)\n• Add new font descriptor Font(DeviceFontFamilyName) to optionally lookup system-installed fonts during font fallback chains. (I30468, b/219754572)\n• and are stable APIs now (I574c5, b/225669674)\n• Added temporary compatibility configuration for in can be changed via . This is a temporary configuration option to enable migration and will be removed. (If47be, b/171394808)\n• The extension property of allows developers to disable consumption of Android WindowInsets. This allows separate in the hierarchy to each apply without interfering with each other. (I0ef08, b/220943142)\n\nand are released. Version 1.2.0-alpha06 contains these commits.\n• Added semantics action to request focus on the focusable target. (I17b71)\n• has now been merged into and now has all the capabilities of . and have been deprecated. that accepts a should be replaced with a modifier in combination with . This allows the modifiers to have a stronger separation of concerns. (I601b7)\n• was added to allow developers to do the conversion without needing to be in composition. (I94c35)\n• Updated parsing of vector drawables to support auto mirroring to flip the content of a if the current layout direction is RTL. (I79cd9, b/185760237)\n• Scroll modifiers ( , , and ) will now scroll to keep the focused composable visible if the scroll area is resized and the focused composable was previously visible.\n• TextFields will now be kept above the keyboard when they are focused and the keyboard is shown, when inside a non-lazy scrollable and the soft input mode is . (I4a485, b/190539358, b/192043120, b/216842427)\n\nand are released. Version 1.2.0-alpha05 contains these commits.\n• and are now stable. (I307c0)\n• was replaced with separate and (I56d51)\n• / and all related apis were moved into subpackage. Please update your imports from to . (I2d446, b/219942574)\n• Text: is now turned off by default. The clipping issues as a result of is handled and no clipping should occur for tall scripts. (I31c84, b/171394808)\n• Introduced experimental to allow observing the bounds of child focusables. (I14283, b/220030968, b/190539358, b/192043120, b/216842427)\n• will now show the correct values. (I1585d)\n\nand are released. Version 1.2.0-alpha04 contains these commits.\n• are no longer required to manually pass requests up to parent responders, and are instead required to immediately return the rectangle they want their parent to bring into view. (I8e66a)\n• now supports before items with span not fitting inside the current line. (I05c40, b/207462103)\n• Add method to allow developers to include only dimensions from the WindowInsets. (I14c94, b/217768486)\n• None Added , and that allows compile time reporting of when a composable function is called targeting an applier it was not designed to use. In most cases the annotations can be inferred by the compose compiler plugin so using these annotation directly should be rare . The cases that cannot be inferred include creating and using a custom applier, abstract composable functions (such as interface methods), fields or global variables that are composable lambdas (local variables and parameters are inferred), or when using or a related composable functions. For custom appliers the composable functions that calls or need to add a annotation for the function and any composable lambda parameter types. It is recommended, however, to create an annotation that is annotated with and then the marked annotation be used instead of directly. A composable annotation marked with is equivalent to a with the fully qualified name of the attribute class as the applier parameter. For an example of using see . (I38f11)\n• Now it is allowed to pass negative scroll offsets into and . (I025c6, b/211753558)\n\nand are released. Version 1.2.0-alpha03 contains these commits.\n• methods in and are now deprecated and won't be called. Use instead. (Ia4302, b/192043120, b/216842427, b/178211874)\n• Animations were enabled for items of lazy grids with Modifier.animateItemPlacement(). (Ib6621, b/211753218)\n• now propagates requests to the hosting Android View. (Ia7a51)\n• is now available via\n• Added and to create new FontFamily resolvers outside of compose usage.\n• Paragraph and MultiParagraph now take\n• now contains the resolver used for this layout, deprecated as it is no longer used. (Id5a45, b/174162090)\n• Added , a new low-level API for providing new types of font resource descriptors on Android. For example, loading fonts from an app-specific backend, optionally locating pre-installed fonts on-device, or loading a font from a resource not provided by the current Font factories.\n• Expanded API to support optional and async font loading. It is not recommended that application developers use this API directly. To add new types of fonts see AndroidFont.\n• extension function allows construction of a when outside of composition.\n• Added parameter to resource-based fonts, to allow async loading when resource font references downloadable fonts XML. (Ie5aea, b/174162090)\n• constructor is deprecated. This was previously used to preload fonts, which may take up to 10 seconds for downloadable fonts. With downloadable fonts, this call may block for 10 seconds. Instead use\n• is deprecated. This was previously used to preload fonts, which may take up to 10 seconds for downloadable fonts. Instead use (If8e7c, b/174162090)\n• You can now specify the content type for the items of - item/items functions on now accept such parameter. Providing such information helps item composition reusing logic to make it more efficiently and only reuse the content between the items of similar type. (I7b355, b/215372836)\n• and now have new properties: , , (Ifc8ed, b/200920410)\n• You can now specify the content type for the items of LazyColumn/LazyRow - item/items functions on LazyListScope now accept such parameter. Providing such information helps item composition reusing logic to make it more efficiently and only reuse the content between the items of similar type. (I26506)\n• constructor accepting is now deprecated. Instead there is a new constructor accepting - a new interface allowing more granular control on what slots should be retained for the future reuse. (I52c4d)\n• Adds Modifiers for WindowInsets, both for padding and sizing. This allows some content to extend into the inset area, and still have primary content stay out of the inset area. For example, windowInsetsPadding can be used to pad the content area to avoid areas that may be fully or partially covered. (Id0395, b/213942085)\n• TextFields will now be kept above the keyboard when they are focused and the keyboard is shown, when the soft input mode is . (I8eaeb, b/190539358, b/192043120)\n• The soft keyboard input type no longer flickers when changing focus between text fields. (I1bf50, b/187746439)\n• Text fields no longer require an extra back press when the cursor handle is showing. (Ideb4b, b/205726883)\n• Text selection magnifier behavior has been polished to match the platform magnifier. (Idd918, b/206833278)\n\nand are released. Version 1.2.0-alpha02 contains these commits.\n• Added to methods that are overloads of existing methods without complex logic. This reduces compiler generated memoization checks (equals) for all parameters which are repeated in the inner function that is called. (I90490)\n• Text selection magnifier behavior has been polished to match the platform magnifier. (Idd918, b/206833278)\n• , , and other containers that use now support mouse wheel scrolling. (I2b5e1, b/198214718)\n\nand are released. Version 1.2.0-alpha01 contains these commits.\n• New parameter was added to , , and in order to allow users to temporarily or permanently disable the user initiated scroll via touch gestures or accessibility actions. Scrolling programmatically via the methods on the state will still be allowed. (I7eae9, b/201150093)\n• The magnifier widget now shows when dragging selection handles in a . (I30b38, b/139320979)\n• Fixes cursor handle not hiding when scrolled out of view. (I14552, b/208883748)\n\nand are released. Version 1.1.1 contains these commits.\n• Fix crash caused by clipboard content while reading from clipboard on Android. (I06020, b/197769306)\n\nand are released. Version 1.1.0 contains these commits.\n• Note that, with respect to Compose 1.0, Material components will expand their layout space to meet Material accessibility guidelines for touch target size. For instance, Button touch target will expand to a minimum size of 48x48dp, even if you set the Button's size to be smaller. This aligns Compose Material to the same behavior of Material Design Components, providing consistent behavior if you mix Views and Compose. This change also ensures that when you create your UI using Compose Material components, minimum requirements for touch target accessibility will be met.\n\nand are released. Version 1.1.0-rc03 contains these commits.\n\nand are released. Version 1.1.0-rc01 contains these commits.\n• Now it is allowed to pass negative scroll offsets into and . (Iceb90, b/184252837)\n\nand are released. Version 1.1.0-beta04 contains these commits.\n• Updated to be compatible with Kotlin\n• Experimental APIs were added that allow to consume PointerInputchange as a whole or check whether it was consumed or not. (I2e59d)\n• Show a magnifier widget when dragging the cursor or selection handles inside text fields. (I5391e, b/203781358)\n• Fix text handles not moving when IME visibility changes. (I25f2e)\n\nand are released. Version 1.1.0-beta03 contains these commits.\n• Support for horizontal spans was added to LazyVerticalGrid. (I7e2fa, b/176758183)\n• None Experimental ability to animate Lazy lists item positions was added. There is a new modifier available within LazyItemScope called . Usage example:\n• When you provide a key via or this modifier will enable item reordering animations. Aside from item reordering all other position changes caused by events like arrangement or alignment changes will also be animated. (I59e7b, b/150812265)\n\nand are released. Version 1.1.0-beta02 contains these commits.\n• Ripples and other indications will now only be delayed if they are inside a container, instead of always being delayed for a down event. (Ibefe0, b/203141462)\n• Added experimental BringIntoView API that lets you send a request to parents so that they scroll to bring an item into view (Ib918d, b/195353459)\n\nand are released. Version 1.1.0-beta01 contains these commits.\n• Added experimental BringIntoView API that lets you send a request to parents so that they scroll to bring an item into view (Ib918d, b/195353459)\n\nand are released. Version 1.1.0-alpha06 contains these commits.\n• A child-less overload for Layout was added, with improved efficiency (Ib0d9a)\n• now returns the on which the function was called. (I9e5db)\n• Added that scrolls a scrollable container to the content that is matched by the given matcher. (Ic1cb8)\n\nand are released. Version 1.1.0-alpha05 contains these commits.\n• Fixed accessibility support for scrollables (both lazy and non-lazy) with respect to scrolling (I6cdb0)\n\nand are released. Version 1.1.0-alpha04 contains these commits.\n• Deprecated and , which have been replaced by and . (Ia5f3f, b/190493367)\n• Added to that includes the minimum touch target size so that developers can ensure that touch targets meet accessibility minimums. (I2e14b, b/197751214)\n• Support for stretch overscroll has been added on Android 12 devices. (Iccf3c, b/171682480)\n\nand are released. Version 1.1.0-alpha03 contains these commits.\n• Glow effect for scroll has been added. New experimental OverScrollConfiguration API has been added to allow for configuration of the overscroll visual effect. Provide null to turn off the overscroll effect. (I0c304, b/171682480)\n• AwaitPointerEventScope now has withTimeout() and withTimeoutOrNull() (I507f0, b/179239764, b/182397793)\n• Added test method to get the clipped bounds. (I6b28e)\n• Added minimum touch target size to ViewConfiguration for use in semantics and pointer input to ensure accessibility. (Ie861c)\n\nand are released. Version 1.1.0-alpha02 contains these commits.\n\nand are released. Version 1.1.0-alpha01 contains these commits.\n• Updated method that consumes source and destination rects to consume an optional FilterQuality parameter. This is useful for pixel art that is intended to be pixelated when scaled up for pixel based art. Updated BitmapPainter + Image composable to also consume an optional FilterQuality parameter (Ie4fb0, b/180311607)\n• TextField now clears selection when back button is pressed, which matches Android EditText behavior. (I3ca16, b/174173645)\n• Scrolling via semantics actions for lazy lists and regular scrolling components is now animated (Id9066, b/190742024)\n• now accepts both horizontal and vertical arrangement parameters. (If9c92)\n\nand are released. Version 1.0.5 contains these commits.\n\nand are released. Version 1.0.4 contains these commits.\n\nand are released. Version 1.0.3 contains these commits.\n\nand are released. Version 1.0.2 contains these commits.\n\nUpdated to support the Compose release. Compose is still compatible with Kotlin .\n\nand are released. Version 1.0.1 contains these commits.\n\nand are released. Version 1.0.0 contains these commits.\n\nThis is the first stable release of Compose. Please see the official Compose Release blog for more details!\n• None If you are using Android Studio Bumblebee Canary 4 or AGP / , you may hit the following crash: To fix, temporarily increase your minSdkVersion to 24+ in your file. This issue will be fixed in the next version of Android Studio Bumblebee and AGP . (b/194289155)\n\nand are released. Version 1.0.0-rc02 contains these commits.\n• Updated border rendering for generic shapes to address issues with paths defined with fixed dimensions. (aosp/1748871, b/191817116)\n\nand are released. Version 1.0.0-rc01 contains these commits.\n• Disabled Button, Card, Checkboxes and overall will block clicks from going up to the parent. (Ic2c3b, b/183908811)\n\nand are released. Version 1.0.0-beta09 contains these commits.\n• Removed . If you need to control animations, use instead. (I3c3e8, b/189951065)\n• change enum Role and LiveRegionMode to inline classes with private constructor (Id1890)\n• TextOverflow is changed to an inline class. (I433af)\n• Now when you specify the unique keys for LazyColumn/Row items the scroll position will be maintained based on the key, which means if you add/remove items before the current visible item the item with the given key will be kept as the first visible one. (Id263f, b/184257857)\n• Key constants are @ExperimentalComposeUiApi for now. Consuming code can declare private constants prior to stabilization. (Ia5d48)\n• Added IdlingStrategy to AndroidComposeTestRule that can be used by testing frameworks to install an alternative mechanism to await or achieve quiescence. Use before your test starts to install your own strategy. (I608fa)\n\nThis release adds profile rules to the following compose modules (I14ed6):\n• None Profile rules for a library are specified in a text file located in the or equivalent directory. The file specifies a rule per line, where a rule in this case is a pattern for matching to methods or classes in the library. The syntax for these rules is a superset of the human-readable ART profile format that is used when using . These rules take one of two forms to target either methods or classes.\n• None A method rule will have the following pattern:\n• None And a class rule will have the following pattern:\n• None Here is one or more of the characters , , and to indicate whether or not this method should be flagged as \"Hot\", \"Startup\", or \"Post Startup\".\n• None The is the descriptor for the class that the targeted method belongs to. For example, the class would have a descriptor of .\n• None The is the signature of the method, and includes the name, parameter types, and return types of the method. For example, the method on has the signature .\n• None These patterns can have wildcards ( , , and ) in order to have a single rule encompass multiple methods or classes.\n\nWhat do the rules do?\n• None A method that has the flag indicates that this method is a \"hot\" method, and should be compiled ahead of time.\n• None A method that has the flag indicates that it is a method which is called at startup, and should be compiled ahead of time to avoid the cost of compilation and interpreting the method at startup time.\n• None A method that has the flag indicates that it is a method which is called after startup.\n• None A class that is present in this file indicates that it is used during startup and should be pre-allocated in the heap to avoid the cost of class loading.\n\nHow does this work?\n• Libraries can define these rules which will be packaged in AAR artifacts. When an app is then built which includes these artifacts, these rules are merged together and the merged rules are used to build a compact binary ART profile that is specific to the app. ART can then leverage this profile when the app is installed on devices in order to ahead-of-time compile a specific subset of the application to improve the performance of the application, especially the first run. Note that this will have no effect on debuggable applications.\n\nand are released. Version 1.0.0-beta08 contains these commits.\n• NestedScrollSource enum is replaced by an inline class. (Ie321b, b/187055290)\n• Refactored enum usages to inline classes to avoid issues with exhaustive when statements when new enum values are added. (I2b5eb)\n• Adds a tap timeout to clickable / toggleable to prevent showing a ripple during a scroll / drag (Ia2704, b/168524931)\n• ContentDescription and Text semantics properties are no longer single values but lists. This enables to merge them as they are instead of concatenations. Also provided better testing APIs to utilize these changes (Ica6bf, b/184825850)\n• is deprecated and replaced by (I6c860)\n• KeyboardType enum is replaced by an inline class. (I73045, b/187055290)\n• ImeAction enum is replaced by an inline class. (I18be5, b/187055290)\n• functions are now ExperimentalTextApi instead of ExperimentalComposeApi. (I0cd0a)\n• TextUnit constructor with TextUnitType is now ExperimentalTextApi instead of ExperimentalComposeApi.\n• PaddingValues is now rather than (I88c50)\n• Fix crashes of long press the blank area in non-empty text. (I33ab5, b/187437299)\n• Fix for scrollable containers clipping its children on the cross axis. It was easily reproducible if you have a LazyRow with Card items. now the shadow will not be clipped. (Icb635, b/186318448)\n• Fixed an issue where ripples / other indication would sometimes get stuck on a long click when using Modifier.combinedClickable (I2298c, b/186223077)\n• Now , , and will consume the position change automatically, no need to call change.consumePositionChange in the onDrag callbacks (I42fc4, b/185096350, b/187320697)\n• was changed to report the coordinates of this modifier in the modifier chain, not the layout coordinates after applying all the modifiers. This means that now the ordering of modifiers is affecting what coordinates would be reported. (Ieb67d, b/177926591)\n\nand are released. Version 1.0.0-beta07 contains these commits.\n• The next visible item prefetching logic is introduced for LazyColumn/Row (I8a4bc, b/184940225)\n• LazyColumn/Row will now keep up to 2 previously visible items active (not disposed) even when they are scrolled out already. This allows the component to reuse the active subcompositions when we will need to compose a new item which improves the scrolling performance. (Ie5555)\n• A beta06 regression affecting Row/Column using spacedBy arrangements to layout weighted children was fixed. (Ifaf8c, b/187326588)\n\nand are released. Version 1.0.0-beta06 contains these commits.\n• Added CollectionInfo and CollectionItemInfo accessibility APIs that allows to mark collection and its items for accessibility services (Id54ef, b/180479017)\n• Added to scroll a list with indexed items to the item with a certain index, and to get the index of an item in a list with keyed items. Both actions are implemented by LazyList.\n• Added that scrolls a list to the given index, and that scrolls a list to the item with the given key. (I4fe63, b/178483889, b/161584524)\n• AnnotatedString save support to TextFieldValue.Saver. Added addTtsAnnotation and withAnnotation utility functions to AnnotatedString.Builder (I8cbdc, b/178446304)\n• Row & Column children with are no longer making the parent fill the entire available main axis space. (Ied94d, b/186012444, b/184355105)\n\nand are released. Version 1.0.0-beta05 contains these commits.\n• FlingBehavior interface is now marked as @Stable. All implementations should comply with the contract. (I93354, b/184830577)\n• Fixed , , , , and accessibility scroll actions. Instead of scrolling to the end of the scrollable, it will now scroll by one screen in the given direction. (Ieccb0)\n• The AndroidManifest files from ui-test-manifest and ui-tooling-data are now compatible with Android 12 (I6f9de, b/184718994)\n\nand are released. Version 1.0.0-beta04 contains these commits.\n• Rename hideSoftwareKeyboard and showSoftwareKeyboard on SoftwareKeyboardController to and respectively.\n• Provide the full CompositionLocal interface for LocalSoftwareKeyboardController, allowing it to be set (especially useful in tests) (I579a6)\n• Fixed the issue when items of / located on the edges were incorrectly positioned after fast fling (Ie4d13, b/183877420)\n• None Prior to this change, local composable functions were skippable based on their parameters. After this change, no local composable functions will skip. This change is done because it is common and expected for local functions to capture parameters from the parent and them skipping is a common source of bugs. To summarize, consider the example: Prior to this change, the composable function would always skip, even after the parameter was updated. This is no longer the case. (I5648a)\n\nand are released. Version 1.0.0-beta03 contains these commits.\n• is deprecated. Calling or with no will now throw . (I4eb0d)\n• is now called even when velocity is 0 (I0b6e5, b/181237123)\n\nand are released. Version 1.0.0-beta02 contains these commits.\n• Added new composition local API to replace previous SoftwareKeyboardController interface on TextField. (I5951e, b/168778053)\n• Added new composition local API to replace previous SoftwareKeyboardController interface on TextField. (I84472, b/168778053)\n\nand are released. Version 1.0.0-beta01 contains these commits.\n\nThis is the first release of Compose 1.0.0 Beta.\n• onStart callback has been added to (I67269, b/179995594)\n• Modifiers for sizing to intrinsics are no longer experimental. (I15744)\n• Removed SoftwareKeyboardController callback from all text fields to be replaced by a new API shortly. (Iae869, b/168778053)\n• MeasureBlocks was renamed to MeasurePolicy which became a fun interface. Layout APIs were updated / simplified to use MeasurePolicy. (Icab48, b/167662468, b/156751158)\n• has been replaced with\n• Instead of passing to components such as and , use .\n• Instead of: you should instead use the extension functions on InteractionSource, such as InteractionSource.collectIsPressedAsState().\n• For complex use cases you can use InteractionSource.interactions to observe the stream of Interactions. See the InteractionSource documentation and samples for more information.\n• Removed deprecated LayoutCoordinates methods, use function instead of the property for positionInParent and boundsInParent (I580ed, b/169874631, b/175142755)\n• Created new TextInputSession for input sessions from low level text components such as CoreTextField. (I8817f, b/177662148)\n• Placeable now exposes measuredSize, representing the size which the child layout actually measured to. This size might not respect the measurement constraints. (Ib2729, b/172560206, b/172338608)\n• Add selectionGroup modifier that allows to mark collection of Tabs or RadioButtons for accessibility purposes (Ie5c29)\n• This method smooth scrolls to a specific item in the list. (I4bfd7)\n• None ScrollableState.smoothScrollBy() was renamed to animateScrollBy() LazyListState.snapToItemIndex() was renamed to scrollToItem() ScrollState.smoothScrollTo() was renamed to animateScrollTo() (I35ded)\n• None Modifier.zoomable has been replaced my Modifier.transformable. smoothPanBy, smoothRotationBy have been added as a functionality. (Ifc32b, b/175294473)\n• None The for and is now required instead of optional. This changes removes a potential type error for non-nullable types where no default factory was provided. Previously this would provide a null reference for a non-nullable type. For nullable types consider supplying as the default factory. We do not recommend using locals with non-nullable types unless a sensible default can be provided. If no sensible default exists, the lambda should throw an exception. However throwing an exception means that consumers of the local will have an implicit dependency on it being provided that is not enforced by the type system. (Ifbd2a)\n• None Changed to and removes parameter from I . IndicationInstance should only be responsible for drawing visual effects, and not launching animations / writing state in response to InteractionState changes. These animations and state writes should happen within instead. The parameter in was also changed to be a required parameter. (Ic1764, b/152525426)\n• None Scroll position in Modifier.verticalScroll()/horizontalScroll() is represented with Ints now (I81298)\n• None FlingConfig has been renamed to FlingBehavior now allows for customization of suspend animation rather than predefined Decays. (I02b86, b/175294473)\n• None Size modifiers were renamed. Modifier.width/height/size were renamed to requiredWidth/requiredHeight/requiredSize. Modifier.preferredWidth/preferredHeight/preferredSize were renamed to width/height/size. (I5b414)\n• None Modifier.tapGestureFilter has been removed. Use instead. (I266ed, b/175294473)\n• None partial consumption was removed from pointer input system. The recommended way of coordinating partial consumtion is Modifier.nestedScroll. (Ie9c9b)\n• None Orientation has been moved to foundation package. VelocirtTracker moved from ui.gesture to ui.input.pointer. (Iff4a8, b/175294473)\n• None AnimationClockObservable and subclasses have been removed. AnimatedFloat has been removed. (Icde52, b/177457083)\n• None drawerState.open() and drawerState.close() are now suspending functions. Use rememberCoroutineScope() to get the scope of the composition to call them (I16f60, b/175294473)\n• None Providers has been renamed to CompositionLocalProvider\n• The Composition constructor no longer accepts a key parameter, and has been deprecated.\n• currentCompositeKeyHash has been turned into a composable top level property instead of a composable top level function.\n• CompositionData and CompositionGroup have been moved to the androidx.compose.runtime.tooling namespace\n• ComposableLambda has been made an interface instead of a concrete class, and no longer has type parameters.\n• ComposableLambdaN has been made an interface instead of a concrete class, and no longer has type parameters.\n• The snapshotFlow function has been moved to the androidx.compose.runtime namespace\n• the merge method of SnapshotMutationPolicy is no longer experimental\n• The top level clearRoots function has been removed. It is no longer necessary.\n• keySourceInfoOf and resetSourceInfo functions have been removed. They are no longer necessary.\n• Composer.collectKeySourceInformation has been removed. It is no longer necessary.\n• isJoinedKey, joinedKeyLeft, and joinedKeyRight methods have been removed. They are no longer necessary.\n• Various top level APIs have been moved and reorganized into different files. Due to Kotlin’s file class semantics, this will break binary compatibility but not source compatibility, so should not be an issue for most users.\n• None Modifier.scrollable has been reworked. Now it uses Scrollable interface instead of ScrollableController class (I4f5a5, b/174485541, b/175294473)\n• None Modifier.draggable now accepts DraggableState instead of a simple lambda. you can create state via to get the same behaviour as before (Ica70f, b/175294473)\n• None requiredWidth(IntrinsicSize) and requiredHeight(IntrinsicSize) modifiers were added for required sizing to intrinsic sizes. (I0a6b4)\n• None Deprecated is removed. Use instead. (Idb33f, b/179432510)\n• Added new LocalSoftwareKeyboardController composition local API to replace previous SoftwareKeyboardController interface on TextField. (I658b6, b/168778053)\n\nand are released. Version 1.0.0-alpha12 contains these commits.\n• Modifier.pointerInput now requires remember keys to indicate when the pointer input detection coroutine should restart for new dependencies. (I849cd)\n• Testing update: hasText() will check for both input and label/hint/placeholder texts in the text field (Iab803)\n• PaddingValues.Absolute was added and can be used in APIs accepting PaddingValues. (Ia5f30)\n• onImeActionPerformed is deprecated. use KeyboardActions instead (If0bbd, b/179071523)\n• In order to better match naming conventions with ImageBitmap and ImageVector, ImagePainter has been renamed to BitmapPainter to parallel VectorPainter. (Iba381, b/174565889)\n• Better substring test APIs with substring now as an argument (Icbe78)\n• Introduced an coroutine context element that will be applied in infinite animations. By default no policy is installed, except when running tests with . (I50ec4, b/151940543)\n• Animatable.snapTo and Animatable.stop are now suspend functions (If4288)\n• ComponentActivity.setContent has moved to androidx.activity.compose.setContent in the androidx.activity:activity-compose module. (Icf416)\n• Destructuring and copy() methods have been removed from several classes where they were rarely used. (I26702, b/178659281)\n• None Custom keys support for LazyColumn/LazyRow was added. This allows us to smarter handle items reordering. So the state you stored in remember {} blocks will move together with the item when you reorder elements or removed the item from the middle.\n• None Changed Indication#createInstance to be @Composable, and changed LocalIndication to contain an Indication, not () -> Indication. (I5eeea, b/157150564)\n• None loadFontResource is deprecated. Use fontResource instead. imageResource, loadImageResource, vectorResource, and loadVectorResource are deprecated. Use painterResource instead. (I6b809)\n• None For performance reasons, ScrollAxisRange semantics now takes lambdas returning Floats instead of direct Float values. (If4a35, b/178657186)\n• None Added EditableText semantics to mark editable input text of the text field for accessibility and corresponding test methods to check the semantics (I8e07a)\n• None Modifier.clickable now doesn't have double and long click support. Use Modifier.combinedClickable to achieve this functionality. (Iafad1)\n• None IntBounds was renamed to IntRect and the API was improved. (I1f6ff)\n• None Modifier.dragGestureFilter has been deprecated. Use instead. Alternatively, use Modifier.draggable for one axis drags (I0ba93, b/175294473)\n• None Renamed Ambients to match the Ambient -> CompositionLocal rename. Ambients used to be named AmbientFoo, now CompositionLocals are named LocalFoo. (I2d55d)\n• None Similarly to how we previously removed composable and now promote usage like we are going to remove composable. You should use instead and it will save and restore automatically if the type used inside the MutableState can be stored in the Bundle. If previously you were passing a custom saver object now you need to use a new overload of rememberSaveable which has the parameter. The usage will look like this: (Ib4c26, b/177338004)\n• None Playtime in animation is now unfiied to nanoseconds (If776a)\n• None @ComposableContract has been deprecated in favor of three more specific annotations. has become has become has become has been removed. (I60a9d)\n• None and utilities have been deprecated as they no longer have any positive performance impact or value (I0484d)\n• None Recomposers can now be closed. Closed recomposers will continue recomposition until composition child coroutines complete. Recomposer.shutDown renamed to cancel to contrast with close. (Ib6d76)\n• None APIs related to LazyVerticalGrid are marked as experimental (Ia53e3, b/178519862)\n• None rememberSavedInstanceState() was renamed to rememberSaveable() and moved to androidx.compose.runtime.saveable package. (I1366e, b/177338004)\n• None RestorableStateHolder was renamed to SaveableStateHolder and moved to androidx.compose.runtime.saveable package. Inner method RestorableStateProvider was renamed to SaveableStateProvider. Generic type was removed so you can just pass Any as a key. Experimental annotation is not needed anymore. (I0902e, b/174598702)\n• None Saver, listSaver(), mapSaver(), autoSaver was moved from androidx.compose.runtime.savedinstancestate to androidx.compose.runtime.saveable (I77fe6)\n• None Many longstanding deprecated APIs in the ui package are deleted. (I2f2dc)\n• None The compose:runtime-dispatch artifact is now deprecated. MonotonicFrameClock can now be found in compose:runtime and AndroidUiDispatcher can be found in compose:ui. (Ib5c36)\n• None Parameters on RounderCornerShape, CutCornerShape and CornerBasedShape were renamed from left/right to start/end in order to support the shape's auto mirroring in the rtl direction. AbsoluteRounderCornerShape and AbsoluteCutCornerShape were introduced for the cases when auto-mirroring is not desired. (I61040, b/152756983)\n• None canDrag has been removed from the Modifier.scrollable. (Id66e7, b/175294473)\n• None The API the Compose compiler plugin targets has been refactored to use an interface instead of a concrete class. The interface also no longer uses a type parameter. This is an internal change that should not effect source code compatibility but is a binary breaking change. (I3b922, b/169406779)\n• None Modifier.scaleGestureFilter has been removed. Use Modifier.zoomable instead. Alternatively, use (Id5da1, b/175294473)\n• None AnimatedValue/Float is now deprecated. Please use Animatable instead. (I71345, b/177457083)\n• None Remove deprecated non-suspend scrolling functions Continuing with the changes from last release, the non-suspend scrolling functions are now removed entirely. Please convert to the suspend functions with the same names. A coroutine scope can be obtained via rememberCoroutineScope(). (I3d39c, b/178169563)\n• None androidx.compose.foundation.layout.ConstraintLayout was deprecated in favor of androidx.constraintlayout.compose.ConstraintLayout. You will need to add a dependency on . (I87adc)\n• None tapGestureFilter, doubleTapGestureFilter, longPressGestureFilter and pressIndicaitonGestureFilter have been deprecated. Use Modifier.clickable or Modifier.pointerInput with detectTapGestures function instead. (I6baf9, b/175294473)\n• None Removed . [Abstract]ComposeView now default to lazily created, window-scoped Recomposers driven by the ViewTreeLifecycleOwner for the window. Recomposition and withFrameNanos-based animation ticks are paused while the host Lifecycle is stopped. (I38e11)\n• None Recomposer.runningRecomposers now offers a global StateFlow of read-only RecomposerInfo for observing ongoing composition state in the process. Prefer this API to Recomposer.current(), which is now deprecated. (If8ebe)\n\nand are released. Version 1.0.0-alpha11 contains these commits.\n• We now recommend using suspend functions to control scrolling and wait for the scroll to finish. We are deprecating and/or removing the non-suspend versions of these functions as part of this transition. (Ie9ced)\n• None Deprecate non-suspend smoothScrollBy We now recommend using suspend functions to control scrolling and wait for the scroll to finish. We are deprecating the non-suspend versions of these functions as part of this transition. (I12880)\n• None Content description parameter has been added to the Image and Icon. It is used to provide description to the accessibility services (I2ac4c)\n• None BasicTextField received a new parameter called 'decorationBox'. It allows to add the decorations like icons, placeholder, label and similar to the text field and increase the hit target area of it. (I16996)\n• None canDrag parameter has been removed from the Modifier.draggable (Ic4bec, b/175294473)\n• None AnimatedFloat.fling that accepts FlingConfig has been removed. Please use suspend Animatable.animateDecay instead. (I4659b, b/177457083)\n• None Removed from the following classes:\n• None clickable, toggleable and selectable can be created outside of composition now (I0a130, b/172938345, b/175294473)\n• None ScrollableColumn/Row were deprecated. Using ScrollableColumn is less efficient comparing to LazyColumn when you have a large scrolling content because with LazyColumn we can only compose/measure/draw visible elements. To prevent users from going inefficient way we decided to deprecate ScrollableColumn and ScrollableRow and promote usages of LazyColumn and LazyRow instead. Users can still decide they don't need the lazy behaviour and use the modifiers directly like this: Column(Modifier.verticalScroll(rememberScrollState())) (Ib976b, b/170468083)\n• None New factory method for scope of LazyColumn/LazyRow/LazyVerticalGrid. and are now extension functions so you have to manually import them when used. New extension overloads for Arrays: items(items: Array) and itemsIndexed(Array) (I803fc, b/175562574)\n• None The propagateMinConstraints parameter was added to Box, for specifying whether the incoming min constraints should be passed to the content of the Box or not. Default is false. (I0125b, b/152613457)\n• onCommit, onDispose, and onActive have been deprecated in favor of SideEffect and DisposableEffect APIs (If760e)\n• WithConstraints was reworked as BoxWithConstraints and moved to foundation.layout. (I9420b, b/173387208)\n• None Changes to factory functions for Font/FontFamily/Typeface\n• New factory functions return the FontFamily instead of subclasses\n• Hid constructors of the subclasses, so that they can only be constructed via factory functions.\n• None Introduced , which extends and defines , which has been removed from . Added a factory method that returns a and does not launch an Activity for you. Use this when you want to launch your Activity during your test, e.g. using (I9d782, b/174472899)\n• None animateAsState is now animateFooAsState, where Foo is the type of the variable being animated. e.g. Float, Dp, Offset, etc (Ie7e25)\n• None Density is now receiver scope for Arrangement interfaces. (I18aad)\n• None TextFieldValue accepts AnnotatedString. However this is an API only change and multi-style text editing is not implemented yet.\n• None invalidate and compositionReference() are now deprecated in favor of currentRecomposeScope and rememberCompositionReference respectively. (I583a8)\n• None AnnotatedString is changed to extend from kotlin.CharSequence. Therefore length and subSequence are now instance functions, and extension functions are removed. (Iaf429)\n• None Duration and Uptime will be replace with Long milliseconds, and this step removes the dependency of pointer input on those classes. (Ia33b2, b/175142755, b/177420019)\n• None RememberObserver replaces CompositionLifecycleObserver and CompositionLifecycleObserver is now deprecated. is a replacement for with modified semantics and renamed methods. Changing to the new API can be done mechanically for objects that are only remembered once which is, and continues to be, the recommended practice. However, if a reference was remembered more than once in a composition is called for each reference where is only called once. was called multiple time if the object was used in subcompositions, such as and making the single call guarantee unreliable and it was removed for . adds which is called if the instance is returned from the callback passed to but was not remembered in the composition state and, therefore, will never have called. This can occur if an exception terminates composition before completing or the composition is discarded because the state is was producing a composition for is no longer current or otherwise is no longer needed. If the instance of following the single reference recommendation above is tracking an external resource both and each indicate that the resource is no longer needed. If the object is tracking work started or resources allocated in , can be ignored as it will not be called if is called. (I02c36)\n• None The following classes are not data classes anymore:\n• None Please use ImeAction.None instead of ImeAction.NoAction\n• Please use ImeAction.Default instead of ImeAction.Unspecified (Ie1bcc)\n• None FocusRequester.createRefs is now marked as experimental as it might change. (I2d898, b/177000821)\n• None SemanticsPropertyReceiver.hidden was renamed to invisibleToUser and marked @ExperimentalComposeUiApi. AccessibilityRangeInfo was renamed to ProgressBarRangeInfo. stateDescriptionRange was renamed to progressBarRangeInfo. AccessibilityScrollState was renamed to ScrollAxisRange. horizontalAccessibilityScrollState was renamed to horizontalScrollAxisRange. verticalAccessibilityScrollState was renamed to verticalScrollAxisRange. (Id3148)\n• None Removed PointerInputData and modified PointerInputChange to give it all of PointerInputData's fields. Made PointerInputEvent and PointerInputEventData internal because they aren't used in any public API. (Ifff97, b/175142755)\n• None Remove displaySize as it should be avoided. Typically it is better to use size of onRoot() or window size at least. (I62db4)\n\nand are released. Version 1.0.0-alpha10 contains these commits.\n• ImeOptions and KeyboardOptions are no more a data class (I3c898, b/168684531)\n• VisualTransformation API Changes\n• Moved OffsetMapping to its own file\n• Modified Velocity to have component parts and mathematical operations. (Ib0447)\n• Renamed @ExperimentalTesting to @ExperimentalTestApi to be consistent with similar experimental api annotations (Ia4502, b/171464963)\n• Moved nativeClass to ui module and made it internal. Updated usages of nativeClass in equals implementations to use 'is MyClass' instead. (I4f734)\n• FlowRow and FlowColumn were deprecated. Please use a custom layout instead. (I09027)\n• Modifier.focus() and Modifier.focusRequester() are deprecated. Use Modifier.focusModifier() and Modifier.focusReference() instead. (I75a48, b/175160751, b/175160532, b/175077829)\n• Added isSpecified, isUnspecified, and useOrElse for inline classes with an Unspecified constant. (I93f7b, b/174310811)\n• New coroutine-based API that ensures mutual exclusiveness among its animations. New DecayAnimationSpec to support multi-dimensional decay animation (I820f2, b/168014930)\n• is now replaced with , which returns a instead of . This allows better performance, as the invalidation scope can be narrowed down to where the State value is read. (Ib179e)\n• Add Semantics role API and add Role as a parameter to clickable, selectable and toggleable SemanticsModifier. Changed Modifier.progressSemantics so that Slider can also use it. (I216cd)\n• The native keyEvent can now be accessed through keyEvent.nativeKeyEvent (I87c57, b/173086397)\n\nand are released. Version 1.0.0-alpha09 contains these commits.\n• This allows ScrollState and LazyListState to be treated as a common type, allowing custom scrolling to be implemented across both types. This also moves smoothScrollBy to an extension function on Scrollable, taking advantage of this functionality. (I2153b)\n• None Deprecate LazyColumnFor, LazyRowFor, LazyColumnForIndexed and LazyRowForIndexed. Use LazyColumn and LazyRow instead (I5b48c)\n• None For suspending pointer input APIs, renamed HandlePointerInputScope to AwaitPointerEventScope and handlePointerInput() to awaitPointerEventScope(). (Idf0a1, b/175142755)\n• None LazyListState.layoutInfo was added which exposes the list of sizes and offsets of the currently visible items (If8678, b/170472532)\n• None InteractionState support for TextFields has been added. (I61d91)\n• None Add reverseLayout param for LazyColumn/Row. when items will be composed from the bottom to the top and will mean the first item is located at the bottom. (I552ae, b/166589935)\n• None verticalArrangement param was added for LazyColumn. horizontalArrangement param was added for LazyRow. Arrangement allows us to add a spacing between items and specify the arrangement of the items when we do not have enough of them to fill the whole minimum size. (Icf79a, b/170394300)\n• None detectMultitouchGestures now uses one callback with combined centroid, pan, zoom and rotate parameters. (Ie6e1c)\n• None Moved ContentDrawScope to ui-graphics module to be with DrawScope. (Iee043, b/173832789)\n• Lambdas in offset modifiers now return IntOffset rather than Float. (Ic9ee5, b/174137212, b/174146755)\n• None Removed SlotTable, SlotReader and SlotWriter from the public API. These were marked as InternalComposeAPI previously. Now they are internal to the compose module. CompositionData and CompositionGroup were added as a replacement for the ui-tooling API to use to extract composition information. These are public but are not intended for use outside the ui-tooling API as they provide the raw information the ui-tooling API interprets (I31a9c)\n• None Refactored ShaderBrush to lazily create a shader instance when sizing information of the drawing environment is available. This is useful to define gradients that occupy the full drawing bounds of a composable at composition time, without having to implement custom DrawModifier implementations. Deprecated gradient function constructor APIs in favor of factory methods on a Gradient object. (I511fc, b/173066799)\n• None Modifier.focusObserver is deprecated. Use Modifier.onFocusChanged or Modifier.onFocusEvent instead (I30f17, b/168511863, b/168511484)\n• None Autofill API is now experimental API and requires opt-in (I0a1ec)\n• None accessibilityLabel has been renamed to contentDescription. accessibilityValue has been renamed to stateDescription. (I250f2)\n• None Introduced several new functions in SelectionRegistrar and also renamed onPositionChange to notifyPositionChange. (Ifbaf7)\n• None New infiniteRepeatable function for creating an InfiniteRepeatableSpec (I668e5)\n• None The interface has changed to simplify building trees bottom-up instead of top-down. The method has been renamed to . An applier either inserts nodes into the tree it is editing using or depending on which performs better. Some trees, such as and , are much more efficient to build bottom-up than top-down. Prior to this change, a stack of inserts was required to implement bottom-up which needed to be copied to every applier which needed bottom-up construction for performance. With this change an overrides to build a tree bottom-up and to build the tree top-down. (Icbdc2)\n• None Added painterResource API to handle opaquely loading Painter objects from either rasterized asset formats (like PNGs) or VectorDrawables. Consumers no longer have to determine the type of asset in advance and can call this method to get a Painter object to use in Image composables or painter modifiers. (I2c703, b/173818471)\n• None Added buildAnnotatedString factory function in order to build an AnnotatedString. Deprecated annotatedString builder function. (Idfe0b)\n\nand are released. Version 1.0.0-alpha08 contains these commits.\n• Removed parameter from the . If you'd like to constraint the height of the text field by the number of lines, use instead. (Iec002)\n• Changed the methods to not detect the pointer down and renamed them to . Also removed the need for parameter. (Ie96e1)\n• Added lint check for composable lambda parameter naming and position, to check for consistency with Compose guidelines. Also migrated some APIs using as the name for their trailing lambda to , according to the lint check and guidance. (Iec48e)\n• apis moved to . The package structure remained the same (Id3eb2)\n• New multitouch gesture detector, including helpers for detecting rotation, zoom, and panning. (Ic459d)\n• Renamed VectorAsset to ImageVector Moved and renamed VectorAsset to Builder to be an inner class of ImageVector as per API council guidelines. Added typealias of VectorAssetBuilder to link to ImageVector.Builder for compat. (Icfdc8)\n• Adds LazyListState.snapToItem and LazyListState.smoothScrollBy, as well as lower-level APIs for scroll control. These APIs provide a suspend interface to control scrolling that waits until the scroll is finished before returning. (Ie5642)\n• None Added a singeLine parameter into BasicTextField, TextField and OutlinedTextField. Set this parameter to true to make the text field a single horizontally scrollable line. (I57004, b/168187755)\n• None Gesture detector for tap, double-tap, long press, and press indication were added using the new suspending pointer input. A few utilities were added as well, making it easier for developers to write their own gesture detectors. (I00807)\n• None Modifier.focusable has need added in foundation. Use this to add focusable behavior to a component, with correct semantics and accessibility. (I41eb9, b/152525426, b/162865824)\n• None Previously deprecated APIs have been removed: Border was removed, use BorderStroke instead. Modifier.drawBorder was removed, use Modifier.border instead. Modifier.gravity was removed, use Modifier.align instead. Stack was removed, use Box instead (I32c2b, b/172470874)\n• Moved DrawModifier APIs from the androidx.compose.ui package to the androidx.compose.ui.draw package. Created DrawModifierDeprecated.kt file to include typealiases/helper methods to assist with the migration from the deprecated to the current APIs. (Id6044, b/173834241)\n• Renamed Modifier.drawLayer to Modifier.graphicsLayer Also updated related classes to GraphicsLayer as per API council feedback. (I0bd29, b/173834241)\n• was removed from SubcomposeLayout declaration. You can use it without specifying a type now. (Ib60c8)\n• MaterialTheme now sets the correct colors for selection handles and selection background. Non-Material apps can manually use AmbientTextSelectionColors to customize the colors used for selection. (I1e6f4, b/139320372, b/139320907)\n• The alignment parameter of Box was renamed to contentAlignment. (I2c957)\n• offsetPx modifiers were renamed to offset. They are now taking lambda parameters instead of State. (Ic3021, b/173594846)\n• Added WindowManager.isWindowFocused to check if the host window is in focus, and a WindowFocusObserver that provides an onWindowFocusChanged callback. (I53b2a, b/170932874)\n• Deprecated Ambients named with as their suffix, and replaced them with new properties prefixed with Ambient, following other Ambients and Compose API guidelines. (I33440)\n• Added Android Typeface wrapper. You can load an Android Typeface via function i.e. . Also renamed to (I52ab7)\n• Added lint check to check that Modifier factories use internally, instead of being marked as . (I3c4bc)\n• Added lint check to check that Modifier factory functions are defined as extensions on Modifier, so they can be fluently chained together. (I07981)\n• Time control in tests (TestAnimationClock and its usages) is now experimental (I6ef86, b/171378521)\n• Remove old ui-test module and its stubs (I3a7cb)\n• TextUnit.Inherit is renamed to TextUnit.Unspecified in consistent with other units. (Ifce19)\n• The Alignment interface was updated and made functional. (I46a07, b/172311734)\n• module has been merged into (Idac0f)\n• Deprecate place(Offset) and placeRelative(Offset). Use overloads with int offsets instead (I4c5e7)\n• was renamed to for . was renamed to . (Iadbcb, b/172449643)\n\n, , and are released. Version 1.0.0-alpha07 contains these commits.\n• Similarly to we now support fractions in inside the scope of (I797e2, b/166586426)\n• The foundation AmbientTextStyle, ProvideTextStyle, and AmbientContentColor have been deprecated. Instead use the new versions available in the Material library. For non-Material applications, you should instead create your own design system specific theming ambients that can be consumed in your own components. (I74acc, b/172067770)\n• foundation.Text has been deprecated and replaced with material.Text. For a basic, unopinionated text API that does not consume values from a theme, see androidx.compose.foundation.BasicText. (If64cb)\n• Added KeyboardOptions for use in TextFields (I9ca32)\n• Adds BasicText as a design-unopinionated API for text, parallel to BasicTextField. (I28268)\n• ExperimentalLazyDsl annotation was removed. LazyColumn/LazyRow can now be used without adding @OptIn (Idab7a, b/166584730)\n• BaseTextField has been deprecated. Use BasicTextField instead. (I896eb)\n• BasicTextField has been added as a replacement for both CoreTextField and BaseTextField (Id4cea)\n• The deprecated composables for sizing to intrinsic measurements were removed. (I18537, b/171811496)\n• relativePaddingFrom was renamed to paddingFrom. The paddingFromBaseline modifier was added, as convenience for specifying distances from layout bounds to text baselines. (I0440a, b/170633813)\n• The matchHeightConstraintsFirst parameter was added to the aspectRatio modifier, which can be used to specify the modifier to size to height constraints before trying the width correspondents. (Ie7c43, b/155290593)\n• Introduced ScaleFactor inline class to represent scale factors for the horizontal and vertical axes independent of one another in order to support non-uniform scaling use cases.\n• Added ContentScale.FillBounds to perform non-uniform scaling to stretch the src bounds to fully occupy the destination.\n• Marks CoreText as @InternalTextApi. Use BasicText instead. (I6aaeb)\n• CoreTextField has been marked as @InternalTextApi. Use BasicTextField instead (Ie2469)\n• ExperimentalSubcomposeLayoutApi annotation was removed. SubcomposeLayout can now be used without adding @OptIn (I708ad)\n• Updated Icon API to take in Color.Unspecified as a possible tint color which will draw the provided asset or painter without a ColorFilter. Previously attempts to ignore tinting with Color.Unspecified would tint with a transparent color ending up with nothing rendered at all. (I049e2, b/171624632)\n• MeasureResult was moved out of MeasureScope. (Ibf96d, b/171184002)\n• Several layout related symbols were moved from androidx.compose.ui to androidx.compose.layout.ui. (I0fa98, b/170475424)\n• FirstBaseline and LastBaseline were moved to androidx.compose.ui.layout package (Ied2e7)\n\n, , and are released. Version 1.0.0-alpha06 contains these commits.\n• androidx.compose.foundation.Icon has been moved to androidx.compose.material.Icon. You can also use the Image component / Modifier.paint() with a Painter if you do not want to use the Material library. (I9f622)\n• alignByBaseline was added to RowScope and alignWithSiblings was renamed to alignBy (I06503, b/170628732)\n• Deprecate VectorPainter in favor of rememberVectorPainter to better indicate that the composable API internally leverages 'remember' to persist data across compositions. (Ifda43)\n• Enable transitions in ComposeTestRule; remove option to enable the blinking cursor from ComposeTestRule. (If0de3)\n• Renamed Radius API to CornerRadius to better express how it is used throughout Compose. Updated documentation to indicate that negative corner radii are clamped to zero. (I130c7, b/168762961)\n• Add ability to specify inspector info in composed modifier (Idee08, b/163494569)\n• Breaking change: removed the return value from PointerInputFilter.onPointerEvent(...) given that the only value that should be able to be changed in pointer events is consumption data. Instead of returning data from PointerInputFilter.onPointerEvent(...), now you can just mutate the consumption data of the PointerEvents passed in. (I6acd0)\n\n, , and are released. Version 1.0.0-alpha05 contains these commits.\n• None Deprecates contentColor() and currentTextStyle() APIs, and replaces them with AmbientContentColor and AmbientTextStyle ambients respectively. You can access the current value by using on the ambient property, as with any other ambient. This was change was made for consistency and to avoid having multiple ways to accomplish the same thing. Additionally renames some ambient properties to better describe their purpose as follows:\n• As part of the standardization of sentinel values for inline classes, rename Color.Unset to Color.Unspecified for consistency with other inline classes (I97611, b/169797763)\n• TextOverflow.None is introduced. When overflow is None, Text won't handle overflow anymore, and it will report its actual size to LayoutNode. (I175c9, b/158830170)\n• Updated Size.Unspecified parameters to be Float.NaN instead of Float.POSITIVE_INFINITY. Updated Painter implementations to check against Size.Unspecified as well as non-finite Sizes. (I95a7e)\n• OnPositionedModifier is renamed to OnGloballyPositionedModifier and onPositioned() is renamed to onGloballyPositioned(). (I587e8, b/169083903)\n• Fix for the items and itemsIndexed methods to allow emptyList (I06647)\n• Removed . should be used in its place. (I6f04a)\n\n, , and are released. Version 1.0.0-alpha04 contains these commits.\n• Stack was renamed to Box. The previously existing foundation.Box will be deprecated in favor of the new Box in compose.foundation.layout. The behavior of the new Box is to stack children one on top of another when it has multiple children - this is different from the previous Box, which was behaving similar to a Column. (I94893, b/167680279)\n• Box decoration parameters have been deprecated. If you want to have decorations/padding on your box, use Modifiers instead (Modifier.background, Modifier.border, Modifier.padding) (Ibae92, b/167680279)\n• Add a new LazyListState class. This allows for observation and control of the scroll position of LazyRow and LazyColumn components. Instances can be created using rememberLazyListState() and passed into the state parameter of the component. Currently, the first visible item and offsets can be observed in this initial version. (Ic7cb7, b/159307669)\n• Lazy list position and scroll offset are now saved and restored across Activity recreation (Ie045f, b/166589058)\n• MutatorMutex utility added for keeping a single mutator of shared state over time and cancelling conflicting mutators by priority (I3f975)\n• Annotated rootAnimationClockFactory, transitionsEnabled, blinkingCursorEnabled and textInputServiceFactory with @VisibleForTesting, make them internal API and hide their kdoc (I554eb, b/168308412)\n• Removed inlineContent parameter from Text with String input. It won't be used because inlineContent must work with AnnotatedString. (Ief403)\n• The parameter was added to wrapContentSize modifiers, which enables measuring the layout element with infinite max constraints. (I77951, b/158559319)\n• We prevented static imports of contents of layout scopes (e.g. alignWithSiblings in RowScope). The explicit scope alternative should be used instead: . (I216be, b/166760797)\n• Updated many Graphics APIs\n• Updated scale and rotation transformation APIs to consume a single Offset parameter to represent the pivot coordinate instead of separate float parameters for the x/y coordinates in DrawScope and DrawTransform\n• Updated Radius documentation to say oval in addition to elliptical\n• Added documentation to indicate the public constructor for the inline Radius class is not to be called directly but instead Radius objects should be instantiated through their function constructors\n• Changed RoundRect.center to be a property instead of a function\n• Updated RoundRect constructor to consume Radius properties instead of individual parameters for x/y radius values\n• Removed Size APIs that assumed it was a Rectangle with origin at 0,0\n• Migrated various RoundRect extension functions to be properties instead\n• Performance optimizations for LazyColumnFor/LazyRowFor scrolling by not doing unnecessary recompositions during every scroll (I64f65, b/168293643, b/167972292, b/165028371)\n• Fixed crash in LazyColumnFor/LazyRowFor after scrolling and then changing items and implemented auto scrolling up when the previously visible item was removed so we don't display empty gaps in the end anymore (I220ab, b/161480164, b/167855468)\n• Nesting scrollable in the same direction containers like ScrollableContainer and LazyColumnFor is not allowed anymore. It was never supported and was breaking the fling and all the laziness of composing the items of LazyColumnFor (I6e101)\n• Updated many Graphics APIs\n• Updated DrawScope APIs with scoped transformation methods to indicate that the transformation is only applied within the callback and removed after the callback is invoked\n• Updated clipPath documentation to refer to Path instead of rounded rectangle\n• Fixed spacing in documentation for right parameter in clipPath\n• Renamed dx/dy parameters in inset method to horizontal and vertical\n• Added inset overload that provides the same inset value to all 4 bounds\n• Removed documentation on inset method indicating that inset would be applied to all 4 sides\n• ParagraphConstraints is removed. Width is directly passed to Paragraph now. (Ica712)\n\n, , and are released. Version 1.0.0-alpha03 contains these commits.\n• Usages of gravity were consistently renamed to align or alignment in layout APIs. (I2421a, b/164077038)\n• An alignment parameter was added to Stack, which allows specifying the default alignment for all the Stack children. (Ie80ca, b/164085265)\n• DpConstraints and APIs using it were deprecated. (I90cdb, b/167389835)\n• The parameters and of were renamed to and . Similarly for , , . (I0e5e1, b/167389544)\n• Added onNode and other global methods on ComposeTestRule as the current global ones are going to be deprecated. (Ieae36)\n• Fixed size and position calculations in GestureScope, which caused amongst others generation of invalid swipe gestures (Iaf358, b/166589947)\n• Moved and from to (Idef08, b/164060572)\n\n, , and are released. Version 1.0.0-alpha02 contains these commits.\n• None Added to see if anything is awaiting a frame from that clock; as a replacement for when running tests that need a ManualFrameClock; that gives easy access to the main UI dispatcher in your tests. > \"The clock has no more awaiters\"\n\n, , and are released. Version 1.0.0-alpha01 contains these commits.\n\n, , and are released. Version 0.1.0-dev17 contains these commits.\n• The spacedBy Arrangement was added for Row and Column, to enable positioning layout children with a fixed spacing. The aligned Arrangment was also added, to enable positioning layout children one next to the other and aligned in the Row/Column according to an Alignment. The previous Arrangement.Vertical#arrange and Arrangement.Horizontal#arrange methods were deprecated, and writing custom Arrangements will not be supported in the future. (I6733d, b/161985975)\n• Offset has become an inline class (Iaec70)\n• Removed onFocusChanged callbacks from TextField. Use Modifier.focusObserver instead. (I51089, b/161297615)\n• Modifier.drawBorder has been deprecated. Use Modifier.border instead. Border data class has been replaced by BorderStroke (I4257d, b/158160576)\n• VerticalScroller and HorizontalScroller have been removed. Use ScrollableColumn/Row instead. Modifier.drawBackground has been removed. Use Modifier.background (I73b0d, b/163019183)\n• Remove marked as deprecated fillMax* modifiers from LazyItemScope as they are making it harder to add such modifiers correctly for items which are not direct children of LazyColumnFor (Ifa78d)\n• Constraints is now an inline class (I88736)\n• Added the ability to size a layout to a fraction of the available space, using the fillMaxWidth, fillMaxHeight and fillMaxSize modifiers. (I945bb, b/161562591)\n• Added mergePolicy lambda to SemanticsPropertyKey. This can be used to define a custom policy for mergeAllDescendants semantics merging. The default policy is to use the parent value if already present, otherwise the child value. (Iaf6c4, b/161979921)\n• was renamed to , and the previous was renamed to . As a result, the method will not automatically mirror the position in right-to-left contexts anymore. If this is desired, use instead. (I873ac, b/162916675)\n• Removed deprecated FilledTextField component. Please use TextField instead to get the Material Design implementation of the Filled text field. (I5e889)\n• Added backgroundColor parameter to LinearProgressIndicator and removed internal padding from CircularProgressIndicator. Added new ProgressIndicatorConstants.DefaultProgressAnimationSpec which can be used as the default AnimationSpec when animating progress between values (If38b5, b/161809914, b/161804677)\n• The composable is now deprecated in favor of explicit calls to for clarity. This reduces the overall API surface and number of concepts for state management, and matches the pattern for class property delegation. (Ia5727)\n• Renamed RRect to RoundRect to better fit compose naming patterns Created similar function constructors to RRect and deprecated RRect function constructors (I5d325)\n• Removed onChildPositioned and OnChildPositionedModifier. Developers should use onPositioned and OnPositionedModifier on the child layout instead. (I4522e, b/162109766)\n• IntSize is now an inline class (I2bf42)\n• Hide FloatingToolbar After Tapping on the Text. (If4525)\n\n, , and are released. Version 0.1.0-dev16 contains these commits.\n• LazyItemScope was added for itemContent param of Lazy lists. It provides modifiers to fill the parent max size which solves the use case when the item should fill the viewport and the regular Modifier.fillMaxSize() doesn't work as the item is measured with infinity constraints. (Ibd3b2, b/162248854)\n• Added LazyColumnForIndexed/LazyRowForIndexed - versions of LazyColumnFor/LazyRowFor which provides both index and item in the itemCallback. It is useful when in addition to a current item you need to know a current index. (I65ff3)\n• Modifier.deternimateProgress has been renamed to Modifier.progressSemantics (I9c0b4)\n• LazyColumnItems was renamed to LazyColumnFor. LazyRowItems was renamed to LazyRowFor (I84f84)\n• Add some Marks/Annotations for best practice reason. (I66b20)\n• ZoomableState has been renamed to ZoomableController. Custom curve support has been added for smoothScale. and functionality has been added (If8b8f)\n• Material FilledTextField was renamed to TextField and foundational TextField was renamed to BaseTextField to make simplest desired API easy to discover and use (Ia6242, b/155482676)\n• Previously deprecated AdapterList has been removed. Use LazyColumnItems instead (I12b9b)\n• Modifier.drawBackground has been renamed to Modifier.background (I13677)\n• The old ConstraintLayout DSL was removed. ConstraintSet2 has been renamed to ConstraintSet. (If58d1, b/162450908)\n• Added Modifier.absoluteOffset() and Modifier.absoluteOffsetPx(). Unlike offset modifiers, absolute offset modifiers will not auto-mirror in right-to-left context (I3aa21)\n• and are now inline function significantly reducing the overhead of using them. (I75c10)\n• Address broad API fixes (I077bc)\n• Align Offset and IntOffset classes to have a consistent API surface\n• Rename IntOffset.Origin to IntOffset.Zero to be consistent with Offset API\n• Moved nativeCanvas method off of Canvas interface to support consumers to create their own Canvas instances\n• Created stub EmptyCanvas class to refactor DrawScope to be a non-null parameter instead of lateinit and ensure non-nullability of the field\n• Updated DrawCache implementation to no longer use lateinit params\n• Updated DrawScope to no longer use lazy delegation for fillPaint and strokePaint internal parameters\n• Updated Image composable to avoid Box usage for less overhead\n• Updated PathNode to have @Immutable annotations for each path instruction\n• Updated Vector subcomposition to remove redundant conditional checks for equality as compose already handles them\n• Updated Brush classes and function constructors with @Immutable and @Stable APIs\n• Updated DrawScope selectPaint method to conditionally overwrite stroke parameters on the paint if they have changed\n• Updated Size to add destructuring API, rename UnspecifiedSize to Unspecified and removed unused methods\n• None Added MonotonicFrameAnimationClock that enables you to use a MonotonicFrameClock as an AnimationClockObservable to bridge the gap between the new coroutines based clocks and APIs that still use the old callback based clocks. The MonotonicFrameClock equivalent of ManualAnimationClock is now ManualFrameClock. (I111c7, b/161247083)\n• None The APIs for right-to-left support has been updated. LayoutDirectionAmbient has been added, which can be used to read and change the layout direction. Modifier.rtl and Modifier.ltr have been removed. (I080b3)\n• None Modifier.plus has been deprecated, use Modifier.then instead. 'Then' has a stronger signal of ordering, while also prohibits to type , which breaks the chain and harder to read (Iedd58, b/161529964)\n• None RemeasurementModifier was added. It allows users to synchronously remeasure the layout. In general, you never need it as remeasure/relayout is happening automatically, but we use it inside LazyColumnItems during the scroll. (I5f331, b/160791058)\n• None isSystemInDarkTheme now always considers the system-wide dark theme setting, and ignores power saving status before Q, following latest guidance. (I0c10c)\n• None OnChildPositioned has been deprecated. Use OnPositioned on the child instead. (I87f95, b/162109766)\n\n, , and are released. Version 0.1.0-dev15 contains these commits.\n\nTo use the version of Compose, you will need to:\n• To use the version of Compose, you will need to update your dependencies according to the new code snippets shown above in Declaring dependencies.\n• Similarly to the new param in ScrollableColumn/ScrollableRow LazyColumnItems/LazyRowItems now also have contentPadding param which allows to add a padding for the content after it has been clipped, which is not possible via just a modifier param. It also allows to add a spacing only before first item/after last item. (Ibc24e)\n• VerticalScroller and HoriziontalScroller have been deprecated. Use ScrollableColumn and ScrollableRow for build-in experience with Column/Row behaviour and parameters, or Modifier.verticalScroll and Modifier.horizontalScroll on your own element. Similarly, ScrollerPosition has been deprecated in favor of ScrollState' (I400ce, b/157225838, b/149460415, b/154105299)\n• Modifier.draggable and Modifier.scrollable APIs were reworked. DragDirection was removed in favor of Orientation. State required for scrollable has beed simplified. ScrollableState has been renamed to ScrollableController (Iab63c, b/149460415)\n• Single-value semantics properties now use a calling style. For example, 'semantics { hidden = true }' is now written as: . (Ic1afd, b/145951226, b/145955412)\n• Corner sizes used by RoundedCornerShape and CutCornerShape can now be larger than 50% (Id2340, b/160400213)\n• Changed the default ContentScale parameter for the Image composable from Inside to Fit. This was done in order to get behavior to scale up the underlying Painter if the layout size is larger than the intrinsic size of the painter while maintaining the aspect ratio. This behavior better matches expectations for providing fixed sizes to the Image while not affecting the default behavior if only the intrinsic size is used to compute the size of the composable. (I40ae3, b/159838006)\n• Use AnimationSpec instead of AnimationBuilder in the top level APIs to clarify the concept of static animation specification -Improve the transition DSL by removing the lambda requirement for creating AnimationSpecs such as tween, spring. They instead take constructor params directly. -Improve the overall ease of use of AnimationSpec opening up constructors instead of relying on builders -Change the duration and delay for KeyFrames and Tween to Int. This eliminates unnecessary type casts and method overloading (for supporting both Long and Int). (Ica0b4)\n• androidx.ui.foundation.TextFieldValue and androidx.ui.input.EditorValue is deprecated. TextField, FilledTextField and CoreTextField composables that uses that type is also deprecated. Please use androidx.ui.input.TextFieldValue instead (I4066d, b/155211005)\n• Replaced usage of IntPx with Int. Replaced IntPxPosition with IntOffset. Replaced IntPxSize with IntSize. (Ib7b44)\n• In order to consolidate the number of classes used to represent sizing information, standardize on usage of the Size class instead of PxSize. This provides the benefits of an inline class to leverage a long to pack 2 float values to represent width and height represented as floats. (Ic0191)\n• In order to consolidate the number of classes used to represent positioning information, standardize on usage of the Offset class instead of PxPosition. This provides the benefits of an inline class to leverage a long to pack 2 float values to represent x and y offsets represented as floats. (I3ad98)\n• Toggleable component has been deprecated. Use Modifier.toggleable instead (I35220, b/157642842)\n• MutuallyExclusiveSetItem has been deprecated. Use Modifier.selectable instead. (I02b47, b/157642842)\n• TestTag is now deprecated. Use Modifier.testTag instead. (If5110, b/157173105)\n• Adds fontWeight parameter to Text, which was accidentally not added previously (I56937)\n• Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (I19d02)\n• VerticalScroller now provides Column out of the box. HorizontalScroller now provides Row out of the box. (Ieca5d, b/157020670)\n• Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (Iede0b)\n• Modifier.indication has been added to foundation package. Use it to show press/drag/other indication on your custom interactable elements (I8425f, b/155287131)\n• VerticalScroller and HorizontalScroller now support reversed scrolling is isReversed is set on ScrollerPosition (I953bd)\n• Consolidated CanvasScope implementations so there is now just DrawScope and ContentDrawScope Renamed CanvasScope to DrawScope. Updated DrawScope to implement Density interface and provide LayoutDirection Deleted DrawScope subclass in ContentDrawScope Painter and PainterModifier have been updated to no longer maintain an RTL property themselves as DrawScope provides this already without manually providing it (I1798e)\n• Removed deprecated DrawBackground API in favor of drawBackground extension APIs on Modifier. Refactored color, brush and paint drawBackground implementations to reduce code paths as well as remove requirement for Modifier to be created as part of composition. (I0343a)\n• Updated higher level compose APIs that expose a Canvas to expose CanvasScope instead. This removes the need for consumers to maintain their own Paint objects. For consumers that still require access to a Canvas they can use the drawCanvas extension method which provides a callback to issue drawing commands with the underlying Canvas. (I80afd)\n• HorizontalScroller and VerticalScroller not restores their scroll position using saved instance state. (Ia0fae, b/155075048)\n• FocusManagerAmbient is removed. Use FocusModifier.requestFocus to obtain focus. (Ic4826)\n• Table layout was removed temporarily until we will make it available again with a refreshed API. (Id88a7)\n• None Created CanvasScope API that wraps a Canvas object to expose a stateless, declarative drawing API surface. Transformations are contained within their own receiver scope and sizing information is also scoped to corresponding inset bounds. It does not require a consumer to maintain its own Paint state object for configuring drawing operations. Added CanvasScopeSample as well as updated the demo app to include a declarative graphics demo (Ifd86d)\n• None ColoredRect has been removed. User Box with drawBackground modifier instead (I983c7, b/152753731)\n• None Now it is possible to hide/show software keyboard by using SoftwareKeyboardController which is delivered by onTextInputStarted callback (I8dc44, b/151860051)\n• None TextFieldValue used with TextField can now be survive activity recreation when used like this: (I5c3ce, b/155075724)\n• None Adds commonly used parameters to Text(). If you are currently creating a local text style to pass a small number of these parameters, such as , you can now just provide the parameters directly: (I82768)\n• None Replaced CoreTextField/TextField focusIdentifier parameter with FocusNode in order to integrate with focus subsystem. (I7ea48)\n• None TextField update - in horizontal dimension it will occupy all available space granted to it (Ib08df, b/154638552)\n• None Added InteractionState and Interaction, making it easier to build components that react to UI state changes such as press, and drag (Icfe25, b/152525426)\n• None Replaced all nullable Color uses in API with non-nullable and use Color.Unset instead of null (Iabaa7)\n• None TextField API update - merged onFocus and onBlur callbacks into a single onFocusChange(Boolean) callback with parameter (I66cd3)\n• None Renamed ScaleFit to ContentScale Moved ContentScale from ui-graphics to ui-core module to live in the same module as the Alignment API. Renamed FillMaxDimension to Crop Renamed FillMinDimension to Fit Renamed Fit to Inside to better match ImageView.ScaleType equivalents Added documentation indicating that the combination of Crop and Alignment.Center achieves the same result as ImageView.ScaleType.CENTER_CROP and Fit used with Alignment.Center achieves the same result as ImageView.ScaleType.FIT_CENTER Inside used with Alignment.Center achieves the same result as ImageView.ScaleType.CENTER_INSIDE (I45f09, b/152842521)\n• None Removes ProvideContentColor, instead just use ContentColorAmbient directly with (Iee942)\n• None Adds color parameter to text, allowing overriding the color of the text style without needing to manually merge with the style provided in a theme. (I41a66)\n• \n• DrawScope has same interface as former CanvasScope\n• None ColoredRect has been deprecated. Use instead. (I499fa, b/152753731)\n• None Shape theming system is updated according to the Material design specification. Now you can provide small, medium and large shapes to be used by most of the components (Ifb4d1)\n• None Draggable has been moved to modifier (Id9b16, b/151959544)\n• None Ripple is now a Modifier. While Clickable is not yet converted the recommended usage is (Ie5200, b/151331852, b/150060763)\n• None Added VectorPainter API to replace existing subcomposition API for vector graphics. Result of subcomposition is a VectorPainter object instead of a DrawModifier. Deprecated previous DrawVector composables in favor of VectorPainter. Renamed API to Created Vector composable that behaves like the Image composable except with a VectorAsset instead of an ImageAsset (I9af9a, b/149030271)\n• None Created Image composable to handle sizing/layout in addition to drawing a given ImageAsset to the screen. This composable also supports drawing any arbitrary Painter instance respecting its intrinsic size as well as supporting a given fixed size or minimum size (Ibcc8f)\n• None Button, FloatingActionButton and Clickable now have a separate param. Some of the params on Button were renamed or reordered. (I54b5a)\n• None Renamed Image to ImageAsset to better differentiate the difference between the Image data and the upcoming Image composable used to participate in layout and draw content. Created extension method on android.graphics.Bitmap, , to create an instance of an ImageAsset useful for combining traditional Android application development with the compose framework. (Id5bbd)\n• None DrawImage composable was removed. Use ImagePainter to draw image on existing layout, or SimpleImage to introduce Image that takes space (I595e1, b/149827027)\n• None Added Icon, IconButton and IconToggleButton, removing AppBarIcon. You can directly replace existing usages of AppBarIcon with IconButton, and they will now have the correct touch target. See the samples for usage information, and see Icons for the provided Material Icons you can use directly with these components. (I96849)\n• None DrawShape composable was removed. Use DrawBackground modifier instead. (I7ceb2)\n• None Added AdapterList, a scrolling list component that only composes and lays out the visible items. Currently known issues include that it is vertical-only and does not fully handle all cases of changes to its children. (Ib351b)\n• None Scrollable component has been added, which allows creation of custom Scrollers/Lists (I5fd37)\n• None Renamed background to DrawBackground and make it to be memorized by default (Ia0bd3)\n• None Added Canvas component. This composable takes up some size (provided by user) and allows you to draw using CanvasScope (I0d622)\n• None Modifier.tag was renamed to Modifier.layoutId, to avoid confusion with Modifier.testTag. (I995f0)\n• None The percent parameter when creating ConstraintLayout guidelines has been renamed to fraction. (Ida2db)\n• None A new DSL for ConstraintLayout has been added. Please see the samples for more details. (Icaa9a)\n• None Added the @ExperimentalLayout annotation. ConstraintLayout, FlowRow and FlowColumn are now tagged with it to mark that their APIs are going to change. (I412a8)\n• None Removed deprecated LayoutTag(), please use Modifier.tag() instead. Removed deprecated Modifier.matchParent(), please use Modifier.matchParentSize() instead. (If8044)\n• None Added the offsetPx layout modifier, which can be used to define (dynamic) offsets in px. (I5af57)\n• None AlignmentLineOffset composable is deprecated, please use relativePaddingFrom() modifier instead. CenterAlignmentLine composable is removed. (I60107)\n• None Added defaultMinSizeConstraints layout modifier, which sets size constraints to the wrapped layout only when the incoming corresponding constraints are unspecified (0 for min constraints and infinity for max constraints). (I311ea, b/150460257)\n• None Container has been removed. Use Box instead (Ibbc2b, b/151407926)\n• None Fixed a bug in the width and height modifiers that was causing the wrapped layout to be measured with no opposite axis constraints. (I210b8, b/154797971)\n• None Added verticalGravity and horizontalGravity parameters to Row and Column, respectively. (I7dc5a)\n• None Updated wrapContentWidth and wrapContentHeight to expect vertical or horizontal Alignment rather than any Alignment. The gravity modifier was updated to accept vertical or horizontal Alignment. Row, Column and Stack were updated to support custom continuous Alignments. (Ib0728)\n• None Renamed EdgeInsets to InnerPadding. Renamed innerPadding parameter of Material Buttons to paddding. (I66165)\n• None alignToSiblings now accepts a Measured instead of Placeable. (I5788d)\n• None Added modifiers for sizing to intrinsic measurements and deprecated the components serving this purpose. (I8295d)\n• None Added support for customizing dimensions of children of ConstraintLayout (Idb1a5)\n• None RowScope and ColumnScope members are now accessible outside Row and Column. (I3a641)\n• None Container has been deprecated. Use Box instead. (I675ce, b/151407926)\n• None Updated LayoutAlign to not fill the available space anymore (I2b14f)\n• None Removed AspectRatio composable in favor of modifier. Deleted obsolete FlexColumn, FlexRow composables and Spacing modifier (Iec8a7)\n• None Removed the LayoutInflexible modifier for Row and Column (I0d820)\n• FocusModifier is deprecated in favor of Modifier.focus, Modifier.focusRequester, Modifier.focusObserver. FocusState and FocusDetailedState are deprecated in favor of FocusState2 (I46919, b/160822875, b/160922136)\n• Several testing APIs were renamed to be more intuitive. All findXYZ APIs were renamed to onNodeXYZ. All doXYZ APIs were renamed to performXYZ. (I7f164)\n• Removes previously deprecated Modifier.ripple. Clickable now uses ripple as the default indication (if you have a MaterialTheme {} set in your application) so in most cases you can just use clickable and get ripple indication for free. If you need to customize the color / size / bounded parameter for the ripple, you can manually create a RippleIndication and pass it to clickable as the indication parameter. (I663b2, b/155375067)\n• Version 1 of scroll orientation locking is implemented across Compose. (I1ce7a, b/150289741)\n• Popups, Dialogs and Menus are now inheriting the contextual MaterialTheme (Ia3665, b/156527485)\n• Removed layout direction parameter from the measure block of the Layout() function. Layout direction is however available inside the callback through the measure scope object (Ic7d9d)\n• Add AbsoluteArrangement - allows for arrangement of the children inside the Row without automatic mirroring in RTL (I3a1df)\n• @Untracked annotation has been deprecated. Replace with @ComposableContract(tracked=false) (Id211e)\n• Prior to this change, the compose compiler plugin would non-trivially intercept calls to constructors inside of a @Composable function if there was an (I5205a, b/158123804)\n• Add composable which allows to create or get already created ViewModel similarly to how it works in Activity or Fragment (I5fdd1)\n• None Refactored Radius class to be an inline class. Removed companion creation methods in favor of function constructor with default parameter to have the radius along the y-axis match that of the mandatory x-axis radius parameter. Updated DrawScope.drawRoundRect to consume a single Radius parameter instead of 2 separate float values for the radius along the x and y axis (I46d1b)\n• None Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters. Deleted Px class in its entirety (I3ff33)\n• None Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (I086f4)\n• None Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (Id3434)\n• None Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (I97a5a)\n• None Partial gestures no longer require passing around of a GestureToken (Id7ae5)\n• None Replaced usage of Px class in various compose classes as part of the large refactoring effort to only rely on Dp and primitive types for pixel parameters (I57bff)\n• None Modifier.semantics has been undeprecated to allow usages for high level components. (I4cfdc)\n• None Updated Alignment API and added support for absolute alignment (which does not auto-mirror in Rtl context) (I38cd3)\n• None Layout and LayoutModifier children can be measured with a different layout direction. (Ibd731)\n• None Introduce additional optional rect parameter to ImagePainter to support drawing a subsection of underlying ImageAsset (I0ea9e)\n• None We changed how we measure the first layout you put inside activity.setContent { } block. Previously it was forced to fill the whole activity screen, and now it behaves as if you put your layout inside a Stack: it can be smaller than a screen and will be positioned in the top left screen. If you want the old behaviour you can apply Modifier.fillMaxSize() for your layout. (Ie88a7, b/153453714)\n• None ui-text-compose module is renamed as ui-text. ui-text now contains CoreText and CoreTextField composables (Ib7d47)\n• None Moved ui-framework/CoreText, CoreTextField composables under ui-text-compose. You might want to include ui-text-compose in your project. (I32042)\n• None and are now global functions instead of methods on ComposeTestRule. (Icbe8f)\n• None [Mutable]State property delegate operators moved to extensions to support Kotlin 1.4 property delegate optimizations. Callers must add imports to continue using or . (I5312c)\n• None DrawLayerModifier and drawLayer() now default clipToBounds and clipToOutline to false. (I0eb8b, b/152810850)\n• None Deprecated Center composable. It should be replaced either with the LayoutSize.Fill + LayoutAlign.Center modifier, or with one of the Box or Stack composables with suitable modifiers applied (Idf5e0)\n• None DrawVector has been changed from a regular composable function to returning a Modifier drawVector() that will draw the vector as a background to a layout. (I7b8e0)\n• None Replace composable function Clip with modifier drawClip(). DrawClipToBounds is a convenient modifier to use when you only need to clip to the layer bounds with a rectangle shape. (If28eb)\n• None Replaced DrawShadow composable function with drawShadow() modifier. Shadows are now drawn as part of LayerModifier. (I0317a)\n• None androidx.compose.ViewComposer has been moved to androidx.ui.node.UiComposer androidx.compose.Emittable has been removed. It was redundant with ComponentNode. androidx.compose.ViewAdapters has been removed. They are no longer a supported use case. Compose.composeInto has been deprecated. Use or instead. Compose.disposeComposition has been deprecated. Use the method on the returned by instead. androidx.compose.Compose.subcomposeInto has moved to androidx.ui.core.subcomposeInto ComponentNode#emitInsertAt has been renamed to ComponentNode#insertAt ComponentNode#emitRemoveAt has been renamed to ComponentNode#removeAt ComponentNode#emitMode has been renamed to ComponentNode#move (Idef00)\n• None Deprecated Wrap composable. It can be replaced either with the LayoutAlign modifier or with the Stack composable (Ib237f)\n• None Made the layout direction be propagated from parent layout node to children. Added layout direction modifier. (I3d955)\n• None Rename Painter.toModifier to Painter.asModifier as the newly created Modifier has a reference to the original Painter that can be shared across multiple Modifier instances (I7195b)\n• None Deprecated: b/149827027) Draw composable is a common source of bugs as it's ( I78392\n• None Density and DensityScope were merged into one interface. Instead of ambientDensity() you can now use DensityAmbient.current. Instead of withDensity(density) just with(density) (I11cb1)\n• None Removed ValueHolder class. Restructured AnimatedValue, AnimatedFloat classes to make the animation value field abstract so that subclasses can watch the value update.\n• Added a new set of light-weight @Composable API for animating between values.\n• None Breaking changes to the ambients API. See log and documentation for details (I4c7ee, b/143769776)\n• None Alignment line Int positions returned from Placeable#get(AlignmentLine) are now non-null. If the queried alignment line is missing, AlignmentLine.Unspecified will be returned. (I896c5, b/158134875)\n• None WithConstraints trailing lambda API has been changed. Now instead of two params it has a receiver scope which in addition to constraints and layoutDirection provides minWidth, maxWidth, minHeight and maxHeight properties in Dp (I91b9a, b/149979702)\n• None Intrinsic measurements functions in Layout and LayoutModifier2 have an IntrinsicMeasureScope receiver now which provides intrinsics query API with implicitly propagated layout direction. (Id9945)\n• None LayoutDirectionAmbient is deprecated. To read the layout direction defined by the locale, use localeLayoutDirection on ConfigurationAmbient (I851b1)\n• None ParentData composable is deprecated. You should either create a modifier which implements ParentDataModifier interface, or use LayoutTag modifier if you simply need to tag layout children to recognize them inside the measure block. (I51368, b/150953183)\n• None Add OnPositionedModifier and OnChildPositionedModifier to replace OnPositioned and OnChildPositioned composable functions. (I2ec8f)\n• None Disallow negative padding in LayoutPadding. LayoutOffset should be used instead for negative position offsets. (Ifb5b1)\n• None Updated the flag to be , which will change the code generation strategy for the compose plugin. At a high level, this causes @Composable functions to be generated with an additional synthetic parameter, which is passed through to subsequent @Composable calls in order for the runtime to properly manage execution. This is a significant binary breaking change, however, should preserve source-level compatibility in all sanctioned usage of compose. (I7971c)\n• None Changed LayoutCoordinates to make providedAlignmentLines a Set instead of a Map and have LayoutCoordinates implement the get() operator instead for retrieving a value. This makes it easier for modifiers to modify one or more value of the set without creating a new collection for each modifier. (I0245a)\n• None LayoutCoordinates no longer has a position property. The position property does not make sense when considering LayoutModifiers, rotation, or scaling. Instead, developers should use parentCoordinates and childToLocal() to calculate the transform from one LayoutCoordinate to another. LayoutCoordinates uses IntPxSize for the size property instead of PxSize. Layouts use integer pixel sizes for layouts, so all layout sizes should use integers and not floating point values. (I9367b)\n• None Improvements to the API surface of Constraints (I0fd15)\n• None TestTag and Semantics have been deleted. Use Modifier.testTag and Modifier.semantics instead (I15ff0, b/158841414)\n• None Changed the package name for Locale and LocaleList from androidx.ui.text to androidx.ui.intl (I8132c)\n• None New LifecycleOwnerAmbient is now available. Now an Activity you are using with Compose UI should extend androidx.activity.ComponentActivity (or AppCompatActivity). setContent on android.app.Activity is now deprecated (Idb25a, b/153141084)\n• None ui-android-text package name (androidx.text) replaced with androidx.ui.text.platform in order to align with androidx policy. (I42711)"
    },
    {
        "link": "https://foso.github.io/Jetpack-Compose-Playground/foundation/lazyverticalgrid",
        "document": "Jetpack Compose provides an API for displaying grid or grid elements.\n\nTo arrange list items in a grid, provides a cells parameter that controls how cells are formed into columns. The following example displays the items in a grid, using to set the width of each column at least 128.dp:\n\nApart from there are other types of cells that provide the number of columns per row. As follows"
    },
    {
        "link": "https://composables.com/foundation/lazyverticalgrid",
        "document": "A lazy vertical grid layout. It composes only visible rows of the grid."
    },
    {
        "link": "https://jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose-170.html",
        "document": "Here are the highlights for this feature release:\n• None Material3 and now in common code\n\nSee the full list of changes for this release on GitHub.\n\nNeither Jetpack Compose 1.7.0 nor Lifecycle 2.8.0, which are both used by Compose Multiplatform 1.7.0, supports AGP 7. So, when you update to Compose Multiplatform 1.7.3, you may have to upgrade your AGP dependency, as well. Newly implemented previews for Android composables in Android Studio require one of the latest AGP versions. Java resources API is deprecated in favor of the multiplatform resource library In this release, we explicitly deprecate the Java resources APIs available in the package: the , , , and functions, as well as the class and functions relying on it. Consider transitioning to the multiplatform resource library. While you can use Java resources with Compose Multiplatform, they don't benefit from extended features provided by the framework: generated accessors, multimodule support, localization and so on. If you still have to access Java resources, you can copy the implementation suggested in the pull request to make sure your code works even after you upgrade to Compose Multiplatform 1.7.3 and switch to multiplatform resources where possible. New default behavior for processing touch in iOS native elements Before 1.7.3, Compose Multiplatform could not respond to touch events that landed in interop UI views, so interop views handled these touch sequences entirely. Compose Multiplatform 1.7.3 implements more sophisticated logic for handling interop touch sequences. By default, there is now a delay after the initial touch, which helps the parent composable understand whether the touch sequence was meant to interact with the native view and react accordingly. For more information, see the explanation in the iOS section of this page or read the documentation for this feature. Developers often failed to notice the printed warning about the high refresh rate displays, and users were deprived of smooth animations on their 120-Hz-enabled devices. We are now strictly enforcing this check. Apps built with Compose Multiplatform will now crash if the property in the file is absent or set to . You can disable this behavior by setting the property to . The experimental and related APIs have been deprecated in favor of the new . The interface was moved into the package. If you are using the deprecated APIs with Compose Multiplatform 1.7.0, you are going to encounter a deprecation error. With 1.8.0 the modifier is going to be removed altogether.\n\nCompose Multiplatform now offers an API for seamless transitions between composables that share consistent elements. These transitions are often useful in navigation, helping users follow the trajectory of changes in the UI. For a deep dive into the API, see the Jetpack Compose documentation. Compose Multiplatform has adopted Jetpack Compose’s type-safe approach to passing objects along a navigation route. New APIs in Navigation 2.8.0 allow Compose to provide compile-time safety for your navigation graph. These APIs achieve the same result as the Safe Args plugin for XML-based navigation. For details, see Google’s docs about type safety in Navigation Compose. All multiplatform resources are now packed into Android assets. This allows Android Studio to generate previews for Compose Multiplatform composables in Android source sets. Android Studio previews are available only for composables in Android source sets. They also require one of the latest versions of AGP: 8.5.2, 8.6.0-rc01, or 8.7.0-alpha04. This also offers direct access to multiplatform resources from WebViews and media player components on Android, since resources can be reached by a simple path, for example, . Here's an example of an Android composable that displays a resource HTML page with a link to a resource image: The example works with this simple HTML file: Both resource files in this example are located in the source set: With the new setting in the configuration DSL, you can associate a custom directory with a specific source set. This makes it possible, for example, to use downloaded files as resources. Compose Multiplatform brings Android's font cache functionality to other platforms, eliminating excessive byte reading of resources. The resource library now supports using test resources in your projects, meaning you can:\n• None Use generated accessors that are available only in the corresponding source sets.\n• None Pack test resources into the app only for test runs. Resources of each type are mapped with their file names. For example, you can use the property to get the map of all resources and access a necessary resource by passing its string ID: Functions for converting byte arrays into ImageBitmap or ImageVector There are new functions for converting a into an image resource:\n• None turns a JPEG, PNG, BMP, or WEBP file into an object.\n• None turns an XML vector file into an object.\n• None turns an SVG file into a object. This function is not available on Android. See the documentation for details. Material3 adaptive modules are now available in common code with Compose Multiplatform. To use them, explicitly add the corresponding dependencies to the common source set in the module's file: Material3 adaptive navigation suite, necessary for building adaptive navigation with Compose, is available in common code with Compose Multiplatform. To use it, explicitly add the dependency to the common source set in the module's file: To use classes, explicitly add the dependency to the common source set in the module's file: The function is not available in common code yet. However, you can import and call it in platform-specific code, for example: The library is available in common code in addition to Compose Multiplatform Navigation. To use it, add the following explicit dependencies to the common source set in the module's file: The version of Skia used by Compose Multiplatform, via Skiko, has been updated to Milestone 126. The previous version of Skia used was Milestone 116. You can see the changes made between these versions in the release notes. The new drawing layer added in Jetpack Compose 1.7.0 is now available in Compose Multiplatform. Unlike , the new class allows you to render Composable content anywhere. It is useful in cases where animated content is expected to be rendered in different scenes. See the reference documentation for a more detailed description and examples. The class has been moved from the Compose UI package to the Lifecycle package. This change allows you to access the class and call its Compose-based helper APIs independently of a Compose UI. Keep in mind, however, that without the Compose UI bindings, a instance will have no platform integration and thus no platform-specific events to listen to.\n\nThis release improves touch handling for iOS interop views. Compose Multiplatform now tries to detect whether a touch is meant for an interop view or should be processed by Compose. This makes it possible to process touch events that happen in a UIKit or a SwiftUI area inside your Compose Multiplatform app. By default, Compose Multiplatform will delay transmitting touch events to interop views by 150 ms:\n• None If within this time frame there is movement over a distance threshold, the parent composable will intercept the touch sequence, and it will not be forwarded to the interop view.\n• None If there is no noticeable movement, Compose will not process the rest of the touch sequence, which will instead be processed solely by the interop view. This behavior aligns with how the native works. It helps prevent situations where a touch sequence that starts in the interop view is intercepted without a chance for Compose Multiplatform to process it. This could lead to a frustrating user experience. For example, imagine a large interop video player used in a scrollable context such as a lazy list. It is tricky to scroll the list when most of the screen is taken up by a video that intercepts all touches without Compose Multiplatform being aware of them. With Kotlin 2.0.20, the Kotlin/Native team made a lot of progress in making Compose apps on iOS perform faster and smoother. Compose Multiplatform 1.7.3 release makes use of these optimizations, as well as brings performance improvements from Jetpack Compose 1.7.0. When comparing Compose Multiplatform 1.6.11 paired with Kotlin 2.0.0 and Compose Multiplatform 1.7.3 paired with Kotlin 2.0.20, we see better results across the board:\n• None The LazyGrid benchmark simulates scrolling, which is closest to real-life use cases, and performs ~9% faster on average. It also shows significantly reduced number of missed frames, which usually make the users perceive the UI as less responsive. Try it out for yourself: apps made with Compose Multiplatform for iOS should feel much smoother.\n• None The VisualEffects benchmark renders a lot of randomly placed components and works 3.6 times faster: average CPU time per 1000 frames was reduced from 8.8 seconds to 2.4.\n• None The AnimatedVisibility composable animates showing and hiding an image and demonstrates ~6% faster rendering. On top of that, Kotlin 2.0.20 introduces experimental support for concurrent marking in the garbage collector. Enabling concurrent marking shortens garbage collector pauses and leads to even bigger improvements for all benchmarks. You can check out the code for these Compose-specific benchmarks in the Compose Multiplatform repository:\n\nThe drag-and-drop mechanism, which enables users to drag content into or out of your Compose application, has been implemented in Compose Multiplatform for desktop. To specify potential sources and destinations for dragging and dropping, use the and modifiers. While these modifiers are available in common code, they currently only work in desktop and Android source sets. Stay tuned for future releases. For common use cases, see the dedicated article in the Jetpack Compose documentation. Jetpack Compose has made the component stable and renamed it . In this release, Compose Multiplatform has adopted the change for desktop targets, and there are plans to cover iOS as well in the stable 1.7.0 version.\n• None Allows you to manage state more reliably.\n• None Offers the new API for programmatic changes to text field content.\n• None Includes several new APIs for visual transformations and styling.\n• None Provides access to with the ability to return to previous states of the field. By specifying the new parameter in the constructor, you can hint to the backend rendering implementation to disable vertical synchronization. This can reduce visual latency between inputs and changes in the UI but can also lead to screen tearing. The default behavior stays the same: The attempts to synchronize drawable presentations with VSync."
    },
    {
        "link": "https://stackoverflow.com/questions/67919707/jetpack-compose-how-to-put-a-lazyverticalgrid-inside-a-scrollable-column",
        "document": "When trying to put a inside a scrollable I get the following error:\n\njava.lang.IllegalStateException: Nesting scrollable in the same direction layouts like LazyColumn and Column(Modifier.verticalScroll()) is not allowed. If you want to add a header before the list of items please take a look on LazyColumn component which has a DSL api which allows to first add a header via item() function and then the list of items via items().\n\nI am not making a traditional list, I just have alot of elements that are too big to fit on the screen. Therefore I want the column to scroll so I can see all the elements. Here is my code:\n\nThe composable contains the which causes the error:\n\nI do not want the grid to scroll, I just want to display a grid within a scrollable column."
    },
    {
        "link": "https://medium.com/bazaar-tech/nested-lazyverticalgrid-with-jetpack-compose-f50d1a8f7e6e",
        "document": "In most of the cases you have nested list like LazyColumn or LazyVerticalGrid inside another list, but the problem occurs when you scroll the inner list its only scroll in that position which you placed not the whole scrollable screen behaviour.\n\nWhen you placed a LazyVerticalGrid or simple LazyColumn list inside another Column which has scroll state or Lazy Column like ,\n\nthen the app will crash due to this error.\n\nNesting scrollable in the same direction layouts like LazyColumn and Column(Modifier.verticalScroll()) is not allowed. If you want to add a header before the list of items please take a look on LazyColumn component which has a DSL api which allows to first add a header via item() function and then the list of items via items()\n\nTo the best of my knowledge, there is still no way to achieve our goal.\n\nFlowRow which is a component of the Accompanist Utility Library comes to simulate this behaviour.\n\nChildren in FlowRow adjust with screen width size by automatically break down into new line if the space exceeds the screen width, and it is easily merged with other composable scrollable Column and LazyColumn.\n\nFirst we add the dependency in app-level build.gradle file\n\nNow move to the HomeScreen Scrollable Column and add the FlowRow Widget in there like that\n\nAs you see the above code, we have to get item size by dividing the current screen width size by 2. And you see we use the SizeMode.Expand for the mainAxisSize to fill all available space and set FlowMainAxisAlignment.SpaceEvenly for the mainAxisAlignment.\n\nThen we iterate the list, currently we use for loop, you can also placed your list by\n\nThat’s it. The final Result look like this\n\nShow your love by sharing this article with your fellow developers.\n\nFollow me for more content about Android and other technologies. If you have any questions, ping me ammarsohail321@gmail.com and I’ll do my best to respond."
    },
    {
        "link": "https://developer.android.com/develop/ui/compose/lists",
        "document": "Many apps need to display collections of items. This document explains how you can efficiently do this in Jetpack Compose.\n\nIf you know that your use case does not require any scrolling, you may wish to use a simple or (depending on the direction), and emit each item's content by iterating over a list in the following way:\n\nWe can make the scrollable by using the modifier.\n\nIf you need to display a large number of items (or a list of an unknown length), using a layout such as can cause performance issues, since all the items will be composed and laid out whether or not they are visible.\n\nCompose provides a set of components which only compose and lay out items which are visible in the component’s viewport. These components include and .\n\nAs the name suggests, the difference between and is the orientation in which they lay out their items and scroll. produces a vertically scrolling list, and produces a horizontally scrolling list.\n\nThe Lazy components are different to most layouts in Compose. Instead of accepting a content block parameter, allowing apps to directly emit composables, the Lazy components provide a block. This block offers a DSL which allows apps to describe the item contents. The Lazy component is then responsible for adding the each item’s content as required by the layout and scroll position.\n\nThe DSL of provides a number of functions for describing items in the layout. At the most basic, adds a single item, and adds multiple items:\n\nThere are also a number of extension functions which allow you to add collections of items, such as a . These extensions allow us to easily migrate our example from above:\n\nThere is also a variant of the extension function called , which provides the index. Please see the reference for more details.\n\nThe and composables provide support for displaying items in a grid. A Lazy vertical grid will display its items in a vertically scrollable container, spanned across multiple columns, while the Lazy horizontal grids will have the same behaviour on the horizontal axis.\n\nGrids have the same powerful API capabilities as lists and they also use a very similar DSL - for describing the content.\n\nThe parameter in and parameter in control how cells are formed into columns or rows. The following example displays items in a grid, using to set each column to be at least wide:\n\nlets you specify a width for items, and then the grid will fit as many columns as possible. Any remaining width is distributed equally among the columns, after the number of columns is calculated. This adaptive way of sizing is especially useful for displaying sets of items across different screen sizes.\n\nIf you know the exact number of columns to be used, you can instead provide an instance of containing the number of required columns.\n\nIf your design requires only certain items to have non-standard dimensions, you can use the grid support for providing custom column spans for items. Specify the column span with the parameter of the and methods. , one of the span scope’s values, is particularly useful when you're using adaptive sizing, because the number of columns is not fixed. This example shows how to provide a full row span:\n\nand are composables that allow you to create a lazy-loaded, staggered grid of items. A lazy vertical staggered grid displays its items in a vertically scrollable container that spans across multiple columns and allows individual items to be different heights. Lazy horizontal grids have the same behavior on the horizontal axis with items of different widths.\n\nThe following snippet is a basic example of using with a width per item:\n\nTo set a fixed number of columns, you can use instead of . This divides the available width by the number of columns (or rows for a horizontal grid), and has each item take up that width (or height for a horizontal grid):\n\nSometimes you'll need to add padding around the edges of the content. The lazy components allow you to pass some to the parameter to support this:\n\nIn this example, we add of padding to the horizontal edges (left and right), and then to the top and bottom of the content.\n\nPlease note that this padding is applied to the content, not to the itself. In the example above, the first item will add padding to it’s top, the last item will add to its bottom, and all items will have padding on the left and the right.\n\nAs another example, you can pass 's into 's . See the edge-to-edge guide.\n\nTo add spacing in-between items, you can use . The example below adds of space in-between each item:\n\nGrids, however, accept both vertical and horizontal arrangements:\n\nBy default, each item's state is keyed against the position of the item in the list or grid. However, this can cause issues if the data set changes, since items which change position effectively lose any remembered state. If you imagine the scenario of within a , if the row changes item position, the user would then lose their scroll position within the row.\n\nTo combat this, you can provide a stable and unique key for each item, providing a block to the parameter. Providing a stable key enables item state to be consistent across data-set changes:\n\nBy providing keys, you help Compose to handle reorderings correctly. For example, if your item contains remembered state, setting keys would allow Compose to move this state together with the item, when its position changes.\n\nHowever, there is one limitation on what types you can use as item keys. The key's type must be supported by , Android’s mechanism for keeping the states when the Activity is recreated. supports types like primitives, enums or Parcelables.\n\nThe key must be supported by so that the inside the item composable can be restored when the Activity is recreated, or even when you scroll away from this item and scroll back.\n\nIf you’ve used the RecyclerView widget, you’ll know that it animates item changes automatically. Lazy layouts provide the same functionality for item reorderings. The API is simple - you just need to set the modifier to the item content:\n\nYou can even provide custom animation specification, if you need to:\n\nMake sure you provide keys for your items so it is possible to find the new position for the moved element.\n\nWith Compose, you can animate changes to items in lazy lists. When used together, the following snippets implement animations when adding, removing, and reordering lazy list items.\n\nThis snippet displays a list of strings with animated transitions when items are added, removed, or reordered:\n• displays a list of strings in a with animated transitions when items are modified.\n• The function assigns a unique key to each item in the list. Compose uses the keys to track the items and identify changes in their positions.\n• defines the layout of each list item. It takes a parameter, which defines the main content of the item.\n• The modifier applies default animations to item additions, removals, and moves.\n\nThe following snippet presents a screen that incorporates controls for adding and removing items, as well as sorting a predefined list:\n• presents a screen that incorporates controls for adding, removing, and sorting items.\n• and are lambda expressions that are passed to to add and remove items from the list.\n• , , and are lambda expressions that are passed to to change the order of the items in the list.\n• displays the \"Add\" and \"Remove\" buttons. It enables/disables the buttons and handles button clicks.\n• displays the buttons for reordering the list. It receives the lambda functions for resetting the order and sorting the list by length or alphabetically.\n• calls the composable, passing the list to display the animated list of strings. is defined elsewhere.\n\nThis snippet creates a UI with Add Item and Delete Item buttons:\n• displays a row of buttons to perform add and remove operations on the list.\n• The and parameters control the enabled state of the buttons. If or are false, then the corresponding button is disabled.\n• The and parameters are lambdas that execute when the user clicks the corresponding button.\n\nFinally, this snippet displays three buttons for sorting the list (Reset, Alphabetical, and Length):\n• displays a to allow users to select a sorting method on the list or reset the list order. A component lets you select a single option from a list of options.\n• , , and are lambda functions that are executed when the corresponding button is selected.\n• The state variable keeps track of the selected option.\n\nThis video shows the result of the preceding snippets when items are reordered:\n\nThe ‘sticky header’ pattern is helpful when displaying lists of grouped data. Below you can see an example of a ‘contacts list’, grouped by each contact’s initial:\n\nTo achieve a sticky header with , you can use the experimental function, providing the header content:\n\nTo achieve a list with multiple headers, like the ‘contacts list’ example above, you could do:\n\nMany apps need to react and listen to scroll position and item layout changes. The Lazy components support this use-case by hoisting the :\n\nFor simple use-cases, apps commonly only need to know information about the first visible item. For this provides the and properties.\n\nIf we use the example of a showing and hiding a button based on if the user has scrolled past the first item:\n\nReading the state directly in composition is useful when you need to update other UI composables, but there are also scenarios where the event does not need to be handled in the same composition. A common example of this is sending an analytics event once the user has scrolled past a certain point. To handle this efficiently, we can use a :\n\nalso provides information about all of the items currently being displayed and their bounds on screen, via the property. See the class for more information.\n\nAs well as reacting to scroll position, it’s also useful for apps to be able to control the scroll position too. supports this via the function, which ‘immediately’ snaps the scroll position, and which scrolls using an animation (also known as a smooth scroll):\n\nThe Paging library enables apps to support large lists of items, loading and displaying small chunks of the list as necessary. Paging 3.0 and later provides Compose support through the library.\n\nTo display a list of paged content, we can use the extension function, and then pass in the returned to in our . Similar to Paging support in views, you can display placeholders while data loads by checking if the is :\n\nThere are a few tips you can take into account to ensure your Lazy layouts work as intended.\n\nThis can happen in scenarios where, for example, you expect to asynchronously retrieve some data like images, to fill your list’s items at a later stage. That would cause the Lazy layout to compose all of its items in the first measurement, as their height is 0 pixels and it could fit them all in the viewport. Once the items have loaded and their height expanded, Lazy layouts would then discard all of the other items that have unnecessarily been composed the first time around as they cannot in fact fit the viewport. To avoid this, you should set default sizing to your items, so that the Lazy layout can do the correct calculation of how many items can in fact fit in the viewport:\n\nWhen you know the approximate size of your items after the data is asynchronously loaded, a good practice is to ensure your items’ sizing remains the same before and after loading, for example, by adding some placeholders. This will help maintain the correct scroll position.\n\nAvoid nesting components scrollable in the same direction\n\nThis applies only to cases when nesting scrollable children without a predefined size inside another same direction scrollable parent. For example, trying to nest a child without a fixed height inside a vertically scrollable parent:\n\nInstead, the same result can be achieved by wrapping all of your composables inside one parent and using its DSL to pass in different types of content. This enables emitting single items, as well as multiple list items, all in one place:\n\nKeep in mind that cases where you’re nesting different direction layouts, for example, a scrollable parent and a child , are allowed:\n\nAs well as cases where you still use the same direction layouts, but also set a fixed size to the nested children:\n\nBeware of putting multiple elements in one item\n\nIn this example, the second item lambda emits 2 items in one block:\n\nLazy layouts will handle this as expected - they will lay out elements one after another as if they were different items. However, there are a couple of problems with doing so.\n\nWhen multiple elements are emitted as part of one item, they are handled as one entity, meaning that they cannot be composed individually anymore. If one element becomes visible on the screen, then all elements corresponding to the item have to be composed and measured. This can hurt performance if used excessively. In the extreme case of putting all elements in one item, it completely defeats the purpose of using Lazy layouts. Apart from potential performance issues, putting more elements in one item will also interfere with & .\n\nHowever, there are valid use cases for putting multiple elements in one item, like having dividers inside a list. You do not want dividers to change scrolling indices, as they shouldn’t be considered independent elements. Also, performance will not be affected as dividers are small. A divider will likely need to be visible when the item before it is visible, so they can be part of the previous item:\n\nUsually Lazy lists have many items, and they occupy more than the size of the scrolling container. However, when your list is populated with few items, your design can have more specific requirements for how these should be positioned in the viewport.\n\nTo achieve this, you can use custom vertical and pass it to the . In the following example, the object only needs to implement the method. Firstly, it will position items one after another. Secondly, if the total used height is lower than the viewport height, it will position the footer at the bottom:\n\nStarting with Compose 1.2, in order to maximize the performance of your Lazy layout, consider adding to your lists or grids. This allows you to specify the content type for each item of the layout, in cases where you're composing a list or a grid consisting of multiple different types of items:\n\nWhen you provide the , Compose is able to reuse compositions only between the items of the same type. As reusing is more efficient when you compose items of similar structure, providing the content types ensures Compose doesn't try to compose an item of type A on top of a completely different item of type B. This helps maximize the benefits of composition reusing and your Lazy layout performance.\n\nYou can only reliably measure the performance of a Lazy layout when running in release mode and with R8 optimisation enabled. On debug builds, Lazy layout scrolling may appear slower. For more information on this, read through Compose performance."
    },
    {
        "link": "https://stackoverflow.com/questions/73618509/jetpack-compose-lazy-loading-of-data-in-accompanist-horizontalpager",
        "document": "The problem is extremely simple and I don't know why anyone hasn't asked it before.\n\nI have to query loads of data from database and then show that in one by one. If I load all of the data at once, before composing , it takes too much time to load and user has to keep seeing for too long.\n\nI want to load data of only that page of that is visible to user. So it should go like this:\n• At index = 0, load data of page 0 only, and while loading, show\n• At index = 1, load data of page 1 only, and while loading, show\n\nand so on.\n\nHow can I achieve that?\n\nHere is what I've written that doesn't work properly:\n\nAnd my relevant code in view model is:"
    },
    {
        "link": "https://medium.com/compose-in-the-room/building-responsive-layouts-with-jetpack-compose-d833476e28b4",
        "document": "Hello there. Welcome to another write-up and in this episode, I will take you to the land where people build responsive layouts using compose UI. You can set up either a Compose for Desktop project or Compose UI for Android, either of them will still work.\n\nLet us take the scenario where we have a list of any data(may be pulled from an API) and we want it such that for devices with smaller screens, we display a simple list while for devices with large screens, we have a 2 by 2 grid and for ones with far bigger screens like Android TV, we want a 3 by 3 grid. We do not want to show a grid on smaller devices may be because the space available is too small and we do not want a simple list on larger screens because we won’t be consuming the space available for us. The appropriate Composable to use for this case is BoxWithConstraints. BoxWithConstraintsScope has the following properties;\n• constraints: Constraints expose minWidth,maxWidth,minHeight,maxHeight, and other properties which can all help us get the available device-width or height. All these values are in pixels.\n• If you want Dp values for minWidth,maxWidth,minHeight and maxHeight, BoxWithConstraintsScope exposes these directly.\n\nLet us go from here. We will use a simple image to build our UI. Here is the code for the image composable;\n\nThe composable is a simple Card composable that has an Image composable. Next, let us build the responsive UI and have the explanation.\n\nAs initially explained, we use a BoxWithConstraints as the root composable and we verify if the maxWidth is less than or equal to 360.dp and we use a simple LazyColumn.For screens with widths up to 600.dp, we have a LazyVerticalGrid with 2 cells each, and for larger screen devices, our LazyVerticalGrid is 3 by 3 cells. That is all that is required to build responsive layouts in Compose. You can use the same ideology to build a master-detail UI. Below is how the UI came out . I used Compose Desktop and resized the window width accordingly and had the behavior."
    },
    {
        "link": "https://stackoverflow.com/questions/71546343/is-there-a-way-for-lazy-loading-with-flowrow",
        "document": "I use FlowRow in the accompanist project to auto wrap my text items to next line. It works as intended. However, when I have a large dataset (which I already load with paging), I don't find an api like LazyColumn to load and build the items as needed, if I loop through the pager flow, it tries to load to build everything at once. Any adice please?"
    },
    {
        "link": "https://medium.com/@vivekbansal19/optimizing-lazy-list-in-jetpack-compose-best-practices-8da06a5dd472",
        "document": "Lazy loading, through components like LazyRow or LazyColumn in Jetpack Compose, can significantly boost your app’s speed. However, we have to watch out for common mistakes that might unknowingly slow down UI due to unnecessary recompositions.\n\nImmutable objects provide a predictable and consistent state throughout the lifecycle of a Compose UI. Since immutable objects cannot be modified after creation, their state remains constant, avoiding unexpected changes and side effects. In short, Compose can skip the recomposition of composable with the Immutable objects.\n\nCheck out more details about how Compose skips recomposition based on its parameters here\n\nEven for static lists with mutable objects, there is an unnecessary recomposition during quick scrolling. Use the above hack to boost performance during scrolling.\n\nAs Sultan Suleimenov mentioned not just Immutable but we can also use Stable annotation to skip recomponsition.\n\nAssign stable keys to items in your or can optimize updates when the underlying dataset changes. This ensures that only the necessary items are recomposed, improving performance.\n\nConsider a real-world example to see how it boosts performance. In the example below, a composable displays a list of messages sorted by the last update time without any keys.\n\nSuppose, the user changed the bottom most task in the list. It’s now the most recently modified note, so it goes to the top of the list, and every other note moves down one spot. Compose doesn’t realize that unchanged items are just being moved in the list. Instead, Compose thinks the old “item 2” was deleted and a new one was created, and so on for item 3, item 4, and down. The result is that Compose recomposes every item on the list, despite only one of them being changed.\n\nUse the function to cache the result of the expensive computations within a composable function, preventing unnecessary recomputations due to recomposition.\n\nIn above example ensures that expensive computations are performed only when needed i.e. when messages or comparator changes.\n\n4. Use to limit recompositions during Animations\n\nOne risk of using state in your compositions is that, if the state changes rapidly, your UI might get recomposed more than you need it to. For example, In a scrollable list, you examine the list’s state to show the “Scroll to Top” button when the first item becomes invisible\n\nThe problem here is if the user scrolls the list, is constantly changing as the user drags their finger. That means the list is constantly being recomposed. However, you don't need to recompose until a new item becomes visible at the bottom.\n\nThe solution is to use a derived state. Derived state lets you tell Compose which changes of state actually should trigger recomposition. In this case, specify that you care about when the first visible item changes. When that state value changes, the UI needs to recompose — but if the user hasn’t yet scrolled enough to bring a new item to the top, it doesn’t have to recompose.\n\nWhen loading multiple images use libraries like Coil or Glide for efficient image loading and caching. For example, use of Coil for image loading within LazyList.\n\nBy using we hit 2 birds with one stone ie. Efficient recomposition and Caching.\n\nEfficient Recomposition: When we use a painter in a Compose composable, the library remembers the image loading state across recompositions. This means that if the composable is recomposed due to a change in the UI state or other factors, the image loading process is optimized. If the image is already in the cache, it won't trigger unnecessary reloads.\n\nCaching: it internally handles the caching of images, ensuring that the library efficiently loads and caches images to avoid redundant network requests and improve performance.\n\nThere are situations where working with lists inside lists or displaying multiple lists is necessary. However, nesting lists deeply, as shown below, can introduce performance and readability challenges:\n\nInstead, consider leveraging the built-in the builder function to flatten the nesting structure. This approach enhances code readability and reduces unnecessary hierarchy:\n\nBy directly iterating over the list and utilize the builder at the top level, the code becomes more concise, easier to understand, and performs efficiently during recomposition. This approach aligns with Jetpack Compose's design principles of simplicity and modularity.\n\nPagination in LazyColumn improves performance by loading and displaying data in chunks, only when needed, rather than loading the entire dataset at once.\n\nReduced Initial Loading Time: Loading a large dataset all at once can result in significant initial loading times, leading to a poor user experience. With pagination, only a subset of data is loaded initially, providing a quicker and more responsive app launch.\n\nOptimized Memory Usage: Loading the entire dataset into memory can lead to high memory usage, especially when dealing with a large number of items.\n\nIt’s better to use the Paging 3 library for real-world use cases.\n\nBy following these practices, developers can create highly performant and responsive Lazy Lists in Jetpack Compose, catering to various list types and scenarios. Each practice addresses specific challenges, contributing to an overall optimized and efficient UI implementation\n\nThese are the practices that I am aware of if I missed any practice or there is any mistake do let me know.\n\nThank you for reading. Happy coding!\n\nI hope you learned something new. Please don’t forget to clap 👏 and follow me for more such useful articles about Android Development, Kotlin & KMP."
    },
    {
        "link": "https://stackoverflow.com/questions/72240936/horizontalpager-with-lazycolumn-inside-another-lazycolumn-jetpack-compose",
        "document": "I want a similiar effect to TikToks profile screen. On top is the and , below that is a with a ( , , , ) and below that is a with the 4 Screens ( , , , ), each of these screens contain a list.\n\nIf I build this in Compose I get a crash because I cannot nest two inside each other.\n\nHere is a short version of what I try to do:\n\nand inside the composable for example is:\n\nHere is the crash I get:\n\nEDIT: Giving the child a fixed height prevents the app from crashing but is not a very satisfying solution. When the 4 Lists in the have different sizes it gives a weird and buggy behaviour and just doesnt look right. Another thing that I tried was to use instead of , this also seemed to work and fixed the crash but also here I get a weird behaviour, the Lists in are scrolling synchonously at the same time, which is not what I want.\n\nThe is what makes this task so difficult, without it is not a problem at all.\n\nHere is the test project: https://github.com/DaFaack/TikTokScrollBehaviourCompose\n\nThis is how it looks like when I give the a fixed height of , only with such a large height it gives the desired scroll behaviour. The downside here is that even if the List is empty it has a height of 2500 and that causes a bad user experience because it allows the user to scroll even though the list is empty"
    },
    {
        "link": "https://medium.com/@chetanshingare2991/mastering-layouts-and-state-in-jetpack-compose-a-complete-guide-f1ae819ca3b2",
        "document": "Jetpack Compose is revolutionizing Android UI development by providing a declarative and reactive framework that simplifies UI creation. Two of the most important concepts in Compose are layouts (how UI elements are structured) and state & recomposition (how UI updates dynamically).\n\nIn this guide, we’ll explore:\n\n✅ The fundamental layout composables: Column, Row, Box, LazyColumn, LazyRow, Scaffold, ConstraintLayout, and FlowRow\n\n✅ State management and recomposition in Compose\n\n✅ Best practices with examples in Kotlin\n\nBy the end, you’ll have a solid understanding of how Jetpack Compose structures UI and handles updates efficiently.\n\nWhen building UI in Compose, several core layout composables are used:\n• Box → Stacks children on top of each other\n• Scaffold → Provides a structured UI layout with AppBar, FAB, Drawer, etc.\n\nEach of these layouts plays a crucial role in designing intuitive and responsive UIs.\n\nA Column arranges its children vertically, stacking them from top to bottom.\n\n📝 Example: Using Column in Compose\n\nA Row arranges its children horizontally, placing them side by side.\n\n✅ Toolbars and action bars\n\n✅ Icons with text (e.g., profile picture + username)\n\n✅ Rating bars or progress indicators\n\n📝 Example: Using Row in Compose\n\nA Box stacks its children on top of each other, making it useful for overlays and custom positioning.\n\n📝 Example: Using Box in Compose\n\nA LazyColumn efficiently displays a large number of items in a scrollable vertical list, loading only visible items.\n\n📝 Example: Using LazyColumn in Compose\n\n📝 Example: Using Scaffold in Compose\n\nA ConstraintLayout allows flexible UI positioning by defining constraints between elements.\n\n📝 Example: Using ConstraintLayout in Compose\n\nA FlowRow automatically wraps items to the next row when space runs out.\n\n📝 Example: Using FlowRow in Compose\n\n📌 1. What is State in Jetpack Compose?\n\nState represents data that drives UI updates. It could be text values, numbers, lists, or more complex objects.\n\n📝 Example: Using State in Compose\n\nRecomposition is how Jetpack Compose updates the UI when state changes.\n\n1️⃣ Compose tracks state values used in composable functions.\n\n2️⃣ When a state changes, Compose re-executes only the affected UI parts.\n\n3️⃣ Unaffected parts remain unchanged, making updates efficient.\n• This triggers recomposition, updating only the .\n\nNot all UI updates are simple state changes. Some require side effects, like network requests or database updates.\n\n✅ Use for one-time operations.\n\n✅ Use for async tasks.\n\n📝 Example: Using in Compose\n\n✔ Runs only once when the composable enters composition.\n\n✔ Prevents unnecessary re-executions.\n\n✅ Layouts: Use , , , , , and for structuring UI.\n\n✅ State Management: + keep UI reactive.\n\n✅ Recomposition: Only affected UI elements update when state changes.\n\n✅ Side Effects: handles one-time operations safely.\n\n🚀 Want to master Jetpack Compose? Start implementing these concepts in your next project!\n\n💬 What’s your biggest challenge in Jetpack Compose? Drop your thoughts in the comments!\n\n👏 If you found this useful, share this article with your fellow devs!\n\n📖 Jetpack Compose Official Docs\n\n📖 State and Recomposition in Compose"
    },
    {
        "link": "https://towardsdev.com/mixing-item-types-in-lazycolumn-d7cb17b0b85d",
        "document": "For Android developers accustomed to using RecyclerView, LazyColumn is the gift that keeps on giving. In a previous article I walked through how to navigate lists in a LazyColumn with LazyListState. In this article I want to quickly demonstrate how to include multiple types of composables within a single scrollable list.\n\nThe use cases for this are endless, but as a simple example let’s suppose we are rendering a document that has a Header, a series of items, and a Footer. How would we achieve this?\n\nOne solution would be to nest in a column.\n\nBut then the Header and Footer would not be scrollable. We could make the entire Column scrollable, but then we end up with a complex nested scroll situation that wouldn’t work like we are intending.\n\nThe simple solution is to use LazyColumn’s builder. Within the scope of LazyColumn’s content block, any composable within an scope is included as a single item in the LazyColumn.\n\nSo we could achieve a single scrollable layout of a header, a series of items, and a footer like this:\n\nAlso note that we can add multiple composables within a single block. I’ve found this particularly useful when I want to add a divider or spacer along with the composable.\n\nThis is important if you are using to target specific items, since including a Divider in its own block would make the Divider its own scroll target, which would probably never be the intended behavior.\n\nThere you have it, another tool for your Compose toolkit. Keep composing!\n\nFollow for more on best practices in Kotlin and Android development."
    }
]