[
    {
        "link": "https://st.com/resource/en/reference_manual/rm0008-stm32f101xx-stm32f102xx-stm32f103xx-stm32f105xx-and-stm32f107xx-advanced-armbased-32bit-mcus-stmicroelectronics.pdf",
        "document": ""
    },
    {
        "link": "https://st.com/en/microcontrollers-microprocessors/stm32f103/documentation.html",
        "document": ""
    },
    {
        "link": "https://docs.cirkitdesigner.com/component/6d83f653-4b06-469b-a73a-aadb03c4b6b3/stm32f103c8t6",
        "document": "The STM32F103C8T6, commonly referred to as the \"Blue Pill,\" is a versatile and cost-effective microcontroller unit (MCU) from STMicroelectronics. Based on the ARM Cortex-M3 processor, it offers a balanced combination of performance, power consumption, and peripherals. This MCU is widely used in a range of applications, including industrial control systems, medical devices, consumer electronics, and Internet of Things (IoT) devices. Use Cirkit Designer to design, explore, and prototype these projects online. Some projects support real-time simulation. Click \"Open Project\" to start designing instantly! This circuit features an STM32F103C8T6 microcontroller interfaced with a membrane matrix keypad for input, an RTC DS3231 for real-time clock functionality, and a 16x2 I2C LCD for display. It controls four 12V geared motors through two MD20 CYTRON motor drivers, with the motor power supplied by a 12V battery regulated by a buck converter. The battery is charged via a solar panel connected through a solar charge controller, ensuring a renewable energy source for the system. This circuit features an STM32F103C8T6 microcontroller powered by a 3.3V battery, which controls a red LED. The LED is connected to pin A1 of the microcontroller through a 10-ohm resistor to limit the current. This circuit features an STM32F103C8T6 microcontroller interfaced with a China ST7735S 160x128 display and two spectral sensors (Adafruit AS7262 and AS7261). It also includes two pushbuttons for user input, with the microcontroller managing the display and sensor data processing. This circuit is designed to control LEDs, a DC motor, and a servo motor using an STM32F103C8T6 microcontroller. It includes a motor driver for the DC motor, a voltage regulator for stable power supply, and an RS485 to USB converter for communication. User inputs can be provided through pushbuttons, and a potentiometer allows for variable analog input. Use Cirkit Designer to design, explore, and prototype these projects online. Some projects support real-time simulation. Click \"Open Project\" to start designing instantly! This circuit features an STM32F103C8T6 microcontroller interfaced with a membrane matrix keypad for input, an RTC DS3231 for real-time clock functionality, and a 16x2 I2C LCD for display. It controls four 12V geared motors through two MD20 CYTRON motor drivers, with the motor power supplied by a 12V battery regulated by a buck converter. The battery is charged via a solar panel connected through a solar charge controller, ensuring a renewable energy source for the system. This circuit features an STM32F103C8T6 microcontroller powered by a 3.3V battery, which controls a red LED. The LED is connected to pin A1 of the microcontroller through a 10-ohm resistor to limit the current. This circuit features an STM32F103C8T6 microcontroller interfaced with a China ST7735S 160x128 display and two spectral sensors (Adafruit AS7262 and AS7261). It also includes two pushbuttons for user input, with the microcontroller managing the display and sensor data processing. This circuit is designed to control LEDs, a DC motor, and a servo motor using an STM32F103C8T6 microcontroller. It includes a motor driver for the DC motor, a voltage regulator for stable power supply, and an RS485 to USB converter for communication. User inputs can be provided through pushbuttons, and a potentiometer allows for variable analog input.\n\nQ: Can I program the STM32F103C8T6 using the Arduino IDE? A: Yes, by installing the STM32 core for Arduino, you can program the Blue Pill using the Arduino IDE. Q: What is the maximum operating temperature of the STM32F103C8T6? A: The maximum operating temperature is typically 85Â°C. Refer to the datasheet for detailed thermal specifications. Q: How can I reset the MCU? A: The MCU can be reset by pulling the NRST pin low. For more detailed troubleshooting, consult the STM32F103C8T6 datasheet and reference manual provided by STMicroelectronics."
    },
    {
        "link": "https://smartsolutions4home.com/how-to-program-stm32",
        "document": ""
    },
    {
        "link": "https://cs.indiana.edu/~geobrown/book.pdf",
        "document": ""
    },
    {
        "link": "https://keil.com/appnotes/files/apnt_323.pdf",
        "document": ""
    },
    {
        "link": "https://www2.keil.com/docs/default-source/default-document-library/mdk5-getting-started.pdf",
        "document": ""
    },
    {
        "link": "https://developer.arm.com/zh-TW/tools-and-software/embedded/keil-mdk",
        "document": "Entitlements could not be checked due to an error reaching the service. Showing non-confidential search results only."
    },
    {
        "link": "https://github.com/dekuNukem/STM32_tutorials",
        "document": "Do you already have some experience with Arduino, and want to step up the game into proper ARM embedded system developments? If so, you're in the right place!\n\nWe're going to take a look how to get started with STM32 microcontrollers using STM32Cube and Keil MDK-ARM, which is considered \"canon\", and only $4 worth of hardwares.\n\nThis tutorial is designed to be detailed and easy to follow. However, it is NOT meant to be a comprehensive guide. Instead it aims to cover the basics to get you going quickly, and teaches you how to figure things out yourself.\n\nAs the purpose of this guide is to help you step up from Arduino to STM32, it is best that you have an understanding of basic microcontroller peripherals like GPIO, UART, etc, and simple digital circuits.\n\nWe'll be using plain C as well, so it's nice to have some experience with that.\n\nYou do need to buy some hardwares, luckily they are dirt cheap, and you only need 1 of each to get started. Although I do recommend getting a few more for spares. They usually take 1 or 2 weeks to arrive, and you can pay more for faster shipping.\n\nYou need this to upload programs into the STM32 chip. Fortunately they are all over ebay and dirt cheap (usually less than $3 including shipping). Just search ST Link v2 on ebay and it should look like this:\n\nThis is the board we'll be using throughout this tutorial. You can find it by searching \"STM32F030F4P6\". They are even cheaper at less than 2 dollars, and should look like this:\n\nWe'll get into details about this board in the next lesson.\n\nYou probably already have one if you've been playing with Arduinos before. If you don't, go on ebay and search CP2102. Of course other chips like CH340 or FTDI also works. It's just a matter of preference.\n\nClick \"Download ZIP\" on the top right corner to get lesson files, then just follow along on this webpage.\n\nIf you can't wait to get going, click a lesson below and get started!\n\nIf you're not in a hurry, I suggest keep reading while I talk about the issue of Arduino, the upcoming trend of 32-bit microcontrollers, and the naming scheme of STM32 parts.\n\nNow there are many good reasons to stay inside the Arduino ecosystem. After all, it kickstarted the \"maker\" revolution in the first place. The consistent hardware, simple IDE, and the excellent community support meant it's easier than ever for people to start creating what they want, and the abstraction layer shielded them from the low-level nitty-gritties like peripheral configuration and fuse settings.\n\nIt's all well and good, and most people are perfectly content with that. However, when you look at the actual chip on most Arduinos, you'll find an aging ATmega328P, a decade old 8-bit chip with a tiny amount of RAM, limited peripherals, and a leisurely clock speed. As a result, in commercial situations 8-bitters like those have been mostly relegated to cost-sensitive applications like cheap toys. And the world has largely moved on to 32-bit microcontrollers.\n\nNow I'm not saying 8-bit Arduinos have gone completely pointless, in fact they are excellent learning tools and more than adequate for most hobby projects. It's just if you want to go further down the path of embedded development, plain old Arduino just simply isn't going to cut it.\n\nThere are a huge number of 32-bit microcontrollers on the market today, most of which use ARM Cortex-M architecture. ARM licenses it out to interested companies, on which they add their own special features and peripherals. This eliminates the cost of designing their own architectures from scratch, and is one of the reasons why ARM is so prevalent in mobile computing today.\n\nPopular examples include STMicroelectronics' STM32 line, NXP's LPC line, and Atmel's own SAM line. I'm using STM32 in this guide because of its relative large community, nice graphical configuration tool, low-cost of dev-board, and abundance of documentations.\n\nSTM32s are also widely used in real world customer electronics, examples include Amazon Dash Button, 3D printer drivers, Apple Watch, Fitbit, BB-8 robot, Nintendo Switch has 3 of them!.\n\nThose 32-bit chips tends to run faster, have great deal of more memory and peripherals, and even cheaper than the comparable 8-bit chips. To demonstrate, here is a comparison between Arduino and my go-to STM32 chip, STM32F072C8T6:\n\nThe result speaks for itself even for a low-end STM32 chip. Here's a brief summary:\n\nEven the cost-oriented F0 series beats the Arduino in terms of power and peripherals. As a result, you'll be able to develop larger and more sophisticated programs, with better performance and more connectivity options. RTOS is also no longer a pipe dream like it is on Arduinos.\n\nHardware debugging is supported on all STM32 chips, that means you have single stepping, breakpoints, memory viewer, all the usual stuff. No need to rely on like on Arduino anymore.\n\nThere are hundreds of STM32 variants to choose from. You can go from 50 cents STM32F0 up to 400MHz STM32H7. All of them uses the same tool and code structure so it's trivially easy to port between them. They also mostly have the same pinout for a given package type, so you can simply drop in a more powerful chip without changing the circuit design should the need arises.\n\nAll STM32s have built-in bootloader for uploading firmware without using a programmer. This can be done through Serial, USB or even I2C, SPI and CAN bus, all without taking up user flash memory like Arduino does.\n\nAll digital pins are 5V tolerant, so you can safely hook them up to legacy systems.\n\nIf you're designing a product and making own circuit board, using a STM32 chip is much cheaper, compact, and clean than plopping a whole Arduino on it, especially if you're doing a production run.\n\nOf course there are reasons that STM32 isn't as popular as Arduinos in the makers crowd, and to name a few:\n\nProgramming on STM32 is a bit more involved than Arduino, but you do get much more control over peripherals as a result. Also, there aren't many guides that give a concise and clear instruction on just how to get started. I hope this one changes that.\n\nYou'll want to get a dev board, and there simply aren't many around. ST makes a few themselves, and there are some cheap ones on eBay. We'll touch on this later.\n\nIt's obvious that STM32's community isn't as vibrant as Arduino's, and as a result there aren't as many ready-to-use libraries available. I hope this guide will help with the situation, and we'll take a look at writing your own libraries and converting existing Arduino libraries as well.\n\n32-bit microcontrollers like STM32 is much powerful and versatile than 8-bit chips, and is where the industry currently heading towards. It is the logical next step if you want to go beyond the limitation of Arduino.\n\nSince there are hundreds of STM32 chips out there, I think it would be a good idea to know how they are named. Here is the official naming convention:\n\nBy looking at the 2 characters just after , you can also tell what ARM processor core a chip is using:\n\nNote how you can eyeball the capability by just looking at the feature numbers. Generally speaking, the higher the number, the better the performance and the variety of peripherals, but also more expensive.\n\nClick here for a spec sheet for all STM32 chips.\n\nThe Blue Pill is another very popular dev board with a STM32F103 chip. However personally I don't really like it for a number of reasons:\nâ¢ STM32F1 is a very old design (more than 10 years old in 2018), so a number of convenient features from later chips are missing, such as TX/RX pin inversion, build-in USB pullups, RTC date backup, and more.\nâ¢ Furthermore, lots of peripherals are simply missing when compared to the newer STM32F0 chips, such as analog comparators, I2S, HDMI_CEC, and so on.\nâ¢ STM32F1 has some nasty hardware design errors that needs looking out for when using certain peripherals.\nâ¢ There are tons of fake STM32F103 chips!\nâ¢ STM32F0 series has free Keil MDK license with no code size limit.\n\nTherefore, I recommend starting with newer STM32F0 chips at the beginning.\n\nThat's pretty much it for the introduction! For now you should have an understanding about the advantages of 32-bit microprocessors, and ordered the required hardwares from ebay.\n\nWe'll take a look at the details of the dev board, the softwares you need, how to hook everything up, and write your own blink program in the next lesson.\n\nCLICK ME TO GO TO NEXT LESSON"
    },
    {
        "link": "https://community.arm.com/support-forums/f/keil-forum/28815/c-codes-for-stm32-using-keil-uvision4",
        "document": "I having trouble in using C++ for STM32 devices using Kiel UVision4 compiler. It seems the codes are compiled and the compiled codes main() thread is working because it can turn on a LED in the trainer board.\n\nThe test program is quite simple, it will light up the LED in the main thread and it will blink the another led every 1 second in the RTC interrupt.\n\nHowever the interrupt routines are not working.\n\nIts even more weird that when i shift to purely C codes the interrupt routines are working fine. The serial port is even working properly.\n\nHowever due to the complexity of project, we are left with no choice but to use mixed C/C++.\n\nAny idea how to fixed this issue?\n\n// sample main_test.cpp\n\n // the result is the LEDs do light up\n\n// No interrupts yet can be serviced from this point until\n\n // global interrupts are explicitly enabled.\n\nif (RTC_GetITStatus(RTC_IT_SEC) != RESET){\n\n // Clear the RTC Second interrupt\n\n RTC_ClearITPendingBit(RTC_IT_SEC);\n\n// Wait until last write operation on RTC registers has finished\n\n RTC_WaitForLastTask();\n\n } }\n\n#ifdef VECT_TAB_RAM\n\n /* Set the Vector Table base location at 0x20000000 */\n\n NVIC_SetVectorTable(NVIC_VectTab_RAM, 0x0);\n\n #else /* VECT_TAB_FLASH */\n\n /* Set the Vector Table base location at 0x08000000 */\n\n NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x0);\n\n #endif\n\n// The purely C codes only seemed to work."
    },
    {
        "link": "https://st.com/resource/en/user_manual/um1718-stm32cubemx-for-stm32-configuration-and-initialization-c-code-generation-stmicroelectronics.pdf",
        "document": ""
    },
    {
        "link": "https://st.com/resource/en/product_training/STM32L4_Ecosystem_CubeMX_Tool.pdf",
        "document": ""
    },
    {
        "link": "https://engineering.purdue.edu/ece477/Archive/2017/Fall/477grp3/Files/refs/UM1718-User-Maual.pdf",
        "document": ""
    },
    {
        "link": "https://gab.wallawalla.edu/~larry.aamodt/cptr480/stm/stm32CubeMX_um1718_user_manual.pdf",
        "document": ""
    },
    {
        "link": "https://edu.domski.pl/wp-content/uploads/2017/02/en.DM00104712.pdf",
        "document": ""
    }
]