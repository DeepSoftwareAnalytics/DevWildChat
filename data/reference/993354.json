[
    {
        "link": "https://github.com/tsparticles/vue3",
        "document": "//import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too. // if you are going to use `loadSlim`, install the \"@tsparticles/slim\" package too. : // await loadFull(engine); // you can load the full tsParticles library from \"tsparticles\" if you need it // or you can load the slim version from \"@tsparticles/slim\" if don't need Shapes or Animations\n\nIf TypeScript returns error while importing/using Particles plugin try adding the following import before the previous code:\n\nThe demo website is here\n\nThere's also a CodePen collection actively maintained and updated here\n\nIf you are migrating your project from Vue 2.x to 3.x you need to these steps:\n‚Ä¢ Change the dependency from to\n‚Ä¢ Change the function from to .\n\nThe tag syntax remains the same, so you don't need to do any additional action."
    },
    {
        "link": "https://particles.js.org/docs",
        "document": "A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components\n\n‚ö†Ô∏è‚ö†Ô∏è _This readme refers to v2 version, read here for v1 documentation* ‚ö†Ô∏è‚ö†Ô∏è\n‚Ä¢ tsParticles - TypeScript Particles\n‚Ä¢ Do you want to use it on your website?\n‚Ä¢ Official components for some of the most used frameworks\n‚Ä¢ Want to see it in action and try it?\n‚Ä¢ Dependency Graphs\n‚Ä¢ Huge thanks to JetBrains for the 2020-2022 Open Source Licenses!\n\nDo you want to use it on your website?\n\nThis library is available on two of the most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier.\n\nYou'll find the instructions below, with all the links you need, and don't be scared by TypeScript, it's just the source language.\n\nThe output files are just JavaScript. ü§©\n\nCDNs and have all the sources you need in Javascript, a bundle browser ready (tsparticles.engine.min.js), and all files splitted for syntax.\n\nIf you are interested there are some simple instructions just below to guide you to migrate from the old particles.js library.\n\nPlease use these hosts or your own to load tsParticles on your projects\n\nThe imported is the same instance you have when including the script in the page using the tag.\n\nOfficial components for some of the most used frameworks\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nThe plugin page hosted on WordPress.org can be found here\n\nActually, an official tsParticles plugin isn't existing, but I have a collaboration with the plugin collection.\n\nThere are some presets ready to be used in this repository, and they also have a bundle file that contains everything needed to run.\n\nYou can find the instructions here\n\nThis preset loads colored bubbles coming from the bottom of the screen on a white background.\n\nYou can find the instructions here\n\nThis preset loads white and red confetti launched from the screen center on a transparent background.\n\nYou can find the instructions here\n\nThis preset loads a faded red to a black background with particles colored like fire and ash sparks.\n\nYou can find the instructions here\n\nThis preset loads a mouse trail made with small fading particles like little fireflies.\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find some tsParticles related templates here. The templates are created for Vanilla Javascript, ReactJS, VueJS, Angular, SvelteJS, and other frameworks.\n\nThe templates will vary, new ones can be created or older ones updated with the latest features or changed to a better style. Check them out once in a while.\n\nIf you created some good design with tsParticles feel free to submit a pull request with your cool template, you'll be credited as the template author!\n\nYou can find all video tutorials on the website here: https://particles.js.org/video.html\n\nMore videos are coming soon! Check every day if there are some new contents.\n\nYou can find some config samples here üìñ\n\nYou can find all options available here üìñ\n\nWant to see it in action and try it?\n\nI've created a tsParticles collection on CodePen üòÆ or you can check out my profile\n\nOtherwise, there's the demo page link below.\n\nWant to see even more demos? Clone the repository on your computer and follow these instructions\n\nBoom! üí• http://localhost:3000 and you can check out other demos.\n\nIf you are brave enough you can switch to the branch for trying the features under development.\n\ntsParticles has a package that makes this library 100% compatible with the particles.js configuration.\n\nSeriously, you just need to change the script from particles.js to the bundled compatibility package, et-voil√†, you're ready üßô!\n\nYou can read more here\n\nWant to know 5 reasons to do the switch? Read here\n\nBelow you can find all the information you need to install tsParticles and its new syntax.\n\nYou can create your own plugins\n\nHuge thanks to JetBrains for the 2020-2022 Open Source Licenses!\n\nJetBrains WebStorm is used to maintain this project."
    },
    {
        "link": "https://npmjs.com/package/@tsparticles/vue3",
        "document": "//import { loadFull } from \"tsparticles\"; // if you are going to use `loadFull`, install the \"tsparticles\" package too. // if you are going to use `loadSlim`, install the \"tsparticles-slim\" package too. : // await loadFull(engine); // you can load the full tsParticles library from \"tsparticles\" if you need it // or you can load the slim version from \"tsparticles-slim\" if don't need Shapes or Animations\n\nIf TypeScript returns error while importing/using Particles plugin try adding the following import before the previous code:\n\nThe demo website is here\n\nThere's also a CodePen collection actively maintained and updated here\n\nIf you are migrating your project from Vue 2.x to 3.x you need to these steps:\n‚Ä¢ Change the dependency from to\n‚Ä¢ Change the function from to .\n\nThe tag syntax remains the same, so you don't need to do any additional action."
    },
    {
        "link": "https://classic.yarnpkg.com/en/package/@tsparticles/vue3",
        "document": ""
    },
    {
        "link": "https://particles.js.org/docs/modules/tsParticles_Engine.html",
        "document": "A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components\n‚Ä¢ Do you want to use it on your website?\n‚Ä¢ Official components for some of the most used frameworks\n‚Ä¢ Want to see it in action and try it?\n‚Ä¢ Huge thanks to JetBrains for the 2020-2022 Open Source Licenses!\n\nDo you want to use it on your website?\n\nThis library is available on two of the most popular CDNs and it's easy and ready to use, if you were using particles.js it's even easier.\n\nYou'll find the instructions below, with all the links you need, and don't be scared by TypeScript, it's just the source language.\n\nThe output files are just JavaScript. ü§©\n\nCDNs and have all the sources you need in Javascript, a bundle browser ready (tsparticles.engine.min.js), and all files splitted for syntax.\n\nIf you are interested there are some simple instructions just below to guide you to migrate from the old particles.js library.\n\nPlease use these hosts or your own to load tsParticles on your projects\n\nThe imported is the same instance you have when including the script in the page using the tag.\n\n// @path-json can be an object or an array, the first will be loaded directly, and the object from the array will be randomly selected \n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n // Important! If the index is not in range 0...<array.length, the index will be ignored. \n\n\n\n // after initialization this can be used. \n\n\n\n \n\n\n\n /* this will be fired from all particles loaded */ \n\n\n\n\n\n \n\n\n\n\n\n // now you can control the animations too, it's possible to pause and resume the animations \n\n // these methods don't change the config so you're safe with all your configurations \n\n // domItem(0) returns the first tsParticles instance loaded in the dom \n\n\n\n\n\n // play will start the animations, if the move is not enabled it won't enable it, it just updates the frame \n\n\n\n\n\n \n\n\n\nOfficial components for some of the most used frameworks\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nThe plugin page hosted on WordPress.org can be found here\n\nActually, an official tsParticles plugin isn't existing, but I have a collaboration with the plugin collection.\n\nThere are some presets ready to be used in this repository, and they also have a bundle file that contains everything needed to run.\n\nYou can find the instructions here\n\nThis preset loads colored bubbles coming from the bottom of the screen on a white background.\n\nYou can find the instructions here\n\nThis preset loads white and red confetti launched from the screen center on a transparent background.\n\nYou can find the instructions here\n\nThis preset loads a faded red to a black background with particles colored like fire and ash sparks.\n\nYou can find the instructions here\n\nThis preset loads a mouse trail made with small fading particles like little fireflies.\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find the instructions here\n\nYou can find some tsParticles related templates here. The templates are created for Vanilla Javascript, ReactJS, VueJS, Angular, SvelteJS, and other frameworks.\n\nThe templates will vary, new ones can be created or older ones updated with the latest features or changed to a better style. Check them out once in a while.\n\nIf you created some good design with tsParticles feel free to submit a pull request with your cool template, you'll be credited as the template author!\n\nYou can find all video tutorials on the website here: https://particles.js.org/video.html\n\nMore videos are coming soon! Check every day if there are some new contents.\n\nYou can find some config samples here üìñ\n\nYou can find all options available here üìñ\n\nWant to see it in action and try it?\n\nI've created a tsParticles collection on CodePen üòÆ or you can check out my profile\n\nOtherwise, there's the demo page link below.\n\nWant to see even more demos? Clone the repository on your computer and follow these instructions\n\nBoom! üí• http://localhost:3000 and you can check out other demos.\n\nIf you are brave enough you can switch to the branch for trying the features under development.\n\ntsParticles has a package that makes this library 100% compatible with the particles.js configuration.\n\nSeriously, you just need to change the script from particles.js to the bundled compatibility package, et-voil√†, you're ready üßô!\n\nYou can read more here\n\nWant to know 5 reasons to do the switch? Read here\n\nBelow you can find all the information you need to install tsParticles and its new syntax.\n\nYou can create your own plugins\n\nHuge thanks to JetBrains for the 2020-2022 Open Source Licenses!\n\nJetBrains WebStorm is used to maintain this project."
    },
    {
        "link": "https://medium.com/openclassrooms-product-design-and-engineering/guide-to-managing-npm-packages-in-your-package-json-d315fe2ccab0",
        "document": "Learning the npm commands of how to install or upgrade packages isn‚Äôt hard. What I did find difficult for a long time were the best practices behind it. I would mostly use the packages that others had added to projects as I thought that they would have had good reasons to add them and I didn‚Äôt know which to add. Or I would think that all dependencies needed to be updated all the time for your application to keep working.\n\nI‚Äôve learned a few things since then about managing packages in web projects that I would like to share with you. These things have worked well for me, but if you‚Äôve had different experiences, please share them with me in the comments.\n\nConsiderations before adding a package to your project\n\nThe first thing to consider here is that there is always a risk to adding a package to your project. Every package you add means another dependability on an external source. Since you have no control over what happens to these packages, there‚Äôs a chance others made it or are changing it in ways that could harm your project. In 2016 half of the internet broke as someone unpublished their npm packages (it did become harder to delete npm packages afterwards). More recently someone updated a package which broke one of its dependents. Or this alarming story of how someone could be reading along from your installed packages (spoiler alert: in this case it‚Äôs fictional, but it is still worrying).\n\nAll this said, it‚Äôs not my goal to make you so afraid of npm packages, you don‚Äôt want to install any anymore. It‚Äôs a reason to be cautious, but there‚Äôs definitely advantages to using packages as well. For starters, if you use packages, it can save you a lot of time by not reinventing the wheel. Others have already solved problems that a lot of developers are running into and chances are they have done it in a way that is more solid, with better browser compatibility and maybe even better security practices than your quick fix for this problem. Besides, even frameworks like React and Vue come in npm packages and they will have their own dependencies on other packages, so there‚Äôs not really a way around it in modern development.\n\nI would say we can broadly divide packages into two categories, core packages and trivial packages. Examples of core packages at OpenClassrooms are things like React, Material-UI, Redux and Webpack. Those are packages that come from trusted resources and other people have put a lot of time and effort into them. They will often have an impact on your architecture and your way of building your project, so you choose them based on that. Once you decide you want to use one of those core packages, install them, they can absolutely make your life better. The trivial packages are up to personal preferences whether you‚Äôll want to add them to your project or not. They won‚Äôt impact your architecture, they just might save you time. So do you think you‚Äôll gain or lose more from adding them?\n\nIncluding git repositories as packages in your project should mostly be used as a last resort, especially if you don‚Äôt have ownership of the repository. Git is not a package management tool, so it will give you less control over what happens to the package. A Git repository can easily be deleted or updated with breaking changes.\n\nWhen there is a bug in the package you would like to use, it‚Äôs usually better to first try to make a pull request to the original package than to fork the project. If you do however want to use a Git package, try to set it to a certain release, tag or if those are not available, a commit hash. That way it could still get deleted, but it at least won‚Äôt surprise you with a breaking change.\n\nWhich package to pick out of npm‚Äôs 1.000.000+ packages\n\nOnce you have decided that you have a need for a package, you‚Äôll have to choose which package is your best option. Anyone who is willing to make an account on npm can publish packages there, so the quality of the packages will vary greatly. While no method will be waterproof, there‚Äôs a few tips that can help you choose the best one:\n‚Ä¢ See if it‚Äôs used by a lot of developers. Npm publishes statistics about the amount of weekly downloads (note that every install counts here, even installs by a build server, so take the number with a grain of salt). A high number of downloads is probably an indicator it‚Äôs a useful package to other developers.\n‚Ä¢ Check if it‚Äôs still actively maintained. Look at the last release date on npm and go to Github to see if some activity is taking place in the open and closed issues. For a small trivial package it might be fine if it‚Äôs a little older, but as soon as the package would have a somewhat bigger role in your project, it is important that it still works optimally for the latest browsers and it should work together well with other newer packages. A classic example is that some old packages won‚Äôt work with a newer version of Node.\n‚Ä¢ Verify the size of the package if they are used client-side. With an eye on performance, it‚Äôs best to make sure your bundle doesn‚Äôt become too big. Some packages will add a lot more weight to your application than others. One way to find out is to check on BundlePhobia. Also check the number of dependencies the package has, the less the better.\n‚Ä¢ Make sure the documentation is clear enough to you. When it‚Äôs not directly clear from the documentation, it can be a good idea to read the source code of any package you add to your project. Often that will help you to understand how it works. If it‚Äôs doesn‚Äôt quickly become clear to you from seeing both the docs and the source code, it will probably be a pain to use the package and it might be better to move on to another one.\n‚Ä¢ Since I tried so hard to make you scared of adding packages to your project earlier in this article, I‚Äôll have to add this one. Check the security issues and vulnerabilities of the project. These days however that‚Äôs much easier than a few years ago. Github will indicate any security issues it detects in your package.json and even npm install will check for vulnerabilities. Having said that, these are only the known security issues, things can go undetected at first.\n\nWhen you install a new package in your project, you have the option to either save it in dependencies or in devDependencies. As explained by npm, dependencies are ‚ÄúPackages required by your application in production‚Äù and devDependencies are ‚ÄúPackages that are only needed for local development and testing‚Äù. However, this distinction is more important when you‚Äôre making an npm package yourself, than when you are making an application for the web. When someone installs an npm package, the dependencies of that package will also be installed, but the devDependencies will be ignored. In the case of making a web application, you‚Äôre probably using a bundler like Webpack, which doesn‚Äôt look at whether packages are in dependencies or devDependencies. Webpack will start in your entry file, follow all the imports and only include the packages that were imported in your code.\n\nIf we take Webpack as an example, it‚Äôs not used in production, just for preparing the bundle for production, so it would be included in the devDependencies. If this would be the case of an npm package, it means it wouldn‚Äôt be included in the project of someone using your package so he/she still has the option between using Webpack or another tool like Parcel. In the case of building an application, Webpack would be installed everywhere, on your computer, on your colleagues computer, on the build server, so everyone can make a bundled build of the application. This build is the only thing the user of the application gets to see, the exact contents of your package.json won‚Äôt make the final difference for your user.\n\nOne last thing to note is that, even for a web application, separating your packages into these two categories can still be helpful for organisational purposes. It shows you how many packages you are using in production. Or it can help other developers to quickly scan if some package they could use is already included.\n\nThe same thing applies to unused packages. Because Webpack never finds an import to them, it won‚Äôt include them in your final bundle. By all means I‚Äôm not saying you shouldn‚Äôt remove them, clutter is never good, but they won‚Äôt harm your bundle size.\n\nWhat about that other one, peerDependencies?\n\nThere‚Äôs one other category of dependencies that you see at times, peerDependencies. This kind of dependencies is only intended for packages that are released on npm, you won‚Äôt ever use them in a web project. You would include a peerDependency in your npm package when a) you expect the projects that include your package to also have that package as a dependency, b) you need a specific version of that package and c) your npm package would break when the importing project has a dependency for another version.\n\nThe value of the lock file\n\nAfter you‚Äôve installed packages with one of the modern package managers, you‚Äôll come across a lock file. When you use npm it‚Äôs package-lock.json, for yarn it‚Äôs yarn.lock. Before these lock files existed, you were never entirely sure which versions of packages would be installed and what the differences would be between the project on your computer, your colleagues computer and the server. Even when your package.json only had fixed versions, no carets or tildes, if the dependencies of your dependencies didn‚Äôt have fixed versions, the versions of packages could differ from one install to the other if one of those packages deeper down the tree had been updated.\n\nThese days we won‚Äôt experience these problems anymore as lock files came to the rescue. Lock files make sure that the whole dependency try is locked, it will save the version of the dependency of a dependency of a package in your dependencies, just as far as your dependencies go. Everyone who runs an install for the project will get exactly the same versions (as long as you commit them). Only after an update they will be changed, which leads me to the next subject, updating‚Ä¶\n\nOne well known problem in the javascript world is the feeling of having updated your packages only yesterday and they already released a new major version again. Updating is often not an easy task, especially as some breaking changes will have you digging deep in the code to make this new version usable again.\n\nIn an ideal world you would keep all your packages up-to-date by running a general npm update or yarn upgrade on a regular basis. By default packages will be installed with a caret, which means that such an update should not have breaking changes. Major versions would still have to be handled manually.\n\nIn reality for any project that‚Äôs a little bigger, I‚Äôve seen developers usually say ‚ÄúIf a package is not a big part of your project and it currently works well, then why update it and run the risk of breaking things?‚Äù For a lot of packages you can trust that semver system is being used properly, but for some packages it happens that breaking changed sneak into a patch request. A lot if times the gains from updating all your packages minor or patch versions don‚Äôt outweigh the risk of breaking things and the time you have to spend on fixing them. It‚Äôs a matter of what is personally important to you, but from my experience, it works well to stick to the following cases in your choice of which packages to update:\n‚Ä¢ The new version has features you want to use. For example when React released the version with hooks, we (here at OpenClassrooms) were really quick to upgrade this one.\n‚Ä¢ There‚Äôs a certain bug you are experiencing that can be solved by updating the package that‚Äôs causing it. To find out about this, the best way is usually to go to the GitHub page of the package and search for the error you are experiencing. If you‚Äôre lucky there‚Äôs a closed issue with details about which version to update to (or any other solution).\n‚Ä¢ When you‚Äôre using another package that‚Äôs asking for a newer version of an already installed package. Usually this will be indicated in the peerDependencies.\n‚Ä¢ Sometimes a package will publish a newer version with significant performance improvements. This can for example come from modern browsers releasing features that natively implement certain behaviours that previously needed a workaround.\n‚Ä¢ The one that speaks for itself, you found out about a security issue in a package.\n\nOne important rule is of course not to wait too long before updating the packages that fit in the above list. The longer you wait, the more breaking changes might be released. Sometimes developer add warnings to the code that certain functions are going to be deprecated in the next version, which can make the experience of updating much more pleasant.\n\nOn the other hand, when a new major version has just been released, you might want to wait a little while before you update. Even though the developer will probably do their best to make it bug free, there‚Äôs always a risk that some overseen problem comes up just following a release. It‚Äôs hard to test one‚Äôs package against all possible use cases after all."
    },
    {
        "link": "https://stackoverflow.com/questions/35236735/npm-warn-message-about-deprecated-package",
        "document": "I got an answer for the similar question: https://stackoverflow.com/a/36335866/1115187\n\nThis command will analyze installed NPM-packages and their versions. The report will contain:\n\nHope, this information could help you to gather info about outdated packages.\n\nNext step - get in touch with maintainers of the appropriate package, and ask them to update the package (maybe, you would like to send a pull request).\n\nThere is a great npm package: , that allows checking outdated dependencies. Probably\n\nMy favorite feature: Interactive Update ‚Äî run in the project folder. An interactive menu shows all required information about dependencies in the current folder and allows to update all dependencies in 3 seconds."
    },
    {
        "link": "https://stackoverflow.com/questions/59172512/how-to-update-warn-deprecated",
        "document": "I'm trying to learn node and npm, using express for a little project. When i install it, i got\n\nI understood that if everything works, it's not necessary to update everything, but i'm trying to learn and go the extra, unnecessary, mile.\n\nHow can i update only core-js?\n\nwill update it adding it to the dependencies in package.json.\n\nIs this the right way to do it? Or it's better to update the parent package that use it? If so, how can i understand which is the package that need an update and how to update it? Or is there a way to update only the modules listed in package-lock.json."
    },
    {
        "link": "https://docs.npmjs.com/deprecating-and-undeprecating-packages-or-package-versions",
        "document": "If you no longer wish to maintain a package, or if you would like to encourage users to update to a new or different version, you can deprecate it. Deprecating a package or version will print a message to the terminal when a user installs it.\n\nA deprecation warning or message can say anything. You may wish to include a message encouraging users to update to a specific version, or an alternate, supported package.\n\nDeprecating an entire package will remove it from search results on the npm website and a deprecation message will also be displayed on the package page.\n\nDeprecating a package is an alternative to deleting a package if your package does not meet the unpublishing requirements.\n‚Ä¢ On the npm \"Sign In\" page, enter your account details and click Sign In.\n‚Ä¢ Navigate to the package page for the package you want to deprecate, replacing with the name of your package: .\n‚Ä¢ If you are sure that you want to continue, enter your package name and click Deprecate package.\n\nTo deprecate an entire package, run the following command, replacing with the name of your package, and with your deprecation message:\n\nIf you have enabled two-factor authentication, add a one-time password to the command, (where 123456 is the code from your authenticator app).\n\nWhen you deprecate a version of a package, a red message will be displayed on that version's package page, similar to deprecating an entire package.\n\nTo deprecate a package version, run the following command, replacing with the name of your package, with your version number, and with your deprecation message:\n\nThe CLI will also accept version ranges for .\n\nIf you have two-factor auth, add a one-time password to the command, (where 123456 is the code from your authenticator).\n\nTo undeprecate a package, replace with (an empty string) in one of the above commands.\n\nFor example, to undeprecate an entire package, run the following command, replacing with the name of your package, and with your version number:\n\nOr to undeprecate only a single package version, run the following command, replacing with the name of your package, and with your version number:\n\nIf you have two-factor auth, add a one-time password to the command, (where 123456 is the code from your authenticator).\n\nIf you are no longer maintaining a package, but other users depend on it, and you'd like to remove it from your user profile, you can transfer it to the user account, which is owned by the npm registry.\n\nTo transfer a package to the npm user account, run the following two commands in order, replacing with your npm user name, and with the package you want to transfer:\n\nIf you have two-factor auth, add a one-time password to the command, (where 123456 is the code from your authenticator)."
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/wcs014/i_always_get_warnings_about_deprecated_things",
        "document": "Whenever I install things using npm, it warns me about deprecated packages and vulnerabilities. I just tried starting clean with a new create-react-app project, and I already get this:\n\n203 packages are looking for funding\n\n203 packages are looking for funding\n\nTo address all issues (including breaking changes), run:\n\nThe github link makes no sense to me. No idea what it's even asking me to do.\n\nSo far, I've continued making and launching projects by just ignoring these messages, but it's getting pretty annoying. Anything I should do right away with this project to fix it?"
    }
]