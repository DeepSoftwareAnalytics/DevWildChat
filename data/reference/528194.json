[
    {
        "link": "https://geeksforgeeks.org/c-arrays",
        "document": "Array in C is one of the most used data structures in C programming. It is a simple and fast way of storing multiple values under a single name. In this article, we will study the different aspects of array in C language such as array declaration, definition, initialization, types of arrays, array syntax, advantages and disadvantages, and many more.\n\nWhat is Array in C?\n\nAn array in C is a fixed-size collection of similar data items stored in contiguous memory locations. It can be used to store the collection of primitive data types such as int, char, float, etc., and also derived and user-defined data types such as pointers, structures, etc.\n\nIn C, we have to declare the array like any other variable before using it. We can declare an array by specifying its name, the type of its elements, and the size of its dimensions. When we declare an array in C, the compiler allocates the memory block of the specified size to the array name.\n\nwhere N is the number of dimensions.\n\nThe C arrays are static in nature, i.e., they are allocated memory at the compile time.\n\nInitialization in C is the process to assign some initial value to the variable. When the array is declared or allocated memory, the elements of the array contain some garbage value. So, we need to initialize the array to some meaningful value. There are multiple ways in which we can initialize an array in C.\n\nIn this method, we initialize the array along with its declaration. We use an initializer list to initialize multiple elements of the array. An initializer list is the list of values enclosed within braces { } separated b a comma.\n\nIf we initialize an array using an initializer list, we can skip declaring the size of the array as the compiler can automatically deduce the size of the array in these cases. The size of the array in these cases is equal to the number of elements present in the initializer list as the compiler can automatically deduce the size of the array.\n\nThe size of the above arrays is 5 which is automatically deduced by the compiler.\n\nWe initialize the array after the declaration by assigning the initial value to each element individually. We can use for loop, while loop, or do-while loop to assign the value to each element of the array.\n\nExample of Array Initialization in C\n\nWe can access any element of an array in C using the array subscript operator [ ] and the index value i of the element.\n\nOne thing to note is that the indexing in the array always starts with 0, i.e., the first element is at index 0 and the last element is at N – 1 where N is the number of elements in the array.\n\nExample of Accessing Array Elements using Array Subscript Operator\n\nWe can update the value of an element at the given index i in a similar way to accessing an element by using the array subscript operator [ ] and assignment operator =.\n\nTraversal is the process in which we visit every element of the data structure. For C array traversal, we use loops to iterate through each element of the array.\n\nHow to use Array in C?\n\nThe following program demonstrates how to use an array in the C programming language:\n\nTypes of Array in C\n\nThere are two types of arrays based on the number of dimensions it has. They are as follows:\n\n1. One Dimensional Array in C\n\nThe One-dimensional arrays, also known as 1-D arrays in C are those arrays that have only one dimension.\n\nSyntax of 1D Array in C\n\nExample of 1D Array in C\n\nIn C, we store the words, i.e., a sequence of characters in the form of an array of characters terminated by a NULL character. These are called strings in C language.\n\nTo know more about strings, refer to this article – Strings in C\n\nMulti-dimensional Arrays in C are those arrays that have more than one dimension. Some of the popular multidimensional arrays are 2D arrays and 3D arrays. We can declare arrays with more dimensions than 3d arrays but they are avoided as they get very complex and occupy a large amount of space.\n\nA Two-Dimensional array or 2D array in C is an array that has exactly two dimensions. They can be visualized in the form of rows and columns organized in a two-dimensional plane.\n\nSyntax of 2D Array in C\n• size1: Size of the first dimension.\n• size2: Size of the second dimension.\n\nExample of 2D Array in C\n\nAnother popular form of a multi-dimensional array is Three Dimensional Array or 3D Array. A 3D array has exactly three dimensions. It can be visualized as a collection of 2D arrays stacked on top of each other to create the third dimension.\n\nSyntax of 3D Array in C\n\nTo know more about Multidimensional Array in C, refer to this article – Multidimensional Arrays in C\n\nArrays and Pointers are closely related to each other such that we can use pointers to perform all the possible operations of the array. The array name is a constant pointer to the first element of the array and the array decays to the pointers when passed to the function.\n\nTo know more about the relationship between an array and a pointer, refer to this article – Pointer to an Arrays | Array Pointer\n\nPassing an Array to a Function in C\n\nAn array is always passed as pointers to a function in C. Whenever we try to pass an array to a function, it decays to the pointer and then passed as a pointer to the first element of an array.\n\nWe can verify this using the following C Program:\n\nReturn an Array from a Function in C\n\nIn C, we can only return a single value from a function. To return multiple values or elements, we have to use pointers. We can return an array from a function using a pointer to the first element of that array.\n\nProperties of Arrays in C\n\nIt is very important to understand the properties of the C array so that we can avoid bugs while using it. The following are the main properties of an array in C:\n\nThe array in C is a fixed-size collection of elements. The size of the array must be known at the compile time and it cannot be changed once it is declared.\n\nWe can only store one type of element in an array. There is no restriction on the number of elements but the type of all of these elements must be the same.\n\nThe array index always starts with 0 in C language. It means that the index of the first element of the array will be 0 and the last element will be N – 1.\n\nA dimension of an array is the number of indexes required to refer to an element in the array. It is the number of directions in which you can grow the array size.\n\nAll the elements in the array are stored continuously one after another in the memory. It is one of the defining properties of the array in C which is also the reason why random access is possible in the array.\n\nThe array in C provides random access to its element i.e we can get to a random element at any index of the array in constant time complexity just by using its index number.\n\n7. No Index Out of Bounds Checking\n\nThere is no index out-of-bounds checking in C/C++, for example, the following program compiles fine but may produce unexpected output when run.\n\nIn C, it is not a compiler error to initialize an array with more elements than the specified size. For example, the below program compiles fine and shows just a Warning.\n\nExamples of Array in C\n\nExample 1: C Program to perform array input and output.\n\nIn this program, we will use scanf() and print() function to take input and print output for the array.\n\nExample 2: C Program to print the average of the given list of numbers\n\nIn this program, we will store the numbers in an array and traverse it to calculate the average of the number stored.\n\nExample 3: C Program to find the largest number in the array.\n\nAdvantages of Array in C\n\nThe following are the main advantages of an array:\n• None Random and fast access of elements using the array index.\n• None Use of fewer lines of code as it creates a single array of multiple elements.\n• None Traversal through the array becomes easy using a single loop.\n• None Sorting becomes easy as it can be accomplished by writing fewer lines of code.\n\nDisadvantages of Array in C\n• None Allows a fixed number of elements to be entered which is decided at the time of declaration. Unlike a linked list, an array in C is not dynamic.\n• None Insertion and deletion of elements can be costly since the elements are needed to be rearranged after insertion and deletion.\n\nThe array is one of the most used and important data structures in C. It is one of the core concepts of C language that is used in every other program. Though it is important to know about its limitation so that we can take advantage of its functionality.\n\nHow to declare an array in C?\n\nHow do you initialize an array in C?\n\nWhy do we need Arrays?\n\nHow can we determine the size of the C array?"
    },
    {
        "link": "https://geeksforgeeks.org/c-loops",
        "document": "Loops in programming are used to repeat a block of code until the specified condition is met. A loop statement allows programmers to execute a statement or group of statements multiple times without repetition of code.\n\nThere are mainly two types of loops in C Programming:\n• Entry Controlled loops: In Entry controlled loops the test condition is checked before entering the main body of the loop. For Loop and While Loop\n• Exit Controlled loops: In Exit controlled loops the test condition is evaluated at the end of the loop body. The loop body will execute at least once, irrespective of whether the condition is true or false. do-while Loop\n\nfor loop in C programming is a repetition control structure that allows programmers to write a loop that will be executed a specific number of times. for loop enables programmers to perform n number of steps together in a single line.\n\nIn for loop, a loop variable is used to control the loop. Firstly we initialize the loop variable with some value, then check its test condition. If the statement is true then control will move to the body and the body of for loop will be executed. Steps will be repeated till the exit condition becomes true. If the test condition will be false then it will stop.\n• Initialization Expression: In this expression, we assign a loop variable or loop counter to some value. for example: int i=1;\n• Test Expression: In this expression, test conditions are performed. If the condition evaluates to true then the loop body will be executed and then an update of the loop variable is done. If the test expression becomes false then the control will exit from the loop. for example, i<=9;\n• Update Expression: After execution of the loop body loop variable is updated by some value it could be incremented, decremented, multiplied, or divided by any value.\n\nWhile loop does not depend upon the number of iterations. In for loop the number of iterations was previously known to us but in the While loop, the execution is terminated on the basis of the test condition. If the test condition will become false then it will break from the while loop else body will be executed.\n\nThe do-while loop is similar to a while loop but the only difference lies in the do-while loop test condition which is tested at the end of the body. In the do-while loop, the loop body will execute at least once irrespective of the test condition.\n\nAbove program will evaluate (i<1) as false since i = 2. But still, as it is a do-while loop the body will be executed once.\n\nLoop control statements in C programming are used to change execution from its normal sequence.\n\nAn infinite loop is executed when the test expression never becomes false and the body of the loop is executed repeatedly. A program is stuck in an Infinite loop when the condition is always true. Mostly this is an error that can be resolved by using Loop Control statements."
    },
    {
        "link": "https://stackoverflow.com/questions/48493837/using-arrays-loops-and-conditions-in-c-programming",
        "document": "Here's what you can do,\n• You can get your array size from the user and use a variable in & for loops which would help to input the array elements. That's what you are doing wrong mainly.\n\nThere's another mistake you did in the first scanf of your code, can you tell what exactly you wanted to input using that statement? I mean if it an array which it is, you obviously need loop to get the input. So that first scanf is worthless(of your code).\n\nHope it helps. I'll be looking forward to your reply."
    },
    {
        "link": "https://learneroo.com/modules/11/nodes/111",
        "document": ""
    },
    {
        "link": "https://simplilearn.com/tutorials/c-tutorial/array-in-c",
        "document": ""
    },
    {
        "link": "https://freecodecamp.org/news/using-scanf-in-c",
        "document": "The function is a commonly used input function in the C programming language. It allows you to read input from the user or from a file and store that input in variables of different data types.\n\nInput is an essential part of most programs, and the function provides an easy way to read input in a variety of formats. But it's important to use carefully and to always validate user input to prevent security vulnerabilities and unexpected program behavior.\n\nIn this article, we'll take a closer look at the function and how to use it effectively in C programming.\n\nWhat you will learn\n\nHere are some things that you will learn:\n• What is and what it's used for\n• How to use to read input from the user or from a file\n• The syntax of the function and how to use conversion specifiers to read input\n• How to store input in variables using pointers\n• The importance of input validation and error checking to prevent unexpected program behavior and security vulnerabilities\n\nThe basic syntax of the function is as follows:\n\nThe function returns the number of items successfully read, or if an error occurs or the end of the input stream is reached.\n• : A string that specifies the format of the input to be read. This string can contain conversion specifiers that tell what type of input to expect and how to read it. See the next section for more details on conversion specifiers.\n• : A variable-length argument list that contains the memory addresses of variables where the input values will be stored. These memory addresses must be passed as pointers.\n\nHow to Use Conversion Specifiers to Read Input\n\nThe function takes a format string as its first argument, which specifies the format and data types of the input that will be read.\n\nThe format string can include conversion specifiers, which begin with the percent sign ( ) and are followed by one or more characters that specify the type of data to be read.\n\nThe most common conversion specifiers are:\n\nAfter the format string, the function takes a variable number of arguments, each of which is a pointer to the variable where the input value will be stored. The number and type of arguments must match the conversion specifiers in the format string.\n\nFor example, the following code reads an integer value and a floating-point value from the user, and stores them in the variables and , respectively:\n\nBelow is the expected output:\n\nIn this example, the format string tells to read an integer value followed by a floating-point value, separated by a space. The operator is used to pass the address of the and variables to , so that the input values can be stored in those variables.\n\nIn the C programming language, \"conversion specifiers\" and \"type specifiers\" are related concepts, but they have different meanings and purposes.\n\nA \"type specifier\" is a keyword that specifies the data type of a variable or expression. For example, the , , and keywords are type specifiers that indicate integer, floating-point, and character data types, respectively. We use type specifiers to declare variables and functions and to define the return type of a function.\n\nOn the other hand, a \"conversion specifier\" is a symbol we use in format strings to specify the format of input and output operations. Conversion specifiers start with the character, followed by a single letter or sequence of characters that indicates the type of data to be read or written. For example, the conversion specifier reads integer values, while the specifier reads floating-point values.\n\nIn summary, type specifiers are used to specify the data type of variables and expressions, while conversion specifiers are used to specify the format of input and output operations. Both concepts are important in C programming and are used in different contexts.\n\nHow to Store Input in Variables Using Pointers\n\nTo store input in a variable using , you need to pass the memory address of the variable as an argument to the function using the (address of) operator. This is because expects pointers as arguments to store input values directly in memory locations.\n\nHere's an example of using to read an integer value from the user and store it in a variable called :\n\nIn this example, the conversion specifier tells to expect an integer input value. The memory address of the variable is passed to using the operator, which returns a pointer to the memory location of .\n\nIf you need to read multiple input values, you can pass multiple pointers as arguments to in the order that they appear in the format string. For example, to read two integer values and store them in variables and , you could do:\n\nNote that it's important to make sure that the data types of the input values match the data types of the variables that you're storing them in. If the types don't match, the input value may be interpreted incorrectly, leading to unexpected program behavior.\n\nAdditionally, it's a good practice to validate input values and handle input errors, as discussed in the next section.\n\nInput validation and error checking are important concepts in programming, especially when dealing with user input or input from external sources. In C, you can use various techniques to validate input and handle input errors.\n\nOne common technique is to use the return value of to check if the input operation was successful or if an error occurred. The function returns the number of input values that were successfully read and stored, or if an error occurred or the end of the input stream was reached.\n\nBy checking the return value, you can determine if the input operation was successful or if an error occurred.\n\nFor example, if you're using to read an integer value from the user and store it in a variable called , you could use the following code to validate the input:\n\nIn this example, the function is used to read an integer value and store it in the variable. The return value of is compared to to check if one input value was successfully read and stored. If the return value is not , an error message is printed to the console and the program exits with an error code.\n\nBelow is the expected output:\n\nYou can use similar techniques to validate input of other types, such as floating-point numbers or strings. For example, to validate the input of a floating-point value, you could use the conversion specifier and check if the return value of is equal to .\n\nIn addition to checking the return value of , you can also use other techniques to validate input and handle errors, such as using to read input as a string and then parsing the string to extract the desired values, or using regular expressions to validate input patterns.\n\nIt's important to carefully validate input and handle errors to prevent unexpected program behavior or security vulnerabilities.\n\nand the Standard C Library\n\nThe function is included in the standard C library, which provides a collection of pre-defined functions that you can use in C programs. The header file is also part of the standard C library and contains declarations for input and output functions like , , and others.\n\nTo use the function in a C program, you need to include the header file at the beginning of your program using the preprocessor directive. This allows you to access the functions and data types defined in the standard C library, including .\n\nHere's an example of how to use in a C program:\n\nIn this example, we first include the header file using . We then define a variable of type . We use the function to prompt the user to enter an integer, and the function reads the user's input and stores it in the variable. Finally, we use another statement to print the value of .\n\nNote that we use the operator before the variable name in the function to pass the memory address of the variable to the function. This allows the function to store the user's input directly in the variable.\n\nThe function in C is a powerful tool for reading input from the user or from a file and storing it in variables. By specifying conversion specifiers in the format string, you can read input values of different types, such as integers, floating-point numbers, and strings.\n\nWhen using , it's important to be aware of potential input errors and to validate input values to prevent unexpected program behavior or security vulnerabilities.\n\nYou can use the return value of to check if the input operation was successful. You can also use various techniques to validate input and handle errors, such as checking input ranges, using regular expressions, or converting input values to strings and parsing them.\n\nOverall, is a versatile function that you can use in a variety of programming scenarios. By understanding how to use effectively and how to validate and handle input errors, you can build robust and reliable C programs that interact with users and external data sources in a safe and secure manner."
    },
    {
        "link": "https://stackoverflow.com/questions/49590549/best-way-of-input-in-c-console-application-differences-between-different-types",
        "document": "Hi have been doing research and I have found three most common different types of input inside a C console application:\n• scanf(\"%[^\n\n]s\", *char): Pick up a string until it finds a break line. It is advised not to use it due to overflow buffer problems.\n• gets(*char): Pick up a string until it finds a break line. It is equivalent to the first. It is advised not to use it due to overflow buffer problems too.\n• fgets(*char, LENGTH, *FILE): Pick up a string of LENGTH characters, from the file FILE. It is the safest of the three and the most recommended.\n\nHaving said this, I will show an example (MCVE) of the use of the three functions and what is picking up them:\n\n\n\n This code, have next output:\n\nSo, as we can see, three conclusions can be drawn from this:\n• scanf: Pick up user's input until '\n\n' char (does not pick up the character '\n\n'). So string would be:\n• gets: Equivalent to the point above. So string would be:\n• fgets: Pick up user's input until '\n\n' char (pick up the character '\\ n' too). So string would be:\n\nAre my conclusions correct? Any information to add?"
    },
    {
        "link": "https://geeksforgeeks.org/scanf-in-c",
        "document": "In C, scanf is a function that stands for Scan Formatted String. It is the most used function to read data from stdin (standard input stream i.e. usually keyboard) and stores the result into the given arguments. It can accept character, string, and numeric data from the user using standard input. It also uses format specifiers like printf.\n\nExplanation: In this example, scanf(“%d”, &n) reads an integer from the keyboard and stores it in the integer variable n. The %d format specifier indicates that an integer is expected, and &n provides the memory address of n so that scanf can store the input value there.\n\nThe syntax of scanf() in C is similar to the syntax of printf().\n• format: It is the format string that contains the format specifiers(s).\n• address_of_args: Address of the variables where we want to store the input.\n\nWe use & operator to find the address of the variables by appending it before the variable name. If you’re interested in learning more about input handling and integrating it into complex data structures, the C Programming Course Online with Data Structures covers practical applications of input functions in C.\n\nTo know more about format specifiers, refer to this article – Format Specifiers in C\n\nThe scanf in C returns three types of values:\n• >0: The number of values converted and assigned successfully.\n• 0: No value was assigned.\n• <0: Read error encountered or end-of-file (EOF) reached before any assignment was made.\n\nThe below examples demonstrate the use of scanf for different types of input:\n\nExplanation: The scanf(“%f”, &f) statement reads a floating-point number from user input and stores it in the variable f. The %f format specifier ensures the correct interpretation of the input, and &f passes the memory address of f to store the value.\n\nTake Two Integers as Input\n\nExplanation: scanf(“%d %d”, &a, &b) read two integers from the standard input. The space in the format string %d %d tells scanf to expect whitespace (spaces, tabs, or newlines/enters) between the two numbers. When you press Enter after typing the first number, it’s interpreted as whitespace, and scanf proceeds to read the second integer. The values are then stored in the integer variables a and b, respectively.\n\nExplanation: The scanf(“%s”, name) function reads a single input until the first space, so when “Abhishek Sharma” is entered, only “Abhishek” will be stored in name. Also, we don’t need to use the &operator for the address of name.\n\nIn C, scanf() provides a feature called scanset characters, which allows you to read custom pattern of input. For example, reading only specific characters, reading text with whitespaces, etc.\n• set: A sequence of characters that defines the pattern. This can include individual characters, ranges of characters (e.g., a-z for lowercase letters), or negated sets (e.g., [^0-9] to exclude digits).\n\nExplanation: The scanf(“%[^\n\n]s”, name) function reads an entire line, including spaces, until a newline (\n\n) is encountered. This allows storing full names like “Abhishek Sharma” in the name array. The program then prints the entered name using printf()."
    },
    {
        "link": "https://quora.com/Can-you-give-some-examples-of-scanf-in-C-with-inputs",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://w3schools.com/c/c_user_input.php",
        "document": "You have already learned that is used to output values in C.\n\nTo get user input, you can use the function:\n\n// Create an integer variable that will store the number we get from the user\n\nint myNum;\n\n\n\n// Ask the user to type a number\n\nprintf(\"Type a number: \n\n\");\n\n\n\n// Get and save the number the user types\n\nscanf(\"%d\", &myNum);\n\n \n\n// Output the number the user typed\n\nprintf(\"Your number is: %d\", myNum);\n\n Run example »\n\nThe function takes two arguments: the format specifier of the variable ( in the example above) and the reference operator ( ), which stores the memory address of the variable. Tip: You will learn more about memory addresses and functions in the next chapter.\n\nThe function also allow multiple inputs (an integer and a character in the following example):\n\n// Create an int and a char variable\n\nint myNum;\n\nchar myChar;\n\n\n\n // Ask the user to type a number AND a character\n\nprintf(\"Type a number AND a character and press enter: \n\n\"); \n\n\n\n// Get and save the number AND character the user types\n\nscanf(\"%d %c\", &myNum, &myChar);\n\n\n\n// Print the number\n\nprintf(\"Your number is: %d\n\n\", myNum);\n\n\n\n// Print the character\n\nprintf(\"Your character is: %c\n\n\", myChar);\n\n Run example »\n\nYou can also get a string entered by the user:\n\nNote: When working with strings in , you must specify the size of the string/array (we used a very high number, 30 in our example, but atleast then we are certain it will store enough characters for the first name), and you don't have to use the reference operator ( ).\n\nHowever, the function has some limitations: it considers space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words). For example:\n\nFrom the example above, you would expect the program to print \"John Doe\", but it only prints \"John\".\n\nThat's why, when working with strings, we often use the function to read a line of text. Note that you must include the following arguments: the name of the string variable, (string_name), and :"
    }
]