[
    {
        "link": "https://dev.mysql.com/doc/en/privileges-provided.html",
        "document": "The privileges granted to a MySQL account determine which operations the account can perform. MySQL privileges differ in the contexts in which they apply and at different levels of operation:\n\nPrivileges also differ in terms of whether they are static (built in to the server) or dynamic (defined at runtime). Whether a privilege is static or dynamic affects its availability to be granted to user accounts and roles. For information about the differences between static and dynamic privileges, see Static Versus Dynamic Privileges.)\n\nInformation about account privileges is stored in the grant tables in the system database. For a description of the structure and contents of these tables, see Section 8.2.3, “Grant Tables”. The MySQL server reads the contents of the grant tables into memory when it starts, and reloads them under the circumstances indicated in Section 8.2.13, “When Privilege Changes Take Effect”. The server bases access-control decisions on the in-memory copies of the grant tables.\n\nThe following sections summarize the available privileges, provide more detailed descriptions of each privilege, and offer usage guidelines.\n• None Static privileges are built in to the server. They are always available to be granted to user accounts and cannot be unregistered.\n• None Dynamic privileges can be registered and unregistered at runtime. This affects their availability: A dynamic privilege that has not been registered cannot be granted. For example, the and privileges are static and always available, whereas a dynamic privilege becomes available only if the component that implements it has been enabled. The remainder of this section describes how dynamic privileges work in MySQL. The discussion uses the term “components” but applies equally to plugins. Server administrators should be aware of which server components define dynamic privileges. For MySQL distributions, documentation of components that define dynamic privileges describes those privileges. Third-party components may also define dynamic privileges; an administrator should understand those privileges and not install components that might conflict or compromise server operation. For example, one component conflicts with another if both define a privilege with the same name. Component developers can reduce the likelihood of this occurrence by choosing privilege names having a prefix based on the component name. The server maintains the set of registered dynamic privileges internally in memory. Unregistration occurs at server shutdown. Normally, a component that defines dynamic privileges registers them when it is installed, during its initialization sequence. When uninstalled, a component does not unregister its registered dynamic privileges. (This is current practice, not a requirement. That is, components could, but do not, unregister at any time privileges they register.) No warning or error occurs for attempts to register an already registered dynamic privilege. Consider the following sequence of statements: The first statement registers any privileges defined by component , but does not unregister them. For the second statement, the component privileges it registers are found to be already registered, but no warnings or errors occur. Dynamic privileges apply only at the global level. The server stores information about current assignments of dynamic privileges to user accounts in the system table:\n• None The server automatically registers privileges named in during server startup (unless the option is given).\n• None The and statements modify the contents of .\n• None Dynamic privilege assignments listed in are persistent. They are not removed at server shutdown. Example: The following statement grants to user the privileges required to control replication (including Group Replication) on a replica, and to modify system variables: Granted dynamic privileges appear in the output from the statement and the table. For and at the global level, any named privileges not recognized as static are checked against the current set of registered dynamic privileges and granted if found. Otherwise, an error occurs to indicate an unknown privilege identifier. For and the meaning of at the global level includes all static global privileges, as well as all currently registered dynamic privileges:\n• None at the global level grants all static global privileges and all currently registered dynamic privileges. A dynamic privilege registered subsequent to execution of the statement is not granted retroactively to any account.\n• None at the global level revokes all granted static global privileges and all granted dynamic privileges. The statement reads the table for dynamic privilege assignments and registers any unregistered privileges found there. For descriptions of the dynamic privileges provided by MySQL Server and components included in MySQL distributions, see Section 8.2.2, “Privileges Provided by MySQL”.\n\nIn MySQL 8.4, many operations that previously required the privilege are also associated with a dynamic privilege of more limited scope. (For descriptions of these privileges, see Section 8.2.2, “Privileges Provided by MySQL”.) Each such operation can be permitted to an account by granting the associated dynamic privilege rather than . This change improves security by enabling DBAs to avoid granting and tailor user privileges more closely to the operations permitted. is now deprecated; expect it to be removed in a future version of MySQL. When removal of occurs, operations that formerly required fail unless accounts granted are migrated to the appropriate dynamic privileges. Use the following instructions to accomplish that goal so that accounts are ready prior to removal:\n• None Execute this query to identify accounts that are granted :\n• None For each account identified by the preceding query, determine the operations for which it needs . Then grant the dynamic privileges corresponding to those operations, and revoke . For example, if requires for binary log purging and system variable modification, these statements make the required changes to the account: GRANT BINLOG_ADMIN, SYSTEM_VARIABLES_ADMIN ON *.* TO 'u1'@'localhost'; REVOKE SUPER ON *.* FROM 'u1'@'localhost'; After you have modified all applicable accounts, the query in the first step should produce an empty result set."
    },
    {
        "link": "https://medium.com/@nkaurelien/how-to-create-a-read-only-mysql-user-226e8e49a855",
        "document": "First, login as a MySQL administrator from your terminal / command prompt using the following command:\n\nYou’ll prompted to enter the password. Type the password for the account.\n\nThe in the command above means that user can be used to connect from any host. You can limit the access by defining the host from where the user can connect. Omitting this information will only allow the user to connect from the same machine.\n\nThis command gives the user read-only access to the database from the local host only. If you know the host name or IP address of the host that the collector is will be installed on, type the following command:\n\nExecute the following command to make the privilege changes saved and take effect.\n\nType . Finally, show the granted privileges of user to verify"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql",
        "document": "MySQL is an open-source relational database management system. It is commonly deployed as part of the LAMP stack (which stands for Linux, Apache, MySQL, and PHP) and, as of this writing, is the most popular open-source database in the world.\n\nThis guide outlines how to create a new MySQL user and grant them the permissions needed to perform a variety of actions.\n\nIn order to follow along with this guide, you’ll need access to a MySQL database. This guide assumes that this database is installed on a virtual private server running Ubuntu 20.04, though the principles it outlines should be applicable regardless of how you access your database.\n\nIf you don’t have access to a MySQL database and would like to set one up yourself, you can follow one of our guides on How To Install MySQL. Again, regardless of your server’s underlying operating system, the methods for creating a new MySQL user and granting them permissions will generally be the same.\n\nPlease note that any portions of example commands that you need to change or customize will be highlighted throughout this guide.\n\nUpon installation, MySQL creates a root user account which you can use to manage your database. This user has full privileges over the MySQL server, meaning it has complete control over every database, table, user, and so on. Because of this, it’s best to avoid using this account outside of administrative functions. This step outlines how to use the root MySQL user to create a new user account and grant it privileges.\n\nIn Ubuntu systems running MySQL (and later versions), the root MySQL user is set to authenticate using the plugin by default rather than with a password. This plugin requires that the name of the operating system user that invokes the MySQL client matches the name of the MySQL user specified in the command. This means that you need to precede the command with to invoke it with the privileges of the root Ubuntu user in order to gain access to the root MySQL user:\n\nOnce you have access to the MySQL prompt, you can create a new user with a statement. These follow this general syntax:\n\nAfter , you specify a username. This is immediately followed by an sign and then the hostname from which this user will connect. If you only plan to access this user locally from your Ubuntu server, you can specify . Wrapping both the username and host in single quotes isn’t always necessary, but doing so can help to prevent errors.\n\nYou have several options when it comes to choosing your user’s authentication plugin. The plugin mentioned previously can be convenient, as it provides strong security without requiring valid users to enter a password to access the database. But it also prevents remote connections, which can complicate things when external programs need to interact with MySQL.\n\nAs an alternative, you can leave out the portion of the syntax entirely to have the user authenticate with MySQL’s default plugin, . The MySQL documentation recommends this plugin for users who want to log in with a password due to its strong security features.\n\nRun the following command to create a user that authenticates with . Be sure to change to your preferred username and to a strong password of your choosing:\n\nAfter creating your new user, you can grant them the appropriate privileges.\n\nThe general syntax for granting user privileges is as follows:\n\nThe value in this example syntax defines what actions the user is allowed to perform on the specified and . You can grant multiple privileges to the same user in one command by separating each with a comma. You can also grant a user privileges globally by entering asterisks ( ) in place of the database and table names. In SQL, asterisks are special characters used to represent “all” databases or tables.\n\nTo illustrate, the following command grants a user global privileges to , , and databases, tables, and users, as well as the power to , , and data from any table on the server. It also grants the user the ability to query data with , create foreign keys with the keyword, and perform operations with the privilege. However, you should only grant users the permissions they need, so feel free to adjust your own user’s privileges as necessary.\n\nYou can find the full list of available privileges in the official MySQL documentation.\n\nRun this statement, replacing with your own MySQL user’s name, to grant these privileges to your user:\n\nNote that this statement also includes . This will allow your MySQL user to grant any permissions that it has to other users on the system.\n\nMany guides suggest running the command immediately after a or statement in order to reload the grant tables to ensure that the new privileges are put into effect:\n\nHowever, according to the official MySQL documentation, when you modify the grant tables indirectly with an account management statement like , the database will reload the grant tables immediately into memory, meaning that the command isn’t necessary in our case. On the other hand, running it won’t have any negative effect on the system.\n\nIf you need to revoke a permission, the structure is almost identical to granting it:\n\nNote that when revoking permissions, the syntax requires that you use , instead of which you used when granting the permissions.\n\nYou can review a user’s current permissions by running the command:\n\nJust as you can delete databases with , you can use to delete a user:\n\nAfter creating your MySQL user and granting them privileges, you can exit the MySQL client:\n\nIn the future, to log in as your new MySQL user, you’d use a command like the following:\n\nThe flag will cause the MySQL client to prompt you for your MySQL user’s password in order to authenticate.\n\nBy following this tutorial, you’ve learned how to add new users and grant them a variety of permissions in a MySQL database. From here, you could continue to explore and experiment with different permissions settings for your MySQL user, or you may want to learn more about some higher-level MySQL configurations.\n\nFor more information about the basics of MySQL, you can check out the following tutorials:\n• How To Create and Manage Databases in MySQL and MariaDB on a Cloud Server\n• How To Set Up Replication in MySQL\n• How To Configure MySQL Group Replication on Ubuntu 20.04"
    },
    {
        "link": "https://apono.io/blog/how-to-create-users-and-grant-permissions-in-mysql",
        "document": "How To: Create Users and Grant Permissions in MySQL\n\nMySQL is a database application for Linux and part of the popular LAMP stack (Linux, Apache, MySQL, PHP). A MySQL installation includes options of managing through a root user or specific user accounts.\n\nManaging user credentials in MySQL can be a time-consuming task, particularly when dealing with numerous MySQL instances spread across multiple servers.\n\nIn this article, we’ll be reviewing how to do the following:\n• How to create users in MySQL\n• How to grant user permissions in MySQL\n• How to revoke user permissions in MySQL\n\nOnce you have MySQL installed on the server(s) that will host your MySQL environment, you need to create a database and additional user accounts. In order to run the following commands, log into the MySQL instance with the MySQL root account.\n\nCreating a MySQL database involves a few simple steps. Here’s a step-by-step guide to creating a new MySQL database:\n\nNow that you are connected to MySQL, you can create a new database using SQL commands. In the MySQL command-line client or phpMyAdmin, use the following SQL statement to create a new database (replace “Apono_database” with the desired name of your database):\n\nTo ensure that the database was created successfully, you can check the list of databases. In the MySQL command-line client, use the following command:\n\n3. Use the New Database (Optional):\n\nIf you want to work with the newly created database, you need to switch to it using the following command in the MySQL command-line client:\n\nThat’s it! You have now successfully created a MySQL database. You can start creating tables and inserting data into it to build your application or manage your data. Remember to handle database credentials and access permissions with care to maintain security.\n\nCreating a MySQL database involves a few simple steps. Here’s a step-by-step guide to creating a new MySQL database:\n\nIf you don’t have MySQL installed on your system, you need to install it first. You can download the MySQL Community Server from the official MySQL website: https://dev.mysql.com/downloads/\n\nOnce you have MySQL installed, start the MySQL server. The process for starting the server varies depending on your operating system. On most systems, you can start the server using a command or by starting the MySQL service.\n\nAfter the server is running, you need to connect to it using the MySQL command-line client or a graphical tool like phpMyAdmin.\n\n– For the command-line client, open a terminal or command prompt and type:\n\nYou will be prompted to enter the MySQL root password.\n\n– For a graphical tool like phpMyAdmin, open a web browser and navigate to the phpMyAdmin URL. You can log in using your MySQL root credentials.\n\nNow that you are connected to MySQL, you can create a new database using SQL commands. In the MySQL command-line client or phpMyAdmin, use the following SQL statement to create a new database (replace “Apono_database” with the desired name of your database):\n\nTo ensure that the database was created successfully, you can check the list of databases. In the MySQL command-line client, use the following command:\n\n6. Use the New Database (Optional):\n\nIf you want to work with the newly created database, you need to switch to it using the following command in the MySQL command-line client:\n\nThat’s it! You have now successfully created a MySQL database. You can start creating tables and inserting data into it to build your application or manage your data. Remember to handle database credentials and access permissions with care to maintain security.\n\nHow to Grant Permissions in MySQL\n\nTo grant permissions in MySQL, you’ll need to have administrative privileges or the GRANT OPTION privilege on the database you want to modify. Here are the steps to grant permissions to a user in MySQL:\n\n1. Connect to MySQL: Open a terminal or command prompt and connect to MySQL using a user account with administrative privileges. For example:\n\nYou will be prompted to enter the password for the ‘root’ user or the administrative user you provided.\n\n2. Select the database: If you want to grant permissions for a specific database, first select it using the following command:\n\n3. Grant the permissions: Now, you can grant various privileges to the user using the `GRANT` statement. The basic syntax is as follows:\n\nReplace `privilege_type` with the specific privileges you want to grant. Here are some common privileges:\n\n– `SELECT`: Allows the user to read (SELECT) data from tables.\n\n– `INSERT`: Allows the user to insert new rows into tables.\n\n– `UPDATE`: Allows the user to modify existing rows in tables.\n\n– `DELETE`: Allows the user to remove rows from tables.\n\n– `CREATE`: Allows the user to create new tables or databases.\n\n– `DROP`: Allows the user to delete tables or databases.\n\n– `ALL PRIVILEGES`: Grants all privileges on the specified objects.\n\nReplace `database_name.table_name` with the specific database and table (or `*` for all tables) where you want to grant the privileges.\n\nReplace `’user’@’host’` with the username and the host from which the user will connect. For example, `’john’@’localhost’` refers to the user ‘john’ connecting from the same machine as the MySQL server.\n\nFor example, to grant SELECT, INSERT, UPDATE, and DELETE privileges on all tables of a database called ‘exampledb’ to a user ‘exampleuser’ connecting from ‘localhost’, you would use the following command:\n\n4. Apply the changes: After executing the `GRANT` statement, you need to apply the changes for them to take effect:\n\n5. Exit MySQL: When you’re done granting permissions, exit the MySQL command line interface by typing:\n\nThe user ‘exampleuser’ should now have the specified privileges on the ‘exampledb’ database or the specified tables within it. Make sure to grant the appropriate permissions based on your application’s requirements to ensure security and access control.\n\nHow to Revoke Permissions in MySQL\n\nTo revoke permissions in MySQL, you can use the `REVOKE` statement. This allows you to remove specific privileges from a user or role. Here’s how you can do it:\n\n1. Connect to MySQL: Open a terminal or command prompt and connect to MySQL using a user account with administrative privileges. For example:\n\nYou will be prompted to enter the password for the ‘root’ user or the administrative user you provided.\n\n2. Select the database: If you want to revoke permissions for a specific database, first select it using the following command:\n\n3. Revoke the permissions: Now, you can revoke specific privileges from the user using the `REVOKE` statement. The basic syntax is as follows:\n\nReplace `privilege_type` with the specific privileges you want to revoke. These should match the privileges you previously granted to the user. For example, if you previously granted SELECT, INSERT, UPDATE, and DELETE privileges, you would use the same list of privileges in the `REVOKE` statement.\n\nReplace `database_name.table_name` with the specific database and table (or `*` for all tables) from which you want to revoke the privileges.\n\nReplace `’user’@’host’` with the username and the host from which the user was connecting. For example, `’john’@’localhost’` refers to the user ‘john’ connecting from the same machine as the MySQL server.\n\nFor example, to revoke SELECT, INSERT, UPDATE, and DELETE privileges on all tables of a database called ‘exampledb’ from a user ‘exampleuser’ connecting from ‘localhost’, you would use the following command:\n\n4. Apply the changes: After executing the `REVOKE` statement, you need to apply the changes for them to take effect:\n\n5. Exit MySQL: When you’re done revoking permissions, exit the MySQL command line interface by typing:\n\nThat’s it! The user ‘exampleuser’ should no longer have the specified privileges on the ‘exampledb’ database or the specified tables within it. Make sure to carefully revoke only the permissions that are no longer necessary, to maintain proper access control and security.\n\nYou should now be able to create, modify, delete users and grant permissions in a MySQL database.\n\nRemember, to improve security and limit accidental damage it’s important to limit users only to the privileges required for their jobs.\n\nCheck out our article about"
    },
    {
        "link": "https://stackoverflow.com/questions/45289982/is-it-possible-to-create-a-view-with-read-only-option-in-mysql",
        "document": "It is possible to create a read-only view in an indirect way: create an user that has the privilege on all tables and privilege then use this user to create the view and specify in the statement:\n\nThe line is not needed if you use the limited user to create the view.\n\nOr you can use an admin user to create the view and in this case the line must contain the name of the user that will own the view.\n\nAt view definition time, the view creator must have the privileges needed to use the top-level objects accessed by the view. For example, if the view definition refers to table columns, the creator must have some privilege for each column in the select list of the definition, and the privilege for each column used elsewhere in the definition. If the definition refers to a stored function, only the privileges needed to invoke the function can be checked. The privileges required at function invocation time can be checked only as it executes: For different invocations, different execution paths within the function might be taken. The user who references a view must have appropriate privileges to access it ( to select from it, to insert into it, and so forth.) When a view has been referenced, privileges for objects accessed by the view are checked against the privileges held by the view account or invoker, depending on whether the characteristic is or , respectively.\n\nThis means the users of the view must have at least privilege for the view. Then, if the is then the privileges of the user are applied to the tables and views used in the view definition."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-create-a-new-user-and-grant-permissions-in-mysql",
        "document": "MySQL is an open-source relational database management system. It is commonly deployed as part of the LAMP stack (which stands for Linux, Apache, MySQL, and PHP) and, as of this writing, is the most popular open-source database in the world.\n\nThis guide outlines how to create a new MySQL user and grant them the permissions needed to perform a variety of actions.\n\nIn order to follow along with this guide, you’ll need access to a MySQL database. This guide assumes that this database is installed on a virtual private server running Ubuntu 20.04, though the principles it outlines should be applicable regardless of how you access your database.\n\nIf you don’t have access to a MySQL database and would like to set one up yourself, you can follow one of our guides on How To Install MySQL. Again, regardless of your server’s underlying operating system, the methods for creating a new MySQL user and granting them permissions will generally be the same.\n\nPlease note that any portions of example commands that you need to change or customize will be highlighted throughout this guide.\n\nUpon installation, MySQL creates a root user account which you can use to manage your database. This user has full privileges over the MySQL server, meaning it has complete control over every database, table, user, and so on. Because of this, it’s best to avoid using this account outside of administrative functions. This step outlines how to use the root MySQL user to create a new user account and grant it privileges.\n\nIn Ubuntu systems running MySQL (and later versions), the root MySQL user is set to authenticate using the plugin by default rather than with a password. This plugin requires that the name of the operating system user that invokes the MySQL client matches the name of the MySQL user specified in the command. This means that you need to precede the command with to invoke it with the privileges of the root Ubuntu user in order to gain access to the root MySQL user:\n\nOnce you have access to the MySQL prompt, you can create a new user with a statement. These follow this general syntax:\n\nAfter , you specify a username. This is immediately followed by an sign and then the hostname from which this user will connect. If you only plan to access this user locally from your Ubuntu server, you can specify . Wrapping both the username and host in single quotes isn’t always necessary, but doing so can help to prevent errors.\n\nYou have several options when it comes to choosing your user’s authentication plugin. The plugin mentioned previously can be convenient, as it provides strong security without requiring valid users to enter a password to access the database. But it also prevents remote connections, which can complicate things when external programs need to interact with MySQL.\n\nAs an alternative, you can leave out the portion of the syntax entirely to have the user authenticate with MySQL’s default plugin, . The MySQL documentation recommends this plugin for users who want to log in with a password due to its strong security features.\n\nRun the following command to create a user that authenticates with . Be sure to change to your preferred username and to a strong password of your choosing:\n\nAfter creating your new user, you can grant them the appropriate privileges.\n\nThe general syntax for granting user privileges is as follows:\n\nThe value in this example syntax defines what actions the user is allowed to perform on the specified and . You can grant multiple privileges to the same user in one command by separating each with a comma. You can also grant a user privileges globally by entering asterisks ( ) in place of the database and table names. In SQL, asterisks are special characters used to represent “all” databases or tables.\n\nTo illustrate, the following command grants a user global privileges to , , and databases, tables, and users, as well as the power to , , and data from any table on the server. It also grants the user the ability to query data with , create foreign keys with the keyword, and perform operations with the privilege. However, you should only grant users the permissions they need, so feel free to adjust your own user’s privileges as necessary.\n\nYou can find the full list of available privileges in the official MySQL documentation.\n\nRun this statement, replacing with your own MySQL user’s name, to grant these privileges to your user:\n\nNote that this statement also includes . This will allow your MySQL user to grant any permissions that it has to other users on the system.\n\nMany guides suggest running the command immediately after a or statement in order to reload the grant tables to ensure that the new privileges are put into effect:\n\nHowever, according to the official MySQL documentation, when you modify the grant tables indirectly with an account management statement like , the database will reload the grant tables immediately into memory, meaning that the command isn’t necessary in our case. On the other hand, running it won’t have any negative effect on the system.\n\nIf you need to revoke a permission, the structure is almost identical to granting it:\n\nNote that when revoking permissions, the syntax requires that you use , instead of which you used when granting the permissions.\n\nYou can review a user’s current permissions by running the command:\n\nJust as you can delete databases with , you can use to delete a user:\n\nAfter creating your MySQL user and granting them privileges, you can exit the MySQL client:\n\nIn the future, to log in as your new MySQL user, you’d use a command like the following:\n\nThe flag will cause the MySQL client to prompt you for your MySQL user’s password in order to authenticate.\n\nBy following this tutorial, you’ve learned how to add new users and grant them a variety of permissions in a MySQL database. From here, you could continue to explore and experiment with different permissions settings for your MySQL user, or you may want to learn more about some higher-level MySQL configurations.\n\nFor more information about the basics of MySQL, you can check out the following tutorials:\n• How To Create and Manage Databases in MySQL and MariaDB on a Cloud Server\n• How To Set Up Replication in MySQL\n• How To Configure MySQL Group Replication on Ubuntu 20.04"
    },
    {
        "link": "https://dev.mysql.com/doc/en/grant.html",
        "document": "The statement assigns privileges and roles to MySQL user accounts and roles. There are several aspects to the statement, described under the following topics:\n\nSeveral objects within statements are subject to quoting, although quoting is optional in many cases: Account, role, database, table, column, and routine names. For example, if a or value in an account name is legal as an unquoted identifier, you need not quote it. However, quotation marks are necessary to specify a string containing special characters (such as ), or a string containing special characters or wildcard characters such as (for example, ). Quote the user name and host name separately.\n• None Quote database, table, column, and routine names as identifiers.\n• None Quote user names and host names as identifiers or as strings. For string-quoting and identifier-quoting guidelines, see Section 11.1.1, “String Literals”, and Section 11.2, “Schema Object Names”. The use of the wildcard characters and as described in the next few paragraphs is deprecated, and thus subject to removal in a future version of MySQL. The and wildcards are permitted when specifying database names in statements that grant privileges at the database level ( ). This means, for example, that to use a character as part of a database name, specify it using the escape character as in the statement, to prevent the user from being able to access additional databases matching the wildcard pattern (for example, ). Issuing multiple statements containing wildcards may not have the expected effect on DML statements; when resolving grants involving wildcards, MySQL takes only the first matching grant into consideration. In other words, if a user has two database-level grants using wildcards that match the same database, the grant which was created first is applied. Consider the database and table created using the statements shown here: mysql> CREATE DATABASE db; Query OK, 1 row affected (0.01 sec) mysql> CREATE TABLE db.t (c INT); Query OK, 0 rows affected (0.01 sec) mysql> INSERT INTO db.t VALUES ROW(1); Query OK, 1 row affected (0.00 sec) Next (assuming that the current account is the MySQL account or another account having the necessary privileges), we create a user then issue two statements containing wildcards, like this: mysql> CREATE USER u; Query OK, 0 rows affected (0.01 sec) mysql> GRANT SELECT ON `d_`.* TO u; Query OK, 0 rows affected (0.01 sec) mysql> GRANT INSERT ON `d%`.* TO u; Query OK, 0 rows affected (0.00 sec) mysql> EXIT If we end the session and then log in again with the mysql client, this time as u, we see that this account has only the privilege provided by the first matching grant, but not the second: Welcome to the MySQL monitor. Commands end with ; or \\g. Your MySQL connection id is 10 Server version: 8.4.4-tr Source distribution Copyright (c) 2000, 2023, Oracle and/or its affiliates. Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement. mysql> TABLE db.t; +------+ | c | +------+ | 1 | +------+ 1 row in set (0.00 sec) mysql> INSERT INTO db.t VALUES ROW(2); ERROR 1142 (42000): INSERT command denied to user 'u'@'localhost' for table 't' In privilege assignments, MySQL interprets occurrences of unescaped and SQL wildcard characters in database names as literal characters under these circumstances:\n• None When a database name is not used to grant privileges at the database level, but as a qualifier for granting privileges to some other object such as a table or routine (for example, ).\n• None Enabling causes MySQL to interpret unescaped and wildcard characters in database names as literal characters, just as if they had been escaped as and . Because this changes how MySQL interprets privileges, it may be advisable to avoid unescaped wildcard characters in privilege assignments for installations where may be enabled. For more information, see Section 8.2.12, “Privilege Restriction Using Partial Revokes”.\n\nA value in a statement indicates a MySQL account to which the statement applies. To accommodate granting rights to users from arbitrary hosts, MySQL supports specifying the value in the form . You can specify wildcards in the host name. For example, applies to for any host in the domain, and applies to for any host in the class C subnet. The simple form is a synonym for . MySQL automatically assigns all privileges granted to to the account as well. This behavior is deprecated, and is subject to removal in a future version of MySQL. MySQL does not support wildcards in user names. To refer to an anonymous user, specify an account with an empty user name with the statement: GRANT ALL ON test.* TO ''@'localhost' ...; In this case, any user who connects from the local host with the correct password for the anonymous user is permitted access, with the privileges associated with the anonymous-user account. For additional information about user name and host name values in account names, see Section 8.2.4, “Specifying Account Names”. If you permit local anonymous users to connect to the MySQL server, you should also grant privileges to all local users as . Otherwise, the anonymous user account for in the system table is used when named users try to log in to the MySQL server from the local machine. For details, see Section 8.2.6, “Access Control, Stage 1: Connection Verification”. To determine whether this issue applies to you, execute the following query, which lists any anonymous users: To avoid the problem just described, delete the local anonymous user account using this statement:\n\ncan specify additional information about the privilege context to use for statement execution by using an clause. This syntax is visible at the SQL level, although its primary purpose is to enable uniform replication across all nodes of grantor privilege restrictions imposed by partial revokes, by causing those restrictions to appear in the binary log. For information about partial revokes, see Section 8.2.12, “Privilege Restriction Using Partial Revokes”. When the clause is specified, statement execution takes into account any privilege restrictions associated with the named user, including all roles specified by , if present. The result is that the privileges actually granted by the statement may be reduced relative to those specified. These conditions apply to the clause:\n• None has an effect only when the named has privilege restrictions (which implies that the system variable is enabled).\n• None If is given, all roles named must be granted to the named .\n• None The named should be a MySQL account specified as , , or . The current user may be named together with for the case that the executing user wants to execute with a set of roles applied that may differ from the roles active within the current session.\n• None cannot be used to gain privileges not possessed by the user who executes the statement. The executing user must have at least the privileges to be granted, but the clause can only restrict the privileges granted, not escalate them.\n• None With respect to the privileges to be granted, cannot specify a user/role combination that has more privileges (fewer restrictions) than the user who executes the statement. The user/role combination is permitted to have more privileges than the executing user, but only if the statement does not grant those additional privileges.\n• None is supported only for granting global privileges ( ).\n• None is not supported for grants. The following example illustrates the effect of the clause. Create a user that has some global privileges, as well as restrictions on those privileges: CREATE USER u1; GRANT SELECT, INSERT, UPDATE, DELETE ON *.* TO u1; REVOKE INSERT, UPDATE ON schema1.* FROM u1; REVOKE SELECT ON schema2.* FROM u1; Also create a role that lifts some of the privilege restrictions and grant the role to : CREATE ROLE r1; GRANT INSERT ON schema1.* TO r1; GRANT SELECT ON schema2.* TO r1; GRANT r1 TO u1; Now, using an account that has no privilege restrictions of its own, grant to multiple users the same set of global privileges, but each with different restrictions imposed by the clause, and check which privileges are actually granted.\n• None The statement here has no clause, so the privileges granted are exactly those specified: mysql> CREATE USER u2; mysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u2; mysql> SHOW GRANTS FOR u2; +-------------------------------------------------+ | Grants for u2@% | +-------------------------------------------------+ | GRANT SELECT, INSERT, UPDATE ON *.* TO `u2`@`%` | +-------------------------------------------------+\n• None The statement here has an clause, so the privileges granted are those specified but with the restrictions from applied: mysql> CREATE USER u3; mysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u3 AS u1; mysql> SHOW GRANTS FOR u3; +----------------------------------------------------+ | Grants for u3@% | +----------------------------------------------------+ | GRANT SELECT, INSERT, UPDATE ON *.* TO `u3`@`%` | | REVOKE INSERT, UPDATE ON `schema1`.* FROM `u3`@`%` | | REVOKE SELECT ON `schema2`.* FROM `u3`@`%` | +----------------------------------------------------+ As mentioned previously, the clause can only add privilege restrictions; it cannot escalate privileges. Thus, although has the privilege, that is not included in the privileges granted because the statement does not specify granting .\n• None The clause for the statement here makes the role active for . That role lifts some of the restrictions on . Consequently, the privileges granted have some restrictions, but not so many as for the previous statement: mysql> CREATE USER u4; mysql> GRANT SELECT, INSERT, UPDATE ON *.* TO u4 AS u1 WITH ROLE r1; mysql> SHOW GRANTS FOR u4; +-------------------------------------------------+ | Grants for u4@% | +-------------------------------------------------+ | GRANT SELECT, INSERT, UPDATE ON *.* TO `u4`@`%` | | REVOKE UPDATE ON `schema1`.* FROM `u4`@`%` | +-------------------------------------------------+ If a statement includes an clause, privilege restrictions on the user who executes the statement are ignored (rather than applied as they would be in the absence of an clause).\n\nThe optional clause is used to enable a user to grant privileges to other users. The clause gives the user the ability to give to other users any privileges the user has at the specified privilege level. To grant the privilege to an account without otherwise changing its privileges, do this: GRANT USAGE ON *.* TO 'someuser'@'somehost' WITH GRANT OPTION; Be careful to whom you give the privilege because two users with different privileges may be able to combine privileges! You cannot grant another user a privilege which you yourself do not have; the privilege enables you to assign only those privileges which you yourself possess. Be aware that when you grant a user the privilege at a particular privilege level, any privileges the user possesses (or may be given in the future) at that level can also be granted by that user to other users. Suppose that you grant a user the privilege on a database. If you then grant the privilege on the database and specify , that user can give to other users not only the privilege, but also . If you then grant the privilege to the user on the database, the user can grant , , and . For a nonadministrative user, you should not grant the privilege globally or for the system schema. If you do that, the user can try to subvert the privilege system by renaming tables! For additional information about security risks associated with particular privileges, see Section 8.2.2, “Privileges Provided by MySQL”."
    },
    {
        "link": "https://atlassian.com/data/admin/grant-permissions-for-mysql",
        "document": "You can create a user with table level permissions in MySQL by performing the following: 1. Connect to MySQL as a user with the Create_user_priv and Grant_priv. Determine which users have these privileges by running the following query. Your user will already need the SELECT privilege on MySQL.user to run the query.\n\n2. Run the following query to generate the GRANT statements for your restricted user. Replace ‘mydatabase,’ ‘myuser,’ and ‘myhost’ with specific information for your database. Note that the quotations surrounding myuser and mypassword are two single quotes, not double. The characters surrounding myhost and ,TABLE_NAME, are backticks (the key is located under the escape key on your keyboard).\n\nFor example, if you wanted to connect the user ‘chartio_read_only’ to your ‘Reports’ database using the chartio_connect client you would run the following:\n\nIf you wanted to connect the user ‘chartio_direct_connect’ to your ‘Analytics’ database using a direct connection from Atlassian Analytics’s servers, you would run the following:\n\n4. Select the statements for only the tables you would like to grant access to and run those queries. For example, if we only wanted to grant access to the Users and Visitors table we would run:\n\nNow you can safely access your database with this user and be assured it only has permissions to the specified tables."
    },
    {
        "link": "https://atlassian.com/data/admin/how-to-grant-all-privileges-on-a-database-in-mysql",
        "document": "How to grant all privileges on a database in MySQL\n\nTo begin editing privileges in MySQL, you must first login to your server and then connect to the client. Typically you’ll want to connect with or whichever account is your primary, initial ‘super user’ account that has full access throughout the entire MySQL installation.\n\nTypically the user will have been assigned an authentication password when MySQL was installed, but if that is not the case, you should take steps to up your security by adding passwords as illustrated in the official documentation."
    },
    {
        "link": "https://stackoverflow.com/questions/6239131/how-to-grant-remote-access-permissions-to-mysql-server-for-user",
        "document": "If I am not mistaken, root@localhost means that user root can access the server only from localhost . How do I tell MySQL to grant root the permission to access this mysql server from every other machine (in the same network), too?\n\nIf I do SHOW GRANTS in my mysql database I get\n\nThis grants root access with the same password from any machine in : GRANT ALL PRIVILEGES ON *.* TO 'root'@'%.example.com' IDENTIFIED BY 'some_characters' WITH GRANT OPTION; FLUSH PRIVILEGES; If name resolution is not going to work, you may also grant access by IP or subnet: GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.%' IDENTIFIED BY 'some_characters' WITH GRANT OPTION; FLUSH PRIVILEGES;\n\nYou need to take some steps to make sure first mysql and then root user is accessible from outside:\n• None Check value of in , if it's set to , you can change it to to allow access from all IPs or whatever ip that you want to connect from.\n• None Grant remote access the root user from any ip (or specify your ip instead of ) GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'your_root_password' WITH GRANT OPTION; FLUSH PRIVILEGES;\n\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'YOUR_PASS' WITH GRANT OPTION; FLUSH PRIVILEGES; you can restrict user to specific database and specific table. you can change root with any user you created and % is to allow all IP. You can restrict it by changing %.168.1.1 etc too. If that doesn't resolve, then also modify my.cnf or my.ini and comment these lines\n• Restart MySQL and repeat above steps again.\n\nBy mysql 8 and later version, you cannot add a user by granting privileges. it means with this query: GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'type-root-password-here' WITH GRANT OPTION; FLUSH PRIVILEGES; ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'IDENTIFIED BY 'written password' at line 1 this means you don't have a root user for % domain. so you need to first insert the user and then grant privileges like this: mysql> CREATE USER 'root'@'%' IDENTIFIED BY 'your password'; Query OK, 0 rows affected (0.11 sec) mysql> GRANT ALL ON *.* TO 'root'@'%'; Query OK, 0 rows affected (0.15 sec) mysql> FLUSH PRIVILEGES; Dont forget to replace passwords with your specific passwords.\n\nThose SQL grants the others are sharing do work. If you're still unable to access the database, it's possible that you just have a firewall restriction for the port. It depends on your server type (and any routers in between) as to how to open up the connection. Open TCP port 3306 inbound, and give it a similar access rule for external machines (all/subnet/single IP/etc.).\n\nIn my case I was trying to connect to a remote mysql server on cent OS. After going through a lot of solutions (granting all privileges, removing ip bindings,enabling networking) problem was still not getting solved. As it turned out, while looking into various solutions,I came across iptables, which made me realize mysql port 3306 was not accepting connections. Here is a small note on how I checked and resolved this issue. -Adding ip table rule to allow connections on the port: -Would not recommend this for production environment, but if your iptables are not configured properly, adding the rules might not still solve the issue. In that case following should be done:\n\nGo into database and setup root user: sudo mysql -u root SELECT User,Host FROM mysql.user; DROP USER 'root'@'localhost'; CREATE USER 'root'@'%' IDENTIFIED BY 'obamathelongleggedmacdaddy'; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' WITH GRANT OPTION; FLUSH PRIVILEGES; exit; sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf # edit the line to be this: bind-address=0.0.0.0 sudo systemctl stop mysql sudo systemctl start mysql From another machine, test.. Obvs port (3306) on mysqld machine must allow connection from test machine. All the additional \"security\" of MySql doesn't help security at all, it just complicates and obfuscates, it is now actually easier to screw it up than in the old days, where you just used a really long password.\n\nThis worked for me. But there was a strange problem that even I tryed first those it didnt affect. I updated phpmyadmin page and got it somehow working. If you need access to local-xampp-mysql. You can go to xampp-shell -> opening command prompt. Then mysql -uroot -p --port=3306 or mysql -uroot -p (if there is password set). After that you can grant those acces from mysql shell page (also can work from localhost/phpmyadmin). Just adding these if somebody find this topic and having beginner problems."
    }
]