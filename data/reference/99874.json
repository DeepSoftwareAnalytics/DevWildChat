[
    {
        "link": "https://tutorialspoint.com/design-a-tm-which-recognizes-palindromes-over-a-b",
        "document": "Step 1 - If there is no input, reach the final state and halt.\n\nStep 2 - If the input = “a‟, then traverse forward to process the last symbol = “a‟. Convert both a‟s to B‟.\n\nStep 3 - Move left to read the next symbol.\n\nStep 4 - If the input = “b‟, replace it by B and move right to process its equivalent “B‟ at the rightmost end.\n\nStep 5 - Convert the last ’b’ to ‘B’.\n\nStep 6 - Move left and process step 2 – 5 until there are no more inputs to process.\n\nStep 7 - If the machine reaches the final state after processing the entire input string, then the string is a palindrome that halts the machine.\n\nThe turing machine is as follows −\n\nThe Turing machine, M is given by M = (Q, Σ, Γ, δ, q0, B, F)\n• None δ ⇒ Given by the above mentioned transition diagram,\n\nConsider a string aabbaa, as shown below −"
    },
    {
        "link": "https://studocu.com/in/document/jain-deemed-to-be-university/theory-of-computation/question-bank-4part-03/46738432",
        "document": "Step 1 - If there is no input, reach the ﬁnal state and halt.\n\nStep 2 - If the input = “a , then traverse f or ward t o process the last symbol = “a .\n\nC onvert both a s to B .\n\nStep 3 - Mov e left to r ead the next symbol.\n\nStep 4 - If the input = “b , replace it by B and move right to proc ess its equivalent “B\n\nStep 5 - C onvert the last ’ b ’ to ‘B ’ .\n\nStep 6 - Mov e left and proc ess step 2 – 5 until there are no more inputs to proc ess.\n\nStep 7 - If the machine reaches the ﬁnal state af ter processing the entire input string,\n\nthen the string is a palindrome that halts the machine."
    },
    {
        "link": "https://geeksforgeeks.org/turing-machine-to-check-whether-given-string-is-even-palindrome-or-not",
        "document": "Turing Machine to check whether given string is Even Palindrome or not\n\nA string w is calledif reading w from left to right gives the same result as reading w from right to left.An even palindrome has even number of symbols.The tape contains the input string w, the tape head is on the leftmost symbol of w, and the Turing machine is in the start state Q0.The tape head reads the leftmost symbol of w, deletes this symbol and “remembers” it by means of a state. Then the tape head moves to rightmost symbol and tests whether it is equal to the (already deleted) leftmost symbol.\n\nIf they are equal, then the rightmost symbol is deleted, the tape head moves to the new leftmost symbol, and the whole process is repeated . Else the machine can’t reach the final state and the string will be rejected.\n• Step-1: We start with Q0 state if we get a symbol “a” as input then there should also be “a” at the ending of the string then only the string is palindrome and we have to verify that. We first make the current input “a” to B blank and go to state Q1 move rightwards to traverse the string till we reach the end. Keep the input symbols a or b whichever comes in ways should be remain unchanged. We can reach the end of the string when we get Blank as the input symbol then we change state to Q2 and test if the previous symbol is “a” then we change to state Q3 and then only we will replace it by Blank and we have successfully tested that string is palindrome till this point now we will traverse back or leftwards (keeping a and b unchanged which comes in way) on the string and till we get Blank which is the symbol which we made Blank at the start and we change state to Q0.Now we repeat the same procedure for “b” as input.\n• Step-2: Till this point if the string was palindrome then it would have returned to state Q0 after all iterations and if the string was not palindrome then we would stuck at the states Q2 or Q5 and when stuck at these points we cant reach Q0 and hence can not reach the final state or acceptance state Q7.\n• Step-3: If the string was palindrome then there will be only Blank symbol left and hence we test it at Q0 if we get blank hence the string gets accepted and is palindrome, at this point there is one more condition is included which is of null string or as empty string is also palindrome hence gets accepted.\n\nR, L – direction of movement of one unit on either side . B-Blank a, b-symbols whose combination string is to be tested"
    },
    {
        "link": "https://jkmaterials.yolasite.com/resources/materials/FLAT/pdf/UNIT-VII.pdf",
        "document": ""
    },
    {
        "link": "https://eecis.udel.edu/~isafro/fa21/part6-turingmachines.pdf",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/turing-machine-in-toc",
        "document": "Turing Machines (TM) play a crucial role in the Theory of Computation (TOC). They are abstract computational devices used to explore the limits of what can be computed. Turing Machines help prove that certain languages and problems have no algorithmic solution. Their simplicity makes them an effective tool for studying computational theory, yet they are as powerful as modern computers. Turing Machine was invented by Alan Turing in 1936 and it is used to accept Recursive Enumerable Languages (generated by Type-0 Grammar).\n• None A Turing Machine consists of an infinite tape, a read/write head, and a set of rules that determine how it reads, writes, and moves on the tape. Despite its simplicity, a TM can simulate any real-world computation, making it as powerful as modern computers but with infinite memory.\n• None The Turing machine’s behavior is determined by a finite state machine, which consists of a finite set of states, a transition function that defines the actions to be taken based on the current state and the symbol being read, and a set of start and accept states.\n• None The TM begins in the start state and performs the actions specified by the transition function until it reaches an accept or reject state. If it reaches an accept state, the computation is considered successful; if it reaches a reject state, the computation is considered unsuccessful.\n• None In the context of automata theory and the theory of computation, Turing machines are used to study the properties of algorithms and to determine what problems can and cannot be solved by computers. They provide a way to model the behavior of algorithms and to analyze their computational complexity, which is the amount of time and memory they require to solve a problem.\n\nTuring machines are an important tool for studying the limits of computation and for understanding the foundations of computer science. They provide a simple yet powerful model of computation that has been widely used in research and has had a profound impact on our understanding of algorithms and computation.\n\nWhile one might consider using programming languages like C to study computation, Turing Machines are preferred because:\n• None They are simpler to analyze.\n• None They possess infinite memory, making them even more powerful than real-world computers.\n\nA Turing Machine consists of a tape of infinite length on which read and writes operation can be performed. The tape consists of infinite cells on which each cell either contains input symbol or a special symbol called blank. It also consists of a head pointer which points to cell currently being read and it can move in both directions.\n\nWe construct a Turing Machine (TM) for the language L = {0ⁿ1ⁿ | n ≥ 1}, which accepts strings of equal 0s followed by equal 1s.\n\nLet us see how this turing machine works for 0011. Initially head points to 0 which is underlined and state is q0 as:\n\nThe move will be δ(q0, 0) = (q1, X, R). It means, it will go to state q1, replace 0 by X and head will move to right as:\n\nThe move will be δ(q1, 0) = (q1, 0, R) which means it will remain in same state and without changing any symbol, it will move to right as:\n\nThe move will be δ(q1, 1) = (q2, Y, L) which means it will move to q2 state and changing 1 to Y, it will move to left as:\n\nWorking on it in the same way, the machine will reach state q3 and head will point to B as shown:\n\nUsing move δ(q3, B) = halt, it will stop and accepted.\n• None In non-deterministic turing machine, there can be more than one possible move for a given state and tape symbol, but non-deterministic TM does not add any power.\n• None Every non-deterministic TM can be converted into deterministic TM.\n• None In multi-tape turing machine, there can be more than one tape and corresponding head pointers, but it does not add any power to turing machine.\n• None Every multi-tape TM can be converted into single tape TM.\n\nQuestion: A single tape Turing Machine M has two states q0 and q1, of which q0 is the starting state. The tape alphabet of M is {0, 1, B} and its input alphabet is {0, 1}. The symbol B is the blank symbol used to indicate end of an input string. The transition function of M is described in the following table.\n\nThe table is interpreted as illustrated below. The entry (q1, 1, R) in row q0 and column 1 signifies that if M is in state q0 and reads 1 on the current tape square, then it writes 1 on the same tape square, moves its tape head one position to the right and transitions to state q1. Which of the following statements is true about M?\n• None M does not halt on any string in (0 + 1)+\n• None M does not halt on any string in (00 + 1)*\n• None M halts on all string ending in a 0\n• None M halts on all string ending in a 1\n\nSolution: Let us see whether machine halts on string ‘1’. Initially state will be q0, head will point to 1 as:\n\nUsing δ(q0, 1) = (q1, 1, R), it will move to state q1 and head will move to right as:\n\nUsing δ(q1, B) = (q0, B, L), it will move to state q0 and head will move to left as:\n\nIt will run in the same way again and again and not halt.\n\nOption D says M halts on all string ending with 1, but it is not halting for 1. So, option D is incorrect.\n\nLet us see whether machine halts on string ‘0’. Initially state will be q0, head will point to 1 as:\n\nUsing δ(q0, 0) = (q1, 1, R), it will move to state q1 and head will move to right as:\n\nUsing δ(q1,B)=(q0,B,L), it will move to state q0 and head will move to left as:\n\nIt will run in the same way again and again and not halt.\n\nOption C says M halts on all string ending with 0, but it is not halting for 0. So, option C is incorrect.\n\nOption B says that TM does not halt for any string (00 + 1)*. But NULL string is a part of (00 + 1)* and TM will halt for NULL string. For NULL string, tape will be,\n\nUsing δ(q0, B) = halt, TM will halt. As TM is halting for NULL, this option is also incorrect. \n\nSo, option (A) is correct.\n\nWhat is the purpose of Multi-Tape Turing Machines?\n\nWhat is the Halting Problem?\n\nWhat are some limitations of Turing Machines?"
    },
    {
        "link": "https://people.cs.nott.ac.uk/psztxa/g51mal/notes-7x.pdf",
        "document": ""
    },
    {
        "link": "https://tutorialspoint.com/automata_theory/representation_of_turing_machine.htm",
        "document": "The Turing Machine is the basic fundamental model of a modern computer. It is an abstract model of computation. It was proposed by Alan Turing in 1936. At that time, there were no computers. The Turing machine can carry out any computational process that a modern computer can perform. It is the machine format of unrestricted language.\n\nIn this chapter, we will cover the basic concepts of Turing machine with its representation and examples of how it works.\n\nThe transitional function δ is a mapping from Q × Γ → (Q Γ × {L, R, H}). This means that from one state, by getting one input from the input tape, the machine moves to a state. It writes a symbol on the tape and moves to left, right, or halts.\n\nA Turing machine consists of three main parts: an input tape, a read-write head, finite control.\n\nThe input tape contains the input alphabets. It has an infinite number of blanks at the left and right side of the input symbols. The read-write head reads an input symbol from the input tape and sends it to the finite control. The machine must be in some state. In the finite control, the transitional functions are written. Based on the present state and the present input, a suitable transitional function is executed.\n\nWhen a transitional function is executed, the Turing machine performs these operations −\n• The machine goes into some state.\n• The machine writes a symbol in the cell of the input tape from where the input symbol was scanned.\n• The machine moves the reading head to the left or right or halts.\n\nThe Instantaneous Description (ID) of a Turing machine remembers the following at a given instance of time −\n• The contents of all the cells of the tape, starting from the rightmost cell up to at least the last cell, containing a non-blank symbol and containing all cells up to the cell being scanned.\n• The cell currently being scanned by the read-write head.\n• The state of the machine.\n\nLet us look at an example of a Turing machine that accepts the language $\\mathrm{L \\:=\\: \\{ a^n b^n\\:, \\:n \\:\\geq\\: 1 \\}}$. This language consists of strings with equal number of a's followed by b's, where the number of a's and b's is at least 1.\n\nLet's break down how this Turing machine works −\n• It starts in state q0 and replaces the first 'a' with 'X'.\n• It moves right, keeping 'a's unchanged, until it finds the first 'b'.\n• It replaces the first 'b' with 'Y' and moves left.\n• It moves left until it finds 'X', then goes back to step 1.\n• If it finds 'Y' instead of 'b', it moves right until it finds a blank, then halts in an accepting state.\n\nThis ID shows how the Turing machine processes the string \"aaabbb\" step by step, replacing a's with X's and b's with Y's until it accepts the string.\n\nThe Turing machine is a powerful model of computation. It can represent complex languages and perform sophisticated computations. In this chapter, we presented the basic idea of Turing machines with how it works. In addition, we provided suitable state diagram for a machine where it checks equal number of as and bs."
    },
    {
        "link": "https://faculty.cc.gatech.edu/~ladha/S24/4510/L9.pdf",
        "document": ""
    },
    {
        "link": "https://stem.elearning.unipd.it/mod/resource/view.php?id=599764",
        "document": ""
    }
]