[
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/shell/launch",
        "document": "Once your application has located a file object, the next step is often to act on it in some way. For instance, your application might want to launch another application that allows the user to modify a data file. If the file of interest is an executable, your application might want to simply launch it. This document discusses how to use ShellExecute or ShellExecuteEx to perform these tasks.\n• Using ShellExecute and ShellExecuteEx\n• Using ShellExecuteEx to Provide Activation Services from a Site\n• Using ShellExecute to Launch the Search Dialog Box\n• A Simple Example of How to Use ShellExecuteEx\n\nTo use ShellExecute or ShellExecuteEx, your application must specify the file or folder object that is to be acted on, and a verb that specifies the operation. For ShellExecute, assign these values to the appropriate parameters. For ShellExecuteEx, fill in the appropriate members of a SHELLEXECUTEINFO structure. There are also several other members or parameters that can be used to fine-tune the behavior of the two functions.\n\nFile and folder objects can be part of the file system or virtual objects, and they can be identified by either paths or pointers to item identifier lists (PIDLs).\n\nThe verbs available for an object are essentially the items that you find on an object's shortcut menu. To find which verbs are available, look in the registry under\n\nwhere object_clsid is the class identifier (CLSID) of the object, and verb is the name of the available verb. The verb\\command subkey contains the data indicating what happens when that verb is invoked.\n\nTo find out which verbs are available for predefined Shell objects, look in the registry under\n\nwhere object_name is the name of the predefined Shell object. Again, the verb\\command subkey contains the data indicating what happens when that verb is invoked.\n\nEach verb corresponds to the command that would be used to launch the application from a console window. The open verb is a good example, as it is commonly supported. For .exe files, open simply launches the application. However, it is more commonly used to launch an application that operates on a particular file. For instance, .txt files can be opened by Microsoft WordPad. The open verb for a .txt file would thus correspond to something like the following command:\n\nWhen you use ShellExecute or ShellExecuteEx to open a .txt file, Wordpad.exe is launched with the specified file as its argument. Some commands can have additional arguments, such as flags, that can be added as needed to launch the application properly. For further discussion of shortcut menus and verbs, see Extending Shortcut Menus.\n\nIn general, trying to determine the list of available verbs for a particular file is somewhat complicated. In many cases, you can simply set the lpVerb parameter to NULL, which invokes the default command for the file type. This procedure is usually equivalent to setting lpVerb to \"open\", but some file types may have a different default command. For further information, see Extending Shortcut Menus and the ShellExecuteEx reference documentation.\n\nUsing ShellExecuteEx to Provide Activation Services from a Site\n\nA site chain's services can control many behaviors of item activation. As of Windows 8, you can provide a pointer to the site chain to ShellExecuteEx to enable these behaviors. To provide the site to ShellExecuteEx:\n• Specify the SEE_MASK_FLAG_HINST_IS_SITE flag in the fMask member of SHELLEXECUTEINFO.\n• Provide the IUnknown in the hInstApp member of SHELLEXECUTEINFO.\n\nUsing ShellExecute to Launch the Search Dialog Box\n\nWhen a user right-clicks a folder icon in Windows Explorer, one of the menu items is \"Search\". If they select that item, the Shell launches its Search utility. This utility displays a dialog box that can be used to search files for a specified text string. An application can programmatically launch the Search utility for a directory by calling ShellExecute, with \"find\" as the lpVerb parameter, and the directory path as the lpFile parameter. For instance, the following line of code launches the Search utility for the c:\\MyPrograms directory.\n\nA Simple Example of How to Use ShellExecuteEx\n\nThe following sample console application illustrates the use of ShellExecuteEx. Most error checking code has been omitted for clarity.\n\nThe application first retrieves the PIDL of the Windows directory, and enumerates its contents until it finds the first .bmp file. Unlike the earlier example, IShellFolder::GetDisplayNameOf is used to retrieve the file's parsing name instead of its display name. Because this is a file system folder, the parsing name is a fully qualified path, which is what is needed for ShellExecuteEx.\n\nOnce the first .bmp file has been located, appropriate values are assigned to the members of a SHELLEXECUTEINFO structure. The lpFile member is set to the parsing name of the file, and the lpVerb member to NULL, to begin the default operation. In this case, the default operation is \"open\". The structure is then passed to ShellExecuteEx, which launches the default handler for bitmap files, typically MSPaint.exe, to open the file. After the function returns, the PIDLs are freed and the Windows folder's IShellFolder interface is released."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea",
        "document": "Performs an operation on a specified file.\n\nA handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.\n\nA pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:\n\nLaunches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.\n\nInitiates a search beginning in the directory specified by lpDirectory.\n\nOpens the item specified by the lpFile parameter. The item can be a file or folder.\n\nPrints the file specified by lpFile. If lpFile is not a document file, the function fails.\n\nLaunches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.\n\nThe default verb is used, if available. If not, the \"open\" verb is used. If neither verb is available, the system uses the first verb listed in the registry.\n\nA pointer to a null-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the \"print\" verb. If a relative path is used for the lpDirectory parameter do not use a relative path for lpFile.\n\nIf lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL.\n\nA pointer to a null-terminated string that specifies the default (working) directory for the action. If this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do not use a relative path for lpDirectory.\n\nThe flags that specify how an application is to be displayed when it is opened. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function.\n\nIf the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an INT_PTR and compared to either 32 or the following error codes below.\n\nBecause ShellExecute can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecute is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here:\n\nThere are certainly instances where ShellExecute does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initialize COM before using this function.\n\nThis method allows you to execute any commands in a folder's shortcut menu or stored in the registry.\n\nTo open a folder, use either of the following calls:\n\nTo explore a folder, use the following call:\n\nTo launch the Shell's Find utility for a directory, use the following call.\n\nIf lpOperation is NULL, the function opens the file specified by lpFile. If lpOperation is \"open\" or \"explore\", the function attempts to open or explore the folder.\n\nTo obtain information about the application that is launched as a result of calling ShellExecute, use ShellExecuteEx.\n\nNote The Launch folder windows in a separate process setting in Folder Options affects ShellExecute. If that option is disabled (the default setting), ShellExecute uses an open Explorer window rather than launch a new one. If no Explorer window is open, ShellExecute launches a new one."
    },
    {
        "link": "https://stackoverflow.com/questions/35425210/how-can-i-run-shellexecute-with-administrator-privilege-in-c",
        "document": "I want to kill one application named, Sample.exe\n\nI tried with TerminateProcess, it was returning ACCESS_DENIED error while killing the Sample.exe. Later I identified it is an Access Rights issue.\n\nHow can I use ShellExecute API for killing the Sample.exe with Administrador privilege"
    },
    {
        "link": "https://stackoverflow.com/questions/4335334/how-to-call-a-win32-api-with-elevated-priviledges-on-windows-7",
        "document": "You can use the ShellExecute API call to launch an executable with elevated privileges.\n\nHowever, if UAC (user access control) is enabled on the machine, the user will still get the UAC prompt asking for permissions to run elevated.\n\nSo I don't think you can avoid the prompt for elevation permission, but at least your user doesn't have to manually run the program as an admin.\n\nPlease let me know if you need help in how to launch an executable as an admin."
    },
    {
        "link": "https://vbforums.com/showthread.php?489554-RESOLVED-could-you-please-explain-the-shell-execute-function",
        "document": "Click Here to Expand Forum to Full Width"
    },
    {
        "link": "https://stackoverflow.com/questions/6418791/requesting-administrator-privileges-at-run-time",
        "document": "Is it possible to get a C++ application running in Windows to request administrator privileges from the operating system at run time?\n\nI know it can be done at compile time, but can't seem to find anywhere whether it can be done at run time.\n\nThanks for your help!\n\nEDIT: What if I want the current instance to have elevated privileges? For example, I might have data stored in memory which I want to keep."
    },
    {
        "link": "https://stackoverflow.com/questions/11586139/how-to-run-application-which-requires-admin-rights-from-one-that-doesnt-have-th",
        "document": "I've been stuck on this for a few hours until I've finally managed to do it. There are already links which pointed me the right direction:\n• Is it possible for the executable to ask for Administrator rights? (Windows 7)\n\nBut I've thought that simple overview of the problem could help someone :)."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutea",
        "document": "Performs an operation on a specified file.\n\nA handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.\n\nA pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:\n\nLaunches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.\n\nInitiates a search beginning in the directory specified by lpDirectory.\n\nOpens the item specified by the lpFile parameter. The item can be a file or folder.\n\nPrints the file specified by lpFile. If lpFile is not a document file, the function fails.\n\nLaunches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.\n\nThe default verb is used, if available. If not, the \"open\" verb is used. If neither verb is available, the system uses the first verb listed in the registry.\n\nA pointer to a null-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the \"print\" verb. If a relative path is used for the lpDirectory parameter do not use a relative path for lpFile.\n\nIf lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL.\n\nA pointer to a null-terminated string that specifies the default (working) directory for the action. If this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do not use a relative path for lpDirectory.\n\nThe flags that specify how an application is to be displayed when it is opened. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function.\n\nIf the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an INT_PTR and compared to either 32 or the following error codes below.\n\nBecause ShellExecute can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecute is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here:\n\nThere are certainly instances where ShellExecute does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initialize COM before using this function.\n\nThis method allows you to execute any commands in a folder's shortcut menu or stored in the registry.\n\nTo open a folder, use either of the following calls:\n\nTo explore a folder, use the following call:\n\nTo launch the Shell's Find utility for a directory, use the following call.\n\nIf lpOperation is NULL, the function opens the file specified by lpFile. If lpOperation is \"open\" or \"explore\", the function attempts to open or explore the folder.\n\nTo obtain information about the application that is launched as a result of calling ShellExecute, use ShellExecuteEx.\n\nNote The Launch folder windows in a separate process setting in Folder Options affects ShellExecute. If that option is disabled (the default setting), ShellExecute uses an open Explorer window rather than launch a new one. If no Explorer window is open, ShellExecute launches a new one."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecutew",
        "document": "Performs an operation on a specified file.\n\nA handle to the parent window used for displaying a UI or error messages. This value can be NULL if the operation is not associated with a window.\n\nA pointer to a null-terminated string, referred to in this case as a verb, that specifies the action to be performed. The set of available verbs depends on the particular file or folder. Generally, the actions available from an object's shortcut menu are available verbs. The following verbs are commonly used:\n\nLaunches an editor and opens the document for editing. If lpFile is not a document file, the function will fail.\n\nInitiates a search beginning in the directory specified by lpDirectory.\n\nOpens the item specified by the lpFile parameter. The item can be a file or folder.\n\nPrints the file specified by lpFile. If lpFile is not a document file, the function fails.\n\nLaunches an application as Administrator. User Account Control (UAC) will prompt the user for consent to run the application elevated or enter the credentials of an administrator account used to run the application.\n\nThe default verb is used, if available. If not, the \"open\" verb is used. If neither verb is available, the system uses the first verb listed in the registry.\n\nA pointer to a null-terminated string that specifies the file or object on which to execute the specified verb. To specify a Shell namespace object, pass the fully qualified parse name. Note that not all verbs are supported on all objects. For example, not all document types support the \"print\" verb. If a relative path is used for the lpDirectory parameter do not use a relative path for lpFile.\n\nIf lpFile specifies an executable file, this parameter is a pointer to a null-terminated string that specifies the parameters to be passed to the application. The format of this string is determined by the verb that is to be invoked. If lpFile specifies a document file, lpParameters should be NULL.\n\nA pointer to a null-terminated string that specifies the default (working) directory for the action. If this value is NULL, the current working directory is used. If a relative path is provided at lpFile, do not use a relative path for lpDirectory.\n\nThe flags that specify how an application is to be displayed when it is opened. If lpFile specifies a document file, the flag is simply passed to the associated application. It is up to the application to decide how to handle it. It can be any of the values that can be specified in the nCmdShow parameter for the ShowWindow function.\n\nIf the function succeeds, it returns a value greater than 32. If the function fails, it returns an error value that indicates the cause of the failure. The return value is cast as an HINSTANCE for backward compatibility with 16-bit Windows applications. It is not a true HINSTANCE, however. It can be cast only to an INT_PTR and compared to either 32 or the following error codes below.\n\nBecause ShellExecute can delegate execution to Shell extensions (data sources, context menu handlers, verb implementations) that are activated using Component Object Model (COM), COM should be initialized before ShellExecute is called. Some Shell extensions require the COM single-threaded apartment (STA) type. In that case, COM should be initialized as shown here:\n\nThere are certainly instances where ShellExecute does not use one of these types of Shell extension and those instances would not require COM to be initialized at all. Nonetheless, it is good practice to always initialize COM before using this function.\n\nThis method allows you to execute any commands in a folder's shortcut menu or stored in the registry.\n\nTo open a folder, use either of the following calls:\n\nTo explore a folder, use the following call:\n\nTo launch the Shell's Find utility for a directory, use the following call.\n\nIf lpOperation is NULL, the function opens the file specified by lpFile. If lpOperation is \"open\" or \"explore\", the function attempts to open or explore the folder.\n\nTo obtain information about the application that is launched as a result of calling ShellExecute, use ShellExecuteEx.\n\nNote The Launch folder windows in a separate process setting in Folder Options affects ShellExecute. If that option is disabled (the default setting), ShellExecute uses an open Explorer window rather than launch a new one. If no Explorer window is open, ShellExecute launches a new one."
    },
    {
        "link": "https://forums.codeguru.com/showthread.php?474731-Run-an-exe-from-ShellExecute-with-administrator-permission-in-Vista",
        "document": "Click Here to Expand Forum to Full Width \n\n \n\n * The Best Reasons to Target Windows 8\n\n Learn some of the best reasons why you should seriously consider bringing your Android mobile development expertise to bear on the Windows 8 platform.\n• * Porting from Android to Windows 8: The Real Story\n\n Do you have an Android application? How hard would it really be to port to Windows 8?\n• * Guide to Porting Android Applications to Windows 8\n\n If you've already built for Android, learn what do you really need to know to port your application to Windows Phone 8.\n• * HTML5 Development Center\n\n Our portal for articles, videos, and news on HTML5, CSS3, and JavaScript\n• * Windows App Gallery\n\n See the Windows 8.x apps we've spotlighted or submit your own app to the gallery!"
    }
]