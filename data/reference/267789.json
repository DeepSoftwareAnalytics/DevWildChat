[
    {
        "link": "https://docs.python.org/3/library/subprocess.html",
        "document": "The module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module intends to replace several older modules and functions:\n\nInformation about how the module can be used to replace these modules and functions can be found in the following sections.\n\nInstances of the class have the following methods: Check if child process has terminated. Set and return attribute. Otherwise, returns . Wait for child process to terminate. Set and return attribute. If the process does not terminate after timeout seconds, raise a exception. It is safe to catch this exception and retry the wait. This will deadlock when using or and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use when using pipes to avoid that. When the parameter is not , then (on POSIX) the function is implemented using a busy loop (non-blocking call and short sleeps). Use the module for an asynchronous wait: see . Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate and set the attribute. The optional input argument should be data to be sent to the child process, or , if no data should be sent to the child. If streams were opened in text mode, input must be a string. Otherwise, it must be bytes. returns a tuple . The data will be strings if streams were opened in text mode; otherwise, bytes. Note that if you want to send data to the process’s stdin, you need to create the Popen object with . Similarly, to get anything other than in the result tuple, you need to give and/or too. If the process does not terminate after timeout seconds, a exception will be raised. Catching this exception and retrying communication will not lose any output. The child process is not killed if the timeout expires, so in order to cleanup properly a well-behaved application should kill the child process and finish communication: The data read is buffered in memory, so do not use this method if the data size is large or unlimited. Sends the signal signal to the child. Do nothing if the process completed. On Windows, SIGTERM is an alias for . CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes started with a creationflags parameter which includes . Stop the child. On POSIX OSs the method sends to the child. On Windows the Win32 API function is called to stop the child. Kills the child. On POSIX OSs the function sends SIGKILL to the child. On Windows is an alias for . The following attributes are also set by the class for you to access. Reassigning them to new values is unsupported: The args argument as it was passed to – a sequence of program arguments or else a single string. If the stdin argument was , this attribute is a writeable stream object as returned by . If the encoding or errors arguments were specified or the text or universal_newlines argument was , the stream is a text stream, otherwise it is a byte stream. If the stdin argument was not , this attribute is . If the stdout argument was , this attribute is a readable stream object as returned by . Reading from the stream provides output from the child process. If the encoding or errors arguments were specified or the text or universal_newlines argument was , the stream is a text stream, otherwise it is a byte stream. If the stdout argument was not , this attribute is . If the stderr argument was , this attribute is a readable stream object as returned by . Reading from the stream provides error output from the child process. If the encoding or errors arguments were specified or the text or universal_newlines argument was , the stream is a text stream, otherwise it is a byte stream. If the stderr argument was not , this attribute is . Use rather than , or to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process. The process ID of the child process. Note that if you set the shell argument to , this is the process ID of the spawned shell. The child return code. Initially , is set by a call to the , , or methods if they detect that the process has terminated. A value indicates that the process hadn’t yet terminated at the time of the last method call. A negative value indicates that the child was terminated by signal (POSIX only).\n\nThe class and following constants are only available on Windows. Partial support of the Windows STARTUPINFO structure is used for creation. The following attributes can be set by passing them as keyword-only arguments. A bit field that determines whether certain attributes are used when the process creates a window. If specifies , this attribute is the standard input handle for the process. If is not specified, the default for standard input is the keyboard buffer. If specifies , this attribute is the standard output handle for the process. Otherwise, this attribute is ignored and the default for standard output is the console window’s buffer. If specifies , this attribute is the standard error handle for the process. Otherwise, this attribute is ignored and the default for standard error is the console window’s buffer. If specifies , this attribute can be any of the values that can be specified in the parameter for the ShowWindow function, except for . Otherwise, this attribute is ignored. is provided for this attribute. It is used when is called with . A dictionary of additional attributes for process creation as given in , see UpdateProcThreadAttribute. Sequence of handles that will be inherited. close_fds must be true if non-empty. The handles must be temporarily made inheritable by when passed to the constructor, else will be raised with Windows error (87). In a multithreaded process, use caution to avoid leaking handles that are marked inheritable when combining this feature with concurrent calls to other process creation functions that inherit all handles such as . This also applies to standard handle redirection, which temporarily creates inheritable handles. The module exposes the following constants. The standard input device. Initially, this is the console input buffer, . The standard output device. Initially, this is the active console screen buffer, . The standard error device. Initially, this is the active console screen buffer, . Hides the window. Another window will be activated. Specifies that the , , and attributes contain additional information. Specifies that the attribute contains additional information. A parameter to specify that the Working in Background mouse cursor will be displayed while a process is launching. This is the default behavior for GUI processes. A parameter to specify that the mouse cursor will not be changed when launching a process. The new process has a new console, instead of inheriting its parent’s console (the default). A parameter to specify that a new process group will be created. This flag is necessary for using on the subprocess. This flag is ignored if is specified. A parameter to specify that a new process will have an above average priority. A parameter to specify that a new process will have a below average priority. A parameter to specify that a new process will have a high priority. A parameter to specify that a new process will have an idle (lowest) priority. A parameter to specify that a new process will have a normal priority. (default) A parameter to specify that a new process will have realtime priority. You should almost never use REALTIME_PRIORITY_CLASS, because this interrupts system threads that manage mouse input, keyboard input, and background disk flushing. This class can be appropriate for applications that “talk” directly to hardware or that perform brief tasks that should have limited interruptions. A parameter to specify that a new process will not create a window. A parameter to specify that a new process will not inherit its parent’s console. This value cannot be used with CREATE_NEW_CONSOLE. A parameter to specify that a new process does not inherit the error mode of the calling process. Instead, the new process gets the default error mode. This feature is particularly useful for multithreaded shell applications that run with hard errors disabled. A parameter to specify that a new process is not associated with the job.\n\nPrior to Python 3.5, these three functions comprised the high level API to subprocess. You can now use in many cases, but lots of existing code calls these functions. Run the command described by args. Wait for command to complete, then return the attribute. Code needing to capture stdout or stderr should use instead: To suppress stdout or stderr, supply a value of . The arguments shown above are merely some common ones. The full function signature is the same as that of the constructor - this function passes all supplied arguments other than timeout directly through to that interface. Do not use or with this function. The child process will block if it generates enough output to a pipe to fill up the OS pipe buffer as the pipes are not being read from. Changed in version 3.12: Changed Windows shell search order for . The current directory and are replaced with and . As a result, dropping a malicious program named into a current directory no longer works. Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise . The object will have the return code in the attribute. If was unable to start the process it will propagate the exception that was raised. Code needing to capture stdout or stderr should use instead: To suppress stdout or stderr, supply a value of . The arguments shown above are merely some common ones. The full function signature is the same as that of the constructor - this function passes all supplied arguments other than timeout directly through to that interface. Do not use or with this function. The child process will block if it generates enough output to a pipe to fill up the OS pipe buffer as the pipes are not being read from. Changed in version 3.12: Changed Windows shell search order for . The current directory and are replaced with and . As a result, dropping a malicious program named into a current directory no longer works. Run command with arguments and return its output. If the return code was non-zero it raises a . The object will have the return code in the attribute and any output in the attribute. The arguments shown above are merely some common ones. The full function signature is largely the same as that of - most arguments are passed directly through to that interface. One API deviation from behavior exists: passing will behave the same as (or , depending on other arguments) rather than using the parent’s standard input file handle. By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level. This behaviour may be overridden by setting text, encoding, errors, or universal_newlines to as described in Frequently Used Arguments and . To also capture standard error in the result, use : 'ls: non_existent_file: No such file or directory\n\n' Changed in version 3.4: Support for the input keyword argument was added. Changed in version 3.6: encoding and errors were added. See for details. Added in version 3.7: text was added as a more readable alias for universal_newlines. Changed in version 3.12: Changed Windows shell search order for . The current directory and are replaced with and . As a result, dropping a malicious program named into a current directory no longer works.\n\nIn this section, “a becomes b” means that b can be used as a replacement for a. All “a” functions in this section fail (more or less) silently if the executed program cannot be found; the “b” replacements raise instead. In addition, the replacements using will fail with a if the requested operation produces a non-zero return code. The output is still available as the attribute of the raised exception. In the following examples, we assume that the relevant functions have already been imported from the module. # Allow p1 to receive a SIGPIPE if p2 exits. The call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1. Alternatively, for trusted input, the shell’s own pipeline support may still be used directly:\n• None Calling the program through the shell is usually not required.\n• None The return value is encoded differently to that of .\n• None The function ignores SIGINT and SIGQUIT signals while the command is running, but the caller must do this separately when using the module. A more realistic example would look like this: If the cmd argument to popen2 functions is a string, the command is executed through /bin/sh. If it is a list, the command is directly executed. and basically work as , except that:\n• None raises an exception if the execution fails.\n• None The capturestderr argument is replaced with the stderr argument.\n• None and must be specified.\n• None popen2 closes all file descriptors by default, but you have to specify with to guarantee this behavior on all platforms or past Python versions.\n\nConverting an argument sequence to a string on Windows¶ On Windows, an args sequence is converted to a string that can be parsed using the following rules (which correspond to the rules used by the MS C runtime):\n• None Arguments are delimited by white space, which is either a space or a tab.\n• None A string surrounded by double quotation marks is interpreted as a single argument, regardless of white space contained within. A quoted string can be embedded in an argument.\n• None A double quotation mark preceded by a backslash is interpreted as a literal double quotation mark.\n• None Backslashes are interpreted literally, unless they immediately precede a double quotation mark.\n• None If backslashes immediately precede a double quotation mark, every pair of backslashes is interpreted as a literal backslash. If the number of backslashes is odd, the last backslash escapes the next double quotation mark as described in rule 3. Module which provides function to parse and escape command lines. Disabling use of or ¶ On Linux, defaults to using the system call internally when it is safe to do so rather than . This greatly improves performance. If you ever encounter a presumed highly unusual situation where you need to prevent from being used by Python, you can set the attribute to a false value. Setting this has no impact on use of which could use internally within its libc implementation. There is a similar attribute if you need to prevent use of that. It is safe to set these to false on any Python version. They will have no effect on older versions when unsupported. Do not assume the attributes are available to read. Despite their names, a true value does not indicate that the corresponding function will be used, only that it may be. Please file issues any time you have to use these private knobs with a way to reproduce the issue you were seeing. Link to that issue from a comment in your code."
    },
    {
        "link": "https://docs.python.org/2/library/subprocess.html",
        "document": "The module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module intends to replace several older modules and functions:\n\nInformation about how this module can be used to replace the older functions can be found in the subprocess-replacements section.\n\nThe recommended way to launch subprocesses is to use the following convenience functions. For more advanced use cases when these do not meet your needs, use the underlying interface. Run the command described by args. Wait for command to complete, then return the attribute. The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the slightly odd notation in the abbreviated signature). The full function signature is the same as that of the constructor - this functions passes all supplied arguments directly through to that interface. Using can be a security hazard. See the warning under Frequently Used Arguments for details. Do not use or with this function as that can deadlock based on the child process output volume. Use with the method when you need pipes. Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise . The object will have the return code in the attribute. The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the slightly odd notation in the abbreviated signature). The full function signature is the same as that of the constructor - this functions passes all supplied arguments directly through to that interface. Using can be a security hazard. See the warning under Frequently Used Arguments for details. Do not use or with this function as that can deadlock based on the child process output volume. Use with the method when you need pipes. Run command with arguments and return its output as a byte string. If the return code was non-zero it raises a . The object will have the return code in the attribute and any output in the attribute. The arguments shown above are merely the most common ones, described below in Frequently Used Arguments (hence the slightly odd notation in the abbreviated signature). The full function signature is largely the same as that of the constructor, except that stdout is not permitted as it is used internally. All other supplied arguments are passed directly through to the constructor. To also capture standard error in the result, use : 'ls: non_existent_file: No such file or directory\n\n' Using can be a security hazard. See the warning under Frequently Used Arguments for details. Do not use with this function as that can deadlock based on the child process error volume. Use with the method when you need a stderr pipe. Special value that can be used as the stdin, stdout or stderr argument to and indicates that a pipe to the standard stream should be opened. Special value that can be used as the stderr argument to and indicates that standard error should go into the same handle as standard output. Exception raised when a process run by or returns a non-zero exit status. Command that was used to spawn the child process. Output of the child process if this exception is raised by . Otherwise, . To support a wide variety of use cases, the constructor (and the convenience functions) accept a large number of optional arguments. For most typical use cases, many of these arguments can be safely left at their default values. The arguments that are most commonly needed are: args is required for all calls and should be a string, or a sequence of program arguments. Providing a sequence of arguments is generally preferred, as it allows the module to take care of any required escaping and quoting of arguments (e.g. to permit spaces in file names). If passing a single string, either shell must be (see below) or else the string must simply name the program to be executed without specifying any arguments. stdin, stdout and stderr specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are , an existing file descriptor (a positive integer), an existing file object, and . indicates that a new pipe to the child should be created. With the default settings of , no redirection will occur; the child’s file handles will be inherited from the parent. Additionally, stderr can be , which indicates that the stderr data from the child process should be captured into the same file handle as for stdout. When stdout or stderr are pipes and universal_newlines is then all line endings will be converted to as described for the universal newlines mode argument to . If shell is , the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of to a user’s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, , , , , , and ). Executing shell commands that incorporate unsanitized input from an untrusted source makes a program vulnerable to shell injection, a serious security flaw which can result in arbitrary command execution. For this reason, the use of is strongly discouraged in cases where the command string is constructed from external input: \"What file would you like to display? What file would you like to display? disables all shell based features, but does not suffer from this vulnerability; see the Note in the constructor documentation for helpful hints in getting to work. When using , can be used to properly escape whitespace and shell metacharacters in strings that are going to be used to construct shell commands. These options, along with all of the other options, are described in more detail in the constructor documentation. The underlying process creation and management in this module is handled by the class. It offers a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions. Execute a child program in a new process. On Unix, the class uses -like behavior to execute the child program. On Windows, the class uses the Windows function. The arguments to are as follows. args should be a sequence of program arguments or else a single string. By default, the program to execute is the first item in args if args is a sequence. If args is a string, the interpretation is platform-dependent and described below. See the shell and executable arguments for additional differences from the default behavior. Unless otherwise stated, it is recommended to pass args as a sequence. On Unix, if args is a string, the string is interpreted as the name or path of the program to execute. However, this can only be done if not passing arguments to the program. can be useful when determining the correct tokenization for args, especially in complex cases: Note in particular that options (such as -input) and arguments (such as eggs.txt) that are separated by whitespace in the shell go in separate list elements, while arguments that need quoting or backslash escaping when used in the shell (such as filenames containing spaces or the echo command shown above) are single list elements. On Windows, if args is a sequence, it will be converted to a string in a manner described in Converting an argument sequence to a string on Windows. This is because the underlying operates on strings. The shell argument (which defaults to ) specifies whether to use the shell as the program to execute. If shell is , it is recommended to pass args as a string rather than as a sequence. On Unix with , the shell defaults to . If args is a string, the string specifies the command to execute through the shell. This means that the string must be formatted exactly as it would be when typed at the shell prompt. This includes, for example, quoting or backslash escaping filenames with spaces in them. If args is a sequence, the first item specifies the command string, and any additional items will be treated as additional arguments to the shell itself. That is to say, does the equivalent of: On Windows with , the environment variable specifies the default shell. The only time you need to specify on Windows is when the command you wish to execute is built into the shell (e.g. dir or copy). You do not need to run a batch file or console-based executable. Passing can be a security hazard if combined with untrusted input. See the warning under Frequently Used Arguments for details. bufsize, if given, has the same meaning as the corresponding argument to the built-in open() function: means unbuffered, means line buffered, any other positive value means use a buffer of (approximately) that size. A negative bufsize means to use the system default, which usually means fully buffered. The default value for bufsize is (unbuffered). If you experience performance issues, it is recommended that you try to enable buffering by setting bufsize to either -1 or a large enough positive value (such as 4096). The executable argument specifies a replacement program to execute. It is very seldom needed. When , executable replaces the program to execute specified by args. However, the original args is still passed to the program. Most programs treat the program specified by args as the command name, which can then be different from the program actually executed. On Unix, the args name becomes the display name for the executable in utilities such as ps. If , on Unix the executable argument specifies a replacement shell for the default . stdin, stdout and stderr specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are , an existing file descriptor (a positive integer), an existing file object, and . indicates that a new pipe to the child should be created. With the default settings of , no redirection will occur; the child’s file handles will be inherited from the parent. Additionally, stderr can be , which indicates that the stderr data from the child process should be captured into the same file handle as for stdout. If preexec_fn is set to a callable object, this object will be called in the child process just before the child is executed. (Unix only) If close_fds is true, all file descriptors except , and will be closed before the child process is executed. (Unix only). Or, on Windows, if close_fds is true then no handles will be inherited by the child process. Note that on Windows, you cannot set close_fds to true and also redirect the standard handles by setting stdin, stdout or stderr. If cwd is not , the child’s current directory will be changed to cwd before it is executed. Note that this directory is not considered when searching the executable, so you can’t specify the program’s path relative to cwd. If env is not , it must be a mapping that defines the environment variables for the new process; these are used instead of inheriting the current process’ environment, which is the default behavior. If specified, env must provide any variables required for the program to execute. On Windows, in order to run a side-by-side assembly the specified env must include a valid . If universal_newlines is , the file objects stdout and stderr are opened as text files in universal newlines mode. Lines may be terminated by any of , the Unix end-of-line convention, , the old Macintosh convention or , the Windows convention. All of these external representations are seen as by the Python program. This feature is only available if Python is built with universal newline support (the default). Also, the newlines attribute of the file objects , and are not updated by the communicate() method. If given, startupinfo will be a object, which is passed to the underlying function. creationflags, if given, can be or . (Windows only) Exceptions raised in the child process, before the new program has started to execute, will be re-raised in the parent. Additionally, the exception object will have one extra attribute called , which is a string containing traceback information from the child’s point of view. The most common exception raised is . This occurs, for example, when trying to execute a non-existent file. Applications should prepare for exceptions. A will be raised if is called with invalid arguments. and will raise if the called process returns a non-zero return code. Unlike some other popen functions, this implementation will never call a system shell implicitly. This means that all characters, including shell metacharacters, can safely be passed to child processes. Obviously, if the shell is invoked explicitly, then it is the application’s responsibility to ensure that all whitespace and metacharacters are quoted appropriately.\n\nInstances of the class have the following methods: Check if child process has terminated. Set and return attribute. Wait for child process to terminate. Set and return attribute. This will deadlock when using and/or and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use to avoid that. Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. The optional input argument should be a string to be sent to the child process, or , if no data should be sent to the child. Note that if you want to send data to the process’s stdin, you need to create the Popen object with . Similarly, to get anything other than in the result tuple, you need to give and/or too. The data read is buffered in memory, so do not use this method if the data size is large or unlimited. Sends the signal signal to the child. On Windows, SIGTERM is an alias for . CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes started with a creationflags parameter which includes . Stop the child. On Posix OSs the method sends SIGTERM to the child. On Windows the Win32 API function is called to stop the child. Kills the child. On Posix OSs the function sends SIGKILL to the child. On Windows is an alias for . The following attributes are also available: Use rather than , or to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process. If the stdin argument was , this attribute is a file object that provides input to the child process. Otherwise, it is . If the stdout argument was , this attribute is a file object that provides output from the child process. Otherwise, it is . If the stderr argument was , this attribute is a file object that provides error output from the child process. Otherwise, it is . The process ID of the child process. Note that if you set the shell argument to , this is the process ID of the spawned shell. The child return code, set by and (and indirectly by ). A value indicates that the process hasn’t terminated yet. A negative value indicates that the child was terminated by signal (Unix only).\n\nIn this section, “a becomes b” means that b can be used as a replacement for a. All “a” functions in this section fail (more or less) silently if the executed program cannot be found; the “b” replacements raise instead. In addition, the replacements using will fail with a if the requested operation produces a non-zero return code. The output is still available as the attribute of the raised exception. In the following examples, we assume that the relevant functions have already been imported from the module. # Allow p1 to receive a SIGPIPE if p2 exits. The p1.stdout.close() call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1. Alternatively, for trusted input, the shell’s own pipeline support may still be used directly:\n• None Calling the program through the shell is usually not required. A more realistic example would look like this: On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as the command to execute, in which case arguments will be passed directly to the program without shell intervention. This usage can be replaced as follows: On Unix, popen2 also accepts a sequence as the command to execute, in which case arguments will be passed directly to the program without shell intervention. This usage can be replaced as follows: and basically work as , except that:\n• None raises an exception if the execution fails.\n• None the capturestderr argument is replaced with the stderr argument.\n• None and must be specified.\n• None popen2 closes all file descriptors by default, but you have to specify with ."
    },
    {
        "link": "https://docs.python.org/3.7/library/subprocess.html",
        "document": "The module allows you to spawn new processes, connect to their input/output/error pipes, and obtain their return codes. This module intends to replace several older modules and functions:\n\nInformation about how the module can be used to replace these modules and functions can be found in the following sections.\n\nInstances of the class have the following methods: Check if child process has terminated. Set and return attribute. Otherwise, returns . Wait for child process to terminate. Set and return attribute. If the process does not terminate after timeout seconds, raise a exception. It is safe to catch this exception and retry the wait. This will deadlock when using or and the child process generates enough output to a pipe such that it blocks waiting for the OS pipe buffer to accept more data. Use when using pipes to avoid that. The function is implemented using a busy loop (non-blocking call and short sleeps). Use the module for an asynchronous wait: see . Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. The optional input argument should be data to be sent to the child process, or , if no data should be sent to the child. If streams were opened in text mode, input must be a string. Otherwise, it must be bytes. returns a tuple . The data will be strings if streams were opened in text mode; otherwise, bytes. Note that if you want to send data to the process’s stdin, you need to create the Popen object with . Similarly, to get anything other than in the result tuple, you need to give and/or too. If the process does not terminate after timeout seconds, a exception will be raised. Catching this exception and retrying communication will not lose any output. The child process is not killed if the timeout expires, so in order to cleanup properly a well-behaved application should kill the child process and finish communication: The data read is buffered in memory, so do not use this method if the data size is large or unlimited. Sends the signal signal to the child. On Windows, SIGTERM is an alias for . CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes started with a creationflags parameter which includes . Stop the child. On POSIX OSs the method sends SIGTERM to the child. On Windows the Win32 API function is called to stop the child. Kills the child. On POSIX OSs the function sends SIGKILL to the child. On Windows is an alias for . The following attributes are also available: The args argument as it was passed to – a sequence of program arguments or else a single string. If the stdin argument was , this attribute is a writeable stream object as returned by . If the encoding or errors arguments were specified or the universal_newlines argument was , the stream is a text stream, otherwise it is a byte stream. If the stdin argument was not , this attribute is . If the stdout argument was , this attribute is a readable stream object as returned by . Reading from the stream provides output from the child process. If the encoding or errors arguments were specified or the universal_newlines argument was , the stream is a text stream, otherwise it is a byte stream. If the stdout argument was not , this attribute is . If the stderr argument was , this attribute is a readable stream object as returned by . Reading from the stream provides error output from the child process. If the encoding or errors arguments were specified or the universal_newlines argument was , the stream is a text stream, otherwise it is a byte stream. If the stderr argument was not , this attribute is . Use rather than , or to avoid deadlocks due to any of the other OS pipe buffers filling up and blocking the child process. The process ID of the child process. Note that if you set the shell argument to , this is the process ID of the spawned shell. The child return code, set by and (and indirectly by ). A value indicates that the process hasn’t terminated yet. A negative value indicates that the child was terminated by signal (POSIX only).\n\nThe class and following constants are only available on Windows. Partial support of the Windows STARTUPINFO structure is used for creation. The following attributes can be set by passing them as keyword-only arguments. A bit field that determines whether certain attributes are used when the process creates a window. If specifies , this attribute is the standard input handle for the process. If is not specified, the default for standard input is the keyboard buffer. If specifies , this attribute is the standard output handle for the process. Otherwise, this attribute is ignored and the default for standard output is the console window’s buffer. If specifies , this attribute is the standard error handle for the process. Otherwise, this attribute is ignored and the default for standard error is the console window’s buffer. If specifies , this attribute can be any of the values that can be specified in the parameter for the ShowWindow function, except for . Otherwise, this attribute is ignored. is provided for this attribute. It is used when is called with . A dictionary of additional attributes for process creation as given in , see UpdateProcThreadAttribute. Sequence of handles that will be inherited. close_fds must be true if non-empty. The handles must be temporarily made inheritable by when passed to the constructor, else will be raised with Windows error (87). In a multithreaded process, use caution to avoid leaking handles that are marked inheritable when combining this feature with concurrent calls to other process creation functions that inherit all handles such as . This also applies to standard handle redirection, which temporarily creates inheritable handles. The module exposes the following constants. The standard input device. Initially, this is the console input buffer, . The standard output device. Initially, this is the active console screen buffer, . The standard error device. Initially, this is the active console screen buffer, . Hides the window. Another window will be activated. Specifies that the , , and attributes contain additional information. Specifies that the attribute contains additional information. The new process has a new console, instead of inheriting its parent’s console (the default). A parameter to specify that a new process group will be created. This flag is necessary for using on the subprocess. This flag is ignored if is specified. A parameter to specify that a new process will have an above average priority. A parameter to specify that a new process will have a below average priority. A parameter to specify that a new process will have a high priority. A parameter to specify that a new process will have an idle (lowest) priority. A parameter to specify that a new process will have an normal priority. (default) A parameter to specify that a new process will have realtime priority. You should almost never use REALTIME_PRIORITY_CLASS, because this interrupts system threads that manage mouse input, keyboard input, and background disk flushing. This class can be appropriate for applications that “talk” directly to hardware or that perform brief tasks that should have limited interruptions. A parameter to specify that a new process will not create a window. A parameter to specify that a new process will not inherit its parent’s console. This value cannot be used with CREATE_NEW_CONSOLE. A parameter to specify that a new process does not inherit the error mode of the calling process. Instead, the new process gets the default error mode. This feature is particularly useful for multithreaded shell applications that run with hard errors disabled. A parameter to specify that a new process is not associated with the job.\n\nPrior to Python 3.5, these three functions comprised the high level API to subprocess. You can now use in many cases, but lots of existing code calls these functions. Run the command described by args. Wait for command to complete, then return the attribute. Code needing to capture stdout or stderr should use instead: To suppress stdout or stderr, supply a value of . The arguments shown above are merely some common ones. The full function signature is the same as that of the constructor - this function passes all supplied arguments other than timeout directly through to that interface. Do not use or with this function. The child process will block if it generates enough output to a pipe to fill up the OS pipe buffer as the pipes are not being read from. Changed in version 3.7.17: Changed Windows shell search order for . The current directory and are replaced with and . As a result, dropping a malicious program named into a current directory no longer works. Run command with arguments. Wait for command to complete. If the return code was zero then return, otherwise raise . The object will have the return code in the attribute. Code needing to capture stdout or stderr should use instead: To suppress stdout or stderr, supply a value of . The arguments shown above are merely some common ones. The full function signature is the same as that of the constructor - this function passes all supplied arguments other than timeout directly through to that interface. Do not use or with this function. The child process will block if it generates enough output to a pipe to fill up the OS pipe buffer as the pipes are not being read from. Changed in version 3.7.17: Changed Windows shell search order for . The current directory and are replaced with and . As a result, dropping a malicious program named into a current directory no longer works. Run command with arguments and return its output. If the return code was non-zero it raises a . The object will have the return code in the attribute and any output in the attribute. The arguments shown above are merely some common ones. The full function signature is largely the same as that of - most arguments are passed directly through to that interface. However, explicitly passing to inherit the parent’s standard input file handle is not supported. By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level. This behaviour may be overridden by setting text, encoding, errors, or universal_newlines to as described in Frequently Used Arguments and . To also capture standard error in the result, use : 'ls: non_existent_file: No such file or directory\n\n' Changed in version 3.4: Support for the input keyword argument was added. Changed in version 3.6: encoding and errors were added. See for details. New in version 3.7: text was added as a more readable alias for universal_newlines. Changed in version 3.7.17: Changed Windows shell search order for . The current directory and are replaced with and . As a result, dropping a malicious program named into a current directory no longer works.\n\nIn this section, “a becomes b” means that b can be used as a replacement for a. All “a” functions in this section fail (more or less) silently if the executed program cannot be found; the “b” replacements raise instead. In addition, the replacements using will fail with a if the requested operation produces a non-zero return code. The output is still available as the attribute of the raised exception. In the following examples, we assume that the relevant functions have already been imported from the module. # Allow p1 to receive a SIGPIPE if p2 exits. The p1.stdout.close() call after starting the p2 is important in order for p1 to receive a SIGPIPE if p2 exits before p1. Alternatively, for trusted input, the shell’s own pipeline support may still be used directly:\n• None Calling the program through the shell is usually not required. A more realistic example would look like this: If the cmd argument to popen2 functions is a string, the command is executed through /bin/sh. If it is a list, the command is directly executed. and basically work as , except that:\n• None raises an exception if the execution fails.\n• None The capturestderr argument is replaced with the stderr argument.\n• None and must be specified.\n• None popen2 closes all file descriptors by default, but you have to specify with to guarantee this behavior on all platforms or past Python versions."
    },
    {
        "link": "https://datacamp.com/tutorial/python-subprocess",
        "document": "Let's now take a look at some Python subprocess examples.\n\nThe method is a convenient way to run a subprocess and wait for it to complete. It lets you choose the command to run and add options like arguments, environment variables, and input/output redirections. Once the subprocess is started, the method blocks until the subprocess completes and returns a object, which contains the return code and output of the subprocess.\n\nThe method takes several arguments, some of which are:\n• : The command to run and its arguments, passed as a list of strings.\n• : When set to True, will capture the standard output and standard error.\n• : When set to True, will return the stdout and stderr as string, otherwise as bytes.\n• : a boolean value that indicates whether to check the return code of the subprocess, if check is true and the return code is non-zero, then subprocess is raised.\n• : A value in seconds that specifies how long to wait for the subprocess to complete before timing out.\n• : A boolean value that indicates whether to run the command in a shell. This means that the command is passed as a string, and shell-specific features, such as wildcard expansion and variable substitution, can be used.\n\nThe method also returns a object, which contains the following attributes:\n• : The command and arguments that were run.\n• : The return code of the subprocess.\n• : The standard output of the subprocess, as a bytes object.\n• : The standard error of the subprocess, as a bytes object.\n\nLinux or mac users replace to and get rid of the argument.\n\nYou can also run a python script using the method. Let’s start by creating a simple Python script in file\n\nSave this file as . Now, you can use the module to run this file:\n\nFor simple use-cases, you can directly pass a python command in the function. Here is how:\n\nIn the list, the first element is a path to executable Python (your path may be different). The second element, is a Python tag that allows the user to write Python code as text to the command line. The third element, , is the Python command itself.\n\nExample 4: Using the check argument\n\nThe check argument is an optional argument of the function in the Python subprocess module. It is a boolean value that controls whether the function should check the return code of the command being run.\n\nWhen check is set to , the function will check the return code of the command and raise a exception if the return code is non-zero. The exception will have the return code, , , and as attributes.\n\nWhen check is set to (default), the function will not check the return code and will not raise an exception, even if the command fails.\n\nNotice that the command failed because does not exist. As opposed to when you set , your process won’t fail; instead, you will get the error message in .\n\nis a lower-level interface to running subprocesses, while is a higher-level wrapper around that is intended to be more convenient to use.\n\nallows you to start a new process and interact with its standard input, output, and error streams. It returns a handle to the running process that can be used to wait for the process to complete, check its return code, or terminate it.\n\nis a more convenient function that allows you to run a command and capture its output in a single call, without having to create a object and manage the streams yourself. It also allows you to specify various options for running the command, such as whether to raise an exception if the command fails.\n\nIn general, you should use if you just need to run a command and capture its output and if you need more control over the process, such as interacting with its input and output streams.\n\nThe class takes the same arguments as , including the args that specify the command to be run and other optional arguments such as , , , , , and . Also, the class has several methods that allow you to interact with the process, such as , , , , and .\n\nThis will run the command and create a new object, which is stored in the variable . The standard output and error of the command are captured using the method and stored in the variables output and errors, respectively.\n\nis useful when you want more control over the process, such as sending input to it, receiving output from it, or waiting for it to complete.\n\nis a function in the Python subprocess module that is used to run a command in a separate process and wait for it to complete. It returns the return code of the command, which is zero if the command was successful, and non-zero if it failed.\n\nThe function takes the same arguments as , including the args which specify the command to be run, and other optional arguments, such as , , , , , and .\n\nThe standard output and error of the command are sent to the same and as the parent process unless you redirect them using and arguments.\n\nThis will run the command in a separate process and wait for it to complete. The command's return code will be stored in the variable, which will be zero if the command was successful, and non-zero if it failed.\n\nis useful when you want to run a command and check the return code, but do not need to capture the output.\n\nis a function in the subprocess module that is similar to , but it only returns the standard output of the command, and raises a exception if the return code is non-zero.\n\nThe function takes the same arguments as , including the args which specify the command to be run, and other optional arguments, such as , , , , and .\n\nThe function returns the standard output of the command as a bytes object or string, if is passed.\n\nPython subprocess module provides a way to create and interact with child processes, which can be used to run other programs or commands. One of the features of the subprocess module is the ability to create pipes, which allow communication between the parent and child processes.\n\nA pipe is a unidirectional communication channel that connects one process's standard output to another's standard input. A pipe can connect the output of one command to the input of another, allowing the output of the first command to be used as input to the second command.\n\nPipes can be created using the subprocess module with the Popen class by specifying the stdout or stdin argument as .\n\nFor example, the following code creates a pipe that connects the output of the ls command to the input of the grep command, which filters the output to show only the lines that contain the word :\n\nIn this example, the class is used to create two child processes, one for the ls command and one for the grep command. The stdout of the ls command is connected to the stdin of the grep command using , which creates a pipe between the two processes. The method is used to send the output of the command to the command and retrieve the filtered output.\n\nThe Python module provides a powerful and flexible way to create and interact with child processes, allowing you to run other programs or issue commands from within your Python script. From simple commands like to more advanced features like pipes, redirecting input and output, and passing environment variables, the subprocess module has something to offer for almost every use case. It is a great way to automate repetitive tasks, run system commands, and even interact with other programming languages and platforms.\n\nWhile working with the subprocess module, it's important to remember that running external commands poses a security risk, especially when using the parameter or passing unsanitized input. It's always a good practice to use the function that allows you to specify various options for how the command should be run, such as whether to raise an exception if the command fails.\n\nIf you are interested in doing a deep dive into endless possibilities for command line automation through Python, check out our Command Line Automation in Python course. In this course, you will learn to write an automation code that will browse a filesystem, look for files that follow a pattern, and then determine whether files are duplicates in one of the numerous cases. After finishing the course, you'll be able to manage and interact with Unix processes as well as automate a variety of routine file system activities.\n\nBoost Your Team’s Python Skills with DataCamp for Business\n\nIf you or your team is looking to enhance your skills in Python and command line automation, consider exploring DataCamp for Business. DataCamp offers tailored learning solutions for teams of all sizes, helping businesses stay ahead in the rapidly evolving tech landscape. With DataCamp for Business, you can upskill your team with courses and custom learning tracks designed to build expertise in Python, automation, and other essential data science tools. Whether you're a startup or an enterprise, DataCamp for Business provides the resources and flexibility to achieve your team's learning goals. Request a demo today to learn more."
    },
    {
        "link": "https://stackoverflow.com/questions/12605498/how-to-use-subprocess-popen-python",
        "document": "Since is being replaced by , I was wondering how would I convert\n\nBut I guess I'm not properly writing this out. Any help would be appreciated. Thanks"
    },
    {
        "link": "https://stackoverflow.com/questions/6549669/how-to-kill-process-and-child-processes-from-python",
        "document": "None of answers can helped me, so I made some research and wrote my answer: you can easily do it using module, but it is platform sensitive. This mean that some commands are availiable only on Unix, some - on any platform. So my project starts one Process, and several Child processes in the different places and times. Some of Child starts Grand-Child Processes :) So I found this solution:\n\nI use on Linux, to kill process immediatly, and on Windows, because there is no on it. Also I used to kill the whole group of processes on Linux.\n\nP.S. Check on Linux, but still doesn't check on Windows, so maybe we need one more additional command for Windows (for example CTRL_C_EVENT or use another answer.)"
    },
    {
        "link": "https://github.com/godotengine/godot-proposals/issues/1679",
        "document": "Describe the project you are working on:\n\n I'm working on a unit test plugin. It startes a test client in the background (hidden application)\n\n The client comunicates over network connection with der server running by the plugin.\n\n To run the test client i use the provided functionallity OS.excetute() with this arguments\n\n [--no-window, -d, -s, res://addons/gdUnit/src/core/GdUnitClient.gd]\n\n The client is closing/terminate by it self when all tests are done.\n\n To manually stop a running test client i use the pid from OS.excetute() and send a kill OS.kill() to terminate the client.\n\n So good so far ;)\n\nDescribe the problem or limitation you are having in your project:\n\n When i stop a running test client with OS.kill() results into OK for a success terminated process.\n\n But when the client is already terminatet i have no chance to check if the client still running or not.\n\n e.g. when i try now OS.kill() on a already terminated process i got only an generic error Error.FAILED\n\nDescribe the feature / enhancement and how it helps to overcome the problem or limitation:\n\n To improve the OS.kill() it should return a better error\n• replace the Error enum with and Error object where contains the error number and a human readable message\n\nAdd a new function to check if a process running by given PID\n• returns true when a process is running by given PID or false\n\nDescribe how your proposal will work, with code, pseudocode, mockups, and/or diagrams:\n\n With this better error handling on OS.kill() we can check if the process already terminated for better control flow.\n\n With OS.is_process() we can verify if the process running or not.\n\nIf this enhancement will not be used often, can it be worked around with a few lines of script?:\n\n i found no way to check if an process is running by given PID\n\nIs there a reason why this should be core and not an add-on in the asset library?:\n\n This is a missing function on the OS class to manage spawned processes"
    },
    {
        "link": "https://discuss.python.org/t/terminateprocess-via-os-kill-on-windows/30882",
        "document": "On Windows there isn’t really a SIGKILL signal, hence it not existing in on Windows. Could we define SIGKILL on Windows, then internally take: and have that call TerminateProcess? I know it isn’t a 100% mapping of SIGKILL → TerminateProcess but its pretty darn close. From the winapi docs: The TerminateProcess function is used to unconditionally cause a process to exit. The SIGKILL signal is used to cause immediate program termination TLDR: I propose defining on Windows and if it is used by , internally call ; after all they seem to be functionally similar.\n\nUnfortunately, Python’s implementation of on Windows is kind of a mess. First and foremost, the use of is completely wrong. This API function requires a console process group ID (pgid). The current implementation of in the console host (i.e. conhost.exe or openconsole.exe) is ridiculously buggy in many cases if it gets passed a pid that’s not a pgid. The only way to get a pid value that’s known to also be a pgid value is to spawn a process with the creation flag . Thus should only call when passed a negative process ID, which, as specified by POSIX, indicates that it’s a process group ID. The pid value -1 should be special cased as Windows console process group 0, which includes every process in the current console session. The pid value 0 (i.e. every process in the current process group, according to POSIX) should fail with a . It can’t be implemented on Windows since there’s no documented way to query the process group ID of the current process. Also, when the pid value is negative, the implementation of should map and to the console control events and . Those are the only two values that should be supported in this code path. Any value other than or should fail as a . In particular, the special signal value 0 that POSIX specifies can’t be reasonably supported to test for the existence of a process group. If the pid value is positive, then the implementation of should take the code path that calls and . This code path can allow any value for the signal number, which will be used as the exit status value of the process. To better support cross-platform code, could be defined as the integer enum value 1. It’s common on Windows to use 1 as the exit status when forcibly terminating a process. If the signal value is 0, only should be called, to test for existence and access, as specified by POSIX.\n\nHi Eryk, I’m not sure if there has been any changes to the implementation of in the last year, but I wanted to add to the discussion something I noticed when working with FastAPI and uvicorn. Since is using , using it for hot-reloading in uvicorn caused events to be skipped, so it was changed to which correctly handles termination, but also kills any process that has been opened when using the module or without the flag. This kills an Python console app when using uvicorn with reload in a subprocess. A discussion was opened about a half year ago at the uvicorn repo, but hasn’t gained much traction, I guess because there is really no solution that covers all cases, short of CPython doing something about it or going back to . Even if technically they are using wrong according to the docs because they’re not using the proper flag, I think it’s somewhat frustrating that the higher-level module does not offer a way to gracefully terminating a process in Windows, having to resort to which is incompatible with due to the impossibility of using . Also the documentation is confusing as it suggests that you’re killing as specific process when in reality you’re calling on the whole group. Moreover, it does not refer to the need of using , which might lead to incorrect use (such is the case with uvicorn) I think the culprit is Win32 at the end of the day for not providing a API function to gracefully terminate a single process, but perhaps CPython could work around it by providing with a new parameter like , or maybe just take like does.\n\nYou should be able to call using the private extension and . Pseudo-code: It’s basically the same as os.kill(), except that it doesn’t call for and , and it gives you a better control on the exit code of the terminated process. I know it isn’t a 100% mapping of SIGKILL → TerminateProcess but its pretty darn close. From the winapi docs: TLDR: I propose defining on Windows and if it is used by , internally call ; after all they seem to be functionally similar. We don’t add constants which don’t exist on a platform. If you’re unhappy about API, we should design a new API around in the module. It was discussed previously, but no one proposed any concrete API so far."
    },
    {
        "link": "https://stackoverflow.com/questions/12321077/killing-a-script-launched-in-a-process-via-os-system",
        "document": "I have a python script which launches several processes. Each process basically just calls a shell script:\n\nI launch several of these threads, which are meant to run in the background. I want to have a timeout on these threads, such that if it exceeds the timeout, they are killed:\n\nThe problem is that calling terminate() on the process threads isn't killing the launched run.sh script - it continues running in the background until I either force kill it from the command line, or it finishes internally. Is there a way to have terminate also kill the subshell created by os.system()?"
    },
    {
        "link": "https://tutorialspoint.com/how-to-terminate-a-running-process-on-windows-in-python",
        "document": "How to Terminate a Running Process on Windows in Python?\n\nWhen delving into the realm of Python development on a Windows operating system, there will undoubtedly be occasions where the need arises to terminate a running process. The motives behind such termination could span a wide array of scenarios, including unresponsiveness, excessive resource consumption, or the mere necessity to halt script execution. In this comprehensive article, we shall explore various methods to accomplish the task of terminating a running process on Windows using Python. By leveraging the 'os' module, the 'psutil' library, and the `subprocess` module, we will equip ourselves with a versatile toolkit to address this imperative task.\n\nThe `os` module, a cornerstone of Python's interaction with the operating system, boasts a rich repertoire of functionalities. Among them, the `system()` function offers a gateway to execute operating system commands. Notably, Windows harnesses the `taskkill` command for terminating active processes.\n\nIn the ensuing example, we will employ the `os` module to terminate the venerable Notepad application:\n\nThis illustrative code snippet employs the `taskkill` command along with the `/f` (force) and `/im` (image name) flags to forcefully terminate the process identified by the specified image name.\n\nThe `psutil` library presents a powerful, cross−platform arsenal for accessing system information and manipulating running processes. Before delving into the utilization of `psutil`, we must first ensure its presence by executing the following installation command:\n\nOnce successfully installed, we can embrace the capabilities of `psutil` to terminate active processes.\n\nIn the ensuing example, we shall employ the `psutil` library to terminate the illustrious Notepad application:\n\nThis sample snippet elucidates our methodology: we iterate through all running processes using `psutil.process_iter()`. By utilizing the `as_dict()` method, we obtain the process information in the form of a named tuple. If the process name aligns with the target process, we promptly terminate it via the `terminate()` method.\n\nMethod 3: Unleashing the Power of the 'subprocess' Module\n\nPython's 'subprocess' module grants us the capability to spawn new processes, establish connections with their input/output/error pipes, and retrieve their return codes. We can exploit this module to execute the `taskkill` command and effectively terminate running processes.\n\nIn this instance, we shall demonstrate the termination of the Notepad application using the mighty 'subprocess' module:\n\nWithin this example, we rely on the `subprocess.run()` function to execute the `taskkill` command with the `/f` and `/im` flags. The `shell=True` argument becomes indispensable in executing the command within the Windows command shell.\n\nThroughout this in-depth exploration, we have elucidated three distinct approaches for terminating running processes on Windows using Python. By embracing the `os` module, we empower ourselves to execute operating system commands. The `psutil` library emerges as a formidable tool, furnishing us with a comprehensive, cross−platform solution for system information retrieval and process manipulation. Furthermore, the `subprocess` module unlocks new dimensions, enabling us to spawn processes and execute commands effortlessly.\n\nEach method bears its own merits, tailored to specific project requirementsWhen engaging in process termination endeavors, it is imperative to tread with caution and appreciate the potential risks entailed, such as data loss or system instability."
    },
    {
        "link": "https://stackoverflow.com/questions/1632234/list-running-processes-on-64-bit-windows",
        "document": "I amm writing a little python script that will grab information from VMs of Windows that I am running.\n\nAt the moment I can list the processes on a 32bit XP machine with the following method:\n\nIs it possible to somehow detect the version of windows running and excute a different method for getting the processes on a 64bit machine, I am trying to get the processes from a 64Bit Vista and 64bit Windows 7."
    },
    {
        "link": "https://geeksforgeeks.org/python-get-list-of-running-processes",
        "document": "A Process is a program that is being executed (processed). A process may not have to be one run explicitly by the user, it could be a system process spawned by the operating system. Any applications that execute on an operating system firstly creates a process of its own in order to execute. In a typical OS installation, most processes are os services and background applications, that are run to maintain the operating system, software and hardware. \n\nIn this article, we will take a look at different ways of obtaining the list of running processes of a Windows OS, through Python. Firstly, we would describe a python method in order to achieve the result and then would look at a command found in the Windows Command Processor for the same. \n\nMethod 1:\n\nWe would be using the wmi library for getting the list of running processes on Windows OS. In order the install the module, execute the following command in the command interpreter of your operating system:- \n\n\n\nExplanation:\n\nFirstly, we initialize the WMI() function of wmi library. This allows us to use the functions found inside it such as WMI.Win32_Service, WMI.Win32_Process, WMI.Win32_Printjob which are designed to perform different tasks. We would be using the WMI.Win32_Process function in order to get the list of running processes on the system. Then we called the function WMI.Win32_Process() to get the running processes, iterated through each process and stored in variable process. Then we obtained the ProcessID (pid) and ProcessName (name) of the process using the associated attributes. We used F-strings for the output in order to add padding to the output to align it properly. \n\n \n\nMethod 2:\n\nIn this method, we would be using a command found inside the Windows Command Processor (cmd.exe) under the name WMIC ( Windows Management Instrumentation Command line) in order to get the desired result. WMIC is a commandline utility that allows users to performs Windows Management Instrumentation (WMI) operations with a command prompt. For the purpose of getting running processes, we would be executing the command:\n\n\n\nNote: It is not mandatory to use the os library for the purpose. The user could pick any other alternatives (Subprocess, shutil etc) which allows for commandline command execution.\n\nExplanation: \n\nWe used the function popen() found inside the os module, in order to execute the command in the command processor. Then we passed the output of the above command to read() in order to get data in readable form out of os._wrap_close object. In the end, we displayed the output.\n\nWe will use the subprocess module to interact with cmd and to retrieve information into your python ide. we can read the cmd command through the subprocess module.\n\nLet’s see this logic, if we run this wmic process list brief code into our terminal then we got like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/49677623/find-windows-pid-of-a-python-script-with-windows-command-prompt",
        "document": "I am running two different python scripts running on a windows machine simultaneously and would like to kill one but not the other from the command prompt. Using taskkill with the name \"python.exe\" does not allow me to choose to kill just one of these scripts.\n\nIs there a way in windows to kill just one of these tasks, determined by the script from which it originated?\n\nFor example: if I run python_process1.py and python_process2.py and would like to kill the .exe associated with just python_process2.py and leave python_process1.py alone.\n\nUPDATE: the solution below does not kill the process, and the issue still lies in identifying the PID of a process by python script name. If this is impossible, is there a way to selectively kill python scripts on windows that I am unaware of?"
    },
    {
        "link": "https://advancedinstaller.com/execute-python-script-through-powershell.html",
        "document": "Advanced Installer helps you create powerful and reliable MSI, App-V & MSIX packages. Upgraded every month by our team, since 2003.\n\nRunning Python scripts from PowerShell is a powerful way to integrate Python's capabilities into a Windows environment. Before diving into how to execute a Python script from PowerShell, it's important to ensure Python is installed on your Windows machine.\n\nIf Python isn't already installed, typing `python` into the Command Prompt (CMD) will redirect you to the Microsoft Store, where you can download and install the latest release of Python. Once installed, typing `python` in CMD will successfully launch the Python interpreter.\n\nLet’s start by creating a basic Python script that takes a command-line argument and prints it. Here's a simple example: import sys # Takes the first argument after the script name input_arg = sys.argv[1] print(f\"Received argument: {input_arg}\") This script uses the `sys` module to access command-line arguments passed to the script. The script then prints the first argument (`sys.argv[1]`). You can also check how to deploy and run a Python script on a Windows 10, 64-bit machine that doesn’t have Python installed.\n\nTo execute this Python script from PowerShell, the paths to the Python executable and the script file need to be specified correctly. Here’s how you can modify the provided PowerShell script for a Windows environment: $pythonProgramPath = cmd /c \"where python\" '2>&1' $pythonScriptPath = \"C:\\Path\\To\\Script\\main.py\" $arg = \"hello\" $pythonOutput = & $pythonProgramPath $pythonScriptPath $arg $pythonOutput To get the path of your Python installation is quite easy as this usually reflects either: To easily find where Python is installed, run the following command: By defining the Python execution path dynamically with cmd /c \"where python\" '2>&1', we ensure the correct Python location is used. Next, `$pythonScriptPath` holds the full path to the Python script you want to run, `main.py`. `$arg`, is a variable that stores the argument we want to pass to our Python script. In this example, it's the string `\"hello\"`. Remember the script requires an argument to function correctly. The `&` operator in PowerShell executes a command stored in a variable. Here, it runs the Python executable with the script path and argument as parameters. The output from the Python script (`print` statement) is captured in the `$pythonOutput` variable in PowerShell. `$pythonOutput` displays the result from the Python script in the PowerShell console.\n\nIntegrating Python scripts into PowerShell workflows allows you to leverage Python's extensive capabilities in a Windows environment. By correctly setting up the paths and understanding how to pass arguments from PowerShell to Python, you can create powerful automation scripts and tools that combine the strengths of both languages. This approach is particularly useful for system administrators, developers, and IT professionals looking to streamline their workflows and automate repetitive tasks. Join Our Tech CommunityElevate your tech game! Subscribe to our blog for succinct guides, expert insights, and the latest trends in application packaging.Subscribe Now!"
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/w405bs/using_python_to_interact_with_command_line_program",
        "document": "I am trying to get python to interact with an application.exe that uses the command line to execute commands. I will call this program \"Robot\" for context\n\nRight now to interact with program \"Robot\" we have to open up a command line program, change directories to \"RobotPath\", where \"Robot\" is located, and then type \"Robot\" and our commands into the command line to get the program to function. Each time you execute a command, \"Robot\" exits. \"Robot\" is a 3rd party application and I am unable to modify how it works. This process is super tedious though that I'd like to use python to help\n\nWhat I have tried:\n\nI have tried using both the os and subprocess modules and have been unsuccessful. First I tried using os.system to change directory to RobotPath so I can execute Robot. I was able to get to the correct directory but python wouldn't execute Robot when I tried with os.system again.\n\nNext I tried using the subprocess.run or subprocess.Popen to open a command window and was able to open a command window but I am unable to interact with the command window. I've tried using stdin = subprocess.PIPE and subprocess.communicate and haven't had any luck.\n\nI am on windows and would really appreciate any direction as to accomplish this task. Thanks!\n\nEDIT1 - I have a path variable setup for Robot's location but Robot has to be ran from a command line for anything to happen. Using file explorer and trying to run Robot does absolutely nothing. So I need to open a command line, then call and interact with Robot\n\nEDIT2 After doing some research and fighting pexpect, I learned that pexpect doesn't fully work with windows unfortunately. Here is my source https://pexpect.readthedocs.io/en/stable/overview.html#windows"
    }
]