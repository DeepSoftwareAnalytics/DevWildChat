[
    {
        "link": "https://docs.minecraftforge.net",
        "document": "This is the official documentation for MinecraftForge, the Minecraft modding API.\n\nThis documentation is only for Forge, this is not a Java tutorial.\n\nIf you would like to contribute to the docs, read Contributing to the Docs."
    },
    {
        "link": "https://docs.minecraftforge.net/en/latest/gui/screens",
        "document": "Screens are typically the base of all Graphical User Interfaces (GUIs) in Minecraft: taking in user input, verifying it on the server, and syncing the resulting action back to the client. They can be combined with menus to create an communication network for inventory-like views, or they can be standalone which modders can handle through their own network implementations.\n\nScreens are made up of numerous parts, making it difficult to fully understand what a ‘screen’ actually is in Minecraft. As such, this document will go over each of the screen’s components and how it is applied before discussing the screen itself.\n\nWhenever anything is rendered, there needs to be some identifier which specifies where it will appear. With numerous abstractions, most of Minecraft’s rendering calls takes in an x, y, and z value in a coordinate plane. X values increase from left to right, y from top to bottom, and z from far to near. However, the coordinates are not fixed to a specified range. They can change depending on the size of the screen and the scale at which is specified within the options. As such, extra care must be taken to make sure the values of the coordinates while rendering scale properly to the changeable screen size.\n\nInformation on how to relativize your coordinates will be within the screen section.\n\nAny GUI rendered by Minecraft is typically done using . is the first parameter to almost all rendering methods; it contains basic methods to render commonly used objects. These fall into five categories: colored rectangles, strings, and textures, items, and tooltips. There is also an additional method for rendering a snippet of a component ( / ). also exposes the which applies the transformations necessary to properly render where the component should be rendered. Additionally, colors are in the ARGB format.\n\nColored rectangles are drawn through a position color shader. There are three types of colored rectangles that can be drawn.\n\nFirst, there is a colored horizontal and vertical one-pixel wide line, and respectively. takes in two x coordinates defining the left and right (inclusively), the top y coordinate, and the color. takes in the left x coordinate, two y coordinates defining the top and bottom (inclusively), and the color.\n\nSecond, there is the method, which draws a rectangle to the screen. The line methods internally call this method. This takes in the left x coordinate, the top y coordinate, the right x coordinate, the bottom y coordinate, and the color.\n\nFinally, there is the method, which draws a rectangle with a vertical gradient. This takes in the right x coordinate, the bottom y coordinate, the left x coordinate, the top y coordinate, the z coordinate, and the bottom and top colors.\n\nStrings are drawn through its , typically consisting of their own shaders for normal, see through, and offset mode. There are two alignment of strings that can be rendered, each with a back shadow: a left-aligned string ( ) and a center-aligned string ( ). These both take in the font the string will be rendered in, the string to draw, the x coordinate representing the left or center of the string respectively, the top y coordinate, and the color.\n\nTextures are drawn through blitting, hence the method name , which, for this purpose, copies the bits of an image and draws them directly to the screen. These are drawn through a position texture shader. While there are many different overloads, we will only discuss two static s.\n\nThe first static takes in six integers and assumes the texture being rendered is on a 256 x 256 PNG file. It takes in the left x and top y screen coordinate, the left x and top y coordinate within the PNG, and the width and height of the image to render.\n\nThe static which the first calls expands this to nine integers, only assuming the image is on a PNG file. It takes in the left x and top y screen coordinate, the z coordinate (referred to as the blit offset), the left x and top y coordinate within the PNG, the width and height of the image to render, and the width and height of the PNG file.\n\nThe z coordinate when rendering a texture is typically set to the blit offset. The offset is responsible for properly layering renders when viewing a screen. Renders with a smaller z coordinate are rendered in the background and vice versa where renders with a larger z coordinate are rendered in the foreground. The z offset can be set directly on the itself via . Some basic offset logic is applied internally in some methods of (e.g. item rendering).\n\ns are essentially objects that are rendered. These include screens, buttons, chat boxes, lists, etc. s only have one method: . This takes in the used to render things to the screen, the x and y positions of the mouse scaled to the relative screen size, and the tick delta (how many ticks have passed since the last frame).\n\nSome common renderables are screens and ‘widgets’: interactable elements which typically render on the screen such as , its subtype , and which is used to input text on the screen.\n\nAny screen rendered in Minecraft implements . s are responsible for handling user interaction with the screen. These include inputs from the mouse (movement, clicked, released, dragged, scrolled, mouseover) and keyboard (pressed, released, typed). Each method returns whether the associated action affected the screen successfully. Widgets like buttons, chat boxes, lists, etc. also implement this interface.\n\nAlmost synonymous with s are their subtype: s. These are responsible for handling user interaction on screens which contain widgets, managing which is currently focused and how the associated interactions are applied. s add three additional features: interactable children, dragging, and focusing.\n\nEvent handlers hold children which are used to determine the interaction order of elements. During the mouse event handlers (excluding dragging), the first child in the list that the mouse hovers over has their logic executed.\n\nDragging an element with the mouse, implemented via and , provides more precisely executed logic.\n\nFocusing allows for a specific child to be checked first and handled during an event’s execution, such as during keyboard events or dragging the mouse. Focus is typically set through . In addition, interactable children can be cycled using , selecting the child based upon the passed in.\n\ns are elements which can be spoken about through Minecraft’s accessibility narration feature. Each element can provide different narration depending on what is hovered or selected, prioritized typically by focus, hovering, and then all other cases.\n\ns have three methods: one which determines the priority of the element ( ), one which determines whether to speak the narration ( ), and finally one which supplies the narration to its associated output, spoken or read ( ).\n\nWith all of the above knowledge, a basic screen can be constructed. To make it easier to understand, the components of a screen will be mentioned in the order they are typically encountered.\n\nFirst, all screens take in a which represents the title of the screen. This component is typically drawn to the screen by one of its subtypes. It is only used in the base screen for the narration message.\n\nOnce a screen has been initialized, the method is called. The method sets the initial settings inside the screen from the and instance to the relative width and height as scaled by the game. Any setup such as adding widgets or precomputing relative coordinates should be done in this method. If the game window is resized, the screen will be reinitialized by calling the method.\n\nThere are three ways to add a widget to a screen, each serving a separate purpose:\n\nTypically, will be used most often.\n\nScreens also tick using the method to perform some level of client side logic for rendering purposes. The most common example is the for the blinking cursor.\n\nSince screens are subtypes of s, the input handlers can also be overridden, such as for handling logic on a specific key press.\n\nFinally, screens are rendered through the method provided by being a subtype. As mentioned, the method draws the everything the screen has to render every frame, such as the background, widgets, tooltips, etc. By default, the method only renders the widgets to the screen.\n\nThe two most common things rendered within a screen that is typically not handled by a subtype is the background and the tooltips.\n\nThe background can be rendered using , with one method taking in a v Offset for the options background whenever a screen is rendered when the level behind it cannot be.\n\nTooltips are rendered through or which can take in the text components being rendered, an optional custom tooltip component, and the x / y relative coordinates on where the tooltip should be rendered on the screen.\n\nWhen a screen is closed, two methods handle the teardown: and .\n\nis called whenever the user makes an input to close the current screen. This method is typically used as a callback to destroy and save any internal processes in the screen itself. This includes sending packets to the server.\n\nis called just before the screen changes and is released to the garbage collector. This handles anything that hasn’t been reset back to its initial state before the screen was opened.\n\nIf a screen is directly attached to a menu, then an should be subclassed instead. An acts as the renderer and input handler of a menu and contains logic for syncing and interacting with slots. As such, only two methods typically need to be overridden or implemented to have a working container screen. Once again, to make it easier to understand, the components of a container screen will be mentioned in the order they are typically encountered.\n\nAn typically requires three parameters: the container menu being opened (represented by the generic ), the player inventory (only for the display name), and the title of the screen itself. Within here, a number of positioning fields can be set:\n\nAs the menu is passed into the screen, any values that were within the menu and synced (either through slots, data slots, or a custom system) can now be accessed through the field.\n\nContainer screens tick within the method when the player is alive and looking at the screen via . This essentially takes the place of within container screens, with its most common usage being to tick the recipe book.\n\nThe container screen is rendered across three methods: , which renders the background textures, , which renders any text on top of the background, and which encompass the previous two methods in addition to providing a grayed out background and tooltips.\n\nStarting with , the most common override (and typically the only case) adds the background, calls the super to render the container screen, and finally renders the tooltips on top of it.\n\nWithin the super, is called to render the background of the screen. The most standard representation uses three method calls: two for setup and one to draw the background texture.\n\nFinally, is called to render any text above the background, but below the tooltips. This simply calls uses the font to draw the associated components.\n\nTo use an with a menu, it needs to be registered. This can be done by calling within the on the mod event bus."
    },
    {
        "link": "https://github.com/TheGreyGhost/MinecraftByExample",
        "document": "The purpose of MinecraftByExample is to give simple working examples of the important concepts in Minecraft and Forge. If you're anything like me, a good code example is worth several screens of waffling explanation, and can very quickly explain the key concepts. I also find it much easier to adapt and debug something that already works, than to have to synthesize something from scratch and spend hours trying to discover the missing bit of information I didn't know about.\n\nI've tried to keep the code simple and obvious and to resist the urge to be clever. The examples might not be the most efficient or succinct implementation, I've deliberately left the optimization to you.\n\nEach example is split up to be totally independent of all the others. The only part of the code which is common to more than one example is the MinecraftByExample class.\n\nIf you want more information and explanatory text about the concepts, the following links might be useful:\n• The Official Forge documentation (parts of it are rather outdated but on the whole still very useful starting reference)\n• Guide to how Minecraft works (explaining the key concepts for understanding vanilla code)\n• Fabric Wiki (some of it is specific to the Fabric API, but a lot of useful general info too)\n• Forge modder support forum ask for advice from the experts\n• Cadiboo's example mod some great tutorials for when you're starting out\n\nIf you are updating from previous forge versions, you will probably find this link and this link very helpful. For better or for worse, MCP decided to rename a very large number of classes (eg all Blocks Blockxxx --> xxxxBlock, etc) so this might save you a stack of time. If you use IntelliJ, you might find these xml mapping files useful too\n\nSee here for pictures of what each example looks like in-game.\n• MBE03 - two types of blocks which vary their appearance / shape:\n\n a block (coloured signpost) with multiple variants- four colours, can be placed facing in four directions\n\n a block (3D Web) with multiple parts (multipart) similar to a vanilla fence.\n• MBE04 - dynamically created block models\n\n a camouflage (\"secret door\") block which dynamically changes its appearance to match adjacent blocks - uses IBlockModel.getQuads(), ModelBakeEvent, IForgeBakedModel and IModelData\n\n an \"altimeter\" block which shows the block altitude (y coordinate) on the side in digital display - as camouflage block but uses programmatic generation of quads\n• MBE06 - several different types of block which use redstone\n• MBE08 - how to add a creative tab for organising your custom blocks / items\n• MBE11 - an item with multiple variants - rendered using multiple models and multiple layers\n• MBE12 - an item that stores extra information in NBT, also illustrates the \"in use\" animation similar to drawing a bow\n• MBE15 - a chessboard item with 1 - 64 pieces; uses ItemOverrideList.getModelWithOverrides(), IBlockModel.getQuads() and onModelBakeEvent()\n• MBE20 - using a tile entity to store information about a block - also shows examples of using NBT storage\n• MBE21 - using the TileEntityRenderer to render unusual shapes or animations\n• MBE30 - a simple container for storing items in the world - similar to a Chest\n• MBE31 - a functional container such as a Furnace or Crafting Table\n• MBE32 - an item (bag of flowers) which can store other items inside it. Also shows how to use Capability\n• MBE35 - some typical example crafting recipes and furnace (smelting) recipes\n• MBE50 - shows how to use vanilla Particles; also how to generate your own custom Particles\n• MBE65 - define new Capabilities and attach them to vanilla objects\n• MBE75 - a tool to help you automate testing of your classes in-game.\n• MBE80 - Shows the basics of Models (eg PigModel), model parameters adjustable in real time using commands\n• DebuggingTools- This package is a bunch of functions and tools that I use occasionally, mostly for debugging\n• You can browse directly in GitHub, or alternatively, download it as a zip and browse it locally.\n• If you want to install it and compile it, the basic steps for beginners are:\n• Unzip it to an appropriate folder on your computer, such as My Documents. (Or, if you know how to fork a project on GitHub and import it into a local git repository, you can do that instead)\n• Look at Forge's README.txt file in this folder and follow the instructions to import it into Eclipse or IntelliJ IDEA.\n• Use the gradle task runClient to run or debug the project.\n• Execute gradle task runClient to test the client installation or\n• Execute gradle task runServer to test the dedicated server installation. (The first time you run this task it will exit without starting the server. You then need to edit the eula.txt file in the run directory, and execute runServer again.)\n\nHead over here if this didn't make sense to you (check comments for differences with latest versions of IDEA).\n\nWith thanks to these helpful folks: alvaropp, yooksi, Brandon3035, twrightsman (greekphysique), Nephroid, Herbix, and Shadowfacts\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\n\nIn jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to http://unlicense.org/"
    },
    {
        "link": "https://minecraft.fandom.com/wiki/Tutorials/Creating_Forge_mods",
        "document": "Mods (short for 'modifications') can modify or add items, blocks, entities, and much more. Presumably, you already have an idea for a mod you want to create. If you simply want to add custom advancements, functions, loot tables, structures, recipes or tags to your game, look into how to make a Data pack, which does not require programming. Or look into how to make a resource pack if you simply want to customize textures (colors and designs), models, music, sounds, languages, splashes, fonts, or the end poem. Or perhaps you want to 'fork' a favorite mod to update for newer versions of Minecraft. In any case, this guide will eventually cover only the most basic elements of creating an item and creating an entity (a moving thing like a villager, sheep, zombie, etc.), and distributing the resulting mod package.\n\nMinecraft mods consist of jar files (example: yournewmod.jar) which contain class files, JSON files, and image files, to name a few of the most common.\n• Class files are specific to the Java programming language. A few Java tutorials to try are w3schools (web and mobile), SoloLearn (web and mobile), and kodevelopment(web). You will need an IDE (Integrated Development Environment) such as IntelliJ or Eclipse to read or create class files. This tutorial will focus on IntelliJ IDEA Community Edition 2019.\n• JSON files are a means of detailing the characteristics of objects used by Java class files. JSON is much simpler than Java. You will need a text editor such as Notepad++, Vim, or Emacs to read or create JSON files. You probably already have a basic text editor on your computer, but there are many advantages to using other ones instead.\n• Image files you may be familiar with include .bmp and .jpg formats, but Minecraft requires .png format (example: yournewlogo.png) in multiples of 16 pixels square (example: 16x16, 32x32, 64x64). You will need an image editor such as Paint.NET or GIMP to edit or create .png files. You probably already have MS Paint on your computer, but GIMP has so much more functionality, and Paint.NET is quite user-friendly. There are also several websites with tools for creating pixel art.\n\nIf you have been playing Minecraft Java Edition, you probably already have JRE (Java Runtime Environment). To develop a mod, you will need to find JDK (Java Development Kit), which includes the JRE and an emulator. Create a free account at oracle.com and download JDK Standard Edition version 8. Then follow the instructions for installing it, and make note of the location it installs to. Pay particular attention to the section on Updating the PATH Environment Variable.\n\nWith a Java Development Kit installed, and the IntelliJ Integrated Development Environment to manipulate Java with, you now have the tools to develop custom software that can be used in a variety of applications. While working on a mod, continue working through Java tutorials. The lessons will enable you to put your ideas into action, while the ideas will make the lessons more interesting and memorable.\n\nOne more tool you should set up before starting a mod is the Forge MDK (Mod Development Kit). Forge is a collection of useful resources and mod loader, designed specifically to simplify compatibility between Minecraft Java Edition and multiple community-created mods. This tutorial will focus on the MDK for version 1.12.2 of Minecraft Java Edition, although Forge for 1.14.4 has been around for some time. An alternative to Forge is Fabric, but Java is still used to code mods either way.\n\nThings not to do\n\nThere are some things that you should be careful to not do when creating a mod. Keep this list in mind:\n• Don't do anything that violates Mojang Studios' terms of use for Minecraft.\n• Don't release Minecraft versions or modifications that allow you to play without having bought Minecraft from Mojang Studios.\n• Don't release the de-compiled source code of Minecraft in any way.\n• Don't modify existing mods without permission from that mod's author(s). Check their License, usually available in the author's GitHub repository. If you can't find the license, then you do not have permission to share a modified version with anybody. You may tinker with the files for personal use only.\n\nThis wiki article aims to provide a foolproof walk-through of a few key elements of Forge's tutorial: https://mcforge.readthedocs.io. Bookmark their page, as it addresses many issues this article will not. Moreover, there's more than one valid way to achieve the desired result; this wiki article will focus on the simplest, which is probably not the most efficient or elegant. If you follow precisely the steps outlined here, you should soon have a functional mod, which you can then tinker with to your heart's content. If you use Linux, Forge's tutorial will probably be more useful for you. If you use Windows, read on.\n\nThis tutorial will use \"You\" to represent the User profile you are logged in with; if you copy-paste paths from this tutorial, be sure to replace \"You\" with your own Windows username. This tutorial will use \"yournewmod\" to represent sections you should replace with the mod name you choose for your project.\n\nNavigate to and create a new folder. The name of this folder may be changed easily later.\n\nVisit https://files.minecraftforge.net and make sure the version selected is the version for which you want to create a mod. In the large \"Download Recommended\" box, click on the small MDK box. A dialog box will appear, asking where you want to save the file, and what to name it. Choose any convenient location, but leave the name unchanged.\n\nOpen the forge-1.16.5-...-mdk folder (with or without unzipping it first) and copy-paste the following 5 files from this folder[more information needed] to the project folder you created in the first step:\n\nThere are two different sets of mappings available for method names - \"MCP\" community-based mappings, and \"Official\" mappings based in part on the official Obfuscation maps (though class names are different for technical reasons). The default in the MDK has recently been changed to 'official', but this tutorial will use the MCP mappings for now because function parameter names are not available in the official mappings.\n\nChange the following line in line 34\n\nOpen/Run the IntelliJ IDEA program. In the landing screen, click on Open. A dialog box will appear, asking which file to import. Navigate to your project folder and select \"build.Gradle,\" then click OK.\n\nIn the next window, click in the \"Gradle JVM\" field and navigate to the JDK files you installed earlier. If you got version 8 update 282, select the folder named \"jdk1.8.0_282.\" Click OK and wait for the build to finish, Showing the results in the bottom field.\n\n[TODO: I didn't get another window, need to verify what happens on a fresh IDEA install]\n\n[Note: Confirming that on IntelliJ IDEA 2021.1.2 window doesn't appear, most likely that it detects JDK itself, so it will only appear if it failed to locate appropriate JDK]\n\nNo Dependencies needed to be Installed. Move to next step as new update in Forge command setupDecompWorkspace is not needed\n\nAfter refreshing gradle, open the gradle panel and double-click the \"genIntellijRuns\" entry in the \"fg_runs\" folder. This will create new run configurations that allow your mod to be run. Next, open the \"Edit configurations\" window of Run settings and look approximately halfway down, for \"Use classpath of module.\" Click on its dropdown field, and select the option that ends with , then click Apply. If the settings you just finished editing were for the Minecraft Client, click on Minecraft Server and repeat the steps to set the classpath. [TODO: Is this necessary anymore? It was already set]\n\nYou can now select and run in the run configuration drop down menu. This will start the Launcher with your mod included. When you get to the landing menu, you can check whether your mod is present.\n\nThe project as delivered with the MDK is called \"examplemod\" with the package name \"com.example.examplemod\". You will need to rename this to your own names in the following places - rename the class files - build.gradle - META-INF/mods.toml\n\nPackage names should be based on a domain name in reverse order, or a name that is not a valid domain name if you do not own a domain name.\n\nYou can create a class to put your definitions in. Here we call it ModItems, though in theory you could just add it to the main class. Having at least one class file (or, ideally, a package) to put registrations in without any non registration related code provides better organization for when you expand your mod.\n\nFirstly, create a DeferredRegister of type Item. This is effectively a list that is used to register items. Then, in order to register an item, create a RegistryObject as shown below.\n\nIf you want to add more options add . [dot] at the end of ,, CreativeModeTab.TAB_MISC) \"\n\nwhen its completed register item in your item class like this:\n\nthen in your main class constructor add the code to create an event bus and register:\n\nor you can do with this code below.\n\nIn your main class, set it up to automatically be called at the appropriate time, in the constructor:\n\nAnd now you need to translate this item. Inside resources add a directory named assets and inside add lang like this\n\nthe item.examplemod.ITEM_NAME needs to match the name you put inside ModItems class [where your items are].\n\nitem/generated is the default with no special features for rendering.\n\nThis is where you should add your texture image file.\n\nFirstly, create a new DeferredRegister of type block which will be used to register any blocks. Make sure to import net.minecraft.block rather than any of the other options.\n\nNext, you need to register the method with the IEventBus parameter. If you have a separate ModBlocks class then add the following method to it, otherwise add it to your already existing register method.\n\nTo create blocks easily add the following two helper methods to your class. registerBlock registers the block while registerBlockItem registers the associated item.\n\nFinally, like with items add the register call to your main class.\n\nThe following code shows how to add a simple block.\n\nSo, to start off with we need to make a new directory called tools in your package. Next create a new Java enum called ModItemTier. In this file you need to type a variant of the following:\n\nNext, you need to register your item. Go to your item registry class[?] and make a new item like the one here:\n\nThe numbers are the base attack damage [added to the damage set in the ItemTier] and the speed modifier, the values chosen for the example are intermediate between a sword and an axe.\n\nAfter this, you need to make a JSON file in src/main/resources/assets/examplemod/models/item called what you set earlier, like so:\n\nThen, go to your textures folder and input the texture you will make in the next step. If you want to know more about durability I recommend this page.\n\nOpen an image editor, preferably one that supports transparency, and create a new image, with a size that is a multiple of 16x16 (eg. 32x32, 64x64. etc.)\n\nThis example is using a 32x32 pixel image and is made in GIMP.\n\nCreate your file, making sure it is in pixels and not inches, millimetres, or any other measurement.\n\nCreate a new layer, and delete the original canvas. If you don't do that, then your image will have a white background.\n\nUsing a brush of 1x1 pixel, start drawing your item. Make sure to use separate layers for separate parts of the item to allow changes to be made easier.\n\n\n\n When you're done creating your art, press file to save. If you're using GIMP or another advanced editor, it won't save as a .png. For GIMP, it saves as a .xcf.\n\nNavigate to the export dropdown or press on Windows or for macOS. This is to export the file. Make sure you export as a .png, not a .jpg or any other file extension. If it is not saved as a .png, it will have a white background and won't look correct.\n\n\n\nIf you're following along with this tutorial and wish to use this image, you can download this finished pixel art here.\n\nThe best way to model mobs is probably blockbench (blockbench website). Blockbench is a free modeling tool, and it would be much faster and easier than taking the other approach, which is slow. If you want to model with it, simply make a cube, position it, rotate it, size it, and make your model the way you want to make it. If you need more cubes, you can easily make a new one. This is probably the best method for this. It is fast, easy, and customizable.\n\nTo build your mod, run gradlew build or ./gradlew build for macOS. This will output a file in build/libs with the name [archivesBaseName]-[version].jar. This file can be placed in the mods folder of a forge enabled Minecraft setup, and distributed. Then you can upload your mod to CurseForge or Modrinth.\n• create a GitHub account to manage versions of your mod and collaborate with other developers.\n• further tutorials (in video form, for version 1.15.2)"
    },
    {
        "link": "https://minecraft-hosting.pro/article/183-xaeros-minimap-mod",
        "document": "Xaero's Minimap Mod is a popular mod for Minecraft that adds a minimap to the game. The mod is available on all Minecraft version and can be installed on both single-player and multiplayer games. In this tutorial, we will guide you on how to install, configure and use Xaero's Minimap Mod.\n\n\n\n\n\nBefore you start, make sure you have Minecraft installed on your computer.\n• None Download the Xaero's Minimap Mod from a trusted source. You can download the mod from the official Xaero's Minimap Mod website or from CurseForge.\n• None Make sure you have Minecraft Forge installed. If you don't, download and install it from the official website).\n• None Locate the Minecraft game directory on your computer. On Windows, it is usually located in the %appdata%.minecraft directory. On Mac, it is usually located in the ~/Library/Application Support/minecraft directory.\n• None Open the mods folder in the game directory. If there isn't one, create a new folder and name it \"mods\".\n• None Move the downloaded Xaero's Minimap mod file into the mods folder.\n• None Launch Minecraft and make sure the mod is installed by checking the mods list in the main menu.\n• None Open the WebFTP on your panel.\n• None Drag and drop the downloaded Xaero's Minimap Mod .jar file into the mods folder.\n\nUsing Xaero's Minimap is easy, and it has only a few controls that you need to be aware of. The first control you need to know is W, which opens a larger version of the minimap, allowing you to see greater distances. To access the mod settings, press Y instead. Here, you can configure most features of your minimap, such as the radar, size, shape, and more.\n\nPressing B allows you to quickly access the new Waypoint screen. On the other hand, pressing U opens up the Waypoints menu, where you can see a list of Waypoints, teleport to them, or remove them.\n\n\n\n\n\nWaypoints are a significant feature of Xaero's Minimap that helps you navigate your way through Minecraft. To create a Waypoint, press the B key, and a screen with several options will appear. You can change the color of the Waypoint and input a name. Your current coordinates will appear on the menu, but you can input your own. It's even possible to change the dimension.\n\nOnce you create the Waypoint, it will be saved and visible on the minimap, as well as in the game world when you're looking in its direction. Alternatively, you can quickly create Waypoints at your current location by pressing +. If you need to edit or delete an existing Waypoint, press U instead to head to the Waypoints menu.\n\n\n\n\n\nYou can customize the shape and position of the minimap by opening the settings and pressing Y. On this screen, there's a Position button that allows you to select the minimap and drag it to a location of your choice. You can also change the shape of Xaer's Minimap by setting it to be a Square or Circle under View Settings of the main settings screen.\n\n\n\n\n\nOne of the best features of Xaero's Minimap is the Entity Radar that shows you where mobs and players are located. By default, Minecraft mobs appear as a small yellow circle on the minimap, whereas the player is a white circle, and any drops on the ground appear as red circles.\n\nIf you want mobs to look like icons instead, open the menu by pressing Y and select Entity Radar Settings. Look for the Display Icons button and make sure that it says Always to save your changes. You can also enable nameplates on the minimap.\n\nTo access the settings, press the \"Y\" key on your keyboard. This will open the mod's menu, which contains several tabs for different configuration options. Let's go through each tab and explain what each setting does.\n\nYou can customize the appearance of the minimap. Here, you can change the shape of the minimap from the default square to a circle. You can also adjust the size of the minimap from small to large, and set the minimap to be shown in either the top right, top left, bottom right, or bottom left corner of your screen.\n\nIn addition, you can also choose to show or hide various elements of the minimap, such as the player arrow, the border, the grid, the waypoints, and the mob icons. You can also adjust the opacity of the minimap and set it to either rotate or remain fixed.\n\nMoreover, there are additional view settings available for when the minimap is enlarged. These settings include the ability to adjust the opacity and scale of the enlarged minimap, as well as options for the background color and border.\n\n- Size: This setting allows you to adjust the size of the minimap on your screen.\n\n- Lock Minimap North: This setting allows you to lock the minimap to always show north at the top.\n\n- Zoom: This setting allows you to adjust the zoom level of the minimap.\n\n- Opacity: This setting allows you to adjust the transparency of the minimap.\n\n- Zoom Level When Enlarged: This setting allows you to adjust the zoom level of the minimap when it is enlarged.\n\n- Center When Enlarged: This setting allows you to center the minimap when it is enlarged.\n\n- Shape: This setting allows you to change the shape of the minimap to either square or circular.\n\n- Lighting: This setting allows you to turn on or off the lighting effects on the minimap.\n\n- Cave Mode Zoom In: This setting allows you to zoom in when using cave mode.\n\n- Frame Style: This setting allows you to change the style of the frame around the minimap.\n\n- Frame Color: This setting allows you to change the color of the frame around the minimap.\n\n- Keep Rotation When Enlarged: This setting allows you to keep the rotation of the minimap when it is enlarged.\n\n- Toggled Enlarged Minimap: This setting allows you to toggle the enlarged minimap on or off.\n\n- Hide When Under F3: This setting allows you to hide the minimap when you press the F3 key.\n\n- Potion Effects Push Box: This setting allows you to adjust the position of the potion effects push box.\n\n- Hide When Under Screen: This setting allows you to hide the minimap when you open a GUI or inventory screen.\n\n- Boss Health Push Box: This setting allows you to adjust the position of the boss health push box.\n\nYou can customize the way mobs and other entities appear on the minimap. To access this page, press the Y key to open the main menu and then click on the \"Entity Radar Settings\" button. Here's what you can do on this page:\n\n\n\n\n\n- Entity category settings: This setting allows you to specify which type of entities you want to show on the radar. You can choose to show all entities, only animals, only monsters, or only players.\n\n- Entity dot size: This setting controls the size of the dots used to represent entities on the radar. You can make them smaller or larger depending on your preference.\n\n- Smooth dots: This option smooths out the edges of the entity dots, giving them a more polished appearance.\n\n- Display Names: This setting determines whether or not to display the names of entities on the radar.\n\n- Dot Name Scale: This option allows you to adjust the size of the text used for entity names.\n\n- Entity Name When icon Fails: This option allows you to display the name of an entity when its icon fails to load.\n\n- Display Radar: This setting allows you to turn the entire radar display on or off.\n\n- Entity Dots Styles: This option lets you choose from various styles of dots to represent entities on the radar.\n\n- Display Icons: This setting allows you to display icons instead of dots to represent entities on the radar.\n\n- Entity Icon Scale: This option allows you to adjust the size of the icons used to represent entities.\n\n- Always Render Entity Name Tags: This option determines whether or not to always display the name tags of entities, even if they are not visible.\n\n- Entity Number: This option controls the number of entities that are shown on the radar.\n\n- Entity Height limit: This option allows you to set a limit on the maximum height of entities that are displayed on the radar.\n\n- Min Y Distance For Depth Fade: This option determines how quickly entities fade out as they move further away from the radar.\n\n- Main Entity As: This setting lets you choose which entity to highlight as the main entity on the radar.\n\n- Arrow Scale: This option allows you to adjust the size of the arrows used to indicate the direction of entities on the radar.\n\n- Arrow Opacity: This setting controls the transparency of the arrows used to indicate the direction of entities on the radar.\n\n- Display Party/Ally Players: This setting allows you to show or hide party/ally players on the radar.\n\n- Show Entity Depth: This option determines whether or not to display the depth of entities on the radar.\n\n- Display Entity Y Level: This setting allows you to show or hide the Y level of entities on the radar.\n\n- Main Entity Dot Size: This setting controls the size of the dot used to represent the main entity on the radar.\n\n- Arrow Color: This option lets you choose the color of the arrows used to indicate the direction of entities on the radar.\n\n- Render Radar Over Frame: This setting determines whether or not to render the radar over the Minecraft game frame.\n\nXaero's Minimap has a Block Map feature that allows players to see a top-down view of the terrain they have explored. This can be useful for planning out builds or finding specific types of biomes. Here's a detailed explanation of the Block Map Settings page in Xaero's Minimap:\n\n- Block Color Mode : This setting allows you to change how the different blocks in the map are colored, limited to two options: Accurate or Vanilla.The Accurate Block Color Mode will display each block on the minimap with its true color, making it easier to distinguish between different blocks. This can be particularly helpful for finding specific types of blocks or locating areas with certain resources.The Vanilla Block Color Mode, on the other hand, uses a simplified color scheme that makes it easier to see the overall terrain and structures. In this mode, most blocks are displayed as either green or brown, while some specific blocks have unique colors (such as water being blue).\n\n- Cave Mode: 3x3 Ceiling : Available Cave Mode settings are indeed 1x1, 3x3, and 5x5 showing the area of 3x3 ceiling around the player, with the option to turn it off as well\n\n- Manual Cave Mode Start Y Auto : This setting allows you to manually set the start Y-level of the cave mode. When it is turned auto, the mod will automatically determine the start Y-level based on the player's position.\n\n- Terrain Depth : This setting allows you to turn the terrain depth feature on or off. When it is turned on, the map will display the terrain depth below the player's position.\n\n- Show Redstone : This setting allows you to turn the redstone display on or off. When it is turned on, the map will show the location of redstone blocks.\n\n- Block Transparency : When this setting is turned on, the blocks in the map will become partially transparent, allowing you to see through them.\n\n- Biomes in Vanilla Color Mode : When this setting is turned on, the biomes will be displayed in the vanilla color mode.\n\n- Cave Mode Depth : This setting allows you to adjust the depth of the cave mode, which is how far down it will display caves.\n\n- Use World Map Mod Chunks : This setting allows you to use the chunks from the world map mod to display the terrain, rather than generating the terrain from the game.\n\n- Terrain Slopes: Default 3D : This setting allows you to adjust the slope of the terrain in the map. There are three options available: Default 3D, Flat, and Overhead.\n\n- Show Flowers : When this setting is turned on, the map will show the location of flowers and other plants.\n\n- Display Stained Glass : When this setting is turned on, the map will display stained glass blocks in their actual color.\n\n- Adjust Y for short block : This setting will adjust the Y coordinate of the player when viewing short blocks (such as slabs or stairs) on the block map, to prevent the blocks from obstructing the view of the player. When enabled, the Y value will be increased slightly so that the player appears to be standing on top of the short block, rather than behind it.\n\n- Ignore server Heightmaps : Heightmaps are data files that Minecraft uses to generate terrain. When this setting is enabled, Xaero's Minimap will ignore the heightmap data provided by the server and instead use its own calculations to generate the block map. This can sometimes improve performance, but may result in slight inaccuracies in the generated map.\n\n- Anti-Aliasing : Anti-aliasing is a technique used to smooth jagged edges in graphics. When enabled, Xaero's Minimap will use anti-aliasing to create smoother edges for blocks on the block map, making the map look more polished and easier to read. However, enabling anti-aliasing may also reduce performance slightly.\n\nThe Overlay settings in Xaero's Minimap allow you to display additional information on your map overlay.\n\n- Chunk Grid: This option displays a grid overlay on the minimap that represents the boundaries of each chunk in Minecraft. You can turn it on or off as per your preference.\n\n- Light Overlay: This setting helps you see areas that have a low light level, so you can quickly identify any areas that might be dangerous. It displays an overlay of the light levels in different colors, so you can quickly see where you might need to add some light sources to prevent hostile mobs from spawning.\n\n- Display Chunk Claims: This setting is useful for multiplayer servers. When it's turned on, it displays a border around each player's claimed chunks, which can help you avoid accidentally building on someone else's property.\n\n- Chunk claims Fill Opacity: This setting adjusts the opacity of the color fill for claimed chunks, so you can adjust the visibility of the claimed areas.\n\n- Chunk Grid Line Width: This setting adjusts the width of the lines in the chunk grid overlay.\n\n- Slime Chunks: This option helps you find slime chunks in Minecraft. When it's turned on, the minimap displays which chunks in your world are slime chunks, so you can quickly find the best spots to farm slime.\n\n- Chunk Claims Border Opacity: This setting adjusts the opacity of the border around claimed chunks, so you can adjust the visibility of the borders.\n\nWaypoints in Xaero's Minimap are user-defined markers that can be placed on the map for navigation or reference. They can be customized with names, icons, and colors, and can be set to appear on the map both in-game and in the minimap interface. Other features of the waypoint system include death points, global temporary waypoints, and cross-dimensional teleportation.\n\n- On-Map Waypoints: This setting allows you to turn on or off the display of waypoints on the map.\n\n- Deathpoints: This setting allows you to turn on or off the display of deathpoints (locations where you have died) on the map.\n\n- Delete Reached Deathpoints: If turned on, this setting automatically deletes deathpoints from the map when you reach them.\n\n- In-Game Waypoint Icon Scale: This setting adjusts the size of waypoint icons displayed in the game.\n\n- In-Game Waypoint Up-Close Scale: This setting adjusts the size of waypoint icons when viewed up close.\n\n- Multiple Waypoint Distances: This setting controls how distances to multiple waypoints are displayed on the map.\n\n- In-Game Waypoints: This setting allows you to turn on or off the display of waypoints in the game.\n\n- Keep Old Deathpoints: If turned on, this setting keeps deathpoints on the map even after you have reached them.\n\n- Auto Waypoints On Death: If turned on, this setting automatically adds a waypoint at the location where you died.\n\n- Waypoint Name Text Scale: This setting adjusts the size of text for waypoint names.\n\n- Waypoint Distance Text Scale: This setting adjusts the size of text for waypoint distances.\n\n- Distance to WP: This setting controls how distances to waypoints are displayed on the map.\n\n- WP Name Above Distance: If turned on, this setting displays waypoint names above their respective distances.\n\n- Render All Waypoint Sets: If turned on, this setting displays all waypoint sets on the map.\n\n- Max WP Render Distance: This setting controls the maximum distance at which waypoints are displayed on the map.\n\n- Min WP Render Distance: This setting controls the minimum distance at which waypoints are displayed on the map.\n\n- Waypoint Opacity in Game: This setting adjusts the opacity of waypoint icons displayed in the game.\n\n- Waypoint Opacity on Map: This setting adjusts the opacity of waypoint icons displayed on the map.\n\n- Always Display Distance to WP: If turned on, this setting always displays the distance to the closest waypoint.\n\n- WP Distance Vertical Angle: This setting controls the vertical angle at which waypoint distances are displayed on the map.\n\n- WP Distance Horizontal Angle: This setting controls the horizontal angle at which waypoint distances are displayed on the map.\n\n- Convert Distance to KM at: This setting allows you to choose the distance at which distances are displayed in kilometers.\n\n- Waypoint Distance Precision: This setting controls the number of decimal places used for displaying waypoint distances.\n\n- On-Map Waypoint Scale: This setting adjusts the size of waypoint icons displayed on the map.\n\n- Global Temporary Waypoints: If turned on, this setting allows you to create temporary waypoints that are saved across worlds.\n\n- Cross-Dimensional TP: If turned on, this setting allows you to teleport to waypoints in other dimensions.\n\n- New Waypoints to Bottom: If turned on, this setting adds new waypoints to the bottom of the waypoint list.\n\n- Hide Waypoint Coordinates: If turned on, this setting hides the coordinates of waypoints from the waypoint list.\n\n- Compass: This setting allows you to turn on or off the display of a compass on the map.\n\n- Compass Scale On-Map: This setting adjusts the size of the compass displayed on the map.\n\n- Default Teleport Command: This setting allows you to customize the command used for teleporting to waypoints.\n\n- Use Y with Particle When TP: If turned on, this setting shows a particle effect at the Y-coordinate when teleporting.\n\n- Hide IPs/World Names: If turned on, this setting hides the IPs and world names from the multiplayer server list.\n\n- Compass Over Everything: If turned on, this setting displays the compass over all other map elements.\n\n- Compass: This section contains settings for the compass on the minimap.\n\n- Compass Scale On-Map: This setting adjusts the size of the compass icon on the minimap.\n\n- Default Teleport Command: This setting allows you to specify a custom teleport command to be used with the waypoints.\n\n- Use Y with Particle When TP: When enabled, it shows a particle effect at the location you teleport to.\n\n- Compass Over Everything: This setting determines whether the compass icon should appear on top of other minimap elements.\n\n- Compass Shadow Color: This setting allows you to change the color of the shadow behind the compass.\n\n- North Compass Color: This setting allows you to change the color of the compass when it's facing north.\n\nTo manage waypoints, you can access the Waypoints settings page with \"U\" Key. From there, you can create, edit, delete, and manage various aspects of your waypoints, such as names, icons, distances, and more.\n\nYou can add a waypoint by pressing the \"B\" Key.\n\nIn conclusion, Xaero's Minimap is a must-have mod for Minecraft players who want to navigate the game world with ease. With its tons of features, including Enlarged Maps, Cave Views, Mob Radars, and Waypoints, Xaero's Minimap is one of the most flexible map mods available."
    },
    {
        "link": "https://forums.minecraftforge.net/topic/70281-1122-binding-texture-to-glstatemanager",
        "document": ""
    },
    {
        "link": "https://forums.minecraftforge.net/topic/78157-solved1122-most-efficient-way-to-render",
        "document": ""
    },
    {
        "link": "http://jabelarminecraft.blogspot.com/p/minecraft-forge-172-quick-tips-gl11-and.html",
        "document": "How Models For Blocks And Items Load\n\nChanging (Overriding) The 3D Model Of An Item Based On A Property\n\nYou may find a situation where you want an item to look different depending on some property that changes. For example, you could have a bottle that fills up, or a wearable computer (like a FitBit) that displays different information and so forth.\n\nLike all modding, when trying to do something you should first look at something similar in vanilla Minecraft. In this case, a ItemCompass is a good example of an item that changes how it looks based on a property (in this case the \" \").\n\nThe general approach is as follows:\n\nIn your custom item class constructor, call the method that maps the property name to a new with an inline declaration that implements the method to return the valid set of property values.\n\nThe method takes in an , and parameter. In most cases you'll probably just look at the 's NBT data but for example the compass also checks to make sure the world is a surface world and also uses the entity (the entity passed in is the one holding the item stack) to calculate the angle.\n\nFor a simple example refer to which has a simple property for \" \" which is true or false. For a more complex example refer to the which has a large set of \" \" values.\n\n\n\n Create a master model JSON file placed in the item model resources folder. This JSON should use the \" \" parent and use the \" \" tag to map the properties to other JSON files containing the actual models. For example, the compass.json file contains:\n\nCreate the model JSON files for all the variations pointed to by the master model JSON. In the example above you'd create the and such. These can be any regular type of item model.\n\nStep 4 - Use The Property In Your Game\n\nChange the property value in the game as needed. Basically the method will be called automatically during rendering so you just need to make sure that the information necessary for the method is passed in.\n\nFor example, in the method checks the damage of the ItemStack to determine whether the property should return as \" \".\n\nthe method checks that the world is surface world and checks the entity direction to adjust the compass angle, including adding some \"wobble\" to the compass to make it more realistic.\n\nBasically, the method can take information from the passed in parameters (like NBT data on the ) but also access instance methods in your custom class as well as any other public methods. So you could change the item model based on configurations, entity capabilities, etc. Pretty much wide open! Have fun!\n\nGood Tutorial On How Transparency And Blending Works\n\nIt is common for modders to want to change the \"camera\" position. In other words, show a view from the world from a different position and/or angle. For example, you could add a \"roll\" effect while doing a flying mod, or you could shake the camera for an earthquake.\n\n\n\n Thanks to jajo_11 for this tip.\n\nIn this example, I'll create a sphere around a custom entity. The sphere will be partially transparent, and if you enter the sphere you'll be able to see it from the inside as well (this is important point because extra work is required to make that happen).\n\nSince in Minecraft rendering is client side only, it is good idea to make the sphere call lists in the client proxy.\n\nFirst we need to add two integer fields that will reference the id of the call list for the outside and inside of the sphere. Something like this in your client proxy class:\n\nThen, in your method that handles the init FML life cycle, you should have something like this to generate the call lists:\n\n \n\n\n\n\n\n Now, we'll be able to invoke these spheres during rendering. \n\n \n\n The texture you reference with the should generally be a solid square of color without any transparent portions, but you should try textures and patterns if you think it is better for your mod. I choose a purple color and just filled in a square then saved as PNG. You need to make sure you put the texture asset in the same place referenced in the .\n\n \n\n For a custom entity you should have a custom class registered for the entity. In that custom class, you can overrride the method which is intended for these extra rendering effects (it is automatically called for all entities). So something like this:\n\n \n\n\n\nEnsuring Custom Entity Renders If Partially Out Of View\n\nDraw The Texture Of An Item\n\n\n\n See my \n\n \n\n \n\n G11 works on a stack and so you can easily lose track of the applied methods if you forget to pop the stack, letting previous setting \"bleed\" into later code and causing unexpected effects. Therefore it can be useful to report all GL11 settings in effect at a given point in time.\n\n \n\n Here is a utility written by TheGreyGhost and previously posted on github (although link now shows file not found). Since he offered it before, I hope he doesn't mind if I post it here. The idea is simple, but credit to him for taking the time to type it all out.\n\n \n\n Tip: You can add this class to your mod and call the method at points in your code where you're debugging GL11.\n\n \n\n \n\n GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 \"Depth range near and farumber of bits of subpixel precision in x and y\" GL11 \"See discussion in Texture Proxy in Chapter 9\" GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 \"True if left and right buffers exist\" GL11 GL11 GL11 GL11 GL11 \"Number of bits per red component in color buffers\" GL11 \"Number of bits per green component in color buffers\" GL11 \"Number of bits per blue component in color buffers\" GL11 \"Number of bits per alpha component in color buffers\" GL11 \"Number of bits per index in color buffers\" GL11 GL11 GL11 \"Number of bits per red component in the accumulation buffer\" GL11 \"Number of bits per green component in the accumulation buffer\" GL11 \"Number of bits per blue component in the accumulation buffer\" GL11 \"Number of bits per alpha component in the accumulation buffer\" GL11 GL11 \"Number of display list under construction; 0 if none\" GL11 \"Mode of display list under construction; undefined if none\" GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 GL11 i i instance i \n\n See my modding tips for Items G11 works on a stack and so you can easily lose track of the applied methods if you forget to pop the stack, letting previous setting \"bleed\" into later code and causing unexpected effects. Therefore it can be useful to report all GL11 settings in effect at a given point in time.Here is a utility written byand previously posted on github (although link now shows file not found). Since he offered it before, I hope he doesn't mind if I post it here. The idea is simple, but credit to him for taking the time to type it all out.: You can add this class to your mod and call themethod at points in your code where you're debugging GL11.\n\nLike all 3D games, there is a need for \"models\" that describe the shape of the various things that should be displayed, and \"renderers\" that actually convert the shape into something visible.Note thatuses Light-Weight Java Graphics Library (LWJGL) interface also called GL11, so inside rendering classes you can apply related operations and transformations to modify the rendering.Historically, there are various types of models and rendering options available. In the most original format, the models were simply a collection of cubes that could be rotated and textured to create the classicalblocky look. However, since then the approach has changed to allow more complex model formats (like those used by computer graphics programs), as well as animations and state-based rendering.I cover a few tips here, but it is a broad topic for which you may need to do further Googling.has a good explanation in his github documentation The block model format approach has changed over the various versions ofand this causes a great amount of work when upgrading your mod, and it greatly complicated making animated models. An explanation of the evolution of the block model approach is described well byin his Rendering Primer Thanks tofor this information.has an animation system for baked models in thepackage, though there's not a lot of documentation on it.briefly described the purpose of each class in the commit that introduced the system . They've also documented the grammar of the Animation State Machine files here.has a test mod for the system here This tutorial gives a thorough explanation of GL11 and alpha blending.See a detailed explanation: TheGreyGhost's Transparent Block Tutorial There is a good tutorial here: Schwarzeszeux's Modeling Tutorial In your entity model'sfunction you can use GL11 methods to scale the model before rendering. However, since the model origin is at 1.5 blocks above the ground, if you just scale the feet of your model will go into the ground if you scale bigger and will float above the ground if you scale smaller. So you need to also use GL11 to translate the method.Also, you need to create a GL11 matrix for this with themethod, and need to make sure tothe matrix when done.Putting it all together, the code should look something like this:In computer systems, color is often represented as \"RGB\" (Red-Green-Blue) which is the additive colors that can be used to combine to create all colors. In hexadecimal it is usually shown as an 8-digit number, with each two digits representing the amount of red, green and blue respectively. The higher the number the more of the color is present, and since the color is additive it also gets lighter. So black isis the way Java indicates a number is in hexadecimal format), white is, medium red is, and a brown might be. Check out this page of RGB colors to better understand.has a class calledthat is used within. Buffered image has a method calledwhere you specify the x and y coordinates (starting in top-left) and it returns the RGB int value.already has certain images and textures ininstances, but if you want to load a file into ayou can use thefunction where you pass theparameter which can be PNG, JPG, etc. Check out my tutorial on file and resources for more information.: Inmost texture information is only on the client side. If you want the server to react or control textures then you will need to use custom packets to communicate between client and server.To understand the code, it is best to read up on the G11 API The important methods to understand are the, which in this case we're making 3 times bigger than standard block. You can change the values to get the size you want.Theis blending white (meaning no change in color) with alpha (transparency) of. You can play with the alpha value to get the effect you want.You can see we usefor both the outside and inside sphere.It is very easy to get health bar. First, you should just have your mob implement tgeinterface (just put \"\" on your class declaration.Secondly, in the customclass for your mob, in themethod you should put \"\" where you replace \"\" with the field that represents the entity parameter passed to themethod.In computer graphics, it usually doesn't make sense to process things that are outside the field of view. The space that represents a clipped pyramid of view is called the \" frustum \". The process of deciding whether something is inside the frustum (and should be rendered) is called frustum culling.In, whether and entity is considered inside the frustum is based on the bounding box of the entity (in themethod in theclass). This causes a problem with large entities or unusual custom entities though because the model of an entity might extend well beyond the bounding box -- imagine a tail of a dinosaur that has the collision box just on its body. This causes a visual problem because if the entity goes to the edge of the view it will seem to suddenly disappear when the bounding box goes off screen even if other parts of the model could still be rendered on screen.Therefore, entities have a public boolean field called. This should be set tofor those entities that have models that extend significantly beyond the bounding box of the entity."
    },
    {
        "link": "https://github.com/bigbang87/deadly-monsters/blob/master/forge-1.12.2/forge-1.12.2-14.23.0.2537-changelog.txt",
        "document": ""
    },
    {
        "link": "https://nekoyue.github.io/ForgeJavaDocs-NG/javadoc/1.12.2/net/minecraft/client/renderer/GlStateManager.html",
        "document": "JavaScript is disabled on your browser."
    }
]