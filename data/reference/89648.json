[
    {
        "link": "https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components",
        "document": "You may see this in many React+TypeScript codebases:\n\nHowever, the general consensus today is that (or the shorthand ) is not needed. If you're still using React 17 or TypeScript lower than 5.1, it is even discouraged. This is a nuanced opinion of course, but if you agree and want to remove from your codebase, you can use this jscodeshift codemod.\n\nSome differences from the \"normal function\" version:\n• None is explicit about the return type, while the normal function version is implicit (or else needs additional annotation).\n• None It provides typechecking and autocomplete for static properties like , , and .\n• Note that there are some known issues using with . See this issue for details. We maintain a separate section you can also look up.\n• None Before the React 18 type updates, provided an implicit definition of (see below), which was heavily debated and is one of the reasons was removed from the Create React App TypeScript template.\n\nIn @types/react 16.9.48, the or type was added for typing explicitly. However, please be aware that and were deprecated in React 18 (https://github.com/DefinitelyTyped/DefinitelyTyped/pull/59882), so this interim solution is no longer necessary or recommended in React 18+. Please use regular function components or instead.\n• In the future, it may automatically mark props as , though that's a moot point if the props object is destructured in the parameter list.\n\nIn most cases it makes very little difference which syntax is used, but you may prefer the more explicit nature of ."
    },
    {
        "link": "https://react.dev/learn/typescript",
        "document": "The type describing your component’s props can be as simple or as complex as you need, though they should be an object type described with either a or . You can learn about how TypeScript describes objects in Object Types but you may also be interested in using Union Types to describe a prop that can be one of a few different types and the Creating Types from Types guide for more advanced use cases. The type definitions from include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types. However, we can look at a few examples of how to provide types for Hooks. The Hook will re-use the value passed in as the initial state to determine what the type of the value should be. For example: This will assign the type of to , and will be a function accepting either a argument, or a function that returns a . If you want to explicitly provide a type for the state, you can do so by providing a type argument to the call: This isn’t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example, here can be one of a few different strings: Or, as recommended in Principles for structuring state, you can group related state as an object and describe the different possibilities via object types: The Hook is a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to the call to provide a type for the state, but it is often better to set the type on the initial state instead:\n\nWe are using TypeScript in a few key places:\n• describes the shape of the reducer’s state.\n• describes the different actions which can be dispatched to the reducer.\n• provides a type for the initial state, and also the type which is used by by default.\n• sets the types for the reducer function’s arguments and return value. A more explicit alternative to setting the type on is to provide a type argument to : The Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component. The type of the value provided by the context is inferred from the value passed to the call:\n\nThis technique works when you have a default value which makes sense - but there are occasionally cases when you do not, and in those cases can feel reasonable as a default value. However, to allow the type-system to understand your code, you need to explicitly set on the . This causes the issue that you need to eliminate the in the type for context consumers. Our recommendation is to have the Hook do a runtime check for it’s existence and throw an error when not present: ! \"useGetComplexObject must be used within a Provider\" \n\n The Hooks will create/re-access a memorized value from a function call, re-running the function only when dependencies passed as the 2nd parameter are changed. The result of calling the Hook is inferred from the return value from the function in the first parameter. You can be more explicit by providing a type argument to the Hook. The provide a stable reference to a function as long as the dependencies passed into the second parameter are the same. Like , the function’s type is inferred from the return value of the function in the first parameter, and you can be more explicit by providing a type argument to the Hook. When working in TypeScript strict mode requires adding types for the parameters in your callback. This is because the type of the callback is inferred from the return value of the function, and without parameters the type cannot be fully understood. Depending on your code-style preferences, you could use the functions from the React types to provide the type for the event handler at the same time as defining the callback: There is quite an expansive set of types which come from the package, it is worth a read when you feel comfortable with how React and TypeScript interact. You can find them in React’s folder in DefinitelyTyped. We will cover a few of the more common types here. When working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.\n\nThere are many types of events provided in the React types - the full list can be found here which is based on the most popular events from the DOM. When determining the type you are looking for you can first look at the hover information for the event handler you are using, which will show the type of the event. If you need to use an event that is not included in this list, you can use the type, which is the base type for all events. There are two common paths to describing the children of a component. The first is to use the type, which is a union of all the possible types that can be passed as children in JSX: This is a very broad definition of children. The second is to use the type, which is only JSX elements and not JavaScript primitives like strings or numbers: Note, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts children. You can see an example of both and with the type-checker in this TypeScript playground. When using inline styles in React, you can use to describe the object passed to the prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the prop, and to get auto-complete in your editor. This guide has covered the basics of using TypeScript with React, but there is a lot more to learn. Individual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript. We recommend the following resources:\n• The TypeScript handbook is the official documentation for TypeScript, and covers most key language features.\n• The TypeScript release notes cover new features in depth.\n• React TypeScript Cheatsheet is a community-maintained cheatsheet for using TypeScript with React, covering a lot of useful edge cases and providing more breadth than this document.\n• TypeScript Community Discord is a great place to ask questions and get help with TypeScript and React issues."
    },
    {
        "link": "https://dev.to/wpreble1/typescript-with-react-functional-components-4c69",
        "document": "TypeScript has become a very popular enhancement for JavaScript applications. TypeScript is a superset of JavaScript that forces static typing and compiles into plain JavaScript. Similar to other statically-typed languages like C# or Java, it forces you to be deliberate with variable types by declaring them upon creation.\n\nIn this blog, I’ll cover the basics of incorporating TypeScript into the popular front-end framework (er… library) React with a focus on functional components and hooks.\n\nIf you’re completely new to TypeScript, check out my introduction.\n\nTo get up and running, let’s create a new React-TypeScript project directory with the popular generator, Create React App. The following command will install the basic type libraries for React, give us a few scripts for testing and building, and give us a default tsconfig file.\n\n\n\nNext, let’s run the start script to see the default React App.\n\n\n\nThis should automatically open up a browser window. A spinning React logo is cool, but let’s get rid of this bloat so that we can focus on our changes.\n\nReplace the div in the return statement with a simple Hello World message.\n\n\n\nIf you leave your left your start script running, you should see this change reflected in your browser.\n\nCreate a file called Child.tsx with the following starter code. This will create a simple component with three properties: name, id, and bio. Bio should be set to a default value.\n\n\n\nImport the Child module into your app component, and add the following element below the h1 tag.\n\n\n\nEven this simple rendering will cause compiling errors. This is because we haven’t typed our properties. If you look closely, we haven’t typed our Child component function either. Thankfully, we can make use of the React types library by simply importing the FC type. This is an alias for FunctionalComponent which is also acceptable. We’ll also import ReactElement which will be the return signature of the function\n\n\n\nNext, type the properties for the Child component. In order to use a default parameter for bio, we will make it optional with the ? character.\n\n\n\nFinally, define the function type and the return type, ReactElement.\n\n\n\nIf you are using an IDE that is compatible with TypeScript such as VSCode, you can hover over the property to confirm the type has been defined correctly.\n\nIf you try to change the type of the attribute in the parent component, such as passing a string for an id, TypeScript will throw a compile error.\n\nYour child component should now be rendering correctly.\n\nWhen using the useState hook, make sure to set the initial value to the correct type, and TypeScript will use type inference to determine the proper typing. A common pattern would be to establish the initial value as a prop.\n\n\n\nTypeScript can also infer type from a hard-coded initial state.\n\n\n\nuseEffect, the swiss army hook that replaced component lifecycle methods, accepts two parameters. The first must be a function, and a second optional parameter for specific states. As long as these two parameters are the correct type, TypeScript will compile correctly without any extra code. Here is a simple example to highlight the useEffect hook. This useEffect will only trigger when the component is loaded and when Button A is clicked.\n\n\n\nuseRef is an interesting hook because it can give a parent element information about a child element. Here is a typical assignment that can occur inside of the function body of a functional component.\n\n\n\nAssign the constant to the ref attribute of the child component.\n\n\n\nOnce you assign a reference, you can use any element property or method on that reference by accessing the .current property. Below, I’m using the getBoundingClientRect method to access position info about the button. However, TypeScript won’t be happy with this code.\n\n\n\nA simple workaround is to wrap your reference in a conditional.\n\n\n\nWhen putting it all together, make sure to assign the type of ref you are assigning, in this case an HTMLButtonElement. Notice I also assigned the type of the buttonInfo state to a ClientRect.\n\n\n\nIn the beginning, TypeScript can feel like an encumbrance to JavaScript programmers who are not used to thinking much about type. However, these habits can lead to tricky bugs and waste lots of time in development, especially in large or complicated applications. TypeScript forces you to adopt better habits and has great support from the React community.\n\nHope this blog was helpful. For more information about TypeScript and React including integration with class components, I recommend this blog."
    },
    {
        "link": "https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/hooks",
        "document": "Hooks are supported in from v16.8 up.\n\nType inference works very well for simple values:\n\nSee also the Using Inferred Types section if you need to use a complex type that you've relied on inference for.\n\nHowever, many hooks are initialized with null-ish default values, and you may wonder how to provide types. Explicitly declare the type, and use a union type:\n\nYou can also use type assertions if a state is initialized soon after setup and always has a value after:\n\nThis temporarily \"lies\" to the TypeScript compiler that is of type . You should follow up by setting the state — if you don't, the rest of your code may rely on the fact that is of type and that may lead to runtime errors.\n\nYou can type the just like any other function.\n\nNote that for React < 18, the function signature of typed arguments as by default:\n\nIn React >= 18, the function signature of changed to the following:\n\nTherefore, the following code will yield \" Parameter 'e' implicitly has an 'any' type. \" error in React >= 18, but not <17.\n\nYou can use Discriminated Unions for reducer actions. Don't forget to define the return type of reducer, otherwise TypeScript will infer it.\n\nBoth of and are used for performing side effects and return an optional cleanup function which means if they don't deal with returning values, no types are necessary. When using , take care not to return anything other than a function or , otherwise both TypeScript and React will yell at you. This can be subtle when using arrow functions:\n\nIn TypeScript, returns a reference that is either read-only or mutable, depends on whether your type argument fully covers the initial value or not. Choose one that suits your use case.\n\nTo access a DOM element: provide only the element type as argument, and use as initial value. In this case, the returned reference will have a read-only that is managed by React. TypeScript expects you to give this ref to an element's prop:\n\nIf you are sure that will never be null, it is also possible to use the non-null assertion operator :\n\nNote that you are opting out of type safety here - you will have a runtime error if you forget to assign the ref to an element in the render, or if the ref-ed element is conditionally rendered.\n\nTo have a mutable value: provide the type you want, and make sure the initial value fully belongs to that type:\n\nIf you are returning an array in your Custom Hook, you will want to avoid type inference as TypeScript will infer a union type (when you actually want different types in each position of the array). Instead, use TS 3.4 const assertions:\n\nThis way, when you destructure you actually get the right types based on destructure position.\n\nNote that the React team recommends that custom hooks that return more than two values should use proper objects instead of tuples, however.\n\nIf you are writing a React Hooks library, don't forget that you should also expose your types for users to use.\n\nSomething to add? File an issue."
    },
    {
        "link": "https://stackoverflow.com/questions/64356976/how-to-document-react-functional-components-using-jsdocs-and-typescript",
        "document": "What should the documentation look like?\n\nMy first approach was:\n• None I'm not sure if that's the correct way to specify the Array type of savedLocationsWeather as in\n• None I'm also not sure it's correct to specify LocationWeather as a jsdoc type, as in\n• None Is there even such a thing as a TSX.Element type, as in\n\nFinally, should I define PropTypes as done here?"
    },
    {
        "link": "https://coreui.io/blog/how-to-dynamically-add-remove-and-toggle-css-classes-in-react-js",
        "document": "How to dynamically add, remove, and toggle CSS classes in React.js\n\nManaging CSS classes dynamically in a React application is a common requirement, especially when it comes to creating interactive components. This article will guide you through various techniques to add, remove, and toggle CSS classes in React.\n\nSpeed up your responsive apps and websites with fully-featured, ready-to-use open-source admin panel templates—free to use and built for efficiency.\n\nUnderstanding the Basics of CSS Class Management in React\n\nIn React, CSS classes are applied to elements using the attribute. Unlike traditional HTML where you might directly manipulate class names via JavaScript, React provides a declarative way to manage CSS classes through state and props. This approach not only makes your code cleaner but also more predictable.\n\nTo add or remove a CSS class dynamically, you typically rely on the component’s state. Here’s an example:\n\nIn this example, the button toggles the CSS class based on the state. The attribute is dynamically set, allowing you to easily add or remove a CSS class as needed.\n\nToggling a CSS class in React is a straightforward process that involves updating the component’s state. Let’s extend the previous example:\n\nIn this code, the function flips the state between and , effectively allowing you to toggle a CSS class on the button.\n\nSometimes, you may need to manage multiple classes on an element. This can be achieved by concatenating class names or using a helper library like :\n\nHere, the library is used to dynamically toggle multiple classes based on state. The function helps in conditionally applying classes in a clean and readable way, allowing you to manage and add CSS classes more efficiently.\n\nIn more complex scenarios, you might need to apply different classes based on multiple conditions, which can be neatly handled using . Here’s an advanced example:\n\nIn this advanced example:\n• , , and : These states control the application of the respective classes.\n• : The function combines multiple classes into a single string based on the conditions, making it easier to toggle CSS classes based on complex logic.\n• Class: This class is always applied, demonstrating that you can mix static and dynamic classes.\n\nThis setup allows for complex CSS styling scenarios where you might need to apply multiple classes based on different conditions, providing a flexible and powerful way to add CSS classes and manage your CSS in React components.\n\nWhile dynamically adding/removing CSS classes is a powerful approach, sometimes you might need to apply styles directly using inline styles. Inline styles can be managed similarly by using the attribute and passing a style object:\n\nWhen to Use Inline Styles\n\nHere, the button’s , , and properties are dynamically changed based on the state. This method is particularly useful for styles that are calculated dynamically or aren’t predefined in your CSS files.\n\nWhen managing CSS in a React app, it’s important to choose the right approach depending on your use case:\n• CSS Classes: Use CSS classes for styles that are reused across multiple components.\n• Library: Consider using libraries like for managing complex class logic and making it easier to add CSS classes based on conditions.\n• Inline Styles: Use inline styles for dynamic, one-off styles that don’t need to be reused.\n\nBy following these techniques, you can effectively control the appearance and behavior of your React components, creating a more interactive and polished user experience. The ability to toggle CSS class dynamically allows for a more responsive and engaging UI.\n\nRemember, the key to mastering React is understanding how to leverage its declarative nature. Dynamically managing CSS classes is just one example of how you can harness this power to build robust and maintainable user interfaces."
    },
    {
        "link": "https://stackoverflow.com/questions/36209432/how-to-dynamically-add-a-class-to-manual-class-names",
        "document": "I need to add a dynamic class to a list of regular classes, but have no idea how (I'm using babel), something like this:\n\nYou can either do this, normal JavaScript: or the string template version, with backticks: Both types are of course just JavaScript, but the first pattern is the traditional kind. Anyway, in JSX, anything enclosed in curly brackets is executed as JavaScript, so you can basically do whatever you want there. But combining JSX strings and curly brackets is a no-go for attributes.\n\nDepending on how many dynamic classes you need to add as your project grows it's probably worth checking out the classnames utility by JedWatson on GitHub. It allows you to represent your conditional classes as an object and returns those that evaluate to true. So as an example from its React documentation: Since React triggers a re-render when there is a state change, your dynamic class names are handled naturally and kept up to date with the state of your component.\n\n[UPDATED Apr-21 2022: Adding curly brackets before and after backticks to prevent error] you can simply use the condition for applying the specific class you want <div className={`wrapper searchDiv ${this.state.something ? \"class that you want\" : \"\"}`}> if you want to use the class of makeStyle you can use it like\n\nEven though all of the answers above are quite good, the one that caught my attention is the string interpolation solution. So I'd like to propose a different approach to that using a custom . class StringBuilder { static Builder() { class Builder { constructor() { this.bucket = []; } append(str) { if (str !== null) { this.bucket.push(str); } return this; } build() { return this.bucket.join(' '); } } return new Builder(); } } Then you would just use it like this within a component. In general, if you have more elements that require dynamic CSS classes, you could just instantiate another builder for that particular element. Additionally, if the class appears in more than one element with the same logic, then the solution would be extracting that logic to a method or function.\n\nSomeone mentioned the classnames library, which looks interesting and useful, but you could do the same thing yourself: … // keep your class names in an object, // enabled or disabled by the Boolean value const classNames = { MyComponent: true foo: false bar: someConditionVar }; // construct the class name, e.g. \"MyComponent bar\" const className = Object.keys(classNames).filter(className => classNames[className]).join(' '); // example usage in React JSX return ( <div className=\"{className} … Iterating through the object name/value entries rather than only the keys allows this to be shortened to a single statement:"
    },
    {
        "link": "https://stackoverflow.com/questions/63727022/best-practice-in-react-when-come-to-classname-style-technique",
        "document": "I'm new in and Usually I'm doing my styling in or . I have some question regarding ClassName Best Practice in . I want to ask regarding best practice when giving a className in ReactJs (It will be helpful if you give me reason such as advantage and disadvantage when using one of the style).\n\nLet we said that I have a Page in with some css file in and . Here there is some technique I use when do styling in or Stating my class in there:\n• None --> I'm using scoped styling in this example\n• None --> I'm using global css file let say\n\nin general there is this two technique, but what Poke my curiosity is when you using a more complex and Custom CSS style in your project such as combining and CSS. this is the current technique I find:\n• None --> for this I'm using to write my full CSS lines so I'm only using one lines to defined my in here you can use too if you want to add some logic in here.\n• None --> Straight up using in my code\n\nfor information I'm really curious about this, since I find it quite an interesting topic that not a lot of article I find it useful for me to explain the differences and I had quite a discussion as one of the technique above only will make your code looks like a spaghetti code when your project becoming more larger in scale.\n\nI hope someone can help me to explain this problem to me since I'm really want to learn about this styling technique issue in react."
    },
    {
        "link": "https://css-tricks.com/different-ways-to-write-css-in-react",
        "document": "We’re all familiar with the standard way of linking up a stylesheet to the of an HTML doc, right? That’s just one of several ways we’re able to write CSS. But what does it look like to style things in a single-page application (SPA), say in a React project?\n\nTurns out there are several ways to go about styling a React application. Some overlap with traditional styling, others not so much. But let’s count all the ways we can do it.\n\nAs the name suggests, React can import CSS files. The process is similar to how we link up CSS file in the HTML :\n• Create a new CSS file in your project directory.\n• Import it into the React file.\n\nThat usually goes at the top of the file where other imports happen:\n\nIn this example, a CSS file is imported into an from the folder.\n\nYou may be used to hearing that inline styling isn’t all that great for maintainability and whatnot, but there are definitely situations (here’s one!) where it makes sense. And maintainability is less of an issue in React, as the CSS often already sits inside the same file anyway.\n\nThis is a super simple example of inline styling in React:\n\nA better approach, though, is to use objects:\n• First, create an object that contains styles for different elements.\n• Then add it to an element using the attribute and then select the property to style.\n\nLet’s see that in context:\n\nThis example contains a object containing two more objects, one for the class and the other for a text input, which contain style rules similar to what we’d expect to see in an external stylesheet. Those objects are then applied to the attribute of elements that are in the returned markup.\n\nNote that curly brackets are used when referencing styles rather than the quotation marks we’d normally use in plain HTML.\n\nCSS Modules… what the heck happened to those, right? They have the benefit of locally scoped variables and can be used right alongside React. But what are they, again, exactly?\n\nIn simpler terms, CSS Modules allows us to use the same class name in multiple files without clashes since each class name is given a unique programmatic name. This is especially useful in larger applications. Every class name is scoped locally to the specific component in which it is being imported.\n\nA CSS Module stylesheet is similar to a regular stylesheet, only with a different extension (e.g. ). Here’s how they’re set up:\n• Create a file with as the extension.\n• Import that module into the React app (like we saw earlier)\n• Add a to an element or component and reference the particular style from the imported styles.\n\nHave you used styled-components? It’s quite popular and allows you to build custom components using actual CSS in your JavaScript. A styled-component is basically a React component with — get ready for it — styles. Some of the features include unique class names, dynamic styling and better management of the CSS as each component has its own separate styles.\n\nInstall the styled-components npm package in the command line:\n\nNext up, import it into the React app:\n\nCreate a component and assign a styled property to it. Note the use of template literals denoted by backticks in the object:\n\nThe above component will be rendered as a div that contains those styles.\n\nOne of the advantages of styled-components is that the components themselves are functional, as in you can use props within the CSS. This opens the door up to conditional statements and changing styles based on a state or prop.\n\nHere, we are manipulating the div’s property on the display state. This state is controlled by a button that toggles the div’s state when clicked. This, in turn, toggles between the styles of two different states.\n\nIn inline statements, we use a instead of the usual / syntax. The part is after the semicolon. And remember to always call or use the state after it has been initialized. In that last demo, for example, the state should be above the component’s styles.\n\nThat’s a wrap, folks! We looked at a handful of different ways to write styles in a React application. And it’s not like one is any better than the rest; the approach you use depends on the situation, of course. Hopefully now you’ve got a good understanding of them and know that you have a bunch of tools in your React styling arsenal."
    },
    {
        "link": "https://dhiwise.com/post/the-ultimate-guide-to-customizing-react-button-styles",
        "document": "React, a powerful JavaScript library for building user interfaces, offers developers the flexibility to create and style components in various ways.\n\nOne of the most common UI elements is the button, and in React, styling buttons can be achieved through different methods, each with its own advantages.\n\nIn this article, we'll explore how to apply react button style effectively, ensuring that our buttons not only look good but also function seamlessly across different browsers and devices.\n\nBefore diving into styling, let’s set up a basic react button component. This will serve as the foundation for our styling examples throughout the article.\n\nHere, we’ve created a functional component named Button that accepts buttonText, onClick, and disabled as props. The 'disabled' attribute can be used to make buttons look inactive and prevent onClick handlers from firing. Now, let’s apply some inline styles to this button component.\n\nWith the inline buttonStyle object, we’ve given our button a background color, text color, padding, and other CSS properties to improve its appearance. The 'disabled state' can be managed by adding the 'disabled' prop to the button component.\n\nCSS-in-JS is a pattern where CSS is composed using JavaScript instead of defined in external files. One popular library for this is styled-components, which allows us to write actual CSS code to style our React components.\n\nIn the above snippet, we've created a StyledButton component with styled-components. This approach encapsulates the styles within the component, making it reusable and maintainable.\n\nCSS Modules provide a way to write CSS that's scoped locally to the component, avoiding global scope and naming conflicts.\n\nBy importing Button.module.css, we can use the styles object to apply our CSS classes to the React component, ensuring that the styles are not affected by other global styles.\n\nButtons often have different states, such as active, disabled, or loading. Let’s manage these states within our React button component.\n\nHere, we’ve added logic to change the button’s opacity and cursor when it’s in a disabled or loading state. We also conditionally render the buttonText or a loading message based on the loading prop. Additionally, the 'disabled cursor' can be set to 'not-allowed' to indicate the button is inactive.\n\nProps in React allow us to customize components. We can use props to change the button's appearance, such as its background color or size.\n\nIn this example, we're using the color and size props to customize the backgroundColor and padding of our button. This allows for a more dynamic and flexible button component that can be tailored to different parts of our app.\n\nIcons can enhance the user experience by providing visual cues about the button's function. Let's integrate icons into our React buttons using an icon library.\n\nIn this code snippet, we're using the react-icons library to import the FaBeer icon and render it inside our button alongside the label text.\n\nAccessibility is crucial for all users, including those using assistive technologies. When styling buttons, we must ensure they are accessible.\n\nUsing color or predefined button styles only provides a visual indication, which may not be conveyed to users of assistive technologies, such as screen readers. To ensure information is accessible, consider using additional attributes like aria-label or aria-describedby.\n\nBy using the aria-label attribute, we provide screen readers with a clear description of the button’s function, ensuring that all users have a good experience.\n\nCreating responsive buttons ensures that they look great on any device. Let’s use display and gap utilities to style buttons that adapt to different screen sizes.\n\nWith the help of CSS media queries and the display and gap properties, our button can adjust its width and spacing based on the screen size. You can create responsive stacks of full-width 'block buttons' using these utilities to ensure they are full-width and responsive.\n\nDifferent contexts require different button variants. Let's create a primary button and a toggle button variant.\n\nHere, PrimaryButton is a styled component for our primary action buttons, while ToggleButton changes its background color based on the toggled state.\n\nInteractivity is key for engaging users. Let's add styles that change on click and hover to make our buttons more interactive.\n\nThis InteractiveButton component uses CSS pseudo-classes :hover and :active to create a visual feedback when the user interacts with the button.\n\nBeyond appearance, buttons can also perform various functions. We can extend our button to act as a link or to create block and floating buttons.\n\nIn the above examples, ButtonLink uses the Link component from react-router-dom to navigate pages, while BlockButton and FloatingButton demonstrate different layout styles for buttons. When using the element as a button, applying the disabled state can affect its functionality, as it may not be clickable in some browsers.\n\nPerformance is crucial, especially when it comes to rendering components. Let's ensure our button styles are optimized for performance.\n\nBy using React.memo, we prevent unnecessary re-renders of our MemoizedButton component, which can improve the performance of our app, especially if the button is frequently updated.\n\nWhen styling React buttons, it's important to follow best practices to ensure consistency and maintainability.\n\nThis BestPracticeButton component removes the default browser styling with appearance: none, provides a smooth transition for the background color, and customizes the focus state to improve visibility without the default outline.\n\nEven experienced developers encounter styling issues. Let's address common problems and how to resolve them.\n\nIn this snippet, we've increased the specificity of our SpecificButton styles using the && syntax, which can help override styles inherited from other CSS classes.\n\nLet's look at how React button styles are applied in real-world scenarios, such as e-commerce checkout buttons or social media share buttons.\n\nThese components, CheckoutButton and ShareButton, are tailored for specific use cases in applications, demonstrating the versatility of React button styling.\n\nExporting and Reusing Button Styles Across Your React App\n\nTo maintain consistency and efficiency, it's beneficial to export and reuse button styles across your React app.\n\nBy exporting commonButtonStyle from SharedStyles.js, we can import and apply it to multiple button components like ReusableButton, ensuring a consistent look and feel throughout the app.\n\nMastering React button style involves understanding the various methods of styling, managing button states, ensuring accessibility, and applying best practices. By exploring the examples and concepts discussed in this article, you can create buttons that are not only visually appealing but also functional and accessible. Remember to keep experimenting with different styles and techniques to find what works best for your React app.\n\nShort on time? Speed things up with DhiWise!\n\nTired of manually designing screens, coding on weekends, and technical debt? Let DhiWise handle it for you!\n\nYou can build an e-commerce store, healthcare app, portfolio, blogging website, social media or admin panel right away. Use our library of 40+ pre-built free templates to create your first application using DhiWise."
    },
    {
        "link": "https://create-react-app.dev/docs/adding-typescript",
        "document": "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.\n\nTo start a new Create React App project with TypeScript, you can run:\n\nIf you've previously installed globally via , we recommend you uninstall the package using or to ensure that always uses the latest version. Global installs of are no longer supported.\n\nTo add TypeScript to an existing Create React App project, first install it:\n\nNext, rename any file to be a TypeScript file (e.g. to ) and create tsconfig.json if it's not in the root of your project file.\n\nType errors will show up in the same console as the build one. You'll have to fix these type errors before you continue development or build your project. For advanced configuration, see here.\n\nYou are not required to make a file, one will be made for you. You are allowed to edit the generated TypeScript configuration.\n• React + TypeScript Cheatsheets has a good overview on how to use React with TypeScript\n\nIf your project is not created with TypeScript enabled, npx may be using a cached version of . Remove previously installed versions with or (see #6119).\n\nIf you are currently using create-react-app-typescript, see this blog post for instructions on how to migrate to Create React App.\n\nConstant enums and namespaces are not supported, you can learn about the constraints of using Babel with TypeScript here."
    },
    {
        "link": "https://graphite.dev/guides/typescript-cra",
        "document": "In this guide, we'll walk through setting up a new React project with TypeScript using Create React App.\n\nCreate React App is an officially supported command-line interface (CLI) tool from Facebook that helps developers to create single-page React applications quickly without dealing with complex configurations. It sets up the environment so you can use the latest JavaScript features, providing a good developer experience and optimizing the application for production.\n\nBefore you start, ensure you have the following installed:\n• npm (comes with Node.js) or yarn (alternative package manager)\n\nTo create a new React app with TypeScript, you can use the command, which comes with npm 5.2+ and higher. allows you to run command-line tools from npm without installing them globally.\n\nOpen your terminal and run the following command:\n\nHere, is the name of your project. You can replace it with your preferred project name. The flag tells Create React App to use the TypeScript template.\n\nThis command does a few things: - : Executes the Create React App CLI without requiring a global installation. - : The CLI command to scaffold new React applications. - : The directory name for your new application. - : Specifies that you want to use the TypeScript template.\n\nOnce the setup is complete, navigate to your project directory:\n\nThis command starts the development server and opens your new React app in the browser. You should see the default CRA welcome screen.\n\nYour newly created React app with TypeScript will have the following structure:\n• : This directory contains the source code for your React app.\n• : The main component of your app.\n• : The entry point of your app.\n• : Provides TypeScript with information about the environment.\n• : This directory contains static files like .\n\nBy default, CRA with TypeScript comes with a few type definitions. You can add more types as needed.\n\nTypescript also leverages props to provide structure to components. Props (short for properties) are used to pass data and event handlers from a parent component to a child component in frameworks like React. They help maintain a structured and manageable way of controlling component behavior and rendering dynamic content based on the passed data.\n\nFor example, let's create a new component with typed props:\n\nIn this example, we define an interface that describes the props our component expects. The prop must be a string. This ensures type safety and provides better developer experience with autocompletion and type checking.\n\nUsing the new component\n\nTo use the component, import it and include it in your :\n\nExporting a component makes it available to be used in other parts of an application by including an keyword before the component definition. This allows other files or components to import and utilize the exported component, facilitating modular and reusable code architecture.\n\nThe file is where you configure TypeScript options. CRA provides a sensible default configuration, but you can customize it according to your needs. Here is an example :\n\nThis example configuration specifies that the code should compile to ES5 (a version of JavaScript), making it compatible with older browsers. The configuration also enables various features, such as allowing JavaScript files ( ), importing JSON modules ( ), and using JSX syntax ( ) set specifically for React, ensuring interoperability with CommonJS and ES modules. Additionally, it enforces stricter coding practices ( ), like consistent file naming ( ) and preventing fall-through cases in switch statements ( ), while excluding output generation ( ), focusing solely on type-checking and syntax verification.\n\nYou can add additional packages to your project using npm or yarn. For example, to add React Router for navigation, run:\n\nThe package provides TypeScript definitions for React Router.\n\nTo maintain code quality, you can integrate ESLint and Prettier into your project. CRA with TypeScript already includes ESLint, but you can customize it further.\n\nInstall Prettier and ESLint configuration for Prettier by running:\n\nThis file specifies the formatting rules to automatically apply to your codebase for consistency and style adherence.\n\nUpdating your to include Prettier ensures that your code not only adheres to the best practices and conventions defined by ESLint but also aligns with the consistent formatting enforced by Prettier. This integration allows for the automatic highlighting of style issues as errors, which can be fixed on-the-fly, improving code quality and efficiency.\n• To start the development server, use:\n• This command compiles the TypeScript code and opens your application in a web browser, watching for any changes you make to the files.\n• To build the application for production, use:\n• This command prepares the application for deployment, optimizing and minifying the code.\n\nYou have now created your first react app using Create React App and TypeScript!\n\nFor further reading see the official Create React App documentation."
    },
    {
        "link": "https://create-react-app.dev/docs/getting-started",
        "document": "Create React App is an officially supported way to create single-page React applications. It offers a modern build setup with no configuration.\n\nThen open http://localhost:3000/ to see your app.\n\nWhen you’re ready to deploy to production, create a minified bundle with .\n\nYou don’t need to install or configure tools like webpack or Babel. They are preconfigured and hidden so that you can focus on the code.\n\nCreate a project, and you’re good to go.\n\nYou’ll need to have Node >= 14 on your local development machine (but it’s not required on the server). You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.\n\nTo create a new app, you may choose one of the following methods:\n\nis available in npm 6+\n\nis available in Yarn 0.25+\n\nYou can now optionally start a new app from a template by appending to the creation command.\n\nIf you don't select a template, we'll create your project with our base template.\n\nTemplates are always named in the format , however you only need to provide the to the creation command.\n\nOur Custom Templates documentation describes how you can build your own template.\n\nYou can start a new TypeScript app using templates. To use our provided TypeScript template, append to the creation command.\n\nIf you already have a project and would like to add TypeScript, see our Adding TypeScript documentation.\n\nWhen you create a new app, the CLI will use npm or Yarn to install dependencies, depending on which tool you use to run . For example:\n\nRunning any of these commands will create a directory called inside the current folder. Inside that directory, it will generate the initial project structure and install the transitive dependencies:\n\nNo configuration or complicated folder structures, only the files you need to build your app. Once the installation is done, you can open your project folder:\n\nInside the newly created project, you can run some built-in commands:\n\nRuns the app in development mode. Open http://localhost:3000 to view it in the browser.\n\nThe page will automatically reload if you make changes to the code. You will see the build errors and lint warnings in the console.\n\nRuns the test watcher in an interactive mode. By default, runs tests related to files changed since the last commit.\n\nBuilds the app for production to the folder. It correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\n\nYour app is ready to be deployed."
    },
    {
        "link": "https://builtin.com/software-engineering-perspectives/create-react-app-typescript",
        "document": "Let’s take a look at creating a new React app that uses TypeScript from the jump, and convert an existing project from JavaScript to TypeScript.\n\nMore App Development Advice3 Steps to Finishing Your App. Hint: Start at the End.\n\nHow to Create a New React App With TypeScript\n\nIf you’re building a new app and using , the docs are great:\n\nOnce you run the above command your new application is efficiently created with no special settings to enable or packages to download. All the files that would have been files are now or .\n\nIf you’ve found yourself in the situation where you’ve already gotten started on a project and want to convert to TypeScript, don’t worry! There’s a solution for that, too.\n\nMore From Built In ExpertsSo You Want to Be a Full Stack Developer? Here’s What You Actually Need.\n\nHow to Convert an Existing React App to TypeScript\n\nIn the terminal, navigate to your app directory, where you’ll want to install TypeScript:\n\nNow rename any files you would like to be TypeScript files to end in . For example, , instead of .\n\nHere’s where you might run into issues. If you open your file, you’ll see that almost everything is underlined in red. Not great.\n\nFirst, you’ll want to import at the top of the file if you weren’t doing so already.\n\nIf you’re in VSCode and hover over any underlined element, you’ll get the message “Cannot use JSX unless the ‘ — jsx’ flag is provided.” At this point, you can either click the “Quick Fix” option, or you can fix it manually. If you click “Quick Fix,” you’ll get an option that says “Enable the ‘ — jsx’ flag in your configuration file.” Once you click on it, it takes a second or two to load, and then the errors should go away.\n\nIf you want to do it manually, go into your file, locate the key of and change the value to instead of .\n\nIf you’re still getting an error in your file, you might be using different versions of TypeScript. Type to open quick settings in VSCode, and look for “TypeScript: Select TypeScript version…”. Click that, and choose “Use Workspace Version.”\n\nHopefully now you are free of any errors, your code is compiling and you’re ready to get a fantastic app going!"
    },
    {
        "link": "https://stackoverflow.com/questions/48967495/adding-typescript-to-existing-create-react-app-app",
        "document": "I'm having difficulties adding TypeScript to an already existing create-react-app application. Previously I've always added it before starting the project, simply by , but that doesn't work now.\n\nThe only \"solution\" I found here is:\n• Copy , , from the temporary project src folder to your project's folder.\n• In , change all the references to to in the scripts section.\n\nThis just seems like a weird workaround, and not very efficient. Does anyone know if it's possible to add it in a better way than this?"
    }
]