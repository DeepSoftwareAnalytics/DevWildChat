[
    {
        "link": "https://forum.arduino.cc/t/home-automation-system-components/277613",
        "document": "The Arduino WiFi Shield connects your Arduino to the internet wirelessly"
    },
    {
        "link": "https://predictabledesigns.com/home-automation-with-an-arduino-a-basic-tutorial",
        "document": "In this tutorial you will discover how to build a simple home automation solution using an Arduino microcontroller development kit and a Bluetooth module so you can control it from your smartphone.\n\nFrom controlling the room lights with your smartphone to scheduling events to occur automatically, home automation has taken convenience to a whole new level.\n\nInstead of using mechanical switches, you can now conveniently control all the devices in your home from your fingertips.\n\nThis tutorial will show you how to setup a simple home automation solution allowing you to control almost any electrical device from your smartphone.\n\nThe core hardware is rather simple and only consists of an Arduino microcontroller kit, a Bluetooth wireless module, and a relay.\n\nHere’s what you’ll need to get started:\n\n– Arduino UNO (or Mega, Pro, Mini – but in this tutorial we use the UNO)\n\n – Relay module\n\n – HC 05 Wireless Bluetooth Module\n\n – Lamp\n\n – 2.2k ohm resistor\n\n – 1k ohm resistor\n\n – Breadboard\n\n – Jumper wires\n\nOnce you have all the required components, here’s how you need to wire things up:\n\nHow to Connect the Bluetooth HC-05 to the Arduino\n\n1) Connect the Arduino’s +5V and GND pins to the bus strips on the breadboard, as shown in the above circuit diagram.\n\n2) Power the HC-05 module by connecting the 5V and GND pins to the bus strips on the breadboard.\n\nThe HC-05 is powered using 5VDC but includes an on-board voltage regulator that generates a 3.3V supply to power the transceiver. This means the TXD/RXD pins operate at only 3.3V.\n\n3) Connect the TXD pin on the HC-05 module with the RXD pin (Pin 0) on the Arduino. This connection allows the HC-05 to send data to the Arduino.\n\nThe reason why we pair up TXD on the Bluetooth module with RXD on the Arduino is because the TXD pin is used to transmit data from the Bluetooth transceiver, while the RXD pin is used to receive data on the Arduino.\n\nAlthough the Arduino is using 5V signal levels, and the HC-05 is using only 3.3V signal levels, no level shifting is required on this particular signal.\n\nThis is because the Arduino is based on an ATmega328 microcontroller which defines a logic high as any level above 3V. So no level shifting is necessary when going from 3.3V to 5V.\n\nHowever, that isn’t always true when going the other direction from 5V to 3,3V as we’ll discuss in the next step.\n\n4) Now we need to connect the TXD pin on the Arduino to the RXD pin on the HC-05.\n\nThis connection will form the second half of the two-way communication and is how the Arduino sends information to the HC-05.\n\nSince the receiver data lines on the HC-05 are only 3.3V tolerant, we need to convert the 5V transmit signal coming from the Arduino into a 3.3V signal.\n\nWhile this is usually best done using a logic level converter, we’re instead just using a simple voltage divider to convert the 5V signal into a 3.3V signal.\n\nAs shown in the circuit diagram, we’ve connected a 1k ohm and a 2.2k ohm resistor across the GND and TXD pins on the Arduino.\n\nThis is called a resistor divider because it divides down the input voltage. We obtain the 3.3V level signal from the intersection of these two resistors.\n\nThe equation for a divided down voltage is Vout = [2.2k/(2.2k + 1k)]*5V = (2.2k/3.2k)*5V = 3.46V, which is close enough to 3.3V to prevent any damage to the HC-05.\n\nThis crude solution should never be used with a high-speed signal because the resistors form a low-pass RC filter with any parasitic capacitance on the connection.\n\nOnce you have connected the HC-05 module to the Arduino, you can power the Arduino with a 12V DC supply or USB cable.\n\nIf the red and blue LEDs on the HC-05 are blinking, then you have successfully connected the Bluetooth module with the Arduino.\n\nWe don’t use the STATE and EN pins on the HC-05 module, since they are not required for this setup.\n\nThe next step is to connect the Arduino to a relay module, so that we can turn the connected device ON/OFF.\n\nAs shown in the circuit diagram above, we’ll be connecting the relay module in series with our electrical load, so that we can break the connection when we want to turn the device off and complete the circuit when we want to turn it on.\n\nFor this application we’re using a relay module which includes the relay drive circuit allowing it to connect directly to a microcontroller GPIO pin.\n\nThe relay module we’re using can handle up to 10 amps of current at up to 240V AC.\n\nThat’s enough current for a lot of devices but not enough for high power appliances like a heater or dryer. For high power appliances you’ll likely need about twice the current capacity (~ 20 amps).\n\nYou can either upgrade to a higher current relay, or place multiple relays in parallel. Two 10 amp relays in parallel are equivalent to a single 20 amp relay since half of the current goes through each relay.\n\nDANGER: High-voltage AC can be potentially very dangerous so be sure to follow appropriate safety precautions. Predictable Designs assumes no responsibility for any injury or damage that may occur by following this tutorial.\n\nHow to connect the relay module to the Arduino:\n\n1) First, connect the 5V and GND pins of the relay module to the bus terminals on the breadboard.\n\n2) Next, connect the IN1 pin on the relay module with PIN 4 on the Arduino.\n\nIf you have a multi-channel module (2, 4 or 8 channels), you can connect IN2, IN3 … In(n) with different digital pins on the Arduino, and repeat the steps below for configuring the other pins.\n\n3) Now we need to connect the AC load to the relay module. If you look carefully at the terminal block on the relay module, you’ll find these three terminals:\n\nC: Common\n\n NC: Normally Closed\n\n NO: Normally Open\n\nWhen the relay is off, the COM terminal is connected to the NC (Normally Closed) terminal, which means if you connect the bulb to the NC terminal, it will turn ON even when the relay isn’t energized.\n\nBut that’s not what we want. We want to turn on the bulb only when we send a signal from smartphone.\n\nThat’s the reason we connect the load to the NO (Normally Open) terminal, so that when the relay is triggered from the Arduino, the contact switches from the NC terminal to the NO terminal, thereby completing the circuit.\n\nAfter you have successfully wired things up, the next step is to upload the code to the Arduino.\n\nIn order to upload the code, connect the Arduino through the USB port on your computer and open the Arduino IDE. After that, copy the below sketch in a new window, and try to run it on your Arduino.\n\nThe code is actually pretty simple.\n\nIt initializes the relay first in the setup() method, and then waits for input on the serial port in the loop() method. If ‘1’ is received as input, it turns on the relay, and if ‘0’ is received, it turns off the relay.\n\nSince the Arduino UNO uses its UART port for programming, it can’t communicate with the computer and receive data from the HC-05 Bluetooth module at the same time. If you have attempted the above code on an UNO, you should get the error:\n\nDon’t worry though. Simply unplug the jumper wire connected to Pin 0 on the Arduino UNO (RXD pin), and re-attempt the code update.\n\nYou should now be able to update the code successfully. After programming is complete then reconnect the jumper wire.\n\nNOTE: This is a long, very detailed article so here's a free PDF version of it for easy reading and future reference.\n\nControlling the bulb from your Android device\n\nNow that we have setup the hardware and successfully uploaded the code, the next step is to control the setup from a smartphone.\n\nIn order to that, you’ll need to download the Arduino Bluetooth Controller app on your Android device.\n\nHere’s how to configure your Android device to send commands to the Arduino:\n\n1) Open the app on your smartphone. It will ask for Bluetooth permissions. Click ‘Allow’.\n\n2) Next, it will list all the available devices in your vicinity. Select HC-05.\n\n3) Once you select the device, you’ll be connected to the HC-05 transceiver. The app will now prompt you to enter the mode that you wish to use. Select ”Switch” mode.\n\n4) You should be redirected to the following screen. Click on the “Settings” icon in the top-right corner of the screen.\n\n5) It will now ask you to set values for ON and OFF. Enter ‘1’ in the ON textbox and ‘0’ in the OFF textbox. Click Submit.\n\nThat’s it! Here’s a short video showing the setup in action:\n\nUsing the above setup, you can turn any device into a smart device that can be controlled from your smartphone.\n\nWhile we used a single relay in this example, you can easily expand your system by using a multi-channel relay module.\n\nTo keep things simple, we have used a Bluetooth app that allows you to control only a single load, but in case you wish to control more devices, you can use a use a more sophisticated Bluetooth control app or write your own custom Android app."
    },
    {
        "link": "https://docs.arduino.cc/learn/starting-guide/getting-started-arduino",
        "document": ""
    },
    {
        "link": "https://littlecaesars.fieldagent.net/default.aspx/uploaded-files/4030132/ArduinoProjectsHomeAutomation.pdf",
        "document": ""
    },
    {
        "link": "https://scholarworks.calstate.edu/downloads/pk02cc68z",
        "document": ""
    },
    {
        "link": "https://docs.arduino.cc/tutorials/uno-wifi-rev2/uno-wifi-r2-mqtt-device-to-device",
        "document": ""
    },
    {
        "link": "https://cedalo.com/blog/mqtt-and-arduino-setup-guide",
        "document": "In the IoT field, where several devices communicate and exchange data, a lightweight and efficient messaging protocol is necessary to ensure reliable and scalable communication. MQTT (Message Queuing Telemetry Transport) is a protocol that fits this requirement well and has become a de facto standard for IoT deployments.\n\nThis tutorial will show how easy and fast you can prototype your next IoT project by combining the efficiency of MQTT with the well-known Arduino platform.\n\nArduino is an excellent open-source electronics platform that has gained immense popularity among hobbyists and tech enthusiasts. Arduino’s greatest strength lies in its versatility, featuring a variety of microcontrollers – which are small, programmable devices that allow you to interact with the physical world by reading sensor inputs and controlling outputs. Atmel microcontrollers typically power these boards and come equipped with built-in input/output pins, analog and digital interfaces, and many other features.\n\nArduino is an absolute choice for anyone passionate about electronics and eager to bring creative projects to life. Its user-friendly interface and extensive catalog of ready-to-use libraries allow even beginners to grasp the basics of programming and electronics quickly.\n\nIn this article, I will utilize the Arduino Uno WiFi Rev2 (Figure 1), which is widely considered the most straightforward entry point to IoT within the Arduino board family.\n\nThis specific version has the following main characteristics:\n\nVisit the official Arduino website for further details on the Uno WiFi Rev2 board.\n\nArduino and MQTT: An example of a perfect match!\n\nDespite Arduino’s strengths, its main constraints lie in its limited resources, particularly in terms of memory. Arduino boards typically have limited RAM and flash memory capacities, which can pose constraints when working on complex projects with extensive code or data storage requirements, and it’s here where the MQTT protocol plays a key role.\n\nMQTT is an excellent fit for small resource devices due to its lightweight protocol design. With minimal overhead and efficient data transmission, MQTT optimizes memory and bandwidth usage, making it ideal for constrained environments like Arduino. This enables small devices to communicate seamlessly and reliably while conserving valuable system resources for other applications.\n\nBefore diving into the practical aspect of my Arduino MQTT project example, let’s take a moment to describe the design implementation. In my setup, the Arduino board will act as a publishing client, while the subscriber and the broker will be deployed on a Windows PC using the Mosquitto MQTT broker. Figure 2 shows a graphical representation of the project design.\n\nThe Mosquitto MQTT broker remote access option must be enabled for this configuration. Arduino will periodically publish a message containing a simulated temperature reading, demonstrating the implementation of MQTT over Arduino.\n\nBefore proceeding with the Arduino MQTT publish implementation example, explore the Cedalo MQTT Platform to elevate your solution with the Pro Edition for Eclipse Mosquitto™ broker. Sign up for a free Cedalo MQTT Platform trial for access to advanced broker features such as MQTT High Availability, enhanced security, management APIs, or a high-performance local persistence database.\n\nLet’s get started: Install and configure the Arduino IDE\n\nIf you just purchased your Arduino and have no prior experience on this topic, it is also highly probable that you still need to install the IDE on your PC. If you already have the IDE installed, skip to the “Install board package and libraries” section below.\n\nI will select the Windows version for this tutorial, but versions for Linux are also available. Once the download is complete, open the executable to start the installation.\n\nWait for the setup to complete, then open the IDE, and the following window will appear:\n\nWhen starting the Arduino IDE for the first time, it will update some libraries and install some drivers. The drivers are necessary to connect and program the Arduino boards properly.\n\nIt is necessary to install the appropriate software packages and libraries for the Arduino board I will use for the example, which are:\n\nTo do this, go to Tools > Board > Board Manager in the IDE menu bar, look for the Arduino megaAVR Boards package, then click Install (Figure 5). This package enables the Arduino UNO WiFi Rev2 board to be supported. Please note that the package name may differ if you have a different board.\n\nAfter installing the support package for the board, I can proceed with installing the necessary software libraries, which are ArduinoMqttClient for managing MQTT and WiFiNINA for WiFi support.\n\nSimply need to navigate to Tools > Manage libraries to install the two libraries.\n\nWith the configuration of the IDE now complete, I can proceed with writing the software.\n\nI will program my Arduino board to publish periodic messages on the MQTT topic . The message will contain a temperature value simulating an actual measure made by a home automation system, and will be sent within a cyclical period of 5 seconds.\n\nThe flowcharts in Figures 7 and 8 depict the software idea divided into two parts: the initialization and the actual software functionality. The “setup” function represents the initialization, while the “loop” function describes the software functionality. It is important to note that the Arduino IDE creates a setup and loop function by default, and I will write all the software inside these functions.\n\nNow, lets copy and paste the following code snippet into the project. The language used in this example is C++, often used to program Arduino, in combination with C.\n\nAs mentioned, the software structure relies on two functions: setup and loop, which the Arduino software structure defines by default. The setup function is where I will initialize my system and all that I need later in the program (e.g., peripherals, libraries). This function only executes once after a power cycle of the board.\n\nFor my project, the setup function starts the serial port and WiFi module, ensuring the device is connected and running. The initialization routine is the best choice since all these steps must be executed only once.\n\nAfter completing the initialization function implementation, I can proceed with the actual program functionality. The loop function is where I can place my actual program, which Arduino executes it cyclically – making it the right place for the program body.\n\nThe program is fairly straightforward. First, start by polling the MQTT handler using the poll() method of the mqttClient object. This step is necessary for handling the library’s keep-alive timer and internal states. Once this is complete, I can check the current timer status. When the timer elapses, Arduino will publish the current temperature value using the methods beginMessage(), print(), and endMessage(). I will simulate the temperature value to be 25 °C. As an added feature, Arduino will log the complete process on the serial port for debugging purposes.\n\nStart the test: Arduino and MQTT in action\n\nNow Arduino is ready to run and publish the message. But first, I must ensure that the correct environment is set up, as demonstrated in Figure 2.\n\nLet’s start the broker on the Windows PC by typing the following command into a Powershell console:\n\nThe configuration file must contain the correct settings to enable the Remote Access functionality. This is necessary to allow “remote” connections, like those originating from my Arduino client.\n\nAn earlier tutorial on Raspberry Pi explains how to activate remote access on the Mosquitto MQTT broker. But, if you require personalized support that meets your specific needs, consider exploring the professional technical support options.\n\nTo start the subscriber, input the following command into a second Powershell console:\n\nThe broker and subscriber are now ready, and I can start my Arduino client.\n\nConnect the Arduino board to the PC through the USB connection, and select it through the Arduino IDE, as shown in step 1 from Figure 9.\n\nThen click on the arrow (as shown in step 2) to compile the program.\n\nIf no issues are present in the source code, the program will start and the compilation output console will show the ROM and RAM usage information.\n\nTo view the logged output of Arduino, simply switch to the serial monitor view by clicking on Tools > Serial Monitor (Figure 11). The serial monitor window will appear (Figure 12), and I’ll be able to see all the relevant output.\n\nAs you can see from Figure 12, Arduino will try to connect to the WiFi network and then to the MQTT broker.\n\nAfter establishing the connection with the MQTT broker, the Arduino client will cyclically publish the simulated temperature value every 5 seconds. As shown in the subscriber console (Figure 13), the temperature numerical value of 25 °C reaches the subscriber.\n\nIn this project, I successfully integrated MQTT with Arduino, demonstrating the synergy between these two technologies in the world of IoT.\n\nMQTT’s lightweight, publish-subscribe messaging protocol has proven to be an ideal fit for Arduino, enabling smooth communication between devices. The configuration process was straightforward, accentuating Arduino’s user-friendly nature.\n\nA significant advantage of working with Arduino was the availability of pre-written libraries. These libraries saved valuable development time, allowing me to focus on the implementation of the desired functionalities.\n\nIn conclusion, combining MQTT and Arduino offers a practical and efficient solution for IoT projects."
    },
    {
        "link": "https://resources.altium.com/p/getting-started-mqtt",
        "document": "In today’s world where connected devices have become ubiquitous, the term (IoT) has become the de facto description for “widget that is connected to the internet.” While this glorified, camel case, acronym is beautiful in it’s own right there’s so much more to “internet connected devices” than what people realize. In this article I’d like to dive deeper into one of the most prevalent protocols used in IoT devices: the MQ Telemetry Transport (MQTT) protocol. We’ll briefly cover what it is, how it works, and what’s novel about it versus other technologies used out there. We’ll also walk through a comprehensive example using an Arduino device.\n\nThe What and Why of MQTT\n\nIn a typical client-server setup we have a provider (i.e. the devices themselves) that post sensor data to the server and a consumer that requests to view that sensor data from the server. MQTT is no different. It is a lightweight protocol used to communicate between devices. Devices will typically “publish” (i.e. send) data to an MQTT “broker” (or server) which is then kept to be served to other devices or web applications. Another device or web application will “subscribe” to that data set (i.e. request the data) from the MQTT broker and then the MQTT broker delivers that data to them. Think of this really as just a glorified web server with two major exceptions:\n• The data packets are very lightweight (which improves speed, efficiency, and cost)\n• MQTT can use other communication modes other than just the internet (e.g. Bluetooth)\n\nFor the two above mentioned reasons MQTT has become a very popular protocol with IoT devices. Historically people would use HTTP POST/GET requests to achieve this form of device-server communication but it inhibited their ability to use other communication devices such as Bluetooth or ZigBee. Since MQTT is agnostic in that respect we can now have message passing capabilities within a mesh based network using MQTT without ever connecting to the internet\n\nThere are many ways to get started with MQTT including designing a full, end-to-end solution. To make things simple we’ll be utilizing a free MQTT broker service provided by Adafruit in this example. This will enable us to focus on just the client side of the development process. To get started you’ll need the following:\n• Arduino Device (This example uses the Arduino Uno)\n• Arduino shield supporting internet connectivity (i.e. Arduino Ethernet shield) or a Wifi based Arduino compatible device such as the ESP8266.\n\nThere are a few things we need to do first in order to set up our environment. Let’s first set up our hardware. I’m going to use an Arduino Uno and Arduino Ethernet Shield hooked up to my local network.\n\nWe’ll need to stack the Ethernet Shield on top of the Arduino and plug it into the network like so:\n\nOnce we’ve got our hardware configured let’s open the Arduino IDE and install the necessary libraries. Open up the Arduino IDE and navigate to Tools > Manage Libraries…\n\nSearch for the Adafruit MQTT Library and click install:\n\nYou will be prompted to install library dependencies as well. Go ahead and click on “Install all.”\n\nOnce you’ve installed the support libraries you can open up an example by navigating to File > Examples > Adafruit MQTT Library > mqtt_ethernet.\n\nAt this point we need to take a pause and grab our credentials from our Adafruit IO account. Log into Adafruit IO and click on “My Key” at the top:\n\nNow come back to your Arduino sketch example and fill in the AIO_USERNAME and AIO_KEY fields with the “Username” and “Active Key” fields located in your Adafruit IO account. Ensure your device is connected and then click on Upload:\n\nTo view the status of the device (and to ensure it is connected to the MQTT broker) navigate to Tools > Serial Monitor. You should see an output that looks like this:\n\nAt this point we have confirmed that the data is successfully being sent to the MQTT broker. To have a look at the actual data on the server let’s go back to our Adafruit IO account and click of “Feeds” then click on “photocell”\n\nWe now get a live capture of the data that our Arduino is sending to the MQTT broker. We can also download historical data as well.\n\nCongratulations! You have now set up an MQTT enabled device and published your data to an MQTT broker. Now take the next step by building your own custom sensors and publishing the data to your MQTT broker.\n\nIn this article we learned what MQTT is, why it’s used, and how to implement it on a microcontroller. We also demonstrated how to get started with a free MQTT broker service and view the data on their server. You should now be comfortable with starting your own Arduino sketch based on the example we used to publish your own sensor data to the MQTT broker and view it on the cloud."
    },
    {
        "link": "https://community.element14.com/products/arduino/arduino-projects/b/blog/posts/integrating-arduino-with-mqtt-for-iot-applications",
        "document": ""
    },
    {
        "link": "https://forum.arduino.cc/t/i-am-going-to-start-my-arduino-uno-with-mqtt-message-passing-protocol/354028",
        "document": "I ma going to start a project in which i am using controller board Arduino UNO and MQTT message passing with C# client library and mosquito broker.. Can and y body help me out how do i connect arduino UNI board with my C# MQTT client.\n\nI just had a quick Google on the subject and while there's lots of information out there, it doesn't seem to say what the underlying network is that enables transport of MQTT messages. I expect that it's TCP/IP, which means \"internet\". So you need a WiFi or Ethernet shield on your Arduino.\n\nThanks morgan for your qiuck reply..appreciated, I have checked the most of the information in google...i need some specific information about Arduino programming....only C language is use form program the Arduino board...basically i am working in .net development...so i need to figrue out the some question.\n\n what language i can use to program Arduino board?\n\n how do i plug the temperature sensor with Arduino UNO?\n\n then after plug my temperature sensor to board how do i connect this board with Mosquitto Broker?\n\nwhat language i can use to program Arduino board? how do i plug the temperature sensor with Arduino UNO? Duct tape. If you define, by posting a link, which temperature sensor you are referring to, something other than a smart-ass answer might be forthcoming. then after plug my temperature sensor to board how do i connect this board with Mosquitto Broker?\n\nimranbscs:\n\n I ma going to start a project in which i am using controller board Arduino UNO and MQTT message passing with C# client library and mosquito broker.. It would help greatly if you explain what you are trying to achieve. An Arduino is not the ideal thing for web programming. A PC or a Raspberry Pi would probably make the job much easier. An Arduino Yun combines a Linux PC (less powerful than an RPi) with a Leonardo and includes Wifi and an Ethernet connector. You could do most of the programming in Python on the Linux side and use the Leonardo side for data collection from the sensors. ...R\n\n PS, when I read your title I thought you were writing a Tutorial to explain how you did it.\n\nThanks Robin.. sorry about the topic i will be careful next time Thanks dev and paul for quick replies I am new in IOT,electronic and all those stuff so very passionately do some stuff in IOT so i think my questions are not that appropriate as an experience person...but thanks all of you."
    }
]