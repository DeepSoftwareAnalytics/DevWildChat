[
    {
        "link": "https://mui.com/x/react-data-grid/row-selection?srsltid=AfmBOorkceEk5e0xgNJD_HpDa0PI7UhfwjABfIgLYeyBw3Trk2zMGGPW",
        "document": "Row selection allows the user to select and highlight a single or multiple rows that they can then take action on. Single row selection comes enabled by default for the MIT Data Grid component. You can select a row by clicking it, or using the keyboard shortcuts. To unselect a row, hold the ( on MacOS) key and click on it.\n\nUse the prop to indicate if a row can be selected. It's called with a object and should return a boolean value. If not specified, all rows are selectable. In the demo below only rows with quantity above 50,000 can be selected:\n\nIf you provide a custom checkbox column to the Data Grid with the field, the Data Grid will not add its own. We strongly recommend to use the variable instead of re-defining all the custom properties yourself. In the following demo, the checkbox column has been moved to the right and its width has been increased to 100px.\n\nBy default, when you click the \"Select All\" checkbox, all rows in the Data Grid are selected. If you want to change this behavior and only select the rows that are currently visible on the page, you can use the prop.\n\nUsing the controlled selection with may result in selected rows being lost when the page is changed. This happens because the Data Grid cross-checks with the prop and only calls with existing row IDs. Depending on your server-side implementation, when the page changes and the new value for the prop does not include previously selected rows, the Data Grid will call with an empty value. To prevent this, enable the prop to keep the rows selected even if they do not exist. By using this approach, clicking in the Select All checkbox may still leave some rows selected. It is up to you to clean the selection model, using the prop. The following demo shows the prop in action:\n\nThe grid exposes a set of methods that enables all of these features using the imperative . To know more about how to use it, check the API Object section. Only use this API as the last option. Give preference to the props to control the Data Grid."
    },
    {
        "link": "https://v4.mui.com/components/data-grid/selection",
        "document": "Selection allows the user to select and highlight a number of rows that they can then take action on. Row selection can be performed with a simple mouse click, or using the keyboard shortcuts. The grid supports single and multiple row selection. Single row selection is enable by default with the component. To unselect a row, hold the key and click on it. For the , you need to disable multiple row selection with .\n\nYou might have interactive content in the cells and need to disable the selection of the row on click. Use the prop in this case.\n\nUse the prop to indicate if a row can be selected. It's called with a object and should return a boolean value. If not specified, all rows are selectable. In the demo below only rows with quantity above 50000 can be selected:\n\nThe grid exposes a set of methods that enables all of these features using the imperative apiRef. ‚ö†Ô∏è Only use this API when you have no alternative. Always start from the declarative API that the grid exposes.\n\n‚ö†Ô∏è This feature isn't implemented yet. It's coming. üëç Upvote issue #208 if you want to see it land faster. With this feature, you will be able to select ranges of cells across the Grid."
    },
    {
        "link": "https://github.com/mui/mui-x/issues/4676",
        "document": "The current behavior makes it so that a controlled selection is getting \"blown away\" when the page changes thus making retaining the difficult / impossible. I am following the example in the documentation and am on version\n\nDemo taken from the documentation with a added to show state is not being retained when changing pages:\n\n https://codesandbox.io/s/controlledselectionserverpaginationgrid-material-demo-forked-6whmr8?file=/demo.tsx\n\nSeems like it may be a regression or related to #2136\n\nWhen the page changes, the selection model callback should either:\n‚Ä¢ Be invoked with the provided selection model\n‚Ä¢ Not invoked at all (but I do understand why it's being invoked)\n\nFollow the steps / code described in the documented example to see that it no longer works when opened separately (although it is unclear to me why it seems to be working on the documentation itself)\n‚Ä¢ Go to page 2 and notice that the bottom does not show any rows being selected. Selecting all rows on page will show 5 rows selected (the demo shows the total selected across all pages)\n‚Ä¢ Go back to page 1 and notice no selection have persisted.\n\nI have added statements so you can see the calls\n\nI am trying to retain selections when changing pages using server side pagination."
    },
    {
        "link": "https://github.com/mui-org/material-ui-x/issues/3134",
        "document": ""
    },
    {
        "link": "https://v4.mui.com/api/data-grid/data-grid",
        "document": "The API documentation of the DataGrid React component. Learn more about the props and the CSS customization points.\n\nThe name can be used when providing default props or style overrides in the theme.\n\nThe label of the grid. The id of the element containing a label for the grid. If , the grid height is dynamic and follow the number of rows in the grid. If , the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar. If , the grid get a first column with a checkbox that allows to select rows. Override or extend the styles applied to the component. See CSS API below for more details. CSS classname to add on the outer container. Number of columns rendered outside the grid viewport. Extend native column types with your new column types. Overrideable components props dynamically passed to the component at rendering. Sets the density of the grid. If , the column menu is disabled. If , the column selector is disabled. If , the density selector is disabled. If , rows will not be extended to fill the full width of the grid container. If , the selection on click on a row or cell is disabled. If , the virtualization is disabled. An error that will turn the grid into its error state and display the error component. Controls whether to use the cell or row editing. Set the edit rows model of the grid. Filtering can be processed on the server or client-side. Set it to if you would like to handle filtering on the server-side. Set the filter model of the grid. A function that allows the grid to retrieve the row id. Set the height in pixel of the column headers in the grid. If , the footer component is hidden. If , the pagination component in the footer is hidden. If , the row count in the footer is hidden. If , the selected row count in the footer is hidden. Set of icons used in the grid. Callback fired when a cell is rendered, returns if the cell is editable. Determines if a row can be selected. Set of text labels used in the grid. You can find all the translation keys supported in the source in the GitHub repository. Pass a custom logger in the components that implements the 'Logger' interface. Allows to pass the logging level or false to turn off logging. Nonce of the inline styles for Content Security Policy. Callback fired when a click event comes from a cell element. Callback fired when a double click event comes from a cell element. Callback fired when a keydown event comes from a cell element. Callback fired when a mouse over event comes from a cell element. Callback fired when a mouse out comes from a cell element. Callback fired when a mouse enter event comes from a cell element. Callback fired when a mouse leave event comes from a cell element. Callback fired when a click event comes from a column header element. Callback fired when a double click event comes from a column header element. Callback fired when a mouseover event comes from a column header element. Callback fired when a mouseout event comes from a column header element. Callback fired when a mouse enter event comes from a column header element. Callback fired when a mouse leave event comes from a column header element. Callback fired while a column is being resized. Callback fired when the width of a column is changed. Callback fired when an exception is thrown in the grid, or when the API method is called. Callback fired when the edit cell value changes. Callback fired when the cell changes are committed. Callback fired when the cell turns to edit mode. Callback fired when the cell turns to view mode. Callback fired when the row changes are committed. Callback fired when the row turns to edit mode. Callback fired when the row turns to view mode. Callback fired when the changes. Callback fired when the Filter model changes before the filters are applied. Callback fired when the current page has changed. Callback fired when the page size has changed. Callback fired when the grid is being resized. Callback fired when a click event comes from a row container element. Callback fired when a double click event comes from a row container element. Callback fired when a mouse over comes from a row container element. Callback fired when a mouse out comes from a row container element. Callback fired when a mouse enter comes from a row container element. Callback fired when a mouse leave event comes from a row container element. Callback fired when the selection state of one or multiple rows changes. Callback fired when the sort model changes before a column is sorted. Set the number of rows in one page. Pagination can be processed on the server or client-side. Set it to 'client' if you would like to handle the pagination on the client-side. Set it to 'server' if you would like to handle the pagination on the server-side. Set the total number of rows, if it is different than the length of the value prop. Set the height in pixel of a row in the grid. Select the pageSize dynamically using the component UI. Set the height/width of the grid inner scrollbar. Set the selection model of the grid. If , the right border of the cells are displayed. If , the right border of the column headers are displayed. Sorting can be processed on the server or client-side. Set it to 'client' if you would like to handle sorting on the client-side. Set it to 'server' if you would like to handle sorting on the server-side. The order of the sorting sequence. Set the sort model of the grid.\n\nThe is forwarded to the root element.\n\nYou can use the slots API to override nested components or to inject extra props.\n\nCheckbox component used in the grid for both header and cells. By default, it uses the Material-UI core Checkbox component. Icon displayed on the column header menu to show that a filter has been applied to the column. Column menu component rendered by clicking on the 3 dots \"kebab\" icon in column headers. Icon displayed on the side of the column header title to display the filter input component. Icon displayed in between two column headers that allows to resize the column header. Icon displayed on the side of the column header title when sorted in ascending order. Icon displayed on the side of the column header title when sorted in descending order. Icon displayed on the side of the column header title when unsorted. Icon displayed on the \"comfortable\" density option in the toolbar. Icon displayed on the compact density option in the toolbar. Icon displayed on the standard density option in the toolbar. Error overlay component rendered above the grid when an error is caught. Icon displayed on the export button in the toolbar. Footer component rendered at the bottom of the grid viewport. Overlay component rendered when the grid is in a loading state. Overlay component rendered when the grid has no results after filtering. Overlay component rendered when the grid has no rows. Icon displayed on the open filter button present in the toolbar by default. Pagination component rendered in the grid footer by default. PreferencesPanel component that renders the ColumnSelector or FilterPanel within a Panel component.\n\nYou can override the style of the component thanks to one of these customization points:\n‚Ä¢ With a rule name of the object prop.\n‚Ä¢ With a theme and an property.\n\nIf that's not sufficient, you can check the implementation of the component style for more detail."
    },
    {
        "link": "https://stackoverflow.com/questions/74426054/how-to-get-the-selected-values-in-a-datagrid-with-react-material-ui",
        "document": "I'm working with a React MUI DataGrid. I need to get the values of the selected rows. At the moment, only the ids are coming through, and I get several errors throughout.\n\nThis is my React Hook.\n\nAnd this is the DataGrid.\n\nBut, what I need, and I'm not able to figure out is:\n\nWhen I do it this way, I get the following error: \"Property does not exist on type 'GridRowId'.\""
    },
    {
        "link": "https://mui.com/x/react-data-grid/row-selection?srsltid=AfmBOoqtDK4DrCl9nbijlRbKx3GVPsJq2CnM7-H-icNcMnNdV45B_4_I",
        "document": "Row selection allows the user to select and highlight a single or multiple rows that they can then take action on. Single row selection comes enabled by default for the MIT Data Grid component. You can select a row by clicking it, or using the keyboard shortcuts. To unselect a row, hold the ( on MacOS) key and click on it.\n\nUse the prop to indicate if a row can be selected. It's called with a object and should return a boolean value. If not specified, all rows are selectable. In the demo below only rows with quantity above 50,000 can be selected:\n\nIf you provide a custom checkbox column to the Data Grid with the field, the Data Grid will not add its own. We strongly recommend to use the variable instead of re-defining all the custom properties yourself. In the following demo, the checkbox column has been moved to the right and its width has been increased to 100px.\n\nBy default, when you click the \"Select All\" checkbox, all rows in the Data Grid are selected. If you want to change this behavior and only select the rows that are currently visible on the page, you can use the prop.\n\nUsing the controlled selection with may result in selected rows being lost when the page is changed. This happens because the Data Grid cross-checks with the prop and only calls with existing row IDs. Depending on your server-side implementation, when the page changes and the new value for the prop does not include previously selected rows, the Data Grid will call with an empty value. To prevent this, enable the prop to keep the rows selected even if they do not exist. By using this approach, clicking in the Select All checkbox may still leave some rows selected. It is up to you to clean the selection model, using the prop. The following demo shows the prop in action:\n\nThe grid exposes a set of methods that enables all of these features using the imperative . To know more about how to use it, check the API Object section. Only use this API as the last option. Give preference to the props to control the Data Grid."
    },
    {
        "link": "https://stackoverflow.com/questions/66158526/programmatically-preselecting-a-row-in-material-uis-data-gridreact",
        "document": "I am currently creating a React web application and am using a DataGrid from google's Material-UI. The grid renders based on a selection of a select list(i.e if the select list is of fruits, and the user selects apples, a related DataGrid will render with info about apples. If the user selects another fruit, another related datagrid will render, similar to a Master/Detail relationship).\n\nSince DataGrid offers row selection, I would like to have the first row preselected every time the grid renders, including when the user first enters the page. Currently, the grid renders without any rows selected, and requires the user to click on a row in order to make a selection. I saw on that controlled selection may be possible(https://material-ui.com/components/data-grid/selection/#controlled-selection) although the documentation doesn't explain this in great detail.\n\nI also tried a hack from stackOverflow(Can I initialize the checkbox selection in a material-ui DataGrid?) but that did not seem to work either. I feel like this feature is easier to implement than i am making it out, and should be included out of the box. Thank you in advance!"
    },
    {
        "link": "https://medium.com/@aleksej.gudkov/mui-datagrid-examples-comprehensive-guide-for-react-developers-3831544efc66",
        "document": "MUI DataGrid is a data table component built for React, offering a variety of features to display, edit, and manage large datasets. It is part of MUI X, which includes advanced components for React.\n‚Ä¢ Pagination and Sorting: Built-in pagination and sorting for large datasets.\n\nTo use MUI DataGrid in your project, install it via npm or yarn:"
    },
    {
        "link": "https://mui.com/x/react-data-grid?srsltid=AfmBOooY4foavwbUwdMkb_ujzyfJAHMrG2zwTKrUmeSlnbm_4Mqz99yC",
        "document": "A fast and extendable React data table and React data grid. It's a feature-rich component available with MIT or commercial licenses. The Data Grid component is built with React and TypeScript to provide a smooth UX for manipulating an unlimited set of data. It features an intuitive API for real-time updates as well as theming and custom templates‚Äîall with blazing-fast performance.\n\nThe Data Grid presents information in a structured format of rows and columns. The data is displayed in a user-friendly interface for efficient editing, reviewing, and analysis. Visit the installation guide to learn how to install the correct package version and dependencies. The component comes in three different versions, one available under MIT license and two available under commercial license. The MIT-licensed version (also referred to as the \"Community version\") is a stronger alternative to plain data tables. It's a clean abstraction with basic features like editing, pagination, column grouping, and single-column sorting and filtering.\n\nThe commercially licensed versions are available in two plans: Pro and Premium. The Pro plan extends the features available in the Community version to support more complex use cases. It adds features like advanced filtering, column pinning, column and row reordering, support for tree data, and virtualization to handle bigger datasets. The demo below displays 31 columns and 100,000 rows‚Äîover 3 million cells in total.\n\nThe Premium plan includes everything from Pro, as well as advanced features for data analysis and large dataset management, like row grouping with aggregation functions (such as sum and average) and the ability to export to Excel files. Visit the showcase page for a comprehensive overview of all features exclusive to this plan. The demo below groups rows by commodity name, and uses an aggregation function to calculate the sum of quantities for each group and in total (displayed in a summary row). You can experiment with grouping other columns in the columns' header menus. And since you're here, try exporting to Excel and copying and pasting data from-to Excel tables."
    }
]