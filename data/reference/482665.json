[
    {
        "link": "https://stackoverflow.com/questions/4310489/how-do-i-remove-the-light-grey-border-around-my-canvas-widget",
        "document": "I've been messing with the Tkinter widget in order to see if I could make some aesthetically pleasing widgets, and I have a few questions.\n\nFirst, why is there a light grey border around my Canvas widget, and how do I get rid of it?\n\nSecondly, why is the top left most position in the Canvas (2,2)? It seems like it should be (0,0)."
    },
    {
        "link": "https://stackoverflow.com/questions/42250235/border-colours-of-canvases-tkinter",
        "document": "You can use option to change color of highlight ring(which is also a border-like thing, but is separate from the actual border). (correction, thanks to Bryan Oakley's comment )\n\nTo change highlight ring thickness, you should use option.\n\nAlso, if you want to remove that highlight ring , you can set to ."
    },
    {
        "link": "https://tkinter-docs.readthedocs.io/en/latest/widgets/canvas.html",
        "document": "Create a canvas widget for drawing graphics. It inherits all the common widget methods of , and .\n\nmaster is the parent widget of this canvas. If , tkinter will attempt to use the default root.\n\ncnf and kw are both used to specify widget options (see below). For example, and are equivalent.\n\nDraw an arc, chord or pieslice. Returns the item id. args is two coordinate points specifying a rectangle containing the oval (from which part is taken to draw the arc). Because tkinter flattens these, both and are acceptable. kw is the options, which can be any of the following: These options specifies dash patterns for the normal, active and disabled states of the outline of the arc (correspondingly). The value may be any valid . The default value is a solid outline. The starting offset in pixels into the pattern provided by the dash option. dashoffset is ignored if there is no dash pattern. The offset may have any of the forms described in the section below. The default value is 0. Specifies the size of the angular range occupied by the arc. The arc’s range extends for the given number of degrees counter-clockwise from the starting angle given by the start option. The value may be negative. If it is greater than 360 or less than -360, then degrees modulo 360 is used as the extent. The default value is 90. Specifies the colour to be used to fill arc’s area in its normal, active and disabled states (correspondingly). The given value may be any valid . If the value is an empty string, then the arc will not be filled (i.e. it will be transparent). The default value is an empty string. Specifies the offset of stipples. The offset value can be of the form or side, where side can be n, ne, e, se, s, sw, w, nw, or center. In the first case, the origin is the origin of the canvas itself, but putting # in front of the coordinate pair indicates using the current window’s origin instead. The default value is . Stipple offsets are only supported on Unix; they are silently ignored on other platforms. A Python tuple of cannot be given and instead must be manually formatted to string of the correct format ( or ). These options specifies the colour that should be used to draw the outline of the arc in its normal, active and disabled states (correspondingly). The given value may be any valid . If colour is specified as an empty string then no outline is drawn for the arc. The default values are as follows: Specifies the offset of the stipple pattern used for outlines, in the same way that the offset option controls fill stipples. See the offset option for a description of acceptable values. The default value is . This option specifies stipple patterns that should be used to draw the outline of the arc in its normal, active and disabled states (correspondingly). It indicates that the outline for the arc should be drawn with a stipple pattern and specifies the stipple pattern to use. The given value may be any valid . If the outline option has not been specified then this option has no effect. If the value is an empty string, then the outline is drawn in a solid fashion. The default value is an empty string. Stipples are not well supported on platforms other than Unix. This option specifies stipple patterns that should be used to fill the arc in its normal, active and disabled states (correspondingly). The given value may be any valid . If the fill option has not been specified then this option has no effect. If the value is an empty string, then filling is done in a solid fashion. The default value is an empty string. Stipples are not well supported on platforms other than Unix. Specifies the beginning of the angular range occupied by the arc. The value is given in degrees measured counter-clockwise from the 3-o’clock position; it may be either positive or negative. The default value is 0. This allows the arc to override the canvas widget’s global state option. It takes the same values: normal, disabled or hidden. An empty string will defer to the canvas widget’s state. The default value is an empty string. Specifies how to draw the arc. If type is pieslice then the arc’s region is defined by a section of the oval’s perimeter plus two lines between the center of the oval and each end of the perimeter section. If type is chord then the arc’s region is defined by a section of the oval’s perimeter plus a single line connecting the two end points of the perimeter section. If type is arc then the arc’s region consists of a section of the perimeter alone. In this last case the fill option is ignored. The default value is pieslice. Specifies one or more tags to apply to the arc. When used in , this replaces any existing tags for the arc. An empty list may also be specified. The default value is an empty list. Specifies the width of the outline to be drawn around the arc’s region, in its normal, active and disabled states (correspondingly). The value may be in any of the forms described in the section below. If the outline option has been specified as an empty string, then this option has no effect. The default value is 1. Wide outlines will be drawn centered on the edges of the arc’s region.\n\nargs is two or more coordinate points of the line. Because tkinter flattens these, both and are acceptable. kw is the options, which can be any of the following: none (for no arrowheads), first (for an arrowhead at the first point of the line), last (for an arrowhead at the last point of the line), or both (for arrowheads at both ends). When requested to draw an arrowhead, Tk internally adjusts the corresponding line end point so that the rendered line ends at the neck of the arrowhead rather than at its tip so that the line doesn’t extend past the edge of the arrowhead. This may trigger a Leave event if the mouse is hovering this line end (see the Enter event. The default value is none. Indicates whether or not arrowheads are to be drawn at one or both ends of the line. The value must have one of the values(for no arrowheads),(for an arrowhead at the first point of the line),(for an arrowhead at the last point of the line), or(for arrowheads at both ends). When requested to draw an arrowhead, Tk internally adjusts the corresponding line end point so that the rendered line ends at the neck of the arrowhead rather than at its tip so that the line doesn’t extend past the edge of the arrowhead. This may trigger aevent if the mouse is hovering this line end (see the section). Conversely, when removing an arrowhead Tk adjusts the corresponding line point the other way round, which may trigger anevent. The default value is l1 in the diagram). The second element gives the distance along the line from the trailing points of the arrowhead to the tip (l2), and the third element gives the distance from the outside edge of the line to the trailing points (l3). The default value is . This option indicates how to draw arrowheads. The shape argument must be a tuple / list with three elements, each specifying a distance in any of the forms described in the section below. The first element of the list gives the distance along the line from the neck of the arrowhead to its tip (in the diagram). The second element gives the distance along the line from the trailing points of the arrowhead to the tip (), and the third element gives the distance from the outside edge of the line to the trailing points (). The default value is Specifies the ways in which caps are to be drawn at the endpoints of the line. The value may be any of butt, projecting, or round. Where arrowheads are drawn, the cap style is ignored. The default value is butt. These options specifies dash patterns for the normal, active and disabled states of the line (correspondingly). The value may be any valid . The default value is a solid line. The starting offset in pixels into the pattern provided by the dash option. dashoffset is ignored if there is no dash pattern. The offset may have any of the forms described in the section below. The default value is 0. Specifies the colour used to draw the line in its normal, active and disabled states (correspondingly). The given value may be any valid . If the value is an empty string, then the line will not be filled (i.e. it will be transparent). The default values are as follows: Specifies the ways in which joints are to be drawn at the vertices of the line (only applicable if more than 2 coordinates are given). The value may be any of bevel, miter, or round. The default value is round. This value must either be a boolean or a line smoothing method. The line should be drawn as a curve, rendered as a set of quadratic splines: one spline is drawn for the first and second line segments, one for the second and third, and so on. Straight-line segments can be generated within a curve by duplicating the end-points of the desired line segment. The line should also be drawn as a curve but where the list of coordinates is such that the first coordinate pair (and every third coordinate pair thereafter) is a knot point on a cubic Bezier curve, and the other coordinates are control points on the cubic Bezier curve. Straight line segments can be generated within a curve by making control points equal to their neighbouring knot points. If the last point is a control point and not a knot point, the point is repeated (one or two times) so that it also becomes a knot point. The default value is . Specifies the degree of smoothness desired for curves: each spline will be approximated with number line segments. This option is ignored if the smooth option is or an empty string. The default value is 12. This option specifies stipple patterns that should be used to fill the line in its normal, active and disabled states (correspondingly). The given value may be any valid . If the fill option is an empty string, then this option has no effect. If the value is an empty string, then filling is done in a solid fashion. The default value is an empty string. Stipples are not well supported on platforms other than Unix. This allows the line to override the canvas widget’s global state option. It takes the same values: normal, disabled or hidden. An empty string will defer to the canvas widget’s state. The default value is an empty string. Specifies one or more tags to apply to the line. When used in , this replaces any existing tags for the line. An empty list may also be specified. The default value is an empty list. Specifies the width the line to be drawn, in its normal, active and disabled states (correspondingly). The value may be in any of the forms described in the section below. If the fill option has been specified as an empty string, then this option has no effect. The default value is 1.\n\nargs is two or more coordinate points of the polygon. These will be it’s vertices (corners). Because tkinter flattens these, both and are acceptable. kw is the options, which can be any of the following: These options specifies dash patterns for the normal, active and disabled states of the outline of the polygon (correspondingly). The value may be any valid . The default value is a solid line. The starting offset in pixels into the pattern provided by the dash option. dashoffset is ignored if there is no dash pattern. The offset may have any of the forms described in the section below. The default value is 0. Specifies the colour to be used to fill polygon’s area in its normal, active and disabled states (correspondingly). The given value may be any valid . If the value is an empty string, then the oval will not be filled (i.e. it will be transparent). The default value is an empty string. Specifies the ways in which joints are to be drawn at the vertices of the polygon. The value may be any of bevel, miter, or round. The default value is round. Specifies the offset of stipples. The offset value can be of the form or side, where side can be n, ne, e, se, s, sw, w, nw, or center. In the first case, the origin is the origin of the canvas itself, but putting # in front of the coordinate pair indicates using the current window’s origin instead. The default value is . Stipple offsets are only supported on Unix; they are silently ignored on other platforms. A Python tuple of cannot be given and instead must be manually formatted to string of the correct format ( or ). These options specifies the colour that should be used to draw the outline of the oval in its normal, active and disabled states (correspondingly). The given value may be any valid . If colour is specified as an empty string then no outline is drawn for the oval. The default values are as follows: Specifies the offset of the stipple pattern used for outlines, in the same way that the offset option controls fill stipples. See the offset option for a description of acceptable values. The default value is . This option specifies stipple patterns that should be used to draw the outline of the oval in its normal, active and disabled states (correspondingly). It indicates that the outline for the oval should be drawn with a stipple pattern and specifies the stipple pattern to use. The given value may be any valid . If the outline option has not been specified then this option has no effect. If the value is an empty string, then the outline is drawn in a solid fashion. The default value is an empty string. This value must either be a boolean or a line smoothing method. The outline should be drawn as a curve, rendered as a set of quadratic splines: one spline is drawn for the first and second line segments, one for the second and third, and so on. Straight-line segments can be generated within a curve by duplicating the end-points of the desired line segment. The outline should also be drawn as a curve but where the list of coordinates is such that the first coordinate pair (and every third coordinate pair thereafter) is a knot point on a cubic Bezier curve, and the other coordinates are control points on the cubic Bezier curve. Straight line segments can be generated within a curve by making control points equal to their neighbouring knot points. If the last point is a control point and not a knot point, the point is repeated (one or two times) so that it also becomes a knot point. The default value is . Specifies the degree of smoothness desired for curves: each spline will be approximated with number line segments. This option is ignored if the smooth option is or an empty string. The default value is 12. This option specifies stipple patterns that should be used to fill the polygon in its normal, active and disabled states (correspondingly). The given value may be any valid . If the fill option has not been specified then this option has no effect. If the value is an empty string, then filling is done in a solid fashion. The default value is an empty string. Stipples are not well supported on platforms other than Unix. This allows the polygon to override the canvas widget’s global state option. It takes the same values: normal, disabled or hidden. An empty string will defer to the canvas widget’s state. The default value is an empty string. Specifies one or more tags to apply to the polygon. When used in , this replaces any existing tags for the polygon. An empty list may also be specified. The default value is an empty list. Specifies the width of the outline to be drawn around the polygon’s region, in its normal, active and disabled states (correspondingly). The value may be in any of the forms described in the section below. If the outline option has been specified as an empty string, then this option has no effect. The default value is 1."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-change-border-color-in-tkinter-widget",
        "document": "Tkinter is Python’s standard GUI package which provides us with a variety of common GUI elements such as buttons, menus, and various kinds of entry fields and display areas which we can use to build out an interface. These elements are called Tkinter Widgets.\n\nAmong all color options for a widget, there is no direct method to change the border color of the widget. As the border color of a widget is tied to the background color of the widget, it is impossible to set it individually. But, we do have some methods to color the border of a widget and those methods are discussed below.\n\nInstead of using the default border of a widget, we can use the Frame widget as an alternative border, where we can set the background color of the Frame widget to any color we want. This method works with every widget.\n• Create a border variable with Frame widget with background color as its attributes\n• Create any widget with the border variable as an attribute\n• Place the widget on the window created\n\nWe can also use a highlighted background and highlight color together to get a border color for our widget. We can even adjust the thickness of the border using the highlight thickness attribute. This method only works for some widgets like Entry, Scale, Text e.t.c.\n• Configure highlightbackground and highlightcolor attributes to the desired border-color\n• Place the widget on the window created\n\nNote: It is recommended to use Method 1 for setting the border color of a widget as Method 2 may or may not work for some widgets. But Method 1 works universally on any widget."
    },
    {
        "link": "https://anzeljg.github.io/rin2/book2/2405/docs/tkinter/canvas.html",
        "document": "A canvas is a rectangular area intended for drawing pictures or other complex layouts. On it you can place graphics, text, widgets, or frames. See the following sections for methods that create objects on canvases:\n\nThe constructor returns the new widget. Supported options include:"
    },
    {
        "link": "https://stackoverflow.com/questions/4066202/resizing-pictures-in-pil-in-tkinter",
        "document": "Here's what I do and it works pretty well...\n\nThere you go :)\n\nHere is my import statement:\n\nAnd here is the complete working code I adapted this example from:\n\nAnd here are the PhotoImage class docs: http://www.pythonware.com/library/tkinter/introduction/photoimage.htm\n\nNote... After checking the pythonware documentation on ImageTK's PhotoImage class (Which is very sparse) I appears that if your snippet works than this should as well as long as you import the PIL \"Image\" Library an the PIL \"ImageTK\" Library and that both PIL and tkinter are up-to-date. On another side-note I can't even find the \"ImageTK\" module life for the life of me. Could you post your imports?"
    },
    {
        "link": "https://stackoverflow.com/questions/273946/how-do-i-resize-an-image-using-pil-and-maintain-its-aspect-ratio",
        "document": "Is there an obvious way to do this that I'm missing? I'm just trying to make thumbnails.\n\nI also recommend using PIL's thumbnail method, because it removes all the ratio hassles from you. by default, PIL uses the Image.NEAREST filter for resizing which results in good performance, but poor quality.\n\nYou can combine PIL's with if your resize limit is only on one dimension (width or height). For instance, if you want to resize an image so that its height is no more than 100px, while keeping aspect ratio, you can do something like this: Keep in mind that will resize the image in place, which is different from that instead returns the resized image without changing the original one.\n\nI will also add a version of the resize that keeps the aspect ratio fixed. In this case, it will adjust the height to match the width of the new image, based on the initial aspect ratio, asp_rat, which is float (!). But, to adjust the width to the height, instead, you just need to comment one line and uncomment the other in the else loop. You will see, where. You do not need the semicolons (;), I keep them just to remind myself of syntax of languages I use more often. from PIL import Image img_path = \"filename.png\"; img = Image.open(img_path); # puts our image to the buffer of the PIL.Image object width, height = img.size; asp_rat = width/height; # Enter new width (in pixels) new_width = 50; # Enter new height (in pixels) new_height = 54; new_rat = new_width/new_height; if (new_rat == asp_rat): img = img.resize((new_width, new_height), Image.ANTIALIAS); # adjusts the height to match the width # NOTE: if you want to adjust the width to the height, instead -> # uncomment the second line (new_width) and comment the first one (new_height) else: new_height = round(new_width / asp_rat); #new_width = round(new_height * asp_rat); img = img.resize((new_width, new_height), Image.ANTIALIAS); # usage: resize((x,y), resample) # resample filter -> PIL.Image.BILINEAR, PIL.Image.NEAREST (default), PIL.Image.BICUBIC, etc.. # https://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.Image.resize # Enter the name under which you would like to save the new image img.save(\"outputname.png\"); And, it is done. I tried to document it as much as I can, so it is clear. I hope it might be helpful to someone out there!\n\nI was trying to resize some images for a slideshow video and because of that, I wanted not just one max dimension, but a max width and a max height (the size of the video frame).\n\n And there was always the possibility of a portrait video...\n\n The method was promising, but I could not make it upscale a smaller image. So after I couldn't find an obvious way to do that here (or at some other places), I wrote this function and put it here for the ones to come: from PIL import Image def get_resized_img(img_path, video_size): img = Image.open(img_path) width, height = video_size # these are the MAX dimensions video_ratio = width / height img_ratio = img.size[0] / img.size[1] if video_ratio >= 1: # the video is wide if img_ratio <= video_ratio: # image is not wide enough width_new = int(height * img_ratio) size_new = width_new, height else: # image is wider than video height_new = int(width / img_ratio) size_new = width, height_new else: # the video is tall if img_ratio >= video_ratio: # image is not tall enough height_new = int(width / img_ratio) size_new = width, height_new else: # image is taller than video width_new = int(height * img_ratio) size_new = width_new, height return img.resize(size_new, resample=Image.LANCZOS)"
    },
    {
        "link": "https://activestate.com/resources/quick-reads/how-to-add-images-in-tkinter",
        "document": "This Python tutorial is a part of our series of Python Package tutorials . You can find other Tkinter related topics too!\n\nTkinter relies on the Python Pillow (aka PIL) package for image processing capabilities. Using Pillow, a Tkinter function that displays a text-based message can instead display an image-based message.\n\nNote that depending on the purpose of an image in a Tkinter application, different coding may be required. The reason for this is because images in applications can vary from background wallpaper, to positioned images that represent processes in underlying code, to clickable images or icons that perform an action when clicked.\n\nHow to Display Images with Tkinter’s Label Widget\n\nTkinter’s label widget can be used to display either images or text. To display an image requires the use of Image and ImageTk imported from the Python Pillow (aka PIL) package.\n\nA label widget can display either PhotoImage or BitmapImage objects:\n• The PhotoImage class is used to display grayscale or true color icons, as well as images in labels. Note that only GIF and PGM/PPM image formats are supported. For information on how you can work with more image formats, see the Pillow section below.\n• The BitmapImage class is used to display only monochrome (two-color) images in labels.\n\nTkinter has three built-in Layout Managers that can be used to position labels containing images in a frame: pack, grid, and place. For example, a label can be placed in a frame using the place layout manager at x,y coordinates, as shown in the following example:\n\nHow to Use Pillow with Tkinter\n\nTkinter relies on Pillow for working with images. Pillow is a fork of the Python Imaging Library, and can be imported in a Python console as PIL. Pillow has the following characteristics:\n• Support for a wide range of image file formats, including PNG, JPEG and GIF.\n• Width and height options that can be used to set the Label size for an image. If a size is not specified, the Label will be just large enough to display its contents.\n\nTo check if Pillow is already installed, enter the following command in a Python console:\n\nIf Pillow is not installed, you can install it with:\n\nHow to Manipulate Images with PIL and ImageTk\n\nTo import ImageTk and Image in a Python console, enter:\n\nAn image can be opened with the following code snippet:\n\nThe resize() option can be used to set an image’s height and width. In the following example, an image’s dimensions are set to 50 pixels high and wide:\n\nIf an image size is not specified, the Label will be just large enough to display its contents.\n\nHow to Display a Background Image with Tkinter\n\nThe following example displays a background image in a frame:\n\nHow to Display an Image on a Tkinter Button\n\nThe following example displays an image positioned on a button"
    },
    {
        "link": "https://pillow.readthedocs.io/en/stable/reference/Image.html",
        "document": "The module provides a class with the same name which is used to represent a PIL image. The module also provides a number of factory functions, including functions to load images from files, and to create new images.\n\nInstances of the class have the following attributes: The filename or path of the source file. Only images created with the factory function have a filename attribute. If the input is a file like object, the filename attribute is set to an empty string. The file format of the source file. For images created by the library itself (via a factory function, or by running a method on an existing image), this attribute is set to . Image mode. This is a string specifying the pixel format used by the image. Typical values are “1”, “L”, “RGB”, or “CMYK.” See Modes for a full list. Image size, in pixels. The size is given as a 2-tuple (width, height). Colour palette table, if any. If mode is “P” or “PA”, this should be an instance of the class. Otherwise, it should be set to . A dictionary holding data associated with the image. This dictionary is used by file handlers to pass on various non-image information read from the file. See documentation for the various file handlers for details. Most methods ignore the dictionary when returning new images; since the keys are not standardized, it’s not possible for a method to know if the operation affects the dictionary. If you need the information later on, keep a reference to the info dictionary returned from the open method. Unless noted elsewhere, this dictionary does not affect saving files. if this image has more than one frame, or otherwise. This attribute is only defined by image plugins that support animated images. Plugins may leave this attribute undefined if they don’t support loading animated images, even if the given format supports animated images. Given that this attribute is not present for all images use to check if Pillow is aware of multiple frames in an image regardless of its format. The number of frames in this image. This attribute is only defined by image plugins that support animated images. Plugins may leave this attribute undefined if they don’t support loading animated images, even if the given format supports animated images. Given that this attribute is not present for all images use to check the number of frames that Pillow is aware of in an image regardless of its format. Determine if an image has transparency data, whether in the form of an alpha channel, a palette with an alpha channel, or a “transparency” key in the info dictionary. Note the image might still appear solid, if all of the values shown within are opaque."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-resize-image-in-python-tkinter",
        "document": ""
    }
]