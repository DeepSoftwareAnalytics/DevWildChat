[
    {
        "link": "https://reddit.com/r/cpp_questions/comments/jn5z20/best_practice_for_for_loop_condition",
        "document": "I learn C++ on my own and applied it to mostly school projects. The for loop condition (2nd statement) usually comes like this:\n\nThis means i only goes until it reaches (n-1). I work with codes that deal with matrices so to make things clear, I do this\n\nI understand that it is simple to subtract 1 (when using ) and adjust your bounds; however, isnt using easier to understand?\n\nIs using considered bad practice? Almost all code editors or even IDE insert a For loop template with instead of . I'm not working in industry yet but I'd like some thoughts from industry folks as well."
    },
    {
        "link": "https://geeksforgeeks.org/cpp-for-loop",
        "document": "In C++, for loop is an entry-controlled loop that is used to execute a block of code repeatedly for the given number of times. It is generally preferred over while and do-while loops in case the number of iterations is known beforehand.\n\nLet’s take a look at an example:\n\nExplanation: The above for loop prints the text “Hi” 5 times. Basically, it repeats the statements given in its body and in each run, it increases the loop variable by 1 till it is less than 5.\n\nThe syntax of for loop in C++ is shown below:\n\nThe various parts of the for loop are:\n• Initialization : Initialize the loop variable to some initial value.\n• Test Condition : This specifies the test condition. If the condition evaluates to true, then body of the loop is executed, and loop variable is updated according to update expression. If evaluated false, loop is terminated.\n• Update Expression : After executing the loop body, this expression increments/decrements the loop variable by some value.\n\nWorking of a for Loop in C++\n\nThe flowchart works as shown below:\n• None Control falls into the for loop. Initialization is done.\n• None\n• None If the Condition yields true, the flow goes into the Body.\n• None If the Condition yields false, the flow goes outside the loop.\n• None The statements inside the body of the loop get executed.\n• None The flow goes to the update.\n• None Updating takes place and the flow goes to Step 3 again.\n• None The for loop has ended and the flow has gone outside.\n\nFlowchart of for Loop in C++\n\nExamples of for Loop in C++\n\nThe below examples demonstrate how to use the for loop in a C++ program along with the different possible variations of the loop.\n\nExplanation: In the above program, the loop variable i is iterated from n to 1 and in each test condition is checked (is i>=1). If true then it prints the value of i followed by a space and decrement i. When the condition is false loop terminates.\n\nYou may have noticed that we have not used braces {} in the body of the loop. We can skip braces {} till there is only one statement in the loop.\n\nExplanation: The above program uses nested for loops to print a 4×4 matrix of asterisks (*). Here, the outer loop (i) iterates over rows and the inner loop (j) iterates over columns. In each iteration, inner loop prints an asterisk, and a space. Also, a new line is added after each row is printed to shift the output to the next line.\n\nUse Multiple Loop Variables in for Loop\n\nExplanation: The above program uses for loop with multiple variables (here m and n). It increments and updates both variables in each iteration and prints their respective values.\n\nWhen no parameters are given to the for loop, it repeats endlessly due to the lack of input parameters, making it a kind of infinite loop.\n\nOther Types of for Loop in C++\n\nThe above explained for loop is the actual legacy for loop that has been the part of the language since the beginning. But the different versions of for loop were added later in the languages. They are:\n\n1. Range-Based for Loop in C++\n\nC++ range-based for loops execute for loops over a range of values, such as all the elements in a container, in a more readable way than the traditional for loops. It is much simpler as compared to traditional for loop. But the disadvantage of this is that it has limited applications.\n\nC++ for_each loop is not a loop but an algorithm that mimics the range based for loop. It accepts a function that executes over each of the container elements. This loop is defined in the header file <algorithm> and hence has to be included for the successful operation of this loop.\n• None C++ while loop with Examples\n• None C++ do while loop with Examples\n• None Difference between while and do-while loop in C++\n• None Difference between for and while loop in C++"
    },
    {
        "link": "https://stackoverflow.com/questions/6706059/c-best-way-to-use-for-loop",
        "document": "If you really care, you can find out: Just make a single source file with one function with that loop and look at the optimized assembly:\n\nYou can directly see the differences! I bet there are none.\n\nThat said, you should use the iterator pattern because it's idomatic, generic C++ and it gets you in the right mood -- plus, it works in far more general cases than just vectors! Write it like this:\n\nIn case you're curious, a vector iterator is most likely just going to be a native, raw pointer, so there's really nothing to fear in terms of efficiency, and a lot to be enjoyed from the self-explanatory, algorithmic style!\n\nPS If you have C++0x, say it like this:"
    },
    {
        "link": "https://simplilearn.com/tutorials/cpp-tutorial/cpp-for-loop",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/cpp-loops",
        "document": "In C++ programming, sometimes there is a need to perform some operation more than once or (say) n number of times. For example, suppose we want to print “Hello World” 5 times. Manually, we have to write cout for the C++ statement 5 times as shown.\n\nSomewhat manageable, right? Let’s say you have to write it 20 times. It would surely take more time to write 20 statements. Now imagine you have to write it 100 times. It would be really hectic to re-write the same statement again and again.\n\nIn such cases, loops come into play, allowing users to repeatedly execute a block of statements any number of times.\n\nIn the above program, we have used one of the loops to write “Hello World” 5 times. You can see how much code is reduced. The same line of code can write “Hello World” 20 or even 100 times.\n\nIn C++ programming, a loop is an instruction that is used to repeatedly execute a code until a certain condition remains true. They are useful for performing repetitive tasks without having to write the same code multiple times.\n\nC++ provides three types of loops that works the same, but are preferred in different use cases:\n\nThe for loop is a type of loop that allows us to write a loop that is executed a specific number of times. It is an entry-controlled loop, which means that it checks whether the test condition is true before executing the statements inside it.\n\nThe various parts of the for loop are:\n• Initialization : Initialize the variable to some initial value.\n• Test Condition : This specifies the test condition. If the condition evaluates to true, then body of the loop is executed. If evaluated false, loop is terminated.\n• Update Expression : After the execution loop’s body, this expression increments/decrements the loop variable by some value.\n\nAll these together is used to create a logic and flow of the loop.\n\nThe while loop is also an entry-controlled loop which is used in situations where we do not know the exact number of iterations of the loop beforehand.\n\nWhile studying for loop, we have seen that the number of iterations is known beforehand, i.e. the number of times the loop body is needed to be executed is known to us and we create the condition on the basis of it. But while loops execution is solely based on the condition.\n\nOnly the condition is the part of while loop syntax, we have to initialize and update loop variable manually.\n\nThe do-while loop is also a loop whose execution is terminated on the basis of test conditions like while loop but this loop is an exit-controlled loop. It means that in do-while loop, the condition is checked after executing the body of the loop. So, in a do-while loop, the loop body will execute at least once irrespective of the test condition.\n\nLike while loop, only the condition is the part of do while loop syntax, we have to do the initialization and updation of loop variable manually.\n\nRemember the last semicolon at the end of the loop.\n\nAn infinite loop (sometimes called an endless loop) is a piece of coding that lacks a functional exit so that it repeats indefinitely. An infinite loop occurs when a condition is always evaluated to be true. Usually, this is an error. We can manually create an infinite loop using all three loops:\n\nNesting of loops refers to placing one loop inside another. The inner loop is executed completely for each iteration of the outer loop. This is useful when you need to perform multiple iterations within each iteration of a larger loop, such as iterating over a two-dimensional array or performing operations that require more than one level of iteration.\n\nGenerally, the normal flow of any loop is that it will repeat till its test condition is true. In each repetition, it will execute the given set of statements. But C++ provides ways to modify this normal flow. This can be done by using loop control statements shown below:\n\nBreak out of the Loop\n\nThe break statement when encountered, terminates the loop regardless of its test condition. This is useful when the execution of loop is dependent on multiple conditions.\n\nThe continue statement, when encountered, skips the remaining code inside the current iteration of the loop and proceeds to the next iteration. This is useful when you want to skip specific iterations based on certain conditions but still want to continue the loop execution."
    },
    {
        "link": "https://faculty.cs.niu.edu/~hutchins/csci241/output.htm",
        "document": "Output in C++ can be fairly simple.\n\nWe have , which is \"standard output\", actually a predefined instance of the class.\n\nTo write output to cout, we use the . The name refers to \"inserting values into the output stream\".\n\nIf we have variables such as\n\nand the value of M is printed. We could string several of these together and include strings:\n\nIn each case, the value of the string or variable is printed using a default format. What if we want to change this and print values in other formats?\n\nC++ provides a family of format specifiers we can use.\n\nA few specifiers useful in general\n• This the end-of-line marker, like \"\n\n\" in the C language. It advances to the begining of the next line. It also flushes the output buffer; that is, it makes sure anything waiting to be printed is printed before finishing the current line.\n• This sets the field width. That is, if we have a value to print, we can use setw to dictate the minimum number of positions to use. If the value is too big to fit, more positions will be used. This affects only the next value to be printed. It has no lingering effect. Without setw, values are normally printed using however many positions are needed. By default, values are right-justified in the space provided. We can change this.\n• When we use setw, we can use this to force values to be printed left-justified in the space provided. This stays in effect until we change it.\n• When we use setw, we can use this to force values to be printed right-justified in the space provided. This stays in effect until we change it. This is the default, but we may need it to undo the effect of left.\n• This sets the value of the fill character. The default value is a blank. For instance, if we have an int variable J with the value 23, we might want to print it using exactly 6 spaces. In that case, we would have several copies of the fill character before printing the 23.\n• When printing a nonnegative integer value, indicate the sign with a prefix '+'. For negative integer values, we always have a leading '-' to indicate the sign.\n• This switches off the effect of showpos. This is the default, but we might need it to undo the effect of showpos.\n• When printing number in base 16 (the hex option) or in scientific notation, use upper-case letters. Thus we might print \"4.73E12\" instead of \"4.73e12\" and \"X659\" instead of \"x659\".\n• This switches off the effect of uppercase. This is the default, but we might need it to undo the effect of uppercase.\n• This causes integer values to be printed in base 8. This stays in effect until we change it.\n• This causes integer values to be printed in base 16. This stays in effect until we change it.\n• This causes integer values to be printed in base 10. This stays in effect until we change it. This is the default, but we might need it to undo the effect of hex or oct.\n• When printing an integer value, indicate the base used (8, 10 or 16. Base 8 is indicated by a prefix '0', as in 0123, and base 16 is indicated by a prefix by 'x', as in x123. This stays in effect until we change it.\n• This switches off the effect of showbase. This is the default, but we might need it to undo the effect of showbase.\n• When printing a floating-point value, use scientific notation such as \"1.23e4\". (This indicates the value 1.23 times 10 to the 4th power.)\n• When printing a floating-point value, use fixed-point notation such as \"12300.0'. This is often used together with showpoint and setprecision.\n• When printing a floating-point value that has no digits to be printed to the right of the decimal point, go ahead and print the decimal point anyway. This is usually used together with fixed and setprecision.\n• This switches off the effect of showpoint. This is the default, but we might need it to undo the effect of showpoint.\n• This controls the number of digits to be written to the right of the decial points. Thus setprecision(2) means that we want 2 digits printed to the right of the decimal point. The default value is typically 6. This is usually used together with fixed and showpoint.\n• When printing a floating-point number using setw, use \"internal justification\": the first character is '+' or '-', followed possibly by fill characters, followed by the rest of the value right-justified.\n\nNote about fixed vs. scientific: The default is neither of these. If you don't indicate your choice, C++ will choose a format for you.\n• When printing a bool value, spell out the word 'true' or 'false'.\n• When printing a bool value, print an integer 1 for 'true' or 0 for 'false'. This is the default (which seems odd), but we might need it to undo the effect of boolalpha.\n\nWhat is needed to make use of these?\n\nThe specifiers which are simply flags, such as hex, oct, dec, left, right, etc. are in the iostream library.\n\nThe specifiers which are functions, that is, which take arguments, such as setw, setprecision, setfill, etc. are in the iomanip library.\n\nThis is why we commonly have two #include statements for these libraries in our programs:\n\nFor each of these names, we wil also need a using statement, as in\n\nAlthough the specifiers listed above are normally used with cout, it is also possible to set any of these with actual function calls, as in:\n• \"basefield\" refers to flags related to the integer base"
    },
    {
        "link": "https://stackoverflow.com/questions/15106102/how-to-use-c-stdostream-with-printf-like-formatting",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/cout-in-c",
        "document": "In C++, cout is an object of the ostream class that is used to display output to the standard output device, usually the monitor. It is associated with the standard C output stream stdout. The insertion operator (<<) is used with cout to insert data into the output stream.\n\nLet’s take a look at an example:\n• << : It is the insertion operator used to insert data into cout.\n• var_name : It represents the variable or literal whose value you want to display.\n\nExamples of cout in C++\n\nThe below programs demonstrate how to use the cout for output purposes in C++.\n\nBelow is a list of some commonly used member functions of cout in C++:\n\nBelow is the implementation of the member functions of the cout.write() and cout.put():\n\nBelow is the C++ program to illustrate the use of cout.precision():"
    },
    {
        "link": "https://stackoverflow.com/questions/49295185/c-cout-aligning-output-numbers",
        "document": "I want the output to look like this:\n\nThe output is good, but the code is terrible. What can be done? Here is my code https://ideone.com/6MKd31"
    },
    {
        "link": "https://opensource.com/article/21/11/c-stdcout-cheat-sheet",
        "document": ""
    }
]