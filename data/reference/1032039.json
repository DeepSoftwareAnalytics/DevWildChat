[
    {
        "link": "https://php.net/manual/en/book.mysqli.php",
        "document": "and to navigate\n• to select\n• to close\n\nPress without selection to search using Google"
    },
    {
        "link": "https://php.net/manual/en/function.mysqli-connect.php",
        "document": "This function is an alias of: mysqli::__construct()\n\nIf mysqli exception mode is not enabled and a connection fails, then mysqli_connect() returns instead of an object. The mysqli_connect_error() function can be used to fetch the connection error."
    },
    {
        "link": "https://php.net/manual/en/mysqli.quickstart.connections.php",
        "document": "The MySQL server supports the use of different transport layers for connections. Connections use TCP/IP, Unix domain sockets or Windows named pipes.\n\nThe hostname has a special meaning. It is bound to the use of Unix domain sockets. To open a TCP/IP connection to the localhost, must be used instead of the hostname .\n\nDepending on the connection function used, assorted parameters can be omitted. If a parameter is not provided, then the extension attempts to use the default values that are set in the PHP configuration file.\n\nThe resulting parameter values are then passed to the client library that is used by the extension. If the client library detects empty or unset parameters, then it may default to the library built-in values.\n\nIf the host value is unset or empty, then the client library will default to a Unix socket connection on . If socket is unset or empty, and a Unix socket connection is requested, then a connection to the default socket on is attempted.\n\nOn Windows systems, the host name is interpreted by the client library as an attempt to open a Windows named pipe based connection. In this case the socket parameter is interpreted as the pipe name. If not given or empty, then the socket (pipe name) defaults to .\n\nIf neither a Unix domain socket based not a Windows named pipe based connection is to be established and the port parameter value is unset, the library will default to port .\n\nThe mysqlnd library and the MySQL Client Library (libmysqlclient) implement the same logic for determining defaults.\n\nConnection options are available to, for example, set init commands which are executed upon connect, or for requesting use of a certain charset. Connection options must be set before a network connection is established.\n\nFor setting a connection option, the connect operation has to be performed in three steps: creating a connection handle with mysqli_init() or mysqli::__construct(), setting the requested options using mysqli::options(), and establishing the network connection with mysqli::real_connect().\n\nThe mysqli extension supports persistent database connections, which are a special kind of pooled connections. By default, every database connection opened by a script is either explicitly closed by the user during runtime or released automatically at the end of the script. A persistent connection is not. Instead it is put into a pool for later reuse, if a connection to the same server using the same username, password, socket, port and default database is opened. Reuse saves connection overhead.\n\nEvery PHP process is using its own mysqli connection pool. Depending on the web server deployment model, a PHP process may serve one or multiple requests. Therefore, a pooled connection may be used by one or more scripts subsequently.\n\nIf an unused persistent connection for a given combination of host, username, password, socket, port and default database cannot be found in the connection pool, then mysqli opens a new connection. The use of persistent connections can be enabled and disabled using the PHP directive mysqli.allow_persistent. The total number of connections opened by a script can be limited with mysqli.max_links. The maximum number of persistent connections per PHP process can be restricted with mysqli.max_persistent. Please note that the web server may spawn many PHP processes.\n\nA common complain about persistent connections is that their state is not reset before reuse. For example, open and unfinished transactions are not automatically rolled back. But also, authorization changes which happened in the time between putting the connection into the pool and reusing it are not reflected. This may be seen as an unwanted side-effect. On the contrary, the name may be understood as a promise that the state is persisted.\n\nThe mysqli extension supports both interpretations of a persistent connection: state persisted, and state reset before reuse. The default is reset. Before a persistent connection is reused, the mysqli extension implicitly calls mysqli::change_user() to reset the state. The persistent connection appears to the user as if it was just opened. No artifacts from previous usages are visible.\n\nThe mysqli::change_user() call is an expensive operation. For best performance, users may want to recompile the extension with the compile flag being set.\n\nIt is left to the user to choose between safe behavior and best performance. Both are valid optimization goals. For ease of use, the safe behavior has been made the default at the expense of maximum performance."
    },
    {
        "link": "https://w3schools.com/php/func_mysqli_connect.asp",
        "document": "Open a new connection to the MySQL server: <?php\n\n $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n \n\n// Check connection\n\nif ($mysqli -> connect_errno) {\n\n echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\n\n exit();\n\n }\n\n?> \n\n\n\nLook at example of procedural style at the bottom.\n\nThe connect() / mysqli_connect() function opens a new connection to the MySQL server."
    },
    {
        "link": "https://phpdelusions.net/mysqli/mysqli_connect",
        "document": "How to connect properly using mysqli\n\nHaving answered thousands questions on Stack Overflow, I was able to determine the most common problems PHP developers stuck into when working with mysqli. So I decided to write this tutorial emphasizing on the following matters:\n• setting the proper character set for the connection will eliminate the whole class of errors, such as weird characters/question marks instead of your data, empty json_encode() output, problems with storing emojis, etc.\n• besides, using exceptions will make the code drastically shorter, without the need to verify the every function for the failure manually\n• setting the proper error reporting mode will eliminate the cryptic error messages like / , giving you the actual error message from MySQL instead.\n• security is not a laughing matter, there should be not a chance to leak your database details to the outside\n\nFirst of all we are defining variables that contain connection credentials. This set is familiar to anyone who were using the old function, save for may be, which was rarely used (although it should have been).\n• stands for the database host. In case of the local development, it is most likely be or . In case of the live site, the actual hostname should be provided by the site admin / hosting provider. Note that connecting through IP address could save you a headache or two, so if you have a trouble with \"localhost\", try to use 127.0.0.1 instead.\n• is the name of the database in MySQL (the value that you were passing into ). On your local server it could be anything, while on a live site again it should be given to you by the admin / provider.\n• is the port number on the database host that listens for connections. It is reported that some PHP dev environments such as MAMP are using non-default port number, so you have to check it out and change if necessary.\n• is a very important option. It is telling the database in which encoding you are sending the data in and would like to get the data back. Note that due to initially limited support of Unicode in the MySQL charset, it is now recommended to use instead.\n• the options() call tells mysqli to return the data in its native type, particularly ints and floats\n\nBeside we are using two additional functions here:\n• mysqli_report() is very important as it sets the proper error reporting mode for mysqli, telling it to throw an exception in case of error. Which is good in so many ways, which are explained in the article on PHP error reporting.\n• mysqli::set_charset is the proper way to set the character set for the connection, as opposed to running the query.\n\nPreviously here was an example for the procedural mysqli syntax. But some time ago I decided to remove it for the following reasons:\n• procedural syntax is much more verbose than object syntax, just compare\n• object syntax is very simple. You don't have to learn OOP to use it. It's just a syntax which only slightly different from procedural. Just a simple rule: type a variable name, then an arrow and then a function name: it is really simple.\n• most important of all: procedural syntax is deceptive in regard of error reporting. Even with error reporting properly set, procedural calls fail to report errors, ending up with cryptic error messages such as \"invalid object or resource mysqli_stmt\"\n\nJust adapt the object syntax, it will take you just two minutes, but your code will start looking much cooler immediately!\n\nAn uncaught exception is converted to a PHP fatal error. It is not a problem by itself, errors are for the good. A programmer desperately needs an error message to get the idea on what's going on when something goes wrong. But such a converted error contains a stack trace added to the error message, which in case of mysqli connection error would include the constructor parameters, which happen to be the database credentials. Again, it shouldn't be a problem, as on a live site displaying errors should be always turned off anyway, but we are humans and we make mistakes. So, to avoid even a slight chance to reveal the credentials, we are catching the Exception and immediately throwing a brand new one with the same error message but without erasing the stack trace. Usually it's a bad move but in this case it's considered a good trade-off between security and convenience.\n\nJust keep in mind that if your connection code is wrapped in a function, this function's parameters will be shown in the stack trace in turn. So, to avoid the credentials leak in this place, either send the credentials into this function in the form of an array or an object, or fetch them inside the function.\n\nThere is one thing that makes mysqli a bit more complex to use than old mysql_connect related stuff. Although one was able to call anywhere in the code, without taking care of the connection, which was magically supplied by PHP, with mysqli one should always make sure that once created mysqli instance is available in each part of their script. In a nutshell, it's all about accessing a variable inside functions and object's methods.\n\nSo, to use mysqli in the global scope, just create a PHP file with the code above, and then include it in the every PHP script that needs a database connection. Whereas to access it in the functions/methods simply pass it as a parameter:\n\nremember that if a function is called inside another function, this outer function should take the $db variable as a parameter as well.\n\nIn case your code is OOP, you most likely would put it in the constructor of your own database wrapper class. In this case you may want to check whether your class has any of the common mistakes, just in case.\n\nHaving credentials hardcoded in the same file quickly proves inconvenient. When the site goes live, it would need different credentials for sure, hence you would have to rewrite this file. And when you will need to work a bit more on the code, you will have to rewrite it back... and so on. Which is far from being convenient.\n\nThere are many advanced techniques for providing the settings but the simplest one would be just storing them in a separate file. This way you'll be able to keep different configuration files on different servers. So instead of hardcoding the credentials, just use variables defined in a separate file:\n\nand then just include this file in your database connection script\n\nTo sum everything up, let's create two files, one named with the following code inside,\n\nand also in the same directory a file called where the credentials should go."
    },
    {
        "link": "https://getbootstrap.com/docs/5.0/components/navs-tabs",
        "document": "Navigation available in Bootstrap share general markup and styles, from the base class to the active and disabled states. Swap modifier classes to switch between each style.\n\nThe base component is built with flexbox and provide a strong foundation for building all types of navigation components. It includes some style overrides (for working with lists), some link padding for larger hit areas, and basic disabled styling.\n\nClasses are used throughout, so your markup can be super flexible. Use s like above, if the order of your items is important, or roll your own with a element. Because the uses , the nav links behave the same as nav items would, but without the extra markup.\n\nChange the style of s component with modifiers and utilities. Mix and match as needed, or build your own.\n\nChange the horizontal alignment of your nav with flexbox utilities. By default, navs are left-aligned, but you can easily change them to center or right aligned.\n\nStack your navigation by changing the flex item direction with the utility. Need to stack them on some viewports but not others? Use the responsive versions (e.g., ).\n\nAs always, vertical navigation is possible without s, too.\n\nTakes the basic nav from above and adds the class to generate a tabbed interface. Use them to create tabbable regions with our tab JavaScript plugin.\n\nTake that same HTML, but use instead:\n\nForce your ’s contents to extend the full available width one of two modifier classes. To proportionately fill all available space with your s, use . Notice that all horizontal space is occupied, but not every nav item has the same width.\n\nWhen using a -based navigation, you can safely omit as only is required for styling elements.\n\nFor equal-width elements, use . All horizontal space will be occupied by nav links, but unlike the above, every nav item will be the same width.\n\nSimilar to the example using a -based navigation.\n\nIf you need responsive nav variations, consider using a series of flexbox utilities. While more verbose, these utilities offer greater customization across responsive breakpoints. In the example below, our nav will be stacked on the lowest breakpoint, then adapt to a horizontal layout that fills the available width starting from the small breakpoint.\n\nIf you’re using navs to provide a navigation bar, be sure to add a to the most logical parent container of the , or wrap a element around the whole navigation. Do not add the role to the itself, as this would prevent it from being announced as an actual list by assistive technologies.\n\nNote that navigation bars, even if visually styled as tabs with the class, should not be given , or attributes. These are only appropriate for dynamic tabbed interfaces, as described in the Authoring Practices. See JavaScript behavior for dynamic tabbed interfaces in this section for an example. The attribute is not necessary on dynamic tabbed interfaces since our JavaScript handles the selected state by adding on the active tab.\n\nAdd dropdown menus with a little extra HTML and the dropdowns JavaScript plugin.\n\nUse the tab JavaScript plugin—include it individually or through the compiled file—to extend our navigational tabs and pills to create tabbable panes of local content.\n\nDynamic tabbed interfaces, as described in the Authoring Practices, require , , , and additional attributes in order to convey their structure, functionality and current state to users of assistive technologies (such as screen readers). As a best practice, we recommend using elements for the tabs, as these are controls that trigger a dynamic change, rather than links that navigate to a new page or location.\n\nNote that dynamic tabbed interfaces should not contain dropdown menus, as this causes both usability and accessibility issues. From a usability perspective, the fact that the currently displayed tab’s trigger element is not immediately visible (as it’s inside the closed dropdown menu) can cause confusion. From an accessibility point of view, there is currently no sensible way to map this sort of construct to a standard WAI ARIA pattern, meaning that it cannot be easily made understandable to users of assistive technologies.\n\nTo help fit your needs, this works with -based markup, as shown above, or with any arbitrary “roll your own” markup. Note that if you’re using , you shouldn’t add directly to it, as this would override the element’s native role as a navigation landmark. Instead, switch to an alternative element (in the example below, a simple ) and wrap the around it.\n\nThe tabs plugin also works with pills.\n\nYou can activate a tab or pill navigation without writing any JavaScript by simply specifying or on an element. Use these data attributes on or .\n\nEnable tabbable tabs via JavaScript (each tab needs to be activated individually):\n\nYou can activate individual tabs in several ways:\n\nTo make tabs fade in, add to each . The first tab pane must also have to make the initial content visible.\n\nActivates a tab element and content container. Tab should have either a or, if using a link, an attribute, targeting a container node in the DOM.\n\nSelects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden. Returns to the caller before the tab pane has actually been shown (i.e. before the event occurs).\n\nStatic method which allows you to get the tab instance associated with a DOM element\n\nStatic method which allows you to get the tab instance associated with a DOM element, or create a new one in case it wasn’t initialised\n\nWhen showing a new tab, the events fire in the following order:\n\nIf no tab was already active, then the and events will not be fired."
    },
    {
        "link": "https://getbootstrap.com/docs/5.0/components/navbar",
        "document": "Documentation and examples for Bootstrap’s powerful, responsive navigation header, the navbar. Includes support for branding, navigation, and more, including support for our collapse plugin.\n\nHere’s what you need to know before getting started with the navbar:\n• Navbars require a wrapping with for responsive collapsing and color scheme classes.\n• Navbars and their contents are fluid by default. Change the container to limit their horizontal width in different ways.\n• Use our spacing and flex utility classes for controlling spacing and alignment within navbars.\n• Navbars are responsive by default, but you can easily modify them to change that. Responsive behavior depends on our Collapse JavaScript plugin.\n• Ensure accessibility by using a element or, if using a more generic element such as a , add a to every navbar to explicitly identify it as a landmark region for users of assistive technologies.\n• Indicate the current item by using for the current page or for the current item in a set.\n\nNavbars come with built-in support for a handful of sub-components. Choose from the following as needed:\n• for your company, product, or project name.\n• for a full-height and lightweight navigation (including support for dropdowns).\n• for use with our collapse plugin and other navigation toggling behaviors.\n• Flex and spacing utilities for any form controls and actions.\n• for grouping and hiding navbar contents by a parent breakpoint.\n• Add an optional to set a and scroll expanded navbar content.\n\nHere’s an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the (large) breakpoint.\n\nThis example uses background ( ) and spacing ( , , , ) utility classes.\n\nThe can be applied to most elements, but an anchor works best, as some elements might require utility classes or custom styles.\n\nAdd your text within an element with the class.\n\nYou can replace the text within the with an .\n\nYou can also make use of some additional utilities to add an image and text at the same time. Note the addition of and on the .\n\nNavbar navigation links build on our options with their own modifier class and require the use of toggler classes for proper responsive styling. Navigation in navbars will also grow to occupy as much horizontal space as possible to keep your navbar contents securely aligned.\n\nAdd the class on to indicate the current page.\n\nPlease note that you should also add the attribute on the active .\n\nAnd because we use classes for our navs, you can avoid the list-based approach entirely if you like.\n\nYou can also use dropdowns in your navbar. Dropdown menus require a wrapping element for positioning, so be sure to use separate and nested elements for and as shown below.\n\nPlace various form controls and components within a navbar:\n\nImmediate child elements of use flex layout and will default to . Use additional flex utilities as needed to adjust this behavior.\n\nInput groups work, too. If your navbar is an entire form, or mostly a form, you can use the element as the container and save some HTML.\n\nVarious buttons are supported as part of these navbar forms, too. This is also a great reminder that vertical alignment utilities can be used to align different sized elements.\n\nNavbars may contain bits of text with the help of . This class adjusts vertical alignment and horizontal spacing for strings of text.\n\nMix and match with other components and utilities as needed.\n\nTheming the navbar has never been easier thanks to the combination of theming classes and utilities. Choose from for use with light background colors, or for dark background colors. Then, customize with utilities.\n\nAlthough it’s not required, you can wrap a navbar in a to center it on a page–though note that an inner container is still required. Or you can add a container inside the to only center the contents of a fixed or static top navbar.\n\nUse any of the responsive containers to change how wide the content in your navbar is presented.\n\nUse our position utilities to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use , meaning they’re pulled from the normal flow of the DOM and may require custom CSS (e.g., on the ) to prevent overlap with other elements.\n\nAlso note that uses , which isn’t fully supported in every browser.\n\nAdd to a (or other navbar sub-component) to enable vertical scrolling within the toggleable contents of a collapsed navbar. By default, scrolling kicks in at (or 75% of the viewport height), but you can override that with the local CSS custom property or custom styles. At larger viewports when the navbar is expanded, content will appear as it does in a default navbar.\n\nPlease note that this behavior comes with a potential drawback of —when setting (required to scroll the content here), is the equivalent of , which will crop some horizontal content.\n\nHere’s an example navbar using with , with some extra margin utilities for optimum spacing.\n\nNavbars can use , , and classes to determine when their content collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.\n\nFor navbars that never collapse, add the class on the navbar. For navbars that always collapse, don’t add any class.\n\nNavbar togglers are left-aligned by default, but should they follow a sibling element like a , they’ll automatically be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.\n\nWith no shown at the smallest breakpoint:\n\nWith a brand name shown on the left and toggler on the right:\n\nWith a toggler on the left and brand name on the right:\n\nSometimes you want to use the collapse plugin to trigger a container element for content that structurally sits outside of the . Because our plugin works on the and matching, that’s easily done!\n\nWhen you do this, we recommend including additional JavaScript to move the focus programmatically to the container when it is opened. Otherwise, keyboard users and users of assistive technologies will likely have a hard time finding the newly revealed content - particularly if the container that was opened comes before the toggler in the document’s structure. We also recommend making sure that the toggler has the attribute, pointing to the of the content container. In theory, this allows assistive technology users to jump directly from the toggler to the container it controls–but support for this is currently quite patchy.\n\nResponsive navbar expand/collapse classes (e.g., ) are combined with the map and generated through a loop in ."
    },
    {
        "link": "https://mdbootstrap.com/docs/standard/navigation/navbar/examples-and-customization",
        "document": "A stunning collection of Navbar templates built with the newest Bootstrap 5. Navbar YouTube, Facebook, Amazon styles, Navbar with image, carousel, Navbar light, dark, gradient, transparent and many more.\n\nIf you want to learn more about the construction of the navbar and get to know the basic and advanced usage of this component - read the Navbar Docs."
    },
    {
        "link": "https://getbootstrap.com/docs/5.0/examples",
        "document": "Common patterns for building sites and apps that build on existing components and utilities with custom CSS and more.\n\nBrand new components and templates to help folks quickly get started with Bootstrap and demonstrate best practices for adding onto the framework.\n\nSimple one-page template for photo galleries, portfolios, and more. Example pricing page built with Cards and featuring a custom header and footer. Custom checkout form showing our form components and their validation features. Customize the navbar and carousel, then add some new components. Custom form layout and design for a simple sign in form. Attach a footer to the bottom of the viewport when page content is short. Attach a footer to the bottom of the viewport with a fixed top navbar. Use utilities to recreate and enhance Bootstrap 4's jumbotron.\n\nExamples that focus on implementing uses of built-in components provided by Bootstrap.\n\nTaking the default navbar component and showing how it can be moved, placed, and extended.\n\nDemonstration of all responsive and container options for the navbar. Single navbar example of a static top navbar along with some additional content. Single navbar example with a fixed top navbar along with some additional content. Single navbar example with a bottom navbar along with some additional content. Turn your expandable navbar into a sliding offcanvas menu (doesn't use our offcanvas component).\n\nSee Bootstrap's RTL version in action with these modified Custom Components examples.\n\nThe RTL feature is still experimental and will probably evolve according to user feedback. Spotted something or have an improvement to suggest? Open an issue, we'd love to get your insights.\n\nGo further with Bootstrap Themes Need something more than these examples? Take Bootstrap to the next level with premium themes from the official Bootstrap Themes marketplace. They’re built as their own extended frameworks, rich with new components and plugins, documentation, and powerful build tools. Browse themes"
    },
    {
        "link": "https://medium.com/@Jessica_Gbubemi/bootstrap-5-and-the-navigation-bar-229b0a68e876",
        "document": "STEP 1: CREATE THE LIST.\n\nTo do this, we write out the <nav> element. This element is similar to the <div>, in that it has zero dimension in the absence of a content. So, we add the navbar content (Contact, Pricing and Download) in the form of <ul> and <li> as shown below:\n\nSTEP 2: ADD THE ANCHOR TAG (<a></a>)\n\nThe list content serve as links that enable us scroll, easily, to a particular section of the website. In order to achieve this, the <li> contents are written in <a> as shown below:\n\nTo make our list look less like bullet points, and more like navigation links, we add some pre-defined bootstrap classes to the HTML elements. These classes have already been assigned various CSS styles by the bootstrap developers (that’s why it’s a library). And so, all we need to do is to apply these classes to the HTML elements and get our elements beautifully styled. Easy-peasy. See how they are applied below:\n\nHere’s what these classes do:\n• “.ms-auto” sets the margin-left of the navbar contents to auto.\n• “.bg-dark” changes the background color of the navbar to black.\n• “.navbar-dark\" changes the colour of the navbar contents.\n\nIf you’re not comfortable with the dark colour that I’ve chosen, you can always select whatever color you want from the default bootstrap colours found here.\n\nTo add the brand name, we make use of the bootstrap's \".navbar-brand\" class. It is best practice to apply this class to an anchor tag.\n\nSTEP 5: ADD THE \".navbar-expand-lg\" CLASS.\n\nThe navbar is currently occupying more space than it should. It'll look neater if the contents are arranged horizontally, in one line. To achieve this, we make use of the bootstrap’s \".navbar-expand-lg\" class by applying it to the <nav> as shown below:\n\nHere’s how it works: The \"navbar-expand\" specifies how the contents will be displayed (either horizontally or vertically) on different viewports. This is where bootstrap responsiveness comes into play. The \"lg\" (large) is a keyword. Keywords serve as the breakpoints for display, where lg (large) indicates that the contents will be displayed horizontally on a desktop/laptop screen, and displayed vertically on screens with smaller widths (such as tablets and mobile phones). Other keywords are \"md\", \"sm\", \"xl\". You can replace lg with the other keywords and observe how the contents will be displayed on different viewports.\n\nSTEP 6: ADD THE NAVBAR TOGGLE BUTTON.\n\nIn a bid to reduce the amount of space taken up by the navbar contents when viewed on a tablet/mobile phone, we can have them collapsed into a navbar toggle button. To achieve this, we simply copy and paste the relevant bootstrap <button> and <div> codes from bootstrap as shown below:\n\nNow, we've got a nice looking, and responsive, navigation bar that adapts it's content to whatever screen width it is being viewed on. And it's all thanks to our mobile-first bootstrap!\n\n💡Ensure that the \"data-bs-target\" in the <button> is targeting the right \"id\" in the <div>. It's like telling the <button>: this is the <div> you are to collapse.\n\n💡Observe the positioning of the <button> in the above example. It is right below the brand name's <a>. If it were above the <a>, then the button would appear on the left corner of the screen, and the brand name, on the right. With this, you can arrange the elements in the order you want them to appear. Try it out and see what it looks like.\n\n📌For the links to actually work, i.e, to navigate a user to a particular section of the webpage/site, be sure to include the right \"url\", \"page\" or \"id\" to the \"href\"."
    },
    {
        "link": "https://swiperjs.com/get-started",
        "document": "There are few options on how to include/import Swiper into your project:\n\nWe can install Swiper from NPM\n\nBy default Swiper exports only core version without additional modules (like Navigation, Pagination, etc.). So you need to import and configure them too:\n\nIf you want to import Swiper with all modules (bundle) then it should be imported from :\n\nIf you don't want to include Swiper files in your project, you may use it from CDN. The following files are available:\n\nIf you use ES modules in browser, there is a CDN version for that too:\n\nIf you want to use Swiper assets locally, you can directly download them from https://www.jsdelivr.com/package/npm/swiper\n\nNow, we need to add basic Swiper layout to our app:\n\nIn addition to Swiper's CSS styles, we may need to add some custom styles to set Swiper size:\n\nFinally, we need to initialize Swiper in JS:\n\nAs you see it is really easy to integrate Swiper into your website or app. So here are your next steps:\n• Go to API Documentation to learn more about all Swiper API and how to control it.\n• Look at available Demos.\n• If you have questions about Swiper ask them in StackOverflow or Swiper Discussions.\n• Create issue on GitHub if you found a bug.\n• If you are looking for support, we have a private Discord support chat room for Swiper Patrons."
    },
    {
        "link": "https://stackoverflow.com/questions/35335474/integration-of-swiper",
        "document": "I am trying to integrate swiper with my website. I am quite new to programming though. I have added the CSS and HTML to my code but I'm not sure how to initialise the swiper.\n\nI have a project called swiper-common.js which contains the following code:\n\nI guess I need to call this or insert it into the main page I am showing my swiper on. I tried adding\n\nbut I get the following error: JavaScript runtime error: 'Swiper' is undefined.\n\nEverything else in the code works i.e. the styling and the image shown although the next and previous buttons are not functioning nor is the autoplay"
    },
    {
        "link": "https://awplife.com/getting-started-with-swiper-js-a-beginners-guide",
        "document": "Swiper.js is a powerful and versatile JavaScript library that enables developers to create modern, touch-friendly sliders and carousels. It is designed to work seamlessly on both desktop and mobile devices, providing a smooth and responsive experience. Swiper.js is widely used in web development due to its rich feature set, ease of integration, and extensive customization options. Whether you’re building a simple image carousel, a complex multi-slide layout, or an interactive full-page slider, Swiper.js offers the tools you need to create visually appealing and highly functional sliders. For those looking to get started with learning and implementing web development technologies, Tutor Map can be a valuable resource for finding relevant tutors and resources.\n\nSwiper.js stands out for its comprehensive features and numerous benefits that make it a popular choice among web developers. Here are some of the key features and benefits:\n\nSwiper.js is optimized for touch interactions, making it an ideal choice for mobile-first and responsive web designs. It supports touch gestures such as swiping, which allows users to navigate through slides effortlessly. This feature is particularly valuable for mobile users who rely on touch interactions for navigation. Additionally, Swiper.js supports mouse interactions, ensuring a consistent experience across all devices.\n\nSwiper.js automatically adjusts to different screen sizes, ensuring that sliders look great on all devices, from large desktop monitors to small mobile screens. The library provides several responsive design options, allowing developers to specify different settings based on the screen size. This flexibility ensures that the slider’s appearance and functionality remain consistent and optimized for any device, enhancing the overall user experience.\n\nOne of the standout features of Swiper.js is its high degree of customizability. Developers can configure various aspects of the slider, including its behavior, appearance, and layout. Swiper.js offers a wide range of configuration options, such as autoplay, loop mode, speed, direction, and more. Additionally, it provides numerous callbacks and events that allow developers to execute custom code at different stages of the slider’s lifecycle. This level of customization makes it easy to tailor Swiper.js to fit the specific needs of any project.\n\nSwiper.js is designed with performance in mind. It is lightweight and efficient, ensuring fast loading times and smooth animations. The library’s optimized code minimizes the impact on page load speed, which is crucial for maintaining a positive user experience. Swiper.js also supports features like lazy loading, which delays the loading of images until they are needed, further enhancing performance and reducing initial load times. These performance optimizations make Swiper.js an excellent choice for creating high-performing sliders and carousels.\n\nBy offering these key features and benefits, Swiper.js has become a go-to solution for developers looking to create engaging, responsive, and customizable sliders for their web projects. In the following sections, we will explore how to set up and use Swiper.js, customize its behavior, and implement advanced features to create stunning sliders that enhance the user experience.\n\nBefore diving into Swiper.js, it is essential to have a basic understanding of HTML, CSS, and JavaScript. These skills will help you effectively integrate and customize Swiper.js in your web projects.\n• HTML: Knowledge of HTML is necessary to create the structure of your sliders.\n• CSS: Familiarity with CSS will allow you to style your sliders and ensure they look visually appealing.\n• JavaScript: Understanding JavaScript is crucial for initializing Swiper.js and configuring its behavior.\n\nSwiper.js offers multiple installation methods to suit different development environments and preferences. Here are three common ways to install Swiper.js:\n\nOne of the simplest ways to include Swiper.js in your project is by using a Content Delivery Network (CDN). This method requires no additional setup and allows you to quickly start using Swiper.js by linking to the CDN-hosted files.\n• Include the CSS file: Add the following link tag in the section of your HTML document.\n• Include the JS file: Add the following script tag before the closing tag of your HTML document.\n\n\n\nFor projects using a build system or module bundler like Webpack or Parcel, you can install Swiper.js via npm or yarn. This method provides better control over dependencies and version management.\n\nYou can also download Swiper.js files and host them locally in your project. This method is useful if you prefer not to rely on external resources or need offline access.\n• Download the Swiper.js package: Go to the Swiper.js GitHub repository and download the latest release.\n• Extract the files: Unzip the downloaded package and locate the CSS and JS files.\n• Include the CSS file: Add the following link tag in the section of your HTML document, pointing to the locally hosted CSS file.\n• Include the JS file: Add the following script tag before the closing tag of your HTML document, pointing to the locally hosted JS file.\n\n\n\nOnce you have chosen and implemented one of the installation methods, you can add Swiper.js to your project by including the necessary CSS and JS files.\n\nOr, if you are using a module bundler:\n• Import the CSS file in your JavaScript file:\n\n\n\nTo get started with Swiper.js, you need to create the basic HTML structure that will hold your slider. This involves creating a container for the Swiper instance and adding individual slides within this container.\n\nHTML Markup for the Swiper Container and Slides\n• Swiper Container: The outer container that will hold all the slides.\n• Swiper Wrapper: A div inside the container that wraps around all the slides.\n• The class is the main container for the Swiper slider.\n• The class wraps around all the slide elements.\n• Each slide has the class.\n\nOnce you have the basic HTML structure in place, the next step is to initialize Swiper.js with JavaScript. This involves creating a new Swiper instance and passing it the container selector and any desired configuration options.\n\nHere’s how to initialize Swiper.js using JavaScript:\n• Create a new Swiper instance: Use the Swiper constructor and pass it the CSS selector for the container and an optional configuration object.\n• Example Initialization:\n\n <script>\n\n document.addEventListener('DOMContentLoaded', function () {\n\n var swiper = new Swiper('.swiper-container', {\n\n // Optional parameters\n\n direction: 'horizontal', // 'horizontal' or 'vertical'\n\n loop: true, // Loop through slides\n\n\n\n // If you want pagination (bullets)\n\n pagination: {\n\n el: '.swiper-pagination',\n\n clickable: true,\n\n },\n\n\n\n // If you want navigation buttons\n\n navigation: {\n\n nextEl: '.swiper-button-next',\n\n prevEl: '.swiper-button-prev',\n\n },\n\n\n\n // If you want a scrollbar\n\n scrollbar: {\n\n el: '.swiper-scrollbar',\n\n },\n\n });\n\n });\n\n</script>\n\nThis script initializes a basic Swiper instance with the following options:\n• Direction: Set to , making the slides move horizontally. You can change it to if you prefer vertical sliding.\n• Loop: Set to , allowing the slides to loop infinitely.\n\nHere is a complete example combining the HTML structure and JavaScript initialization:\n\nThis example provides a basic setup for Swiper.js, including the necessary HTML structure and JavaScript initialization. You can now customize and extend your Swiper instance with various configuration options to create the desired slider experience for your project.\n\nSwiper.js offers a wide range of configuration options that allow you to customize the behavior and appearance of your sliders. These options can be set when initializing the Swiper instance and provide control over aspects like looping, autoplay, speed, direction, and more. Here are some of the key configuration options:\n• : Defines the direction of slide movement ( or ).\n• : Sets the transition speed between slides (in milliseconds).\n• : Changes the transition effect between slides (e.g., , , , , ).\n\nThese options allow you to create highly customized and interactive sliders tailored to your specific needs.\n\nTo customize the Swiper instance, you can pass an options object to the Swiper constructor. This object can include any of the available configuration options.\n\nHere are a few examples demonstrating different configurations of Swiper.js:\n\nExample Code Snippets for Various Configurations\n\nHere are complete examples combining HTML structure and JavaScript initialization for different configurations:\n\nThese examples demonstrate how to configure Swiper.js to achieve various effects and functionalities. By adjusting the configuration options, you can create a wide range of slider experiences to meet your project’s needs.\n\nWhen getting started with Swiper.js, beginners might encounter a variety of common issues. Here are some typical problems and how to address them:\n• Initialization Issues:\n• Solution: Ensure that the Swiper.js script and stylesheets are correctly included in your HTML file. Verify that the Swiper container and wrapper elements have the correct class names.\n• Styling Problems:\n• Problem: The slider is not displaying correctly, or slides are not visible.\n• Solution: Check that the CSS is correctly applied to the Swiper container and slides. Make sure the container has a defined width and height. Verify that there are no conflicting CSS rules affecting the slider.\n• JavaScript Errors:\n• Solution: Open the browser console to check for any error messages. These messages can provide clues about what is going wrong. Ensure that there are no syntax errors in your Swiper initialization code.\n• Pagination/Navigation Not Working:\n• Problem: Pagination bullets or navigation buttons are not functioning.\n• Solution: Verify that the pagination and navigation elements are correctly referenced in the Swiper configuration. Ensure that the elements exist in the HTML and have the correct class names.\n• Autoplay Issues:\n• Problem: Autoplay is not working as expected.\n• Solution: Check the autoplay configuration in the Swiper initialization code. Make sure that the option is correctly set, and there are no conflicting settings.\n\nWhen troubleshooting issues with Swiper.js, the following tips can help you identify and resolve problems:\n• Use Console Logs:\n• Add statements to your JavaScript code to track the execution flow and values of variables. This can help you pinpoint where things might be going wrong.\n• Check Browser Console for Errors:\n• The browser console provides detailed error messages and warnings that can help you understand what is causing an issue. Open the console (usually by pressing or ) and look for any errors related to Swiper.js or your custom code.\n• Review Swiper.js Documentation:\n• The Swiper.js documentation is a comprehensive resource that covers all aspects of Swiper.js. It includes detailed explanations of configuration options, methods, and events. Refer to the documentation to ensure you are using the correct syntax and options.\n• Search Online Forums and Communities:\n• Online forums, such as Stack Overflow, and communities like the Swiper.js GitHub repository, can be valuable resources for troubleshooting. Search for similar issues that other developers have encountered and see how they resolved them. You can also ask questions and seek advice from the community.\n• Simplify Your Code:\n• If you are encountering issues, try simplifying your code to the most basic example that still reproduces the problem. This can help isolate the issue and make it easier to identify what is causing it.\n• Check for Conflicting Scripts or Styles:\n• Other scripts or CSS styles on your page might conflict with Swiper.js. Disable other scripts and styles temporarily to see if the issue persists. If disabling them resolves the issue, you can then narrow down which one is causing the conflict.\n\nBy following these tips and utilizing the available resources by ServiceNow consulting services, you can effectively troubleshoot and resolve common issues when working with Swiper.js."
    },
    {
        "link": "https://blog.logrocket.com/building-modern-sliders-html-css-swiper",
        "document": "Editor’s note: This article was last updated by Carlos Mucuho on 29 February 2024 to cover how to style Swiper sliders using CSS, how to monitor slide progress using Swiper’s feature, and to provide an overview of the Swiper API’s advanced slider features, including autoplay and sliding to a specific slide.\n\nSliders are functional user interface units that organize pieces of information in a condensed and cyclical manner within a limited space. Sliders consist of the following components:\n• Containers, or the boxes that house the slider components\n• Slides, or the content area that includes text, images, videos, and buttons\n• Navigation icons that guide users through the slides\n• Pagination visualizers that serve as additional navigation, usually bullets or numbers placed on the bottom of the container\n\nIn addition, sliders are built with transition effects to avoid abrupt changes from one block of content to another. Building these sliders from scratch, and covering their components and transitions, can be intimidating. That is why in this article we will use Swiper to create modern, fast, responsive, and native (mobile-first) touch sliders with amazing transitions.\n\nSwiper is a JavaScript library that creates modern touch sliders with hardware-accelerated transitions (utilizing GPU to offload graphic-intensive transitions and create smoother visuals) and excellent native behavior. Swiper is available for vanilla JavaScript, Angular, React, Vue.js, and Svelte.\n\nCheck out these examples of websites that use Swiper.\n\nSwiper is a completely free and open source library with over 38.2k stars and 9.7k forks on GitHub. Some key features of Swiper include:\n• Works on iOS, Android, and the latest desktop browsers\n\nAt the time of writing, Swiper is currently on v.11; however, check for the respective migration guide to upgrade from Swiper 10 to Swiper 11 or from Swiper 9 to Swiper 10.\n\nThere are three options for importing Swiper into your project:\n• Download and use Swiper assets locally here\n• Use Swiper as a content delivery network (CDN) by adding the following to your HTML file head and body, respectively:\n• Install from npm using the installation command\n\nFor this article, we will be using option two.\n\nThe HTML markup to structure our project webpage, layout, and contents is shown in the image above. The HTML markup is as follows:\n\nIn the HTML markup, you can see that our project consists of five slides. Next, let’s style the default HTML markup using CSS as shown below:\n\nNext, we initialize Swiper in this project with JavaScript. The JavaScript is as follows:\n\nNote that the class in the Swiper container is used to create a Swiper object in the JavaScript file.\n\nFor the default webpage, we can see that the five slides are overlapping each other, and there’s no way to view the slides one at a time except by using the mouse to swipe over.\n\nThis is not the most intuitive or clear way to communicate information. Swipers are supposed to be tools for displaying lots of information in a small space, so let’s see how we can improve this system with Swiper.\n\nAs we learned earlier, pagination is just a set of traditional bullets or numbers placed on the bottom of the container (in this case, the box that covers the slides). The pagination shows how many sliders are overlapping in the container:\n\nIt can easily be implemented on our default files by making some changes. On the HTML file, we need to add the pagination container under the sliders container as follows:\n\nThe CSS remains the same, but we need to make changes to our JavaScript file to initiate the pagination effect:\n\nNow, our slider indicates how many slides we have in total, and which slide we are viewing at the moment:\n\nNavigation, just like pagination, serves as a tool to guide through the slides with a click rather than swiping with the mouse. It consists of a left and right arrow located on the sides of the slides container:\n\nLet’s make the respective changes to our default files. On our HTML file, just like the pagination, we need to add the navigation containers under the sliders container as follows:\n\nNext, we need to add some styling to our CSS for arrow positioning (at the center of the slides container):\n\nThen, we initiate the navigation effect on our JavaScript file as follows:\n\nHere is what our slides look like now:\n\nScroll aids simple horizontal scrollable sliders moving from left to right. It can easily be implemented by making the following changes to the default settings.\n\nFirst, on the HTML markup, we will be making changes to the Swiper container as follows:\n\nNext, using the default CSS, let’s initiate the scroll effect on the JavaScript file as follows:\n\nNow, you can see a scroll bar at the bottom of our slides:\n\nVertical means vertical pagination, which is just like the regular pagination we covered previously, but with the bullet points in a vertical orientation:\n\nThe HTML markup is the same as the horizontal pagination, we just need to specify the orientation in our JavaScript file as follows:\n\nNow, we can see the slides moving up and down instead of side to side:\n\nNested sliders are a bit trickier. They are a combination of both the horizontal and vertical display of sliders with pagination to give you more information about the number of slides on each axis:\n\nLet’s implement this using the default settings, on our HTML markup. The following changes should be made to the swiper container as follows:\n\nNext, we need to specify some changes in our default CSS file to accommodate the vertical slide color as follows:\n\nThen, we have to initiate both the vertical and horizontal sliders with pagination on our JavaScript script:\n\nIn addition to the standard navigation and pagination features, Swiper offers the ability to monitor slide progress, providing visual feedback for users as they navigate through the slider. This can be achieved by implementing the feature and, optionally, creating a custom progress bar using Swiper pagination.\n\nOn the HTML file, just like we did in the previous section, we need to add the pagination container under the sliders container:\n\nNext, we need to revert the CSS code to the following:\n\nImplementing allows you to track the progress of each slide as it transitions in and out of view. This can be useful for creating dynamic effects or triggering actions based on the slide’s position in the slider. To enable , add the following code to your Swiper initialization in the JavaScript file:\n\nWith enabled, you can now access the progress of each slide using the property of the slide object. For example, this is the code to log the progress of each slide as it transitions:\n\nTo create a more interactive user experience, you can use the slide progress to update a progress bar. Swiper’s pagination feature can be customized to display a progress bar that reflects the current slide’s position. Here’s how you can create that:\n\nIn this configuration, Swiper’s pagination is set to display a progress bar ( ) instead of the default bullets or numbers. The progress bar will visually indicate the progress of the current slide relative to the total number of slides:\n\nCustomizing your sliders’ appearance can greatly enhance your website’s visual appeal. With CSS, you can easily modify the colors, sizes, and positions of various slider components to match your design aesthetic. In this section, we’ll explore some common CSS techniques to style sliders created using Swiper.\n\nWe’re going to be using a Swiper container with pagination and navigation buttons. Open your HTML file and edit your Swiper container to look like the following:\n\nAnd the following JavaScript code, which enables pagination and navigation buttons:\n\nThe slider container is the outermost element that contains all the slider components. You can style it using CSS to adjust its size, position, and background color. For example, to make the slider container half its container width and give it a red background, you can use the following CSS:\n\nSlides are the individual content blocks within the slider. You can style them to change their size, position, and appearance. For example, to make the slides less opaque and add a green border around them, you can use the following CSS:\n\nNavigation icons are the buttons used to navigate between slides. You can style them to change their size, color, and position. For example, to make the navigation icons larger and change their color to black, you can use the following CSS:\n\nYou can also change the pagination indicators’ size, color, and position. For example, to make the pagination bullets larger and change their color to orange, you can use the following CSS:\n\nThese are just a few examples of how you can customize the appearance of your sliders. Feel free to experiment with different styles to create a slider that complements your website’s design.\n\nSliders in web designs are incorporated with a range of transition effects to avoid overwhelming and abrupt shifts between blocks of information. For the context of this article, we will be focusing on the cube effect and the cards effect.\n\nThe cube effect transition makes the slides look like they are sides on a rotating cube. Changing from one slide to the next spins the cube to bring the desired slide to the front.\n\nTo implement the cube effect on our default files, we will make the following changes. First, in our HTML markup, we will update the swiper container as follows:\n\nIn the CSS, we have to make some changes to the swiper container selector by reducing the slide size to accommodate the effect transition, like so:\n\nNext, we have to initiate a cube effect on our JavaScript file:\n\nHere is the resulting cube transition:\n\nThis is a transition effect for shifting between slides, similar to the cube above. With the cards effect, each slide looks like a card being shuffled in a deck to bring the desired slide to the front.\n\nThe HTML and CSS are the same as the cube effect, just change the effect to as follows:\n\nIn this section, we will look at some sliders that are ideal for images or galleries. In my opinion, two great options for gallery sliders are thumb galleries and lazy loading, which we will learn how to implement in the following sections.\n\nThis slider consists of a compressed preview image of the original that is used as a placeholder. The thumbnail image should be smaller than the original, but the exact size is up to you. This slider creates a simple thumbnail gallery module to hold content and also functions as a means of navigation.\n\nUsing the default settings, we can implement this by making changes to our default HTML markup as follows:\n\nNext, we need to make changes to our CSS to add the slider and thumbnails inside our swiper container as follows:\n\nThen, we initiate the thumb gallery sliders on our default JavaScript file:\n\nLazy loading is a strategy that delays the loading or initialization of resources until they are needed to reduce page load time and save system resources. Just imagine a user downloading the entire gallery in the previous use case, but the user leaves after viewing only the first slide; it results in wasted memory and bandwidth.\n\nLazy loading occurs in some users’ interactions such as navigation and scrolling. To see the lazy loading effect, we will be using images from Pexels.\n\nTo begin, in the default HTML file, make the following changes on the slider container:\n\nOn the default CSS file, remove all stylings related to the swiper class and add the following styling:\n\nNext, we need to initiate the lazy loading effect on our JavaScript file like so:\n\nHere is the lazy loading in action:\n\nThese controls are just a few ways to navigate through the slides. They are relatively simple to implement, we just need to specify them in the JavaScript file to take effect. Let’s look at three of the most popular.\n\nFirst is keyboard control. This control utilizes the navigation keys on the keyboard (arrows keys or WASD) to control the shifting of slides. It can be initiated by adding the following to the swiper object:\n\nSecond is mousewheel control: This control aids the navigation of slides via scrolling the mouse. This is ideal for vertical sliders, as the mousewheel can quickly scroll through the content. It can be initiated by adding the following to the swiper object in the JavaScript:\n\nThe final custom control is the grab cursor. This is an intuitive control that allows the mouse cursor to grab content and move it in different directions to navigate through the slides. It can be initialized on the JavaScript as follows:\n\nThe Swiper API offers advanced features that can enhance the functionality and interactivity of your sliders. In this section, we will explore some powerful features of the Swiper API, such as autoplay, and its ability to handle complex navigation scenarios.\n\nSwiper allows you to create autoplay sliders that automatically advance to the next slide at a specified interval. This can be useful for creating interactive presentations or showcasing content.\n\nFor this demonstration, you will use the nested navigation example’s HTML, CSS, and JS code. On the JavaScript file, add the property to the first swiper:\n\nThe property added to the first swiper allows you to create an autoplay slider, which automatically advances to the next slide at a specified interval (1 second):\n\nYou can use the method to navigate to a specific slide programmatically. This can be useful for creating custom navigation controls or implementing navigation based on user interactions.\n\nOn the JavaScript file, remove the property from the first swiper instance and add the code below the second swiper instance:\n\nHere the code uses the method to control the first swiper and navigate to the slide with index (third slide) after 1.5 seconds and then navigate to the slide with index (first slide )after 3 seconds:\n\nSwiper also provides the and methods to navigate to the next or previous slide. On the JavaScript file, add the following code below the Swiper instances:\n\nHere the code uses the method to control the first swiper and navigate to the next slide after 1.5 seconds and then uses the method to navigate to the previous after 3 seconds:\n\nIf you have multiple Swiper instances on a page, you can control them independently using their respective methods. On the JavaScript file, add the following code below the Swiper instances:\n\nIn the code above, you used the method to control the first swiper (with horizontal slides) and navigate to the slide with index 2 (the third horizontal slide and also the first vertical slide) after 1.5 seconds. Next, you used the method to control the second swiper (with vertical slides) and navigate to the next vertical slide after 3 seconds:\n\nSliders are important web design units that deserve special attention. Despite their pros in managing content in a space, they have some cons such as inhibiting SEO strategies and creating UX blunders. Sliders are a matter of personal preference, but when implemented efficiently, can produce a favorable impression of your web design. Should you decide to include them in your next project, Swiper is a great tool to consider."
    },
    {
        "link": "https://swiperjs.com/swiper-api",
        "document": "Swiper package contains different sets of CSS, Less and SCSS styles:\n• - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\n• - same as previous but minified\n• - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\n• - same as previous but minified\n\nLess styles are separate styles for core version and modules (package imports):\n• - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\n\nSCSS styles are also separate styles for core version and modules (package imports):\n• - all Swiper styles including all modules styles (like Navigation, Pagination, etc.)\n\nNow, when we have Swiper's HTML, we need to initialize it using the following function:\n• swiperContainer - HTMLElement or string (with CSS Selector) of swiper container HTML element. Required.\n\nAfter you initialize Swiper it is possible to access to Swiper's instance on its HTMLElement. It is property of Swiper's HTML container element:\n\nLet's look on list of all available parameters:\n\nObject with a11y parameters or boolean to enable with default settings. Set to to disable swiping to next slide direction (to right or bottom) Set to to disable swiping to previous slide direction (to left or top) If , then the only way to switch the slide is use of external API functions like slidePrev or slideNext Set to and slider wrapper will adapt its height to the height of the currently active slide Object with autoplay parameters or boolean to enable with default settings Allows to set different parameter for different responsive breakpoints (screen sizes). Not all parameters can be changed in breakpoints, only those which do not require different layout and logic, like , , , . Such parameters like and won't work Base for breakpoints (beta). Can be or . If set to (by default) then breakpoint keys mean window width. If set to then breakpoint keys treated as swiper container width When enabled it center slides if the amount of slides less than . Not intended to be used mode and If , then active slide will be centered, not always on the left side. If , then active slide will be centered without adding gaps at the beginning and end of slider. Required . Not intended to be used with or The beginning of the modifier CSS class that can be added to swiper container depending on different parameters Object with controller parameters or boolean to enable with default settings When enabled Swiper will automatically wrap slides with swiper-wrapper element, and will create required elements for navigation, pagination and scrollbar they are enabled (with their respective params object or with boolean )) When enabled it will use modern CSS Scroll Snap API. It doesn't support all of Swiper's features, but potentially should bring a much better performance in simple configurations. This is what is not supported when it is enabled:\n• parameter may not have no effect\n• All transition start/end related events (use instead)\n• doesn't have effect and \"dragging\" with mouse doesn't work In case if you use it with other effects, especially 3D effects, it is required to wrap slide's content with element. And if you use any custom styles on slides (like background colors, border radius, border, etc.), they should be set on element instead. Can be or (for vertical slider). Enable to release Swiper events for swipe-back work in app. If set to then it will prevent system swipe-back navigation instead. This feature works only with \"touch\" events (and not pointer events), so it will work on iOS/Android devices and won't work on Windows devices with pointer (touch) events. Area (in px) from left edge of the screen to release touch events for swipe-back in app Transition effect. Can be , , , , , or Whether Swiper initially enabled. When Swiper is disabled, it will hide all navigation elements and won't respond to any events and interactions Event name prefix for all DOM events emitted by Swiper Element (web component) CSS selector for focusable elements. Swiping will be disabled on such elements if they are \"focused\" If disabled, then slider will be animated only when you release it, it will not move while you hold your finger on it Enables free mode functionality. Object with free mode parameters or boolean to enable with default settings. This option may a little improve desktop usability. If , user will see the \"grab\" cursor when hover on Swiper Enables hash url navigation to for slides. Object with hash navigation parameters or boolean to enable with default settings Swiper height (in px). Parameter allows to force Swiper height. Useful only if you initialize Swiper when it is hidden and in SSR and Test environments for correct Swiper initialization Setting this parameter will make Swiper not responsive Enables history push state where every slide will have its own url. In this parameter you have to specify main slides url like and specify every slide url using attribute. Object with history navigation parameters or boolean to enable with default settings Whether Swiper should be initialised automatically when you create an instance. If disabled, then you need to init it manually by calling Inject text styles to the shadow DOM. Only for usage with Swiper Element Inject styles s to the shadow DOM. Only for usage with Swiper Element Enables navigation through slides using keyboard. Object with keyboard parameters or boolean to enable with default settings Number of next and previous slides to preload. Only applicable if using lazy loading. Set to if you want to disable long swipes Minimal duration (in ms) to trigger swipe to next/previous slide during long swipes Ratio to trigger swipe to next/previous slide during long swipes Because of nature of how the loop mode works (it will rearrange slides), total number of slides must be:\n• more than or equal to +\n• even to (or use parameter)\n• even to (or use parameter) Automatically adds blank slides if you use Grid or and the total amount of slides is not even to or to Allows to increase amount of looped slides If enabled then slideNext/Prev will do nothing while slider is animating in loop mode If total number of slides less than specified here value, then Swiper will enable on slide elements to reduce visual \"flicker\" in Safari. It is not recommended to enable it on large amount of slides as it will reduce performance Enables navigation through slides using mouse wheel. Object with mousewheel parameters or boolean to enable with default settings Object with navigation parameters or boolean to enable with default settings. Set to on Swiper for correct touch events interception. Use only on swipers that use same direction as the parent one Enable/disable swiping on elements matched to class specified in Can be used instead of to specify elements to disable swiping on. For example will disable swiping on all inputs Set to if you also need to watch Mutations for Swiper parent elements Set to if you also need to watch Mutations for Swiper slide children elements Set to to enable Mutation Observer on Swiper and its elements. In this case Swiper will be updated (reinitialized) each time if you change its style (like hide/show) or modify its child elements (like adding/removing slides) Add event listener that will be fired on all events When enabled, will swipe slides only forward (one-way) regardless of swipe direction Object with pagination parameters or boolean to enable with default settings. Object with parallax parameters or boolean to enable with default settings. Passive event listeners will be used by default where possible to improve scrolling performance on mobile devices. But if you need to use and you have conflict with it, then you should disable this parameter Set to to prevent accidental unwanted clicks on links during swiping Set to to stop clicks event propagation on links during swiping When enabled it won't allow to change slides by swiping or navigation/pagination buttons during transition Set to if you want to disable resistant bounds This option allows you to control resistance ratio When enabled it will use ResizeObserver (if supported by browser) on swiper container to detect container resize (instead of watching for window resize) Set to to enable \"rewind\" mode. When enabled, clicking \"next\" navigation button (or calling ) when on last slide will slide back to the first slide. Clicking \"prev\" navigation button (or calling ) when on first slide will slide forward to the last slide. Should not be used together with mode Set to to round values of slides width and height to prevent blurry texts on usual resolution screens (if you have such) Fire Transition/SlideChange/Start/End events on swiper initialization. Such events will be fired on initialization in case of your initialSlide is not 0, or you use loop mode Object with scrollbar parameters or boolean to enable with default settings. Enabled this option and plugin will set width/height on swiper wrapper equal to total size of all slides. Mostly should be used as compatibility fallback option for browser that don't support flexbox layout well Set to if you want to disable short swipes If , Swiper will accept mouse events like touch events (click and drag to change slides) CSS class name of currently active slide By changing classes you will also need to change Swiper's CSS to reflect changed classes CSS class name of the blank slide added by the loop mode (when is enabled) By changing classes you will also need to change Swiper's CSS to reflect changed classes CSS class name of fully (when whole slide is in the viewport) visible slide CSS class name of slide which is right after currently active slide By changing classes you will also need to change Swiper's CSS to reflect changed classes CSS class name of slide which is right before currently active slide By changing classes you will also need to change Swiper's CSS to reflect changed classes Set to and click on any slide will produce transition to this slide By changing classes you will also need to change Swiper's CSS to reflect changed classes Add (in px) additional slide offset in the end of the container (after all slides) Add (in px) additional slide offset in the beginning of the container (before all slides) Set numbers of slides to define and enable group sliding. Useful to use with slidesPerView > 1 This param intended to be used only with and . When enabled, it will skip all slides in view on & methods calls, on Navigation \"buttons\" clicks and in autoplay. The parameter works in the following way: If equals (default), no slides are excluded from grouping, and the resulting behaviour is the same as without this change. If is equal or greater than the first X slides are treated as single groups, whereas all following slides are grouped by the value. Number of slides per view (slides visible at the same time on slider's container). is currently not compatible with multirow mode, when > 1 If you use \"margin\" css property to the elements which go into Swiper in which you pass \"spaceBetween\" into, navigation might not work properly. Duration of transition between slides (in ms) String with CSS selector or HTML element of the container with pagination that will work as only available handler for swiping The name of the swiper element node name; used for detecting web component rendering Threshold value in px. If \"touch distance\" will be lower than this value then swiper will not move Target element to listen touch events on. Can be (to listen for touch events on swiper) or (to listen for touch events on swiper-wrapper) If enabled, then propagation of \"touchmove\" will be stopped Enable to release touch events on slider edge position (beginning, end) to allow for further page scrolling. This feature works only with \"touch\" events (and not pointer events), so it will work on iOS/Android devices and won't work on Windows devices with pointer events. Also parameter must be set to Force to always prevent default for ( ) event If enabled (by default) and navigation elements' parameters passed as a string (like ) then Swiper will look for such elements through child elements first. Applies for pagination, prev/next buttons and scrollbar elements Required for active slide detection when rendered on server-side and enabled history userAgent string. Required for browser/device detection when rendered on server-side Enables virtual slides functionality. Object with virtual slides parameters or boolean to enable with default settings. Enabled this option and swiper will be operated as usual except it will not move, real translate values on wrapper will not be set. Useful when you may need to create custom slide transition When enabled Swiper will be disabled and hide navigation buttons on case there are not enough slides for sliding. Enable this feature to calculate each slides progress and visibility (slides in viewport will have additional visible class) Swiper width (in px). Parameter allows to force Swiper width. Useful only if you initialize Swiper when it is hidden and in SSR and Test environments for correct Swiper initialization Setting this parameter will make Swiper not responsive By changing classes you will also need to change Swiper's CSS to reflect changed classes Enables zooming functionality. Object with zoom parameters or boolean to enable with default settings\n\nAfter we initialize Slider we have its initialized instance in variable (like variable in example above) with helpful methods and properties:\n\nSwiper comes with a bunch of useful events you can listen. Events can be assigned in two ways:\n\nPlease note, that keyword within event handler always points to Swiper instance\n\nEvent will fired right after initialization Event will be fired right before Swiper destroyed Event will fired right before initialization Event will be fired right before \"loop fix\" Event will be fired on breakpoint change Event will be fired when user click/tap on Swiper. Receives event as an arguments. Event will be fired on swiper destroy Event will be fired when user double click/tap on Swiper Event will be fired when user double tap on Swiper's container. Receives event as an arguments Event will be fired when Swiper goes from beginning or end position Note that with syntax it will work only in case you set parameter. Event will be fired when swiper is locked (when enabled) Event will be fired after \"loop fix\" Event will be fired on momentum bounce Event will be fired if observer is enabled and it detects DOM mutations Event will be fired on orientation change (e.g. landscape -> portrait) Event will be fired when Swiper progress is changed, as an arguments it receives progress that is always from 0 to 1 Event will be fired when Swiper reach its beginning (initial position) Event will be fired when Swiper reach last slide Event will be fired on window resize right before swiper's onresize manipulation Event will be fired everytime when swiper starts animation. Receives current transition duration (in ms) as an arguments Event will be fired when swiper's wrapper change its position. Receives current translate value as an arguments Event will be fired when currently active slide is changed Event will be fired after animation to other slide (next or previous). Event will be fired in the beginning of animation to other slide (next or previous). Same as \"slideChangeTransitionEnd\" but for \"forward\" direction only Same as \"slideChangeTransitionStart\" but for \"forward\" direction only Same as \"slideChangeTransitionEnd\" but for \"backward\" direction only Same as \"slideChangeTransitionStart\" but for \"backward\" direction only Event will be fired in the end of animation of resetting slide to current one Event will be fired in the beginning of animation of resetting slide to current one Event will be fired with first touch/drag move Event will be fired when user touch and move finger over Swiper and move it. Receives event as an arguments. Event will be fired when slides grid has changed Event will be fired when number of slides has changed Event will be fired after slides and their sizes are calculated and updated Event will be fired when snap grid has changed Event will be fired when user click/tap on Swiper. Receives event as an arguments. Event will be fired when Swiper goes to beginning or end position Event will be fired when user release Swiper. Receives event as an arguments. Event will be fired when user touch and move finger over Swiper. Receives event as an arguments. Event will be fired when user touch and move finger over Swiper in direction opposite to direction parameter. Receives event as an arguments. Event will be fired when user touch Swiper. Receives event as an arguments. Event will be fired after transition. Event will be fired in the beginning of transition. Event will be fired when swiper is unlocked (when enabled) Event will be fired after swiper.update() call\n\nManipulation module adds useful Swiper methods to manipulate slides. It makes sense to use it only with Swiper Core version, not intended to be uses with Swiper React or Vue.\n\nSwiper supports parallax transition effects for swiper/slides nested elements. There are two types of parallax elements supported:\n• Direct child elements of . Parallax effect for such elements will depend on total slider progress. Useful for parallax backgrounds\n• Slides child elements. Parallax effect for such elements will depend on slide progress\n\nTo enable parallax effects you need to init Swiper with passed parameter and add one of the following (or mix) attributes to required elements:\n• - enable transform-translate parallax transition. This attribute may accept:\n• - value in px (as for title, subtitle in example above) to move element depending on progress. In this case such element will be moved on ± this value in px depending on slide position (next or previous)\n• - (as for \"parallax-bg\") to move element depending on progress and on its size. In this case such element will be moved on ± this percentage of its size (width in horizontal direction, and height in vertical direction) depending on slide position (next or previous). So if element has 400px width and you specified data-swiper-parallax=\"50%\" then it will be moved on ± 200px\n• - same but for x-axis direction\n• - same but for y-axis direction\n• - scale ratio of the parallax element when it is in \"inactive\" (not on active slide) state\n• - opacity of the parallax element when it is in \"inactive\" (not on active slide) state\n\nSince version 9 Swiper doesn't have a specific lazy loading API, as it relies on native browser lazy loading feature. To use lazy loading, we just need to set on images and add preloader element:\n\nAs you see:\n• Add animated preloader spinner to slide which will be removed automatically after image loaded:\n\nOr white one for dark layout:\n\nBe sure to have the param set to in order for this to work.\n\nNote that should be set to in order to avoid seeing content behind or underneath.\n\nBe sure to have the param set to in order for this to work.\n\nBe sure to have the param set to in order for this to work.\n\nBe sure to have the param set to in order for this to work.\n\nBe sure to have the param set to in order for this to work.\n\nBe sure to have the param set to in order for this to work.\n\nIn addition to Controller component Swiper comes with Thumbs component that is designed to work with additional thumbs swiper in a more correct way than Controller which is used for syncing two swipers.\n\nSwiper supports zoom images functionality (similar to what you see on iOS when browsing single photo) where you can zoom-in image by pinch gesture and or by zoom-in/out by double tap on it. In this case, additional layout is required:\n• All \"zoomable\" images should be wrapped with the div with class.\n• By default it expects to zoom one of the , or element. If you want to make zoom on some other custom element, then just add class to this element. For example:\n• You can override parameter for specific slides by using attribute on zoom container.\n\nVirtual Slides module allows to keep just required amount of slides in DOM. It is very useful in terms in performance and memory issues if you have a lot of slides, especially slides with heavyweight DOM tree or images.\n\nNote that according to Virtual Slides realization it doesn't work with Grid module and\n\nSince version 9, Swiper virtual slides can work with slides originally rendered in DOM. On initialize it will remove them from DOM, cache and then re-use the ones which are required:\n\nHash navigation is intended to have a link to specific slide that allows to load page with specific slide opened.\n\nTo make it work, you need to enable it by passing parameter and adding slides hashes in attribute:\n\nYou have two options of making custom version of Swiper.\n\nIf you use bundler with JS modules support in your project you can import only the modules you need:\n\nThe following modules are exported:\n\nSwiper comes with gulp builder that allows to build custom library version where you may include only required modules. We need the following:\n• Now, we need to install required dependencies. Go to the folder with downloaded and unzipped Swiper repository and execute in terminal:\n• Now, we are ready to build custom version of Swiper:\n• That is all. Generated CSS and JS files and their minified versions will be available in folder.\n\nSwiper is fully typed, it exports and types:\n\nYou can also check auto generated TypeScript definitions explorer for all the types, options, properties and methods."
    }
]