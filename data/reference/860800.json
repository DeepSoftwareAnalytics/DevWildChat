[
    {
        "link": "https://developer.valvesoftware.com/wiki/Worldspawn_(GoldSrc)",
        "document": "Only works properly if game is using thedirectory. Otherwise, the music will start playing while the map is almost done loading, but will stop as soon as the map finishes loading."
    },
    {
        "link": "https://developer.valvesoftware.com/wiki/Worldspawn",
        "document": "is an entity available in all Source games. It (or just \"the world\") is the single entity that stores the noninteractive parts of a map, alongside some global configuration options. In other words:\n• Brushes (except those used by entities)\n• func_detail, and in some games func_ladder\n• There can be only one. (Since Hammer doesn't allow worldspawn to be created directly, it's very difficult for this rule to be broken.)\n\nBug: Related to this, do not clone any part of your world after selecting it via map properties. This will duplicate worldspawn, causing crashes. Deselecting after this however and cloning after deselecting will behave as normal.\n• Damage from the environment and suicide is ordinarily attributed to the world.\n• Constraints can be assigned to worldspawn by not specifying a name for their subject/target.\n\nBug: and entries in .\n\nHalf-Life: Source is one of the games that does have them, for example. Confirm: Which other games have them, or don't use this method in the first place? Crashes the game when enabled if the game tries to draw the title but does not includeandentries inis one of the games that does have them, for example.\n\nFix: and entries to . A proper fix in the code for your mod would be to edit 's Paint() function, to check m_iconTitleHalf and m_iconTitleLife not being NULL.\n\nNote: These two parameters might not appear if you have propper fgd in Hammer.\n\nMaximum number of env_projectedtexture entities that can be enabled at once. Default 8; set lower to improve performance if necessary. Warning: While this can be set higher than 8, doing so can be detrimental to performance. The number of seconds an arena mode map should last. (default: 900s (15 min))"
    },
    {
        "link": "https://developer.valvesoftware.com/wiki/Category:Half-Life_Entities",
        "document": "This is a list of entities in Half-Life and its expansions. Many entities also work in other GoldSrc games.\n\nTo add an entity to the list, put [[Category:Half-Life Entities]] somewhere on the entity's page. Alternatively, you can also use the template, which does that automatically."
    },
    {
        "link": "https://twhl.info/wiki/page/scripted_sequence",
        "document": "The point entity allows you to make a monster entity move to a specific location and/or perform a given animation.\n\n \n\n This entity is also the base of\n• Target (target) - The entity name to trigger after the scripted animation is performed (or, in case the \"Action Animation\" is not specified, after the monster moved to the script).\n• Delay before trigger (delay) - \"Target\" and \"KillTarget\" will be triggered this many seconds after the animation is performed.\n• KillTarget (killtarget) - When the sequence is completed, the entity that is specified in \"KillTarget\" will be removed from the game.\n• Name (targetname) - Name is a general attribute used to identify entities. If several scripts share the same name and their Move to Position is set to Walk or Run, the monsters will wait for each others movement before playing the action animation and finishing the sequence. This can be used for animation synchronization. It's recommended to avoid assigning the same name to scripts if such functionality is not needed.\n• Pitch Yaw Roll (Y Z X) (angles) - The monster will turn to face the given yaw angle before performing the animation. Pitch and roll are not used.\n• Target Monster (m_iszEntity) - The name of the monster entity that this sequence affects. You can also input a monster classname ( , for example). (Only one monster will be chosen to follow the sequence.)\n• Action Animation (m_iszPlay) - The name of the animation that will be performed by \"Target Monster\".\n• Idle Animation (m_iszIdle) - The name of an animation you want \"Target Monster\" to perform on a loop until the is triggered. See notes below for how this changes the usage of the entity.\n• Search Radius (m_flRadius) - If you input a monster classname into \"Target Monster\", the entity will pick a monster within this radius of the entity to follow the sequence. If none are within the radius, the first monster to enter the radius will follow the sequence.\n• Repeat Rate ms (m_flRepeat) - How often to check if a monster is within the search radius. A check will be made even if search radius is zero, so set this to a large value if it's not used.\n• Move to Position (m_fMoveTo) - Sets how (or if) the monster moves before performing the animation:\n• No (0) - The monster will not move or turn. It will perform the animation wherever it is.\n• Walk (1) - The monster will walk to the , then perform the animation.\n• Run (2) - The monster will run to the , then perform the animation.\n• Instantaneous (4) - The monster will instantly warp to the location of the and perform the animation.\n• No - Turn to Face (5) - The monster will not move, but will turn to the 's angle before performing the animation.\n• AI Schedule when done (m_iFinishSchedule) - Does nothing for but used by it's counterpart.\n• Repeatable (4) - If enabled, the sequence can be repeated more than once. Otherwise the entity will be removed once the sequence is complete.\n• Leave Corpse (8) - If enabled, the monster leave it's corpse instead of fading out. This is only noticeable in-between two when the monster is on a dying state.\n• No Interruptions (32) - If enabled, the sequence cannot be interrupted. The monster will ignore damage until the sequence is complete, as with the entity.\n• Override AI (64) - If enabled, the script will possess its target even when the monster is in the combat state at the moment of the call, as with the entity.\n• No Script Movement (128) - If enabled, when the sequence is completed, the monster will be placed back where the \"Action Animation\" started (if the animation would cause the monster to move). Opposing Force only:\n• No Reset Entity (256) - If enabled, the monster animation will not automatically reset (usually to idle animation) when the sequence is finished. This allows for smooth transitions between similar animations. Example where it's appropriate to use this flag: animations of Opposing Force human grunt.\n• You can use a model viewer to see the animations available to each monster. For a list of models corresponding to each monster, see Reference: Entities and their models.\n• Making use of the \"Idle Animation\" field will change how the entity is used. The monster will move at the start of the level (\"Walk\" and \"Run\" movement types will not function as intended) and then perform their idle animation on a loop. When the is triggered, the monster will perform their \"Action Animation\".\n• If using the \"Instantaneous\" movement type with no \"Idle Animation\", the script will freeze the monster after it is teleported. Trigger the script again to continue the script. The second trigger cannot be at the same time as the first trigger. However, 0.1 second delay is already enough.\n• If the script that features \"Idle Animation\" gets interrupted (e.g. by damage done to the possessed monster), the activation of the script via some trigger will make the monster play the \"Idle Animation\" again. This may lead to weird situations, like zombies or scientists returning to sitting animation again. To avoid this situation set the monster's Trigger Condition to \"Take Damage\" and set TriggerTarget to call the that would kill the trigger entity (e.g. ) which is supposed to fire the . Do not kill the itself as it might lead to crashes!\n• If the script has \"Idle Animation\" and \"Move to Position\" is set to \"No - Turn to Face\", the idle animation won't stop playing when the is triggered. Instead just put the angle you need in monster's properties.\n• Animations may have events attached to specific frames of the animation.\n• Some animations automatically kill the entity using event ID 1000 (fades out after animation). Others make the animation uninterruptible with event ID 1001.\n• Some of the scientist's animations have events that make them speak specific sentence files, eliminating the need for separate to be fired and timed to the .\n• Be aware that event ID 1003 in animations will try to trigger entities in your map. Check with Half-Life Asset Manager for such events in the animation, and avoid naming any entity in the map matching the value of event 1003s if such effect is not intended.\n• The monster who is still playing the dying animation can be possessed by a script. This can lead to weird situations when the monster who is supposed to be dead runs to the script spot and then fades away. The reason why this happens is the function which is used in and doesn't do the correct check. This is a flowchart to visualize this complicated entity.\n• Tutorial: Retina Scanners and Other NPC-Only Locked Doors – Usage of search radius Thepoint entity allows you to make a monster entity move to a specific location and/or perform a given animation.This entity is also the base of where some changes has been made to override AI related stuff.This is a flowchart to visualize this complicated entity. Click here for full view\n\nYou must log in to post a comment. You can login or register a new account."
    },
    {
        "link": "https://developer.valvesoftware.com/wiki/Scripted_sequence",
        "document": "is a point entity available in all Source games. It is used to make an NPC play scripted animations.\n\nA typically takes a Target NPC which can be set to either move to the sequence's position or play the sequence's animation at the NPC's current position. When the NPC is ready to begin the sequence, it will play the specified animation(s) in a special scripted state which may or may not be interrupted depending on the 's settings.\n\nTip: Multiple scripted sequences of the same name will frame-synchronize their animations once all the actors have moved to position. This allows tight interaction between actors (one actor grabbing another, hitting them, etc.)\n\nWhenever a plays with a valid Target NPC, it uses a special flow to make the NPC play its animations in specific, coordinated ways:\n• Unless the \"Start on Spawn\" flag ticked, the remains inert until it is triggered. It will remain inert until the input is received or it is used by a previous .\n• Upon being triggered, the will look for the nearest NPC specified in \"Target NPC\".\n• When a NPC is found, it will either move to the 's position or begin standing still depending on the \"Move to Position\" setting.\n• When the NPC reaches the , it will play the \"Pre-Action Idle Animation\" if it is set to wait (see below). It will play the animation until all conditions are satisfied. If the script is not set to wait for anything, it will skip this step.\n• If the has an Entry Animation, the NPC will play it. If the script does not have an entry animation, it will skip this step.\n• The NPC plays the Action Animation. If no action animation is specified in the script, it will skip this step.\n• If the has a Post-Action Idle Animation, the NPC will play it. If no post-action idle animation is specified in the script, it will skip this step. If the \"Loop in Post Idle\" spawnflag is set, the NPC will continue to play the post-action idle animation until the script is canceled.\n• If the has a Next Script, the NPC is handed to the target script and this process is repeated automatically. If not, the NPC returns to regular behavior.\n\nThere are a few external factors which can modify this flow:\n• If the sequence was triggered by the \"Start on Spawn\" flag or the input, the NPC will play the Pre-Action Idle Animation until the input was received. If was used to begin with, it will proceed as normal.\n• If the sequence shares its name with other sequences, it will wait for other NPCs to get into position before starting, playing the Pre-Action Idle Animation until all actors are in position. When the script has no remaining dependencies, it will proceed as normal.\n• If the Target NPC was asleep (via \"Sleep State\" or ) when it was grabbed, it will awaken automatically without firing .\n• If the Pre-Idle Idle Animation is the same as the Action Animation, the pre-action idle animation will freeze on its first frame, waiting for the script to start to play the full animation. [confirm]\n\nYou can use the model tab in the entity window.\n\nYou can use the Half-life Model Viewer tool to see all the available sequences(Animations) for the model you're using. You can find the application in the Source SDK.\n\nWhen you've launched the tool go to File and load the model you want. Then go to the Sequence tab and select an animation from the dropdown menu to get the model you've select to play that animation or sequence.\n\nWhat it looks like:\n• The npc_zombie_prone and npc_zombie_slump prefabs, providing examples of use.\n• Activity List - a list of activities for use with this entity.\n• falling headcrab tutorial - A tutorial for how to make a headcrab fall, using this entity.\n• Actbusy - An alternative to which doesn't involve setting a NPC in a scripted state."
    },
    {
        "link": "https://twhl.info/wiki/page/Tutorial%3A_Scripted_Sequences",
        "document": "\n• : \"The target of the trigger_once to start the sequence\".\n• : \"the name of your door\" so that it opens at the end of the animation.\n• : \"You can select how you want \"bob\" to approach the point where the aiscripted_sequence is.\n• : Similar to walk, but holds both arms in front of chest, shivering.\n• : Runs forward but holds both hands up in front of him, shaking his head like in 'No no no!!!' almost as though he is shaking something .\n• : Similar to run, but looking left/forward/left.\n• : Flinches, and steps back left, ducks and holds hands on head.\n• : Flinches and moves head backwards. Stands straight up, looks like he is headbanging.\n• : Same as laflinch but right arm.\n• : Hit in left leg, bends legs a little and reaches with left hand for left knee.\n• : Same as laflinch but right leg.\n• : Just stands there, both arms straight down, breathing.\n• : Stands and looks up then in front of him.\n• : Same as idle3 but looks down.\n• : Same as idle3 but looks right.\n• : Same as idle3 but looks left.\n• : Same as idle1 but bends legs a little one at a time.\n• : Starts crouched, hands on head and comes to stand.\n• : Start of crouch_idle but looks up then goes back to crouch_idle.\n• : Start of crouch_idle but moves elbows quickly. For some reason I have two crouch_idle3 in HLMV and they are slightly different.\n• : Bends knees and elbows and cowers right.\n• : Holds both fists in front of his face, screams, shakes fists rapidly and steps back.\n• : Steps back, both arms in front of his face to avoid attacker, but looks like he is pulling on something.\n• : Rubs his eyes with both hands.\n• : Uses left hand to pull needle from his coat pocket.\n• : Puts the needle back in his coat pocket.\n• : Shot, swings arms from left to right, head down and falls forward. remains dead.\n• : Drops to the floor right/forward on right side, remains dead.\n• : Is pushed back by the hit and falls on back. remains dead.\n• : Shot in stomach. collapses and drops to floor forward. remains dead.\n• : Lying on back. Use with Dead Scientist.\n• : Sitting on floor, back against the wall. remains dead.\n• : Sitting down on the floor, left leg resting on something, like a low table. Back against the wall.\n• : Lies with back on the floor, and left leg rests on a high table. Dead.\n• : Lies with stomach and right leg and right arm and head on table. Left leg and left arm hang down. Dead.\n• : Both hands move infront of his throat as if choking..\n• : Hands on Barnacle, hangs in the air, legs moving quickly.\n• : Switches on blower and holds hands below it to dry them. Great for turning a wheel type sequence.\n• : Places right foot on furniture and ties his right shoe.\n• : Bends over,presses some buttons, stand upright and looks at his work.\n• : Leans against furniture to look at something on it.\n• : Places left hand on chin and right hand under his left elbow.\n• : Looks up and looks from right to left, hands next to his body.\n• : Folds arms in front of his chest and looks straight ahead.\n• : Pulls money from his pocket, puts it into furniture, waits and then slams the machine with right fist.\n• : Reaches forward and pushes button at waist height with left hand.\n• : Stands there and moves hands as though in conversation .\n• : Grabs the retinal scanner and looks in.\n• : Stands straight up, looks forward, raises right hand and looks left.\n• : Same as talkleft, but moves hands more and looks right.\n• : Leans on furniture with his right hand and looks at something and shakes head.\n• : Standing, looks right over shoulder quickly.\n• : Sitting and looks right.\n• : Sitting, both arms work in front... doesn't look scared at all!.\n• : Sitting, looks at down then forward.\n• : Does the full CPR routine, listens to chest, and pumps away.\n• : Sitting on floor, pushed backwards then struggles and tries to get back up.\n• : Mmm, This has to be the weirdest animation amoungst the lot of them.\n• : Standing, arms slightly spread, and looks from left to right.\n• : Falls, grabs something, then falls again.\n• : Pulled into vent by the hands and dragged along.\n• : Right foot on wall, hands forward and then pulled into wall.\n• : Similar to ventpull1 but not pulled up.\n• : Lies on the floor and left arm hangs down, the start of the ventpull sequence.\n• : Sits on the floor, doing nothing.\n• : Similar to sitidle, starts by sitting,looks up and stands up.\n• : Stands, and presses some buttons with right hand, at waist height, very similar to push_button2.\n• : Standing, looking forward, hands at eye level as though he's looking trough bars.\n• : Hangs in air horizontal, moving arms and legs as though falling.\n• : Seems to be pushing a button at waist height..push_button sequence?\n• : Places arms above his head, and then unlocks a doorlock.\n• : Standing, looks around /above.\n• : Leans on a rail/gate, doing nothing, looks forward.\n• : Similar to handrailidle but looks at his right and stands up. Follows handrailidle.\n• : Hangs with both hands, moving his legs.\n• : Similar to hanging_idle but slips away and falls into the deep shaft. If you are using Hammer 3.5 you will get a box showing you the depth of the fall.\n• : Standing, is grabbed from behind, pulled back into a shaft and dies,\n• : Sitting on floor, looks at hand.\n• : Similar to c1a4_wounded_idle but looks up and talks a little then dies.\n• : I really don't know how you would incorperate this into a map....\n• : Reaches up, grabs and pulls arms to chest then dies.\n• : Hanging onto a rope or something and moving hips.\n• : Flung aside to the right.\n• : Standing with shotgun looking left and right\n• : Follows onguard. Makes the arm actions as though he is shooting at something drops the gun and then picks it up again.\n• : On hands and knees looking left and right.\n• : Kneels down to look at something.\n\nA lot of questions on the forums have been about specific scripting techniques. But I think the main thing everyone wanted to know, was how to get monsters to do what the mapper wanted them to do. I would like you to take the time to read the following before you go any further...Half-Life is full of scripts for most of the model class monsters, so why can't I get them to do what I want?That is because the animation tools in Half-Life were designed to enhance the game they were never designed to give you total flexibility as a post game mapper!. Having said that, there are ways to get your monsters to do things and the idea of this tutorial is to get aquatinted with the basics, so you can get an understanding of how theandwork. This guide is not written to enable you to make a brilliant, awe inspiring scripted event...I am going to add to this tutorial as we go along, I will try to include things that people want, but I don't want to cover ground that has been done by other sites, and to that end I will list those web sites that are worth a look for more information on scripting.The first part of this tutorial will be Getting Barney [bob] to open a door. I have built a simple room with a glass divider and two doors. I have placed a Barney on one side of the glass and anon the other side of the glass. I have also added anclose to the door. There is also another Barney [bill], but more about him later.I have used an aiscripted_sequence because I like them. The main difference between a scripted_sequence and an aiscripted_sequence is that no matter what happens, the \"aiscript\" will continue to run. You cannot distract Barney from doing what the script has called him to do, even if you kill him he will complete the script and then die.Ok, so what's with the settings?Give your Barney a. I called mineYou need a name so you can enter that as thein the scripted_sequence.Set up ato trigger the. Set it's target as the name of your aiscripted_sequence [in this case].The Door needs afor the aiscripted_sequence to target so that when \"bob\" finishes performing his script, it will open.The aiscripted_sequence for the opening door:came up with a good sugestion, mentioning thesettings of your aiscripted_sequence or scripted_sequence. These are important, you need the sequence to face in the direction that you want it to be performed. So in the example map, the scripted_sequence for the \"security door\" (not the one that opens) is set to 270 in the little compass, or 0 270 0 in the Pitch Yaw Roll (y Z X) property. The easiest way I have found to work out which way that really is, is to look at the2D view and have the compass pointing the way you want the script to be acted. It really is that simple. Some earlier versions of WorldCraft have trouble with the compass and so does Hammer 3.5. It pays to select another property and then check that the new compass bearing has been picked up by the property box in theproperty. The Default iswhich will leave the script acting to the left of the Hammer screen.Ok, that is all you need to use for this example. There are other properties and Flags, but they are not needed for what we want to do.The second scripted_sequence is adjacent the security door. The settings are similar, but I have added in a multimanager and a trigger auto, so that \"bob\" will knock on the security door with theanimation until the door opening script is triggered. Because the multimanager is looped, bob will return to knocking on the security door after opening the inital door for you.The multimanager in the example map has been looped [see SlayerA's Multimanager tutorial for more information]. The only other settings that need to be added is theFlag. Without it, Barney [bob] will only knock on the door once, regardless of what his idle animation is. The scripted sequence needs to know that the animation can be repeated, and that is why we check the flag. Adding the same animation in thefield does not automatically mean that Barney will perform that animation once he has completed the... It works with some animations for some monsters and not others. That is why there is a second Barney [bill]. He is there to show you what it would look like without the multimanager and trigger_auto and repeatable flag.An animation is a set function that the model will perform when it is called to do so. These animations are sometimes referred to as scripts. The best way to view the animations is with a model viewer like HLMV v1.25. You can cycle through each model and it's animations and then enter the name of the animation in thefield. In the example map I have usedandbut with the Barney model there are a few others you could try, likeor intropush. Animations with \"intro\" before them are specific to a cut scene of the game, and sometimes require furniture or other prefabs to work correctly.Just a few more things about scripted sequences, they should be triggered. That way you can control the sequence. If you add ato an aiscripted_sequence or a scripted_sequence, thewill still act on the animation when the map loads. You must add a trigger to get the sequence to run when you want it to run. Once they are triggered, whatever you put in theirfield will be activated at the end of the script. You can enhance this with Multimanagers and that will give you timing and flexibility.So that is the start of this tutorial...Not much is it? well it is a start. If you have set it up right, Barney will walk towards the security door and perform theanimation. If you move down the hallway you will trigger the door opening aiscripted sequence and Barney [bob] will stop his original animation and come over and open the door for you. He will then go back to hammering on the security door. Barney [bill] will knock once on the glass, and then stand around looking stupid.I will add to this in the coming weeks, but while your waiting, head on over to 69th Vlatitude, the spawning tank, Collective or Planethalflife for more specific tutorials. A google search for Half-Life scripted sequences brings up a heap of sites, and a lot of them cover stuff like zombies breaking through doors, retinal scanners and general movement.There are also some scripted example maps in the Map Vault under 'Example Maps' made by our members, check them out.. they are good.As I said in the beginning, the animations were designed to enhance the gameplay, not to let you build what you wanted. Cool looking scripts that didn't appear in the game usually come from someone doing a lot of coding, model manipulation and stuff we don't really cover at TWHL, unless one of the members has time to write the tutorial??.Ok, Just to add a bit of volume to this tutorial and to give you an idea of what we are talking about, here is a list of all the available animations for the scientist model. Some of them are only applicable to dead scientists and others are used in conjunction with furniture/architecture, like the opening scenes. The idea of this list is to give you something to play with, try them out...If you haven't viewed these sequences with HLMV or something similar, Then get with the program folks and get viewing!: I have not actually runthese animations through a scripted_sequence, but I have viewed them all with HLMV. Some of my previous testing indicated animations that looped, and others that didn't when you would expect them to be the other way around. Some of them just don't do what you would expect them to and some don't want to work at all but as I said before, they were not made so you could do cool animations and scripts... They are there for the original game.Scripted sequences available:As you can see by that little list for the scientist, I am reluctant to spend the next two years checking every animation and writing them down. Lame.. sure is, So If you're really interested, you can find the rest of the scripts at :Planet Halflife, The Half-Life Workshop \"Monsterscripts\" by Otis. Or by checking the old Wavelength site for a text list by Spider."
    },
    {
        "link": "https://valvedev.info/guides/entity-interactions-in-sources-input-output-system",
        "document": "In and GoldSrc, interaction between monsters, lights, choreography, sprites, and other entities was done through the - system. Under it, one entity would be given a name and another would be set to \"target\" that name; when the second entity was triggered, any entities with that name would activate.\n\nLet's start with a simple example to demonstrate. When a scientist dies, an should turn off. This is easy enough to do. The sprite is named by the mapper (say, ) and the scientist is set to target .\n\nThe limitations of the target system\n\nTargets works fine for basic interactions such as this, but the system is fraught with limitations. Consider the following:\n• What action exactly \"triggers\" an entity is ill-defined and vague. An NPC triggers on death, but the mapper has no idea of that unless they have prior knowledge or a reference is used. What action occurs when the targeted entity is activated is also often unclear.\n• Only one action can count as a trigger. The scientist can only trigger on death. If the mapper wants the sprite to turn off when the NPC's AI goes idle, code changes would be required, and dying would no longer trigger the sprite.\n• An entity can only target a single name. Consider the case of two sprite entities, and . The scientist can't target both directly. and GoldSrc both have different ways of dealing with this, through the and entities, respectively, but both solutions were incredibly clumsy. requires the mapper to set custom keyvalues, and another would have to exist for each new item to be targeted.\n• The available editors won't show what's connected to what. Nonexistent targets would appear as warnings in the compile log, but if the scientist was targeting, say, somewhere else on the map, the mapper would be left bewildered as to why the sprite wasn't turning off.\n\nWith Source, Valve removed the - system and replaced it with the input/output (I/O) system. Though it works under the same principle (an entity activates others when an action occurs), the I/O system is far more flexible and intuitive.\n• Output events are numerous for each entity and clearly labeled for when they occur.\n• The system is far more easily extendable, and as many output actions as a coder wants can be stacked onto a single entity.\n• Different outputs for as many targets as the mapper wants can be attached to a single action.\n• Hammer 4.0 is built from the ground up to show broken or misnamed interactions, and Hammer's Check for Problems dialog will pick them out before compile. All of the interactions an entity is involved in can be viewed in a neat, orderly grid at a distance.\n• Targets can be dynamically chosen through keywords; if an NPC walks into a trigger, the trigger can dynamically respond to hiim without his targetname being explicitly set in the map file.\n\nTo add a new output to an entity, go into the Object Properties dialog and switch to the Outputs tab. You should see a blank list with four dropdowns and five buttons. To add a new output, click the \"Add...\" button.\n\nThe first dropdown, \"My output named\", sets the action that will cause the entity to activate. For this entity, you can cause an event to occur when the player first enters the brush volume, leaves the brush volume, when the brush volume is triggered in general, and so on. For most purposes, works fine.\n\nThe second dropdown, \"Target entities named\", displays a list of valid targetnames in the map. This field supports wildcards and keywords, which we'll discuss later. If an invalid (nonexistent) entity name is put into this field, it'll be displayed in red. If the targetname is shared by multiple entities, the field will become bold.\n\nThe last two dropdowns, \"Via this input\" and \"With a parameter override of\", are the values the output entity will pass to the target entity. For metrocops, they can be told to bring out their stunsticks, or to holster a weapon, or have their squad name set. A door can be told to open, close, toggle state, or lock, or a new skin can be set. Physics constraints can be broken at any time using the I/O system. This is where the true beauty of the I/O system lies; a vast, complex amount of interactions can happen between entities, without compromise and without hassle. For now, though, we'll just make a metrocop go limp.\n\nOn the flipside, the Inputs tab of the Object Properties dialog displays a list of all the entities which target the one currently being viewed. The metrocop would have the output listed under his inputs. Nothing can be set here, but clicking the Mark button will bring you to the originating source. (The Mark button in the Outputs tab will also bring you to the entity being targeted.)\n\nNote the two icons at the bottom of each screenshot. The first icon (an arrow pointing to a ball) will appear if the current entity is being targeted, while the second icon (an arrow extending out from a ball) appears if the current entity is targeting another. If an output on the current entity is broken, the second icon will appear with a red line through it.\n\nThe I/O system allows an entity to target entities dynamically without needing to specify an actual target. This is done through keywords, which allow the entity to refer to an implicit, context-reliant target, or through wildcards, which can match multiple entities with similar names in one go. (These go in the \"Target entities named\" field in the Outputs tab.)\n\nTrailing asterisks ( ) can be used as wildcards to match a number of targetnames in one go. The use for this is limited to wildcards at the end of names; matches and , but not , and doesn't work at all.\n\nOn the other hand, keywords allows you to target players or NPCs in choreography and scripted sequences. This is useful if you have a specific entity in mind, but not a specific targetname to be able to target it with.\n\nThree in particular refer to different entities in an I/O chain. Consider the scenario of an antlion wandering into a that's set to fire a . When the thumper is activated, it can refer to the antlion with the keyword (refers to the entity that started the I/O chain), the trigger with the keyword (the previous entity in the I/O chain), or itself with the keyword.\n\nOther keywords exist for other functions: can be used to target the player in singleplayer (all players can be targeted in multiplayer using a simple targetname), picks the first player found in the same potentially visible set as the entity itself, and is exclusively meant for choreography and targets the entity the actor is looking at.\n\nThe final point of discussion, user inputs and outputs, are a bit more complicated and abstract than the normal actions in the I/O system, but are good to know nonetheless. These four outputs store an action and fire when the corresponding input is fired. Complex I/O chains can be simplified down using user inputs, and multiple entities with the same name can perform different actions when the one generic user input is fired.\n\nA good example is in , where four seagulls with the same name can be told to do four different things with only one input. A fires the input for the four gulls, and the corresponding output is fired for each, causing two to fly off to one spot of the map at different times, and another two to fly off to another spot, also at different times. Again, all done with a single input.\n\nThe I/O system makes complex choreography, scripted sequences, physics interactions, and other such functionality of the Source engine remarkably easy to carry out."
    }
]