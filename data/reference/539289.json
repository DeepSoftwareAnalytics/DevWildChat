[
    {
        "link": "https://php.net/manual/en/function.setcookie.php",
        "document": "Once the cookies have been set, they can be accessed on the next page load with the array. Cookie values may also exist in . » RFC 6265 provides the normative reference on how each setcookie() parameter is interpreted. The value of the cookie. This value is stored on the clients computer; do not store sensitive information. Assuming the is , this value is retrieved through The time the cookie expires. This is a Unix timestamp so is in number of seconds since the epoch. One way to set this is by adding the number of seconds before the cookie should expire to the result of calling time(). For instance, will set the cookie to expire in 30 days. Another option is to use the mktime() function. If set to , or omitted, the cookie will expire at the end of the session (when the browser closes). You may notice the parameter takes on a Unix timestamp, as opposed to the date format , this is because PHP does this conversion internally. The path on the server in which the cookie will be available on. If set to , the cookie will be available within the entire . If set to , the cookie will only be available within the directory and all sub-directories such as of . The default value is the current directory that the cookie is being set in. The (sub)domain that the cookie is available to. Setting this to a subdomain (such as ) will make the cookie available to that subdomain and all other sub-domains of it (i.e. w2.www.example.com). To make the cookie available to the whole domain (including all subdomains of it), simply set the value to the domain name ( , in this case). Older browsers still implementing the deprecated » RFC 2109 may require a leading to match all subdomains. Indicates that the cookie should only be transmitted over a secure HTTPS connection from the client. When set to , the cookie will only be set if a secure connection exists. On the server-side, it's on the programmer to send this kind of cookie only on secure connection (e.g. with respect to ). When the cookie will be made accessible only through the HTTP protocol. This means that the cookie won't be accessible by scripting languages, such as JavaScript. It has been suggested that this setting can effectively help to reduce identity theft through XSS attacks (although it is not supported by all browsers), but that claim is often disputed. or An associative array which may have any of the keys , , , , and . If any other key is present an error of level is generated. The values have the same meaning as described for the parameters with the same name. The value of the element should be either , or . If any of the allowed options are not given, their default values are the same as the default values of the explicit parameters. If the element is omitted, no SameSite cookie attribute is set. To set a cookie that includes attributes that aren't among the keys listed, use header(). If output exists prior to calling this function, setcookie() will fail and return . If setcookie() successfully runs, it will return . This does not indicate whether the user accepted the cookie. The date format of the cookie is now ; previously it was . An alternative signature supporting an array has been added. This signature supports also setting of the SameSite cookie attribute. The following examples demonstrate some ways to send cookies. 'something from somewhere' Note that the value portion of the cookie will automatically be urlencoded when you send the cookie, and when it is received, it is automatically decoded and assigned to a variable by the same name as the cookie name. If you don't want this, you can use setrawcookie() instead. To see the contents of our test cookie in a script, simply use one of the following examples: // Another way to debug/test is to view all cookies\n\n When deleting a cookie you should assure that the expiration date is in the past, to trigger the removal mechanism in your browser. Examples follow how to delete cookies sent in previous example: // set the expiration date to one hour ago\n\n You may also set array cookies by using array notation in the cookie name. This has the effect of setting as many cookies as you have array elements, but when the cookie is received by your script, the values are all placed in an array with the cookie's name: // after the page reloads, print them out\n\n The above example will output: three : cookiethree two : cookietwo one : cookieone Note: Using separator characters such as and as part of the cookie name is not compliant to RFC 6265, section 4, but supposed to be supported by user agents according to RFC 6265, section 5. You can use output buffering to send output prior to the call of this function, with the overhead of all of your output to the browser being buffered in the server until you send it. You can do this by calling ob_start() and ob_end_flush() in your script, or setting the configuration directive on in your or server configuration files.\n• Cookies will not become visible until the next loading of a page that the cookie should be visible for. To test if a cookie was successfully set, check for the cookie on a next loading page before the cookie expires. Expire time is set via the parameter. A nice way to debug the existence of cookies is by simply calling .\n• Cookies must be deleted with the same parameters as they were set with. If the argument is an empty string, and all other arguments match a previous call to , then the cookie with the specified name will be deleted from the remote client. This is internally achieved by setting value to and expiration time in the past.\n• will try to delete the cookie, you should not use boolean values. Instead, use 0 for and 1 for . Because setting a cookie with a value ofwill try to delete the cookie, you should not use boolean values. Instead, use 0 forand 1 for\n• to set one cookie with multiple names and values. It is not recommended to use for this purpose, because it can result in security holes. Cookies names can be set as array names and will be available to your PHP scripts as arrays but separate cookies are stored on the user's system. Considerto set one cookie with multiple names and values. It is not recommended to usefor this purpose, because it can result in security holes. Multiple calls to setcookie() are performed in the order called.\n• None - Send a cookie without urlencoding the cookie value setrawcookie() - Send a cookie without urlencoding the cookie value"
    },
    {
        "link": "https://w3schools.com/php/func_network_setcookie.asp",
        "document": "The following example creates a cookie named \"user\" with the value \"John Doe\". The cookie will expire after 30 days (86400 * 30). The \"/\" means that the cookie is available in entire website (otherwise, select the directory you prefer). We then retrieve the value of the cookie \"user\" (using the global variable $_COOKIE). We also use the isset() function to find out if the cookie is set: <!DOCTYPE html>\n\n<?php\n\n$cookie_name = \"user\";\n\n$cookie_value = \"John Doe\";\n\nsetcookie($cookie_name, $cookie_value, time() + (86400 * 30), \"/\"); // 86400 = 1 day\n\n?>\n\n<html>\n\n<body>\n\n\n\n<?php\n\nif(!isset($_COOKIE[$cookie_name])) {\n\n echo \"Cookie named '\" . $cookie_name . \"' is not set!\";\n\n} else {\n\n echo \"Cookie '\" . $cookie_name . \"' is set!<br>\";\n\n echo \"Value is: \" . $_COOKIE[$cookie_name];\n\n}\n\n?>\n\n\n\n</body>\n\n</html> Try it Yourself »\n\nThe setcookie() function defines a cookie to be sent along with the rest of the HTTP headers.\n\nA cookie is often used to identify a user. A cookie is a small file that the server embeds on the user's computer. Each time the same computer requests a page with a browser, it will send the cookie too. With PHP, you can both create and retrieve cookie values.\n\nThe name of the cookie is automatically assigned to a variable of the same name. For example, if a cookie was sent with the name \"user\", a variable is automatically created called $user, containing the cookie value.\n\nNote: The setcookie() function must appear BEFORE the <html> tag.\n\nNote: The value of the cookie is automatically URLencoded when sending the cookie, and automatically decoded when received (to prevent URLencoding, use setrawcookie() instead).\n\n<?php\n\n$value = \"Hello world!\";\n\n\n\n// cookie will expire when the browser close\n\nsetcookie(\"myCookie\", $value);\n\n\n\n// cookie will expire in 1 hour\n\nsetcookie(\"myCookie\", $value, time() + 3600);\n\n\n\n// cookie will expire in 1 hour, and will only be available\n\n// within the php directory + all sub-directories of php\n\nsetcookie(\"myCookie\", $value, time() + 3600, \"/php/\");\n\n?> \n\n<html>\n\n<body>\n\n\n\n...some code...\n\n \n\n</body>\n\n</html> Try it Yourself »"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-use-setcookie-function-in-php",
        "document": "A cookie is often a small file that is embedded by the server from which the user has visited or is getting a response. Each time the computer requests a page within a browser, it will send a cookie. Using PHP we can do both create and retrieve cookie values.\n\nA variable is automatically created with the same name that is of the cookie. For example, if a cookie was sent with the name “client”, a variable of name “client” is automatically created containing the cookie i.e $client. Cookies are sent along with the HTTP headers. Like other headers, cookies should be sent before any output from your script.\n\nCreate Cookie: The setcookie() function is used to create a cookie. The setcookie() function defines a cookie to be sent along with other HTTP headers. The setcookie() function should be appeared before the <html> and <head> tag.\n• name: It is required. It specifies the name of the cookie to be sent.\n• value: It is optional. It specifies the value of the cookie to be sent.\n• expire: It is optional. It specifies when the cookie will expire. It has a default value of 0, which determines that the cookie will expire on the closing session (closing the browser).\n• path: It is optional. It specifies the server path of the cookie. Its default value is the current directory that the cookie is being set in.\n• domain: It is optional. It specifies the domain name of the cookie. For making the cookie available on all subdomains of “example.com”, set it to “example.com”.\n• secure: It is optional. It specifies whether cookies should be only transmitted over a secure HTTPS connection. The default value is “false” (cookie will set on any connection).\n• httponly: It is optional. If set to TRUE, the cookie will be accessible only through the HTTP protocol. Default is FALSE.\n\nExample 2: In this example, we are deleting the cookie name “check”."
    },
    {
        "link": "https://clouddevs.com/php/setcookie-function",
        "document": "When it comes to building dynamic and interactive web applications, managing user sessions and storing user preferences are crucial aspects. PHP, as a widely used server-side scripting language, offers a range of functions to handle these tasks effectively. One such function is setcookie(), which allows developers to set cookies on the client’s browser. In this guide, we will delve into the details of PHP’s setcookie() function, its applications, and best practices to leverage its potential for enhancing your web applications.\n\nBefore we dive into the specifics of setcookie(), it’s essential to understand what cookies are and why they are useful. Cookies are small pieces of data that a web server can send to a user’s browser. These cookies are then stored on the user’s computer and can be accessed by the server on subsequent requests. Cookies are commonly used for various purposes, such as session management, user authentication, and storing user preferences.\n\nThe setcookie() function in PHP enables developers to set cookies with various parameters. Let’s explore the basic syntax of the function:\n• None name: The name of the cookie.\n• None value: The value to be stored in the cookie.\n• None expire: The expiration time of the cookie (in Unix timestamp format).\n• None path: The path on the server where the cookie is available.\n• None domain: The domain associated with the cookie.\n• None secure: If true, the cookie should only be transmitted over secure HTTPS connections.\n• None httponly: If true, the cookie cannot be accessed through JavaScript.\n\nLet’s start with a simple example of setting a cookie using the setcookie() function:\n\nIn this example, we’ve set a cookie named “user” with the value “John.” The cookie will expire in one hour and is accessible across the entire domain.\n\nOne of the most common applications of cookies is managing user sessions. Cookies can be used to maintain user sessions and keep users logged in across different pages of a website. Let’s see how the setcookie() function can be used for session management:\n\nIn this example, we’ve used the session_start() function to initiate a session. Then, we set a cookie named “sessionID” containing the user’s ID, which can be used to identify the session on subsequent requests. This enables the user to stay logged in for the specified duration.\n\nCookies can also be employed to enhance user experience by storing user preferences or settings. For instance, consider a website where users can customize the color theme. Cookies can be used to remember the chosen theme and apply it consistently. Here’s how you can implement this:\n\nIn this example, the chosen theme is stored in a cookie named “theme.” The cookie will expire in one week, ensuring that the user’s preferred theme persists across visits.\n\n6. Best Practices for Using setcookie():\n\nWhile setcookie() offers great flexibility, it’s essential to follow best practices to ensure proper functionality and security:\n• None Sanitize Data: Always sanitize user input before using it in cookies to prevent potential security vulnerabilities.\n• None Use HTTPS: When dealing with sensitive information, set the “secure” parameter to true, ensuring the cookie is transmitted only over secure connections.\n• None Limit Sensitive Data: Avoid storing sensitive information like passwords in cookies. Instead, store references or tokens and validate them on the server side.\n• None Be Mindful of Expiry: Set appropriate expiry times for cookies. Use shorter expiry times for sensitive data and longer ones for user preferences.\n• None Clear Unused Cookies: Regularly clean up cookies that are no longer necessary to prevent clutter and potential privacy concerns.\n\nPHP’s setcookie() function is a powerful tool for managing user sessions, storing preferences, and enhancing the user experience in web applications. By understanding its parameters and best practices, you can leverage cookies effectively to create more interactive and personalized websites. Whether you’re building an e-commerce platform, a social networking site, or a content-based app, the setcookie() function can play a pivotal role in providing a seamless and customized user experience. Remember to implement security measures and adhere to best practices to ensure that your cookie-based functionalities are robust and secure."
    },
    {
        "link": "https://stackoverflow.com/questions/16972148/setting-cookie-using-headerset-cookie-vs-setcookie-function",
        "document": "I'm refactoring some code and found something I've never seen. the function is used for user to set cookie when user logs in:\n\nnow that I've been assigned to refactor code I'm planning to use function which essentially does same thing according to php.net.\n\nMy question is: is there any difference between two and which one should I use?\n\nNOTE: this code was written long time ago so I'm assuming that at that time didnt exist?"
    },
    {
        "link": "https://stackoverflow.com/questions/47323205/unable-to-retrieve-post-variable-in-php",
        "document": "If you get the file name in your custom php controller the you can use\n\nor i changed the some code in above mentioed and add a text filed to enter a phone number and the selected file moved to the taget with the value enterd in the text field with name phone can you check is it usefull for you .\n\ncreate a folder in the root with name \"uploads\" and give full permison"
    },
    {
        "link": "https://stackoverflow.com/questions/37604467/php-request-method-as-basic-error-handling-for-html-form",
        "document": "I am using input from a html form to output arrays containing the value inputted. I would like to carry out basic error handling that states what fields were left empty, a error message if no fields are inputted and then if all of the fields are inputed. However, my code isn't doing as I would like. It works elsewhere in my code but I can not figure out the difference.\n\nEDIT: I am getting \"Notice: Undefined index: ageChoice\" and \"Notice: Undefined index: colourChoice\""
    },
    {
        "link": "https://wordpress.stackexchange.com/questions/360588/submitting-form-via-admin-post-php-and-handling-errors",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://w3schools.com/php/php_forms.asp",
        "document": "The PHP superglobals and are used to collect form-data.\n\nThe example below displays a simple HTML form with two input fields and a submit button:\n\nWhen the user fills out the form above and clicks the submit button, the form data is sent for processing to a PHP file named \"welcome.php\". The form data is sent with the HTTP POST method.\n\nTo display the submitted data you could simply echo all the variables.\n\nThe \"welcome.php\" looks like this:\n\nThe output could be something like this:\n\nThe same result could also be achieved using the HTTP GET method:\n\nand \"welcome_get.php\" looks like this:\n\nThe code above is quite simple, and it does not include any validation.\n\nYou need to validate form data to protect your script from malicious code.\n\nThis page does not contain any form validation, it just shows how you can send and retrieve form data. However, the next pages will show how to process PHP forms with security in mind! Proper validation of form data is important to protect your form from hackers and spammers!\n\nBoth GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs, where keys are the names of the form controls and values are the input data from the user.\n\nBoth GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always accessible, regardless of scope - and you can access them from any function, class or file without having to do anything special.\n\n$_GET is an array of variables passed to the current script via the URL parameters.\n\n$_POST is an array of variables passed to the current script via the HTTP POST method.\n\nWhen to use GET?\n\nInformation sent from a form with the GET method is visible to everyone (all variable names and values are displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. This can be useful in some cases.\n\nGET may be used for sending non-sensitive data.\n\nNote: GET should NEVER be used for sending passwords or other sensitive information!\n\nWhen to use POST?\n\nInformation sent from a form with the POST method is invisible to others (all names/values are embedded within the body of the HTTP request) and has no limits on the amount of information to send.\n\nMoreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.\n\nHowever, because the variables are not displayed in the URL, it is not possible to bookmark the page.\n\nNext, lets see how we can process PHP forms the secure way!"
    },
    {
        "link": "https://php.net/manual/en/reserved.variables.post.php",
        "document": "james dot ellis at gmail dot com ¶ One feature of PHP's processing of POST and GET variables is that it automatically decodes indexed form variable names.\n\n\n\nI've seem innumerable projects that jump through extra & un-needed processing hoops to decode variables when PHP does it all for you:\n\n\n\nExample pseudo code:\n\n\n\nMany web sites do this:\n\n\n\n<form ....>\n\n<input name=\"person_0_first_name\" value=\"john\" />\n\n<input name=\"person_0_last_name\" value=\"smith\" />\n\n...\n\n\n\n<input name=\"person_1_first_name\" value=\"jane\" />\n\n<input name=\"person_1_last_name\" value=\"jones\" />\n\n</form>\n\n\n\nWhen they could do this:\n\n\n\n<form ....>\n\n<input name=\"person[0][first_name]\" value=\"john\" />\n\n<input name=\"person[0][last_name]\" value=\"smith\" />\n\n...\n\n<input name=\"person[1][first_name]\" value=\"jane\" />\n\n<input name=\"person[1][last_name]\" value=\"jones\" />\n\n</form>\n\n\n\nWith the first example you'd have to do string parsing / regexes to get the correct values out so they can be married with other data in your app... whereas with the second example.. you will end up with something like:\n\n\n\nThis is invaluable when you want to link various posted form data to other hashes on the server side, when you need to store posted data in separate \"compartment\" arrays or when you want to link your POSTed data into different record handlers in various Frameworks.\n\n\n\nRemember also that using [] as in index will cause a sequential numeric array to be created once the data is posted, so sometimes it's better to define your indexes explicitly.\n\nphp (at) vxvr /dot de ¶ If you want to receive application/json post data in your script you can not use $_POST. $_POST does only handle form data.\n\nRead from php://input instead. You can use fopen or file_get_contents.\n\n\n\nExample:\n\n\n\n\n\ndarren_wheatley at hotmail dot com ¶ I know it's a pretty basic thing but I had issues trying to access the $_POST variable on a form submission from my HTML page. It took me ages to work out and I couldn't find the help I needed in google. Hence this post.\n\n\n\nMake sure your input items have the NAME attribute. The id attribute is not enough! The name attribute on your input controls is what $_POST uses to index the data and therefore show the results.\n\nwoodhavenbp at yahoo dot com ¶ There's an earlier note here about correctly referencing elements in $_POST which is accurate. $_POST is an associative array indexed by form element NAMES, not IDs. One way to think of it is like this: element \"id=\" is for CSS, while element \"name=\" is for PHP. If you are referring to your element ID in the POST array, it won't work. You must assign a name attribute to your element to reference it correctly in the POST array. These two attributes can be the same for simplicity, i.e., \n\n<input type=\"text\" id=\"txtForm\" name=\"txtForm\">...</input>\n\nCXJ ¶ Note that $_POST is NOT set for all HTTP POST operations, but only for specific types of POST operations. I have not been able to find documentation, but here's what I've found so far.\n\n\n\n$_POST _is_ set for:\n\n\n\nContent-Type: application/x-www-form-urlencoded\n\n\n\nIn other words, for standard web forms.\n\n\n\n$_POST is NOT set for:\n\n\n\nContent-Type:text/xml\n\n\n\nA type used for a generic HTTP POST operation.\n\npaul at youngish dot homelinux^org ¶ For a page with multiple forms here is one way of processing the different POST values that you may receive. This code is good for when you have distinct forms on a page. Adding another form only requires an extra entry in the array and switch statements. \n\n\n\n \"\\$_POST contained more than one post identifier: \" \"\\$_POST did not contain a known post identifier.\""
    }
]