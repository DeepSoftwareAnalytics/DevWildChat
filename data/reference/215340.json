[
    {
        "link": "https://stackoverflow.com/questions/56132439/simplest-way-to-group-items-to-array-list",
        "document": "I am trying to get a response from another API to then group the matching values to send to another API into a single array when matching. I figure one way would be to rebuild the entire object by doing a foreach on each item but I am looking for a simpler way (possibly through Linq?) to be able to group this data.\n\nDisplaying example in JSON for ease of reading, ultimately would instead be c# objects\n\nA bit more info as well for output class:"
    },
    {
        "link": "https://stackoverflow.com/questions/19812988/how-to-get-a-list-of-the-grouped-values-in-linq-groupby",
        "document": "Linq newbie here, struggling with my first query.\n\nI have a list of objects of type which represents a keyword, and the ID of the database record to which the keyword was applied.\n\nWhat I want is a collection of all keywords, with a list of the to which each keyword was applied.\n\nI tried using Linq to get it into a new object. I only managed to get the distinct keywords.\n\nThe problem is that I can't seem to get the values of in any way. is of the type and by documentation, it only has the property , but not even the property . All the examples I have seen on the Internet for just tell me to select itself, but the result of\n\nis not what I want.\n\nAny try to get something out of g fails with the error message System.Linq.IGropuing<string, UserQuery.KeywordInstance> does not have a definition for [whatever I tried] .\n\nWhat am I doing wrong here?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/linq/standard-query-operators/grouping-data",
        "document": "Grouping refers to the operation of putting data into groups so that the elements in each group share a common attribute. The following illustration shows the results of grouping a sequence of characters. The key for each group is the character.\n\nThe standard query operator methods that group data elements are listed in the following table.\n\nThe following code example uses the clause to group integers in a list according to whether they're even or odd.\n\nThe equivalent query using method syntax is shown in the following code:\n\nGrouping is one of the most powerful capabilities of LINQ. The following examples show how to group data in various ways:\n• By the first letter of a string property.\n• By Boolean predicate or other expression.\n\nIn addition, the last two queries project their results into a new anonymous type that contains only the student's first and family name. For more information, see the group clause.\n\nThe following example shows how to group source elements by using a single property of the element as the group key. The key is an , the student's year in school. The grouping operation uses the default equality comparer for the type.\n\nThe equivalent code using method syntax is shown in the following example:\n\nGroup by value example\n\nThe following example shows how to group source elements by using something other than a property of the object for the group key. In this example, the key is the first letter of the student's family name.\n\nThe equivalent code using method syntax is shown in the following example:\n\nThe following example shows how to group source elements by using a numeric range as a group key. The query then projects the results into an anonymous type that contains only the first and family name and the percentile range to which the student belongs. An anonymous type is used because it isn't necessary to use the complete object to display the results. is a helper function that calculates a percentile based on the student's average score. The method returns an integer between 0 and 10.\n\nNested foreach required to iterate over groups and group items. The equivalent code using method syntax is shown in the following example:\n\nThe following example shows how to group source elements by using a Boolean comparison expression. In this example, the Boolean expression tests whether a student's average exam score is greater than 75. As in previous examples, the results are projected into an anonymous type because the complete source element isn't needed. The properties in the anonymous type become properties on the member.\n\nThe equivalent query using method syntax is shown in the following code:\n\nThe following example shows how to use an anonymous type to encapsulate a key that contains multiple values. In this example, the first key value is the first letter of the student's family name. The second key value is a Boolean that specifies whether the student scored over 85 on the first exam. You can order the groups by any property in the key.\n\nThe equivalent query using method syntax is shown in the following code:\n\nThe following example shows how to create nested groups in a LINQ query expression. Each group that is created according to student year or grade level is then further subdivided into groups based on the individuals' names.\n\nThree nested loops are required to iterate over the inner elements of a nested group. \n\n(Hover the mouse cursor over the iteration variables, , , and to see their actual type.)\n\nThe equivalent query using method syntax is shown in the following code:\n\nThis article shows two different ways to create a query that orders the source data into groups, and then performs a subquery over each group individually. The basic technique in each example is to group the source elements by using a continuation named , and then generating a new subquery against . This subquery is run against each new group created by the outer query. In this particular example the final output isn't a group, but a flat sequence of anonymous types.\n\nFor more information about how to group, see group clause. For more information about continuations, see into. The following example uses an in-memory data structure as the data source, but the same principles apply for any kind of LINQ data source.\n\nThe query in the preceding snippet can also be written using method syntax. The following code snippet has a semantically equivalent query written using method syntax.\n• How to split a file into many files by using groups (LINQ) (C#)"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/linq/how-to-query-collections",
        "document": "Most collections model a sequence of elements. You can use LINQ to query any collection type. Other LINQ methods find elements in a collection, compute values from the elements in a collection, or modify the collection or its elements. These examples help you learn about LINQ methods and how you can use them with your collections, or other data sources.\n\nHow to find the set difference between two lists\n\nThis example shows how to use LINQ to compare two lists of strings and output those lines that are in first collection, but not in the second. The first collection of names is stored in the file names1.txt:\n\nThe second collection of names is stored in the file names2.txt. Some names appear in both sequences.\n\nThe following code shows how you can use the Enumerable.Except method to find elements in the first list that aren't in the second list:\n\nSome types of query operations, such as Except, Distinct, Union, and Concat, can only be expressed in method-based syntax.\n\nHow to combine and compare string collections\n\nThis example shows how to merge files that contain lines of text and then sort the results. Specifically, it shows how to perform a concatenation, a union, and an intersection on the two sets of text lines. It uses the same two text files shows in the preceding example. The code shows examples of the Enumerable.Concat, Enumerable.Union, and Enumerable.Except.\n\nHow to populate object collections from multiple sources\n\nThis example shows how to merge data from different sources into a sequence of new types.\n\nDon't try to join in-memory data or data in the file system with data that is still in a database. Such cross-domain joins can yield undefined results because of different ways in which join operations might be defined for database queries and other types of sources. Additionally, there is a risk that such an operation could cause an out-of-memory exception if the amount of data in the database is large enough. To join data from a database to in-memory data, first call or on the database query, and then perform the join on the returned collection.\n\nThis example uses two files. The first, names.csv, contains student names and student IDs.\n\nThe second, scores.csv, contains student IDs in the first column, followed by exam scores.\n\nThe following example shows how to use a named record to store merged data from two in-memory collections of strings that simulate spreadsheet data in .csv format. The ID is used as the key to map students to their scores.\n\nIn the select clause, each new object is initialized from the data in the two sources.\n\nIf you don't have to store the results of a query, tuples or anonymous types can be more convenient than named types. The following example executes the same task as the previous example, but uses tuples instead of named types:\n\nHow to query an ArrayList with LINQ\n\nWhen using LINQ to query nongeneric IEnumerable collections such as ArrayList, you must explicitly declare the type of the range variable to reflect the specific type of the objects in the collection. If you have an ArrayList of objects, your from clause should look like this:\n\nBy specifying the type of the range variable, you're casting each item in the ArrayList to a .\n\nThe use of an explicitly typed range variable in a query expression is equivalent to calling the Cast method. Cast throws an exception if the specified cast can't be performed. Cast and OfType are the two Standard Query Operator methods that operate on nongeneric IEnumerable types. For more information, see Type Relationships in LINQ Query Operations. The following example shows a query over an ArrayList."
    },
    {
        "link": "https://programmingadvices.com/courses/2444236/lectures/51973387",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/5072608/use-of-linq-and-arraylist",
        "document": "In the following code:\n\nWhat is the for? I know creates a type-safe collection, and is deprecated.\n\nI've got a friend who says he needs the combined with . I'm trying to understand why, but I can't see why is needed."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/concepts/linq/how-to-query-an-arraylist-with-linq",
        "document": "How to: Query an ArrayList with LINQ (Visual Basic)\n\nWhen using LINQ to query non-generic IEnumerable collections such as ArrayList, you must explicitly declare the type of the range variable to reflect the specific type of the objects in the collection. For example, if you have an ArrayList of objects, your From Clause should look like this:\n\nBy specifying the type of the range variable, you are casting each item in the ArrayList to a .\n\nThe use of an explicitly typed range variable in a query expression is equivalent to calling the Cast method. Cast throws an exception if the specified cast cannot be performed. Cast and OfType are the two Standard Query Operator methods that operate on non-generic IEnumerable types. In Visual Basic, you must explicitly call the Cast method on the data source to ensure a specific range variable type. For more information, see Type Relationships in Query Operations (Visual Basic).\n\nThe following example shows a simple query over an ArrayList. Note that this example uses object initializers when the code calls the Add method, but this is not a requirement."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/csharp/linq/how-to-query-collections",
        "document": "Most collections model a sequence of elements. You can use LINQ to query any collection type. Other LINQ methods find elements in a collection, compute values from the elements in a collection, or modify the collection or its elements. These examples help you learn about LINQ methods and how you can use them with your collections, or other data sources.\n\nHow to find the set difference between two lists\n\nThis example shows how to use LINQ to compare two lists of strings and output those lines that are in first collection, but not in the second. The first collection of names is stored in the file names1.txt:\n\nThe second collection of names is stored in the file names2.txt. Some names appear in both sequences.\n\nThe following code shows how you can use the Enumerable.Except method to find elements in the first list that aren't in the second list:\n\nSome types of query operations, such as Except, Distinct, Union, and Concat, can only be expressed in method-based syntax.\n\nHow to combine and compare string collections\n\nThis example shows how to merge files that contain lines of text and then sort the results. Specifically, it shows how to perform a concatenation, a union, and an intersection on the two sets of text lines. It uses the same two text files shows in the preceding example. The code shows examples of the Enumerable.Concat, Enumerable.Union, and Enumerable.Except.\n\nHow to populate object collections from multiple sources\n\nThis example shows how to merge data from different sources into a sequence of new types.\n\nDon't try to join in-memory data or data in the file system with data that is still in a database. Such cross-domain joins can yield undefined results because of different ways in which join operations might be defined for database queries and other types of sources. Additionally, there is a risk that such an operation could cause an out-of-memory exception if the amount of data in the database is large enough. To join data from a database to in-memory data, first call or on the database query, and then perform the join on the returned collection.\n\nThis example uses two files. The first, names.csv, contains student names and student IDs.\n\nThe second, scores.csv, contains student IDs in the first column, followed by exam scores.\n\nThe following example shows how to use a named record to store merged data from two in-memory collections of strings that simulate spreadsheet data in .csv format. The ID is used as the key to map students to their scores.\n\nIn the select clause, each new object is initialized from the data in the two sources.\n\nIf you don't have to store the results of a query, tuples or anonymous types can be more convenient than named types. The following example executes the same task as the previous example, but uses tuples instead of named types:\n\nHow to query an ArrayList with LINQ\n\nWhen using LINQ to query nongeneric IEnumerable collections such as ArrayList, you must explicitly declare the type of the range variable to reflect the specific type of the objects in the collection. If you have an ArrayList of objects, your from clause should look like this:\n\nBy specifying the type of the range variable, you're casting each item in the ArrayList to a .\n\nThe use of an explicitly typed range variable in a query expression is equivalent to calling the Cast method. Cast throws an exception if the specified cast can't be performed. Cast and OfType are the two Standard Query Operator methods that operate on nongeneric IEnumerable types. For more information, see Type Relationships in LINQ Query Operations. The following example shows a query over an ArrayList."
    },
    {
        "link": "https://stackoverflow.com/questions/58272912/iterate-over-array-list-inside-a-linq-query",
        "document": "I'm trying to use this linq query to check if certain object's netIds are null, blank, or otherwise empty.\n\nWiFiBlock and BluetoothBlock are both just single objects so the above should work.\n\nHowever, NetworkBlock is an array of objects so I need to figure out how to iterate through each object in NetworkBlock and check it's netId.\n\nIs it possible to do something like that inside a linq query?"
    },
    {
        "link": "https://tutorialsteacher.com/csharp/csharp-arraylist",
        "document": "In C#, the is a non-generic collection of objects whose size increases dynamically. It is the same as Array except that its size increases dynamically.\n\nAn can be used to add unknown data where you don't know the types and the size of the data.\n\nThe class included in the namespace. Create an object of the using the keyword.\n\nUse the method or object initializer syntax to add elements in an .\n\nAn can contain multiple and duplicate values.\n\nUse the method to add an entire Array, HashTable, SortedList, , , Queue, and Stack in the .\n\nThe class implements the interface. So, elements can be accessed using indexer, in the same way as an array. Index starts from zero and increases by one for each subsequent element.\n\nAn explicit casting to the appropriate types is required, or use the var variable.\n\nThe implements the ICollection interface that supports iteration of the collection types. So, use the and the loop to iterate an . The property of an returns the total number of elements in an .\n\nUse the method to insert an element at the specified index into an .\n\nUse the method to insert a collection in an at the specfied index.\n\nUse the , , or methods to remove elements from an .\n\nUse the method to determine whether the specified element exists in the or not. It returns true if exists otherwise returns false.\n\nThe following diagram illustrates the class."
    }
]