[
    {
        "link": "https://zeppelin.apache.org/docs/0.10.0/setup/operation/configuration.html",
        "document": "Zeppelin can be configured via several sources.\n\nSources descending by priority: - environment variables can be defined ( for Windows). - system properties - configuration file can be defined in\n\nZeppelin server port Note: Please make sure you're not using the same port with Zeppelin web application development port (default: 9000). Zeppelin Server ssl port (used when ssl environment/property is set to true) Enables a way to specify a ',' separated list of allowed origins for REST and websockets. \n\n e.g. http://localhost:8080 If provided, encrypt passwords on the credentials.json file (passwords will be stored as plain-text otherwise Enable basic opportunity for collaborative editing. Does not change the logic of operation if the note is used by one person. This directive points to the PEM-encoded private key file for the server. This directive points to a file with certificate data in PEM format. This directive sets the all-in-one file where you can assemble the Certificates of Certification Authorities (CA) whose clients you deal with. These are used for Client Authentication. Such a file is simply the concatenation of the various PEM-encoded Certificate files. Hide the note ID set by on the Apache Zeppelin homescreen. \n\nFor the further information, please read Customize your Zeppelin homepage. The root directory where notebook directories are saved S3 Bucket where notebook files will be saved User name of an S3 bucket\n\ne.g. AWS KMS Key ID to use for encrypting data in S3 (optional) Class name of a custom S3 encryption materials provider implementation to use for encrypting data in S3 (optional) Save notebooks to S3 with the given [Canned ACL](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/s3/model/CannedAccessControlList.html) which determines the S3 permissions. Optional override to control which signature algorithm should be used to sign AWS requests Azure Share where the notebook files will be saved Optional user name of an Azure file share\n\ne.g. If there are multiple notebook storage locations, should we treat the first one as the only source of truth? Make notebook public (set only ) by default when created/imported. If set to will add to and as well, making it private and invisible to other users unless permissions are granted. Output message from interpreter exceeding the limit will be truncated Output message from interpreter exceeding the limit will be truncated Size(in characters) of the maximum text message that can be received by websocket. GitHub's repository URL. It could be either the HTTP URL or the SSH URL. For example git@github.com:apache/zeppelin.git GitHub username. By default it is `token` to use GitHub's API GitHub access token to use GitHub's API. If username/password combination is used and not GitHub API, then this value is the password Port forward to interpreter rpc port. Set 'true' only on local development when zeppelin.k8s.mode 'on'. Don't use 'true' on production environment Name of the Zeppelin server service resources Value to enable/disable timeout handling when starting Interpreter Pods. Caution: This can lead to an infinity loop Value to enable/disable Prometheus metric endpoint on /metric Value to enable/disable Cron support in Notes comma-separated list of folder, where cron is allowed\n\nEnabling SSL requires a few configuration changes. First, you need to create certificates and then update necessary configurations to enable server side SSL and/or client side certificate authentication.\n\nInformation how about to generate certificates and a keystore can be found here.\n\nA condensed example can be found in the top answer to this StackOverflow post.\n\nThe keystore holds the private key and certificate on the server end. The trustore holds the trusted client certificates. Be sure that the path and password for these two stores are correctly configured in the password fields below. They can be obfuscated using the Jetty password tool. After Maven pulls in all the dependency to build Zeppelin, one of the Jetty jars contain the Password tool. Invoke this command from the Zeppelin home build directory with the appropriate version, user, and password.\n\nIf you are using a self-signed, a certificate signed by an untrusted CA, or if client authentication is enabled, then the client must have a browser create exceptions for both the normal HTTPS port and WebSocket port. This can by done by trying to establish an HTTPS connection to both ports in a browser (e.g. if the ports are 443 and 8443, then visit https://127.0.0.1:443 and https://127.0.0.1:8443). This step can be skipped if the server certificate is signed by a trusted CA and client auth is disabled.\n\nThe following properties needs to be updated in the in order to enable server side SSL.\n\nThe following properties needs to be updated in the in order to enable client side certificate authentication.\n\nIn order to avoid having to re-enter credentials every time you restart/redeploy Zeppelin, you can store the user credentials. Zeppelin supports this via the ZEPPELINCREDENTIALSPERSIST configuration.\n\nPlease notice that passwords will be stored in plain text by default. To encrypt the passwords, use the ZEPPELINCREDENTIALSENCRYPT_KEY config variable. This will encrypt passwords using the AES-128 algorithm.\n\nYou can generate an appropriate encryption key any way you'd like - for instance, by using the openssl tool:\n\nImportant: storing your encryption key in a configuration file is not advised. Depending on your environment security needs, you may want to consider utilizing a credentials server, storing the ZEPPELINCREDENTIALSENCRYPT_KEY as an OS env variable, or any other approach that would not colocate the encryption key and the encrypted content (the credentials.json file).\n\nSecurity best practices advise to not use plain text passwords and Jetty provides a password tool to help obfuscating the passwords used to access the KeyStore and TrustStore.\n\nThe Password tool documentation can be found here.\n\nAfter using the tool:\n\nupdate your configuration with the obfuscated password :\n\nWhen using GitHub to track notebooks, one can use GitHub's API for authentication. To create an access token, please use the following link https://github.com/settings/tokens. The value of the access token generated is set in the property.\n\nNote: After updating these configurations, Zeppelin server needs to be restarted."
    },
    {
        "link": "https://zeppelin.apache.org/docs/0.8.0/setup/operation/configuration.html",
        "document": "There are two locations you can configure Apache Zeppelin.\n• Environment variables can be defined ( for Windows).\n• Java properties can be defined in .\n\nIf both are defined, then the environment variables will take priority.\n\nZeppelin server port Note: Please make sure you're not using the same port with Zeppelin web application development port (default: 9000). Zeppelin Server ssl port (used when ssl environment/property is set to true) Enables a way to specify a ',' separated list of allowed origins for REST and websockets. \n\n e.g. http://localhost:8080 If provided, encrypt passwords on the credentials.json file (passwords will be stored as plain-text otherwise The anonymous user is allowed by default. Hide the note ID set by on the Apache Zeppelin homescreen. \n\nFor the further information, please read Customize your Zeppelin homepage. The root directory where notebook directories are saved S3 Bucket where notebook files will be saved User name of an S3 bucket\n\ne.g. AWS KMS Key ID to use for encrypting data in S3 (optional) Class name of a custom S3 encryption materials provider implementation to use for encrypting data in S3 (optional) Optional override to control which signature algorithm should be used to sign AWS requests Azure Share where the notebook files will be saved Optional user name of an Azure file share\n\ne.g. If there are multiple notebook storage locations, should we treat the first one as the only source of truth? Make notebook public (set only ) by default when created/imported. If set to will add to and as well, making it private and invisible to other users unless permissions are granted. Comma separated interpreter configurations [Class] \n\n\n\n NOTE: This property is deprecated since Zeppelin-0.6.0 and will not be supported from Zeppelin-0.7.0. Output message from interpreter exceeding the limit will be truncated Output message from interpreter exceeding the limit will be truncated Size(in characters) of the maximum text message that can be received by websocket. GitHub's repository URL. It could be either the HTTP URL or the SSH URL. For example git@github.com:apache/zeppelin.git GitHub username. By default it is `token` to use GitHub's API GitHub access token to use GitHub's API. If username/password combination is used and not GitHub API, then this value is the password\n\nEnabling SSL requires a few configuration changes. First, you need to create certificates and then update necessary configurations to enable server side SSL and/or client side certificate authentication.\n\nInformation how about to generate certificates and a keystore can be found here.\n\nA condensed example can be found in the top answer to this StackOverflow post.\n\nThe keystore holds the private key and certificate on the server end. The trustore holds the trusted client certificates. Be sure that the path and password for these two stores are correctly configured in the password fields below. They can be obfuscated using the Jetty password tool. After Maven pulls in all the dependency to build Zeppelin, one of the Jetty jars contain the Password tool. Invoke this command from the Zeppelin home build directory with the appropriate version, user, and password.\n\nIf you are using a self-signed, a certificate signed by an untrusted CA, or if client authentication is enabled, then the client must have a browser create exceptions for both the normal HTTPS port and WebSocket port. This can by done by trying to establish an HTTPS connection to both ports in a browser (e.g. if the ports are 443 and 8443, then visit https://127.0.0.1:443 and https://127.0.0.1:8443). This step can be skipped if the server certificate is signed by a trusted CA and client auth is disabled.\n\nThe following properties needs to be updated in the in order to enable server side SSL.\n\nThe following properties needs to be updated in the in order to enable client side certificate authentication.\n\nIn order to avoid having to re-enter credentials every time you restart/redeploy Zeppelin, you can store the user credentials. Zeppelin supports this via the ZEPPELINCREDENTIALSPERSIST configuration.\n\nPlease notice that passwords will be stored in plain text by default. To encrypt the passwords, use the ZEPPELINCREDENTIALSENCRYPT_KEY config variable. This will encrypt passwords using the AES-128 algorithm.\n\nYou can generate an appropriate encryption key any way you'd like - for instance, by using the openssl tool:\n\nImportant: storing your encryption key in a configuration file is not advised. Depending on your environment security needs, you may want to consider utilizing a credentials server, storing the ZEPPELINCREDENTIALSENCRYPT_KEY as an OS env variable, or any other approach that would not colocate the encryption key and the encrypted content (the credentials.json file).\n\nSecurity best practices advise to not use plain text passwords and Jetty provides a password tool to help obfuscating the passwords used to access the KeyStore and TrustStore.\n\nThe Password tool documentation can be found here.\n\nAfter using the tool:\n\nupdate your configuration with the obfuscated password :\n\nWhen using GitHub to track notebooks, one can use GitHub's API for authentication. To create an access token, please use the following link https://github.com/settings/tokens. The value of the access token generated is set in the property.\n\nNote: After updating these configurations, Zeppelin server needs to be restarted."
    },
    {
        "link": "https://zeppelin.apache.org/docs/0.7.3/install/configuration.html",
        "document": "There are two locations you can configure Apache Zeppelin.\n• Environment variables can be defined ( for Windows).\n\nIf both are defined, then the environment variables will take priority.\n\nEnabling SSL requires a few configuration changes. First, you need to create certificates and then update necessary configurations to enable server side SSL and/or client side certificate authentication.\n\nInformation how about to generate certificates and a keystore can be found here.\n\nA condensed example can be found in the top answer to this StackOverflow post.\n\nThe keystore holds the private key and certificate on the server end. The trustore holds the trusted client certificates. Be sure that the path and password for these two stores are correctly configured in the password fields below. They can be obfuscated using the Jetty password tool. After Maven pulls in all the dependency to build Zeppelin, one of the Jetty jars contain the Password tool. Invoke this command from the Zeppelin home build directory with the appropriate version, user, and password.\n\nIf you are using a self-signed, a certificate signed by an untrusted CA, or if client authentication is enabled, then the client must have a browser create exceptions for both the normal HTTPS port and WebSocket port. This can by done by trying to establish an HTTPS connection to both ports in a browser (e.g. if the ports are 443 and 8443, then visit https://127.0.0.1:443 and https://127.0.0.1:8443). This step can be skipped if the server certificate is signed by a trusted CA and client auth is disabled.\n\nThe following properties needs to be updated in the in order to enable server side SSL.\n\nThe following properties needs to be updated in the in order to enable client side certificate authentication.\n\nSecurity best practices advise to not use plain text passwords and Jetty provides a password tool to help obfuscating the passwords used to access the KeyStore and TrustStore.\n\nThe Password tool documentation can be found here.\n\nAfter using the tool:\n\nupdate your configuration with the obfuscated password :\n\nNote: After updating these configurations, Zeppelin server needs to be restarted."
    },
    {
        "link": "https://zeppelin.apache.org/docs/0.7.3/security/http_security_headers.html",
        "document": "Apache Zeppelin can be configured to include HTTP Headers which aids in preventing Cross Site Scripting (XSS), Cross-Frame Scripting (XFS) and also enforces HTTP Strict Transport Security. Apache Zeppelin also has configuration available to set the Application Server Version to desired value.\n\nEnabling HSTS Response Header prevents Man-in-the-middle attacks by automatically redirecting HTTP requests to HTTPS when Zeppelin Server is running on SSL. Read on how to configure SSL for Zeppelin here. Even if web page contains any resource which gets served over HTTP or any HTTP links, it will automatically be redirected to HTTPS for the target domain. It also prevents MITM attack by not allowing User to override the invalid certificate message, when Attacker presents invalid SSL certificate to the User.\n\nThe following property needs to be updated in the zeppelin-site.xml in order to enable HSTS. You can choose appropriate value for \"max-age\".\n\nRead more about HSTS here.\n\nThe HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari Web browsers that initiates configured action when they detect reflected cross-site scripting (XSS) attacks.\n\nThe following property needs to be updated in the zeppelin-site.xml in order to set X-XSS-PROTECTION header.\n\nYou can choose appropriate value from below.\n• 1 (Enables XSS filtering. If a cross-site scripting attack is detected, the browser will sanitize the page.)\n• 1; mode=block (Enables XSS filtering. The browser will prevent rendering of the page if an attack is detected.)\n\nRead more about HTTP X-XSS-Protection response header here.\n\nThe X-Frame-Options HTTP response header can indicate browser to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites in a , or .\n\nThe following property needs to be updated in the zeppelin-site.xml in order to set X-Frame-Options header.\n\nYou can choose appropriate value from below.\n\nSecurity conscious organisations does not want to reveal the Application Server name and version to prevent finding this information easily by Attacker while fingerprinting the Application. The exact version number can tell an Attacker if the current Application Server is patched for or vulnerable to certain publicly known CVE associated to it.\n\nThe following property needs to be updated in the zeppelin-site.xml in order to set Server header.\n\nThe value can be any \"String\"."
    },
    {
        "link": "http://docs.cloudera.com.s3-website-us-east-1.amazonaws.com/HDPDocuments/HDP3/HDP-3.1.0/configuring-zeppelin-security/content/configure_ssl_for_zeppelin.html",
        "document": "In Ambari, access the \"Advanced zeppelin-config\" section of the Zeppelin configuration settings.\n\nConfigure key manager and key store settings with the correct values for your system:\n\nIf you wish to use client-side certificate authentication, enable client-side authentication and configure the associated trust store settings:\n\nIf you wish to use client-side certificate authentication, enable client-side authentication and configure the associated trust store settings:"
    },
    {
        "link": "https://ssl.com/how-to/manually-generate-a-certificate-signing-request-csr-using-openssl",
        "document": "This tutorial will show you how to manually generate a Certificate Signing Request (or CSR) in an Apache or Nginx web hosting environment using OpenSSL. Click here for a tutorial on ordering certificates, or here for more information on how to install your new SSL.com certificate.\n\nFor more helpful how-tos and the latest in cybersecurity news, sign up for SSL.com’s newsletter here:\n\nIn these instructions, we’re going to use OpenSSL’s utility to generate both the private key and CSR in one command. Generating the private key in this way will ensure that you will be prompted for a pass phrase to protect the private key. In all command examples shown, replace the filenames shown in ALL CAPS with the actual paths and filenames you want to use. (For example, you might replace with in a macOS Apache environment.) This how-to covers generation of both RSA and ECDSA keys.\n\nThe OpenSSL command below will generate a 2048-bit RSA private key and CSR:\n• is the command for running OpenSSL.\n• is the OpenSSL utility for generating a CSR.\n• tells OpenSSL to generate a new 2048-bit RSA private key. If you would prefer a 4096-bit key, you can change this number to .\n• specifies where to save the private key file.\n• specifies where to save the CSR file.\n• With these last two items, remember to use your own paths and filenames for the private key and CSR, not the placeholders.\n\nAfter typing the command, press enter. You will be presented with a series of prompts:\n• First create and verify a pass phrase. Remember this pass phrase because you will need it again to access your private key.\n• You will now be prompted to enter the information which will be included into your CSR. This information is also known as the Distinguished Name, or DN. The Common Name field is required by SSL.com when submitting your CSR, but the others are optional. If you would like to skip an optional item, simply type enter when it appears:\n• The Locality Name field (optional) is for your city or town.\n• The Organization Name field (optional) is for the name of your company or organization.\n• The Common Name field (required) is used for the Fully Qualified Domain Name (FQDN) of the website this certificate will protect.\n• The Challenge Password field is optional and can be skipped as well.\n\nUpon completion of this process, you will be returned to a command prompt. You will not receive any notification that your CSR was successfully created.\n\nTo create an ECDSA private key with your CSR, you need to invoke a second OpenSSL utility to generate the parameters for the ECDSA key.\n\nThis OpenSSL command will generate a parameter file for a 256-bit ECDSA key:\n• generates a parameter file instead of a private key. You could also generate a private key, but using the parameter file when generating the key and CSR ensures that you will be prompted for a pass phrase.\n• chooses a 256-bit curve. If you prefer a 384-bit curve, change the portion after the colon to .\n• provides a path and filename for the parameter file.\n\nNow, specify your parameter file when generating the CSR:\n\nThe command is the same as we used in the RSA example above, but has been replaced with . As before, you will be prompted for a pass phrase and Distinguished Name information for the CSR.\n\nIf you wish, you can use redirection to combine the two OpenSSL commands into one line, skipping the generation of a parameter file, as follows:\n\nFor more information on installing your certificate, read here, for binding with IIS 10, read here."
    },
    {
        "link": "https://knowledge.digicert.com/general-information/openssl-quick-reference-guide",
        "document": "Learn how to use the most common OpenSSL commands OpenSSL is an open-source command line tool that is commonly used to generate private keys, create CSRs, install your SSL/TLS certificate, and identify certificate information. We designed this quick reference guide to help you understand the most common OpenSSL commands and how to use them. This guide is not meant to be comprehensive. If you're looking for a more in-depth and comprehensive look at OpenSSL, we recommend you check out the OpenSSL Cookbook by Ivan Ristić. Note: Ubuntu 16.04.3 LTS was the system used to write this guide.\n\n Some command examples use a '\\' (backslash) to create a line break to make them easier to understand. If you don't have the time to get into the nitty-gritty of OpenSSL commands and CSR generation, or you want to save some time, check out our OpenSSL CSR Wizard.\n\nIdentifying which version of OpenSSL you are using is an important first step when preparing to generate a private key or CSR. Your version of OpenSSL dictates which cryptographic algorithms can be used when generating keys as well as which protocols are supported. For example, OpenSSL version 1.0.1 was the first version to support TLS 1.1 and TLS 1.2. Knowing which version of OpenSSL you are using is also important when getting help troubleshooting problems you may run into. Use the following command to identify which version of OpenSSL you are running: \n\n In this command, the -a switch displays complete version information, including:\n• The options that were built with the library (options).\n• The directory where certificates and private keys are stored (OPENSSLDIR). \n\n Using the openssl version -a command, the following output was generated:\n\nThe first step to obtaining an SSL certificate is using OpenSSL to create a certificate signing request (CSR) that can be sent to a Certificate Authority (CA) (e.g., DigiCert). The CSR contains the common name(s) you want your certificate to secure, information about your company, and your public key. In order for a CSR to be created, it needs to have a private key from which the public key is extracted. This can be done by using an existing private key or generating a new private key. Security Note: Because of the security issues associated with using an existing private key, and because it's very easy and entirely free to create a private key, we recommend you generate a brand new private key whenever you create a CSR. When generating a key, you have to decide three things: the key algorithm, the key size, and whether to use a passphrase. For the key algorithm, you need to take into account its compatibility. For this reason, we recommend you use RSA. However, if you have a specific need to use another algorithm (such as ECDSA), you can use that too, but be aware of the compatibility issues you might run into. Note: This guide only covers generating keys using the RSA algorithm. For the key size, you need to select a bit length of at least 2048 when using RSA and 256 when using ECDSA; these are the smallest key sizes allowed for SSL certificates. Unless you need to use a larger key size, we recommend sticking with 2048 with RSA and 256 with ECDSA. Note: In older versions of OpenSSL, if no key size is specified, the default key size of 512 is used. Any key size lower than 2048 is considered unsecure and should never be used. For the passphrase, you need to decide whether you want to use one. If used, the private key will be encrypted using the specified encryption method, and it will be impossible to use without the passphrase. Because there are pros and cons with both options, it's important you understand the implications of using or not using a passphrase. In this guide, we will not be using a passphrase in our examples. After deciding on a key algorithm, key size, and whether to use a passphrase, you are ready to generate your private key. \n\n Use the following command to generate your private key using the RSA algorithm: \n\n This command generates a private key in your current directory named yourdomain.key (-out yourdomain.key) using the RSA algorithm (genrsa) with a key length of 2048 bits (2048). The generated key is created using the OpenSSL format called PEM. \n\n Use the following command to view the raw, encoded contents (PEM format) of the private key: \n\n Even though the contents of the file might look like a random chunk of text, it actually contains important information about the key. \n\n Use the following command to decode the private key and view its contents: \n\n The -noout switch omits the output of the encoded version of the private key.\n\nThe private key file contains both the private key and the public key. You can extract your public key from your private key file if needed. Use the following command to extract your public key: After generating your private key, you are ready to create your CSR. The CSR is created using the PEM format and contains the public key portion of the private key as well as information about you (or your company). Use the following command to create a CSR using your newly generated private key: \n\n After entering the command, you will be asked series of questions. Your answers to these questions will be embedded in the CSR.\n\n \n\n Answer the questions as described below: The two-letter country code where your company is legally located. State or Province Name (full name) The state/province where your company is legally located. The city where your company is legally located. The city where your company is legally located. The name of your department within the organization. (You can leave this option blank; simply press Enter.) Your email address. (You can leave this option blank; simply press Enter.) Your email address. (You can leave this option blank; simply press Enter.) \n\n Some of the above CSR questions have default values that will be used if you leave the answer blank and press Enter. These default values are pulled from the OpenSSL configuration file located in the OPENSSLDIR (see Checking Your OpenSSL Version). If you want to leave a question blank without using the default value, type a \".\" (period) and press Enter.\n\nAnother option when creating a CSR is to provide all the necessary information within the command itself by using the -subj switch. Use the following command to disable question prompts when generating a CSR: \n\n This command uses your private key file (-key yourdomain.key) to create a new CSR (-out yourdomain.csr) and disables question prompts by providing the CSR information (-subj). \n\n Creating Your CSR with One Command Instead of generating a private key and then creating a CSR in two separate steps, you can actually perform both tasks at once. \n\n Use the following command to create both the private key and CSR: \n\n This command generates a new private key (-newkey) using the RSA algorithm with a 2048-bit key length (rsa:2048) without using a passphrase (-nodes) and then creates the key file with a name of yourdomain.key (-keyout yourdomain.key). The command then generates the CSR with a filename of yourdomain.csr (-out yourdomain.csr) and the information for the CSR is supplied (-subj). Note: While it is possible to add a subject alternative name (SAN) to a CSR using OpenSSL, the process is a bit complicated and involved. If you do need to add a SAN to your certificate, this can easily be done by adding them to the order form when purchasing your DigiCert certificate.\n\nAfter creating your CSR using your private key, we recommend verifying that the information contained in the CSR is correct and that the file hasn't been modified or corrupted. Use the following command to view the information in your CSR before submitting it to a CA (e.g., DigiCert): \n\n The -noout switch omits the output of the encoded version of the CSR. The -verify switch checks the signature of the file to make sure it hasn't been modified. Running this command provides you with the following output: \n\n On the first line of the above output, you can see that the CSR was verified (verify OK). On the fourth line, the Subject: field contains the information you provided when you created the CSR. Make sure this information is correct. If any of the information is wrong, you will need to create an entirely new CSR to fix the errors. This is because CSR files are digitally signed, meaning if even a single character is changed in the file it will be rejected by the CA. \n\n Sending the CSR to the CA When you are ready to send the CSR to the CA (e.g., DigiCert), you need to do so using the PEM format—the raw, encoded text of the CSR that you see when opening it in a text editor. Use the following command to view the raw output of the CSR: \n\n You must copy the entire contents of the output (including the -----BEGIN CERTIFICATE REQUEST----- and -----END CERTIFICATE REQUEST----- lines) and paste it into your DigiCert order form.\n\nAfter receiving your certificate from the CA (e.g., DigiCert), we recommend making sure the information in the certificate is correct and matches your private key. You do this by using the x509 command. Use the following command to view the contents of your certificate: To verify the public and private keys match, extract the public key from each file and generate a hash output for it. All three files should share the same public key and the same hash value. Use the following commands to generate a hash of each file's public key: Note: The above commands should be entered one by one to generate three separate outputs. Each command will output (stdin)= followed by a string of characters. If the output of each command matches, then the keys for each file are the same. However, if there is any mismatch, then the keys are not the same and the certificate cannot be installed. Key mismatch errors are typically caused by installing a certificate on a machine different from the one used to generate the CSR. If you run into a key mismatch error, you need to do one of the following:\n• Transfer the private key from the machine used to generate the CSR to the one you are trying to install the certificate on.\n• Install the certificate on the machine with the private key.\n• Generate an entirely new key and create a new CSR on the machine that will use the certificate.\n\nBy default, OpenSSL generates keys and CSRs using the PEM format. However, there might be occasions when you need to convert your key or certificate into a different format to export it to another system. The PKCS#12 format is an archival file that stores both the certificate and the private key. This format is useful for migrating certificates and keys from one system to another as it contains all the necessary files. PKCS#12 files use either the .pfx or .p12 file extension. Use the following command to convert your PEM key and certificate into the PKCS#12 format (i.e., a single .pfx file): openssl pkcs12 -export -name \"yourdomain-digicert-(expiration date)\" \\\n\n -out yourdomain.pfx -inkey yourdomain.key -in yourdomain.crt \n\n Note: After you enter the command, you will be asked to provide a password to encrypt the file. Because the PKCS#12 format is often used for system migration, we recommend encrypting the file using a very strong password. This command combines your private key (-inkey yourdomain.key) and your certificate (-in yourdomain.crt) into a single .pfx file (-out yourdomain.pfx) with a friendly name (-name \"yourdomain-digicert-(expiration date)\"), where the expiration date is the date that the certificate expires. Because the PKCS#12 format contains both the certificate and private key, you need to use two separate commands to convert a .pfx file back into the PEM format. Use the following command to extract the private key from a PKCS#12 (.pfx) file and convert it into a PEM encoded private key: \n\n Use the following command to extract the certificate from a PKCS#12 (.pfx) file and convert it into a PEM encoded certificate: \n\n Note: You will need to provide the password used to encrypt the .pfx file in order to convert the key and certificate into the PEM format. The DER format uses ASN.1 encoding to store certificate or key information. Similar to the PEM format, DER stores key and certificate information in two separate files and typically uses the same file extensions (i.e., .key, .crt, and .csr). The file extension .der was used in the below examples for clarity. Use the following command to convert a PEM encoded certificate into a DER encoded certificate: \n\n Use the following command to convert a PEM encoded private key into a DER encoded private key: Use the following command to convert a DER encoded certificate into a PEM encoded certificate: \n\n Use the following command to convert a DER encoded private key into a PEM encoded private key:"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs",
        "document": "OpenSSL is a versatile command line tool that can be used for a large variety of tasks related to Public Key Infrastructure (PKI) and HTTPS (HTTP over TLS). This cheat sheet style guide provides a quick reference to OpenSSL commands that are useful in common, everyday scenarios. This includes OpenSSL examples for generating private keys, certificate signing requests, and certificate format conversion. It does not cover all of the uses of OpenSSL.\n\nHow to Use This Guide:\n• If you are not familiar with certificate signing requests (CSRs), read the first section\n• Aside from the first section, this guide is in a cheat sheet format: a list of self-contained command line snippets\n• Jump to any section that is relevant to the task you are trying to complete (Hint: use the Contents menu or your browser’s Find function)\n• Most of the commands are one-liners that have been expanded to multiple lines (using the symbol) for clarity\n\nIf you would like to obtain an SSL certificate from a commercial certificate authority (CA), you must generate a certificate signing request (CSR). A CSR consists mainly of the public key of a key pair, and some additional information. Both of these components are inserted into the certificate when it is signed.\n\nWhenever you generate a CSR, you will be prompted to provide information regarding the certificate. This information is known as a Distinguished Name (DN). An important field in the DN is the Common Name (CN), which should be the exact Fully Qualified Domain Name (FQDN) of the host that you intend to use the certificate with. It is also possible to skip the interactive prompts when creating a CSR by passing the information via command line or from a file.\n\nThe other items in a DN provide additional information about your business or organization. If you are purchasing an SSL certificate from a certificate authority, it is often required that these additional fields, such as “Organization”, accurately reflect your organization’s details.\n\nHere is an example of what the CSR information prompt will look like:\n\nIf you want to non-interactively answer the CSR information prompt, you can do so by adding the option to any OpenSSL commands that request CSR information. Here is an example of the option, using the same information displayed in the code block above:\n\nNow that you understand CSRs, feel free to jump around to whichever section of this guide covers your OpenSSL needs.\n\nThis section covers OpenSSL commands that are related to generating CSRs (and private keys, if they do not already exist). CSRs can be used to request SSL certificates from a certificate authority.\n\nKeep in mind that you may add the CSR information non-interactively with the option, mentioned in the previous section.\n\nUse this method if you want to use HTTPS (HTTP over TLS) to secure your Apache HTTP or Nginx web server, and you want to use a Certificate Authority (CA) to issue the SSL certificate. The CSR that is generated can be sent to a CA to request the issuance of a CA-signed SSL certificate. If your CA supports SHA-2, add the option to sign the CSR with SHA-2.\n\nThis command creates a 2048-bit private key ( ) and a CSR ( ) from scratch:\n\nAnswer the CSR information prompt to complete the process.\n\nThe option specifies that the key should be 2048-bit, generated using the RSA algorithm. The option specifies that the private key should not be encrypted with a pass phrase. The option, which is not included here but implied, indicates that a CSR is being generated.\n\nUse this method if you already have a private key that you would like to use to request a certificate from a CA.\n\nThis command creates a new CSR ( ) based on an existing private key ( ):\n\nAnswer the CSR information prompt to complete the process.\n\nThe option specifies an existing private key ( ) that will be used to generate a new CSR. The option indicates that a CSR is being generated.\n\nGenerate a CSR from an Existing Certificate and Private Key\n\nUse this method if you want to renew an existing certificate but you or your CA do not have the original CSR for some reason. It basically saves you the trouble of re-entering the CSR information, as it extracts that information from the existing certificate.\n\nThis command creates a new CSR ( ) based on an existing certificate ( ) and private key ( ):\n\nThe option specifies that you are using an X509 certificate to make a CSR.\n\nIf you would like to use an SSL certificate to secure a service but you do not require a CA-signed certificate, a valid (and free) solution is to sign your own certificates.\n\nA common type of certificate that you can issue yourself is a self-signed certificate. A self-signed certificate is a certificate that is signed with its own private key. Self-signed certificates can be used to encrypt data just as well as CA-signed certificates, but your users will be displayed a warning that says that the certificate is not trusted by their computer or browser. Therefore, self-signed certificates should only be used if you do not need to prove your service’s identity to its users (e.g. non-production or non-public servers).\n\nThis section covers OpenSSL commands that are related to generating self-signed certificates.\n\nUse this method if you want to use HTTPS (HTTP over TLS) to secure your Apache HTTP or Nginx web server, and you do not require that your certificate is signed by a CA.\n\nThis command creates a 2048-bit private key ( ) and a self-signed certificate ( ) from scratch:\n\nAnswer the CSR information prompt to complete the process.\n\nThe option tells to create a self-signed certificate. The option specifies that the certificate will be valid for 365 days. A temporary CSR is generated to gather information to associate with the certificate.\n\nUse this method if you already have a private key that you would like to generate a self-signed certificate with it.\n\nThis command creates a self-signed certificate ( ) from an existing private key ( ):\n\nAnswer the CSR information prompt to complete the process.\n\nThe option tells to create a self-signed certificate. The option specifies that the certificate will be valid for 365 days. The option enables the CSR information prompt.\n\nGenerate a Self-Signed Certificate from an Existing Private Key and CSR\n\nUse this method if you already have a private key and CSR, and you want to generate a self-signed certificate with them.\n\nThis command creates a self-signed certificate ( ) from an existing private key ( ) and ( ):\n\nThe option specifies that the certificate will be valid for 365 days.\n\nCertificate and CSR files are encoded in PEM format, which is not readily human-readable.\n\nThis section covers OpenSSL commands that will output the actual entries of PEM-encoded files.\n\nThis command allows you to view and verify the contents of a CSR ( ) in plain text:\n\nThis command allows you to view the contents of a certificate ( ) in plain text:\n\nUse this command to verify that a certificate ( ) was signed by a specific CA certificate ( ):\n\nThis section covers OpenSSL commands that are specific to creating and verifying private keys.\n\nUse this command to create a password-protected, 2048-bit private key ( ):\n\nEnter a password when prompted to complete the process.\n\nUse this command to check that a private key ( ) is a valid key:\n\nIf your private key is encrypted, you will be prompted for its pass phrase. Upon success, the unencrypted key will be output on the terminal.\n\nUse these commands to verify if a private key ( ) matches a certificate ( ) and CSR ( ):\n\nIf the output of each command is identical there is an extremely high probability that the private key, certificate, and CSR are related.\n\nThis takes an unencrypted private key ( ) and outputs an encrypted version of it ( ):\n\nEnter your desired pass phrase, to encrypt the private key with.\n\nThis takes an encrypted private key ( ) and outputs a decrypted version of it ( ):\n\nEnter the pass phrase for the encrypted key when prompted.\n\nAll of the certificates that we have been working with have been X.509 certificates that are ASCII PEM encoded. There are a variety of other certificate encoding and container types; some applications prefer certain formats over others. Also, many of these formats can contain multiple items, such as a private key, certificate, and CA certificate, in a single file.\n\nOpenSSL can be used to convert certificates to and from a large variety of these formats. This section will cover a some of the possible conversions.\n\nUse this command if you want to convert a PEM-encoded certificate ( ) to a DER-encoded certificate ( ), a binary format:\n\nThe DER format is typically used with Java.\n\nUse this command if you want to convert a DER-encoded certificate ( ) to a PEM-encoded certificate ( ):\n\nUse this command if you want to add PEM certificates ( and ) to a PKCS7 file ( ):\n\nNote that you can use one or more options to specify which certificates to add to the PKCS7 file.\n\nPKCS7 files, also known as P7B, are typically used in Java Keystores and Microsoft IIS (Windows). They are ASCII files which can contain certificates and CA certificates.\n\nUse this command if you want to convert a PKCS7 file ( ) to a PEM file:\n\nNote that if your PKCS7 file has multiple items in it (e.g. a certificate and a CA intermediate certificate), the PEM file that is created will contain all of the items in it.\n\nUse this command if you want to take a private key ( ) and a certificate ( ), and combine them into a PKCS12 file ( ):\n\nYou will be prompted for export passwords, which you may leave blank. Note that you may add a chain of certificates to the PKCS12 file by concatenating the certificates together in a single PEM file ( ) in this case.\n\nPKCS12 files, also known as PFX files, are typically used for importing and exporting certificate chains in Microsoft IIS (Windows).\n\nUse this command if you want to convert a PKCS12 file ( ) and convert it to PEM format ( ):\n\nNote that if your PKCS12 file has multiple items in it (e.g. a certificate and private key), the PEM file that is created will contain all of the items in it.\n\nThe command can be used to check which version you are running. The version of OpenSSL that you are running, and the options it was compiled with affect the capabilities (and sometimes the command line options) that are available to you.\n\nThe following command displays the OpenSSL version that you are running, and all of the options that it was compiled with:\n\nThis guide was written using an OpenSSL binary with the following details (the output of the previous command):\n\nThat should cover how most people use OpenSSL to work with SSL certs. It has many other uses that were not covered here, so feel free to ask or suggest other uses in the comments.\n\nIf you are having issues with any of the commands, be sure to comment (and include your OpenSSL version output)."
    },
    {
        "link": "https://pleasantsolutions.com/info/pleasant-password-server/b-server-configuration/3-installing-a-3rd-party-certificate/openssl-commands",
        "document": "A compiled version of OpenSSL for Windows can be found here.\n\nThese commands allow you to generate CSRs, Certificates, Private Keys and do other miscellaneous tasks.\n\nIf you need to check the information within a Certificate, CSR or Private Key, use these commands.\n\nIf you are receiving an error that the private doesn't match the certificate or that a certificate that you installed to a site is not trusted, try one of these commands.\n• Check an MD5 hash of the public key to ensure that it matches with what is in a CSR or private key openssl x509 -noout -modulus -in | openssl md5\n\nopenssl rsa -noout -modulus -in | openssl md5\n\nopenssl req -noout -modulus -in | openssl md5\n• Check an SSL connection. All the certificates (including Intermediates) should be displayed\n\nThese commands allow you to convert certificates and keys to different formats to make them compatible with specific types of servers or software. For example, you can convert a normal PEM file that would work with Apache to a PFX (PKCS#12) file and use it with Tomcat or IIS.\n• Convert a PKCS#12 file (.pfx .p12) containing a private key and certificates to PEM You can add -nocerts to only output the private key or add -nokeys to only output the certificates."
    },
    {
        "link": "https://help.tableau.com/current/server/en-us/ssl_cert_create.htm",
        "document": "Important: This example is intended to provide general guidance to IT professionals who are experienced with SSL requirements and configuration. The procedure described in this article is just one of many available methods you can use to generate the required files. The process described here should be treated as an example and not as a recommendation.\n\nWhen you configure Tableau Server to use Secure Sockets Layer (SSL) encryption, this helps ensure that access to the server is secure and that data sent between Tableau Server and Tableau Desktop is protected.\n\nLooking for Tableau Server on Linux? See Example: SSL Certificate - Generate a Key and CSR(Link opens in a new window).\n\nTableau Server uses Apache, which includes OpenSSL(Link opens in a new window). You can use the OpenSSL toolkit to generate a key file and Certificate Signing Request (CSR) which can then be used to obtain a signed SSL certificate.\n\nNote: Beginning in Tableau Server versions 2021.3.26, 2021.4.21, 2022.1.17, 2022.3.9, 2023.1.5, and later, Tableau Server runs OpenSSL 3.1.\n\nTo configure Tableau Server to use SSL, you must have an SSL certificate. To obtain the SSL certificate, complete the steps:\n• Send the CSR to a certificate authority (CA) to obtain an SSL certificate.\n• Use the key and certificate to configure Tableau Server to use SSL.\n\nYou can find additional information on the SSL FAQ page(Link opens in a new window) on the Apache Software Foundation website.\n\nTableau Server allows SSL for multiple domains. To set up this environment, you need to modify the OpenSSL configuration file, openssl.conf, and configure a Subject Alternative Name (SAN) certificate on Tableau Server. See For SAN certificates: modify the OpenSSL configuration file below.\n\nTo avoid using the argument with every use of openssl.exe, you can use the environment variable to ensure that the correct configuration file is used and all configuration changes made in subsequent procedures in this article produce expected results (for example, you must set the environment variable to add a SAN to your certificate). Open the Command Prompt as an administrator, and run the following command: Note: When setting the Open SSL configuration environment variable, do not enclose the file path with quotation marks.\n\nGenerate a key file that you will use to generate a certificate signing request.\n• Open the Command Prompt as an administrator, and navigate to the Apache directory for Tableau Server. For example, run the following command:\n• Run the following command to create the key file: Notes:\n• This command uses a 4096-bit length for the key. You should choose a bit length that is at least 2048 bits because communication encrypted with a shorter bit length is less secure. If a value is not provided, 512 bits is used.\n• To create PKCS#1 RSA keys with Tableau Server versions 2021.3.26, 2021.4.21, 2022.1.17, 2022.3.9, 2023.1.5, and later, you must use the additional option when running \" command based on the OpenSSL 3.1. For more information about the option, see https://www.openssl.org/docs/man3.1/man1/openssl-rsa.html .\n\nUse the key file you created in the procedure above to generate the certificate signing request (CSR). You send the CSR to a certificate authority (CA) to obtain a signed certificate.\n\nImportant: If you want to configure a SAN certificate to use SSL for multiple domains, first complete the steps in For SAN certificates: modify the OpenSSL configuration file below, and then return to here to generate a CSR.\n• Run the following command to create a certificate signing request (CSR) file: If you did not set the OpenSSL configuration environment variable, , you might see either of the following messages:\n• An error message about the config information being unable to load. In this case, retype the command above with the following parameter: .\n• A warning that the directory cannot be found. This directory does not exist on Windows, and you can simply ignore this message. The file is created successfully. To set an OpenSSL configuration environment variable, see Set the OpenSSL configuration environment variable (optional) section in this article.\n• Note: For Common Name, type the Tableau Server name. The Tableau Server name is the URL that will be used to reach the Tableau Server. For example, if you reach Tableau Server by typing in the address bar of your browser, then is the common name. If the common name does not resolve to the server name, errors will occur when a browser or Tableau Desktop tries to connect to Tableau Server.\n\nSend the CSR to a certificate authority to obtain an SSL certificate\n\nSend the CSR to a commercial certificate authority (CA) to request the digital certificate. For information, see the Wikipedia article Certificate authority(Link opens in a new window) and any related articles that help you decide which CA to use.\n\nUse the key and certificate to configure Tableau Server\n\nWhen you have both the key and the certificate from the CA, you can configure Tableau Server to use SSL. For the steps, see Configure External SSL.\n\nIn a standard installation of OpenSSL, some features are not enabled by default. To use SSL with multiple domain names, before you generate the CSR, complete these steps to modify the openssl.cnf file.\n• Open Windows Explorer and browse to the Apache conf folder for Tableau Server.\n• Open openssl.cnf in a text editor, and find the following line: This line might be commented out with a hash sign (#) at the beginning of the line. If the line is commented out, uncomment it by removing the # and space characters from the beginning of the line.\n• Move to the [ v3_req ] section of the file. The first few lines contain the following text: After the keyUsage line, insert the following line: If you’re creating a self-signed SAN certificate, do the following to give the certificate permission to sign the certificate:\n• Add the and to the keyUsage line so it looks like the following:\n• After the keyUsage line, add the following line:\n• In the [alt_names] section, provide the domain names you want to use with SSL. The following image shows the results highlighted, with placeholder text that you would replace with your domain names.\n• Complete the steps in Create a certificate signing request to send to a certificate authority section, above."
    }
]