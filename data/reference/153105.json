[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2015 .\n\nThe read-only property of the returns the inline style of an element in the form of a live object that contains a list of all styles properties for that element with values assigned only for the attributes that are defined in the element's inline attribute.\n\nShorthand properties are expanded. If you set , the longhand properties ( , , and ) are set instead.\n\nThis property is read-only, meaning it is not possible to assign a object to it. Nevertheless, it is possible to set an inline style by assigning a string directly to the property. In this case the string is forwarded to . Using in this manner will completely overwrite all inline styles on the element.\n\nTherefore, to add specific styles to an element without altering other style values, it is generally preferable to set individual properties on the object. For example, you can write .\n\nA style declaration is reset by setting it to or an empty string, e.g., ."
    },
    {
        "link": "https://w3schools.com/jsref/prop_html_style.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/DOM_scripting",
        "document": "When writing web pages and apps, one of the most common things you'll want to do is change the document structure in some way. This is usually done by manipulating the Document Object Model (DOM) via a set of built-in browser APIs for controlling HTML and styling information. In this article we'll introduce you to DOM scripting. An understanding of HTML and the fundamentals of CSS, familiarity with JavaScript basics as covered in previous lessons.\n• What the DOM is — the browser's internal representation of the document's HTML structure as a hierarchy of objects.\n• The important parts of a web browser as represented in JavaScript — , , and .\n• How DOM nodes exist relative to each other in the DOM tree — root, parent, child, sibling, and descendant.\n• Getting references to DOM nodes, creating new nodes, adding and removing nodes and attributes.\n\nWeb browsers are very complicated pieces of software with a lot of moving parts, many of which can't be controlled or manipulated by a web developer using JavaScript. You might think that such limitations are a bad thing, but browsers are locked down for good reasons, mostly centering around security. Imagine if a website could get access to your stored passwords or other sensitive information, and log into websites as if it were you? Despite the limitations, Web APIs still give us access to a lot of functionality that enable us to do a great many things with web pages. There are a few really obvious bits you'll reference regularly in your code — consider the following diagram, which represents the main parts of a browser directly involved in viewing web pages:\n• The window is the browser tab that a web page is loaded into; this is represented in JavaScript by the object. Using methods available on this object you can do things like return the window's size (see and ), manipulate the document loaded into that window, store data specific to that document on the client-side (for example using a local database or other storage mechanism), attach an event handler to the current window, and more.\n• The navigator represents the state and identity of the browser (i.e. the user-agent) as it exists on the web. In JavaScript, this is represented by the object. You can use this object to retrieve things like the user's preferred language, a media stream from the user's webcam, etc.\n• The document (represented by the DOM in browsers) is the actual page loaded into the window, and is represented in JavaScript by the object. You can use this object to return and manipulate information on the HTML and CSS that comprises the document, for example get a reference to an element in the DOM, change its text content, apply new styles to it, create new elements and add them to the current element as children, or even delete it altogether. In this article we'll focus mostly on manipulating the document, but we'll show a few other useful bits besides.\n\nLet's provide a brief recap on the Document Object Model (DOM), which we also looked at earlier in the course. The document currently loaded in each one of your browser tabs is represented by a DOM. This is a \"tree structure\" representation created by the browser that enables the HTML structure to be easily accessed by programming languages — for example the browser itself uses it to apply styling and other information to the correct elements as it renders a page, and developers like you can manipulate the DOM with JavaScript after the page has been rendered. We have created an example page at dom-example.html (see it live also). Try opening this up in your browser — it is a very simple page containing a element inside which you can find an image, and a paragraph with a link inside. The HTML source code looks like this: <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <title>Simple DOM example</title> </head> <body> <section> <img src=\"dinosaur.png\" alt=\"A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth.\" /> <p> Here we will add a link to the <a href=\"https://www.mozilla.org/\">Mozilla homepage</a> </p> </section> </body> </html> The DOM on the other hand looks like this: Note: This DOM tree diagram was created using Ian Hickson's Live DOM viewer. Each entry in the tree is called a node. You can see in the diagram above that some nodes represent elements (identified as , , and so on) and others represent text (identified as ). There are other types of nodes as well, but these are the main ones you'll encounter. Nodes are also referred to by their position in the tree relative to other nodes:\n• Root node: The top node in the tree, which in the case of HTML is always the node (other markup vocabularies like SVG and custom XML will have different root elements).\n• Child node: A node directly inside another node. For example, is a child of in the above example.\n• Descendant node: A node anywhere inside another node. For example, is a child of in the above example, and it is also a descendant. is not a child of , as it is two levels below it in the tree, but it is a descendant of .\n• Parent node: A node which has another node inside it. For example, is the parent node of in the above example.\n• Sibling nodes: Nodes that sit on the same level under the same parent node in the DOM tree. For example, and are siblings in the above example. It is useful to familiarize yourself with this terminology before working with the DOM, as a number of the code terms you'll come across make use of them. You'll also come across them in CSS (e.g. descendant selector, child selector).\n\nTo start learning about DOM manipulation, let's begin with a practical example.\n• Take a local copy of the dom-example.html page and the image that goes along with it.\n• Add a element just above the closing tag.\n• To manipulate an element inside the DOM, you first need to select it and store a reference to it inside a variable. Inside your script element, add the following line:\n• Now we have the element reference stored in a variable, we can start to manipulate it using properties and methods available to it (these are defined on interfaces like in the case of element, its more general parent interface , and — which represents all nodes in a DOM). First of all, let's change the text inside the link by updating the value of the property. Add the following line below the previous one:\n• We should also change the URL the link is pointing to, so that it doesn't go to the wrong place when it is clicked on. Add the following line, again at the bottom: Note that, as with many things in JavaScript, there are many ways to select an element and store a reference to it in a variable. is the recommended modern approach. It is convenient because it allows you to select elements using CSS selectors. The above call will match the first element that appears in the document. If you wanted to match and do things to multiple elements, you could use , which matches every element in the document that matches the selector, and stores references to them in an array-like object called a . There are older methods available for grabbing element references, such as:\n• , which selects an element with a given attribute value, e.g. . The ID is passed to the function as a parameter, i.e. .\n• , which returns an array-like object containing all the elements on the page of a given type, for example s, s, etc. The element type is passed to the function as a parameter, i.e. . These two work better in older browsers than the modern methods like , but are not as convenient. Have a look and see what others you can find!\n\nThe above has given you a little taste of what you can do, but let's go further and look at how we can create new elements.\n• Going back to the current example, let's start by grabbing a reference to our element — add the following code at the bottom of your existing script (do the same with the other lines too):\n• Now let's create a new paragraph using and give it some text content in the same way as before: const para = document.createElement(\"p\"); para.textContent = \"We hope you enjoyed the ride.\";\n• You can now append the new paragraph at the end of the section using :\n• Finally for this part, let's add a text node to the paragraph the link sits inside, to round off the sentence nicely. First we will create the text node using :\n• Now we'll grab a reference to the paragraph the link is inside, and append the text node to it: That's most of what you need for adding nodes to the DOM — you'll make a lot of use of these methods when building dynamic interfaces (we'll look at some examples later).\n\nThere may be times when you want to move nodes, or delete them from the DOM altogether. This is perfectly possible. If we wanted to move the paragraph with the link inside it to the bottom of the section, we could do this: This moves the paragraph down to the bottom of the section. You might have thought it would make a second copy of it, but this is not the case — is a reference to the one and only copy of that paragraph. If you wanted to make a copy and add that as well, you'd need to use instead. Removing a node is pretty simple as well, at least when you have a reference to the node to be removed and its parent. In our current case, we just use , like this: When you want to remove a node based only on a reference to itself, which is fairly common, you can use : This method is not supported in older browsers. They have no method to tell a node to remove itself, so you'd have to do the following: Have a go at adding the above lines to your code.\n\nIt is possible to manipulate CSS styles via JavaScript in a variety of ways. To start with, you can get a list of all the stylesheets attached to a document using , which returns an array-like object with objects. You can then add/remove styles as wished. However, we're not going to expand on those features because they are a somewhat archaic and difficult way to manipulate style. There are much easier ways. The first way is to add inline styles directly onto elements you want to dynamically style. This is done with the property, which contains inline styling information for each element in the document. You can set properties of this object to directly update element styles.\n• As an example, try adding these lines to our ongoing example:\n• Reload the page and you'll see that the styles have been applied to the paragraph. If you look at that paragraph in your browser's Page Inspector/DOM inspector, you'll see that these lines are indeed adding inline styles to the document: <p style=\"color: white; background-color: black; padding: 10px; width: 250px; text-align: center;\"> We hope you enjoyed the ride. </p> Note: Notice how the JavaScript property versions of the CSS styles are written in lower camel case whereas the CSS versions are hyphenated (kebab-case) (e.g. versus ). Make sure you don't get these mixed up, otherwise it won't work. There is another common way to dynamically manipulate styles on your document, which we'll look at now.\n• Delete the previous five lines you added to the JavaScript.\n• Add the following inside your HTML :\n• Now we'll turn to a very useful method for general HTML manipulation — — this takes two arguments, the attribute you want to set on the element, and the value you want to set it to. In this case we will set a class name of highlight on our paragraph:\n• Refresh your page, and you'll see no change — the CSS is still applied to the paragraph, but this time by giving it a class that is selected by our CSS rule, not as inline CSS styles. Which method you choose is up to you; both have their advantages and disadvantages. The first method takes less setup and is good for simple uses, whereas the second method is more purist (no mixing CSS and JavaScript, no inline styles, which are seen as a bad practice). As you start building larger and more involved apps, you will probably start using the second method more, but it is really up to you. At this point, we haven't really done anything useful! There is no point using JavaScript to create static content — you might as well just write it into your HTML and not use JavaScript. It is more complex than HTML, and creating your content with JavaScript also has other issues attached to it (such as not being readable by search engines). In the next section we will look at a more practical use of DOM APIs. Note: You can find our finished version of the dom-example.html demo on GitHub (see it live also)."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_css.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/32933985/apply-object-of-style-to-dom-element",
        "document": "I know we can use to apply css to DOM element like this:\n\nI am wondering, if it is possible to apply a style object, something like this:\n\nhow to apply by using , is it possible? ( We are not using jQuery here)"
    },
    {
        "link": "https://stackoverflow.com/questions/3968593/how-can-i-set-multiple-css-styles-in-javascript",
        "document": "Is it possible to set them all together at once, something like this?\n\nI know that I can set them to my element iteratively like this:\n\nI have the following JavaScript variables:\n\nIf you have the CSS values as string and there is no other CSS already set for the element (or you don't care about overwriting), make use of the property: You can also use template literals for an easier, more readable multiline CSS-like syntax: This is good in a sense as it avoids repainting the element every time you change a property (you change them all \"at once\" somehow). On the other side, you would have to build the string first.\n\nUsing plain Javascript, you can't set all the styles at once; you need to use single lines for each of them. However, you don't have to repeat the code over and over; create an object variable to reference it, and you'll make your code much more readable: ...etc. Much easier to read than your example (and frankly, just as easy to read as the jQuery alternative).\n\nThis is an old question but I thought it might be worthwhile to use a function for anyone not wanting to overwrite previously declared styles. The function below still uses Object.assign to properly fix in the styles. Here is what I did Now you can do something like You can make this easier by supplying both the element selector and text into the function and then you won't have to use Object.assign every time. For example function cssFormat(selector, cssText){ let cssObj = cssText.split(\";\"); let css = {}; cssObj.forEach( style => { prop = style.split(\":\"); if(prop.length == 2){ css[prop[0]].trim() = prop[1].trim(); } }) element = document.querySelector(selector); Object.assign(element.style, css); // css, from previous code } cssFormat('body', 'background-color: red; color:white;') ; //or same as above (another sample) cssFormat('body', 'backgroundColor: red; color:white;') ; Note: Make sure your document or target element (for example, body) is already loaded before selecting it.\n\nYou can write a function that will set declarations individually in order not to overwrite any existing declarations that you don't supply. Let's say you have this object parameter list of declarations: You might write a function that looks like this: which takes an and an property list of style declarations to apply to that object. Here's a usage example: // styles to apply const myStyles = { 'background-color': 'magenta', 'border': '10px dotted cyan', 'border-radius': '5px', 'box-sizing': 'border-box', 'color': 'yellow', 'display': 'inline-block', 'font-family': 'monospace', 'font-size': '20px', 'margin': '1em', 'padding': '1em' }; function applyStyles (el, styles) { for (const prop in styles) { el.style.setProperty(prop, styles[prop]); } }; // create example paragraph and append it to the page body const p = document.createElement('p'); p.textContent = 'This is a paragraph.'; document.body.appendChild(p); // when the paragraph is clicked, call the function, providing the // paragraph and myStyles object as arguments p.onclick = (ev) => { applyStyles(p, myStyles); } // this time, target the page body and supply an object literal applyStyles(document.body, {'background-color': 'grey'});"
    },
    {
        "link": "https://stackoverflow.com/questions/36262756/add-multiple-styles-with-javascript",
        "document": "I want to add multiple lines of CSS with JavaScript. I know I can do this:\n\nBut, the above code allows me add just a single CSS Property. If a want to add more than one property, like this:\n\nHow do I add all of this by not repeating:\n\n....again and again. Thanks in advance !"
    },
    {
        "link": "https://javascripttoday.com/blog/setting-and-getting-css-styles-in-javascript",
        "document": "In this article, we’re going to take a look at how we can set and get CSS styling with JavaScript.\n\nLet’s start off with an HTML paragraph tag:\n\nNotice we’re styling the paragraph tag to be of color green. Generally, it’s recommended to avoid inline-styling like this, as it can become quite messy. Nonetheless, let’s take a look at how we can use JavaScript to change the color of the text, and perform some other interesting operations on the paragraph tag.\n\nFirst, let’s store the element in a variable called .\n\nTo recap: we have selected the paragraph tag, storing it in a JavaScript variable, . In order to change the color, we’ll need to attach some methods onto the variable, like so:\n\nThe color of the paragraph should now be blue.\n\nHowever, there’s a problem – the paragraph says “I’m green text”, but now it’s blue. Can we fix this? Of course! Let’s declare a new variable, , and use a template literal to display the appropriate color.\n\nPerfect! A little taste of the power of programming. Try swapping the variable to a color of your choice. As long as the color is known (for example, red, yellow, pink. You can find a list of available colors on W3C), the behavior will be as expected. However, if you were to use a random string of characters within the variable, i.e. , the paragraph will revert to the green color which was obtained from the inline-style.\n\nNote: You can also use hex color codes, such as , but the paragraph will look a bit strange!\n\nAs you might have guessed, you can indeed attach any CSS you’d like to HTML elements. Let’s explore a few examples.\n\nNotice that we’re using camelCase rather than adding a dash (\"-\") between the styling properties (e.g. fontWeight rather than font-weight). This is required if we’re going to set CSS with JavaScript.\n\nSo far, we’ve only been setting a single CSS property at a time, but there are two ways which allow us to set multiple properties.\n\nCssText is simply a way to set multiple styles to an element.\n\nLet’s take our example above, and combine some of the code:\n\nAnd that’s it! We’ve set multiple CSS properties using . Notice we’ve included a dash this time, as it’s necessary.\n\nAnother way to set multiple CSS properties with JavaScript is with the function. takes two arguments:\n• - A string specifying the name of the attribute whose value is to be set.\n• - A string containing the value to assign to the attribute. Any non-string value specified is converted automatically into a string.\n\nIn the example above, is the string specifying the name of the attribute, and the string after (the styling) is the .\n\nIf, for any reason, you’d like to unset the attributes, you can make use of , like so:\n\nis only passed one argument, the attribute with the specified name from the element.\n\nNote: When you set CSS with or , any inline-CSS you’ve already had will be overwritten.\n\nGetting CSS styles on an element\n\nIt’s quite easy to look at CSS styling attached to an element. Let’s explore two different ways. You are probably familiar with the first, .\n\nIf we click that first console result, we’ll get a very long list of possible properties we can set with JavaScript:\n\nNote: will only display inline-styles. It will not show you styling from an external file (e.g. ).\n\nIf we want to display all of the styling within a page, we can use .\n\n“The method returns an object containing the values of all CSS properties of an element, after applying active stylesheets and resolving any basic computation those values may contain.”\n\nNotice we no longer have empty strings. Instead, we’re seeing all of the styling set by various sources, including the browser.\n\nIn this article, we’ve looked at a few ways to set CSS with JavaScript. Although it isn’t really common for modern developers to write JavaScript like this, it’s still useful to know how to do it. The modern-day frameworks and libraries compile to vanilla JavaScript, afterall."
    },
    {
        "link": "https://w3schools.com/jsref/prop_style_csstext.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2015 .\n\nThe property of the interface returns or sets the text of the element's inline style declaration only.\n\nTo be able to set a stylesheet rule dynamically, see Using dynamic styling information.\n\nNot to be confused with stylesheet style-rule ."
    }
]