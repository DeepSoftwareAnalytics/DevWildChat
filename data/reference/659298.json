[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
        "document": "The element is so powerful because of its attributes; the attribute, described with examples above, being the most important. Since every element, regardless of type, is based on the interface, they technically share the exact same set of attributes. However, in reality, most attributes have an effect on only a specific subset of input types. In addition, the way some attributes impact an input depends on the input type, impacting different input types in different ways. This section provides a table listing all the attributes with a brief description. This table is followed by a list describing each attribute in greater detail, along with which input types they are associated with. Those that are common to most or all input types are defined in greater detail below. Attributes that are unique to particular input types—or attributes which are common to all input types but have special behaviors when used on a given input type—are instead documented on those types' pages. Attributes for the element include the global HTML attributes and additionally: alt attribute for the image type. Required for accessibility all except , , and all except , , and buttons Whether the command or control is checked Name of form field to use for sending the element's directionality in form submission Whether the form control is disabled URL to use for form submission Form data set encoding type to use for form submission HTTP method to use for form submission Same as height attribute for ; vertical dimension all except , , , , and buttons Value of the id attribute of the of autocomplete options Boolean. Whether to allow multiple values Name of the form control. Submitted with the form as part of a name/value pair Pattern the must match to be valid Text that appears in the form control when it has no value set Designates an as a control for a popover element Specifies the action that a popover control should perform all except , , , , , and buttons Boolean. The value is not editable all except , , , and buttons Boolean. A value is required or must be checked for the form to be submittable Same as attribute for ; address of image resource The value of the control. When specified in the HTML, corresponds to the initial value Same as attribute for A few additional non-standard attributes are listed following the descriptions of the standard attributes.\n\nLabels are needed to associate assistive text with an . The element provides explanatory information about a form field that is always appropriate (aside from any layout concerns you have). It's never a bad idea to use a to explain what should be entered into an or . The semantic pairing of and elements is useful for assistive technologies such as screen readers. By pairing them using the 's attribute, you bond the label to the input in a way that lets screen readers describe inputs to users more precisely. It does not suffice to have plain text adjacent to the element. Rather, usability and accessibility requires the inclusion of either implicit or explicit : <!-- inaccessible --> <p>Enter your name: <input id=\"name\" type=\"text\" size=\"30\" /></p> <!-- implicit label --> <p> <label>Enter your name: <input id=\"name\" type=\"text\" size=\"30\" /></label> </p> <!-- explicit label --> <p> <label for=\"name\">Enter your name: </label> <input id=\"name\" type=\"text\" size=\"30\" /> </p> The first example is inaccessible: no relationship exists between the prompt and the element. In addition to an accessible name, the label provides a larger 'hit' area for mouse and touch screen users to click on or touch. By pairing a with an , clicking on either one will focus the . If you use plain text to \"label\" your input, this won't happen. Having the prompt part of the activation area for the input is helpful for people with motor control conditions. As web developers, it's important that we never assume that people will know all the things that we know. The diversity of people using the web—and by extension your website—practically guarantees that some of your site's visitors will have some variation in thought processes and/or circumstances that leads them to interpret your forms very differently from you without clear and properly-presented labels. The attribute lets you specify text that appears within the element's content area itself when it is empty. The placeholder should never be required to understand your forms. It is not a label, and should not be used as a substitute, because it isn't. The placeholder is used to provide a hint as to what an inputted value should look like, not an explanation or prompt. Not only is the placeholder not accessible to screen readers, but once the user enters any text into the form control, or if the form control already has a value, the placeholder disappears. Browsers with automatic page translation features may skip over attributes when translating, meaning the may not get translated. Note: Don't use the attribute if you can avoid it. If you need to label an element, use the element.\n\nWarning: Client-side validation is useful, but it does not guarantee that the server will receive valid data. If the data must be in a specific format, always verify it also on the server-side, and return a HTTP response if the format is invalid. In addition to using CSS to style inputs based on the or UI states based on the current state of each input, as noted in the UI pseudo-classes section above, the browser provides for client-side validation on (attempted) form submission. On form submission, if there is a form control that fails constraint validation, supporting browsers will display an error message on the first invalid form control; displaying a default message based on the error type, or a message set by you. Some input types and other attributes place limits on what values are valid for a given input. For example, means only the number 2, 4, 6, 8, or 10 are valid. Several errors could occur, including a error if the value is less than 2, if greater than 10, if the value is a number between 2 and 10, but not an even integer (does not match the requirements of the attribute), or if the value is not a number. For the input types whose domain of possible values is periodic (that is, at the highest possible value, the values wrap back around to the beginning rather than ending), it's possible for the values of the and properties to be reversed, which indicates that the range of permitted values starts at , wraps around to the lowest possible value, then continues on until is reached. This is particularly useful for dates and times, such as when you want to allow the range to be from 8 PM to 8 AM: Specific attributes and their values can lead to a specific error : Validity object errors depend on the attributes and their values: Occurs when the value is greater than the maximum value as defined by the attribute Occurs when the number of characters is greater than the number allowed by the property Occurs when the value is less than the minimum value as defined by the attribute Occurs when the number of characters is less than the number required by the property Occurs when a pattern attribute is included with a valid regular expression and the does not match it. Occurs when the attribute is present but the value is or radio or checkbox is not checked. The value doesn't match the step increment. Increment default is , so only integers are valid on is step is not included. will never throw this error. Occurs when the value is not of the correct type, for example an email does not contain an or a url doesn't contain a protocol. If a form control doesn't have the attribute, no value, or an empty string, is not invalid. Even if the above attributes are present, with the exception of , an empty string will not lead to an error. We can set limits on what values we accept, and supporting browsers will natively validate these form values and alert the user if there is a mistake when the form is submitted. In addition to the errors described in the table above, the interface contains the , , and boolean readonly properties. The validity object includes: For each of these Boolean properties, a value of indicates that the specified reason validation may have failed is true, with the exception of the property, which is if the element's value obeys all constraints. If there is an error, supporting browsers will both alert the user and prevent the form from being submitted. A word of caution: if a custom error is set to a truthy value (anything other than the empty string or ), the form will be prevented from being submitted. If there is no custom error message, and none of the other properties return true, will be true, and the form can be submitted. function validate(input) { let validityState_object = input.validity; if (validityState_object.valueMissing) { input.setCustomValidity(\"A value is required\"); } else if (validityState_object.rangeUnderflow) { input.setCustomValidity(\"Your value is too low\"); } else if (validityState_object.rangeOverflow) { input.setCustomValidity(\"Your value is too high\"); } else { input.setCustomValidity(\"\"); } } The last line, setting the custom validity message to the empty string is vital. If the user makes an error, and the validity is set, it will fail to submit, even if all the values are valid, until the message is . If you want to present a custom error message when a field fails to validate, you need to use the Constraint Validation API available on (and related) elements. Take the following form: The basic HTML form validation features will cause this to produce a default error message if you try to submit the form with either no valid filled in, or a value that does not match the . If you wanted to instead display custom error messages, you could use JavaScript like the following: const nameInput = document.querySelector(\"input\"); nameInput.addEventListener(\"input\", () => { nameInput.setCustomValidity(\"\"); nameInput.checkValidity(); }); nameInput.addEventListener(\"invalid\", () => { if (nameInput.value === \"\") { nameInput.setCustomValidity(\"Enter your username!\"); } else { nameInput.setCustomValidity( \"Usernames can only contain upper and lowercase letters. Try again!\", ); } }); The example renders like so:\n• We check the valid state of the input element every time its value is changed by running the method via the event handler.\n• If the value is invalid, an event is raised, and the event handler function is run. Inside this function we work out whether the value is invalid because it is empty, or because it doesn't match the pattern, using an block, and set a custom validity error message.\n• As a result, if the input value is invalid when the submit button is pressed, one of the custom error messages will be shown.\n• If it is valid, it will submit as you'd expect. For this to happen, the custom validity has to be cancelled, by invoking with an empty string value. We therefore do this every time the event is raised. If you don't do this, and a custom validity was previously set, the input will register as invalid, even if it currently contains a valid value on submission. Note: Always validate input constraints both client side and server side. Constraint validation doesn't remove the need for validation on the server side. Invalid values can still be sent by older browsers or by bad actors. Note: Firefox supported a proprietary error attribute — — for many versions, which allowed you set custom error messages in a similar way. This has been removed as of version 66 (see Firefox bug 1513890)."
    },
    {
        "link": "https://w3schools.com/html/html_form_attributes.asp",
        "document": "This chapter describes the different attributes for the HTML element.\n\nThe input attribute specifies an initial value for an input field:\n\nThe input attribute specifies that an input field is read-only.\n\nA read-only input field cannot be modified (however, a user can tab to it, highlight it, and copy the text from it).\n\nThe value of a read-only input field will be sent when submitting the form!\n\nThe input attribute specifies that an input field should be disabled.\n\nThe value of a disabled input field will not be sent when submitting the form!\n\nThe input attribute specifies the visible width, in characters, of an input field.\n\nThe default value for is 20.\n\nNote: The attribute works with the following input types: text, search, tel, url, email, and password.\n\nThe input attribute specifies the maximum number of characters allowed in an input field.\n\nNote: When a is set, the input field will not accept more than the specified number of characters. However, this attribute does not provide any feedback. So, if you want to alert the user, you must write JavaScript code.\n\nThe input and attributes specify the minimum and maximum values for an input field.\n\nThe and attributes work with the following input types: number, range, date, datetime-local, month, time and week.\n\nTip: Use the max and min attributes together to create a range of legal values.\n\nThe input attribute specifies that the user is allowed to enter more than one value in an input field.\n\nThe attribute works with the following input types: email, and file.\n\nThe input attribute specifies a regular expression that the input field's value is checked against, when the form is submitted.\n\nThe attribute works with the following input types: text, date, search, url, tel, email, and password.\n\nTip: Use the global title attribute to describe the pattern to help the user.\n\nTip: Learn more about regular expressions in our JavaScript tutorial.\n\nThe input attribute specifies a short hint that describes the expected value of an input field (a sample value or a short description of the expected format).\n\nThe short hint is displayed in the input field before the user enters a value.\n\nThe attribute works with the following input types: text, search, url, number, tel, email, and password.\n\nThe input attribute specifies that an input field must be filled out before submitting the form.\n\nThe attribute works with the following input types: text, search, url, tel, email, password, date pickers, number, checkbox, radio, and file.\n\nThe input attribute specifies the legal number intervals for an input field.\n\nExample: if step=\"3\", legal numbers could be -3, 0, 3, 6, etc.\n\nTip: This attribute can be used together with the max and min attributes to create a range of legal values.\n\nThe attribute works with the following input types: number, range, date, datetime-local, month, time and week.\n\nThe input attribute specifies that an input field should automatically get focus when the page loads.\n\nThe input and attributes specify the height and width of an element.\n\nTip: Always specify both the height and width attributes for images. If height and width are set, the space required for the image is reserved when the page is loaded. Without these attributes, the browser does not know the size of the image, and cannot reserve the appropriate space to it. The effect will be that the page layout will change during loading (while the images load).\n\nThe input attribute refers to a element that contains pre-defined options for an <input> element.\n\nThe input attribute specifies whether a form or an input field should have autocomplete on or off.\n\nAutocomplete allows the browser to predict the value. When a user starts to type in a field, the browser should display options to fill in the field, based on earlier typed values.\n\nThe attribute works with and the following types: text, search, url, tel, email, password, datepickers, range, and color.\n\nTip: In some browsers you may need to activate an autocomplete function for this to work (Look under \"Preferences\" in the browser's menu)."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/HTML5_input_types",
        "document": "In the previous article we looked at the element, covering the original values of the attribute available since the early days of HTML. Now we'll look in detail at the functionality of some input types that were added later. To understand the newer input type values available to create native form controls, and how to implement them using HTML. Because HTML form control appearance may be quite different from a designer's specifications, web developers sometimes build their own custom form controls. We cover this in an advanced tutorial: How to build custom form widgets.\n\nThis type of field is set using the value for the attribute: When this is used, the value must be an email address to be valid. Any other content causes the browser to display an error when the form is submitted. You can see this in action in the screenshot below. You can use the attribute in combination with the input type to allow several comma-separated email addresses to be entered in the same input: On some devices — notably, touch devices with dynamic keyboards like smartphones — a different virtual keypad might be presented that is more suitable for entering email addresses, including the key: Note: You can find examples of the basic text input types at basic input examples (see the source code also). This is another good reason for using these newer input types, improving the user experience for users of these devices.\n\nAs you can see above, — along with other newer types — provides built-in client-side error validation, performed by the browser before the data gets sent to the server. It is a helpful aid to guide users to fill out a form accurately, and it can save time: it is useful to know that your data is not correct immediately, rather than having to wait for a round trip to the server. But it should not be considered an exhaustive security measure! Your apps should always perform security checks on any form-submitted data on the server-side as well as the client-side, because client-side validation is too easy to turn off, so malicious users can still easily send bad data through to your server. Read Website security for an idea of what could happen; implementing server-side validation is somewhat beyond the scope of this module, but you should bear it in mind. Note that is a valid email address according to the default provided constraints. This is because the input type allows intranet email addresses by default. To implement different validation behavior, you can use the attribute. You can also customize the error messages. We'll talk about how to use these features in the Client-side form validation article later on. Note: If the data entered is not an email address, the pseudo-class will match, and the property will return .\n\nSearch fields are intended to be used to create search boxes on pages and apps. This type of field is set by using the value for the attribute: The main difference between a field and a field is how the browser styles its appearance. In some browsers, fields are rendered with rounded corners. In some browsers, an \"Ⓧ\" clear icon is displayed, which clears the field of any value when clicked. This clear icon only appears if the field has a value, and, apart from Safari, it is only displayed when the field is focused. Additionally, on devices with dynamic keyboards, the keyboard's enter key may read \"search\", or display a magnifying glass icon. Another worth-noting feature is that the values of a field can be automatically saved and re-used to offer auto-completion across multiple pages of the same website; this tends to happen automatically in most modern browsers.\n\nA special field for filling in phone numbers can be created using as the value of the attribute: When accessed via a touch device with a dynamic keyboard, most devices will display a numeric keypad when is encountered, meaning this type is useful whenever a numeric keypad is useful, and doesn't just have to be used for telephone numbers. Due to the wide variety of phone number formats around the world, this type of field does not enforce any constraints on the value entered by a user (this means it may include letters, etc.). As we mentioned earlier, the attribute can be used to enforce constraints, which you'll learn about in Client-side form validation.\n\nControls for entering numbers can be created with an of . This control looks like a text field but allows only floating-point numbers, and usually provides buttons in the form of a spinner to increase and decrease the value of the control. On devices with dynamic keyboards, the numeric keyboard is generally displayed. With the input type, you can constrain the minimum and maximum values allowed by setting the and attributes. You can also use the attribute to set the increment increase and decrease caused by pressing the spinner buttons. By default, the number input type only validates if the number is an integer, as the attribute defaults to . To allow float numbers, specify or a specific value, like to restrict the floating point. If omitted, as the value defaults to , only whole numbers are valid. Let's look at some examples: This example creates a number control whose valid value is restricted to an odd value between and . The increase and decrease buttons change the value by , starting with the value. <label for=\"number\">Enter an odd number between 1 and 10:</label><br /> This example creates a number control whose value is restricted to any value between and inclusive, and whose increase and decrease buttons change its value by . The input type makes sense when the range of valid values is limited, such as a person's age or height. If the range is too large for incremental increases to make sense (such as USA ZIP codes, which range from to ), the type might be a better option; it provides the numeric keypad while forgoing the number's spinner UI feature.\n\nAnother way to pick a number is to use a slider. You see these quite often on sites like shopping sites where you want to set a maximum property price to filter by. Let's look at a live example to illustrate this: Usage-wise, sliders are less accurate than text fields. Therefore, they are used to pick a number whose precise value is not necessarily important. A slider is created using the with its attribute set to the value . The slider-thumb can be moved via mouse or touch, or with the arrows of the keypad. It's important to properly configure your slider. To that end, it's highly recommended that you set the , , and attributes which set the minimum, maximum, and increment values, respectively. Let's look at the code behind the above example, so you can see how it's done. First of all, the basic HTML: This example creates a slider whose value may range between and , which increments/decrements by 1000 at a time. We've given it a default value of , using the attribute. One problem with sliders is that they don't offer any kind of visual feedback as to what the current value is. This is why we've included an element to contain the current value. You could display an input value or the output of a calculation inside any element, but is special — like — and it can take a attribute that allows you to associate it with the element or elements that the output value came from. To actually display the current value, and update it as it changes, you must use JavaScript, which can be accomplished with a few statements: Here we store references to the input and the in two variables. Then we immediately set the 's to the current of the input. Finally, an event listener is set to ensure that whenever the range slider is moved, the 's is updated to the new value.\n\nGenerally, for a good user experience when gathering date and time values, it is important to provide a calendar selection UI. These enable users to select dates without needing to context switch to a native calendar application or potentially entering them in differing formats that are hard to parse. The last minute of the previous millennium can be expressed in the following different ways: , , or . HTML date controls are available to handle this specific kind of data, providing calendar widgets and making the data uniform. A date and time control is created using the element and an appropriate value for the attribute, depending on whether you wish to collect dates, times, or both. Here's a live example: Let's look at the different available types in brief. Note that the usage of these types is quite complex, especially considering browser support (see below); to find out the full details, follow the links below to the reference pages for each type, including detailed examples."
    },
    {
        "link": "https://medium.com/@greennolgaa/html-input-types-best-practices-and-tips-6939251e8d70",
        "document": "HTML, or HyperText Markup Language, is the standard markup language used to create web pages. HTML input types are the various types of form controls that can be used to collect information from users on web pages. There are many different HTML input types available, each with its own unique features and use cases.\n\nIn this article, we will take a closer look at some of the most common HTML input types and how they can be used to create effective web forms.\n\nText input is one of the most common input types HTML5. It allows users to enter text into a form field, such as their name or email address. The following is an example of a basic text input field:\n\nThe attribute is used to specify the name of the input field, while the attribute provides a hint or example of the type of information the user should enter.\n\nPassword input is another common HTML input type. It is used to collect sensitive information, such as passwords or PINs. The following is an example of a basic password input field:\n\nThe attribute is set to \"password\", which masks the characters entered by the user. This helps to protect sensitive information from being viewed by others.\n\nRadio buttons are used to present users with a set of options, of which only one can be selected. The following is an example of a basic radio button group:\n\nThe attribute is used to group the radio buttons together, while the attribute is used to specify the value of the selected option.\n\nCheckboxes are similar to radio buttons, but they allow users to select multiple options. The following is an example of a basic checkbox group:\n\nThe attribute is used to group the checkboxes together, while the attribute is used to specify the value of the selected options.\n\nSelect dropdowns are used to present users with a list of options, of which only one can be selected. The following is an example of a basic select dropdown:\n\nThe attribute is used to specify the name of the input field, while the tags are used to define the options in the dropdown list.\n\nTextarea is used to allow users to enter a larger amount of text, such as a comment or message. The following is an example of a basic textarea input:\n\nThe attribute is used to specify the name of the input field, while the attribute provides a hint or example of the type of information the user should enter.\n\nThe color input type allows users to select a color using a color picker. The value returned is a hexadecimal color code.\n\nThe range input type creates a slider control that allows users to select a value within a specified range. It is commonly used for volume controls, brightness controls, and other similar applications.\n\nThe date and time input types allow users to select a date or time using a graphical calendar or clock interface. These input types also allow developers to specify the minimum and maximum values for the date and time that can be selected.\n\nThe search input type creates a text box that is specifically designed for search input. It typically includes a magnifying glass icon that triggers the search when clicked.\n\nThe URL and Email input types are designed to specifically handle URLs and email addresses respectively. They include validation to ensure that the input entered is in the correct format.\n\nThese are just a few of the less commonly used input types available in HTML. By using these input types appropriately, HTML developer can improve the usability and functionality of their web applications.\n\nHTML input types provide a range of options for developers to collect various types of user input on web pages. However, it’s important to use them properly and follow the best practices to ensure a smooth and user-friendly experience. In this section, we’ll cover some of the best practices for using HTML input types.\n• Use the right type for the input: It’s important to choose the right HTML input type for each field to ensure that users can enter the correct type of data. For example, use the “email” input type for email addresses, “tel” for phone numbers, “number” for numeric input, and “date” for date fields.\n• Use labels: Always include labels for input fields to provide context and improve accessibility. Use the “for” attribute to link the label to the input field for users who click on the label to focus on the input field.\n• Use placeholders sparingly: Placeholders can be useful to provide examples of the type of data expected in the input field. However, it’s important not to rely on them too much as they disappear as soon as users start typing. Additionally, screen readers may not read placeholders, so it’s important to include labels as well.\n• Use autocomplete: Setting autocomplete values for input fields can help users fill out forms quickly and easily. Use the “autocomplete” attribute to specify the type of data that should be suggested for the field.\n• Use validation: HTML input types can provide some basic validation, but it’s important to add additional validation on the server-side to ensure that the data is accurate and secure. Use regular expressions or JavaScript to validate user input and provide appropriate error messages if necessary.\n• Use radio buttons and checkboxes for multiple selections: When there are multiple options for users to choose from, use radio buttons for single selections and checkboxes for multiple selections. This provides a clear and easy-to-use interface for users.\n• Use range inputs for slider controls: Range inputs provide a slider control that users can drag to select a value within a range. This can be a useful way to collect data for things like price ranges or quantities.\n• Use file inputs for uploading files: Use the “file” input type to allow users to upload files. This can be useful for things like resumes, images, or documents.\n• Use date and time inputs appropriately: Date and time inputs can be useful for collecting data on events, appointments, and other time-related information. However, it’s important to use them properly and follow best practices to ensure that they are user-friendly and accessible.\n\nIn conclusion, using the right HTML input types and following best practices can greatly improve the user experience and usability of web forms. By keeping these tips in mind, html developers can ensure that their forms are easy to use, accessible, and provide accurate and secure data.\n\nIn conclusion, HTML input types are essential elements of any web development project. The various input types allow developers to create forms that are user-friendly and provide a better user experience. Knowing the different input types and how to use them correctly is crucial for creating high-quality web applications.\n\nWhen working with HTML input types, it’s important to follow best practices such as using appropriate labels and placeholders, providing clear instructions, and validating user input. By doing so, developers can ensure that their forms are accessible, usable, and provide a smooth user experience.\n\nIf you’re looking for expert HTML developers to help you with your web development projects, CronJ is a great choice. With a team of experienced developers, we can help you create user-friendly, high-quality web applications that meet your specific needs. Contact us today to learn more.\n• Web App Development in 2023: Everything You Need to Know"
    },
    {
        "link": "https://w3schools.com/tags/tag_input.asp",
        "document": "The tag specifies an input field where the user can enter data.\n\nThe element is the most important form element.\n\nThe element can be displayed in several ways, depending on the type attribute.\n\nThe different input types are as follows:\n\nLook at the type attribute to see examples for each input type!\n\nTip: Always use the <label> tag to define labels for , , , , and .\n\nThe tag also supports the Global Attributes in HTML.\n\nThe tag also supports the Event Attributes in HTML."
    },
    {
        "link": "https://w3schools.com/jsref/met_node_appendchild.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild",
        "document": "The method of the interface adds a node to the end of the list of children of a specified parent node. Note: If the given child is a reference to an existing node in the document, moves it from its current position to the new position. If the given child is a , the entire contents of the are moved into the child list of the specified parent node. returns the newly appended node, or if the child is a , the emptied fragment. Note: Unlike this method, the method supports multiple arguments and appending strings. You can prefer using it if your node is an element.\n\nIf the given child is a reference to an existing node in the document, moves it from its current position to the new position — there is no requirement to remove the node from its parent node before appending it to some other node. This means that a node can't be in two points of the document simultaneously. The method can be used to make a copy of the node before appending it under the new parent. Copies made with are not automatically kept in sync. returns the newly appended node, instead of the parent node. This means you can append the new node as soon as it's created without losing reference to it: const paragraph = document.body.appendChild(document.createElement(\"p\")); // You can append more elements to the paragraph later On the other hand, you cannot use in a fluent API fashion (like jQuery). // This doesn't append three paragraphs: // the three elements will be nested instead of siblings document.body .appendChild(document.createElement(\"p\")) .appendChild(document.createElement(\"p\")) .appendChild(document.createElement(\"p\"));"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",
        "document": "Note: Check the browser compatibility section for support, and the attribute reference for caveats on implementation reality of custom built-in elements.\n\nThe following example snippet is taken from our expanding-list-web-component example (see it live also). In this case, our custom element extends the , which represents the element.\n\nIf we wanted to create an instance of this element programmatically, we'd use a call along the following lines:\n\nThe new element will be given an attribute whose value is the custom element's tag name.\n\nNote: For backwards compatibility with previous versions of the Custom Elements specification, some browsers will allow you to pass a string here instead of an object, where the string's value is the custom element's tag name."
    },
    {
        "link": "https://hansen-breanna.github.io/DOM.html",
        "document": "DOM stands for Document Object Model. The model is used to change how HTML is added, deleted or changed on a page. For instance, you can add on sections to a list or change how headers are styled. All HTML elements are defined as objects. A property is value you can get or set and method is an action you can do. The most common way to access an element is by using \"document.getElementById\". This is the method. The property is what is added on after the period right after the method.\n\nHTML elements can be found with a script using their \"id\", tag name, or class name. When searching a whole document you use\n\nThe footer on this page is created using querySelector. All links in this website are styled using querySelectorAll. Adding an enables you to have code that runs only when the event happens. Multiple functions can be assigned to the same id and event action. The event type and function are required parameters. This statement in the nav was created using createElement. We can remove an item from a list with We can replace an item on a list with something different with The clone node is used when you want to copy an already existing element. The item in the array is a boolean value. If it is true, the clone will have all the child elements the parent element does. Adds a specified element before another child element. The method is called by the parent method. Creating document fragments allows you to add multiple elements in bulk. This saves on power and the possiblity of layout change problems. This method checks for any CSS styling for an element before you make any changes. It returns the read-only values off all properties of an element. The pseudo element is optional and is for , , etc. The setAttribute either adds to or changes the attribute of an element."
    },
    {
        "link": "https://stackoverflow.com/questions/18156620/createelement-and-appendchild-in-javascript",
        "document": "The issue is that you both supply a on your tag and provide content within it. That's invalid, you can do one or the other, not both. Most browsers will use the and disregard the content.\n\nSeparate from that, creating an element doesn't put it in the DOM. You have to add it somewhere (via or or similar)."
    }
]