[
    {
        "link": "https://stackoverflow.com/questions/26001920/calculating-sales-taxes-using-functions-in-python",
        "document": "I can't get this program in Python 3.3.5 to run and not sure what I did wrong. The program is to ask the user to enter the total sales for the month, then calculate and display the the following, the amount of county sale (county sales tax is 2.5percent) and amount of state sales tax (state sales taxrate is .05) and the total sales tax (county plus state) I've copied and pasted what I've done so far."
    },
    {
        "link": "https://openstax.org/books/introduction-python-programming/pages/10-4-conditionals-and-looping-in-dictionaries",
        "document": "This book may not be used in the training of large language models or otherwise be ingested into large language models or generative AI offerings without OpenStax's permission.\n\nWant to cite, share, or modify this book? This book uses the Creative Commons Attribution License and you must attribute OpenStax.\n• If you are redistributing all or part of this book in a print format, then you must include on every physical page the following attribution:\n• If you are redistributing all or part of this book in a digital format, then you must include on every digital page view the following attribution:\n• Use the information below to generate a citation. We recommend using a citation tool such as this one.\n\n© Jul 30, 2024 OpenStax. Textbook content produced by OpenStax is licensed under a Creative Commons Attribution License . The OpenStax name, OpenStax logo, OpenStax book covers, OpenStax CNX name, and OpenStax CNX logo are not subject to the Creative Commons license and may not be reproduced without the prior and express written consent of Rice University."
    },
    {
        "link": "https://developers.taxjar.com/api/reference",
        "document": "Welcome to the TaxJar Sales Tax API! You can use our API to get information on sales tax rates, categories or upload transactions.\n\nWe currently provide API clients for the following languages:\n• C# / .NET Sales Tax API via NuGet as\n• Go Sales Tax API as from\n\nBefore getting started, you’ll need to sign up for TaxJar and get an API key. If you have any questions or would like to request support for a new client language, feel free to contact us.\n\nTaxJar uses API keys to allow access to the API. If you’re new to TaxJar, you’ll need to sign up for an account to get your API key. Otherwise, log in and go to Account > API Access to generate a new API token.\n\nTaxJar expects the API key to be included in all API requests to the server using a header like the following:\n\nTaxJar has introduced API versioning to deliver enhanced validations and features. To take advantage of an API version, must be specified in API call request headers.\n\naccepts a date in the form of a string: . A valid version must be passed or the value will be ignored.\n\nFor more details, see the API Changelog.\n\nEach sales tax calculation or rate lookup request made to our API results in a “transaction”. These transactions will be counted toward your monthly plan limit. Overage fees are charged separately if you exceed your plan limit during busier months. You’ll always remain on the same plan until you decide to upgrade. You can check your API usage under “Transaction History” from Plans & Billing in the TaxJar app. Hover over the transaction counts for a breakdown of imported orders and calculations.\n\nView our pricing to find a plan that works best for you. We also recommend our guide on avoiding unnecessary API calls to reduce your API usage and save money.\n\nTaxJar has limited functionality for international calculations and it is only supported for users who have this feature currently implemented. If you need a global tax solution, you should consider Stripe Tax. You can learn more about Stripe Tax here. If you have additional questions please reach out to [email protected].\n\nTaxJar API endpoints provide detailed US-based sales tax rates and calculations. They also support extended US-based reporting and filing capabilities for TaxJar users.\n\nThe TaxJar API provides product-level tax rules for a subset of product categories. These categories are to be used for products that are either exempt from sales tax in some jurisdictions or are taxed at reduced rates. You need not pass in a product tax code for sales tax calculations on product that is fully taxable. Simply leave that parameter out.\n\nWe will be expanding support for additional, less common categories over time. If you would like to request the addition of a new product category, please email us at [email protected].\n\nReturns a JSON object with an array of product categories and corresponding tax codes. The following categories are currently supported:\n\nShows the sales tax that should be collected for a given order.\n• None Either or parameters are required to perform tax calculations.\n• None The parameter is required when is ‘US’.\n• None The parameter is required when is ‘US’ or ‘CA’.\n• None Either an address on file, parameter, or parameters are required to perform tax calculations. Providing in API calls will override TaxJar Account ‘State Settings’ configurations.\n\nReturns a JSON object with sales tax for a given order. If available, returns a breakdown of rates by jurisdiction at the order, shipping, and line item level.\n\nManage your transactions for automated sales tax reporting and filing in TaxJar. These endpoints only affect orders and refunds created specifically through the API, not transactions from other channels.\n\nWe currently support reporting and filing in the United States.\n\nUse to list transactions for a specific date. Otherwise, use and for a range of dates.\n\nReturns an JSON object with an array of order IDs created through the API.\n\nShows an existing order transaction created through the API.\n\nReturns an JSON object with details of a given order transaction created through the API.\n• None Either an address on file or parameters are required to create order transactions.\n• None The should only include alphanumeric characters, underscores, and dashes.\n• None The may be a date ‘2015-05-25’, an ISO UTC date/time ‘2015-05-25T13:05:45’, or an ISO date/time with zone offset ‘2015-05-25T13:05:45-05:00’.\n• None We recommend passing positive values for monetary amounts when creating or updating order transactions. Values will be signed automatically regardless of what you send in. Do not update existing orders with negative amounts to indicate a refund. Instead, create a refund transaction.\n\nReturns an JSON object with details of the new order transaction.\n\nUpdates an existing order transaction created through the API.\n• None Either an address on file or parameters are required to update order transactions.\n• None The may be a date ‘2015-05-25’, an ISO UTC date/time ‘2015-05-25T13:05:45’, or an ISO date/time with zone offset ‘2015-05-25T13:05:45-05:00’.\n\nReturns an JSON object with details of the updated order transaction.\n\nDeletes an existing order transaction created through the API.\n\nReturns an JSON object with the deleted order transaction identifiers.\n\nUse to list transactions for a specific date. Otherwise, use and for a range of dates.\n\nReturns a JSON object with an array of refund IDs created through the API.\n\nShows an existing refund transaction created through the API.\n\nReturns a JSON object with details of a given refund transaction created through the API.\n• None Either an address on file or parameters are required to create refund transactions.\n• None The should only include alphanumeric characters, underscores, and dashes.\n• None The may be a date ‘2015-05-25’, an ISO UTC date/time ‘2015-05-25T13:05:45’, or an ISO date/time with zone offset ‘2015-05-25T13:05:45-05:00’.\n• None We recommend passing negative values for monetary amounts when creating or updating refund transactions. Values will be signed automatically regardless of what you send in.\n\nReturns a JSON object with details of the new refund transaction.\n\nUpdates an existing refund transaction created through the API.\n• None Either an address on file or parameters are required to update refund transactions.\n• None The may be a date ‘2015-05-25’, an ISO UTC date/time ‘2015-05-25T13:05:45’, or an ISO date/time with zone offset ‘2015-05-25T13:05:45-05:00’.\n\nReturns a JSON object with details of the updated refund transaction.\n\nDeletes an existing refund transaction created through the API.\n\nManage your exempt customers (wholesale, government, etc) for sales tax calculations, reporting, and filing in TaxJar. After creating a new customer, pass in the to our tax and transaction endpoints to fully exempt them from sales tax.\n\nReturns a JSON object with an array of customer IDs created through the API.\n\nShows an existing customer created through the API.\n\nReturns a JSON object with details of a customer created through the API.\n\nReturns a JSON object with details of the new customer.\n\nUpdates an existing customer created through the API.\n\nReturns a JSON object with details of the updated customer.\n\nDeletes an existing customer created through the API.\n\nShows the sales tax rates for a given location.\n\nPlease note this endpoint only returns the full combined rate for a given location. It does not support nexus determination, sourcing based on a ship from and ship to address, shipping taxability, product exemptions, customer exemptions, or sales tax holidays. We recommend using our taxes endpoint to accurately calculate sales tax for an order.\n\nReturns a JSON object with rates for a given location broken down by state, county, city, and district.\n\nReturns a JSON object with an array of nexus regions sorted alphabetically.\n\nValidates a customer address and returns back a collection of address matches. Address validation requires a TaxJar Professional or higher subscription.\n\nReturns an JSON object with an array of address matches. If no addresses are found, a 404 response is returned.\n\nRetrieve minimum and average sales tax rates by region as a backup.\n\nReturns a JSON object with an array of summarized rates for each region/state.\n\nTaxJar provides a sandbox environment for automated testing and development on all TaxJar Professional or higher plans. After generating a sandbox API token, point your API client to the sandbox environment:\n\nFor sales tax calculations, you’ll get similar results as you would expect from our production API. These should not be relied upon for accurate rates in all situations, and are meant to validate request and response formatting. Transaction endpoints for orders and refunds return stubbed responses. You can pass transactions to our sandbox to validate your data and ensure it will be accepted by TaxJar.\n\nSome of the production API endpoints are not fully supported in the sandbox environment.\n\nTo mock specific error response codes, pass a custom header using the or method available in our API clients.\n\nWe limit API requests to 10,000 per minute for TaxJar Professional plans. Our TaxJar Premium plans include an increased limit of 25,000 per minute.\n\nIf you’re exceeding this rate and encountering 429 errors, review the following:\n• Only make calculation requests in states / regions where you have nexus.\n• Cache responses if the order details haven’t changed since the last calculation at checkout.\n• Use our summarized rates endpoint as a fallback to ensure sales tax is collected.\n\nThe TaxJar API uses the following error codes:\n\nIf you receive the message “No from address, no nexus address, and no address on file”, we recommend providing or depending on the endpoint’s accepted parameters. Otherwise sign in and provide your business address and locations in TaxJar.\n• Invalid ZIP and state combinations for , and ,\n\nThere are additional scenarios in which may return a 400 error code:\n• No or are provided\n• Missing when is or\n\nWhen using the endpoints, we return the following error messages:\n• param does not equal sum of +\n\nVerify your API token is correct and make sure you’re correctly setting the Authorization header.\n\nMake sure you have an active API token with TaxJar by reviewing your account. Your trial or subscription may have expired. If you’re still not sure what’s wrong, contact us and we’ll investigate.\n\nThis error occurs most often when posting form-encoded data with parameters such as or . If your code looks correct, try submitting the request with a header. Data should always be JSON-encoded.\n\nAdditionally, a 406 response will be returned if you provide blank values for required fields when pushing orders or refunds through the endpoints.\n• State or country is not a valid two-letter ISO code\n• Shipping or another required field is missing\n• Shipping or another field has an invalid value using an unintended type (e.g., Alphanumeric string instead of a decimal)\n\nIf you attempt to create an order or refund transaction that already exists in TaxJar, you’ll receive a 422 error. As a fallback, make a PUT request instead and update the existing transaction.\n\nNote that when creating a refund transaction, the must be a unique identifier for the refund and different from the original order . The is used to reference the original order transaction.\n\nStay on top of new developer-facing features, accuracy improvements, and bug fixes for our sales tax API. Have a request? Encounter an issue? We’d love to hear your feedback.\n• TaxJar API version “2022-01-24” introduced. Provides increased validations on order and refund transaction POST and PUT requests. Product Tax Codes (PTCs) that do not exist will return a 400 error listing the PTCs that are invalid.\n• TaxJar API version “2020-08-07” introduced. Provides increased validations on order and refund transaction POST requests. Verifies math between details and to equal the sum of .\n• 95 new tax categories now available. Click to see new tax categories First Aid Kits - 50% or less medicinal items First Aid Kits - 51% or more medicinal items\n• None Accuracy 104 new tax categories now available. Click to see new tax categories\n• 2 new tax categories now available.\n• 23 new tax categories now available. Click to see new tax categories Food and Beverage - Granola Bars, Cereal Bars, Energy Bars, Protein Bars containing no flour Food/TPP Bundle - with Food 90% or more Food/TPP Bundle - with Food 90% or more - Food is all Candy Food/TPP Bundle - with Food between 50% and 75% Food/TPP Bundle - with Food between 50% and 75% - Food is all Candy Food/TPP Bundle - with Food between 76% and 89% Food/TPP Bundle - with Food between 76% and 89% - Food is all Candy Food/TPP Bundle - with Food less than 50% Powdered Drink Mixes - to be mixed with milk Powdered Drink Mixes - to be mixed with water\n• 69 tax categories for food & beverages now available. Click to see new tax categories Food and Beverage - Food and Food Ingredients for Home Consumption Food and Beverage - Foods for Immediate Consumption Food and Beverage - Ice Cream, sold in container less than one pint Food and Beverage - Candy containing flour as an ingredient Food and Beverage - Vitamins and Supplements - labeled with nutritional facts\n• 2 more tax categories for digital goods and software now available. Electronic content bundle - Delivered electronically with permanent rights of usage and streamed Electronic content bundle - Delivered electronically with less than permanent rights of usage and streamed\n• 12 more tax categories for clothing now available. Click to see new tax categories\n• None Accuracy 179 tax categories for clothing now available. Click to see new tax categories Clothing - Dresses or skirts or saris or kimonos Clothing - Fabric for use in clothing Clothing - Sequins for use in clothing\n• 8 tax categories for digital goods and software now available. Click to see new tax categories\n• 66 tax categories for digital goods and software now available. Click to see the new tax categories Electronic software documentation or user manuals - For prewritten software & delivered on tangible media Software maintenance and support - Mandatory maintenance and support charges for prewritten software including items delivered on tangible media Software maintenance and support - Optional maintenance and support charges for prewritten software including items delivered on tangible media (includes software updates/upgrades) Software maintenance and support - Optional maintenance and support charges for prewritten software including items delivered on tangible media (includes support services only - no updates/upgrades) Software maintenance and support - Mandatory maintenance and support charges for prewritten software including items delivered electronically Software maintenance and support - Optional maintenance and support charges for prewritten software including items delivered electronically (includes software updates/upgrades) Software maintenance and support - Optional maintenance and support charges for prewritten software including items delivered electronically (includes support services only - no updates/upgrades) Software maintenance and support - Mandatory maintenance and support charges for prewritten software including items delivered by load and leave Software maintenance and support - Optional maintenance and support charges for prewritten software including items delivered by load and leave (includes software updates/upgrades) Software maintenance and support - Optional maintenance and support charges for prewritten software including items delivered by load and leave (includes support services only - no updates/upgrades) Software maintenance and support - Mandatory maintenance and support charges for custom software including items delivered on tangible media Software maintenance and support - Optional maintenance and support charges for custom software including items delivered on tangible media (includes software updates/upgrades) Software maintenance and support - Optional maintenance and support charges for custom software including items delivered on tangible media (includes support services only - no updates/upgrades) Software maintenance and support - Mandatory maintenance and support charges for custom software including items delivered electronically Software maintenance and support - Optional maintenance and support charges for custom software including items delivered electronically (includes software updates/upgrades) Software maintenance and support - Optional maintenance and support charges for custom software including items delivered electronically (includes support services only - no updates/upgrades) Software maintenance and support - Mandatory maintenance and support charges for custom software including items delivered by load and leave Software maintenance and support - Optional maintenance and support charges for custom software including items delivered by load and leave (includes software updates/upgrades) Software maintenance and support - Optional maintenance and support charges for custom software including items delivered by load and leave (includes support services only - no updates/upgrades)\n• 16 tax categories for digital goods and software now available. Click to see new tax categories Electronic publications and music - Delivered electronically with permanent rights of usage Electronic publications and music - Delivered electronically with less than permanent rights of usage\n• Order-level param now accepts value to enable further support for marketplace exemptions.\n• Order-level exemption support now available for transactions submitted through the API via new param.\n• Marketplace exemption support now available for Amazon, eBay, Etsy, and Walmart transactions submitted through the API via new param.\n• Address validation endpoint for TaxJar Professional or higher plans now available.\n• New Mexico (NM) now rooftop accurate for street-level calculations.\n• Hawaii (HI) now rooftop accurate for street-level calculations.\n• 11 tax categories for services now available: Installation, General, Advertising, Parking, Admission, Training, Professional, Dry Cleaning, Repair, Hairdressing, and Printing.\n• Swimwear tax category for clothing now available.\n• Jurisdiction names now available for taxes endpoint.\n• Exempt regions now optional for customer endpoints. Exempt customers with no explicit regions will be treated as exempt everywhere.\n• Updated DNS records. The TaxJar API will now redirect traffic from HTTP to HTTPS via 301 redirect. Double slashes in URLs are no longer supported (e.g. “//v2/taxes”).\n• New York (NY) now rooftop accurate for street-level calculations.\n• North Dakota (ND) now rooftop accurate for street-level calculations.\n• Fixed same city, different county sourcing issue for Colorado (CO).\n\nGet notified about important sales tax API updates as soon as they happen. Subscribe below for the latest developer news from TaxJar:"
    },
    {
        "link": "https://stackoverflow.com/questions/70148677/python-dict-with-conditional-keys",
        "document": "I'd like to create a dict where multiple different keys will map to the same value. I have seen this question, but it's still a little unsatisfying. I would like this behavior:\n\nInstead, I get this behavior. It's interesting that the dict can init at all. What is going on here?"
    },
    {
        "link": "https://kaggle.com/code/shadesh/python-for-beginners-a-comprehensive-guide",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/input-validation-in-python",
        "document": "Input validation ensures that data entered by the user is correct, safe, and in the expected format. In Python, input validation is essential for creating robust, error free programs that can handle incorrect or unexpected inputs. This article will cover the importance of input validation, common methods for validating input and practical examples in Python.\n\nPython provides several ways to validate user inputs.\n\nOne of the simplest methods to ensure the input is of the correct type is to use a try-except block. For example, when accepting numeric input, we can ensure that the user enters a valid integer.\n\nHere, if the user enters something that cannot be converted to an integer (like a string), a ValueError is raised, and the user is prompted again.\n\nUsing if Statements for Range Validation\n\nFor situations where you need to ensure the input is within a certain range, you can use a simple if statement.\n\nIn this case, the function will repeatedly prompt the user until they enter a valid age.\n\nFor more complex input validation, such as ensuring an email address or phone number follows a particular format, regular expressions (regex) are useful.\n\nHere, the regular expression pattern ensures that the input matches the typical structure of an email address."
    },
    {
        "link": "https://copahost.com/blog/input-python",
        "document": "Inputting data is a fundamental part of any program, and the input function in Python provides an easy way to get input from the user . Thus, this function allows the programmer to ask the user to enter an input, which can be a string , an integer number, decimal or a string with numerical digits, among other types of data.\n\n\n\nThe ‘input()’ function is one of the most commonly used functions in Python, as it is an easy way to get information from the user to use in a variety of programs, from simple scripts to complex applications. In addition, Python offers a variety of ways to get user data, including reading from files and manipulating data from external sources such as APIs and databases.\n\n\n\nSo this article will explore how to use the ‘input()’ function in Python , including the different types of input you can collect and how to validate and manipulate this data for use in your programs. In addition, we’ll discuss advanced Python input techniques, such as using regular expressions for input validation and accessibility of input data in dictionaries.\n\nThe Python function is used to get a line input from the user’s screen. The basic syntax is as follows:\n\nWhere “Search for something” is a string shown on the user’s screen to type the answer. Thus, function returns the string typed by the user and stores it in the variable .\n\nYou can also specify a format for the input, such as an integer, using the or syntax . For example:\n\nAlso, the function returns an empty string ( ) if there is no input provided by the user. You can use the expression to check whether the input was provided or not.\n\nInput validation in Python is an important technique for ensuring that your program receives valid, human-readable input. This is especially important when the program is intended for end users to use, as user input is unpredictable and erroneous.\n\nThere are many ways to validate input in Python, depending on the type of input and the needs of the program. Some of the more common techniques include:\n\nWe can create functions that check if a user’s input is valid or not. For example, to validate an integer input, we can create a function that checks if the number is a positive integer:\n\nRegular expressions are a powerful tool for validating input in Python. In this way, you can use a regular expression to check whether a data entry meets a specific pattern. For example, to validate a string input that contains only letters and numbers, we can use the regular expression :\n\nThe module includes functions that can be used to validate input in Python. For example, the function can be used to check whether an input is a valid string or not:\n\nIn addition, the module also includes the function , which is useful for validating whether an input is false. For example, if you want to validate whether a user has entered an integer, you can check whether the function’s result is false:\n\nThe module includes functions that can be used to validate input data in JSON format. For example, you can use the function to check if an input is a valid JSON object:\n\nIn summary, there are many ways to validate input in Python, and which technique is best for you depends on the type of input and the needs of the program. However, regardless of the technique chosen, it is important to ensure that the program receives valid and readable input data to avoid problems with the program’s operation.\n\nAccessing input value in a dictionary in Python\n\nIn Python, it is possible to store user input values ​​in a dictionary. This can be useful in situations where we need to store a series of input values ​​in an organized format.\n\nTo access the input value of a dictionary, we make use of the syntax , where is the key corresponding to the desired input value. For example:\n\nIn this example, we are creating an empty dictionary called . Next we are adding two keys and with the user input values. Next, we’re accessing the e key values ​​and displaying them on the screen.\n\nAlso, you can access an input value directly from the dictionary without assigning it to a variable. In this example, we are directly accessing the user input values ​​directly from the dictionary , see:\n\nThere are many ways to use function in Python to collect user data and use that data in a program. So, here are some examples:\n• Collect an integer from the user:\n• Collect two strings from the user and concatenate them:\n• Collect an integer and display a message if that number is even or odd:\n• Collect a string and loop through all the letters and add a comma after the first letter of each word:\n\nThese examples are just a small sample of how can be used in conjunction with other Python functions, such as , , , , to collect user data and do some operations with that data.\n\nPython provides several types of input to programs, including:\n• By keyboard : With the ‘input()’ function we can use it to collect data from the user through the keyboard.\n• File : Python lets you read data from files, such as text and numbers, and use that data in programs.\n• URL : We can use it to read data from external sources, such as URLs, and use that information in programs.\n• Streams : Python also lets you read data from streamed input sources, such as serial input devices, and use that information in programs.\n• Command line input : Python allows you to read command line data, such as command line arguments passed to the program.\n• Input of a function : Python allows a function to return input data as arguments.\n\nSo these are some of the input types available in Python, and each of them has its own advantages and specific uses.\n\nThere are several advanced Python input techniques that can be useful in different situations. Here are some of those techniques:\n• Lecture: We can use this technique to read data from a file input source, user-written input, or data from an API. Python module is useful to read data from CSV file. The module can also be used to read user input.\n• Entry: We can use this technique to insert data into a table or database. The Python module is useful for inserting data into an SQLite database. The module is useful for inserting data into a PostgreSQL database.\n• Extract: We can use this technique to extract information from a file or data from an API. The Python module is useful for extracting information from a CSV file. The module can be used to make HTTP requests and extract information from an API.\n• Analyze: We can use this technique to analyze data. The Python module is useful for performing data analysis operations. The module is useful for performing mathematical calculations on vectors and matrices.\n• Sort: We can use this technique to sort data. The Python module is useful for sorting data based on one or more columns.\n• Filter: We can use this technique to filter data. The Python module is useful for filtering data based on one or more columns.\n• Join: We use the Python module that is useful for joining sets of data based on one or more columns.\n\nThese are just some of the advanced Python input techniques. Each technique has its own advantages and disadvantages, and choosing the right technique depends on the specific dataset and problem at hand.\n\nmportant considerations when using input in Python programs\n\nWhen using function in Python programs, it is important to consider some important issues to ensure that the code works correctly and is secure. Here are some of those considerations:\n\nIn this regard, it is important to validate user input to ensure that it is of the expected type and format. In this way, we can use regular expressions or checking the data type. For example, if we expect the user to enter an integer, you can check if the input is an integer using the .\n\nIf you’re asking the user to enter a string, it’s important to limit the length of the string to avoid buffer overflow. This way, you can use the function to get the length of the string and check if it is less than a specific threshold.\n\nIt is important to separate user input from program output so that the user can interact with the program clearly. You can do this by creating a separate function for the input and another function for the output.\n\nIt is important to prevent the user from sending malicious code or explanations to the program. Therefore, you can do this using techniques such as input validation and length limiting. It is also important to avoid executing user code, for example by avoiding the use of functions like and .\n\nIt is important to deal with typos such as typing an invalid number or an empty string. Thus, this can be done using an exception such as , to catch the error and display an error message to the user.\n\nAs such, when using function in Python programs, it is important to consider issues of input validation, length limitation, separation of input and output, security, and typos to ensure that the code works correctly and is safe.\n\nIn conclusion, Python input is a fundamental skill for any Python developer. The function is a powerful tool for collecting data from user input, but it’s important to consider input validation issues, length limitation, input-output separation, security, and typos to ensure that the code works correctly and is safe. With a good understanding of how input works in Python, you can create more efficient and robust programs to handle user input."
    },
    {
        "link": "https://labex.io/tutorials/python-python-user-input-the-basics-390542",
        "document": "In the world of programming, user input is a fundamental concept that allows developers to create interactive and dynamic applications. Python, as a versatile and beginner-friendly programming language, provides a simple and intuitive way to handle user input through the function. This section will introduce you to the basics of user input in Python, covering its importance, common use cases, and the underlying mechanisms that enable seamless interaction between the user and the program.\n\nUser input is a crucial aspect of software development as it allows programs to adapt to the needs and preferences of the end-user. By accepting input from the user, applications can become more personalized, responsive, and tailored to the user's specific requirements. User input enables features such as data entry, configuration settings, and interactive decision-making, making the overall user experience more engaging and meaningful.\n\nThe function in Python is the primary method for accepting user input. This function prompts the user to enter data, which is then captured and stored as a string. The function can be used with a customizable prompt message, allowing developers to guide the user through the input process.\n\nIn the above example, the function displays the prompt \"Please enter your name:\" and waits for the user to provide input. Once the user enters a value and presses the \"Enter\" key, the input is stored in the variable, which can then be used for further processing or output.\n\nBy default, the function returns user input as a string. However, in many cases, you may need to convert the input to a different data type, such as an integer, float, or boolean. Python provides various built-in functions, such as , , and , to handle these data type conversions.\n\nIn the example above, the user's input is converted from a string to an integer using the function, allowing the program to perform age-based logic.\n\nUser input in Python can be applied to a wide range of applications, from simple command-line tools to complex graphical user interfaces (GUIs). Some common use cases include:\n• Data Entry: Allowing users to input information, such as names, addresses, or financial data, for storage or further processing.\n• Configuration Settings: Enabling users to customize program behavior by providing input for settings, preferences, or options.\n• Interactive Simulations: Accepting user input to control the parameters or flow of a simulation, allowing for interactive exploration and experimentation.\n• Menu-driven Applications: Presenting users with a menu of choices and accepting their selection to determine the program's next course of action.\n\nBy understanding the fundamentals of user input in Python, you can create more engaging and user-friendly applications that cater to the specific needs of your target audience."
    },
    {
        "link": "https://automatetheboringstuff.com/2e/chapter8",
        "document": "Input validation code checks that values entered by the user, such as text from the input() function, are formatted correctly. For example, if you want users to enter their ages, your code shouldn’t accept nonsensical answers such as negative numbers (which are outside the range of acceptable integers) or words (which are the wrong data type). Input validation can also prevent bugs or security vulnerabilities. If you implement a withdrawFromAccount() function that takes an argument for the amount to subtract from an account, you need to ensure the amount is a positive number. If the withdrawFromAccount() function subtracts a negative number from the account, the “withdrawal” will end up adding money!\n\nTypically, we perform input validation by repeatedly asking the user for input until they enter valid text, as in the following example:\n\nwhile True:\n\n print('Enter your age:')\n\n age = input()\n\n try:\n\n age = int(age)\n\n except:\n\n print('Please use numeric digits.')\n\n continue\n\n if age < 1:\n\n print('Please enter a positive number.')\n\n continue\n\n break\n\n\n\n print(f'Your age is {age}.')\n\nWhen you run this program, the output could look like this:\n\nEnter your age:\n\n five\n\n Please use numeric digits.\n\n Enter your age:\n\n -2\n\n Please enter a positive number.\n\n Enter your age:\n\n 30\n\n Your age is 30.\n\nWhen you run this code, you’ll be prompted for your age until you enter a valid one. This ensures that by the time the execution leaves the while loop, the age variable will contain a valid value that won’t crash the program later on.\n\nHowever, writing input validation code for every input() call in your program quickly becomes tedious. Also, you may miss certain cases and allow invalid input to pass through your checks. In this chapter, you’ll learn how to use the third-party PyInputPlus module for input validation.\n\nPyInputPlus contains functions similar to input() for several kinds of data: numbers, dates, email addresses, and more. If the user ever enters invalid input, such as a badly formatted date or a number that is outside of an intended range, PyInputPlus will reprompt them for input just like our code in the previous section did. PyInputPlus also has other useful features like a limit for the number of times it reprompts users and a timeout if users are required to respond within a time limit.\n\nPyInputPlus is not a part of the Python Standard Library, so you must install it separately using Pip. To install PyInputPlus, run pip install --user pyinputplus from the command line. Appendix A has complete instructions for installing third-party modules. To check if PyInputPlus installed correctly, import it in the interactive shell:\n\nIf no errors appear when you import the module, it has been successfully installed.\n\nPyInputPlus has several functions for different kinds of input:\n\ninputStr() Is like the built-in input() function but has the general PyInputPlus features. You can also pass a custom validation function to it\n\ninputNum() Ensures the user enters a number and returns an int or float, depending on if the number has a decimal point in it\n\ninputChoice() Ensures the user enters one of the provided choices\n\ninputMenu() Is similar to inputChoice(), but provides a menu with numbered or lettered options\n\ninputBool() Is similar to inputYesNo(), but takes a “True” or “False” response and returns a Boolean value\n\ninputFilepath() Ensures the user enters a valid file path and filename, and can optionally check that a file with that name exists\n\ninputPassword() Is like the built-in input(), but displays * characters as the user types so that passwords, or other sensitive information, aren’t displayed on the screen\n\nThese functions will automatically reprompt the user for as long as they enter invalid input:\n\n>>> import pyinputplus as pyip\n\n >>> response = pyip.inputNum()\n\n five\n\n 'five' is not a number.\n\n 42\n\n >>> response\n\n 42\n\nThe as pyip code in the import statement saves us from typing pyinputplus each time we want to call a PyInputPlus function. Instead we can use the shorter pyip name. If you take a look at the example, you see that unlike input(), these functions return an int or float value: 42 and 3.14 instead of the strings '42' and '3.14'.\n\nJust as you can pass a string to input() to provide a prompt, you can pass a string to a PyInputPlus function’s prompt keyword argument to display a prompt:\n\n>>> response = input('Enter a number: ')\n\n Enter a number: 42\n\n >>> response\n\n '42'\n\n >>> import pyinputplus as pyip\n\n >>> response = pyip.inputInt(prompt='Enter a number: ')\n\n Enter a number: cat\n\n 'cat' is not an integer.\n\n Enter a number: 42\n\n >>> response\n\n 42\n\nUse Python’s help() function to find out more about each of these functions. For example, help(pyip.inputChoice) displays help information for the inputChoice() function. Complete documentation can be found at https://pyinputplus.readthedocs.io/.\n\nUnlike Python’s built-in input(), PyInputPlus functions have several additional features for input validation, as shown in the next section.\n\nThe inputNum(), inputInt(), and inputFloat() functions, which accept int and float numbers, also have min, max, greaterThan, and lessThan keyword arguments for specifying a range of valid values. For example, enter the following into the interactive shell:\n\n>>> import pyinputplus as pyip\n\n >>> response = pyip.inputNum('Enter num: ', min=4)\n\n Enter num:3\n\n Input must be at minimum 4.\n\n Enter num:4\n\n >>> response\n\n 4\n\n >>> response = pyip.inputNum('Enter num: ', greaterThan=4)\n\n Enter num: 4\n\n Input must be greater than 4.\n\n Enter num: 5\n\n >>> response\n\n 5\n\n >>> response = pyip.inputNum('>', min=4, lessThan=6)\n\n Enter num: 6\n\n Input must be less than 6.\n\n Enter num: 3\n\n Input must be at minimum 4.\n\n Enter num: 4\n\n >>> response\n\n 4\n\nThese keyword arguments are optional, but if supplied, the input cannot be less than the min argument or greater than the max argument (though the input can be equal to them). Also, the input must be greater than the greaterThan and less than the lessThan arguments (that is, the input cannot be equal to them).\n\nBy default, blank input isn’t allowed unless the blank keyword argument is set to True:\n\n>>> import pyinputplus as pyip\n\n >>> response = pyip.inputNum('Enter num: ')\n\n Enter num:(blank input entered here)\n\n Blank values are not allowed.\n\n Enter num: 42\n\n >>> response\n\n 42\n\n >>> response = pyip.inputNum(blank=True)\n\n (blank input entered here)\n\n >>> response\n\n ''\n\nUse blank=True if you’d like to make input optional so that the user doesn’t need to enter anything.\n\nBy default, the PyInputPlus functions will continue to ask the user for valid input forever (or for as long as the program runs). If you’d like a function to stop asking the user for input after a certain number of tries or a certain amount of time, you can use the limit and timeout keyword arguments. Pass an integer for the limit keyword argument to determine how many attempts a PyInputPlus function will make to receive valid input before giving up, and pass an integer for the timeout keyword argument to determine how many seconds the user has to enter valid input before the PyInputPlus function gives up.\n\nIf the user fails to enter valid input, these keyword arguments will cause the function to raise a RetryLimitException or TimeoutException, respectively. For example, enter the following into the interactive shell:\n\n>>> import pyinputplus as pyip\n\n >>> response = pyip.inputNum(limit=2)\n\n blah\n\n 'blah' is not a number.\n\n Enter num: number\n\n 'number' is not a number.\n\n Traceback (most recent call last):\n\n --snip--\n\n pyinputplus.RetryLimitException\n\n >>> response = pyip.inputNum(timeout=10)\n\n 42 (entered after 10 seconds of waiting)\n\n Traceback (most recent call last):\n\n --snip--\n\n pyinputplus.TimeoutException\n\nWhen you use these keyword arguments and also pass a default keyword argument, the function returns the default value instead of raising an exception. Enter the following into the interactive shell:\n\n>>> response = pyip.inputNum(limit=2, default='N/A')\n\n hello\n\n 'hello' is not a number.\n\n world\n\n 'world' is not a number.\n\n >>> response\n\n 'N/A'\n\nInstead of raising RetryLimitException, the inputNum() function simply returns the string 'N/A'.\n\nYou can also use regular expressions to specify whether an input is allowed or not. The allowRegexes and blockRegexes keyword arguments take a list of regular expression strings to determine what the PyInputPlus function will accept or reject as valid input. For example, enter the following code into the interactive shell so that inputNum() will accept Roman numerals in addition to the usual numbers:\n\nOf course, this regex affects only what letters the inputNum() function will accept from the user; the function will still accept Roman numerals with invalid ordering such as 'XVX' or 'MILLI' because the r'(I|V|X|L|C|D|M)+' regular expression accepts those strings.\n\nYou can also specify a list of regular expression strings that a PyInputPlus function won’t accept by using the blockRegexes keyword argument. Enter the following into the interactive shell so that inputNum() won’t accept even numbers:\n\n>>> import pyinputplus as pyip\n\n >>> response = pyip.inputNum(blockRegexes=[r'[02468]$'])\n\n 42\n\n This response is invalid.\n\n 44\n\n This response is invalid.\n\n 43\n\n >>> response\n\n 43\n\nIf you specify both an allowRegexes and blockRegexes argument, the allow list overrides the block list. For example, enter the following into the interactive shell, which allows 'caterpillar' and 'category' but blocks anything else that has the word 'cat' in it:\n\n>>> import pyinputplus as pyip\n\n >>> response = pyip.inputStr(allowRegexes=[r'caterpillar', 'category'],\n\n blockRegexes=[r'cat'])\n\n cat\n\n This response is invalid.\n\n catastrophe\n\n This response is invalid.\n\n category\n\n >>> response\n\n 'category'\n\nThe PyInputPlus module’s functions can save you from writing tedious input validation code yourself. But there’s more to the PyInputPlus module than what has been detailed here. You can examine its full documentation online at https://pyinputplus.readthedocs.io/.\n\nYou can write a function to perform your own custom validation logic by passing the function to inputCustom(). For example, say you want the user to enter a series of digits that adds up to 10. There is no pyinputplus.inputAddsUpToTen() function, but you can create your own function that:\n• Accepts a single string argument of what the user entered\n• Raises an exception if the string fails validation\n• Returns (or has no statement) if should return the string unchanged\n• Returns a non- value if should return a different string from the one the user entered\n• Is passed as the first argument to\n\nFor example, we can create our own addsUpToTen() function, and then pass it to inputCustom(). Note that the function call looks like inputCustom(addsUpToTen) and not inputCustom(addsUpToTen()) because we are passing the addsUpToTen() function itself to inputCustom(), not calling addsUpToTen() and passing its return value.\n\n>>> import pyinputplus as pyip\n\n >>> def addsUpToTen(numbers):\n\n ... numbersList = list(numbers)\n\n ... for i, digit in enumerate(numbersList):\n\n ... numbersList[i] = int(digit)\n\n ... if sum(numbersList) != 10:\n\n ... raise Exception('The digits must add up to 10, not %s.' %\n\n (sum(numbersList)))\n\n ... return int(numbers) # Return an int form of numbers.\n\n ...\n\n >>> response = pyip.inputCustom(addsUpToTen) # No parentheses after\n\n addsUpToTen here.\n\n 123\n\n The digits must add up to 10, not 6.\n\n 1235\n\n The digits must add up to 10, not 11.\n\n 1234\n\n >>> response # inputStr() returned an int, not a string.\n\n 1234\n\n >>> response = pyip.inputCustom(addsUpToTen)\n\n hello\n\n invalid literal for int() with base 10: 'h'\n\n 55\n\n >>> response\n\nThe inputCustom() function also supports the general PyInputPlus features, such as the blank, limit, timeout, default, allowRegexes, and blockRegexes keyword arguments. Writing your own custom validation function is useful when it’s otherwise difficult or impossible to write a regular expression for valid input, as in the “adds up to 10” example.\n\nProject: How to Keep an Idiot Busy for Hours\n\nLet’s use PyInputPlus to create a simple program that does the following:\n• Ask the user if they’d like to know how to keep an idiot busy for hours.\n• If the user answers no, quit.\n• If the user answers yes, go to Step 1.\n\nOf course, we don’t know if the user will enter something besides “yes” or “no,” so we need to perform input validation. It would also be convenient for the user to be able to enter “y” or “n” instead of the full words. PyInputPlus’s inputYesNo() function will handle this for us and, no matter what case the user enters, return a lowercase 'yes' or 'no' string value.\n\nWhen you run this program, it should look like the following:\n\nWant to know how to keep an idiot busy for hours?\n\n sure\n\n 'sure' is not a valid yes/no response.\n\n Want to know how to keep an idiot busy for hours?\n\n yes\n\n Want to know how to keep an idiot busy for hours?\n\n y\n\n Want to know how to keep an idiot busy for hours?\n\n Yes\n\n Want to know how to keep an idiot busy for hours?\n\n YES\n\n Want to know how to keep an idiot busy for hours?\n\n YES!!!!!!\n\n 'YES!!!!!!' is not a valid yes/no response.\n\n Want to know how to keep an idiot busy for hours?\n\n TELL ME HOW TO KEEP AN IDIOT BUSY FOR HOURS.\n\n 'TELL ME HOW TO KEEP AN IDIOT BUSY FOR HOURS.' is not a valid yes/no response.\n\n Want to know how to keep an idiot busy for hours?\n\n no\n\n Thank you. Have a nice day.\n\nOpen a new file editor tab and save it as idiot.py. Then enter the following code:\n\nThis imports the PyInputPlus module. Since pyinputplus is a bit much to type, we’ll use the name pyip for short.\n\nwhile True:\n\n prompt = 'Want to know how to keep an idiot busy for hours?\n\n'\n\n response = pyip.inputYesNo(prompt)\n\nNext, while True: creates an infinite loop that continues to run until it encounters a break statement. In this loop, we call pyip.inputYesNo() to ensure that this function call won’t return until the user enters a valid answer.\n\nThe pyip.inputYesNo() call is guaranteed to only return either the string yes or the string no. If it returned no, then our program breaks out of the infinite loop and continues to the last line, which thanks the user:\n\nOtherwise, the loop iterates once again.\n\nYou can also make use of the inputYesNo() function in non-English languages by passing yesVal and noVal keyword arguments. For example, the Spanish version of this program would have these two lines:\n\nNow the user can enter either sí or s (in lower- or uppercase) instead of yes or y for an affirmative answer.\n\nPyInputPlus’s features can be useful for creating a timed multiplication quiz. By setting the allowRegexes, blockRegexes, timeout, and limit keyword argument to pyip.inputStr(), you can leave most of the implementation to PyInputPlus. The less code you need to write, the faster you can write your programs. Let’s create a program that poses 10 multiplication problems to the user, where the valid input is the problem’s correct answer. Open a new file editor tab and save the file as multiplicationQuiz.py.\n\nFirst, we’ll import pyinputplus, random, and time. We’ll keep track of how many questions the program asks and how many correct answers the user gives with the variables numberOfQuestions and correctAnswers. A for loop will repeatedly pose a random multiplication problem 10 times:\n\nimport pyinputplus as pyip\n\n import random, time\n\n\n\n numberOfQuestions = 10\n\n correctAnswers = 0\n\n for questionNumber in range(numberOfQuestions):\n\nInside the for loop, the program will pick two single-digit numbers to multiply. We’ll use these numbers to create a #Q: N × N = prompt for the user, where Q is the question number (1 to 10) and N are the two numbers to multiply.\n\nThe pyip.inputStr() function will handle most of the features of this quiz program. The argument we pass for allowRegexes is a list with the regex string '^%s$', where %s is replaced with the correct answer. The ^ and % characters ensure that the answer begins and ends with the correct number, though PyInputPlus trims any whitespace from the start and end of the user’s response first just in case they inadvertently pressed the spacebar before or after their answer. The argument we pass for blocklistRegexes is a list with ('.*', 'Incorrect!'). The first string in the tuple is a regex that matches every possible string. Therefore, if the user response doesn’t match the correct answer, the program will reject any other answer they provide. In that case, the 'Incorrect!' string is displayed and the user is prompted to answer again. Additionally, passing 8 for timeout and 3 for limit will ensure that the user only has 8 seconds and 3 tries to provide a correct answer:\n\ntry:\n\n # Right answers are handled by allowRegexes.\n\n # Wrong answers are handled by blockRegexes, with a custom message.\n\n pyip.inputStr(prompt, allowRegexes=['^%s$' % (num1 * num2)],\n\n blockRegexes=[('.*', 'Incorrect!')],\n\n timeout=8, limit=3)\n\nIf the user answers after the 8-second timeout has expired, even if they answer correctly, pyip.inputStr() raises a TimeoutException exception. If the user answers incorrectly more than 3 times, it raises a RetryLimitException exception. Both of these exception types are in the PyInputPlus module, so pyip. needs to prepend them:\n\nexcept pyip.TimeoutException:\n\n print('Out of time!')\n\n except pyip.RetryLimitException:\n\n print('Out of tries!')\n\nRemember that, just like how else blocks can follow an if or elif block, they can optionally follow the last except block. The code inside the following else block will run if no exception was raised in the try block. In our case, that means the code runs if the user entered the correct answer:\n\nelse:\n\n # This block runs if no exceptions were raised in the try block.\n\n print('Correct!')\n\n correctAnswers += 1\n\nNo matter which of the three messages, “Out of time!”, “Out of tries!”, or “Correct!”, displays, let’s place a 1-second pause at the end of the for loop to give the user time to read it. After the program has asked 10 questions and the for loop continues, let’s show the user how many correct answers they made:\n\ntime.sleep(1) # Brief pause to let user see the result.\n\n print('Score: %s / %s' % (correctAnswers, numberOfQuestions))\n\nPyInputPlus is flexible enough that you can use it in a wide variety of programs that take keyboard input from the user, as demonstrated by the programs in this chapter.\n\nIt’s easy to forget to write input validation code, but without it, your programs will almost certainly have bugs. The values you expect users to enter and the values they actually enter can be completely different, and your programs need to be robust enough to handle these exceptional cases. You can use regular expressions to create your own input validation code, but for common cases, it’s easier to use an existing module, such as PyInputPlus. You can import the module with import pyinputplus as pyip so that you can enter a shorter name when calling the module’s functions.\n\nPyInputPlus has functions for entering a variety of input, including strings, numbers, dates, yes/no, True/False, emails, and files. While input() always returns a string, these functions return the value in an appropriate data type. The inputChoice() function allow you to select one of several pre-selected options, while inputMenu() also adds numbers or letters for quick selection.\n\nAll of these functions have the following standard features: stripping whitespace from the sides, setting timeout and retry limits with the timeout and limit keyword arguments, and passing lists of regular expression strings to allowRegexes or blockRegexes to include or exclude particular responses. You'll no longer need to write your own tedious while loops that check for valid input and reprompt the user.\n\nIf none of the PyInputPlus module’s, functions fit your needs, but you’d still like the other features that PyInputPlus provides, you can call inputCustom() and pass your own custom validation function for PyInputPlus to use. The documentation at https://pyinputplus.readthedocs.io/en/latest/ has a complete listing of PyInputPlus’s functions and additional features. There’s far more in the PyInputPlus online documentation than what was described in this chapter. There’s no use in reinventing the wheel, and learning to use this module will save you from having to write and debug code for yourself.\n\nNow that you have expertise manipulating and validating text, it’s time to learn how to read from and write to files on your computer’s hard drive.\n\n1. Does PyInputPlus come with the Python Standard Library?\n\n2. Why is PyInputPlus commonly imported with import pyinputplus as pyip?\n\n3. What is the difference between inputInt() and inputFloat()?\n\n4. How can you ensure that the user enters a whole number between 0 and 99 using PyInputPlus?\n\n5. What is passed to the allowRegexes and blockRegexes keyword arguments?\n\n6. What does inputStr(limit=3) do if blank input is entered three times?\n\n7. What does inputStr(limit=3, default='hello') do if blank input is entered three times?\n\nFor practice, write programs to do the following tasks.\n\nWrite a program that asks users for their sandwich preferences. The program should use PyInputPlus to ensure that they enter valid input, such as:\n• Using for a bread type: wheat, white, or sourdough.\n• Using for a protein type: chicken, turkey, ham, or tofu.\n• Using to ask if they want cheese.\n• If so, using to ask for a cheese type: cheddar, Swiss, or mozzarella.\n• Using to ask if they want mayo, mustard, lettuce, or tomato.\n• Using to ask how many sandwiches they want. Make sure this number is 1 or more.\n\nCome up with prices for each of these options, and have your program display a total cost after the user enters their selection.\n\nTo see how much PyInputPlus is doing for you, try re-creating the multiplication quiz project on your own without importing it. This program will prompt the user with 10 multiplication questions, ranging from 0 × 0 to 9 × 9. You’ll need to implement the following features:\n• If the user enters the correct answer, the program displays “Correct!” for 1 second and moves on to the next question.\n• The user gets three tries to enter the correct answer before the program moves on to the next question.\n• Eight seconds after first displaying the question, the question is marked as incorrect even if the user enters the correct answer after the 8-second limit.\n\nCompare your code to the code using PyInputPlus in “Project: Multiplication Quiz” on page 196."
    },
    {
        "link": "https://unstop.com/blog/input-function-in-python",
        "document": "The input() function in Python prompts the user to enter a value, reads it and returns it as a string. However, you might need to employ type conversion and validation to work with the input.\n\nInput and output functions are essential for every programming language, as they allow users to directly interact with a program (like providing data and receiving data). While output functions display data, input functions like the input() function in Python let users provide data to the program.\n\nIn this article will discuss Python’s input() function in detail, using examples to illustrate its functionality and versatility.\n\nWhat Is Input() Function In Python?\n\nThe input() function in Python language is a built-in method that allows interaction between the user and the program by prompting users to enter data via the keyboard. Originating from Python's core library, input() serves as a fundamental tool for gathering user input. (Fun fact: The source code of the input function was written in C language.)\n• None In its simplest form, the input() function accepts an optional string parameter—a message that guides users on what data they should provide.\n• None This message, often referred to as a \"prompt,\" helps improve communication by specifying the expected input.\n• None Regardless of the type of data the user enters (such as an integer or float), input() always returns it as a string.\n\nBecause input() returns data as a string, we often store this return value in a variable, which we can then manipulate or use elsewhere in the program.\n• var refers to the variable that is used to store the data that was entered by the user.\n• input is the name of the function itself and the parentheses ()\n• prompt is the message where the user can specify what data she wants from the end user.\n\nThe built-in function input() accepts a single optional parameter called prompt. This parameter is a string that serves as a message to the user, helping them understand what type of input is expected.\n\nSuppose we want to ask the user to enter a number and then display it back to them.\n\nIn the simple Python program example,\n• use the input() function to prompt the user to provide a value with the string- ‘Enter a Number: ‘\n• None Next, we output the number entered by the user to the console with the print() function, where we separate two arguments (message and number to print) with a comma.\n\nAs mentioned before, the input() function in Python always returns data as a string. Even if the user enters an integer, float, or boolean, the returned value will be of string type. To check this, we have given a simple Python code example below, where we will use the type() function to verify the type of the input.\n\nAs in the previous Python program example,\n• None We use the input() function to take user input and store it in the number variable\n• type() function inside a print statement to check and display the type of the input returned by input() to the variable.\n• None As seen in the output window, the type of the input is string (str) class.\n\nWorking Example Of Input() Function In Python\n\nIn this example Python program below, we’ll demonstrate how to read an integer and a float from the user with the input() function. We will also add the input values and display the result.\n\nIn the Python code example,\n• None Then, we use the input() function inside the int() function to prompt the user to provide an integer value. Here:\n• prompt specifies that we want an integer value.\n• None Since we know that input() returns a string, we use the int() function to convert the input from a string into an integer and assign it to the number1 variable.\n• None Just like before, we use the input() function with a prompt to specify that we want a float value.\n• None Then, use the float() function to convert the string input to float and store it in the number2 variable.\n• None Next, we perform the addition operation on the two variables and assign the outcome to the variable sum\n• None Lastly, we display the sum value using the print() function\n\nGetting Multiple Inputs In One Line Using Input() Function In Python\n\nIn some cases, you might need to take multiple inputs from the user at once. For example, when dealing with arrays or lists, you’ll read multiple values at the same time. You will have to combine the split() function with the input() function in Python programs to collect multiple inputs in a single line. Here is how this will work–\n• None The input() function will prompt the user to enter the value.\n• None And the split() function will split the input string (returned by input) based on a specified delimiter (parameter inside split) and returns a\n\nLet’s look at the syntax of split() with input() function in Python, followed by an example demonstrating its use.\n\nHere, we have the input() function itself with the prompt to take input and the values variable to store that.\n• split function performs the task of splitting the input, and the delimiter inside the parentheses is a character used for splitting.\n• Suppose you use a comma as a delimiter; then, the function will separate the words in the input string by commas.\n• dot character between the two functions is used to chain them.\n\nLet’s create a sample Python program to check how this works in action. In this program:\n• None We will first prompt the user to enter a single string\n• None Then we will use input() with split() to accept multiple strings in a single line, separated by whitespace.\n• None We will print both the inputs to give a more comprehensive insight into the working of the input() function in Python.\n\nIn the example Python code,\n• prompt the user to enter a single value using the input() function and store it in the variable single_input.\n• prompt the user to provide multiple values separated by spaces\n• input() function takes this input and returns its string form.\n• None The split() function marks them as individual values based on where the whitespace is placed and stores them in an iterable assigned to variable mulitple_inputs.\n• print the list of strings returned by the input() and split() combination.\n• None This reflects the comparison between taking a single and multiple inputs.\n\nGetting Multiline Input From Input() Function In Python\n\n​​In some scenarios, you might need to read multiple lines of values from the user. For example, when dealing with arrays or lists, you may sometimes need to gather input line by line. There are two common cases for this:\n\nSometimes, the total number of values in the array or list will be specified in advance. In such cases, you will first read the number of values (denoted as n) and then read n lines of input, appending each value to the list.\n• prompt the user to enter the number of values they want to input, storing it in the variable n. Here:\n• None The input() function gives the prompt to the user and returns the input to the program.\n• int() function converts the string input into an integer , which determines how many lines of input will follow.\n• create an empty list called array, to store the values entered by the user.\n• for loop to runs n times enter a value during each iteration . Each of these values is side-by-side appended to the array list\n• None Finally, the print() function outputs the array list containing all the user inputs.\n\nCase 2: Reading Multiple Lines Until Enter Is Pressed Without A Value\n\nUnlike in the situation discussed above, in some cases, you may not know how many lines of input to expect. Instead, the input collection continues until the user presses Enter without entering a value.\n• while loop, which starts at True, creating an infinite loop that continues until the user presses Enter without typing anything (an empty input).\n• Inside the loop , we use the input() function to prompt the user to enter a value and read it, storing it in x.\n• None Then, we use an if-else statement to check the input. The if condition (x:) checks if the input is not empty. If true, the input value is appended to the array.\n• None If the input is empty (i.e., the user presses Enter without typing), the loop is terminated on encountering the break statement in the else block\n• We then use a print() function to display the array containing all the entered values before the empty input.\n\nWhat is Type Casting? Type casting is the process of converting a value from one data type to another without altering its actual content. It is important to convert the data types when you need data to be compatible with specific operations or functions.\n• new_var is the variable to store the type casted value, and var is the variable that holds the value that needs to convert data type.\n\nUsing Type Casting with input() Function in Python\n\nAs discussed, by default, the input() function returns user input as a string. So, to work with other data types, we have to type-cast the input value to the desired data type.\n• var is a variable used to store the data typecasted value, and type is the required data type of the input value.\n• input prompt specifying the kind of input to give.\n\nHere, we will cast the string value returned by the input function into its original type, i.e. an integer.\n\nIn this Python example code,\n• None We first use the input() function to capture an input and then use int() to convert it to an integer value\n\nManaging user input is essential in interactive applications, especially in handling errors, validating data, and converting types appropriately. Python has several built-in modules and functions for this.\n• None We know that the input() function in Python returns a string by default, and if the user enters a non-numeric string when an integer is expected, a ValueError will occur.\n• None For instance, entering a string instead of an integer in a prompt that expects an integer can trigger this error. Input validation helps mitigate this.\n\nIn this example,\n• None We first prompt the user to provide a number, capture it using input() and then convert it to integer type using the int() function.\n• None Then, we print this value to the console using the print() function.\n• None However, as shown in the output, if the user inputs a non-integer value, this program will throw an error.\n\nIt is important to employ input validation in such cases. But how?\n\nIt is the process of clearly defining the requirements for user input and putting validation checks in place to ensure they are met. In other words, input validation ensures that user input meets specific requirements. Using the try-except approach in Python is effective for handling exceptions like ValueError when input doesn’t meet expectations.\n\nLet’s take a look at the syntax for this, followed by a sample program, to see how we can use this approach to validate values captured by the input() function.\n• None The keyword try indicates that the code followed by the colon (:) might contain an exception.\n• None The except Python keyword indicates that the code followed by the colon (:) contains stipulations of how to handle the expectation if found.\n\nLet’s look at an example of using the try-except block with the input() function in Python to take and validate input.\n\nIn the example,\n• None We initiate a while loop starting with True (an infinite loop) to repeatedly prompt the user to provide a value until a valid input is given. Here:\n• None The try block contains the input() function to prompt the user to enter a value to be cpatured and the int() function to convert it to an integer.\n• None Then, we have the except block, which checks if an error was generated. If yes, it prints an error message, and the loop runs again.\n• None If an error is not thrown, then the else block is executed, which contains a break statement ending the loop.\n• After that, we display the input value to the console using the print() function.\n\nThe table below highlights the difference between the raw_input() function and the input() function in Python across the two versions.\n\nAs is evident, while Python has two functions for capturing input: input() and raw_input(), the distinction exists only in Python 2.x, as raw_input() was removed in Python 3.x.\n\nThe input() function in Python is a straightforward way to capture user input, making it essential for interactive programs. With an optional prompt parameter to guide users on the type of input needed, it enables smooth communication between a program and its user.\n\nIn Python 3.x, input() always returns the input as a string, even if the user enters a number or other data type. This design improves security and consistency by avoiding expression evaluation, which was a feature of the input() function in Python 2.x.\n\nHowever, this also means that with the input() function in Python 3.x, you’ll need to use typecasting to work with the returned string in other formats, and in some cases, adding validation with a try-except block can help handle unexpected input.\n• input() Usage: Reads user input as a string, promoting secure and consistent handling of data.\n• Prompt Parameter: Optional text to help users understand what input is expected.\n• Typecasting Requirement: Convert strings to other data types (e.g., int, float) as needed.\n• Python 2.x vs. 3.x: Unlike Python 2.x, input() in 3.x does not evaluate expressions, improving security.\n\nQ. What is the difference between input and print functions in Python?\n\nThe input() function in Python captures data entered by the user and returns it as a string, while the print() function displays data on the console. In other words, input() is used for input, while print() is used for output.\n\nQ. What are command-line arguments, and how do they differ from the input() function?\n\nCommand-line arguments are a way to provide input to a program when it is executed from the command line or terminal. These arguments are specified after the program's name and are separated by spaces. They allow users to pass information to the program without interacting with it during its execution.\n\nIn contrast, the input() function prompts for user input during runtime and waits for a response, allowing interactive input while the program runs. The table below highlights the difference between command-line arguments and the input() function in Python.\n\nQ. How can I take multiple inputs (e.g., 10 values) from a user in Python?\n\nTo take multiple inputs from the user, say 10, you can use a for loop containing the input() function to repeatedly prompt the user to provide values. On receiving them, you can append them to a list (you will need to create an empty list beforehand).\n\nLet’s build a Python example program to show how we can take 10 value inputs from the user and then print the same.\n\nQ. How do you calculate the sum of user input of two values in Python?\n\nTo calculate the sum of two user input values, we need to read the values from the user one by one, then convert them into int type and store them into two variables. We can then perform the addition operation on those two variables.\n\nQ. What type of data does input() function in Python return?\n\nThe input () function in Python will always return the user input data as a string type value. Given below is an example where we check the type of user input with and without type conversion.\n\nIn this example,\n• None We first prompt the user to provide an integer value using input() and then check its data type using the type() function and print it to the console.\n• None Then, we prompt the user again to enter an integer value, but this time, we use the int() function to typecast the value returned by the input() function into the integer type.\n• None After that, we check the variable’s data type and print it, which, as shown in the output console, belongs to class ‘int’.\n\nThis shows that the input() function in Python always returns the value as a string. And we need to typecast it to other types if needed.\n\nHere are a few other Python articles you might be interested in reading:"
    }
]