[
    {
        "link": "https://stackoverflow.com/questions/4481485/changing-css-pseudo-element-styles-via-javascript",
        "document": "Is it possible to change a CSS pseudo-element style via JavaScript?\n\nFor example, I want to dynamically set the color of the scrollbar like so:\n\nand I also want to be able to tell the scrollbar to hide like so:\n\nBoth of these scripts, however, return:\n\nIs there some other way of going about this?\n\n Cross-browser interoperability is not important, I just need it to work in webkit browsers."
    },
    {
        "link": "https://stackoverflow.com/questions/43138544/dynamically-styling-pseudo-elements-using-jquery-or-javascript",
        "document": "I need to change the value of dynamically on each image click. Neither of these questions 1 / 2 / 3 / 4 nor this tutorial worked for me since I am changing the value not content or colors.\n\nI can't use because it's not supported for non-string values according to this. Creating stylesheet or adding scripting the the header isn't a good idea since I can't reach and modify it again so it's creating tens of style tags and rules and it's messing up with my styling.\n\nHow can I achieve this?"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Pseudo_classes_and_elements",
        "document": "The next set of selectors we will look at are referred to as pseudo-classes and pseudo-elements. There are a large number of these, and they often serve quite specific purposes. Once you know how to use them, you can look through the different types to see if there is something which works for the task you are trying to achieve.\n• The difference between the two.\n\nA pseudo-class is a selector that selects elements that are in a specific state, e.g. they are the first element of their type, or they are being hovered over by the mouse pointer. They tend to act as if you had applied a class to some part of your document, often helping you cut down on excess classes in your markup, and giving you more flexible, maintainable code. Pseudo-classes are keywords that start with a colon. For example, is a pseudo-class.\n\nLet's look at a basic example. If we wanted to make the first paragraph in an article larger and bold, we could add a class to that paragraph and then add CSS to that class, as shown in the first example below: However, this could be annoying to maintain — what if a new paragraph got added to the top of the document? We'd need to move the class over to the new paragraph. Instead of adding the class, we could use the pseudo-class selector — this will always target the first child element in the article, and we will no longer need to edit the HTML (this may not always be possible anyway, maybe due to it being generated by a CMS). All pseudo-classes behave in this same kind of way. They target some bit of your document that is in a certain state, behaving as if you had added a class into your HTML. Take a look at some other examples on MDN: Note: It is valid to write pseudo-classes and elements without any element selector preceding them. In the example above, you could write and the rule would apply to any element that is the first child of an element, not just a paragraph first child — is equivalent to . However, usually you want more control than that, so you need to be more specific.\n\nPseudo-elements behave in a similar way. However, they act as if you had added a whole new HTML element into the markup, rather than applying a class to existing elements. Pseudo-elements start with a double colon . is an example of a pseudo-element. Note: Some early pseudo-elements used the single colon syntax, so you may sometimes see this in code or examples. Modern browsers support the early pseudo-elements with single- or double-colon syntax for backwards compatibility. For example, if you wanted to select the first line of a paragraph you could wrap it in a element and use an element selector; however, that would fail if the number of words you had wrapped were longer or shorter than the parent element's width. As we tend not to know how many words will fit on a line — as that will change if the screen width or font-size changes — it is impossible to robustly do this by adding HTML. The pseudo-element selector will do this for you reliably — if the number of words increases or decreases it will still only select the first line. It acts as if a was magically wrapped around that first formatted line, and updated each time the line length changed. You can see that this selects the first line of both paragraphs.\n\nGenerating content with ::before and ::after There are a couple of special pseudo-elements, which are used along with the property to insert content into your document using CSS. You could use these to insert a string of text, such as in the live example below. Try changing the text value of the property and see it change in the output. You could also change the pseudo-element to and see the text inserted at the end of the element instead of the beginning. <p class=\"box\">Content in the box in my HTML page.</p> .box::before { content: \"This should show before the other content. \"; } Inserting strings of text from CSS isn't really something we do very often on the web however, as that text is inaccessible to some screen readers and might be hard for someone to find and edit in the future. A more valid use of these pseudo-elements is to insert an icon, for example the little arrow added in the example below, which is a visual indicator that we wouldn't want read out by a screen reader: <p class=\"box\">Content in the box in my HTML page.</p> These pseudo-elements are also frequently used to insert an empty string, which can then be styled just like any element on the page. In this next example, we have added an empty string using the pseudo-element. We have set this to in order that we can style it with a width and height. We then use CSS to style it just like any element. You can play around with the CSS and change how it looks and behaves. <p class=\"box\">Content in the box in my HTML page.</p> The use of the and pseudo-elements along with the property is referred to as \"Generated Content\" in CSS, and you will often see this technique being used for various tasks. A great example is the site CSS Arrow Please, which helps you to generate an arrow with CSS. Look at the CSS as you create your arrow and you will see the and pseudo-elements in use. Whenever you see these selectors, look at the property to see what is being added to the HTML element."
    },
    {
        "link": "https://medium.com/codex/two-different-ways-to-style-pseudo-elements-with-javascript-3d9260d9c61b",
        "document": "Last time for a project, I wanted to target in javascript all ::before elements of a page by hovering an element, not only the before it precedes. Then I tried to write something like that:\n\nOk, the problem now is, nothing happens ! When I checked the console, It says to me “before is null”.\n\nI‘m not sure about the answer for now, but I think it’s only because DOM target only html nodes, and pseudo-elements…"
    },
    {
        "link": "https://dev.to/ridhikgovind/selecting-and-manipulating-css-pseudo-elements-such-as-before-and-after-using-javascript-easy-way-1bfj",
        "document": "So this title you are looking at - Yes its an actual stackoverflow question.The question has 980 upvotes and it's top answer has 723 upvotes. Then the question arises, why write an article about it then. Well, for starters I really wanted to answer this question, but since I didnt have enough \"reputations\",this article is my way of letting people know of this new easy method.\n\nScenerio 1:\n\n Imagine you want to grab an element using JavaScript and change its color using JavaScript. Its pretty easy, here we go:\n\n\n\nScenerio 2:\n\n This time we create a pseudo element on the element and then try to change the pseudo element's background color. So lets see what happens here:\n• Create a basic pseudo element with the styling(if you are new to creating a pseudo element, I suggest you learn that first and come back here):\n• Now just a little twist to this, instead of using black as the background color, we are gonna create a element in our CSS file inside which we will create a variable '--pseudo-backgroundcolor' with a value of 'red' and use this varible as the value for 'background' as shown below.\n• So by now I hope you are getting some hint of where I am heading. No ? Okay, let me explain. Our goal is simple, we should create a global background color variable and with the help of JavaScript we will grab the root value of the variable and update it using JavaScript so that the effect will be applied to the pseudo elements background color style automatically.\n\nSo as you can see, we grabbed the varible and used function to first select the variable and then set its color value from red to green. This is pretty much the code we need.So now if we ever need to change the color, you can just do this dynamically.An example would be to create a button and on click of that button, you can loop through an array of different colors and apply it to this varible.\n\n\n\n In the stackoverflow answer, you can see other right ways too, but they just seemed a bit long, while this one just needs you to set the root variable and just write some JS code.\n\nSuppose you want to add a text to a pseudo element - we usually add text using the property.So instead of \"\" , just create a root variable like we did above and manipulate it using one line of JavaScript.Here's the code:\n\n\n\nSo thats it, Hope you learned something new today or even saved time finding this solution. I got to find this solution while I was making my app - PrettyCover - which you can use to create Beautiful Cover Images for your blogs.In fact, I have made this cover image using PrettyCover. I would appreciate if you could go and try it out, and if you like it, don't forget to ⭐ the repo.\n\nAlso, here is the codePen containing the full example codes: https://codepen.io/ridzman/pen/poEgPGq?editors=0011\n\nAnd as always ending the article with a Gif. Please do let me know if there are any corrections or clarifications to be made. Ciao !"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector",
        "document": "The method returns the first within the document that matches the specified CSS selector, or group of CSS selectors. If no matches are found, is returned. The matching is done using depth-first pre-order traversal of the document's nodes starting with the first element in the document's markup and iterating through sequential nodes by order of the number of child nodes. If the specified selector matches an ID that is incorrectly used more than once in the document, the first element with that ID is returned. CSS pseudo-elements will never return any elements, as specified in the Selectors API.\n\nA string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a exception is thrown. Note that the HTML specification does not require attribute values to be valid CSS identifiers. If a or attribute value is not a valid CSS identifier, then you must escape it before using it in a selector, either by calling on the value, or using one of the techniques described in Escaping characters. See Escaping attribute values for an example.\n\nAn object representing the first element in the document that matches the specified set of CSS selectors, or is returned if there are no matches. If you need a list of all elements matching the specified selectors, you should use instead.\n\nAs all CSS selector strings are valid, you can also negate selectors: This will select an input with a parent div with the class but not the class.\n\nThis example shows that if an HTML document contains an which is not a valid CSS identifier, then we must escape the attribute value before using it in . In the following code, a element has an of , which is not a valid CSS identifier, because the character is not allowed in CSS identifiers. We also have three buttons, and a element for logging errors. All three buttons, when clicked, try to select the , and then set its background color to a random value.\n• The first button uses the value directly.\n• The second button escapes the value using .\n• The third button explicitly escapes the character using a backslash. Note that we must also escape the backslash itself, using another backslash, like: . Clicking the first button gives an error, while the second and third buttons work properly."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector",
        "document": "The method of the interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.\n\nA string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a exception is thrown. Note that the HTML specification does not require attribute values to be valid CSS identifiers. If a or attribute value is not a valid CSS identifier, then you must escape it before using it in a selector, either by calling on the value, or using one of the techniques described in Escaping characters. See Escaping attribute values for an example.\n\nThe first descendant element of which matches the specified group of . The entire hierarchy of elements is considered when matching, including those outside the set of elements including and its descendants; in other words, is first applied to the whole document, not the , to generate an initial list of potential elements. The resulting elements are then examined to see if they are descendants of . The first match of those remaining elements is returned by the method. If no matches are found, the returned value is .\n\nThis example demonstrates that the hierarchy of the entire document is considered when applying , so that levels outside the specified are still considered when locating matches. The result looks like this: Notice how the selector still successfully matches the element, even though the 's child nodes do not include the element (it is still part of the specified selector).\n\nThis example shows that if an HTML document contains an which is not a valid CSS identifier, then we must escape the attribute value before using it in . In the following code, a element has an of , which is not a valid CSS identifier, because the character is not allowed in CSS identifiers. We also have three buttons, and a element for logging errors. All three buttons, when clicked, try to select the , and then set its background color to a random value.\n• The first button uses the value directly.\n• The second button escapes the value using .\n• The third button explicitly escapes the character using a backslash. Note that we must also escape the backslash itself, using another backslash, like: . Clicking the first button gives an error, while the second and third buttons work properly."
    },
    {
        "link": "https://w3schools.com/jsref/met_document_queryselector.asp",
        "document": "The method returns the first element that matches a CSS selector.\n\nTo return all matches (not only the first), use the instead.\n\nBoth and throw a SYNTAX_ERR exception if the selector(s) is invalid.\n\nThe Difference Between an HTMLCollection and a NodeList\n\nA NodeList and an HTMLcollection is very much the same thing.\n\nBoth are array-like collections (lists) of nodes (elements) extracted from a document. The nodes can be accessed by index numbers. The index starts at 0.\n\nBoth have a length property that returns the number of elements in the list (collection).\n\nAn HTMLCollection is a collection of document elements.\n\nA NodeList is a collection of document nodes (element nodes, attribute nodes, and text nodes).\n\nHTMLCollection items can be accessed by their name, id, or index number.\n\nNodeList items can only be accessed by their index number.\n\nAn HTMLCollection is always a live collection. Example: If you add a <li> element to a list in the DOM, the list in the HTMLCollection will also change.\n\nA NodeList is most often a static collection. Example: If you add a <li> element to a list in the DOM, the list in NodeList will not change.\n\nIt is fully supported in all browsers:"
    },
    {
        "link": "https://stackoverflow.com/questions/49791896/queryselector-syntax-for-nested-elements",
        "document": "I'm trying to get the div element that's nested deep within another div, but can't get the CSS Selector string to work.\n\nThe div I want does not have a unique identifier, but resides deep within another div that has. I've gotten that top level div, but have no clue how to get the nested one.\n\nThe result is that \"obj\" is the right object, but \"cont\" is null, so it can't find it."
    },
    {
        "link": "https://stackoverflow.com/questions/35924268/if-a-selector-in-a-queryselector-call-matches-multiple-nodes-which-one-is-retur",
        "document": "I had a situation in which I wanted to focus either an input tag, if it existed, or it's container if it didn't. So I thought of an intelligent way of doing it:\n\nFunny, though, always returns the element.\n\nI started to investigate and came out that, no matter the order in which the different selectors are put, always returns the same element.\n\nMy question is: What are the \"reasons\" of this behavior and what \"rules\" (if any) make P elements have priority over DIV and PRE elements."
    }
]