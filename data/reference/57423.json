[
    {
        "link": "https://pillow.readthedocs.io/en/stable/reference/Image.html",
        "document": "The module provides a class with the same name which is used to represent a PIL image. The module also provides a number of factory functions, including functions to load images from files, and to create new images.\n\nInstances of the class have the following attributes: The filename or path of the source file. Only images created with the factory function have a filename attribute. If the input is a file like object, the filename attribute is set to an empty string. The file format of the source file. For images created by the library itself (via a factory function, or by running a method on an existing image), this attribute is set to . Image mode. This is a string specifying the pixel format used by the image. Typical values are “1”, “L”, “RGB”, or “CMYK.” See Modes for a full list. Image size, in pixels. The size is given as a 2-tuple (width, height). Colour palette table, if any. If mode is “P” or “PA”, this should be an instance of the class. Otherwise, it should be set to . A dictionary holding data associated with the image. This dictionary is used by file handlers to pass on various non-image information read from the file. See documentation for the various file handlers for details. Most methods ignore the dictionary when returning new images; since the keys are not standardized, it’s not possible for a method to know if the operation affects the dictionary. If you need the information later on, keep a reference to the info dictionary returned from the open method. Unless noted elsewhere, this dictionary does not affect saving files. if this image has more than one frame, or otherwise. This attribute is only defined by image plugins that support animated images. Plugins may leave this attribute undefined if they don’t support loading animated images, even if the given format supports animated images. Given that this attribute is not present for all images use to check if Pillow is aware of multiple frames in an image regardless of its format. The number of frames in this image. This attribute is only defined by image plugins that support animated images. Plugins may leave this attribute undefined if they don’t support loading animated images, even if the given format supports animated images. Given that this attribute is not present for all images use to check the number of frames that Pillow is aware of in an image regardless of its format. Determine if an image has transparency data, whether in the form of an alpha channel, a palette with an alpha channel, or a “transparency” key in the info dictionary. Note the image might still appear solid, if all of the values shown within are opaque."
    },
    {
        "link": "https://pillow.readthedocs.io/en/stable/handbook/tutorial.html",
        "document": "The most important class in the Python Imaging Library is the class, defined in the module with the same name. You can create instances of this class in several ways; either by loading images from files, processing other images, or creating images from scratch. To load an image from a file, use the function in the module: If successful, this function returns an object. You can now use instance attributes to examine the file contents: The attribute identifies the source of an image. If the image was not read from a file, it is set to None. The size attribute is a 2-tuple containing width and height (in pixels). The attribute defines the number and names of the bands in the image, and also the pixel type and depth. Common modes are “L” (luminance) for grayscale images, “RGB” for true color images, and “CMYK” for pre-press images. If the file cannot be opened, an exception is raised. Once you have an instance of the class, you can use the methods defined by this class to process and manipulate the image. For example, let’s display the image we just loaded: The standard version of is not very efficient, since it saves the image to a temporary file and calls a utility to display the image. If you don’t have an appropriate utility installed, it won’t even work. When it does work though, it is very handy for debugging and tests. The following sections provide an overview of the different functions provided in this library.\n\nThe Python Imaging Library supports a wide variety of image file formats. To read files from disk, use the function in the module. You don’t have to know the file format to open a file. The library automatically determines the format based on the contents of the file. To save a file, use the method of the class. When saving files, the name becomes important. Unless you specify the format, the library uses the filename extension to discover which file storage format to use. A second argument can be supplied to the method which explicitly specifies a file format. If you use a non-standard extension, you must always specify the format this way: It is important to note that the library doesn’t decode or load the raster data unless it really has to. When you open a file, the file header is read to determine the file format and extract things like mode, size, and other properties required to decode the file, but the rest of the file is not processed until later. This means that opening an image file is a fast operation, which is independent of the file size and compression type. Here’s a simple script to quickly identify a set of image files:\n\nThe class contains methods allowing you to manipulate regions within an image. To extract a sub-rectangle from an image, use the method. The region is defined by a 4-tuple, where coordinates are (left, upper, right, lower). The Python Imaging Library uses a coordinate system with (0, 0) in the upper left corner. Also note that coordinates refer to positions between the pixels, so the region in the above example is exactly 64x64 pixels. The region could now be processed in a certain manner and pasted back. When pasting regions back, the size of the region must match the given region exactly. In addition, the region cannot extend outside the image. However, the modes of the original image and the region do not need to match. If they don’t, the region is automatically converted before being pasted (see the section on Color transforms below for details). Or if you would like to merge two images into a wider image: For more advanced tricks, the paste method can also take a transparency mask as an optional argument. In this mask, the value 255 indicates that the pasted image is opaque in that position (that is, the pasted image should be used as is). The value 0 means that the pasted image is completely transparent. Values in-between indicate different levels of transparency. For example, pasting an RGBA image and also using it as the mask would paste the opaque portion of the image but not its transparent background. The Python Imaging Library also allows you to work with the individual bands of an multi-band image, such as an RGB image. The split method creates a set of new images, each containing one band from the original multi-band image. The merge function takes a mode and a tuple of images, and combines them into a new image. The following sample swaps the three bands of an RGB image: Note that for a single-band image, returns the image itself. To work with individual color bands, you may want to convert the image to “RGB” first.\n\nThe class contains methods to and an image. The former takes a tuple giving the new size, the latter the angle in degrees counter-clockwise. To rotate the image in 90 degree steps, you can either use the method or the method. The latter can also be used to flip an image around its horizontal or vertical axis. operations can also be performed identically with operations, provided the flag is true, to provide for the same changes to the image’s size. A more general form of image transformations can be carried out via the method. Instead of calculating the size of the new image when resizing, you can also choose to resize relative to a given size. # thumbnail() can also be used, # but will modify the image object in place\n\nThe Python Imaging Library provides a number of methods and modules that can be used to enhance images. The module contains a number of pre-defined enhancement filters that can be used with the method. The method can be used to translate the pixel values of an image (e.g. image contrast manipulation). In most cases, a function object expecting one argument can be passed to this method. Each pixel is processed according to that function: Using the above technique, you can quickly apply any simple expression to an image. You can also combine the and methods to selectively modify an image: # select regions where red is less than 100 # paste the processed band back, but only where red was < 100 Note the syntax used to create the mask: Python only evaluates the portion of a logical expression as is necessary to determine the outcome, and returns the last value examined as the result of the expression. So if the expression above is false (0), Python does not look at the second operand, and thus returns 0. Otherwise, it returns 255. For more advanced image enhancement, you can use the classes in the module. Once created from an image, an enhancement object can be used to quickly try out different settings. You can adjust contrast, brightness, color balance and sharpness in this way.\n\nThe Python Imaging Library contains some basic support for image sequences (also called animation formats). Supported sequence formats include FLI/FLC, GIF, and a few experimental formats. TIFF files can also contain more than one frame. When you open a sequence file, PIL automatically loads the first frame in the sequence. You can use the seek and tell methods to move between different frames: # skip to the second frame As seen in this example, you’ll get an exception when the sequence ends. You can create animated GIFs with Pillow, e.g. # Save the images as an animated GIF # duration of each frame in milliseconds The following class lets you use the for-statement to loop over the sequence: # ...do something to frame...\n\nAs described earlier, the function of the module is used to open an image file. In most cases, you simply pass it the filename as an argument. can be used as a context manager: If everything goes well, the result is an object. Otherwise, an exception is raised. You can use a file-like object instead of the filename. The object must implement , and methods, and be opened in binary mode. To read an image from binary data, use the class: Note that the library rewinds the file (using ) before reading the image header. In addition, seek will also be used when the image data is read (by the load method). If the image file is embedded in a larger file, such as a tar file, you can use the or modules to access it. Operations can be applied to multiple image files. For example, all PNG images in the current directory can be saved as JPEGs at reduced quality. Since images can also be opened from a from the module, the example could be modified to use instead of the module.\n\nSome decoders allow you to manipulate the image while reading it from a file. This can often be used to speed up decoding when creating thumbnails (when speed is usually more important than quality) and printing to a monochrome laser printer (when only a grayscale version of the image is needed). The method manipulates an opened but not yet loaded image so it as closely as possible matches the given mode and size. This is done by reconfiguring the image decoder. This is only available for JPEG and MPO files. This prints something like: Note that the resulting image may not exactly match the requested mode and size. To make sure that the image is not larger than the given size, use the thumbnail method instead."
    },
    {
        "link": "https://readthedocs.org/projects/pillow/downloads/pdf/latest",
        "document": ""
    },
    {
        "link": "https://codecademy.com/resources/docs/pillow/image/resize",
        "document": "In Pillow, the method is used to change the size of an image. Pillow is a widely used Python library for image processing and manipulation, supporting formats such as JPEG, PNG, PPM, TIFF, GIF, and BMP It can be easily installed on a local PC using pip.\n• : A 2-tuple specifying the new size as .\n• : Specifies the resampling filter to be used when resizing.\n• : A 4-tuple defining the region of the image to resize.\n• : A float to optimize downscaling by resizing in multiple steps.\n\nThe following example demonstrates the use of the method to change the size of the image:\n\nThe code snippet will display the new dimensions of the image and also showcase the image in the output as follows:"
    },
    {
        "link": "https://buildmedia.readthedocs.org/media/pdf/pillow/latest/pillow.pdf",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/10607468/how-to-reduce-the-image-file-size-using-pil",
        "document": "I am using PIL to resize the images there by converting larger images to smaller ones. Are there any standard ways to reduce the file size of the image without losing the quality too much? Let's say the original size of the image is 100 kB. I want to get it down to like 5 or 10 kB, especially for PNG and JPEG formats.\n\nA built-in parameter for saving JPEGs and PNGs is . from PIL import Image foo = Image.open('path/to/image.jpg') # My image is a 200x374 jpeg that is 102kb large foo.size # (200, 374) # downsize the image with an ANTIALIAS filter (gives the highest quality) foo = foo.resize((160,300),Image.ANTIALIAS) foo.save('path/to/save/image_scaled.jpg', quality=95) # The saved downsized image size is 24.8kb foo.save('path/to/save/image_scaled_opt.jpg', optimize=True, quality=95) # The saved downsized image size is 22.9kb The flag will do an extra pass on the image to find a way to reduce its size as much as possible. 1.9kb might not seem like much, but over hundreds/thousands of pictures, it can add up. Now to try and get it down to 5kb to 10 kb, you can change the quality value in the save options. Using a quality of 85 instead of 95 in this case would yield: Unoptimized: 15.1kb Optimized : 14.3kb Using a quality of 75 (default if argument is left out) would yield: Unoptimized: 11.8kb Optimized : 11.2kb I prefer quality 85 with optimize because the quality isn't affected much, and the file size is much smaller.\n\nlets say you have a model called Book and on it a field called 'cover_pic', in that case, you can do the following to compress the image: hope it helps to anyone stumbling upon it.\n\nSee the thumbnail function of PIL's Image Module. You can use it to save smaller versions of files as various filetypes and if you're wanting to preserve as much quality as you can, consider using the filter when you do. Other than that, I'm not sure if there's a way to specify a maximum desired size. You could, of course, write a function that might try saving multiple versions of the file at varying qualities until a certain size is met, discarding the rest and giving you the image you wanted.\n\nThe main image manager in is 's module. You can add to the arguments of you want to decrease the size even more, but optimize only works for JPEG's and PNG's. For other image extensions, you could decrease the quality of the new saved image. You could change the size of the new image by just deleting a bit of code and defining the image size and you can only figure out how to do this if you look at the code carefully. I defined this size: just to show you what is (almost) normally done with horizontal images. For vertical images you might do: . Remember, you can still delete that bit of code and define a new size.\n\nThis script will reduce your image's width and height, , and reducing size also there are , they are doing the same logic, first one is how i did in django project , second is on pure python You can change for your required width in after image saved, it will be proccessed again\n\nResizing an image, storing it as a JPEG and reducing the quality to 95 saves up a lot of bytes on the final output: image = Image.open(\"input_file.png\") image = image.resize((WIDTH, HEIGHT)) #smaller width and height than the original image.save(\"output_file.jpg\", \"JPEG\", quality=95) However, let's say you HAVE to bring the image size <= 100 kb, no matter what. In that case, we need to keep decreasing the quality of the image until we get to the right filesize: minimum_quality = 50 # recommended, but optional (set to 0 if you don't want it) quality = 95 # initial quality target = 100000 # 100 kb while True: output_buffer = io.BytesIO() # import io image.save(output_buffer, \"JPEG\", quality=quality) file_size = output_buffer.tell() if file_size <= target or quality <= minimum_quality: output_buffer.close() break else: quality -= 5 image.save(output_image, \"JPEG\", quality=quality) As you can see, we keep storing the image in a temp buffer and reading the size of the buffer to know the file size.\n\nThe current version of Pillow (10.4.0) has a reduce method. from PIL import Image def reduce_image_file_size(fnmIn, fnmOut, factor): ''' Reduce image file size. ''' try: img = Image.open(fnmIn) img = img.reduce(factor) img.save(fnmOut) except Image.DecompressionBombError as ex1: print(ex1) except Exception as ex2: raise ex2 I was working with images that had been scanned at a ridiculously high resolution. I was able to reduce the image size by a factor of 10 with no visible loss of image quality. It was necessary to ignore the DecompressionBombError error. I do not recommend you do this unless you are certain of the provenance of the files."
    },
    {
        "link": "https://auth0.com/blog/image-processing-in-python-with-pillow",
        "document": "If you’re building your application with Python and it needs to process images, you have a choice of libraries, including OpenCV, scikit-image, Python Imaging Library and Pillow.\n\nWe won't debate which library is the best here; they all have their merits. This article will focus on Pillow, a powerful library that provides a wide array of image processing features and is simple to use. To make the tutorial more interactive and easy to follow, we'll run all the code using Jupyter Notebooks.\n\nPillow is a fork of the Python Imaging Library (PIL). PIL is a library that offers several standard functions for manipulating images. It's a powerful library but hasn't been updated since 2009 and doesn't support Python 3.\n\nPillow builds on PIL, adding more features and support for Python 3. It supports a range of image file formats such as PNG, JPEG, PPM, GIF, TIFF, and BMP. We'll see how to perform various operations on images using this library, such as cropping, resizing, adding text to images, rotating, greyscaling, and more.\n\nYou can follow along by downloading our sample Jupyter notebook from GitHub, or you can create your own project and install the following packages:\n\nTo follow along, you can download the images (courtesy of Unsplash) that we'll use in the article.\n\nAll the code examples will assume the required images are in the same directory as your Jupyter Notebook file.\n\nYou’ll find the code for all the Pillow exercise in this article in a Jupyter Notebook in this GitHub repository.\n\nOf all the classes in Pillow, you’ll probably use\n\nthe most. It's defined in themodule and is the class that represents images and provides methods for loading or creating them, processing them, and displaying them.\n\nTo load an image from a file, use the\n\nfunction in themodule, which takes thefor the image as its argument:\n\nRun the cell. Here’s what it should look like in Jupyter Notebook:\n\nIf you’re using a command-line Python REPL (or something similar) instead of a Jupyter Notebook, you’ll need to call on an external viewer application to see the image. You can do this with\n\nGetting information about an image\n\nlaunches your system’s external viewer, using it to display the image. On Windows, it will usually launch Paint; on macOS, it will launch Preview; and on Linux and other Unix-based systems, it will launch xv.\n\nYou can get some information about an\n\nobject using its attributes. Enter the following into a new cell and run it:\n\nFor more on what you can do with the\n\n’smethod takes a two-integer tuple argument representing the width and height of the new resized image.\n\nHere’s an example that takes the image you loaded and resizes both its width and height to 300 pixels — enter it into a new cell and run it:\n\ndoesn't modify the image but returns anotherinstance with the new dimensions.\n\nchanges the image’s dimensions to the ones you provide, it doesn’t preserve the image’s aspect ratio unless you purposely do so. The resulting image may end up looking stretched or compressed, which may not be the effect you want. You can see this in the newly-created image from the code above; it looks a bit squished horizontally:\n\nIf you want to resize images and keep their aspect ratios, use\n\n’smethod instead. Liketakes a two-integer tuple argument. However, the values in the tuple represent the maximum x- and y-sizes allowed while also preserving the image’s aspect ratio.\n\nEnter the code below into a new cell and run it:\n\n, themethod does not create a newinstance. Instead, it modifies the original. That’s why the code above first makes a copy of the image.\n\nThe code above resize the image to 300 × 200 and preserves the original’s aspect ratio:\n\nAnother significant difference between the\n\nandmethods is thatenalrges an image if given parameters that are larger than the original image, whiledoesn't.\n\nFor example, given an image of size 400 × 200, a call to\n\nwill create a larger-sized image 1200 pixels wide and 600 pixels tall, along with the expected loss of sharpness. A similar call tousing the original image will not enlarge the image since themethod cannot expand an image beyond either of its original dimensions.\n\nThe rise of retrocomputing and retrogaming has created a lot of interest in old-school “pixelated” graphics. You can use a combination of\n\n’sandmethods to turn a modern, high-resolution image into a “retro” one like the one below:\n\nHere’s the code that produces this effect:\n\nThe code above takes advantage of the\n\nmethod’s optionalparameter, which specifies how to draw pixels when resizing the image. When making an image larger, the “nearest neighbor” resampling method creates a “retro” pixel effect.\n\nclass provides themethod for quick image flipping.takes the following arguments:\n\nHere’s how you would create a horizontal mirror image of the original:\n\nThe resulting image can be seen below. Notice that the puffin with the open beak is now on the left side of the photo:\n\narguments rotate the image counterclockwise 90, 180, and 270 degrees, respectively. The following rotates the image 180 degrees:\n\nTransposing an image means mirroring it along the diagonal line that runs from the top left to the bottom right, while tranversing it means mirroring it along the diagonal line running from the bottom left to the top right. This is yet another case where showing is better than telling, so let’s make the code do that.\n\nYou can rotate images with Pillow using\n\n’smethod. This takes an integer or float argument representing the degrees to rotate an image (positive for counterclockwise, negative for clockwise) and returns a newobject for the rotated image.\n\nBy default, the rotated image keeps the dimensions of the original image. This means that for angles other than multiples of 180, the image will be cut and/or padded to fit the original dimensions. Consider this code, which rotates an image 90 degrees counterclockwise:\n\nNotice that the image has been “clipped” to fit the original height, and its sides have been padded with black background (on some operating systems, the padding will be made of transparent pixels) to fit the original width.\n\nThe example below, where the original image is rotated 18 degrees counterclockwise, shows this “clipping” effect more clearly.\n\nThe resulting image is shown below:\n\nTo expand the dimensions of the rotated image to fit the entire view, you pass a second argument to\n\nNow the contents of the image will be fully visible, and the dimensions of the image will have increased to account for this:\n\n’smethod to create a new image by cropping a section from an existing one. This method takes a 4-tuple that defines the position and size of the cropped region, as shown in the method call example below:\n\nPillow’s coordinate system starts with (0, 0) in the upper left corner, with x increasing from left to right and y increasing from top to bottom:\n\nThe cropped section includes the left column and the upper row of pixels and goes up to — but doesn't include — the right column and bottom row of pixels. This is better explained with a diagram:\n\nHere’s an example that creates a new image by cropping the rectangle described below:\n\nPasting an Image onto Another Image\n\nPillow enables you to paste an image onto another one. Some example use cases where this could be useful is in the protection of publicly available images by adding watermarks on them, the branding of images by adding a company logo, and in any other case where there is a need to merge two images.\n\nclass’method pastes another image onto the current one. This is useful for protecting publicly available images by adding watermarks, branding images with a company logo, or simply creating compositions of two or more images.\n\nis unlike manymethods (but like) in that it modifies theobject in place rather than returning a new `one. Because of this, we'll first make a copy of our puffin image before performing the paste to continue with the other examples using the original.\n\nThe code above loads a new image,\n• A 2-tuple specifying the upper left corner of the pasted image,\n• a 4-tuple defining the left, upper, right, and lower pixel coordinates of the pasted image, or\n• , which simply pastes the image at the coordinates (0, 0).\n\n, and makes a copy of the puffin image. We want to paste the logo image onto the puffin image copy at the bottom right corner. The code calculates the coordinates for pasting the logo, which can be:\n\nIn this case, we’re pasting the logo using a 2-tuple coordinate:\n\nYou can see the result below:\n\n, transparent pixels are pasted as solid pixels by default. Hence the black (white on some OSs) box surrounding the logo. Most of the time, this isn't what you want. You can't have your watermark covering the underlying image's content. We would rather have transparent pixels appear as such.\n\nTo achieve this, you need to pass in an optional third argument to the\n\nmethod. This argument is anobject that acts as an opacity mask.\n\nAn opacity mask is an\n\nobject where only the alpha value is significant, while its green, red, and blue values are ignored. If a mask is provided as an optional third argument to, the method updates only the regions the mask indicated. You can use either, orimages for masks. Pasting an RGBA image and using it as the mask pastes only the opaque portion of the image — not its transparent background.\n\nThe code below provides an example of this approach:\n\nWith Pillow, you can also draw on an image using the ImageDraw module. You can draw lines, points, ellipses, rectangles, arcs, bitmaps, chords, pie slices, polygons, shapes, and text.\n\nThe code below draws a black rectangle with a fine white outline near the lower left corner of the puffin image from the previous code example. It then draws the text message “Hello, puffins!” in large white text inside the rectangle:\n\nConverting an image from color to grayscale\n\n’smethod can convert images between different pixel representations, such as the RGB (red-green-blue) format used by screens and the CMYK (cyan-magenta-yellow-black) format used in printing. Like mostmethods,returns a newobject.\n\nalso supports converting images to the(luminance) format, which is a grayscale image format. The code below converts our puffin image from color to grayscale monochrome:\n\nReducing the number of colors in an image\n\nIn addition to pixelation, another way to make an image look “retro” is to reduce the number of colors it uses to 256 or fewer. You can do this with a single call to\n\nThe code below reduces the number of colors in our puffin photo to 16, producing an effect that should remind you of 1990s computer graphics:\n\nmethod of Pillow’sclass makes it possible to split a multi-band image into individual bands, such as the R, G, and B bands from an RGB image.creates new images, each containing one band from the original image.\n\nhas an inverse function,, which merges a set of single band images into a new multi-band image.takes a mode and a tuple of images and combines them into a new image.\n\nThe code below takes the original “puffin” image, splits it into three images — one for each of the R, G, and B bands — and then merges them so that:\n\nPillow allows you to enhance an image by adjusting its contrast, color, brightness, and sharpness using classes in the\n\nHere’s code that boosts the contrast of the “puffin” image:\n\nHere’s the image after enhancing its contrast:\n\nThe code above adjusts the image contrast by a factor of 3; smaller values will produce more subtle effects. A factor of 1.0 returns a copy of the original image; lower factors produce images with lower contrast.\n\nBelow, we increase the color of the image. If we used a factor of\n\n, we would get a black and white image.\n\nBelow we make the image brighter. A factor of\n\nBelow, we make the image sharper. An enhancement factor of\n\nTo save an image, use\n\n’smethod. For example, here’s how you’d save the image from the Enhancing sharpness exercise above as a PNG file:\n\nPillow sees the file extension has been specified as\n\nand converts it to PNG before saving it to a file.\n\nTo save it as a JPEG image, use this:\n\nYou can provide a second argument to\n\nto explicitly specify a file format.will do the same thing as the previous save(). Usually, it's unnecessary to supply this second argument as Pillow will determine the file storage format to use from the filename extension, but if you're using non-standard extensions, you should always specify the format this way.\n\nIn this article, we've covered some of the more common image-processing operations in applications. Pillow is a powerful library, and we have yet to discuss everything it can do. If you want to find out more, be sure to read the documentation."
    },
    {
        "link": "https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html",
        "document": "The Python Imaging Library supports a wide variety of raster file formats. Over 30 different file formats can be identified and read by the library. Write support is less extensive, but most common interchange and presentation formats are supported.\n\nThe function identifies files from their contents, not their names, but the method looks at the name to determine which format to use, unless the format is given explicitly.\n\nWhen an image is opened from a file, only that instance of the image is considered to have the format. Copies of the image will contain data loaded from the file, but not the file itself, meaning that it can no longer be considered to be in the original format. So if is called on an image, or another method internally creates a copy of the image, then any methods or attributes specific to the format will no longer be present. The (file pointer) attribute will no longer be present, and the attribute will be .\n\nBLP is the Blizzard Mipmap Format, a texture format used in World of Warcraft. Pillow supports reading Compressed or raw images, and all types of images. Pillow supports writing BLP images. The method can take the following keyword arguments: If present and set to “BLP1”, images will be saved as BLP1. Otherwise, images will be saved as BLP2. Pillow reads and writes Windows and OS/2 BMP files containing , , , or data. 16-colour images are read as images. Support for reading 8-bit run-length encoding was added in Pillow 9.1.0. Support for reading 4-bit run-length encoding was added in Pillow 9.3.0. The method sets the following properties: Set to 1 if the file is a 256-color run-length encoded image. Set to 2 if the file is a 16-color run-length encoded image. DDS is a popular container texture format used in video games and natively supported by DirectX. DXT1 and DXT5 pixel formats can be read, only in mode. Added in version 3.4.0: DXT3 images can be read in mode and DX10 images can be read in and mode. Added in version 6.0.0: Uncompressed images can be read. Added in version 8.3.0: BC5S images can be opened in mode, and uncompressed images can be read. Uncompressed data can also be saved to image files. Added in version 9.3.0: ATI1 images can be opened in mode and ATI2 images can be opened in mode. Added in version 9.4.0: Uncompressed (“luminance”) and images can be opened and saved. Added in version 10.1.0: BC5U can be read in mode, and 8-bit color indexed images can be read in mode. Pillow reads and writes DIB files. DIB files are similar to BMP files, so see above for more information. Pillow identifies EPS files containing image data, and can read files that contain embedded raster images (ImageData descriptors). If Ghostscript is available, other EPS files can be read as well. The EPS driver can also write EPS images. The EPS driver can read EPS images in , , and mode, but Ghostscript may convert the images to mode rather than leaving them in the original color space. The EPS driver can write images in , and modes. To use Ghostscript, Pillow searches for the “gs” executable. On Windows, it also searches for “gswin32c” and “gswin64c”. To customise this behaviour, will set the name of the executable to use. will prevent Ghostscript use. If Ghostscript is available, you can call the method with the following parameters to affect how Ghostscript renders the EPS. Affects the scale of the resultant rasterized image. If the EPS suggests that the image be rendered at 100px x 100px, setting this parameter to 2 will make the Ghostscript render a 200px x 200px image instead. The relative position of the bounding box is maintained: If true, generates an RGBA image with a transparent background, instead of the default behaviour of an RGB image with a white background. Pillow reads GIF87a and GIF89a versions of the GIF file format. The library writes files in GIF87a by default, unless GIF89a features are used or GIF89a is already in use. Files are written with LZW encoding. GIF files are initially read as grayscale ( ) or palette mode ( ) images. Seeking to later frames in a image will change the image to (or if the first frame had transparency). mode images are changed to because each frame of a GIF may contain its own individual palette of up to 256 colors. When a new frame is placed onto a previous frame, those colors may combine to exceed the mode limit of 256 colors. Instead, the image is converted to handle this. If you would prefer the first image frame to be as well, so that every frame is converted to or mode, there is a setting available: GIF frames do not always contain individual palettes however. If there is only a global palette, then all of the colors can fit within mode. If you would prefer the frames to be kept as in that case, there is also a setting available: To restore the default behavior, where mode images are only converted to or after the first frame: The method sets the following properties: Transparency color index. This key is omitted if the image is not transparent. May not be present. The time to display the current frame of the GIF, in milliseconds. May not be present. The number of times the GIF should loop. 0 means that it will loop forever. May not be present. A comment about the image. This is the last comment found before the current frame’s image. May not be present. Contains application specific information. The GIF loader supports the and methods. You can combine these methods to seek to the next frame ( ). raises an if you try to seek after the last frame. When calling to write a GIF file, the following options are available: If present and true, all frames of the image will be saved. If not, then only the first frame of a multiframe image will be saved. A list of images to append as additional frames. Each of the images in the list can be single or multiframe images. This is currently supported for GIF, PDF, PNG, TIFF, and WebP. It is also supported for ICO and ICNS. If images are passed in of relevant sizes, they will be used instead of scaling down the main image. Whether or not to include local color table. Whether or not the image is interlaced. By default, it is, unless the image is less than 16 pixels in width or height. Indicates the way in which the graphic is to be treated after being displayed. Pass a single integer for a constant disposal, or a list or tuple to set the disposal for each frame separately. Use the specified palette for the saved image. The palette should be a bytes or bytearray object containing the palette entries in RGBRGB… form. It should be no more than 768 bytes. Alternately, the palette can be passed in as an object. Whether to attempt to compress the palette by eliminating unused colors (this is only useful if the palette can be compressed to the next smaller power of 2 elements) and whether to mark all pixels that are not new in the next frame as transparent. This is attempted by default, unless a palette is specified as an option or as part of the first image’s dictionary. Note that if the image you are saving comes from an existing GIF, it may have the following properties in its dictionary. For these options, if you do not pass them in, they will default to their values. The display duration of each frame of the multiframe gif, in milliseconds. Pass a single integer for a constant duration, or a list or tuple to set the duration for each frame separately. Integer number of times the GIF should loop. 0 means that it will loop forever. If omitted or , the image will not loop. The GIF loader creates an image memory the same size as the GIF file’s logical screen size, and pastes the actual pixel data (the local image) into this image. If you only want the actual pixel rectangle, you can crop the image: # only read the first \"local image\" from this GIF file Pillow reads and writes macOS files. By default, the largest available icon is read, though you can override this by setting the property before calling . The method sets the following property: Prior to version 8.3.0, Pillow could only write ICNS files on macOS. A list of supported sizes found in this icon file; these are a 3-tuple, , where is 2 for a retina icon and 1 for a standard icon. You can call the method with the following parameter. Affects the scale of the resultant image. If the size is set to , after loading at scale 2, the final value of will be . The method can take the following keyword arguments: A list of images to replace the scaled down versions of the image. The order of the images does not matter, as their use is determined by the size of each image. ICO is used to store icons on Windows. The largest available icon is read. The method supports the following options: A list of sizes including in this ico file; these are a 2-tuple, ; Default to . Any sizes bigger than the original size or 256 will be ignored. The method can take the following keyword arguments: A list of images to replace the scaled down versions of the image. The order of the images does not matter, as their use is determined by the size of each image. By default, the image data will be saved in PNG format. With a bitmap format of “bmp”, image data will be saved in BMP format instead. IM is a format used by LabEye and other applications based on the IFUNC image processing library. The library reads and writes most uncompressed interchange versions of this format. IM is the only format that can store all internal Pillow formats. Pillow reads JPEG, JFIF, and Adobe JPEG files containing , , or data. It writes standard and progressive JFIF files. Using the method, you can speed things up by converting images to , and resize images to 1/2, 1/4 or 1/8 of their original size while loading them. By default Pillow doesn’t allow loading of truncated JPEG files, set to override this. The method may set the following properties if available: JFIF application marker found. If the file is not a JFIF file, this key is not present. A tuple representing the pixel density of the image, in units specified by jfif_unit. A tuple representing the reported pixel density in pixels per inch, if the file is a jfif file and the units are in inches. Adobe application marker found. If the file is not an Adobe JPEG file, this key is not present. Indicates that this is a progressive JPEG file. The ICC color profile for the image. The method supports the following options: The image quality, on a scale from 0 (worst) to 95 (best), or the string . The default is 75. Values above 95 should be avoided; 100 disables portions of the JPEG compression algorithm, and results in large files with hardly any gain in image quality. The value is only valid for JPEG files and will retain the original image quality level, subsampling, and qtables. If present and true, indicates that the encoder should make an extra pass over the image in order to select optimal encoder settings. If present and true, indicates that this image should be stored as a progressive JPEG file. If present and true, the image is stored with the provided ICC profile. If this parameter is not provided, the image will be saved with no profile attached. To preserve the existing profile: If present, the image will be stored with the provided raw EXIF data. By default, libjpeg converts images with an RGB color space to YCbCr. If this option is present and true, those images will be stored as RGB instead. When this option is enabled, attempting to chroma-subsample RGB images with the option will raise an . If present, sets the subsampling for the encoder.\n• None : Only valid for JPEG files, will retain the original image setting. If absent, the setting will be determined by libjpeg or libjpeg-turbo. If present, emit a restart marker whenever the specified number of MCU blocks has been produced. If present, emit a restart marker whenever the specified number of MCU rows has been produced. If present, sets the qtables for the encoder. This is listed as an advanced option for wizards in the JPEG documentation. Use with caution. can be one of several types of values:\n• None a list, tuple, or dictionary (with integer keys = range(len(keys))) of lists of 64 integers. There must be between 2 and 4 tables. Allows storing images without quantization and Huffman tables, or with these tables but without image data. This is useful for container formats or network protocols that handle tables separately and share them between images. To enable JPEG support, you need to build and install the IJG JPEG library before building the Python Imaging Library. See the distribution README for details. Pillow reads and writes JPEG 2000 files containing , , , , or data. When reading, data is converted to or depending on whether or not there is an alpha channel. Added in version 8.3.0: Pillow can read (but not write) , , and images with subsampled components. Added in version 10.4.0: Pillow can read images with OpenJPEG 2.5.1 and later. Added in version 11.1.0: Pillow can write images with OpenJPEG 2.5.3 and later. Pillow supports JPEG 2000 raw codestreams ( files), as well as boxed JPEG 2000 files ( or files). When loading, if you set the on the image prior to the method being invoked, you can ask Pillow to convert the image to either or rather than choosing for itself. It is also possible to set to the number of resolutions to discard (each one reduces the size of the resulting image by a factor of 2), and to specify the number of quality layers to load. The method supports the following options: The image offset, as a tuple of integers, e.g. (16, 16) The tile offset, again as a 2-tuple of integers. The tile size as a 2-tuple. If not specified, or if set to None, the image will be saved without tiling. Either or depending on the units you want to use to specify image quality. A sequence of numbers, each of which represents either an approximate size reduction (if quality mode is ) or a signal to noise ratio value in decibels. If not specified, defaults to a single layer of full quality. The number of different image resolutions to be stored (which corresponds to the number of Discrete Wavelet Transform decompositions plus one). The code-block size as a 2-tuple. Minimum size is 4 x 4, maximum is 1024 x 1024, with the additional restriction that no code-block may have more than 4096 coefficients (i.e. the product of the two numbers must be no greater than 4096). The precinct size as a 2-tuple. Must be a power of two along both axes, and must be greater than the code-block size. If , use the lossy discrete waveform transformation DWT 9-7. Defaults to , which uses the lossless DWT 5-3. If then enable multiple component transformation when encoding, otherwise use for no component transformation (default). If MCT is enabled and is then the Irreversible Color Transformation will be applied, otherwise encoding will use the Reversible Color Transformation. MCT works best with a of and is only applicable when the image data has 3 components. Controls the progression order; must be one of , , , , . The letters stand for Component, Position, Resolution and Layer respectively and control the order of encoding, the idea being that e.g. an image encoded using LRCP mode can have its quality layers decoded as they arrive at the decoder, while one encoded using RLCP mode will have increasing resolutions decoded as they arrive, and so on. If true, then tell the encoder to save the image as signed. Set the encoder to produce output compliant with the digital cinema specifications. The options here are (the default), for 24fps 2K, for 48fps 2K, and for 24fps 4K. Note that for compliant 2K files, at least one of your image dimensions must match 2048 x 1080, while for compliant 4K files, at least one of the dimensions must match 4096 x 2160. If then don’t wrap the raw codestream in the JP2 file format when saving, otherwise the extension of the filename will be used to determine the format (default). Adds a custom comment to the file, replacing the default “Created by OpenJPEG version” comment. If and OpenJPEG 2.4.0 or later is available, then include a PLT (packet length, tile-part header) marker in the produced file. Defaults to . To enable JPEG 2000 support, you need to build and install the OpenJPEG library, version 2.0.0 or higher, before building the Python Imaging Library. Windows users can install the OpenJPEG binaries available on the OpenJPEG website, but must add them to their PATH in order to use Pillow (if you fail to do this, you will get errors about not being able to load the DLL). Pillow reads and writes Multi Picture Object (MPO) files. When first opened, it loads the primary image. The and methods may be used to read other pictures from the file. The pictures are zero-indexed and random access is supported. When calling to write an MPO file, by default only the first frame of a multiframe image will be saved. If the argument is present and true, then all frames will be saved, and the following option will also be available. A list of images to append as additional pictures. Each of the images in the list can be single or multiframe images. Pillow identifies and reads MSP files from Windows 1 and 2. The library writes uncompressed (Windows 1) versions of this format. Pillow reads and writes PCX files containing , , , or data. The function sets the following properties: The absolute value of the number stored in the Scale Factor / Endianness line. Pillow identifies, reads, and writes PNG files containing , , , , , or data. Interlaced files are supported as of v1.1.7. As of Pillow 6.0, EXIF data can be read from PNG images. However, unlike other image formats, EXIF data is not guaranteed to be present in until has been called. By default Pillow doesn’t allow loading of truncated PNG files, set to override this. The function sets the following properties, when appropriate: The chromaticity points, as an 8 tuple of floats. ( , , , , , , , ) The sRGB rendering intent as an integer. For images: Either the palette index for full transparent pixels, or a byte string with alpha values for each palette entry. For , , and images, the color that represents full transparent pixels in this image. This key is omitted if the image is not a transparent palette image. also sets to a dictionary of the values of the , , and chunks of the PNG image. Individual compressed chunks are limited to a decompressed size of , by default 1MB, to prevent decompression bombs. Additionally, the total size of all of the text chunks is limited to , defaulting to 64MB. The method supports the following options: If present and true, instructs the PNG writer to make the output file as small as possible. This includes extra processing in order to find optimal encoder settings. For , , , , and images, this option controls what color from the image to mark as transparent. For images, this can be a either the palette index, or a byte string with alpha values for each palette entry. A tuple of two numbers corresponding to the desired dpi in each direction. ZLIB compression level, a number between 0 and 9: 1 gives best speed, 9 gives best compression, 0 gives no compression at all. Default is 6. When option is True has no effect (it is set to 9 regardless of a value passed). The ICC Profile to include in the saved file. The exif data to include in the saved file. For images, this option controls how many bits to store. If omitted, the PNG writer uses 8 bits (256 colors). To enable PNG support, you need to build and install the ZLIB compression library before building the Python Imaging Library. See the installation documentation for details. The PNG loader includes limited support for reading and writing Animated Portable Network Graphics (APNG) files. When an APNG file is loaded, will return . The value of the property will be when the property is greater than 1. For APNG files, the property depends on both the animation frame count as well as the presence or absence of a default image. See the property documentation below for more details. The and methods are supported. raises an if you try to seek after the last frame. These properties will be set for APNG frames, where applicable: Specifies whether or not this APNG file contains a separate default image, which is not a part of the actual APNG animation. When an APNG file contains a default image, the initially loaded image (i.e. the result of ) will be the default image. To account for the presence of the default image, the property will be set to , where is the actual APNG animation frame count. To load the first APNG animation frame, must be called.\n• None - The APNG contains default image, which is not an animation frame.\n• None - The APNG does not contain a default image. The property will be set to the actual APNG animation frame count. The initially loaded image (i.e. ) will be the first APNG animation frame. The number of times to loop this APNG, 0 indicates infinite looping. The time to display this APNG frame (in milliseconds). The APNG loader returns images the same size as the APNG file’s logical screen size. The returned image contains the pixel data for a given frame, after applying any APNG frame disposal and frame blend operations (i.e. it contains what a web browser would render for this frame - the composite of all previous frames and this frame). Any APNG file containing sequence errors is treated as an invalid image. The APNG loader will not attempt to repair and reorder files containing sequence errors. When calling , by default only a single frame PNG file will be saved. To save an APNG file (including a single frame APNG), the parameter must be set to . The following parameters can also be set: Boolean value, specifying whether or not the base image is a default image. If , the base image will be used as the default image, and the first image from the sequence will be the first APNG animation frame. If , the base image will be used as the first APNG animation frame. Defaults to . A list or tuple of images to append as additional frames. Each of the images in the list can be single or multiframe images. The size of each frame should match the size of the base image. Also note that if a frame’s mode does not match that of the base image, the frame will be converted to the base image mode. Integer number of times to loop this APNG, 0 indicates infinite looping. Defaults to 0. Integer (or list or tuple of integers) length of time to display this APNG frame (in milliseconds). Defaults to 0. An integer (or list or tuple of integers) specifying the APNG disposal operation to be used for this frame before rendering the next frame. Defaults to 0.\n• None 0 ( , default) - No disposal is done on this frame before rendering the next frame.\n• None 1 ( ) - This frame’s modified region is cleared to fully transparent black before rendering the next frame.\n• None 2 ( ) - This frame’s modified region is reverted to the previous frame’s contents before rendering the next frame. An integer (or list or tuple of integers) specifying the APNG blend operation to be used for this frame before rendering the next frame. Defaults to 0.\n• None 0 ( ) - All color components of this frame, including alpha, overwrite the previous output image contents.\n• None 1 ( ) - This frame should be alpha composited with the previous output image contents. The , and parameters can be set to lists or tuples to specify values for each individual frame in the animation. The length of the list or tuple must be identical to the total number of actual frames in the APNG animation. If the APNG contains a default image (i.e. is set to ), these list or tuple parameters should not include an entry for the default image. Pillow reads and writes PBM, PGM, PPM and PNM files containing , , or data. “Raw” (P4 to P6) formats can be read, and are used when writing. Since Pillow 9.2.0, “plain” (P1 to P3) formats can be read as well. Pillow also reads SPIDER stack files containing sequences of SPIDER images. The and methods are supported, and random access is allowed. The method sets the following attributes: Set to 1 if the file is an image stack, else 0. Set to the number of images in the stack. A convenience method, , is provided for converting floating point data to byte data (mode ): The extension of SPIDER files may be any 3 alphanumeric characters. Therefore the output format must be specified explicitly: For more information about the SPIDER image processing package, see https://github.com/spider-em/SPIDER Pillow reads and writes TGA images containing , , , , and data. Pillow can read and write both uncompressed and run-length encoded TGAs. The method can take the following keyword arguments: If set to “tga_rle”, the file will be run-length encoded. If present and a positive number, the first pixel is for the top left corner, rather than the bottom left corner. Pillow reads and writes TIFF files. It can read both striped and tiled images, pixel and plane interleaved multi-band images. If you have libtiff and its headers installed, Pillow can read and write many kinds of compressed TIFF files. If not, Pillow will only read and write uncompressed files. Beginning in version 5.0.0, Pillow requires libtiff to read or write compressed files. Prior to that release, Pillow had buggy support for reading Packbits, LZW and JPEG compressed TIFFs without using libtiff. The method sets the following properties: Image resolution as an tuple, where applicable. You can use the attribute to get more detailed information about the image resolution. Image resolution as an tuple, where applicable. This is a measurement in whichever unit is specified by the file. The attribute contains a dictionary of TIFF metadata. The keys are numerical indexes from . Values are strings or numbers for single items, multiple values are returned in a tuple of values. Rational numbers are returned as a object. For compatibility with legacy code, the attribute contains a dictionary of decoded TIFF fields as returned prior to version 3.0.0. Values are returned as either strings or tuples of numeric values. Rational numbers are returned as a tuple of . The TIFF loader supports the and methods, taking and returning frame numbers within the image file. You can combine these methods to seek to the next frame ( ). Frames are numbered from 0 to , and can be accessed in any order. raises an if you try to seek after the last frame. The method can take the following keyword arguments: If true, Pillow will save all frames of the image to a multiframe tiff document. A list of images to append as additional frames. Each of the images in the list can be single or multiframe images. Note however, that for correct results, all the appended images should have the same and properties. A object or dict object containing tiff tags and values. The TIFF field type is autodetected for Numeric and string values, any other types require using an object and setting the type in with the appropriate numerical value from . Metadata values that are of the rational type should be passed in using a object. For compatibility with legacy code, a object may be passed in this field. However, this is deprecated. Previous versions only supported some tags when writing using libtiff. The supported list is found in . Added support for signed types (e.g. ) and multiple values. Multiple values for a single tag must be to as a tuple and require a matching type in tagtype. Alternate keyword to “tiffinfo”, for consistency with other formats. If true, the image will be saved as a BigTIFF. A string containing the desired compression method for the file. (valid only with libtiff installed) Valid compression methods are: , , , , , , , , , , , , , , The image quality for JPEG compression, on a scale from 0 (worst) to 100 (best). The default is 75. These arguments to set the tiff header fields are an alternative to using the general tags available through tiffinfo. The ICC Profile to include in the saved file. An integer. 1 for no unit, 2 for inches and 3 for centimeters. Either an integer or a float, used for both the x and y resolution. Either an integer or a float. Either an integer or a float. A tuple of , with inches as the resolution unit. For consistency with other image formats, the x and y resolutions of the dpi will be rounded to the nearest integer. Pillow reads and writes WebP files. Requires libwebp v0.5.0 or later. The method supports the following options: If present and true, instructs the WebP writer to use lossless compression. Integer, 0-100, defaults to 80. For lossy, 0 gives the smallest size and 100 the largest. For lossless, this parameter is the amount of effort put into the compression: 0 is the fastest, but gives larger files compared to the slowest, but best, 100. Integer, 0-100, defaults to 100. For lossy compression only. 0 gives the smallest size and 100 is lossless. If true, preserve the transparent RGB values. Otherwise, discard invisible RGB values for better compression. Defaults to false. The ICC Profile to include in the saved file. The exif data to include in the saved file. The XMP data to include in the saved file. When calling to write a WebP file, by default only the first frame of a multiframe image will be saved. If the argument is present and true, then all frames will be saved, and the following options will also be available. A list of images to append as additional frames. Each of the images in the list can be single or multiframe images. The display duration of each frame, in milliseconds. Pass a single integer for a constant duration, or a list or tuple to set the duration for each frame separately. Number of times to repeat the animation. Defaults to [0 = infinite]. Background color of the canvas, as an RGBA tuple with values in the range of (0-255). Minimum and maximum distance between consecutive key frames in the output. The library may insert some key frames as needed to satisfy this criteria. Note that these conditions should hold: kmax > kmin and kmin >= kmax / 2 + 1. Also, if kmax <= 0, then key-frame insertion is disabled; and if kmax == 1, then all frames will be key-frames (kmin value does not matter for these special cases). If true, use mixed compression mode; the encoder heuristically chooses between lossy and lossless for each frame.\n\nCUR is used to store cursors on Windows. The CUR decoder reads the largest available cursor. Animated cursors are not supported. DCX is a container file format for PCX files, defined by Intel. The DCX format is commonly used in fax applications. The DCX decoder can read files containing , , , or data. When the file is opened, only the first image is read. You can use or to read other images. Pillow identifies and reads FITS files, commonly used for astronomy. Uncompressed and GZIP_1 compressed images can be read. The method sets the following properties: The delay (in milliseconds) between each frame. Pillow reads Kodak FlashPix files. Only the highest resolution image is read from the file, and the viewing transform is not taken into account. To enable FPX support, you must install olefile. To enable full FlashPix support, you need to build and install the IJG JPEG library before building the Python Imaging Library. See the distribution README for details. The FTEX decoder reads textures used for 3D objects in Independence War 2: Edge Of Chaos. The plugin reads a single texture per file, in the compressed and uncompressed formats. The method sets the following properties: The spacing between the brushes, in pixels. Version 2 only. Pillow reads uncompressed GD2 files. Note that you must use to read such a file. The method sets the following properties: Transparency color index. This key is omitted if the image is not transparent. Pillow identifies and reads Microsoft Image Composer (MIC) files. When opened, the first sprite in the file is loaded. You can use and to read other sprites from the file. Note that there may be an embedded gamma of 2.2 in MIC files. To enable MIC support, you must install olefile. Pillow reads PhotoCD files containing data. This only reads the 768x512 resolution image from the file. Higher resolutions are encoded in a proprietary encoding. Pillow provides limited support for PIXAR raster files. The library can identify and read “dumped” RGB files. Pillow identifies and reads PSD files written by Adobe Photoshop 2.5 and 3.0. Pillow reads images in Quite OK Image format using a Python decoder. If you wish to write code specifically for this format, qoi is an alternative library that uses C to decode the image and interfaces with NumPy. Note that this file format cannot be automatically identified, so you must use the open function in the module to read files in this format. By default, a Quake2 standard palette is attached to the texture. To override the palette, use the method. On Windows, it can read WMF and EMF files. By default, it will load the image at 72 dpi. To load it at another resolution: To add other read or write support, use to register a WMF and EMF handler. Pillow reads X pixmap files (mode ) with 256 colors or less. The method sets the following properties: Transparency color index. This key is omitted if the image is not transparent."
    },
    {
        "link": "https://realpython.com/image-processing-with-the-python-pillow-library",
        "document": "Python Pillow allows you to manipulate images and perform basic image processing tasks. As a fork of the Python Imaging Library (PIL), Pillow supports image formats like JPEG, PNG, and more, enabling you to read, edit, and save images. With Python Pillow, you can crop, resize, rotate, and apply filters to images, making it a versatile tool for image manipulation.\n\nPillow is often used for high-level image processing tasks and exploratory work. While not the fastest library, it offers a gentle learning curve and a comprehensive set of features for basic to intermediate image processing needs. You can enhance its capabilities by integrating it with NumPy for pixel-level manipulations and creating animations.\n\nBy the end of this tutorial, you’ll understand that:\n• Python Pillow is used for image manipulation and basic image processing.\n• Pillow offers reasonable speed for its intended use cases.\n• PIL is the original library, while Pillow is its actively maintained fork.\n• You read an image in Python Pillow using from the PIL module.\n• Pillow is used for its ease of use, versatility, and integration with NumPy.\n\nWith these insights, you’re ready to dive into the world of image processing with Python Pillow. You’ll use several images in this tutorial, which you can download from the tutorial’s image repository:\n\nWith these images in hand, you’re now ready to get started with Pillow.\n\nThe Python Pillow library is a fork of an older library called PIL. PIL stands for Python Imaging Library, and it’s the original library that enabled Python to deal with images. PIL was discontinued in 2011 and only supports Python 2. To use its developers’ own description, Pillow is the friendly PIL fork that kept the library alive and includes support for Python 3. There’s more than one module in Python to deal with images and perform image processing. If you want to deal with images directly by manipulating their pixels, then you can use NumPy and SciPy. Other popular libraries for image processing are OpenCV, scikit-image, and Mahotas. Some of these libraries are faster and more powerful than Pillow. However, Pillow remains an important tool for dealing with images. It provides image processing features that are similar to ones found in image processing software such as Photoshop. Pillow is often the preferred option for high-level image processing tasks that don’t require more advanced image processing expertise. It’s also often used for exploratory work when dealing with images. Pillow also has the advantage of being widely used by the Python community, and it doesn’t have the same steep learning curve as some of the other image processing libraries. You’ll need to install the library before you can use it. You can install Pillow using within a virtual environment: Now that you’ve installed the package, you’re ready to start familiarizing yourself with the Python Pillow library and perform basic manipulations of images. The Module and Class in Pillow The main class defined in Pillow is the class. When you read an image using Pillow, the image is stored in an object of type . For the code in this section, you’ll need the image file named (image credit), which you can find in the image repository for this tutorial: Get Images: Click here to get access to the images that you’ll manipulate and process with Pillow. You can place this image file in the project folder that you’re working in. When exploring images with Pillow, it’s best to use an interactive REPL environment. You’ll start by opening the image that you just downloaded: You might expect to import from Pillow instead of from PIL. You did install , after all, not . However, Pillow is a fork of the PIL library. Therefore, you’ll still need to use when importing into your code. You call the function to read the image from the file and to read the image into memory so that the file can now be closed. You use a statement to create a context manager to ensure the file is closed as soon as it’s no longer needed. In this example, the object is a JPEG image-specific type that’s a subclass of the class, as you confirm with the call to . Note that both the class and the module where the class is defined share the same name, . You can display the image using : The method saves the image as a temporary file and displays it using your operating system’s native software for dealing with images. When you run the code above, you’ll see the following image displayed: On some systems, calling will block the REPL until you close the image. This depends on the operating system and the default image viewing software that you’re using. You’ll need to be familiar with three key properties when dealing with images in the Python Pillow library. You can explore these using the class attributes , , and : The format of an image shows what type of image you’re dealing with. In this case, the format of the image is . The size shows the width and height of the image in pixels. The mode of this image is . You’ll learn more about modes shortly. Often, you may need to crop and resize images. The class has two methods that you can use to perform these operations, and : The argument to must be a 4-tuple that defines the left, upper, right, and bottom edges of the region that you wish to crop. The coordinate system used in Pillow assigns the coordinates (0, 0) to the pixel in the upper-left corner. This is the same coordinate system that’s usually used for two-dimensional arrays. The 4-tuple represents the following section of the image: The new image that returns in the code above has a size of pixels. The cropped image shows only one of the buildings from the original picture: In the code above, you also change the resolution of the cropped image using , which needs a tuple as a required argument. The tuple that you use as an argument defines the new width and height of the image in pixels. In the example above, you’re setting the new width and height to a quarter of their original values using the floor division operator ( ) and the attributes and . The final call to displays the cropped and resized image: There are additional optional parameters that you can use with to control how the image is resampled. Alternatively, you can achieve similar scaling using : The argument determines the factor by which you scale the image down. If you prefer to set a maximum size rather than a scaling factor, then you can use . The size of the thumbnail will be smaller than or equal to the size that you set. Note: The method changes the object in place and doesn’t return a new object. However, , , and all return a new object. Not all methods in the Pillow library behave in the same way. Once you’re happy with your returned image, you can save any of the objects to file using : Once you call the method, it creates the image files in your project folder. In this example, one of the images is a JPEG image and the other is a PNG image. The extension that you use as a filname automatically determines the file format, or you can specify the format as an additional optional argument. You can manipulate the image beyond cropping and resizing. Another common requirement is to rotate or flip the image. You can use the method for some transformations. Go ahead and carry on with the same REPL session that you started in the previous section: This code displays the following image: There are seven options that you can pass as arguments to :\n• : Flips the image left to right, resulting in a mirror image\n• : Rotates the image by 270 degrees counterclockwise, which is the same as 90 degrees clockwise\n• : Transposes the rows and columns using the top-left pixel as the origin, with the top-left pixel being the same in the transposed image as in the original image\n• : Transposes the rows and columns using the bottom-left pixel as the origin, with the bottom-left pixel being the one that remains fixed between the original and modified versions All the rotation options above define rotations in steps of 90 degrees. If you need to rotate an image by another angle, then you can use : This method call rotates the image by 45 degrees counterclockwise, giving the following image: The object returned is the same size as the original . Therefore, the corners of the image are missing in this display. You can change this behavior using the named parameter: This method returns a larger image that fully contains the rotated image: You can customize the rotation further with additional optional parameters. You can now change the size and orientation of an image. In the next section, you’ll learn about different types of images in the Python Pillow library. Bands and Modes of an Image in the Python Pillow Library An image is a two-dimensional array of pixels, where each pixel corresponds to a color. Each pixel can be represented by one or more values. For example, in an RGB image, each pixel is represented by three values corresponding to the red, green, and blue values for that pixel. Therefore, the object for an RBG image contains three bands, one for each color. An RGB image of size pixels is represented by a array of values. RGBA images also include the alpha value, which contains information about the transparency for each pixel. An RGBA image has four bands, one for each of the colors and a fourth one containing the alpha values. Each band has the same dimensions as the image dimensions. Therefore, an RGBA image of size pixels is represented by a array of values. The mode of an image describes what type of image you’re working with. Pillow supports most standard modes, including black-and-white (binary), grayscale, RGB, RGBA, and CMYK. You can see the full list of supported modes in the Pillow documentation on modes. You can find out how many bands are in an object using the method, and you can convert between modes using . Now you’ll use the image named (image credit) from the image repository for this tutorial: This image’s mode is also RGB. You can convert this image into other modes. This code uses the same REPL session that you started in the previous sections: You call twice to convert the RGB image into a CMYK and a grayscale version. The CMYK image looks similar to the original image but is encoded using the mode that’s common for printed material rather than digital displays. The conversion to grayscale gives the following output: The outputs from the calls to confirm that there are three bands in the RGB image, four bands in the CMYK image, and one band in the grayscale image. You can separate an image into its bands using and combine separate bands back into an object using . When you use , the method returns all the bands as separate objects. You can confirm this by displaying the string representation of one of the objects returned: The mode of the object that returns is , indicating this is a grayscale image, or an image that only displays the luminance values of each pixel. Now, you can create three new RGB images showing the red, green, and blue channels separately using , which is a function in the module: The first argument in determines the mode of the image that you want to create. The second argument contains the individual bands that you want to merge into a single image. The red band alone, stored in the variable , is a grayscale image with mode L. To create the image showing only the red channel, you merge the red band from the original image with green and blue bands that only contain zeros. To create a band containing zeros everywhere, you use the method. This method needs a function as an argument. The function that you use determines how each point transforms. In this case, you use a function to map each point to . When you merge the red band with green and blue bands containing zeros, you get an RGB image called . Therefore, the RGB image that you create only has non-zero values in the red channel, but because it’s still an RGB image, it’ll display in color. You also repeat a similar process to obtain and , which contain RGB images with the green and blue channels from the original image. The code displays the following three images: The red image contains a strong signal in the pixels that represent the strawberry, because these pixels are mostly red. The green and blue channels show these pixels as dark because they have small values. The exceptions are those pixels that represent the reflection of the light on the surface of the strawberry as these pixels are nearly white. Creating the side-by-side displays shown in this tutorialShow/Hide In this tutorial, when there are several images output in the code that need to be displayed next to one another to make comparisons easier, the images are displayed side by side rather than as separate images. These side-by-side displays were created using Pillow itself. You can use the function , shown below, to merge several images into a single display: The first parameter in uses the unpacking operator ( ) so that any number of objects of type can be used as input arguments. The keyword parameter can be set to if you want to tile the images vertically rather than horizontally. This function assumes that all images have the same size. The overall size of the display is calculated from the size of the images and the number of images used. You then create a new object with the same mode as the original images and with the size of the overal display. The loop pastes the images that you input when you call the function into the final display. The function returns the final object containing all the images side by side. The image in the main article showing the three color channels for the strawberry image was obtained by calling the function as follows: This function was used to generate all the displays that show more than one image in this tutorial.\n\nYou’ve learned how to crop and rotate images, resize them, and extract color bands from color images. However, none of the actions that you’ve taken so far have made any changes to the content of the image. In this section, you’ll learn about image processing features in the Python Pillow library. You’ll use the module in Pillow. One of the methods that’s used in image processing is image convolution using kernels. The aim of this tutorial is not to give a detailed explanation of image processing theory. If you’re interested in the science of image processing, one of the best resources that you can use is Digital Image Processing by Gonzalez and Woods. In this section, you’ll learn the basics of how you can use convolution kernels to perform image processing. But what’s a convolution kernel? A kernel is a matrix: You can consider a simple image to understand the process of convolution using kernels. The image has a size of pixels and contains a vertical line and a dot. The line is four pixels wide, and the dot consists of a pixel square. The image below is enlarged for display purposes: You can place the kernel anywhere on the image and use the location of the kernel’s central cell as a reference. The diagram below is a representation of the top-left portion of the image: The elements in this diagram represent different aspects of the image and the kernel:\n• The white squares represent pixels in the image that have a value of .\n• The red squares represent pixels in the image that have a value of . These make up the dot in the image shown above.\n• Each purple region represents the kernel. This kernel consists of a region, and each cell in the kernel has a value of . The diagram shows the kernel in three different positions labeled 1, 2, and 3. A new image can be created as a result of the convolution of the image with the kernel. You can understand the convolution process through the following steps:\n• Locate kernel: Consider one of the kernel locations and look at the image pixels covered by the kernel’s nine cells.\n• Multiply kernel and pixel values: Multiply the values in each of the kernel’s cells with the corresponding pixel values in the image. You’ll have nine values from the nine multiplications.\n• Sum results of multiplications: Add those nine values together. The result will be the value of the pixel in the new image that has the same coordinates as the kernel’s center pixel.\n• Repeat for all pixels: Repeat the process for every pixel in the image, moving the kernel each time so that the kernel’s central cell corresponds to a different image pixel each time. You can see this process with the three kernel positions labeled 1, 2, and 3 in diagram above. Consider the kernel position labeled 1. The position of this kernel is , which is the position of its central cell because it’s in the fourth row (index = ) and the third column (index = ). Each image pixel in the region covered by the kernel has a value of zero. Therefore, all the multiplications from step 2 will be zero, and their addition will also be zero. The new image will have a value of zero at pixel . The scenario is different for the other kernel positions shown. Next, consider the kernel labeled 2, located at . One of the image pixels overlapping this is not zero. The multiplication of this pixel value with the kernel value will give . The eight remaining multiplications are still zero because the image pixels are zero. Therefore, the value of the pixel at position in the new image will be . The third kernel position illustrated above is at . There are four non-zero image pixels overlapping with this kernel. Each one has a value of , so the multiplication result will again be for each of those pixel positions. The overall result for this kernel position is . The new image will have this value at . The diagram and the discussion above only consider three kernel positions. The convolution process repeats this process for every possible kernel position in the image. This gives a value for each pixel position in the new image. The result of the convolution is shown on the right in the following image, with the original image on the left: The kernel that you used is a box blur kernel. The factor of is there so that the overall weighting of the kernel is . The result of the convolution is a blurred version of the original image. There are other kernels that perform different functions, including different blurring methods, edge detection, sharpening, and more. The Python Pillow library has several built-in kernels and functions that’ll perform the convolution described above. You don’t need to understand the math of filtering through convolution to use these filters, but it always helps to know what’s happening behind the scenes when using these tools. The next sections will look at the kernels and image filtering capabilities available in the module in Pillow. You’ll return to using the image of the buildings that you used at the beginning of this tutorial. You can start a new REPL session for this section: In addition to , you also import the module from Pillow. You can use the method to apply filtering to the image. This method needs a convolution kernel as its argument, and you can use one of the several kernels available in the module in Pillow. The first set of filters that you’ll learn about deal with blurring, sharpening, and smoothing an image. You can blur the image using the predefined filter: The displayed image is a blurred version of the original one. You can zoom in to observe the difference in more detail using and then display the images again using : The two cropped images show the difference between the two versions: You can customize the type and amount of blurring that you need using or : You can see the three blurred images below, shown in the same order as in the code above: The filter is similar to the one described in the previous section introducing convolution kernels. The argument is the radius of the box blur filter. In the earlier section discussing kernels, the box blur filter that you used was a filter. This means that it had a radius of , because the filter extends by one pixel from the center. The blurred images show that the box blur filter with a radius of produces an image that’s more blurred than the image generated by the box blur filter with radius . You can also use the filter, which uses a Gaussian blur kernel. The Gaussian kernel puts more weight on the pixels at the center of the kernel than those at the edges, and this leads to smoother blurring than what’s obtained with the box blur. For this reason, Gaussian blurring can give better results in many cases. What if you want to sharpen an image? In that case, you can use the filter and compare the result with the original image: You’re comparing a cropped version of both images showing a small portion of the building. The sharpened image is on the right: Perhaps instead of sharpening an image, you need to smooth it. You can achieve this by passing as an argument for : Below, you can see the original image on the left and the smoothed image on the right: You’ll see an application of the smooth filter in the next section, in which you’ll learn about more filters in the module. These filters act on the edges of objects in the image. When you look at an image, it’s relatively easy to determine the edges of objects within that image. It’s also possible for an algorithm to detect edges automatically using edge detection kernels. The module in Pillow has a predefined kernel to achieve this. In this section, you’ll use the image of the buildings again and convert it to grayscale before you apply the edge detection filter. You can carry on with the REPL session from the previous section: The result is an image showing the edges from the original image: This filter identifies the edges in the image. You can obtain a better outcome by applying the filter before finding the edges: You can see a comparison of the original grayscale image and the two edge detection results below. The version with smoothing before edge detection is shown at the bottom: You can also enhance the edges of the original image with the filter: You used the smoothed version of the grayscale image to enhance the edges. A portion of the original grayscale image and the image with the edges enhanced are shown side by side below. The image with edge enhancement is on the right: Another predefined filter in that deals with object edges is . You can pass it as an argument to as you did with the other filters in this section: You’re using the smoothed, grayscale version as a starting point for this filter. You can see the embossed image below, which shows a different effect using the edges in the image: In this section, you’ve learned about several filters available in the module that you can apply to images. There are other filters that you can use to process images. You can see a list of all the filters available in the documentation.\n\nImage Segmentation and Superimposition: An Example In this section, you’ll use the image files named (image credit) and (image credit), which you can find in the image repository for this tutorial: Get Images: Click here to get access to the images that you’ll manipulate and process with Pillow. You can use the Python Pillow library to extract the cat from the first image and place it on the floor of the monastery courtyard. You’ll use a number of image processing techniques to achieve this. You’ll start by working on . You’ll need to remove the picture of the cat from the background using image segmentation techniques. In this example, you’ll segment the image using thresholding techniques. First, you can crop the image to a smaller one to remove some of the background. You can start a new REPL session for this project: The cropped image contains the cat and some of the background that’s too close to the cat for you to crop it: Each pixel in a color image is represented digitally by three numbers corresponding to the red, green, and blue values of that pixel. Thresholding is the process of converting all the pixels to either the maximum or minimum value depending on whether they’re higher or lower than a certain number. It’s easier to do this on a grayscale image: You achieve thresholding by calling to convert each pixel in the grayscale image into either or . The conversion depends on whether the value in the grayscale image is greater or smaller than the threshold value. The threshold value in this example is . The figure below shows the grayscale image and the result from the thresholding process: In this example, all the points in the grayscale image that had a pixel value greater than are converted to white, and all other pixels are changed to black. You can change the sensitivity of the thresholding process by varying the threshold value. Thresholding can be used to segment images when the object to segment is distinct from the background. You can achieve better results with versions of the original image that have higher contrast. In this example, you can achieve higher contrast by thresholding the blue channel of the original image rather than the grayscale image, because the dominant colors in the background are brown and green colors, which have a weak blue component. You can extract the red, green, and blue channels from the color image as you did earlier: The red, green, and blue channels are shown below, from left to right. All three are displayed as grayscale images: The blue channel has a higher contrast between the pixels representing the cat and those representing the background. You can use the blue channel image to threshold: You use a threshold value of in this example. You also convert the image into a binary mode using as an argument to . The pixels in a binary image can only have the values of or . Note: When dealing with certain image formats, such as JPEG, that rely on lossy compression, the images may vary slightly depending on which JPEG decoders you’re using. Different operating systems often come with different default JPEG decoders. Therefore, the results that you get when processing images may vary depending on the operating system and JPEG decoder that you’re using. You may need to slightly adjust the threshold value if your results do not match the ones shown in this tutorial. The result of thresholding is the following: You can identify the cat in this black-and-white image. However, you’d like to have an image in which all the pixels that correspond to the cat are white and all other pixels are black. In this image, you still have black regions in the area which corresponds to the cat, such as where the eyes, nose and mouth are, and you also still have white pixels elsewhere in the image. You can use the image processing techniques called erosion and dilation to create a better mask that represents the cat. You’ll learn about these two techniques in the next section. You can look at the image file called , which you can download from the repository linked to this tutorial: The left-hand side of this binary image shows a white dot on a black background, while the right-hand side shows a black hole in a solid white section. Erosion is the process of removing white pixels from the boundaries in an image. You can achieve this in a binary image by using as an argument for the method. This filter replaces the value of a pixel with the minimum value of the nine pixels in the array centered around the pixel. In a binary image, this means that a pixel will have the value of zero if any of its neighboring pixels are zero. You can see the effect of erosion by applying several times to the image. You should continue with the same REPL session as in the previous section: You’ve applied the filter three times using a loop. This code gives the following output: The dot has shrunk but the hole has grown as a result of erosion. Dilation is the opposite process to erosion. White pixels are added to the boundaries in a binary image. You can achieve dilation by using , which converts a pixel to white if any of its neighbors are white. You can apply dilation to the same image containing a dot and a hole, which you can open and load again: The dot has now grown bigger, and the hole has shrunk: You can use erosion and dilation together to fill in holes and remove small objects from a binary image. Using the image with a dot and hole, you can perform ten erosion cycles to remove the dot, followed by ten dilation cycles to restore the hole to its original size: You perform ten erosion cycles with the first loop. The image at this stage is the following: The dot has disappeared, and the hole is larger than it was in the original image. The second loop performs ten dilation cycles, which return the hole to its original size: However, the dot is no longer present in the image. The erosions and dilations have modified the image to keep the hole but remove the dot. The number of erosions and dilations needed depends on the image and what you want to achieve. Often, you’ll need to find the right combination through trial and error. You can define functions to perform several cycles of erosion and dilation: These functions make it easier to experiment with erosion and dilation for an image. You’ll use these functions in the next section as you continue working on placing the cat into the monastery. You can use a sequence of erosions and dilations on the threshold image that you obtained earlier to remove parts of the mask that don’t represent the cat and to fill in any gaps in the region containing the cat. Once you’ve experimented with erosion and dilation, you’ll be able to use educated guesses in a trial-and-error process to find the best combination of erosions and dilations to achieve the ideal mask. Starting with the image , which you obtained earlier, you can start with a series of erosions to remove the white pixels that represent the background in the original image. You should continue working in the same REPL session as in the previous sections: The eroded threshold image no longer contains white pixels representing the background of the image: However, the remaining mask is smaller than the overall outline of the cat and has holes and gaps within it. You can perform dilations to fill the gaps: The fifty-eight cycles of dilation filled all the holes in the mask to give the following image: However, this mask is too big. You can therefore finish the process with a series of erosions: The result is a mask that you can use to segment the image of the cat: You can avoid the sharp edges of a binary mask by blurring this mask. You’ll have to convert it from a binary image into a grayscale image first: The filter returns the following mask: The mask now looks like a cat! Now you’re ready to extract the image of the cat from its background: First, you create a blank image with the same size as . You create a new object from by using and setting all values to zero. Next, you use the function in to create an image made up from both and using to determine which parts of each image are used. The composite image is shown below: You’ve segmented the image of the cat and extracted the cat from its background. You can go a step further and paste the segmented image of the cat into the image of the monastery courtyard from the image repository for this tutorial: You’ve used to paste an image onto another one. This method can be used with three arguments:\n• The first argument is the image that you want to paste in. You’re resizing the image to one-fifth of its size using the integer division operator ( ).\n• The second argument is the location in the main image where you want to paste the second picture. The tuple includes the coordinates within the main image where you want to place the top-left corner of the image that you’re pasting in.\n• The third argument provides the mask that you wish to use if you don’t want to paste the entire image. You’ve used the mask that you obtained from the process of thresholding, erosion, and dilation to paste the cat without its background. The output is the following image: You’ve segmented the cat from one image and placed it into another image to show the cat sitting quietly in the monastery courtyard rather than in the field where it was sitting in the original image. Your final task in this example is to add the Real Python logo as a watermark to the image. You can get the image file with the Real Python logo from the repository accompanying this tutorial: Get Images: Click here to get access to the images that you’ll manipulate and process with Pillow. You should continue working in the same REPL session: This is the full-size logo in color: You can change the image to grayscale and threshold it using to transform it into a black-and-white image. You also reduce its size and transform it into a contour image: The output shows the contour from the Real Python logo. The contour is ideal for using as a watermark on your image: To use this as a watermark, you’ll need to reverse the colors so that the background is black and only the outline that you want to keep is white. You can achieve this using again: You’ve converted the pixels that had a value of and assigned them the value , converting them from white to black pixels. You set the remaining pixels to white. The reversed outline logo is shown below: Your final step is to paste this outline onto the image of the cat sitting in the monastery courtyard. You can use again: The first argument in indicates the image that you wish to paste in, and the third argument represents the mask. In this case, you’re using the same image as a mask because the image is a binary image. The second argument provides the top-left coordinates of the region where you want to paste the image. The watermark has a rectangular outline, which is a result of the contour filter that you used earlier. If you prefer to remove this outline, you can crop the image using . This is an exercise that you can try on your own.\n\nPillow has an extensive selection of built-in functions and filters. However, there are times when you need to go further and manipulate images beyond the features that are already available in Pillow. You can manipulate the image further with the help of NumPy. NumPy is a very popular Python library for dealing with numeric arrays, and it’s an ideal tool to use with Pillow. You can learn more about NumPy in NumPy Tutorial: Your First Steps Into Data Science in Python. When you convert an image into a NumPy array, you can perform any transformations that you require directly on the pixels in the array. Once you’ve completed your processing in NumPy, you can convert the array back into an object using Pillow. You need to install NumPy for this section: Now that you’ve installed NumPy, you’re ready to use Pillow and NumPy to spot the difference between two images. Using NumPy to Subtract Images From Each Other See if you can spot the differences between the following two images: This isn’t a hard one! However, you decide to cheat and write a Python program to solve the puzzle for you. You can download the image files and (image credit) from the repository accompanying this tutorial: Get Images: Click here to get access to the images that you’ll manipulate and process with Pillow. Your first step is to read the images using Pillow and convert them to NumPy arrays: Since and are objects of type , you can manipulate them using all the tools that you have available in NumPy. You can subtract one array from the other to show the pixels that differ between the two images: When you subtract an array from another one of the same size, the result is another array with the same shape as the original arrays. You can convert this array into an image using in Pillow: The result of subtracting one NumPy array from another and converting into a Pillow is the difference image shown below: The difference image only shows three regions from the original image. These regions highlight the differences between the two images. You can also see some noise surrounding the cloud and the fence, which is due to small changes in the original JPEG compression in the region surrounding these items. You can go further and create images from scratch using NumPy and Pillow. You can start by creating a grayscale image. In this example, you’ll create a simple image containing a square, but you can create more elaborate images in the same way: You create an array of size containing zeros everywhere. Next, you set the value of a set of pixels at the center of the array to . You can index NumPy arrays using both rows and columns. In this example, the first slice, , represents the rows to . The second slice, , which follows the comma, represents the columns to . You can use to convert the NumPy array into an object of type . The output from the code above is shown below: You’ve created a grayscale image containing a square. The mode of the image is inferred automatically when you use . In this case, mode is used, which corresponds to an image with 32-bit floating-point pixels. You can convert this to a simpler grayscale image with 8-bit pixels if you wish: You can also go further and create a color image. You can repeat the process above to create three images, one corresponding to the red channel, another to the green, and a final one corresponding to the blue channel: You create an object from each NumPy array and convert the images to mode , which represents grayscale. Now, you can combine these three separate images into one RGB image using : The first argument in is the mode of the image output. The second argument is a sequence with the individual single-band images. This code creates the following image: You’ve combined the separate bands into an RGB color image. In the next section, you’ll go a step further and create a GIF animation using NumPy and Pillow. In the previous section, you created a color image containing three overlapping squares of different colors. In this section, you’ll create an animation showing those three squares merging into a single white square. You’ll create several versions of the images containing three squares, and the location of the squares will vary slightly between successive images: You create an empty list called , which you’ll use to store the various images that you generate. Within the loop, you create NumPy arrays for the red, green, and blue channels, as you did in the previous section. The array containing the green layer is always the same and represents a square in the center of the image. The red square starts in a position displaced to the top-left of the center. In each successive frame, the red square moves closer to the center until it reaches the center in the final iteration of the loop. The blue square is initially shifted toward the bottom-right then moves towards the center with each iteration. Note that in this example, you’re iterating over , which means that the variable increases in steps of two. You learned earlier that you can save an object to file using . You can use the same function to save to a GIF file that includes a sequence of images. You call on the first image in the sequence, which is the first image that you stored in the list : The first argument in is the filename for the file that you want to save. The extension in the filename tells what file format it needs to output. You also include two keyword arguments in :\n• ensures that all the images in the sequence are saved, and not just the first one.\n• allows you to append the remaining images in the sequence to the GIF file. This code saves to file, and you can then open the GIF file with any image software. The GIF should loop by default, but on some systems you’ll need to add the keyword argument to to make sure the GIF loops. The animation that you get is the following one: The three squares with different colors merge into a single white square. Can you create your own animation using different shapes and different colors?"
    },
    {
        "link": "https://cloudinary.com/guides/bulk-image-resize/python-image-resize-with-pillow-and-opencv",
        "document": "Python is a popular object-oriented programming language for image-related tasks for webpages, visualizations, or when using Python for machine-learning operations through frameworks like OpenCV and Scikit Learn.\n\nReducing the size of an image means changing its dimensions by removing its pixels. Scaling up an image increases the number of pixels but lowers quality. Either way, the image’s aspect ratio changes, which results in distortion.\n\nThis article describes how to resize images in bulk with the Pillow library, a popular fork of the Python Imaging Library (PIL); and, to maintain the quality and aspect ratio, in OpenCV, a robust library of programming functions for computer vision, neural networks, and other advanced image processing tasks. Also explained is how to resize and crop Python images with Cloudinary through automation.\n• Resize and Crop Images in Python With Cloudinary Through Automation\n\nPillow is a fork of the Python Imaging Library (PIL) that supports Python 3 and numerous image formats, including PNG, JPEG, TIFF, and PPM. When you load an image from a file, create a new image, or generate separate instances for images, you create an instance of PIL’s Image class.\n\nTo resize an image with Pillow’s method:\n• Load the image from a file with the function: The above command returns an object. In case of failure, the command returns an exception.\n• Call the method on the new image instance, passing a tuple argument with two integers to specify the width and height you desire: Note: Instead of modifying the image file, this function returns a separate instance with the new dimensions.\n\nThe method has two drawbacks, however:\n• Oftentimes, resizing to an exact width and height changes the image’s aspect ratio, leading to distortions.\n• If you set the size of the new instance to be larger than that of the original, “blows up” the instance, reducing its quality.\n\nAs a solution, resize the image with the more advanced Pillow method, :\n• Perform steps 1 and 2 of the above procedure.\n• Call the method on the instance, passing a tuple argument with two integers to specify the width and height you desire:\n\nAs shown under , the size of the new instance is 400×350 pixels. The aspect ratio of the original image remains unchanged. In addition, if the dimensions of the original are smaller than that specified for the new instance, instead of “blowing up” the image, returns an instance of the same size.\n\nOpenCV is an open-source computer-vision library with thousands of machine-learning and deep-learning algorithms for face detection, object recognition, and many other computer-vision tasks. Given that numerous computer-vision models require a certain size and quality level for their images, resizing is critical. To determine which image variation performs best, experiment with different sizes or resolutions.\n\nHere is the full syntax for the method in OpenCV:\n\nThe parameters are as follows:\n\nNote: Apply either or and , or all three.\n• Acquire a sample image and specify its current size:\n• Resize the image of, say, a size of 800×600 pixels, to 300×300 pixels:\n\nAs in the previous example on resizing images with Pillow’s resize() method, this procedure changes the aspect ratio, causing distortions. To maintain that ratio, run the following command to resize the image to 75% of its width and height:\n\nIn addition, for a resized instance that is larger than the original, you can customize the interpolation of the resize operation. Even though doing that causes quality loss, it might be the right choice for certain computer-vision applications.\n\nHere are the values for the argument:\n\nResize and Crop Python Images With Cloudinary Through Automation\n\nA cloud-based service for managing images and videos, Cloudinary offers a generous free-forever subscription plan. While on that platform, you can upload images and apply built-in effects, filters, and modifications.\n\nYou can also resize images through automation, focusing on the most important elements with AI, or adapt them to your website design by, for example, specifying the width, height, and aspect ratio as qualifiers for the new image instances. Cloudinary then automatically performs the resizing and cropping tasks to meet the criteria. No manual efforts are required.\n\nResizing it to 200×200 pixels with crop, scale, fill, and pad results in the following images:\n\nAutomatically determine what to keep in a banner crop\n\nTo automate image resizing and cropping on Cloudinary:\n• Set the transformation criteria for the above examples: # Focus on the model in a portrait crop. CloudinaryImage(\"docs/model.jpg\").image(gravity=\"person\", height=600, width=450, crop=\"fill\") # Detect the face for a thumbnail crop. CloudinaryImage(\"docs/model.jpg\").image(gravity=\"face\", height=250, width=250, crop=\"thumb\") # Crop to a banner, automatically focusing on a region of interest. CloudinaryImage(\"docs/model.jpg\").image(gravity=\"auto\", height=150, width=600, crop=\"fill\")\n\nPython offers numerous modules and libraries, such as Pillow and OpenCV, to resize images. While these tools are powerful and versatile, they require significant coding effort to handle various use cases, such as different image formats, sizes, and quality requirements. This can be a daunting task for developers looking to streamline their workflow rather than managing image processing code.\n\nThe Cloudinary API not only simplifies the process of resizing images but also provides a comprehensive suite of image management functionalities. With Cloudinary, you can easily handle image uploads, transformations, optimizations, and even advanced features like automatic format selection, watermarking, and responsive image delivery.\n\nReady to take your image processing to the next level? Sign up for a free Cloudinary account today and experience the ease and power of Cloudinary’s image management solutions. Start simplifying your workflow and focus on what truly matters—building great applications."
    }
]