[
    {
        "link": "https://man7.org/linux/man-pages/man1/find.1.html",
        "document": "Pages that refer to this page: dpkg(1), dpkg-name(1), find-filter(1), grep(1), ippfind(1), locate(1), mkaf(1), pmlogger_daily(1), tar(1), updatedb(1), xargs(1), fts(3), proc(5), proc_pid_exe(5), hier(7), symlink(7)"
    },
    {
        "link": "https://geeksforgeeks.org/find-command-in-linux-with-examples",
        "document": "Linux, renowned for its robust command-line interface, provides a suite of powerful tools for efficient file and directory management. Among these, the “find” command stands out as an indispensable asset, offering unparalleled versatility in searching for files based on diverse criteria. This article explores the prowess of the find command, shedding light on its capabilities and how it serves as a go-to tool for Linux users aiming to locate files swiftly and effectively.\n\nWhat is the Find Command in Linux?\n\nThe find command in Linux is a dynamic utility designed for comprehensive file and directory searches within a hierarchical structure. Its adaptability allows users to search by name, size, modification time, or content, providing a flexible and potent solution. As a pivotal component of the Linux command-line toolkit, the find command caters to the nuanced needs of users, ensuring precision in file exploration and retrieval. Discover the diverse functionalities of the find command and enhance your file management efficiency on the Linux platform.\n\nHere is the syntax for the command in Linux:\n• options: Additional settings or conditions for the search.\n\nThis syntax allows you to customize your file search by specifying the path, adding options, and defining search criteria using expressions.\n\nOptions Available in Find Command in Linux\n\nHere are the ` command options along with brief descriptions of their purposes.\n\nHow to Find a File in Linux from the Command Line\n\nUsing the command is straightforward. To find a file in Linux, open a terminal and use the following basic syntax:\n\nReplace “ with the directory where you want to start the search and customize the options and criteria based on your requirements.\n\nTo find a file named “example.txt” in the home directory, you would use:\n\nThis command will locate and display the path to the file if it exists in the specified directory or its subdirectories.\n\n1. How to Find A Specific File Using `find` Command in Linux\n\nThis query is designed to pinpoint a file within a designated directory. In the provided example, it seeks a file named “sample.txt” within the “GFG” directory.\n\nThe command traverses the specified directory ( ) and looks for a file named “sample.txt.” If found, it displays the path to the file.\n\n2. How to Search Files with a Pattern Using `find` Command in Linux\n\nThis command is tailored for discovering files within a directory that adhere to a specific naming pattern. In this case, it identifies files ending with ‘.txt’ within the “GFG” directory.\n\nThe command looks for files with names ending in ‘.txt’ within the “GFG” directory, presenting a list of matching files.\n\n3. How to Find and Confirm File Deletion Using `find` Command in Linux\n\nThis command not only locates a specified file but also prompts the user for confirmation before initiating its removal. The example seeks to delete a file named “sample.txt” within the “GFG” directory.\n\nThe option executes the command on the located file, and the flag prompts the user for confirmation before deletion. When this command is entered, a prompt will come for confirmation, if you want to delete sample.txt or not. if you enter ‘Y/y’ it will delete the file.\n\n4. Search for Empty Files and Directories Using `find` Command in Linux\n\nThis query is tailored for discovering and listing empty files and directories within a specified directory.\n\nThe ` command identifies and lists all empty folders and files within the “GFG” directory or its subdirectories.\n\n5. Search Files with Specific Permissions Using `find` Command in Linux\n\nThis command is used to locate files within a directory that have specific permissions. In the provided example, it identifies files with permissions set to 664 within the “GFG” directory.\n\nThe command searches for files within the “GFG” directory with the specified permissions (664) and displays the results.\n\nThis command is utilized to display the hierarchical structure of repositories and sub-repositories within a given directory.\n\nThis command displays all the repositories and sub-repositories present in the current repository. In the below example, we are currently in a repository namely “GeeksforGeeks” which contains a repo “Linux”, which contains sub-repo “LinuxCmds” which further contains a repo “FindCmd”. The ouput of below cmd is simply displaying this info. Please note that in this case if you will use “ls” cmd then it will only show “/Linux”.\n\n7. Search Text Within Multiple Files Using `find` Command in Linux\n\nThis command is tailored for finding lines containing specific text within multiple files. The example looks for lines containing the word ‘Geek’ within all ‘.txt’ files in the current directory and its subdirectories.\n\nThe command searches for ‘.txt’ files ( and ) and uses to print lines containing the specified text (‘Geek’).\n\n8. Find Files by When They Were Modified Using `find` Command in Linux\n\nThe option is handy for finding files based on their modification time. To find files modified within the last 7 days, you can use:\n\nThis command will list files modified in the last week.\n\nIn this example we are searching changes in directory “/home/administrator/Downloads” which are done is past 7 days.\n\n9. Use Grep to Find Files Based on Content Using `find` Command in Linux\n\nCombining the command with allows you to search for files based on their content. For example, to find files containing the word “pattern” in the current directory and its subdirectories, you can use:\n\nThis command will display the names of files containing the specified content.\n• None : Initiates the search from the current directory (\n• None : Specifies that the search is for files only, excluding directories.\n• None ) to search for the specified content (“pattern”). The ensures that only the names of files containing the pattern are displayed.\n• None command starts the search from the current directory, including all its subdirectories.\n• None ) found in the search, the\n• None command searches for the specified content (“pattern”) in each file.\n• None If a file contains the specified content, its name is displayed due to the\n\nCan I use the find command to search for files based on their content in Linux?\n\nHow can I search for all directories in Linux using the find command?\n\nHow can I search for files with a specific name using the find command in Linux?\n\nCan I use the find command to search for files containing a specific text string within their contents?\n\nIs the find command case-sensitive when searching for files in Linux?\n\nIn this article we discussed the find command which is like a trusty guide for finding and managing files. This article explored how the find command can locate files based on different criteria, from names to content. It’s like having a superpower for organizing and searching through your files in a quick and flexible way. Whether you’re a seasoned Linux user or just starting out, mastering the find command is a game-changer for efficiently handling your files on the command line. It’s a must-have tool that makes navigating your computer’s files a breeze!"
    },
    {
        "link": "https://snapshooter.com/learn/linux/find",
        "document": "The find command is a command-line tool used to find files and directories in Linux operating system. With the find command, you can find a file by name, pattern, modification time, size, owner and permission. By default, it is available in all Linux operating systems.\n\nIf you are a system administrator then the find command is very useful for you to save your lot of time in day to day operations. In this tutorial, we will show you how to use the find command to find files and directories in Linux with examples.\n• None A root password is setup in your system.\n\nThe basic syntax of the find command is shown below:\n\nA brief explanation of each option is shown below:\n• None -name : Used to specify the name of the file you want to find.\n• None -type : Used to specify the type of the files and directories you want to find.\n• None -perm : Used to specify the permission of the file that you want to find.\n• None -user : Used to find files that belong to the specific user.\n• None -group : Used to find files that belong to the specific group.\n• None -mtime : Used to specify the modification time of the file that you want to find.\n• None -atime : Used to specify the access time of the file that you want to find.\n• None -size : Used to specify the size of the file that you want to find.\n\nTo list all files in your current directory, run the following command:\n\nThis command will list all files inside your current directory and sub-directories.\n\nYou can also list all files in the specified directory. Run the following command to list all files located inside /opt directory:\n\nYou can use the find command to find a file using the name of the file.\n\nFor example, find the file with name apache2.conf within the /etc directory, run the following command:\n\nYou should see the following output:\n\nIf you don't know the exact name of the file then you can use a pattern to find your file:\n\nThis command will find all files that start with the letter apache as shown below:\n\nIn some cases, you may need to find all files with a specific extensions. In this case, you can use the following syntax to perform the operation.\n\nFor example, find all files with extension .conf located inside /etc/apache2 directory, run the following command:\n\nYou should see all files with extension .conf in the following output:\n\nYou can also specify multiple file extension using the OR operater with the find command. For example, find all files with extension .conf and .html located inside /etc/apache2 directory, run the following command:\n\nYou should see all files in the following output:\n\nThe find command also allows you to find only file or directory using the f and d option.\n\nFor example, run the following command to find only file named nginx located inside /etc directory:\n\nYou should see all files with name nginx as shown below:\n\nNext, run the following command to find only directory named nginx within the /etc directory:\n\nYou should see the following output:\n\nYou can use the option -user to find all files belongs to a specific user.\n\nFor example, find all files and directories inside /var/www/html directory that blongs to the user www-data, run the following command:\n\nYou should get the following output:\n\nYou can use the option -perm to find files with specific permissions.\n\nFor example, find all files inside /root directory with permissions 775, run the following command:\n\nYou should get the following output:\n\nYou can use the option -size to find all files with a specific size.\n\nFor example, find all files inside /etc directory which are 12k, run the following command:\n\nYou should see all files which are 12kb:\n\nIf you want to find all files which are greater than 12kb, run the following command:\n\nTo find all files which are less than 12kb, run the following command:\n\nYou can use the option l to find all symbolic link files.\n\nFor example, find all symbolic links files located inside /etc directory, run the following command:\n\nThis command will find and list all symbolic links files located inside /etc directory.\n\nYou can find a file whether its upper case or lower case using the -iname option.\n\nFor example, find a file with name MyFile.txt and ignore the case, run the following command:\n\nIf you want to find all files inside /etc directory and ignore .txt files from the list, run the following command:\n\nThis can not list files which are .txt extensions.\n\nYou can also use more than one condition to find files. For example, find all files of .txt, .conf, .html and .php located inside /etc directory, run the following command:\n\nTo find all empty files, run the following command:\n\nTo find all empty directories, run the following command:\n\nTo find all files which are larger than 100MB and delete them, run the following command:\n\nIn the above guide, you learned how to use the find command in Linux to find files and directories with practical examples. I hope this will helps you to perform your day to day tasks and save your lot of time."
    },
    {
        "link": "https://en.wikipedia.org/wiki/Find_(Unix)",
        "document": "In Unix-like operating systems, is a command-line utility that locates files based on some user-specified criteria and either prints the pathname of each matched object or, if another action is requested, performs that action on each matched object.\n\nIt initiates a search from a desired starting location and then recursively traverses the nodes (directories) of a hierarchical structure (typically a tree). find can traverse and search through different file systems of partitions belonging to one or more storage devices mounted under the starting directory.[1]\n\nThe possible search criteria include a pattern to match against the filename or a time range to match against the modification time or access time of the file. By default, returns a list of all files below the current working directory, although users can limit the search to any desired maximum number of levels under the starting directory.\n\nThe related programs use a database of indexed files obtained through (updated at regular intervals, typically by job) to provide a faster method of searching the entire file system for files by name.\n\nappeared in Version 5 Unix as part of the Programmer's Workbench project, and was written by Dick Haight alongside cpio,[2] which were designed to be used together.[3]\n\nThe GNU implementation was originally written by Eric Decker. It was later enhanced by David MacKenzie, Jay Plett, and Tim Wood.[4]\n\nThe find command has also been ported to the IBM i operating system.[5]\n\nThe two options control how the command should treat symbolic links. The default behaviour is never to follow symbolic links. The flag will cause the command to follow symbolic links. The flag will only follow symbolic links while processing the command line arguments. These flags are specified in the POSIX standard for .[6] A common extension is the flag, for explicitly disabling symlink following.[7][8]\n\nAt least one path must precede the expression. is capable of interpreting wildcards internally and commands must be quoted carefully in order to control shell globbing.\n\nExpression elements are separated by the command-line argument boundary, usually represented as whitespace in shell syntax. They are evaluated from left to right. They can contain logical elements such as AND ( or ) and OR ( or ) as well as predicates (filters and actions).\n\nGNU has a large number of additional features not specified by POSIX.\n• : tests whether the file name matches the shell-glob pattern given.\n• : tests whether the file is a given type. Unix file types accepted include:\n• : always returns true; prints the name of the current file plus a newline to the stdout.\n• : always returns true; prints the name of the current file plus a null character to the stdout. Not required by POSIX.\n• : runs program with the given arguments, and returns true if its exit status was 0, false otherwise. If program, or an argument is {}, it will be replace by the current path (if program is {}, will try to run the current path as an executable). POSIX doesn't specify what should happen if multiple {} are specified. Most implementations will replace all {} with the current path, but that is not standard behavior.\n• : always returns true; run program with the given arguments, followed by as many paths as possible (multiple commands will be run if the maximum command-line size is exceeded, like for xargs). 6\n• : for every path, prompts the user for confirmation; if the user confirms (typically by entering y or yes), it behaves like , otherwise the command is not run for the current path, and false is returned.\n• : Can be used to limit the directory depth to search through. For example, limits search to the current directory.\n\nIf the expression uses none of , , , or , find defaults to performing if the conditions test as true.\n\nOperators can be used to enhance the expressions of the find command. Operators are listed in order of decreasing precedence:\n• (or ): AND. is not evaluated if is false;\n• : OR. is not evaluated if is true.\n\nThis command searches the current working directory tree for files whose names start with or . We quote the so that the shell does not expand it.\n\nThis command searches the current working directory tree except the subdirectory tree \".svn\" for files whose name is \"foo.cpp\". We quote the so that it's not interpreted by the shell as the history substitution character.\n\nReal-world file systems often contain looped structures created through the use of hard or soft links. The POSIX standard requires that\n\nThis searches the current working directory tree for files whose names start with my. The single quotes avoid the shell expansion—without them the shell would replace my* with the list of files whose names begin with my in the current working directory. In newer versions of the program, the directory may be omitted, and it will imply the current working directory.\n\nThis limits the results of the above search to only regular files, therefore excluding directories, special files, symbolic links, etc. my* is enclosed in single quotes (apostrophes) as otherwise the shell would replace it with the list of files in the current working directory starting with my...\n\nThe previous examples created listings of results because, by default, executes the action. (Note that early versions of the command had no default action at all; therefore the resulting list of files would be discarded, to the bewilderment of users.)\n\nThis searches every directory for a regular file whose name is myfile and prints it to the screen. It is generally not a good idea to look for files this way. This can take a considerable amount of time, so it is best to specify the directory more precisely. Some operating systems may mount dynamic file systems that are not congenial to . More complex filenames including characters special to the shell may need to be enclosed in single quotes.\n\nThis searches every directory except the subdirectory tree excluded_path (full path including the leading /) that is pruned by the action, for a regular file whose name is myfile.\n\nThis searches the /home/weedly directory tree for regular files named myfile. You should always specify the directory to the deepest level you can remember.\n\nThis searches the local subdirectory tree of the current working directory and the /tmp directory tree for directories named mydir.\n\nIf you're doing this as a user other than root, you might want to ignore permission denied (and any other) errors. Since errors are printed to stderr, they can be suppressed by redirecting the output to /dev/null. The following example shows how to do this in the bash shell:\n\nIf you are a csh or tcsh user, you cannot redirect stderr without redirecting stdout as well. You can use sh to run the command to get around this:\n\nAn alternate method when using csh or tcsh is to pipe the output from stdout and stderr into a grep command. This example shows how to suppress lines that contain permission denied errors.\n\nThe operator prints extended information, and the example finds any regular file whose name ends with either 'jsp' or 'java'. Note that the parentheses are required. In many shells the parentheses must be escaped with a backslash ( and ) to prevent them from being interpreted as special shell characters. The operator is not available on all versions of .\n\nThis command changes the permissions of all regular files whose names end with .mp3 in the directory tree /var/ftp/mp3. The action is carried out by specifying the statement in the command. For every regular file whose name ends in , the command is executed replacing with the name of the file. The semicolon (backslashed to avoid the shell interpreting it as a command separator) indicates the end of the command. Permission , usually shown as , gives the file owner full permission to read and write the file, while other users have read-only access. In some shells, the must be quoted. The trailing \" \" is customarily quoted with a leading \" \", but could just as effectively be enclosed in single quotes.\n\nNote that the command itself should not be quoted; otherwise you get error messages like\n\nwhich means that is trying to run a file called ' ' and failing.\n\nIf you will be executing over many results, it is more efficient to use a variant of the exec primary that collects filenames up to ARG_MAX and then executes COMMAND with a list of filenames.\n\nThis will ensure that filenames with whitespaces are passed to the executed without being split up by the shell.\n\nThe action is a GNU extension, and using it turns on . So, if you are testing a find command with instead of in order to figure out what will happen before going for it, you need to use .\n\nDelete empty files and print the names (note that is a vendor unique extension from GNU that may not be available in all implementations):\n\nWarning. — The action should be used with conditions such as or :\n\nThis command will search all files from the /tmp directory tree for a string:\n\nThe argument is used to show the name of the file before the text that is found. Without it, only the text found is printed. (Alternatively, some versions of grep support a -H flag that forces the file name to be printed.) GNU can be used on its own to perform this task:\n\nExample of search for \"LOG\" in jsmith's home directory tree:\n\nExample of search for the string \"ERROR\" in all XML files in the current working directory tree:\n\nThe double quotes (\" \") surrounding the search string and single quotes (' ') surrounding the braces are optional in this example, but needed to allow spaces and some other special characters in the string. Note with more complex text (notably in most popular shells descended from `sh` and `csh`) single quotes are often the easier choice, since double quotes do not prevent all special interpretation. Quoting filenames which have English contractions demonstrates how this can get rather complicated, since a string with an apostrophe in it is easier to protect with double quotes:\n\nNote that is not in the standard and may not be supported by all implementations.\n\nIf the switch is not supported on your system then workaround techniques may be possible such as:\n\nSearching files whose size is between 100 kilobytes and 500 kilobytes:\n\nThis command will search the /usr/src directory tree. All files that are of the form '*,v' and '.*,v' are excluded. Important arguments to note are in the tooltip that is displayed on mouse-over.\n\nThe units should be one of [bckw], 'b' means 512-byte blocks, 'c' means byte, 'k' means kilobytes and 'w' means 2-byte words. The size does not count indirect blocks, but it does count blocks in sparse files that are not actually allocated.\n\nDate ranges can be used to, for example, list files changed since a backup.\n• +[number] = At least this many days ago.\n• -[number] = Less than so many days ago.\n• [number] = Exactly this many days ago.\n• Optionally add to measure time from the beginning of a day (0 o'clock) rather than the last 24 hours.\n\nExample to find all text files in the document folder modified since a week (meaning 7 days):\n\nFiles modified before or after an absolute date and time:\n\nExample to find all text files last edited in February 2017:\n• : More recently modified than specified file.\n• Also prependable with for inverse results or range.\n\nList all text files edited more recently than \"document.txt\":\n• is a Unix search tool that searches a prebuilt database of files instead of directory trees of a file system. This is faster than but less accurate because the database may not be up-to-date.\n• is a command-line utility for searching plain-text data sets for lines matching a regular expression and by default reporting matching lines on standard output.\n• is a command-line utility that recursively lists files found in a directory tree, indenting the filenames according to their position in the file hierarchy.\n• GNU Find Utilities (also known as findutils) is a GNU package which contains implementations of the tools and .\n• BusyBox is a utility that provides several stripped-down Unix tools in a single executable file, intended for embedded operating systems with very limited resources. It also provides a version of .\n• has the /s option that recursively searches for files or directories.\n• Plan 9 from Bell Labs uses two utilities to replace : a that only walks the tree and prints the names and a that only filters (like grep) by evaluating expressions in the form of a shell script. Arbitrary filters can be used via pipes. The commands are not part of Plan 9 from User Space, so Google's Benjamin Barenblat has a ported version to POSIX systems available through GitHub. 9\n• is a simple alternative to written in the Rust programming language. 10\n• mdfind, a similar utility that utilizes metadata for macOS and Darwin\n• find (Windows), a DOS and Windows command that is very different from Unix\n• forfiles, a Windows command that finds files by attribute, similar to Unix"
    },
    {
        "link": "https://redhat.com/en/blog/linux-find-command",
        "document": "The command is one of the most useful Linux commands, especially when you're faced with the hundreds and thousands of files and folders on a modern computer. As its name implies, helps you find things, and not just by filename.\n\nWhether you're on your own computer or trying to support someone on an unfamiliar system, here are 10 ways can help you locate important data.\n\n[ Keep your most commonly used commands handy with the Linux commands cheat sheet. ]\n\nWhen you know the name of a file but can't remember where you saved it, use to search your home directory. Use to silence permission errors (or use to gain all permissions).\n\nIf you can't remember the exact name of the file, or you're not sure whether you capitalized any characters, you can do a partial and case-insensitive search like this:\n\nThe command lists the contents of a directory recursively, meaning that it doesn't just list the target you provide for it, but also descends into every subdirectory within that target (and every subdirectory in each subdirectory, and so on.) The command has that function too, by way of the option:\n\nNotice that I don't use in this instance because I'm only listing the contents of a file path within my home directory, so I don't anticipate permission errors.\n\nA command doesn't have to perform just one task. In fact, one of the options in enables you to execute a different command on whatever results returns. This can be especially useful when you need to search for a file by content rather than by name, or you need to search by both.\n\n[ Learn how to manage your Linux environment for success. ]\n\nYou can display files, directories, symlinks, named pipes, sockets, and more using the option.\n\nAs long as you're using the GNU version of , you can include multiple file types in your search results:\n\nA shortcoming of the command is that you can't filter its results by file type, so it can be noisy if you only want a listing of directories in a path. The command combined with the option is a better choice:\n\nWith hundreds of files in a default user directory and thousands more outside of that, sometimes you get more results from than you want. You can limit the depth of searches with the option, followed by the number of directories you want to descend into after the starting point:\n\nSometimes it's helpful to discover empty files as a way to declutter:\n\nTechnically, you can use to remove empty files, but programmatic removal of files is dangerous. For instance, if you forget to include in a search for empty files, you get directories in your results. By adding a delete flag, you would remove potentially important directory structures.\n\nIt's vital to compose your command and then verify the results before deleting. Furthermore, a misplaced delete flag in can delete results before qualifying them (in other words, you can delete directories in a command intended to delete only files by placing the delete flag before the type flag).\n\nI prefer to use or Parallel and a trash command on the rare occasion that I remove files with .\n\nThe option allows you to limit a search to files older than, but also files newer than, some value times 24.\n\nThe before the number doesn't mean to add that number to the time. It's a conditional statement that matches (in this example) a value greater than 24 times 30. In other words, the sample code finds log files that haven't been modified in a month or more.\n\nTo find log files modified within the past week, you can use the conditional:\n\nYou already know about the flag, so you can combine that with these commands for clarity:\n\nSometimes you know the directory structure leading up to a file you need; you just don't know where the directory structure is located within the system. To search within a path string, you can use the option, which treats dots and slashes not as regex characters but as dots and slashes.\n\nThe command is an essential tool for a sysadmin. It's useful when investigating or getting to know a new system, finding misplaced data, and troubleshooting everyday problems. But it's also just a convenience tool.\n\n[ Download the Linux find cheat sheet to keep all these shortcuts in one place. ]\n\nYou don't need a \"good\" reason to use . Using makes it easier to search for something instead of traversing your system. It's an understated but infinitely useful tool that embodies the sublime pleasure of everyday Linux. Start using it today, and find out what makes it great."
    },
    {
        "link": "https://stackoverflow.com/questions/25599094/explaining-the-find-mtime-command",
        "document": "I'm trying to remove all the dated logs except the most recent. Before I execute a script to remove the files, I want to of course test my commands to make sure I'm bringing up accurate results.\n\nWhen executing these commands the date is:\n\nI thought -mtime +1 was supposed to list all files over a day old. Why isn't the 8-30.log one listed?\n\nThis is the desired effect, but it was just trial and error. What is this 0 saying?"
    },
    {
        "link": "https://medium.com/@nirbhaysingh281/use-of-mtime-in-linux-ef59cb175546",
        "document": "The option in Linux is used with various command-line utilities like to search for files based on their modification time. It allows you to specify a time frame (in days) relative to the current time, and the command will search for files that match the specified criteria.\n\nHere’s how to use with the command:\n• : Replace this with the directory path where you want to search for files.\n• : This flag is used to specify the time frame. It searches for files modified more than days ago. If you use , it will search for files modified within the last days.\n• To find files modified more than 7 days ago in the current directory and its subdirectories:\n• To find files modified within the last 3 days in the directory:\n• To find files modified exactly 30 days ago in the directory:\n\nYou can combine with other options and actions to perform various operations on the files that match your criteria. This is a powerful tool for managing and working with files based on their modification timestamps in Linux."
    },
    {
        "link": "https://unix.stackexchange.com/questions/92346/why-does-find-mtime-1-only-return-files-older-than-2-days",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://unix.stackexchange.com/questions/558124/understanding-find-with-atime-ctime-and-mtime",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://tecmint.com/35-practical-examples-of-linux-find-command",
        "document": "The Linux find command is one of the most important and frequently used command-line utilities in Unix-like operating systems. The find command is used to search for and locate a list of files and directories based on the conditions you specify, matching the arguments.\n\nThe find command provides a wide array of options, allowing users to leverage it in diverse conditions. It empowers individuals to search for files based on a multitude of criteria, including permissions, users, groups, file types, dates, sizes, and various other parameters.\n\nIn this article, we will present you with 35 of the most commonly used examples of Find Commands in Linux. We have divided this section into five parts, covering the usage of the find command from basic to advanced levels.\n\nWhen it comes to finding files with specific names, the find command offers a range of options to streamline the process. Here are some basic find commands for locating files based on their names.\n\n1. Find Files Using Name in Current Directory\n\nFind all the files whose name is tecmint.txt in a current working directory.\n\nFind all the files under /home directory with the name tecmint.txt.\n\n3. Find Files Using Name and Ignoring Case\n\nFind all the files whose name is tecmint.txt and contains both capital and small letters in /home directory.\n\nFind all directories whose name is Tecmint in / directory.\n\nFind all php files whose name is tecmint.php in a current working directory.\n\n6. Find all PHP Files in the Directory\n\nHere are some examples of find commands for finding files based on their permissions.\n\nFind all the files whose permissions are 777.\n\nFind all the files without permission 777.\n\nFind all the SGID bit files whose permissions are set to 644.\n\nFind all the Sticky Bit set files whose permission is 551.\n\n15. Find Files with 777 Permissions and Chmod to 644\n\nFind all 777 permission files and use the chmod command to set permissions to 644.\n\n16. Find Directories with 777 Permissions and Chmod to 755\n\nFind all 777 permission directories and use the chmod command to set permissions to 755.\n\nTo find a single file called tecmint.txt and remove it.\n\nTo find and remove multiple files such as .mp3 or .txt, then use.\n\n[ You might also like: 4 Useful Tools to Find and Delete Duplicate Files in Linux ]\n\nTo find all empty files under a certain path.\n\nTo file all empty directories under a certain path.\n\nTo find all hidden files, use the below command.\n\nHere are some examples of find commands for finding files based on owners and groups:\n\nTo find all or single files called tecmint.txt under / root directory of owner root.\n\nTo find all files that belong to user Tecmint under /home directory.\n\nTo find all files that belong to the group Developer under /home directory.\n\nTo find all .txt files of user Tecmint under /home directory.\n\nPart IV – Find Files and Directories Based on Date and Time\n\nHere are some examples of find commands for locating files and directories based on date and time.\n\nTo find all the files which are modified 50 days back.\n\nTo find all the files which are accessed 50 days back.\n\nTo find all the files which are modified more than 50 days back and less than 100 days.\n\nTo find all the files which are changed in the last 1 hour.\n\nTo find all the files which are modified in the last 1 hour.\n\nTo find all the files which are accessed in the last 1 hour.\n\nHere are some examples of find commands for locating files and directories based on size.\n\nTo find all 50MB files, use.\n\nTo find all the files which are greater than 50MB and less than 100MB.\n\nTo find all 100MB files and delete them using one single command.\n\nFind all .mp3 files with more than 10MB and delete them using one single command.\n\nThat’s it, We are ending this post here, In our next article, we will discuss other Linux commands in-depth with practical examples. Let us know your opinions on this article using our comment section."
    }
]