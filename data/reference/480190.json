[
    {
        "link": "https://stackoverflow.com/questions/377644/jquery-ajax-error-handling-show-custom-exception-messages",
        "document": "Is there some way I can show custom exception messages as an alert in my jQuery AJAX error message?\n\nFor example, if I want to throw an exception on the server side via Struts by throw new ApplicationException(\"User name already exists\"); , I want to catch this message ('user name already exists') in the jQuery AJAX error message.\n\nOn the second alert in the error callback, where I alert , I am getting and the code is .\n\nI am not sure where I am going wrong. What can I do to fix this problem?"
    },
    {
        "link": "https://stackoverflow.com/questions/16723868/form-error-handling-ajax-depending-on-user-input",
        "document": "Couldn't find any valueable answers on this question: Its a pretty basic ajax form process handler:\n\nWorks fine to update stuff in the mysql database. (This is a php file) I check in the php file the values , with different checks as isset($Post) etc.\n\nSo for example:\n\nHow to get this info from the url displayed in the ajax's succes part? something like this: (For example)\n\nFor example this upset. But i just can't get this data from the focused url.\n\nall help is appriciated."
    },
    {
        "link": "https://api.jquery.com/jQuery.ajax",
        "document": "In jQuery 1.5 , the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.\n\nAn object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed.\n\nCallback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.\n\nA username to be used with XMLHttpRequest in response to an HTTP access authentication request.\n\nA string containing the URL to which the request is sent.\n\nAn alias for method . You should use type if you're using versions of jQuery prior to 1.9.0.\n\nSet this toif you wish to use the traditional style of param serialization\n\nSet a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup() . The timeout period starts at the point thecall is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent.the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception.script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.\n\nA function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to theparameter or thecallback function, if specified; a string describing the status; and the(in jQuery 1.4.x, XMLHttpRequest) object., the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event\n\nIf the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.\n\nAn object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:\n\nOnly applies when the \"script\" transport is used. Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. Alternatively, the charset attribute can be specified in scriptAttrs instead, which will also ensure the use of the \"script\" transport.\n\nDefines an object with additional attributes to be used in a \"script\" or \"jsonp\" request. The key represents the name of the attribute and the value is the attribute's value. If this object is provided it will force the use of a script-tag transport. For example, this can be used to set, orattributes to satisfy Content Security Policy requirements.\n\nBy default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false .\n\nA password to be used with XMLHttpRequest in response to an HTTP access authentication request.\n\nSpecify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5 , you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.\n\nOverride the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5 , setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" } . If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons.\n\nAllow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local:, and. If thesetting needs modification, it is recommended to do so once in themethod.\n\nAllow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false , ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.\n\nAn object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The headeris always added, but its defaultvalue can be changed here. Values in thesetting can also be overwritten from within thefunction.\n\nWhether to trigger global Ajax event handlers for this request. The default is. Set toto prevent the global handlers likeorfrom being triggered. This can be used to control various Ajax Events\n\nA function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides) are, and. When an HTTP error occurs,receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" (in HTTP/2 it may instead be an empty string), thesetting can accept an array of functions. Each function will be called in turn.This handler is not called for cross-domain scripts and cross-domain JSONP requests. This is an Ajax Event\n\nThe type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:\n\nA function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.\n\nIn requests with dataType: \"json\" or dataType: \"jsonp\" , if the string contains a double question mark ( ?? ) anywhere in the URL or a single question mark ( ? ) in the query string, it is replaced with a value generated by jQuery that is unique for each copy of the library on the page (e.g. jQuery21406515378922229067_1479880736745 ).\n\nWhen data is passed as a string it should already be encoded using the correct encoding for contentType , which by default is application/x-www-form-urlencoded .\n\nWhen data is an object, jQuery generates the data string from the object's key/value pairs unless the processData option is set to false . For example, { a: \"bc\", d: \"e,f\" } is converted to the string \"a=bc&d=e%2Cf\" . If the value is an array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). For example, { a: [1,2] } becomes the string \"a%5B%5D=1&a%5B%5D=2\" with the default traditional: false setting.\n\nData to be sent to the server. If the HTTP method is one that cannot have an entity body, such as GET, the data is appended to the URL.\n\nIf you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to. This allows, for example, server-side redirection to another domain.\n\nAn object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.\n\nThis object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (merged with the settings passed to). For example, specifying a DOM element as the context will make that the context for thecallback of a request, like so:\n\nWhen sending data to the server, use this content type. Default is \"application/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() , then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded , multipart/form-data , or text/plain will trigger the browser to send a preflight OPTIONS request to the server.\n\nAn object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.\n\nA function to be called when the request finishes (afterandcallbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (, or)., thesetting can accept an array of functions. Each function will be called in turn. This is an Ajax Event\n\nIf set to false , it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.\n\nA pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event . Returningin thefunction will cancel the request., theoption will be called regardless of the type of request.\n\nBy default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false . Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8 , the use of async: false with jqXHR ( $.Deferred ) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done() .\n\nA set of key/value pairs that map a givento its MIME type, which gets sent in therequest header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom typeto be sent with the request:You will need to specify a complementary entry for this type infor this to work properly.\n\nA set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup()\n\nA set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup() . See jQuery.ajax( settings ) below for a complete list of all settings.\n\nA string containing the URL to which the request is sent.\n\nThe function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like and are available and are easier to use. If less common options are required, though, can be used more flexibly.\n\nAt its simplest, the function can be called with no arguments:\n\nNote: Default settings can be set globally by using the function.\n\nThis example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.\n\nThe jQuery XMLHttpRequest (jqXHR) object returned by as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains and properties, as well as a method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the object simulates native XHR functionality where possible.\n\nAs of jQuery 1.5.1, the object also contains the method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The method may be used in the callback function, for example, to modify the response content-type header:\n\nThe jqXHR objects returned by as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include:\n• jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to for implementation details.\n• jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the method replaces the deprecated method. Refer to for implementation details.\n• jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the method replaces the deprecated method. In response to a successful request, the function's arguments are the same as those of : data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of : the jqXHR object, textStatus, and errorThrown. Refer to for implementation details.\n• jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the and methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to for implementation details.\n\nThe reference within all callbacks is the object in the option passed to in the settings; if is not specified, is a reference to the Ajax settings themselves.\n\nFor backward compatibility with , a object will expose the following properties and methods:\n• and/or when the underlying request responded with xml and/or text, respectively\n• which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one\n\nNo mechanism is provided, however, since , , , and cover all conceivable requirements.\n\nThe , , , and options all accept callback functions that are invoked at the appropriate times.\n\nAs of jQuery 1.5, the and , and, as of jQuery 1.6, callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these callback hooks.\n\nThe callback hooks provided by are as follows:\n• callback option is invoked; it receives the object and the object as parameters.\n• callback option is invoked, if the request fails. It receives the , a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\".\n• callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of , and must return the (possibly altered) data to pass on to .\n• callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the object.\n• Promise callbacks — , , , and — are invoked, in the order they are registered.\n• callback option fires, when the request finishes, whether in failure or success. It receives the object, as well as a string containing the success or error code.\n\nDifferent types of response to call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the option. If the option is provided, the Content-Type header of the response will be disregarded.\n\nThe available data types are , , , , , and .\n\nIf or is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the property of the object.\n\nIf is specified, the response is parsed using before being passed, as an , to the success handler. The XML document is made available through the property of the object.\n\nIf is specified, the response is parsed using before being passed, as an object, to the success handler. The parsed JSON object is made available through the property of the object.\n\nIf is specified, will execute the JavaScript that is received from the server before passing it on to the success handler as a string.\n\nIf is specified, will automatically append a query string parameter of (by default) to the URL. The and properties of the settings passed to can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the success handler.\n\nFor more information on JSONP, see the original post detailing its use.\n\nBy default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the option. This option affects how the contents of the option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.\n\nThe option can contain either a query string of the form , or an object of the form . If the latter form is used, the data is converted into a query string using before it is sent. This processing can be circumvented by setting to . The processing might be undesirable if you wish to send an XML object to the server; in this case, change the option from to a more appropriate MIME type.\n\nThe option prevents handlers registered for the , , and similar events from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with an handler if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to . See the descriptions of these methods below for more details.\n\nIf the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the and options.\n\nAjax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using rather than being overridden for specific requests with the option.\n\nBy default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set to . To cause the request to report failure if the asset has not been modified since the last request, set to .\n\nThe allows the character set to be explicitly specified for requests that use a tag (that is, a type of or ). This is useful if the script and host page have differing character sets.\n\nThe first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The option to defaults to , indicating that code execution can continue after the request is made. Setting this option to (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.\n\nThe function returns the object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling on the object will halt the request before it completes.\n\nAs of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility.\n\nconverters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g ), you must add a correspondence between the response Content-Type and the actual data type using the option:\n\nThis extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).\n\nTo convert from a supported type (e.g , ) to a custom data type and back again, use another pass-through converter:\n\nThe above now allows passing from to and then to ."
    },
    {
        "link": "https://bennadel.com/blog/1392-handling-ajax-errors-with-jquery.htm",
        "document": "jQuery is the most awesome javascript library that exists. Every day, I'm finding new ways to leverage it and shorter, more efficient ways to get things done. But, while most things are easy to do, the solution is not always immediately evident. One of the things that took me a good while to figure out was how to gracefully handle AJAX errors. Anyone who's worked with JSON requests and other AJAX calls knows that sometimes, that stuff just fails silently; you know something went wrong, but no errors were thrown. If it wasn't for FireBug showing us 404 or 500 style errors, there'd be no evidence at all of these fails.\n\nI've come up with a way to centralize my AJAX calls in a way that seemlessly handles all errors that occur either from the request connection or the JSON processing (ie. poorly formed JSON that cannot be converted back into Javascript data types). I'm not sure if this is the best of all ways, but I'm liking it. The whole concept rests on the fact that all of my system API (AJAX) calls return a uniform response with the following structure:\n\nThe Success property flags the request as having executed properly and returned the expected data. The Data property can be anything it needs to be. The Errors property is an array of any errors that need to be reported. It is only by requiring that all AJAX requests expect this that I can easily handle all errors.\n\nIn production, the following code would probably be part of some other object or integrated into the Javascript framework in a different way, but for this demo, I'm going to break out my AJAX request pipeline into its own class:\n\n(I'm sorry the color coding doesn't work for my Javascript files) There's not a whole lot going on here, but let's walk through it. First off, one thing you can do here is make sure that only one AJAX request (of a particular type) can be processed at a time. The GetJSON() method here can take 3 or 4 arguments. If you pass in the first, optional argument - the name of the request - the GetJSON() logic will make sure that it does not launch multiple instances of the same type of AJAX request at any one time. If you pass in only the three required fields, the GetJSON() method will allow parallel AJAX requests of the same type. You will see this in the demo below - I serialize my 200 requests but allow my 404 requests to happen in parallel.\n\nThe methodology that I use leverages the $.ajax() jQuery method. I used to just use the $.getJSON() method of the jQuery library, but the $.ajax() method gives us access to the Error call back method of the AJAX request. With this method and my unified AJAX response, handling errors is actually quite easy. All AJAX errors are piped through my AJAXFailHandler() method which creates a \"fail\" AJAX response (sets SUCCESS flag to false) and then manually executes the AJAX callback, passing in the fail response. This way, from the AJAX response handler's point of view, it has no idea that anything has gone wrong - it only knows that it received a response object that was either flagged as a success or a failure.\n\nNow, let's take a look at the demo page:\n\nAs you can see above, we are using jQuery to hook the links up to launch AJAX calls. Each of the two links - 404 and 200 responses - has its own response handler method. These methods, check to see if the response object was successful and just alerts the user. Notice that only the 200 style request passes in the name of the request, \"NoErrorRequest\"; this will ensure that the 200 style requests are serialized. The 404 style request, on the other hand, does not label its AJAX requests and therefore can make as many parallel requests as it likes.\n\nI'm sure that I will continue to evolve the way I handle these situations over time, but so far, I have been really pleased with this methodology. It completely differentiates the two types of AJAX errors - logical vs. critical - and moves all critical error handling out of the business logic of the application.\n\nIf you are curious to see what is happening at the other end of the 200.cfm request, here is that template:\n\nAs you can see, it simply creates my unified AJAX response object and streams it back to the client.\n\nWant to use code from this post? Check out the license."
    },
    {
        "link": "https://sitepoint.com/use-jquerys-ajax-function",
        "document": "Ajax is a technology that allows developers to make asynchronous HTTP requests to retrieve or send data from the server without the need for a full page refresh. Developers have been using jQuery for a long time to make this process less cumbersome than it would be in pure JavaScript.\n\nIn my previous article An Introduction to jQuery’s Shorthand Ajax Methods, I discussed some of the most commonly used Ajax calls in jQuery, including $.get(), $.post(), and $.load(), which are convenient methods for making Ajax requests in jQuery in a few lines of code.\n\nBut, sometimes we need more control over the Ajax calls we want to make. For example, we want to specify what should happen in case an Ajax request fails or we need to perform an Ajax call function but its result is only needed if retrieved within a certain amount of time. In such situations, we can rely on another function provided by Ajax in jQuery, called $.ajax(), which is the topic of this tutorial.\n• Versatility and Control: The jQuery $.ajax() function offers a flexible and powerful way to make asynchronous HTTP requests, allowing developers extensive control over the request and response process. It supports a wide array of settings, such as specifying callback functions for success and error, setting request headers, handling data types, and adding authentication tokens for HTTP access authentication requests, which makes it highly adaptable to various scenarios beyond the capabilities of shorthand Ajax call functions like $.get(), $.post(), and $.load().\n• Comprehensive Configuration Options: The article highlights the comprehensive list of configuration options available with $.ajax(), which can cater to nearly any requirement one might have while making Ajax calls. From modifying request headers to processing response data, and from handling errors to setting up cross-domain requests, $.ajax() provides developers with the tools necessary to fine-tune their Ajax requests and responses to fit their application’s needs precisely.\n• Relevance in Modern Development: Despite the advent of newer APIs like Fetch, the jQuery $.ajax() function remains a relevant and valuable tool in web development, especially for maintaining legacy codebases or for developers who prefer the simplicity and consistency offered by jQuery. Its ease of use, combined with the depth of functionality, ensures that $.ajax() can still play a crucial role in projects that require Ajax calls, highlighting jQuery’s ongoing utility in the web development ecosystem.\n• Advanced Error Handling and Retry Strategies: Robust error handling is demonstrated using retry mechanisms with exponential backoff, ensuring applications can gracefully recover from temporary network or server failures. Developers can also define global error handlers to debug and track errors across multiple requests.\n\nThe jQuery $.ajax() function is used to perform an asynchronous HTTP request. It was added to the library a long time ago, existing since version 1.0. The $.ajax() function is what $.get(), $.post(), and $.load() calls behind the scenes using a preset configuration. The signatures of this function are shown below:\n\nThe URL in Ajax parameter is a string containing the Ajax URL you want to reach with the jQuery Ajax call, while settings is an object literal containing the configuration for the Ajax request.\n\nIn its first form, this function performs an Ajax request using the URL parameter and the options specified in the settings. In the second form, the URL is specified in the settings parameter or can be omitted, in which case the request is made to the current page.\n\nThe list of the options accepted by this function, described in the next section, is very long, so I’ll keep their description short. If you want to study their meaning in depth, you can refer to the official documentation for $.ajax().\n\nThere are a lot of different options you can specify to bend $.ajax() to your needs. In the table below, you can find their names and their description sorted in alphabetic order:\n\nThat’s a pretty long list, isn’t it? Well, as a developer, you probably stopped reading this list at the fifth or sixth element, I guess, but that’s fine. The next section will be more exciting because we’ll put the $.ajax() function and some of these options into action.\n\nPutting It All Together\n\nIn this section, we’ll discuss $.ajax() function in detail and some of its options in action.\n\nA First Example of $.ajax()\n\nWe’ll start with a simple demo that reproduces the same code we developed in the previous article. As a recap, we will imagine that we have an element in our website having an ID of main that represents the main content. What we want to do is asynchronously load data from the main content of the pages referenced by the links in the main menu, which ideally has main menu as its ID. We want to retrieve only the content inside this element because the other parts of the layout don’t change, so they don’t need to be loaded.\n\nThis approach is intended as an enhancement because if the user visiting the website has JavaScript disabled, they will have the fallback of still being able to browse the website using the usual synchronous mechanism. In this example, we’re assuming that all the links in the menu are internal links.\n\nWe’ll start with a simple demo that reproduces the same code we developed in the previous article, but this time we’ll adopt $.ajax(). The code we developed previously is shown below for your convenience:\n\nUpdating this snippet to employ the $.ajax() function, we obtain the code shown below:\n\nHere you can see that I used the first form of the function. I’ve specified the URL to send the request to as the first parameter and then a settings object as the second parameter. The latter takes advantage of just two of the several properties discussed in the previous section — success and error — to specify what to do in case of request succeeds or a request fails respectively.\n\nIn this second example, we’ll explore how to enhance your AJAX requests by adding custom headers, handling authentication tokens, and interacting with APIs that require specific security measures. These are common scenarios when working with modern web applications that communicate with external APIs.\n\nLet’s say you are interacting with an API that requires a token for an HTTP access authentication request. You can include this token as part of the request headers using the headers option in $.ajax():\n\nIn this example, the Authorization header includes a bearer token, which is commonly used to authenticate the request with an API securely. Additionally, the X-Custom-Header serves as an extra metadata header, often required by proprietary APIs to provide additional context or comply with specific server requirements.\n\nAdding custom headers is particularly useful when working with secure APIs, ensuring proper authentication and providing the server with any necessary contextual information.\n\nAPIs often require structured data, such as nested JSON objects, to handle filters or hierarchical information. The following example demonstrates how to send structured data using the data property of $.ajax() function:\n\nHere, the contentType: ‘application/json’ specifies the data format being sent, and JSON.stringify() converts JavaScript objects into JSON strings for compatibility with APIs. This is ideal for APIs requiring complex queries or hierarchical filters.\n\nNow that you understand how $.ajax() works, let’s take a look at a real-life scenario in which $.ajax() is incredibly useful. For example, imagine you’re building an online store, and you want users to search for products dynamically as they type in a search box. Instead of reloading the entire page every time, the search results should appear instantly, giving users a smooth and interactive experience.\n\nWhen a user types in the search box, their query string is sent to the server via an AJAX request. The server processes the query string and returns matching products, which are displayed immediately on the page. This keeps the experience fast and seamless.\n\nHere’s how you can handle it:\n\nThink about how much time users save when they don’t have to reload the page to see search results. This approach:\n• Enhances Usability: Results appear in real-time, making the interface feel more responsive.\n• Saves Bandwidth: Only the required data is fetched, reducing unnecessary load on the server.\n\nBy applying this simple pattern, you can transform a basic search box into a dynamic, user-friendly feature that elevates your web application.\n\nBest Practices for Secure and Reliable AJAX Requests\n\nTo ensure your AJAX requests are secure and reliable, it’s important to follow best practices that address common security concerns and optimize the development process.\n• Implement robust error handling using an error callback function or global handlers to provide meaningful feedback to users and handle retries gracefully.\n• Avoid infinite retries to prevent server overload; instead, implement strategies like exponential backoff.\n• Use Cross-Origin Resource Sharing (CORS) to handle cross-domain requests securely. Ensure the server explicitly allows requests from trusted origins.\n• Prevent Cross-Site Scripting (XSS) attacks by escaping or sanitizing inputs and outputs. Use tools like DOMPurify to sanitize user inputs before processing them.\n• Validate all user inputs on both the client and server sides to ensure that only expected data is processed.\n• Always transmit sensitive data over HTTPS to secure data in transit and prevent eavesdropping or man-in-the-middle attacks.\n• Use libraries like DOMPurify to sanitize user inputs and prevent XSS attacks.\n• Use HTTP headers like Content-Security-Policy (CSP) to mitigate injection attacks.\n• Avoid exposing sensitive API keys in the front-end by storing them securely on the server side.\n• Regularly audit and update your dependencies, including jQuery, to address known vulnerabilities.\n\nDebugging Ajax Requests: What To Do When a Request Fails\n\nDebugging Ajax jQuery requests can sometimes be tricky due to their asynchronous nature and the involvement of both client-side and server-side code. Here are some effective tips for debugging issues related to the jQuery $.ajax() method:\n• Network Tab: Check the Network tab in your browser’s developer tools to inspect the Ajax request. Verify the request URL, headers, payload, and response. Look for any errors or unexpected status codes.\n• Console Tab: Look for JavaScript errors or warnings in the Console tab that might indicate problems with your jQuery Ajax call or its callback functions.\n• If the jQuery Ajax call reaches the server but doesn’t behave as expected, check the server-side logs for errors or warnings. This can provide clues about issues in the server-side code or configuration.\n• Temporarily add console.log() statements in the success, error, and complete callbacks of the $.ajax() call to log the response or any error messages. This can help you understand what the server is returning or why the request might be failing.\n• Ensure that the dataType option in your $.ajax() call matches the actual type of data returned by the server. Mismatches here can cause jQuery to incorrectly process the response, leading to unexpected behavior.\n• Use tools like Postman or curl to manually test the API endpoint. This can help you verify that the API is working correctly and understand the expected request format and response data.\n• For JSON data, validate the response using an online JSON validator or debugging tools to ensure it is well-formed. Malformed JSON can cause parsing errors.\n• Bind an event handler to ajaxError on the document to catch and handle Ajax request errors globally. This can help you identify and debug Ajax requests that fail across your application.\n• Simplify your $.ajax() call or isolate it in a simple environment/page to verify its behavior without interference from other scripts or Ajax calls.\n\nSometimes, these errors can be temporary due to network issues. Implementing retries with increasing delays (exponential backoff) can automatically handle such situations and improve the reliability of your application.\n\nThe function retries the request up to 3 times, doubling the delay after each failure. This helps to handle network glitches or temporary server unavailability.\n\nOptimizing the performance of Ajax requests is crucial for creating fast and responsive web applications. When using the jQuery $.ajax() function, consider the following tips to enhance performance:\n\n1. Use GET for Retrieving Data\n• HTTP GET requests are generally faster and can be cached by the browser. Use HTTP GET to retrieve data whenever possible and reserve HTTP POST requests for actions that change the server’s state.\n• Minimize Payload Size: Send and receive only the data that is necessary. Large payloads can significantly slow down your application.\n• Compress Data: Use compression techniques for both request and raw response data if your server and clients support it.\n• Browser Caching: Use HTTP headers such as Cache-Control and ETag to enable the browser to cache frequently requested resources.\n• Application-Level Caching: Cache data locally using tools like localStorage, sessionStorage, IndexedDB, or popular libraries such as Dexie.js, and PouchDB for frequently accessed resources. let cachedData = localStorage.getItem(\"products\"); if (cachedData) { renderProducts(JSON.parse(cachedData)); // Use cached data } else { $.ajax({ url: \"/api/products\", type: \"GET\", success: function(data) { localStorage.setItem(\"products\", JSON.stringify(data)); // Cache data renderProducts(data); } }); }\n• Server-Side Caching: Tools like Redis or Memcached can cache data on the server, reducing database queries for frequently requested data.\n• Make sure your requests are asynchronous (async: true, which is the default) to prevent blocking the main thread. This keeps your application responsive while the data is being fetched.\n• Reduce HTTP Requests: Combine multiple requests into a single one if you’re fetching data from the same endpoint, reducing the overhead of multiple HTTP connections.\n• If you have dependent requests, use jQuery’s promise and .then() chaining to handle them in a clean and efficient way, reducing callback nesting and improving readability.\n• Implement robust error handling to deal with failed requests. Avoid unnecessary retries for requests that are likely to fail repeatedly.\n• Set a reasonable timeout for your AJAX requests (timeout setting). This prevents requests from hanging indefinitely and degrading the user experience.\n• Before making a request, check if the data is already available on the client side or if the operation is really necessary.\n• Ensure that the server-side processing of Ajax requests is optimized. Faster server responses lead to better performance.\n• When updating the DOM based on Ajax responses, minimize the number of manipulations and reflows. Use document fragments or batch updates to the DOM.\n\nWith modern JavaScript, there are numerous options for making HTTP requests, each catering to different needs. While $.ajax() has been a reliable choice for years, newer alternatives like Fetch API have gained popularity for modern development. Let’s compare these options.\n\nWhen To Use $.ajax()\n• Ideal for legacy projects already using jQuery.\n• Convenient for quick integration in environments where jQuery is already loaded.\n• Provides built-in support for complex configurations and callbacks.\n\nWhen To Use Fetch or Other Alternatives\n• Recommended for modern applications or frameworks like React, Vue, or Angular.\n• More lightweight, with no dependency on external libraries.\n\nOther alternatives to $.ajax() include popular tools like Axios, and , each catering to specific needs in modern development.\n\nAs jQuery has evolved, some features and practices in the $.ajax() API have been deprecated or replaced with modern alternatives. Staying aware of these changes ensures compatibility and maintainability in your projects.\n• Synchronous Requests (async: false)The use of synchronous requests is deprecated due to their impact on user experience. Always use asynchronous requests (async: true), which is the default.\n• JSONP Request SupportJSONP requests were once used for cross-domain requests and are now largely obsolete. Use modern methods like CORS for secure cross-domain communication.\n• Deprecated OptionsMethods like jqXHR.error() and jqXHR.success() are replaced by done() and fail() for promise-based handling:\n• Shift Toward Modern AlternativesNative tools like the Fetch API or libraries like Axios are often preferred in modern projects due to their simplicity and compatibility with async/await.\n\nIn this tutorial, I discussed the most powerful of the Ajax functions offered by jQuery, $.ajax(). It allows you to perform Ajax requests with a lot of control over how the request is sent to the server and how the response is processed. Thanks to this function, you have the tools you need to satisfy all of your project’s requirements in case none of the shorthand functions is a good fit.\n\nTo have an even better understanding of the potential of this function, I encourage you to play with the corresponding code samples and to try to modify the code to use some other options accepted by the settings parameter.\n\nIf you want to learn more about JavaScript, check out our JavaScript titles at SitePoint Premium. Have fun!\n\njQuery Ajax function is a powerful and flexible method that allows you to make asynchronous HTTP requests from a web page to a server and handle the response without having to reload the entire page. It supports advanced configurations like custom headers, authentication tokens, and file uploads.\n\nHow Do I Use jQuery’s Ajax Function?\n\nTo use the jQuery Ajax function, you need to call $.ajax() and provide it with a configuration object that specifies various settings like the URL, HTTP method, data to send, and callbacks to handle the response. You can also define security headers and handle errors gracefully with retry mechanisms if needed.\n\nHow Does an Ajax Call jQuery Work?\n\nAn Ajax call jQuery is performed using the $.ajax() method. This method allows developers to make asynchronous HTTP requests to retrieve or send data to a server without refreshing the page.\n\nWhat Are the Basic Parameters of the $.ajax() Function?\n\nThe basic parameters of the $.ajax() function include:\n• url: The target URL for the request.\n• data: The data to be sent with the request, either as JSON, query strings, or form data.\n\nWhat Is the Purpose of the Success Callback in $.ajax()?\n\nThe success callback is executed when the Ajax request succeeds. It receives the raw response data returned from the server as its parameter, allowing you to process and manipulate the data as needed. For example, dynamic search results can be updated instantly using this callback.\n\nYes, you can. The error callback function in the Ajax request jQuery configuration lets you define a function to handle errors that occur during the Ajax request. This can be useful for scenarios like network errors or server-side issues.\n\nHow Can I Send Data Along with My Ajax Request?\n\nYou can use the data parameter in the $.ajax() configuration to send data to the server. This data can be in various formats like a query string, a JSON object, or serialized form data.\n\nIs the jQuery Ajax Function the Only Way to Make Ajax Requests?\n\nNo. Modern alternatives, like the Fetch API, Axios, SuperAgent, and Node-Fetch, provide simpler syntax and better support for Promises and async/await. The article includes a detailed comparison to help you choose the right tool for your project based on its requirements.\n\nIs jQuery Required for Using Ajax in Web Development?\n\nNo. Modern browsers natively support the Fetch API, which can replace jQuery’s Ajax function for most use cases. However, jQuery’s Ajax function is still useful in legacy projects or scenarios where jQuery is already integrated.\n\nYes, but its relevance depends on the project. For legacy systems or projects already using jQuery, $.ajax() remains a practical choice. For newer applications, alternatives like Fetch API, Axios, or SuperAgent are often preferred due to their Promise-based syntax and integration with modern frameworks like React and Vue."
    },
    {
        "link": "https://stackoverflow.com/questions/2640001/load-country-state-city",
        "document": "I have chain of drop down like Country / state and City. Is there is any way to wait until the drop down population then proceed further? like first load the country and then based on the select of an country then load the state and same as city...."
    },
    {
        "link": "https://stackoverflow.com/questions/17403795/populate-state-and-city-dropdowns-based-on-country-and-state-using-jquery",
        "document": "I am trying to accomplish dropdowns using JSON. I want 3 dropdowns. First populate the country dropdown (eg: usa, uk etc.,). Now, when the user select USA then states dropdown needs to be populated by using jQuery .change(). Again when user select the state they need to be presented with cities dropdowns.\n\nHow can I achieve this? As my JSON file is slightly big I have added it here and tried to populate countries dropdown but unable to generate states and cities drop down...\n\nThe above code helps me populate just the countries but not others like states and cities. Any help is much appreciated."
    },
    {
        "link": "https://phppot.com/php/country-state-city-example-cascading-jquery-dependent-dropdown",
        "document": "Are you searching for creating a dependent country-state-city dropdown in your application? I will give you a free download for an AJAX-based dependent dropdown code. It loads data from the database depends on the selected parent entity.\n\nWhen dropdown options depend on another input, we can say it as a dependent dropdown. Instead of user selection, some dropdowns depend on location, timezone and more. If you want to know how to find users’ locations, then the linked article will help you with an example.\n\nThe below screenshot shows the dependent dropdown example output. We can see the inter-dependancy between the selected option shown in this screenshot.\n\nOn choosing the USA for the country dropdown, it shows the corresponding states. When we select a state of California from the options, then it populates the dependent cities.\n\nSo, each entity depends on its parent to display the related result from the database.\n\nIn a web application, it may have many requirements around the dropdown feature. For example, it requires to display cascading dropdowns with group options. In some applications, it needs dependent dropdowns with multi-select.\n\nThere are solutions available on the web to sort out those needs. This article provides a custom solution for the data dependency between country-state-city inputs. We have done this before for country-state dropdowns.\n• PHP code to fetch the country’s states and state’s cities\n\nThere are many plugins available in the market for creating dependent dropdowns. Let us see a couple of those plugins in this section.\n\nDynamic jQuery Cascading Dropdown Lists Plugin is a jQuery plugin. It provides Basic/Dynamic mode of dependent dropdowns variations. It supports to load both static or dynamic data.\n\nDynamic Cascading Dropdown For Bootstrap – Cascader is a jQuery based Bootstrap plugin. It helps to render sub-dropdowns in a hierarchical order.\n\nThe dependent dropdown feature is relevant for a group of related dropdowns elements. This example has a HTML form with country, state, city dropdown. I will explain how to make them as dependent dropdowns.\n\nThese dropdown options are from the database. Instead of getting all the options, let us fetch data on a need basis for the dependent dropdown.\n\nThis type of dynamic loading will give relevant data based on user selection. Also, it will reduce the user effort to search for a suitable option.\n\nIn a PHP jQuery example, we have seen already how to load dynamic options for a select box.\n\nI used jQuery AJAX with PHP to load data for the dependent dropdowns. The country dropdown will show all its options on page load. On its change event, I invoke AJAX to get dependent results for the state dropdown.\n\nAs same as the country-state dependent data load, the state-city will work. There are separate AJAX handlers and endpoints to get the dependent state and city.\n\nThis code is to display the country state city dependent dropdowns to the user.\n\nIt includes PHP code to load the initial options for the country dropdown. The PHP code connects the database and retrieves the country result in an array format.\n\nEach dropdown field’s change event invokes jQuery method to get the dependent data. The jQuery method requests PHP for the dependent data via AJAX.\n\nThis HTML code has the dependent dropdown as a target container. In this HTML target, the AJAX response loads the dependent data dynamically.\n\nIn a previous article, we have seen how to show dependent dropdown options with multi-select. It increases the search criteria and retrieves more data for the select box options.\n\nAJAX is not mandatory to implement a dependent dropdown in an application. We can also submit the form with selected data to get the dependent data result.\n\nBut, it will give a good user experience with AJAX compared to the form submit. We have to ensure about the importance of using AJAX before coding it. Because unnecessary AJAX usage is an overload for an application.\n\nIn this example, I have used a simple AJAX code in jQuery. You can see the JavaScript methods getState(), getCity() in the below code. It has the AJAX script to get the dependent data from the server-side.\n\nThese methods call appropriate PHP files for the dependent dropdown results. These results are from the database retrieved using PHP MySQL.\n\nThis is the getState() method definition. It sends selected country id to the get-state-ep.php endpoint.\n\nThis JavaScript method is like the getState method we have seen above. It passed the state id to the get-city-ep.php to get the city option in a HTML format.\n\nOn changing the state dropdown values, this method executes the jQuery AJAX script.\n\nThe success callback handles the response returned from the server-side.\n\nThe jQuery code inside the success callback method handles the AJAX response. It updates the dependent dropdown options as it is from the PHP in a HTML format.\n\nI have created two PHP programs get-state-ep.php and get-city-ep.php.\n\nI call get-state-ep.php via AJAX by sending the selected country. This PHP code will fetch the state result based on the selected country from the database.\n\nIn get-city-ep.php I received the state id parameter posted via AJAX. The SELECT query in the following code uses the parameter to fetch cities based on it.\n\nThe PHP code to execute the database fetch is running on a conditional basis. In that condition, it checks if the country or state id passed via AJAX is not empty.\n\nIt returns group HTML <option></option> tags as a response to update the dependent dropdown. We can also return JSON response and handle it on the client-side.\n\nThis SQL script contains the structure and the data dump for the country, state and city tables.\n\nIt also shows the ALTER queries for adding the required indexes and constraints.\n\nImport this script in your environment while setting this example in local. The sample data given in the SQL is dependent on each other. It will help to make the example work by getting expected dependent results.\n\nThis ERD shows the entity relationship between the country, states, city database tables.\n\nIt will explain the interdependency between the entities taken for this example.\n\nWe have enhanced the dependent dropdown code by adding one more dropdown to the cascade. The cascading dropdowns behave based on their parent selection.\n\nWith or without AJAX which doesn’t matter while creating dependent dropdown. But, this code will give the best model to provide a good user experience with AJAX.\n\nBy enabling multi-select for these dropdowns helps to widen the dependent data search. I herewith interlinked the other dependent dropdowns code from previous articles.\n\nI hope this example code and the related interlinks added in this article will help you."
    },
    {
        "link": "https://coderglass.com/jquery/country-state-city-dropdown-jquery.php",
        "document": "I have received many users requests for making the dynamic dependent Country, State and City select box using jQuery and ajax in PHP. After getting lot of requests, I am going to explain how to create auto select country, state and city dropdown using help of jQuery, Ajax and Php.\n\nThis tutorial is very useful to include this feature in user registration form or address form. In this tutorial, I have include dynamic feature. When you select country from select box then next select box automatically generate state related to that country. When you select state then it automatically generate city in next select box.\n\nFirst you need to create a Database name location. After creating database (location), you will have to create three Table countries, states and cities.\n\n Here Table countries has relation with Table states through country_id and states has relation with Table cities through state_id.\n\nThis table contains two columns (country_id, country_name). To create this table you will have to execute code that is given below:\n\nThis table contains three columns (state_id, state_name, country_id). To create this table you will have to execute code that is given below:\n\nThis table contains three columns (city_id, city_name, state_id). To create this table you will have to execute code that is given below:\n\nThis PHP file is used to connect and use the database (location).\n\nIn this file I have used JavaScript, Jquery Library and some Php code. I have used JavaScript code to getting data of state and city from ajaxFile.php using help of Ajax. It also displays the returned HTML of ajaxFile.php file to the respective selct box.\n\nselect $ document ready $ on countryID $ val countryID $ ajax type url data countryID success html $ html html $ html $ html $ html $ on stateID $ val stateID $ ajax type url data stateID success html $ html html $ html Varun Singh's Tech Blog Country, State and City dropdown box using jquery in Php Select Country Select country first Select state first\n\nThis file is called by the Ajax and we get state name and city name from the database according to country_id and state_id. This file also returns select options HTML to the Ajax function."
    },
    {
        "link": "https://codexworld.com/dynamic-dependent-select-box-using-jquery-ajax-php",
        "document": "The dynamic dependent select box is used to auto-populate the dependent data in the dropdown list. Based on the drop-down selection, the dependent data are retrieved from the database and displayed in the next select box. Generally, the dynamic dependent select box is used to implement Country State City dependent dropdown functionality. You can easily implement dynamic dependent dropdown without page refresh using Ajax in PHP.\n\nDynamic dependent dropdown is very useful to fetch dynamic relational data from the database and listed in multiple select boxes. In this tutorial, we will show you how to implement a relational dropdown of country state city using jQuery, Ajax, PHP, and MySQL. In the dependent select box, the state is related to the country, and the city is related to the state. Based on changing of country, the respective state & city is fetched from the database without reloading the page using jQuery, Ajax, PHP, and MySQL.\n\nIn this example script, we will integrate country, state, and city dependent dropdown select boxes with PHP and MySQL.\n• Initially, all the countries will be listed in the Country dropdown.\n• When a country is selected, the respective states will be fetched from the database and appear in the state dropdown.\n• Alike when a state is selected, the respective cities will be fetched from the database and appear in the city dropdown.\n\nBefore getting started to build a dynamic dependent dropdown list with PHP and MySQL, take a look at the file structure.\n\nTo store the data of the country, state, and city, three tables are required in the database. Also, there would be a relationship between countries, states, and cities table. The states table has a relation with the countries table and the cities table has a relation with the states table.\n\nThe following SQL creates a table in the MySQL database.\n\nThe following SQL creates a table with parent field in the MySQL database.\n\nThe following SQL creates a table with parent field in the MySQL database.\n\nThe dbConfig.php file is used to connect the database using PHP and MySQL. Specify the database host ( ), username ( ), password ( ), and name ( ) as per your database credentials.\n\nHTML & PHP Code:\n\n Initially, all the country data is fetched from the database and listed in the country dropdown. Once a value is selected in the country dropdown, the respective data is listed in the state and city dropdown.\n\nJavaScript Code:\n\n Once a country is selected, the dependent states are fetched from the server-side script ( ) using jQuery and Ajax. Likewise, by selecting the state, the dependent cities are retrieved from the server-side script ( ) using jQuery and Ajax.\n\nInclude the jQuery library first, it is required to initiate Ajax requests.\n\nInitiate Ajax request to fetch the dependent data (state and city) from the database without page refresh using jQuery.\n• On changing the value in the country dropdown,\n• POST the selected country ID to the server-side script (ajaxData.php) via Ajax request.\n• The select box option list is retrieved from the response and HTML is set to the dependent state dropdown.\n• On changing the value in state dropdown,\n• POST selected state ID to the server-side script (ajaxData.php) via Ajax request.\n• The select box option list is retrieved from Ajax response and HTML is set to the dependent city dropdown.\n\nThe ajaxData.php is called by the Ajax request to retrieve the dependent data from the database using PHP and MySQL. The state and city dropdown HTML is returned to the success method of the Ajax request.\n• Retrieve the ID from the Ajax request using PHP $_POST method.\n• If is provided,\n• Fetch the state data based on the specific country ID from the database.\n• If is provided,\n• Fetch the city data based on the specific state ID from the database.\n\nPost and Get Value of Dynamic Dependent Dropdown\n\nAfter the form submission, you can get the value of the dynamic dependent select boxes using PHP. Use the $_POST method to retrieve the selected option value in PHP.\n\nThe dynamic dependent select boxes are a very useful element when you want to allow the user to select values from the multiple dropdown list. In the example code, we have shown the dynamic dependent select boxes for country state city dropdown in PHP. You can easily extend the dynamic dependent select boxes functionality and implement Ajax country state city dropdown with PHP and MySQL. If you have a large number of data, use the JSON data type in Ajax and PHP for a fast response."
    }
]