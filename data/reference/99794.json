[
    {
        "link": "https://ssh.com/academy/ssh/tunneling-example",
        "document": "SSH port forwarding is a mechanism in SSH for tunneling application ports from the client machine to the server machine, or vice versa. It can be used for adding encryption to legacy applications, going through firewalls, and some system administrators and IT professionals use it for opening backdoors into the internal network from their home machines. It can also be abused by hackers and malware to open access from the Internet to the internal network. See the SSH tunneling page for a broader overview.\n\nLocal forwarding is used to forward a port from the client machine to the server machine. Basically, the SSH client listens for connections on a configured port, and when it receives a connection, it tunnels the connection to an SSH server. The server connects to a configurated destination port, possibly on a different machine than the SSH server.\n• Connecting to a service on an internal network from the outside\n• Connecting to a remote file share over the Internet\n\nQuite a few organizations for all incoming SSH access through a single jump server. The server may be a standard Linux/Unix box, usually with some extra hardening, intrusion detection, and/or logging, or it may be a commercial jump server solution.\n\nMany jump servers allow incoming port forwarding, once the connection has been authenticated. Such port forwarding is convenient, because it allows tech-savvy users to use internal resources quite transparently. For example, they may forward a port on their local machine to the corporate intranet web server, to an internal mail server's IMAP port, to a local file server's 445 and 139 ports, to a printer, to a version control repository, or to almost any other system on the internal network. Frequently, the port is tunneled to an SSH port on an internal machine.\n\nIn OpenSSH, local port forwarding is configured using the option:\n\nThis example opens a connection to the jump server, and forwards any connection to port 80 on the local machine to port 80 on .\n\nBy default, anyone (even on different machines) can connect to the specified port on the SSH client machine. However, this can be restricted to programs on the same host by supplying a bind address:\n\nThe option in the OpenSSH client configuration file can be used to configure forwarding without having to specify it on command line.\n\nIn OpenSSH, remote SSH port forwardings are specified using the option. For example:\n\nThis allows anyone on the remote server to connect to TCP port 8080 on the remote server. The connection will then be tunneled back to the client host, and the client then makes a TCP connection to port 80 on . Any other host name or IP address could be used instead of to specify the host to connect to.\n\nThis particular example would be useful for giving someone on the outside access to an internal web server. Or exposing an internal web application to the public Internet. This could be done by an employee working from home, or by an attacker.\n\nBy default, OpenSSH only allows connecting to remote forwarded ports from the server host. However, the option in the server configuration file sshd_config can be used to control this. The following alternatives are possible:\n\nThis prevents connecting to forwarded ports from outside the server computer.\n\nThis allows anyone to connect to the forwarded ports. If the server is on the public Internet, anyone on the Internet can connect to the port.\n\nThis means that the client can specify an IP address from which connections to the port are allowed. The syntax for this is:\n\nIn this example, only connections from the IP address to port 8080 are allowed.\n\nOpenSSH also allows the forwarded remote port to specified as 0. In this case, the server will dynamically allocate a port and report it to the client. When used with the option, the client will print the allocated port number to standard output.\n\nRemote SSH port forwarding is commonly used by employees to open backdoors into the enterprise. For example, the employee may set get a free-tier server from Amazon AWS, and log in from the office to that server, specifying remote forwarding from a port on the server to some server or application on the internal enterprise network. Multiple remote forwards may be specified to open access to more than one application.\n\nThe employee would also set on the server (most employees do not have fixed IP addresses at home, so they cannot restrict the IP address).\n\nFor example, the following command opens access to an internal Postgres database at port 5432 and an internal SSH port at port 2222.\n\nThe option in the OpenSSH server configuration file must be enabled on the server to allow port forwarding. By default, forwarding is allowed. Possible values for this option are or to allow all TCP forwarding, to prevent all TCP forwarding, to allow local forwardings, and to allow remote forwardings.\n\nAnother option of interest is , which can be used to forward Unix domain sockets. It allows the same values as . The default is .\n\nThe configuration option as described above also affects remote port forwardings. Possible values were (only local connections from server host allowed; default), (anyone on the Internet can connect to remote forwarded ports), and (client can specify an IP address that can connect, anyone can if not specified).\n\nHow to Prevent SSH Port Forwarding from Circumventing Firewalls\n\nWe recommend that port forwarding be expressly disabled when not needed. Leaving port forwarding enabled can expose the organization to security risks and backdoors. For example, if a server intended to only provide SFTP file transfers allows port forwardings, those forwardings might be used to gain unintended access into the internal network from the Intranet.\n\nThe problem is that port forwarding can in practice only be prevented by a server or firewall. An enterprise cannot control all servers on the Internet. Firewall-based control can also be tricky, as most organizations have servers in Amazon AWS and other cloud services, and those servers are usually accessed using SSH.\n\nSSH's Tectia SSH Client/Server is a commercial solution that can provide secure application tunneling along with SFTP and secure remote access for enterprises."
    },
    {
        "link": "https://builtin.com/software-engineering-perspectives/ssh-port-forwarding",
        "document": "SSH port forwarding, sometimes referred to as SSH tunneling, is a method for safely transmitting data over an encrypted SSH connection between a local and distant server. It allows users to securely connect to resources or services that firewalls could otherwise prevent or restrict.\n\nSSH port forwarding, or SSH tunneling, is a secure networking technique where data is exchanged between devices — like a local and remote machine — using an SSH connection.\n\nSSH (Secure Shell) is a network communication protocol that uses cryptography to enable remote, encrypted connections to and from devices, allowing two computers to share data and communicate securely over unsecured networks. By encrypting data, SSH port forwarding enhances security transmitted through the tunnel and protects it from potential interception or eavesdropping. It is a powerful feature often used by system administrators, developers and users needing secure access to resources across different networks or to bypass network restrictions.\n\nThere are three types of SSH port forwarding:\n• Local port forwarding: Redirects traffic from a local port on the client machine to a specified port on a remote server via an SSH connection.\n• Remote port forwarding: Redirects traffic from a port on the remote server to a specified port on the client machine.\n• Dynamic port forwarding: Creates a SOCKS proxy on the client machine, enabling the forwarding of traffic from various applications through the SSH connection.\n\nWe will explore the different types of port forwarding in detail later in the article. First, let’s understand how port forwarding works and how to perform it.\n\nPort forwarding (or port mapping), is a computer networking technique that enables desired internet traffic to be sent to a particular device on a private network. In order to reroute the incoming traffic, rules are created on a router or firewall.\n\nHere’s a general guide on how to port forward:\n• Identify the external port. Choose an external port number that will be used to access the device on the internal network. This port number should not be used by any other service on the internet.\n• Identify the internal IP address and port. Determine the private IP address of the device you want to make accessible and the port number it uses for the service you want to expose.\n• Create a port forwarding rule. Access the router’s configuration interface and create a port forwarding rule. This rule will map the external port number to the internal IP address and port number.\n• Activate the rule. Save the port forwarding rule and activate it. Once activated, the router will start redirecting incoming traffic on the specified external port to the designated device and port on the internal network.\n\nHere are two examples of creating rules for a router or firewall to enable port forwarding:\n\nLet’s say you want to forward a specific port to a specific device. In this case, it’s port 80 (HTTP) to a web server with the IP address 192.168.1.100. To do this, you would create the following rule:\n\nThis rule will tell the router to forward any traffic that is sent to port 80 on its public IP address to port 80 on the web server with the IP address 192.168.1.100.\n\nIn this second example, we’ll forward a range of ports to a specific device. Let’s say you want to forward ports 25-26 (SMTP) to a mail server with the IP address 192.168.1.101. To do this, you would create the following rule:\n\nThis rule will tell the router to forward any traffic that is sent to ports 25-26 on its public IP address to ports 25-26 on the mail server with the IP address 192.168.1.101.\n\nMore on CybersecurityHere’s Why Startups Shouldn't Over-Rely on SOC 2\n\nPort forwarding is crucial when it comes to networking and gaining access to resources inside private networks. The following are some of the main reasons for port forwarding’s importance:\n• Accessing services from outside the local network: Port forwarding allows external users or devices from the internet to access services, applications, or resources hosted on devices within a private network.\n• Running specialized applications: Port forwarding ensures the applications can send and receive data through the required ports, enabling them to work correctly.\n• Gaming and peer-to-peer connections: Gamers often utilize port forwarding to host game servers or participate in multiplayer games by allowing incoming connections through specific ports.\n• Enabling remote management and control: It facilitates remote management of devices like cameras, IoT devices or network-attached storage (NAS) systems within the local network.\n• Security and control: It enables selective opening of ports, ensuring that only specific services or applications are accessible, thereby reducing the risk of unauthorized access.\n• Flexibility in network configuration: Port forwarding provides flexibility in network configuration, allowing users to customize how incoming traffic is directed and which devices or services are reachable from outside the local network.\n\nThrough the process of port forwarding, incoming network traffic is redirected from one router or firewall port to another port on a particular local network device. There are a few requirements and things to keep in mind before setting up port forwarding:\n• Access to router configuration: You must have administrative access to the router or gateway device responsible for managing network traffic. Typically, this involves accessing the router’s web-based interface via a web browser.\n• Static IP address or DHCP reservation: It’s recommended to assign a static IP address to the device within the local network that will receive the forwarded traffic. Alternatively, use DHCP reservation to ensure the device consistently gets the same IP address from the router's DHCP server.\n• Understanding the service and port numbers: Identify the service or application for which you want to set up port forwarding. Different services and applications use specific port numbers (e.g., HTTP uses port 80, FTP uses port 21, SSH uses port 22).\n• Security considerations: Assess the security implications of opening specific ports to incoming traffic. Only forward ports that are necessary for the intended service or application, and avoid exposing unnecessary ports to minimize security risks.\n• Router’s interface and port forwarding settings: Understand the terminology and options related to port forwarding in the router’s settings, such as internal and external ports, protocols (TCP/UDP), and the target device’s IP address.\n• Checking firewall settings: Ensure that the router’s firewall or any software firewall on the target device does not block incoming connections to the port being forwarded.\n• Connectivity: After configuring port forwarding, test the connectivity from an external network to ensure that the service or application is accessible as intended.\n\nWhen a user needs to access a resource or service located on a remote server but is unable to do so directly because of firewall settings, network configurations or private network limitations, local port forwarding is utilized.\n\nThis involves using a SSH to establish a secure tunnel between a local machine (the client) and a remote server. It allows users to access services or resources on the destination server that are otherwise inaccessible because of firewall settings or network limitations.\n\nTo establish local port forwarding, the user initiates an SSH connection to the remote server with the option followed by the forwarding specifications. The syntax for setting up local port forwarding is:\n\nFor example, suppose a user wants to access a web server (port 80) located on a remote server with IP address 192.168.1.100, but direct access to port 80 is blocked. The user can use local port forwarding to redirect local port 8080 to the remote server’s port 80.\n\nRemote port forwarding, also known as reverse tunneling, is used when a user needs to allow external access to a service or application hosted on their local machine, typically behind a firewall or router, and make it accessible to a service or application running on a remote server.\n\nThis technique, which is also called reverse tunneling, is used to create a secure connection between a remote server and a local computer or device. Remote port forwarding reroutes traffic from a specified port on the remote server to a designated port on the local machine. This is in contrast to local port forwarding, which forwards data from a local machine to a remote server.\n\nTo initiate remote port forwarding, the user configures an SSH connection to the remote server with the option followed by the forwarding specifications. The syntax for setting up remote port forwarding is:\n\nFor example, suppose a user wants to allow access to a web server (running on port 8080) hosted on their local machine (with private IP 192.168.1.10) from a remote server with public IP 123.45.67.89. The user can use remote port forwarding to redirect traffic from the remote server’s port 80 to their local machine’s port 8080.\n\nDynamic port forwarding enables users to create a secure tunnel between their local machine and a remote SSH server, turning the SSH server into a proxy server.\n\nThis technique enables users to establish a dynamic SOCKS proxy over an SSH connection. Dynamic port forwarding creates a general-purpose encrypted tunnel that can redirect traffic from many ports and applications over the SSH connection. This is different from local and remote port forwarding, which redirects specific ports to specific destinations.\n\nDynamic port forwarding is used for a variety of purposes. Such as: Accessing blocked websites or services, bypassing censorship and protecting your privacy. When you use dynamic port forwarding, your traffic is encrypted and routed through the SSH server, which makes it more difficult for third parties to track or intercept your activity.\n\nTo initiate dynamic port forwarding, the user configures an SSH connection to the remote server with the option followed by a chosen local port number.\n\nThe syntax for setting up dynamic port forwarding is:\n\nAfter initiating the SSH connection with dynamic port forwarding, a SOCKS proxy is created on the specified local port (e.g., 1080) on the client machine. Applications or services on the client machine can be configured to use this SOCKS proxy as a gateway to route their network traffic through the SSH tunnel to the remote server.\n\nThe SSH server forwards the traffic to the final destination addresses, acting as a mediator for all the connections initiated through the SOCKS proxy. Dynamic port forwarding in SSH provides a versatile method for securely tunneling traffic from multiple applications or services through an encrypted connection to a remote SSH server.\n\nAlthough port forwarding is a helpful tool for connecting to distant devices and services, if it isn’t done appropriately, it may cause security issues. The following are the primary safety concerns with port forwarding:\n• Unauthorized access: Attackers may use exposed ports to obtain unauthorized access to your devices and data. This might result in malware infestations, data breaches or even compromising your whole network.\n• Denial-of-service attacks: Attackers can target open ports with Denial-of-Service (DoS) attacks, overwhelming the devices and making them unavailable to legitimate users. This can disrupt operations and cause significant downtime.\n• Malware installation: Attackers can use port forwarding vulnerabilities to install malware on your devices, allowing them to control your devices and steal data. This can lead to identity theft, financial losses and reputation damage.\n• Misconfigurations and vulnerabilities: Improper port forwarding configurations or vulnerabilities in the services you expose can create exploitable weaknesses that attackers can leverage to gain access to your network.\n• Increased attack surface: By opening specific ports to the internet, you are essentially creating entry points for potential attackers. Each open port represents a potential vulnerability that can be exploited if not properly secured.\n\nThere are a few steps you can take to mitigate the security risks associated with port forwarding. These include:\n• Implementing strong authentication mechanisms, such as multi-factor authentication (MFA), for services accessible through forwarded ports.\n• Regularly reviewing and updating port forwarding rules and closing unnecessary or unused ports.\n• Using firewall rules to limit access to forwarded ports only to trusted IP addresses or ranges.\n• Employing intrusion detection/prevention systems (IDS/IPS) to monitor and detect suspicious activities on forwarded ports.\n\nMore on CybersecurityGuide to Discretionary Access Controls (DAC) With Examples\n\nSSH port forwarding is a flexible method that lets you encrypt legacy apps, get around firewalls and safely access remote resources. By extending connectivity options beyond standard methods, SSH port forwarding makes it possible to effortlessly access resources that might not be available otherwise. It empowers users to navigate restricted networks, bypass firewalls, and circumvent geographical limitations.\n\nAs for some of its significant applications, SSH port forwarding can:\n• Enable users to securely access devices and services running on a private network from anywhere on the internet. This is particularly useful for remote work, accessing home devices while away, or managing servers remotely\n• Add encryption to legacy applications that do not support secure communication protocols. This can help protect your data from interception and eavesdropping when using these applications over public networks.\n• Let users get outside firewalls and access resources that your network’s security policies might be blocking. This can be useful for testing apps, resolving network problems, and getting access to geo-restricted material.\n• Be used to establish virtual private network (VPN) connections, allowing you to securely connect to a remote network as if you were physically present.\n• Allow users to test and debug web applications running on remote servers.\n• Be used to securely access remote file shares, such as network file systems (NFS) or server message block (SMB) shares, over an encrypted connection.\n• Help bypass restrictions and access blocked websites or services in countries with internet censorship or surveillance."
    },
    {
        "link": "https://phoenixnap.com/kb/ssh-port-forwarding",
        "document": "SSH port forwarding and SSH tunneling are two interchangeable terms. An encrypted SSH tunnel transfers assorted data and delivers it safely to the remote system. This method is used to circumvent standard firewall security protocols. Port forwarding is a component of most SSH client and server programs.\n\nThis article explains SSH port forwarding and shows how to use OpenSSH for Linux and the Windows PuTTY client to enable local, remote, or dynamic SSH port forwarding.\n• An SSH client/server of your choice (OpenSSH or PuTTY).\n• A reachable IP address or name of the remote/local server.\n\nSSH port forwarding, also known as SSH tunneling, securely transports data over an encrypted SSH connection. It works by forwarding connections from a local port on your machine through an encrypted tunnel to a remote machine. This technique allows users to securely access services that are otherwise restricted by network policies.\n\nIn practice, SSH port forwarding allows you to access network resources that are not directly reachable. For instance, if you are offsite and need to connect to a protected resource within a secure network, you can establish an SSH connection to an accessible machine within that network. This SSH connection then serves as a tunnel that forwards your requests to the protected resource.\n\nWhat Is an SSH Tunnel?\n\nAn SSH tunnel is a secure, encrypted pathway between your local machine and a remote server over an SSH connection. This tunnel is a secure way to transfer data and protect sensitive information from eavesdropping or interception.\n\nYou can securely forward network traffic from a local port to a specified destination using an SSH tunnel. This is useful for accessing restricted services or resources that are otherwise unreachable due to firewall or network configurations.\n\nThere are several types of port forwarding, each designed to meet specific needs. The main types include:\n\nThe sections below explain each type in detail.\n\nLocal port forwarding redirects traffic from your local machine to another server through an intermediary, often using an SSH tunnel. For example, if you are at a coffee shop and need to securely access your company's internal database, you can set up local port forwarding.\n\nLocal port forwarding creates a secure connection from your machine to the database, making it seem like you are accessing it from your company's network.\n\nRemote port forwarding routes traffic from a remote server back to your local machine or another specified destination. This method enables external access to services running on your local machine via an SSH tunnel.\n\nFor instance, you can use remote port forwarding if you are developing an app on your machine and want to share it with a client without deploying it to a public server. This allows the client to access the app on your machine securely.\n\nDynamic port forwarding sets up a secure, adaptable tunnel for routing traffic from various ports, often through a SOCKS proxy, to different destinations based on real-time needs. It acts as a secure line and channels your internet traffic through your home or office network for added security.\n\nThis type of port forwarding is useful when you need to securely access multiple resources, like email or work databases, while traveling and using public Wi-Fi.\n\nSSH port forwarding creates a secure tunnel between a local and a remote machine. This allows data to travel securely over an encrypted SSH connection. Once the SSH tunnel is established, the SSH client listens on a specified local port. It then forwards any traffic arriving at that port through the connection to the corresponding remote port.\n\nThis process makes the remote service accessible as if running on a local machine without exposing it to the internet. The SSH client and server manage data encryption and decryption to keep all transmitted information confidential.\n\nNetwork traffic is directed to a specific port on the target computer. When that computer has an open port, it can receive data on that port. To avoid exposing your computer to the internet with open ports, your router acts as the primary defense against various probes and attacks.\n\nPort forwarding allows legitimate traffic to pass through to your network by specifying rules on the router, such as the IP address and port. This directs data packets to the correct machine waiting for an SSH connection, ensuring secure access to remote services.\n\nSSH port forwarding is a popular method for securely accessing remote services and networks. The key benefits of SSH port forwarding are:\n• Enhanced security. Utilizes strong SSH keys and encryption to authenticate users and protect data, preventing unauthorized access and eavesdropping.\n• Data confidentiality. Encrypts data in transit and ensures that sensitive information is secure and inaccessible to potential attackers.\n• Access control. Allows secure access to remote services and networks without exposing them directly to the internet.\n• Bypassing of network restrictions. Enables users to bypass firewalls and network restrictions by tunneling through an encrypted SSH connection.\n• Ease of use. Simple command-line syntax and user-friendly programs make setting up and managing SSH tunnels straightforward for beginners and experienced users.\n\nWhile SSH port forwarding provides significant security benefits, it also comes with some drawbacks:\n• Performance bottlenecks. Since all data is routed through the SSH tunnel, it can slow down network performance and potentially create congestion.\n• Complex management. Managing multiple SSH tunnels can be complex, especially in environments with many ports or services requiring forwarding.\n• Security risks. Improperly configured or unsecured tunnels can expose systems to unauthorized access and potential data breaches.\n• Single point of failure. If the SSH server or connection fails, all forwarded services through that tunnel become inaccessible.\n\nHow to Set up Local Port Forwarding\n\nCritical network resources do not generally allow remote SSH access, which is a severe limitation in a modern distributed environment. Organizations usually solve this issue by setting up an intermediary SSH 'jump' server to accept remote SSH connections.\n\nYour local SSH client establishes a connection with the remote SSH server. The connection is then forwarded to a resource within the trusted internal network. SSH connections are established, and security efforts can concentrate on the intermediary SSH server rather than individual resources in a network.\n\nTo use SSH tunneling in Linux, you must provide your client with the source and destination port numbers, as well as the location of the destination server. The location can either be an IP address or a hostname.\n\nThe basic syntax for a local port forward is:\n• - Starts the SSH client program on the local machine and establishes a secure connection to the remote SSH server.\n• - The local port on the local client is being forwarded to the port of the destination remote server. Replace with your values.\n• - This syntax element represents the hostname or IP address of the remote SSH server.\n\nA practical example of an SSH port forwarding command is:\n\nIn the example above, all traffic sent to port on your local host is being forwarded to port on the remote server located at .\n\nPuTTY is a user-friendly SSH client for Windows. Configure local SSH tunneling by following these steps when you start the PuTTY application:\n\n1. Enter the hostname or IP address and port number of the destination SSH server in the Sessions screen. For example, [email protected] and port number 22.\n\n2. Use the Category list on the left to navigate to Connection > SSH > Tunnels.\n\n3. Select Local to define the type of SSH port forward.\n\n4. Enter your local port number in the Source port field.\n\n5. Type the destination address and port number in the Destination field. Use the following format:\n\n6. Once you verify that the information you entered is correct, select Add.\n\n7. The parameters for the connection are now all set. The Open option initiates the local SSH port-forward.\n\nHow to Set up Remote Port Forwarding\n\nThe purpose of remote forwarding is to allow a remote server to access resources on your local machine. Remote forwarding represents an inversion of the local forwarding process.\n\nThe basic syntax for a remote port forward command is as follows:\n\nIn the following example, we instruct the remote server to forward any connections directed at port to the local resource listening on port :\n\nUsers with access to the SSH server are now able to access resources on the local machine.\n\nStart the PuTTY application and follow these steps:\n\n1. Specify the IP address and port number of the destination SSH server in the Sessions screen.\n\n2. Use the Category list on the left to navigate to Connection > SSH > Tunnels.\n\n3. Select Remote to define the type of SSH port forward.\n\n4. Enter the remote port number in the Source port field (e.g., ).\n\n5. Type the destination address and port number in the Destination field using the following format:\n\n6. Once you verify that the information you entered is correct, click Add.\n\nIn the example above, users and applications can connect to port on the remote SSH server and then access the local machine using port .\n\nHow To Set up Dynamic Port Forwarding\n\nDynamic port forwarding is less well-known than the previous two options. Most users find it easier to use local port forwarding to achieve similar results. However, dynamic port forwarding can provide more flexibility, as you no longer need to use a predefined remote port and server.\n\nBy using the command and the argument, you can use your SSH client to create a SOCKS proxy on your local machine. The syntax is:\n\nFor example, the following command opens a SOCKS proxy at port on your local machine:\n\nYou now can configure a local resource, like a browser, to use port . All traffic originating from that resource is directed through the SSH connections established for the defined port.\n\nFollow the steps below to set up dynamic port forwarding with PuTTY on Windows:\n\n1. Enter the hostname or IP address and port number of the destination SSH server on the main PuTTY Sessions screen.\n\n2. Use the Category list to navigate to Connection > SSH > Tunnels.\n\n3. Select Dynamic to define the type of SSH port forward.\n\n4. Enter the dynamic port number in the Source port field (e.g., ). The SOCKS proxy server on your local machine will use this port to dynamically forward traffic.\n\n5. Once you are sure that the information you entered is correct, click Add.\n\n6. The parameters for the connection are now all set. Click Open to start dynamic SSH port-forwarding.\n\nFor dynamic forwarding to work, configure and enable each application for the SOCKS proxy server.\n\nYou may encounter some issues when setting up SSH forwarding. This section explores the most common issues and provides possible solutions.\n\nIf you are trying to set up remote port forwarding and get an empty response message as the one below:\n\nThe solution is to use instead of . Port forwarding does not work well on ipv6 in Windows, and using 127.0.0.1 forces it to use ipv4 instead.\n\nIf communication between your local machine and remote server breaks down, you might get an SSH Connection refused error. There are multiple possible causes of this error, including wrong credentials, incorrect firewall settings, or a closed SSH port.\n\nRead our tutorial on how to fix the SSH connection refused error to find the solution for the causes mentioned above and more.\n\nPort Already in Use\n\nIf you are trying to bind a local port, which is already in use by another application, the program throws the following error:\n\nThe solution is to choose a different local port for forwarding or to check which process is using the port with the following syntax:\n\nAfter you find which application is using the port, you can kill that process to free the port for SSH port forwarding. However, be careful when terminating the process, as it can solve immediate issues but might lead to other problems, especially if the process is critical.\n\nThis tutorial explained how SSH port forwarding works and presented three different types of SSH port forwarding with the commands you need to use. SSH port forwarding is a powerful feature that must be carefully administered. High-security standards should be maintained throughout the entire process.\n\nNext, learn to generate SSH keys in Windows or Ubuntu."
    },
    {
        "link": "https://asd.gsfc.nasa.gov/David.Friedlander/my_docs/ssh_port_forward.html",
        "document": "If you wish to be able to view web pages that are not normally visible outside ASD, you can still do this using the \"port forwarding\" capability of Secure Shell (SSH), also known as SSH tunneling.\n\nComplete details are available from the \"ssh\" manual page but here is a quick method of doing this from a UNIX/Linux/Mac OS X machine.\n\nIn order to be able to do this from offsite, you will need an RSA SecurID token or PIV badge and an account on the Code 600 gs600-bastion1 (or -bastion2) servers.\n\nWhat you will do is to specify that some port (which you choose) on your local machine will map into a specific port on a specific remote machine (machine \"A\") and that this forwarding will take place via some other machine (\"B\", probably gs600-bastion1 or gs600-bastion2) to which you can log in.\n\nThat is, you will need to set up the mapping of localhost:localport to remotehost:remoteport on the ssh command line. Since the localhost part is assumed (by ssh), it is dropped, and one simply has to specify the remaining three parts. You already know the last two of them and get to make up the first one (localport) !\n\nThus, the syntax is:\n\nor, if your username is the same on both computers, you can do simply:\n\nThe tunnel you create isn't useful until you reference it. How you reference it depends on the protocol and what you are trying to do. Let's look at some examples.\n\nIn a shell window (xterm or Terminal, etc), type:\n• 4567 is some made-up number for local access (Choose at least a 4-digit number, greater than 1024)\n• \"astrophysics\" is a web server you wish to access.\n• 80 is the standard port for a web server (HTTP).\n• \"gs600-bastion1\" is a machine to which you can log in via ssh.\n\nIf you have a different username on the remote machine, you will need to specify that, e.g.,\n\nThen, in a browser on your local computer, type in the URL window:ore.g.,\n\nYou literally type the word \" \"; that's not a reference to something else.\n\nFor some strange reason, sometimes one has to type this URL two times. (I have seen it fail the first time.)\n• To use Secure Copy, the syntax is as follows, as typed on your local computer: \n\n /local/path/to/file \n\nA specific example might be: \n\nCopy the file from my home directory on asdwebdev to the current directory on my local computer:\n• To set up a Secure FTP session, the syntax is: \n\n \n\nor one can specify a directory to start in: \n\n \n\nA specific example might be:\n• To set up an SSHFS session, the syntax is: \n\n \n\nA specific example might be: \n\n \n\nFor much more information about SSHFS, please read the ASD SSHFS guide. (This is a Mac OS X-oriented document but the command structure is the same for Linux.)\n\nSome common port numbers you might find useful\n\nIn a shell window (xterm or Terminal, etc), type:\n\nIt is also possible to stack up multiple tunnels on a single ssh command line, simply by using multiple \" \" entries (space separated, of course).\n\nCan you do this on MS Windows?\n\nHere is a complicated example used by Mike Arida, setting up tunnels of different types to different machines:\n\nIt is also possible to do this with the freeware Windows PuTTY SSH client (available here). You will have to do the same thing of defining local & remote ports and the remote host. The PuTTY web site has its own documentation on port forwarding and the Tunnels panel. ."
    },
    {
        "link": "https://reddit.com/r/linux/comments/zy6s0f/a_visual_guide_to_ssh_tunnels_local_and_remote",
        "document": "Welcome to /r/Linux! This is a community for sharing news about Linux, interesting developments and press. If you're looking for tech support, /r/Linux4Noobs and /r/linuxquestions are friendly communities that can help you. Please also check out: https://lemmy.ml/c/linux and Kbin.social/m/Linux Please refrain from posting help requests here, cheers."
    },
    {
        "link": "https://stackoverflow.com/questions/18373366/mysql-connection-over-ssh-tunnel-how-to-specify-other-mysql-server",
        "document": "I've got ~50 databases all set up at different host names, with the requirement that I connect to them through an SSH tunnel.\n\nI have managed to create the tunnel using autossh (web server running Debian), but I can't seem to figure out how to connect to a specific MySQL hostname \"beyond\" the SSH tunnel.\n\nTyping confirms that the tunnel is working (sends port 3307 to ssh.example.com port 3306)\n\nSo when I try I get Connection refused. Not too weird since it's not an MySQL server.\n\nMy question to you guys:\n\nHow do I specify the host AFTER creating the SSH tunnel? I've tried searching everywhere but can't seem to figure it out."
    },
    {
        "link": "https://stackoverflow.com/questions/14606660/connect-to-mysql-via-ssh-tunnel-to-localhost",
        "document": "I want to connect to remote MySQL via ssh tunnel with user that has 'localhost' access.\n\nI use this to make a tunnel:\n\nand this to connect to host:\n\nThe error i get is:\n\nThe problem is that user 'user'@'remote-host' (or 'user'@'%') does not exist, only 'user'@'localhost' does.\n\nIs there a way to force remote host, without server-side modifications into thinking that i come from localhost? That's the only reason I would do the connection via ssh tunnel anyway.\n\nIf I want to connect with this command:\n\nOn remote server in /etc/hosts the values are like this:"
    },
    {
        "link": "https://help.krystal.io/cpanel-advanced-topics/how-to-connect-to-a-my-sql-database-using-an-ssh-tunnel",
        "document": "How to connect to a MySQL database using an SSH Tunnel\n\nConnections to MySQL servers over port 3306 are not encrypted, and so this presents a real security risk. Indeed, some credit card processors will not provide user accounts to websites that are hosted on servers that allow unencrypted connections on port 3306.\n\nThis article will describe the steps required in order to connect securely to your web hosting account's MySQL server using an SSH Tunnel. This is an advanced topic and assumes that you have some experience of connecting remotely to MySQL servers, TCP/IP, and SSH.\n\nIf you are using Windows, then you will need to install PuTTY - read the article How to install PuTTY for SSH shell access.\n\nIf you are using a Mac, don't worry - you already have everything you need.\n\nWhat we are trying to achieve\n\nSSH (Secure SHell) is a secure method of connecting to another computer. You may know that SSH allows secure terminal sessions and secure FTP (SFTP) connections, but it can also be used in other ways. An SSH connection can also serve as a secure Tunnel, through which other data can be securely exchanged.\n\nLike any tunnel, it has two ends. In the case of an SSH Tunnel we specify a Port at each end. In the case of MySQL the port at the server end would be 3306 (the standard port for MySQL). At the client end, it could be anything you like, but in this article we will stick with 3306 also (if you are running another MySQL server locally, you might want to change the port to another number).\n\nOpen the Terminal application (using Spotlight, or go find it in Applications/Utilities). Then run the following command.\n• servername = substitute your own domain name, or home server name\n\nFor example, if your Home Server was and your cPanel username was then the command would be\n\nWhen you hit return, you will be asked for your password (unless you have setup SSH keys on your Mac - link opens in a new window) - just enter your password and hit return - the terminal won't do anything else, so just minimise/hide the window.\n\nThat's it! You can now connect to MySQL from your local computer using 127.0.0.1 (some GUIs will connect using localhost or 127.0.0.1) as the server name on port 3306 and you will be connected securely (via the tunnel, to the server). If you wanted the connection to be permanent until you next log out, then add the -f switch:\n\nNote : It is important that you do not have an existing instance of MySQL listening on port 3306. Either stop it before running the tunnel above, or, change your connection command to something like:\n\nThis will present the local end of the tunnel on your computer on port 3333 instead.\n\nYou'll need to use PuTTY to create the SSH tunnel and we have separate guide that details how to Install and setup PuTTY.\n\nOnce you've got PuTTY installed come back here to continue the configuration for remote MySQL access.\n• Open PuTTY and enter your domain name, Home Server name, or server's IP address in the Host Name (or IP address) field. Set the Port to 722.\n• Click on the SSH configuration category. Tick the Don't start a shell or command at all check box (you can skip this step if you also want access to the server's command line).\n• Click the Tunnels category.\n\nEnter 3306 in the Source port.\n\nEnter localhost:3306 in the Destination.\n\nClick the Add button. It should end up looking like this:\n• Now scroll back up to the Session options again.\n\nEnter a name for your new connection in the Saved Sessions field.\n\nClick the Save button.\n\nClick the Open button to start the Tunnel! You will now see the Terminal window open and you will be asked to enter your password (unless you have setup SSH keys on Windows - covered in our Installing PuTTY guide). Just enter your account password and then the terminal will just sit there. You can minimise the window until you want to close the connection.\n\nThat's it! You can now connect to MySQL from your local computer using localhost as the server name on port 3306 and you will be connected securely (via the tunnel, to the remote server)."
    },
    {
        "link": "https://community.powerbi.com/t5/Desktop/Connect-to-MySQL-Database-with-Hostname-via-SSH-Tunnel/td-p/3111189",
        "document": "I am facing the following issue: I would like to connect to a mysql database with a hostname using an SSH tunnel. The SSH tunnel is already configured using Putty. I have the server name, host name and port, database name, username, and password. Where do I enter information for the hostname and port number?\n\nI've gone round and round in circles with this so any help would be appreciated!"
    },
    {
        "link": "https://linuxize.com/post/mysql-ssh-tunnel",
        "document": "By default, the MySQL server listens only on localhost, which means it can be accessed only by applications running on the same host.\n\nHowever, in some situations, you might want to connect to the server from remote locations. One option would be to configure the MySQL server to allow remote connections , but that requires administrative privileges, and it may cause security risks.\n\nA more secure alternative would be to create an SSH tunnel from the local system to the server. SSH tunneling is a method of creating an encrypted SSH connection between a client and a server machine through which services ports can be relayed.\n\nIn this guide, we will explain how to create an SSH tunnel and connect to the MySQL server from remote clients. The same instructions apply for MariaDB.\n• SSH access to the system on which the MySQL server runs.\n\nCreate an SSH Tunnel on Linux and macOS #\n\nThe client is preinstalled on most Linux and Unix-based systems.\n\nIf you are using Linux or macOS as your operating system, you can create an SSH tunnel using the following command:\n\nThe options used are as follows:\n• - Creates a local port forwarding. The local port ( ), the destination IP ( ) and the remote port ( ) are separated with a colon ( ).\n• To run the command in the background, use the option.\n• If the SSH server is listening on a port other than 22 (the default) specify the port with the option.\n\nOnce you run the command, you’ll be prompted to enter your SSH user password. After entering it, you will be logged in to the server, and the SSH tunnel will be established. It is a good idea to set up an SSH key-based authentication and connect to the server without entering a password.\n\nNow you can point your local machine MySQL client to enter the remote database login credentials and access the MySQL server.\n\nFor example, to connect to the MySQL server using the command line client you would issue:\n\nWhere is the remote MySQL user having privileges to access the database.\n\nTo terminate the SSH tunnel type in the console where the ssh client is running.\n\nWindows users will first need to download and install an SSH client program. The most popular Windows SSH client is PuTTY. You can download PuTTY here .\n\nPerform the following steps to create an SSH tunnel to the MySQL server with PuTTY:\n• None Launch Putty and enter the IP Address of the server in the field:\n• None Under the menu, expand and select . Enter in the field, and in the field: Click on the button to add the tunnel.\n• None Go back to the page to save the settings so that you do not need to enter them again. Enter the session name in the field and click on the button.\n• None Select the saved session and log in to the remote server by clicking on the button. A new window asking for your username and password will show up. Once you enter the username and password, you will be logged in to the server, and the SSH tunnel will be created.\n\nSetting up public key authentication will allow you to connect to the server without entering a password.\n\nYou can now connect to the remote database using your local MySQL client.\n\nFor example, if you are using HeidiSQL enter in the field and the MySQL user and password in the and fields:\n\nMySQL, the most popular open-source database server, listens for incoming connections only on localhost. Creating an SSH tunnel allows you to securely connect to the remote MySQL server from your local client.\n\nIf you have questions, feel free to leave a comment below."
    }
]