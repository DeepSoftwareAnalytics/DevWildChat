[
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/pki/export-pfxcertificate?view=windowsserver2025-ps",
        "document": "The cmdlet exports a certificate or a PFXData object to a Personal Information Exchange (PFX) file. By default, extended properties and the entire chain are exported. Delegation may be required when using this cmdlet with Windows PowerShell remoting and changing user configuration.\n\nThis example exports all certificates under the My store for the machine account into one file named . In order for this cmdlet to succeed, all keys need to be exportable.\n\nThis example exports a certificate from the local machine store. Both user accounts, and , can access this PFX with no password. A Windows Server 2012 or later domain controller is required for key distribution.\n\nThis example exports a certificate from the local machine store. Both user accounts, and , can access this PFX file with no password. For everyone else, they need to use 1234 as a password. A Windows Server 2012 or later domain controller is required for key distribution.\n\nSpecifies the algorithm for encrypting private keys within the PFX file. If this parameter is not specified, the default is . The acceptable values for this parameter are:\n• : Private keys will be encrypted in the PFX file using Triple DES encryption.\n• : Private keys will be encrypted in the PFX file using AES-256 encryption.\n\nSpecifies that the provided PFX file should be overwritten, even if the Read-only attribute is set on the file. By default, this cmdlet overwrites existing PFX files without warning, unless the Read-only or hidden attribute is set or the NoClobber parameter is used in the cmdlet.\n\nSpecifies that if the PFX file already exists, it should not be overwritten. This parameter takes precedence over the Force parameter, which permits this cmdlet to overwrite a PFX file even if it has the Read-only attribute set.\n\nSpecifies whether the extended properties for a certificate are exported. If this parameter is specified, then extended properties are not included with the export. By default, all extended properties are included in the exported file.\n\nSpecifies the password used to protect the exported PFX file. The password should be in the form of secure string. Either the ProtectTo or this parameter must be specified, or an error will be displayed.\n\nSpecifies an array of strings for the username or group name that can access the private key of PFX file without any password. This requires a Windows Server 2012 or later domain controller. Either the Password or this parameter must be specified, or an error will be displayed."
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/pki/export-certificate?view=windowsserver2025-ps",
        "document": "The cmdlet exports a certificate from a certificate store to a file. The private key is not included in the export. If more than one certificate is being exported, then the default file format is . Otherwise, the default format is . Use the Type parameter to change the file format.\n\nThis example exports a certificate to the file system as a Microsoft serialized certificate store without its private key.\n\nThis example exports a certificate to the file system as a DER-encoded file without its private key.\n\nThis example exports a certificate to the file system as a PKCS#7-formatted file without its private key.\n\nThis example exports all certificates under the store into a Microsoft serialized certificate store .\n\nSpecifies one or more certificates to be exported to a file. A single certificate object, an array of certificate objects, or a path to one or more certificates in a certificate store can be specified.\n\nSpecifies that the exported certificate file will overwrite an existing certificate file, even if it has the Read-only attribute set. The NoClobber parameter takes precedence over this parameter when both are used.\n\nPrevents an exported certificate file from overwriting an existing certificate file. This parameter takes precedence over the Force parameter, which permits this cmdlet to overwrite an existing certificate file, even if it has the Read-only attribute set.\n\nSpecifies the type of output file for the certificate export as follows.\n• None : A Microsoft serialized certificate store ( ) file format which can contain one or more certificates. This is the default value for multiple certificates.\n• None : A file format which contains a single DER-encoded certificate. This is the default value for one certificate.\n• None : A PKCS#7 file format which can contain one or more certificates."
    },
    {
        "link": "https://community.spiceworks.com/t/help-exporting-importing-certs-via-powershell/786356",
        "document": "We’re in the middle of a huge tech refresh. All of our on-prem services are not only being refreshed, but they’re being moved to different datacenters. All of our web hosting, SFTP, eFax, SharePoint farms, file servers are involved. I just tried to help someone export a few hundred SSL certs, and I couldn’t do it. PowerShell is telling me the Export-PFxCertificate cmdlet is in the PKI module, but it can’t be loaded. The source servers are mainly 2008R2, with the WMF 5.1 update, so PowerShell 5.1 is installed (and verified). The same script on a 2012R2 machine works like a champ. Export-PfxCertificate : The 'Export-PfxCertificate' command was found in the module 'PKI', but the module could not be loaded. For more information, run 'Import-Module PKI'. At line:5 char:3 + Export-PfxCertificate -Cert $cert -FilePath d:\n\nsi\\mikes\\certstuff\\ ... + ~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : ObjectNotFound: (Export-PfxCertificate:String) [], CommandNotFoundException + FullyQualifiedErrorId : CouldNotAutoloadMatchingModule PS C:\\> $PSVersionTable.PSVersion Major Minor Build Revision ----- ----- ----- -------- 5 1 14409 1018 The script is simple enough, and as I said it works like a champ on my laptop and a 2012R2 server.\n\nWhat happens if you take the advice in that error message ane imported the module manually? FWIW, this works fine here in Win10 Also, please read this article and act on it: Windows Server documentation | Microsoft Learn\n\nAccording the URL below Windows 8/ Windows Server 2012 the PKI module is installed with AD CS Remote Server Administration Tools. So that is the reason you are seeing these errors with Windows 2008r2. You could see if the module at the link below fits your needs. I was trying to stick with the Microsoft-supplied modules. I only ran into one other reference to this particular module (PSPKI), and the post I saw was complaining the commands were different and gave different results. I admit, I didn’t dig into it myself. I may have to, apparently.\n\nUnfortunately, the PSPKI module doesn’t have the functionality I’m looking for. I need Export-PFxCertificate and Import-PFxCertificate equivalents. I do see an import for a LostCertificate, but there are no export commands. We realize that 2008 is a dead OS, and we’re in the process of upgrading/migrating. You’re not going to get any arguments from me if you say we should have started two years ago (at least), but the bigger a company is, the harder it is to get things moving it seems, and this is an extremely large international corporation with a presence in just about every country in the world.\n\nWhat happens if you take the advice in that error message ane imported the module manually? If I import it manually, I get the same error message as above. What happens if you try to import the module without re-running the command. Does the module run correctly? Does the import work? If so, try issuing Get-Command -Module PKI As I say,I have that module here and it does appear to work as does that command.\n\nWhat happens if you try to import the module without re-running the command. Does the module run correctly? Does the import work? If so, try issuing Get-Command -Module PKI As I say,I have that module here and it does appear to work as does that command. I get the error as soon as I try to import it. I have the exact same module on 2012R2 servers, and it runs there no problem. It’s just on the 2008R2 machines I’m seeing the problem.\n\nPlease try importing the module with the -verbose switch, then post the actual output. You could also try to copy the working module to a folder on the affected host and loading the module directly from that folder.\n\nPlease try importing the module with the -verbose switch, then post the actual output. You could also try to copy the working module to a folder on the affected host and loading the module directly from that folder. PS C:\\Users\\Schmi5j> Import-Module PKI -Verbose VERBOSE: Loading module from path 'C:\\Users\\Schmi5j\\Documents\\WindowsPowerShell\\Modules\\PKI\\PKI.psd1'. VERBOSE: Loading 'TypesToProcess' from path 'C:\\Users\\Schmi5j\\Documents\\WindowsPowerShell\\Modules\\PKI\\pki.types.ps1xml'. Import-Module : The module to process 'Microsoft.CertificateServices.PKIClient.Cmdlets', listed in field 'NestedModules' of module manifest 'C:\\Users\\Schmi5j\\Documents\\WindowsPowerShell\\Modules\\PKI\\PKI.psd1' was not processed because no valid module was found in any module directory. At line:1 char:1 + Import-Module PKI -Verbose + ~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : ResourceUnavailable: (PKI:String) [Import-Module], PSInvalidOperationException + FullyQualifiedErrorId : Modules_ModuleFileNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand As far as copying a working module to the 2008R2 servers, I’ve already done that, with the same result."
    },
    {
        "link": "https://medium.com/thesecmaster/how-to-export-a-certificate-from-powershell-a826cce955c5",
        "document": "How to Export a Certificate From PowerShell?\n\nThere are a couple of ways to export a certificate from a Windows server. The most common way is to export a certificate from the ‘MMC’ console. If you want to know how to export a certificate from MMC, you can see this post. However, we are going to show you an alternate way of exporting a certificate from PowerShell commands. In this post, we have covered how to export a certificate from PowerShell in CER, PFX, P7B, and SST formats.\n\n· How to Export a Certificate From PowerShell?\n\n· How to Export a Certificate From PowerShell in PFX format?\n\n· How to Export a Certificate From PowerShell in CER format?\n\n· How to Export a Certificate From PowerShell in P7B format?\n\n· How to Export a Certificate From PowerShell in SST format?\n\n· How to Get the Thumbprint of a certificate?\n\n· Command Line:\n\n· GUI:\n\nHow to Export a Certificate From PowerShell in PFX format?\n\nYou should bear in mind that PFX certificates are always encrypted since they have a private key in the archive. It is mandatory to set a password to export a certificate in PFX format. Syntax of the command to export a certificate in PFX is:\n\nIn this example, the first line of command signifies setting a password “1234” as a string text. Execute this command in Windows PowerShell to export a certificate with a Private Key which includes the chain of Intermediate and root CA certificate\n\nHow to Export a Certificate From PowerShell in CER format?\n\nIt is simple to export a certificate from PowerShell in CER format comparatively exporting the same certificate in PFX format. In this export, it is good to have thumbprint of the certificate. In case if you don’t have the thumbprint, you can use any unique properties of a certificate to export. Syntax looks like this:\n\nIn this sample, the certificate has been exported using FriendlyName as a unique property instead of the Thumbprint.\n\nHow to Export a Certificate From PowerShell in P7B format?\n\nP7B is a certificate archive with chain certificates. The command and the procedure to export P7B certificate is more or less similar to CER certificate. You need to change the certificate type during the export. That’s all.\n\nHow to Export a Certificate From PowerShell in SST format?\n\nIt is similar to export a certificate in SST as CER. You can see the syntax and an example here below.\n\nHow to Get the Thumbprint of a certificate?\n\nThumbprint plays a vital role in security. It is the hash or the signature of the certificate. The procedure is simple to get the thumbprint of a certificate. First, we will show you how to get the thumbprint of a certificate using the PowerShell command then we will show you the GUI method.\n\nIssue this command to retrieve the thumbprint of your certificate:\n\nIssue this command to retrieve the thumbprint of all the certificates in the personal store:\n\nAs a bonus tip, we will show you how and where to find the thumbprint of a certificate. The procedure is simple. Open the certificate in Windows, go to Details tab then select the Thumbprint attribute. Or you can use any CLI tools like OpenSSL to view the certificate in CLI.\n• Open IIS website in any browser –> Click on ‘View Certificate’\n\n2. In certificate window –> click on ‘Details‘ tab –> select ‘Thumbprint‘ –> Thumbprint of a given certificate is\n\nWe hope this post will show you how to export a certificate from PowerShell in CER, PFX, P7B, and SST formats. Please share this post and help to secure the digital world. Visit our social media page on Facebook, LinkedIn, Twitter, Telegram, Tumblr, & Medium and subscribe to receive updates like this."
    },
    {
        "link": "https://stackoverflow.com/questions/48915305/export-pfxcertificate-cannot-export-non-exportable-private-key",
        "document": "I know this is an older question, but I wanted to post my solution as I was having this same problem. I too was getting the dreaded Export-PfxCertificate : Cannot export non-exportable private key error while trying to export my PFX file. The problem started after loading my code-signing certificate on my Windows machine. When I went to export it, the export to PFX option was grayed out without further explanation. I then followed many of the instructions listed here, including Powershell Export-PfxCertificate. None of these worked. I finally went back to my Certificate provider GoDaddy and they informed me that in my Original Certificate Signing Request (CSR) I did not check the box Make Private Key Exportable. GoDaddy graciously, and without cost, allowed me to submit a new CSR (with that option checked,) to 'Rekey' my existing certificate. Within a couple of hours, my new certificate was issued. I installed it on my machine and was able to export directly from Windows MMC (no need to PowerShell.) I've included this screenshot of the box that must be checked when creating your CSR (may look different on different platforms.)"
    },
    {
        "link": "https://ssl.com/how-to/export-certificates-private-key-from-pkcs12-file-with-openssl",
        "document": "Note: This article does not apply to SSL.com code signing and document signing certificates. The private keys of these types of certificates cannot be exported and they cannot be generated as .pfx files. SSL.com code signing and document signing certificates and their private keys can only be generated and stored in the This article does not apply to SSL.com code signing and document signing certificates. The private keys of these types of certificates cannot be exported and they cannot be generated as .pfx files. SSL.com code signing and document signing certificates and their private keys can only be generated and stored in the eSigner cloud signing environment , a Yubikey device, or a supported Cloud HSM\n\nThis how-to will walk you through extracting information from a PKCS#12 file with OpenSSL. PKCS#12 (also known as PKCS12 or PFX) is a binary format for storing a certificate chain and private key in a single, encryptable file. PKCS#12 files are commonly used to import and export certificates and private keys on Windows and macOS computers, and usually have the filename extensions or .\n\nFor more helpful how-tos and the latest cybersecurity news, sign up for SSL.com’s newsletter here:\n\nWhat is OpenSSL?\n\n OpenSSL is a very useful open-source command-line toolkit for working with X.509 certificates, certificate signing requests (CSRs), and cryptographic keys. If you are using a UNIX variant like Linux or macOS, OpenSSL is probably already installed on your computer. If you would like to use OpenSSL on Windows, you can enable Windows 10’s Linux subsystem or install Cygwin. You can also easily create a PKCS#12 file with openSSL.\n\nIn all of the examples shown below, substitute the names of the files you are actually working with for , , and .\n\nTo dump all of the information in a PKCS#12 file to the screen in PEM format, use this command:\n\nYou will then be prompted for the PKCS#12 file’s password:\n\nType the password entered when creating the PKCS#12 file and press . OpenSSL will output any certificates and private keys in the file to the screen:\n\nIf you would like to encrypt the private key and protect it with a password before output, simply omit the flag from the command:\n\nIn this case, you will be prompted to enter and verify a new password after OpenSSL outputs any certificates, and the private key will be encrypted (note that the text of the key begins with ):\n\nIf you only want to output the private key, add to the command:\n\nIf you only need the certificates, use (and since we aren’t concerned with the private key we can also safely omit ):\n\nYou can export the certificates and private key from a PKCS#12 file and save them in PEM format to a new file by specifying an output filename:\n\nAgain, you will be prompted for the PKCS#12 file’s password. As before, you can encrypt the private key by removing the flag from the command and/or add or to output only the private key or certificates. So, to generate a private key file, we can use this command:\n\nAnd to create a file including only the certificates, use this:\n\nThe examples above all output the private key in OpenSSL’s default PKCS#8 format. If you know you need PKCS#1 instead, you can pipe the output of the OpenSSL’s PKCS#12 utility to its RSA or EC utility depending on the key type. Both of the commands below will output a key file in PKCS#1 format:"
    },
    {
        "link": "https://stackoverflow.com/questions/16397858/how-to-extract-private-key-from-pfx-file-using-openssl",
        "document": "I was looking to extract a private key for an SSL certificate using PowerShell.\n\nI googled and tried following openssl command:\n\nBut I have to manually enter the password and I end up with invalid \"RSA PRIVATE KEY\". How do I get the unencrypted key and pass the password to OpenSSL?"
    },
    {
        "link": "https://netshopisp.medium.com/how-to-extract-certificates-and-private-key-from-pfx-file-729067cbdaa7",
        "document": "PFX (Personal Information Exchange) is a file format used to store cryptographic information in a single file. One type of information held within a PFX file is SSL Certificate chains along with the Private Key.\n\nIn this article we will explain the reasons one may want to extract the certificates from a .PFX file and the exact steps on how to do it using OpenSSL.\n\nExtracting certificates and private keys from a .pfx file can be necessary in various scenarios, particularly when managing SSL/TLS certificates, application deployments, or secure communications.\n\nSome applications or servers require separate files for certificates and private keys instead of a combined .pfx file:\n\nWeb Servers\n\nServers like Apache or Nginx require the private key and certificates to be in PEM format (.key and .crt files).\n\nLoad Balancers\n\nMany load balancers such as HAProxy require the certificate chain (.crt) and private key in specific formats.\n\nMail Servers\n\nEmail software like Zimbra often require separate key and certificate files.\n\nA .pfx file (PKCS#12) is mainly used in Windows systems whereas .pem, .crt and .key are using in Linux. For example, in cases when a wildcard SSL certificate is installed on a Windows Server and then a developer wants to install it in Linux, the certificates must be extracted from the .pfx file prior installing them on a Linux environment (web server, proxy, etc).\n\nExtracting the Private Key from a .PFX is useful in cases of SSL renewal, when one needs to quickly issue a renewed certificate, without going through the hassle of CSR generation.\n\nBest Way to Extract Certificates and Private Key from PFX file\n\nOpenSSL is the utility with which we can extract certifcates and private key from a .pfx file.\n\nIn Linux systems use the following command to install openssl:\n\nIf you are a Windows user, please visit OpenSSL’s Wiki for instructions on how to download and install OpenSSL for Windows.\n\nCase 1: Extract all Certificates and Private Key in Single PEM file\n\nThe following command will extract all certificates (end-entity certificate, intermediate, root certificate s) and private key in a single .pem file.\n\nCase 2: Extract all Certificates and Private Key in Individual Files\n\nIn case you want to have each certificate (end-entity, intermediate, root, private key) in separate files, use the following commands:\n\nExtract the intermediate and root (if any) certificates:\n\nCongratulations! If you followed the above steps you should have successfully extracted your desired certificates and private key from PFX file."
    },
    {
        "link": "https://portal.nutanix.com/kb/6960",
        "document": ""
    },
    {
        "link": "https://support.kaspersky.com/KSMG/2.1/en-US/239064.htm",
        "document": "If the certification authority provided the certificate as a PFX container (PKCS#12 format, file with the PFX or P12 extension), you must extract PEM-encoded certificate and private key files from the container.\n\nYou can extract the certificate and private key files using openssl. To extract the files, you will need to enter the passphrase of the PFX container.\n\nTo extract the private key file, use one of the following commands depending on your openssl version:\n• For openssl versions earlier than 3.0, use the following command:\n• For newer versions of the openssl utility, use the following command:\n\nTo extract the certificate file, use one of the following commands depending on your openssl version:\n• For openssl versions earlier than 3.0, use the following command:\n• For openssl version 3.0 and later, use the following command:\n\nYou will get the following files:\n• key.pem is the PEM-encoded RSA private key file (without a passphrase).\n\nYou can use the private key and certificate files thus obtained to replace the web interface certificate."
    }
]