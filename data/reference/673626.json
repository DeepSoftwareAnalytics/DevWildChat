[
    {
        "link": "https://wiki.libsdl.org/SDL2/SDL_CreateTexture",
        "document": ""
    },
    {
        "link": "https://wiki.libsdl.org/SDL2/SDL_RenderCopy",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/22886500/how-to-render-text-in-sdl2",
        "document": "If you're trying to do this from Powershell on Windows, you'll soon find out that this is a real PITA. Until now...\n\nI've just spent the hours to debug all the details to get this to work, when you want to insist using and to render a native Windows window with text.\n\nThere are 3 things you need to install; . Then you have to ensure your program will find your libraries, headers and fonts. This is basically summarized in the following program here:\n\nThe result of running the code above is this:\n\nHow to get to this point?\n• None If you didn't add LLVM to your Windows PATH, then at least add it temporarily and manually.\n• None Install SDL2 for Windows: Download and extract the SDL2 & SDL2_ttf runtime binaries (*.dll) and header libraries (found in [2,3]) and put them into separate SDL folder(s) in the same directory as your C++ file. You should now have something like:\n• Copy all the relevant downloaded DLL's into the , unless you know how to make clang++.exe able to find them. (I wasn't able...)\n• None Download the above SDL2 \"Hello World\" Windows program.\n• Use the Minimal PoC code from here.\n\nThe order of how the libraries are placed, seem to have an importance. Make sure it's like above.\n\nAlso, notice the two different options:\n\nTo see other linker optins, use:\n\nYou are now good to go!"
    },
    {
        "link": "https://lazyfoo.net/tutorials/SDL/07_texture_loading_and_rendering/index.php",
        "document": "A major new addition to SDL 2 is the texture rendering API. This gives you fast, flexible hardware based rendering. In this tutorial we'll be using this new rendering technique. A major new addition to SDL 2 is the texture rendering API. This gives you fast, flexible hardware based rendering. In this tutorial we'll be using this new rendering technique.\n\n\n\n \n\n As you can also see we have a new image loading routine with loadTexture and a globally declared texture we're going to load. Textures in SDL have their own data type intuitively called an SDL_Texture . When we deal with SDL textures you need an SDL_Renderer to render it to the screen which is why we declare a global renderer named \"gRenderer\".As you can also see we have a new image loading routine with loadTexture and a globally declared texture we're going to load.\n\n\n\n \n\n After creating the renderer, we want to initialize the rendering color using After we create our window, we have to create a renderer for our window so we can render textures on it. Fortunately this is easily done with a call to SDL_CreateRenderer After creating the renderer, we want to initialize the rendering color using SDL_SetRenderDrawColor . This controls what color is used for various rendering operations.\n\nOur texture loading function looks largely the same as before only now instead of converting the loaded surface to the display format, we create a texture from the loaded surface using SDL_CreateTextureFromSurface . Like before, this function creates a new texture from an existing surface which means like before we have to free the loaded surface and then return the loaded texture.\n\n\n\n \n\n In our clean up function, we have to remember to deallocate our textures using Since texture loading is abstracted with our image loading function, the loadMedia() function works pretty much the same as before.In our clean up function, we have to remember to deallocate our textures using SDL_DestroyTexture\n\n\n\n \n\n With the screen cleared, we render the texture with \n\n \n\n Now, there is a new API call called IMG_LoadTexture. It's not in the official documentation as of this writing but you can find it in the SDL_image header files. It allows you to load a texture without having to create a temporary surface. The reason I haven't gone back and updated the tutorial to use this method is because I don't want to go back an update 40+ tutorials. Even though it is undocumented, it works just fine.\n\n \n\n I recommend giving it a try. Also, get used to having to deal with undocumented code because often times in the professional game development world, documentation is a luxury. In the main loop after the event loop, we call SDL_RenderClear . This function fills the screen with the color that was last set with SDL_SetRenderDrawColor.With the screen cleared, we render the texture with SDL_RenderCopy . With the texture rendered, we still have to update the screen, but since we're not using SDL_Surfaces to render we can't use SDL_UpdateWindowSurface. Instead we have to use SDL_RenderPresent Now, there is a new API call called IMG_LoadTexture. It's not in the official documentation as of this writing but you can find it in the SDL_image header files. It allows you to load a texture without having to create a temporary surface. The reason I haven't gone back and updated the tutorial to use this method is because I don't want to go back an update 40+ tutorials. Even though it is undocumented, it works just fine.I recommend giving it a try. Also, get used to having to deal with undocumented code because often times in the professional game development world, documentation is a luxury."
    },
    {
        "link": "https://stackoverflow.com/questions/48711416/using-sdl-texture-on-several-sdl-renderers",
        "document": "I'm trying to use the same SDL_Texture* on two separate SDL_Renderer*, but apparently SDL_Texture seems to be \"tied\" to a SDL_Renderer*.\n\n Is there a way to make the second renderer able to use the texture created through SDL_CreateTextureFromSurface using the first renderer? If i try doing so by just copying the SDL_Texture* pointer and using SDL_RenderCopy with the second renderer, the screen stays black.\n\nIf more details are needed:\n\n I'm using the SDL2 library in Virtual Studio. I have two separate SDL_Window's, each with one SDL_Renderer. The window containing the first renderer is permanently existen through the whole program, while the second window is only created, when needed and destroyed shortly after."
    },
    {
        "link": "https://stackoverflow.com/questions/70817740/how-to-load-texture-from-png-in-sdl2-useing-sdl-image-h",
        "document": "I am trying to load an image into a texture using SDL_image.h however whenever I try to run the line of code that uses IMG_Load(\"./assets/snow.png) it just crashes the program without any error messages other than exit code -1073741515. My CMake file and parts of my CPP file are below. I think I might be missing a dll but cannot find one that I don't already have that I would need.\n\nHere is my cmake file"
    },
    {
        "link": "https://stackoverflow.com/questions/10329786/opengl-texture-loading-with-sdl",
        "document": "I have started learning OpenGL using NeHe tutorials for a little while.This is the code for lesson 6.It should load a bmp image and use it as texture for the cube I'm drawing.But It doesn't work properly and the cube remains white at all.The function for loading the image is \"loadGLTextures\".Can anyone help? My image bit depth is 24.I'm working with Visual Studio 2010.\n\nThis is the image I'm trying to load."
    },
    {
        "link": "https://wiki.libsdl.org/SDL2_image/IMG_LoadTexture",
        "document": "Load an image from a filesystem path into a GPU texture.\n\n(SDL_Texture *) Returns a new texture, or NULL on error.\n\nAn SDL_Texture represents an image in GPU memory, usable by SDL's 2D Render API. This can be significantly more efficient than using a CPU-bound SDL_Surface if you don't need to manipulate the image directly after loading it.\n\nIf the loaded image has transparency or a colorkey, a texture with an alpha channel will be created. Otherwise, SDL_image will attempt to create an SDL_Texture in the most format that most reasonably represents the image data (but in many cases, this will just end up being 32-bit RGB or 32-bit RGBA).\n\nThere is a separate function to read files from an SDL_RWops, if you need an i/o abstraction to provide data from anywhere instead of a simple filesystem read; that function is IMG_LoadTexture_RW().\n\nIf you would rather decode an image to an SDL_Surface (a buffer of pixels in CPU memory), call IMG_Load() instead.\n\nWhen done with the returned texture, the app should dispose of it with a call to SDL_DestroyTexture().\n\nThis function is available since SDL_image 2.0.0."
    },
    {
        "link": "https://gamedev.stackexchange.com/questions/59078/sdl-function-for-loading-pngs",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://github.com/libsdl-org/SDL_image",
        "document": "This is a simple library to load images of various formats as SDL surfaces. It can load BMP, GIF, JPEG, LBM, PCX, PNG, PNM (PPM/PGM/PBM), QOI, TGA, XCF, XPM, and simple SVG format images. It can also load AVIF, JPEG-XL, TIFF, and WebP images, depending on build options.\n\nThe latest version of this library is available from GitHub: https://github.com/libsdl-org/SDL_image/releases\n\nInstallation instructions and a quick introduction is available in INSTALL.md\n\nThis library is distributed under the terms of the zlib license, available in LICENSE.txt."
    }
]