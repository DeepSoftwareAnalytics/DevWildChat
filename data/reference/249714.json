[
    {
        "link": "https://jetbrains.com/help/youtrack/devportal/YouTrack-Api-Documentation.html",
        "document": "The package includes a collection of modules. These modules provide the custom functions, methods, and constructors that let you reference and update entities in YouTrack. They also define the properties that are available for each entity.\n\nThe following modules are available:\n\nThis module contains functions that let you work with dates and times. Contains definitions for the entities in YouTrack that are accessible to workflows. Contains definitions for objects and classes that exchange and transfer data over HTTP. The main class is Connection. This module contains functionality for sending email messages. These messages are independent from the notification scheme that is used for subscriptions to issue updates in YouTrack. All of the components for these email messages are defined in the parameters for the function that is supported in this module. However, the messages are still sent by the SMTP server that is connected to your YouTrack installation. This module contains functionality that lets you search for issues in YouTrack. This module provides support for a specific string utility from the standard Java library. All of the other methods that you can use to work with strings in workflows are taken from the standard JavaScript library and behave as described in the MDN documentation. This module contains utility functions that display workflow-related messages and warnings in the user interface."
    },
    {
        "link": "https://jetbrains.com/help/youtrack/devportal/v1-entities.html",
        "document": "Represents the custom fields that are used in an issue. The actual set of custom fields that are used for each issue is configured on a per-project basis. The properties shown here correspond with the default custom fields in YouTrack. Additional custom fields that have been attached to a project are also available.\n\nRepresents a custom field in a project that stores a value as a period type. We use org.joda.time.Period as a base class for period values. While you can read the class documentation at http://joda-time.sourceforge.net/apidocs/org/joda/time/Period.html, please note that we support only class members which use the Period class and primitive types like String and int.\n\nThe `Requirements` object serves two purposes. First, it functions as a safety net. It specifies the set of entities that must exist for a rule to work as expected. Whenever one or more rule requirements are not met, corresponding errors are shown in the workflow administration UI. The rule is not executed until all of the problems are fixed. Second, it functions as a reference. Each entity in the requirements is plugged into the `context` object, so you can reference entities from inside your context-dependent functions (like an `action` function). There are two types of requirements: project-wide and system-wide. Project-wide requirements contain a list of custom fields that must be attached to each project that uses the rule as well as the required values from the sets of values for each custom field. System-wide requirements contain a list of other entities that must be available in YouTrack. This includes users, groups, projects, issues, tags, saved searches, and issue link types.\n\nThe `Set` object stores unique values of any type, whether primitive values or object references. The Set is used as storage for all multi-value objects in this API: custom fields that store multiple values, issue links, issues in a project, and so on. You can access single values in the collection directly (see first(), last(), get(index)), use an iterator (see entries(), values()), or traverse with forEach(visitor) and find(predicate) methods. The workflow API is based on ECMAScript 5.1. This Set implementation mimics the functionality supported by the ES 6 Set interface.\n\nRepresents the collection of custom attributes that have been added to user profiles. To retrieve a value that is stored in the profile for a referenced user, use the attribute name as the key. The entire object is read-only.\n\nRepresents the collection of custom attributes that have been declared for work items on a project level. To retrieve a value that is stored in an attribute for a referenced work item, use the attribute name as the key."
    },
    {
        "link": "https://github.com/fschopp/remaining-effort-youtrack-workflow/blob/master/src/main/youtrack-scripting-api.d.ts",
        "document": ""
    },
    {
        "link": "https://npmjs.com/package/@jetbrains/youtrack-scripting-api",
        "document": "Module containing a straightforward cache implementation\n\n Date and time related operations\n\n Entities module\n\n Nothing interesting here. Just a module devoted for internals\n\n Module containing stuff related to HTTP routine. The main class is Connection\n\n Module containing facilities to query YouTrack issues\n\n Operations on strings\n\n Module containing utility functions"
    },
    {
        "link": "https://github.com/fschopp/remaining-effort-youtrack-workflow/blob/master/src/main/index.ts",
        "document": "* Returns the minutes per week that are work time, according to the time tracking settings of the YouTrack project.\n\n// The dates are basically arbitrary, just one week apart. This ticket has more information about the return value of\n\n* Returns the number of minutes in the given period, or null if no period is given.\n\n* Returns the sum of the given arguments, or null if both are null. If only one argument is null, returns the other.\n\n// Due to JavaScript coercion rules, the following is equivalent to the following JavaScript:\n\n// But the following is more readable:\n\n* Returns the sum, over all sub-issues, of the given period field. Two values are returned, one before and one after\n\n* Either one of the two returned values may be null if the field has (or had, respectively) no value for the issue and"
    },
    {
        "link": "https://blog.jetbrains.com/youtrack/2017/11/make-it-workflow-part-2-preventing-unwanted-updates",
        "document": "The previous article in our Make it Workflow series showed you how to set up complex visibility restrictions for issues. We limited the ability to read issues to specific groups of people and restricted read access for different sets of users for issues in a single project.\n\nIn this post, we describe how to block unwanted changes to fields in an issue. We’ll continue to support the business case that we described in the previous article. We’re working with an accounting department whose members process payment requests. These users belong to a group of Executors. Payment requests are submitted by other members of the organization as issues in YouTrack. These users are our Requesters group.\n\nBuilding on the previous business case, let’s assume that you want to limit who can update the values in specific custom fields. Some of the fields store information that is provided by the Requesters. For example, the purpose of the payment. Other fields store information that is entered by the Executors. For example, the transaction ID from the bank. Requesters should not be able to modify the values in these fields.\n\nIn this case, private custom fields come to the rescue. Custom fields in YouTrack have a privacy setting. An administrator can update the properties for any custom field and make it private. The key icon in the list of custom fields indicates that the field is private.\n\nFor private fields, an extra set of permissions determines whether a user can read or update the field. If the field is private, users must have permission to Read Issue Private Fields and Update Issue Private Fields in the project, respectively. For public fields, users only need to have Read Issue and Update Issue permissions. Reporters only need to have the Create Issue permission to read public fields in the issues that they report themselves.\n\nIn the setup from the previous article, Requesters are granted the default Reporter role, which does not contain permission to Read Issue Private Fields or Update Issue Private Fields. As soon as you make a field private, Requesters are no longer able to view this field in any issue — even the issues that they created. Only Viewers and Executors can see and update its value. (For a complete description of these groups and their roles, refer to the previous article).\n\nIf your requirements allow it, you might choose to let your Requesters see the values that are stored in private fields but not update them. In this case, add the Read Issue Private Fields permission to the role that is assigned to the Requesters group in your project. This lets Requesters monitor the progress of their requests without letting them change the issue state, priority, or other private fields.\n\nAs in our previous article, you can solve simple business cases without scripting. However, this solution has a few limitations. Users can either read and/or update all private custom fields in a project or none of them. There is only black and white, no grey.\n\nWhat happens when your company doesn’t want the accounting team to accept payment requests without manager approval? To support this restriction, you need two custom fields:\n• Authorization status – this field stores two enumerated values: Required (the default value) and Authorized.\n• Authorizer – this field stores a user type. It contains a list of managers who can approve payment requests.\n\nYou want to apply a restriction to the Authorization status field so that it can only be changed to Authorized by the user who is selected as the Authorizer. This means that:\n• Authorizer must have permission to read the issue.\n• Authorizer must have permission to update the Authorization status field.\n• No other user should be able to update the value for the Authorization status field.\n\nTo support the first and the second points, use the workflow-enhanced approach that was described in the previous article together with the rule that adds the Authorizer to the visibility list. You should also perform the following setup:\n• Create a separate Authorizers group and add all of the managers as members.\n• Grant the same level of access that is available to members of the Requesters group.\n• Set this group as the source for values in the Authorizer field.\n\nThe third point requires an additional workflow rule. This rule is triggered when someone tries to set the Authorization status to Authorized. It verifies that the current user is the same person who is set as the Authorizer.\n\nThis limitation is very strict. However, you can write the rule differently to make the policy more lenient. The rule that follows lets members of the accounting team choose another value for the Authorizer field, even after the Authorization status field has been set to Authorized. When a new authorizer is selected, the value of the Authorization status field is switched back to Required. This lets you handle cases where, for example, an authorizer leaves the company or is no longer the manager for the person who submitted the payment request.\n\nThe previous restrictions determine which users can update different fields. You can also add restrictions that are based on field and value combinations. For example, here’s a rule that won’t let anyone change the value for the State field to Paid unless the Authorization status is Authorized.\n\nHere’s another variant. When the State has been set to Paid, the value that is stored in the Amount field cannot be modified.\n\nWe hope that these examples help you understand the basic concept. You can support a wide variety of update restrictions with the help of workflows. The workflows described in this article are specific to the business case for our accounting team but can be adapted to support any process. Here are a few ways you can extend this scheme:\n• Prohibit anyone but members of the QA team from changing the state for reported bugs from Fixed to Verified.\n• Mark an issue as Fixed only when the Spent time field is not empty.\n• Block users from changing the value for the Assignee field once an issue is resolved.\n\nHow and when you apply update restrictions is all up to you and your imagination.\n\nIn our next post, we show you how to streamline the issue creation process with workflows. If you’re hungry for more and can’t wait a week, here are a few resources to tide you over:\n• Watch our YouTrack Custom Workflow Repository in Git. We’ll be uploading all of the workflows that we introduce in this series.\n• Join our YouTrack Workflow Community in Slack. Interact directly with the YouTrack development team and see how other users support their business logic with workflows."
    },
    {
        "link": "https://blog.jetbrains.com/youtrack/2017/09/5-tips-for-tracking-issues-in-youtrack",
        "document": "Issue trackers are designed to help you manage issues faster and make your work more productive. But sometimes, you spend more time looking for important issues than actually working on them.\n\n Today I will tell you about the most productive ways to track your issues in YouTrack.\n\nIf you find it hard to track your issues on an Agile Board that you use together with your team, you can create a personal board with your own settings to track only the tasks that are assigned to you.\n\n To create such a board, use a personal board template that recognizes all of the projects where you are a team member and has a query to filter cards on the board and show only issues that are assigned to you.\n\nYou always have the option to modify settings based on your own requirements. For example, to separate important and less important issues, you can use swimlanes based on the value in the Priority field. This helps you see the prioritization of the tasks and not miss anything important.\n\nIf you work on several projects, the most convenient way to track your issues is to enable the option to identify swimlanes by project.\n\nNotifications are an important part of managing your issues. Getting the right notification at the right time helps you stay up to date and know exactly when you need to jump in and take action.\n\n The default notification scheme sends updates for several triggers: when you are an assignee, a watcher, you are mentioned in a comment, or you’ve added a comment to or voted for an issue. Basically, you get notified for major issue changes. But what about the cases when you want to get notified for specific events?\n\nFirst of all, you can subscribe to tags. For example, you want to track issues that are related to the 2017.3 release. Create a tag 2017.3 release, apply a custom notification scheme and tag the issues you want to include in 2017.3 release. If you only want to get notified when issues are fixed, simply select the Resolved event.\n\nNow you won’t miss anything!\n\nEver want to get notified about the issues that match specific criteria? You can do it in YouTrack! Simply create a search query, save it, and subscribe to it. Here is an example.\n\n At JetBrains we usually attend conferences all over the world. As a PMM of YouTrack, I don’t want to miss any conferences that are related to my product. I’ve created a query project: show #unresolved related project: youtrack and subscribed to it, so now I get notified when any issue that matches the query is created or updated.\n\nThanks to a variety of notification settings, you won’t miss what’s important — even if the issue is not assigned to you.\n\nDeadlines are usually much closer than they appear. It’s really important that you don’t forget about major issues, especially when someone depends on them being fixed.\n\nBy default, YouTrack comes with a Due Date workflow. When it’s attached to your project, the assignee (or in case the issue doesn’t have an assignee, the team lead) gets notified when the issue is overdue.\n\nIf you want to get notified in advance, you can either create a new workflow or add a new rule to the current workflow. For example, I want to get an email two days before the deadline.\n\n Here are some steps on how to do it:\n\n 1. Open the Due Date workflow in the workflows list.\n\n 2. Add a new on-scheduled rule.\n\n 3. The right way is to write the rule from scratch. But there is a trick. You can copy and paste the notify-assignee-on-overdue rule and change return ctx.issue.fields.DueDate < Date.now(); to return ctx.issue.fields.DueDate < Date.now() + 2 * 24 * 60 * 60 * 1000;\n\n While you’re editing the workflow rule, update the subject line of the email message as well. Here is how the new rule looks like.\n\n4. Attach the new rule to your project and you are good to go.\n\n Please note that you need project administrator permissions to manage workflows.\n\nAnother way to easily filter your issues is to pin tags and saved searches to the sidebar. Let’s say you always want to track the list of unresolved issues that are assigned to you sorted by due date. Simply create a search query #me sort by: due date #unresolved, save it, and pin to the sidebar. Now you have an easy way to get to your issues!\n\nWe hope that these tips improve your issue tracking experience. Do you have your own tricks for managing issues? Share your tips and feedback in the comment section below!"
    },
    {
        "link": "https://youtrack35.rssing.com/chan-7104729/latest.php",
        "document": "When we first introduced YouTrack workflows in JavaScript, we also released a built-in editor for writing workflow rules and scripts. While many users enjoy the convenience of writing workflows directly in YouTrack, it does have its limitations.\n\nIf you would rather write code in your favorite IDE, you can turn that frown upside-down right now. We’ve tapped into the power of the npm registry service* to let you manage workflows just as you would any other codebase. With the utilities that we have published to this service, you can enjoy the following advantages:\n• None Write workflows without leaving your development environment. Enjoy full-featured code completion and keyboard support.\n• None Make iterative offline improvements and deploy updates only when your code is tried and tested.\n\nIn this article, we show you how to work with the package manager and update workflows using your own software development tools. With each step, we provide an increasing level of functionality and complexity. This lets you build up your toolkit bit by bit and extend the capabilities of your platform at your own pace.\n\nThese instructions are not specific to any single platform. You should be able to configure any environment that supports JavaScript to write and manage workflow scripts for YouTrack.\n\nTL;DR: If you’re already familiar with npm, our custom workflow repository is already set up to support YouTrack workflow development in an IDE. Follow the setup instructions in the README and use our to reverse-engineer your environment.\n\nFollow the instructions in this section to enable basic support for YouTrack workflows in your IDE.\n\nWe’ve published two utility packages for workflows to the npm public registry. To work with these packages, you need to install and run Node.js. We recommend that you use Node.js version 8.9.1 LTS or later.\n\nWhen you install Node.js, the npm package manager is also installed automatically.\n\nNode.js uses files to store metadata and project dependencies. You can build the file step-by-step with the npm init command. To build the file:\n• None This starts a utility that helps you build the JSON file.\n• None For each field in the file, specify a new value or press Enter to accept the suggested value. Once you have specified values for all of the fields, the JSON is displayed in the CLI.\n• None Is this ok? (yes) Confirm the creation of the file by accepting the prompt file is added to the current project.\n\nThe first package you want to install contains the complete YouTrack workflow API. When you plug this package into your code editor, your code-completion tools suggest valid functions, methods, and properties for all of the entities that are available in the YouTrack workflow API.\n\nEnter the following command to install the package in your :\n\nThe second package you can install contains utility scripts. These scripts help you manage YouTrack workflows when you work in an external code editor.\n\nEnter the following command to install this package in your :\n\nNow, you have a few predefined scripts that you can enter in a command-line interface. These scripts support the following commands:\n• — Lists all of the workflows that are available in your YouTrack installation.\n• — Downloads the specified workflow from your YouTrack installation.\n• — Uploads the workflow from the specified directory to your YouTrack installation.\n\nFor a complete description of each command and its parameters, refer to the YouTrack documentation.\n\nAs long as your installation doesn’t use a certificate that is issued by your own certificate authority (CA) or is self-signed, you can establish a connection using a personal permanent token. You can generate your own permanent tokens on the Authentication tab of your Hub profile. For instructions, refer to the YouTrack documentation.\n\nIf you are using a certificate that is not issued by a known CA, you need to use specific variables in your Node.js environment to enable a connection between your IDE and the YouTrack installation. Follow the special instructions in the last section of this article.\n\nIf you have just a few custom workflows and don’t need to update them very frequently, you might get by with the basic scripting package. For regular updates, the need to specify a host and token with each request is a bit unwieldy. Follow the instructions in the next section to simplify this process and use these commands with fluidity.\n\nYou can streamline the commands that are supported by writing your own script. This script extracts the variables that you use to establish a connection to your YouTrack installation and stores them in your local configuration.\n\nThe first parameter that you want to extract and store locally is the permanent token that you use for authentication. To keep this token safe, you want to store it in your personal configuration file.\n\nTo add your permanent token to your per-user config file:\n• None YouTrack service to the Scope input field. Follow these instructions to generate a permanent token. When you generate the token, add theservice to theinput field.\n• None Copy the token to your clipboard.\n• None Switch to the command-line interface in your IDE and add the token to your per-user config file with the following command: Replace <token> with the permanent token from your clipboard. Of course, you can name your variables as you like. But as you continue with this guide, you’ll see that these naming conventions follow a pattern.\n• None Verify that the token has been added to your configuration with this command:\n\nNext, you want to save the address of your YouTrack installation that you reference as the parameter. You can save this parameter in your per-user config file as well.\n• None Enter the following command in your CLI: with the base URL of your YouTrack installation. For an InCloud instance, be sure to include the trailing\n• None Verify that the variable has been added to your configuration with this command:\n\nThis next step is optional if you’re on a Linux or *nix-based operating system. It’s also not entirely required for Windows users who know how to set their environment variables correctly, but you’ll need to adapt all of the scripts accordingly. For best results, we recommend that you follow these instructions anyway. As you delve deeper into this guide, you’ll see why.\n\nReferences for environment variables vary by operating system. To ensure that your scripts work in any environment, you can install a package that lets you set and use environment variables across platforms.\n\nOur preferred package is cross-env. It automatically converts each variable to use the correct syntax for your operating system at runtime.\n\nTo install this package in your , enter the following command:\n\nNow you can set all of your variables as if you were running on a POSIX system. If you open your file, you’ll see that the package was added to your automatically.\n\nThe last step is to write a script that references these parameters. You can add these scripts directly to the scripts field in your and run them from the command line. Use the following example as a guide.\n\nAt this point, you can run all of the commands that are supported by the package without having to specify the variables for your and . Use the following commands to run your scripts:\n\nThe basic process is as follows:\n• None command to copy workflows from your installation to your development environment.\n• None command to update the workflow in YouTrack.\n\nKeep in mind that you’re still pushing updates straight to your production environment. For many developers, it’s like playing with fire. If you’d like to work in a more controlled manner, follow the instructions in the next section to play it safe.\n\nOne of the major advantages of using an external editor to write workflows is that you can connect to multiple YouTrack installations. As with any code development project, you should first upload and test your changes in a sandbox environment. Only when you’re sure it’s working as intended should you deploy the code in production.\n\nWe recommend that you use one of the following options to test your workflows.\n\nOur free 10-user plan is a great solution for testing workflows.\n• None If your production environment is a YouTrack Standalone installation, you can download and install a local copy and use the free plan. You can update your local installation to the same version as your production environment to ensure your workflows behave as expected.\n• None If you use YouTrack InCloud, you can sign up for a test instance and switch to the free 10-user plan at any time. Our hosted servers are upgraded to the latest version of YouTrack automatically.\n\nBecause of license restrictions for the free plan, you can’t test workflows that set or change the visibility for issues and comments.\n\nPlay in the Sand at a Public Beach\n\nWe have set up a YouTrack InCloud test instance for testing workflows. Anyone can register to access this instance and use it as a sandbox. When you register, you are given the Global Project Admin role and can test custom workflows in any project.\n\nThis instance is not subject to any license restrictions and can be used to test workflows that manage issue and comment visibility.\n\nOnce you have set up an account in a test environment, you can add the variables from this installation to your configuration file and update your script. Follow these steps:\n• None Store the permanent token from your test environment in your configuration file with the following command:\n• None Store the hostname for your test environment with the following command:\n• None file to include scripts that let you manage workflows in your test environment. Use the following example as a guide. Update yourfile to include scripts that let you manage workflows in your test environment. Use the following example as a guide.\n\nNow you can play with fire and not get burned! Your typical process would look something like this:\n• None \n\n Download a workflow from your production environment with the command:\n• None Update the workflow in your IDE.\n• None \n\n Upload the modified workflow to your test environment with the command:\n• None Test the workflow in your YouTrack sandbox environment.\n• None Repeat steps 2 through 4 until your workflow behaves as expected.\n• None \n\n Upload the final version of your workflow to your production environment with the command:\n\nIf you are the only person who is responsible for the customization of your YouTrack installation, you might choose to end your journey here. With this setup, you can safely update your workflows while working exclusively in your favorite development environment.\n\nWhen there are other developers in your organization who write scripts for their own projects, you might want to get everyone to work together. Follow the instructions in the next section and share this setup with your team.\n\nOne of the biggest advantages of the setup in this section is that supports collaboration. With a few modifications, you can build a platform that other developers can use to manage workflows in your YouTrack installation. As this setup is not specific to any single environment, these developers can be working with any IDE that supports JavaScript in any operating system.\n\nThe first thing you can do is modify your file. Each of the developers who work with this setup will need to generate and store their own personal tokens, but the variables that are used for the host are the same for everybody.\n\nTo streamline the setup for other users, you can pull these variables into the file and update the references in your scripts. Use the following example as a guide.\n\nNotice how we added these variables to the field and updated the scripts to read these variables from the file with instead of just .\n\nRepositories are great places for storing collaborative work. Why not do the same with your workflow code? Uploading your workflow project to a repository has the following advantages:\n• None file that supports your scripts. You provide a centralized location where everyone can access your project files, including thefile that supports your scripts.\n• None Your repository supports version control. You can apply iterative updates to your workflow scripts. If you encounter problems with an updated workflow in production, you can always roll back to the last stable version.\n• None Multiple users can work on the same script without having their respective changes overwritten.\n• None You can use branching and pull requests to implement formal development and testing processes.\n\nWhen you upload your project to a repository, other users can follow these steps and start coding:\n• None Connect to the repository and download a local copy of the project. Be sure to include the\n• None Generate personal permanent tokens for the YouTrack installations that are supported in each script and save them as variables in their\n\nNow each developer should be able to perform the following actions:\n• None Upload and test their updates in the sandbox until they behave as expected.\n• None Upload the revised scripts to the production environment.\n• None Push their changes back to the repository, updating the version of the revised script.\n\nFor a real-life example, check out our YouTrack Custom Workflow Repository. Here, we upload workflows that support a range of use cases that are not covered by the default workflows in YouTrack. Everyone is welcome to download scripts from the repository and adapt them to suit specific business cases. If you have a script that you’d like to share with the community, submit a pull request!\n\nIf your YouTrack domain uses an SSL certificate that is issued by a known certificate authority, you can establish a connection using just your personal permanent token. Your certificate is already included in CA certificate store that is built into Node.js. For certificates that are issued by a CA that is not recognized automatically or is self-signed, you need to modify the environment variables in Node.js to recognize or ignore your certificate.\n\nIf your certificate is issued by a CA that is not recognized automatically, you need to add your certificate to the list of certificates that are recognized by Node.js.\n\nTo add your certificate, use the environmental variable in your scripts. This variable is supported in Node.js versions v7.3.0 (or LTS versions 6.10.0 and 4.8.0) and later.\n• None User your browser tools to export the certificate. Specific instructions vary for different browsers.\n• None Store the certificate file in a directory that is accessible from your development environment.\n• None Set the reference to the directory in your private configuration. For example: Replace <path> with the full path to the certificate file.\n• None Modify your scripts to reference the extra CA certificate. Use the following example as a guide.\n\nIf you work in a closed environment and use a self-signed certificate, you can disable the secure connection over TLS with the environmental variable .\n\nThe following example shows you how to connect to a local machine with the TLS connection disabled.\n\nEven though this type of workaround is often done in a development environment, it is not secure. If you are not aware of the potential pitfalls, avoid this practice. Never use this variable to connect to your production environment.\n\n*npm is a trademark of npm, Inc.\n\n **Node.js is a trademark of Joyent, Inc. and is used with its permission. We are not endorsed by or affiliated with Joyent."
    },
    {
        "link": "https://albato.com/blog/publications/youtrack-project-management-integrations",
        "document": "YouTrack - everything in one place. Track tasks, manage projects, maintain a knowledge base, support your customers, collaborate, and deliver great products.\n\nBefore setting up integrations with YouTrack, connect the tool to Albato.\n\nTo do this, go to the Apps section and click the Add a connection button.\n\nSelect the app and click the Add a connection button.\n\nCome up with a name for your connection.\n\nHow to get API key\n\nGo to your YouTrack account.\n\nEither copy the ID from the browser address bar or enter the name of the workspace you used to create the account. Go to the list of system users, select the user who will access the integration, and open the Account Security tab.\n\nNext, create a new token and copy its value.\n\nPaste the token into the Albato connection field.\n\nThe first part of the connection is finished. To receive tickets from YouTrack, we need to create two more workflows in YouTrack, write our JS code there and insert the webhook from the connection into them.\n\nGo to the Workflows tab.\n\nSet a name for your Workflow\n\nThis code catches only the creation of tasks, and the following code catches changes to tasks. You can work in one rule, or you can create an additional rule and add the following code to it:\n\nNow you have to replace in each rule where you inserted the code, in the very first constant \"const albatoHook = '{{albatoHook}}';\", the value {{albatoHook}}, with the actual webhook from the previously created connection. Copy the webhook from the connection you created to Albato.\n\nInsert a webhook into each process you create:\n\nNext, you need to link your Workflow to the project you need. To do this, go back to your Workflow list, select the Workflow you created and link it to the projects:\n\nDone! Now you can use the YouTrack in your integrations."
    },
    {
        "link": "https://stackoverflow.com/questions/77010080/set-custom-field-value-in-youtrack-custom-workflow",
        "document": "In this case, estimation is a numeric type called a period, which measures a duration in \"work\" days and weeks. Using dateTime.toPeriod() will convert the difference in milliseconds to a period and the resultant period will be applied without incident.\n\nNote that this period will not necessarily align with what you might expect when you compute an absolute difference between two dates. The project settings associated with time tracking dictate a period is computed. This field is intended to be used for tracking duration in working hours, i.e., some amount of working hours per day and some amount of working days per week as configured in time tracking settings. Thus the absolute difference between two dates will be converted to some work duration period based on those settings, and will not in general be the same as absolute duration."
    }
]