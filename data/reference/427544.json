[
    {
        "link": "https://stackoverflow.com/questions/1210664/no-module-named-sqlite3",
        "document": "I am trying to run a Django app on my VPS running Debian 5. When I run a demo app, it comes back with this error: File \"/usr/local/lib/python2.5/site-packages/django/utils/importlib.py\", line 35, in import_module __import__(name) File \"/usr/local/lib/python2.5/site-packages/django/db/backends/sqlite3/base.py\", line 30, in <module> raise ImproperlyConfigured, \"Error loading %s: %s\" % (module, exc) ImproperlyConfigured: Error loading either pysqlite2 or sqlite3 modules (tried in that order): No module named _sqlite3 Looking at the Python install, it gives the same error: Python 2.5.2 (r252:60911, May 12 2009, 07:46:31) [GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sqlite3 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"/usr/local/lib/python2.5/sqlite3/__init__.py\", line 24, in <module> from dbapi2 import * File \"/usr/local/lib/python2.5/sqlite3/dbapi2.py\", line 27, in <module> from _sqlite3 import * ImportError: No module named _sqlite3 >>> Reading on the web, I learn that Python 2.5 should come with all the necessary SQLite wrappers included. Do I need to reinstall Python, or is there another way to get this module up and running?"
    },
    {
        "link": "https://stackoverflow.com/questions/43993890/modulenotfounderror-no-module-named-sqlite3",
        "document": "It happens when you install Python using the source code and then compile. Usually people tend to install python and sqlite into separate folders. This causes sqlite binary inaccessible to python executables.\n\nTo solve this problem, use a common folder to install BOTH, the Python as well as sqlite. So that python binary and sqlite binary, reside in the same bin folder.\n\nBelow example script will solve:"
    },
    {
        "link": "https://dev.to/waylonwalker/pyenv-no-module-named-sqlite3-3ea2?comments_sort=latest",
        "document": "I've been trying to adopt pyenv for a few months, but have been completely blocked by this issue on one of the main machines I use. Whenever I start up ipython I get the following error.\n\nI talked about why and how to use pyenv along with my first impressions in this post\n\nAccording to #678 I need to install on ubuntu to resolve this issue.\n\ncan be installed using apt\n\nWhen I make a fresh env and install ipython I still get the same error and I am still not able to use ipython with pyenv.\n\nAfter having this issue for awhile an coming back to #678 several times I realized that\n\n needs to be installed while during install.\n\nI think I had tried this several times, but was missing the option each time. You gotta read errors like this, I am really good at glossing over them.\n\nLet's never have this issue again.\n\nWhen you spend months living with little errors like this and finally fix it, its good to make sure that it never happens again. Whenever I start a new ubuntu machine I run an ansible playbook that does all the setup for me. I added to my core install in 64c85ca now it will be on all of my machines and not break again."
    },
    {
        "link": "https://support.matillion.com/s/article/Error-ModuleNotFoundError-No-module-named-sqlite3",
        "document": ""
    },
    {
        "link": "https://forum.djangoproject.com/t/modulenotfounderror-no-module-named-sqlite3/952",
        "document": "What is happening is that your Python installation did not install sqlite. On many linux distributions, the Python package does not include what is needed to build some external tools. Sqlite happens to be one of them.\n\nThere’s two ways to solve this: The first I have done, the second I found as an alternative.\n• First is to install sqlite while building Python from source. I have this bookmarked here, as I build from source whenever I install a new Python version: https://solarianprogrammer.com/2017/06/30/building-python-ubuntu-wsl-debian/\n• I have not tried this, but I found this for Python 3: https://github.com/coleifer/pysqlite3. There’s a prebuilt binary wheel for linux that might work for you.\n\nLet me know how it goes!"
    },
    {
        "link": "https://docs.python.org/3/library/sqlite3.html",
        "document": "SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. It’s also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle.\n\nThe module was written by Gerhard Häring. It provides an SQL interface compliant with the DB-API 2.0 specification described by PEP 249, and requires SQLite 3.15.2 or newer.\n• None Tutorial teaches how to use the module.\n• None Reference describes the classes and functions this module defines.\n\nHow to use placeholders to bind values in SQL queries¶ SQL operations usually need to use values from Python variables. However, beware of using Python’s string operations to assemble queries, as they are vulnerable to SQL injection attacks. For example, an attacker can simply close the single quote and inject to select all rows: # Never do this -- insecure! SELECT * FROM stocks WHERE symbol = '' OR TRUE; --' Instead, use the DB-API’s parameter substitution. To insert a variable into a query string, use a placeholder in the string, and substitute the actual values into the query by providing them as a of values to the second argument of the cursor’s method. An SQL statement may use one of two kinds of placeholders: question marks (qmark style) or named placeholders (named style). For the qmark style, parameters must be a sequence whose length must match the number of placeholders, or a is raised. For the named style, parameters must be an instance of a (or a subclass), which must contain keys for all named parameters; any extra items are ignored. Here’s an example of both styles: # This is the named style used with executemany(): # This is the qmark style used in a SELECT query: PEP 249 numeric placeholders are not supported. If used, they will be interpreted as named placeholders. How to adapt custom Python types to SQLite values¶ SQLite supports only a limited set of data types natively. To store custom Python types in SQLite databases, adapt them to one of the Python types SQLite natively understands. There are two ways to adapt Python objects to SQLite types: letting your object adapt itself, or using an adapter callable. The latter will take precedence above the former. For a library that exports a custom type, it may make sense to enable that type to adapt itself. As an application developer, it may make more sense to take direct control by registering custom adapter functions. Suppose we have a class that represents a pair of coordinates, and , in a Cartesian coordinate system. The coordinate pair will be stored as a text string in the database, using a semicolon to separate the coordinates. This can be implemented by adding a method which returns the adapted value. The object passed to protocol will be of type . The other possibility is to create a function that converts the Python object to an SQLite-compatible type. This function can then be registered using . How to convert SQLite values to custom Python types¶ Writing an adapter lets you convert from custom Python types to SQLite values. To be able to convert from SQLite values to custom Python types, we use converters. Let’s go back to the class. We stored the x and y coordinates separated via semicolons as strings in SQLite. First, we’ll define a converter function that accepts the string as a parameter and constructs a object from it. Converter functions are always passed a object, no matter the underlying SQLite data type. We now need to tell when it should convert a given SQLite value. This is done when connecting to a database, using the detect_types parameter of . There are three options:\n• None Both: set detect_types to . Column names take precedence over declared types. The following example illustrates the implicit and explicit approaches: This section shows recipes for common adapters and converters. How to use connection shortcut methods¶ Using the , , and methods of the class, your code can be written more concisely because you don’t have to create the (often superfluous) objects explicitly. Instead, the objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a statement and iterate over it directly using only a single call on the object. # close() is not a shortcut method and it's not called automatically; # the connection object should be closed manually How to use the connection context manager¶ A object can be used as a context manager that automatically commits or rolls back open transactions when leaving the body of the context manager. If the body of the statement finishes without exceptions, the transaction is committed. If this commit fails, or if the body of the statement raises an uncaught exception, the transaction is rolled back. If is , a new transaction is implicitly opened after committing or rolling back. If there is no open transaction upon leaving the body of the statement, or if is , the context manager does nothing. The context manager neither implicitly opens a new transaction nor closes the connection. If you need a closing context manager, consider using . # con.rollback() is called after the with block finishes with an exception, # the exception is still raised and must be caught # Connection object used as context manager only commits or rollbacks transactions, # so the connection object should be closed manually How to work with SQLite URIs¶\n• None Do not implicitly create a new database file if it does not already exist; will raise if unable to create a new file: More information about this feature, including a list of parameters, can be found in the SQLite URI documentation. How to create and use row factories¶ By default, represents each row as a . If a does not suit your needs, you can use the class or a custom . While exists as an attribute both on the and the , it is recommended to set , so all cursors created from the connection will use the same row factory. provides indexed and case-insensitive named access to columns, with minimal memory overhead and performance impact over a . To use as a row factory, assign it to the attribute: \"SELECT 'Earth' AS name, 6378 AS radius\" The clause can be omitted in the statement, as in the above example. In such cases, SQLite returns a single row with columns defined by expressions, e.g. literals, with the given aliases . You can create a custom that returns each row as a , with column names mapped to values: Using it, queries now return a instead of a : can be used as follows: With some adjustments, the above recipe can be adapted to use a , or any other custom class, instead of a . By default, uses to adapt SQLite values with the data type. This works well for UTF-8 encoded text, but it might fail for other encodings and invalid UTF-8. You can use a custom to handle such cases. Because of SQLite’s flexible typing, it is not uncommon to encounter table columns with the data type containing non-UTF-8 encodings, or even arbitrary data. To demonstrate, let’s assume we have a database with ISO-8859-2 (Latin-2) encoded text, for example a table of Czech-English dictionary entries. Assuming we now have a instance connected to this database, we can decode the Latin-2 encoded text using this : For invalid UTF-8 or arbitrary data in stored in table columns, you can use the following technique, borrowed from the Unicode HOWTO: The module API does not support strings containing surrogates."
    },
    {
        "link": "https://stackoverflow.com/questions/1210664/no-module-named-sqlite3",
        "document": "I am trying to run a Django app on my VPS running Debian 5. When I run a demo app, it comes back with this error: File \"/usr/local/lib/python2.5/site-packages/django/utils/importlib.py\", line 35, in import_module __import__(name) File \"/usr/local/lib/python2.5/site-packages/django/db/backends/sqlite3/base.py\", line 30, in <module> raise ImproperlyConfigured, \"Error loading %s: %s\" % (module, exc) ImproperlyConfigured: Error loading either pysqlite2 or sqlite3 modules (tried in that order): No module named _sqlite3 Looking at the Python install, it gives the same error: Python 2.5.2 (r252:60911, May 12 2009, 07:46:31) [GCC 4.1.2 20061115 (prerelease) (Debian 4.1.1-21)] on linux2 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> import sqlite3 Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"/usr/local/lib/python2.5/sqlite3/__init__.py\", line 24, in <module> from dbapi2 import * File \"/usr/local/lib/python2.5/sqlite3/dbapi2.py\", line 27, in <module> from _sqlite3 import * ImportError: No module named _sqlite3 >>> Reading on the web, I learn that Python 2.5 should come with all the necessary SQLite wrappers included. Do I need to reinstall Python, or is there another way to get this module up and running?"
    },
    {
        "link": "https://doc.qt.io/squish/how-to-access-databases-from-squish-test-scripts.html",
        "document": "How to Interact with Files and with the Environment in Test Scripts How to Handle Exceptions Raised in Test Scripts\n\nSquish test scripts can access databases where the underlying scripting language provides a suitable library. In the case of JavaScript, which has no such library, Squish provides one—see SQL.\n\nYou can use a database to provide input or verification data to the test script, or you can log test results directly to the database. We have examples of both kinds of usage in the following sections.\n\nThe binary releases of Squish include a stripped down version of Python which does not include some standard libraries such as ssl, sqlite3, pip, mysql, and odbc. To access databases from Squish tests, you must use Squish with a full install of Python. You can replace the version that is used by an existing install, or compile Squish from source, and specify when you run .\n\nIncidentally, PyPI (Python Package Index) provides many different database bindings packages, and pip can be used to install them, so you are not limited to standard libraries when using Python.\n\nFor examples, see Accessing Databases via External Tools on our Knowledge Base.\n\nSee Accessing Databases from Perl Test Scripts in our Knowledge Base.\n\nLinux users should be able to obtain the bindings via their package management tools—the package name should be or similar—providing that you are using the system's Tcl and not one supplied with Squish. Windows users will need to download the bindings from SQLite. Click the Download link and get the binary package. macOS users might have to build the package from source—like the Windows binary package it is available from SQLite after clicking the Download link.\n\nHow to Compare Application Data with Database Data\n\nSometimes it is convenient to compare application data with data in a database. Some scripting languages include modules for database access in their standard libraries. This isn't the case for JavaScript, so Squish provides the SQL Object which can be used to interact with databases from JavaScript test scripts.\n\nIn this subsection we will look at how to read data from a table widget and for each row, verify that each cell has the same data as the corresponding SQL database's row's field. In the examples we will use Java AWT/Swing's JTable as the data-holding widget, but of course, we could use exactly the same approach using a Java SWT Table or a Qt , or any other supported toolkit's table.\n\nBecause Squish ships a database library with JavaScript, we will show examples using that. For other script languages, you can choose the database library and accomplish the same thing using its API, but each API can be quite different.\n\nThe structure of our function is very similar to one we used earlier in the CsvTable example where we compared the contents of a JTable with the contents of the file from which the table was populated. Here though, instead of a custom function, we have a function. (See How to Test JTable and Use External Data Files (Java—AWT/Swing) How to Test the Table Widget and Use External Data Files (Java/SWT) How to Test Table Widgets and Use External Data Files.)\n\nThe function begins by loading some common convenience functions, including a function that navigates the AUT's menu system to open a file with the given name. Once the file is loaded the JTable is populated with the file's contents and we then call the custom function to see if what we've loaded from the file matches the data in a SQLite 3 database file.\n\nIn JavaScript using Squish's SQL Object, we can execute queries on the connection object itself. In fact, the JavaScript API has two kinds of query function we can use, the SQLResult sqlConnection.query(sql) function for executing statements, and the Number sqlConnection.execute(sql) function for all other kinds of SQL statements (e.g., , , ).\n\nIn this particular example, the SQL database table has a field that isn't present in the file— —which actually corresponds to the record's row (but using 1-based indexing). Once we have the connection, we get a reference to the JTable's underlying model—naturally, this is different if we use a different toolkit, but whether we access a table widget's cells directly or via a model, we still get access to each cell's data. Then we execute the query. The query returns a SQLResult Object, and this automatically navigates to the first record in the result set (assuming that there were any results). This gives us access to the first record in the results set.\n\nThe JavaScript API's SQLResult Object's property is if we have navigated to a valid record. The String sqlResult.value(fieldNumber|fieldName) method can accept either a field index (in this case, 0 for the field, 1 for the field, and so on), or a field name. We begin by retrieving the record's using the field name, and deducting 1 to account for the fact that the JTable uses 0-based rows and the database uses 1-based IDs that correspond to rows. Then we iterate over every column, retrieving the JTable's text for the given row and column and comparing it with the database record with the corresponding row (ID) and column. (We have to add 1 to the database column because the database has an extra column at the beginning storing the IDs.) Once all the table's row's cells have been compared with the database's record's fields, we attempt to navigate to the next record in the database using the sqlResult.toNext() method.\n\nAnd at the end, we close the connection to the database, providing we made a successful connection in the first place. Although it doesn't matter much for SQLite, closing the connection to other databases is usually very important, so we have used a ... construct to ensure that no matter what happens after the connection is made, the connection is safely closed in the end. (Of course, Squish would close the connection for us anyway, but we prefer to take a best-practice approach to our test code.)\n\nHow to Log Test Results Directly into a Database\n\nSquish can output its test results in plain text or XML, so it is very easy to parse the results to analyze them and to produce reports. (See, for example, How to Do Automated Batch Testing and Processing Test Results.) However, if we prefer, we can log the test results directly from our test scripts ourselves. One way to do this is to use the scripting language's logging facilities (if it has any)—for example, using Python's module. Another way is to log the results directly into a database—this is the approach we will look at in this subsection.\n\nFor our example we will use a simple SQLite 3 database stored in the test suite's shared test data in file . The database has three fields, (an auto-incrementing integer), , and , both text fields. Our test code assumes that the database exists (and so, is initially empty).\n\nWe will start by looking at a test case's function and where calls to Squish's test.log(message) function have been replaced with calls to a custom class instances's method, and similarly calls to Squish's Boolean test.compare(value1, value2) and Boolean test.verify(condition) functions have been replaced with calls to our custom object's and methods. (Note that for Tcl we don't create a custom class or object, but just use plain functions.)\n\nThe function is very similar to one we saw in the itemviews example (see How to Test JList, JTable, and JTree widgets (Java—AWT/Swing)). The function iterates over every row in a table widget and over every cell in every row. For each cell we log its contents with a string of the form \"(row, column) text\", optionally appending \"+selected\" to the text for cells that are selected. The table's first row consists of checkboxes—the text for these comes out as \"true\" or \"false\"—and we check each one to make sure that it is unchecked (or in the case of rows 14 and 24, checked). And at the end we verify that the table has exactly 25 rows.\n\nIn terms of the class, we begin by creating an instance—and as we will see in a moment, the database connection is made in the constructor. Then we call methods on the object in place of the Squish test methods we would normally use.\n\nBecause JavaScript does not have destructors, we the object in the clause to ensure the connection is always closed.\n\nWe are now ready to review the class and its methods.\n\nThe function is the constructor and we use it to create the database connection. To provide the object returned by calling with methods, we create anonymous functions which we immediately assign to the class's prototype, using the names by which we want to call them.\n\nIn the case of the method, we remove any single quotes from the message since we create the SQL to execute purely as a string, and single quotes would confuse things. (An alternative would be to escape them.)\n\nThe class assumes that the database already exists and contains a table called that has at least two text fields, and . In fact, for this example the SQLite SQL we used to create the table was: . The field is autoincrementing which is why we don't need to explicitly insert values for it.\n\nClearly the class is very simple, but it shows the fundamentals of how we could create a database-savvy object that we could use to store whatever test data and results we liked, ready for post-processing or reporting."
    },
    {
        "link": "https://github.com/pyenv/pyenv/issues/1702",
        "document": "SpatiaLite and therefore django gis fails without SQLite extension support\n\ndjango.core.exceptions.ImproperlyConfigured: SpatiaLite requires SQLite to be configured to allow extension loading.\n\nPython on Linux at least should be built with on Python 3 and without on Python 2. It should be enabled on other platforms if the build instructions provide instructions that provide sqlite devel deps which are sufficient to build this."
    },
    {
        "link": "https://stackoverflow.com/questions/47616490/sqlite-3-install-error",
        "document": "I'm a total noob on trying to install things through Command line. I recently installed Node (the most recent version, under version id 9.20). I am in the middle of trying to install /setup GECKO for auto trading. And it requires installing SQLite3. I'm following the directions to setup gecko from this link:\n\nAnd I'm at the step where you type from the command line : npm = install\n\nHowever after it starts downloading some files it reaches several \"ERR!\" statements and cuts off. Here is the output:\n\n(P. S. I have tried using just \"npm install\" and I've tried using \"npm install sqlite3\", both are give the same errors in the end.\n\nnode-pre-gyp ERR! Tried to download(403): https://mapbox-node-binary.s3.amazonaws.com/sqlite3/v3.1.13/node-v59-win32-x64.tar.gz node-pre-gyp ERR! Pre-built binaries not found for [email protected] and [email protected] (node-v59 ABI) (falling back to source compile with node-gyp)\n\nC:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3>if not defined npm_config_node_gyp (node \"C:\\Program Files\n\nodejs\n\node_modules\n\npm\\bin\n\node-gyp-bin\\....\n\node_modules\n\node-gyp\\bin\n\node-gyp.js\" configure --fallback-to-build --module=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64\n\node_sqlite3.node --module_name=node_sqlite3 --module_path=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64 --msvs_version=2017 ) else (node \"\" configure --fallback-to-build --module=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64\n\node_sqlite3.node --module_name=node_sqlite3 --module_path=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64 --msvs_version=2017 ) gyp ERR! configure error gyp ERR! stack Error: Can't find Python executable \"C:\\Users\\fable187\\AppData\\Local\\Programs\\Python\\Python35\\python.EXE\", you can set the PYTHON env variable. gyp ERR! stack at PythonFinder.failNoPython (C:\\Program Files\n\nodejs\n\node_modules\n\npm\n\node_modules\n\node-gyp\\lib\\configure.js:483:19) gyp ERR! stack at PythonFinder. (C:\\Program Files\n\nodejs\n\node_modules\n\npm\n\node_modules\n\node-gyp\\lib\\configure.js:508:16) gyp ERR! stack at C:\\Program Files\n\nodejs\n\node_modules\n\npm\n\node_modules\\graceful-fs\\polyfills.js:284:29 gyp ERR! stack at FSReqWrap.oncomplete (fs.js:166:21) gyp ERR! System Windows_NT 10.0.16299 gyp ERR! command \"C:\\Program Files\n\nodejs\n\node.exe\" \"C:\\Program Files\n\nodejs\n\node_modules\n\npm\n\node_modules\n\node-gyp\\bin\n\node-gyp.js\" \"configure\" \"--fallback-to-build\" \"--module=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64\n\node_sqlite3.node\" \"--module_name=node_sqlite3\" \"--module_path=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64\" \"--msvs_version=2017\" gyp ERR! cwd C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3 gyp ERR! node -v v9.2.0 gyp ERR! node-gyp -v v3.6.2 gyp ERR! not ok node-pre-gyp ERR! build error node-pre-gyp ERR! stack Error: Failed to execute 'node-gyp.cmd configure --fallback-to-build --module=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64\n\node_sqlite3.node --module_name=node_sqlite3 --module_path=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64 --msvs_version=2017' (1) node-pre-gyp ERR! stack at ChildProcess. (C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\n\node_modules\n\node-pre-gyp\\lib\\util\\compile.js:83:29) node-pre-gyp ERR! stack at ChildProcess.emit (events.js:159:13) node-pre-gyp ERR! stack at maybeClose (internal/child_process.js:943:16) node-pre-gyp ERR! stack at Process.ChildProcess._handle.onexit (internal/child_process.js:220:5) node-pre-gyp ERR! System Windows_NT 10.0.16299 node-pre-gyp ERR! command \"C:\\Program Files\n\nodejs\n\node.exe\" \"C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\n\node_modules\n\node-pre-gyp\\bin\n\node-pre-gyp\" \"install\" \"--fallback-to-build\" node-pre-gyp ERR! cwd C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3 node-pre-gyp ERR! node -v v9.2.0 node-pre-gyp ERR! node-pre-gyp -v v0.6.38 node-pre-gyp ERR! not ok Failed to execute 'node-gyp.cmd configure --fallback-to-build --module=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64\n\node_sqlite3.node --module_name=node_sqlite3 --module_path=C:\\Users\\fable187\\Downloads\\gekko-stable\\gekko-stable\n\node_modules\\sqlite3\\lib\\binding\n\node-v59-win32-x64 --msvs_version=2017' (1) npm ERR! code ELIFECYCLE npm ERR! errno 1 npm ERR! [email protected] install: npm ERR! Exit status 1 npm ERR! npm ERR! Failed at the [email protected] install script. npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in: npm ERR! C:\\Users\\fable187\\AppData\\Roaming\n\npm-cache_logs\\2017-12-03T08_00_31_371Z-debug.log"
    }
]