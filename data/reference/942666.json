[
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/exchange/new-mailboxexportrequest?view=exchange-ps",
        "document": "This cmdlet is available only in on-premises Exchange. Use the New-MailboxExportRequest cmdlet to begin the process of exporting contents of a primary mailbox or archive to a .pst file. This cmdlet is available only in the Mailbox Import Export role, and by default, the role isn't assigned to any role groups. To use this cmdlet, you need to add the Mailbox Import Export role to a role group (for example, to the Organization Management role group). For more information, see Add a role to a role group. For information about the parameter sets in the Syntax section below, see Exchange cmdlet syntax.\n\nYou can create more than one mailbox export request per mailbox, and each mailbox export request must have a unique name. Microsoft Exchange automatically generates up to 10 unique names for a mailbox export request. However, to create more than 10 export requests for a mailbox, you need to specify a unique name when creating the export request. You can remove existing export requests with the Remove-MailboxExportRequest cmdlet before starting a new request with the default request name (where X = 0-9). You need to be assigned permissions before you can run this cmdlet. Although this topic lists all parameters for the cmdlet, you may not have access to some parameters if they're not included in the permissions assigned to you. To find the permissions required to run any cmdlet or parameter in your organization, see Find the permissions required to run any Exchange cmdlet. You need to grant the following permission to the group Exchange Trusted Subsystem to the network share where you want to export or import PST files:\n• To import PST files from the share: Read permission\n• To save exported PST files to the share: Read/Write permission. If you don't grant this permission, you will receive an error message stating that Exchange is unable to establish a connection to the PST file on the network share.\n\nThe AcceptLargeDataLoss switch specifies the request should continue even if a large number of items in the source mailbox can't be copied to the target mailbox. You don't need to specify a value with this switch. In Exchange 2013 or later, you need to use this switch if you set the LargeItemLimit parameter to a value of 51 or higher. Otherwise, the command will fail. In Exchange 2010, you need to use this switch if you set the BadItemLimit parameter to a value of 51 or higher. Otherwise, the command will fail.\n\nThe BadItemLimit parameter specifies the maximum number of bad items that are allowed before the request fails. A bad item is a corrupt item in the source mailbox that can't be copied to the target mailbox. Also included in the bad item limit are missing items. Missing items are items in the source mailbox that can't be found in the target mailbox when the request is ready to complete. Valid input for this parameter is an integer or the value unlimited. The default value is 0, which means the request will fail if any bad items are detected. If you are OK with leaving a few bad items behind, you can set this parameter to a reasonable value (we recommend 10 or lower) so the request can proceed. If too many bad items are detected, consider using the New-MailboxRepairRequest cmdlet to attempt to fix corrupted items in the source mailbox, and try the request again. In Exchange 2010, if you set this value to 51 or higher, you also need to use the AcceptLargeDataLoss switch. Otherwise, the command will fail.\n\nImportant: You can't use this parameter to export between two dates. If you try, you'll get system convert errors. You can export from a specific date, or export to a specific date, but not both. The ContentFilter parameter uses OPATH filter syntax to filter the results by the specified properties and values. Only contents that match the ContentFilter parameter will be exported into the .pst file. The search criteria uses the syntax .\n• Enclose the whole OPATH filter in double quotation marks \" \". If the filter contains system values (for example, , , or ), use single quotation marks ' ' instead. Although this parameter is a string (not a system block), you can also use braces { }, but only if the filter doesn't contain variables.\n• Property is a filterable property. For filterable properties, see Filterable properties for the ContentFilter parameter.\n• ComparisonOperator is an OPATH comparison operator (for example for equals and for string comparison). For more information about comparison operators, see about_Comparison_Operators.\n• Value is the property value to search for. Enclose text values and variables in single quotation marks ( or ). If a variable value contains single quotation marks, you need to identify (escape) the single quotation marks to expand the variable correctly. For example, instead of , use . Don't enclose integers or system values in quotation marks (for example, use , , , or instead). You can chain multiple search criteria together using the logical operators and . For example, or . For detailed information about OPATH filters in Exchange, see Additional OPATH syntax information.\n\nThe ExcludeFolders parameter specifies the list of folders to exclude during the export. Folder names aren't case-sensitive, and there are no character restrictions. Use the following syntax: : Use this syntax to denote a personal folder under the folder specified in the SourceRootFolder parameter, for example, \"MyProjects\" or \"MyProjects/FY2010\". : Use this syntax to denote a well-known folder regardless of the folder's name in another language. For example, #Inbox# denotes the Inbox folder even if the Inbox is localized in Turkish, which is Gelen Kutusu. Well-known folders include the following types: If the user creates a personal folder with the same name as a well-known folder and the # symbol surrounding it, you can use a backslash (\\) as an escape character to specify that folder. For example, if a user creates a folder named #Notes# and you want to specify that folder instead of the well-known Notes folder, use the following syntax: . Wildcard characters can't be used in folder names. To exclude the Recoverable Items folder, you must use the ExcludeDumpster parameter.\n\nThe IncludeFolders parameter specifies the list of folders to include during the export. Folder names aren't case-sensitive, and there are no character restrictions. Use the following syntax: : Use this syntax to denote a personal folder under the folder specified in the SourceRootFolder parameter, for example, \"MyProjects\" or \"MyProjects/FY2010\". : Use this syntax to denote a well-known folder regardless of the folder's name in another language. For example, #Inbox# denotes the Inbox folder even if the Inbox is localized in Turkish, which is Gelen Kutusu. Well-known folders include the following types: If the user creates a personal folder with the same name as a well-known folder and the # symbol surrounding it, you can use a backslash (\\) as an escape character to specify that folder. For example, if a user creates a folder named #Notes# and you want to specify that folder instead of the well-known Notes folder, use the following syntax: . Wildcard characters can't be used in folder names. The Recoverable Items folder is always included if you don't use the ExcludeDumpster parameter, regardless of the list of folders you provide.\n\nThe LargeItemLimit parameter specifies the maximum number of large items that are allowed before the request fails. A large item is a message in the source mailbox that exceeds the maximum message size that's allowed in the target mailbox. If the target mailbox doesn't have a specifically configured maximum message size value, the organization-wide value is used. For more information about maximum message size values, see the following topics: Valid input for this parameter is an integer or the value unlimited. The default value is 0, which means the request will fail if any large items are detected. If you are OK with leaving a few large items behind, you can set this parameter to a reasonable value (we recommend 10 or lower) so the request can proceed. If you set this value to 51 or higher, you also need to use the AcceptLargeDataLoss switch. Otherwise, the command will fail."
    },
    {
        "link": "https://practical365.com/export-mailboxes-exchange-server-2010-sp1",
        "document": "Exchange Server 2010 Service Pack 1 introduced a new method for exporting mailboxes called Mailbox Export Requests. This new method replaces the previous Export-Mailbox command.\n\nBefore we look at how to create a new mailbox export request in Exchange 2010 SP1 there are a few things that you should understand.\n\nFirstly, no accounts are granted the rights to export mailboxes by default. You need to explicitly grant these rights, even to accounts that are organization administrators.\n\nSecondly, the mailbox export request is processed by the Client Access server role. Because multiple Client Access servers can exist in a site the request could be processed by any one of them. To ensure that the path to the export PST file is valid for any Client Access server it has to be a UNC path to network share, not a local path.\n\nThe first step is to grant the right to export mailboxes to an account in your organization. In the Exchange Management Shell run the following command.\n\nIf you’re logged with that user already simply restart your Exchange Management Shell session to be granted access to the new cmdlets.\n\nNext we need to create the network share that will be used as the file path for the exported PST files. All that is required here is a network share that the Exchange Trusted Subsystem group has read/write permission to.\n\nWith everything configured properly we can now use New-MailboxExportRequest to start the mailbox export. The only two required parameters for the command are the file path to the export PST file, and the name of the mailbox to export.\n\nTo view the status of the request use the Get-MailboxExportRequest cmdlet.\n\nYou can also see more detail about the mailbox export request with Get-MailboxExportRequest.\n\nAn easy way to see the progress of all mailbox export requests is to pipe Get-MailboxExportRequest into the Get-MailboxExportRequestStatistics cmdlet.\n\nYou can also export a user’s Personal Archive using mailbox export requests simply by adding the -IsArchive parameter to the command.\n\nWhen a mailbox export request is completed it remains on the server until it is removed by an administrator using Remove-MailboxExportRequest.\n\nTo see all of the completed mailbox export requests run this command.\n\nAnd to clear all completed mailbox export requests from Exchange run the following command."
    },
    {
        "link": "https://community.spiceworks.com/t/exchange-2010-sp3-export-to-pst/228952",
        "document": "We just recently began the migration from Exchange 2003 to Exchange 2010 SP3. We had some users leave so I need to export a mailbox to a PST.\n\nAccording to Microsoft documentation I should use the New-MailboxExportRequest cmdlet.\n\nHowever, that cmdlet has been removed from SP3 and I cannot find the alternative.\n\nHow do I export a mailbox to a PST file in Exchange 2010 SP3?"
    },
    {
        "link": "https://docs.retarus.com/seg/export-of-mailboxes-from-exchange-2010-using-the-c",
        "document": "Microsoft® Exchange 2010™ SP1 permits the export of user mailboxes with the cmdlet. This command will create an Outlook PST file containing the user’s mailbox including contacts, calendar records, etc. Thanks to the capabilities of the Exchange PowerShell, you can also use Exchange command-lets for exporting or importing PST files for a huge list of users.\n\nThe cmdlets and can only be used by a user to whose account the Mailbox Import Export role was assigned. In Exchange 2010, these commands are hidden by default. Furthermore, Outlook 2010 (64-bit) must be installed on the Exchange 2010 Mailbox server to carry out the export.\n\nUsers who are members of the Microsoft Exchange Security Group Organization Management are permitted to assign the Mailbox Import Export role to other users.\n\nUse the following PowerShell command to assign the Mailbox Import Export role to an individual user:\n\n\n\nIf you want to assign the Mailbox Import Export role to a Security group, use the following command:\n\n\n\nIn addition to having been assigned the Mailbox Import Export role, all users who will use the Export- or Import-Mailbox commands should also be a member of the local Administrators group on the Exchange server.\n\nPreparing the server environment for expporting Exchange mailboxes to PST Files\n• None Create a folder on the hard drive where mailboxes will be exported. For example, you could create one as follows:\n• None Share the folder you created so that it can be accessed via UNC addressing, e.g.✔️\n\nEnsure that the necessary Exchange, share, and file permissions are assigned to the user account that is performing the activity.\n\nCmdlets available for exporting mailboxes from the Exchange datastore\n• None Use the following PowerShell command to export user A’s mailbox (alias: user.A) to the folder that has been created for this purpose, e.g.:\n\n\n\nExporting all mailboxes from an Exchange database\n• None Use the following PowerShell command to export all the mailboxes from a mailbox database. In this example, the database from which to export the mailboxes is called databaseName.\n\n\n\nExporting all the mailboxes from a server (Servername)\n• None Use the following PowerShell command to export all of the mailboxes from a specific server. In this example, the server from which to export the mailboxes is called serverName.\n\n\n\nExport requests for all users are created with the mail user’s alias as the export request name. This is done because the request statuses can be more easily monitored with the cmdlet.\n• None Use the following PowerShell to export all the mailboxes from all the Exchange servers and databases in the myOrganization Exchange organization of the myDomain.tld domain:\n\n\n\nThis command results in the cmdlet filtering the mailboxes. It will list and therefore only export mailboxes that belong to the specified organizational unit. You can also filter the mailboxes to be listed, e.g., by server or database. For more information, please see the documentation for the cmdlet.\n\nIn some scenarios, the export might not work if the CAS role is installed together with the mailbox role on the same server. A bug has been identified for this issue. In such situations, the Export-Mailbox and Import-Mailbox commands may not work. You may have to export the PSTs from client machines.\n\nThe following error appears when trying to run the Export-Mailbox command in such situations:\n\n StatusCode : -2147221219 StatusMessage : Error occurred in the step: Approving object. An unknown error has occurred.\n\nIn such scenarios, you can use Outlook 2010 to export user mailboxes to a PST file. Alternatively, you can split up your infrastructure in such a way that the CAS server role and the Mailbox server role are assigned to different servers.\n\nYou may receive error messages denying access or claiming insufficient privileges. This can be due to the fact that you are using the default administrator account for completing this task. It is preferable to use a different user account with administrative privileges because there may be restrictions in Exchange on the default administrator account.\n\nMicrosoft does not supply any cmdlets or explicit tools for exporting public folders directly from the Exchange server. In order to export public folders to PST files, you have to either use the Microsoft Outlook email client or a third party tool.\n• None For more information about the cmdlet, visit http://technet.microsoft.com/en-us/library/ff607299.aspx.\n• None For more information about the cmdlet, visit http://technet.microsoft.com/de-de/library/ff607464(v=exchg.150).aspx.\n• None For more information about the cmdlet, visit http://technet.microsoft.com/en-us/library/ff607479(v=exchg.150).aspx.\n• None For more information about the cmdlet, visit http://technet.microsoft.com/de-DE/library/bb123685(v=exchg.150).aspx."
    },
    {
        "link": "https://codetwo.com/admins-blog/exchange-mailbox-backup-pst-pros-cons",
        "document": "An email organization lives and dies by mailbox backups. Unfortunately, all Microsoft Exchange versions, including Exchange 2019 and 2016, come with limited brick-level backup capabilities. Basically, the only available granular option is an export to PST files. This can be done via Outlook (obviously), PowerShell and in some cases also via Exchange Management Console / Control Panel. In this article I discuss the options available via PowerShell in: Exchange 2019, Exchange 2016, Exchange 2013 and Exchange 2010.\n\nIf you prefer a video guide of this process, visit Export Exchange mailbox data to PST with PowerShell (video guide).\n\nNote: To export Exchange 2007 mailboxes to PST files, use the Export-Mailbox cmdlet. If you are using Exchange Online, exporting mailboxes to PST requires a different approach, described in this article.\n\nBefore we get down to scripting, I would like to say a few words about mailbox export to PST and PST files in general.\n\nPST (Personal Storage Table) files have been the primary means of mailbox backup since early versions of Outlook. While newer, modern Outlook versions depend primarily on OST (Offline Storage Table) files, PSTs are still there. That’s because they require no third-party tools plus are simple to use and supported by pretty much any Outlook version. Additionally, both users and admins can export mailbox items to this format.\n\nThe three main purposes of PST files are as follows:\n• Migration (for example from Exchange 2010 to Exchange Online)\n\nExporting Exchange mailbox contents to a PST file is achieved using the MailboxExportRequest cmdlet. It has only 2 obligatory parameters: –FilePath – defines the network share path of the PST file to which you want to export the data; and –Mailbox – defines the Alias, SMTP address or Display name of the mailbox you will export. Requirements:\n• The user performing the export must be a member of a role group which has the Mailbox Import Export role added. The easiest way to assign it is running this script: To learn more see the “Add a role to a role group” section of this Microsoft article.\n• The location to which you will export the PST file must be a shared folder.\n\nHere is an example of a mailbox export request, which backs up an entire mailbox to a PST file:\n\nLimiting the scope of exported contents is possible using additional parameters, e.g.:\n\nSpecifies what conditions the contents of a mailbox have to match to be exported into the PST file. The conditions are provided in the form of standard PowerShell logical clauses with several item properties available for filtering (wildcards are supported). Example of a script that exports items received prior to 2013-01-01 with subjects beginning with fwd:\n\nJust what it sounds like. You can choose from all Exchange mailbox folders. There are also two interesting features available:\n• The capability to filter personal folders located under root folders using the <FolderName>/* syntax.\n• The capability to filter well known Exchange mailbox folders regardless of their name in a local language using the #<FolderName>#/* syntax.\n\nHere is an example of a script that exports only the Inbox and Sent Items folders:\n\nA switch parameter, which defines the archive as the only source of the export. Example:\n\nSets the name of an export request. Useful for tracking or if you want to set more than 10 export requests per a single mailbox. This is because by default Exchange assigns only 10 consecutive names to export requests related to a single mailbox (starting with MailboxExport through MailboxExport9) and then stops. To proceed when all 10 default export request names have been taken, you have to either flush your export requests or start assigning your own names using the Name parameter. Example:\n\nA single MailboxExportRequest script can, of course, contain multiple parameters, including ones I didn’t mention. For a full list of available parameters, as well as syntax information and other details, consult this Microsoft article.\n\n\n\n The requirements here are identical as in the case of single mailbox exports:\n• The user performing the export must be a member of a role group which has the Mailbox Import Export role added (see previous section for more).\n• The location to which you will export the PST file must be a shared folder.\n\nSave all mailboxes to a variable (in my case it’s AllMailboxes):\n\nExport all mailboxes to PST files with names based on mailbox aliases (to use a different mailbox property replace the phrase “Alias” with its name):\n\nAdditional parameters can be used just as in single mailbox exports (see the first section of this article).\n\nRun the below script for the same effect as in Method 1 (the only difference is the use of the foreach command instead of piping):\n\nYou will notice that the methods I describe result in exporting all mailboxes located on your servers. If you want to limit the scope of exported mailboxes, you can do so e.g. using the Get-Mailbox -Filter parameter. Here is an example of a script which lists mailboxes belonging to a security group called export1.\n\nNOTE: Using the -Filter parameter with the Get-Mailbox cmdlet results in excluding mailboxes that are defined in the parameter. This is why, to limit the scope of exported mailboxes to e.g. Batch1, you have to use the -Filter parameter to exclude all mailboxes that are not part of Batch1 – hence the use of the -ne (not equals) operator. Adding the -Filter parameter to the Get-Mailbox cmdlets in Method 1 and Method 2 scripts will result in limiting the scope of exported mailboxes.\n\nMailbox backups to PST file: The bright and the dark side\n\nAll in all the drawbacks seem to outweigh the advantages, mainly due to clunky PST handling options and due to the files themselves being rather unstable:\n\nYou can have all the advantages of a PowerShell assisted mailbox-to-PST backup without its drawbacks. CodeTwo Backup for Exchange allows for secure granular mailbox backups to a stable and easily managed database. The software allows for scheduling multiple simultaneous backup and restore jobs, includes a smart versioning mechanism, full item search and preview, and additionally, allows for archiving storages to PST files as one of two available archiving models Learn more about CodeTwo Backup examples of use\n\nAs I’ve already mentioned, PST files can be used to migrate from one Exchange Server to another (including Exchange Online). This migration method is also called the manual migration – you don’t create migration endpoints, but rather recreate environment from scratch and import the mailbox contents from CSV files afterwards.\n\nRealistically, if you have more than a couple of mailboxes to migrate, PST migration won’t do. The amount of work it requires together with poor reliability of PST files make it one of the most stressful procedures known to IT.\n\nIf you want to save yourself a lot of time and nerves, take a look at our migration solutions:\n\nCodeTwo Exchange Migration – a tool which allows you to migrate from Exchange Server version 2010+, Exchange Online, or IMAP server directly to any other Exchange Server, including Exchange 2019.\n\nCodeTwo Office 365 Migration – the solution which helps organizations migrate from any source server to Exchange Online. It also allows a Microsoft 365 cross-tenant migration\n• are developed in accordance with ISO/IEC 27001 & ISO/IEC 27018-certified Information Security Management System (ISMS). You can be sure that the tools offer world-class security and reliability."
    },
    {
        "link": "https://learn.microsoft.com/en-us/exchange/recipients/mailbox-import-and-export/export-procedures?view=exchserver-2019",
        "document": "Procedures for mailbox exports to .pst files in Exchange Server\n\nMailbox export requests use the Microsoft Exchange Mailbox Replication service (MRS) to export the contents of mailboxes to .pst files. For more information, see Mailbox imports and exports in Exchange Server.\n\nThis topic shows you how to:\n\nWhat do you need to know before you begin?\n• None You need to export mailboxes to .pst files on a UNC network share (\\ <Server>\\ <Share>\\ or \\ <LocalServerName>\\c$). The Exchange Trusted Subsystem security group requires the Read/Write permission to the network share. If the share doesn't have this permission, you'll get errors when you try to export mailboxes to .pst files.\n• None You can create mailbox export requests in the Exchange admin center (EAC) or in the Exchange Management Shell. All other procedures can only be done in the Exchange Management Shell. For more information about accessing and using the EAC, see Exchange admin center in Exchange Server. To learn how to open the Exchange Management Shell in your on-premises Exchange organization, see Open the Exchange Management Shell.\n• None For information about keyboard shortcuts that may apply to the procedures in this topic, see Keyboard shortcuts in the Exchange admin center.\n\nUse the EAC to create a mailbox export request\n• None In the EAC, go to Recipients > Mailboxes > click More options , and select Export to a PST file.\n• None The Export to a .pst file wizard opens. On the first page, select the source mailbox, and then select one of these options:\n• None Export only the contents of this mailbox\n• None Export only the contents of this mailbox's archive\n• None On the next page, enter the UNC path and filename of the target .pst file.\n• None On the last page, configure one of these settings:\n• None Leave the Send email to the mailbox below when the .pst file has been exported check box selected. Click Browse to add or remove notification recipients.\n• None Clear the Send email to the mailbox below when the .pst file has been exported check box.\n\nUse the Exchange Management Shell to create a mailbox export request\n\nTo create a mailbox export request, use this syntax:\n\nThis example creates a new mailbox export request with these settings:\n• None Mailbox export request name: The default value is used, because we aren't using the Name parameter. The unique identity of the mailbox export request is (X is either not present, or has the value 0 to 9).\n• None Content and folders: Content in all folder paths in the source mailbox is replicated in the target .pst file.\n• None Priority: , because we aren't using the Priority parameter.\n\nThis example creates a new mailbox export request with these settings:\n• None Mailbox export request name: The custom name Kathleen Reiter Export is specified by the Name parameter. Specifying a custom name allows more than 10 mailbox export requests for the mailbox. The unique identity value of the mailbox export request is (for example, ).\n• None Source mailbox: The archive mailbox for Kathleen Reiter (Kathleen's primary mailbox alias is kreiter).\n• None Content and folders: Only content in the Inbox folder of the mailbox is exported (regardless of the localized name of the folder).\n\nFor detailed syntax and parameter information, see New-MailboxExportRequest.\n\nHow do you know this worked?\n\nTo verify that you've successfully created a mailbox export request, do any of these steps:\n• None In the EAC, click the notification viewer to view the status of the request.\n• None If you created the mailbox export request in the EAC, and selected the option to send notification email messages, check the notification messages. The sender is Microsoft Exchange. The first message has the subject Your Export PST request has been received . If the export request completed successfully, you'll receive another message with the subject .\n• None Replace <MailboxIdentity> with the name, email address, or alias of the source mailbox, and run this command in the Exchange Management Shell to verify the basic property values:\n• None Replace <MailboxIdentity> and <MailboxExportRequestName> with the appropriate values, and run this command in the Exchange Management Shell to verify the details:\n\nUse the Exchange Management Shell to view mailbox export requests\n\nBy default, the Get-MailboxExportRequest cmdlet returns the name, source mailbox, and status of mailbox export requests. If you pipeline the command to the Format-List cmdlet, you'll only get a limited number of additional useful details:\n• None RequestGUID: The unique GUID value of the mailbox export request.\n• None RequestQueue: The mailbox database that the export request is being run on.\n• None BatchName: The optional batch name for the mailbox export request.\n• None Identity: The unique identity value of the mailbox export request (<MailboxIdentity>\\ <MailboxExportRequestName>).\n\nBy default, the Get-MailboxExportRequestStatistics cmdlet returns the name, status, alias of the source mailbox, and the completion percentage of mailbox export requests. If you pipeline the command to the Format-List cmdlet, you'll see detailed information about the mailbox export request.\n\nThis example returns the summary list of all mailbox export requests.\n\nThis example returns additional information for mailbox export requests from the mailbox Akia Al-Zuhairi.\n\nThis example returns the summary list of in-progress mailbox export requests for mailboxes that reside on the mailbox database named DB01.\n\nThis example returns the summary list of completed mailbox export requests in the batch named Export DB01 PSTs.\n\nFor detailed syntax and parameter information, see Get-MailboxExportRequest.\n\nTo view detailed information about a mailbox export request, use this syntax:\n\nWhere <MailboxExportRequestIdentity> is the identity value of the mailbox export request (<MailboxIdentity>\\ <MailboxExportRequestName> or <RequestGUID>).\n\nThis example returns detailed information for the mailbox export request named MailboxExport for Akia Al-Zuhairi's mailbox, including the log of actions in the Report property.\n\nFor detailed syntax and parameter information, see Get-MailboxExportRequestStatistics.\n\nUse the Exchange Management Shell to modify mailbox export requests\n\nYou can modify mailbox export requests that haven't completed. You can't modify the fundamental settings of an existing request (for example, the source mailbox, target .pst file, the source content in the mailbox, or the destination in the target .pst file).\n\nTo modify a mailbox export request, use this syntax:\n\nThis example modifies the failed mailbox export request for the mailbox of Valeria Barrios to accept up to five corrupted mailbox items.\n\nFor detailed syntax and parameter information, see Set-MailboxExportRequest.\n\nNote: After you modify a suspended or failed mailbox export request, you need to resume it by using the Resume-MailboxExportRequest cmdlet.\n\nHow do you know this worked?\n\nTo verify that you've successfully modified a mailbox export request, replace <MailboxIdentity> and <MailboxExportRequestName> with the appropriate values, and run this command in the Exchange Management Shell to verify the details:\n\nYou can suspend mailbox export requests that are in progress. You can't suspend completed or failed mailbox export requests.\n\nTo suspend a mailbox export request, use this syntax:\n\nThis example suspends the mailbox export request from Kathleen Reiter's mailbox that's named Kathleen Reiter Export.\n\nThis example suspends all in-progress mailbox export requests with the comment \"OK to resume after 10 P.M. on Monday 6/19\"\n\nFor detailed syntax and parameter information, see Suspend-MailboxExportRequest.\n• None You can also use the New-MailboxExportRequest cmdlet with the Suspend switch to create a suspended mailbox export request.\n• None You use the Resume-MailboxExportRequest parameter to resume suspended mailbox export requests.\n\nHow do you know this worked?\n\nTo verify that you've successfully suspended a mailbox export request, do any of these steps:\n• None Replace <MailboxIdentity> with the name, email address, or alias of the source mailbox, run this command in the Exchange Management Shell, and verify that the Status property has the value :\n• None Run this command in the Exchange Management Shell, and verify that the suspended mailbox export request is listed:\n\nUse the Exchange Management Shell to resume mailbox export requests\n\nYou can resume suspended or failed mailbox export requests.\n\nTo resume a mailbox export request, use this syntax:\n\nThis example resumes the failed mailbox export request for Valeria Barrios' mailbox.\n\nThis example resumes all suspended mailbox export requests.\n\nFor detailed syntax and parameter information, see Resume-MailboxExportRequest.\n\nHow do you know this worked?\n\nTo verify that you've successfully resumed a mailbox export request, replace <MailboxIdentity> with the name, email address, or alias of the source mailbox, run this command in the Exchange Management Shell, and verify that the Status property doesn't have the value :\n\nUse the Exchange Management Shell to remove mailbox export requests\n\nYou can remove fully or partially completed mailbox export requests.\n• None If you remove a partially completed mailbox export request, the request is removed from the MRS job queue. Any content that's already been exported from the source mailbox isn't removed from the target .pst file.\n• None By default, completed mailbox export request are removed after 30 days (you can override this value with the CompletedRequestAgeLimit parameter), and failed requests aren't automatically removed. But, if you use the RequestExpiryInterval parameter when you create or modify a mailbox export request, these results are available:\n• None RequestExpiryInterval with a timespan value: Completed and failed requests are automatically removed after the specified timespan.\n• None RequestExpiryInterval with the value unlimited: Completed and failed requests aren't automatically removed.\n\nThis example removes the mailbox export request named MailboxExport for Akia Al-Zuhairi's mailbox.\n\nThis example removes all completed mailbox export requests.\n\nFor detailed syntax and parameter information, see Remove-MailboxExportRequest.\n\nHow do you know this worked?\n\nTo verify that you've successfully removed a mailbox export request, replace <MailboxIdentity> with the name, email address, or alias of the source mailbox, run this command in the Exchange Management Shell, and verify that the mailbox export request isn't listed:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/exchange/recipients/mailbox-import-and-export/mailbox-import-and-export?view=exchserver-2019",
        "document": "Exchange Server uses the Microsoft Exchange Mailbox Replication service (MRS) to import .pst files to mailboxes, and export mailboxes to .pst files. The advantages of using MRS instead of Outlook to import and export mailboxes are:\n• None Import and export requests are asynchronous (you can import and export multiple .pst files at the same time).\n• None Imports and exports take advantage of the queuing and throttling that's provided by the MRS.\n• None You can import a .pst file directly to a user's archive mailbox.\n• None The source or destination .pst files can reside on any network share that's accessible by your Exchange servers.\n\nThis feature was introduced in Exchange 2010 Service Pack 1 (SP1). In Exchange 2010, the MRS runs on Client Access servers. In Exchange 2013 or later, the MRS runs in the backend services on Mailbox servers (not in the frontend Client Access services).\n\nMailbox imports and exports are available only in the Mailbox Import Export role, and by default, that role isn't assigned to a role group. To use these features, you need to add the Mailbox Import Export role to a role group that you belong to (for example, the Organization Management role group). For more information, see Add a role to a role group.\n\nAs an administrator, you might need to import .pst files to mailboxes or export mailboxes to .pst files. For example:\n• None Compliance requirements: You can export a mailbox to a .pst file for legal discovery purposes. After the export is complete, you can import the .pst file to a mailbox that's specifically used for compliance purposes.\n• None Create a point-in-time snapshot of a mailbox: Suppose you're keeping a backup of an entire mailbox database for just a few mailboxes. By exporting those mailboxes to .pst files, you can eliminate the mailbox database backup.\n• None Get content out of .pst files and into mailboxes: Typically, Outlook users can save their email messages locally in .pst files. You can import users' .pst files to their primary mailboxes or archive mailboxes. This is an easy method for transferring email from a user's local computer to an Exchange server.\n\nBefore you import .pst files to mailboxes, or export mailboxes to .pst files, consider these issues:\n• None You need to use a UNC network share (\\ <Server>\\ <Share>\\ or \\ <LocalServerName>\\c$). The Exchange Trusted Subsystem security group requires permissions to the network share (Read for imports, Read/Write for exports). If the share doesn't have these permissions, you'll get errors when you try to import or export .pst files.\n• None We recommend that you don't try to import or export .pst files that are larger than 50 gigabytes (GB), because 50 GB is the maximum .pst file size that's supported by current versions of Outlook. You can export mailboxes that are larger than 50 GB to .pst files by using multiple export requests that include or exclude specific folders, or by using a content filter.\n• None The operations may take several hours depending on the size of the .pst files or mailboxes, the available network bandwidth, and MRS throttling.\n• None You can't import .pst files to public folders.\n\nHere are some things to consider when you import .pst files to mailboxes:\n• None You can create new mailbox import requests in the EAC or the Exchange Management Shell. To view, modify, suspend, resume, or remove mailbox import requests, you need to use the Exchange Management Shell.\n• None You can import the .pst file to a different mailbox. For example, you can export data from john@contoso.com and import it to legaldiscovery@contoso.com.\n• None You can import the .pst file directly to the user's personal archive instead of their primary mailbox.\n• None By default, associated messages are imported if they exist in the .pst file. Associated messages are special messages that contain hidden data with information about rules, views, and forms. You can change this setting in the Exchange Management Shell (the AssociatedMessagesCopyOption parameter).\n• None By default, the Recoverable Items folder is imported if it exists in the .pst file. You can change this setting in the Exchange Management Shell (the ExcludeDumpster switch).\n• None In the Exchange Management Shell, you can include or exclude specific folders to import (the IncludeFolders, ExcludeFolders, or SourceRootFolder parameters).\n• None In the Exchange Management Shell, you can specify the destination folder for imported items in the target mailbox (the TargetRootFolder parameter).\n• None In the Exchange Management Shell, you can increase or decrease the priority value for mailbox import requests (the Priority parameter).\n\nFor mailbox import procedures, see Procedures for mailbox imports from .pst files in Exchange Server.\n\nHere are some things to consider when you export mailboxes to .pst files:\n• None You can create new mailbox export requests in the EAC or the Exchange Management Shell. To view, modify, suspend, resume, or remove mailbox export requests, you need to use the Exchange Management Shell.\n• None You can export a mailbox or a user's archive mailbox to a .pst file.\n• None By default, associated messages are exported from the mailbox. Associated messages are special messages that contain hidden data with information about rules, views, and forms. You can change this setting in the Exchange Management Shell (the AssociatedMessagesCopyOption parameter).\n• None By default, the Recoverable Items folder is exported from the mailbox. You can change this setting in the Exchange Management Shell (the ExcludeDumpster switch).\n• None In the Exchange Management Shell, you can filter the messages to export from the mailbox (the ContentFilter parameter). You can filter by message content, attachment, senders, recipients, Inbox category, importance, message type, message size, and when the message was sent, received, or expired.\n• None In the Exchange Management Shell, you can include or exclude specific folders to export (the IncludeFolders, ExcludeFolders, or SourceRootFolder parameters).\n• None In the Exchange Management Shell, you can specify the destination folder for exported items in the target .pst file (the TargetRootFolder parameter).\n• None In the Exchange Management Shell, you can increase or decrease the priority value for mailbox export requests (the Priority parameter).\n\nFor mailbox export procedures, see Procedures for mailbox exports to .pst files in Exchange Server."
    },
    {
        "link": "https://community.spiceworks.com/t/exchange-2010-mailbox-permissions/599185",
        "document": "At some point in the past I granted myself “Full Access” permissions to a shared mailbox in order to troubleshoot something. I realized last week I never removed those, so I did so. Then a few days later while troubleshooting something else, I noticed the mailbox was still appearing in my Outlook 2016. I’ve triple confirmed the full access permissions are gone, but it’s still in my Outlook. When I right-click and try to close, it tells me, “this group of folders is associated with an e-mail account. To remove the account, click File, and on the Info tab, click Account Settings. Select the e-mail account, and then click Remove.” There’s nothing there to remove.\n\nHere’s what I see through the Exchange Management Console - there are two users I expect to see in the full access list.\n\nAnd here’s what I see in the Exchange Management Shell\n\nFWIW I am a domain admin and enterprise admin, but another user who also is in those groups does not have this mailbox showing up."
    },
    {
        "link": "https://microsoftpressstore.com/articles/article.aspx?p=2228442&seqNum=12",
        "document": "Message classifications are useful to a point. They don’t impose any restrictions on users and apart from providing some advice as to how important information contained in a message is, users can blissfully ignore their invocation to deal with the information in any particular way. Another approach is necessary if you want to impose restrictions on users as to what they can and cannot do with content. This isn’t a new requirement. For almost 20 years, companies have attempted to protect sensitive information that users transmit in email. The first attempts were based on message encryption and required the sender and recipient to share common (public) keys. The first versions of Exchange-based message encryption used the Windows Public Key Infrastructure (PKI). Some companies experienced success with message encryption but others found that PKI-based systems require a lot of administrative knowledge and intervention (at times) and users often didn’t use encryption when they should. In addition, software and hardware upgrades for server and clients had to be carefully managed to ensure that keys were preserved. The result was often disappointing in terms of the degree of protection achieved across the organization.\n\nSoftware vendors began to explore different approaches to content protection toward the end of the 1990s. These solutions typically required users to explicitly protect a message by invoking a client add-in and relied on communication with specially designated servers. It was difficult to achieve true protection across a range of Web, mobile, and desktop and laptop clients working in offline and online modes. Costs were high because of the need to buy, deploy, and manage additional client and server software and achieving interoperability with partners was tricky. Needless to say, mergers and acquisitions posed even more challenges.\n\nApart from the ability to send S/MIME protected messages, Exchange 2010 supports two more sophisticated mechanisms to protect content:\n• None Information Rights Management (IRM) IRM relies on templates that describe different sensitivity levels for content and the actions that users can take when they receive protected contents. IRM depends on AD RMS and is now well-integrated throughout Exchange 2010 in terms of client support (Outlook Web App, Outlook, Windows Mobile, and BlackBerry), its support for federation, and the ability to apply IRM through transport rules. Exchange is able to decrypt IRM protected content to inspect it during transport rules processing and discovery searches and can journal protected content in a satisfactory manner. In short, IRM is the approach most suitable for enterprises that are willing to dedicate sufficient resources to achieving a sophisticated and comprehensive level of protection.\n• None Outlook protection rules An Exchange 2010 administrator can create rules that are pushed out to Outlook 2010 clients, which then use the rules to automatically apply AD RMS templates to protect content as users create and send messages. For example, a rule might say that any message sent to a specific distribution group must be protected. Outlook protection rules are in their first iteration and have a major dependency in that they cannot be used without first deploying Outlook 2010 clients.\n\nPlanning for the deployment of protected content within an enterprise is not just a matter of selecting and deploying technology. User education is often the biggest obstacle to overcome, especially in large, multinational, and highly distributed companies. It’s also not a matter that the Exchange administrators can decide on alone. The Active Directory management team has to be involved if you want to use AD RMS and the corporate security team and legal group need to be involved to ensure that content protection is aligned with other security initiatives and complies with any legal or regulatory regime to which the company is exposed. The topic is therefore complex at many levels and the best idea is to research the information available on TechNet and other sources before you progress too far along toward a decision to deploy.\n\nActive Directory Rights Management Service (AD RMS) is a new version of Windows Rights Managment Service (RMS) that allows companies to protect sensitive information by applying policies that dictate how that information can be accessed and shared by users. In an email context, AD RMS can be used with Exchange 2010 to stop users from sending or forwarding messages to unauthorized recipients or otherwise sharing contents by printing, cutting and pasting into other messages, and so on. RMS had a somewhat checkered history because it is very Windows-centric and didn’t meet the needs of companies that had heterogeneous environments. AD RMS runs on a Microsoft Windows 2008 server and leverages Active Directory extensively, so it still poses some issues for companies that don’t depend on Microsoft for large sections of their IT infrastructure. However, the latest implementation does offer some new features in conjunction with Exchange 2010 that make it more interesting to a messaging administrator. One major advance is the fact that Outlook Web App now supports protected messages for non-Microsoft browsers running on non-Windows platforms, so it is now possible to deploy rights management in a heterogeneous multiplatform infrastructure and expect that users will be able to read protected information. (In addition, Microsoft Outlook for Mac OS X supports AD RMS, as do Windows Mobile 6.1 and later.)\n\nEvery message that flows through Exchange passes through the transport service. It is therefore sensible to use this choke point as the place to impose restrictions on email content. Transport protection encryption is an integration that allows you to use AD RMS with Exchange transport rules to apply AD RMS templates to messages as they are processed by the transport service. For example, you could apply the standard Do Not Forward AD RMS template to outgoing messages sent by your senior management team to members of the board of directors to stamp the messages as highly confidential and to ensure that they cannot be forwarded. A key part of making this feature work is that the Exchange 2010 transport system can read protected messages so that journaling and transport rules can be applied. In response to user demands, Exchange 2010 Unified Messaging also supports protection for voice mail messages by marking private messages with the Do Not Forward AD RMS template before they are submitted to a hub transport service.\n\nAD RMS is supported by Outlook 2010, Outlook Web App, Windows Mobile, and some non–Windows Mobile devices. Windows Mobile clients depend on the AD RMS prelicensing agent that was first shipped in Exchange 2007 SP1. The agent runs on hub transport servers and proactively requests licenses to allow Outlook 2007 (and later) and Windows Mobile 6.0 (and later) clients to read protected content without having to first submit credentials. The idea is to make protected content less onerous to deploy and use.\n\nThere’s plenty of information available in TechNet to help guide you through the detail of installing and configuring Active Directory Rights Management Service so we do not provide a detailed step-by-step guide here. Essentially, the following are the headline steps.\n• None Decide on the server that will host the AD RMS cluster (the server that will control the licenses that underpin rights protection within the organization). The server can run Windows 2008 SP2 (a hotfix is required for this version of the operating system) or Windows 2008 R2. It is not best practice to install AD RMS on the same server as Exchange 2010.\n• None Install the Active Directory Rights Management Services role on the server (Figure 15-40). The installation wizard leads you through many screens and you might want to perform an installation on a test server before you attempt to introduce AD RMS into the production environment.\n• None Perform the postinstallation steps to configure Exchange 2010 to use IRM.\n• None Validate that everything is running properly and that users can protect and access content using IRM.\n\nAfter a successful installation of Active Directory Rights Management Service, there are still some steps that must be performed before AD RMS is ready to support Exchange:\n• None The certificate specified for use by the installation (or created by the installation) must be installed on Exchange mailbox and hub transport servers. You can export the certificate from the server that supports the AD RMS cluster that will be used by Exchange and import it into the Exchange mailbox and hub transport servers. The certificate is required to provide Secure Sockets Layer (SSL) communications between Exchange and the AD RMS server.\n• None The Exchange Servers security group must be granted read and write permission to the AD RMS cluster certification pipeline. This is a file called \\inetpub\\wwwroot\\_wmcs\\certification\\ServerCertification.asmx located on the AD RMS cluster. Exchange hub transport servers need to be able to access this file to be able to use the AD RMS prelicensing agent to request licenses to access protected content proactively on behalf of clients.\n• None The account for the federated delivery mailbox must be added to the super users group for the AD RMS cluster. This step allows Exchange to decrypt protected messages as they pass through the transport system (to apply rules based on message content), to journal protected messages, to incorporate protected items into Exchange content indexes, and to allow Outlook Web App users to use IRM.\n• None IRM features must be enabled for messages sent to internal recipients (within the same Exchange organization) to allow them to access AD RMS templates. To perform this step, run the Set-IRMConfiguration cmdlet as follows: You can check the IRM configuration with the Get-IRMConfiguration cmdlet.\n\nAfter taking these steps, you can verify that the IRM configuration is valid by running the Test-IRMConfiguration cmdlet. In this example we use two email addresses to verify that prelicensing and journal encryption works:\n\nAfter you are sure that the basic AD RMS configuration is working, you can consider the finer details of your deployment. By default, AD RMS installs a template called Do Not Forward that users can apply to messages to mark them as confidential. A template defines the rights that users have over items to which the template is applied and you might want to create some additional templates to meet business needs within the company. For example, Figure 15-41 shows the properties of a template called Top Secret – Do Not Share as viewed through the AD RMS console. This template is purposely restrictive because we don’t want to allow users to do much except view its contents and reply to the messages that are marked with the template. Behind the scenes the AD RMS server distributes new and updated templates to clients so that they are available for use.\n\nYou can discover the set of templates that are currently defined with the Get-RMSTemplate cmdlet. For example:\n\nFigure 15-42 shows the Top Secret template being applied to a new message with Outlook Web App. The same drop-down menu is used for message classifications, which we discussed earlier in this chapter, so if you define some message classifications, you’ll see them listed here along with AD RMS templates. Once again, this reinforces the necessity for a good naming convention to help users do the right thing.\n\nOnce a template is applied, it remains with the message no matter where it passes through the messaging system. The transport system is able to decrypt protected content. Decryption occurs first in the transport pipeline to ensure that subsequent agents can process the content to apply transport and journal rules. Protected messages can be discovered by mailbox searches so that any relevant protected items are included in the content captured in a discovery mailbox.\n\nThe first time that a client accesses protected content during a session, it contacts Exchange and the AD RMS server to fetch the credentials that are necessary to access protected items. The understandable need to retrieve credentials can slow down access to protected content, especially when the client is separated from the AD RMS server by an extended network connection. Outlook Web App is a lot less obvious than Outlook is when it comes to configuring itself for rights management, as the user will probably be unaware of the work going on behind the scenes. As you can see from Figure 15-43, Outlook 2010 provides the user with a lot more insight about the configuration process.\n\nThe user interface of clients also adjusts to take account of the rights defined in the template. As you can see in Figure 15-44, Outlook Web App has disabled the Forward and Print options because these rights are not allowed for items marked with the Top Secret template. In addition, if you reply to a message the client will not be able to include the text of the original message, as it is protected, so the original message will be added as an attachment to the reply.\n\nYou can also see evidence that the transport system has processed the message because the corporate disclaimer has been appended. We will develop the topic further when we discuss transport rules in Chapter 16 and see how the transport system can automatically apply AD RMS templates to protect confidential information in messages as they pass from user to user.\n\nFigure 15-45 shows how Outlook 2010 displays a protected message (all versions from Outlook 2003 SP2 are able to access protected content). The View Permissions option is accessed by clicking the highlighted bar that shows details of the template that protects the item. When selected, Outlook displays the permissions defined in the template. As you can see from the list, the template applied to this item does not allow users to do much except view or reply to the item. They cannot print, save, export, or even copy the item (and the restriction on copying goes so far as to prohibit any attempt to save a view of the content with a screen capture tool).\n\nUnless they can access the necessary credentials, external recipients won’t be able to access protected content if a user forwards a protected message outside the organization. This is the biggest value of applying protection to messages because it stops users from being able to share confidential or other sensitive information either by accident (forwarding the wrong message or sending it to the wrong recipient) or deliberately. Information leakage is deemed by some companies to be a form of corporate sabotage and carries severe consequences for the responsible employee.\n\nA number of changes are made in Exchange 2010 SP1 to improve the effectiveness of rights protection. Protected attachments can now be read using the Outlook Web App WebReady document viewer. Also, Microsoft now supports IRM between on-premise servers and Exchange running in its Office 365 hosted service. This is accomplished through the Trusted Publishing Domain (TPD) feature that allows the RMS cluster running in the on-premise deployment to trust and use the licenses issued by the Office 365 servers and vice versa. Much the same approach can be taken to deploy federated IRM between two organizations.\n\nAfter a rough start, Microsoft has improved the implementation and capabilities of its rights management solution to a point where it is very usable, providing that you deploy the latest clients. However, the success or failure of any solution that aims to protect confidential material is not dependent on technology alone; it is much more important to achieve strong user buy-in and appreciation of the need to protect the material. Unless this aspect of the project is achieved, it will eventually fail because users will find other ways to share information with each other, maybe by pasting it into Facebook!"
    },
    {
        "link": "https://community.spiceworks.com/t/exmerge-exchange-2010/101595",
        "document": "You can create more than one mailbox export request per mailbox, and each mailbox export request must have a unique name. Microsoft Exchange automatically generates up to 10 unique names for a mailbox export request. However, to create more than 10..."
    }
]