[
    {
        "link": "https://developers.google.com/gmail/api/guides",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nThe Gmail API is a RESTful API that can be used to access Gmail mailboxes and send mail. For most web applications the Gmail API is the best choice for authorized access to a user's Gmail data and is suitable for various applications, such as:\n• Standardization of email signatures across an organization\n\nFollowing is a list of common terms used in the Gmail API:\n\nAn email message containing the sender, recipients, subject, and body. After a message has been created, a message cannot be changed. A message is represented by a message resource. A collection of related messages forming a conversation. In an email client app, a thread is formed when one or more recipients respond to a message with their own message. A mechanism for organizing messages and threads. For example, the label \"taxes\" might be created and applied to all messages and threads having to do with a user's taxes. There are two types of labels: Internally-created labels, such as , , or . These labels cannot be deleted or modified. However, some system labels, such as can be applied to, or removed from, messages and threads. Labels created by a user. These labels can be deleted or modified by the user or an application. A user label is represented by a label resource. An unsent message. A message contained within the draft can be replaced. Sending a draft automatically deletes the draft and creates a message with the system label. A draft is represented by a draft resource.\n• None To learn about developing with Google Workspace APIs, including handling authentication and authorization, refer to Get started as a Google Workspace developer.\n• None To learn how to configure and run a simple Gmail API app, read the Quickstarts overview."
    },
    {
        "link": "https://developers.google.com/workspace/add-ons/gmail",
        "document": "The purpose of many emails is to get the recipient to do a specific task or reach a goal, such as adding a calendar event, filling out a form, making a reservation, or using other applications. However, recipients then have to complete the task without any further prompting, often doing a number of manual steps.\n\nYou can save time and effort for your users by automating these tasks with Google Workspace add-ons. When a user reads or composes a message in Gmail, a Google Workspace add-on can present an interactive, customized UI that lets the user act on the message in various ways, such as by:\n• Displaying additional information for the user in the Gmail UI.\n• Connecting to non-Google services, to retrieve information or take other actions.\n• Providing the means to control the add-on behavior or send information to another service.\n\nGoogle Workspace add-ons can define the following kinds of extensions within Gmail:\n• Contextual interfaces that appear when users open Gmail messages.\n• Contextual interfaces that appear when a user composes a message or reply.\n• Automatically create new message drafts in response to user interactions.\n\nIn addition, Google Workspace add-ons that extend Gmail do so on both desktop and mobile clients.\n\nGmail supports displaying Google Workspace add-on homepages. To show your add-on's common homepage in Gmail simply make sure there is a field in the add-on's manifest.\n\nAlternatively, add a to the add-on manifest to provide a Gmail-specific homepage.\n\nIn either case, you must provide the name of a homepage trigger function in your add-on's script project. This function is automatically called to build the Gmail homepage when it is needed. You must implement this function to build and return a single or an array of objects that make up the homepage. The homepage trigger function is passed an event object as a parameter that contains some general information such as the client's platform. You can use the event object data to tailor the construction of the homepage.\n\nSee what you can make\n\nGoogle Workspace add-ons are built using Apps Script, and their interfaces defined using the Apps Script Card service. See Building Google Workspace add-ons for an overview. Google Workspace add-on behavior is configured using a manifest, which includes Gmail-specific sections.\n\nWhen configuring your Google Workspace add-on to extend Gmail, you must decide what interfaces to create for your add-on and what actions it can take. See the following guides for more information:"
    },
    {
        "link": "https://stackoverflow.com/questions/23174710/how-to-develop-chrome-extension-for-gmail",
        "document": "I'm thinking about developing Chrome extension for Gmail and I want to know what are the current best practices.\n• attaching a GPG signature by default to every email\n• adding an extra button that does something (I have it already)\n• hijacking action of sending email and prompting me to do complete something\n\nThere are quite a few notable extensions that significantly augment gmail functionality:\n\nOne option would be to peek into their source which is located here\n\nBut maybe there is (wishful thinking) a good tutorial / set of practises on how to fiddle with gmail UI and functionality?\n\nGmail extension/gadget API - how to add a button to the compose toolbar?\n\nHow to build a chrome extension to add panel to gmail windows?\n\nThe greatest long-term challenge you will face is that gmail's layout will change unexpectedly and break email discovery or the modified UI. Both issues either require some cleverness to solve, or will require you to stay up at night wondering whether Google will suddenly break your extension.\n\nThey're all building out complex APIs with similar functionality, that can all break independently if Gmail decides to significantly change their app structure (which they inevitably will). Gmail runs its code through the closure compiler, thereby obfuscating everything. On top of that, Gmail is probably one of the most sophisticated javascript apps out there.\n\nLibrary by the founder of Parse - https://github.com/jamesyu/gmailr - but haven't updated in 1.5 years.\n\nI can show you what I got so far, and just so know I don't particularly like selectors like\n\nNote: http://anurag-maher.blogspot.co.uk/2012/12/developing-google-chrome-extension-for.html (he also does it, he also uses such an obfuscated selectors)\n\nThere are Sidebar Gadgets and Contextual Gadgets but they don not offer what I want to achieve.\n\nhttps://groups.google.com/forum/#!forum/gmail-labs-suggest-a-labs-feature It seems like the ability to develop Gmail Labs is locked to Google employees.\n\nSo yes, I would really like to know if there are any tutorials / reference materials out there?"
    },
    {
        "link": "https://mailmeteor.com/blog/gmail-api",
        "document": "Did you know that you can send emails via the Gmail API? Google is the largest email service provider outside of the Apple ecosystem. Businesses and developers who want their emails to land in a mailbox without getting caught in spam filters can use the Gmail API and take advantage of Google’s trusted reputation in the email world to do just that.\n\nThe Gmail API provides RESTful endpoints for sending, reading, organizing, and sorting email messages. But setting it up properly is a task and then some, and that is exactly what we will be doing in this step-by-step guide.\n\nIn this guide we will go over:\n• When should you use the Gmail API?\n\nLet us begin by first addressing the 4-character elephant in the room, SMTP.\n\nThe only thing that really matters is being aware of the specific requirements of your application and the complexity of the actions which you will be performing.\n\nThe Gmail API provides advanced capabilities for managing your entire mailbox, accessing user data, and offers better security through the OAuth 2.0 authentication framework. It is particularly suitable for applications that require a more intricate connection with Gmail, such as reading and sorting emails, managing labels, or automating inbox organization.\n\nOn the other hand, SMTP offers a simpler, more universally compatible method for sending emails. It is ideal for basic use cases such as sending alerts or notifications without the need for complex authentication processes, nothing else. Understanding these differences can help developers choose the most appropriate approach for their needs.\n\nNow that we are all on the same page, let us begin.\n\nHere is everything that we will be covering in this guide:\n• Google Cloud Console – The dashboard through which all Google products, costs, and documentation is accessible.\n• Cloud Project – We will be setting up a project under which this API access will be granted.\n• Enabling Gmail API – So that requests go through instead of being auto-rejected by Google.\n• Authentication – We will be using OAuth 2.0 for this, we will explain why when we get to it.\n\nWe will then share some sample code in Python just to explain how everything works, ready?\n\nThe Google Cloud Console is a web-based platform which provides developers with a single dashboard to manage and monitor their Google Cloud resources, services, billing, and access to APIs.\n\nTo put it simply, if you need to use a Google service as a developer, then you need to go to the Google Cloud Console. In this case, it is the only way to access the Gmail API, as you must create and configure a project to obtain the necessary credentials and permissions for building and running applications that interact with Gmail.\n\nVisit https://console.cloud.google.com/ and sign in to your Google account.\n\nIf this is the first time you are signing up, you will have to accept some terms and conditions, we are assuming you can get through those on your own.\n\nA Google Cloud Project is a container that holds all the products and configurations associated with a specific application or service within the Google Cloud platform.\n\nEach project is its own distinct space, letting you manage resources such as APIs, virtual machines, databases, and storage. Developers can therefore organize and control their applications efficiently by splitting them into multiple projects.\n\nProjects also help manage permissions and quotas, ensuring that users can securely collaborate and develop applications within defined boundaries. So, let us create a project.\n\nClick the “Select a project” button on any page to open the project overview. Once you are here, click the “New Project” button near the top-right of the pop-up window.\n\nOver here you should provide an appropriate name for your project, if access to this API is part of another application, then simply provide the app’s name.\n\nThere is no need to select an organization (location) but if you are a developer working on this for an organization, you should absolutely select it! In case you do not see the organization, make sure the organization owner has added you as a user and that you have the appropriate privileges to set up this project.\n\nOnce you have created the project, select it as the active project if it has not been automatically selected.\n\nThe Gmail API is one of the many products listed on Google Cloud Console. It provides developers with the tools needed to integrate and interact with various Gmail functionalities.\n\nThis is the product we are interested in for this article, as it lets developers manage settings and generate the authentication credentials required to access and utilize Gmail services. If you want to be sending emails, reading messages, and organizing inboxes for other users, you need this.\n\nVisit the Gmail API product details page on Google Cloud Console. Do note that you can find the latest product documentation and API references over here as well in case you ever get lost.\n\nClick the “Enable” button to grant your newly created project access to this product.\n\nAuthentication credentials are the next big thing, because they ensure secure access to the Gmail API by verifying the identity of the application and the user attempting to interact with the service.\n\nGo to the Credentials page to begin: https://console.cloud.google.com/apis/credentials\n\nIn case you are not already on this page, on the left sidebar from the APIs and services page, click on “Credentials.”\n\nIn the top menu, click on the “+ Create Credentials” button to open a drop-down, then select “OAuth client ID”\n\nWhy are we using OAuth client ID? Because it is the preferred authentication method when you need secure authorization between an application and a users’ Google accounts. It lets a user grant access to their Gmail data without sharing their passwords.\n\nIn the future if the user ever changes their mind, they can safely revoke permissions when needed, less headaches for you and more security for your users.\n\nOnce more, if this is your first time using OAuth then you will be forced to configure a consent screen. Click on the “Configure Consent Screen” button to continue.\n\nIf this is an internal app that will only be accessible to users in your organization, set the Audience as Internal and skip all the headaches. Keep in mind that only users with a Google Workspace account can create Internal apps.\n\nIf this is a public facing app then you need to set this as an External app. We will be setting our app up as an external app, just so we can guide you through the various steps properly.\n• OAuth Consent Screen – This step decides what the infamous Google OAuth Screen will look like to users. Provide your logo, relevant links, and the authorized domains for your app. Keep things neat and simple!\n• Scope – Set the permissions that you will be requesting from the user, some of these are incredibly restricted, while others are non-sensitive.\n• Users will be able to view all the permissions that you are requesting, and these permissions will be used by the Gmail API to access the user’s Google account.\n• We skipped the most dangerous permission labeled “Manage your sensitive email settings, including who can manage your email” and we recommend you skip this too.\n• Test Users – Add yourself to this, and anyone else who will be using this app, while the app is in the test phase, only people in this list will be able to access the Gmail API.\n• Summary – And we are finally done, it is now time to use this API.\n\nWe return to the credentials page once more to generate an OAuth client ID after creating a consent screen.\n\nAssuming you have set up the consent screen properly, you will be able to finally create an OAuth client ID for your application.\n\nSelect the application type that you will be using. You will be asked for some additional information depending on what you provide over here. For example, a web application is required to provide the following information.\n• Authorized JavaScript Origins – These are needed for ensuring that requests made from web applications are legitimate and come from trusted sources. This will help prevent cross-origin attacks, but do not protect against them entirely.\n• Authorized Redirect URIs – These are critical in the OAuth 2.0 authentication process, as they specify where the authorization server should send users after they successfully log in. The server redirects use a URI with access tokens attached to their request, so this should be a link to a page on your web service where you can properly handle the access tokens.\n\nFor Python however, you need to select a Desktop application instead, no need to worry if you make a mistake though, since you can always create additional OAuth client IDs whenever needed.\n\nOur advice would be to create a new OAuth client ID for each of your clients, so your mobile and web apps should be using different client IDs, while your desktop app would use a third one.\n\nKeep the Client ID and Client secret safe, the ones we are showing here have already been deleted which is why it is okay for us to show these to you.\n\nClick the Download JSON button right underneath the credentials table, we will need this file in the next guide.\n\nWe are assuming you already know how to create and activate a python virtual environment for this project. There are only two commands that you need anyway, so we might as well give you a quick cheat sheet.\n• Using a terminal, browse to the folder where this project will live.\n• If you are on windows, run “py -m venv venv” to create a virtual environment in a folder called venv.\n• Once created, run “venv/scripts/activate” to enable this virtual environment.\n• Run “deactivate” if you ever want to exit the virtual environment.\n\nGoogle provides a Quick Start guide for Python, we will be using that over here.\n\nWith the above virtual environment activated, run the following command:\n\nThis will install all the python packages we need for this guide, all of these are managed and maintained by Google so there should be nothing to worry about when adding these to your project.\n\nCreate a file called “quickstart.py” in the same folder where you ran the above commands, add the following code to it. This code is directly from Google’s Quick Start guide and we are only using it to make sure that everything works as intended.\n\nRemember that file we downloaded after creating our OAuth client ID? If you forgot to download the JSON then go back to APIs and Services -> Credentials -> Download OAuth client to do so.\n\nMove the downloaded file to your project folder and rename it to credentials.json since that is what our python code will be looking for.\n\nNext up, we need to see if this works. With the virtual environment activated, type “py quickstart.py” while in the folder with these files.\n\nYou will be prompted to log into your Google account and complete any two-factor authentication process if required. Keep in mind that at this stage, only users in the “Testers” list in the Consent Screen configuration will be able to access this app.\n\nOnce authenticated, you will find a list of all your labels printed out in the terminal window.\n\nHere is the code that is responsible for fetching and printing the list of labels that is being fetched from Gmail.\n\nWhile we did select multiple permissions when creating the consent screen, this scope is what determines the permissions which we will request from the user. This example only covers ‘gmail.readonly’ so we will be sticking with this.\n• We wrap the entire section in a “try” block to catch any errors.\n• The “build” method is responsible for initial communication and authentication with the Gmail API, once evaluated it returns the Gmail API service which you can interact with.\n• The Gmail API service then lets us access the various REST resources. In this example, we are simply accessing a list of labels from the current user.\n• And finally we simply loop over the list and output the label names.\n\nYou can find complete documentation of the Gmail API and all the REST Resources you can access over here: https://developers.google.com/gmail/api/reference/rest\n\nLet us look at some of the key resources and code snippets that may be helpful.\n\nSomething that may seem complicated at first, but is essential to build a basic understanding of how the Gmail API service functions.\n• We call the API service in the same manner as we previously did.\n• This time we are calling “service.users().messages()” instead of labels.\n• Next, we filter these by a query using the “list()” method. Gmail has incredibly powerful search filters and you can take advantage of the same filters over here as well.\n\nBut the list we get from this query does not have any details, it is just a list of message and thread IDs. Which is why we need to fetch each of the messages again via the API service in our for-loop.\n\nTime to get a little serious, first: we will be updating our scopes.\n\nWe need to delete the “token.json” file when updating scopes since that file has our old permissions and we need additional privileges now. You will be required to sign in again this time.\n\nWe will also need to import some new packages for our project, because the message object needs to be properly encoded before we send it off to the Gmail API.\n\nIf everything went well, you should see a message ID printed in the console and receive an email like this:\n\nSome key pointers that you should remember:\n• The “me” string acts as a special placeholder that is automatically replaced by the currently authenticated user’s default “send as” address.\n• If you have multiple “send as” addresses, then you can use those instead of “me” over here and Gmail will properly send your email as the requested sender.\n\nThis is not everything that you can do with the Gmail API, it lets you:\n• Create and manage email drafts, to be sent later.\n• You can filter emails as perfectly as you could with Gmail’s own powerful filters.\n• All other Gmail features such as attachments are still usable.\n• Receive push notifications from Gmail to know when an update is required.\n• Manage email labels and pretty much every relevant setting in the Gmail web application.\n\nJavaScript can be used to create web applications that connect to the Gmail API for managing emails. There is no limitation on what can and cannot be done using JavaScript, except that you will be able to make a custom interface for your clients.\n\nKeep in mind that JavaScript can also operate within server-side environments using Node.js and communicate directly with the Gmail API, keeping everything secure in the process while also keeping your code away from the frontend.\n\nIf you are more interested in providing server-side functionality, then look at Node.js instead:\n\n https://developers.google.com/gmail/api/quickstart/nodejs\n\nJava is one of the most robust server-side programming languages out there. You can certainly use it for building applications that connect to the Gmail API for managing emails, automating tasks, and integrating Gmail functionalities within larger systems. Its strong typing capabilities make it suitable for handling complex email operations, ensuring that API interactions remain seamless.\n\nAdditionally, keep in mind that Java code can easily be repurposed for Android applications too, opening up new avenues for those interested in building a productivity app or two.\n\nFor further guidance, refer to Google’s quick start guide for Java:\n\n https://developers.google.com/gmail/api/quickstart/java\n\nApps Script is a powerful scripting language based on JavaScript that allows developers to automate tasks and extend the functionality of Google Workspace applications, including Gmail.\n\nIf you have seen a powerful Workspace extension marketed at you, odds are high that App Script was involved in one way or another. App Script is also particularly useful for business automation and improving productivity across your entire team with minimal coding.\n\nFor more information and to get started, check out Google’s quick start guide for Apps Script:\n\n https://developers.google.com/gmail/api/quickstart/apps-script\n\nGo (or Golang) is an efficient, statically typed programming language that also has a quick start guide for you to start scratching around with. Building scalable server-side applications is the name of the game, and if you already have a monolith that needs access to some Gmail accounts, this is the perfect starting point for you.\n\nThe simplicity and performance of Go allow for the creation of high-performance applications, a little bit of extra overhead due to the Gmail API would go unnoticed.\n\nFor further guidance, refer to Google’s quick start guide for Go:\n\n https://developers.google.com/gmail/api/quickstart/go\n\nWhen should you use the Gmail API?\n\nHopefully, you understand by now that the Gmail API is an excellent solution for developers and businesses interested in integrating Gmail functionality into their applications. It provides robust capabilities that let you manage Gmail accounts programmatically, letting you build automation tools and provide value in the process.\n\nHere are some common use-cases for leveraging the Gmail API:\n• Email Scheduling: Automatically send emails for notifications, reminders, or marketing campaigns directly from within your software.\n• Inbox Management: Retrieve, read, and organize emails, you can also mark messages as read, archive them, and automatically trash or label them based on different criteria. Many Gmail extensions and software suites implement the Gmail API to provide their features.\n• Personalized Messages: Does your software already have the recipient’s email address? Your developers can set up automated emails based on user engagement and actions if necessary.\n\nBut keep in mind that the effort required to go through this process is only necessary in three scenarios:\n• If you are interested in building an app for your internal business use.\n• If you are developing a platform that helps other people manage or automate their Gmail accounts.\n• If you find yourself doing tedious and repetitive tasks and would like to automate the process."
    },
    {
        "link": "https://codelabs.developers.google.com/codelabs/gmail-add-ons",
        "document": "As you work through this codelab, it might be helpful to reference a working version of the code you'll write. The GitHub repository contains sample code that you can use as a reference. To get the sample code, from the command line, run:\n\nStart by writing the code for a simple version of the add-on that displays an expense form alongside an email. First, create a new Apps Script project and open its manifest file.\n• Navigate to script.google.com. From here, you can create, manage, and monitor your Apps Script projects.\n• To create a new project, at the top left, click New Project. The new project opens with a default file named . Leave alone for now, you'll work with it later.\n• Click Untitled project, name your project Expense It!, and click Rename.\n• To open the manifest file, at the left, click . In , specify the metadata associated with the add-on, such as its name and the permissions it requires. Replace the contents of with these configuration settings: Pay special attention to the portion of the manifest called . This part of the manifest identifies the user-defined function to call when the add-on is first activated. In this case, it calls , which gets details about the open email and returns a set of cards to display to the user. To create the function, follow these steps:\n• At the left, hold the pointer over , then click Menu > Rename.\n• Type and press the key. Apps Script automatically appends to your file name, so you don't need to type a file extension. If you type then Apps Script names your file .\n• In , replace the default code with the function: Every Google Workspace Add-on's add-on's user interface consists of cards split into one or more sections, each containing widgets that can display and get information from the user. The function creates a single card that gets details about an expense found in an email. The card has one section containing text input fields for relevant data. The function returns an array of the add-on's cards. In this case, the returned array includes just one card. Before deploying the Expense It! add-on, you need a Google Cloud Platform (GCP) Project, which Apps Script projects use to manage authorizations, advanced services, and other details. To learn more, visit Google Cloud Platform Projects. To deploy and run your add-on, follow these steps:\n• Open your GCP project, and copy its project number.\n• From your Apps Script project, at the left, click Project Settings .\n• Ensure that the deployment type is Google Workspace Add-on. If necessary, at the top of the dialog, click Enable deployment types and select Google Workspace Add-on as the deployment type. Now you can see the add-on in your Gmail inbox.\n• On the right side panel, the Expense It! add-on appears. You might need to click More Add-ons to find it.\n• To open the add-on, in the right side panel, click Expense It! .\n• Give Expense It! access to your Google account by clicking Authorize Access and follow the prompts. The add-on shows a simple form alongside an open Gmail message. It doesn't do anything else yet, but you'll build out its functionality in the next section. To see updates to your add-on as you continue through this lab, you only need to save your code and refresh Gmail. No additional deployments are needed.\n\nAdd code that fetches email content and modularize the code for a bit more organization. Next to Files, click Add > Script and create a file named . Create a second script file called . creates the card and uses functions from to populate fields in the form based on the content of the email. Replace the default code in with this code: * Creates the main card users see with form inputs to log expenses. * Form can be prefilled with values. * Creates form section to be displayed on card. * @param {CardSection} section The card section to which form items are added. * @param {String[]} inputNames Names of titles for each input field. The function takes an array of values to prefill the form as an optional argument. The function can display an optional status message, which is colored red if the status begins with \"Error:\", and is otherwise green. Instead of adding each field to the form manually, a helper function called loops through the process of creating text input widgets, sets each default value with , and then adds the widgets to their respective sections on the card. Now, replace the default code in with this code: The functions in get called by to determine the prefilled values on the form. For now, these functions will only return the string \"TODO\" because you'll implement the prefill logic in a later step. Next, update the code in so that it leverages the code in and . Replace the code in with this code: Note the new function, which uses the event supplied by Gmail to read the user's currently open message. In order for this function to work, add an additional scope to the script manifest that allows read-only access to Gmail messages. In , update the so that it also requests the scope. In Gmail, run your add-on, and authorize access for Expense It! to view email messages. The form fields are now prefilled with \"TODO\".\n\nThe Expense It! add-on has a form for the user to enter details about an expense, but those details have nowhere to go. Let's add a button that sends the form data to a Google Sheet. To add a button, we'll use the ButtonSet class. To interface with Google Sheets, we'll use the Google Sheets service. Modify to return a button labeled \"Submit\" as part of the form section of the card. Take the following steps:\n• Create a text button using , labeling the button \"Submit\" using .\n• Design the button such that when it is clicked the following action gets called via : * Logs form inputs into a spreadsheet given by URL from form. * @param {Event} e An event object containing form inputs and parameters. * Returns an array corresponding to the given object and desired ordering of keys. * @param {Object} obj Object whose values will be returned as an array. * @param {String[]} keys An array of key names in the desired order.\n• Create a button set widget using and add your text button to the button set with .\n• Add the button set widget to the form section of the card using . In just a few lines of code, we are able to open a spreadsheet by its URL and then append a row of data to that sheet. Note that the form inputs get passed into the function as part of the event , and we check that the user has provided all fields. Assuming no errors occur, we create a blank expenses card with a favorable status. In the case that we catch an error, we return the original filled card along with the error message. The helper function makes it easier to convert the form responses into an array, which can then be appended to the spreadsheet. Lastly, update the section in again request the scope . When authorized this scope lets the add-on read and modify a user's Google Sheets. If you haven't already created a new spreadsheet, create one at https://docs.google.com/spreadsheets/. Now re-run the add-on and try submitting the form. Ensure that you enter the full URL of your destination URL into the Spreadsheet URL form field.\n\nOften times, users will log many expenses to the same spreadsheet, so it would be convenient to offer the most recent spreadsheet URL as a default value in the the card. In order to know the most recent spreadsheet's URL, we'll need to store that information every time the add-on is used. The Properties service lets us store key-value pairs. In our case, a reasonable key would be \"SPREADSHEET_URL\" while the value would be the URL itself. To store such a value, you'll need to modify in such that the spreadsheet's URL gets stored as a property upon appending a new row to the sheet. Note that properties can have one of three scopes: script, user, or document. The document scope does not apply to Gmail add-ons, although it is relevant to a separate type of add-on when storing information specific to a particular Google Doc or Sheet. For our add-on, the desired behavior is for an individual to see their own (as opposed to somebody else's) most recent spreadsheet as the default option on the form. Consequently, we select the user scope instead of the script scope. Use to store the spreadsheet URL. Add the following to in : Then modify the function in to return the stored property such that the user will see the most recent URL every time they use the add-on. Use to get the property's value. Finally, to access the Property service, the script will also need to be authorized. Add the scope to the manifest as before to allow your add-on to read and write property information.\n\nTo really save users' time, let's prefill the form with relevant information about the expense from the email. We already created functions in that play this role, but so far we have only returned \"TODO\" for the date, amount, and description of the expense. For instance, we can get the date the email was received and use that as the default value for the date of the expense.\n• might entail joining both the sender's name and message subject, although there exist more sophisticated ways to parse the message body and deliver an even more accurate description.\n• For consider looking for specific symbols associated with money. Receipts often have multiple values listed, such as taxes and other fees. Think of how you might identify the correct amount. Regular expressions might also be handy. If you need some extra inspiration, explore the reference documentation for or check out the solution code you downloaded at the beginning of the codelab. Once you've devised your own implementations for all the functions in , take your add-on for a spin! Open up receipts and start logging them in a spreadsheet!\n\nWhat happens if Expense It! misidentifies an expense in an open email and prefills the form with incorrect information? The user clears the form. The CardAction class lets us specify a function that gets called when the action is clicked. Let's use it to give the user a quick way to clear the form. Modify such that the card it returns has a card action labeled \"Clear form\" and when clicked calls the following function, which you can paste into . You will need to pass in as a parameter named \"Status\" to the action to ensure that when the form is cleared the status message remains. Be mindful that optional parameters for actions must be of the type Object.<string, string>, so if is not available, you should pass ."
    },
    {
        "link": "https://developers.google.com/gmail/api/reference/quota",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nThe Gmail API is subject to usage limits which restrict the rate at which methods of the API can be called. Limits are defined in terms of quota units, an abstract unit of measurement representing Gmail resource usage. There are two usage limits which are applied simultaneously: a per project usage limit and a per user usage limit. The following table details these usage limits:\n\nThe number of quota units consumed by a request varies depending on the method called. The following table outlines the per-method quota unit usage:"
    },
    {
        "link": "https://support.google.com/a/answer/166852?hl=en",
        "document": "To keep systems healthy and accounts safe, Google limits the number of Gmail messages users can send per day, and the number of recipients per message.\n\nIf your users exceed an email sending limit, they’ll get an error message, such as:\n• You have reached a limit for sending email.\n\nAfter reaching one of these limits, users can't send new messages for up to 24 hours. However, they can still access their Google Workspace account, get incoming email, and use their other Google services. After the suspension period, sending limits are reset and users can resume sending mail.\n\nYou can try Google Workspace with a .\n\nSending limits can change without notice. Limits per day are applied over a rolling 24-hour period, not a set time of day.\n• Messages sent from a user's alternate address, or alias\n• Sending limits are different if your organization uses the SMTP relay service to route outgoing mail through Google. Instead, go to sending limits for the SMTP relay service.\n• Quotas might be different if you're using Google Apps Script.\n• The Google Groups for Business service has its own Gmail message and posting limits.\n\nWhen you use the Gmail for mobile app in Google Sync mode, the same Sending limits apply as when you use Gmail in a web browser.\n\nWhen you use the Gmail for mobile app in IMAP mode, the SMTP sending limits apply.\n\nIf a user exceeds their sending limits, their account might be suspended. To get details about the number of messages a user has sent and received, follow the steps for Gmail in User reports: Apps usage.\n\nYou might be able activate a suspended account by following the steps in Restore a suspended Gmail account.\n\nUser accounts that send spam might be permanently restricted from sending email. For details, go to Google's Spam and abuse policy.\n\nTo help reduce the likelihood that Gmail blocks your messages or marks your messages as spam, follow the requirements and guidelines in Email sender guidelines."
    },
    {
        "link": "https://stackoverflow.com/questions/24588936/gmail-api-limitations-for-getting-mails",
        "document": "As I understand currently google's API provides 10 requests per second to its API (from their docs), and it looks to be far from enough for comfortable work with mail. I need to get all emails' headers (or at least senders and recipients). Is there anything better than waiting seconds?\n\nI'm currently accessing API from client side JavaScript application, I'm thinking of distributing API calls for the same user over a number of machines/applications, but's still unclear if their limits apply to gmail user or registered application.\n\nAnyway, hope to get some ideas what to do with it, with current quota it's completely not usable."
    },
    {
        "link": "https://developers.google.com/gmail/api/guides/sending",
        "document": "Save and categorize content based on your preferences.\n\nStay organized with collections Save and categorize content based on your preferences.\n\nThere are two ways to send email using the Gmail API:\n• You can send it directly using the method.\n• You can send it from a draft, using the method.\n\nEmails are sent as base64url encoded strings within the property of a message resource. The high-level workflow to send an email is to:\n• Create the email content in some convenient way and encode it as a base64url string.\n• Create a new message resource and set its property to the base64url string you just created.\n• Call , or, if sending a draft, to send the message.\n\nThe details of this workflow can vary depending on your choice of client library and programming language.\n\nThe Gmail API requires MIME email messages compliant with RFC 2822 and encoded as base64url strings. Many programming languages have libraries or utilities that simplify the process of creating and encoding MIME messages. The following code examples demonstrate how to create a MIME message using the Google APIs client libraries for various languages.\n\nCreating an email message can be greatly simplified with the class in the package. The following example shows how to create the email message, including the headers: /* Class to demonstrate the use of Gmail Create Email API */ * @param fromEmailAddress email address of the sender, the mailbox account * @return the MimeMessage to be used to send email The next step is to encode the , instantiate a object, and set the base64url encoded message string as the value of the property. /* Class to demonstrate the use of Gmail Create Message API */ * @param emailContent Email to be set to raw of message The following code sample demonstrates creating a MIME message, encoding to a base64url string, and assigning it to the field of the resource: for guides on implementing OAuth2 for the application.\n\nCreating a message with an attachment is like creating any other message, but the process of uploading the file as a multi-part MIME message depends on the programming language. The following code examples demonstrate possible ways of creating a multi-part MIME message with an attachment.\n\nThe following example shows how to create a multi-part MIME message, the encoding and assignment steps are the same as above. /* Class to demonstrate the use of Gmail Create Draft with attachment API */ * @param fromEmailAddress - Email address to appear in the from: header. * @param file - Path to the file to be attached. guides on implementing OAuth2 for your application.*/ // Encode and wrap the MIME message into a gmail message Similar to the previous example, this example also handles encoding the message to base64url and assigning it to the field of the resource. for guides on implementing OAuth2 for the application. \"Hi, this is automated mail with attachment.Please do not reply.\" file: The path to the file to be attached. A MIME part that can be attached to a message.\n\nOnce you have created a message, you can send it by supplying it in the request body of a call to , as demonstrated in the following examples.\n\n/* Class to demonstrate the use of Gmail Send Message API */ * Send an email from the user's mailbox to its recipient. * @param fromEmailAddress - Email address to appear in the from: header * @return the sent message, {@code null} otherwise. guides on implementing OAuth2 for your application.*/ // Encode and wrap the MIME message into a gmail message for guides on implementing OAuth2 for the application.\n\nIf you're trying to send a reply and want the email to thread, make sure that:\n• The and headers follow the RFC 2822 standard.\n\nFor information on sending a message from a draft, see Creating Drafts."
    },
    {
        "link": "https://mailtrap.io/blog/send-emails-with-gmail-api",
        "document": "Gmail is one of the most popular email services, and you very well may want to use it as a mailbox for your web or mobile app. It is safe and credible, which is crucial to preventing your emails from going into the spam folder. That’s why we decided to flesh out how to send emails with Gmail API.\n\nGmail API – why you should consider using it\n\nThe API provides you with a RESTful access to the features you usually have with Gmail:\n• CRUD (create, read, update, and delete) operations with messages, drafts, threads, and labels\n\nDevelopers love Gmail API because it’s easy to implement. We’ll talk about that a bit later. Also, you can use this option for versatile cases like:\n\nWith Gmail API, you can deal with several resource types and manage them using the following methods:\n\nHow to make your app send emails with Gmail API\n\nIf you want to have access to your Gmail from your mobile or web app, you should start with Google Developers Console. Those who visit this page for the first time ever will have to agree with the and pick their . Then click Select a project and create a new one.\n\nName your new project and press Create at the bottom.\n\nOnce that’s done, you can press the Library tab on the left and find yourself in the API Library page. Enter “ ” in the search bar and click on it once found. Now, you need to enable the API for your project.\n\nNote that you’ll have to enable it separately for each new project you work on.\n\nOnce the API is enabled, you’ll be taken to a nice dashboard that says, “ To use this API, you may need credentials ”. If you click Create credentials, you’ll have to pass through a set of questions to find out what kind of credentials you need. We advise you to go another way since we already know what it is: OAuth client ID. So, click the Credential tab on the left, and then pick OAuth client ID from the drop-down list of the Create Credentials button.\n\nYou’ll see the Configure consent screen button. It will bring you to a page with many fields. You can just enter the name of your app and specify authorized domains. Fill in other fields if you want.\n\nClick save and then pick the type of your app (web app, Android, Chrome App, iOS, or other). After that, name your OAuth Client ID. Also, enter JavaScript origins and redirect domains for use with requests from a browser or a web server, respectively. Click create to finalize. That’s it. Download a JSON file with your credentials – you’ll need it later.\n\nThe next step is to select a quickstart guide according to the technology your app is built with. So far, there are the following options:\n\nFor mobile apps, there are G Suite APIs for iOS and Android as well.\n\nWhat you need first in this quickstart guide is the Prerequisites section. Let’s say your choice is PHP. In this case, make sure your PHP version corresponds to the given one. Also, install the JSON extension and the Composer dependency management tool if you haven’t already. After that, you can install the Google Client Library. For Java, you’ll need to create a new project structure and the src/main/resources/ directory. Then, copy the JSON file with credentials to this directory and replace the content of the build.gradle file with this code. So, pay attention when preparing your project.\n\nRoute your test emails to Mailtrap for safe testing.\n\nGoogle provides client libraries to work with the API:\n\nIn this step, we need to authorize access to your Gmail account from the app, and then you’ll be able to manage emails. For this, you need to create a file in your working directory. Below you’ll find the specific file names for each technology. Copy-paste a corresponding code sample from the chosen Quickstart Guide and run it. Here are the links to the code samples:\n• Run by clicking Start in the Visual Studio toolbar\n• Replace <YOUR_CLIENT_ID> with your client ID and <YOUR_API_KEY> with your API key. Run with:\n\nIt worked… or not. Google will warn you about a probable failure of the sample you run to open a new window in your default browser. If this happens, you’ll need to do it manually. Copy the URL from the console and paste it in the browser. It will look like this:\n\nNext, you’ll be asked to either log into your Google account or select one account for authorization. Press allow and you’ll see all your inbox labels in the SSH shell like this:\n\nCongrats! Gmail API works, and you can send your first email.\n\nTo send a message, first, you need to create one. For this, your app can use the method, which includes:\n• Conversion of the message into a base64url encoded string\n\nLet’s see how this is done in practice with Python:\n\nOnce you have created your message, you can either call or to send it. Here is how it may look:\n\nYou can also create and send a multi-part MIME message. For example, this is how it looks with Python:\n\nTest your emails before they are sent to real users.\n\nIt would be weird if you can’t use the API to read messages from Gmail. Luckily you can by using the method by the message ID. Here is how it may look in a Python app:\n\nIf the message contains an attachment, expand your code with the following:\n\nWhat is a good alternative to sending with Gmail API?\n\nIf you don’t want to use Gmail API, there are alternatives that will send your emails and also help you make sure those emails end up in a recipient’s inbox and not their spam folder.\n\nOne such alternative is Mailtrap Email API – the email-sending solution of the Mailtrap email delivery platform.\n\nYou can use Email API to send emails from any application with a sending throughput of up to ~10000 emails/second. What’s more, this sending solution will allow you to gain more control over your email deliverability.\n\nUsers of Email API have access to a batch of actionable analytics features which you can spot and fix sending issues in the early stages, and these features include:\n• Deliverability alerts – daily and weekly alerts on issues affecting your domain authority and sender reputation.\n• 60-day email logs – message history going up to 60 days back, valuable for inspecting, debugging, and troubleshooting.\n• Webhooks – information about your deliverability provided almost in real-time.\n• Critical metrics dashboards – insights into metrics related to your email performance you can filter by domain, category, and mailbox provider.\n\nEmail API also offers suppression lists, dedicated IPs, auto IP warmups, and more features, all geared toward helping you boost your deliverability.\n\nTo start sending with Email API, you will need to create a Mailtrap account and then complete the processes of adding and verifying your domain, demonstrated in the video below.\n\nWith Email API, you have the option of sending via API or SMTP.\n\nFor sending via API, you will copy an API example code provided to you and run it with your app. The code is generated based on your selection of programming language from a dropdown menu.\n\nFor sending via SMTP, you will need to set up Mailtrap as an SMTP server in your project, app, or email sending service by using the SMTP credentials again provided to you by the solution.\n\nAfter the straightforward setup, Email API should be up and running!\n\nFor those of you looking to learn more about Gmail alternatives, Mailtrap has a dedicated video on the topic:\n\nTesting your emails before sending them\n\nRegardless if you decide on sending emails using Mailtrap Email API, Gmail API, a traditional SMTP server, or a different method, you need to test your emails beforehand.\n\nThis way, you can ensure that your email HTML/CSS is being rendered properly, that your email content is not raising any red flags in terms of spam, and that your sending domain isn’t blacklisted.\n\nA testing solution capable of checking all of this and more is Email Sandbox which is also part of Mailtrap’s email delivery platform.\n\nThe way Email Sandbox works is that it captures all SMTP traffic from staging and dev environments in a virtual inbox. You can then inspect and debug all the emails captured before you send them to real recipients. So, in essence, you are testing emails in a safe environment and have no risk of spamming real recipients while you are at it.\n\nWhen using Maitrap Email Sandbox, you have the ability to check the support email clients have for the HTML elements/CSS rules used in your emails, and you can filter the information by device type and email client.\n\nFor each element/rule that is not supported or is just partially supported, you will have a list of email clients having trouble with it as well as a link to the code line containing the element/rule making it easy for you to find and fix the issue.\n\nAlso, as Email Sandbox provides a virtual inbox for you, you will no longer need to test using your personal one, which can be very bad for your domain reputation.\n\nTo start testing your emails with Email Sandbox, you will first need to complete a 5-minute setup.\n\nIn your Mailtrap account, navigate to Email Testing, select your inbox, and under SMTP Settings, you will find the SMTP/POP3 credentials of your virtual inbox, which you can put into your email client or MTA, as well as the email sending configuration code in different programming languages you can paste into your application.\n\nPick one of the options and send your first test email.\n\nOnce the email arrives in your virtual inbox, you can start with inspecting and debugging to make sure it looks exactly the way you intended it to when it reaches recipients.\n\nWhy is Gmail API better or worse than traditional SMTP?\n\nSimple Mail Transfer Protocol (SMTP) is a set of rules for sending emails either from the sender to the email server or between servers. Most email service providers use SMTP to send emails and POP3/IMAP4 to receive them. To learn more about these protocols, you can read our IMAP vs. POP3 vs. SMTP blog post. Google also provides the Gmail SMTP server as a free SMTP service. Application Programming Interface (API) is an interaction channel used by apps, platforms, and codes to reach each other. With Gmail API, you can send emails using only HyperText Transfer Protocol (HTTP), a set of rules that defines how messages are formatted and transmitted.\n\nHow are emails sent?\n\nYou can call the API from the app to communicate with an email service that is used to send emails from another server.\n\nFor SMTP, a client establishes a TCP connection to the SMTP server and transfers an email. After authorization, the server sends the email to the recipient’s SMTP server, which, in turn, forwards it to the IMAP4 or POP3 server. Client and server communicate with each other using SMTP commands and responses.\n\nGmail API uses open authentication (Oauth2), which only lets you request the scope of access you need. SMTP provides full access to the account using client login and password SMTP authentication.\n\nThe usage limit of Gmail API is one billion quota units per day. Each method requires a particular number of quota units. For example, a drafts.create is 10 units and a messages.send is 100 units. Gmail API enforces standard daily mail sending limits. Also, keep in mind that the maximum email size in Gmail is 25MB.\n\nEach option has its own pros and cons. SMTP is a widely adopted and easy-to-set-up solution to send emails. Moreover, you don’t need any coding skills to handle stuff. Also, you can benefit from using a fake SMTP server such as Mailtrap as a playground for safe email testing.\n\nBesides, it is a great option to automate processes and provide a wide range of functionality for the app. Also, API can boast an extra level of security, which is crucial if you deal with sending sensitive data in emails."
    },
    {
        "link": "https://stackoverflow.com/questions/20499225/i-need-a-nodejs-scheduler-that-allows-for-tasks-at-different-intervals",
        "document": "I am looking for a node job schedule that will allow me to schedule a number of tasks at different intervals. For instance,\n\nI also want to be able to start and stop the process.\n\nSo far, I have looked at:\n• None later - the syntax confuses me, also apparently you cant schedule tasks beyond a month\n• None agenda- seems the most promising, however I'm confused about the database functionality\n• None timeplan - too simple, can't start and stop\n\nI find the syntax of the latter confusing."
    },
    {
        "link": "https://uptimia.com/learn/schedule-cron-jobs-node-js",
        "document": "Cron jobs are tasks set to run by themselves at certain times or intervals. They help with doing repetitive tasks automatically, like backing up data, sending emails, and updating systems. In Node.js, cron jobs can make tasks in applications run by themselves, making things more efficient and reliable. Node.js gives a good way to set these tasks through different libraries and tools. Unlike the old way of setting cron jobs on Unix-based systems, which needs changing crontab files on the server directly, Node.js lets developers set jobs within their applications. This method makes automating tasks easier and fits well with the application's other parts. When we compare the old way of setting cron jobs with using Node.js, we see that Node.js is better because it's more flexible, easier to use, and works better with other parts of applications. While the old methods are still good for scheduling tasks at the system level, Node.js offers a better choice for automating tasks specifically for applications.\n\nCron jobs are commands set to run automatically at scheduled times. They come from the Unix cron scheduler, a job scheduler in Unix-like systems. Now, cron jobs are used in many applications, including Node.js projects. They automate tasks that need to run at certain times or intervals. This includes data backups, sending emails, or updating website content. In web applications, these automated tasks are important for efficiency and reliability without needing someone to do them manually. Cron jobs use a special syntax called a cron expression for scheduling. A cron expression has five or six fields separated by spaces that represent time units:\n• Day of the week (0 - 7) where both 0 and 7 mean Sunday You can add an optional field for seconds at the start for more precise timing. Fields can have numbers or special characters like \"*\", \"-\", \",\", \"/\", which let you specify multiple values, ranges, increments, etc., making complex schedules easy to express. For those new to this syntax or needing help with specific schedules, tools like Cron Expression Generator offer an easy way to understand and make cron expressions with examples for common scheduling needs.\n\nSetting Up Your First Node.js Cron Job Before you start, make sure Node.js is installed on your computer. You can download it from the official website. After installing, use npm (Node Package Manager) to install libraries for cron jobs. node-cron is a popular library for scheduling tasks in Node.js applications. To install , run this command: This command adds to your project, allowing you to schedule jobs. To use , first check if your script runs correctly by using: If it works, you can schedule it with . Here's how to log \"Hello World\" every minute: Always test scripts before scheduling them because they might act differently when run by the scheduler. The library uses JavaScript's event loop, so it schedules tasks without stopping other operations. It uses crontab syntax but is more flexible and integrates better with Node.js applications than traditional crontab files. With , you define and manage tasks in code, which lets you change them based on what your application needs or what users do. If you have root access on a Linux system, you can create an application-specific crontab file in . This method works for schedules that apply to all users but requires careful handling of permissions and paths. Here’s how to add an entry in : This schedules your script to run as root at midnight every day and logs output and errors into . If you don't have root access or prefer not using it, user crontabs are another option: This way, the task runs under your user account without needing special permissions and logs output correctly.\n\nWhen you set up cron jobs in Node.js, it's important to manage environment variables and configurations. These settings can change how your scheduled tasks run in different environments like development, testing, and production. To manage environment variables for cron jobs, use the dotenv package. This lets you keep configurations in an file that your Node.js application reads when it starts. Here's how to do it:\n• Create a file in your project root with your settings:\n• Load at the start of your script: For timezone management with node-cron, this is important for applications that work across different time zones. The node-cron library lets you set a timezone for each job using the option: const cron = ( ); cron.schedule( , { .log( 'This runs every minute in the specified timezone.' ); }, { timezone: }); This makes sure that no matter where your server is or what its system time is set to, tasks run based on the specified timezone. Dynamic scheduling lets you add or remove tasks while your application is running without restarting it or manually editing crontab files. Here’s how to dynamically schedule tasks with node-cron: Create a scheduler function that takes parameters like schedule time and task function: You can call this function anytime to change the scheduled task dynamically. To stop or unschedule a task dynamically within your application: This method gives flexibility in managing schedules based on events within your application or user input without needing direct access to server crontab files or restarting services. Using these advanced setting options—environment/configuration management and dynamic scheduling—you make cron jobs more functional and flexible within Node.js applications.\n\nWhen you set up cron jobs in Node.js, you might face some issues that stop your scheduled tasks from running correctly. These problems can include:\n• Incorrect File Permissions: If the script does not have the right permissions, the cron job will not work. This often happens when scripts run well manually but not when scheduled.\n• Path Issues: Cron jobs run in a simple environment, which might not have all the environmental variables you expect. This can cause issues with paths because your script cannot find necessary files or programs due to missing environmental variables or relative paths.\n• Missing Environment Variables: If your script uses environment variables that are only set in your shell (like or custom variables in or ), these will not be available for the cron job.\n• Incorrect Use of Range Values: Not understanding how to use range values correctly in cron syntax can make jobs run too often, not at all, or at unexpected times. To fix these common problems and make sure your Node.js cron jobs work well:\n• Set Correct Permissions: Ensure that the user running the cron job has execute permissions for your script. You can add execute permissions with .\n• Use Absolute Paths: Always use absolute paths in your scripts and when setting them up in crontab entries. This makes sure that no matter what directory is \"current\" for cron's simple environment, it can find your files and commands correctly. Example: Use instead of .\n• Explicitly Set Environment Variables: If specific environment variables are needed for your script:\n• Define them directly in crontab before the command:\n• Or source them from an external file at the start of your script:\n• \n• Use tools like Cron Expression Generator to create and check crontab expressions.\n• Remember ranges ( ) include both endpoints; lists ( ) specify exact values; steps ( ) define intervals; asterisks ( ) mean \"every\". By using these solutions and best practices for setting up Node.js cron jobs, you ensure reliable task automation within applications.\n\nYou can automate tasks like sending emails or fetching data in a Node.js application by scheduling API calls. To do this with , set up the task and then make the API request inside it. For safe API calls, keep sensitive information like API keys in environment variables. This prevents your credentials from being visible in your code. Here is how you can schedule a daily call to an external weather service: In this code, makes HTTP requests, and the weather service's API key is stored in an file. Regularly cleaning up databases helps maintain performance and data accuracy. Cron jobs can automate tasks like deleting old records. Here’s how to set up a weekly cleanup for MongoDB: cron = ( ); mongoose = ( ); cron.schedule( , () => { { mongoose.connection.collection( ).deleteMany({ : { : ( .now() - * * * * ) } }); .log( ); } (error) { .error( \"Failed to clean up old temporary data:\" , error); } }); This script deletes records from the collection that are older than one week. Static schedules might not always fit your needs. You may need schedules that change based on user actions or other conditions within your app. With node-cron, you can create or modify tasks dynamically. Here’s an example where we change task frequency based on system load: In this case, we check the average system load ( ) and decide whether our tasks should run more often under normal conditions or less frequently when under high load. This method offers flexibility and responsiveness for scheduling based on real-time application environment conditions.\n\nGoogle Cloud Scheduler is a service that lets you schedule almost any task. It can work with Node.js projects, giving a way to manage complex schedules or tasks across different systems without needing to handle cron jobs yourself. To use Google Cloud Scheduler in your Node.js application, you first create a cloud function that does the task you want. This could be cleaning up databases, sending emails in batches, or processing data. After deploying your function on Google Cloud Functions, you then use Google Cloud Scheduler to set times or intervals for triggering this function.\n• Writing and deploying your cloud function on the Google Cloud Platform (GCP).\n• Creating a scheduler job in GCP that triggers your cloud function URL at specific times. This method takes the task of scheduling and running tasks off your application's shoulders by using GCP's features for handling large loads and being reliable. Serverless computing platforms like Vercel and AWS Lambda provide ways to run scheduled tasks without directly managing servers. These platforms let you run code based on events, including time-based triggers similar to cron jobs.\n• Vercel: With Vercel, you can deploy serverless functions in Node.js (and other languages) that respond to HTTP requests. To act like cron jobs, services such as EasyCron can call your Vercel functions at set intervals.\n• AWS Lambda: AWS supports scheduling through Amazon CloudWatch Events directly. You can create rules that make your Lambda functions run on a schedule defined by either a fixed rate or a cron expression within AWS. Both options remove the need to manage servers and scaling issues, letting developers focus on writing code for their scheduled tasks instead. The choice between these platforms often depends on things like whether you're already using AWS services, what specific features you need, and personal preference based on ease of use or what you're familiar with. By using external platforms like Google Cloud Scheduler or serverless options such as Vercel and AWS Lambda, developers have more ways to add scheduled tasks into their applications—whether it’s through managed scheduling services or by using serverless architectures for efficient background job execution without having to manage servers directly.\n\nCron jobs in Node.js applications are often used for sending automated emails. For example, you might want to send weekly newsletters automatically. Here's how to do it:\n• Weekly Newsletter: With , you can schedule a job to run every Monday at 9 AM. This job would get new content from your database and put it into an email template. This script uses for emails and assumes functions like and are defined in your application. Monitoring server resources helps keep applications running smoothly. You can automate this with scheduled tasks that collect metrics like CPU usage or memory consumption regularly.\n• Daily Performance Metrics Collection: Schedule a task that collects these metrics daily using Node.js modules or other libraries and saves them or sends them to a monitoring service. This example uses the library for system metrics but only logs them; you'd need storage integration for long-term monitoring. Managing log files is important for tracking application behavior without using too much disk space. Cron jobs can compress old logs and delete very old ones automatically.\n• Daily Log Archiving: A task could compress yesterday's log files every morning when traffic is low.\n• Monthly Log Cleanup: Another task might delete log archives older than six months to prevent data growth. These examples show how Node.js can automate tasks like sending emails, collecting server performance data regularly, and managing application logs through compression and deletion schedules—all essential parts of maintaining web applications with scheduled tasks.\n\nIn this article, we looked at how to schedule and run cron jobs in Node.js applications. We talked about the basics of cron jobs, their syntax, and why they are used. We also showed step-by-step how to set up your first Node.js cron job with the library. We discussed advanced options for scheduling tasks to improve automation in applications. Moreover, we covered common errors and tips for fixing them to make sure scheduled tasks work well. Lastly, we showed real uses of scheduled tasks through examples like sending emails automatically, checking server resources, and managing log files."
    },
    {
        "link": "https://stackoverflow.com/questions/21932269/use-javascript-client-library-to-use-calendar-api-v3-from-chrome-extension",
        "document": "I am trying to create a chrome extension that can add Google calendar events to a person's google Calendar (create one appointment for irregular reoccuring dates).\n\nTo do this I am using oauth 2.0 and I would like to use the javascript Client library to make the required calls.\n\nWhenever I try to use the gapi object, I will receive the error that the object is undefined.\n\nDoes anyone have a good example on how to use the javascript client library in a chrome extension, or a better way to do this?"
    },
    {
        "link": "https://betterstack.com/community/guides/scaling-nodejs/best-nodejs-schedulers",
        "document": "Applications often encounter tasks that can block or degrade performance, such as image and video processing, sending emails or notifications, network requests, or database operations. To prevent these tasks from impeding the application's responsiveness, executed asynchronously in the background.\n\nScheduling libraries are pivotal in allowing tasks to be scheduled for later execution. Numerous scheduling libraries are available in the Node.js ecosystem, each offering a range of features and capabilities to suit different requirements and use cases.\n\nThis article compares ten Node.js scheduler libraries, helping you choose the most appropriate scheduling library for your next project. We will rank them based on features, ease of use, availability of resources, and maintenance of the libraries.\n\nBullMQ is a Node.js library designed for task scheduling and uses Redis to manage distributed jobs within applications or microservices. It creates queues in Redis to store job data, which workers retrieve for execution.\n\nBelow is a basic example demonstrating how BullMQ connects to Redis and creates a queue:\n\nBullMQ allows job scheduling for future execution or at recurring intervals, facilitating delayed and repeatable tasks. This is achieved by adding a job to a queue using the method:\n\nThe function's first argument is the job name, followed by the custom data required for the task. The third argument comprises options such as setting delays, repeating jobs, or adjusting priorities.\n\nHere's an example demonstrating how to add pass data when creating a job:\n\nBullMQ employs workers as separate processes or in multiple servers to handle tasks, monitor queues, and process jobs stored within them. Workers are responsible for marking completed jobs and managing retries for unsuccessful tasks:\n\nTo scale BullMQ workers horizontally, additional worker processes can be added, either on the same system or on different systems, to process jobs in parallel.\n\nBullMQ also controls the number of jobs processed simultaneously through the option, which dictates the maximum number of concurrent jobs:\n\nIf you need to update the concurrency value for a running worker, you can assign a new value to the property:\n\nFurthermore, achieving concurrency can be accomplished by deploying multiple workers on the same or different machines. This approach is often recommended as it enhances the availability of workers:\n\nThe library ensures reliable job execution through features like automatic retries, rate limiting, and persistence, guaranteeing no loss of jobs even after the server restarts.\n\nHere's an example demonstrating how to limit the number of concurrently running jobs using rate limiting with the option:\n\nYou can also subscribe to events from local workers like so:\n\nBullMQ shines in real-world scenarios where persistent job processing and scalability are essential, especially when dealing with bulk data in distributed or microservices architectures. A prime example is in tasks such as video and image processing, sending emails or notifications, or handling user-uploaded data.\n\nOne of BullMQ's key advantages is its horizontal scalability, which enables it to handle substantial workloads effectively. Additionally, BullMQ is actively maintained and supports job persistence in Redis, automatic retrying of failed jobs, and a monitoring dashboard for job management.\n\nHowever, there are potential drawbacks to consider. BullMQ's dependency on Redis might not align with all project goals or preferences. This reliance on Redis may not be needed in scenarios where persistent job processing is unnecessary. Additionally, BullMQ's usage of Redis can consume significant memory resources, which may be a concern in memory-constrained environments.\n\nLearn more: Job Scheduling in Node.js with BullMQ\n\nSecond on the list is Agenda , a popular and lightweight scheduler for Node.js. It uses MongoDB to persist job data and was designed to handle light and heavy workloads.\n\nTo begin using Agenda, you establish a connection to the MongoDB database:\n\nAgenda allows you to define jobs, which are automatically added to the MongoDB database once the connection is established. Here's an example of how to define a job:\n\nAdditionally, Agenda provides scheduling capabilities, allowing you to define complex recurring schedules using human-readable syntax with the method:\n\nAgenda's method allows for flexible scheduling using human-readable intervals, making it easy to define complex recurring rules:\n\nFor more precise scheduling, you can use cron expressions:\n\nAgenda also supports concurrency, allowing you to run multiple jobs simultaneously. You can set the default concurrency level using the option:\n\nAlternatively, you can specify the concurrency level when instantiating Agenda:\n\nAgenda is not limited to recurring jobs; you can also schedule a job to execute once at any desired time using the method:\n\nFor tasks that need to run immediately, you can use the method:\n\nAnother notable feature of Agenda is its extensibility. Packages like Agenda-rest provide APIs for managing jobs through HTTP endpoints, offering functionalities such as creating, updating, deleting, and canceling jobs:\n\nAgenda also offers the Agendash package, providing a user-friendly web-based interface for managing jobs:\n\nAgenda is particularly suitable for lightweight and heavy scheduling tasks requiring database persistence. Examples include generating reports, processing images and videos, sending email notifications, refreshing caches, or fetching data from APIs.\n\nOne of Agenda's key advantages is its support for defining recurring tasks using human-readable intervals, which are easy to learn and use. Additionally, Agenda allows you to persist your data and supports concurrency. It offers flexibility with support for a REST API and can be easily monitored using the dashboard.\n\nHowever, one drawback is that Agenda is limited to using MongoDB, which may not align with specific project requirements. Additionally, relying on an external dependency like MongoDB can introduce complexity, especially for tasks that do not require persistence.\n\nLearn more: Job Scheduling in Node.js with Agenda: A Beginner's Guide\n\nBree is a task scheduler for Node.js designed for simplicity. It offers granular control without the need for external storage.\n\nIt requires a directory in the root project directory, where job scripts are defined and executed using Node.js worker threads:\n\nTo schedule jobs at recurring intervals, Bree can be instantiated with the job name and intervals specified in human-readable format:\n\nThe human-readable intervals provided by Bree are flexible, allowing for complex recurring schedules such as:\n\nBree also offers the property, which supports cron expressions for complex scheduling needs:\n\nConcurrency is supported in Bree, allowing you to run multiple jobs simultaneously:\n\nBree can be extended with plugins, providing additional functionalities:\n\nFor instance, you can use the API plugin, which creates an API allowing you to manage Bree tasks:\n\nBree is suitable for basic scheduling needs, offering quick setup without requiring a database layer. You can use Redis or MongoDB for data persistence if needed.\n\nHowever, Bree has a smaller community than BullMQ or Agenda. Additionally, the directory setup may initially seem complex for some users.\n\nNode Schedule is one of the oldest Node.js schedulers, known for its lightweight and in-process execution, meaning jobs run as long as your script runs but don't persist once the script exits. It primarily focuses on time-based scheduling and offers support for cron-style scheduling:\n\nYou can also schedule one-time jobs using JavaScript date objects:\n\nAlternatively, you can schedule jobs using object literal syntax:\n\nFor more flexibility, Node Schedule supports recurrence rule scheduling, enabling you to specify when a task should recur. For example:\n\nNode Schedule excels in scenarios involving lightweight tasks like daily backups, fetching API data, or automation-related jobs, owing to its simplicity and flexibility in setting schedules.\n\nHowever, Node Schedule lacks support for some cron syntax features like \"W\" (nearest weekday) and \"L\" (last day of the month/week). It also does not support concurrency.\n\nCron is a lightweight task scheduler for Node.js that allows you to set up recurring tasks within an application using cron syntax:\n\nCron syntax in Node.js adds another field for seconds, allowing you to schedule tasks to run every few seconds.\n\nAnother way to set up Cron is to use a constructor:\n\nCron is often suitable for notifications, data backups, and network requests. Its advantage lies in its simple API, which can be learned quickly, allowing you to get started easily. In addition to cron expressions, Cron supports date objects, strings, or custom functions.\n\nHowever, Cron lacks features like job prioritization and the ability to configure jobs to start only after completing other jobs successfully.\n\nCronosjs is a simple, lightweight task scheduler for Node.js that is optimized for using cron syntax and extends its capabilities.\n\nGetting started with Cronosjs is straightforward, as demonstrated in the following sample code:\n\nTo get the next date, you can use the object:\n\nAnother exciting feature is the ability to schedule tasks from a list of dates:\n\nCronosjs is built for tasks like fetching data from APIs, backups, or sending email notifications. Its advantages include validating cron expressions and supporting scheduling tasks based on specific time zones.\n\nHowever, Cronosjs hasn't received an update in two years and is not as popular as other Node.js schedulers. It lacks sufficient resources to cover everyday use cases, which may limit its suitability for some projects.\n\nNode Cron is a tiny task scheduler for Node.js based on GNU crontab. It allows you to use cron syntax to schedule tasks in Node.js.\n\nHere's an example using cron syntax to run a job every minute:\n\nYou can use names or short names for weekdays or months:\n\nNode Cron is suitable for simple background tasks like fetching API data, backups, or other tasks that don't need persistence. Its advantage lies in its ease of getting started and learning. It supports scheduling options, including seconds precision, and allows for timezone-specific scheduling.\n\nHowever, Node Cron lacks human-readable scheduling ability and features like priority setting and job querying, which may be limitations for some use cases.\n\nCroner is another task scheduler offering built-in support for cron expressions, timezone targeting, and error handling. It's a well-tested library used by projects such as PM2, ZWave JS, and Uptime Kuma, and it's compatible with browser environments.\n\nYou can start scheduling tasks with Croner like this:\n\nCroner provides methods to control jobs such as stopping, pausing, resuming, and triggering:\n\nYou can also check the status of jobs:\n\nCroner is ideal for lightweight tasks like daily backups or notifications. Its advantages lie in its ease of use and compatibility with Node.js, Deno, and browser environments.\n\nHowever, Croner lacks features like job prioritization and may have fewer resources and support compared to more established libraries.\n\nAnother task scheduler available for Node.js is Bottleneck . Unlike traditional schedulers focused on cron jobs or future execution, Bottleneck immediately runs tasks while limiting their rate to avoid overwhelming your system.\n\nYou start using Bottleneck by creating an instance:\n\nYou can then define a job and add it to the limiter created when you instantiate Bottleneck:\n\nTasks can be prioritized using the option, as demonstrated in this example:\n\nBottleneck allows for handling job retries using Node event emitters:\n\nClustering can be enabled to allow limiters to access shared states in Redis. The changes made to the state are atomic, consistent, and isolated to prevent data race:\n\nBottleneck is perfect for API rate limiting, background processing, and data ingestion tasks.\n\nIts advantages include being lightweight, supporting clustering for efficient scaling, and having effective rate-limiting capabilities for managing concurrent jobs.\n\nHowever, it has a few drawbacks. Firstly, there have been no recent updates or new developments in over four years. Additionally, it lacks essential features such as setting job priorities and handling repeating tasks. There is also limited support for intricate scheduling options, making it less suitable for complex scheduling needs.\n\nThe last one on the list is Toad-scheduler , an in-memory task scheduler for Node.js. It offers a straightforward API for scheduling repeated tasks, supporting cron syntax:\n\nIn this example, the will execute every minute, as specified in the constructor.\n\nToad-scheduler also supports cron-style scheduling. To enable the feature, the library must be installed first:\n\nThe lightweight nature of Toad-scheduler makes it suitable for background processing tasks like creating backups or sending emails. Its advantages include the ability to configure it for clustered environments, support for asynchronous tasks, and error handling.\n\nHowever, it's not ideal for handling long-running tasks or tasks requiring automatic retries after failures. Additionally, it relies on another library for cron-style syntax support, introducing unnecessary dependencies.\n\nIn this tutorial, we examined ten scheduling libraries for Node.js, discussing the pros and cons of each tool.\n\nBullMQ, Agenda, or Bree are solid options for advanced scheduling needs, and they have the advantage of persisting jobs. Alternatively, schedulers like Node Scheduler or Cron can be suitable choices if you have more straightforward requirements."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/nodejs-cron-jobs-by-examples",
        "document": "provides a way to repeat a task at a specific time interval. There may be repetitive tasks such as logging and performing backups that need to occur on a daily or weekly or monthly basis.\n\nOne method for implementing on a Node.js server is by using the module. This library uses the syntax, which may be familiar to users with previous experience with using in Unix-like operating systems.\n\nIn this article, you will use to periodically delete log files from the server. You will also be presented with two other common use cases - backing up a database and sending scheduled emails.\n\nTo follow through this tutorial, you’ll need:\n• A local development environment for Node.js. Follow How to Install Node.js and Create a Local Development Environment.\n\nThis tutorial was verified with Node v17.2.0, v8.1.4, v2.0.3, v0.8.4, and v6.7.2.\n\nTo get started, create a new Node application by opening your terminal and creating a new folder for your project:\n\nNext, change into the new project directory:\n\nThen initialize it, which creates a file which you will use to track dependencies:\n\nAdd the module by running the following command:\n\nThe module is the task scheduler.\n\nThe project dependencies are installed. Let’s build the server.\n\nNow, you can build the server and use to schedule a task to run every minute.\n\nNext, add the following lines of code to :\n\nThese asterisks are part of the syntax to represent different units of time:\n\nA single asterisk behaves like a wildcard. Meaning the task will be run for every instance of that unit of time. Five asterisks ( ) represents the default of running every minute.\n\nNumbers in the place of asterisks will be treated as values for that unit of time. Allowing you to schedule tasks to occur daily and weekly or in more complex.\n\nAfter several minutes, you will get the following result:\n\nYou have an example task running every minute. You can stop the server with ( ).\n\nNow, let’s look at how to run tasks in more detail.\n\nConsider a scenario where you need to routinely delete the log file from the server on the twenty-first day of every month. You can accomplish this with .\n\nThis task will use to a file. Add it to the top of the file:\n\nNext, add the following lines of code:\n• It defines a value for minutes and hours as and (“00:00” - the start of the day).\n• It defines a value for day as .\n• It does not define a month or day of the week.\n\nOn the twenty-first of the month, you will get the following output:\n\nYou probably do not want to wait for the twenty-first of the month to verify the task has been executed. You can modify the scheduler to run in a shorter time interval - like every minute.\n\nCheck your server directory. The file will be deleted.\n\nYou can run any actions inside the scheduler. Actions ranging from creating a file to sending emails and running scripts. Let’s take a look at more use cases.\n\nStep 4 — Exploring Using to Back Up Databases\n\nEnsuring the preservation of user data is key to any business. If an unforeseen event happens and your database becomes corrupted or damaged, you will need to restore your database from a backup. You will be in serious trouble if you do not have any form of existing backup for your business.\n\nConsider a scenario where you need to routinely back up a dump of the database at 11:59 PM every day. You can accomplish this with .\n\nAssume that you have SQLite installed and running on your environment. Given a database named , your shell command for making a database backup may resemble this:\n\nThis command takes the database, , and runs the command, and outputs the result as a file named\n\nNext, install , a Node module that will allow you to run the previous shell command:\n\nNext, add the following lines of code:\n• It defines a value for minute as .\n• It defines a value for hour as (or in a 24-hour clock).\n• It does not define a day, a month, or day of the week.\n\nThis code will run the backup shell command. If it is successful, it will echo a message. Otherwise, if there is an error, it will exit.\n\nAt 11:59 PM, you will get the following output:\n\nYou probably do not want to wait for 11:59 PM to verify the task has been executed. You can modify the scheduler to run in a shorter time interval.\n\nCheck your server directory. A file will be present.\n\nNext, let’s look at sending periodic emails.\n\nConsider a scenario where you curate a list of interesting links and then email them to subscribers every Wednesday. You can accomplish this with .\n\nNodemailer supports test accounts provided by Ethereal Email. Create an Ethereal Account and use the username and password generated for you.\n\nNext, install , a Node module that will allow you to send emails:\n\nAdd a section that defines the mailer and sets the username and password for an email account:\n\nNext, add the following lines of code:\n• It defines a value for minutes and hours as and (“00:00” - the start of the day).\n• It does not define a day of the month or a month.\n• It defines a value for day of the week as (Wednesday).\n\nThis code will use the credentials provided to send an email to yourself. With the subject line: and the body text: 'Hi there. This email was automatically sent by us.' . Otherwise, if it fails, it will log an error.\n\nOn Wednesday, you will get the following output:\n\nYou probably do not want to wait for Wednesday to verify the task has been executed. You can modify the scheduler to run in a shorter time interval.\n\nOpen the Ethereal Email mailbox. There will be a new in the inbox.\n\nIn this article, you learned how to use to schedule jobs on a Node.js server. You were introduced to the broader concept of automating repetitive tasks in a consistent and predictable manner. This concept can be applied to your current and future projects.\n\nThere are other task scheduler tools available. Be sure to evaluate them to identify which tool is best suited for your particular project.\n\nIf you’d like to learn more about Node.js, check out our Node.js topic page for exercises and programming projects."
    }
]