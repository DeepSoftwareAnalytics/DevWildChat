[
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.environment.getfolderpath?view=net-9.0",
        "document": "The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string (\"\").\n\nA folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.\n\nThe following example demonstrates how to use the GetFolderPath method to return and display the path associated with the parameter.\n\nThis method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.\n\nThe parameter designates the special folder to retrieve and must be one of the values in the Environment.SpecialFolder enumeration; any other value throws an exception.\n\nFor more information about special folders, see Constant special item ID list (CSIDL)."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=net-9.0",
        "document": "The logical Desktop rather than the physical file system location. The directory that contains the user's program groups. The My Documents folder. This member is equivalent to Personal. The directory that serves as a common repository for documents. This member is equivalent to MyDocuments. The directory that serves as a common repository for the user's favorite items. The directory that corresponds to the user's Startup program group. The system starts these programs whenever a user logs on or starts Windows. The directory that contains the user's most recently used documents. The directory that contains the Send To menu items. The directory that contains the Start menu items. The file system directory that serves as a repository for videos that belong to a user. The directory used to physically store file objects on the desktop. Do not confuse this directory with the desktop folder itself, which is a virtual folder. The My Computer folder. When passed to the method, the enumeration member always yields the empty string (\"\") because no path is defined for the My Computer folder. A file system directory that contains the link objects that may exist in the My Network Places virtual folder. The directory that serves as a common repository for document templates. The file system directory that contains the programs and folders that appear on the Start menu for all users. A folder for components that are shared across applications. The file system directory that contains the programs that appear in the Startup folder for all users. The file system directory that contains files and folders that appear on the desktop for all users. The directory that serves as a common repository for application-specific data for the current roaming user. A roaming user works on more than one computer on a network. A roaming user's profile is kept on a server on the network and is loaded onto a system when the user logs on. The file system directory that contains the link objects that can exist in the Printers virtual folder. The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user. The directory that serves as a common repository for temporary Internet files. The directory that serves as a common repository for Internet cookies. The directory that serves as a common repository for Internet history items. The directory that serves as a common repository for application-specific data that is used by all users. The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. In a non-x86 process, passing ProgramFiles to the GetFolderPath(Environment+SpecialFolder) method returns the path for non-x86 programs. To get the x86 program files directory in a non-x86 process, use the ProgramFilesX86 member. The user's profile folder. Applications should not create files or folders at this level; they should put their data under the locations referred to by ApplicationData. The directory for components that are shared across applications. To get the x86 common program files directory in a non-x86 process, use the ProgramFilesX86 member. The file system directory that contains the templates that are available to all users. The file system directory that contains documents that are common to all users. The file system directory that contains administrative tools for all users of the computer. The file system directory that is used to store administrative tools for an individual user. The Microsoft Management Console (MMC) will save customized consoles to this directory, and it will roam with the user. The file system directory that serves as a repository for music files common to all users. The file system directory that serves as a repository for image files common to all users. The file system directory that serves as a repository for video files common to all users. The file system directory that contains resource data. The file system directory that contains localized resource data. This value is recognized in Windows Vista for backward compatibility, but the special folder itself is no longer used. The file system directory that acts as a staging area for files waiting to be written to a CD.\n\nThe following example shows how to use Environment.SpecialFolder with the Environment.GetFolderPath method to get the System directory.\n\nThe system special folders are folders such as Program Files, Programs, System, or Startup, which contain common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.\n\nThe Environment.GetFolderPath method returns the locations associated with this enumeration. The locations of these folders can have different values on different operating systems, the user can change some of the locations, and the locations are localized.\n\nFor more information about special folders, see the KNOWNFOLDERID constants in the Windows documentation."
    },
    {
        "link": "https://stackoverflow.com/questions/14713658/environment-getfolderpathenvironment-specialfolder-something",
        "document": "I've been trying out the most of the enumeration, but I think there isn't any way of what I'd like to accomplish with the enumeration only. Using the method brought me the farest, yet.\n\nI try to get just the system partition path, where windows is actually installed. On machine A it might be , on machine B it might be .\n\nThe most sufficent solution, I found so far was\n\nIs there a better way to do this? Thanks."
    },
    {
        "link": "https://stackoverflow.com/questions/1947185/get-special-folder",
        "document": "Please just answer the question otherwise do not respond to this question.\n\nLet me start again. How do I use this class, which extends the internal Environment.GetSpecialFolder?\n\nBecause I want to use this for other purposes other than .\n\nFor example, how do I call location by a button click?"
    },
    {
        "link": "https://developers.redhat.com/blog/2018/11/07/dotnet-special-folder-api-linux",
        "document": ".NET has APIs for locating special folders that can be used for application and user configuration and data storage. They provide a convenient, portable way to make cross-platform applications find the appropriate folders on different operating systems. We'll look at how , , and behave on Linux.\n\nThe class has two overloads:\n\nis an with values like , , and . The has three values: , , and . These control the return value when the folder does not exist. Specifying causes an empty string to be returned. Specifying causes the folder to be created. And causes the path to be returned even when the folder does not exist.\n\nNote that and are nested in the class, and to use them directly you should add a statement to your code.\n\nTo make this API work cross-platform, .NET Core needs to map the values to some locations. For Linux, this mapping is based on file-hierarcy and basedir-spec.\n\nThe table lists all the mapped values in .NET Core 2.1. Other values are not mapped and return an empty string. The returned value is determined from left to right: first checking the environment variable, then falling back to the config file, and finally falling back to a default.\n\nCross-platform applications should be limited to using the mapped values, or they should be able to fall back to another location when returns an empty string.\n\nThe user home folder is read from the environment variable. When that is unset, the home directory is read from the system user database. It’s safe to assume that for known users, .NET Core will be able to determine the home directory. A number of other locations are based on the user home folder. Some can be overridden using environment variables and some others by using a file at .\n\nOn Windows, most of the special folders will exist by default. This may not be the case on Linux. It is the application's responsibility to create the folder when it doesn't exist. This may require some changes to your code to use the overload with a .\n\nFor example, the following code ensures the folder will be created if it doesn’t exist.\n\nThe class has a method that returns the path of the current user's temporary folder:\n\nWindows applications may assume the path returned here is user-specific. This is because the implementation picks up the environment variable. When the variable is unset, the API returns the Windows temp folder.\n\nOn Linux, the implementation returns . This folder is shared with other users. As a consequence, applications should use unique names to avoid conflicts with other applications. Furthermore, because the location is shared, other users will be able to read the files created here, so you should not store sensitive data in this folder. The first user to create a file or directory will own it. This can cause your application to fail when trying to create a file or directory that is already owned by another user.\n\nThe method solves these issues for creating files. It creates a unique file under that is only readable and writable by the current user.\n\nOn Windows, the value returned by can be controlled using the / environment variables. On Linux, this can be done using .\n\nOn systems with , like Fedora and Red Hat Enterprise Linux (RHEL), a user-private temporary directory is available and can be located using the environment variable.\n\nIn this article, you’ve seen the features and limitations of using , and in your cross-platform .NET Core applications.\n\nHere are some additional .NET Core articles that might be helpful:"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=net-9.0",
        "document": "The logical Desktop rather than the physical file system location. The directory that contains the user's program groups. The My Documents folder. This member is equivalent to Personal. The directory that serves as a common repository for documents. This member is equivalent to MyDocuments. The directory that serves as a common repository for the user's favorite items. The directory that corresponds to the user's Startup program group. The system starts these programs whenever a user logs on or starts Windows. The directory that contains the user's most recently used documents. The directory that contains the Send To menu items. The directory that contains the Start menu items. The file system directory that serves as a repository for videos that belong to a user. The directory used to physically store file objects on the desktop. Do not confuse this directory with the desktop folder itself, which is a virtual folder. The My Computer folder. When passed to the method, the enumeration member always yields the empty string (\"\") because no path is defined for the My Computer folder. A file system directory that contains the link objects that may exist in the My Network Places virtual folder. The directory that serves as a common repository for document templates. The file system directory that contains the programs and folders that appear on the Start menu for all users. A folder for components that are shared across applications. The file system directory that contains the programs that appear in the Startup folder for all users. The file system directory that contains files and folders that appear on the desktop for all users. The directory that serves as a common repository for application-specific data for the current roaming user. A roaming user works on more than one computer on a network. A roaming user's profile is kept on a server on the network and is loaded onto a system when the user logs on. The file system directory that contains the link objects that can exist in the Printers virtual folder. The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user. The directory that serves as a common repository for temporary Internet files. The directory that serves as a common repository for Internet cookies. The directory that serves as a common repository for Internet history items. The directory that serves as a common repository for application-specific data that is used by all users. The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. In a non-x86 process, passing ProgramFiles to the GetFolderPath(Environment+SpecialFolder) method returns the path for non-x86 programs. To get the x86 program files directory in a non-x86 process, use the ProgramFilesX86 member. The user's profile folder. Applications should not create files or folders at this level; they should put their data under the locations referred to by ApplicationData. The directory for components that are shared across applications. To get the x86 common program files directory in a non-x86 process, use the ProgramFilesX86 member. The file system directory that contains the templates that are available to all users. The file system directory that contains documents that are common to all users. The file system directory that contains administrative tools for all users of the computer. The file system directory that is used to store administrative tools for an individual user. The Microsoft Management Console (MMC) will save customized consoles to this directory, and it will roam with the user. The file system directory that serves as a repository for music files common to all users. The file system directory that serves as a repository for image files common to all users. The file system directory that serves as a repository for video files common to all users. The file system directory that contains resource data. The file system directory that contains localized resource data. This value is recognized in Windows Vista for backward compatibility, but the special folder itself is no longer used. The file system directory that acts as a staging area for files waiting to be written to a CD.\n\nThe following example shows how to use Environment.SpecialFolder with the Environment.GetFolderPath method to get the System directory.\n\nThe system special folders are folders such as Program Files, Programs, System, or Startup, which contain common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.\n\nThe Environment.GetFolderPath method returns the locations associated with this enumeration. The locations of these folders can have different values on different operating systems, the user can change some of the locations, and the locations are localized.\n\nFor more information about special folders, see the KNOWNFOLDERID constants in the Windows documentation."
    },
    {
        "link": "https://learn.microsoft.com/it-it/dotnet/api/system.environment.specialfolder?view=net-8.0",
        "document": "The logical Desktop rather than the physical file system location. The directory that contains the user's program groups. The My Documents folder. This member is equivalent to Personal. The directory that serves as a common repository for documents. This member is equivalent to MyDocuments. The directory that serves as a common repository for the user's favorite items. The directory that corresponds to the user's Startup program group. The system starts these programs whenever a user logs on or starts Windows. The directory that contains the user's most recently used documents. The directory that contains the Send To menu items. The directory that contains the Start menu items. The file system directory that serves as a repository for videos that belong to a user. The directory used to physically store file objects on the desktop. Do not confuse this directory with the desktop folder itself, which is a virtual folder. The My Computer folder. When passed to the method, the enumeration member always yields the empty string (\"\") because no path is defined for the My Computer folder. A file system directory that contains the link objects that may exist in the My Network Places virtual folder. The directory that serves as a common repository for document templates. The file system directory that contains the programs and folders that appear on the Start menu for all users. A folder for components that are shared across applications. The file system directory that contains the programs that appear in the Startup folder for all users. The file system directory that contains files and folders that appear on the desktop for all users. The directory that serves as a common repository for application-specific data for the current roaming user. A roaming user works on more than one computer on a network. A roaming user's profile is kept on a server on the network and is loaded onto a system when the user logs on. The file system directory that contains the link objects that can exist in the Printers virtual folder. The directory that serves as a common repository for application-specific data that is used by the current, non-roaming user. The directory that serves as a common repository for temporary Internet files. The directory that serves as a common repository for Internet cookies. The directory that serves as a common repository for Internet history items. The directory that serves as a common repository for application-specific data that is used by all users. The Windows directory or SYSROOT. This corresponds to the %windir% or %SYSTEMROOT% environment variables. In a non-x86 process, passing ProgramFiles to the GetFolderPath(Environment+SpecialFolder) method returns the path for non-x86 programs. To get the x86 program files directory in a non-x86 process, use the ProgramFilesX86 member. The user's profile folder. Applications should not create files or folders at this level; they should put their data under the locations referred to by ApplicationData. The directory for components that are shared across applications. To get the x86 common program files directory in a non-x86 process, use the ProgramFilesX86 member. The file system directory that contains the templates that are available to all users. The file system directory that contains documents that are common to all users. The file system directory that contains administrative tools for all users of the computer. The file system directory that is used to store administrative tools for an individual user. The Microsoft Management Console (MMC) will save customized consoles to this directory, and it will roam with the user. The file system directory that serves as a repository for music files common to all users. The file system directory that serves as a repository for image files common to all users. The file system directory that serves as a repository for video files common to all users. The file system directory that contains resource data. The file system directory that contains localized resource data. This value is recognized in Windows Vista for backward compatibility, but the special folder itself is no longer used. The file system directory that acts as a staging area for files waiting to be written to a CD.\n\nThe following example shows how to use Environment.SpecialFolder with the Environment.GetFolderPath method to get the System directory.\n\nThe system special folders are folders such as Program Files, Programs, System, or Startup, which contain common information. Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.\n\nThe Environment.GetFolderPath method returns the locations associated with this enumeration. The locations of these folders can have different values on different operating systems, the user can change some of the locations, and the locations are localized.\n\nFor more information about special folders, see the KNOWNFOLDERID constants in the Windows documentation."
    },
    {
        "link": "https://gist.github.com/DamianSuess/c143ed869e02e002d252056656aeb9bf",
        "document": "More info can be found at, https://docs.microsoft.com/en-us/dotnet/api/system.environment.specialfolder?view=netframework-4.7.2\n\nNote that, and are both = 5, so it will appear twice as,"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/standard/io/how-to-enumerate-directories-and-files",
        "document": "How to: Enumerate directories and files\n\nEnumerable collections provide better performance than arrays when you work with large collections of directories and files. To enumerate directories and files, use methods that return an enumerable collection of directory or file names, or their DirectoryInfo, FileInfo, or FileSystemInfo objects.\n\nIf you want to search and return only the names of directories or files, use the enumeration methods of the Directory class. If you want to search and return other properties of directories or files, use the DirectoryInfo and FileSystemInfo classes.\n\nYou can use enumerable collections from these methods as the IEnumerable<T> parameter for constructors of collection classes like List<T>.\n\nThe following table summarizes the methods that return enumerable collections of files and directories:\n\nThe following example uses the Directory.EnumerateDirectories(String) method to get a list of the top-level directory names in a specified path.\n\nThe following example uses the Directory.EnumerateFiles(String, String, SearchOption) method to recursively enumerate all file names in a directory and subdirectories that match a certain pattern. It then reads each line of each file and displays the lines that contain a specified string, with their filenames and paths.\n\nThe following example uses the DirectoryInfo.EnumerateDirectories method to list a collection of top-level directories whose CreationTimeUtc is earlier than a certain DateTime value.\n\nThe following example uses the DirectoryInfo.EnumerateFiles method to list all files whose Length exceeds 10MB. This example first enumerates the top-level directories, to catch possible unauthorized access exceptions, and then enumerates the files."
    },
    {
        "link": "https://stackoverflow.com/questions/14713658/environment-getfolderpathenvironment-specialfolder-something",
        "document": "I've been trying out the most of the enumeration, but I think there isn't any way of what I'd like to accomplish with the enumeration only. Using the method brought me the farest, yet.\n\nI try to get just the system partition path, where windows is actually installed. On machine A it might be , on machine B it might be .\n\nThe most sufficent solution, I found so far was\n\nIs there a better way to do this? Thanks."
    }
]