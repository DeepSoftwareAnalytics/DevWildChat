[
    {
        "link": "https://p5js.org/reference/p5/loadImage",
        "document": "interprets the first parameter one of three ways. If the path to an image file is provided, will load it. Paths to local files should be relative, such as . URLs such as may be blocked due to browser security. Raw image data can also be passed as a base64 encoded image in the form .\n\nThe second parameter is optional. If a function is passed, it will be called once the image has loaded. The callback function can optionally use the new p5.Image object.\n\nThe third parameter is also optional. If a function is passed, it will be called if the image fails to load. The callback function can optionally use the event error.\n\nImages can take time to load. Calling in preload() ensures images load before they're used in setup() or draw()."
    },
    {
        "link": "https://geeksforgeeks.org/p5-js-loadimage-function",
        "document": ""
    },
    {
        "link": "https://editor.p5js.org/yonghuming/sketches/H1UeBFeF7",
        "document": ""
    },
    {
        "link": "https://p5js.org/reference/p5/p5.Image",
        "document": "Images are rectangular grids of pixels that can be displayed and modified. Existing images can be loaded by calling loadImage(). Blank images can be created by calling createImage(). objects have methods for common tasks such as applying filters and modifying pixel values.\n\npixels An array containing the color of each pixel in the image. Colors are stored as numbers representing red, green, blue, and alpha (RGBA) values. is a one-dimensional array for performance reasons. Each pixel occupies four elements in the pixels array, one for each RGBA value. For example, the pixel at coordinates (0, 0) stores its RGBA values at , , , and , respectively. The next pixel at coordinates (1, 0) stores its RGBA values at , , , and . And so on. The array for a 100×100 p5.Image object has 100 × 100 × 4 = 40,000 elements. Accessing the RGBA values for a pixel in the image requires a little math as shown in the examples below. The img.loadPixels() method must be called before accessing the array. The img.updatePixels() method must be called after any changes are made.\n\npixelDensity Gets or sets the pixel density for high pixel density displays. By default, the density will be set to 1. Call this method with no arguments to get the default density, or pass in a number to set the density. If a non-positive number is provided, it defaults to 1. loadPixels Loads the current value of each pixel in the image into the array. must be called before reading or modifying pixel values. updatePixels Updates the canvas with the RGBA values in the img.pixels array. only needs to be called after changing values in the img.pixels array. Such changes can be made directly after calling img.loadPixels() or by calling img.set(). The optional parameters , , , and define a subsection of the image to update. Doing so can improve performance in some cases. If the image was loaded from a GIF, then calling will update the pixels in current frame. get Gets a pixel or a region of pixels from the image. is easy to use but it's not as fast as img.pixels. Use img.pixels to read many pixel values. The version of with no parameters returns the entire image. The version of with two parameters, as in , interprets them as coordinates. It returns an array with the values of the pixel at the given point. The version of with four parameters, as in , interprets them as coordinates and dimensions. The first two parameters are the coordinates of the upper-left corner of the subsection. The last two parameters are the width and height of the subsection. It returns a subsection of the canvas in a new p5.Image object. Use instead of get() to work directly with images. set Sets the color of one or more pixels within an image. is easy to use but it's not as fast as img.pixels. Use img.pixels to set many pixel values. interprets the first two parameters as x- and y-coordinates. It interprets the last parameter as a grayscale value, a pixel array, a p5.Color object, or another p5.Image object. img.updatePixels() must be called after using for changes to appear. resize Resizes the image to a given width and height. The image's original aspect ratio can be kept by passing 0 for either or . For example, calling on an image that was 500 × 300 pixels will resize it to 50 × 30 pixels. copy Copies pixels from a source image to this image. The first parameter, , is an optional p5.Image object to copy. If a source image isn't passed, then can copy a region of this image to another region. The next four parameters, , , , and determine the region to copy from the source image. is the top-left corner of the region. and are the region's width and height. The next four parameters, , , , and determine the region of this image to copy into. is the top-left corner of the region. and are the region's width and height. Calling will scale pixels from the source region if it isn't the same size as the destination region. mask Masks part of the image with another. uses another p5.Image object's alpha channel as the alpha channel for this image. Masks are cumulative and can't be removed once applied. If the mask has a different pixel density from this image, the mask will be scaled. filter Applies an image filter to the image. Inverts the colors in the image. No parameter is used. Converts the image to grayscale. No parameter is used. Converts the image to black and white. Pixels with a grayscale value above a given threshold are converted to white. The rest are converted to black. The threshold must be between 0.0 (black) and 1.0 (white). If no value is specified, 0.5 is used. Sets the alpha channel to be entirely opaque. No parameter is used. Limits the number of colors in the image. Each color channel is limited to the number of colors specified. Values between 2 and 255 are valid, but results are most noticeable with lower values. The default value is 4. Blurs the image. The level of blurring is specified by a blur radius. Larger values increase the blur. The default value is 4. A gaussian blur is used in mode. A box blur is used in mode. Reduces the light areas. No parameter is used. Increases the light areas. No parameter is used. blend Copies a region of pixels from another image into this one. The first parameter, , is the p5.Image object to blend. The next four parameters, , , , and determine the region to blend from the source image. is the top-left corner of the region. and are the regions width and height. The next four parameters, , , , and determine the region of the canvas to blend into. is the top-left corner of the region. and are the regions width and height. The tenth parameter, , sets the effect used to blend the images' colors. The options are , , , , , , , , , , , , , , or . save By default, saves the image as a PNG image called . The first parameter, , is optional. It's a string that sets the file's name. If a file extension is included, as in , then the image will be saved using that format. The second parameter, , is also optional. It sets the files format. Either or can be used. For example, saves the canvas to a file called . Note: The browser will either save the file immediately or prompt the user with a dialogue window. The image will only be downloaded as an animated GIF if it was loaded from a GIF file. See saveGif() to create new GIFs. reset Restarts an animated GIF at its first frame. getCurrentFrame Gets the index of the current frame in an animated GIF. setFrame Sets the current frame in an animated GIF. numFrames Returns the number of frames in an animated GIF. play Plays an animated GIF that was paused with img.pause(). pause The GIF can be resumed by calling img.play(). delay Changes the delay between frames in an animated GIF. The first parameter, , is the length of the delay in milliseconds. The second parameter, , is optional. If provided, only the frame at will have its delay modified. All other frames will keep their default delay."
    },
    {
        "link": "https://stackoverflow.com/questions/51984930/correct-way-to-use-loadimage-in-p5-js",
        "document": "I'm loading image URLs from a json file. I have everything working fine, except displaying the actual images.\n\nIt's a simple clik carousel. Hit the click and it moves index onto the next one. I want to make sure the images display at the same time, obviously but it's not working (images are referenced, but don't display).\n\nAnyone know what I am doing wrong?"
    },
    {
        "link": "https://p5js.org/reference/p5.sound/p5.AudioIn",
        "document": "Get sound from an input source, typically a computer microphone.\n\nenabled Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access. amplitude Input amplitude, connect to it by default but not to master out\n\nconnect Connect to an audio unit. If no parameter is provided, will connect to the main output (i.e. your speakers).\n\n disconnect Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.\n\n getLevel Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). NOTE: AudioIn must .start() before using .getLevel().\n\n amp Set amplitude (volume) of a mic input between 0 and 1.0. getSources Returns a list of available input sources. This is a wrapper for MediaDevices.enumerateDevices() - Web APIs | MDN and it returns a Promise. setSource Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support navigator.mediaDevices.enumerateDevices()\n\nNotice any errors or typos? Please let us know . Please feel free to edit src/AudioIn.js and open a pull request!"
    },
    {
        "link": "https://medium.spatialpixel.com/sounds-bd05429aba38",
        "document": "Ok great, so we have a sound, and we’ve loaded it. But now we want to hear it. So we need to write code that tells P5 to play the sound.\n• In the setup() function, play the sound when the sketch starts:\n• Click the “Play” button at the top of the code editor to run your p5.js sketch.\n• You’ll hear the “goat.wav” sound file play automatically when the sketch starts. If you don’t hear it but don’t see any errors it may be too quiet. Let’s play with making it louder.\n• You can change the volume by using before the . In p5.js and many other programming languages, the dot (.) notation is used to access and manipulate properties and methods of objects. So when we have created this variable goatSound that represents our sound file, we can use the dot notation to manipulate the properties of this file. Here represents the volume level. Try changing this to or to see it change.\n\nYour full sketch should look like this:\n\nThat’s it! You’ve created a simplified p5.js sketch that plays the sound. Remember to save your project in the web editor so you can access it later.\n• How might you create a button to play the sound?\n• We can then do fun things like change the pitch based on the position of our mouse. Here’s an example!\n\nSince you probably aren’t interested in making a contraption that sounds like a goat…you’re probably wondering “How can I load a larger sound file and one of my own files.” To which I respond, “Great question!”\n\nIn order to do this, you’ll need to run P5.js locally on your machine and run a local web server. This is quite common in software development and used during the development phase before hosting code projects on the cloud. We’ll do this in a future tutorial. For now just be satisfied with with “goat.wav” and the varieties of projects that can be done with “goat.wav.”\n\nIf you’re adament about using other sounds, you can find your own sounds but they’ll need to be smaller than 5mb in order to be hosted on the P5.js web editor. You can find many sounds online here: https://freesound.org/ You’ll need to create an account and most files will need to be downsized."
    },
    {
        "link": "https://p5js.org/reference/p5.sound",
        "document": ""
    },
    {
        "link": "https://editor.p5js.org/p5/sketches/Sound:_Live_Input",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/69830307/multiple-audio-inputs-in-p5-js",
        "document": "You need to scan the sources by method and use the to set the input source for separate audio inputs.\n\nThen you need to use the method to connect these audio inputs into the master output.\n\nThe example in the official docs is quite helpful: https://p5js.org/reference/#/p5.AudioIn/getSources"
    }
]