[
    {
        "link": "https://stackoverflow.com/questions/55114354/how-to-use-recursion-function-to-traverse-tree-in-javascript",
        "document": "I was building a tree traverse function and it has to use recursion.\n\nWhat I want the output to be is\n\nCould someone figure out how to use recursion in the function to get the output?\n\nHere is my JS:"
    },
    {
        "link": "https://jrsinclair.com/articles/2019/functional-js-traversing-trees-with-recursive-reduce",
        "document": "Trees come up a lot in web development. More than you would expect, anyway. For most of my web development career, I haven’t needed many complicated data structures. And tricky algorithms don’t come up that often either. Things like linked lists and travelling salesmen don’t appear all that often on the front end. Not that knowing about them isn’t useful. But trees…. Trees are an exception. They just keep popping up.\n\nIt’s not so surprising, really. The is a tree. HTML has a hierarchical structure. Menus tend to have hierarchical structures too. Early websites were based on the old file/folder metaphor, so it all makes sense. But when you start looking for them, there’s tree structures all over the place.\n\nBut trees can be tricky. If you’re like me, you know that there ought to be a way to process them neatly. You might want to change all the values, or make some calculation. But the way to do it isn’t always obvious. And utility libraries like Ramda and Lodash don’t come with tree-traversing functions. So we’re stuck rolling our own.\n\nWith a few minor tweaks though, we can use our old friends and to help us out. Then we can process trees just as easily as we do arrays (with some caveats, as we’ll see).\n\nLet’s look at a sample problem. Imagine we have a menu structure:\n\nWith an array like this it’s not so hard to calculate the number of links. We could even do it in just a few lines:\n\nBut what if our menu had more levels?\n\nHere, the answer isn’t so obvious. JavaScript lets us create tree-like structures easily enough. We can stick objects inside arrays, and arrays inside objects. But there’s no real concept of a Tree type provided by JavaScript. So, there’s no or . We’re on our own.\n\nEven turning back to the old ways of imperative loops won’t help us. Sacrificing an iterator variable to the browser gods won’t solve our problem. Not even if we call it . We need another set of tools.\n\nWhat we want is something like and . But we’d want them to work on tree structures like the ones above. Then, we could work with tree structures just as easily as we work with arrays.\n\nSo, how do we go about it? Well, if we look at the tree structure, we can see that it’s a little bit repetitive. Sub-branches of the tree share much the same structure as the top-level of the tree. That is, items in a lot like the parent structure. They’re both objects, sometimes with a attribute. Whenever we see repetition like this, the solution will often involve recursion. At least, it’s a good place to start looking anyway.\n\nWe get recursion when a function calls itself inside the function definition. It’s kind of mind boggling when you first encounter it. But it’s really handy for working with things like trees.\n\nThere is one rule you should always remember with recursion though: Always know how you will stop. How will we know to stop processing an object in a tree structure? Well, if it doesn’t have any children, then we can’t go any further. So, with our sample data structure, it’s pretty simple. We can write a simple function that will do the check for us:\n\nWe’d like to call our function , but we don’t want it to be confused with . So we’ll stick it in an object to make it clear. And while we’re at it, we’ll curry our function to make composition easier. There’s a good reason for this, which we’ll see in a minute…\n\nNow, if we’re processing a leaf node, it’s pretty clear what we need to do. We just call the reducer function and return the result:\n\nBut for now, our reducer is able to process leaf nodes. If there’s no children, we apply the reducer function and return the value. But what do we do if the node does have children?\n\nIf there are children, then we need to process a whole array of subtrees. Fortunately, we know how to reduce arrays. And here’s where the currying comes in. Our function has a signature that looks something like this:\n\nThat is, takes a Function, *something, and an Object. And it returns something the same type as our second parameter. If we partially apply the first parameter ( ), then the signature becomes:\n\nAnd that happens to look a lot like the signature of a reducer function… So, we can do something like this:\n\nWith that in place, we could count the links in our menu like so:\n\nNow, what did we change to make work with ? That’s right—absolutely nothing. All the complexity of dealing with a tree structure is buried inside .\n\nSo, we could create other reducers that work just as easily with reduce. For example, if we wanted to flatten our tree structure to an array:\n\nWhat if we wanted to modify our tree though? Say, what if we wanted to modify the element and show how many children each item has? We’d want to do something like map over the tree, and return a new tree. It might look something like this:\n\nWe’ve curried our function again. That makes it easier to call recursively as we traverse over the . In general, it doesn’t look so very different from our function.\n\nThen, to count the children and add the new text, we write a map function:\n\nOr, perhaps we need to go through and change all the links so they’re fully qualified domain names (FQDNs). We could do something like this:\n\nThis is all well and good, but perhaps this still seems a little contrived. What about something more real world? How about something that actually involves working with the and manipulating stuff on a web page? It might look something like this:\n\nNow, our tree functions won’t work properly on the without modification. This is because the property of a element is not an array. It’s an . That means it does not have a method or a method.\n\nReplacing the array is fairly easy. We can just borrow the version and the JS engine will figure it out for us. But we have to tweak our function a little bit first:\n\nTweaking our function is a little bit trickier. For two reasons:\n• Like with , the attribute is an , so it does not have a method; and\n• When working with the have to hold our nose and accept that we’re going to end up mutating things.\n\nDiscussing functional programming and the is enough for a whole series of blog posts. Not to mention that I’m still thinking through the best way to approach it myself. But for now, let’s see what we can do to make our method do something useful.\n\nFor now, we’ll have to accept that our method will operate more like than . The key difference being that we will return the mutated element at the end. Here’s how might work for elements:\n\nWhat can we do with these shiny new functions? Well, we could do the same things we did before. We could count the number of links:\n\nAnd we could add a count of children to each link:\n\nOf course, I don’t recommend doing this in practice. The already comes with a bunch of utility functions that will usually be faster. For example, we could find the number of links just as easily with:\n\nAnd we could add a count of children to each link with something like this:\n\nIn most cases, you’ll find that using the built-in tools is faster and easier. So it’s rare that we’ll want to be rolling our own Tree functions (for the , anyway). But, there are times when the built-in tools won’t cut it. For example, what if we wanted an array of all the text nodes in our navigation structure? There’s no CSS selector for text nodes, so we can’t use . But we could do it with :\n\nSo, no, and are not some silver bullet to magic away all your coding troubles. But and do give you a pattern for dealing with tree structures in general. And tree structures come up quite a lot in front-end development. They’re handy patterns to have in your tool chest."
    },
    {
        "link": "https://sahinarslan.tech/posts/a-comprehensive-tree-traversal-guide-in-javascript-general-and-binary-tree-traversals",
        "document": "Trees are a fundamental data structure in computer science that are used to represent hierarchical relationships between data. They can be found in a variety of applications, such as file systems, database indexes, decision trees in artificial intelligence, and more.\n\nTree traversal is an algorithmic concept that plays a key role when working with the Trees. I’d also like to add these are not only exclusive to Trees, they are also applicable to Graphs. Even though in this article we will be only using Trees for the examples, this knowledge will still help with Graphs as Traversals are widely used in Graphs and are essential in solving problems.\n\n“Traversing a tree” means visiting each node in the tree exactly once, in a specific order. Since Trees are non-linear data structures, there are a lot more directions and logic involved compared to linear data structures.\n\nIf we take a look at a linear data structure - let’s say Arrays. We can simply visit every element by using a simple loop, where we have only 2 possible directions: either start from index zero to the last index or in reverse order - from last index to index zero. But when it comes to Trees, visiting each node / element takes more logic. This makes the traversing trees more complex, but this complexity also opens the door to many possibilities out of the box - something we couldn’t have with linear data structures like Arrays.\n\nThe tone of this article is assuming you are at least familiar with the concept of Tree data structure, how General Tree and Binary Tree works. If that’s not the case or you need a quick refreshment, I’d suggest you start from the links below in order, then come back and continue here later:\n\nDeep Dive into Data structures using Javascript - Introduction to Trees\n\nOn another note, this article is intended to be comprehensive guide to the Tree traversals (including both General & Binary Trees). As a result, it is quite lengthy - almost at the size of a mini-book. If you’re looking for a specific section, feel free to use the table of contents below to directly navigate to the part you are interested.\n• Breadth First vs Depth First\n• When to use Breadth First or Depth First\n• Using Recursive vs Iterative Methods for Traversals\n• How does Recursion includes Automatic Backtracking with Call Stack\n\nWe can categorize Tree traversals under 2 main categories:\n\nBreadth First is a type of tree traversal algorithm that explores a tree by visiting all the nodes in the same level before moving on to the next level. This approach is sometimes also referred to as Level-order traversal, since there is only one type of traversal related with it.\n\nLevel-order traversal algorithm starts at the root node of the tree and visits each level of the tree from left to right before moving on to the next level. This means that the algorithm will visit all the nodes at a given level before moving down to the next level.\n\nTo implement a Level-order traversal algorithm, we typically use a queue data structure. We start by enqueuing the root node, then dequeue it, visit the node, and enqueue its children (if any) from left to right. We repeat this process until the queue is empty.\n• Finding the shortest path between two nodes: If you need to find the shortest path between two nodes in a tree, it can be used to traverse the tree level by level until the destination node is found. Since it visits all the nodes at a particular level before moving on to the next level, it guarantees that the shortest path between the nodes will be found.\n• Finding all the nodes at a particular level: This can be helpful in scenarios where you need to perform a specific operation on all the nodes at a particular level, or if you need to count the number of nodes at a particular level.\n• Checking if a tree is balanced: This can also be used to check if a binary tree is balanced, meaning that the height difference between the left and right subtrees of every node is at most one. By traversing the tree level by level, it can be used to determine the depth of each node and compare the depths of sibling nodes to check for balance.\n\nDepth First is a type of tree traversal algorithm that explores a tree by visiting the nodes in a specific order that emphasizes depth. There are three variations of Depth First traversal: Pre-order, In-order, and Post-order. Variations refers to the steps to take when visiting each subtree.\n\nNow remembering these 3 type of orders can be tricky at the beginning - but there is a good memorizing tactic you can use. Before we go further, let’s take a look at it. All it takes is just making a connection with the first words of the order variations: “PRE, IN, POST”. Follow these 2 basic rules:\n• Names of orders “PRE”, “IN” and “POST” refers to the position of when the root node will be visited.\n• No matter the position of root, left will be always somewhere before the right.\n\nWhen we see the order “PRE”, it means root will be placed as “PREVIOUS” to the left and right:\n\nWhen we see the order “IN”, it means root will be placed “IN” between left and right:\n\nWhen we see the order “POST”, it means the root will be placed after the left and right:\n\nTake a look at the visual:\n\nTo implement Depth First traversal, we typically use a stack data structure. We start by pushing the root node onto the stack and then visit it. If the current node has a left child, we push it onto the stack and continue to the left child. If the current node doesn’t have a left child, we pop the top node from the stack and move to its right child. We continue this process until the stack is empty. N﻿ow let’s go through the each variation in more detail:\n\nIt visits the root node first, then visits the left subtree, and finally visits the right subtree. This means that the algorithm will traverse the entire left subtree before moving on to the right subtree. The process is repeated recursively for each subtree until all nodes have been visited.\n• Copying a binary tree: Pre-order traversal can be used to copy a binary tree. The algorithm starts by copying the root node, then recursively copying the left and right subtrees.\n• Creating a prefix expression: Pre-order traversal can be used to generate a prefix expression for an expression tree. The algorithm starts by visiting the root node and then recursively visiting the left and right subtrees.\n• Flattening a binary tree: Pre-order traversal can be used to flatten a binary tree into a linked list. The algorithm starts by visiting the root node, then recursively flattening the left and right subtrees and attaching them to the root node.\n\nIt visits the left subtree first, then visits the root node, and finally visits the right subtree. This means that the algorithm will visit the nodes in ascending order if the tree contains numbers or alphabetical order if the tree contains strings. The process is repeated recursively for each subtree until all nodes have been visited.\n• Printing a binary search tree in order: In-order traversal can be used to print the nodes of a binary search tree in ascending order. Since binary search trees are organized in a way that ensures that all the nodes in the left subtree are smaller than the root node, and all the nodes in the right subtree are larger than the root node, In-order traversal will visit the nodes in ascending order.\n• Evaluating mathematical expressions in infix notation: In-order traversal can be used to evaluate mathematical expressions in infix notation. The algorithm starts by visiting the left subtree, then the root node, and finally the right subtree. By doing this in the correct order, the algorithm will ensure that the correct order of operations is followed.\n\nIt visits the left subtree first, then visits the right subtree, and finally visits the root node. This means that the algorithm will traverse the entire left and right subtrees before visiting the root node. The process is repeated recursively for each subtree until all nodes have been visited.\n• Deleting a binary tree: Post-order traversal can be used to delete a binary tree. The algorithm starts by recursively deleting the left and right subtrees, then deletes the root node.\n• Calculating the height of a binary tree: Post-order traversal can be used to calculate the height of a binary tree. The algorithm starts by recursively calculating the height of the left and right subtrees, then adding 1 to the larger height and returning it as the height of the current node.\n• Creating a postfix expression: Post-order traversal can be used to generate a postfix expression for an expression tree. The algorithm starts by recursively visiting the left and right subtrees, then visiting the root node.\n\nBreadth First vs Depth First\n\nThe main difference between them is:\n• Breadth first traversal explores the tree level by level, visiting all the nodes in a given level before moving on to the next level.\n• Depth first traversal explores the tree by visiting the nodes in a specific order that emphasizes depth.\n\nDue to following different directions, both approaches have their advantages and disadvantages. Choosing which algorithm to use depends on the problem you’re trying to solve and the characteristics of the tree you’re working with. Let’s take a closer look at each approach:\n\nBreadth first traversal (also known as level-order traversal) is a very systematic approach that guarantees that all nodes at a particular level are visited before moving on to the next level. This makes it useful in a variety of applications, such as finding the shortest path between two nodes, finding all the nodes at a particular level, or checking if a binary tree is balanced.\n\nHowever, breadth first traversal can be less efficient than depth first traversal, especially if the tree is very deep. This is because breadth first traversal requires storing all the nodes at a particular level in memory before moving on to the next level. For very deep trees, this can quickly consume a lot of memory.\n\nDepth first traversal algorithms (pre-order, in-order, and post-order) explore the tree by visiting the nodes in a specific order that emphasizes depth. This approach is often more memory-efficient than breadth first traversal, as it only requires storing the path from the root to the current node. It can also be more flexible than breadth first traversal, as it allows you to prioritize certain branches of the tree or visit nodes in a specific order.\n\nHowever, if the tree is in an unbalanced state and you are using a recursive approach - you may face some issues. Because recursive approach tends to prioritize visiting nodes on one side of the tree before moving on to the other side. This can result in deeper nodes being visited later in the process, which could impact the efficiency of certain algorithms that rely on visiting nodes in a specific order.\n\nIn this case, it may be more appropriate to use an iterative approach or breadth first search. With the iterative approach using explicit stack implementation, it is possible to alternate between left and right subtrees, which can help address this issue.\n\nBut if the tree is balanced, recursive approach can be a good choice, because it has a space complexity of O(log n) and can be implemented more simpler than an iterative approach or Level-order traversal.\n\nWhen to use Breadth First or Depth First\n\nSo, which traversal algorithm should you use? It depends on the problem you’re trying to solve and the characteristics of the tree you’re working with.\n• Use breadth first traversal if you need to find the shortest path between two nodes, find all the nodes at a particular level, or check if a binary tree is balanced.\n• Use depth first traversal if you want to prioritize certain branches of the tree or visit nodes in a specific order.\n• If memory usage is a concern, depth first traversal may be a better choice for very deep trees. If the tree is very wide, however, breadth first traversal may be more memory-efficient.\n\nAt the end, the choice of which traversal algorithm to use depends on the specifics of your problem and your data structure.\n\nUsing Recursive vs Iterative Methods for Traversals\n\nRecursive and iterative methods are two commonly used approaches for implementing tree traversals. Each method has its own strengths and weaknesses, and the choice of which to use can depend on various factors, such as the specific traversal algorithm, the size and structure of the tree, and the programming language and platform being used.\n\nRecursive traversal involves calling a function recursively on the tree nodes to visit them in a specific order. For example, in pre-order traversal, we visit the current node, then recursively visit the left and right subtrees. Recursive traversal can be simple to implement and can make the code more readable and concise. It can also be more intuitive to think about traversing a tree recursively, especially when the traversal algorithm involves backtracking.\n\nOn the other hand, recursive traversal can be inefficient in terms of memory usage, as it creates a new function call stack frame for each node visited. If the tree is very deep or unbalanced, this can lead to a stack overflow or other memory-related issues.\n\nIterative traversal involves using a stack or queue data structure to keep track of the nodes to visit. For example, in pre-order traversal, we start with the root node and push it onto the stack. We then repeatedly pop a node from the stack, visit it, and push its right and left subtrees onto the stack in that order. This continues until the stack is empty. Iterative traversal can be more memory-efficient than recursive traversal, as it avoids creating a new stack frame for each node visited. It can also be more scalable, as it can handle large trees more easily.\n\nOn the other hand, iterative traversal can be more complex to implement and can make the code less readable and harder to debug. It can also be harder to reason about the order in which nodes are visited, especially if the traversal algorithm involves backtracking.\n\nHow does Recursion includes Automatic Backtracking with Call Stack\n\nRecursion is a technique in programming where a function calls itself, and it plays a significant role in tree traversals. When the function is called, the computer stores all the necessary data to complete the task in the call stack. As the function recursively calls itself, each call adds a new layer to the stack, creating a stack frame.\n\nWhen the function encounters a base case, the function starts to resolve the stack from the last call to the first call, each call returning a value to the previous call. This process is called backtracking. In the case of tree traversals, we use backtracking to go back to the previous node after traversing its children.\n\nFor example, let’s say we have a binary search tree that looks like this:\n\nIf we print the values with pre-order, we will get: “10, 5, 3, 9, 20, 15, 25”.\n\nWhen we start traversing the tree using recursion, we begin with node 10. We then traverse the left side of the tree, which takes us to node 5, then to node 3, and finally to node 9. Since node 9 doesn’t have a left child, we backtrack to node 3 and then to node 5. We then move to the right side of the tree, which takes us to node 20. We traverse the left side of the right subtree, which takes us to node 15, and finally to node 25. Since node 25 doesn’t have any children, we backtrack to node 15, then to node 20, and finally to the root node, node 10. This way, we have traversed the whole tree in pre-order.\n\nThis process of recursive function calls and backtracking is handled by the call stack. When we call a function, a new frame is added to the stack, and when a function returns, the frame is popped off the stack. By keeping track of the frames on the stack, we can backtrack through the recursive calls and effectively traverse the tree.\n\nOverall, recursion and backtracking allow us to easily traverse trees and other complex data structures in a concise and effective way. But we must be careful to avoid infinite loops and excessive stack usage, which can cause our programs to crash.\n\nIn this section, we will explore the iterative and recursive implementations of General and Binary tree traversals, and see how they can be used to process tree nodes efficiently.\n\nNow we will go through the iterative and recursive implementations of the General tree traversals: level-order, pre-order, and post-order. You might be thinking why is there no in-order traversal included.\n\nSince General (n-ary) trees do not have a fixed number of children, there is no such “standard” definition of applying in-order traversal to them. Even though there are ways to specify in-order traversal definition for a General tree, but still it is not something that is often used for them in practice.\n\nFor example, you might stumble upon a question like “N-ary Tree Inorder Traversal”. I won’t be going through it’s details here, but to save you some confusion I’d like to point out in such cases problem refers to a “specific definition” of an in-order traversal for a specific tree - not to a “standard definition”. A specific definition could be: “Traverse all children except the last one (as a LEFT side placement), then visit ROOT, then visit the last child (as a RIGHT side placement)“. Hope this gave you a clear understanding.\n\nBig O for the iterative and recursive traversal methods for General trees are:\n• Level-order traversal: O(n), where n is the number of nodes in the tree.\n• Pre-order traversal: O(n), where n is the number of nodes in the tree.\n• Post-order traversal: O(n), where n is the number of nodes in the tree.\n• Level-order traversal: O(n), where n is the number of nodes in the tree. This is because the traversal requires a queue to store the nodes at each level, and in the worst case scenario, all nodes in the tree are added to the queue.\n• Pre-order and post-order traversals: O(h), where h is the height of the general tree. This is because the function call stack is used to store the function calls for each node in the tree in the case of recursive implementations, or a managed stack or queue is used to store nodes that still need to be visited in the case of iterative implementations. The maximum depth of the function call stack or managed stack/queue is equal to the height of the tree.\n\nTherefore, for very deep trees or large data sets the iterative implementation might be a better choice to avoid stack overflow errors. This is because with iterative implementation we keep the nodes in a stack or queue instead of using the function call stack. This helps to prevent filling up the function call stack while having more granular control over the memory. Because the size of the stack or queue can be managed / adjusted to the size of tree being traversed, rather than being constrained by the maximum size of the function call stack.\n\nBoth the iterative and recursive implementations are included for each traversal method below. For simplicity I have included manual insertion code to create a starter tree & as well as printTreeAsString method to view the tree as string in the console. Just enough code to test all traversals in your favorite code editor. I have also added code comments to make it as easy as possible to follow them along.\n\nIn this section we will cover the iterative and recursive implementations of the four standard traversal techniques for Binary trees: level-order, pre-order, in-order, and post-order. Binary trees have a fixed structure with at most two children for each node, which allows for a well-defined set of traversal techniques.\n\nI’d like to mention these traversals will also apply to Binary tree variants - for example Binary Search Tree, Red-black Tree and AVL Tree. Because they do follow the same structure: consisting of nodes with at most 2 child nodes.\n\nBig O for the iterative and recursive traversal methods for Binary trees are:\n• Level-order traversal: O(n), where n is the number of nodes in the tree.\n• Pre-order traversal: O(n), where n is the number of nodes in the tree.\n• In-order traversal: O(n), where n is the number of nodes in the tree.\n• Post-order traversal: O(n), where n is the number of nodes in the tree.\n• Level-order traversal: O(w), where w is the maximum width of the binary tree, i.e., the maximum number of nodes in any level of the tree - because the traversal requires a queue to store the nodes at each level. Even though O(w) doesn’t fall in the main B﻿ig O complexities list, it still represents a linear complexity - but we cannot just call it as O(n). Because O(w) is specific to the maximum width of a binary tree, while O(n) is directly relative to the input size.\n• You may have a﻿lso noticed space complexity is different compared to General Tree. The reason is Binary tree has a well-defined structure, where each node has at most two child nodes. Due to it’s structure, maximum width of a Binary tree is typically much smaller than the number of nodes in the tree.\n• Pre-order, in-order, and post-order traversals: O(h), where h is the height of the Binary tree. Similar to General tree, reason is the function call stack is used to store the function calls for each node in the tree in the case of recursive implementations, or a managed stack or queue is used to store nodes that still need to be visited in the case of iterative implementations. The maximum depth of the function call stack or managed stack/queue is equal to the height of the tree.\n\nBoth the iterative and recursive implementations are included for each traversal method below. For simplicity I have included manual insertion code to create a starter tree. Just enough code to test all traversals in your favorite code editor. I have also added code comments to make it as easy as possible to follow them along.\n\nWith this s﻿ection, we came to the end of this article. I hope it helped you to understand what Tree traversals are and how do they work for General and Binary trees! If this is your first time on Tree traversals, don’t expect to understand everything at once - this is a fairly complex topic. Try them out and give it some time until it makes sense. Thanks for reading!"
    },
    {
        "link": "https://linkedin.com/pulse/navigating-json-trees-recursion-javascript-alex-lomia",
        "document": "Recursion is a powerful programming technique used to solve problems that can be broken down into smaller, similar problems. In this article, we'll explore how to apply recursion in JavaScript to traverse tree-like JSON structures.\n\nTree traversal is a method of visiting each node in a tree data structure, such as a JSON object. There are various traversal techniques, including depth-first search (DFS) and breadth-first search (BFS). Here, we'll focus on using recursion for depth-first search, which explores a node's children before visiting its siblings.\n\nconst familyTree = { // Depth 0 name: \"John\", children: [ // Depth 1 { name: \"Jane\", children: [ // Depth 2 { name: \"Liam\", children: [ // Depth 3 { name: \"Joseph\", children: [] }, ], }, ], }, // Depth 1 { name: \"Mark\", children: [ // Depth 2 { name: \"Sophia\", children: [] }, ], }, ], };\n\nWe can use a recursive function to traverse and print the names of each member in the family tree.\n\nfunction traverseTree(node) { // Base case: if we've reached one of the bottommost // nodes of the tree - log and exit, as there's nothing // deeper to traverse if (node.children.length === 0) { console.log(node.name); return; } // Otherwise: log the node's name console.log(node.name); // and perform the similar logic for the subtrees of each node node.children.forEach(child => traverseTree(child)); } // The output would be: // // John // Jane // Liam // Joseph // Mark // Sophian\n\nIn the code snippet above, the base case is when the current node has no children, and the function simply prints the node's name. The recursive case prints the node's name and iterates through its children, calling the traverseTree function for each child.\n\nRecursion is particularly useful for traversing tree-like data structures, such as JSON objects, DOM trees, and abstract syntax trees (ASTs) in compilers. It's also beneficial for searching and navigation algorithms in graphs, like DFS and BFS.\n\nRecursion offers an elegant and intuitive approach to handling tree-like structures in JavaScript. However, it's essential to use recursion judiciously, as excessive recursion may lead to stack overflow errors due to the limited call stack size. In some scenarios, iterative solutions might be more efficient. Nevertheless, understanding recursion is a valuable skill for JavaScript developers, enabling them to tackle complex problems with ease."
    },
    {
        "link": "https://learningdaily.dev/algorithms-101-how-to-implement-tree-traversal-in-javascript-b68f2df51490",
        "document": "Understanding algorithms is important for every software developer to have. Algorithms are a common part of any coding interview, whether you are solving problems in JavaScript, Java, or Python. You can utilize algorithms to ace coding interviews, land a job, or solve peculiar problems at work.\n\nToday’s tutorial would focus on algorithms for traversing elements in a tree. Tree traversal looks different in different programming languages; we will be using JavaScript. We start by refreshing our knowledge about trees. Next, we will learn some useful algorithms and look at some common interview questions.\n\nIn computer science, trees are non-linear data structures represented as a collection of nodes connected by edges. Each node stores data of any type, and all nodes in a tree are the same data type.\n• The root, which is the top-most node (it has no parent node). This is typically the starting point of your tree.\n• The parent node, which is connected downwards to one or two nodes.\n• The child node, which has an incoming link (or connecting edge) from a parent node above it.\n• Sibling nodes are nodes that share the same parent.\n• The leaf nodes have parent nodes but no children nodes. They are typically the base/bottom nodes.\n• The degree of a node refers to the number of subtrees within a tree.\n• The depth of a tree refers to the number of edges between a specific node and the root.\n• The height of a node refers to the number of edges in the longest path from a specified node to a leaf node.\n\nA traversed tree is one in which every node on the tree has been visited. Traversal is a process involving iterating over all nodes in a certain manner.\n\nUnlike linear data structures (such as Arrays, Linked Lists, or Queues) which have only one logical way to traverse them with recursion, trees can be traversed in different ways. Generally there are 2 iterative ways for traversing trees:\n\nDepth-first traversal involves traversing a tree from top to bottom. They are implemented in a FILO manner (First In Last Out), like the stack data structure. The left sub-trees are traversed first, then the right sub-trees.\n\nThis is commonly seen when traversing a binary tree. Binary Trees are trees where each node has at most 2 child nodes. In the tree below, the node with the value 1 would be the first to be pushed into a stack, followed by the nodes with values 2, 3, and 4, then it goes back to the top to the node with the value 5 down.\n\nWhen the end of the tree is reached, the values are popped off the stack back into the tree.\n\nThere are 3 types of Depth-first traversal:\n\nIn in-order traversal, we traverse the left child and its sub-tree(s), then we visit the root and then traverse the right child and its sub-tree(s). It takes a “left-root-right” order.\n\nBefore we take a look at a code sample for this algorithm, let’s try to outline the steps involved:\n• Starting at the root node, we traverse the left node and its sub-trees recursively\n• We start reading from the left leaf node, followed by its parent and sibling node\n• We do this recursively until we get back to the root node, then we repeat the process for the right node, starting our reading from its leftmost leaf node\n\nHere is the code for the inOrderPrint:\n\nPutting it in the BinarySearchTree Class:\n\nIn our implementation, we create an object named of the class and insert some values into it. We will then pass the object’s root to the function as a starting point to the traversal.\n\nIf the node passed into the function is not , this function calls recursively on the left child first, i.e., the left subtree, and then prints the value at the node. Then it calls the recursively on the right child, i.e., the right subtree.\n\nThe node will print its own value once all the subsequent calls to the left subtree have been executed.\n\nPre-Order traversal reads the nodes in a tree in a level-by-level order, left-child before right-child. The elements are read in a “root-left-right” order.\n\nHow to implement the preOrderPrint in JavaScript\n\nThe algorithm for pre-order traversal, starting from the root node, is as follows:\n• Visit the and display the data\n• Traverse the right subtree of recursively\n\nNow let’s review the code for pre-order traversal.\n\nWe create a new object of the class and insert values into it. We then pass the root node to the function.\n\nThis function prints the value of the node, then it is recursively invoked for the left child. When the nodes in the left sub-tree have been visited, it is recursively invoked for the right child and its sub-trees.\n\nThe last strategy for traversing a tree is the Post-Order traversal. Here, we traverse the left sub-tree, then the right subtree before we visit the root node. It takes a “left-right-root” order.\n\nThe steps involved for post-order traversal are as follows:\n• Traverse the right subtree of recursively\n• Visit the and print its value\n\nAgain, we create an object named and insert values into it. We will then pass the root node to the function as a starting point to the traversal.\n\nIf the node passed into the function is not null, this function calls on the left child first and then on the right child. Lastly, it prints the value of the .\n\nThe value of a parent node or the root node will only be printed once all the calls have been executed.\n\nWith level-order traversal, trees are traversed level-wise. This means that we visit every node on a level from left to right before going to a lower level. All child nodes are traversed before the next level of grandchildren nodes. This is similar to breadth-first search from graph algorithms.\n\nIn level-order traversal, we utilize a queue to store a reference to the node(s) we want to visit. This ensures that we can traverse the tree left-to-right on the same level.\n\nWhen traversing the tree above, the root node would be the first to be placed in a queue, then the node with the value 12, then 18, 14, 16 and 20. The output would be:\n\nThat concludes what we need to know about tree traversal algorithms. The following are common coding interview questions about tree traversals that you should study:\n• Find Nodes at “k” Distance from the Root.\n• Check if given Preorder, In-order and Post order traversals are of the same tree.\n• Can you do iterative Preorder traversal of a binary tree without recursion?\n• What are advantages and disadvantages of BST?\n\nYou can continue learning about algorithms in JavaScript by visiting Educative’s learning path Ace the JavaScript Coding Interview. JavaScript continues to This path will take you through all that you need to know to crack your JavaScript interviews with confidence."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",
        "document": "The method is an iterative method. It calls a provided function once for each element in an array in ascending-index order. Unlike , always returns and is not chainable. The typical use case is to execute side effects at the end of a chain. Read the iterative methods section for more information about how these methods work in general.\n\nis invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays.\n\nThe method is generic. It only expects the value to have a property and integer-keyed properties.\n\nThere is no way to stop or break a loop other than by throwing an exception. If you need such behavior, the method is the wrong tool.\n\nEarly termination may be accomplished with looping statements like , , and . Array methods like , , , and also stops iteration immediately when further iteration is not necessary.\n\nexpects a synchronous function — it does not wait for promises. Make sure you are aware of the implications while using promises (or async functions) as callbacks.\n\nTo run a series of asynchronous operations sequentially or concurrently, see promise composition."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
        "document": "objects cannot use arbitrary strings as element indexes (as in an associative array) but must use nonnegative integers (or their respective string form). Setting or accessing via non-integers will not set or retrieve an element from the array list itself, but will set or access a variable associated with that array's object property collection. The array's object properties and list of array elements are separate, and the array's traversal and mutation operations cannot be applied to these named properties. Array elements are object properties in the same way that is a property (to be specific, however, is a method). Nevertheless, trying to access an element of an array as follows throws a syntax error because the property name is not valid: JavaScript syntax requires properties beginning with a digit to be accessed using bracket notation instead of dot notation. It's also possible to quote the array indices (e.g., instead of ), although usually not necessary. The in is coerced into a string by the JavaScript engine through an implicit conversion. As a result, and would refer to two different slots on the object, and the following example could be : Only is an actual array index. is an arbitrary string property that will not be visited in array iteration.\n\nMany array methods take a callback function as an argument. The callback function is called sequentially and at most once for each element in the array, and the return value of the callback function is used to determine the return value of the method. They all share the same signature: The current element being processed in the array. The index of the current element being processed in the array. The array that the method was called upon. What is expected to return depends on the array method that was called. The argument (defaults to ) will be used as the value when calling . The value ultimately observable by is determined according to the usual rules: if is non-strict, primitive values are wrapped into objects, and / is substituted with . The argument is irrelevant for any defined with an arrow function, as arrow functions don't have their own binding. The argument passed to is most useful if you want to read another index during iteration, because you may not always have an existing variable that refers to the current array. You should generally not mutate the array during iteration (see mutating initial array in iterative methods), but you can also use this argument to do so. The argument is not the array that is being built, in the case of methods like , , and — there is no way to access the array being built from the callback function. All iterative methods are copying and generic, although they behave differently with empty slots. The following methods are iterative: , , , , , , , , , and . In particular, , , , , , and do not always invoke on every element — they stop iteration as soon as the return value is determined. The and methods also take a callback function and run it at most once for each element in the array, but they have slightly different signatures from typical iterative methods (for example, they don't accept ). The method also takes a callback function, but it is not an iterative method. It mutates the array in-place, doesn't accept , and may invoke the callback multiple times on an index. Iterative methods iterate the array like the following (with a lot of technical details omitted): function method(callbackFn, thisArg) { const length = this.length; for (let i = 0; i < length; i++) { if (i in this) { const result = callbackFn.call(thisArg, this[i], i, this); // Do something with result; maybe return early } } }\n• Not all methods do the test. The , , , and methods do not, but other methods do.\n• The is memorized before the loop starts. This affects how insertions and deletions during iteration are handled (see mutating initial array in iterative methods).\n• The method doesn't memorize the array contents, so if any index is modified during iteration, the new value might be observed.\n• The code above iterates the array in ascending order of index. Some methods iterate in descending order of index ( ): , , and .\n• and have slightly different signatures and do not always start at the first/last element.\n\nArray methods are always generic — they don't access any internal data of the array object. They only access the array elements through the property and the indexed elements. This means that they can be called on array-like objects as well. The property is converted to an integer and then clamped to the range between 0 and 253 - 1. becomes , so even when is not present or is , it behaves as if it has value . The language avoids setting to an unsafe integer. All built-in methods will throw a if will be set to a number greater than 253 - 1. However, because the property of arrays throws an error if it's set to greater than 232 - 1, the safe integer threshold is usually not reached unless the method is called on a non-array object. Some array methods set the property of the array object. They always set the value after normalization, so always ends as an integer. The term array-like object refers to any object that doesn't throw during the conversion process described above. In practice, such object is expected to actually have a property and to have indexed elements in the range to . (If it doesn't have all indices, it will be functionally equivalent to a sparse array.) Any integer index less than zero or greater than is ignored when an array method operates on an array-like object. Many DOM objects are array-like — for example, and . The object is also array-like. You can call array methods on them even if they don't have these methods themselves.\n\nReturns the array item at the given index. Accepts negative integers, which count back from the last item. Returns a new array that is the calling array joined with other array(s) and/or value(s). Copies a sequence of array elements within an array. Returns a new array iterator object that contains the key/value pairs for each index in an array. Returns if every element in the calling array satisfies the testing function. Fills all the elements of an array from a start index to an end index with a static value. Returns a new array containing all elements of the calling array for which the provided filtering function returns . Returns the value of the first element in the array that satisfies the provided testing function, or if no appropriate element is found. Returns the index of the first element in the array that satisfies the provided testing function, or if no appropriate element was found. Returns the value of the last element in the array that satisfies the provided testing function, or if no appropriate element is found. Returns the index of the last element in the array that satisfies the provided testing function, or if no appropriate element was found. Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth. Returns a new array formed by applying a given callback function to each element of the calling array, and then flattening the result by one level. Calls a function for each element in the calling array. Determines whether the calling array contains a value, returning or as appropriate. Returns the first (least) index at which a given element can be found in the calling array. Joins all elements of an array into a string. Returns a new array iterator that contains the keys for each index in the calling array. Returns the last (greatest) index at which a given element can be found in the calling array, or if none is found. Returns a new array containing the results of invoking a function on every element in the calling array. Removes the last element from an array and returns that element. Adds one or more elements to the end of an array, and returns the new of the array. Executes a user-supplied \"reducer\" callback function on each element of the array (from left to right), to reduce it to a single value. Executes a user-supplied \"reducer\" callback function on each element of the array (from right to left), to reduce it to a single value. Reverses the order of the elements of an array in place. (First becomes the last, last becomes first.) Removes the first element from an array and returns that element. Extracts a section of the calling array and returns a new array. Returns if at least one element in the calling array satisfies the provided testing function. Sorts the elements of an array in place and returns the array. Returns a localized string representing the calling array and its elements. Overrides the method. Returns a new array with the elements in reversed order, without modifying the original array. Returns a new array with the elements sorted in ascending order, without modifying the original array. Returns a new array with some elements removed and/or replaced at a given index, without modifying the original array. Returns a string representing the calling array and its elements. Overrides the method. Adds one or more elements to the front of an array, and returns the new of the array. Returns a new array iterator object that contains the values for each index in the array. Returns a new array with the element at the given index replaced with the given value, without modifying the original array. An alias for the method by default.\n\nIterative methods do not mutate the array on which it is called, but the function provided as can. The key principle to remember is that only indexes between 0 and are visited, where is the length of the array at the time the array method was first called, but the element passed to the callback is the value at the time the index is visited. Therefore:\n• will not visit any elements added beyond the array's initial length when the call to the iterative method began.\n• Changes to already-visited indexes do not cause to be invoked on them again.\n• If an existing, yet-unvisited element of the array is changed by , its value passed to the will be the value at the time that element gets visited. Removed elements are not visited. Warning: Concurrent modifications of the kind described above frequently lead to hard-to-understand code and are generally to be avoided (except in special cases). The following examples use the method as an example, but other methods that visit indexes in ascending order work in the same way. We will first define a helper function: Modification to indexes not visited yet will be visible once the index is reached: Modification to already visited indexes does not change iteration behavior, although the array will be different afterwards: Inserting n elements at unvisited indexes that are less than the initial array length will make them be visited. The last n elements in the original array that now have index greater than the initial array length will not be visited: testSideEffect((arr, index) => { if (index === 1) arr.splice(2, 0, \"new\"); }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4], index: 1, elem: e2 // array: [e1, e2, new, e3, e4], index: 2, elem: new // array: [e1, e2, new, e3, e4], index: 3, elem: e3 // Final array: [e1, e2, new, e3, e4] // e4 is not visited because it now has index 4 Inserting n elements with index greater than the initial array length will not make them be visited: testSideEffect((arr) => arr.push(\"new\")); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4, new], index: 1, elem: e2 // array: [e1, e2, e3, e4, new, new], index: 2, elem: e3 // array: [e1, e2, e3, e4, new, new, new], index: 3, elem: e4 // Final array: [e1, e2, e3, e4, new, new, new, new] Inserting n elements at already visited indexes will not make them be visited, but it shifts remaining elements back by n, so the current index and the n - 1 elements before it are visited again: testSideEffect((arr, index) => arr.splice(index, 0, \"new\")); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [new, e1, e2, e3, e4], index: 1, elem: e1 // array: [new, new, e1, e2, e3, e4], index: 2, elem: e1 // array: [new, new, new, e1, e2, e3, e4], index: 3, elem: e1 // Final array: [new, new, new, new, e1, e2, e3, e4] // e1 keeps getting visited because it keeps getting shifted back Deleting n elements at unvisited indexes will make them not be visited anymore. Because the array has shrunk, the last n iterations will visit out-of-bounds indexes. If the method ignores non-existent indexes (see array methods and empty slots), the last n iterations will be skipped; otherwise, they will receive : testSideEffect((arr, index) => { if (index === 1) arr.splice(2, 1); }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4], index: 1, elem: e2 // array: [e1, e2, e4], index: 2, elem: e4 // Final array: [e1, e2, e4] // Does not visit index 3 because it's out-of-bounds // Compare this with find(), which treats nonexistent indexes as undefined: const arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"]; arr2.find((elem, index, arr) => { console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`); if (index === 1) arr.splice(2, 1); return false; }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e1, e2, e3, e4], index: 1, elem: e2 // array: [e1, e2, e4], index: 2, elem: e4 // array: [e1, e2, e4], index: 3, elem: undefined Deleting n elements at already visited indexes does not change the fact that they were visited before they get deleted. Because the array has shrunk, the next n elements after the current index are skipped. If the method ignores non-existent indexes, the last n iterations will be skipped; otherwise, they will receive : testSideEffect((arr, index) => arr.splice(index, 1)); // array: [e1, e2, e3, e4], index: 0, elem: e1 // Does not visit e2 because e2 now has index 0, which has already been visited // array: [e2, e3, e4], index: 1, elem: e3 // Does not visit e4 because e4 now has index 1, which has already been visited // Final array: [e2, e4] // Index 2 is out-of-bounds, so it's not visited // Compare this with find(), which treats nonexistent indexes as undefined: const arr2 = [\"e1\", \"e2\", \"e3\", \"e4\"]; arr2.find((elem, index, arr) => { console.log(`array: [${arr.join(\", \")}], index: ${index}, elem: ${elem}`); arr.splice(index, 1); return false; }); // array: [e1, e2, e3, e4], index: 0, elem: e1 // array: [e2, e3, e4], index: 1, elem: e3 // array: [e2, e4], index: 2, elem: undefined // array: [e2, e4], index: 3, elem: undefined For methods that iterate in descending order of index, insertion causes elements to be skipped, and deletion causes elements to be visited multiple times. Adjust the code above yourself to see the effects."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
        "document": "The method is an iterative method. It calls a provided function once for each element in an array and constructs a new array from the results. Read the iterative methods section for more information about how these methods work in general. is invoked only for array indexes which have assigned values. It is not invoked for empty slots in sparse arrays. The method is generic. It only expects the value to have a property and integer-keyed properties. Since builds a new array, calling it without using the returned array is an anti-pattern; use or instead.\n\nIt is common to use the callback with one argument (the element being traversed). Certain functions are also commonly used with one argument, even though they take additional optional arguments. These habits may lead to confusing behaviors. Consider: While one might expect , the actual result is . is often used with one argument, but takes two. The first is an expression and the second is the radix to the callback function, passes 3 arguments: the element, the index, and the array. The third argument is ignored by — but not the second one! This is the source of possible confusion. Here is a concise example of the iteration steps: /* first iteration (index is 0): */ parseInt(\"1\", 0); // 1 /* second iteration (index is 1): */ parseInt(\"2\", 1); // NaN /* third iteration (index is 2): */ parseInt(\"3\", 2); // NaN To solve this, define another function that only takes one argument: You can also use the function, which only takes one argument: [\"1\", \"2\", \"3\"].map(Number); // [1, 2, 3] // But unlike parseInt(), Number() will also return a float or (resolved) exponential notation: [\"1.1\", \"2.2e2\", \"3e300\"].map(Number); // [1.1, 220, 3e+300] // For comparison, if we use parseInt() on the array above: [\"1.1\", \"2.2e2\", \"3e300\"].map((str) => parseInt(str, 10)); // [1, 2, 3] See A JavaScript optional argument hazard by Allen Wirfs-Brock for more discussions.\n\nThe callback can have side effects. This is not recommended, because copying methods are best used with pure functions. In this case, we can choose to iterate the array twice. Sometimes this pattern goes to its extreme and the only useful thing that does is causing side effects. const products = [ { name: \"sports car\" }, { name: \"laptop\" }, { name: \"phone\" }, ]; products.map((product) => { product.price = 100; }); As mentioned previously, this is an anti-pattern. If you don't use the return value of , use or a loop instead. Or, if you want to create a new array instead:\n\nUsing the third argument of callbackFn The argument is useful if you want to access another element in the array, especially when you don't have an existing variable that refers to the array. The following example first uses to extract the positive values and then uses to create a new array where each element is the average of its neighbors and itself. const numbers = [3, -1, 1, 4, 1, 5, 9, 2, 6]; const averaged = numbers .filter((num) => num > 0) .map((num, idx, arr) => { // Without the arr argument, there's no way to easily access the // intermediate array without saving it to a variable. const prev = arr[idx - 1]; const next = arr[idx + 1]; let count = 1; let total = num; if (prev !== undefined) { count++; total += prev; } if (next !== undefined) { count++; total += next; } const average = total / count; // Keep two decimal places return Math.round(average * 100) / 100; }); console.log(averaged); // [2, 2.67, 2, 3.33, 5, 5.33, 5.67, 4] The argument is not the array that is being built — there is no way to access the array being built from the callback function.\n\nThe method reads the property of and then accesses each property whose key is a nonnegative integer less than . const arrayLike = { length: 3, 0: 2, 1: 3, 2: 4, 3: 5, // ignored by map() since length is 3 }; console.log(Array.prototype.map.call(arrayLike, (x) => x ** 2)); // [ 4, 9, 16 ] This example shows how to iterate through a collection of objects collected by . This is because returns a (which is a collection of objects). In this case, we return all the selected s' values on the screen: You can also use to transform to an array, and then access the method."
    },
    {
        "link": "https://chuckdries.medium.com/traversing-the-dom-with-filter-map-and-arrow-functions-1417d326d2bc",
        "document": "Today I was trying to iterate through all the DOM elements with a certain class on the page, pull their attributes into an object, and compile these objects into an array. Sounds pretty simple, right? Apparently not. I ran into some trouble, so I wanted to write this to help others in similar situations.\n\nIt turns out that returns a , not an array.\n\nThis presented a challenge, as it worked fine in Chrome, but when I tested it in Edge, took on the ID of the element, not the index like it should have. Hmm…\n\nI linked the two relevant MDN docs above. If you read them, you’ll note that they don’t say anything about using the method or the interface in for loops. The doc does, however reference the doc, which does mention iteration:\n\nSo it turns out that this is undefined behavior, meaning there’s no specification in the language about how to handle a using for…in on an so browsers can just do whatever. Not fun.\n\nPer the doc linked above:\n\nThat was an enormously helpful piece of information, but after searching online I noticed that it seemed like everyone on StackOverflow was using . That’s fine, but it’s not very fun.\n\nIn college, I took a class that taught functional programming. It was the most fun I’ve ever had programming.\n\nJavascript arrays have a few methods that are known in functional programming as high order functions. In a nutshell, this generally means they take functions as arguments.\n\nWait a minute, that sounds familiar. While passing functions around is a bit unusual for most object oriented languages, it’s extremely common in JavaScript. ECMAScript 5.1 added a few very useful ones.\n• calls on each item in an array and returns a new array with the values that returned.\n• calls on each item in the array amd assembles a new array of only the elements from the original array for which returned .\n\nDo you see where I’m going with this? Before we get there, we need two more things:\n• Arrow Functions: ES6 added this nifty little feature in 2015. These are different from normal functions in a number of ways, but they’re really cool because of how they handle returning (and they’re really terse)\n• The body of an arrow function can be an expression or a block\n• If the body is an expression, the result of the expression will be returned\n• If the body is a block, it’s basically more compact syntax for an anonymous function*\n• *It’s not relevant here, but arrow functions handle context and very differently. Read the doc if it matters to you.\n\nThe last thing we need is\n• Array.from(): Our whole problem at the start of this journey was that we couldn’t treat our like an array. will take an iterable object and return an array of it.\n\nYou may think to yourself “why didn’t we just do that and keep our original code?” I would reply “where’s the fun in that? We’re learning!” Also, there’s actually a good reason not to convert it to an array which I will get to later.\n\nWe’re finally here. Let’s see what we can do.\n\nSure, it looks similar to our old code, but notice we don’t need to worry about loops anymore! We just say “here’s the relationship between my data and what I want, make it happen.” There’s just a small detail I need to point out: the parenthesis around the curly braces for the object literal are required for this to work. Recall that arrow functions only return implicitly when they’re given an expression. Without the parenthesis, the arrow function would see the braces that define the object literal as the beginning and end of a block and throw a syntax error. Parenthesis in Javascript in general say “do this first and consider the result,” thus giving us an object.\n\nMy code actual code looks just a bit different:\n\nI removed the step of converting elements to an array. Why bother if you don’t need it? It’s just a waste of an instruction. Even though is a function of Array.prototype, it works on any array-like iterable. We just need a way to call it on our . Because is not an array, it doesn’t have the methods in Array.prototype. But Array.prototype does. We can use it and the function. Every function has the method (functions are objects in JavaScript which means they have methods, remember? ). The method allows you to call a function and override the value of . Normally, in a method refers to the object that owns the method (sort of… in javascript is weird). That’s fine when we an array, but we don’t want to map the array prototype (that wouldn’t even work), we want to the . So, we pass it as the first argument. The rest of the arguments will be passed through to the function it calls, so we pass it our anonymous arrow function, which would normally be the only argument we passed to ."
    },
    {
        "link": "https://stackoverflow.com/questions/32682962/javascript-loop-through-array-backwards-with-foreach",
        "document": "Is there a way to loop backwards through an array using (not any other kind of loop, I know how to do with with a for / standard ways) and without actually reversing the array itself?\n\nNo, there isn't. only processes forward through the array. So you'd have to do something else, which you've said in your question was out of scope.\n\nYou could use a loop, of course, or write your own , but again your question was very clear about requiring , specifically. So the answer to the question is: No.\n\nI would just use a loop for this, but you've said you want to use . The only way to use without making a copy of the array that I can think of is to use a . I don't recommend it, not least because objects are notoriously slow, but it looks like this:\n\nBending the question rules a bit, you could write your own . In general it's best to avoid modifying built-in prototypes, so this would be best as a freestanding function you pass the array into:\n\nThat said, you could put it on , it's just not generally good practice; if you do, be sure to make it non-enumerable by using or similar, not simple assignment:\n\nAlternatively, I can think of two options which just use precursors to using (so, they don't use a loop or other kind of loop). I don't know if those would be out of scope or not, so here they are:\n• None Copy the array and reverse the copy, then use on it\n• None Use to get the indexes, reverse that, then use on it (which will loop through the indexes, not the values, but then we can look them up)\n\ncopies the array (shallow copy, so not likely to be expensive), then we reverse it, then :\n\nWe use to get the array indices (using if you store non-element properties in your arrays), reverse that, and then loop through the result:\n\nBoth of those create temporary arrays, so the approach may be better from a memory perspective, but slower at runtime. None of these is better than a simple , though.\n\nSide note: Here's what I mean about using if you have non-element properties on your array:"
    }
]