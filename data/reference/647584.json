[
    {
        "link": "https://medium.com/@imstevenphan/leveraging-ihttpclientfactory-in-asp-net-e1970b9719f5",
        "document": "If you found this article helpful or enjoyed reading it, consider supporting my work by buying me a coffee! Your support allows me to continue creating valuable content like this :\n\nIn the modern landscape of web development, applications are often required to interact with various external services, APIs, and resources over the internet. Whether it’s fetching data from a remote server, sending requests to third-party APIs, or communicating with microservices within your own architecture, the need for making HTTP requests is ubiquitous. However, handling HTTP requests efficiently and effectively is crucial for the overall performance, scalability, and maintainability of your application.\n\nThe HttpClient class has been a staple in .NET for making HTTP requests, but as applications grow in complexity, so do the challenges associated with its usage. This is where HttpClientFactory comes into play, offering a sophisticated solution to address these challenges while providing a streamlined approach to managing HTTP clients. In this article, we will delve deep into the reasons why we need to use HttpClientFactory in ASP.NET Core, exploring its benefits and best practices.\n\nBefore we explore the merits of HttpClientFactory , let's take a moment to understand the challenges that can arise when using HttpClient directly.\n• Resource Exhaustion: When HttpClient instances are created and disposed of individually, it can lead to resource exhaustion due to socket exhaustion. This is particularly problematic when dealing with a large number of requests in a short period of time.\n• Connection Reuse and DNS Caching: Reusing connections across multiple requests is crucial for performance. With direct HttpClient usage, managing connection reuse and DNS caching becomes complex and error-prone.\n• Timeouts and Circuit Breaking: Applying consistent timeout values and implementing circuit-breaking patterns for fault tolerance require manual intervention, making the codebase harder to maintain.\n• Logging and Instrumentation: Incorporating proper logging and instrumentation for monitoring request and response details can become cumbersome when dealing with multiple HttpClient instances.\n\nHttpClientFactory is a feature introduced in ASP.NET Core to address the challenges associated with direct HttpClient usage. It serves as a centralized mechanism for creating and managing instances of HttpClient, promoting best practices and enhancing performance and maintainability.\n• Resource Management: One of the core benefits of HttpClientFactory is its efficient management of HttpClient instances. By using a pool of reusable HttpClient instances, it mitigates the issues of resource exhaustion and socket leaks that can occur with direct instantiation.\n• Connection Pooling: HttpClientFactory manages connection pooling automatically, reusing connections across multiple requests. This leads to reduced overhead and improved performance, especially in scenarios where a high volume of requests is anticipated.\n• Lifetime Management: With HttpClientFactory, you can define the lifetime of HttpClient instances. Scoped lifetime, for example, ensures that an instance is reused within a single HTTP request, while singleton lifetime allows sharing an instance across the entire application. This flexibility ensures optimal memory usage and connection reuse.\n• Configuration and Policies: HttpClientFactory provides a convenient way to configure and apply policies to HttpClient instances. This includes setting timeout values, defining retry behaviors, and implementing circuit-breaking patterns. This abstraction simplifies the codebase and centralizes the configuration logic.\n• Logging and Instrumentation: Incorporating logging and instrumentation becomes seamless with HttpClientFactory. You can apply message logging and capture detailed request and response information without cluttering your business logic.\n• Testing and Mocking: HttpClientFactory enhances testability by allowing you to inject mock or custom implementations of HttpClient . This makes unit testing more straightforward and decouples your code from the actual HTTP requests during testing.\n\nHere’s a sample code that demonstrates how to use HttpClientFactory in an ASP.NET Core application. This example will show you how to create a service that makes HTTP requests using HttpClientFactory.\n\nLet’s assume you have an ASP.NET Core application set up and you want to create a service that interacts with an external API.\n\n4. Use the Service in a Controller:\n\nIn this example, we’ve utilized IHttpClientFactoryto create an HttpClient instance within the MyApiService class. By doing this, we ensure that the instance is managed efficiently, benefiting from connection pooling and proper resource management. This pattern of using IHttpClientFactory to is scalable, maintainable, and aligns with best practices for working with HTTP requests in ASP.NET Core."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests",
        "document": "IHttpClientFactory is a contract implemented by , an opinionated factory, available since .NET Core 2.1, for creating HttpClient instances to be used in your applications.\n\nIssues with the original HttpClient class available in .NET\n\nThe original and well-known HttpClient class can be easily used, but in some cases, it isn't being properly used by many developers.\n\nThough this class implements , declaring and instantiating it within a statement is not preferred because when the object gets disposed of, the underlying socket is not immediately released, which can lead to a socket exhaustion problem. For more information about this issue, see the blog post You're using HttpClient wrong and it's destabilizing your software.\n\nTherefore, is intended to be instantiated once and reused throughout the life of an application. Instantiating an class for every request will exhaust the number of sockets available under heavy loads. That issue will result in errors. Possible approaches to solve that problem are based on the creation of the object as singleton or static, as explained in this Microsoft article on HttpClient usage. This can be a good solution for short-lived console apps or similar, that run a few times a day.\n\nAnother issue that developers run into is when using a shared instance of in long-running processes. In a situation where the HttpClient is instantiated as a singleton or a static object, it fails to handle the DNS changes as described in this issue of the dotnet/runtime GitHub repository.\n\nHowever, the issue isn't really with per se, but with the default constructor for HttpClient, because it creates a new concrete instance of HttpMessageHandler, which is the one that has sockets exhaustion and DNS changes issues mentioned above.\n\nTo address the issues mentioned above and to make instances manageable, .NET Core 2.1 introduced two approaches, one of them being IHttpClientFactory. It's an interface that's used to configure and create instances in an app through Dependency Injection (DI). It also provides extensions for Polly-based middleware to take advantage of delegating handlers in HttpClient.\n\nThe alternative is to use with configured . This approach is applied to long-lived, or singleton instances. To learn more about different strategies, see HttpClient guidelines for .NET.\n\nPolly is a transient-fault-handling library that helps developers add resiliency to their applications, by using some pre-defined policies in a fluent and thread-safe manner.\n\nThe current implementation of IHttpClientFactory, that also implements IHttpMessageHandlerFactory, offers the following benefits:\n• Provides a central location for naming and configuring logical objects. For example, you may configure a client (Service Agent) that's pre-configured to access a specific microservice.\n• Codify the concept of outgoing middleware via delegating handlers in and implementing Polly-based middleware to take advantage of Polly's policies for resiliency.\n• already has the concept of delegating handlers that could be linked together for outgoing HTTP requests. You can register HTTP clients into the factory and you can use a Polly handler to use Polly policies for Retry, CircuitBreakers, and so on.\n• Manage the lifetime of HttpMessageHandler to avoid the mentioned problems/issues that can occur when managing lifetimes yourself.\n\nThere are several ways that you can use in your application:\n\nFor the sake of brevity, this guidance shows the most structured way to use , which is to use Typed Clients (Service Agent pattern). However, all options are documented and are currently listed in this article covering the usage.\n\nHow to use Typed Clients with IHttpClientFactory\n\nSo, what's a \"Typed Client\"? It's just an that's pre-configured for some specific use. This configuration can include specific values such as the base server, HTTP headers or time outs.\n\nThe following diagram shows how Typed Clients are used with :\n\nIn the above image, a (used by a controller or client code) uses an created by the registered . This factory assigns an from a pool to the . The can be configured with Polly's policies when registering the in the DI container with the extension method AddHttpClient.\n\nTo configure the above structure, add IHttpClientFactory in your application by installing the NuGet package that includes the AddHttpClient extension method for IServiceCollection. This extension method registers the internal class to be used as a singleton for the interface . It defines a transient configuration for the HttpMessageHandlerBuilder. This message handler (HttpMessageHandler object), taken from a pool, is used by the returned from the factory.\n\nIn the next snippet, you can see how can be used to register Typed Clients (Service Agents) that need to use .\n\nRegistering the client services as shown in the previous snippet, makes the create a standard for each service. The typed client is registered as transient with DI container. In the preceding code, registers CatalogService, BasketService, OrderingService as transient services so they can be injected and consumed directly without any need for additional registrations.\n\nYou could also add instance-specific configuration in the registration to, for example, configure the base address, and add some resiliency policies, as shown in the following:\n\nIn this next example, you can see the configuration of one of the above policies:\n\nYou can find more details about using Polly in the Next article.\n\nEach time you get an object from the , a new instance is returned. But each uses an that's pooled and reused by the to reduce resource consumption, as long as the 's lifetime hasn't expired.\n\nPooling of handlers is desirable as each handler typically manages its own underlying HTTP connections; creating more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely, which can prevent the handler from reacting to DNS changes.\n\nThe objects in the pool have a lifetime that's the length of time that an instance in the pool can be reused. The default value is two minutes, but it can be overridden per Typed Client. To override it, call on the IHttpClientBuilder that's returned when creating the client, as shown in the following code:\n\nEach Typed Client can have its own configured handler lifetime value. Set the lifetime to to disable handler expiry.\n\nImplement your Typed Client classes that use the injected and configured HttpClient\n\nAs a previous step, you need to have your Typed Client classes defined, such as the classes in the sample code, like 'BasketService', 'CatalogService', 'OrderingService', etc. – A Typed Client is a class that accepts an object (injected through its constructor) and uses it to call some remote HTTP service. For example:\n\nThe Typed Client ( in the example) is activated by DI (Dependency Injection), which means it can accept any registered service in its constructor, in addition to .\n\nA Typed Client is effectively a transient object, that means a new instance is created each time one is needed. It receives a new instance each time it's constructed. However, the objects in the pool are the objects that are reused by multiple instances.\n\nFinally, once you have your typed classes implemented, you can have them registered and configured with . After that you can use them wherever services are injected by DI, such as in Razor page code or an MVC web app controller, shown in the below code from eShopOnContainers:\n\nUp to this point, the above code snippet only shows the example of performing regular HTTP requests. But the 'magic' comes in the following sections where it shows how all the HTTP requests made by can have resilient policies such as retries with exponential backoff, circuit breakers, security features using auth tokens, or even any other custom feature. And all of these can be done just by adding policies and delegating handlers to your registered Typed Clients."
    },
    {
        "link": "https://stackoverflow.com/questions/70296816/asp-net-core-with-httpclientfactory-best-practice",
        "document": "I have an ASP.NET Core application which needs to cyclically call a web service.\n\nwhich calls some function from a class. The class looks like this\n\nThe startup code is this:\n\nCan somebody tell me if it is a good practice calling cyclically\n\nCould some side effects occur because of this? I am testing with some Web Server and quite often getting an exception\n\nCould this be caused by the implementation above, or is this definitely a server problem?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/aspnet/core/fundamentals/http-requests?view=aspnetcore-9.0",
        "document": "An IHttpClientFactory can be registered and used to configure and create HttpClient instances in an app. offers the following benefits:\n• Provides a central location for naming and configuring logical instances. For example, a client named github could be registered and configured to access GitHub. A default client can be registered for general access.\n• Codifies the concept of outgoing middleware via delegating handlers in . Provides extensions for Polly-based middleware to take advantage of delegating handlers in .\n• Manages the pooling and lifetime of underlying instances. Automatic management avoids common DNS (Domain Name System) problems that occur when manually managing lifetimes.\n• Adds a configurable logging experience (via ) for all requests sent through clients created by the factory. The sample code in this topic version uses System.Text.Json to deserialize JSON content returned in HTTP responses. For samples that use and , use the version selector to select a 2.x version of this topic. There are several ways can be used in an app: The best approach depends upon the app's requirements. An can be requested using dependency injection (DI). The following code uses to create an instance: public class BasicModel : PageModel { private readonly IHttpClientFactory _httpClientFactory; public BasicModel(IHttpClientFactory httpClientFactory) => _httpClientFactory = httpClientFactory; public IEnumerable<GitHubBranch>? GitHubBranches { get; set; } public async Task OnGet() { var httpRequestMessage = new HttpRequestMessage( HttpMethod.Get, \"https://api.github.com/repos/dotnet/AspNetCore.Docs/branches\") { Headers = { { HeaderNames.Accept, \"application/vnd.github.v3+json\" }, { HeaderNames.UserAgent, \"HttpRequestsSample\" } } }; var httpClient = _httpClientFactory.CreateClient(); var httpResponseMessage = await httpClient.SendAsync(httpRequestMessage); if (httpResponseMessage.IsSuccessStatusCode) { using var contentStream = await httpResponseMessage.Content.ReadAsStreamAsync(); GitHubBranches = await JsonSerializer.DeserializeAsync <IEnumerable<GitHubBranch>>(contentStream); } } } Using like in the preceding example is a good way to refactor an existing app. It has no impact on how is used. In places where instances are created in an existing app, replace those occurrences with calls to CreateClient.\n• The app requires many distinct uses of .\n• Many s have different configuration. Specify configuration for a named during its registration in : builder.Services.AddHttpClient(\"GitHub\", httpClient => { httpClient.BaseAddress = new Uri(\"https://api.github.com/\"); // using Microsoft.Net.Http.Headers; // The GitHub API requires two headers. httpClient.DefaultRequestHeaders.Add( HeaderNames.Accept, \"application/vnd.github.v3+json\"); httpClient.DefaultRequestHeaders.Add( HeaderNames.UserAgent, \"HttpRequestsSample\"); }); In the preceding code the client is configured with:\n• Two headers required to work with the GitHub API.\n• A new instance of is created. To create a named client, pass its name into : public class NamedClientModel : PageModel { private readonly IHttpClientFactory _httpClientFactory; public NamedClientModel(IHttpClientFactory httpClientFactory) => _httpClientFactory = httpClientFactory; public IEnumerable<GitHubBranch>? GitHubBranches { get; set; } public async Task OnGet() { var httpClient = _httpClientFactory.CreateClient(\"GitHub\"); var httpResponseMessage = await httpClient.GetAsync( \"repos/dotnet/AspNetCore.Docs/branches\"); if (httpResponseMessage.IsSuccessStatusCode) { using var contentStream = await httpResponseMessage.Content.ReadAsStreamAsync(); GitHubBranches = await JsonSerializer.DeserializeAsync <IEnumerable<GitHubBranch>>(contentStream); } } } In the preceding code, the request doesn't need to specify a hostname. The code can pass just the path, since the base address configured for the client is used.\n• Provide the same capabilities as named clients without the need to use strings as keys.\n• Provides IntelliSense and compiler help when consuming clients.\n• Provide a single location to configure and interact with a particular . For example, a single typed client might be used:\n• To encapsulate all logic dealing with the endpoint.\n• Work with DI and can be injected where required in the app. A typed client accepts an parameter in its constructor: public class GitHubService { private readonly HttpClient _httpClient; public GitHubService(HttpClient httpClient) { _httpClient = httpClient; _httpClient.BaseAddress = new Uri(\"https://api.github.com/\"); // using Microsoft.Net.Http.Headers; // The GitHub API requires two headers. _httpClient.DefaultRequestHeaders.Add( HeaderNames.Accept, \"application/vnd.github.v3+json\"); _httpClient.DefaultRequestHeaders.Add( HeaderNames.UserAgent, \"HttpRequestsSample\"); } public async Task<IEnumerable<GitHubBranch>?> GetAspNetCoreDocsBranchesAsync() => await _httpClient.GetFromJsonAsync<IEnumerable<GitHubBranch>>( \"repos/dotnet/AspNetCore.Docs/branches\"); }\n• The configuration is moved into the typed client.\n• The provided instance is stored as a private field. API-specific methods can be created that expose functionality. For example, the method encapsulates code to retrieve docs GitHub branches. The following code calls AddHttpClient in to register the typed client class: The typed client is registered as transient with DI. In the preceding code, registers as a transient service. This registration uses a factory method to:\n• Create an instance of , passing in the instance of to its constructor. The typed client can be injected and consumed directly: The configuration for a typed client can also be specified during its registration in , rather than in the typed client's constructor: can be used in combination with third-party libraries such as Refit. Refit is a REST library for .NET. It converts REST APIs into live interfaces. Call to generate a dynamic implementation of an interface, which uses to make the external HTTP calls. Call to generate the dynamic implementation and then call to configure the underlying : builder.Services.AddRefitClient<IGitHubClient>() .ConfigureHttpClient(httpClient => { httpClient.BaseAddress = new Uri(\"https://api.github.com/\"); // using Microsoft.Net.Http.Headers; // The GitHub API requires two headers. httpClient.DefaultRequestHeaders.Add( HeaderNames.Accept, \"application/vnd.github.v3+json\"); httpClient.DefaultRequestHeaders.Add( HeaderNames.UserAgent, \"HttpRequestsSample\"); }); Use DI to access the dynamic implementation of : In the preceding examples, all HTTP requests use the GET HTTP verb. also supports other HTTP verbs, including: For a complete list of supported HTTP verbs, see HttpMethod. The following example shows how to make an HTTP POST request: public async Task CreateItemAsync(TodoItem todoItem) { var todoItemJson = new StringContent( JsonSerializer.Serialize(todoItem), Encoding.UTF8, Application.Json); // using static System.Net.Mime.MediaTypeNames; using var httpResponseMessage = await _httpClient.PostAsync(\"/api/TodoItems\", todoItemJson); httpResponseMessage.EnsureSuccessStatusCode(); } In the preceding code, the method:\n• Serializes the parameter to JSON using .\n• Creates an instance of StringContent to package the serialized JSON for sending in the HTTP request's body.\n• Calls PostAsync to send the JSON content to the specified URL. This is a relative URL that gets added to the HttpClient.BaseAddress.\n• Calls EnsureSuccessStatusCode to throw an exception if the response status code doesn't indicate success. also supports other types of content. For example, MultipartContent and StreamContent. For a complete list of supported content, see HttpContent. The following example shows an HTTP PUT request: The preceding code is similar to the POST example. The method calls PutAsync instead of . The following example shows an HTTP DELETE request: In the preceding code, the method calls DeleteAsync. Because HTTP DELETE requests typically contain no body, the method doesn't provide an overload that accepts an instance of . To learn more about using different HTTP verbs with , see HttpClient. has the concept of delegating handlers that can be linked together for outgoing HTTP requests. :\n• Simplifies defining the handlers to apply for each named client.\n• Supports registration and chaining of multiple handlers to build an outgoing request middleware pipeline. Each of these handlers is able to perform work before and after the outgoing request. This pattern:\n• Is similar to the inbound middleware pipeline in ASP.NET Core.\n• Provides a mechanism to manage cross-cutting concerns around HTTP requests, such as:\n• Override SendAsync. Execute code before passing the request to the next handler in the pipeline: public class ValidateHeaderHandler : DelegatingHandler { protected override async Task<HttpResponseMessage> SendAsync( HttpRequestMessage request, CancellationToken cancellationToken) { if (!request.Headers.Contains(\"X-API-KEY\")) { return new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent( \"The API key header X-API-KEY is required.\") }; } return await base.SendAsync(request, cancellationToken); } } The preceding code checks if the header is in the request. If is missing, BadRequest is returned. More than one handler can be added to the configuration for an with Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler: In the preceding code, the is registered with DI. Once registered, AddHttpMessageHandler can be called, passing in the type for the handler. Multiple handlers can be registered in the order that they should execute. Each handler wraps the next handler until the final executes the request: In the preceding code, runs first, before . When creates a new delegating handler, it uses DI to fulfill the handler's constructor parameters. creates a separate DI scope for each handler, which can lead to surprising behavior when a handler consumes a scoped service. For example, consider the following interface and its implementation, which represents a task as an operation with an identifier, : As its name suggests, is registered with DI using a scoped lifetime: The following delegating handler consumes and uses to set the header for the outgoing request: In the download, navigate to and refresh the page. The request scope value changes for each request, but the handler scope value only changes every 5 seconds. Handlers can depend upon services of any scope. Services that handlers depend upon are disposed when the handler is disposed. Use one of the following approaches to share per-request state with message handlers:\n• Pass data into the handler using HttpRequestMessage.Options.\n• Use IHttpContextAccessor to access the current request. integrates with the third-party library Polly. Polly is a comprehensive resilience and transient fault-handling library for .NET. It allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner. Extension methods are provided to enable the use of Polly policies with configured instances. The Polly extensions support adding Polly-based handlers to clients. Polly requires the Microsoft.Extensions.Http.Polly NuGet package. Faults typically occur when external HTTP calls are transient. AddTransientHttpErrorPolicy allows a policy to be defined to handle transient errors. Policies configured with handle the following responses: provides access to a object configured to handle errors representing a possible transient fault: In the preceding code, a policy is defined. Failed requests are retried up to three times with a delay of 600 ms between attempts. Extension methods are provided to add Polly-based handlers, for example, AddPolicyHandler. The following overload inspects the request to decide which policy to apply: In the preceding code, if the outgoing request is an HTTP GET, a 10-second timeout is applied. For any other HTTP method, a 30-second timeout is used. In the preceding example:\n• The first handler uses AddTransientHttpErrorPolicy to add a retry policy. Failed requests are retried up to three times.\n• The second call adds a circuit breaker policy. Further external requests are blocked for 30 seconds if 5 failed attempts occur sequentially. Circuit breaker policies are stateful. All calls through this client share the same circuit state. An approach to managing regularly used policies is to define them once and register them with a . For example:\n• Two policies, and , are added to the Polly registry.\n• AddPolicyHandlerFromRegistry configures individual named clients to use these policies from the Polly registry. For more information on and Polly integrations, see the Polly wiki. A new instance is returned each time is called on the . An HttpMessageHandler is created per named client. The factory manages the lifetimes of the instances. pools the instances created by the factory to reduce resource consumption. An instance may be reused from the pool when creating a new instance if its lifetime hasn't expired. Pooling of handlers is desirable as each handler typically manages its own underlying HTTP connections. Creating more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely, which can prevent the handler from reacting to DNS (Domain Name System) changes. The default handler lifetime is two minutes. The default value can be overridden on a per named client basis: instances can generally be treated as .NET objects not requiring disposal. Disposal cancels outgoing requests and guarantees the given instance can't be used after calling Dispose. tracks and disposes resources used by instances. Keeping a single instance alive for a long duration is a common pattern used before the inception of . This pattern becomes unnecessary after migrating to . There are alternative ways to solve the preceding problems using a long-lived SocketsHttpHandler instance.\n• Create an instance of when the app starts and use it for the life of the app.\n• Configure PooledConnectionLifetime to an appropriate value based on DNS refresh times. The preceding approaches solve the resource management problems that solves in a similar way.\n• The shares connections across instances. This sharing prevents socket exhaustion.\n• The cycles connections according to to avoid stale DNS problems. Clients created via record log messages for all requests. Enable the appropriate information level in the logging configuration to see the default log messages. Additional logging, such as the logging of request headers, is only included at trace level. The log category used for each client includes the name of the client. A client named MyNamedClient, for example, logs messages with a category of \"System.Net.Http.HttpClient.MyNamedClient.LogicalHandler\". Messages suffixed with LogicalHandler occur outside the request handler pipeline. On the request, messages are logged before any other handlers in the pipeline have processed it. On the response, messages are logged after any other pipeline handlers have received the response. Logging also occurs inside the request handler pipeline. In the MyNamedClient example, those messages are logged with the log category \"System.Net.Http.HttpClient.MyNamedClient.ClientHandler\". For the request, this occurs after all other handlers have run and immediately before the request is sent. On the response, this logging includes the state of the response before it passes back through the handler pipeline. Enabling logging outside and inside the pipeline enables inspection of the changes made by the other pipeline handlers. This may include changes to request headers or to the response status code. Including the name of the client in the log category enables log filtering for specific named clients. It may be necessary to control the configuration of the inner used by a client. An is returned when adding named or typed clients. The ConfigurePrimaryHttpMessageHandler extension method can be used to define a delegate. The delegate is used to create and configure the primary used by that client: The pooled instances results in objects being shared. Unanticipated object sharing often results in incorrect code. For apps that require cookies, consider either: In a console app, add the following package references to the project: In the following example:\n• IHttpClientFactory and are registered in the Generic Host's service container.\n• is requested from DI, which in-turn requests an instance of .\n• uses to create an instance of , which it uses to retrieve docs GitHub branches. using System.Text.Json; using System.Text.Json.Serialization; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; var host = new HostBuilder() .ConfigureServices(services => { services.AddHttpClient(); services.AddTransient<GitHubService>(); }) .Build(); try { var gitHubService = host.Services.GetRequiredService<GitHubService>(); var gitHubBranches = await gitHubService.GetAspNetCoreDocsBranchesAsync(); Console.WriteLine($\"{gitHubBranches?.Count() ?? 0} GitHub Branches\"); if (gitHubBranches is not null) { foreach (var gitHubBranch in gitHubBranches) { Console.WriteLine($\"- {gitHubBranch.Name}\"); } } } catch (Exception ex) { host.Services.GetRequiredService<ILogger<Program>>() .LogError(ex, \"Unable to load branches from GitHub.\"); } public class GitHubService { private readonly IHttpClientFactory _httpClientFactory; public GitHubService(IHttpClientFactory httpClientFactory) => _httpClientFactory = httpClientFactory; public async Task<IEnumerable<GitHubBranch>?> GetAspNetCoreDocsBranchesAsync() { var httpRequestMessage = new HttpRequestMessage( HttpMethod.Get, \"https://api.github.com/repos/dotnet/AspNetCore.Docs/branches\") { Headers = { { \"Accept\", \"application/vnd.github.v3+json\" }, { \"User-Agent\", \"HttpRequestsConsoleSample\" } } }; var httpClient = _httpClientFactory.CreateClient(); var httpResponseMessage = await httpClient.SendAsync(httpRequestMessage); httpResponseMessage.EnsureSuccessStatusCode(); using var contentStream = await httpResponseMessage.Content.ReadAsStreamAsync(); return await JsonSerializer.DeserializeAsync <IEnumerable<GitHubBranch>>(contentStream); } } public record GitHubBranch( [property: JsonPropertyName(\"name\")] string Name); Header propagation is an ASP.NET Core middleware to propagate HTTP headers from the incoming request to the outgoing requests. To use header propagation:\n• None Configure the and middleware pipeline in : // Add services to the container. builder.Services.AddControllers(); builder.Services.AddHttpClient(\"PropagateHeaders\") .AddHeaderPropagation(); builder.Services.AddHeaderPropagation(options => { options.Headers.Add(\"X-TraceId\"); }); var app = builder.Build(); // Configure the HTTP request pipeline. app.UseHttpsRedirection(); app.UseHeaderPropagation(); app.MapControllers();\n• None Make outbound requests using the configured instance, which includes the added headers.\n• View or download sample code (how to download)\n• Implement HTTP call retries with exponential backoff with HttpClientFactory and Polly policies\n• How to serialize and deserialize JSON in .NET\n\nAn IHttpClientFactory can be registered and used to configure and create HttpClient instances in an app. offers the following benefits:\n• Provides a central location for naming and configuring logical instances. For example, a client named github could be registered and configured to access GitHub. A default client can be registered for general access.\n• Codifies the concept of outgoing middleware via delegating handlers in . Provides extensions for Polly-based middleware to take advantage of delegating handlers in .\n• Manages the pooling and lifetime of underlying instances. Automatic management avoids common DNS (Domain Name System) problems that occur when manually managing lifetimes.\n• Adds a configurable logging experience (via ) for all requests sent through clients created by the factory. View or download sample code (how to download). The sample code in this topic version uses System.Text.Json to deserialize JSON content returned in HTTP responses. For samples that use and , use the version selector to select a 2.x version of this topic. There are several ways can be used in an app: The best approach depends upon the app's requirements. can be registered by calling : An can be requested using dependency injection (DI). The following code uses to create an instance: public class BasicUsageModel : PageModel { private readonly IHttpClientFactory _clientFactory; public IEnumerable<GitHubBranch> Branches { get; private set; } public bool GetBranchesError { get; private set; } public BasicUsageModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \"https://api.github.com/repos/dotnet/AspNetCore.Docs/branches\"); request.Headers.Add(\"Accept\", \"application/vnd.github.v3+json\"); request.Headers.Add(\"User-Agent\", \"HttpClientFactory-Sample\"); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { using var responseStream = await response.Content.ReadAsStreamAsync(); Branches = await JsonSerializer.DeserializeAsync <IEnumerable<GitHubBranch>>(responseStream); } else { GetBranchesError = true; Branches = Array.Empty<GitHubBranch>(); } } } Using like in the preceding example is a good way to refactor an existing app. It has no impact on how is used. In places where instances are created in an existing app, replace those occurrences with calls to CreateClient.\n• The app requires many distinct uses of .\n• Many s have different configuration. Configuration for a named can be specified during registration in : In the preceding code the client is configured with:\n• Two headers required to work with the GitHub API.\n• A new instance of is created. To create a named client, pass its name into : public class NamedClientModel : PageModel { private readonly IHttpClientFactory _clientFactory; public IEnumerable<GitHubPullRequest> PullRequests { get; private set; } public bool GetPullRequestsError { get; private set; } public bool HasPullRequests => PullRequests.Any(); public NamedClientModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \"repos/dotnet/AspNetCore.Docs/pulls\"); var client = _clientFactory.CreateClient(\"github\"); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { using var responseStream = await response.Content.ReadAsStreamAsync(); PullRequests = await JsonSerializer.DeserializeAsync <IEnumerable<GitHubPullRequest>>(responseStream); } else { GetPullRequestsError = true; PullRequests = Array.Empty<GitHubPullRequest>(); } } } In the preceding code, the request doesn't need to specify a hostname. The code can pass just the path, since the base address configured for the client is used.\n• Provide the same capabilities as named clients without the need to use strings as keys.\n• Provides IntelliSense and compiler help when consuming clients.\n• Provide a single location to configure and interact with a particular . For example, a single typed client might be used:\n• To encapsulate all logic dealing with the endpoint.\n• Work with DI and can be injected where required in the app. A typed client accepts an parameter in its constructor:\n• The configuration is moved into the typed client.\n• The object is exposed as a public property. API-specific methods can be created that expose functionality. For example, the method encapsulates code to retrieve open issues. The following code calls AddHttpClient in to register a typed client class: The typed client is registered as transient with DI. In the preceding code, registers as a transient service. This registration uses a factory method to:\n• Create an instance of , passing in the instance of to its constructor. The typed client can be injected and consumed directly: public class TypedClientModel : PageModel { private readonly GitHubService _gitHubService; public IEnumerable<GitHubIssue> LatestIssues { get; private set; } public bool HasIssue => LatestIssues.Any(); public bool GetIssuesError { get; private set; } public TypedClientModel(GitHubService gitHubService) { _gitHubService = gitHubService; } public async Task OnGet() { try { LatestIssues = await _gitHubService.GetAspNetDocsIssues(); } catch(HttpRequestException) { GetIssuesError = true; LatestIssues = Array.Empty<GitHubIssue>(); } } } The configuration for a typed client can be specified during registration in , rather than in the typed client's constructor: The can be encapsulated within a typed client. Rather than exposing it as a property, define a method which calls the instance internally: In the preceding code, the is stored in a private field. Access to the is by the public method. can be used in combination with third-party libraries such as Refit. Refit is a REST library for .NET. It converts REST APIs into live interfaces. An implementation of the interface is generated dynamically by the , using to make the external HTTP calls. An interface and a reply are defined to represent the external API and its response: A typed client can be added, using Refit to generate the implementation: The defined interface can be consumed where necessary, with the implementation provided by DI and Refit: In the preceding examples, all HTTP requests use the GET HTTP verb. also supports other HTTP verbs, including: For a complete list of supported HTTP verbs, see HttpMethod. The following example shows how to make an HTTP POST request: In the preceding code, the method:\n• Serializes the parameter to JSON using . This uses an instance of JsonSerializerOptions to configure the serialization process.\n• Creates an instance of StringContent to package the serialized JSON for sending in the HTTP request's body.\n• Calls PostAsync to send the JSON content to the specified URL. This is a relative URL that gets added to the HttpClient.BaseAddress.\n• Calls EnsureSuccessStatusCode to throw an exception if the response status code does not indicate success. also supports other types of content. For example, MultipartContent and StreamContent. For a complete list of supported content, see HttpContent. The following example shows an HTTP PUT request: The preceding code is very similar to the POST example. The method calls PutAsync instead of . The following example shows an HTTP DELETE request: In the preceding code, the method calls DeleteAsync. Because HTTP DELETE requests typically contain no body, the method doesn't provide an overload that accepts an instance of . To learn more about using different HTTP verbs with , see HttpClient. has the concept of delegating handlers that can be linked together for outgoing HTTP requests. :\n• Simplifies defining the handlers to apply for each named client.\n• Supports registration and chaining of multiple handlers to build an outgoing request middleware pipeline. Each of these handlers is able to perform work before and after the outgoing request. This pattern:\n• Is similar to the inbound middleware pipeline in ASP.NET Core.\n• Provides a mechanism to manage cross-cutting concerns around HTTP requests, such as:\n• Override SendAsync. Execute code before passing the request to the next handler in the pipeline: public class ValidateHeaderHandler : DelegatingHandler { protected override async Task<HttpResponseMessage> SendAsync( HttpRequestMessage request, CancellationToken cancellationToken) { if (!request.Headers.Contains(\"X-API-KEY\")) { return new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent( \"You must supply an API key header called X-API-KEY\") }; } return await base.SendAsync(request, cancellationToken); } } The preceding code checks if the header is in the request. If is missing, BadRequest is returned. More than one handler can be added to the configuration for an with Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler: public void ConfigureServices(IServiceCollection services) { services.AddTransient<ValidateHeaderHandler>(); services.AddHttpClient(\"externalservice\", c => { // Assume this is an \"external\" service which requires an API KEY c.BaseAddress = new Uri(\"https://localhost:5001/\"); }) .AddHttpMessageHandler<ValidateHeaderHandler>(); // Remaining code deleted for brevity. In the preceding code, the is registered with DI. Once registered, AddHttpMessageHandler can be called, passing in the type for the handler. Multiple handlers can be registered in the order that they should execute. Each handler wraps the next handler until the final executes the request: services.AddTransient<SecureRequestHandler>(); services.AddTransient<RequestDataHandler>(); services.AddHttpClient(\"clientwithhandlers\") // This handler is on the outside and called first during the // request, last during the response. .AddHttpMessageHandler<SecureRequestHandler>() // This handler is on the inside, closest to the request being // sent. .AddHttpMessageHandler<RequestDataHandler>(); When creates a new delegating handler, it uses DI to fulfill the handler's constructor parameters. creates a separate DI scope for each handler, which can lead to surprising behavior when a handler consumes a scoped service. For example, consider the following interface and its implementation, which represents a task as an operation with an identifier, : As its name suggests, is registered with DI using a scoped lifetime: public void ConfigureServices(IServiceCollection services) { services.AddDbContext<TodoContext>(options => options.UseInMemoryDatabase(\"TodoItems\")); services.AddHttpContextAccessor(); services.AddHttpClient<TodoClient>((sp, httpClient) => { var httpRequest = sp.GetRequiredService<IHttpContextAccessor>().HttpContext.Request; // For sample purposes, assume TodoClient is used in the context of an incoming request. httpClient.BaseAddress = new Uri(UriHelper.BuildAbsolute(httpRequest.Scheme, httpRequest.Host, httpRequest.PathBase)); httpClient.Timeout = TimeSpan.FromSeconds(5); }); services.AddScoped<IOperationScoped, OperationScoped>(); services.AddTransient<OperationHandler>(); services.AddTransient<OperationResponseHandler>(); services.AddHttpClient(\"Operation\") .AddHttpMessageHandler<OperationHandler>() .AddHttpMessageHandler<OperationResponseHandler>() .SetHandlerLifetime(TimeSpan.FromSeconds(5)); services.AddControllers(); services.AddRazorPages(); } The following delegating handler consumes and uses to set the header for the outgoing request: In the download], navigate to and refresh the page. The request scope value changes for each request, but the handler scope value only changes every 5 seconds. Handlers can depend upon services of any scope. Services that handlers depend upon are disposed when the handler is disposed. Use one of the following approaches to share per-request state with message handlers:\n• Pass data into the handler using HttpRequestMessage.Options.\n• Use IHttpContextAccessor to access the current request. integrates with the third-party library Polly. Polly is a comprehensive resilience and transient fault-handling library for .NET. It allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner. Extension methods are provided to enable the use of Polly policies with configured instances. The Polly extensions support adding Polly-based handlers to clients. Polly requires the Microsoft.Extensions.Http.Polly NuGet package. Faults typically occur when external HTTP calls are transient. AddTransientHttpErrorPolicy allows a policy to be defined to handle transient errors. Policies configured with handle the following responses: provides access to a object configured to handle errors representing a possible transient fault: In the preceding code, a policy is defined. Failed requests are retried up to three times with a delay of 600 ms between attempts. Extension methods are provided to add Polly-based handlers, for example, AddPolicyHandler. The following overload inspects the request to decide which policy to apply: var timeout = Policy.TimeoutAsync<HttpResponseMessage>( TimeSpan.FromSeconds(10)); var longTimeout = Policy.TimeoutAsync<HttpResponseMessage>( TimeSpan.FromSeconds(30)); services.AddHttpClient(\"conditionalpolicy\") // Run some code to select a policy based on the request .AddPolicyHandler(request => request.Method == HttpMethod.Get ? timeout : longTimeout); In the preceding code, if the outgoing request is an HTTP GET, a 10-second timeout is applied. For any other HTTP method, a 30-second timeout is used. In the preceding example:\n• The first handler uses AddTransientHttpErrorPolicy to add a retry policy. Failed requests are retried up to three times.\n• The second call adds a circuit breaker policy. Further external requests are blocked for 30 seconds if 5 failed attempts occur sequentially. Circuit breaker policies are stateful. All calls through this client share the same circuit state. An approach to managing regularly used policies is to define them once and register them with a .\n• The \"regular\" and \"long\" policies are added.\n• AddPolicyHandlerFromRegistry adds the \"regular\" and \"long\" policies from the registry. For more information on and Polly integrations, see the Polly wiki. A new instance is returned each time is called on the . An HttpMessageHandler is created per named client. The factory manages the lifetimes of the instances. pools the instances created by the factory to reduce resource consumption. An instance may be reused from the pool when creating a new instance if its lifetime hasn't expired. Pooling of handlers is desirable as each handler typically manages its own underlying HTTP connections. Creating more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely, which can prevent the handler from reacting to DNS (Domain Name System) changes. The default handler lifetime is two minutes. The default value can be overridden on a per named client basis: instances can generally be treated as .NET objects not requiring disposal. Disposal cancels outgoing requests and guarantees the given instance can't be used after calling Dispose. tracks and disposes resources used by instances. Keeping a single instance alive for a long duration is a common pattern used before the inception of . This pattern becomes unnecessary after migrating to . There are alternative ways to solve the preceding problems using a long-lived SocketsHttpHandler instance.\n• Create an instance of when the app starts and use it for the life of the app.\n• Configure PooledConnectionLifetime to an appropriate value based on DNS refresh times. The preceding approaches solve the resource management problems that solves in a similar way.\n• The shares connections across instances. This sharing prevents socket exhaustion.\n• The cycles connections according to to avoid stale DNS problems. The pooled instances results in objects being shared. Unanticipated object sharing often results in incorrect code. For apps that require cookies, consider either: Clients created via record log messages for all requests. Enable the appropriate information level in the logging configuration to see the default log messages. Additional logging, such as the logging of request headers, is only included at trace level. The log category used for each client includes the name of the client. A client named MyNamedClient, for example, logs messages with a category of \"System.Net.Http.HttpClient.MyNamedClient.LogicalHandler\". Messages suffixed with LogicalHandler occur outside the request handler pipeline. On the request, messages are logged before any other handlers in the pipeline have processed it. On the response, messages are logged after any other pipeline handlers have received the response. Logging also occurs inside the request handler pipeline. In the MyNamedClient example, those messages are logged with the log category \"System.Net.Http.HttpClient.MyNamedClient.ClientHandler\". For the request, this occurs after all other handlers have run and immediately before the request is sent. On the response, this logging includes the state of the response before it passes back through the handler pipeline. Enabling logging outside and inside the pipeline enables inspection of the changes made by the other pipeline handlers. This may include changes to request headers or to the response status code. Including the name of the client in the log category enables log filtering for specific named clients. It may be necessary to control the configuration of the inner used by a client. An is returned when adding named or typed clients. The ConfigurePrimaryHttpMessageHandler extension method can be used to define a delegate. The delegate is used to create and configure the primary used by that client: In a console app, add the following package references to the project: In the following example:\n• IHttpClientFactory is registered in the Generic Host's service container.\n• creates a client factory instance from the service, which is used to create an . is used to retrieve a webpage.\n• creates a scope to execute the service's method and write the first 500 characters of the webpage content to the console. using System; using System.Net.Http; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; class Program { static async Task<int> Main(string[] args) { var builder = new HostBuilder() .ConfigureServices((hostContext, services) => { services.AddHttpClient(); services.AddTransient<IMyService, MyService>(); }).UseConsoleLifetime(); var host = builder.Build(); try { var myService = host.Services.GetRequiredService<IMyService>(); var pageContent = await myService.GetPage(); Console.WriteLine(pageContent.Substring(0, 500)); } catch (Exception ex) { var logger = host.Services.GetRequiredService<ILogger<Program>>(); logger.LogError(ex, \"An error occurred.\"); } return 0; } public interface IMyService { Task<string> GetPage(); } public class MyService : IMyService { private readonly IHttpClientFactory _clientFactory; public MyService(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task<string> GetPage() { // Content from BBC One: Dr. Who website (©BBC) var request = new HttpRequestMessage(HttpMethod.Get, \"https://www.bbc.co.uk/programmes/b006q2x0\"); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { return await response.Content.ReadAsStringAsync(); } else { return $\"StatusCode: {response.StatusCode}\"; } } } } Header propagation is an ASP.NET Core middleware to propagate HTTP headers from the incoming request to the outgoing HTTP Client requests. To use header propagation:\n• None Configure the middleware and in :\n• None The client includes the configured headers on outbound requests:\n• Implement HTTP call retries with exponential backoff with HttpClientFactory and Polly policies\n• How to serialize and deserialize JSON in .NET\n\nAn IHttpClientFactory can be registered and used to configure and create HttpClient instances in an app. offers the following benefits:\n• Provides a central location for naming and configuring logical instances. For example, a client named github could be registered and configured to access GitHub. A default client can be registered for general access.\n• Codifies the concept of outgoing middleware via delegating handlers in . Provides extensions for Polly-based middleware to take advantage of delegating handlers in .\n• Manages the pooling and lifetime of underlying instances. Automatic management avoids common DNS (Domain Name System) problems that occur when manually managing lifetimes.\n• Adds a configurable logging experience (via ) for all requests sent through clients created by the factory. View or download sample code (how to download). The sample code in this topic version uses System.Text.Json to deserialize JSON content returned in HTTP responses. For samples that use and , use the version selector to select a 2.x version of this topic. There are several ways can be used in an app: The best approach depends upon the app's requirements. can be registered by calling : An can be requested using dependency injection (DI). The following code uses to create an instance: public class BasicUsageModel : PageModel { private readonly IHttpClientFactory _clientFactory; public IEnumerable<GitHubBranch> Branches { get; private set; } public bool GetBranchesError { get; private set; } public BasicUsageModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \"https://api.github.com/repos/dotnet/AspNetCore.Docs/branches\"); request.Headers.Add(\"Accept\", \"application/vnd.github.v3+json\"); request.Headers.Add(\"User-Agent\", \"HttpClientFactory-Sample\"); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { using var responseStream = await response.Content.ReadAsStreamAsync(); Branches = await JsonSerializer.DeserializeAsync <IEnumerable<GitHubBranch>>(responseStream); } else { GetBranchesError = true; Branches = Array.Empty<GitHubBranch>(); } } } Using like in the preceding example is a good way to refactor an existing app. It has no impact on how is used. In places where instances are created in an existing app, replace those occurrences with calls to CreateClient.\n• The app requires many distinct uses of .\n• Many s have different configuration. Configuration for a named can be specified during registration in : In the preceding code the client is configured with:\n• Two headers required to work with the GitHub API.\n• A new instance of is created. To create a named client, pass its name into : public class NamedClientModel : PageModel { private readonly IHttpClientFactory _clientFactory; public IEnumerable<GitHubPullRequest> PullRequests { get; private set; } public bool GetPullRequestsError { get; private set; } public bool HasPullRequests => PullRequests.Any(); public NamedClientModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \"repos/dotnet/AspNetCore.Docs/pulls\"); var client = _clientFactory.CreateClient(\"github\"); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { using var responseStream = await response.Content.ReadAsStreamAsync(); PullRequests = await JsonSerializer.DeserializeAsync <IEnumerable<GitHubPullRequest>>(responseStream); } else { GetPullRequestsError = true; PullRequests = Array.Empty<GitHubPullRequest>(); } } } In the preceding code, the request doesn't need to specify a hostname. The code can pass just the path, since the base address configured for the client is used.\n• Provide the same capabilities as named clients without the need to use strings as keys.\n• Provides IntelliSense and compiler help when consuming clients.\n• Provide a single location to configure and interact with a particular . For example, a single typed client might be used:\n• To encapsulate all logic dealing with the endpoint.\n• Work with DI and can be injected where required in the app. A typed client accepts an parameter in its constructor: public class GitHubService { public HttpClient Client { get; } public GitHubService(HttpClient client) { client.BaseAddress = new Uri(\"https://api.github.com/\"); // GitHub API versioning client.DefaultRequestHeaders.Add(\"Accept\", \"application/vnd.github.v3+json\"); // GitHub requires a user-agent client.DefaultRequestHeaders.Add(\"User-Agent\", \"HttpClientFactory-Sample\"); Client = client; } public async Task<IEnumerable<GitHubIssue>> GetAspNetDocsIssues() { var response = await Client.GetAsync( \"/repos/dotnet/AspNetCore.Docs/issues?state=open&sort=created&direction=desc\"); response.EnsureSuccessStatusCode(); using var responseStream = await response.Content.ReadAsStreamAsync(); return await JsonSerializer.DeserializeAsync <IEnumerable<GitHubIssue>>(responseStream); } } If you would like to see code comments translated to languages other than English, let us know in this GitHub discussion issue.\n• The configuration is moved into the typed client.\n• The object is exposed as a public property. API-specific methods can be created that expose functionality. For example, the method encapsulates code to retrieve open issues. The following code calls AddHttpClient in to register a typed client class: The typed client is registered as transient with DI. In the preceding code, registers as a transient service. This registration uses a factory method to:\n• Create an instance of , passing in the instance of to its constructor. The typed client can be injected and consumed directly: public class TypedClientModel : PageModel { private readonly GitHubService _gitHubService; public IEnumerable<GitHubIssue> LatestIssues { get; private set; } public bool HasIssue => LatestIssues.Any(); public bool GetIssuesError { get; private set; } public TypedClientModel(GitHubService gitHubService) { _gitHubService = gitHubService; } public async Task OnGet() { try { LatestIssues = await _gitHubService.GetAspNetDocsIssues(); } catch(HttpRequestException) { GetIssuesError = true; LatestIssues = Array.Empty<GitHubIssue>(); } } } The configuration for a typed client can be specified during registration in , rather than in the typed client's constructor: The can be encapsulated within a typed client. Rather than exposing it as a property, define a method which calls the instance internally: In the preceding code, the is stored in a private field. Access to the is by the public method. can be used in combination with third-party libraries such as Refit. Refit is a REST library for .NET. It converts REST APIs into live interfaces. An implementation of the interface is generated dynamically by the , using to make the external HTTP calls. An interface and a reply are defined to represent the external API and its response: A typed client can be added, using Refit to generate the implementation: The defined interface can be consumed where necessary, with the implementation provided by DI and Refit: In the preceding examples, all HTTP requests use the GET HTTP verb. also supports other HTTP verbs, including: For a complete list of supported HTTP verbs, see HttpMethod. The following example shows how to make an HTTP POST request: In the preceding code, the method:\n• Serializes the parameter to JSON using . This uses an instance of JsonSerializerOptions to configure the serialization process.\n• Creates an instance of StringContent to package the serialized JSON for sending in the HTTP request's body.\n• Calls PostAsync to send the JSON content to the specified URL. This is a relative URL that gets added to the HttpClient.BaseAddress.\n• Calls EnsureSuccessStatusCode to throw an exception if the response status code does not indicate success. also supports other types of content. For example, MultipartContent and StreamContent. For a complete list of supported content, see HttpContent. The following example shows an HTTP PUT request: The preceding code is very similar to the POST example. The method calls PutAsync instead of . The following example shows an HTTP DELETE request: In the preceding code, the method calls DeleteAsync. Because HTTP DELETE requests typically contain no body, the method doesn't provide an overload that accepts an instance of . To learn more about using different HTTP verbs with , see HttpClient. has the concept of delegating handlers that can be linked together for outgoing HTTP requests. :\n• Simplifies defining the handlers to apply for each named client.\n• Supports registration and chaining of multiple handlers to build an outgoing request middleware pipeline. Each of these handlers is able to perform work before and after the outgoing request. This pattern:\n• Is similar to the inbound middleware pipeline in ASP.NET Core.\n• Provides a mechanism to manage cross-cutting concerns around HTTP requests, such as:\n• Override SendAsync. Execute code before passing the request to the next handler in the pipeline: public class ValidateHeaderHandler : DelegatingHandler { protected override async Task<HttpResponseMessage> SendAsync( HttpRequestMessage request, CancellationToken cancellationToken) { if (!request.Headers.Contains(\"X-API-KEY\")) { return new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent( \"You must supply an API key header called X-API-KEY\") }; } return await base.SendAsync(request, cancellationToken); } } The preceding code checks if the header is in the request. If is missing, BadRequest is returned. More than one handler can be added to the configuration for an with Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddHttpMessageHandler: public void ConfigureServices(IServiceCollection services) { services.AddTransient<ValidateHeaderHandler>(); services.AddHttpClient(\"externalservice\", c => { // Assume this is an \"external\" service which requires an API KEY c.BaseAddress = new Uri(\"https://localhost:5001/\"); }) .AddHttpMessageHandler<ValidateHeaderHandler>(); // Remaining code deleted for brevity. In the preceding code, the is registered with DI. Once registered, AddHttpMessageHandler can be called, passing in the type for the handler. Multiple handlers can be registered in the order that they should execute. Each handler wraps the next handler until the final executes the request: services.AddTransient<SecureRequestHandler>(); services.AddTransient<RequestDataHandler>(); services.AddHttpClient(\"clientwithhandlers\") // This handler is on the outside and called first during the // request, last during the response. .AddHttpMessageHandler<SecureRequestHandler>() // This handler is on the inside, closest to the request being // sent. .AddHttpMessageHandler<RequestDataHandler>(); When creates a new delegating handler, it uses DI to fulfill the handler's constructor parameters. creates a separate DI scope for each handler, which can lead to surprising behavior when a handler consumes a scoped service. For example, consider the following interface and its implementation, which represents a task as an operation with an identifier, : As its name suggests, is registered with DI using a scoped lifetime: public void ConfigureServices(IServiceCollection services) { services.AddDbContext<TodoContext>(options => options.UseInMemoryDatabase(\"TodoItems\")); services.AddHttpContextAccessor(); services.AddHttpClient<TodoClient>((sp, httpClient) => { var httpRequest = sp.GetRequiredService<IHttpContextAccessor>().HttpContext.Request; // For sample purposes, assume TodoClient is used in the context of an incoming request. httpClient.BaseAddress = new Uri(UriHelper.BuildAbsolute(httpRequest.Scheme, httpRequest.Host, httpRequest.PathBase)); httpClient.Timeout = TimeSpan.FromSeconds(5); }); services.AddScoped<IOperationScoped, OperationScoped>(); services.AddTransient<OperationHandler>(); services.AddTransient<OperationResponseHandler>(); services.AddHttpClient(\"Operation\") .AddHttpMessageHandler<OperationHandler>() .AddHttpMessageHandler<OperationResponseHandler>() .SetHandlerLifetime(TimeSpan.FromSeconds(5)); services.AddControllers(); services.AddRazorPages(); } The following delegating handler consumes and uses to set the header for the outgoing request: In the download], navigate to and refresh the page. The request scope value changes for each request, but the handler scope value only changes every 5 seconds. Handlers can depend upon services of any scope. Services that handlers depend upon are disposed when the handler is disposed. Use one of the following approaches to share per-request state with message handlers:\n• Pass data into the handler using HttpRequestMessage.Properties.\n• Use IHttpContextAccessor to access the current request. integrates with the third-party library Polly. Polly is a comprehensive resilience and transient fault-handling library for .NET. It allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner. Extension methods are provided to enable the use of Polly policies with configured instances. The Polly extensions support adding Polly-based handlers to clients. Polly requires the Microsoft.Extensions.Http.Polly NuGet package. Faults typically occur when external HTTP calls are transient. AddTransientHttpErrorPolicy allows a policy to be defined to handle transient errors. Policies configured with handle the following responses: provides access to a object configured to handle errors representing a possible transient fault: In the preceding code, a policy is defined. Failed requests are retried up to three times with a delay of 600 ms between attempts. Extension methods are provided to add Polly-based handlers, for example, AddPolicyHandler. The following overload inspects the request to decide which policy to apply: var timeout = Policy.TimeoutAsync<HttpResponseMessage>( TimeSpan.FromSeconds(10)); var longTimeout = Policy.TimeoutAsync<HttpResponseMessage>( TimeSpan.FromSeconds(30)); services.AddHttpClient(\"conditionalpolicy\") // Run some code to select a policy based on the request .AddPolicyHandler(request => request.Method == HttpMethod.Get ? timeout : longTimeout); In the preceding code, if the outgoing request is an HTTP GET, a 10-second timeout is applied. For any other HTTP method, a 30-second timeout is used. In the preceding example:\n• The first handler uses AddTransientHttpErrorPolicy to add a retry policy. Failed requests are retried up to three times.\n• The second call adds a circuit breaker policy. Further external requests are blocked for 30 seconds if 5 failed attempts occur sequentially. Circuit breaker policies are stateful. All calls through this client share the same circuit state. An approach to managing regularly used policies is to define them once and register them with a .\n• The \"regular\" and \"long\" policies are added.\n• AddPolicyHandlerFromRegistry adds the \"regular\" and \"long\" policies from the registry. For more information on and Polly integrations, see the Polly wiki. A new instance is returned each time is called on the . An HttpMessageHandler is created per named client. The factory manages the lifetimes of the instances. pools the instances created by the factory to reduce resource consumption. An instance may be reused from the pool when creating a new instance if its lifetime hasn't expired. Pooling of handlers is desirable as each handler typically manages its own underlying HTTP connections. Creating more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely, which can prevent the handler from reacting to DNS (Domain Name System) changes. The default handler lifetime is two minutes. The default value can be overridden on a per named client basis: instances can generally be treated as .NET objects not requiring disposal. Disposal cancels outgoing requests and guarantees the given instance can't be used after calling Dispose. tracks and disposes resources used by instances. Keeping a single instance alive for a long duration is a common pattern used before the inception of . This pattern becomes unnecessary after migrating to . There are alternative ways to solve the preceding problems using a long-lived SocketsHttpHandler instance.\n• Create an instance of when the app starts and use it for the life of the app.\n• Configure PooledConnectionLifetime to an appropriate value based on DNS refresh times. The preceding approaches solve the resource management problems that solves in a similar way.\n• The shares connections across instances. This sharing prevents socket exhaustion.\n• The cycles connections according to to avoid stale DNS problems. The pooled instances results in objects being shared. Unanticipated object sharing often results in incorrect code. For apps that require cookies, consider either: Clients created via record log messages for all requests. Enable the appropriate information level in the logging configuration to see the default log messages. Additional logging, such as the logging of request headers, is only included at trace level. The log category used for each client includes the name of the client. A client named MyNamedClient, for example, logs messages with a category of \"System.Net.Http.HttpClient.MyNamedClient.LogicalHandler\". Messages suffixed with LogicalHandler occur outside the request handler pipeline. On the request, messages are logged before any other handlers in the pipeline have processed it. On the response, messages are logged after any other pipeline handlers have received the response. Logging also occurs inside the request handler pipeline. In the MyNamedClient example, those messages are logged with the log category \"System.Net.Http.HttpClient.MyNamedClient.ClientHandler\". For the request, this occurs after all other handlers have run and immediately before the request is sent. On the response, this logging includes the state of the response before it passes back through the handler pipeline. Enabling logging outside and inside the pipeline enables inspection of the changes made by the other pipeline handlers. This may include changes to request headers or to the response status code. Including the name of the client in the log category enables log filtering for specific named clients. It may be necessary to control the configuration of the inner used by a client. An is returned when adding named or typed clients. The ConfigurePrimaryHttpMessageHandler extension method can be used to define a delegate. The delegate is used to create and configure the primary used by that client: In a console app, add the following package references to the project: In the following example:\n• IHttpClientFactory is registered in the Generic Host's service container.\n• creates a client factory instance from the service, which is used to create an . is used to retrieve a webpage.\n• creates a scope to execute the service's method and write the first 500 characters of the webpage content to the console. using System; using System.Net.Http; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; class Program { static async Task<int> Main(string[] args) { var builder = new HostBuilder() .ConfigureServices((hostContext, services) => { services.AddHttpClient(); services.AddTransient<IMyService, MyService>(); }).UseConsoleLifetime(); var host = builder.Build(); try { var myService = host.Services.GetRequiredService<IMyService>(); var pageContent = await myService.GetPage(); Console.WriteLine(pageContent.Substring(0, 500)); } catch (Exception ex) { var logger = host.Services.GetRequiredService<ILogger<Program>>(); logger.LogError(ex, \"An error occurred.\"); } return 0; } public interface IMyService { Task<string> GetPage(); } public class MyService : IMyService { private readonly IHttpClientFactory _clientFactory; public MyService(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task<string> GetPage() { // Content from BBC One: Dr. Who website (©BBC) var request = new HttpRequestMessage(HttpMethod.Get, \"https://www.bbc.co.uk/programmes/b006q2x0\"); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { return await response.Content.ReadAsStringAsync(); } else { return $\"StatusCode: {response.StatusCode}\"; } } } } Header propagation is an ASP.NET Core middleware to propagate HTTP headers from the incoming request to the outgoing HTTP Client requests. To use header propagation:\n• None Configure the middleware and in :\n• None The client includes the configured headers on outbound requests:\n• Implement HTTP call retries with exponential backoff with HttpClientFactory and Polly policies\n• How to serialize and deserialize JSON in .NET\n\nAn IHttpClientFactory can be registered and used to configure and create HttpClient instances in an app. It offers the following benefits:\n• Provides a central location for naming and configuring logical instances. For example, a github client can be registered and configured to access GitHub. A default client can be registered for other purposes.\n• Codifies the concept of outgoing middleware via delegating handlers in and provides extensions for Polly-based middleware to take advantage of that.\n• Manages the pooling and lifetime of underlying instances to avoid common DNS problems that occur when manually managing lifetimes.\n• Adds a configurable logging experience (via ) for all requests sent through clients created by the factory. View or download sample code (how to download) Projects targeting .NET Framework require installation of the Microsoft.Extensions.Http NuGet package. Projects that target .NET Core and reference the Microsoft.AspNetCore.App metapackage already include the package. There are several ways can be used in an app: None of them are strictly superior to another. The best approach depends upon the app's constraints. The can be registered by calling the extension method on the , inside the method. Once registered, code can accept an anywhere services can be injected with dependency injection (DI). The can be used to create an instance: public class BasicUsageModel : PageModel { private readonly IHttpClientFactory _clientFactory; public IEnumerable<GitHubBranch> Branches { get; private set; } public bool GetBranchesError { get; private set; } public BasicUsageModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \"https://api.github.com/repos/dotnet/AspNetCore.Docs/branches\"); request.Headers.Add(\"Accept\", \"application/vnd.github.v3+json\"); request.Headers.Add(\"User-Agent\", \"HttpClientFactory-Sample\"); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { Branches = await response.Content .ReadAsAsync<IEnumerable<GitHubBranch>>(); } else { GetBranchesError = true; Branches = Array.Empty<GitHubBranch>(); } } } Using in this fashion is a good way to refactor an existing app. It has no impact on the way is used. In places where instances are currently created, replace those occurrences with a call to CreateClient. If an app requires many distinct uses of , each with a different configuration, an option is to use named clients. Configuration for a named can be specified during registration in . In the preceding code, is called, providing the name github. This client has some default configuration applied—namely the base address and two headers required to work with the GitHub API. Each time is called, a new instance of is created and the configuration action is called. To consume a named client, a string parameter can be passed to . Specify the name of the client to be created: public class NamedClientModel : PageModel { private readonly IHttpClientFactory _clientFactory; public IEnumerable<GitHubPullRequest> PullRequests { get; private set; } public bool GetPullRequestsError { get; private set; } public bool HasPullRequests => PullRequests.Any(); public NamedClientModel(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task OnGet() { var request = new HttpRequestMessage(HttpMethod.Get, \"repos/dotnet/AspNetCore.Docs/pulls\"); var client = _clientFactory.CreateClient(\"github\"); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { PullRequests = await response.Content .ReadAsAsync<IEnumerable<GitHubPullRequest>>(); } else { GetPullRequestsError = true; PullRequests = Array.Empty<GitHubPullRequest>(); } } } In the preceding code, the request doesn't need to specify a hostname. It can pass just the path, since the base address configured for the client is used.\n• Provide the same capabilities as named clients without the need to use strings as keys.\n• Provides IntelliSense and compiler help when consuming clients.\n• Provide a single location to configure and interact with a particular . For example, a single typed client might be used for a single backend endpoint and encapsulate all logic dealing with that endpoint.\n• Work with DI and can be injected where required in your app. A typed client accepts an parameter in its constructor: In the preceding code, the configuration is moved into the typed client. The object is exposed as a public property. It's possible to define API-specific methods that expose functionality. The method encapsulates the code needed to query for and parse out the latest open issues from a GitHub repository. To register a typed client, the generic AddHttpClient extension method can be used within , specifying the typed client class: The typed client is registered as transient with DI. The typed client can be injected and consumed directly: public class TypedClientModel : PageModel { private readonly GitHubService _gitHubService; public IEnumerable<GitHubIssue> LatestIssues { get; private set; } public bool HasIssue => LatestIssues.Any(); public bool GetIssuesError { get; private set; } public TypedClientModel(GitHubService gitHubService) { _gitHubService = gitHubService; } public async Task OnGet() { try { LatestIssues = await _gitHubService.GetAspNetDocsIssues(); } catch(HttpRequestException) { GetIssuesError = true; LatestIssues = Array.Empty<GitHubIssue>(); } } } If preferred, the configuration for a typed client can be specified during registration in , rather than in the typed client's constructor: It's possible to entirely encapsulate the within a typed client. Rather than exposing it as a property, public methods can be provided which call the instance internally. In the preceding code, the is stored as a private field. All access to make external calls goes through the method. can be used in combination with other third-party libraries such as Refit. Refit is a REST library for .NET. It converts REST APIs into live interfaces. An implementation of the interface is generated dynamically by the , using to make the external HTTP calls. An interface and a reply are defined to represent the external API and its response: A typed client can be added, using Refit to generate the implementation: The defined interface can be consumed where necessary, with the implementation provided by DI and Refit: already has the concept of delegating handlers that can be linked together for outgoing HTTP requests. The makes it easy to define the handlers to apply for each named client. It supports registration and chaining of multiple handlers to build an outgoing request middleware pipeline. Each of these handlers is able to perform work before and after the outgoing request. This pattern is similar to the inbound middleware pipeline in ASP.NET Core. The pattern provides a mechanism to manage cross-cutting concerns around HTTP requests, including caching, error handling, serialization, and logging. To create a handler, define a class deriving from DelegatingHandler. Override the method to execute code before passing the request to the next handler in the pipeline: public class ValidateHeaderHandler : DelegatingHandler { protected override async Task<HttpResponseMessage> SendAsync( HttpRequestMessage request, CancellationToken cancellationToken) { if (!request.Headers.Contains(\"X-API-KEY\")) { return new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent( \"You must supply an API key header called X-API-KEY\") }; } return await base.SendAsync(request, cancellationToken); } } The preceding code defines a basic handler. It checks to see if an header has been included on the request. If the header is missing, it can avoid the HTTP call and return a suitable response. During registration, one or more handlers can be added to the configuration for an . This task is accomplished via extension methods on the IHttpClientBuilder. services.AddTransient<ValidateHeaderHandler>(); services.AddHttpClient(\"externalservice\", c => { // Assume this is an \"external\" service which requires an API KEY c.BaseAddress = new Uri(\"https://localhost:5000/\"); }) .AddHttpMessageHandler<ValidateHeaderHandler>(); In the preceding code, the is registered with DI. The handler must be registered in DI as a transient service, never scoped. If the handler is registered as a scoped service and any services that the handler depends upon are disposable:\n• The handler's services could be disposed before the handler goes out of scope.\n• The disposed handler services causes the handler to fail. Once registered, AddHttpMessageHandler can be called, passing in the handler type. Multiple handlers can be registered in the order that they should execute. Each handler wraps the next handler until the final executes the request: services.AddTransient<SecureRequestHandler>(); services.AddTransient<RequestDataHandler>(); services.AddHttpClient(\"clientwithhandlers\") // This handler is on the outside and called first during the // request, last during the response. .AddHttpMessageHandler<SecureRequestHandler>() // This handler is on the inside, closest to the request being // sent. .AddHttpMessageHandler<RequestDataHandler>(); Use one of the following approaches to share per-request state with message handlers:\n• Pass data into the handler using .\n• Use to access the current request. integrates with a popular third-party library called Polly. Polly is a comprehensive resilience and transient fault-handling library for .NET. It allows developers to express policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallback in a fluent and thread-safe manner. Extension methods are provided to enable the use of Polly policies with configured instances. The Polly extensions:\n• Can be used after installing the Microsoft.Extensions.Http.Polly NuGet package. The package isn't included in the ASP.NET Core shared framework. Most common faults occur when external HTTP calls are transient. A convenient extension method called is included which allows a policy to be defined to handle transient errors. Policies configured with this extension method handle , HTTP 5xx responses, and HTTP 408 responses. The extension can be used within . The extension provides access to a object configured to handle errors representing a possible transient fault: In the preceding code, a policy is defined. Failed requests are retried up to three times with a delay of 600 ms between attempts. Additional extension methods exist which can be used to add Polly-based handlers. One such extension is , which has multiple overloads. One overload allows the request to be inspected when defining which policy to apply: var timeout = Policy.TimeoutAsync<HttpResponseMessage>( TimeSpan.FromSeconds(10)); var longTimeout = Policy.TimeoutAsync<HttpResponseMessage>( TimeSpan.FromSeconds(30)); services.AddHttpClient(\"conditionalpolicy\") // Run some code to select a policy based on the request .AddPolicyHandler(request => request.Method == HttpMethod.Get ? timeout : longTimeout); In the preceding code, if the outgoing request is an HTTP GET, a 10-second timeout is applied. For any other HTTP method, a 30-second timeout is used. It's common to nest Polly policies to provide enhanced functionality: In the preceding example, two handlers are added. The first uses the extension to add a retry policy. Failed requests are retried up to three times. The second call to adds a circuit breaker policy. Further external requests are blocked for 30 seconds if five failed attempts occur sequentially. Circuit breaker policies are stateful. All calls through this client share the same circuit state. An approach to managing regularly used policies is to define them once and register them with a . An extension method is provided which allows a handler to be added using a policy from the registry: In the preceding code, two policies are registered when the is added to the . To use a policy from the registry, the method is used, passing the name of the policy to apply. Further information about and Polly integrations can be found on the Polly wiki. A new instance is returned each time is called on the . There's an HttpMessageHandler per named client. The factory manages the lifetimes of the instances. pools the instances created by the factory to reduce resource consumption. An instance may be reused from the pool when creating a new instance if its lifetime hasn't expired. Pooling of handlers is desirable as each handler typically manages its own underlying HTTP connections. Creating more handlers than necessary can result in connection delays. Some handlers also keep connections open indefinitely, which can prevent the handler from reacting to DNS changes. The default handler lifetime is two minutes. The default value can be overridden on a per named client basis. To override it, call SetHandlerLifetime on the that is returned when creating the client: Disposal of the client isn't required. Disposal cancels outgoing requests and guarantees the given instance can't be used after calling Dispose. tracks and disposes resources used by instances. The instances can generally be treated as .NET objects not requiring disposal. Keeping a single instance alive for a long duration is a common pattern used before the inception of . This pattern becomes unnecessary after migrating to . There are alternative ways to solve the preceding problems using a long-lived SocketsHttpHandler instance.\n• Create an instance of when the app starts and use it for the life of the app.\n• Configure PooledConnectionLifetime to an appropriate value based on DNS refresh times. The preceding approaches solve the resource management problems that solves in a similar way.\n• The shares connections across instances. This sharing prevents socket exhaustion.\n• The cycles connections according to to avoid stale DNS problems. The pooled instances results in objects being shared. Unanticipated object sharing often results in incorrect code. For apps that require cookies, consider either: Clients created via record log messages for all requests. Enable the appropriate information level in your logging configuration to see the default log messages. Additional logging, such as the logging of request headers, is only included at trace level. The log category used for each client includes the name of the client. A client named MyNamedClient, for example, logs messages with a category of . Messages suffixed with LogicalHandler occur outside the request handler pipeline. On the request, messages are logged before any other handlers in the pipeline have processed it. On the response, messages are logged after any other pipeline handlers have received the response. Logging also occurs inside the request handler pipeline. In the MyNamedClient example, those messages are logged against the log category . For the request, this occurs after all other handlers have run and immediately before the request is sent out on the network. On the response, this logging includes the state of the response before it passes back through the handler pipeline. Enabling logging outside and inside the pipeline enables inspection of the changes made by the other pipeline handlers. This may include changes to request headers, for example, or to the response status code. Including the name of the client in the log category enables log filtering for specific named clients where necessary. It may be necessary to control the configuration of the inner used by a client. An is returned when adding named or typed clients. The ConfigurePrimaryHttpMessageHandler extension method can be used to define a delegate. The delegate is used to create and configure the primary used by that client: In a console app, add the following package references to the project: In the following example:\n• IHttpClientFactory is registered in the Generic Host's service container.\n• creates a client factory instance from the service, which is used to create an . is used to retrieve a webpage.\n• The service's method is executed to write the first 500 characters of the webpage content to the console. For more information on calling services from , see Dependency injection in ASP.NET Core. using System; using System.Net.Http; using System.Threading.Tasks; using Microsoft.Extensions.DependencyInjection; using Microsoft.Extensions.Hosting; using Microsoft.Extensions.Logging; class Program { static async Task<int> Main(string[] args) { var builder = new HostBuilder() .ConfigureServices((hostContext, services) => { services.AddHttpClient(); services.AddTransient<IMyService, MyService>(); }).UseConsoleLifetime(); var host = builder.Build(); try { var myService = host.Services.GetRequiredService<IMyService>(); var pageContent = await myService.GetPage(); Console.WriteLine(pageContent.Substring(0, 500)); } catch (Exception ex) { var logger = host.Services.GetRequiredService<ILogger<Program>>(); logger.LogError(ex, \"An error occurred.\"); } return 0; } public interface IMyService { Task<string> GetPage(); } public class MyService : IMyService { private readonly IHttpClientFactory _clientFactory; public MyService(IHttpClientFactory clientFactory) { _clientFactory = clientFactory; } public async Task<string> GetPage() { // Content from BBC One: Dr. Who website (©BBC) var request = new HttpRequestMessage(HttpMethod.Get, \"https://www.bbc.co.uk/programmes/b006q2x0\"); var client = _clientFactory.CreateClient(); var response = await client.SendAsync(request); if (response.IsSuccessStatusCode) { return await response.Content.ReadAsStringAsync(); } else { return $\"StatusCode: {response.StatusCode}\"; } } } } Header propagation is a community supported middleware to propagate HTTP headers from the incoming request to the outgoing HTTP Client requests. To use header propagation:\n• None Reference the community supported port of the package HeaderPropagation. ASP.NET Core 3.1 and later supports Microsoft.AspNetCore.HeaderPropagation.\n• None Configure the middleware and in :\n• None The client includes the configured headers on outbound requests:\n• Implement HTTP call retries with exponential backoff with HttpClientFactory and Polly policies"
    },
    {
        "link": "https://stackoverflow.com/questions/77840713/is-it-better-to-use-a-ihttpclientfactory-or-a-static-httpclient-if-i-need-to-mak",
        "document": "I have a business-process(BMPN) that needs to make two http calls. The first one is used for authentication, it contains a login and a password in its body, and its response contains cookies. Then I take these cookies and put them in the second request. Basically, the purpose of the pair is first to authenticate, then to upload a file. But there can be many such files to be uploaded, each file will have its own instance of the business-process, so there can be many of these instances at the same time.\n\nMy service currently looks something like this:\n\nMy idea here is that each instance of my business-process will use this service like that:\n\nThe code does work, meaning the file gets uploaded, but I'm not sure if it won't break with time. There are a few things in particular that I'm worried about.\n• None It is my understending that since I need a lot of HttpClients and they don't need to be long-lived, It is better to use IHttpClientFactory. Since, CookieContainer can be shared among the pool, I want to get rid of CookieContainer and send cookies as a header, hence . But would it be the same/better/worse if I used one static HttpClient with and cookies would be send as a header?\n• None The way I instantiating IHttpClientFactory, is it correct? 95% of the information I've been able to find about it was about ASP.NET Core, but I use .NET Core and I'm not allowed to turn it into ASP.NET Core. So, I have little understanding if the way I do that is correct.\n• None Should IHttpClientFactory be static? Since there will be more than one instance of the service, there will be more than one instance of IHttpClientFactory which feels wrong, but I have not seen example of using a static IHttpClientFactory, so I'm not sure if there is anything wrong with that.\n• None When adding a named client my idea was that I need to somehow make all my Http Clients not to use CookieContainer, so I made this MyHttpClient client. What I don't understand is will it be one and the same instance of HttpClient every time I call CreateClient(\"MyHttpClient\")? Will it break the whole idea of having multiple clients? If so, how do I make the factory to give me only clients that have UseCookies set to false?\n\nThe service seems to be working but I'm not sure if I understand how to work with HttpClient and IHttpClientFactory. I want this thing not to run out of available sockets."
    },
    {
        "link": "https://dnsclient.michaco.net",
        "document": "The 's and methods can be used to run standard DNS queries for a domain name. \n\n You have to provide a and optionally a in addition to a valid domain name.\n\nThe following example queries for all resource records:\n\nEach type of resource record transports very specific and different data which needs custom parsing. Therefore, resource records in DnsClient also have very different properties to access the data. \n\n Resource record collections of the LookupClient's query result are typed with the base class of all resource records, which means, to get to the QueryType specific data, each result record must be cast to the actual type.\n\nTo make that process a little bit easier, DnsClient comes with some build in extension methods for the most common types. \n\n An record for example always only provide an IP address. The corresponding class stores the IP address in the property. \n\n The extension method filters all A records from the answers collection, and casts them to s. Now, the property is available and can be used:\n\nThis is the same as doing a call on the answers collection.\n\nThe following is another example for how to manual cast and then access the resource record type specific data.\n\nA DNS query result can have multiple sections: The answers, authority and additional records.\n\n Answers are the actually requested resource record(s), if any, while additional records might contain resource records which contain additional information to the answer records.\n\nA good example is the record. The actual SRV record transports the port and domain name of the service. Which can be accessed via and properties of the class. \n\n The additionals section might contain another or record which transports the address of the requested service. To find the corresponding record in the additionals section (there could be multiple), we have to match the domain name of the answer with the of the additional record. \n\n Example of how to use additional records:\n\nSee also the resolve service methods below.\n\nAsync and sync API implementations are available for all query API methods.\n\nSome queries might involve more complex business logic to get the results we actually want, e.g. doing a reverse lookup of an IP address to get the hostname and then querying for all IPv4 and IPv6 addresses of that hostname.\n\nFor some of those more commonly used things, this DNS client comes with a default implementation. (If you think that there is something important missing or not working as you expect, feel free to post an issue on GitHub)\n\nThis is a shortcut for\n\nDepending on what gets passed in to the method, it does a reverse lookup of the address first and then tries to populate a instance. See the documentation remarks of for more details.\n\nThe queries for records by using the syntax defined in RFC2782 to resolve available service hosts and ports.\n\nThe query syntax defines a special hostname, like which contains the service name, in this case and optionally a protocol, in this case . \n\n\n\nSame example using the lookup client:\n\nImportant to note that there should be no underscore prefixing the service name or protocol. This will be appended automatically, if the protocol is set.\n\nOne interesting use-case for this is DNS based client side service discovery. Consul for example has a DNS endpoint and supports this syntax. Instead of protocol, we can query for tags defined for the service in the Consul service registry (this is optional again).\n\nIn the following example, we'll query for the consul service itself:"
    },
    {
        "link": "https://stackoverflow.com/questions/2669841/how-to-get-mx-records-for-a-dns-name-with-system-net-dns",
        "document": "Here is a Class I use to look up MX records only.\n\nHere is how you use it."
    },
    {
        "link": "https://github.com/MichaCo/DnsClient.NET",
        "document": "DnsClient.NET is a simple yet very powerful and high performance open source library for the .NET Framework to do DNS lookups.\n\nSee the DnsClient site for more details and documentation.\n\nThe following example instantiates a new to query some IP address.\n• UDP and TCP lookup, configurable if TCP should be used as fallback in case the UDP result is truncated (default=true).\n• Configurable EDNS support to change the default UDP buffer size and request security relevant records\n• Caching\n• Minimum TTL setting to overrule the result's TTL and always cache the responses for at least that time. (Even very low value, like a few milliseconds, do make a huge difference if used in high traffic low latency scenarios)\n• Nameserver auto discovery. If no servers are explicitly configured, DnsClient will try its best to resolve them based on your local system configuration. This includes DNS servers configured via network interfaces or even via Windows specific NRPT policies.\n• Multiple DNS endpoints can be configured. DnsClient will use them in random or sequential order (configurable), with re-tries.\n• Optional audit trail of each response and exception\n• Configurable error handling. Throwing DNS errors, like is turned off by default\n• SRV for service discovery. has some extensions to help with that.\n• AXFR zone transfer (as per spec, LookupClient has to be set to TCP mode only for this type. Also, the result depends on if the DNS server trusts your current connection)\n\nTo build and contribute to this project, you must have the latest .NET SDKs and Visual Studio 2022 installed.\n• See MiniDig's readme for what this example command line tool can do.\n• The Samples repository (there might be more in the future)."
    },
    {
        "link": "https://dnsclient.michaco.net/docs/DnsClient.LookupClient.html",
        "document": "A basic example wihtout specifying any DNS server, which will use the DNS server configured by your local network.\n\nIn the following example, we will create a new LookupClient without explicitly defining any DNS server. This will use the DNS server configured by your local network.\n\nConnecting to one specific DNS server which does not run on the default port :\n\nConnecting to one or more DNS server using the default port:\n\nConnecting to one specific DNS server which does not run on the default port :\n\nThe NameServer class also contains pre defined IPEndPoints for the public google DNS servers, which can be used as follows:"
    },
    {
        "link": "https://github.com/MichaCo/DnsClient.NET/blob/dev/src/DnsClient/LookupClient.cs",
        "document": ""
    }
]