[
    {
        "link": "https://en.cppreference.com/w/cpp/io/cout",
        "document": "The global objects and control output to a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C output stream stdout.\n\nThese objects are guaranteed to be initialized during or before the first time an object of type std::ios_base::Init is constructed and are available for use in the constructors and destructors of static objects with ordered initialization (as long as is included before the object is defined).\n\nUnless std::ios_base::sync_with_stdio(false) has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted output.\n\nBy specification of std::cin, std::cin.tie() returns &std::cout. This means that any input operation on executes std::cout.flush() (via std::basic_istream::sentry's constructor). Similarly, std::wcin.tie() returns &std::wcout.\n\nBy specification of std::cerr, std::cerr.tie() returns &std::cout. This means that any output operation on executes std::cout.flush() (via std::basic_ostream::sentry's constructor). Similarly, std::wcerr.tie() returns &std::wcout. (since C++11)\n\nThe 'c' in the name refers to \"character\" (stroustrup.com FAQ); means \"character output\" and means \"wide character output\".\n\nBecause dynamic initialization of templated variables are unordered, it is not guaranteed that has been initialized to a usable state before the initialization of such variables begins, unless an object of type std::ios_base::Init has been constructed."
    },
    {
        "link": "https://en.cppreference.com/w/cpp/io/cin",
        "document": "The global objects and control input from a stream buffer of implementation-defined type (derived from std::streambuf), associated with the standard C input stream stdin.\n\nThese objects are guaranteed to be initialized during or before the first time an object of type std::ios_base::Init is constructed and are available for use in the constructors and destructors of static objects with ordered initialization (as long as is included before the object is defined).\n\nUnless sync_with_stdio(false) has been issued, it is safe to concurrently access these objects from multiple threads for both formatted and unformatted input.\n\nThe “c” in the name refers to “character” (stroustrup.com FAQ); means “character input” and means “wide character input”."
    },
    {
        "link": "https://stackoverflow.com/questions/39874756/should-using-stdcin-and-using-stdcout-be-avoided-or-encouraged",
        "document": "I searched this site and people says you should avoid using . I totally agree. However, what about and ? Should this be avoided or encouraged?\n\nI know always type is the safest choice, but it is very tedious to type them again and again.\n\nHowever, when you type etc in the begining of the file, it seems very crowd. For example, this simple program read and calculate student grade, in front of it, there are too many , it look very uncomfortable.\n\nIn python's tutorial, it says:\n\nRemember, there is nothing wrong with using ! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.\n\nI want to know what I should do in c++ programs."
    },
    {
        "link": "https://reddit.com/r/cpp_questions/comments/15cyxcr/can_someone_explain_to_a_c_newbie_what_cin_and",
        "document": "Create your account and connect with a world of communities.\n\nBy continuing, you agree to our\n\nand acknowledge that you understand the"
    },
    {
        "link": "https://stackoverflow.com/questions/66791699/how-do-i-stdcout-and-stdcin-at-the-same-time",
        "document": "Yes, you will have to work with multiple threads. Essentially, one thread creates and sends messages, one thread receives them. So, they work in parallel and whenever a message is received it is simply printed (or written to a log or what have you) from the reader thread, and the writer thread will constantly be waiting for user input, and will allow the user to send a message. In this code, the message is printed as soon as its received. Also, this code is highly simplified since I have no idea how your message implementation is done, so all the message specifics are left out and a generic message is just printed at some interval. This kind of implementation will also result in messages received cutting off input. You would need some kind of input space separate from the output space so they don't intercept eachother visually like this, or you could use mutexes but this defeats the purpose of getting a message instantly.\n\nEDIT: Thought I would give more pointers on cin/cout intercepting each other. Basically, input and output happens in the same line and same place in most console implementations (Unless you use redirection or pipes or something). Most actual messaging apps have separate places for input and output. For example, you input your message somewhere, but the messages you receive show up above that. This kind of implementation means that input/output never stack on top of each other, but is also pretty much impossible to do with cin/cout. So, if you really want to do this kind of messaging application, you could use pipes or files OR you could use some libraries. Pretty much any GUI lib (Gtkmm, Qt) will let you do something like this, but if you are console-bound, ncurses will let you manipulate the console in complex ways like this so you can have one section for receiving messages and one for sending them."
    },
    {
        "link": "https://stackoverflow.com/questions/12731959/algorithm-for-calculating-directional-movement",
        "document": "I'm trying to write a basic Asteroids game in C++ using SFML. While I'm able to move my triangle (the player) around rather easily, the way in which it moves I'm not quite satisfied with.\n\nCurrently, the movement isn't relative to the direction it's facing. For example, if I press \"w\" to move forward, the triangle will simply move up the screen regardless of its direction.\n\nWhat I'd like for the triangle to do is move forward when the \"w\" key is pressed, but make the actual direction its moving (in respect to the dimensions of the screen) relative to the actual direction its facing.\n\nSo, if the forward tip of the triangle is facing right, when \"W\" is pressed, it will move right. If \"S\" is pressed in this case, it will move left. \"A\" would make it move up, and of course \"D\" would make it move down.\n\nMy current code does not accomplish this one bit - I think there's a really hacky solution to this, but I'd rather approach this from a more mathematical and elegant perspective if possible.\n\nSo, what would be the best way to accomplish this?\n\nI have three methods of relevance: one for handling keyboard input, the other for handling mouse movement, and an update method."
    },
    {
        "link": "https://stackoverflow.com/questions/24858948/iteration-direction-on-an-array",
        "document": "For this kind of operation you should use the auto-vectorization of your compiler. Iterate small to large . Also, the answer depends on what you mean by \"store the result\" and the number of items items you are going to iterate over.\n\nIf you mean and is not too small then your compiler's auto-vectorizer will optimize this best without any more changes. Even MSVC will get that one correct (at least for SSE). Your compiler will have to do some adjustments for n not a multiple of 4 (or 8 for AVX) and alignment but this cost will be amortized across n and this overhead will have a negligible effect except for small . If is small then you might want to consider alignment. How small is small has to be determined but I would guess it's much less than 100.\n\nIf you mean , a reduction, then you do need to think about this. This has a dependency chain so you need to unroll your loop 3-10 times. Additionally, you need to use a relaxed floating point model since floating point arithmetic is not associative and the auto-vectorization won't kick in without it so add to GCC ( to MSVC). If you unroll the loop and use a a relaxed floating point model then GCC, ICC, Clang, and MSVC should auto-vectorize your reduction efficiently."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/200071",
        "document": "Right here I'm trying to create a game style map where the integer p represents my character. My issue right here is I tried various ways to make my character move on the map but I'm out of ideas as to how. So far I tried to test where by pressing w my character should go northward from its initial position but nothing happens. I tried using \"if (Map[10][20] == p){row--;}\" or \"if (Map[10][20] == p){row -= row;}\". My directional control will be using \"wasd\" key.Any help would be appreciated."
    },
    {
        "link": "https://embedded.com/best-practices-to-safely-navigate-pointers-in-c-c",
        "document": ""
    },
    {
        "link": "https://linustechtips.com/topic/720632-c-array-handling",
        "document": "So i made a post yesterday got a little feedback but it didnt solve my problem. im trying to write a sketch for an arduino in witch i have an array of analog inputs witch i want to read all at once and write them to a array of arrays witch i should be able to do in one line to conserve space on the micro heres my code witch i believe works but id like to know how to do it more efficiently\n\nWhat you're trying to do is a vector operation which is probably impossible to do on an Arduino simply because it doesn't support doing something like this. Besides, all you're saving here is a handful of bytes of executable code. Unless you are literally strapped for bytes, this isn't something to worry about.\n\nIf you really want to save lines, even though it really doesn't matter because it compiles into the same code, you could do\n\nHowever, you cannot compress...\n\n...Into a one line operation because doing so is a vector operation."
    }
]