[
    {
        "link": "https://marketplace.visualstudio.com/items?itemName=njqdev.vscode-python-typehint",
        "document": "Provides type hint auto-completion for Python, with completion items for built-in types, classes and the typing module.\n• None Provides type hint completion items for built-in types, estimated types and the typing module.\n• None Estimates the correct type to provide as a completion item.\n• None Can search Python files in the workspace for type estimation purposes. (boolean) If enabled, other files in the workspace are searched when estimating types for a parameter. Disabling this will increase performance, but may reduce estimation accuracy. (number) The maximum number of files searched in a workspace search. Has no effect if workspace searching is disabled.\n• None If workspace searching is enabled, a VSCode event (onDidOpen) is triggered when a file is searched. This causes other extensions that are listening to the event to analyse the same files, which can add the problems of those files to the Problems window. The only way to prevent this, for now, is by disabling the workspace search setting.\n• None The difference between function and class constructor calls when detecting types is determined by the first letter being upper case (unless the class or function is defined in the currently edited document). The extension can found on the Visual Studio Marketplace."
    },
    {
        "link": "https://github.com/njqdev/vscode-python-typehint",
        "document": "Provides type hint auto-completion for Python, with completion items for built-in types, classes and the typing module.\n• Provides type hint completion items for built-in types, estimated types and the typing module.\n• Estimates the correct type to provide as a completion item.\n• Can search Python files in the workspace for type estimation purposes.\n• If workspace searching is enabled, a VSCode event (onDidOpen) is triggered when a file is searched. This causes other extensions that are listening to the event to analyse the same files, which can add the problems of those files to the Problems window. The only way to prevent this, for now, is by disabling the workspace search setting.\n• The difference between function and class constructor calls when detecting types is determined by the first letter being upper case (unless the class or function is defined in the currently edited document).\n\nThe extension can found on the Visual Studio Marketplace."
    },
    {
        "link": "https://stackoverflow.com/questions/64294188/documentation-for-python-functions-in-visual-studio-code",
        "document": "I am studying python in Visual Studio code, and watching some tutorials I noticed a difference between the tutorial's IDE and mine.\n\nWhen writing code, the tutorial's IDE will have suggestions and explanations on how to use functions. For example, when typing mystring.replace() a popup will appear with information about what the replace function does and what kind of arguments it expects.\n\nIn my case, however, I don't see anything like that (see attached screenshot). Is there something I am missing in the config of VS Code?\n\nEDIT: I have installed the Python Extensions for VS Code. Also, if relevant, I am using Python 3.9.0"
    },
    {
        "link": "https://code.visualstudio.com/docs/languages/python",
        "document": "Working with Python in Visual Studio Code, using the Microsoft Python extension, is simple, fun, and productive. The extension makes VS Code an excellent Python editor, and works on any operating system with a variety of Python interpreters. It leverages all of VS Code's power to provide auto complete and IntelliSense, linting, debugging, and unit testing, along with the ability to easily switch between Python environments, including virtual and conda environments.\n\nThis article provides only an overview of the different capabilities of the Python extension for VS Code. For a walkthrough of editing, running, and debugging code, use the button below.\n\nThe tutorial guides you through installing Python and using the extension. You must install a Python interpreter yourself separately from the extension. For a quick install, use Python from python.org and install the extension from the VS Code Marketplace.\n\nOnce you have a version of Python installed, select it using the Python: Select Interpreter command. If VS Code doesn't automatically locate the interpreter you're looking for, refer to Environments - Manually specify an interpreter.\n\nYou can configure the Python extension through settings. Learn more in the Python Settings reference.\n\nTo experience Python, create a file (using the File Explorer) named and paste in the following code:\n\nThe Python extension then provides shortcuts to run Python code using the currently selected interpreter (Python: Select Interpreter in the Command Palette). To run the active Python file, click the Run Python File play button in the top-right side of the editor.\n\nYou can also run individual lines or a selection of code with the Python: Run Selection/Line in Python Terminal command (Shift+Enter). If there isn't a selection, Smart Send will send the smallest runnable block of code around the line where your cursor is placed to the Python Terminal on (Shift+Enter). An identical Run Python > Run Selection/Line in Python Terminal command is available on the context menu for a selection in the editor. The same terminal will be used every time you run a selection or a line in the terminal/REPL, until that terminal is closed. The same terminal is also used for Run Python File in Terminal. If that terminal is still running the REPL, you should exit the REPL ( ) or switch to a different terminal before running a Python file.\n\nThe Python extension automatically removes indents based on the first non-empty line of the selection, shifting all other lines left as needed.\n\nThe command opens the Python Terminal if necessary; you can also open the interactive REPL environment directly using the Python: Start Terminal REPL command that activates a terminal with the currently selected interpreter and then runs the Python REPL.\n\nFor a more specific walkthrough and other ways of running code, see the run code tutorial.\n\nThe Python extension supports code completion and IntelliSense using the currently selected interpreter. IntelliSense is a general term for a number of features, including intelligent code completion (in-context method and variable suggestions) across all your files and for built-in and third-party modules.\n\nIntelliSense quickly shows methods, class members, and documentation as you type. You can also trigger completions at any time with ⌃Space (Windows, Linux Ctrl+Space). Hovering over identifiers will show more information about them.\n\nGitHub Copilot is an AI-powered code completion tool that helps you write code faster and smarter. You can use the GitHub Copilot extension in VS Code to generate code, or to learn from the code it generates.\n\nGitHub Copilot provides suggestions for languages beyond Python and a wide variety of frameworks, including JavaScript, TypeScript, Ruby, Go, C# and C++.\n\nYou can learn more about how to get started with Copilot in the Copilot documentation.\n\nLinting analyzes your Python code for potential errors, making it easy to navigate to and correct different problems.\n\nThe Python extension can apply a number of different linters including Pylint, pycodestyle, Flake8, mypy, pydocstyle, prospector, and pylama. See Linting.\n\nNo more statement debugging! VS Code comes with great debugging support for Python via the Python Debugger extension, allowing you to set breakpoints, inspect variables, and use the debug console for an in-depth look at how your program is executing step by step. Debug a number of different types of Python applications, including multi-threaded, web, and remote applications.\n\nFor more specific information on debugging in Python, such as configuring your settings and implementing remote debugging, see Debugging. General VS Code debugging information is found in the debugging document.\n\nAdditionally, the Django and Flask tutorials provide examples of how to implement debugging in the context of web applications, including debugging Django templates.\n\nThe Python extension automatically detects Python interpreters that are installed in standard locations. It also detects conda environments as well as virtual environments in the workspace folder. See Configuring Python environments.\n\nThe current environment is shown on the right side of the VS Code Status Bar:\n\nThe Status Bar also indicates if no interpreter is selected:\n\nThe selected environment is used for IntelliSense, auto-completions, linting, formatting, and any other language-related feature. It is also activated when you run or debug Python in a terminal, or when you create a new terminal with the Terminal: Create New Terminal command.\n\nTo change the current interpreter, which includes switching to conda or virtual environments, select the interpreter name on the Status Bar or use the Python: Select Interpreter command.\n\nVS Code prompts you with a list of detected environments as well as any you've added manually to your user settings (see Configuring Python environments).\n\nTo enable Python support for Jupyter notebook files ( ) in VS Code, you can install the Jupyter extension. The Python and Jupyter extensions work together to give you a great Notebook experience in VS Code, providing you the ability to directly view and modify code cells with IntelliSense support, as well as run and debug them.\n\nYou can also convert and open the notebook as a Python code file through the Jupyter: Export to Python Script command. The notebook's cells are delimited in the Python file with comments, and the Jupyter extension shows Run Cell or Run Below CodeLens. Selecting either CodeLens starts the Jupyter server and runs the cell(s) in the Python interactive window:\n\nYou can also connect to a remote Jupyter server to run your notebooks. For more information, see Jupyter support.\n\nThe Python extension supports testing with Python's built-in unittest framework and pytest.\n\nIn order to run tests, you must enable one of the supported testing frameworks in the settings of your project. Each framework has its own specific settings, such as arguments for identifying the paths and patterns for test discovery.\n\nOnce the tests have been discovered, VS Code provides a variety of commands (on the Status Bar, the Command Palette, and elsewhere) to run and debug tests. These commands also allow you to run individual test files and methods\n\nThe Python extension provides a wide variety of settings for its various features. These are described on their relevant topics, such as Editing code, Linting, Debugging, and Testing. The complete list is found in the Settings reference.\n\nProfiles let you quickly switch your extensions, settings, and UI layout depending on your current project or task. To help you get started with Python development, you can use the Python profile template, which is a curated profile with useful extensions, settings, and snippets. You can use the profile template as is or use it as a starting point to customize further for you own workflows.\n\nYou select a profile template through the Profiles > Create Profile... dropdown:\n\nOnce you select a profile template, you can review the settings and extensions, and remove individual items if you don't want to include them in your new Profile. After creating the new profile based on the template, changes made to settings, extensions, or UI are persisted in your profile.\n\nThe Microsoft Python extension provides all of the features described previously in this article. Additional Python language support can be added to VS Code by installing other popular Python extensions.\n\nThe extensions shown above are dynamically queried. Click on an extension tile above to read the description and reviews to decide which extension is best for you. See more in the Marketplace.\n• Python Hello World tutorial - Get started with Python in VS Code.\n• Editing Python - Learn about auto-completion, formatting, and refactoring for Python.\n• Basic Editing - Learn about the powerful VS Code editor."
    },
    {
        "link": "https://code.visualstudio.com/docs/python/linting",
        "document": "Linting highlights semantic and stylistic problems in your Python source code, which often helps you identify and correct subtle programming errors or coding practices that can lead to errors. For example, linting can detect the use of an undefined variable, calls to undefined functions, missing parentheses, and even more subtle issues such as attempting to redefine built-in types or functions. Linting is distinct from Formatting because linting analyzes how the code runs and detects errors, whereas formatting only restructures how code appears.\n\nSearch the VS Code Marketplace for the linter extension of your choice. You can use multiple linters at the same time if you'd like.\n\nMicrosoft publishes the following linting extensions for Python:\n\nYou can refer to each linter extension's README for more details on the supported settings. The following settings are supported by most linter extensions:\n\nLinters, if installed, are enabled by default. You can disable them by disabling the extension per workspace.\n\nLinting will automatically run when a Python file is opened or saved.\n\nErrors and warnings are shown in the Problems panel (⇧⌘M (Windows, Linux Ctrl+Shift+M)) for open files, and are also highlighted in the code editor. Hovering over an underlined issue displays the details:\n\nSome linters may offer Code Actions that can help address reported problems. You can refer to the Feature Contributions section under your preferred linter extension to find out what Code Actions it offers.\n\nLogs for linters are available in the Output panel (⇧⌘U (Windows Ctrl+Shift+U, Linux Ctrl+K Ctrl+H)) when you select from the drop down menu.\n\nYou can change the log level for a linter extension by running the Developer: Set Log Level command from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)). Select the extension from the Extension Logs group, and then select the desired log level.\n\nLinters report issues with some predefined severity. This can be changed using setting for the linter. Refer to each linter extension's README for more details on the supported values and severity levels.\n• Formatting - Learn about how to format your Python code.\n• Debugging - Learn to debug Python both locally and remotely.\n• Basic Editing - Learn about the powerful VS Code editor.\n• Python Extension Template - Create an extension to integrate your favorite linter into VS Code."
    },
    {
        "link": "https://code.visualstudio.com/docs/python/editing",
        "document": "Visual Studio Code is a powerful editing tool for Python source code. The editor includes various features to help you be productive when writing code. For more information about editing in Visual Studio Code, see Basic Editing and Code Navigation.\n\nIn this overview, we will describe the specific editing features provided by the Python extension, including steps on how to customize these features via user and workspace settings.\n\nIntelliSense is a general term for code editing features that relate to code completion. Take a moment to look at the example below. When print is typed, notice how IntelliSense populates auto-completion options. The user is also given a list of options when they begin to type the variable named greeting.\n\nAutocomplete and IntelliSense are provided for all files within the current working folder. They're also available for Python packages that are installed in standard locations.\n\nPylance is the default language server for Python in VS Code, and is installed alongside the Python extension to provide IntelliSense features.\n\nPylance is based on Microsoft’s Pyright static type checking tool, leveraging type stubs ( files) and lazy type inferencing to provide a highly-performant development experience.\n\nFor more on IntelliSense generally, see IntelliSense.\n\nEnabling the full set of IntelliSense features by default could end up making your development experience feel slower, so the Python extension enables a minimum set of features that allow you to be productive while still having a performant experience. However, you can customize the behavior of the analysis engine to your liking through multiple settings.\n\nPylance offers auto import suggestions for modules in your workspace and for packages you installed in your environment. As you type in the editor, you might get completion suggestions. When you accept the suggestion, auto import automatically adds the corresponding import statement to your file.\n\nYou can enable auto imports by setting to in your settings. By default, auto imports are disabled.\n\nTo enable IntelliSense for packages that are installed in non-standard locations, add those locations to the collection in your file (the default collection is empty). For example, you might have Google App Engine installed in custom locations, specified in if you use Flask. In this case, you'd specify those locations as follows:\n\nFor the full list of available IntelliSense controls, you can reference the Python extension code analysis settings and autocomplete settings.\n\nYou can also customize the general behavior of autocomplete and IntelliSense, even disable the features completely. You can learn more in Customizing IntelliSense.\n\nGitHub Copilot is an AI-powered code completion tool that helps you write code faster and smarter. You can use the GitHub Copilot extension in VS Code to generate code, or to learn from the code it generates.\n\nGitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.\n\nYou can learn more about how to get started with Copilot in the Copilot documentation.\n\nWhile editing, you can right-click different identifiers to take advantage of several convenient commands\n• Go to Definition (F12) jumps from your code into the code that defines an object. This command is helpful when you're working with libraries.\n• Peek Definition (⌥F12 (Windows Alt+F12, Linux Ctrl+Shift+F10)), is similar, but displays the definition directly in the editor (making space in the editor window to avoid obscuring any code). Press Escape to close the Peek window or use the x in the upper right corner.\n• Go to Declaration jumps to the point at which the variable or other object is declared in your code.\n• Peek Declaration is similar, but displays the declaration directly in the editor. Again, use Escape or the x in the upper right corner to close the Peek window.\n\nWhen using Pylance, the add import Quick Fix enables you to quickly complete import statements for modules that are installed in your environment. As you start typing a package name in the editor, a Code Action is available to automatically complete the line of source code. Hover over the text (marked with a squiggle) and select the Code Action light bulb. You can then select from the list of potential imports.\n\nThis Code Action also recognizes some of the popular abbreviations for the following common Python packages: as np, as tf, as pd, as plt, as mpl, as m, as spio, and as sp, as pn, and as hv.\n\nThe import suggestions list displays the top 3 high-confidence import options, prioritized based on: most recently used imports, symbols from the same module, symbols from the standard library, symbols from user modules, symbols from third-party packages, and finally sorting by module and symbol name.\n\nBy default, the add import Quick Fix only shows 3 high-confidence import options. If they don't list what you are looking for, you can use the Pylance Search for additional import matches Quick Fix for missing import errors. This Quick Fix displays a quick pick menu that enables you to search for import options that prefix-match the missing import symbol.\n\nPylance displays the Change spelling Quick Fix on unresolved variables or missing imports diagnostics when they are likely caused by typos. This Code Action suggests the correct spelling of the symbol, based on the closest matches found in the workspace.\n\nThe Python extension adds the following refactoring functionalities via the Pylance extension: Extract Variable, Extract Method, Rename Module, Move Symbol and Implement All Inherited Abstract Classes. It also supports extensions that implement additional refactoring features, such as Sort Imports.\n\nExtracts all similar occurrences of the selected text within the current scope, and replaces it with a new variable.\n\nYou can invoke this command by selecting the line of code you wish to extract as a variable. Then select the light-bulb that is displayed next to it.\n\nExtracts all similar occurrences of the selected expression or block within the current scope, and replaces it with a method call.\n\nYou can invoke this command by selecting the lines of code you wish to extract as a method. Then select the light-bulb that is displayed next to it.\n\nAfter a Python file/module is renamed, Pylance can find all instances that may need to be updated and provide you with a preview of all the changes.\n\nTo customize which references need to be updated, you can toggle the checkboxes at the line or from the file level in Refactor Preview. Once you've made your selections, you can select Apply Refactoring or Discard Refactoring.\n\nThe Pylance extension offers two Code Actions to simplify the process of moving symbols to different files:\n• Move symbol to...: displays a file picker to select the destination file for the symbol to be moved to.\n• Move symbol to new file: creates a new file with the symbol name, located in the same directory as the source file where the Code Action was invoked.\n\nYou can access these Code Actions by hovering over the symbol you want to move, then selecting the light bulb that appears next to the desired action. Alternatively, you can right-click on the symbol and select Refactor... from the context menu.\n\nIn Python, abstract classes serve as \"blueprints\" for other classes and help build modular, reusable code by promoting clear structure and requirements for subclasses to adhere to. To define an abstract class in Python, you can create a class that inherits from the class in the module, and annotate its methods with the decorator. Then, you can create new classes that inherit from this abstract class, and define an implementation for the base methods.\n\nPylance offers a Code Action to simplify the process of creating these classes. When you define a new class that inherits from an abstract one, you can now use the Implement all inherited abstract classes Code Action to automatically implement all abstract methods and properties from the parent class:\n\nThe Python extension supports extensions such as isort and Ruff that implement the Sort Imports functionality. This command consolidates specific imports from the same module into a single statement, and organizes statements in alphabetical order.\n\nYou can invoke this by installing an extension that supports sorting imports, then opening the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)) and running Organize Imports.\n\nFor help with common IntelliSense and Python editing issues, check the table below:\n\nPylance by default provides diagnostics for Python files in the Problems panel.\n\nThe list below are some of the most common diagnostics provided by Pylance and how to fix them.\n\nThis error occurs when Pylance is able to find type stubs for the imported package, but is unable find the package itself. This can happen when the package you are trying to import is not installed in the selected Python environment.\n\nHow to fix it\n• If the package is already installed in a different interpreter or kernel, select the correct interpreter.\n• If the package is not installed, you can install it by running the following command in an activated terminal: .\n\nThis error happens when Pylance is unable to find the package or module you're importing, nor its type stubs.\n\nHow to fix it\n• If you are importing a module, make sure it exists in your workspace or in a location that is included in the setting.\n• If you are importing a package that is not installed, you can install it by running the following command in an activated terminal: .\n• If you are importing a package that is already installed in a different interpreter or kernel, select the correct interpreter.\n• If you are working with an editable install and it is currently set up to use import hooks, consider switching to using files that only contain file paths instead, to enhance compatibility and ensure smoother import behavior. Learn more in the Pyright documentation.\n\nThis error occurs when Pylance detects a circular dependency between two or more modules.\n\nHow to fix it\n\nTry to reorder your import statements to break the circular dependency.\n\nThe severity of Pylance's diagnostics can be customized through the setting. Check the settings reference for more information.\n• Debugging - Learn to debug Python both locally and remotely.\n• Basic Editing - Learn about the powerful VS Code editor.\n• Jupyter Support - Learn how to get started with Jupyter Notebooks.\n• Python Extension Template - Create an extension to integrate your favorite Python tools."
    },
    {
        "link": "https://stackoverflow.com/questions/75715384/how-to-make-code-navigation-work-for-a-python-project-in-vscode",
        "document": "I am using VSCode since it seems to be the recommended IDE. One feature that will make it easier for me to explore the code is \"click to navigate\" (i.e when I click on function it navigates to its definition).\n\nCurrently click to navigate works if function is in the same file but not if the definition is in another file. How do I make this work on VSCode?"
    },
    {
        "link": "https://github.com/microsoft/pyright/issues/3540",
        "document": "Describe the bug\n\n I'm working on creating the new pandas-stubs repo. The goal is to provide a wheel that will install as the package . There are PYI files in there that are different than some of the PYI files that are shipped with pandas. If I install my working copy of into my environment, then if there is a PYI file in the pandas distribution, that is taking precedence over the PYI file in the package. It should be the other way around, where the PYI files in take precedence.\n• Create an environment based on in that repo.\n\nWhat happens is that is finding the PYI files in instead of the ones in , which will eventually be the public PYI files. The ones shipped with pandas are used for internal testing of pandas and should be ignored by users. If you remove the files in , then the tests pass fine.\n\nExpected behavior\n\n Any stub present in should override a stub present in the installed version of .\n\nAdditional context\n\n Things work fine with in terms of it using the stubs in when they are installed.\n\nOne other note. It would be useful if when using the flag, printed which stub it was using. I get output like this in the CI: . That PYI file is not in - it is in . pyright should indicate that it is using the file in .\n\nAlso, the failure in CI when using pyright is shown here:\n\n https://github.com/pandas-dev/pandas-stubs/runs/6743066046?check_suite_focus=true\n\nWhen I added to the CI a hack to remove , then the successful run is shown here: https://github.com/pandas-dev/pandas-stubs/runs/6743079731?check_suite_focus=true"
    },
    {
        "link": "https://stackoverflow.com/questions/71209751/how-to-make-vscode-refer-to-a-py-file-when-i-click-on-a-python-method",
        "document": "Just create a file in root of your project and put path to there, like that:\n\nIf needed, use as a separator in case of multiple paths."
    },
    {
        "link": "https://github.com/PyCQA/pylint/issues/4987",
        "document": ""
    }
]