[
    {
        "link": "https://mongodb.com/docs/languages/python/pymongo-driver/current/crud/query/find",
        "document": "The examples in this guide use the sample_restaurants.restaurants collection from the Atlas sample datasets . To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the Get Started with PyMongo tutorial.\n\nIn this guide, you can learn how to use PyMongo, the MongoDB synchronous Python driver, to retrieve data from a MongoDB collection by using read operations. You can call the find() or find_one() method to retrieve documents that match a set of criteria.\n\nPyMongo includes two methods for retrieving documents from a collection: and . These methods take a query filter and return one or more matching documents. A query filter is an object that specifies the documents you want to retrieve in your query.\n\nTo learn more about query filters, see Specify a Query .\n\nTo find a single document in a collection, call the method and pass a query filter that specifies the criteria of the document you want to find. If more than one document matches the query filter, this method returns the first matching document from the retrieved results as a Python dictionary. If no documents match the query filter, the method returns . The method is useful when you know there's only one matching document, or you're only interested in the first match. The following example uses the method to find the first document where the field has the value : The method returns the first document in natural order on disk if no sort criteria is specified. To learn more about sorting, see the sort guide .\n\nTo find multiple documents in a collection, pass a query filter to the method that specifies the criteria of the documents you want to retrieve. The following example uses the method to find all documents where the field has the value : You can use a cursor to iterate over the documents returned by the method. A cursor is a mechanism that allows an application to iterate over database results while holding only a subset of them in memory at a given time. Cursors are useful when your method returns a large amount of documents. You can iterate over the documents in a cursor by using a loop, as shown in the following example: To find all documents in a collection, pass an empty filter to the method:\n\nYou can modify the behavior of the and methods by passing named arguments to them. The following table describes the commonly used arguments: Limits the number of documents to hold in a cursor at a given time. An instance of the class that sets the collation options. A string to attach to the query. This can help you trace and interpret the operation in the server logs and in profile data. To learn more about query comments, see the page in the MongoDB Server manual. The index to use for the query. The maximum execution time on the server for this operation. If this time is exceeded, PyMongo aborts the operation and raises an . The following example uses the method to find all documents where the field has the value and sets a maximum execution time of 10 seconds (10,000 milliseconds): For a full list of available arguments, see the API documentation for the ."
    },
    {
        "link": "https://mongodb.com/docs/languages/python/pymongo-driver/current/read/retrieve",
        "document": "The examples in this guide use the sample_restaurants.restaurants collection from the Atlas sample datasets . To learn how to create a free MongoDB Atlas cluster and load the sample datasets, see the Get Started with PyMongo tutorial.\n\nIn this guide, you can learn how to use PyMongo, the MongoDB synchronous Python driver, to retrieve data from a MongoDB collection by using read operations. You can call the find() or find_one() method to retrieve documents that match a set of criteria.\n\nPyMongo includes two methods for retrieving documents from a collection: and . These methods take a query filter and return one or more matching documents. A query filter is an object that specifies the documents you want to retrieve in your query.\n\nTo learn more about query filters, see Specify a Query .\n\nTo find a single document in a collection, call the method and pass a query filter that specifies the criteria of the document you want to find. If more than one document matches the query filter, this method returns the first matching document from the retrieved results as a Python dictionary. If no documents match the query filter, the method returns . The method is useful when you know there's only one matching document, or you're only interested in the first match. The following example uses the method to find the first document where the field has the value : The method returns the first document in natural order on disk if no sort criteria is specified. To learn more about sorting, see the sort guide .\n\nTo find multiple documents in a collection, pass a query filter to the method that specifies the criteria of the documents you want to retrieve. The following example uses the method to find all documents where the field has the value : You can use a cursor to iterate over the documents returned by the method. A cursor is a mechanism that allows an application to iterate over database results while holding only a subset of them in memory at a given time. Cursors are useful when your method returns a large amount of documents. You can iterate over the documents in a cursor by using a loop, as shown in the following example: To find all documents in a collection, pass an empty filter to the method:\n\nYou can modify the behavior of the and methods by passing named arguments to them. The following table describes the commonly used arguments: Limits the number of documents to hold in a cursor at a given time. An instance of the class that sets the collation options. A string to attach to the query. This can help you trace and interpret the operation in the server logs and in profile data. To learn more about query comments, see the page in the MongoDB Server manual. The index to use for the query. The maximum execution time on the server for this operation. If this time is exceeded, PyMongo aborts the operation and raises an . The following example uses the method to find all documents where the field has the value and sets a maximum execution time of 10 seconds (10,000 milliseconds): For a full list of available arguments, see the API documentation for the ."
    },
    {
        "link": "https://mongodb.com/docs/manual/reference/method/db.collection.find",
        "document": ""
    },
    {
        "link": "https://w3schools.com/python/python_mongodb_find.asp",
        "document": "In MongoDB we use the and methods to find data in a collection. Just like the SELECT statement is used to find data in a table in a MySQL database.\n\nTo select data from a collection in MongoDB, we can use the method.\n\nThe method returns the first occurrence in the selection.\n\nTo select data from a table in MongoDB, we can also use the method.\n\nThe method returns all occurrences in the selection.\n\nThe first parameter of the method is a query object. In this example we use an empty query object, which selects all documents in the collection.\n\nThe second parameter of the method is an object describing which fields to include in the result.\n\nThis parameter is optional, and if omitted, all fields will be included in the result.\n\nYou get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):"
    },
    {
        "link": "https://pymongo.readthedocs.io/en/stable/tutorial.html",
        "document": "This tutorial is intended as an introduction to working with MongoDB and PyMongo.\n\nBefore we start, make sure that you have the PyMongo distribution installed. In the Python shell, the following should run without raising an exception: This tutorial also assumes that a MongoDB instance is running on the default host and port. Assuming you have downloaded and installed MongoDB, you can start it like so:\n\nThe first step when working with PyMongo is to create a to the running mongod instance. Doing so is easy: The above code will connect on the default host and port. We can also specify the host and port explicitly, as follows: Or use the MongoDB URI format:\n\nA single instance of MongoDB can support multiple independent databases. When working with PyMongo you access databases using attribute style access on instances: If your database name is such that using attribute style access won’t work (like ), you can use dictionary style access instead:\n\nA collection is a group of documents stored in MongoDB, and can be thought of as roughly the equivalent of a table in a relational database. Getting a collection in PyMongo works the same as getting a database: An important note about collections (and databases) in MongoDB is that they are created lazily - none of the above commands have actually performed any operations on the MongoDB server. Collections and databases are created when the first document is inserted into them.\n\nTo insert a document into a collection we can use the method: When a document is inserted a special key, , is automatically added if the document doesn’t already contain an key. The value of must be unique across the collection. returns an instance of . For more information on , see the documentation on _id. After inserting the first document, the posts collection has actually been created on the server. We can verify this by listing all of the collections in our database:\n\nThe most basic type of query that can be performed in MongoDB is . This method returns a single document matching a query (or if there are no matches). It is useful when you know there is only one matching document, or are only interested in the first match. Here we use to get the first document from the posts collection: The result is a dictionary matching the one that we inserted previously. The returned document contains an , which was automatically added on insert. also supports querying on specific elements that the resulting document must match. To limit our results to a document with author “Mike” we do: If we try with a different author, like “Eliot”, we’ll get no result:\n\nWe can also find a post by its , which in our example is an ObjectId: Note that an ObjectId is not the same as its string representation: A common task in web applications is to get an ObjectId from the request URL and find the matching document. It’s necessary in this case to convert the ObjectId from a string before passing it to : # The web framework gets post_id from the URL and passes it as a string When I query for a document by ObjectId in my web application I get no result\n\nIn order to make querying a little more interesting, let’s insert a few more documents. In addition to inserting a single document, we can also perform bulk insert operations, by passing a list as the first argument to . This will insert each document in the list, sending only a single command to the server: There are a couple of interesting things to note about this example:\n• None The result from now returns two instances, one for each inserted document.\n• None has a different “shape” than the other posts - there is no field and we’ve added a new field, . This is what we mean when we say that MongoDB is schema-free.\n\nQuerying for More Than One Document¶ To get more than a single document as the result of a query we use the method. returns a instance, which allows us to iterate over all matching documents. For example, we can iterate over every document in the collection: Just like we did with , we can pass a document to to limit the returned results. Here, we get only those documents whose author is “Mike”:\n\nMongoDB supports many different types of advanced queries. As an example, lets perform a query where we limit results to posts older than a certain date, but also sort the results by author: Here we use the special operator to do a range query, and also call to sort the results by author.\n\nAdding indexes can help accelerate certain queries and can also add additional functionality to querying and storing documents. In this example, we’ll demonstrate how to create a unique index on a key that rejects documents whose value for that key already exists in the index. First, we’ll need to create the index: Notice that we have two indexes now: one is the index on that MongoDB creates automatically, and the other is the index on we just created. Now let’s set up some user profiles: The index prevents us from inserting a document whose is already in the collection:"
    },
    {
        "link": "https://mongodb.com/resources/languages/pymongo-tutorial",
        "document": "It's time for the fun part! Let's build the REST API endpoints for our books! We'll add the endpoints implementation in the file, and load the routes in the file. We'll start by initializing an object in :\n\nAs you notice, we're importing from the package. We'll use this object to define the endpoints for our REST API. We're also importing the and models we've defined earlier.\n\nThe first endpoint we'll implement is the endpoint for creating a new book. Add the following after the line:\n\nThe route is because we'll prefix all the books endpoints with . The will be displayed in the API documentation. The is the HTTP status code returned when the request is successful. We use the model to validate both the data passed in the request body and the response we sent back. FastAPI handles the validation for us. In the body of the function, we're using PyMongo's method to add the new book to the collection. We're using the method to retrieve the newly created book from the database. You can read more about the and methods in the PyMongo documentation article for collection level operations.\n\nNext, we'll implement the endpoint for returning a list with all documents in the collection. Append the following to the end of the file:\n\nFor the response model, we're using the type. This means that the response will be a list of objects. We're also using the method to retrieve no more than 100 books from the database. To learn more about and the other parameters of the method, check out the dedicated PyMongo documentation page.\n\nLet's create another endpoint for retrieving a single book by its . Add the following to the end of the file:\n\nHere, we're using the method to retrieve a single book from the database. If the book is found, we're returning it. If the book is not found, we're raising an with a status code and an appropriate message.\n\nArguably, the most important endpoint for our REST API is the endpoint. This endpoint allows us to update a single book. Add the implementation to the end of the file:\n\nLet's go through the code. First, we're building an object that we'll use to update the book. Then, if there are any fields in the object, we're using the method to update the book in the database. It's important to note that we're using the update operator to ensure that only the specified fields are updated instead of rewriting the whole document.\n\nThen, we check the attribute of the to verify that the book was updated. If that's the case, we're using the method to retrieve the updated book from the database and return it.\n\nIf there are no fields in the object, we're just returning the existing book. However, if the book is not found, we're raising an with a status code.\n\nThe last endpoint we'll implement is the endpoint for deleting a single book by its . Add the following to the end of the file:\n\nThe only remarkable thing here is that if the book was deleted, we're returning a status code. This is a success status code indicating that the request has succeeded and there's no content to send in the response payload body.\n\nFinally, we need to register the endpoints. Open the file, import the module, and register the book router. Your final version of the file should look like this:"
    },
    {
        "link": "https://w3schools.com/python/python_mongodb_query.asp",
        "document": "When finding documents in a collection, you can filter the result by using a query object.\n\nThe first argument of the method is a query object, and is used to limit the search.\n\nTo make advanced queries you can use modifiers as values in the query object.\n\nE.g. to find the documents where the \"address\" field starts with the letter \"S\" or higher (alphabetically), use the greater than modifier: :\n\nYou can also use regular expressions as a modifier.\n\nTo find only the documents where the \"address\" field starts with the letter \"S\", use the regular expression :"
    },
    {
        "link": "https://pymongo.readthedocs.io/en/stable/tutorial.html",
        "document": "This tutorial is intended as an introduction to working with MongoDB and PyMongo.\n\nBefore we start, make sure that you have the PyMongo distribution installed. In the Python shell, the following should run without raising an exception: This tutorial also assumes that a MongoDB instance is running on the default host and port. Assuming you have downloaded and installed MongoDB, you can start it like so:\n\nThe first step when working with PyMongo is to create a to the running mongod instance. Doing so is easy: The above code will connect on the default host and port. We can also specify the host and port explicitly, as follows: Or use the MongoDB URI format:\n\nA single instance of MongoDB can support multiple independent databases. When working with PyMongo you access databases using attribute style access on instances: If your database name is such that using attribute style access won’t work (like ), you can use dictionary style access instead:\n\nA collection is a group of documents stored in MongoDB, and can be thought of as roughly the equivalent of a table in a relational database. Getting a collection in PyMongo works the same as getting a database: An important note about collections (and databases) in MongoDB is that they are created lazily - none of the above commands have actually performed any operations on the MongoDB server. Collections and databases are created when the first document is inserted into them.\n\nTo insert a document into a collection we can use the method: When a document is inserted a special key, , is automatically added if the document doesn’t already contain an key. The value of must be unique across the collection. returns an instance of . For more information on , see the documentation on _id. After inserting the first document, the posts collection has actually been created on the server. We can verify this by listing all of the collections in our database:\n\nThe most basic type of query that can be performed in MongoDB is . This method returns a single document matching a query (or if there are no matches). It is useful when you know there is only one matching document, or are only interested in the first match. Here we use to get the first document from the posts collection: The result is a dictionary matching the one that we inserted previously. The returned document contains an , which was automatically added on insert. also supports querying on specific elements that the resulting document must match. To limit our results to a document with author “Mike” we do: If we try with a different author, like “Eliot”, we’ll get no result:\n\nWe can also find a post by its , which in our example is an ObjectId: Note that an ObjectId is not the same as its string representation: A common task in web applications is to get an ObjectId from the request URL and find the matching document. It’s necessary in this case to convert the ObjectId from a string before passing it to : # The web framework gets post_id from the URL and passes it as a string When I query for a document by ObjectId in my web application I get no result\n\nIn order to make querying a little more interesting, let’s insert a few more documents. In addition to inserting a single document, we can also perform bulk insert operations, by passing a list as the first argument to . This will insert each document in the list, sending only a single command to the server: There are a couple of interesting things to note about this example:\n• None The result from now returns two instances, one for each inserted document.\n• None has a different “shape” than the other posts - there is no field and we’ve added a new field, . This is what we mean when we say that MongoDB is schema-free.\n\nQuerying for More Than One Document¶ To get more than a single document as the result of a query we use the method. returns a instance, which allows us to iterate over all matching documents. For example, we can iterate over every document in the collection: Just like we did with , we can pass a document to to limit the returned results. Here, we get only those documents whose author is “Mike”:\n\nMongoDB supports many different types of advanced queries. As an example, lets perform a query where we limit results to posts older than a certain date, but also sort the results by author: Here we use the special operator to do a range query, and also call to sort the results by author.\n\nAdding indexes can help accelerate certain queries and can also add additional functionality to querying and storing documents. In this example, we’ll demonstrate how to create a unique index on a key that rejects documents whose value for that key already exists in the index. First, we’ll need to create the index: Notice that we have two indexes now: one is the index on that MongoDB creates automatically, and the other is the index on we just created. Now let’s set up some user profiles: The index prevents us from inserting a document whose is already in the collection:"
    },
    {
        "link": "https://mongodb.com/docs/manual/tutorial/query-documents",
        "document": "To query documents, specify a query predicate indicating the documents you want to return. If you specify an empty query predicate ( ), the query returns all documents in the collection.\n\nYou can query documents in MongoDB by using the following methods:\n• None The MongoDB Atlas UI. To learn more, see Query Documents with MongoDB Atlas.\n\n➤ Use the Select your language drop-down menu in the upper-right to set the language of the following examples or select MongoDB Compass.\n\nTo select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the query bar. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: To select all documents in the collection, pass an empty document as the query filter parameter to the find method. The query filter parameter determines the select criteria: Be sure to also clean up any open resources by calling the following methods, as appropriate: This operation uses a query predicate of , which corresponds to the following SQL statement: For more information on the syntax of the method, see . For more information on the MongoDB Compass query bar, see Query Bar . For more information on the syntax of the method, see mongoc_collection_find_with_opts . For more information on the syntax of the method, see Find() . For more information on the syntax of the method, see com.mongodb.reactivestreams.client.MongoCollection.find . For more information on the syntax of the method, see com.mongodb.client.MongoCollection.find . For more information on the syntax of the method, see MongoCollection.find() . To see supported options for the method, see find() . For more information on the syntax of the method, see . For more information on the syntax of the method, see . For more information on the syntax of the method, see find() . For more information on the syntax of the method, see collection.find() .\n\nA compound query can specify conditions for more than one field in the collection's documents. Implicitly, a logical conjunction connects the clauses of a compound query so that the query selects the documents in the collection that match all the conditions. The following example retrieves all documents in the collection where the equals and is less than ( ) : Copy the following filter into the Compass query bar and click Find: The operation uses a query predicate of , which corresponds to the following SQL statement: See comparison operators for other MongoDB comparison operators.\n\nUsing the operator, you can specify a compound query that joins each clause with a logical conjunction so that the query selects the documents in the collection that match at least one condition. The following example retrieves all documents in the collection where the equals or is less than ( ) : Copy the following filter into the Compass query bar and click Find: The operation uses a query predicate of , which corresponds to the following SQL statement: Queries that use comparison operators are subject to Type Bracketing ."
    },
    {
        "link": "https://stackoverflow.com/questions/67107530/how-to-query-a-complex-mongodb-document-from-python",
        "document": "So here's what we found out. In MongoDB, there's no way to get a partial document from a collection as an output. We can only get complete documents.\n\nHere's a small experiment that we found in the official documentation of MongoDB: https://docs.mongodb.com/manual/tutorial/query-array-of-documents/\n\nHere's the JSON data that we have in our document from the example taken in the documentation:\n\nHere let's say we want to get only those warehouses where the quantity of a specific item is greater than 30. For that we write the following query:\n\nAs we can see, it's similar to the question we had (getting information of those objects that are having less than an input time).\n\nAlthough we are looking for information of warehouses that is having quantity of an item greater than 30, instead of just getting that warehouse, we are getting complete documents where there is at least one warehouse with greater than 30. So parsing through the output is the only way to get just a part of the document that satisfies our requirement.\n\nWe found an old question. Hope it helps: Get specific part of document\n\nIf someone finds something else, please let us know. Thanks.\n\nI would like to add that the example data and query that we have presented here is from the official documentation the link of which is given."
    }
]