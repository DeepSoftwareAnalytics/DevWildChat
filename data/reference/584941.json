[
    {
        "link": "https://stackoverflow.com/questions/31162367/significance-of-ios-basesync-with-stdiofalse-cin-tienull",
        "document": "The two calls have different meanings that have nothing to do with performance; the fact that it speeds up the execution time is (or might be) just a side effect. You should understand what each of them does and not blindly include them in every program because they look like an optimization.\n\nThis disables the synchronization between the C and C++ standard streams. By default, all standard streams are synchronized, which in practice allows you to mix C- and C++-style I/O and get sensible and expected results. If you disable the synchronization, then C++ streams are allowed to have their own independent buffers, which makes mixing C- and C++-style I/O an adventure.\n\nAlso keep in mind that synchronized C++ streams are thread-safe (output from different threads may interleave, but you get no data races).\n\nThis unties from . Tied streams ensure that one stream is flushed automatically before each I/O operation on the other stream.\n\nBy default is tied to to ensure a sensible user interaction. For example:\n\nIf and are tied, you can expect the output to be flushed (i.e., visible on the console) before the program prompts input from the user. If you untie the streams, the program might block waiting for the user to enter their name but the \"Enter name\" message is not yet visible (because is buffered by default, output is flushed/displayed on the console only on demand or when the buffer is full).\n\nSo if you untie from , you must make sure to flush manually every time you want to display something before expecting input on .\n\nIn conclusion, know what each of them does, understand the consequences, and then decide if you really want or need the possible side effect of speed improvement."
    },
    {
        "link": "https://geeksforgeeks.org/fast-io-for-competitive-programming",
        "document": "In competitive programming, it is important to read input as fast as possible so we save valuable time.\n\nYou must have seen various problem statements saying: ” Warning: Large I/O data, be careful with certain languages (though most should be OK if the algorithm is well designed)” . The key for such problems is to use Faster I/O techniques.\n\nIt is often recommended to use scanf/printf instead of cin/cout for fast input and output. However, you can still use cin/cout and achieve the same speed as scanf/printf by including the following two lines in your main() function:\n\nIt toggles on or off the synchronization of all the C++ standard streams with their corresponding standard C streams if it is called before the program performs its first input or output operation. Adding ios_base::sync_with_stdio (false); (which is true by default) before any I/O operation avoids this synchronization. It is a static member of the function of std::ios_base.\n\ntie() is a method that simply guarantees the flushing of std::cout before std::cin accepts an input. This is useful for interactive console programs which require the console to be updated constantly but also slows down the program for large I/O. The NULL part just returns a NULL pointer.\n\nMoreover, you can include the standard template library (STL) with a single include:\n\nSo your template for competitive programming could look like this:\n\nIt is recommended to use cout << “\n\n”; instead of cout << endl;. endl is slower because it forces a flushing stream, which is usually unnecessary (See this for details). (You’d need to flush if you were writing, say, an interactive progress bar, but not when writing a million lines of data.) Write ‘\n\n instead of endl.\n\nWe can test our input and output methods on the problem INTEST – Enormous Input Teston SPOJ. Before further reading, I would suggest you solve the problem first. \n\n Solution in C++ 4.9.2\n\nNormal I/O: The code below uses cin and cout. The solution gets accepted with a runtime of 2.17 seconds.\n\nFast I/O However, we can do better and reduce the runtime a lot by adding two lines. The program below gets accepted with a runtime of 0.41 seconds.\n\nNow, talking about competitive contests like ACM ICPC, Google CodeJam, TopCoder Open, here is an exclusive code to read integers in the fastest way.\n\ngetchar_unlocked() for faster input in C for competitive programming"
    },
    {
        "link": "https://medium.com/@harshks.mit/turbocharge-your-c-input-output-performance-understanding-ios-base-sync-with-stdio-false-and-d867d072e079",
        "document": "When working with C++ for competitive programming or any performance-sensitive application, every millisecond counts. One of the simplest yet most effective ways to boost the performance of your input and output operations in C++ is by using the below line of code.\n\nLet’s dive into what these lines do and how they can optimize your code.\n\nC++ provides a set of powerful input and output streams ( , , , etc.) that allow you to interact with the user and the environment. These streams are designed to be synchronized with their C counterparts ( , , ) to ensure consistent behavior when mixing C and C++ style I/O operations.\n\nHowever, this synchronization comes at a cost: performance overhead. In competitive programming, where input and output operations can be a bottleneck, reducing this overhead can make a significant difference.\n\nBy default, C++ I/O streams ( , ) are synchronized with C I/O streams ( , ). This ensures that if you mix C and C++ I/O operations, the output appears in the correct order. However, synchronization introduces extra overhead, slowing down the I/O operations.\n\nThis line disables the synchronization between C++ and C I/O streams, allowing C++ streams to operate independently. This can lead to a significant performance boost because the overhead of synchronization is removed.\n\nAnother source of performance overhead is the automatic flushing of the output stream ( ) before any input operation ( ). By default, is tied to , meaning is flushed before reads input. This ensures that all output operations are completed before input operations begin.\n\nThis line unties from , preventing the automatic flushing of before each operation. This can further improve performance, especially when dealing with a large number of input and output operations."
    },
    {
        "link": "https://stackoverflow.com/questions/59651384/ios-basesync-with-stdiofalse-cin-tienull",
        "document": "Usually input and output using the standard C++ streams are synchronized with the C standard I/O streams. For example output through is synchronized with , and input with is synchronized with .\n\nThis synchronization can slow down output and input with and (respectively), so if a lot of output is written or lot of input is read this synchronization can can be disabled, by calling .\n\nThe other issue about is that and are in a way \"tied\" to each other by default. That means if you attempt to read input from then all buffered output in the stream buffer will be flushed.\n\nFor interactive programs this is good, as that ensures that possible prompts for input will be written before actually reading input. But again, this could incur some performance penalties in the flushing of the output if there's lot of bulk input being done.\n\nPlease note that for normal programs these possible performance penalties are small, almost negligible, and won't matter much. But it's a pattern to disable it for so-called \"competitive\" programming.\n\nMy recommendation is to not use it at all, unless you actually have measured, benchmarked and profiled that such problems are among the top-two or possibly top-three bottlenecks in your program, and that there's a strict performance requirement that disabling these things will help with."
    },
    {
        "link": "https://reddit.com/r/leetcode/comments/1cjtci0/c_snippets_making_code_faster",
        "document": "I am using c++ to code in leetcode , i saw so many solutions with same time complexity they got less run time compared to my solution. why does this make code faster? what are these topics called?"
    },
    {
        "link": "https://stackoverflow.com/questions/42577419/c-how-can-i-use-getline-with-an-integer-while-reading-a-file",
        "document": "doesn't read an integer, only a string, a whole line at a time.\n\nIf I understand correctly, you are searching for the into the file . What is the format of the file ?\n\nAssuming it looks something like this:\n\nYou can use to convert what you've read into an integer:\n\nThis is not tested."
    },
    {
        "link": "https://stackoverflow.com/questions/66194011/how-do-i-include-an-int-inside-a-getline",
        "document": "The direct answer to the question\n\nis: This is not possible at all.\n\nis basically used to read a from a stream, until a delimiter is found. In most cases, and that is also a default argument, the delimiter is '\n\n'. And with that, a complete line is read into a . Please read here for a description.\n\nIf your input data is OK in most cases, then no is needed. Basic input validation can also be done directly. Please see the below example code:\n\nBut, it is considere good practice to first read a complete line, then split it up in parts and then convert it to your structure elements.\n\nAdditionally: In C++ we often use an object oriented approach. Meaning, and objects methods, operating with the data are encapsulated in a class/struct.\n\nIn your case, we would overwrite the extractor and inserter operator .\n\nThis would then look like that (I am using C++17):\n\nNow, if you want to change the reading of your data, you can use any method that you want. For example, you can read a complete line, using use any method shown below to split the input string into parts. Then you can use any method to convert that string parts into an integer for your struct. You will just change the body of your extractor operator. Nothing else will be affected. That sis the beauty of encapsulation.\n\nRegarding: Splitting a string into tokens is a very old task. There are many many solutions available. All have different properties. Some are difficult to understand, some are hard to develop, some are more complex, slower or faster or more flexible or not.\n• Handcrafted, many variants, using pointers or iterators, maybe hard to develop and error prone.\n• Using old style function. Maybe unsafe. Maybe should not be used any longer\n• . Most used implementation. But actually a \"misuse\" and not so flexible\n• Using dedicated modern function, specifically developed for this purpose, most flexible and good fitting into the STL environment and algortithm landscape. But slower.\n\nPlease see 4 examples in one piece of code.\n\nIn modern C++ you would probably do:\n\nBut, there are tons of different possible solutions. And everybody can select whatever.\n\nAll above needs to be compiles with C++17."
    },
    {
        "link": "https://cplusplus.com/forum/beginner/276366",
        "document": "Hello all! I'm in the final stages of debugging a project, but I seem to have hit a wall and would greatly appreciate your assistance. As part of the project, I need to read numbers from an input file and store them into an integer array. There are two wrinkles, however: 1) the professor has forbidden us from including the <string> library, so I can't use the >> operator or stoi function, and 2) my reading tells me that the getline function, which the professor recommended we use to read data, cannot store data as integers. Are there any other methods I could use to read data from a text file and store it as an integer? Thanks in advance for your help!\n\nthe professor has forbidden us from including the <string> library, so I can't use the >> operator The >> operator can be used with an input stream and an int, without use of the <string> header. Are you explicitly not allowed to use the >> operator under any circumstances, or are you simply not allowed to use <string>?\n\n \n\n We need to know how your input file is formatted. Perhaps show us an example. The >> operator can be used with an input stream and an int, without use of the header. Are you explicitly not allowed to use the >> operator under any circumstances, or are you simply not allowed to use ?We need to know how your input file is formatted. Perhaps show us an example.\n\nHello SamIAm3,\n\n \n\n I would start by posting the directions that you were given. Then any code you have so far.\n\n \n\n The \"getline\" function that you can not use is for the \"string\" class. The other alternative is \"cin.getline()\" to store in a \"char\" array then you can use the function \"atoi\" for a C string to \"int\" conversion.\n\n \n\n Without more to look at I not completely sure what is required.\n\n \n\n Andy\n\n\n\n \n\n - If string objects are used or \"#include <string>\" is used, you will be penalized 20 points.\n\n - If the stream operator \">>\" is used to read information from the input file, you will be penalized 30 points. You can, however, use the stream operator to put information into the output file. \n\n \n\n So unfortunately I'm not allowed to use the >> operator under any circumstances. I appreciate your advice! Moving on, here's an example input file: \n\n \n\n \n\n \n\n My assignment is to read from an input file the first and last names of several students, along with their ID# and 6 test scores. Then my program is to compute the average score, and output the data to an output file in the format Lastname, Firstname ID# average. \n\n \n\n Since I've been using c-strings to store the names and IDs, I think I'll do as Andy suggested and store each test score in a c-string then use the atoi function to convert each c-string to an int to store in the array. Thanks very much to both of you! Thank you both for responding! I'll start by answering Ganado's questions. The specific wording of the assignment is:So unfortunately I'm not allowed to use the >> operator under any circumstances. I appreciate your advice! Moving on, here's an example input file:My assignment is to read from an input file the first and last names of several students, along with their ID# and 6 test scores. Then my program is to compute the average score, and output the data to an output file in the format Lastname, Firstname ID# average.Since I've been using c-strings to store the names and IDs, I think I'll do as Andy suggested and store each test score in a c-string then use the atoi function to convert each c-string to an int to store in the array. Thanks very much to both of you!"
    },
    {
        "link": "https://geeksforgeeks.org/getline-string-c",
        "document": "The C++ getline() is a standard library function that is used to read a string or a line from an input stream. It is a part of the <string> header. The getline() function extracts characters from the input stream and appends it to the string object until the delimiting character is encountered. While doing so the previously stored value in the string object str will be replaced by the input string if any.\n\nThe getline() function can be represented in two ways:\n• is: It is an object of istream class and tells the function about the stream from where to read the input from.\n• str: It is a string object, the input is stored in this object after being read from the stream.\n• delim: It is the delimitation character which tells the function to stop reading further input after reaching this character.\n\nExample: To demonstrate the use of delimiter in the getline() function.\n\nNote: In the above example if the #define MAX_NAME_LEN 6, So in this case if you cross the defined limit then, in this case, your program will stop execution and exit it’s applicable for every macro that you have used with getline() function. And you’ll get the output as below:\n\nHere, it is understandable that the length of the name field was more than the defined limit that’s why the program stop execution and exit.\n\n2. The second declaration is almost the same as that of the first one. The only difference is, the latter have an delimitation character which is by default newline(\n\n)character.\n\nParameters:\n• is: It is an object of istream class and tells the function about the stream from where to read the input from.\n• str: It is a string object, the input is stored in this object after being read from the stream.\n\n\n\nBelow program demonstrates the working of the getline() function\n\nExample 1: \n\n\n\nExample 2: We can use getline() function to split a sentence on the basis of a character. Let’s look at an example to understand how it can be done.\n\nCaution :This function considers a new line or (‘\n\n’) character as the delimitation character and new line character is valid input for this function.\n\nExample of how new line can cause problem is given below:\n\nExample:\n• None How to use getline() in C++ when there are blank lines in input?\n\nIf you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.\n\nPlease write comments if you find anything incorrect, or you want to share more information about the topic discussed above."
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/bgeicv/c_function_pointers_lambda_expressions_stoi_and",
        "document": "I'm making a program that reads from a file a bunch of numbers and strings, each separated by a breakline character, so this means that I have to use getline everywhere, including the numbers, something like this:\n\nConsidering I'll write these lines of code multiple times in my program I wanted to make a function that does it for me, and thought that this was also a perfect opportunity to put in practice my new learned skill: function pointers and lambda expressions, so I could do something like this instead of writing those 4 lines of code: where int_getline is the function I'm writing.\n\nI know I could just make the parameters of the function a reference to the int I'm reading from the file and just a string so that I could make two different cases for \"fin\" and \"cin\", or even have just one parameter (the number) and have the function it for me (or more specifically it for me).\n\nBut if I wanted then to import this function to other programs it wouldn't work as maybe instead of naming my file input I'll call it or or who knows.\n\nSo how exactly do I do it? I thought of something like this\n\nBut it obviously gives me tons of errors as doesn't take any parameters inside parenthesis.\n\nEDIT: To make it clear what I'm trying to do: I want a function that reads a string and converts it to an int with , returning the int. I want to specify as a parameter whether to use , , file input or getline with file input (I don't think there are other options than those 4)."
    }
]