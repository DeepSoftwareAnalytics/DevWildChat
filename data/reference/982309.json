[
    {
        "link": "https://zenrows.com/blog/powershell-scraping",
        "document": ""
    },
    {
        "link": "https://medium.com/@datajournal/web-scraping-with-powershell-959229773c33",
        "document": "PowerShell is a versatile tool that works across different platforms. It’s primarily used for automating tasks and managing configurations. It’s well-known for its command-line interface and scripting capabilities, making it popular among IT professionals.\n\nHowever, PowerShell isn’t just for system management. I’ve found it’s also great for web scraping, which allows you to automate the process of collecting data from websites. This can save time and effort, especially when dealing with repetitive tasks.\n\nWhy Use PowerShell for Web Scraping?\n\nPowerShell’s strength lies in its ability to interact seamlessly with various systems and services, including web pages. Web scraping involves extracting data from web pages. PowerShell offers cmdlets (lightweight commands) like Invoke-WebRequest and Invoke-RestMethod, making it possible to collect data from the web with minimal coding. These cmdlets handle everything from sending HTTP requests to parsing the HTML response, making the scraping process efficient and straightforward.\n\nBefore diving into web scraping, ensure your environment is correctly set up:\n• Install PowerShell: PowerShell is built into Windows, but you can download it from the official Microsoft website for macOS and Linux.\n• Update PowerShell: Use the latest version to leverage new features and improvements.\n\nThe Invoke-WebRequest cmdlet is essential for sending HTTP requests to a web page and receiving the response. It can also retrieve the page’s content, including HTML, metadata, and status codes.\n\nThis script fetches titles and URLs from Reddit’s front page and saves them in a CSV file.\n\nWhen dealing with APIs that return data in JSON format, Invoke-RestMethod is your go-to cmdlet. It simplifies the process by parsing JSON directly into PowerShell objects.\n\nExample: Interacting with an API\n\nThis script interacts with an API and retrieves and stores data in a variable.\n\nWhile PowerShell makes web scraping accessible, there are challenges:\n• Anti-bot Measures: Websites often block IPs or CAPTCHAs to prevent bots from scraping their data. Solutions include rotating proxies or using services that can bypass these obstacles.\n• Dynamic Content: Some websites load content dynamically using JavaScript. PowerShell’s default cmdlets may struggle with this, requiring additional tools like Selenium or headless browsers.\n• Respect Robots.txt: Always check a website’s robots.txt file to ensure your scraping activities comply with its rules.\n• Rate Limiting: Avoid sending too many requests in a short period. Implement pauses between requests to mimic human browsing behavior.\n• Data Storage: Plan how to store and manage the scraped data, whether in CSV files, databases, or other formats.\n\nFor more advanced scraping tasks, consider integrating PowerShell with:\n• Selenium: For handling dynamic content and interactions on web pages.\n• Python or R: For more complex data analysis post-scraping.\n• PowerShell Modules: Explore additional modules that enhance PowerShell’s web scraping capabilities, such as HtmlAgilityPack.\n\nPowerShell is an excellent tool for web scraping because it’s flexible and easy to use. It lets you automate tasks like extracting data from HTML pages or working with APIs, making it a strong choice for different scraping projects. The best part is that when I follow best practices and respect ethical guidelines, I can effectively use PowerShell to collect and analyze data without issues. It’s a reliable and powerful option for anyone needing to gather data efficiently.\n\nIf you are interested in automated web scraping, check out my list of the best web scraping tools. Alternatively, if you don’t have coding experience at all, check out the top no-code web scrapers.\n\nGot questions? Let me know in the comments!"
    },
    {
        "link": "https://oxylabs.io/blog/powershell-web-scraping",
        "document": "PowerShell is a configuration and automation engine for solving tasks and issues designed by Microsoft. It consists of a scripting language with object-oriented support and a command line shell. Users, especially System Administrators, can automate, configure, and manage their network-related tasks using this engine. PowerShell core is an advanced version of Windows PowerShell with open-source and cross-platform properties. Windows PowerShell is only compatible with Windows OS, whereas the Core version works well with UNIX-compliant operating systems including macOS and Linux. PowerShell is often used in the data acquisition field. Today’s tutorial answers why PowerShell is a reliable engine for web scraping and goes through each step for using it for our data acquisition needs – let’s get started. Can you scrape the web with PowerShell? Web scraping refers to extracting and saving useful information from online sources, including web pages. It is the art of parsing the HTML contents to retrieve specific information. Designing a good web scraping tool requires sufficient knowledge of HTML and the target website structure. The web scraping tool is reliable if it is robust to minor changes in the target web pages. Python and Java support several libraries for performing complex web scraping tasks. Libraries like AutoScraper are trivial to use, allowing an absolute beginner to do highly robust web scraping tasks without any in-depth understanding of the HTML and web page structure. PowerShell provides two cmdlets to scrape HTML data from the target web page: Invoke-WebRequest and Invoke-RestMethod – they will be explained later in the article. However, one must have a sufficient background in HTML and regular expressions to design a robust and reliable web scraping tool. If you’re a process automation engineer or a DevOps professional, chances are, you’d like everything automated with PowerShell scripts that can work in cross-platform contexts – that’s why the PowerShell engine is a great choice for web scraping. How to scrape the web with PowerShell This section provides a practical hands-on approach to web scraping with PowerShell scripts. We’ll learn how to scrape public URLs, relevant information, and images from web pages using Invoke-WebRequest and Invoke-RestMethod cmdlets. Moreover, we’ll also discover content parsing with simple regular expressions and PowerHTML. If you prefer, here's a link to the same tutorial on GitHub. This tutorial takes Books to Scrape as a target for our web scraping tool. The target website features hundreds of books under 52 categories. The link to each category is available on the index page, as shown here:\n\nTo scrape links of all the categories from the target’s index page using Invoke-WebRequest, we can do it using the following script: Here, the Invoke-WebRequest returns an object having all the content at the target URL. The Link.Href property filters for all the hyper-reference links in the contents. Then, we pipe it to the Get-Unique cmdlet to have only the unique links. Therefore, the $scraped_links object has all the unique links present on the target URL. To get links for categories only, we further parse the $scraped_links with a regular expression $reg_expression. Therefore, the $all_matches object will have link objects for categories only. Finally, we extract values for link objects from $all_matches and store them in the $urls list. Let’s see how it looks on the output console:\n\nIt’s not like scraping the links is the only use case with the Invoke-WebRequest method; we can surely scrape contents and related data. However, for the sake of demonstration, the next subsection discusses Invoke-RestMethod for web scraping. Invoke-RestMethod is also used to send requests on web pages or web services, including web APIs. Like the Invoke-WebRequest cmdlet, it also retrieves the HTML or content of the target URI. However, in contrast to the Invoke-WebRequest, the Invoke-RestMethod does not receive the metadata section. Invoke-RestMethod is particularly useful for requesting APIs where the response data is usually in JSON format. The Invoke-RestMethod method automatically parses the JSON responses into objects. Let’s request google.com with Invoke-RestMethod and see what we get:\n\nAs expected, the output shows that the response for the Invoke-RestRequest contains only the HTML content of the target URL. As discussed at the start of this article, the Invoke-RestRequest cmdlet can also be used to scrape web pages. Now, let’s see it in action. Assume that we want to scrape some specific information from a book page at the target bookstore’s website; the Invoke-RestRequest can do it in the following way: $book_html Invoke RestMethod $reg_exp li name li \n\n th th td upc_id td \n\n th Product Type th td product_type td \n\n th Price th td price td \n\n th Availability th \n\n td availability td ' $all_matches $book_html Select String $reg_exp AllMatches Matches $BookDetails PSCustomObject @ $all_matches Groups Where $_ Name like Value $all_matches Groups Where $_ Name like Value $all_matches Groups Where $_ Name like Value $all_matches Groups Where $_ Name like Value $all_matches Groups Where $_ Name like Value $BookDetails The example above requests the target book page and stores the received HTML content in the $book_html object. Next, it creates a regular expression to parse the name, UPC id, product type, price, and availability information from the HTML content stored in $book_html. Let’s have a look at the image of the target page along with its source to understand the formulation of this regular expression:\n\nNote that the book’s title is inside a <li> tag with an active class. Moreover, the product information is inside a <table> tag where each type of information (e.g., UPC, price, etc.) is in a <td> tag which is preceded by a relevant <th> tag. Keeping the above observations in mind, we designed the regular expression to match the <li> tag with an active class and capture everything enclosed in this tag to a name group. After that, the regular expression skips everything, including newlines, until it finds a <th> tag with UPC as its inner text. The inner text of the adjacent <td> tag is then captured in the upc_id group. Similarly, we follow the same pattern for the remaining product information. Sidenote: We should use utmost care while designing a regular expression. A minor mistake can cause the web scraper to extract undesired information or even nothing at all. For example, in the case of our previous scraper script, missing any single symbol can cause the regular expression to match nothing, hence failing the scraper to scrape anything. Therefore, it’s recommended to use an online regular expression tester like the regixtester to check the validity of the expression over the example page source. Once the regular expression is applied to the received HTML content, the select-string cmdlet, along with the flag -AllMatches, returns a MatchInfo object with detailed information about all the matching strings. Finally, the resultant $all_matches MatchInfo object is converted into a PowerShell custom object, containing only the desired information. The output of the above script is as follows:\n\nThe above snippet shows the web page for Sports and Games and the corresponding HTML source code. The web page has a total of five books; the price and title of each book are available on the page. If we closely look into the web page's source, the full book title is provided as a title attribute to the book's page href tag. Moreover, the price is in a paragraph tag with a price_color class. Now, having a sufficient understanding of the underlying page structure, the script can be introduced to our web scraper. $category_page_html Invoke RestMethod $reg_exp $all_matches $category_page_html Select String $reg_exp AllMatches Matches $BookList PSCustomObject @ $book Groups Where $_ Name like Value $book Groups Where $_ Name like Value $BookList The above script first retrieves the HTML of the Sports and Games category’s web page. Then, it applies the regular expression (stored in $reg_exp) on the retrieved HTML to select all the matching strings. As the target page has only five books, the $all_match (a selectInfo object) will be of length 5 and will have detailed information on all the matches along with the matched strings. We don’t need details associated with the matches; rather, we are concerned with the titles and prices of the books. So, the script creates a list of PowerShell custom objects, where each PSCustomObject has just the name and title of a particular match. The output of the above script looks like this:\n\nUntil now, we’ve been using regular expressions to extract the required information. Designing a robust regular expression to extract relevant strings is very tricky. Moreover, modifying a pre-written regular expression is always problematic due to its poor readability. Thanks to PowerHTML, we have a robust, more readable, and highly maintainable way to make PowerShell parse HTML data. PowerHTML is a powerful wrapper over the HtmlAgilityPack that supports XPath syntax to parse the HTML. It’s particularly useful in scenarios where the HTML Document Object Model (DOM) is unavailable, as in the case of content received in response to an Invoke-WebRequest. We can install the PowerHTML module using the following command: Assume we want Product Information from a book web page, A Light in the Attic. The required information is inside the striped table, as depicted in the following snippet:\n\nWe can use the following script using PowerHTML to retrieve the Product Information from this web page: $web_page Invoke WebRequest $html ConvertFrom Html $web_page $BookDetails System Collections ArrayList $name_of_book $html Where Object $_ $name $name_of_book ChildNodes innerText $n New Object TypeName psobject $n Add Member MemberType NoteProperty Name Name Value $name $BookDetails $n $table $html Where Object $_ $row $table $cnt $name $row innerText $value $row innerText replace $new_obj New Object TypeName psobject $new_obj Add Member MemberType NoteProperty Name $name Value $value $BookDetails $new_obj Write Output $table Write Output $BookDetails The above code first retrieves the HTML contents of the target web page using the Invoke-WebRequest method. Then, the HTML content is converted to an HTMLAgilityPack htmlNode object using the ConvertFrom-Html command and stored in $html. This conversion allows us to use XPath syntax for further content parsing. Afterward, the book title is parsed by selecting the <li> tag with class=active. This <li> tag has the book name as its inner text. We can fetch this inner text, add it to a new psObject against a Name property, and append it to the $BookDetails array list. The product information is displayed in a <table> tag on the webpage. The below figure shows the product information table rendered by the browser on the left and the corresponding HTML source on the right."
    },
    {
        "link": "https://business.com/articles/create-web-scraping-tool-in-powershell",
        "document": "Web scraping tools are helpful for gathering data from various web pages. For example, price comparison sites that share the best deals usually grab their information from specific feeds e-tailers set up for that purpose. However, not all online sellers make price feeds available. In these instances, comparison sites can use web scraping to grab the information they need.\n\nBecause website design varies and websites have unique structures, you must create customized scrapers to extract relevant data effectively. Luckily, scripting languages like PowerShell help you build reliable web scraping tools. You can use PowerShell modules to extract the information you need.\n\nWeb scraping is the process of parsing an HTML web page and gathering elements in a structured manner. Because HTML pages have specific structures, it’s possible to parse through them and retrieve semi-structured output. Note the use of the qualifier “semi.” Most pages aren’t perfectly formatted behind the scenes and may have website design mistakes, so your output may not be perfectly structured. Still, scripting languages like Microsoft PowerShell — along with a little ingenuity and some trial and error — can help you build reliable web scraping tools that pull information from many different web pages. It’s important to remember that web page structures vary widely. If even a small element is changed, your web scraping tool may no longer work. Focus on the basics first and then build more specific tools for particular web pages. Web scraping can enhance your marketplace knowledge greatly. However, you may want to consult a business lawyer about the legalities of scraping specific sites before you get started. Federico Trotta, a technical writer and data scientist who has authored numerous articles on web scraping and data analysis, noted that PowerShell comes pre-installed on Windows, making it an accessible and flexible tool for users. “In particular, its integration with Windows makes it easily accessible without requiring additional installations or dependencies,” Trotta explained. “Additionally, its compatibility with .NET libraries provides a layer of extensibility for more advanced needs.” Still, Trotta cautioned that PowerShell may not be suitable for more complex projects. “When it gets more complex, use different tools or technologies,” Trotta advised. “One of the main limitations is that with PowerShell, you can only scrape static HTML content. When pages have dynamically loaded content from JavaScript, you can overcome this by using Selenium.”\n\nHow to create a web scraping tool in PowerShell The command of choice is Invoke-WebRequest. This command should be a staple in your web scraping arsenal. It simplifies pulling down web page data and allows you to focus on parsing the data you need. Trotta emphasized the importance of mastering this method. “To tie to PowerShell, in the beginning, I would suggest learning the methods Invoke-WebRequest and Invoke-RestMethod, as these cmdlets form the backbone of most PowerShell scraping scripts,” Trotta explained. “In particular, the Invoke-WebRequest cmdlet gets content from a web page on the internet; the Invoke-RestMethod cmdlet, instead, sends HTTP and HTTPS requests to REST web services that return richly structured data.” With Invoke-WebRequest, let’s explore how a web scraper views a web page and extracts its content. To get started, let’s use a simple web page everyone is familiar with — Google.com — and see how a web scraping tool views it. First, pass Google.com to the Uri parameter of Invoke-WebRequest and inspect the output. This is a representation of the entire Google.com page, all wrapped up in an object for you. Did you know The Invoke-WebRequest command is highly versatile. It works on FTP and HTTP sites, which gives you more choices on where to source information and data. Now, let’s see what information you can pull from this web page. For example, say you need to find all the links on the page. To do this, you’d reference the Links property. This will enumerate the various properties of each link on the page. Perhaps you just want to see the URL that it links to: How about the anchor text and the URL? Since this is just an object, it’s easy to pull information like this: You can also see what the infamous Google.com form with the input box looks like under the hood: Did you know If your scraper stops working, the website structure has likely changed. Unfortunately, you'll have to build a new web scraper.\n\nHow to download the information you’ve scraped Let’s take this one step further and download information from a web page. For example, perhaps you want to download all images on the page. To do this, we’ll also use the –UseBasicParsing parameter. This command is faster because Invoke-WebRequest doesn’t crawl the DOM. For another example, here’s how to use PowerShell to enumerate all images on the CNN.com website and download them to your local computer. Now let’s figure out each URL on which the image is hosted. Once you have the URLs, you can use Invoke-Request again. However, this time, you’ll use the –OutFile parameter to send the response to a file. In this case, you saved the images directly to my C:, but you can easily change this location to a different one. With PowerShell’s ability to manage file system ACLs, you can save images to your directory of choice. If you’d like to test the images directly from PowerShell, use the Invoke-Item command to pull up the image’s associated viewer. Below, you can see that the Invoke-WebRequest pulled down an image from CNN.com with the word “bleacher.”\n\nBuilding your own web scraping tool is straightforward Use the code in this article as a template to build your own tool. For example, you could build a PowerShell function called Invoke-WebScrape with a few parameters like –Url or –Links. Once you have the basics down, you can easily create a customized tool to apply in many different ways. If you’re new to web scraping, Trotta suggests starting with more foundational skills. “Familiarity with HTML structure and basic CSS selectors is fundamental to parsing web content. Without this familiarity, you cannot scrape web pages,” Trotta explained. “Focus on small, manageable projects at first, such as extracting headlines from a news website, to build confidence. Then, scale to improve.” Trotta suggests incorporating the following features to improve performance and reliability in PowerShell web scraping scripts:\n• Start-Sleep: This cmdlet helps avoid overwhelming target servers, which could result in IP bans or legal issues, by suspending the script’s activity for a specified time.\n• Try and catch blocks: Use these blocks to ensure your script can gracefully handle unexpected responses, such as timeouts or 404 errors. With these approaches, developers can create scripts that are efficient and resilient."
    },
    {
        "link": "https://stackoverflow.com/questions/67647115/how-to-build-a-script-which-can-get-content-periodically-from-internet-and-save",
        "document": "It of course all depends on what you would like to capture from the quotes on that page, but I could imaging doing something like this (daily ?)\n\nSome explanation as per your comment:\n• None Why the switch on the New-Item cmdlet ?\n\n Without , the cmdlet creates a new folder and returns a DirectoryInfo object of that new folder.\n\n However, if a folder with that name already existed, you wil receive an exception: New-Item : An item with the specified name <path\\to\\the\\folder> already exists..\n\n For good measure then you should first check if the folder exists or not with , OR add the switch, because then New-Item either creates the folder, or returns the DirectoryInfo object of the already existing folder without exceptions being thrown.\n\n Since I'm not interested in that returned DirectoryInfo object, I'm throwing that away by using\n• None Why ?\n\n A webrequest always returns a StatusCode telling you if the request was successful or not. There are a lot of them, see here. StatusCode 200 means 'OK', so then you can proceed with the rest of the code. If not, the answer displays a warning.\n• None Why the switch on Export-Csv ?\n\n Many users tend to double-click a CSV file and expect their installed version of Excel to open it nicely with all fields in different columns.\n\n However, there are differences in the machine's locales (cultures) in the world. Without , Export-Csv will use the comma ( ) as delimiter, but if you are in a country like me (The Netherlands), the machines default list separator is the semi-colon ( ) as you can see in the example output. So in my case, if I don't specify the semi-colon as being the delimiter to use, Excel will make a mess of the file when double-clicking it. You can do that either by using parameter if you know what Excel will understand, OR let the switch figure out what the current locale's ListSeparator is and use that."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word.documents.save?view=word-pia",
        "document": "Some information relates to prerelease product that may be substantially modified before it’s released. Microsoft makes no warranties, express or implied, with respect to the information provided here.\n\nSaves all the documents in the Documents collection.\n\nOptional Object. True to have Microsoft Word automatically save all documents; False to have Word prompt the user to save each document that has changed since it was last saved.\n\nOptional Object. Specifies the way the documents are saved. Can be one of the WdOriginalFormatconstants.\n\nIf a document hasn't been saved before, the Save As dialog box prompts the user for a file name."
    },
    {
        "link": "https://stackoverflow.com/questions/36487507/troubles-using-powershell-and-word-saveas",
        "document": "Why is it asking to open read-only\n\nYou are using the Microsoft Word COM object,\n\nCOM objects are notorious for causing issues if you do not close them properly. In you script calling wont close the word.exe process in most cases.\n\nYou are getting the error that the document is open because a process from a previous script run has not been closed. You might have clicked stop before the script got to of might have just not quit.\n\nSave all your work and try This will kill all open word processes on your machine. I bet you it will work after that. But you haven't solved the problem of the script leaving the word doc open. Try adding adding this to the end of your script:\n\nIts how I kill COM object processes and it has never failed to stop a IE com object process, Should work the same for Word.\n\nWhy is there a type mismatch\n\nYou need to have the library loaded in powershell:\n\nYou need to change your .SaveAs to change the filepath to system.object rather than system.string It was a change made in .net 4.0 apparently\n\nFound the answer to the type mismatch error HERE"
    },
    {
        "link": "https://techblog.dorogin.com/generate-word-documents-with-powershell-cda654b9cb0e",
        "document": "In the previous post I mentioned that I was asked to produce a PDF document with source code for a library. In that post I reviewed how to detect and fix file encoding and process files line by line. In this post I’ll show how to create Word/PDF documents from PowerShell.\n\n\n\nHere’s a complete script to dump text files into a Word document. It supposes that all files in UTF8 already.\n\nLet’s go through the code.\n\nFirst we need to create a document. To create a document we need to create a Word instance:\n\nAs we have the document we can make some setup for default layout. I’m changing spacing between lines and make margins narrower:\n\nTo write text into the document we need Selection object:\n\nHaving the selection it’s easy to put some text — method . To finish a paragraph we must call .\n\nHere we’re creating a heading (with a file name) and its content.\n\nTo save a file as PDF we’ll need to supply additional parameter for method — value from enumeration. To use the enumeration we have to load its assembly:\n\nSaving as PDF is actually “export” so if we just call Close() the Word instance will seem it hangs. Actually it’ll show save dialog somewhere in background. To prevent this we’re passing ."
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word?view=word-pia",
        "document": "This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. For information about the COM object, see Application. This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. For information about the COM object, see Document This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. For information about the COM object, see Font. This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. For more information about the COM object, see Global. This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. For more information about the COM obect, see LetterContent. This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object. Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. For more information about the COM object, see ParagraphFormat Represents a single add-in, either installed or not installed. A collection of AddIn objects that represents all the add-ins available to Microsoft Word, regardless of whether or not they're currently loaded. Contains a collection of adjustment values for the specified AutoShape or WordArt object. Events interface for WordApplication object events.This is a .NET interface created when processing a COM coclass that is required by managed code for interoperability with the corresponding COM object. This interface implements all events of earlier interfaces and any additional new events. Use this interface only when the event you want to use shares the same name as a method of the COM object; in this case, cast to this interface to connect to the event, and cast to the primary interface to call the method. Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object. Represents a single caption that can be automatically added when items such as tables, pictures, or OLE objects are inserted into a document. A collection of AutoCaption objects that represent the captions that can be automatically added when items such as tables, pictures, or OLE objects are inserted into a document. A collection of AutoCorrectEntry objects that represent all the AutoCorrect entries available to Microsoft Word. The AutoCorrectEntries collection includes all the entries in the AutoCorrect dialog box (Tools menu). A collection of AutoTextEntry objects that represent the AutoText entries in a template. A collection of all the Axis objects in the specified chart. True if an axis title will occupy the chart layout space when a chart layout is being determined. The default value is True. Read/write Represents the list of sources available attached to the document (in the current list) or the list of sources available in the application (in the master list). A collection of Bookmark objects that represent the bookmarks in the specified selection, range, or document. A collection of Border objects that represent the borders of an object. A collection of page, column, or section breaks in a page. Use the Breaks collection and the related objects and properties to programmatically define page layout in a document. Represents the browser tool used to move the insertion point to objects in a document. Represents a building block in a template. A building block is pre-built content, similar to autotext, that may contain text, images, and formatting. Represents a collection of all BuildingBlock objects in a template. Represents a collection of BuildingBlock objects for a specific building block type and category in a template. Represents a type of building block. Each BuildingBlockType object is a member of the BuildingBlockTypes collection. Contains properties and methods that apply to line callouts. A collection of CaptionLabel objects that represent the available caption labels. Represents the collection of visible chart categories in the document. A collection of Cell objects in a table column, table row, selection, or range. A collection of characters in a selection, range, or document. Represents the border of an object. Represents all chart categories in the document, whether visible (unfiltered) or not. Represents characters in an object that contains text. Represents the color of a one-color object or the foreground or background color of an object with a gradient or patterned fill. Represents access to the linked or embedded data associated with a chart. Contains the font attributes (font name, font size, color, and so on) for an object chart. Provides access to the Office Art formatting for chart elements. Represents one or more series plotted in a chart with the same format. Represents one or more series plotted in a chart with the same format. Represents a lock within the document. The CoAuthLock object is a member of the CoAuthLocks collection. Represents a single co-author in the document. The CoAuthor object is a member of the CoAuthors collection. The CoAuthors collection contains all the co-authors in the document (authors that are actively editing the document). Provides the primary entry point to the co-authoring object model. A collection of all the CoAuthor objects in the document. Represents a range of text that has been updated by a co-author. A collection of CoAuthUpdate objects that represent the available updates in the document. Represents the color of a one-color object or the foreground or background color of an object with a gradient or patterned fill. Represents a single table column. The Column object is a member of the Columns collection. A collection of Column objects that represent the columns in a table. A collection of Comment objects that represent the comments in a selection, range, or document. Represents special formatting applied to specified areas of a table when the selected table is formatted with a specified table style. Represents a conflicting edit in a co-authored document. The type of a Conflict object is specified by the WdRevisionType enumeration. A collection of Conflict objects that represents the conflicts in a document. The type of a Conflict object is specified by the WdRevisionType enumeration. An individual content control. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain contents such as dates, lists, or paragraphs of formatted text. The ContentControl object is a member of the ContentControls collection. The ContentControlListEntries collection contains ContentControlListEntry objects that represent the items in a drop-down list or combo box content control. A ContentControlListEntry object represents a list item in a drop-down list or combo box content control. A ContentControlListEntry object is a member of the ContentControlListEntries collection for a ContentControl object. A collection of ContentControl objects. Content controls are bounded and potentially labeled regions in a document that serve as containers for specific types of content. Individual content controls may contain content such as dates, lists, or paragraphs of formatted text. A collection of CustomLabel objects available in the Label Options dialog box. A collection of CustomProperty objects that represents the properties related to a smart tag. Represents the data label on a chart point or trendline. A collection of all the DataLabel objects for the specified series. Contains global application-level attributes used by Microsoft Word when you save a document as a Web page or open a Web page. A collection of DiagramNode objects that represents the child nodes in a diagram. A collection of DiagramNode objects that represent all the nodes in a diagram. The DiagramNodes collection contains all the diagram nodes in a specified diagram. A collection of Dialog objects in Microsoft Word. Each Dialog object represents a built-in Word dialog box. A collection of Dictionary objects that includes the active custom spelling dictionaries. Represents a unit label on an axis in the specified chart. A collection of all the Document objects that are currently open in Word. Represents the down bars in a chart group. Represents a dropped capital letter at the beginning of a paragraph. Represents a drop-down form field that contains a list of items in a form. Represents a single user who has been given specific permissions to edit portions of a document. A collection of Editor objects that represents a collection of users or groups of users who have been given specific permissions to edit portions of a document. Represents the author of an e-mail message. Contains global application-level attributes used by Microsoft Word when you create and edit e-mail messages and replies. Contains information about the e-mail signatures used by Microsoft Word when you create and edit e-mail messages and replies. A collection of EmailSignatureEntry objects that represents all the e-mail signature entries available to Microsoft Word. Represents the properties assigned to a range or selection of endnotes in a document. A collection of Endnote objects that represents all the endnotes in a selection, range, or document. Represents a field. The Field object is a member of the Fields collection. The Fields collection represents the fields in a selection, range, or document. A collection of Field objects that represent all the fields in a selection, range, or document. Represents a file converter that's used to open or save files. A collection of FileConverter objects that represent all the file converters available for opening and saving files. Represents fill formatting for a shape. A shape can have a solid, gradient, texture, pattern, picture, or semi-transparent fill. A collection of FirstLetterException objects that represent the abbreviations excluded from automatic correction. Contains font attributes (font name, font size, color, and so on) for an object. Represents a list of the names of all the available fonts. Represents a footnote positioned at the bottom of the page or beneath text. The Footnote object is a member of the Footnotes collection. The Footnotes collection represents the footnotes in a selection, range, or document. Represents the properties assigned to a range or selection of footnotes in a document. A collection of Footnote objects that represent all the footnotes in a selection, range, or document. A collection of FormField objects that represent all the form fields in a selection, range, or document. A collection of Frame objects in a selection, range, or document. Represents an entire frames page or a single frame on a frames page. Represents the geometry of a freeform while it's being built. Represents the full collection of all chart series, both filtered and unfiltered. Contains top-level properties and methods that don't need to be preceded by the Application property. Represents the glow formatting for a shape or range of shapes. A collection of HangulAndAlphabetException objects that represents all Hangul and alphabet AutoCorrect exceptions. This list corresponds to the list of AutoCorrect exceptions on the Korean tab in the AutoCorrect Exceptions dialog box (AutoCorrect command, Tools menu). A collection of Dictionary objects that includes the active custom Hangul-Hanja conversion dictionaries. A collection of HeaderFooter objects that represent the headers or footers in the specified section of a document. Represents a style used to build a table of contents or figures. A collection of HeadingStyle objects that represent the styles used to compile a table of figures or table of contents. Represents a single HTML division that can be added to a Web document. A collection of HTMLDivision objects that represents the HTML divisions that exist in a Web document. Represents the collection of Hyperlink objects in a document, range, or selection. A collection of Index objects that represents all the indexes in the specified document. Represents an object in the text layer of a document. A collection of InlineShape objects that represent all the inline shapes in a document, range, or selection. Represents the interior of an object. A collection of KeyBinding objects that represent the custom key assignments in the current context. Custom key assignments are made in the Customize Keyboard dialog box. A collection of KeyBinding objects assigned to a command, style, macro, or other item in the current context. Represents a language used for proofing or formatting in Microsoft Word. A collection of Language objects that represent languages used for proofing or formatting in Microsoft Word. Represents the legend in a chart. Each chart can have only one legend. A collection of all the LegendEntry objects in the specified chart legend. Represents the elements of a letter created by the Letter Wizard. Represents an individual line in a Rectangle object of type wdTextRectangle. Represents line and arrowhead formatting. For a line, the LineFormat object contains formatting information for the line itself; for a shape with a border, this object contains formatting information for the shape's border. Represents line numbers in the left margin or to the left of each newspaper-style column. A collection of Line objects that represents the lines in a Rectangle object that is of type wdTextRectangle. Represents the linking characteristics for an OLE object or picture. Represents a single list format that's been applied to specified paragraphs in a document. A collection of ListEntry objects that represent all the items in a drop-down form field. Represents the list formatting attributes that can be applied to the paragraphs in a range. A collection of ListGallery objects that represent the three tabs in the Bullets and Numbering dialog box. Represents a single list level, either the only level for a bulleted or numbered list or one of the nine levels of an outline numbered list. A collection of ListLevel objects that represents all the list levels of a list template, either the only level for a bulleted or numbered list or one of the nine levels of an outline numbered list. A collection of Paragraph objects that represents the paragraphs of the specified document, list, or range that have list formatting applied. A collection of List objects that represent all the lists in the specified document. Represents a single list template that includes all the formatting that defines a list. A collection of ListTemplate objects that represent the seven predefined list formats on each tab in the Bullets and Numbering dialog box. This object, member, or enumeration is deprecated and is not intended to be used in your code. A collection of MailMergeDataField objects that represent the data fields in a mail merge data source. A collection of MailMergeFieldName objects that represent the field names in a mail merge data source. A collection of MailMergeField objects that represent the mail merge related fields in a document. Represents the active email message if you are using Microsoft Word as your e-mail editor. A collection of MappedDataField objects that represents all the mapped data fields available in Microsoft Word. Represents the OLE characteristics (other than linking) for an OLE object, ActiveX control, or field. Represents an equation. OMath objects are members of the OMaths collection. Represents an equation that has an accent mark above the base. Represents the math AutoCorrect feature in Microsoft Office Word. To access the math AutoCorrect entries, use the OMathAutoCorrectEntries collection. Represents a collection of math AutoCorrect entries. Use the OMathAutoCorrectEntry object to access individual AutoCorrect entries. Represents an individual entry in the OMathAutoCorrectEntries collection. Represents an equation with a bar above or below the base. Represents an invisible box around an equation or part of an equation to which you can assign properties that affect the layout or mathematical formatting of the entire box. For example, a box can serve as an operator emulator with or without an alignment point, serve as a like breakpoint, have an associated argument size (argSz), or be grouped so as not to allow line breaks. Represents an invisible box around an equation or part of an equation to which you can apply properties that affect the mathematical or formatting properties, such as line breaks. Represents individual line breaks in an equation. Each OMathBreak object is a member of the OMathBreaks collection. Represents a collection of OMathBreak objects that represent all the line breaks in an equation. Represents a delimiter object, consisting of opening and closing delimiters (such as parentheses, braces, brackets, or vertical bars), and one or more elements contained inside the delimiters. Represents a mathematical equation array object, consisting of one or more equations that can be vertically justified as a unit respect to surrounding text on the line. Represents a fraction, consisting of a numerator and denominator separated by a fraction bar. The fraction bar can be horizontal or diagonal, depending on the fraction properties. Represents the application of a function or an argument in an equation that consists of a function name, such as sin or cos, and an argument. Represents a mathematical function or structure that Microsoft Office Word supports, such as fractions, integrals, sums, and radicals. The OMathFunction object is a member of the OMathFunctions collection. Represents a collection of functions or structures that Microsoft Office Word supports, such as fractions, integrals, sums, and radicals. Represents a group character object, consisting of a character drawn above or below text, often with the purpose of visually grouping items. Represents the lower limit mathematical construct, consisting of text on the baseline and reduced-size text immediately below it. Represents the upper limit mathematical construct, consisting of text on the baseline and reduced-size text immediately above it. Represents a matrix column. The OMathMatCol object is a member of the OMathMatCols collection. Represents a collection of matrix columns. Use the OMathMatCol object to access individual members of the collection. Represents a matrix row. The OMathMatRow is a member of the OMathMatRows collection. Represents a collection of matrix rows. Use the OMathMatRow object to access individual membes of the collection. Represents the mathematical n-ary object, consisting of an -ary object, a base (or operand), and optional upper limits and lower limits. Represents a phantom object, which has two primary uses: (1) adding the spacing of the phantom base without displaying that base or (2) suppressing part of the glyph from spacing considerations. Represents the mathematical radical object, consisting of a radical, a base, and an optional degree. Represents a recognized function. The OMathRecognizedFunction object is a member of the OMathRecognizedFunctions collection. Represents a collection of recognized functions. Use the OMathRecognizedFunction object to access individual members of the collection. A collection of equations. Use the OMaths object to access individual members of the collection. Represents an equation that contains a superscript or subscript to the left of the base. Represents an equation with a base that contains a subscript. Represents an equation with a base that contains a superscript or subscript. Represents an equation with a base that contains a superscript. Represents application and document options in Microsoft Word. Many of the properties for the Options object correspond to items in the Options dialog box (Tools menu). A collection of OtherCorrectionsException objects that represents the list of words that Microsoft Word won't correct automatically. This list corresponds to the list of AutoCorrect exceptions on the Other Corrections tab in the AutoCorrect Exceptions dialog box (AutoCorrect command, Tools menu). Represents a page in a document. Use the Page object and the related methods and properties for programmatically defining page layout in a document. A collection of PageNumber objects that represent the page numbers in a single header or footer. Represents the page setup description. The PageSetup object contains all page setup attributes (left margin, bottom margin, paper size, and so on) as properties. Represents a window pane. The Pane object is a member of the Panes collection. The Panes#SameCHM collection includes all the window panes for a single window. A collection of Pane objects that represent the window panes for a single window. Represents all the formatting for a paragraph. A collection of Paragraph objects in a selection, range, or document. Contains properties and methods that apply to pictures and OLE objects. A collection of all the Point objects in the specified series in a chart. A collection of spelling and grammatical errors for the specified document or range. A collection of all the ProtectedViewWindow objects that are currently open in Word 2010. Represents one of the readability statistics for a document or range. A collection of ReadabilityStatistic objects for a document or range. A collection of RecentFile objects that represents the files that have been used recently. The items in the RecentFiles collection are displayed at the bottom of the File menu. Represents a portion of text or a graphic in a page. Use the Rectangle object and related methods and properties for programmatically defining page layout in a document. A collection of Rectangle objects in a page that represent portions of text and graphics. Use the Rectangles collection and related objects and properties for programmatically defining page layout in a document. Represents the reflection formatting for a shape or range of shapes. Provides access to the research service feature of Microsoft Office Word. Represents a single reviewer of a document in which changes have been tracked. A collection of Reviewer objects that represents the reviewers of one or more documents. The Reviewers collection contains the names of all reviewers who have reviewed documents opened or edited on a machine. A collection of Revision objects that represent the changes marked with revision marks in a range or document. Represents the current settings related to display of reviewers’ comments and revision marks in the document. This object, member, or enumeration is deprecated and is not intended to be used in your code. A collection of Row objects that represent the table rows in the specified selection, range, or table. A collection of Section objects in a selection, range, or document. Represents the current selection in a window or pane. A collection of Range objects that represent all the sentences in a selection, range, or document. There is no Sentence object. A collection of all the Series objects in the specified chart or chart group. Contains shading attributes for an object. Represents an object in the drawing layer, such as an AutoShape, freeform, OLE object, ActiveX control, or picture. Represents the geometry and the geometry-editing properties of the nodes in a user-defined freeform. A collection of all the ShapeNode objects in the specified freeform. Represents a shape range, which is a set of shapes on a document. A collection of Shape objects that represent all the shapes in a document or all the shapes in all the headers and footers in a document. Represents a string in a document or range that contains recognized type information. Represents a collection of actions for an individual smart tag or a type of smart tag. Represents installed components that label text with types of information. A collection of SmartTagRecognizer objects that represent recognition engines that label data with types of information as you work in Microsoft Word. A collection of SmartTag objects that represents the text in a document that is marked as containing recognized type information. Represents the soft edge formatting for a shape or range of shapes. Represents an individual source, such as a book, journal article, or interview. A collection of SpellingSuggestion objects that represent all the suggestions for a specified word or for the first word in the specified range. A collection of Range objects that represent stories in a document. A collection of Style objects that represent both the built-in and user-defined styles in a document. A collection of StyleSheet objects that represents the cascading style sheets attached to a document. A collection of Subdocument objects that represent the subdocuments in a range or document. Represents the information about synonyms, antonyms, related words, or related expressions for the specified range or a given string. Contains information about the computer system. A collection of Table objects that represent the tables in a selection, range, or document. A collection of TableOfAuthorities objects (TOA fields) that represents the tables of authorities in a document. A collection of TableOfAuthoritiesCategory objects that represent the table of authorities categories, such as Cases and Statutes. A collection of TableOfContents objects that represent the tables of contents in a document. A collection of TableOfFigures objects that represent the tables of figures in a document. Represents a single style that can be applied to a table. A collection of TabStop objects that represent the custom and default tabs for a paragraph or group of paragraphs. Represents a single task pane available to Microsoft Word, which contains common tasks that users perform. A collection of TaskPane objects that contains commonly performed tasks in Microsoft Word. A collection of Task objects that represents all the tasks currently running on the system. A collection of Template objects that represent all the templates that are currently available. A collection of TextColumn objects that represent all the columns of text in a document or a section of a document. Contains properties and methods that apply to WordArt objects. Represents the text frame in a Shape object. Contains the text in the text frame as well as the properties that control the margins and orientation of the text frame. Represents options that control how text is retrieved from a Range object. Represents the tick-mark labels associated with tick marks on a chart axis. A collection of all the Trendline objects for the specified series. A collection of TwoInitialCapsException objects that represent all the items listed in the Don't correct box on the INitial CAps tab in the AutoCorrect Exceptions dialog box. Provides an entry point into the undo stack. Represents the up bars in a chart group. Represents a variable stored as part of a document. Document variables are used to preserve macro settings in between macro sessions. A collection of Variable objects that represent the variables added to a document or template. Document variables are used to preserve macro settings in between macro sessions. A collection of Version objects that represent all the versions of a document. Corresponds to the items listed in the Versions dialog box (File menu). Contains the view attributes (show all, field shading, table gridlines, and so on) for a window or pane. Represents the walls of a 3-D chart. This object isn’t a collection. There’s no object that represents a single wall; you must return all the walls as a unit. Contains document-level attributes used by Microsoft Word when you save a document as a Web page or open a Web page. A collection of Window objects that represent all the available windows. A collection of words in a selection, range, or document. Represents all the properties for wrapping text around a shape or shape range. This object, member, or enumeration is deprecated and is not intended to be used in your code. This object, member, or enumeration is deprecated and is not intended to be used in your code. Represents the XML mapping on a ContentControl object between custom XML and a content control. An XML mapping is a link between the text in a content control and an XML element in the custom XML data store for this document. Represents an individual schema within the Schema Library. A collection of XMLNamespace objects that represents the entire collection of schemas in the Schema Library. A collection of XMLNode objects that represents the nodes in the tree view of the XML Structure task pane, which indicates the elements that a user has applied to a document. Represents an individual schema that is attached to a document. A collection of XMLSchemaReference objects that represent the unique namespaces that are attached to a document. A collection of XSLTransform objects that represent all of the Extensible Stylesheet Language Transformations (XSLTs) for a specific XML namespace. Contains magnification options (for example, the zoom percentage) for a window or pane. A collection of Zoom objects that represents the magnification options for each view (outline, normal, print layout, and so on).\n\nSpecifies the way certain alerts and messages are handled while a macro is running. Specifies whether Microsoft Office Word calculates the alignment for a tab relative to the section margins or the paragraph indents. This object, member, or enumeration is deprecated and is not intended to be used in your code. Specifies a Quick Style set to apply to the document. Specifies the numeral style for an Arabic-language document. Specifies how Microsoft Word resizes a table when the AutoFit feature is used. Specifies an auto macro that is stored in the document. Specifies the state of the option for automatically saving document versions. Specifies the vertical position of fonts on a line. Specifies the sorting option for bookmark names displayed in the Bookmark dialog box. Specifies whether a page border is measured from the edge of the page or from the text it surrounds. Specifies the type of border to be used. Specifies the version of Web browser at which you want to target new Web pages created in Microsoft Word. Specifies the document item that the Next or Previous method locates, and places the insertion point before the next or previous instance of the item. Specifies calendar type to use when displaying the date or time. Specifies the number style to be used with the CaptionLabel object. Specifies the position of the caption label text. Specifies the color of highlighting for table cells that were added, deleted, or merged in the current document. Specifies the vertical alignment of text in one or more cells of a table. Specifies the case of the text in the specified range. Specifies the character width of the specified range. Specifies the type of version for the document checked in when using the CheckIn(Boolean, Object, Boolean) method. Applies to documents stored in a SharePoint library. Specifies rules for converting text enclosed in chevron characters (« ») to merge fields. Specifies the direction in which to collapse a range or selection. Constants that represent column width in reading layout, passed to and returned by the ColumnWidth property. When comparing two files for differences, specifies whether to create a new file or mark the differences between the two documents in the original document or the revised document. Version Added: Word 2007 Specifies the compatibility mode that Word 2010 uses when opening a document. Specifies the area of a table to which to apply special style formatting. This enumeration groups together constants used with various Microsoft Word methods. Constants that represent the visualizations for a content control, passed to and returned by the Appearance property. Indicates how the date for a date content control is stored or retrieved when the date control is bound to an XML node in the document's data store. Constants that represent the possible levels for a content control, returned by the Level property. Indicates the type of content control. Specifies whether the formatting from the previous list can be continued. Specifies the country/region setting of the current system. Specifies how the insertion point progresses within bidirectional text. Specifies the state (shape) of the cursor. Specifies the language format to apply to the current date, time, or both. Specifies whether Microsoft Word automatically resizes cells in a table to fit the contents (AutoFit). Specifies a range of cells to be deleted from a table in a delete cells action or the behavior of the remaining cells after the deletion has occurred. Specifies the format of text that is deleted while change tracking is enabled. Specifies whether to apply a different color to diacritics in bi-directional or Latin style languages. Specifies the version of Microsoft Word for which to disable all features introduced after that version. Applies only to the document for which the property is set when used with the DisableFeaturesIntroducedAfter property or for all documents when used with the DisableFeaturesIntroducedAfterbyDefault property. Specifies how a building block is inserted into a document. Specifies the direction to flow the text in a document. Specifies the format type that Microsoft Word uses when automatically formatting a document. Specifies the type of document to which you are applying a theme. Specifies the alignment and reading order for the entire document. This enumeration has been deprecated and should not be used. This enumeration has been deprecated and should not be used. Specifies a user or group of users for a document. Specifies whether to leave or remove HTML tags not required for display. Specifies the type of emphasis mark to use for a character or designated character string. Specifies whether CTRL+BREAK can or cannot interrupt a macro Specifies the relative size of an enclosure. Specifies the type of symbol to use as an enclosure. Specifies what bookmarks to include when exporting a document. Specifies format to use for exporting a document. Specifies whether to export the document with markup. Specifies the resolution and quality of the exported document. Specifies how much of the document to export. Specifies the East Asian language to use when breaking lines of text in the specified document or template. Specifies the line break control level for the specified document. Specifies the type of field for a Field object. Specifies when to apply on-screen shading for form fields. This enumeration has been deprecated and should not be used. Specifies wrap behavior if a selection or range is specified for a find operation and the search text isn't found in the selection or range. Specifies the direction in which text flows from one text column to the next. Specifies the reference point against which the frame position is calculated. Specifies the position of a new frame in relation to an existing frame. Specifies how to interpret the height or width of a specified frame on a frames page. Specifies how Word interprets the rule used to determine the height or width of a frame. Indicates which version of French to use when using the French language spelling checker dictionaries. Specifies the position to which a selection or the insertion point is moved in relation to an object or to itself. Specifies the type of item to move the insertion point or selection just prior to. Specifies the granularity of changes to track when comparing two documents. Version Added: Word 2007. Specifies where the gutter appears in the document. Specifies whether the gutter style should conform to left-to-right text flow or right-to-left text flow. Returns the specified header or footer in a document or section. Specifies the type of text separator to place between headings in an index. Specifies which rules the Hebrew spelling checker will follow. Specifies the type of online Help topic or window to display. Specifies the format of horizontal text set within vertical text. Specifies how Word interprets the width (length) of the specified horizontal line. Specifies the default start-up mode for the Japanese Input Method Editor (IME). Specifies how Microsoft Word classifies the first character of entries in the specified index. Specifies the formatting for indexes in a document. Specifies the criteria by which Word sorts the specified index. Specifies the type of information returned about a specified selection or range. Specifies where and what type of cells to add to an existing table. Specifies the format of text that is inserted while change tracking is enabled. Specifies information specific to the current country/region and international settings. Specifies the format of the selected Japanese text. Specifies a keyboard character. Although uppercase and lowercase characters are designated by using different values in a character encoding map, they share a single constant in this enumeration. Specifies the type of item assigned to the key binding. Specifies the language to use. Specifies how text is laid out in the layout mode for the current document. Specifies a location to place letterhead in a letter created by the Letter Wizard. Specifies the layout of a letter created by the Letter Wizard. Specifies the type of ligatures applied to a font. Specifies how Microsoft Word marks the line and paragraph breaks in documents saved as text files. Specifies a line spacing format to be applied to a paragraph. Specifies the border style for an object. Specifies whether a line is a line of text or a table row. Specifies the width of an object's border. Specifies the portion of a list to which to apply a list template. Specifies the type of list from a list template gallery. Specifies the numeric style to apply to a list. Specifies the type of lock for a CoAuthLock object. This enumeration has been deprecated and should not be used. Specifies the type of comparison to use when a condition is added to a mail merge process. Specifies the default record to use in a mail merge process. Specifies the format to use when the mail merge destination is an e-mail message. Specifies a unit of measure to use. Specifies the document from which to retain formatting during a document compare function. Specifies the data source to be attached to the current document. Specifies the target for a Compare and Merge Documents process. Specifies the format in which to display month names. Marks the moved-from text when text in a document with tracked changes is moved from one place to another. Specifies the way the selection is moved. Marks the moved-to text when text in a document with tracked changes is moved from one place to another. Specifies the direction for conversion between Hangul and Hanja. Specifies the type of new document to create. Specifies the number style to apply to endnotes, endnote options, footnotes, or footnote options. Specifies the number form setting for an OpenType font. Specifies the number spacing setting for an OpenType font. This enumeration has been deprecated and should not be used. Specifies the placement for an OLE object. Specifies the type of an OLE object. Specifies the action associated with the verb that the OLE object should perform. Specifies where Microsoft Office Word places binary operators when equations span two or more lines. Specifies how Microsoft Office Word handles a subtraction operator that falls before a line break. Specifies the horizontal alignment for an equation. Specifies the appearance of delimiters (parentheses, braces, brackets) in relationship to the content that they surround. Specifies the vertical alignment of equations within the shape canvas or the line, for inline equations. Specifies the format to use when opening a document. Specifies the type of object used by a delete, copy, or rename action. Specifies the document format. This enumeration is commonly used when saving a document. Specifies the outline level to apply to a paragraph. Constants that represent background page color in reading mode, returned by and passed to PageColor. Specifies the alignment to apply to page numbers. Specifies the style to apply to page numbers. Specifies the part of speech that a word represents when returned by the Word thesaurus service. Specifies the format for the Clipboard contents when they are inserted into a document. Indicates how to paste copied text. Specifies the alignment of phonetic text that is added to the specified range. Specifies how a picture should be linked to a document. Specifies the mode for the Brazilian or European Portuguese spellers. Specifies the preferred unit of measure to use when measuring the width of an item. Specifies the type of pages to print. Specifies the type of proofreading error returned by the Word proofreading process. Specifies how the Protected View window was closed. Specifies the type of protection applied to the current document. Specifies whether margins are visible or hidden when a document is viewed in Full Screen Reading view. Specifies the text flow and reading order of the document. Specifies the formatting to use when pasting the selected table cells. Specifies the type of rectangle and the information it contains. Specifies the information to include in a cross-reference. Specifies the type of item to be cross referenced. Specifies to what the horizontal position of a frame, a shape, or a group of rows is relative. Specifies the relative width of a shape using the value specified in the WidthRelative property for a Shape or ShapeRange object. Specifies to what the vertical position of a frame, a shape, or a group of rows is relative. Specifies the relative height of a shape using the value specified in the HeightRelative property for a Shape or ShapeRange object. Specifies where a paragraph should be relocated in relation to its current position. Specifies the type of information to remove from a document. Specifies the number of replacements to be made when find and replace is used. Specifies where revisions are displayed when change tracking is enabled. Specifies how revisions are displayed when change tracking is enabled. Specifies the margin where revision balloons should be displayed. Specifies the orientation of revision and comment balloons when they are printed. Specifies how Microsoft Word measures the width of revision balloons. Constants that represent the extent of markup visible in the document, returned by and passed to the RevisionsFilter.MarkupProperty(Word) property. Specifies whether Microsoft Word displays balloons in the margin or inline with the document's text. Specifies whether Word displays the original version of a document or a version with revisions and formatting changes applied. Specifies how revision marks are displayed in the document. Specifies the type of a change that is marked with a revision mark. This object, member, or enumeration is deprecated and is not intended to be used in your code. This object, member, or enumeration is deprecated and is not intended to be used in your code. Specifies alignment for the content in selected rows. Specifies the rule for determining the height of the specified cells or rows. Specifies the way Word adjusts the table when the left indent is changed. Specifies the gender to use in a salutation. Specifies the type of salutation to use for a letter. Specifies the format to use when saving a document. Specifies how pending changes should be handled. Specifies when scroll bars are available for the specified frame when viewing its frames page in a Web browser. Specifies how Word displays the reading order and alignment for the specified sections. Specifies the type of section break for the specified item. Specifies the document element to display in the print layout view. Specifies the properties of the selection. Specifies the type of separator to place between items. Specifies the relative position of the specified shape. Specifies whether the LeftRelative or TopRelative property for a Shape or ShapeRange is valid. Specifies whether the WidthRelative or HeightRelative property for a Shape or ShapeRange object is valid. Specifies the styles and formatting to display in the Styles and Formatting task pane. Specifies how to display source documents when two documents are compared using the Word Compare functions. Specifies the type of control associated with a SmartTagAction object. Specifies the sort type to apply when sorting a column. Specifies an item to display in the active window pane. Specifies a statistic to return from a selection or item. Specifies the story type of a selection or item. Specifies how to associate a style sheet with the document. Specifies the level of importance of a style sheet compared to other cascading style sheets attached to the Web document. Indicates how to sort styles in the Styles task pane. Specifies the stylistic set to apply to the font. This enumeration has been deprecated and should not be used. Specifies the maximum length of an automatically generated document summary. Specifies the way the summary is displayed. Specifies the character to use as the leader with formatted tabs. Specifies the direction in which Microsoft Word orders cells in the specified table or row. Specifies the character to use to separate text into cells when converting text to a table, or to delimit converted columns when converting a table to text (paragraph marks delimit converted rows). Specifies the predefined format to apply to a table. Specifies how table formatting should be applied. Specifies the relative position of a table in the document. Specifies how to convert between Traditional Chinese and Simplified Chinese. Specifies the text direction in a range or selection. Specifies the shading texture to use for a selected item. Specifies the type of formatting to apply to the table of authorities in the active document. Specifies the type of formatting to apply to the table of contents in the active document. Specifies the type of formatting to apply to the table of figures in the active document. Specifies the character inserted after the number for a numbered list item. Specifies the character to use to enclose two lines being written into one. Specifies the type of underline to apply. Specifies a unit of measure to use. Specifies the behavior Word 2010 should take when updating a style to match a selection that contains numbering or bullets. Specifies the type of vertical alignment to apply. Specifies the selection behavior based on visual cursor movement in a right-to-left language document. Specifies the state of the current document window or task window. Indicates the Microsoft Office Word dialog boxes with which you can work and specifies arguments, if applicable, that you can use to get or set values in a dialog box. Specifies the active tab when the specified dialog box is displayed. Specifies whether the document text should wrap on both sides of the specified shape, on either the left or right side only, or on the side of the shape that is farthest from the page margin. Specifies the wrap type for the specified shape. This object, member, or enumeration is deprecated and is not intended to be used in your code. This object, member, or enumeration is deprecated and is not intended to be used in your code. This object, member, or enumeration is deprecated and is not intended to be used in your code. This object, member, or enumeration is deprecated and is not intended to be used in your code. Specifies the point on the specified axis where the other axis crosses. Specifies the background type for text in charts. Specifies the shape used with the 3-D bar or column chart. Specifies the weight of the border around a range. Constants that represent chart category-label levels, passed to and returned by the CategoryLabelLevel property. Specifies the type of the category axis. Specifies the position of the chart element. Specifies the type of the chart item. Specifies the placement of a user-selected picture on a bar in a 3-D bar or column. Specifies how pictures are displayed on a column, bar picture chart, or legend key. Specifies the values displayed in the second chart in a pie chart or a bar of pie chart. Specifies the color of a selected feature, such as a border, font, or fill. Specifies the format of the picture being copied. Specifies where the data label is positioned. Specifies the separator used with data labels. Specifies the type of data label to apply. Specifies how blank cells are plotted on a chart. Specifies the display unit label for an axis. Specifies which axis values are to receive error bars. Specifies the horizontal alignment for the object. Specifies the position of the legend on a chart. Specifies the line style for the border. Specifies the marker style for a point or series in a line chart, scatter chart, or radar chart. Specifies the interior pattern of a chart or interior object. Specifies how the picture should be copied. Specifies which position on the slice to return the coordinate of. Specifies the horizontal or vertical position of a point on a pie chart, in points, from the top or left edge of the object to the top or left edge of the chart area. Specifies the location of the field in a PivotTable report. Specifies the reading order for the specified object. Specifies whether the values corresponding to a particular data series are in rows or columns. Specifies the scale type of the value axis. Series-name-level constants passed to and returned by the SeriesNameLevel property. Specifies what the bubble size represents on a bubble chart. Specifies the position of tick-mark labels on the specified axis. Specifies the position of major and minor tick marks for an axis. Specifies the unit of time for chart axes and data series. Specifies how the trendline that smoothes out fluctuations in the data is calculated. Specifies the type of underline applied to a font. Specifies the vertical alignment for the object.\n\nThis event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. A Delegate type used to add an event handler for the DocumentBeforeClose event. The DocumentBeforeClose event occurs immediately before any open document closes. A Delegate type used to add an event handler for the DocumentBeforePrint event. The DocumentBeforePrint event occurs before any open document is printed. A Delegate type used to add an event handler for the DocumentBeforeSave event. The DocumentBeforeSave event occurs before any open document is saved. A Delegate type used to add an event handler for the DocumentChange event. The DocumentChange event occurs when a new document is created, when an existing document is opened, or when another document is made the active document. A Delegate type used to add an event handler for the DocumentOpen event. The DocumentOpen event occurs when a document is opened. A Delegate type used to add an event handler for the DocumentSync event. The DocumentSync event occurs when the local copy of a document that is part of a Document Workspace is synchronized with the copy on the server. A Delegate type used to add an event handler for the EPostageInsert event. The EPostageInsert event occurs when a user inserts electronic postage into a document. A Delegate type used to add an event handler for the EPostageInsertEx event. The EPostageInsertEx event occurs when a user inserts electronic postage into a document. A Delegate type used to add an event handler for the EPostagePropertyDialog event. The EPostagePropertyDialog event occurs when a user clicks the E-postage Properties (Labels and Envelopes dialog box) button or Print Electronic Postage toolbar button. A Delegate type used to add an event handler for the MailMergeAfterMerge event. The MailMergeAfterMerge event occurs after all records in a mail merge have merged successfully. A Delegate type used to add an event handler for the MailMergeAfterRecordMerge event. The MailMergeAfterRecordMerge event occurs after each record in the data source successfully merges in a mail merge. A Delegate type used to add an event handler for the MailMergeBeforeMerge event. The MailMergeBeforeMerge event occurs when a merge is executed before any records merge. A Delegate type used to add an event handler for the MailMergeBeforeRecordMerge event. The MailMergeBeforeRecordMerge event occurs as a merge is executed for the individual records in a merge. A Delegate type used to add an event handler for the MailMergeDataSourceLoad event. The MailMergeDataSourceLoad event occurs when the data source is loaded for a mail merge. A Delegate type used to add an event handler for the MailMergeDataSourceValidate2 event. The MailMergeDataSourceValidate2 event occurs when a user validates mail merge recipients by clicking the Validate addresses link button in the Mail Merge Recipients dialog box. A Delegate type used to add an event handler for the MailMergeDataSourceValidate event. The MailMergeDataSourceValidate event occurs when a user performs address verification by clicking Validate in the Mail Merge Recipients dialog box. A Delegate type used to add an event handler for the MailMergeWizardSendToCustom event. The MailMergeWizardSendToCustom event occurs when the custom button is clicked on step six of the Mail Merge Wizard. A Delegate type used to add an event handler for the MailMergeWizardStateChange event. The MailMergeWizardStateChange event occurs when a user changes from a specified step to a specified step in the Mail Merge Wizard. A Delegate type used to add an event handler for the NewDocument event. The NewDocument event occurs when a new document is created. A Delegate type used to add an event handler for the ProtectedViewWindowActivate event. The ProtectedViewWindowActivate event Occurs when any protected view window is activated. A Delegate type used to add an event handler for the ProtectedViewWindowBeforeClose event. The ProtectedViewWindowBeforeClose event occurs immediately before a protected view window or a document in a protected view window closes. A Delegate type used to add an event handler for the ProtectedViewWindowBeforeEdit event. The ProtectedViewWindowBeforeEdit event occurs immediately before editing is enabled on the document in the specified protected view window. A Delegate type used to add an event handler for the ProtectedViewWindowDeactivate event. The ProtectedViewWindowDeactivate event occurs when a protected view window is deactivated. A Delegate type used to add an event handler for the ProtectedViewWindowOpen event. The ProtectedViewWindowOpen event occurs when a protected view window is opened. A Delegate type used to add an event handler for the ProtectedViewWindowSize event. The ProtectedViewWindowSize event occurs every time a protected view window is moved or resized. A Delegate type used to add an event handler for the Quit event. The Quit event occurs when the user quits Word. A Delegate type used to add an event handler for the WindowActivate event. The WindowActivate event occurs when any document window is activated. A Delegate type used to add an event handler for the WindowBeforeDoubleClick event. The WindowBeforeDoubleClick event occurs when the editing area of a document window is double-clicked, before the default double-click action. A Delegate type used to add an event handler for the WindowBeforeRightClick event. The WindowBeforeRightClick event occurs when the editing area of a document window is right-clicked, before the default right-click action. A Delegate type used to add an event handler for the WindowDeactivate event. The WindowDeactivate event occurs when any document window is deactivated. A Delegate type used to add an event handler for the WindowSelectionChange event. The WindowSelectionChange event occurs when the selection changes in the active document window. A Delegate type used to add an event handler for the WindowSize event. The WindowSize event occurs when the application window is resized or moved. A Delegate type used to add an event handler for the XMLSelectionChange event. The XMLSelectionChange event occurs when the parent XML node of the current selection changes. A Delegate type used to add an event handler for the XMLValidationError event. The XMLValidationError event occurs when there is a validation error in the document. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. This event parameter is included for backward compatibility only. This event handler is included for backward compatibility only. It is recommended that you use the latest version of this event handler with the same name. A Delegate type used to add an event handler for the BuildingBlockInsert(Range, String, String, String, String) event. A Delegate type used to add an event handler for the Close event. The Close event occurs when a document is closed. A Delegate type used to add an event handler for the ContentControlAfterAdd(ContentControl, Boolean) event. A Delegate type used to add an event handler for the ContentControlBeforeContentUpdate(ContentControl, String) event. A Delegate type used to add an event handler for the ContentControlBeforeDelete(ContentControl, Boolean) event. A Delegate type used to add an event handler for the ContentControlBeforeStoreUpdate(ContentControl, String) event. A Delegate type used to add an event handler for the ContentControlOnEnter(ContentControl) event. A Delegate type used to add an event handler for the ContentControlOnExit(ContentControl, Boolean) event. A Delegate type used to add an event handler for the New event. The New event occurs when a new document based on the template is created. A Delegate type used to add an event handler for the Open event. The Open event occurs when a document is opened. A Delegate type used to add an event handler for the Sync event. The Sync event occurs when the local copy of a document that is part of a Document Workspace is synchronized with the copy on the server. A Delegate type used to add an event handler for the XMLAfterInsert event. The XMLAfterInsert event occurs when a user adds a new XML element to a document. A Delegate type used to add an event handler for the XMLBeforeDelete event. The XMLBeforeDelete event occurs when a user deletes an XML element from a document."
    },
    {
        "link": "https://stackoverflow.com/questions/8447354/powershell-script-with-word-interop-how-to-prevent-the-repair-dialog-to-open",
        "document": "I'm using a PowerShell script to batch convert Word document to Pdfs.\n\nThe conversion part of the script is (if required I can paste the whole script):\n\nThe script is working quite well, but some of the source documents are corrupted. When Word detects one of these documents, it displays the repair dialog. This causes my script to be blocked until the user close the dialog.\n\nHow can I prevent this dialog ?\n\n[Edit] here is a screenshot of the dialog"
    }
]