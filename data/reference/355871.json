[
    {
        "link": "https://stackoverflow.com/questions/45304710/best-practice-for-event-handling-with-javascript",
        "document": "What's the best practice for an event handler? I'm unsure if I should put the buttons with the function to trigger or if I should, like jQuery, wait for the button's on click event.\n\nUsually you can do this:\n\nOr just add on the button the"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events",
        "document": "Events are things that happen in the system you are programming, which the system tells you about so your code can react to them. For example, if the user clicks a button on a webpage, you might want to react to that action by displaying an information box. In this article, we discuss some important concepts surrounding events, and look at the fundamentals of how they work in browsers. An understanding of HTML and the fundamentals of CSS, familiarity with JavaScript basics as covered in previous lessons.\n• What events are — a signal fired by the browser when something significant happens, which the developer can run some code in response to.\n• Setting up event handlers using (and ) and event handler properties.\n• Inline event handler attributes, and why you shouldn't use them.\n\nWhat is an event? Events are things that happen in the system you are programming — the system produces (or \"fires\") a signal of some kind when an event occurs, and provides a mechanism by which an action can be automatically taken (that is, some code running) when the event occurs. Events are fired inside the browser window, and tend to be attached to a specific item that resides in it. This might be a single element, a set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur.\n• The user selects, clicks, or hovers the cursor over a certain element.\n• The user presses a key on the keyboard.\n• The user resizes or closes the browser window. You can gather from this (and from glancing at the MDN event reference) that there are a lot of events that can be fired. To react to an event, you attach an event handler to it. This is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. When such a block of code is defined to run in response to an event, we say we are registering an event handler. Note: Event handlers are sometimes called event listeners — they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that runs in response to it happening. Note: Web events are not part of the core JavaScript language — they are defined as part of the APIs built into the browser.\n\nIn the following example, we have a single in the page: Then we have some JavaScript. We'll look at this in more detail in the next section, but for now we can just say: it adds an event handler to the button's event, and the handler reacts to the event by setting the page background to a random color: The example output is as follows. Try clicking the button:\n\nIf you've added an event handler using , you can remove it again using the method. For example, this would remove the event handler: Event handlers can also be removed by passing an to and then later calling on the controller owning the . For example, to add an event handler that we can remove with an : const controller = new AbortController(); btn.addEventListener(\"click\", () => { const rndCol = `rgb(${random(255)} ${random(255)} ${random(255)})`; document.body.style.backgroundColor = rndCol; }, { signal: controller.signal } // pass an AbortSignal to this handler ); Then the event handler created by the code above can be removed like this: controller.abort(); // removes any/all event handlers associated with this controller For simple, small programs, cleaning up old, unused event handlers isn't necessary, but for larger, more complex programs, it can improve efficiency. Also, the ability to remove event handlers allows you to have the same button performing different actions in different circumstances: all you have to do is add or remove handlers.\n\nObjects (such as buttons) that can fire events also usually have properties whose name is followed by the name of the event. For example, elements have a property . This is called an event handler property. To listen for the event, you can assign the handler function to the property. For example, we could rewrite the random-color example like this: You can also set the handler property to a named function: With event handler properties, you can't add more than one handler for a single event. For example, you can call on an element multiple times, with different functions specified in the second argument: This is impossible with event handler properties because any subsequent attempts to set the property will overwrite earlier ones:\n\nYou might also see a pattern like this in your code: The earliest method of registering event handlers found on the Web involved event handler HTML attributes (or inline event handlers) like the one shown above — the attribute value is literally the JavaScript code you want to run when the event occurs. The above example invokes a function defined inside a element on the same page, but you could also insert JavaScript directly inside the attribute, for example: <button onclick=\"alert('Hello, this is my old-fashioned event handler!');\"> Press me </button> You can find HTML attribute equivalents for many of the event handler properties; however, you shouldn't use these — they are considered bad practice. It might seem easy to use an event handler attribute if you are doing something really quick, but they quickly become unmanageable and inefficient. For a start, it is not a good idea to mix up your HTML and your JavaScript, as it becomes hard to read. Keeping your JavaScript separate is a good practice, and if it is in a separate file you can apply it to multiple HTML documents. Even in a single file, inline event handlers are not a good idea. One button is OK, but what if you had 100 buttons? You'd have to add 100 attributes to the file; it would quickly turn into a maintenance nightmare. With JavaScript, you could easily add an event handler function to all the buttons on the page no matter how many there were, using something like this: Finally, many common server configurations will disallow inline JavaScript, as a security measure. You should never use the HTML event handler attributes — those are outdated, and using them is bad practice.\n\nSometimes, inside an event handler function, you'll see a parameter specified with a name such as , , or . This is called the event object, and it is automatically passed to event handlers to provide extra features and information. For example, let's rewrite our random color example again slightly: Note: You can find the full source code for this example on GitHub (also see it running live). Here you can see we are including an event object, e, in the function, and in the function setting a background color style on — which is the button itself. The property of the event object is always a reference to the element the event occurred upon. So, in this example, we are setting a random background color on the button, not the page. Note: You can use any name you like for the event object — you just need to choose a name that you can then use to reference it inside the event handler function. / / is most commonly used by developers because they are short and easy to remember. It's always good to be consistent — with yourself, and with others if possible.\n\nSometimes, you'll come across a situation where you want to prevent an event from doing what it does by default. The most common example is that of a web form, for example, a custom registration form. When you fill in the details and click the submit button, the natural behavior is for the data to be submitted to a specified page on the server for processing, and the browser to be redirected to a \"success message\" page of some kind (or the same page, if another is not specified). The trouble comes when the user has not submitted the data correctly — as a developer, you want to prevent the submission to the server and give an error message saying what's wrong and what needs to be done to put things right. Some browsers support automatic form data validation features, but since many don't, you are advised to not rely on those and implement your own validation checks. Let's look at an example. First, a simple HTML form that requires you to enter your first and last name: Now some JavaScript — here we implement a very simple check inside a handler for the event (the submit event is fired on a form when it is submitted) that tests whether the text fields are empty. If they are, we call the function on the event object — which stops the form submission — and then display an error message in the paragraph below our form to tell the user what's wrong: const form = document.querySelector(\"form\"); const fname = document.getElementById(\"fname\"); const lname = document.getElementById(\"lname\"); const para = document.querySelector(\"p\"); form.addEventListener(\"submit\", (e) => { if (fname.value === \"\" || lname.value === \"\") { e.preventDefault(); para.textContent = \"You need to fill in both names!\"; } }); Obviously, this is pretty weak form validation — it wouldn't stop the user from validating the form with spaces or numbers entered into the fields, for example — but it is OK for example purposes. The output is as follows: Note: For the full source code, see preventdefault-validation.html (also see it running live here)."
    },
    {
        "link": "https://w3schools.com/js/js_events.asp",
        "document": "HTML events are \"things\" that happen to HTML elements.\n\nWhen JavaScript is used in HTML pages, JavaScript can \"react\" on these events.\n\nAn HTML event can be something the browser does, or something a user does.\n\nHere are some examples of HTML events:\n\nOften, when events happen, you may want to do something.\n\nJavaScript lets you execute code when events are detected.\n\nHTML allows event handler attributes, with JavaScript code, to be added to HTML elements.\n\nIn the following example, an attribute (with code), is added to a element:\n\nIn the example above, the JavaScript code changes the content of the element with id=\"demo\".\n\nIn the next example, the code changes the content of its own element (using ):\n\nHere is a list of some common HTML events:\n\nThe list is much longer: W3Schools JavaScript Reference HTML DOM Events.\n\nEvent handlers can be used to handle and verify user input, user actions, and browser actions:\n• Things that should be done every time a page loads\n• Things that should be done when the page is closed\n• Action that should be performed when a user clicks a button\n• Content that should be verified when a user inputs data\n\nMany different methods can be used to let JavaScript work with events:\n• You can assign your own event handler functions to HTML elements\n• You can prevent events from being sent or being handled"
    },
    {
        "link": "https://reddit.com/r/javascript/comments/64dkbq/is_it_best_practice_to_call_js_functions_within",
        "document": "I know with React this is completely normal but I am trying to get a grasp on vanilla Javascript best practices. I tend to call simple functions in my html with onClick and onkeypress... I am just curious, what negative side effects can come from this?"
    },
    {
        "link": "https://sencha.com/blog/event-handling-in-javascript-a-practical-guide-with-examples",
        "document": "Back in the day, websites used to be static, meaning users could only view the content but not interact with it. However, we can now create highly interactive user interfaces thanks to JavaScript and JS frameworks. Specifically, event handlers in JavaScript are what allow us to build dynamic web pages and deliver interactive experiences. In the modern web development landscape, events are essentially user actions that occur as a result of user interaction with the web page, such as submitting a form, clicking a button, playing a video on the web page, minimizing the browser window, etc. Event handling allows developers to verify and handle these actions to deliver a more responsive and engaging user experience.\n\nHence, understanding how events work and how to handle them efficiently is essential for every developer looking to create modern web applications. This article will discuss all the ins and outs of event handling in JavaScript. We’ll also briefly discuss how a good JavaScript framework like Ext JS handles events.\n\nEvents are essentially the actions that occur on a web app due to user interaction, such as clicking a button. In JavaScript, when an event occurs, the app fires the event, which is kind of a signal that an event has occurred. The app then automatically responds to the user in the form of output, thanks to event handlers in JavaScript. An event handler is essentially a function with a block of code that is executed or triggered when a specific event fires.\n\nSometimes, when an event occurs, it triggers multiple events. This is because web elements in an app are often nested. This is where event propagation comes in. Event propagation involves capturing and bubbling phases as the event travels across the DOM hierarchy. We’ll discuss these phases later in the article.\n\nThere are common types of events:\n• Keyboard/touch events: Occur when a user presses or releases a key on the keyboard or performs an action with a touch-enabled smartphone, laptop or tablet.\n• Click events: Fires when a user clicks on a button or other such web element.\n• Mouse hover events: These events are fired when a user performs an action with the mouse, such as scrolling a page or moving the cursor.\n• Form/submit events: Triggered when a user submits a form, modifies it, or resets it.\n• Drag and drop events: Occurs when a user drags and drops an element on the web page, such as dragging and dropping an image on a file uploader.\n\nAn event listener is essentially a JavaScript function that waits for a specific event to occur and then executes a callback function to respond to that event. Event listeners and event handlers are often considered the same thing. However, in essence, they work together to respond to an event. As the name suggests, the listener listens for the event, and the handler is the code that is executed in response to that event.\n\nThere are two common built-in event listener methods in JavaScript: addEventListener and removeEventListener. The addEventListener() method enables us to attach an event handler to an element. We can also add multiple event handlers to an element. removeEventListener() allows us to remove an event listener/handler from a specific element.\n\nWhen an event occurs, it belongs to a specific event object. The event object is essentially the argument passed into the callback/event handler function. It provides information about the event, such as the target element, the type of event, etc. It also contains additional properties for the specific event type.\n• target: Represents the element that fired the event.\n• type: Tells about the specific type of the event, such as click or submit\n• keyCode: Used for keyboard events. It contains the Unicode value of the key pressed by the user\n\nHere is an example code demonstrating the use of the event object (Click event):\n\nBased on the concepts we discussed in the previous sections, here is an example for creating a simple button-click event:\n\nHere is a basic example demonstrating how to handle form submissions:\n\nWeb browsers often have a default behavior for certain events. When such an event occurs, the browser’s default behavior is triggered in response to that event. preventDefault() provides us with a way to stop or prevent this default behavior.\n\nFor instance, when a user submits a form, the browser automatically initializes a request to the server. This results in page reload or navigation to a new page, affecting the user experience. Developers can use preventDefault() to stop this default behavior and handle form submission asynchronously without causing a page to reload. For example, in the above code, we’ve used preventDefault() to stop or prevent the default form submission behavior.\n\nEvent delegation in JavaScript is an advanced technique for handling events more efficiently. In event delegation, we add or attach an event listener/listeners to a common parent element. This way, we don’t have to attach the event listener to each element separately. Events are processed and monitored as they traverse the DOM hierarchy. Event delegation is common in popular javascript frameworks\n\nHere is an example of event delegation:\n\nHandling keyboard events, such as key down and key up, allows us to:\n• Respond to user interactions/inputs with the keyboard\n\nKey Down and Key Up are two main types of mouse events. A key-down event occurs when a user presses a key on the keyboard. A key-up event is triggered when a user releases the key after it is pressed down.\n\nHere is an example code for handling a key-down event:\n\nHere is an example code for handling a key-up event:\n\nHandling touch and mobile events to create a responsive and touch-friendly design, providing an intuitive way to interact with the web app.\n\nHere is an example code for Touchstart, Touchmove, and Touchend:\n• Gesture events, such as gesturestart, gesturechange, and gestureend. These events are used for gestures like pinch-zoom.\n• orientationchange event used for detecting changes in device orientation.\n\nAlso Read: Angular vs Ext JS: Which JavaScript Framework Should You Use?\n\nAs aforementioned, event bubbling and capturing are a part of the event propagation process. In event bubbling, the event starts from the same target element that fired the event. It then bubbles up or propagates through its parent and ancestor elements in the DOM till it reaches the root element. This allows you to handle the event in a parent element instead of the target element. Event bubbling is the default event behaviour on elements.\n\nIn event capturing, the event traverses from the outermost parent or ancestor element to the target element. It is also called event trickling.\n\nJavaScript also allows you to create and dispatch custom events designed to meet your specific application needs. For instance, you can create custom events for cross-component state management.\n\nHere is how to create a custom event:\n\nHere is how to dispatch the event:\n• Combine multiple events that trigger similar actions into one event listener.\n• Use event capturing only when needed. Otherwise, use bubbling.\n\nExt JS is a leading Javascript framework for creating high-performance web and mobile applications. It offers over 140+ pre-built components and supports MVVM architecture and two-way data binding. Events are a core concept in the Ext JS framework that enables your code to react to changes in your app. Here is an example code for button-click event in Ext JS:\n\nYou can learn more about handling events in Ext JS here.\n\nTransform your digital landscape with Sencha: Master JavaScript frameworks for unrivalled web development excellence\n\nIn the web development process, events refer to user actions, such as such as clicking a button, minimizing the browser window, or submitting a form. Event handling in JavaScript and JavaScript frameworks allows us to respond to user actions and interactions and create dynamic and interactive websites. This article explores various concerts related to event handling in JavaScript with examples.\n\nWhat is event handling in JavaScript?\n\nEvent handling in JS refers to using event listeners to wait for an event to occur on an element and responding to that event using event handlers or callback functions.\n\nHow do I attach an event listener to an element?\n\nYou can use JavaScript’s built-in addEventListener() method to attach an event to an element.\n\nWhat is the event object in JavaScript?\n\nThe event object in JS is essentially the argument passed into the callback/event handler function. It provides valuable information about the event, such as the target element, the type of event, etc.\n\nWhat are the most popular JavaScript frameworks?\n\nBest JavaScript frameworks and JavaScript libraries include Ext JS, React and Angular. Ext JS offers 140+ high-performance pre-built components for developing web applications quickly. React is another popular JavaScript framework known for creating customized and reusable elements and virtual DOM. Angular is another open-source JavaScript framework that utilizes component-based architecture and allows developers to build high-performance single-page applications."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_html.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/DOM_scripting",
        "document": "When writing web pages and apps, one of the most common things you'll want to do is change the document structure in some way. This is usually done by manipulating the Document Object Model (DOM) via a set of built-in browser APIs for controlling HTML and styling information. In this article we'll introduce you to DOM scripting. An understanding of HTML and the fundamentals of CSS, familiarity with JavaScript basics as covered in previous lessons.\n• What the DOM is — the browser's internal representation of the document's HTML structure as a hierarchy of objects.\n• The important parts of a web browser as represented in JavaScript — , , and .\n• How DOM nodes exist relative to each other in the DOM tree — root, parent, child, sibling, and descendant.\n• Getting references to DOM nodes, creating new nodes, adding and removing nodes and attributes.\n\nWeb browsers are very complicated pieces of software with a lot of moving parts, many of which can't be controlled or manipulated by a web developer using JavaScript. You might think that such limitations are a bad thing, but browsers are locked down for good reasons, mostly centering around security. Imagine if a website could get access to your stored passwords or other sensitive information, and log into websites as if it were you? Despite the limitations, Web APIs still give us access to a lot of functionality that enable us to do a great many things with web pages. There are a few really obvious bits you'll reference regularly in your code — consider the following diagram, which represents the main parts of a browser directly involved in viewing web pages:\n• The window is the browser tab that a web page is loaded into; this is represented in JavaScript by the object. Using methods available on this object you can do things like return the window's size (see and ), manipulate the document loaded into that window, store data specific to that document on the client-side (for example using a local database or other storage mechanism), attach an event handler to the current window, and more.\n• The navigator represents the state and identity of the browser (i.e. the user-agent) as it exists on the web. In JavaScript, this is represented by the object. You can use this object to retrieve things like the user's preferred language, a media stream from the user's webcam, etc.\n• The document (represented by the DOM in browsers) is the actual page loaded into the window, and is represented in JavaScript by the object. You can use this object to return and manipulate information on the HTML and CSS that comprises the document, for example get a reference to an element in the DOM, change its text content, apply new styles to it, create new elements and add them to the current element as children, or even delete it altogether. In this article we'll focus mostly on manipulating the document, but we'll show a few other useful bits besides.\n\nLet's provide a brief recap on the Document Object Model (DOM), which we also looked at earlier in the course. The document currently loaded in each one of your browser tabs is represented by a DOM. This is a \"tree structure\" representation created by the browser that enables the HTML structure to be easily accessed by programming languages — for example the browser itself uses it to apply styling and other information to the correct elements as it renders a page, and developers like you can manipulate the DOM with JavaScript after the page has been rendered. We have created an example page at dom-example.html (see it live also). Try opening this up in your browser — it is a very simple page containing a element inside which you can find an image, and a paragraph with a link inside. The HTML source code looks like this: <!doctype html> <html lang=\"en-US\"> <head> <meta charset=\"utf-8\" /> <title>Simple DOM example</title> </head> <body> <section> <img src=\"dinosaur.png\" alt=\"A red Tyrannosaurus Rex: A two legged dinosaur standing upright like a human, with small arms, and a large head with lots of sharp teeth.\" /> <p> Here we will add a link to the <a href=\"https://www.mozilla.org/\">Mozilla homepage</a> </p> </section> </body> </html> The DOM on the other hand looks like this: Note: This DOM tree diagram was created using Ian Hickson's Live DOM viewer. Each entry in the tree is called a node. You can see in the diagram above that some nodes represent elements (identified as , , and so on) and others represent text (identified as ). There are other types of nodes as well, but these are the main ones you'll encounter. Nodes are also referred to by their position in the tree relative to other nodes:\n• Root node: The top node in the tree, which in the case of HTML is always the node (other markup vocabularies like SVG and custom XML will have different root elements).\n• Child node: A node directly inside another node. For example, is a child of in the above example.\n• Descendant node: A node anywhere inside another node. For example, is a child of in the above example, and it is also a descendant. is not a child of , as it is two levels below it in the tree, but it is a descendant of .\n• Parent node: A node which has another node inside it. For example, is the parent node of in the above example.\n• Sibling nodes: Nodes that sit on the same level under the same parent node in the DOM tree. For example, and are siblings in the above example. It is useful to familiarize yourself with this terminology before working with the DOM, as a number of the code terms you'll come across make use of them. You'll also come across them in CSS (e.g. descendant selector, child selector).\n\nTo start learning about DOM manipulation, let's begin with a practical example.\n• Take a local copy of the dom-example.html page and the image that goes along with it.\n• Add a element just above the closing tag.\n• To manipulate an element inside the DOM, you first need to select it and store a reference to it inside a variable. Inside your script element, add the following line:\n• Now we have the element reference stored in a variable, we can start to manipulate it using properties and methods available to it (these are defined on interfaces like in the case of element, its more general parent interface , and — which represents all nodes in a DOM). First of all, let's change the text inside the link by updating the value of the property. Add the following line below the previous one:\n• We should also change the URL the link is pointing to, so that it doesn't go to the wrong place when it is clicked on. Add the following line, again at the bottom: Note that, as with many things in JavaScript, there are many ways to select an element and store a reference to it in a variable. is the recommended modern approach. It is convenient because it allows you to select elements using CSS selectors. The above call will match the first element that appears in the document. If you wanted to match and do things to multiple elements, you could use , which matches every element in the document that matches the selector, and stores references to them in an array-like object called a . There are older methods available for grabbing element references, such as:\n• , which selects an element with a given attribute value, e.g. . The ID is passed to the function as a parameter, i.e. .\n• , which returns an array-like object containing all the elements on the page of a given type, for example s, s, etc. The element type is passed to the function as a parameter, i.e. . These two work better in older browsers than the modern methods like , but are not as convenient. Have a look and see what others you can find!\n\nThe above has given you a little taste of what you can do, but let's go further and look at how we can create new elements.\n• Going back to the current example, let's start by grabbing a reference to our element — add the following code at the bottom of your existing script (do the same with the other lines too):\n• Now let's create a new paragraph using and give it some text content in the same way as before: const para = document.createElement(\"p\"); para.textContent = \"We hope you enjoyed the ride.\";\n• You can now append the new paragraph at the end of the section using :\n• Finally for this part, let's add a text node to the paragraph the link sits inside, to round off the sentence nicely. First we will create the text node using :\n• Now we'll grab a reference to the paragraph the link is inside, and append the text node to it: That's most of what you need for adding nodes to the DOM — you'll make a lot of use of these methods when building dynamic interfaces (we'll look at some examples later).\n\nThere may be times when you want to move nodes, or delete them from the DOM altogether. This is perfectly possible. If we wanted to move the paragraph with the link inside it to the bottom of the section, we could do this: This moves the paragraph down to the bottom of the section. You might have thought it would make a second copy of it, but this is not the case — is a reference to the one and only copy of that paragraph. If you wanted to make a copy and add that as well, you'd need to use instead. Removing a node is pretty simple as well, at least when you have a reference to the node to be removed and its parent. In our current case, we just use , like this: When you want to remove a node based only on a reference to itself, which is fairly common, you can use : This method is not supported in older browsers. They have no method to tell a node to remove itself, so you'd have to do the following: Have a go at adding the above lines to your code.\n\nIt is possible to manipulate CSS styles via JavaScript in a variety of ways. To start with, you can get a list of all the stylesheets attached to a document using , which returns an array-like object with objects. You can then add/remove styles as wished. However, we're not going to expand on those features because they are a somewhat archaic and difficult way to manipulate style. There are much easier ways. The first way is to add inline styles directly onto elements you want to dynamically style. This is done with the property, which contains inline styling information for each element in the document. You can set properties of this object to directly update element styles.\n• As an example, try adding these lines to our ongoing example:\n• Reload the page and you'll see that the styles have been applied to the paragraph. If you look at that paragraph in your browser's Page Inspector/DOM inspector, you'll see that these lines are indeed adding inline styles to the document: <p style=\"color: white; background-color: black; padding: 10px; width: 250px; text-align: center;\"> We hope you enjoyed the ride. </p> Note: Notice how the JavaScript property versions of the CSS styles are written in lower camel case whereas the CSS versions are hyphenated (kebab-case) (e.g. versus ). Make sure you don't get these mixed up, otherwise it won't work. There is another common way to dynamically manipulate styles on your document, which we'll look at now.\n• Delete the previous five lines you added to the JavaScript.\n• Add the following inside your HTML :\n• Now we'll turn to a very useful method for general HTML manipulation — — this takes two arguments, the attribute you want to set on the element, and the value you want to set it to. In this case we will set a class name of highlight on our paragraph:\n• Refresh your page, and you'll see no change — the CSS is still applied to the paragraph, but this time by giving it a class that is selected by our CSS rule, not as inline CSS styles. Which method you choose is up to you; both have their advantages and disadvantages. The first method takes less setup and is good for simple uses, whereas the second method is more purist (no mixing CSS and JavaScript, no inline styles, which are seen as a bad practice). As you start building larger and more involved apps, you will probably start using the second method more, but it is really up to you. At this point, we haven't really done anything useful! There is no point using JavaScript to create static content — you might as well just write it into your HTML and not use JavaScript. It is more complex than HTML, and creating your content with JavaScript also has other issues attached to it (such as not being readable by search engines). In the next section we will look at a more practical use of DOM APIs. Note: You can find our finished version of the dom-example.html demo on GitHub (see it live also)."
    },
    {
        "link": "https://freecodecamp.org/news/dom-manipulation-in-javascript",
        "document": "JavaScript, the language of the web, empowers developers to create dynamic and interactive web pages. One of the key features that enables this interactivity is Document Object Model (DOM) manipulation.\n\nDOM manipulation allows developers to interact with and modify the structure, style, and content of web pages. In this article, we'll explore the fundamentals of DOM manipulation in JavaScript, breaking down complex concepts into easy-to-understand snippets.\n\nWhat is the DOM?\n\nThe Document Object Model (DOM) is a programming interface for web documents. It represents the structure of a document as a tree of objects, where each object corresponds to a part of the document, such as elements, attributes, and text. JavaScript can manipulate this tree structure, allowing developers to dynamically alter the content and appearance of a webpage.\n\nTo manipulate the DOM, we need to access its elements. This is commonly done using the object, which represents the entire HTML document. Let's look at a simple example:\n\nIn the code snippet above, we use , , and to retrieve specific elements. The returned values can then be stored in variables for further manipulation.\n\nOnce we have access to an element, we can modify its content using the property:\n\nIn the example above, we changed the content of the to . This is a simple yet powerful way to update the text within an element.\n\nEvents are actions or occurrences that happen in the browser, such as a user clicking a button or resizing the window. JavaScript allows us to handle these events and execute code in response. Event handling is a crucial aspect of creating interactive web pages.\n\nTo respond to events, we can use event listeners. These are functions that \"listen\" for a specific event on a particular element. Let's consider a button click event as an example:\n\nIn this example, when the button with the ID is clicked, an alert saying will pop up. Event listeners provide a way to execute custom code based on user interactions.\n\nDOM manipulation also extends to modifying the styles of elements, allowing us to create visually appealing and dynamic web pages.\n\nWe can use the property of an element to change its appearance. Let's take an example of changing the color of a paragraph when a button is clicked:\n\nIn this example, when the button with the ID is clicked, the text color of the paragraph with the ID is changed to blue.\n\nHow to Create and Modify Elements\n\nIn addition to modifying existing elements, JavaScript allows us to create new elements and add them to the DOM.\n\nHow to create new elements\n\nThe method is used to create a new HTML element. Let's create a new paragraph element and append (add) it to the body of the document:\n\nIn this example, we create a new (paragraph) element, set its text content, and then append it to the body of the document.\n\nWe can also modify the attributes of existing elements. Let's consider changing the source of an image dynamically:\n\nHere, we access an image element with the ID and change its attribute to , dynamically updating the displayed image.\n\nLet's consider a scenario where you want to update the value of a text input based on user interaction:\n\nIn this example, as the user types in the text input with the ID , a paragraph with the ID is dynamically updated to reflect the input value.\n\nYou can toggle the visibility of an element by using the style property. Let's create a button that toggles the visibility of a paragraph:\n\nHere, the paragraph with the ID is initially visible. Clicking the button with the ID toggles its visibility.\n\nWhile DOM manipulation is a powerful tool for creating dynamic web pages, beginners often encounter common pitfalls that can lead to unexpected behavior or errors. Let's explore some of these pitfalls and provide tips on how to avoid them.\n\nManipulating the DOM before it's ready\n\nWe may sometimes attempt to manipulate the DOM before it has fully loaded. This can lead to JavaScript trying to access elements that haven't been rendered yet. To avoid this, it's crucial to wait for the DOM to be fully loaded before executing any JavaScript code:\n\nBy wrapping your DOM manipulation code inside the event listener, you ensure that it runs only when the DOM is ready.\n\nNot checking if an element exists\n\nWhen attempting to access an element using methods like , we might assume the element exists and proceed with manipulation. However, if the element is not present on the page, it can lead to errors.\n\nAlways check if an element exists before manipulating it:\n\nThis simple check prevents errors when working with elements that may or may not be present.\n\nWhen handling events, forgetting to prevent the default action can result in unexpected page behavior. For instance, if a form is submitted without preventing the default action, the page might reload, causing loss of data:\n\nBy calling , you stop the default behavior associated with the event, giving you full control over how the event is handled.\n\nPerforming inefficient DOM queries, especially within loops, can degrade performance. Each query involves traversing the DOM, and unnecessary queries can slow down your webpage.\n\nInstead of repeatedly querying the DOM, cache references to elements:\n\nBy querying the DOM once and reusing the reference, you optimize your code.\n\nDifferent browsers may interpret JavaScript and DOM manipulation slightly differently. Failing to account for cross-browser compatibility can lead to inconsistent behavior.\n\nUse feature detection and consider using libraries like jQuery or modern frameworks to handle cross-browser inconsistencies:\n\nBy checking for features before using them, you ensure your code works across various browsers.\n\nHow to Use Frameworks for DOM Manipulation\n\nWhile JavaScript allows for direct DOM manipulation, modern web development often involves using frameworks like React or Vue.js. These frameworks provide a more structured way to build and manage user interfaces.\n\nIn this React example, a component is created to handle a button click event, demonstrating a more declarative approach to UI development.\n\nHere, a Vue.js instance is created to manage data and methods, showcasing the reactivity and component-based structure of Vue.js.\n\nIn this comprehensive guide, we've delved into the world of DOM manipulation in JavaScript. From accessing elements to handling events, and from modifying styles to creating new elements, we've covered the essential concepts in a straightforward manner.\n\nRemember, DOM manipulation is at the core of creating dynamic and interactive web pages. By mastering these fundamental techniques, you'll be well-equipped to build engaging and user-friendly web applications. As you continue your journey with JavaScript, practice and experimentation will deepen your understanding of these concepts, paving the way for your success as a web developer."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-manipulate-dom-elements-in-javascript",
        "document": "The DOM stands for the Document Object Model (DOM), which allows us to interact with the document and change its structure, style, and content. We can use the DOM to change the content and style of an HTML element by changing its properties.\n\nIn this article, we will discuss how to manipulate the DOM elements.\n\nWe can manipulate or change the DOM elements by using the following methods:\n\n1. Change the Content of an Element\n\nYou can change the content inside an HTML element using JavaScript. The two most common properties for this are innerHTML and textContent:\n• innerHTML: Allows you to get or set the\n• textContent: Allows you to get or set the text content inside an element, ignoring any HTML tags.\n\nIn this example\n• None innerHTML changes the entire content of an element, including HTML tags. In this case, we replace the content of the first div with bold text using <strong>.\n• None textContent changes only the text inside the element, ignoring any HTML tags. The second div is updated with plain text, without any HTML formatting.\n• None The first div shows \"This is the original content using innerHTML.\"\n• None The second div shows \"This is the original text content using textContent.\"\n• None The first div will display \"This is changed using innerHTML!\" with bold text.\n• None The second div will display \"This is changed using textContent!\" with plain text.\n\nYou can add, remove, or toggle classes on an element using JavaScript. This is helpful for styling or applying animations.\n• classList.toggle(): Toggles a class (adds it if it's not present, removes it if it is).\n\nIn this example\n• Adding a Class (addClass()) : When you click the \"Add 'highlight' Class\" button, the highlight class is added to the div element with the id=\"example\". This changes the text color to red and makes it bold (as defined in the CSS).\n• Removing a Class (removeClass()): When you click the \"Remove 'bold' Class\" button, the bold class is removed from the div, which removes the bold styling from the text.\n• Toggling a Class (toggleClass()): When you click the \"Toggle 'highlight' Class\" button, the highlight class is either added or removed, depending on whether it's already present. If the class is present, it will be removed; if not, it will be added.\n\nYou can directly manipulate the CSS styles of an element using the style property. This allows you to dynamically change how elements appear on the page.\n\nSometimes, you need to create new elements, add them to the DOM, or remove existing ones. You can do this easily with the following methods\n\nYou can insert new elements at specific positions relative to existing elements using methods like insertBefore().\n\nYou can easily get, set, or remove the attributes of an HTML element using the following methods:\n• getAttribute() : Retrieves the value of an attribute.\n• setAttribute() : Sets a new value for an attribute.\n\nHTML5 introduced data attributes, which are custom attributes that you can use to store extra information about an element. These are particularly useful for adding data to an element without affecting its visual structure.\n• dataset: A special property in JavaScript that allows you to access data attributes.\n\nManipulating the DOM with JavaScript is a core aspect of web development. Understanding how to select, modify, and manipulate DOM elements enables you to create dynamic, interactive web applications. With the power to change text, styles, attributes, and even structure in real-time, JavaScript empowers developers to build rich, user-responsive websites.\n\nWhat is the difference between innerText and innerHTML?\n\nHow can I remove an element from the DOM using JavaScript?\n\nWhat is event delegation, and why is it useful?\n\nHow do you add a new element to the DOM?\n\nHow do you remove an element from the DOM?"
    },
    {
        "link": "https://stackoverflow.com/questions/50863848/how-to-update-an-html-input-field-using-the-dom",
        "document": "An attribute is a value associated with a tag, for example with the anchor tag which is really but has the attribute . What you are looking for is the value.\n\nIn this case your code will be much simpler if the input has an id.\n\nWhat I see in this case is that you have a number input. You can't set a number input to be text.\n\nIf you want to change the placeholder text, which is just an overlay and not actually a value, then you can set the placeholder, which IS an attribute of the input tag."
    }
]