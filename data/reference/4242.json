[
    {
        "link": "https://geeksforgeeks.org/make-simple-calculator-using-python",
        "document": "In this article, we will create a simple calculator that can perform basic arithmetic operations like addition, subtraction, multiplication and division. We will explore two implementations for the same:\n\nThis version of the calculator takes user input and performs operations based on the selected option.\n• Conditional Execution: Calls the corresponding function based on user input and prints the result.\n• Invalid Selection Handling: Displays “Invalid input” if the user enters an incorrect option.\n\nThe graphical calculator will have an interactive interface allowing users to perform calculations using buttons.\n\nTkinter comes pre-installed with Python. If not, install it using:"
    },
    {
        "link": "https://programiz.com/python-programming/examples/calculator",
        "document": "Example: Simple Calculator by Using Functions\n\nIn this program, we ask the user to choose an operation. Options 1, 2, 3, and 4 are valid. If any other input is given, is displayed and the loop continues until a valid option is selected.\n\nTwo numbers are taken and an branching is used to execute a particular section. User-defined functions , , and evaluate respective operations and display the output."
    },
    {
        "link": "https://codingal.com/coding-for-kids/blog/python-project-basic-calculator",
        "document": "Practice is essential to learning any tool that supports the IT sector. There are no quick cuts when it comes to implementing modern programming languages like Python.\n\nWhen we set aside time to concentrate on simple Python project ideas, mastering this widely used programming language is a goal we can achieve.\n\nLet’s learn a little bit more about Python before we look at some great Python applications.\n\nPython programming is the best option for a wide range of projects, from easy operating systems to basic web apps, thanks to its simplicity and versatility.\n\nIts simple syntax encourages readability, which considerably lowers the cost of software maintenance.\n\nPython allows programmers to think of code as both data and functionality since it is both object-oriented and functional.\n\nAdditionally, it works with any operating system, enabling users to create native programs for both Windows and Mac computers.\n\nBuilding calculators is a good first project for new Python developers. Our ability to construct a basic program, such as a calculator, will improve as you work to fully comprehend the language’s basics.\n\nThis blog will show you how to build a basic calculator that, based on the user’s input, may add, subtract, multiply, or divide.\n\nThe following Python programming concepts should be known to you in order to understand this example:\n\nWe may use statements to develop a basic calculator and an advanced calculator as well.\n\nPython programming is a simple and effective technique since it allows for evaluations and variable manipulation to make it function as needed.\n\nThis blog helps us understand a simple Python command-line calculator application where we will explore Python’s arithmetic operators, functions, and conditional expressions. and will develop our calculator program in Python by learning how to handle user input.\n\nThe process of writing the calculator application in Python will be broken down into a series of easy phases.\n\nMaking a simple calculator application in Python that can do operations like addition, subtraction, multiplication, and division—all of which depend on the input provided by the user—will aid in better understanding the concepts.\n• Prompting the user for input. In other words, we will take input for two variables from user.\n• To evaluate each function, define and add operators or functions like , , , and .\n• Apply conditional statements ( branching) to make it function how the user chooses in order to make it comparable to the calculator.\n\nYoung programmers may enhance their general coding skills by learning about ideas like conditionals, while loops, and more. Additionally, it offers command-line programming, math, and number training.\n\nThis kind of coding project brings up a wide range of opportunities. A prospective coder may get a jump start on several exciting jobs and interests of the future, including video games, mobile apps, and artificial intelligence!\n\nLet’s get started and learn by performing each step in the process of writing a Python calculator program.\n\nStep 1: Prompting the user for input taking input for two variables from user\n\nUsing Python’s method, we will collect user input in this step. To carry out any mathematical operations, it works exactly as when we enter numbers into a traditional calculator.\n\nWe’ll ask the user to enter two variables, using the method for each variable.\n\nThese input numbers are stored in variables num1 and num2.\n\nPlease, Enter the first number: 10\n\nPlease, Enter the second number: 20\n\nStep 2: To evaluate each function, define and add operators or functions like add(), subtract(), multiply(), and divide()\n\nIn order to develop the calculations for the calculator program in Python, we are now creating functions to carry out mathematical operations, including addition, subtraction, multiplication, and division.\n\nIn order to encourage the user to do mathematical operations on integers rather than strings, we also updated our input functions to accept integers.\n\nPlease, Enter the first number: 10\n\nPlease, Enter the second number: 20\n\nEach of the four fundamental arithmetic operations in Python has been discussed above using the format() function.\n\nThe format() methods fill in the blanks and format the output. Now, the user’s input has been calculated for each of the stated arithmetic operations.\n\nWe must make it operate in accordance with the user’s preference because all functions are being carried out as outlined for the two numbers.\n\nWe’ll employ conditional statements— branching—so that the program only does the operations the user selects, much like a real calculator.\n\nStep 3: Apply conditional statements (if…elif…else branching) to make it function how the user chooses in order to make it comparable to the calculator\n\nWe will define each of the arithmetic operations as a function using the def function in Python in order to make it user-based.\n\nThe user’s input for the mathematical operations they want to carry out will once again be asked for.\n\nHi, This is the Basic console based calculator!\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nThank you for using calculator...\n\nEnter the two integers that represent your math issue after choosing an operation. To obtain the solution to 10 x 20, for instance, enter 10 as your first number (num_1) and 20 as your second number (num_2).\n\nWhen all requirements are satisfied for a particular operation—in this example, multiplication—the body of the statement is carried out, producing the result 200.\n\nAs illustrated below, these operations are also compatible with negative numbers.\n\nHi, This is the Basic console based calculator!\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nThank you for using calculator...\n\nAdditionally, the else block will be executed if the user selects an option that is not accessible in the range of 1 to 5, as illustrated below.:\n\nHi, This is the Basic console based calculator!\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5\n\nAs we used a True loop for the execution, the loop will then start over and ask the user for input. This will cause the program to run constantly until the user ends it by selecting the 5 exit option, where we used a break statement to exit the loop.\n\nWhole numbers are used in this equation (known as integers). We are not using decimal points yet. The code’s method is responsible for this. It may be modified by using the method to allow for decimals, as illustrated below:\n\nHi, This is the Basic console based calculator!\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nPlease, Enter the first number:\n\nPlease, Enter the second number:\n\nPlease select which of the following arithmetic operation you want me to perform-\n\nEnter your choice of operation you want to perform: 1, 2, 3, 4 or 5 :\n\nThank you for using calculator...\n\nWe wrote a Python calculator program based on the user’s input of numbers and operators, just like a real calculator.\n\nThis is only one simple application that we have developed; with Python programming, we can make many more.\n\nPython is one of the popular and versatile programming languages. It is beginner friendly and therefore the best programming language to start with. It is considered to be one of the most used languages in the world.\n\nPython is widely used in various fields such as data analysis, machine learning, software testing and prototyping, web development, and in many other areas.\n\nWe provide 1:1 live interactive online coding classes for kids with expert coding instructors. Along with lifetime access to course content and downloadable learning resources, we also cater to every child’s need by providing a personalized journey. Python for kids will help your child to enhance cognitive, logical, and computational skills."
    },
    {
        "link": "https://reddit.com/r/PythonLearning/comments/1dlqa3w/absolute_beginner_python_journey_step_1_create_a",
        "document": "Yesterday I asked you guys for some input on a project to start out with python. Firstly, thanks for the reactions. I started out with the following project:\n\nBelow I'll walk you through my steps and thought process, and show the code I came up with. I know not everything is correct yet (input in the form of 2+2+2 does not work yet), but hey, somehow most things seem to work!\n\nI started out thinking, what do I actually need to do? Let's ask a user for input and output what he wrote:\n\nFor the second step: I had no clue on how to do this, so I asked chatGPT to help me (and explain it). I found out there is a function to split a string based on a delimiter of my choice (just like seperating a CSV file into multiple columns in Excel)\n\nFrom there, I can store the first and 2nd parts in a variable (forgot to cast to INT, obviously!) and create a variable that stores the output\n\n3. Expanding the calculation to include all operators\n\nI came up with some if, elif, else statements to be able to delimit the input string based on the given operators, and ran into a problem: I did not define the operators as string in my if statements... (took me a while to figure it out)\n\nBut managed to make it work, only to realize that when I give input that should not be allowed, it still runs through the code and give me this result:\n• I decided to fix this by printing the variable calculator_output instead of (a, operator, b).\n• Also, I moved the print statement to my if/elif/else statement, so that it will only print if a condition is met.\n• Besides that, added an extra if statement under the divide clause to fix /0 error\n• And realized that the ^ is not a valid operator in python and fixed that too.\n\nPlease note that I will follow up on this with some more fixes (for example, 2+2+2 does not work properly yet).\n\nAny suggestions on how to improve the code below?\n\nThanks so far, and see you in the next update!\n• Feel free to give input on how you would like to see the next post (shorter?, more detail?, etc.)"
    },
    {
        "link": "https://stackoverflow.com/questions/75677334/making-a-simple-calculator-python",
        "document": "I'd like to make a simple calculator that only takes in one line and includes only an integer, symbol, and another symbol.\n\nIt should support addition, subtract, multiplication, division, and mod.\n\nIf there are any spaces in between, decimals, words/letters it has to come out as “invalid input”.\n\nThe issue is that when I type in the math problem (ie. 5+5) nothing comes out, it's just blank. does anyone know how to fix this?\n\nthis is what I have so far:"
    },
    {
        "link": "https://docs.python.org/3/library/functions.html",
        "document": "The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\n\nOpen file and return a corresponding file object. If the file cannot be opened, an is raised. See Reading and Writing Files for more examples of how to use this function. file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed unless closefd is set to .) mode is an optional string that specifies the mode in which the file is opened. It defaults to which means open for reading in text mode. Other common values are for writing (truncating the file if it already exists), for exclusive creation, and for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform-dependent: is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are: open for writing, truncating the file first open for exclusive creation, failing if the file already exists open for writing, appending to the end of file if it exists The default mode is (open for reading text, a synonym of ). Modes and open and truncate the file. Modes and open the file with no truncation. As mentioned in the Overview, Python distinguishes between binary and text I/O. Files opened in binary mode (including in the mode argument) return contents as objects without any decoding. In text mode (the default, or when is included in the mode argument), the contents of the file are returned as , the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable when writing in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. Note that specifying a buffer size this way applies for binary buffered I/O, but (i.e., files opened with ) would have another buffering. To disable buffering in , consider using the flag for . When no buffering argument is given, the default buffering policy works as follows:\n• None Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on . On many systems, the buffer will typically be 4096 or 8192 bytes long.\n• None “Interactive” text files (files for which returns ) use line buffering. Other text files use the policy described above for binary files. encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever returns), but any text encoding supported by Python can be used. See the module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled—this cannot be used in binary mode. A variety of standard error handlers are available (listed under Error Handlers), though any error handling name that has been registered with is also valid. The standard names include:\n• None to raise a exception if there is an encoding error. The default value of has the same effect.\n• None ignores errors. Note that ignoring encoding errors can lead to data loss.\n• None causes a replacement marker (such as ) to be inserted where there is malformed data.\n• None will represent any incorrect bytes as low surrogate code units ranging from U+DC80 to U+DCFF. These surrogate code units will then be turned back into the same bytes when the error handler is used when writing data. This is useful for processing files in an unknown encoding.\n• None is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference .\n• None (also only supported when writing) replaces unsupported characters with escape sequences. newline determines how to parse newline characters from the stream. It can be , , , , and . It works as follows:\n• None When reading input from the stream, if newline is , universal newlines mode is enabled. Lines in the input can end in , , or , and these are translated into before being returned to the caller. If it is , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.\n• None When writing output to the stream, if newline is , any characters written are translated to the system default line separator, . If newline is or , no translation takes place. If newline is any of the other legal values, any characters written are translated to the given string. If closefd is and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given closefd must be (the default); otherwise, an error will be raised. A custom opener can be used by passing a callable as opener. The underlying file descriptor for the file object is then obtained by calling opener with (file, flags). opener must return an open file descriptor (passing as opener results in functionality similar to passing ). The following example uses the dir_fd parameter of the function to open a file relative to a given directory: 'This will be written to somedir/spamspam.txt' The type of file object returned by the function depends on the mode. When is used to open a file in a text mode ( , , , , etc.), it returns a subclass of (specifically ). When used to open a file in a binary mode with buffering, the returned class is a subclass of . The exact class varies: in read binary mode, it returns an ; in write binary and append binary modes, it returns an , and in read/write mode, it returns an . When buffering is disabled, the raw stream, a subclass of , , is returned. See also the file handling modules, such as , (where is declared), , , , and . The and arguments may have been modified or inferred from the original call.\n• None used to be raised, it is now an alias of .\n• None is now raised if the file opened in exclusive creation mode ( ) already exists.\n• None The file is now non-inheritable.\n• None If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an exception (see PEP 475 for the rationale).\n• None On Windows, opening a console buffer may return a subclass of other than . Changed in version 3.11: The mode has been removed.\n\nReturn a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The object_or_type determines the method resolution order to be searched. The search starts from the class right after the type. For example, if of object_or_type is and the value of type is , then searches . The attribute of the class corresponding to object_or_type lists the method resolution search order used by both and . The attribute is dynamic and can change whenever the inheritance hierarchy is updated. If the second argument is omitted, the super object returned is unbound. If the second argument is an object, must be true. If the second argument is a type, must be true (this is useful for classmethods). When called directly within an ordinary method of a class, both arguments may be omitted (“zero-argument ”). In this case, type will be the enclosing class, and obj will be the first argument of the immediately enclosing function (typically ). (This means that zero-argument will not work as expected within nested functions, including generator expressions, which implicitly create nested functions.) There are two typical use cases for super. In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages. The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that such implementations have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime). For both use cases, a typical superclass call looks like this: # This does the same thing as: In addition to method lookups, also works for attribute lookups. One possible use case for this is calling descriptors in a parent or sibling class. Note that is implemented as part of the binding process for explicit dotted attribute lookups such as . It does so by implementing its own method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, is undefined for implicit lookups using statements or operators such as . Also note that, aside from the zero argument form, is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods. For practical suggestions on how to design cooperative classes using , see guide to using super()."
    },
    {
        "link": "https://docs.python.org/3/library/stdtypes.html",
        "document": "The following sections describe the standard types that are built into the interpreter.\n\nThe principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.\n\nSome collection classes are mutable. The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but .\n\nSome operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the function or the slightly different function). The latter function is implicitly used when an object is written by the function.\n\nThere are three distinct numeric types: integers, floating-point numbers, and complex numbers. In addition, Booleans are a subtype of integers. Integers have unlimited precision. Floating-point numbers are usually implemented using double in C; information about the precision and internal representation of floating-point numbers for the machine on which your program is running is available in . Complex numbers have a real and imaginary part, which are each a floating-point number. To extract these parts from a complex number z, use and . (The standard library includes the additional numeric types , for rationals, and , for floating-point numbers with user-definable precision.) Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric literals containing a decimal point or an exponent sign yield floating-point numbers. Appending or to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts. Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex. A comparison between numbers of different types behaves as though the exact values of those numbers were being compared. The constructors , , and can be used to produce numbers of a specific type. All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence): absolute value or magnitude of x a complex number with real part re, imaginary part im. im defaults to zero. conjugate of the complex number c\n• None Also referred to as integer division. For operands of type , the result has type . For operands of type , the result has type . In general, the result is a whole integer, though the result’s type is not necessarily . The result is always rounded towards minus infinity: is , is , is , and is .\n• None Not for complex numbers. Instead convert to floats using if appropriate.\n• None Conversion from to truncates, discarding the fractional part. See functions and for alternative conversions.\n• None float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity.\n• None Python defines and to be , as is common for programming languages.\n• None The numeric literals accepted include the digits to or any Unicode equivalent (code points with the property). See the Unicode Standard for a complete list of code points with the property. All types ( and ) also include the following operations: x rounded to n digits, rounding half to even. If n is omitted, it defaults to 0. For additional numeric operations see the and modules. Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two’s complement with an infinite number of sign bits. The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation has the same priority as the other unary numeric operations ( and ). This table lists the bitwise operations sorted in ascending priority: bitwise exclusive or of x and y\n• None Negative shift counts are illegal and cause a to be raised.\n• None A left shift by n bits is equivalent to multiplication by .\n• None A right shift by n bits is equivalent to floor division by .\n• None Performing these calculations with at least one extra sign extension bit in a finite two’s complement representation (a working bit-width of or more) is sufficient to get the same result as if there were an infinite number of sign bits. The int type implements the abstract base class. In addition, it provides a few more methods: Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros: More precisely, if is nonzero, then is the unique positive integer such that . Equivalently, when is small enough to have a correctly rounded logarithm, then . If is zero, then returns . Return the number of ones in the binary representation of the absolute value of the integer. This is also known as the population count. Example: Return an array of bytes representing an integer. The integer is represented using length bytes, and defaults to 1. An is raised if the integer is not representable with the given number of bytes. The byteorder argument determines the byte order used to represent the integer, and defaults to . If byteorder is , the most significant byte is at the beginning of the byte array. If byteorder is , the most significant byte is at the end of the byte array. The signed argument determines whether two’s complement is used to represent the integer. If signed is and a negative integer is given, an is raised. The default value for signed is . The default values can be used to conveniently turn an integer into a single byte object: However, when using the default arguments, don’t try to convert a value greater than 255 or you’ll get an . \"byteorder must be either 'little' or 'big'\" Changed in version 3.11: Added default argument values for and . Return the integer represented by the given array of bytes. The argument bytes must either be a bytes-like object or an iterable producing bytes. The byteorder argument determines the byte order used to represent the integer, and defaults to . If byteorder is , the most significant byte is at the beginning of the byte array. If byteorder is , the most significant byte is at the end of the byte array. To request the native byte order of the host system, use as the byte order value. The signed argument indicates whether two’s complement is used to represent the integer. \"byteorder must be either 'little' or 'big'\" Changed in version 3.11: Added default argument value for . Return a pair of integers whose ratio is equal to the original integer and has a positive denominator. The integer ratio of integers (whole numbers) is always the integer as the numerator and as the denominator. The float type implements the abstract base class. float also has the following additional methods. Return a pair of integers whose ratio is exactly equal to the original float. The ratio is in lowest terms and has a positive denominator. Raises on infinities and a on NaNs. Return if the float instance is finite with integral value, and otherwise: Two methods support conversion to and from hexadecimal strings. Since Python’s floats are stored internally as binary numbers, converting a float to or from a decimal string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work. Return a representation of a floating-point number as a hexadecimal string. For finite floating-point numbers, this representation will always include a leading and a trailing and exponent. Class method to return the float represented by a hexadecimal string s. The string s may have leading and trailing whitespace. Note that is an instance method, while is a class method. where the optional may by either or , and are strings of hexadecimal digits, and is a decimal integer with an optional leading sign. Case is not significant, and there must be at least one hexadecimal digit in either the integer or the fraction. This syntax is similar to the syntax specified in section 6.4.4.2 of the C99 standard, and also to the syntax used in Java 1.5 onwards. In particular, the output of is usable as a hexadecimal floating-point literal in C or Java code, and hexadecimal strings produced by C’s format character or Java’s are accepted by . Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string represents the floating-point number , or : Applying the reverse conversion to gives a different hexadecimal string representing the same number: For numbers and , possibly of different types, it’s a requirement that whenever (see the method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including , , and ) Python’s hash for numeric types is based on a single mathematical function that’s defined for any rational number, and hence applies to all instances of and , and all finite instances of and . Essentially, this function is given by reduction modulo for a fixed prime . The value of is made available to Python as the attribute of . CPython implementation detail: Currently, the prime used is on machines with 32-bit C longs and on machines with 64-bit C longs. Here are the rules in detail:\n• None If is a nonnegative rational number and is not divisible by , define as , where gives the inverse of modulo .\n• None If is a nonnegative rational number and is divisible by (but is not) then has no inverse modulo and the rule above doesn’t apply; in this case define to be the constant value .\n• None If is a negative rational number define as . If the resulting hash is , replace it with .\n• None The particular values and are used as hash values for positive infinity or negative infinity (respectively).\n• None For a number , the hash values of the real and imaginary parts are combined by computing , reduced modulo so that it lies in . Again, if the result is , it’s replaced with . To clarify the above rules, here’s some example Python code, equivalent to the built-in hash, for computing the hash of a rational number, , or : Assumes m and n are integers, with n positive. # Remove common factors of P. (Unnecessary if m and n already coprime.) # Fermat's Little Theorem: pow(n, P-1, P) is 1, so # pow(n, P-2, P) gives the inverse of n modulo P.\n\nThere are three basic sequence types: lists, tuples, and range objects. Additional sequence types tailored for processing of binary data and text strings are described in dedicated sections. The operations in the following table are supported by most sequence types, both mutable and immutable. The ABC is provided to make it easier to correctly implement these operations on custom sequence types. This table lists the sequence operations sorted in ascending priority. In the table, s and t are sequences of the same type, n, i, j and k are integers and x is an arbitrary object that meets any type and value restrictions imposed by s. The and operations have the same priorities as the comparison operations. The (concatenation) and (repetition) operations have the same priority as the corresponding numeric operations. if an item of s is equal to x, else if an item of s is equal to x, else the concatenation of s and t equivalent to adding s to itself n times slice of s from i to j with step k index of the first occurrence of x in s (at or after index i and before index j) total number of occurrences of x in s Sequences of the same type also support comparisons. In particular, tuples and lists are compared lexicographically by comparing corresponding elements. This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length. (For full details see Comparisons in the language reference.) Forward and reversed iterators over mutable sequences access values using an index. That index will continue to march forward (or backward) even if the underlying sequence is mutated. The iterator terminates only when an or a is encountered (or when the index drops below zero).\n• None While the and operations are used only for simple containment testing in the general case, some specialised sequences (such as , and ) also use them for subsequence testing:\n• None Values of n less than are treated as (which yields an empty sequence of the same type as s). Note that items in the sequence s are not copied; they are referenced multiple times. This often haunts new Python programmers; consider: What has happened is that is a one-element list containing an empty list, so all three elements of are references to this single empty list. Modifying any of the elements of modifies this single list. You can create a list of different lists this way: Further explanation is available in the FAQ entry How do I create a multidimensional list?.\n• None If i or j is negative, the index is relative to the end of sequence s: or is substituted. But note that is still .\n• None The slice of s from i to j is defined as the sequence of items with index k such that . If i or j is greater than , use . If i is omitted or , use . If j is omitted or , use . If i is greater than or equal to j, the slice is empty.\n• None The slice of s from i to j with step k is defined as the sequence of items with index such that . In other words, the indices are , , , and so on, stopping when j is reached (but never including j). When k is positive, i and j are reduced to if they are greater. When k is negative, i and j are reduced to if they are greater. If i or j are omitted or , they become “end” values (which end depends on the sign of k). Note, k cannot be zero. If k is , it is treated like .\n• None Concatenating immutable sequences always results in a new object. This means that building up a sequence by repeated concatenation will have a quadratic runtime cost in the total sequence length. To get a linear runtime cost, you must switch to one of the alternatives below:\n• None if concatenating objects, you can build a list and use at the end or else write to an instance and retrieve its value when complete\n• None if concatenating objects, you can similarly use or , or you can do in-place concatenation with a object. objects are mutable and have an efficient overallocation mechanism\n• None for other types, investigate the relevant class documentation\n• None Some sequence types (such as ) only support item sequences that follow specific patterns, and hence don’t support sequence concatenation or repetition.\n• None raises when x is not found in s. Not all implementations support passing the additional arguments i and j. These arguments allow efficient searching of subsections of the sequence. Passing the extra arguments is roughly equivalent to using , only without copying any data and with the returned index being relative to the start of the sequence rather than the start of the slice. The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the built-in. This support allows immutable sequences, such as instances, to be used as keys and stored in and instances. Attempting to hash an immutable sequence that contains unhashable values will result in . The operations in the following table are defined on mutable sequence types. The ABC is provided to make it easier to correctly implement these operations on custom sequence types. In the table s is an instance of a mutable sequence type, t is any iterable object and x is an arbitrary object that meets any type and value restrictions imposed by s (for example, only accepts integers that meet the value restriction ). item i of s is replaced by x slice of s from i to j is replaced by the contents of the iterable t the elements of are replaced by those of t removes the elements of from the list appends x to the end of the sequence (same as ) removes all items from s (same as ) creates a shallow copy of s (same as ) extends s with the contents of t (for the most part the same as ) inserts x into s at the index given by i (same as ) retrieves the item at i and also removes it from s removes the first item from s where is equal to x reverses the items of s in place\n• None If k is not equal to , t must have the same length as the slice it is replacing.\n• None The optional argument i defaults to , so that by default the last item is removed and returned.\n• None raises when x is not found in s.\n• None The method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence.\n• None and are included for consistency with the interfaces of mutable containers that don’t support slicing operations (such as and ). is not part of the ABC, but most concrete mutable sequence classes provide it.\n• None The value n is an integer, or an object implementing . Zero and negative values of n clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for under Common Sequence Operations. Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application). Lists may be constructed in several ways:\n• None Using a pair of square brackets to denote the empty list:\n• None Using the type constructor: or The constructor builds a list whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to . For example, returns and returns . If no argument is given, the constructor creates a new empty list, . Many other operations also produce lists, including the built-in. Lists implement all of the common and mutable sequence operations. Lists also provide the following additional method: This method sorts the list in place, using only comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state). accepts two arguments that can only be passed by keyword (keyword-only arguments): key specifies a function of one argument that is used to extract a comparison key from each list element (for example, ). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of means that list items are sorted directly without calculating a separate key value. The utility is available to convert a 2.x style cmp function to a key function. reverse is a boolean value. If set to , then the list elements are sorted as if each comparison were reversed. This method modifies the sequence in place for economy of space when sorting a large sequence. To remind users that it operates by side effect, it does not return the sorted sequence (use to explicitly request a new sorted list instance). The method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade). For sorting examples and a brief sorting tutorial, see Sorting Techniques. CPython implementation detail: While a list is being sorted, the effect of attempting to mutate, or even inspect, the list is undefined. The C implementation of Python makes the list appear empty for the duration, and raises if it can detect that the list has been mutated during a sort. Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a or instance). Tuples may be constructed in a number of ways:\n• None Using a pair of parentheses to denote the empty tuple:\n• None Using a trailing comma for a singleton tuple: or\n• None Using the built-in: or The constructor builds a tuple whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a tuple, it is returned unchanged. For example, returns and returns . If no argument is given, the constructor creates a new empty tuple, . Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity. For example, is a function call with three arguments, while is a function call with a 3-tuple as the sole argument. Tuples implement all of the common sequence operations. For heterogeneous collections of data where access by name is clearer than access by index, may be a more appropriate choice than a simple tuple object. The type represents an immutable sequence of numbers and is commonly used for looping a specific number of times in loops. The arguments to the range constructor must be integers (either built-in or any object that implements the special method). If the step argument is omitted, it defaults to . If the start argument is omitted, it defaults to . If step is zero, is raised. For a positive step, the contents of a range are determined by the formula where and . For a negative step, the contents of the range are still determined by the formula , but the constraints are and . A range object will be empty if does not meet the value constraint. Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices. Ranges containing absolute values larger than are permitted but some features (such as ) may raise . Ranges implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern). The value of the start parameter (or if the parameter was not supplied) The value of the stop parameter The value of the step parameter (or if the parameter was not supplied) The advantage of the type over a regular or is that a object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the , and values, calculating individual items and subranges as needed). Range objects implement the ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices (see Sequence Types — list, tuple, range): Testing range objects for equality with and compares them as sequences. That is, two range objects are considered equal if they represent the same sequence of values. (Note that two range objects that compare equal might have different , and attributes, for example or .) Changed in version 3.2: Implement the Sequence ABC. Support slicing and negative indices. Test objects for membership in constant time instead of iterating through all items. Changed in version 3.3: Define ‘==’ and ‘!=’ to compare range objects based on the sequence of values they define (instead of comparing based on object identity).\n• None The linspace recipe shows how to implement a lazy version of range suitable for floating-point applications."
    },
    {
        "link": "https://docs.python.org/3/tutorial/introduction.html",
        "document": "In the following examples, input and output are distinguished by the presence or absence of prompts (>>> and …): to repeat the example, you must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. Note that a secondary prompt on a line by itself in an example means you must type a blank line; this is used to end a multi-line command.\n\nYou can toggle the display of prompts and output by clicking on in the upper-right corner of an example box. If you hide the prompts and output for an example, then you can easily copy and paste the input lines into your interpreter.\n\nMany of the examples in this manual, even those entered at the interactive prompt, include comments. Comments in Python start with the hash character, , and extend to the end of the physical line. A comment may appear at the start of a line or following whitespace or code, but not within a string literal. A hash character within a string literal is just a hash character. Since comments are to clarify code and are not interpreted by Python, they may be omitted when typing in examples.\n\nLet’s try some simple Python commands. Start the interpreter and wait for the primary prompt, . (It shouldn’t take long.) The interpreter acts as a simple calculator: you can type an expression at it and it will write the value. Expression syntax is straightforward: the operators , , and can be used to perform arithmetic; parentheses ( ) can be used for grouping. For example: The integer numbers (e.g. , , ) have type , the ones with a fractional part (e.g. , ) have type . We will see more about numeric types later in the tutorial. Division ( ) always returns a float. To do floor division and get an integer result you can use the operator; to calculate the remainder you can use : # the % operator returns the remainder of the division With Python, it is possible to use the operator to calculate powers : The equal sign ( ) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt: If a variable is not “defined” (assigned a value), trying to use it will give you an error: # try to access an undefined variable File , line , in : There is full support for floating point; operators with mixed type operands convert the integer operand to floating point: In interactive mode, the last printed expression is assigned to the variable . This means that when you are using Python as a desk calculator, it is somewhat easier to continue calculations, for example: This variable should be treated as read-only by the user. Don’t explicitly assign a value to it — you would create an independent local variable with the same name masking the built-in variable with its magic behavior. In addition to and , Python supports other types of numbers, such as and . Python also has built-in support for complex numbers, and uses the or suffix to indicate the imaginary part (e.g. ). Python can manipulate text (represented by type , so-called “strings”) as well as numbers. This includes characters “ ”, words “ ”, names “ ”, sentences “ ”, etc. “ ”. They can be enclosed in single quotes ( ) or double quotes ( ) with the same result . # digits and numerals enclosed in quotes are also strings To quote a quote, we need to “escape” it, by preceding it with . Alternatively, we can use the other type of quotation marks: # use \\' to escape the single quote... # ...or use double quotes instead In the Python shell, the string definition and output string can look different. The function produces a more readable output, by omitting the enclosing quotes and by printing escaped and special characters: # without print(), special characters are included in the string # with print(), special characters are interpreted, so \n\n produces new line If you don’t want characters prefaced by to be interpreted as special characters, you can use raw strings by adding an before the first quote: # note the r before the quote There is one subtle aspect to raw strings: a raw string may not end in an odd number of characters; see the FAQ entry for more information and workarounds. String literals can span multiple lines. One way is using triple-quotes: or . End-of-line characters are automatically included in the string, but it’s possible to prevent this by adding a at the end of the line. In the following example, the initial newline is not included: Strings can be concatenated (glued together) with the operator, and repeated with : Two or more string literals (i.e. the ones enclosed between quotes) next to each other are automatically concatenated. This feature is particularly useful when you want to break long strings: 'to have them joined together.' 'Put several strings within parentheses to have them joined together.' This only works with two literals though, not with variables or expressions: If you want to concatenate variables or a variable and a literal, use : Strings can be indexed (subscripted), with the first character having index 0. There is no separate character type; a character is simply a string of size one: Indices may also be negative numbers, to start counting from the right: Note that since -0 is the same as 0, negative indices start from -1. In addition to indexing, slicing is also supported. While indexing is used to obtain individual characters, slicing allows you to obtain a substring: Slice indices have useful defaults; an omitted first index defaults to zero, an omitted second index defaults to the size of the string being sliced. # character from the beginning to position 2 (excluded) # characters from position 4 (included) to the end # characters from the second-last (included) to the end Note how the start is always included, and the end always excluded. This makes sure that is always equal to : One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n, for example: The first row of numbers gives the position of the indices 0…6 in the string; the second row gives the corresponding negative indices. The slice from i to j consists of all characters between the edges labeled i and j, respectively. For non-negative indices, the length of a slice is the difference of the indices, if both are within bounds. For example, the length of is 2. Attempting to use an index that is too large will result in an error: # the word only has 6 characters File , line , in : However, out of range slice indexes are handled gracefully when used for slicing: Python strings cannot be changed — they are immutable. Therefore, assigning to an indexed position in the string results in an error: If you need a different string, you should create a new one: The built-in function returns the length of a string: Strings are examples of sequence types, and support the common operations supported by such types. Strings support a large number of methods for basic transformations and searching. The old formatting operations invoked when strings are the left operand of the operator are described in more detail here. Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type. Like strings (and all other built-in sequence types), lists can be indexed and sliced: Unlike strings, which are immutable, lists are a mutable type, i.e. it is possible to change their content: # the cube of 4 is 64, not 65! You can also add new items at the end of the list, by using the method (we will see more about methods later): Simple assignment in Python never copies data. When you assign a list to a variable, the variable refers to the existing list. Any changes you make to the list through one variable will be seen through all other variables that refer to it.: # they reference the same object All slice operations return a new list containing the requested elements. This means that the following slice returns a shallow copy of the list: Assignment to slices is also possible, and this can even change the size of the list or clear it entirely: # clear the list by replacing all the elements with an empty list The built-in function also applies to lists: It is possible to nest lists (create lists containing other lists), for example:\n\nOf course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an initial sub-sequence of the Fibonacci series as follows: # the sum of two elements defines the next This example introduces several new features.\n• None The first line contains a multiple assignment: the variables and simultaneously get the new values 0 and 1. On the last line this is used again, demonstrating that the expressions on the right-hand side are all evaluated first before any of the assignments take place. The right-hand side expressions are evaluated from the left to the right.\n• None The loop executes as long as the condition (here: ) remains true. In Python, like in C, any non-zero integer value is true; zero is false. The condition may also be a string or list value, in fact any sequence; anything with a non-zero length is true, empty sequences are false. The test used in the example is a simple comparison. The standard comparison operators are written the same as in C: (less than), (greater than), (equal to), (less than or equal to), (greater than or equal to) and (not equal to).\n• None The body of the loop is indented: indentation is Python’s way of grouping statements. At the interactive prompt, you have to type a tab or space(s) for each indented line. In practice you will prepare more complicated input for Python with a text editor; all decent text editors have an auto-indent facility. When a compound statement is entered interactively, it must be followed by a blank line to indicate completion (since the parser cannot guess when you have typed the last line). Note that each line within a basic block must be indented by the same amount.\n• None The function writes the value of the argument(s) it is given. It differs from just writing the expression you want to write (as we did earlier in the calculator examples) in the way it handles multiple arguments, floating-point quantities, and strings. Strings are printed without quotes, and a space is inserted between items, so you can format things nicely, like this: The keyword argument end can be used to avoid the newline after the output, or end the output with a different string:"
    },
    {
        "link": "https://geeksforgeeks.org/python-input-function",
        "document": "Python input() function is used to take user input. By default, it returns the user input in form of a string.\n\nRefer to all datatypes and examples from here.\n\nExample 1: Taking Name and Age of the user as input and printing it\n\nBy default, input returns a string. So the name and age will be stored as strings.\n\nExample 2: Taking two integers from users and adding them.\n\nIn this example, we will be looking at how to take integer input from users. To take integer input we will be using int() along with Python input()\n\nSimilarly, we can use float() to take two float numbers. Let’s see one more example of how to take lists as input\n\nExample 3: Taking Two lists as input and appending them\n\nTaking user input as a string and splitting on each character using list() to convert into list of characters.\n\nHow to use the\n\nCan we provide a basic example of using the\n\nHow to store the value entered by the user using the\n\nHow does the\n\nHow can we convert the input received from the\n\nYou can use the function to convert the input to an integer. Here’s an example: If you need to convert to other data types, you can use for floating-point numbers, for boolean values, etc."
    },
    {
        "link": "https://docs.python.org/3/library/decimal.html",
        "document": "The module provides support for fast correctly rounded decimal floating-point arithmetic. It offers several advantages over the datatype:\n• None Decimal “is based on a floating-point model which was designed with people in mind, and necessarily has a paramount guiding principle – computers must provide an arithmetic that works in the same way as the arithmetic that people learn at school.” – excerpt from the decimal arithmetic specification.\n• None Decimal numbers can be represented exactly. In contrast, numbers like and do not have exact representations in binary floating point. End users typically would not expect to display as as it does with binary floating point.\n• None The exactness carries over into arithmetic. In decimal floating point, is exactly equal to zero. In binary floating point, the result is . While near to zero, the differences prevent reliable equality testing and differences can accumulate. For this reason, decimal is preferred in accounting applications which have strict equality invariants.\n• None The decimal module incorporates a notion of significant places so that is . The trailing zero is kept to indicate significance. This is the customary presentation for monetary applications. For multiplication, the “schoolbook” approach uses all the figures in the multiplicands. For instance, gives while gives .\n• None Unlike hardware based binary floating point, the decimal module has a user alterable precision (defaulting to 28 places) which can be as large as needed for a given problem:\n• None Both binary and decimal floating point are implemented in terms of published standards. While the built-in float type exposes only a modest portion of its capabilities, the decimal module exposes all required parts of the standard. When needed, the programmer has full control over rounding and signal handling. This includes an option to enforce exact arithmetic by using exceptions to block any inexact operations.\n• None The decimal module was designed to support “without prejudice, both exact unrounded decimal arithmetic (sometimes called fixed-point arithmetic) and rounded floating-point arithmetic.” – excerpt from the decimal arithmetic specification.\n\nThe module design is centered around three concepts: the decimal number, the context for arithmetic, and signals.\n\nA decimal number is immutable. It has a sign, coefficient digits, and an exponent. To preserve significance, the coefficient digits do not truncate trailing zeros. Decimals also include special values such as , , and . The standard also differentiates from .\n\nThe context for arithmetic is an environment specifying precision, rounding rules, limits on exponents, flags indicating the results of operations, and trap enablers which determine whether signals are treated as exceptions. Rounding options include , , , , , , , and .\n\nSignals are groups of exceptional conditions arising during the course of computation. Depending on the needs of the application, signals may be ignored, considered as informational, or treated as exceptions. The signals in the decimal module are: , , , , , , , and .\n\nFor each signal there is a flag and a trap enabler. When a signal is encountered, its flag is set to one, then, if the trap enabler is set to one, an exception is raised. Flags are sticky, so the user needs to reset them before monitoring a calculation.\n\nThe usual start to using decimals is importing the module, viewing the current context with and, if necessary, setting new values for precision, rounding, or enabled traps: Decimal instances can be constructed from integers, strings, floats, or tuples. Construction from an integer or a float performs an exact conversion of the value of that integer or float. Decimal numbers include special values such as which stands for “Not a number”, positive and negative , and : If the signal is trapped, accidental mixing of decimals and floats in constructors or ordering comparisons raises an exception: The significance of a new Decimal is determined solely by the number of digits input. Context precision and rounding only come into play during arithmetic operations. If the internal limits of the C version are exceeded, constructing a decimal raises : Decimals interact well with much of the rest of Python. Here is a small decimal floating-point flying circus: And some mathematical functions are also available to Decimal: The method rounds a number to a fixed exponent. This method is useful for monetary applications that often round results to a fixed number of places: As shown above, the function accesses the current context and allows the settings to be changed. This approach meets the needs of most applications. For more advanced work, it may be useful to create alternate contexts using the Context() constructor. To make an alternate active, use the function. In accordance with the standard, the module provides two ready to use standard contexts, and . The former is especially useful for debugging because many of the traps are enabled: Contexts also have signal flags for monitoring exceptional conditions encountered during computations. The flags remain set until explicitly cleared, so it is best to clear the flags before each set of monitored computations by using the method. The flags entry shows that the rational approximation to pi was rounded (digits beyond the context precision were thrown away) and that the result is inexact (some of the discarded digits were non-zero). Individual traps are set using the dictionary in the attribute of a context: Most programs adjust the current context only once, at the beginning of the program. And, in many applications, data is converted to with a single cast inside a loop. With context set and decimals created, the bulk of the program manipulates the data no differently than with other Python numeric types.\n\nConstruct a new object based from value. value can be an integer, string, tuple, , or another object. If no value is given, returns . If value is a string, it should conform to the decimal numeric string syntax after leading and trailing whitespace characters, as well as underscores throughout, are removed: Other Unicode decimal digits are also permitted where appears above. These include decimal digits from various other alphabets (for example, Arabic-Indic and Devanāgarī digits) along with the fullwidth digits through . If value is a , it should have three components, a sign ( for positive or for negative), a of digits, and an integer exponent. For example, returns . If value is a , the binary floating-point value is losslessly converted to its exact decimal equivalent. This conversion can often require 53 or more digits of precision. For example, converts to . The context precision does not affect how many digits are stored. That is determined exclusively by the number of digits in value. For example, records all five zeros even if the context precision is only three. The purpose of the context argument is determining what to do if value is a malformed string. If the context traps , an exception is raised; otherwise, the constructor returns a new Decimal with the value of . Changed in version 3.2: The argument to the constructor is now permitted to be a instance. Changed in version 3.3: arguments raise an exception if the trap is set. By default the trap is off. Changed in version 3.6: Underscores are allowed for grouping, as with integral and floating-point literals in code. Decimal floating-point objects share many properties with the other built-in numeric types such as and . All of the usual math operations and special methods apply. Likewise, decimal objects can be copied, pickled, printed, used as dictionary keys, used as set elements, compared, sorted, and coerced to another type (such as or ). There are some small differences between arithmetic on Decimal objects and arithmetic on integers and floats. When the remainder operator is applied to Decimal objects, the sign of the result is the sign of the dividend rather than the sign of the divisor: The integer division operator behaves analogously, returning the integer part of the true quotient (truncating towards zero) rather than its floor, so as to preserve the usual identity : The and operators implement the and operations (respectively) as described in the specification. Decimal objects cannot generally be combined with floats or instances of in arithmetic operations: an attempt to add a to a , for example, will raise a . However, it is possible to use Python’s comparison operators to compare a instance with another number . This avoids confusing results when doing equality comparisons between numbers of different types. Changed in version 3.2: Mixed-type comparisons between instances and other numeric types are now fully supported. In addition to the standard numeric properties, decimal floating-point objects also have a number of specialized methods: Return the adjusted exponent after shifting out the coefficient’s rightmost digits until only the lead digit remains: returns seven. Used for determining the position of the most significant digit with respect to the decimal point. Return a pair of integers that represent the given instance as a fraction, in lowest terms and with a positive denominator: The conversion is exact. Raise OverflowError on infinities and ValueError on NaNs. Return the canonical encoding of the argument. Currently, the encoding of a instance is always canonical, so this operation returns its argument unchanged. Compare the values of two Decimal instances. returns a Decimal instance, and if either operand is a NaN then the result is a NaN: This operation is identical to the method, except that all NaNs signal. That is, if neither operand is a signaling NaN then any quiet NaN operand is treated as though it were a signaling NaN. Compare two operands using their abstract representation rather than their numerical value. Similar to the method, but the result gives a total ordering on instances. Two instances with the same numeric value but different representations compare unequal in this ordering: Quiet and signaling NaNs are also included in the total ordering. The result of this function is if both operands have the same representation, if the first operand is lower in the total order than the second, and if the first operand is higher in the total order than the second operand. See the specification for details of the total order. This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. Compare two operands using their abstract representation rather than their value as in , but ignoring the sign of each operand. is equivalent to . This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. Just returns self, this method is only to comply with the Decimal Specification. Return the absolute value of the argument. This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed. Return the negation of the argument. This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed. Return a copy of the first operand with the sign set to be the same as the sign of the second operand. For example: This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. Return the value of the (natural) exponential function at the given number. The result is correctly rounded using the rounding mode. Alternative constructor that only accepts instances of or . Note is not the same as . Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is . That equivalent value in decimal is . From Python 3.2 onwards, a instance can also be constructed directly from a . Fused multiply-add. Return self*other+third with no rounding of the intermediate product self*other. Return if the argument is canonical and otherwise. Currently, a instance is always canonical, so this operation always returns . Return if the argument is a finite number, and if the argument is an infinity or a NaN. Return if the argument is either positive or negative infinity and otherwise. Return if the argument is a (quiet or signaling) NaN and otherwise. Return if the argument is a normal finite number. Return if the argument is zero, subnormal, infinite or a NaN. Return if the argument is a quiet NaN, and otherwise. Return if the argument has a negative sign and otherwise. Note that zeros and NaNs can both carry signs. Return if the argument is a signaling NaN and otherwise. Return if the argument is subnormal, and otherwise. Return if the argument is a (positive or negative) zero and otherwise. Return the natural (base e) logarithm of the operand. The result is correctly rounded using the rounding mode. Return the base ten logarithm of the operand. The result is correctly rounded using the rounding mode. For a nonzero number, return the adjusted exponent of its operand as a instance. If the operand is a zero then is returned and the flag is raised. If the operand is an infinity then is returned. is a logical operation which takes two logical operands (see Logical operands). The result is the digit-wise of the two operands. is a logical operation. The result is the digit-wise inversion of the operand. is a logical operation which takes two logical operands (see Logical operands). The result is the digit-wise of the two operands. is a logical operation which takes two logical operands (see Logical operands). The result is the digit-wise exclusive or of the two operands. Like except that the context rounding rule is applied before returning and that values are either signaled or ignored (depending on the context and whether they are signaling or quiet). Similar to the method, but the comparison is done using the absolute values of the operands. Like except that the context rounding rule is applied before returning and that values are either signaled or ignored (depending on the context and whether they are signaling or quiet). Similar to the method, but the comparison is done using the absolute values of the operands. Return the largest number representable in the given context (or in the current thread’s context if no context is given) that is smaller than the given operand. Return the smallest number representable in the given context (or in the current thread’s context if no context is given) that is larger than the given operand. If the two operands are unequal, return the number closest to the first operand in the direction of the second operand. If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand. Used for producing canonical values of an equivalence class within either the current context or the specified context. This has the same semantics as the unary plus operation, except that if the final result is finite it is reduced to its simplest form, with all trailing zeros removed and its sign preserved. That is, while the coefficient is non-zero and a multiple of ten the coefficient is divided by ten and the exponent is incremented by 1. Otherwise (the coefficient is zero) the exponent is set to 0. In all cases the sign is unchanged. For example, and both normalize to the equivalent value . Note that rounding is applied before reducing to simplest form. In the latest versions of the specification, this operation is also known as . Return a string describing the class of the operand. The returned value is one of the following ten strings.\n• None , indicating that the operand is negative infinity.\n• None , indicating that the operand is a negative normal number.\n• None , indicating that the operand is negative and subnormal.\n• None , indicating that the operand is a negative zero.\n• None , indicating that the operand is a positive zero.\n• None , indicating that the operand is positive and subnormal.\n• None , indicating that the operand is a positive normal number.\n• None , indicating that the operand is positive infinity.\n• None , indicating that the operand is a quiet NaN (Not a Number).\n• None , indicating that the operand is a signaling NaN. Return a value equal to the first operand after rounding and having the exponent of the second operand. Unlike other operations, if the length of the coefficient after the quantize operation would be greater than precision, then an is signaled. This guarantees that, unless there is an error condition, the quantized exponent is always equal to that of the right-hand operand. Also unlike other operations, quantize never signals Underflow, even if the result is subnormal and inexact. If the exponent of the second operand is larger than that of the first then rounding may be necessary. In this case, the rounding mode is determined by the argument if given, else by the given argument; if neither argument is given the rounding mode of the current thread’s context is used. An error is returned whenever the resulting exponent is greater than or less than . Return , the radix (base) in which the class does all its arithmetic. Included for compatibility with the specification. Return the remainder from dividing self by other. This differs from in that the sign of the remainder is chosen so as to minimize its absolute value. More precisely, the return value is where is the integer nearest to the exact value of , and if two integers are equally near then the even one is chosen. If the result is zero then its sign will be the sign of self. Return the result of rotating the digits of the first operand by an amount specified by the second operand. The second operand must be an integer in the range -precision through precision. The absolute value of the second operand gives the number of places to rotate. If the second operand is positive then rotation is to the left; otherwise rotation is to the right. The coefficient of the first operand is padded on the left with zeros to length precision if necessary. The sign and exponent of the first operand are unchanged. Test whether self and other have the same exponent or whether both are . This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. Return the first operand with exponent adjusted by the second. Equivalently, return the first operand multiplied by . The second operand must be an integer. Return the result of shifting the digits of the first operand by an amount specified by the second operand. The second operand must be an integer in the range -precision through precision. The absolute value of the second operand gives the number of places to shift. If the second operand is positive then the shift is to the left; otherwise the shift is to the right. Digits shifted into the coefficient are zeros. The sign and exponent of the first operand are unchanged. Return the square root of the argument to full precision. Convert to a string, using engineering notation if an exponent is needed. Engineering notation has an exponent which is a multiple of 3. This can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros. For example, this converts to . Identical to the method. The name has been kept for compatibility with older versions. Round to the nearest integer, signaling or as appropriate if rounding occurs. The rounding mode is determined by the parameter if given, else by the given . If neither parameter is given then the rounding mode of the current context is used. Round to the nearest integer without signaling or . If given, applies rounding; otherwise, uses the rounding method in either the supplied context or the current context. Decimal numbers can be rounded using the function: If ndigits is not given or , returns the nearest to number, rounding ties to even, and ignoring the rounding mode of the context. Raises if number is an infinity or if it is a (quiet or signaling) NaN. If ndigits is an , the context’s rounding mode is respected and a representing number rounded to the nearest multiple of is returned; in this case, is equivalent to . Returns if number is a quiet NaN. Raises if number is an infinity, a signaling NaN, or if the length of the coefficient after the quantize operation would be greater than the current context’s precision. In other words, for the non-corner cases:\n• None if ndigits is positive, return number rounded to ndigits decimal places;\n• None if ndigits is zero, return number rounded to the nearest integer;\n• None if ndigits is negative, return number rounded to the nearest multiple of . The , , , and methods expect their arguments to be logical operands. A logical operand is a instance whose exponent and sign are both zero, and whose digits are all either or .\n\nContexts are environments for arithmetic operations. They govern precision, set rules for rounding, determine which signals are treated as exceptions, and limit the range for exponents. Each thread has its own current context which is accessed or changed using the and functions: Return the current context for the active thread. Set the current context for the active thread to c. You can also use the statement and the function to temporarily change the active context. Return a context manager that will set the current context for the active thread to a copy of ctx on entry to the with-statement and restore the previous context when exiting the with-statement. If no context is specified, a copy of the current context is used. The kwargs argument is used to set the attributes of the new context. For example, the following code sets the current decimal precision to 42 places, performs a calculation, and then automatically restores the previous context: # Round the final result back to the default precision Using keyword arguments, the code would be the following: Raises if kwargs supplies an attribute that doesn’t support. Raises either or if kwargs supplies an invalid value for an attribute. Changed in version 3.11: now supports setting context attributes through the use of keyword arguments. New contexts can also be created using the constructor described below. In addition, the module provides three pre-made contexts: This is a standard context defined by the General Decimal Arithmetic Specification. Precision is set to nine. Rounding is set to . All flags are cleared. All traps are enabled (treated as exceptions) except , , and . Because many of the traps are enabled, this context is useful for debugging. This is a standard context defined by the General Decimal Arithmetic Specification. Precision is set to nine. Rounding is set to . All flags are cleared. No traps are enabled (so that exceptions are not raised during computations). Because the traps are disabled, this context is useful for applications that prefer to have result value of or instead of raising exceptions. This allows an application to complete a run in the presence of conditions that would otherwise halt the program. This context is used by the constructor as a prototype for new contexts. Changing a field (such a precision) has the effect of changing the default for new contexts created by the constructor. This context is most useful in multi-threaded environments. Changing one of the fields before threads are started has the effect of setting system-wide defaults. Changing the fields after threads have started is not recommended as it would require thread synchronization to prevent race conditions. In single threaded environments, it is preferable to not use this context at all. Instead, simply create contexts explicitly as described below. The default values are = , = , and enabled traps for , , and . In addition to the three supplied contexts, new contexts can be created with the constructor. Creates a new context. If a field is not specified or is , the default values are copied from the . If the flags field is not specified or is , all flags are cleared. prec is an integer in the range [ , ] that sets the precision for arithmetic operations in the context. The rounding option is one of the constants listed in the section Rounding Modes. The traps and flags fields list any signals to be set. Generally, new contexts should only set traps and leave the flags clear. The Emin and Emax fields are integers specifying the outer limits allowable for exponents. Emin must be in the range [ , ], Emax in the range [ , ]. The capitals field is either or (the default). If set to , exponents are printed with a capital ; otherwise, a lowercase is used: . The clamp field is either (the default) or . If set to , the exponent of a instance representable in this context is strictly limited to the range . If clamp is then a weaker condition holds: the adjusted exponent of the instance is at most . When clamp is , a large normal number will, where possible, have its exponent reduced and a corresponding number of zeros added to its coefficient, in order to fit the exponent constraints; this preserves the value of the number but loses information about significant trailing zeros. For example: A clamp value of allows compatibility with the fixed-width decimal interchange formats specified in IEEE 754. The class defines several general purpose methods as well as a large number of methods for doing arithmetic directly in a given context. In addition, for each of the methods described above (with the exception of the and methods) there is a corresponding method. For example, for a instance and instance , is equivalent to . Each method accepts a Python integer (an instance of ) anywhere that a Decimal instance is accepted. Resets all of the flags to . Resets all of the traps to . Creates a new Decimal instance from num but using self as context. Unlike the constructor, the context precision, rounding method, flags, and traps are applied to the conversion. This is useful because constants are often given to a greater precision than is needed by the application. Another benefit is that rounding immediately eliminates unintended effects from digits beyond the current precision. In the following example, using unrounded inputs means that adding zero to a sum can change the result: This method implements the to-number operation of the IBM specification. If the argument is a string, no leading or trailing whitespace or underscores are permitted. Creates a new Decimal instance from a float f but rounding using self as the context. Unlike the class method, the context precision, rounding method, flags, and traps are applied to the conversion. Returns a value equal to which is the minimum exponent value for subnormal results. When underflow occurs, the exponent is set to . The usual approach to working with decimals is to create instances and then apply arithmetic operations which take place within the current context for the active thread. An alternative approach is to use context methods for calculating within a specific context. The methods are similar to those for the class and are only briefly recounted here. Returns the absolute value of x. Return the sum of x and y. Compares the values of the two operands numerically. Compares two operands using their abstract representation. Compares two operands using their abstract representation, ignoring sign. Returns a copy of x with the sign set to 0. Returns a copy of x with the sign inverted. Copies the sign from y to x. Return x divided by y, truncated to an integer. Divides two numbers and returns the integer part of the result. Returns if x is canonical; otherwise returns . Returns if x is finite; otherwise returns . Returns if x is infinite; otherwise returns . Returns if x is a qNaN or sNaN; otherwise returns . Returns if x is a normal number; otherwise returns . Returns if x is a quiet NaN; otherwise returns . Returns if x is negative; otherwise returns . Returns if x is a signaling NaN; otherwise returns . Returns if x is subnormal; otherwise returns . Returns if x is a zero; otherwise returns . Returns the exponent of the magnitude of the operand’s MSD. Applies the logical operation and between each operand’s digits. Invert all the digits in x. Applies the logical operation or between each operand’s digits. Applies the logical operation xor between each operand’s digits. Compares two values numerically and returns the maximum. Compares the values numerically with their sign ignored. Compares two values numerically and returns the minimum. Compares the values numerically with their sign ignored. Minus corresponds to the unary prefix minus operator in Python. Return the product of x and y. Returns the number closest to x, in direction towards y. Returns an indication of the class of x. Plus corresponds to the unary prefix plus operator in Python. This operation applies the context precision and rounding, so it is not an identity operation. Return to the power of , reduced modulo if given. With two arguments, compute . If is negative then must be integral. The result will be inexact unless is integral and the result is finite and can be expressed exactly in ‘precision’ digits. The rounding mode of the context is used. Results are always correctly rounded in the Python version. results in , and if is not trapped, then results in . Changed in version 3.3: The C module computes in terms of the correctly rounded and functions. The result is well-defined but only “almost always correctly rounded”. With three arguments, compute . For the three argument form, the following restrictions on the arguments hold:\n• None all three arguments must be integral\n• None at least one of or must be nonzero\n• None must be nonzero and have at most ‘precision’ digits The value resulting from is equal to the value that would be obtained by computing with unbounded precision, but is computed more efficiently. The exponent of the result is zero, regardless of the exponents of , and . The result is always exact. Returns a value equal to x (rounded), having the exponent of y. Just returns 10, as this is Decimal, :) The sign of the result, if non-zero, is the same as that of the original dividend. Returns , where n is the integer nearest the exact value of (if the result is 0 then its sign will be the sign of x). Returns if the two operands have the same exponent. Returns the first operand after adding the second value its exp. Return the difference between x and y. Convert to a string, using engineering notation if an exponent is needed. Engineering notation has an exponent which is a multiple of 3. This can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros.\n\nThe use of decimal floating point eliminates decimal representation error (making it possible to represent exactly); however, some operations can still incur round-off error when non-zero digits exceed the fixed precision. The effects of round-off error can be amplified by the addition or subtraction of nearly offsetting quantities resulting in loss of significance. Knuth provides two instructive examples where rounded floating-point arithmetic with insufficient precision causes the breakdown of the associative and distributive properties of addition: The module makes it possible to restore the identities by expanding the precision sufficiently to avoid loss of significance: The number system for the module provides special values including , , , , and two zeros, and . Infinities can be constructed directly with: . Also, they can arise from dividing by zero when the signal is not trapped. Likewise, when the signal is not trapped, infinity can result from rounding beyond the limits of the largest representable number. The infinities are signed (affine) and can be used in arithmetic operations where they get treated as very large, indeterminate numbers. For instance, adding a constant to infinity gives another infinite result. Some operations are indeterminate and return , or if the signal is trapped, raise an exception. For example, returns which means “not a number”. This variety of is quiet and, once created, will flow through other computations always resulting in another . This behavior can be useful for a series of computations that occasionally have missing inputs — it allows the calculation to proceed while flagging specific results as invalid. A variant is which signals rather than remaining quiet after every operation. This is a useful return value when an invalid result needs to interrupt a calculation for special handling. The behavior of Python’s comparison operators can be a little surprising where a is involved. A test for equality where one of the operands is a quiet or signaling always returns (even when doing ), while a test for inequality always returns . An attempt to compare two Decimals using any of the , , or operators will raise the signal if either operand is a , and return if this signal is not trapped. Note that the General Decimal Arithmetic specification does not specify the behavior of direct comparisons; these rules for comparisons involving a were taken from the IEEE 854 standard (see Table 3 in section 5.7). To ensure strict standards-compliance, use the and methods instead. The signed zeros can result from calculations that underflow. They keep the sign that would have resulted if the calculation had been carried out to greater precision. Since their magnitude is zero, both positive and negative zeros are treated as equal and their sign is informational. In addition to the two signed zeros which are distinct yet equal, there are various representations of zero with differing precisions yet equivalent in value. This takes a bit of getting used to. For an eye accustomed to normalized floating-point representations, it is not immediately obvious that the following calculation returns a value equal to zero:\n\nQ. It is cumbersome to type . Is there a way to minimize typing when using the interactive interpreter? A. Some users abbreviate the constructor to just a single letter: Q. In a fixed-point application with two decimal places, some inputs have many places and need to be rounded. Others are not supposed to have excess digits and need to be validated. What methods should be used? A. The method rounds to a fixed number of decimal places. If the trap is set, it is also useful for validation: # Validate that a number does not exceed two places Q. Once I have valid two place inputs, how do I maintain that invariant throughout an application? A. Some operations like addition, subtraction, and multiplication by an integer will automatically preserve fixed point. Others operations, like division and non-integer multiplication, will change the number of decimal places and need to be followed-up with a step: In developing fixed-point applications, it is convenient to define functions to handle the step: Q. There are many ways to express the same value. The numbers , , , and all have the same value at various precisions. Is there a way to transform them to a single recognizable canonical value? A. The method maps all equivalent values to a single representative: Q. When does rounding occur in a computation? A. It occurs after the computation. The philosophy of the decimal specification is that numbers are considered exact and are created independent of the current context. They can even have greater precision than current context. Computations process with those exact inputs and then rounding (or other context operations) is applied to the result of the computation: Q. Some decimal values always print with exponential notation. Is there a way to get a non-exponential representation? A. For some values, exponential notation is the only way to express the number of significant places in the coefficient. For example, expressing as keeps the value constant but cannot show the original’s two-place significance. If an application does not care about tracking significance, it is easy to remove the exponent and trailing zeroes, losing significance, but keeping the value unchanged: Q. Is there a way to convert a regular float to a ? A. Yes, any binary floating-point number can be exactly expressed as a Decimal though an exact conversion may take more precision than intuition would suggest: Q. Within a complex calculation, how can I make sure that I haven’t gotten a spurious result because of insufficient precision or rounding anomalies. A. The decimal module makes it easy to test results. A best practice is to re-run calculations using greater precision and with various rounding modes. Widely differing results indicate insufficient precision, rounding mode issues, ill-conditioned inputs, or a numerically unstable algorithm. Q. I noticed that context precision is applied to the results of operations but not to the inputs. Is there anything to watch out for when mixing values of different precisions? A. Yes. The principle is that all values are considered to be exact and so is the arithmetic on those values. Only the results are rounded. The advantage for inputs is that “what you type is what you get”. A disadvantage is that the results can look odd if you forget that the inputs haven’t been rounded: The solution is either to increase precision or to force rounding of inputs using the unary plus operation: Alternatively, inputs can be rounded upon creation using the method: Q. Is the CPython implementation fast for large numbers? A. Yes. In the CPython and PyPy3 implementations, the C/CFFI versions of the decimal module integrate the high speed libmpdec library for arbitrary precision correctly rounded decimal floating-point arithmetic . uses Karatsuba multiplication for medium-sized numbers and the Number Theoretic Transform for very large numbers. The context must be adapted for exact arbitrary precision arithmetic. and should always be set to the maximum values, should always be 0 (the default). Setting requires some care. The easiest approach for trying out bignum arithmetic is to use the maximum value for as well : For inexact results, is far too large on 64-bit platforms and the available memory will be insufficient: On systems with overallocation (e.g. Linux), a more sophisticated approach is to adjust to the amount of available RAM. Suppose that you have 8GB of RAM and expect 10 simultaneous operands using a maximum of 500MB each: # Maximum number of digits for a single operand using 500MB in 8-byte words # with 19 digits per word (4-byte and 9 digits for the 32-bit build): # Fill the available precision with nines: File , line , in : In general (and especially on systems without overallocation), it is recommended to estimate even tighter bounds and set the trap if all calculations are expected to be exact."
    }
]