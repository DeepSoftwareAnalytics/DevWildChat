[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.worksheet.beforedoubleclick",
        "document": "Occurs when a worksheet is double-clicked, before the default double-click action.\n\nThe DoubleClick method doesn't cause this event to occur.\n\nThis event doesn't occur when the user double-clicks the border of a cell.\n\nThis example changes the fill color of cells around the target cell when the worksheet cell is double-clicked.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://excel-easy.com/vba/examples/beforedoubleclick-event.html",
        "document": "Code added to the Worksheet BeforeDoubleClick Event will be executed by Excel VBA when you double click a cell on a worksheet.\n\n2. Double click on a sheet (for example Sheet1) in the Project Explorer.\n\n3. Choose Worksheet from the left drop-down list. Choose BeforeDoubleClick from the right drop-down list.\n\nNote: the '_' symbol is used to continue the statement on a new line (in order to show you the complete code).\n\nAdd the following code lines to the Worksheet BeforeDoubleClick Event:\n\n4. The code line below colors the active cell red.\n\n5. Set the Cancel argument to true if you don't want the default double click action (cell edit mode) to occur.\n\n6. Test the program by double clicking a cell on Sheet1."
    },
    {
        "link": "https://formulashq.com/beforedoubleclick-event-in-excel-vba-2",
        "document": "Code added to the Worksheet BeforeDoubleClick Event will be executed by Excel VBA when you double click a cell on a worksheet.\n\n2. Double click on a sheet (for example Sheet1) in the Project Explorer.\n\n3. Choose Worksheet from the left drop-down list. Choose BeforeDoubleClick from the right drop-down list.\n\nNote: the ‘_’ symbol is used to continue the statement on a new line (in order to show you the complete code).\n\nAdd the following code lines to the Worksheet BeforeDoubleClick Event:\n\n4. The code line below colors the active cell red.\n\n5. Set the Cancel argument to true if you don’t want the default double click action (cell edit mode) to occur.\n\n6. Test the program by double clicking a cell on Sheet1."
    },
    {
        "link": "https://mrexcel.com/board/threads/vba-worksheet_beforedoubleclick.313813",
        "document": "HI All,\n\n \n\n Can any one help me out understand how this event operates. I am looking to have a macro That kicks in when cells within a certain column are double clicked. Basically I am looking to expand or collapse a grouping I have on the adjacent two columns to right.\n\n \n\n My Initial question is will this macro kick in once the user has doubleclicked on a range or before? Also is it possible to assign a macro like this to a set column as aposed to an entire worksheet and have multiple macro's to expand/collapse multiple groupings individually?"
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.workbook.sheetbeforedoubleclick",
        "document": "Occurs when any worksheet is double-clicked, before the default double-click action.\n\nThis example disables the default double-click action.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/msgbox-function",
        "document": "Displays a message in a dialog box, waits for the user to click a button, and returns an Integer indicating which button the user clicked.\n\nThe MsgBox function syntax has these named arguments:\n\nThe first group of values (0-5) describes the number and type of buttons displayed in the dialog box; the second group (16, 32, 48, 64) describes the icon style; the third group (0, 256, 512) determines which button is the default; and the fourth group (0, 4096) determines the modality of the message box. When combining numbers to create a final value for the buttons argument, use only one number from each group.\n\nThe return values are defined in the VbMsgBoxResult enumeration.\n\nWhen both helpfile and context are provided, the user can press F1 (Windows) or HELP (Macintosh) to view the Help topic corresponding to the context. Some host applications, for example, Microsoft Excel, also automatically add a Help button to the dialog box.\n\nIf the dialog box displays a Cancel button, pressing the ESC key has the same effect as clicking Cancel. If the dialog box contains a Help button, context-sensitive Help is provided for the dialog box. However, no value is returned until one of the other buttons is clicked.\n\nThis example uses the MsgBox function to display a critical-error message in a dialog box with Yes and No buttons. The No button is specified as the default response. The value returned by the MsgBox function depends on the button chosen by the user. This example assumes that is a Help file that contains a topic with a Help context number equal to .\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://excelmacromastery.com/vba-msgbox",
        "document": "The VBA MsgBox function is used to display messages to the user in the form of a message box.\n\nWe can configure the message box to provide the user with a number of different buttons such as Yes, No, Ok, Retry, Abort, Ignore and Cancel. The MsgBox function will then return the button that was clicked.\n\nIn most cases, you will use MsgBox to simply display a message or to ask the user to click Yes/No or Ok/Cancel. The following code shows how to display a simple message box:\n\nThe parameters of the message box are as follows:\n\nprompt – This is the message text that will be displayed.\n\nbuttons[optional] – This parameter does many things including setting the buttons, icons, select button, modal type etc. If this parameter is not used a message box with the Ok button and no icon is displayed. See the next section for more about this parameter.\n\ntitle[optional] – this is the title that will appear at the top of the message box. The default is “Microsoft Excel”.\n\nhelpfile, context[optional] – These parameters are used to reference a help file and location of specific help text. It is very unlikely you use this unless you are creating an application for a third party and help files are a requirement.\n\nThe following are all the return values for the MsgBox function:\n\nEach of these values represents a button that was clicked.\n\nWe can use the message box to get a simple response from the user. For example, we can ask the user a question and they can respond by clicking on the Yes or No button. The return value from the MsgBox function tells us which button was clicked.\n\nIf we want to get a Yes/No response from the user we can do it with the following code:\n\nNote: When we return a value from the message box we must use parenthesis around the parameters or we will get the “Expected end of statement” error.\n\nWe can also use a variable to store the response from the MsgBox. We would normally do this if we want to use the response more than once. For example, if there were three buttons:\n\nThe button parameter of MsgBox allows us to configure the message box in many ways. The table below shows the different options:\n\nThese constants work as follows:\n• The constants in group 1 are used to select the buttons.\n• The constants in group 2 are used to select icons.\n• The constants in group 3 are used to select which button is highlighted when the message box appears.\n• The constants in group 4 are used to set the modal type of the message box.\n• The constants in group 5 are used for various settings.\n\nWhen we use MsgBox, we can combine items from each group by using the plus sign. For example:\n\nThis displays the message box with the Ok and Cancel button, the critical message icon, with the Ok button highlighted and the message box will display only when Excel is the active application.\n\nThis displays the message box with the Yes and No button, the warning query icon, with the No button highlighted and the message box will display in front of all applications.\n\nImportant: Each time we use the MsgBox function we can only select one of each:\n\nIn other words, we can only select one item from each of the first 4 groups.\n\nThe next section shows some more examples of using the message box.\n\nThe following examples show to display the various icons with the Yes and No buttons:\n\nThe following examples show the Abort/Retry/Ignore button plus the help button with different buttons selected:\n\nThe following examples show some button selections and the title parameter being set:\n\nFree VBA Tutorial If you are new to VBA or you want to sharpen your existing VBA skills then why not try out the The Ultimate VBA Tutorial.\n\nRelated Training: Get full access to the Excel VBA training webinars and all the tutorials."
    },
    {
        "link": "https://stackoverflow.com/questions/35013462/message-box-referring-to-cell-contents",
        "document": "I cant get the syntax right for a msgbox. I want the box to say:\n\nYou have indicated that\" \"employee name\" (a range reference to a cell the worksheet) has worked for \"hours\" (a range reference to a cell the worksheet) doing \"job\" (a range reference to a cell the worksheet)\n\nThis is what I have (shortened slightly):\n\nI am assuming, of course, that this is possible."
    },
    {
        "link": "https://wiseowl.co.uk/vba-macros/guides/messages-variables/msgbox-vba",
        "document": "Whether you're writing Visual Basic for Applications code in Excel, Access, PowerPoint, Word or any other application, you can use the MsgBox command to display a pop-up message on screen.\n\nMessage boxes thus displayed can be simple:\n\nThe component parts of a message box are shown below:\n\nThe parts of a message box shown above are as follows:\n\nThe easiest way to see how to create a message box is from the Intellisense offered:\n\nThe peculiar argument is Buttons, about which more later in this tutorial. You can display a message box either by listing the arguments in the right order, or by using named arguments - an example of each follows.\n\nThe easiest way to display a message box is by entering the arguments in the right order:\n\nIn this case, the arguments are assumed to be in the right order, so we have:\n\nif you have the energy, it's better practice to use named arguments:\n\nThis has the advantage of being easier to read - and you can put the arguments in any order.\n\nOften you will want to create a message to be displayed on screen by joining bits of text together. You can do this using the & symbol (which is pronounced Ampersand).\n\nThe following example uses two simple input boxes (covered in a separate tutorial) to ask a user what their name and preference is, then redisplays the choices made in a message box:\n\nHere's what you see if you choose Bob and Sheep in reply to the two questions:\n\nThe following code displays a list of all of the worksheet names in the active workbook.\n\nHere's what you might get if you ran this macro:\n\nNow that we've learnt how to display plain messages, let's see if we can tart them up a bit! You can add a few bells and whistles to a message box - but only a few.\n\nYou can display 4 different symbols:\n\nSo, for example, this would display a message box with an exclamation mark symbol and an OK button (bizarrely, you add your choices together):\n\nIn addition to the symbols above, you can control which buttons you see as follows:\n\nTo understand why you would display different combinations of buttons, see the following part of this tutorial on askign questions using message boxes.\n\nEverything in this tutorial so far has concentrated on displaying a message on screen (we haven't been interested in the button the user chooses). But how about this?\n\nIn this case we use MsgBox as a function, not a command. So instead of:\n\nWe have instead:\n\nThe Code to Use MsgBox as a Function\n\nHere is a typical routine to get a message box to appear as a question:\n\nThe combination of symbols and buttons we choose is as follows:\n\nAnd that is the full story on the MsgBox command-cum-function!"
    },
    {
        "link": "https://stackoverflow.com/questions/49864314/create-a-vba-message-box-based-on-cell-value",
        "document": "So, this should be fairly easy to implement, but I am unable to get the message box to display.\n\nContext - this is for an estimation tool - if the user enters a value for a particular cell that is less than a minimum threshold, I want to bring up a message box to let them know that's not a valid entry.\n\nThe cell I am referring to is named (let's just say ). Its location is on the tab (1 of 4 tabs in the workbook) is row 47, column 17.\n\nHere is the code I have tried so far:\n\nI have set this up in the VBA module that corresponds to the UI tab, so I shouldn't have to reference the sheet. Any idea why the message box isn't displaying? Is it possible to automatically display a message box based on a cell value?"
    }
]