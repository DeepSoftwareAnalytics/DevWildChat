[
    {
        "link": "https://p5js.org/reference/p5/loadImage",
        "document": "interprets the first parameter one of three ways. If the path to an image file is provided, will load it. Paths to local files should be relative, such as . URLs such as may be blocked due to browser security. Raw image data can also be passed as a base64 encoded image in the form .\n\nThe second parameter is optional. If a function is passed, it will be called once the image has loaded. The callback function can optionally use the new p5.Image object.\n\nThe third parameter is also optional. If a function is passed, it will be called if the image fails to load. The callback function can optionally use the event error.\n\nImages can take time to load. Calling in preload() ensures images load before they're used in setup() or draw()."
    },
    {
        "link": "https://geeksforgeeks.org/p5-js-loadimage-function",
        "document": ""
    },
    {
        "link": "https://p5js.org/reference",
        "document": ""
    },
    {
        "link": "https://archive.p5js.org/learn/program-flow.html",
        "document": "This tutorial outlines some various techniques for controlling the sequence and timing of events in your code, which is known as program flow.\n\nWe can use conditional statements to control the program flow. Conditional statements perform different actions based on tests for different conditions. JavaScript has the following conditional statements:\n• Use if to specify a block of code to be executed, if a specified condition is true\n• Use else to specify a block of code to be executed, if the same condition is false\n• Use else if to specify a new condition to test, if the first condition is false\n\nIn the following example, change the value for variable i to change the color of the rectangle. If i equals to 0, the condition for the if statement is satisfied, and the filling color is red. In this case, the program continues to draw the rectangle skipping the else if and else statements. If i equals to 1, the condition for the if statement is not satisfied, and the program moves on to check the condition for the else if statement. Since else if condition is satisfied, the filling color is green. If neither the if nor the else if conditions are satisfied, the program runs the else statement, and the filling color is blue.\n\nLoops can execute a block of code repeatedly. p5 supports several different kinds of loops in JavaScript:\n• for - loops through a block of code a specified number of times\n• for/in - loops through the properties of an object\n• while - loops through a block of code while a specified condition is true\n• do/while - also loops through a block of code while a specified condition is true\n\nThe for loop sets up a variable (usually i or x) that is then incrementally changed for each loop. It has the following structure:\n• Statement 1 is executed (one time) before the execution of the code block. It sets the starting value for the variable\n• Statement 2 defines the condition that must be true for the code block to be executed.\n• Statement 3 is executed every time after the code block has finished running if statement 2 evaluated to be true.\n\nIn this example, variable i is initially set to 0. Every time the for loop runs, i is displayed on the screen and 1 is added to i. Note the for loop will only run until i equals to 4 because after this the condition that i be less than 5 will be false.\n\nThe for/in statement loops through the properties of an object:\n\nIn this example, as the for loop cycles through each property of the person object, the property value is added to myText string.\n\nThe while loop cycles through a block of code as long as its specified condition is true.\n\nThis example gives the same result as the for loop example above. Sometimes while loops and for loops can be used interchangeably.\n\nThe do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, it will then repeat the loop as long as the condition is true.\n\nThe draw() function in p5 runs as a loop. The code inside the draw() function runs continuously from top to bottom until the program is stopped. The draw() loop may be stopped by calling noLoop(), and can then be resumed with loop(). If using noLoop() in setup(), it should be the last line inside the block.\n\nIn this example, noLoop() is called in setup(), so the code within draw() will only run once at the start of the program. Since loop() is placed in mousePressed(), the draw() block will resume looping when mouse is pressed. When mouse is released, noLoop() is called again and hence the draw() loop stops.\n\nThe function redraw() executes the code within draw() one time. This functions allows the program to update the display window only when necessary, such as when an event registered by mousePressed() or keyPressed() occurs. In structuring a program, it only makes sense to call redraw() within events such as mousePressed() outside of the draw() loop. The redraw() function does not work properly when called inside draw(). In addition, you can set the number of loops through draw by adding a single argument (an integer) to the redraw() function.\n\nThis example is similar to the previous one, where noLoop() is called in setup() and the code within draw() will only run once at the start of the program. However, when mouse is pressed, redraw() is called and draw() will only loop once. To make smooth animations, it is easier to work with noLoop() and loop().\n\nIn JavaScript, events may occur concurrently with the main program flow. This is considered as asynchronicity in programming. In p5, for example, when we use loadImage() in setup(), the browser begins the process of loading the image but skip onto the next line before it is finised loading. The following example demonstrates such asynchronicity.\n\nWhen you run this program, you'll notice that the drawing canvas is grey with no image displayed. This is because loadImage() begins to load the image, but does not have time to finish this task before the program continues on through the rest of setup() and on to draw(). Even with the noLoop() function that stops p5.js from continuously executing the code within draw(). The image() function is unable to display the image as it is not properly loaded.\n\nTo help with this issue of asynchronicity, p5.js has the preload() function. Unlike setup(), preload() forces the program to wait until everything has loaded before moving on. It is best to only make load calls in preload(), and do all other setup in setup().\n\npreload() ensures that the image has been loaded before running the other code.\n\nAn alternative to preload() is to use a callback function. A callback function is a function that is passed as an argument to a second function, and that runs after the second function has completed. The following example illustrates this technique.\n\nIn this example, the second argument in loadImage() is the function we want to run after the load is complete. Once the image has loaded, this callback function, drawImage(), is automatically called. It has one argument which contains the image that was just loaded. There is no need to create a global variable to hold the image. The image is passed directly into the callback function, as the parameter name chosen in the function definition.\n\nThe JSON (JavaScript Object Notation) format is a common system for storing data. Like HTML and XML formats, the elements have labels associated with them. One way to load JSON file is to use loadJSON() function in preload().\n\nThe following request at https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_hour.geojson returns data of recent earthquakes in the world from USGS.\n\nAlternatively, loadJSON() can also take a callback. To use data from an API, you may need a callback function as, like with an image, the data takes time to load. API (Application Programming Interface) requests are commands that request data from a service. A lot of APIs will return data in JSON format. Some need you to authenticate with the API to use it (e.g. register as a developer and get keys). You can’t always use preload() when getting data from APIs because the data might change while you sketch is running and you will want your program to respond accordingly.\n\nloadJSON() can be used in a few ways:\n• path - String: name of the file or url to load\n• callback - Function: function to be executed after loadJSON() completes, data is passed in as first argument\n• errorCallback - Function: function to be executed if there is an error, response is passed in as first argument\n\nIn this example, the loadJSON() function is placed in setup() and takes a custom callback function showEarthquake(). This means when the program finishes loading the JSON file from the USGS earthquakes API, the function showEarthQuake() is called. The place and magnitude of the most recent earthquake listed by the API is stored in local variables within showEarthquake and are then displayed on the screen.\n\nSometimes we use setInterval() to control the frequency of requests made to the API. setInterval() can also take a callback function. If you call setInterval() in setup(), it will run repeatedly for the duration of the program at the interval set.\n\nIn this example, the earthquake data is grabbed from the API every 5 seconds and is displayed on the screen.\n\nIn addition to the loadImage(), loadJSON() and setInterval(), there are other functions in p5 that accept callbacks. Typically, functions that involve loading data of some kind accept callbacks, or should be put in preload(). For example:\n\nDOM functionality makes it easy to interact with other HTML5 objects, including text, hyperlink, image, input, video, audio, and webcam. Some DOM creation methods also accept callbacks:\n\nCallback functions are functions that can be passed as an argument into another function and be executed after the first function is complete. An event listener or handler is a type of callback. It is called whenever an event occurs such as when the mouse is pressed, or a key is pressed etc.\n\nMouse functions like mousePressed(), mouseClicked(), mouseReleased(), mouseMoved(), etc. can be used as event listeners. They can be attached to certain elements in a sketch.\n• mousePressed() - Code inside this block is run one time when a mouse button is pressed\n• mouseReleased() - Code inside this block is run one time when a mouse button is released\n• mouseClicked() - Code inside this block is run once after a mouse button is pressed and released over the element\n• doubleClicked() - Code inside this block is run once after a mouse button is pressed and released over the element twice\n• mouseWheel() - Code inside this block is run once when mouse wheel is scrolled over the element\n• mouseMoved() - Code inside this block is run one time when the mouse is moved\n• mouseOver() - Code inside this block is run once after every time a mouse moves onto the element.\n• mouseOut() - Code inside this block is run once after every time a mouse moves off the element\n\nIn this example, a canvas element is created and an event listener mousePressed() is attached. Function changeGrey() will only run when the mouse is pressed over the canvas, and will will change the background color to a random grey. If the mouse is pressed anywhere, even outside of the canvas, the diameter of the ellipse will increase by 10 pixels. The custom function changeGray(), in this instance, is placed within the mousePressed() function and is to be triggered when mouse is pressed over the canvas element. If the mouse is not pressed, false is passed and changeGrey() will not run.\n\nThe above mouse functions can be attached to an element like the canvas or can be used without specifying an element. The keyboard functions keyPressed(), keyReleased(), keyTyped(), and mouse function mouseDragged() cannot be attached to a specific element.\n• mouseDragged() - Code inside this block runs once when the mouse is moved and the mouse button is pressed\n• keyPressed() - Code inside this block runs once when any key is pressed\n• keyTyped() - Code inside this block is runs once when a key is pressed, but action keys such as Ctrl, Shift, and Alt are ignored. The most recent key pressed will be stored in the key variable.\n• keyReleased() - Code inside this block is runs once when any key is released"
    },
    {
        "link": "https://geeksforgeeks.org/p5-js-loadsound-function",
        "document": "The p5.loadSound is an inbuilt function of p5.sound library that contains the path to the object that will playable as web audio. You can easily attach any file that supports the client’s browsers. So be careful to choose, better is to make an array of the file format that will be imported as the client’s browsers supported the format. Like mp3, ogg and wav, etc.\n\nParameters: This function accepts four parameters as mentioned above and described below:\n• path: This parameter holds the path of the file as a string, you can add multiple files.\n• successCallback: This parameter holds the function when the file loads it is an optional parameter.\n• errorCallback: This parameter holds the function of error if the function you want to call by the previous parameter was a failure. If the performable function can’t be called this parameter will handle this matter and inform what was wrong. It is also an optional parameter.\n• whileLoadingCallback: This parameter holds the function that you want to call while the page is loading, and it’s optional also.\n\nBelow example illustrate the p5.loadSound() function in JavaScript:\n\nSupported Browsers: The browsers are supported by p5.loadSound function are listed below:"
    },
    {
        "link": "https://editor.p5js.org/kchung/sketches/_9IRmXWiM",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/68192821/cannot-get-mic-input-in-p5-js",
        "document": "I'm just trying to get my audio level and draw some effects, for this basic example, just an ellipse but I cannot get it to work. Following are the code files:\n\nI'm not able to get my audio input and hence it's not drawing anything. I tried in 2 different browsers and got the following in console, hope it helps in debugging:\n\nFirefox: (In Firefox I get nothing, only this error)\n\nChrome: (In Chrome it's just a black canvas and when I speak, the ellipse doesn't show)\n\nI search some github issues and tried to insert the function but no luck.\n\nAnd by the way, I'm using Python Flask server to host it locally for now.\n\nAny solutions, guidance would be really appreciated."
    },
    {
        "link": "https://p5js.org/reference/p5.sound/p5.AudioIn",
        "document": "Get sound from an input source, typically a computer microphone.\n\nenabled Client must allow browser to access their microphone / audioin source. Default: false. Will become true when the client enables access. amplitude Input amplitude, connect to it by default but not to master out\n\nconnect Connect to an audio unit. If no parameter is provided, will connect to the main output (i.e. your speakers).\n\n disconnect Disconnect the AudioIn from all audio units. For example, if connect() had been called, disconnect() will stop sending signal to your speakers.\n\n getLevel Read the Amplitude (volume level) of an AudioIn. The AudioIn class contains its own instance of the Amplitude class to help make it easy to get a microphone's volume level. Accepts an optional smoothing value (0.0 < 1.0). NOTE: AudioIn must .start() before using .getLevel().\n\n amp Set amplitude (volume) of a mic input between 0 and 1.0. getSources Returns a list of available input sources. This is a wrapper for MediaDevices.enumerateDevices() - Web APIs | MDN and it returns a Promise. setSource Set the input source. Accepts a number representing a position in the array returned by getSources(). This is only available in browsers that support navigator.mediaDevices.enumerateDevices()\n\nNotice any errors or typos? Please let us know . Please feel free to edit src/AudioIn.js and open a pull request!"
    },
    {
        "link": "https://p5js.org/reference/p5.sound",
        "document": ""
    },
    {
        "link": "https://github.com/processing/p5.js/issues/5435",
        "document": "I get an issue described also here: P5-wrapper/react#122\n\nIt looks I get\n\n p5.sound.js:543 Uncaught ReferenceError: p5 is not defined\n\n at Object. (2.c4420ea7.chunk.js:2)\n\n at n (2.c4420ea7.chunk.js:2)\n\n at Module. (2.c4420ea7.chunk.js:2)\n\n at n (2.c4420ea7.chunk.js:2)\n\n at 2.c4420ea7.chunk.js:2\n\n at Object. (2.c4420ea7.chunk.js:2)\n\n at a (localhost/:1)\n\n at Module.148 (main.7dfa0fb0.chunk.js:1)\n\n at a (localhost/:1)\n\n at t (localhost/:1)"
    }
]