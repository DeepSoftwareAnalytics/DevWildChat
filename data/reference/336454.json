[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/array-function",
        "document": "The required arglist argument is a comma-delimited list of values that are assigned to the elements of the array contained within the Variant. If no arguments are specified, an array of zero length is created.\n\nThe notation used to refer to an element of an array consists of the variable name followed by parentheses containing an index number indicating the desired element.\n\nIn the following example, the first statement creates a variable named as a Variant. The second statement assigns an array to variable . The last statement assigns the value contained in the second array element to another variable.\n\nThe lower bound of an array created by using the Array function is determined by the lower bound specified with the Option Base statement, unless Array is qualified with the name of the type library (for example VBA.Array). If qualified with the type-library name, Array is unaffected by Option Base.\n\nA Variant that is not declared as an array can still contain an array. A Variant variable can contain an array of any type, except fixed-length strings and user-defined types. Although a Variant containing an array is conceptually different from an array whose elements are of type Variant, the array elements are accessed in the same way.\n\nThis example uses the Array function to return a Variant containing an array.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/concepts/getting-started/using-arrays",
        "document": "You can declare an array to work with a set of values of the same data type. An array is a single variable with many compartments to store values, while a typical variable has only one storage compartment in which it can store only one value. Refer to the array as a whole when you want to refer to all the values it holds, or you can refer to its individual elements.\n\nFor example, to store daily expenses for each day of the year, you can declare one array variable with 365 elements, rather than declaring 365 variables. Each element in an array contains one value. The following statement declares the array variable with 365 elements. By default, an array is indexed beginning with zero, so the upper bound of the array is 364 rather than 365.\n\nTo set the value of an individual element, you specify the element's index. The following example assigns an initial value of 20 to each element in the array.\n\nUse the Option Base statement at the top of a module to change the default index of the first element from 0 to 1. In the following example, the Option Base statement changes the index for the first element, and the Dim statement declares the array variable with 365 elements.\n\nYou can also explicitly set the lower bound of an array by using a To clause, as shown in the following example.\n\nThere are two ways to create arrays of Variant values. One way is to declare an array of Variant data type, as shown in the following example:\n\nThe other way is to assign the array returned by the Array function to a Variant variable, as shown in the following example.\n\nYou identify the elements in an array of Variant values by index, no matter which technique you use to create the array. For example, the following statement can be added to either of the preceding examples.\n\nIn Visual Basic, you can declare arrays with up to 60 dimensions. For example, the following statement declares a 2-dimensional, 5-by-10 array.\n\nIf you think of the array as a matrix, the first argument represents the rows and the second argument represents the columns.\n\nUse nested For...Next statements to process multidimensional arrays. The following procedure fills a two-dimensional array with Single values.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://excelmacromastery.com/excel-vba-array",
        "document": "This post provides an in-depth look at the VBA array which is a very important part of the Excel VBA programming language. It covers everything you need to know about the VBA array.\n\nWe will start by seeing what exactly is the VBA Array is and why you need it.\n\nBelow you will see a quick reference guide to using the VBA Array. Refer to it anytime you need a quick reminder of the VBA Array syntax.\n\nThe rest of the post provides the most complete guide you will find on the VBA array.\n\nLoops are used for reading through the VBA Array:\n\n For Loop\n\n For Each Loop\n\nOther data structures in VBA:\n\n VBA Collection – Good when you want to keep inserting items as it automatically resizes.\n\n VBA ArrayList – This has more functionality than the Collection.\n\n VBA Dictionary – Allows storing a Key\\Value pair. Very useful in many applications.\n\nThe Microsoft guide for VBA Arrays can be found here.\n\nPlease click on the button below to get the fully documented source code for this article.\n\nWhat is the VBA Array and Why do You Need It?\n\nA VBA array is a type of variable. It is used to store lists of data of the same type. An example would be storing a list of countries or a list of weekly totals.\n\nIn VBA a normal variable can store only one value at a time.\n\nIn the following example we use a variable to store the marks of a student:\n\nIf we wish to store the marks of another student then we need to create a second variable.\n\nIn the following example, we have the marks of five students:\n\nWe are going to read these marks and write them to the Immediate Window.\n\nNote: The function Debug.Print writes values to the Immediate Window. To view this window select View->Immediate Window from the menu( Shortcut is Ctrl + G)\n\nAs you can see in the following example we are writing the same code five times – once for each student:\n\nThe following is the output from the example:\n\nThe problem with using one variable per student is that you need to add code for each student. Therefore if you had a thousand students in the above example you would need three thousand lines of code!\n\nLuckily we have arrays to make our life easier. Arrays allow us to store a list of data items in one structure.\n\nThe following code shows the above student example using an array:\n\nThe advantage of this code is that it will work for any number of students. If we have to change this code to deal with 1000 students we only need to change the (1 To 5) to (1 To 1000) in the declaration. In the prior example we would need to add approximately five thousand lines of code.\n\nLet’s have a quick comparison of variables and arrays. First we compare the declaration:\n\nNext we compare assigning a value:\n\nFinally we look at writing the values:\n\nAs you can see, using variables and arrays is quite similar.\n\nThe fact that arrays use an index(also called a subscript) to access each item is important. It means we can easily access all the items in an array using a For Loop.\n\nNow that you have some background on why arrays are useful let’s go through them step by step.\n\nThere are two types of VBA arrays:\n• Dynamic(not to be confused with the Excel Dynamic Array) – an array where the length is set at run time.\n\nThe difference between these types is mostly in how they are created. Accessing values in both array types is exactly the same. In the following sections we will cover both of these types.\n\nA static array is initialized as follows:\n\nAs you can see the length is specified when you declare a static array. The problem with this is that you can never be sure in advance the length you need. Each time you run the Macro you may have different length requirements.\n\nIf you do not use all the array locations then the resources are being wasted. So if you need more locations you can use ReDim but this is essentially creating a new static array.\n\nThe dynamic array does not have such problems. You do not specify the length when you declare it. Therefore you can then grow and shrink as required:\n\nThe dynamic array is not allocated until you use the ReDim statement. The advantage is you can wait until you know the number of items before setting the array length. With a static array you have to state the length upfront.\n\nTo give an example. Imagine you were reading worksheets of student marks. With a dynamic array you can count the students on the worksheet and set an array to that length. With a static array you must set the length to the largest possible number of students.\n\nTo assign values to an array you use the number of the location. You assign the value for both array types the same way:\n\nThe number of the location is called the subscript or index. The last line in the example will give a “Subscript out of Range” error as there is no location 4 in the array example.\n\nThere is no native function for getting the number of items in an array. I created the ArrayLength function below to return the number of items in any array no matter how many dimensions:\n\nYou can use it like this:\n\nUsing the Array and Split function\n\nYou can use the Array function to populate an array with a list of items. You must declare the array as a type Variant. The following code shows you how to use this function.\n\nThe array created by the Array Function will start at index zero unless you use Option Base 1 at the top of your module. Then it will start at index one. In programming, it is generally considered poor practice to have your actual data in the code. However, sometimes it is useful when you need to test some code quickly.\n\nThe Split function is used to split a string into an array based on a delimiter. A delimiter is a character such as a comma or space that separates the items.\n\nThe following code will split the string into an array of four elements:\n\nThe Split function is normally used when you read from a comma-separated file or another source that provides a list of items separated by the same character.\n\nUsing Loops With the VBA Array\n\nUsing a For Loop allows quick access to all items in an array. This is where the power of using arrays becomes apparent. We can read arrays with ten values or ten thousand values using the same few lines of code. There are two functions in VBA called LBound and UBound. These functions return the smallest and largest subscript in an array. In an array arrMarks(0 to 3) the LBound will return 0 and UBound will return 3.\n\nThe following example assigns random numbers to an array using a loop. It then prints out these numbers using a second loop.\n\nThe functions LBound and UBound are very useful. Using them means our loops will work correctly with any array length. The real benefit is that if the length of the array changes we do not have to change the code for printing the values. A loop will work for an array of any length as long as you use these functions.\n\nUsing the For Each Loop with the VBA Array\n\nYou can use the For Each loop with arrays. The important thing to keep in mind is that it is Read-Only. This means that you cannot change the value in the array.\n\nIn the following code the value of mark changes but it does not change the value in the array.\n\nThe For Each is loop is fine to use for reading an array. It is neater to write especially for a Two-Dimensional array as we will see.\n\nUsing Erase with the VBA Array\n\nThe Erase function can be used on arrays but performs differently depending on the array type.\n\nFor a static Array the Erase function resets all the values to the default. If the array is made up of long integers(i.e type Long) then all the values are set to zero. If the array is of strings then all the strings are set to “” and so on.\n\nFor a Dynamic Array the Erase function DeAllocates memory. That is, it deletes the array. If you want to use it again you must use ReDim to Allocate memory.\n\nLet’s have a look an example for the static array. This example is the same as the ArrayLoops example in the last section with one difference – we use Erase after setting the values. When the value are printed out they will all be zero:\n\nWe will now try the same example with a dynamic. After we use Erase all the locations in the array have been deleted. We need to use ReDim if we wish to use the array again.\n\nIf we try to access members of this array we will get a “Subscript out of Range” error:\n\nIncreasing the length of the VBA Array\n\nIf we use ReDim on an existing array, then the array and its contents will be deleted.\n\nIn the following example, the second ReDim statement will create a completely new array. The original array and its contents will be deleted.\n\nIf we want to extend the length of an array without losing the contents, we can use the Preserve keyword.\n\nWhen we use Redim Preserve the new array must start at the same starting dimension e.g.\n\nWe cannot Preserve from (0 to 2) to (1 to 3) or to (2 to 10) as they are different starting dimensions.\n\nIn the following code we create an array using ReDim and then fill the array with types of fruit.\n\nWe then use Preserve to extend the length of the array so we don’t lose the original contents:\n\nYou can see from the screenshots below, that the original contents of the array have been “Preserved”.\n\nWord of Caution: In most cases, you shouldn’t need to resize an array like we have done in this section. If you are resizing an array multiple times then you may want to consider using a Collection.\n\nPreserve only works with the upper bound of an array.\n\nFor example, if you have a two-dimensional array you can only preserve the second dimension as this example shows:\n\nIf we try to use Preserve on a lower bound we will get the “Subscript out of range” error.\n\nIn the following code we use Preserve on the first dimension. Running this code will give the “Subscript out of range” error:\n\nWhen we read from a range to an array, it automatically creates a two-dimensional array, even if we have only one column.\n\nThe same Preserve rules apply. We can only use Preserve on the upper bound as this example shows:\n\nThere is no function in VBA for sorting an array. We can sort the worksheet cells but this could be slow if there is a lot of data.\n\nThe QuickSort function below can be used to sort an array.\n\nYou can use this function like this:\n\nPassing the VBA Array to a Sub or Function\n\nSometimes you will need to pass an array to a procedure. You declare the parameter using parenthesis similar to how you declare a dynamic array.\n\nPassing to the procedure using ByRef means you are passing a reference of the array. So if you change the array in the procedure it will be changed when you return.\n\nNote: When you use an array as a parameter it cannot use ByVal, it must use ByRef. You can pass the array using ByVal making the parameter a variant.\n\nIt is important to keep the following in mind. If you want to change an existing array in a procedure then you should pass it as a parameter using ByRef(see last section). You do not need to return the array from the procedure.\n\nThe main reason for returning an array is when you use the procedure to create a new one. In this case you assign the return array to an array in the caller. This array cannot be already allocated. In other words you must use a dynamic array that has not been allocated.\n\nThe following examples show this\n\nThe arrays we have been looking at so far have been one-dimensional arrays. This means the arrays are one list of items.\n\nA two-dimensional array is essentially a list of lists. If you think of a single spreadsheet row as a single dimension then more than one column is two dimensional. In fact a spreadsheet is the equivalent of a two-dimensional array. It has two dimensions – rows and columns.\n\nOne small thing to note is that Excel treats a one-dimensional array as a row if you write it to a spreadsheet. In other words, the array arr(1 to 5) is equivalent to arr(1 to 1, 1 to 5) when writing values to the spreadsheet.\n\nThe following image shows two groups of data. The first is a one-dimensional layout and the second is two dimensional.\n\nTo access an item in the first set of data(1 dimensional) all you need to do is give the row e.g. 1,2, 3 or 4.\n\nFor the second set of data (two-dimensional), you need to give the row AND the column. So you can think of 1 dimensional being multiple columns and one row and two-dimensional as being multiple rows and multiple columns.\n\nNote: It is possible to have more than two dimensions in an array. It is rarely required. If you are solving a problem using a 3+ dimensional array then there probably is a better way to do it.\n\nYou declare a two-dimensional array as follows:\n\nThe following example creates a random value for each item in the array and the prints the values to the Immediate Window:\n\nYou can see that we use a second For loop inside the first loop to access all the items.\n\nThe output of the example looks like this:\n\nHow this Macro works is as follows:\n• And so on until i=3 and j=2\n\nYou may notice that LBound and UBound have a second argument with the value 2. This specifies that it is the upper or lower bound of the second dimension. That is the start and end location for j. The default value 1 which is why we do not need to specify it for the i loop.\n\nUsing the For Each Loop\n\nUsing a For Each is neater to use when reading from an array.\n\nLet’s take the code from above that writes out the two-dimensional array\n\nNow let’s rewrite it using a For each loop. You can see we only need one loop and so it is much easier to write:\n\nUsing the For Each loop gives us the array in one order only – from LBound to UBound. Most of the time this is all you need.\n\nReading from a Range to the VBA Array\n\nIf you have read my previous post on Cells and Ranges then you will know that VBA has an extremely efficient way of reading from a Range of Cells to an Array and vice versa\n\nThe dynamic array created in this example will be a two dimensional array. As you can see we can read from an entire range of cells to an array in just one line.\n\nThe next example will read the sample student data below from C3:E6 of Sheet1 and print them to the Immediate Window:\n\nAs you can see the first dimension(accessed using i) of the array is a row and the second is a column. To demonstrate this take a look at the value 44 in E4 of the sample data. This value is in row 2 column 3 of our data. You can see that 44 is stored in the array at StudentMarks(2,3).\n\nYou can see more about using arrays with ranges in this YouTube video\n\nHow To Make Your Macros Run at Super Speed\n\nIf your macros are running very slow then you may find this section very helpful. Especially if you are dealing with large amounts of data. The following is a very well-kept secret in VBA\n\nUpdating values in arrays is exponentially faster than updating values in cells.\n\nIn the last section, you saw how we can easily read from a group of cells to an array and vice versa. If we are updating a lot of values then we can do the following:\n\n1. Copy the data from the cells to an array.\n\n 2. Change the data in the array.\n\n 3. Copy the updated data from the array back to the cells.\n\nFor example, the following code would be much faster than the code below it:\n\nAssigning from one set of cells to another is also much faster than using Copy and Paste:\n\nThe following comments are from two readers who used arrays to speed up their macros\n\n“A couple of my projects have gone from almost impossible and long to run into almost too easy and a reduction in time to run from 10:1.” – Dane\n\n“One report I did took nearly 3 hours to run when accessing the cells directly — 5 minutes with arrays” – Jim\n\nYou can see more about the speed of Arrays compared to other methods in this YouTube video.\n\nTo see a comparison between Find, Match and Arrays it is worth checking out this post by Charles Williams.\n\nThe following is a summary of the main points of this post\n• Arrays are an efficient way of storing a list of items of the same type.\n• You can access an array item directly using the number of the location which is known as the subscript or index.\n• The common error “Subscript out of Range” is caused by accessing a location that does not exist.\n• There are two types of arrays: Static and Dynamic.\n• Static is used when the length of the array is always the same.\n• Dynamic arrays allow you to determine the length of an array at run time.\n• LBound and UBound provide a safe way of find the smallest and largest subscripts of the array.\n• The basic array is one dimensional. You can also have multidimensional arrays.\n• You can only pass an array to a procedure using ByRef. You do this like this: ByRef arr() as long.\n• You can return an array from a function but the array, it is assigned to, must not be currently allocated.\n• A worksheet with its rows and columns is essentially a two-dimensional array.\n• You can read directly from a worksheet range into a two-dimensional array in just one line of code.\n• You can also write from a two-dimensional array to a range in just one line of code.\n\nFree VBA Tutorial If you are new to VBA or you want to sharpen your existing VBA skills then why not try The Ultimate VBA Tutorial.\n\nRelated Training: Get full access to the Excel VBA training webinars."
    },
    {
        "link": "https://stackoverflow.com/questions/24456328/creating-and-transposing-array-in-vba",
        "document": "I'm hoping to load values in a range to an array and transpose that array to another location (different workbook)\n\nI am using the below forum post to get an idea of how to do it:\n\nBelow is the code I am working with now, and I'm getting the 1004 object defined error. Can anyone spot what I am doing wrong?\n\nI did find that the code works if I do not Set tRangeArray and instead do , but I'm not sure why that's different from my code."
    },
    {
        "link": "https://tutorialspoint.com/vba/vba_quick_guide.htm",
        "document": "VBA stands for Visual Basic for Applications an event-driven programming language from Microsoft that is now predominantly used with Microsoft office applications such as MSExcel, MS-Word, and MS-Access.\n\nIt helps techies to build customized applications and solutions to enhance the capabilities of those applications. The advantage of this facility is that you NEED NOT have visual basic installed on our PC, however, installing Office will implicitly help in achieving the purpose.\n\nYou can use VBA in all office versions, right from MS-Office 97 to MS-Office 2013 and also with any of the latest versions available. Among VBA, Excel VBA is the most popular. The advantage of using VBA is that you can build very powerful tools in MS Excel using linear programming.\n\nYou might wonder why to use VBA in Excel as MS-Excel itself provides loads of inbuilt functions. MS-Excel provides only basic inbuilt functions which might not be sufficient to perform complex calculations. Under such circumstances, VBA becomes the most obvious solution.\n\nFor example, it is very hard to calculate the monthly repayment of a loan using Excel's built-in formulas. Rather, it is easy to program a VBA for such a calculation.\n\nIn Excel window, press \"ALT+F11\". A VBA window opens up as shown in the following screenshot.\n\nIn this chapter, you will learn how to write a simple macro in a step by step manner.\n\nStep 1 − First, enable 'Developer' menu in Excel 20XX. To do the same, click File → Options.\n\nStep 2 − Click Customize the Ribbon tab and check 'Developer'. Click 'OK'.\n\nStep 3 − The 'Developer' ribbon appears in the menu bar.\n\nStep 4 − Click the 'Visual Basic' button to open the VBA Editor.\n\nStep 7 − Edit the name and caption as shown in the following screenshot.\n\nStep 8 − Now double-click the button and the sub-procedure outline will be displayed as shown in the following screenshot.\n\nStep 10 − Click the button to execute the sub-procedure. The output of the sub-procedure is shown in the following screenshot. Make sure that you do have design mode turned on. Simply click it to turn it on if it is not on.\n\nNote − In further chapters, we will demonstrate using a simple button, as explained from step#1 to 10. Hence , it is important to understand this chapter thoroughly.\n\nIn this chapter, you will acquaint yourself with the commonly used excel VBA terminologies. These terminologies will be used in further modules, hence understanding each one of these is important.\n\nModules is the area where the code is written. This is a new Workbook, hence there aren't any Modules.\n\nTo insert a Module, navigate to Insert → Module. Once a module is inserted 'module1' is created.\n\nWithin the modules, we can write VBA code and the code is written within a Procedure. A Procedure/Sub Procedure is a series of VBA statements instructing what to do.\n\nProcedures are a group of statements executed as a whole, which instructs Excel how to perform a specific task. The task performed can be a very simple or a very complicated task. However, it is a good practice to break down complicated procedures into smaller ones.\n\nThe two main types of Procedures are Sub and Function.\n\nA function is a group of reusable code, which can be called anywhere in your program. This eliminates the need of writing the same code over and over again. This helps the programmers to divide a big program into a number of small and manageable functions.\n\nApart from inbuilt Functions, VBA allows to write user-defined functions as well and statements are written between Function and End Function.\n\nSub-procedures work similar to functions. While sub procedures DO NOT Return a value, functions may or may not return a value. Sub procedures CAN be called without call keyword. Sub procedures are always enclosed within Sub and End Sub statements.\n\nComments are used to document the program logic and the user information with which other programmers can seamlessly work on the same code in future.\n\nIt includes information such as developed by, modified by, and can also include incorporated logic. Comments are ignored by the interpreter while execution.\n\nComments in VBA are denoted by two methods.\n• None Any statement that starts with a Single Quote (') is treated as comment. Following is an example.\n• None Any statement that starts with the keyword \"REM\". Following is an example.\n\nThe MsgBox function displays a message box and waits for the user to click a button and then an action is performed based on the button clicked by the user.\n• None Prompt − A Required Parameter. A String that is displayed as a message in the dialog box. The maximum length of prompt is approximately 1024 characters. If the message extends to more than a line, then the lines can be separated using a carriage return character (Chr(13)) or a linefeed character (Chr(10)) between each line.\n• None Buttons − An Optional Parameter. A Numeric expression that specifies the type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If left blank, the default value for buttons is 0.\n• None Title − An Optional Parameter. A String expression displayed in the title bar of the dialog box. If the title is left blank, the application name is placed in the title bar.\n• None Helpfile − An Optional Parameter. A String expression that identifies the Help file to use for providing context-sensitive help for the dialog box.\n• None Context − An Optional Parameter. A Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided.\n\nThe Buttons parameter can take any of the following values −\n• None 3 vbYesNoCancel - Displays Yes, No, and Cancel buttons.\n• None 4 vbYesNo - Displays Yes and No buttons.\n• None 0 vbApplicationModal Application modal - The current application will not work until the user responds to the message box.\n• None 4096 vbSystemModal System modal - All applications will not work until the user responds to the message box.\n\nThe above values are logically divided into four groups: The first group (0 to 5) indicates the buttons to be displayed in the message box. The second group (16, 32, 48, 64) describes the style of the icon to be displayed, the third group (0, 256, 512, 768) indicates which button must be the default, and the fourth group (0, 4096) determines the modality of the message box.\n\nThe MsgBox function can return one of the following values which can be used to identify the button the user has clicked in the message box.\n\nStep 1 − The above Function can be executed either by clicking the \"Run\" button on VBA Window or by calling the function from Excel Worksheet as shown in the following screenshot.\n\nStep 2 − A Simple Message box is displayed with a message \"Welcome\" and an \"OK\" Button\n\nStep 3 − After Clicking OK, yet another dialog box is displayed with a message along with \"yes, no, and cancel\" buttons.\n\nStep 4 − After clicking the No button, the value of that button (7) is stored as an integer and displayed as a message box to the user as shown in the following screenshot. Using this value, it can be understood which button the user has clicked.\n\nThe InputBox function prompts the users to enter values. After entering the values, if the user clicks the OK button or presses ENTER on the keyboard, the InputBox function will return the text in the text box. If the user clicks the Cancel button, the function will return an empty string (\"\").\n• None Prompt − A required parameter. A String that is displayed as a message in the dialog box. The maximum length of prompt is approximately 1024 characters. If the message extends to more than a line, then the lines can be separated using a carriage return character (Chr(13)) or a linefeed character (Chr(10)) between each line.\n• None Title − An optional parameter. A String expression displayed in the title bar of the dialog box. If the title is left blank, the application name is placed in the title bar.\n• None Default − An optional parameter. A default text in the text box that the user would like to be displayed.\n• None XPos − An optional parameter. The position of X axis represents the prompt distance from the left side of the screen horizontally. If left blank, the input box is horizontally centered.\n• None YPos − An optional parameter. The position of Y axis represents the prompt distance from the left side of the screen vertically. If left blank, the input box is vertically centered.\n• None Helpfile − An optional parameter. A String expression that identifies the helpfile to be used to provide context-sensitive Help for the dialog box.\n• None context − An optional parameter. A Numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided.\n\nLet us calculate the area of a rectangle by getting values from the user at run time with the help of two input boxes (one for length and one for width).\n\nStep 1 − To execute the same, call using the function name and press Enter as shown in the following screenshot.\n\nStep 2 − Upon execution, the First input box (length) is displayed. Enter a value into the input box.\n\nStep 3 − After entering the first value, the second input box (width) is displayed.\n\nStep 4 − Upon entering the second number, click the OK button. The area is displayed as shown in the following screenshot.\n\nVariable is a named memory location used to hold a value that can be changed during the script execution. Following are the basic rules for naming a variable.\n• None You must use a letter as the first character.\n• None You can't use a space, period (.), exclamation mark (!), or the characters @, &, $, # in the name.\n• None Name can't exceed 255 characters in length.\n• None You cannot use Visual Basic reserved keywords as variable name.\n\nIn VBA, you need to declare the variables before using them.\n\nThere are many VBA data types, which can be divided into two main categories, namely numeric and non-numeric data types.\n\nFollowing table displays the numeric data types and the allowed range of values.\n\nFollowing table displays the non-numeric data types and the allowed range of values.\n\nLet us create a button and name it as 'Variables_demo' to demonstrate the use of variables.\n\nUpon executing the script, the output will be as shown in the following screenshot.\n\nConstant is a named memory location used to hold a value that CANNOT be changed during the script execution. If a user tries to change a Constant value, the script execution ends up with an error. Constants are declared the same way the variables are declared.\n\nFollowing are the rules for naming a constant.\n• None You must use a letter as the first character.\n• None You can't use a space, period (.), exclamation mark (!), or the characters @, &, $, # in the name.\n• None Name can't exceed 255 characters in length.\n• None You cannot use Visual Basic reserved keywords as variable name.\n\nIn VBA, we need to assign a value to the declared Constants. An error is thrown, if we try to change the value of the constant.\n\nLet us create a button \"Constant_demo\" to demonstrate how to work with constants.\n\nUpon executing the script, the output will be displayed as shown in the following screenshot.\n\nAn Operator can be defined using a simple expression - 4 + 5 is equal to 9. Here, 4 and 5 are called operands and + is called operator. VBA supports following types of operators −\n\nFollowing arithmetic operators are supported by VBA.\n\nThere are following comparison operators supported by VBA.\n\nFollowing logical operators are supported by VBA.\n\nFollowing Concatenation operators are supported by VBA.\n\nNote − Concatenation Operators can be used for both numbers and strings. The output depends on the context, if the variables hold numeric value or string value.\n\nDecision making allows the programmers to control the execution flow of a script or one of its sections. The execution is governed by one or more conditional statements.\n\nFollowing is the general form of a typical decision making structure found in most of the programming languages.\n\nVBA provides the following types of decision making statements. Click the following links to check their details.\n\nThere may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.\n\nProgramming languages provide various control structures that allow for more complicated execution paths.\n\nA loop statement allows us to execute a statement or group of statements multiple times. Following is the general form of a loop statement in VBA.\n\nVBA provides the following types of loops to handle looping requirements. Click the following links to check their detail.\n\nLoop control statements change execution from its normal sequence. When execution leaves a scope, all the remaining statements in the loop are NOT executed.\n\nVBA supports the following control statements. Click the following links to check their detail.\n\nStrings are a sequence of characters, which can consist of either alphabets, numbers, special characters, or all of them. A variable is said to be a string if it is enclosed within double quotes \" \".\n\nThere are predefined VBA String functions, which help the developers to work with the strings very effectively. Following are String methods that are supported in VBA. Please click on each one of the methods to know in detail.\n\nVBScript Date and Time Functions help the developers to convert date and time from one format to another or to express the date or time value in the format that suits a specific condition.\n\nWe know very well that a variable is a container to store a value. Sometimes, developers are in a position to hold more than one value in a single variable at a time. When a series of values are stored in a single variable, then it is known as an array variable.\n\nArrays are declared the same way a variable has been declared except that the declaration of an array variable uses parenthesis. In the following example, the size of the array is mentioned in the brackets.\n• None Although, the array size is indicated as 5, it can hold 6 values as array index starts from ZERO.\n• None VBScript Arrays can store any type of variable in an array. Hence, an array can store an integer, string, or characters in a single array variable.\n\nThe values are assigned to the array by specifying an array index value against each one of the values to be assigned. It can be a string.\n\nAdd a button and add the following function.\n\nWhen you execute the above function, it produces the following output.\n\nArrays are not just limited to a single dimension, however, they can have a maximum of 60 dimensions. Two-dimensional arrays are the most commonly used ones.\n\nIn the following example, a multi-dimensional array is declared with 3 rows and 4 columns.\n\nWhen you execute the above function, it produces the following output.\n\nReDim statement is used to declare dynamic-array variables and allocate or reallocate storage space.\n• None Preserve − An optional parameter used to preserve the data in an existing array when you change the size of the last dimension.\n• None Varname − A required parameter, which denotes the name of the variable, which should follow the standard variable naming conventions.\n• None Subscripts − A required parameter, which indicates the size of the array.\n\nIn the following example, an array has been redefined and then the values preserved when the existing size of the array is changed.\n\nNote − Upon resizing an array smaller than it was originally, the data in the eliminated elements will be lost.\n\nWhen you execute the above function, it produces the following output.\n\nThere are various inbuilt functions within VBScript which help the developers to handle arrays effectively. All the methods that are used in conjunction with arrays are listed below. Please click on the method name to know about it in detail.\n\nA function is a group of reusable code which can be called anywhere in your program. This eliminates the need of writing the same code over and over again. This enables the programmers to divide a big program into a number of small and manageable functions.\n\nApart from inbuilt functions, VBA allows to write user-defined functions as well. In this chapter, you will learn how to write your own functions in VBA.\n\nA VBA function can have an optional return statement. This is required if you want to return a value from a function.\n\nFor example, you can pass two numbers in a function and then you can expect from the function to return their multiplication in your calling program.\n\nNote − A function can return multiple values separated by a comma as an array assigned to the function name itself.\n\nBefore we use a function, we need to define that particular function. The most common way to define a function in VBA is by using the Function keyword, followed by a unique function name and it may or may not carry a list of parameters and a statement with End Function keyword, which indicates the end of the function. Following is the basic syntax.\n\nAdd a button and add the following function.\n\nAdd the following function which returns the area. Note that a value/values can be returned with the function name itself.\n\nTo invoke a function, call the function using the function name as shown in the following screenshot.\n\nThe output of the area as shown below will be displayed to the user.\n\nSub Procedures are similar to functions, however there are a few differences.\n• None Sub procedures DO NOT Return a value while functions may or may not return a value.\n• None Sub procedures CAN be called without a call keyword.\n• None Sub procedures are always enclosed within Sub and End Sub statements.\n\nTo invoke a Procedure somewhere in the script, you can make a call from a function. We will not be able to use the same way as that of a function as sub procedure WILL NOT return a value.\n\nNow you will be able to call the function only but not the sub procedure as shown in the following screenshot.\n\nThe area is calculated and shown only in the Message box.\n\nThe result cell displays ZERO as the area value is NOT returned from the function. In short, you cannot make a direct call to a sub procedure from the excel worksheet.\n\nVBA, an event-driven programming can be triggered when you change a cell or range of cell values manually. Change event may make things easier, but you can very quickly end a page full of formatting. There are two kinds of events.\n\nWorksheet Events are triggered when there is a change in the worksheet. It is created by performing a right-click on the sheet tab and choosing 'view code', and later pasting the code.\n\nThe user can select each one of those worksheets and choose \"WorkSheet\" from the drop down to get the list of all supported Worksheet events.\n\nFollowing are the supported worksheet events that can be added by the user.\n\nLet us say, we just need to display a message before double click.\n\nUpon double-clicking on any cell, the message box is displayed to the user as shown in the following screenshot.\n\nWorkbook events are triggered when there is a change in the workbook on the whole. We can add the code for workbook events by selecting the 'ThisWorkbook' and selecting 'workbook' from the dropdown as shown in the following screenshot. Immediately Workbook_open sub procedure is displayed to the user as seen in the following screenshot.\n\nFollowing are the supported Workbook events that can be added by the user.\n\nLet us say, we just need to display a message to the user that a new sheet is created successfully, whenever a new sheet is created.\n\nUpon creating a new excel sheet, a message is displayed to the user as shown in the following screenshot.\n\nThere are three types of errors in programming: (a) Syntax Errors, (b) Runtime Errors, and (c) Logical Errors.\n\nSyntax errors, also called as parsing errors, occur at the interpretation time for VBScript. For example, the following line causes a syntax error because it is missing a closing parenthesis.\n\nRuntime errors, also called exceptions, occur during execution, after interpretation.\n\nFor example, the following line causes a runtime error because here the syntax is correct but at runtime it is trying to call fnmultiply, which is a non-existing function.\n\nLogical errors can be the most difficult type of errors to track down. These errors are not the result of a syntax or runtime error. Instead, they occur when you make a mistake in the logic that drives your script and you do not get the result you expected.\n\nYou cannot catch those errors, because it depends on your business requirement what type of logic you want to put in your program.\n\nFor example, dividing a number by zero or a script that is written which enters into infinite loop.\n\nAssume if we have a runtime error, then the execution stops by displaying the error message. As a developer, if we want to capture the error, then Error Object is used.\n\nIn the following example, Err.Number gives the error number and Err.Description gives the error description.\n\nVBA enables an error-handling routine and can also be used to disable an error-handling routine. Without an On Error statement, any run-time error that occurs is fatal: an error message is displayed, and the execution stops abruptly.\n\nWhen programming using VBA, there are few important objects that a user would be dealing with.\n\nThe Application object consists of the following −\n• Methods that return top-level objects, such as ActiveCell, ActiveSheet, and so on.\n\nThe Workbook object is a member of the Workbooks collection and contains all the Workbook objects currently open in Microsoft Excel.\n\nThe Worksheet object is a member of the Worksheets collection and contains all the Worksheet objects in a workbook.\n\nRange Objects represent a cell, a row, a column, or a selection of cells containing one or more continuous blocks of cells.\n\nYou can also read Excel File and write the contents of the cell into a Text File using VBA. VBA allows the users to work with text files using two methods −\n\nAs the name suggests, FSOs help the developers to work with drives, folders, and files. In this section, we will discuss how to use a FSO.\n\nDrive is an object, which provides access to the properties of a particular disk drive or network share. Following properties are supported by Drive object −\n\nStep 1 − Before proceeding to scripting using FSO, we should enable Microsoft Scripting Runtime. To do the same, navigate to Tools → References as shown in the following screenshot.\n\nStep 3 − Add Data that you would like to write in a Text File and add a Command Button.\n\nStep 4 − Now it is time to Script.\n\nWhen executing the script, ensure that you place the cursor in the first cell of the worksheet. The Support.log file is created as shown in the following screenshot under \"D:\\Try\".\n\nThe Contents of the file are shown in the following screenshot.\n\nUnlike FSO, we need NOT add any references, however, we will NOT be able to work with drives, files and folders. We will be able to just add the stream to the text file.\n\nUpon executing the script, the \"write.txt\" file is created in the location \"D:\\Try\" as shown in the following screenshot.\n\nThe contents of the file are shown in the following screenshot.\n\nUsing VBA, you can generate charts based on certain criteria. Let us take a look at it using an example.\n\nStep 1 − Enter the data against which the graph has to be generated.\n\nStep 2 − Create 3 buttons - one to generate a bar graph, another to generate a pie chart, and another to generate a column chart.\n\nStep 3 − Develop a Macro to generate each one of these type of charts.\n\nStep 4 − Upon clicking the corresponding button, the chart is created. In the following output, click on generate Pie Chart button.\n\nA User Form is a custom-built dialog box that makes a user data entry more controllable and easier to use for the user. In this chapter, you will learn to design a simple form and add data into excel.\n\nStep 1 − Navigate to VBA Window by pressing Alt+F11 and Navigate to \"Insert\" Menu and select \"User Form\". Upon selecting, the user form is displayed as shown in the following screenshot.\n\nStep 2 − Design the forms using the given controls.\n\nStep 3 − After adding each control, the controls have to be named. Caption corresponds to what appears on the form and name corresponds to the logical name that will be appearing when you write VBA code for that element.\n\nStep 4 − Following are the names against each one of the added controls.\n\nStep 5 − Add the code for the form load event by performing a right-click on the form and selecting 'View Code'.\n\nStep 6 − Select Userform from the objects drop-down and select 'Initialize' method as shown in the following screenshot.\n\nStep 7 − Upon Loading the form, ensure that the text boxes are cleared, drop-down boxes are filled and Radio buttons are reset.\n\nStep 8 − Now add the code to the Submit button. Upon clicking the submit button, the user should be able to add the values into the worksheet.\n\nStep 9 − Add a method to close the form when the user clicks the Cancel button.\n\nStep 10 − Execute the form by clicking the \"Run\" button. Enter the values into the form and click the 'Submit' button. Automatically the values will flow into the worksheet as shown in the following screenshot."
    },
    {
        "link": "https://stackoverflow.com/questions/15509255/vba-bubble-sort-algorithm-slow",
        "document": "I am surprised at how slow this bubble sort algorithm is using VBA. So my question is am I doing something wrong/inefficient, or is this just the best VBA and bubble sort will do? For instance, could using VARIANTs, too many variables, etc. be slowing performance substantially. I know Bubble Sort is not particularly fast, but I didn't think it would be this slow.\n\nAlgorithm inputs: 2D array and either one or two columns to sort by, each asc or desc. I don't necessarily need lightning fast, but 30 seconds for 5,000 rows is completely unacceptable\n\nThanks a ton for any help or advice!!\n\nEdit: I decided to used QuickSort instead. See post below for the code if interested."
    },
    {
        "link": "https://wellsr.com/vba/2018/excel/vba-bubble-sort-macro-to-sort-array",
        "document": "There are a number of ways to sort a VBA array. This tutorial presents a VBA bubble sort macro to show you how to sort small one-dimensional VBA arrays. The VBA bubble sort algorithm is not suitable for large arrays, say greater than a couple thousand entries, because it’s rather slow. If you’re looking for a super fast sorting algorithm for large arrays, check out the VBA quicksort macro.\n\nI’ll explain the pros and cons of the bubble sort algorithm throughout this tutorial.\n\nMake powerful macros with our free VBA Developer Kit\n\n It’s easy to copy and paste a macro like this, but it’s harder make one on your own. To help you make macros like this, we built a free VBA Developer Kit and wrote the Big Book of Excel VBA Macros full of hundreds of pre-built macros to help you master file I/O, arrays, strings and more - grab your free copy below.\n\nThe bubble sort algorithm steps through each element in an array and compares it to the adjacent element. If the next element in the array is larger than the current element in the array, it swaps the two entries. It keeps doing this until no swaps remain and the array is completely sorted from smallest to largest.\n\nSorting arrays with the Bubble Sort algorithm is helpful, but how do you handle your array after it’s sorted? To become really good at using arrays, you’ll need to grab a copy of our comprehensive VBA Arrays Cheat Sheet with over 20 pre-built macros and dozens of tips designed to make it easy for you to handle arrays.\n\nSince bubble sort compares adjacent entries over and over, it is not efficient for large arrays. To loop through your array, bubble sort makes N*(N-1)/2 comparisons until your array is fully sorted, where N is the number of elements in your array. What does that mean in practice? That means that if you have an array with 1,000 elements, it can take almost half a million iterations to completely sort your array! The number of iterations is proportional to the square of the number of elements in your array.\n\nWhy use the VBA Bubble Sort algorithm\n\nIt should come as no surprise that VBA is not the fastest programming language out there. That makes the use of bubble sort even less attractive for large arrays. So why do people use the bubble sort algorithm? Because it’s easy to implement! Coding the logic for bubble sort in VBA is pretty simple. You can look at the example and intuitively understand how it works.\n\nIf you’re working with arrays that are smaller than a couple thousand entries, a good ole fashion VBA bubble sort algorithm will do the job just fine. It will sort your array from smallest to largest reasonably quickly so you can continue on with your data analysis. To implement the sorting algorithm into your projects even quicker, download wellsrPRO and select the bubble sort macro directly from your Excel ribbon whenever you need it.\n\nHow to Use the VBA Bubble Sort Macro\n\nLet’s say you have a column of data in Column A of your spreadsheet. You store each element in a one-dimensional VBA array and you want to sort the array from smallest to largest. You may find yourself needing to sort your data like this if you want to perform some statistical analysis, for example, on the bottom 10% or middle 20% of data. Here’s how you would call the BubbleSort example macro:\n\nThe line calls the VBA BubbleSort macro presented at the top of this tutorial and sorts your array from smallest to largest. After this, you can do whatever you want with your sorted VBA array! For more information on how this demo macro works, check out these related VBA tutorials:\n\nI’ve incorporated the bubble sort algorithm into a number of my financial forecast spreadsheets. In these spreadsheets, I run Monte Carlo simulations on account balances over time and I analyze the probability of certain outcomes. To do this, I store the account balances of each iteration for each year into arrays using VBA and I sort them with the bubble sort sorting algorithm. Once sorted, I’m able to group the account balance outcomes into histograms or return average balances for a subset of outcomes.\n\nThat’s just one example of where a good sorting algorithm, like bubble sort, can come in handy. How do you plan on using this VBA sorting macro? Just remember, bubble sort is an easy algorithm to implement and understand, but it’s not going to be the fastest sorting algorithm you’ll find. For a speed test comparison between bubble sort and a super fast sorting algorithm, check out my VBA quicksort tutorial.\n\nBefore you go, please take a moment to share this article with your friends on Facebook and Twitter. Social media is a great way to grow the site and reach more users, so I genuinely appreciate it when you share my articles with friends on your favorite platform! :)\n\nAs always, when you’re ready to take your VBA to the next level, subscribe using the form below."
    },
    {
        "link": "https://stackoverflow.com/questions/42760959/vba-how-to-bubble-sort-with-two-criteria",
        "document": "I have an Array of txt like this:\n\nI have managed to sort this array with bubble Sort, choosing the 2nd set of numbers \"001,001,002,002,003....\" But i will also like to sort with the first set of numbers as well. Result like this:\n\nAny idea of how I could structure my bubble sort? Do i need at new For loop inside my regulare bubble sort?\n\nCurrent Code (This will Only sort based on 2nd set of numbers). 104 = position of last set of numbers"
    },
    {
        "link": "https://excelforum.com/excel-programming-vba-macros/1074869-help-with-vba-bubble-sort.html",
        "document": "_________________Visit: Jerry Beaucaire's Excel Files & Macros If you've been given good help, use theicon below to give reputation feedback,Always put your code between code tags.- Ray Kroc- JB (little ones count!)"
    },
    {
        "link": "https://techcommunity.microsoft.com/discussions/excelgeneral/vba-algorithm-for-sorting/2535985",
        "document": "I would say that a text sort presents some additional problems, besides just changing the data type of variables. (Which is actually optional, if you choose to declare variables as type Variant, explicitly or by default. But I do not recommend that.)\n\nFirst, how to treat upper and lower cases. (Hint: See the Option Compare statement.)\n\nSecond, how to treat spaces (and other whitespace characters like tab and nonbreaking spaces?), if you are sorting phrases. (Hint: See the Replace function to remove whitespace characters, if desired.)\n\nSimilarly, how to treat special characters, notably commas, semicolons, colons, dashes, etc. For example, sort \"A-c-b\" and \"Abc\", noting that \"-\" < \"b\" is True.\n\nBottom line: Provide an example with some representative data and the sorted result that you want. Or....\n\nRe: ``I am talking about this code specifically: Range(\"A1:F20\").Sort Key1:=Range(\"C2\"), Order1:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:=False, [....]``\n\nDo you mean that you want the result of your sort to be the same as the result of the range.Sort method with those options?\n\nFinally, if you are looking for anything more specific, show us your implementation of a \"bubble sort\" -- or at least the algorithm.\n\nThe bubble sort per se is inefficient. Given the choice, I would use an exchange sort. But it depends on the specifics of the assignment."
    }
]