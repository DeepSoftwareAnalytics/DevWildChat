[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Structuring_content/Basic_HTML_syntax",
        "document": "In this article, we cover the absolute basics of HTML. To get you started, this article defines elements, attributes, and all the other important terms you may have heard. It also explains where these fit into HTML. You will learn how HTML elements are structured, how a typical HTML page is structured, and other important basic language features. Along the way, there will be an opportunity to play with HTML too! Basic software installed, and basic knowledge of working with files.\n• The anatomy of an HTML element — element, opening tag, content, closing tag, attributes.\n• The HTML body and its purpose as a container for the page content.\n• What void elements (also known as empty elements) are, and how they differ from other elements.\n• The need for a doctype at the top of HTML documents. Its original intended purpose, and the fact that now it is somewhat of a historical artifact.\n• Understanding that HTML needs to be correctly nested.\n\nHTML (HyperText Markup Language) is a markup language that tells web browsers how to structure the web pages you visit. It can be as complicated or as simple as the web developer wants it to be. HTML consists of a series of elements, which you use to enclose, wrap, or mark up different parts of content to make it appear or act in a certain way. The enclosing tags can make content into a hyperlink to connect to another page, italicize words, and so on. For example, consider the following line of text: My cat is very grumpy If we wanted the text to stand by itself, we could specify that it is a paragraph by enclosing it in a paragraph ( ) element: HTML lives inside text files called HTML documents, or just documents, with a file extension. Where previously we've talked about web pages, an HTML document contains the web page's content and specifies its structure. The most common HTML file you'll encounter is , which is generally used to contain a website's home page content. It's also common to see subfolders with their own , so a website can have multiple index files in different places. Note: Tags in HTML are not case-sensitive. This means they can be written in uppercase or lowercase. For example, a tag could be written as , , , , etc., and it will work. However, it is best practice to write all tags in lowercase for consistency and readability.\n\nEdit the line below in the \"Editable code\" area by wrapping it with the tags and To open the element, put the opening tag at the start of the line. To close the element, put the closing tag at the end of the line. Doing this should give the line italic text formatting! See your changes update live in the Output area. If you make a mistake, you can clear your work using the Reset button. If you get really stuck, press the Show solution button to see the answer. <h2>Live output</h2> <div class=\"output\" style=\"min-height: 50px;\"></div> <h2>Editable code</h2> <p class=\"a11y-label\"> Press Esc to move focus away from the code area (Tab inserts a tab character). </p> <textarea id=\"code\" class=\"playable-code\" style=\"min-height: 100px;width: 95%\"> This is my text. </textarea> <div class=\"controls\"> <input id=\"reset\" type=\"button\" value=\"Reset\" /> <input id=\"solution\" type=\"button\" value=\"Show solution\" /> </div> const textarea = document.getElementById(\"code\"); const reset = document.getElementById(\"reset\"); const solution = document.getElementById(\"solution\"); const output = document.querySelector(\".output\"); const code = textarea.value; let userEntry = textarea.value; function updateCode() { output.innerHTML = textarea.value; } const htmlSolution = \"<em>This is my text.</em>\"; let solutionEntry = htmlSolution; reset.addEventListener(\"click\", () => { textarea.value = code; userEntry = textarea.value; solutionEntry = htmlSolution; solution.value = \"Show solution\"; updateCode(); }); solution.addEventListener(\"click\", () => { if (solution.value === \"Show solution\") { textarea.value = solutionEntry; solution.value = \"Hide solution\"; } else { textarea.value = userEntry; solution.value = \"Show solution\"; } updateCode(); }); textarea.addEventListener(\"input\", updateCode); window.addEventListener(\"load\", updateCode); // stop tab key tabbing out of textarea and // make it write a tab at the caret position instead textarea.onkeydown = (e) => { if (e.code === \"Tab\") { e.preventDefault(); insertAtCaret(\"\\t\"); } if (e.code === \"Escape\") { textarea.blur(); } }; function insertAtCaret(text) { const scrollPos = textarea.scrollTop; let caretPos = textarea.selectionStart; const front = textarea.value.substring(0, caretPos); const back = textarea.value.substring( textarea.selectionEnd, textarea.value.length, ); textarea.value = front + text + back; caretPos += text.length; textarea.selectionStart = caretPos; textarea.selectionEnd = caretPos; textarea.focus(); textarea.scrollTop = scrollPos; } // Update the saved userCode every time the user updates the text area code textarea.onkeyup = () => { // We only want to save the state when the user code is being shown, // not the solution, so that solution is not saved over the user code if (solution.value === \"Show solution\") { userEntry = textarea.value; } else { solutionEntry = textarea.value; } updateCode(); };\n\nElements can be placed within other elements. This is called nesting. If we wanted to state that our cat is very grumpy, we could wrap the word very in a element, which means that the word is to have strong(er) text formatting: There is a right and wrong way to do nesting. In the example above, we opened the element first, then opened the element. For proper nesting, we should close the element first, before closing the . The following is an example of the wrong way to do nesting: The tags have to open and close in a way that they are inside or outside one another. With the kind of overlap in the example above, the browser has to guess at your intent. This kind of guessing can result in unexpected results.\n\nThe element can take a number of attributes, including: The attribute is a required attribute that specifies the location of the image. For example: . The attribute specifies a text description of the image. For example: . The attribute specifies the width of the image with the unit being pixels. For example: . The attribute specifies the height of the image with the unit being pixels. For example: . Edit the line below in the Input area to turn it into an image.\n• Find your favorite image online, right click it, and press Copy Image Link/Address.\n• Back in the area below, add the attribute and fill it with the link from step 1. You will be able to see your changes live in the Output area. If you make a mistake, you can always reset it using the Reset button. If you get really stuck, press the Show solution button to see the answer. <h2>Live output</h2> <div class=\"output\" style=\"min-height: 50px;\"></div> <h2>Editable code</h2> <p class=\"a11y-label\"> Press Esc to move focus away from the code area (Tab inserts a tab character). </p> <textarea id=\"code\" class=\"input\" style=\"min-height: 100px;width: 95%\"> <img alt=\"I should be an image\" > </textarea> <div class=\"playable-buttons\"> <input id=\"reset\" type=\"button\" value=\"Reset\" /> <input id=\"solution\" type=\"button\" value=\"Show solution\" /> </div> const textarea = document.getElementById(\"code\"); const reset = document.getElementById(\"reset\"); const solution = document.getElementById(\"solution\"); const output = document.querySelector(\".output\"); const code = textarea.value; let userEntry = textarea.value; function updateCode() { output.innerHTML = textarea.value; } const htmlSolution = '<img src=\"https://raw.githubusercontent.com/mdn/beginner-html-site/gh-pages/images/firefox-icon.png\" alt=\"Firefox icon\" width=\"100\" height=\"100\" />'; let solutionEntry = htmlSolution; reset.addEventListener(\"click\", () => { textarea.value = code; userEntry = textarea.value; solutionEntry = htmlSolution; solution.value = \"Show solution\"; updateCode(); }); solution.addEventListener(\"click\", () => { if (solution.value === \"Show solution\") { textarea.value = solutionEntry; solution.value = \"Hide solution\"; } else { textarea.value = userEntry; solution.value = \"Show solution\"; } updateCode(); }); textarea.addEventListener(\"input\", updateCode); window.addEventListener(\"load\", updateCode); // stop tab key tabbing out of textarea and // make it write a tab at the caret position instead textarea.onkeydown = (e) => { if (e.code === \"Tab\") { e.preventDefault(); insertAtCaret(\"\\t\"); } if (e.code === \"Escape\") { textarea.blur(); } }; function insertAtCaret(text) { const scrollPos = textarea.scrollTop; let caretPos = textarea.selectionStart; const front = textarea.value.substring(0, caretPos); const back = textarea.value.substring( textarea.selectionEnd, textarea.value.length, ); textarea.value = front + text + back; caretPos += text.length; textarea.selectionStart = caretPos; textarea.selectionEnd = caretPos; textarea.focus(); textarea.scrollTop = scrollPos; } // Update the saved userCode every time the user updates the text area code textarea.onkeyup = () => { // We only want to save the state when the user code is being shown, // not the solution, so that solution is not saved over the user code if (solution.value === \"Show solution\") { userEntry = textarea.value; } else { solutionEntry = textarea.value; } updateCode(); };\n\nSometimes you will see attributes written without values. This is entirely acceptable. These are called Boolean attributes. When a boolean attribute is written without a value, or with any value, even like , the boolean attribute is always set to true. Otherwise, if the attribute is not written in an HTML tag, the attribute is set to false. The spec requires the attribute's value to either be the empty string (including when the attribute has no value explicitly specified) or the same as the attribute's name, but other values work the same. For example, consider the attribute, which you can assign to form input elements. (You use this to disable the form input elements so the user can't make entries. The disabled elements typically have a grayed-out appearance.) For example: As shorthand, it is acceptable to write this as follows: <!-- using the disabled attribute prevents the end user from entering text into the input box --> <input type=\"text\" disabled /> <!-- text input is allowed, as it doesn't contain the disabled attribute --> <input type=\"text\" /> For reference, the example above also includes a non-disabled form input element. The HTML from the example above produces this result:\n\nIf you look at code for a lot of other sites, you might come across a number of strange markup styles, including attribute values without quotes. This is permitted in certain circumstances, but it can also break your markup in other circumstances. The element in the code snippet below, , is called an anchor. Anchors enclose text and turn them into links. The attribute specifies the web address the link points to. You can write this basic version below with only the attribute, like this: Anchors can also have a attribute, a description of the linked page. However, as soon as we add the in the same fashion as the attribute there are problems: As written above, the browser misinterprets the markup, mistaking the attribute for three attributes: a title attribute with the value , and two Boolean attributes, and . Obviously, this is not intended! It will cause errors or unexpected behavior, as you can see in the live example below. Try hovering over the link to view the title text! Always include the attribute quotes. It avoids such problems, and results in more readable code.\n\nIn this article, you will also notice that the attributes are wrapped in double quotes. However, you might see single quotes in some HTML code. This is a matter of style. You can feel free to choose which one you prefer. Both of these lines are equivalent: <a href='https://www.example.com'>A link to my example.</a> <a href=\"https://www.example.com\">A link to my example.</a> Make sure you don't mix single quotes and double quotes. This example (below) shows a kind of mixing of quotes that will go wrong: However, if you use one type of quote, you can include the other type of quote inside your attribute values: <a href=\"https://www.example.com\" title=\"Isn't this fun?\"> A link to my example. </a> To use quote marks inside other quote marks of the same type (single quote or double quote), use character references. For example, this will break: Instead, you need to do this:\n\nIndividual HTML elements aren't very useful on their own. Next, let's examine how individual elements combine to form an entire HTML page:\n• : The doctype. When HTML was young (1991-1992), doctypes were meant to act as links to a set of rules that the HTML page had to follow to be considered good HTML. Doctypes used to look something like this: More recently, the doctype is a historical artifact that needs to be included for everything else to work right. is the shortest string of characters that counts as a valid doctype. That is all you need to know!\n• : The element. This element wraps all the content on the page. It is sometimes known as the root element.\n• : The element. This element acts as a container for everything you want to include on the HTML page, that isn't the content the page will show to viewers. This includes keywords and a page description that would appear in search results, CSS to style content, character set declarations, and more. You will learn more about this in the next article of the series.\n• : The element. This element represents metadata that cannot be represented by other HTML meta-related elements, like , , , or . The attribute specifies the character encoding for your document as UTF-8, which includes most characters from the vast majority of human written languages. With this setting, the page can now handle any textual content it might contain. There is no reason not to set this, and it can help avoid some problems later.\n• : The element. This sets the title of the page, which is the title that appears in the browser tab the page is loaded in. The page title is also used to describe the page when it is bookmarked.\n• : The element. This contains all the content that displays on the page, including text, images, videos, games, playable audio tracks, or whatever else.\n\nActive learning: Adding some features to an HTML document If you want to experiment with writing some HTML on your local computer, you can:\n• Copy the HTML page example listed above.\n• Create a new file in your text editor.\n• Paste the code into the new text file. Note: You can also find this basic HTML template on the MDN Learning Area GitHub repo. You can now open this file in a web browser to see what the rendered code looks like. Edit the code and refresh the browser to see what the result is. Initially, the page looks like this: In this exercise, you can edit the code locally on your computer, as described previously, or you can edit it in the sample window below (the editable sample window represents just the contents of the element, in this case). Sharpen your skills by implementing the following tasks:\n• Just below the opening tag of the element, add a main title for the document. This should be wrapped inside an opening tag and closing tag.\n• Edit the paragraph content to include text about a topic that you find interesting.\n• Make important words stand out in bold by wrapping them inside a opening tag and closing tag.\n• Add a link to your paragraph, as explained earlier in the article.\n• Add an image to your document. Place it below the paragraph, as explained earlier in the article. Earn bonus points if you manage to link to a different image (either locally on your computer or somewhere else on the web). If you make a mistake, you can always reset it using the Reset button. If you get really stuck, press the Show solution button to see the answer. <h2>Live output</h2> <div class=\"output\" style=\"min-height: 50px;\"></div> <h2>Editable code</h2> <p class=\"a11y-label\"> Press Esc to move focus away from the code area (Tab inserts a tab character). </p> <textarea id=\"code\" class=\"input\" style=\"min-height: 100px;width: 95%\"> <p>This is my page</p> </textarea> <div class=\"playable-buttons\"> <input id=\"reset\" type=\"button\" value=\"Reset\" /> <input id=\"solution\" type=\"button\" value=\"Show solution\" /> </div> const textarea = document.getElementById(\"code\"); const reset = document.getElementById(\"reset\"); const solution = document.getElementById(\"solution\"); const output = document.querySelector(\".output\"); const code = textarea.value; let userEntry = textarea.value; function updateCode() { output.innerHTML = textarea.value; } const htmlSolution = '<h1>Some music</h1><p>I really enjoy <strong>playing the drums</strong>. One of my favorite drummers is Neal Peart, who plays in the band <a href=\"https://en.wikipedia.org/wiki/Rush_%28band%29\" title=\"Rush Wikipedia article\">Rush</a>. My favorite Rush album is currently <a href=\"https://www.deezer.com/album/942295\">Moving Pictures</a>.</p> <img src=\"https://www.cygnus-x1.net/links/rush/images/albums/sectors/sector2-movingpictures-cover-s.jpg\" alt=\"Rush Moving Pictures album cover\">'; let solutionEntry = htmlSolution; reset.addEventListener(\"click\", () => { textarea.value = code; userEntry = textarea.value; solutionEntry = htmlSolution; solution.value = \"Show solution\"; updateCode(); }); solution.addEventListener(\"click\", () => { if (solution.value === \"Show solution\") { textarea.value = solutionEntry; solution.value = \"Hide solution\"; } else { textarea.value = userEntry; solution.value = \"Show solution\"; } updateCode(); }); textarea.addEventListener(\"input\", updateCode); window.addEventListener(\"load\", updateCode); // stop tab key tabbing out of textarea and // make it write a tab at the caret position instead textarea.onkeydown = (e) => { if (e.code === \"Tab\") { e.preventDefault(); insertAtCaret(\"\\t\"); } if (e.code === \"Escape\") { textarea.blur(); } }; function insertAtCaret(text) { const scrollPos = textarea.scrollTop; let caretPos = textarea.selectionStart; const front = textarea.value.substring(0, caretPos); const back = textarea.value.substring( textarea.selectionEnd, textarea.value.length, ); textarea.value = front + text + back; caretPos += text.length; textarea.selectionStart = caretPos; textarea.selectionEnd = caretPos; textarea.focus(); textarea.scrollTop = scrollPos; } // Update the saved userCode every time the user updates the text area code textarea.onkeyup = () => { // We only want to save the state when the user code is being shown, // not the solution, so that solution is not saved over the user code if (solution.value === \"Show solution\") { userEntry = textarea.value; } else { solutionEntry = textarea.value; } updateCode(); };\n\nIn the examples above, you may have noticed that a lot of whitespace is included in the code. This is optional. These two code snippets are equivalent: No matter how much whitespace you use inside HTML element content (which can include one or more space characters, but also line breaks), the HTML parser reduces each sequence of whitespace to a single space when rendering the code. So why use so much whitespace? The answer is readability. It can be easier to understand what is going on in your code if you have it nicely formatted. In our HTML we've got each nested element indented by two spaces more than the one it is sitting inside. It is up to you to choose the style of formatting (how many spaces for each level of indentation, for example), but you should consider formatting it. Let's have a look at how the browser renders the two paragraphs above with and without whitespace: Note: Accessing the innerHTML of elements from JavaScript will keep all the whitespace intact. This may return unexpected results if the whitespace is trimmed by the browser.\n\nIn HTML, the characters , , , , and are special characters. They are parts of the HTML syntax itself. So how do you include one of these special characters in your text? For example, if you want to use an ampersand or less-than sign, and not have it interpreted as code. You do this with character references. These are special codes that represent characters, to be used in these exact circumstances. Each character reference starts with an ampersand (&), and ends with a semicolon (;). The character reference equivalent could be easily remembered because the text it uses can be seen as less than for , quotation for and similarly for others. To find more about entity references, see List of XML and HTML character entity references (Wikipedia). In the example below, there are two paragraphs: <p>In HTML, you define a paragraph using the <p> element.</p> <p>In HTML, you define a paragraph using the <p> element.</p> In the live output below, you can see that the first paragraph has gone wrong. The browser interprets the second instance of as starting a new paragraph. The second paragraph looks fine because it has angle brackets with character references. Note: You don't need to use entity references for any other symbols, as modern browsers will handle the actual symbols just fine as long as your HTML's character encoding is set to UTF-8."
    },
    {
        "link": "https://w3schools.com/html/html_intro.asp",
        "document": "HTML is the standard markup language for creating Web pages.\n• HTML is the standard markup language for creating Web pages\n• HTML elements tell the browser how to display the content\n• HTML elements label pieces of content such as \"this is a heading\", \"this is a paragraph\", \"this is a link\", etc.\n• The declaration defines that this document is an HTML5 document\n• The element is the root element of an HTML page\n• The element contains meta information about the HTML page\n• The element specifies a title for the HTML page (which is shown in the browser's title bar or in the page's tab)\n• The element defines the document's body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.\n\nWhat is an HTML Element?\n\nAn HTML element is defined by a start tag, some content, and an end tag:\n\nThe HTML element is everything from the start tag to the end tag:\n\nNote: Some HTML elements have no content (like the <br> element). These elements are called empty elements. Empty elements do not have an end tag!\n\nThe purpose of a web browser (Chrome, Edge, Firefox, Safari) is to read HTML documents and display them correctly.\n\nA browser does not display the HTML tags, but uses them to determine how to display the document:\n\nBelow is a visualization of an HTML page structure:\n\nSince the early days of the World Wide Web, there have been many versions of HTML:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element",
        "document": "This page lists all the HTML elements, which are created using tags. They are grouped by function to help you find what you have in mind easily. An alphabetical list of all elements is provided in the sidebar on every element's page as well as this one. Note: For more information about the basics of HTML elements and attributes, see Anatomy of an HTML element.\n\nUse HTML text content elements to organize blocks or sections of content placed between the opening and closing tags. Important for accessibility and SEO, these elements identify the purpose or structure of that content. Indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation. A URL for the source of the quotation may be given using the attribute, while a text representation of the source can be given using the element. Provides the description, definition, or value for the preceding term ( ) in a description list ( ). The generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g., styling is directly applied to it, or some kind of layout model like flexbox is applied to its parent element). Represents a description list. The element encloses a list of groups of terms (specified using the element) and descriptions (provided by elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). Specifies a term in a description or definition list, and as such must be used inside a element. It is usually followed by a element; however, multiple elements in a row indicate several terms that are all defined by the immediate next element. Represents a caption or legend describing the rest of the contents of its parent element. Represents self-contained content, potentially with an optional caption, which is specified using the element. The figure, its caption, and its contents are referenced as a single unit. Represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section. Represents an item in a list. It must be contained in a parent element: an ordered list ( ), an unordered list ( ), or a menu ( ). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. A semantic alternative to , but treated by browsers (and exposed through the accessibility tree) as no different than . It represents an unordered list of items (which are represented by elements). Represents an ordered list of items — typically rendered as a numbered list. Represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields. Represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written. Represents an unordered list of items, typically rendered as a bulleted list.\n\nUse the HTML inline text semantic to define the meaning, structure, or style of a word, line, or any arbitrary piece of text. Together with its attribute, creates a hyperlink to web pages, files, email addresses, locations within the current page, or anything else a URL can address. Used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use for styling text or granting importance. If you wish to create boldface text, you should use the CSS property. If you wish to indicate an element is of special importance, you should use the element. Tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted. Overrides the current directionality of text, so that the text within is rendered in a different direction. Produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. Used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata. Displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font. Links a given piece of content with a machine-readable translation. If the content is time- or date-related, the element must be used. Used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor element, the / pairing, or the nearest section ancestor of the element, is considered to be the definition of the term. Marks text that has stress emphasis. The element can be nested, with each nesting level indicating a greater degree of emphasis. Represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, and taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the naming of this element. Represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a element using its default monospace font, although this is not mandated by the HTML standard. Represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context. Indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the element. Used to provide fall-back parentheses for browsers that do not support the display of ruby annotations using the element. One element should enclose each of the opening and closing parentheses that wrap the element that contains the annotation's text. Specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The element must always be contained within a element. Represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common. Renders text with a strikethrough, or a line through it. Use the element to represent things that are no longer relevant or no longer accurate. However, is not appropriate when indicating document edits; for that, use the and elements, as appropriate. Used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console). Represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font size smaller, such as from to . A generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the or attributes), or because they share attribute values, such as . It should be used only when no other semantic element is appropriate. is very much like a div element, but div is a block-level element whereas a is an inline-level element. Indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. Specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text. Specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text. Represents a specific period in time. It may include the attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. Represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a single solid underline but may be altered using CSS. Represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent. Represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.\n\nWarning: These are old HTML elements that are deprecated and should not be used. You should never use them in new projects, and you should replace them in old projects as soon as you can. They are listed here for completeness only. Allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word. Renders the enclosed text at a font size one level larger than the surrounding text ( becomes , for example). The size is capped at the browser's maximum permitted font size. Displays its block-level or inline contents centered horizontally within its containing element. An obsolete part of the Web Components suite of technologies—was used inside of Shadow DOM as an insertion point, and wasn't meant to be used in ordinary HTML. It has now been replaced by the element, which creates a point in the DOM at which a shadow DOM can be inserted. Consider using instead. Container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. Do not use this obsolete element; instead, you should use the element for lists, including lists of files. Defines the font size, color and face for its content. Defines a particular area in which another HTML document can be displayed. A frame should be used within a . Used to contain elements. An ancient and poorly supported precursor to the element. It should not be used. Used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes. Represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button. Prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text. An obsolete, non-standard way to provide alternative, or \"fallback\", content for browsers that do not support the embed element or do not support the type of embedded content an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an element. Provides content to be presented in browsers that don't support (or have disabled support for) the element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers. Renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text. Used to delimit the base text component of a ruby annotation, i.e. the text that is being annotated. One element should wrap each separate atomic segment of the base text. Embraces semantic annotations of characters presented in a ruby of elements used inside of element. elements can have both pronunciation ( ) and semantic ( ) annotations. An obsolete part of the Web Components technology suite that was intended to be used as a shadow DOM insertion point. You might have used it if you have created multiple shadow roots under a shadow host. Consider using instead. Creates inline text which is presented using the user agent default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer. Renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line."
    },
    {
        "link": "https://html.com",
        "document": "Welcome! You’ve Found the Easiest Way to Learn HTML and CSS.\n\nWhether you are a novice, hoping to delve into the world of web design or an experienced webmaster keen to improve your skills, we’ve got online tutorials tailored to your web design needs.\n\nOur absolute beginner tutorial will turn you from wannabe to webmaster in just a few hours. Unlike many other HTML tutorials, it’s a step-by-step guide – not a boring long-winded reference.\n\nOur step-by-step guide teaches you the basics of HTML and how to build your first website. That means how to layout an HTML page, how to add text and images, how to add headings and text formatting, and how to use tables.\n\nWe’ll get you building your new website in minutes, not hours.\n\nWhile many guides on the internet attempt to teach HTML using a lot of mind-boggling theory, this tutorial will instead focus on giving you the practical skills to build your first site.\n\nThe aim is to show you ‘how’ to create your first web page without spending the entire tutorial focusing too much on the “why.”\n\nBy the end of this tutorial, you will have the know-how to create a basic website and we hope that this will inspire you to delve further into the world of HTML using our follow-on guides.\n\nOkay, so this is the only bit of mandatory theory. In order to begin to write HTML, it helps if you know what you are writing.\n\nHTML is the language in which most websites are written. HTML is used to create pages and make them functional.\n\nThe code used to make them visually appealing is known as CSS and we shall focus on this in a later tutorial. For now, we will focus on teaching you how to build rather than design.\n\nHTML was first created by Tim Berners-Lee, Robert Cailliau, and others starting in 1989. It stands for Hyper Text Markup Language.\n\nHypertext means that the document contains links that allow the reader to jump to other places in the document or to another document altogether. The latest version is known as HTML5.\n\nA Markup Language is a way that computers speak to each other to control how text is processed and presented. To do this HTML uses two things: tags and attributes.\n\nTags and attributes are the basis of HTML.\n\nThey work together but perform different functions – it is worth investing 2 minutes in differentiating the two.\n\nTags are used to mark up the start of an HTML element and they are usually enclosed in angle brackets. An example of a tag is: .\n\nMost tags must be opened and closed in order to function.\n\nAttributes contain additional pieces of information. Attributes take the form of an opening tag and additional info is placed inside.\n\nAn example of an attribute is:\n\nIn this instance, the image source (src) and the alt text (alt) are attributes of the tag.\n• The vast majority of tags must be opened ( ) and closed ( ) with the element information such as a title or text resting between the tags.\n• When using multiple tags, the tags must be closed in the order in which they were opened. For example: \n\n\n\n\n\nNow that we’ve gotten the basic theory out of the way. It’s time to learn how to build our first website.\n\nFirst off, we must ensure that we have the right tools. Most important, we need an HTML editor.\n\nThere are many choices on the market. Here are a handful of the most popular:\n\nHowever, for this tutorial, we will use the Sublime Text 3 as it is free and also offers cross-platform support for Windows, Mac, and Linux users.\n\nAnother common choice for HTML and other language coders is Notepad ++. It is a tiny program to download and perform the functions you need for writing clean code.\n\nKomodo Edit is one of two editors released by the same label. They offer a simple, open-source editor with a variety of extensions and language support.\n\nIt is free to download.\n\nDo not use Microsoft Word or any other word processor when writing HTML code, only an HTML editor or at the very least, your machine’s built-in notepad, is suitable for the task.\n\nSecondly, ensure that you’ve installed a number of different browsers such as Chrome and Firefox in order to preview your upcoming creation.\n\nFirst off, you need to open your HTML editor, where you will find a clean white page on which to write your code.\n\nFrom there you need to layout your page with the following tags.\n\nThese tags should be placed underneath each other at the top of every HTML page that you create.\n\nInside the tag, there is one tag that is always included: , but there are others that are just as important:\n\nNext, we will make tag.\n\nThe HTML is where we add the content which is designed for viewing by human eyes.\n\nThis includes text, images, tables, forms and everything else that we see on the internet each day.\n\nHow to Add HTML Headings To Your Web Page\n\nIn HTML, headings are written in the following elements:\n\nAs you might have guessed and should be used for the most important titles, while the remaining tags should be used for sub-headings and less important text.\n\nSearch engine bots use this order when deciphering which information is most important on a page.\n\nLet’s try it out. On a new line in the HTML editor, type:\n\nAnd hit save. We will save this file as “index.html” in a new folder called “my webpage.”\n\nWell let’s not get carried away; we’ve still got loads of great features that we can add to your page.\n\nHow To Add Text In HTML\n\nAdding text to our HTML page is simple using an element opened with the tag which creates a new paragraph. We place all of our regular text inside the element .\n\nWhen we write text in HTML, we also have a number of other elements we can use to control the text or make it appear in a certain way.\n\nThey are as follows:\n\nThese tags must be opened and closed around the text in question.\n\nLet’s try it out. On a new line in the HTML editor, type the following HTML code:\n\nDon’t forget to hit save and then refresh the page in your browser to see the results.\n\nHow To Add Links In HTML\n\nAs you may have noticed, the internet is made up of lots of links.\n\nAlmost everything you click on while surfing the web is a link takes you to another page within the website you are visiting or to an external site.\n\nLinks are included in an attribute opened by the <a> tag. This element is the first that we’ve met which uses an attribute and so it looks different to previously mentioned tags.\n\nThe <a> (or anchor) opening tag is written in the format:\n\nThe first part of the attribute points to the page that will open once the link is clicked.\n\nMeanwhile, the second part of the attribute contains the text which will be displayed to a visitor in order to entice them to click on that link.\n\nIf you are building your own website then you will most likely host all of your pages on professional web hosting. In this case, internal links on your website will <a href=”mylinkedpage.html”>Link Title Here</a>.\n\nLet’s try it out. Make a duplicate of the code from your current index.html page. Copy / paste it into a new window in your HTML editor.\n\nSave this new page as “page2.html” and ensure that it is saved in the same folder as your index.html page.\n\nOn page2.html add the following code:\n\nThis will create a link to Google on page 2. Hit save and return to your index.html page.\n\nOn a new line on index.html add the following code:\n\nEnsure the folder path to the file (page2.html) is correct. Hit save and preview index.html in your browser.\n\nIf everything is correct then you will see a link which will take you to your second page. On the second page, there will be a link that will take you to google.com.\n\nHow To Add Images In HTML To Your Website\n\nIn today’s modern digital world, images are everything. The <img> tag has everything you need to display images on your site. Much like the <a> anchor element, <img> also contains an attribute.\n\nThe attribute features information for your computer regarding the source, height, width and alt text of the image.\n\nYou can also define borders and other styles around the image using the class attribute. However, we shall cover this in a later tutorial.\n\nThe file types generally used for image files online are: .jpg, .png, and (less and less) .gif.\n\nAlt text is important to ensure that your site is ranked correctly on search sites and also for visually impaired visitors to your site.\n\nThe <img> tag normally is written as follows:\n\nLet’s try it out.\n\nCreate Your Own Image With An Alt Text\n\nSave an image (.jpg, .png, .gif format) of your choice in the same folder where you’ve saved index.html and page2.html. Call this image “testpic.jpg.”\n\nOn a new line in your HTML editor enter the following code:\n\nHit save and preview the index.html page in your browser.\n\nHow To Make an HTML List\n\nIn web design, there are 3 different types of lists which you may wish to add to your site.\n\nThe first is an <ol>: This is an ordered list of contents. For example:\n• Another goes here.\n\nInside the <ol> tag we list each item on the list inside <li> </li> tags.\n\nThe second type of list that you may wish to include is an <ul> unordered list. This is better known as a bullet point list and contains no numbers.\n\nAn example of this is:\n\nFinally, you may wish to include a definition list <dl> on your page. An example of a <dl> list is as follows:\n\nThe code used for the above is as follows:\n\nLet’s try it out. Open index.html and on a new line, enter the following HTML:\n\nNow hit save and check out the results in your browser. If everything worked out then it will display a bullet-pointed table displaying the information above.\n\nHow To Add Tables In HTML\n\nAnother way to keep your website looking neat and orderly is through the use of a table.\n\nThis is definitely the most complicated part of this tutorial, however, learning it will certainly pay off in the long-run.\n\nWith this in mind, tables can still be a useful way to present content on your page.\n\nWhat Does a Table Consist Of?\n\nWhen drawing a table we must open an element with the <table> opening tag. Inside this tag, we structure the table using the table rows, <tr>, and cells, <td>.\n\nAn example of an HTML table is as follows:\n\nThis will produce a 2-row table with 3 cells in each row.\n\nTables can get quite complicated, so be sure to check out our special HTML tables tutorial.\n\nHowever, watch out for these tags so that you can recognize them and use them as your skills develop.\n\nHere are the tables tags presented in a table – pun totally intended.\n\nTables, borders, spacing are usually styled using CSS but we will cover this in a later tutorial.\n\nGo to a new line on the index.html page within your text editor. Enter the following HTML code:\n\nHit save and preview it in your browser.\n\nCongratulations: You did it!\n\nHow To Close an HTML Document\n\nYou’ve reached the end of our absolute beginners HTML tutorial.\n\nThe final step we need to complete is to close the <body> and <html> tags at the end of each page using the following HTML code:\n\nYou’ve also learned to add headings, text, images, links, lists and basic tables to these pages.\n\nYou can now use this knowledge to create your own web pages containing these features and link them together.\n\nWe suggest that you further enhance your skills by experimenting with the code you’ve learned using different variables. You may also wish to learn about how to make your pages beautiful using CSS.\n\nThe power to create your own website is now in your hands.\n\nIn case things didn’t work out as intended, simply check your HTML code against the examples below.\n\nOur HTML tutorials teach you how to create a personal website or site for your business, without forcing you to learn unnecessary theory.\n\nWe’ve plenty of topics for intermediate and advanced HTML learners, too:\n\n\n\nVideo: This 3 minute crash course is a great way to start understanding HTML5.\n\nMeanwhile, our detailed HTML tags reference lets you find out more about every single HTML tag from to .\n\nEach tag reference includes background and examples, which show how to use the tag in question. It’s perfect for when you want to troubleshoot problems while coding HTML.\n\nBelow are some of the most common tags — used by nearly every website you encounter:\n\nThe HTML attributes section is designed to allow you to get up close and personal with the HTML attributes that you know and love while introducing you to some advanced attributes along the way.\n\nIf you are pretty confident in your HTML abilities but sometimes feel like double-checking your work then look no further than our HTML cheat sheet.\n\nThis handy guide will show you everything you need to know about HTML in a super-compact, and easy-to-understand format. It provides information on particular tags and specific attributes in an alphabetized format.\n\nYou can bookmark the page for easy retrieval. Or you can print out our PDF so you can keep it by your desk.\n\nOur blog includes posts covering all corners of the internet.\n\nWhy Did The British Government Ban These 10 Websites?\n\n100+ Places to Post and Share Your Photos Online\n\nIf you’ve already built your website then look no further than the HTML.com guide to web hosting.\n\nWe’ll help you find the best hosting provider for your website.\n\nWhether you are searching for a WordPress host, a cheap and cheerful space for your first website, or a dedicated hosting solution, our hosting section has reviews of all the big name hosting providers and a few smaller companies too, including:\n\nThe number one host for high-end WordPress hosting.\n\nNow that you’ve gotten started with HTML, you can improve your skills. It’s exciting to see everything you can do with web pages. Check out more of our tutorials and start learning now!"
    },
    {
        "link": "https://w3schools.com/html/html_basic.asp",
        "document": "In this chapter we will show some basic HTML examples.\n\nDon't worry if we use tags you have not learned about yet.\n\nAll HTML documents must start with a document type declaration: .\n\nThe HTML document itself begins with and ends with .\n\nThe visible part of the HTML document is between and .\n\nThe declaration represents the document type, and helps browsers to display web pages correctly.\n\nIt must only appear once, at the top of the page (before any HTML tags).\n\nThe declaration is not case sensitive.\n\nThe declaration for HTML5 is:\n\nHTML headings are defined with the to tags.\n\ndefines the most important heading. defines the least important heading:\n\nHTML paragraphs are defined with the tag:\n\nHTML links are defined with the tag:\n\nThe link's destination is specified in the attribute.\n\nAttributes are used to provide additional information about HTML elements.\n\nYou will learn more about attributes in a later chapter.\n\nHTML images are defined with the tag.\n\nThe source file ( ), alternative text ( ), , and are provided as attributes:\n\nHave you ever seen a Web page and wondered \"Hey! How did they do that?\"\n\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page.\n\nRight-click on an element (or a blank area), and choose \"Inspect\" to see what elements are made up of (you will see both the HTML and the CSS). You can also edit the HTML or CSS on-the-fly in the Elements or Styles panel that opens."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics",
        "document": "CSS allows you to create great-looking web pages, but how does it work under the hood? This article explains what CSS, what the basic syntax looks like, and how your browser applies CSS to HTML to style it.\n\nIn this article, we will take a simple HTML document and apply CSS to it, learning some practical details of the language along the way. We will also review the CSS syntax features you've not looked at yet.\n\nAs you know from your study of HTML, elements can have attributes that give further detail about the element being marked up. In CSS you can use attribute selectors to target elements with certain attributes. This lesson will show you how to use these very useful selectors.\n\nThe next set of selectors we will look at are referred to as pseudo-classes and pseudo-elements. There are a large number of these, and they often serve quite specific purposes. Once you know how to use them, you can look through the different types to see if there is something which works for the task you are trying to achieve.\n\nThe final selectors we will look at are called combinators. Combinators are used to combine other selectors in a way that allows us to select elements based on their location in the DOM relative to other elements (for example, child or sibling).\n\nEverything in CSS has a box around it, and understanding these boxes is key to being able to create more complex layouts with CSS, or to align items with other items. In this lesson, we will take a look at the CSS Box model. You'll get an understanding of how it works and the terminology that relates to it.\n\nThe aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS — the cascade, specificity, and inheritance — which control how CSS is applied to HTML and how conflicts between style declarations are resolved.\n\nCSS rules contain declarations, which in turn are composed of properties and values. Each property used in CSS has a value type that describes what kind of values it is allowed to have. In this lesson, we will take a look at some of the most frequently used value types, what they are, and how they work.\n\nUnderstanding how big the different features in your design will be is important. In this lesson we will summarize the various ways elements get a size via CSS and define a few terms about sizing that will help you in the future.\n\nIn this lesson, we will take a look at some of the creative things you can do with CSS backgrounds and borders. From adding gradients, background images, and rounded corners, backgrounds and borders are the answer to a lot of styling questions in CSS.\n\nIn this lesson we will take a look at how certain special elements are treated in CSS. Images, other media, and form elements behave a little differently from regular boxes in terms of your ability to style them with CSS. Understanding what is and isn't possible can save some frustration, and this lesson will highlight some of the main things that you need to know.\n\nThis article will give you guidance on how to go about debugging a CSS problem, and show you how the DevTools included in all modern browsers can help you to find out what is going on."
    },
    {
        "link": "https://w3schools.com/html/html5_syntax.asp",
        "document": "Consistent, clean, and tidy HTML code makes it easier for others to read and understand your code.\n\nHere are some guidelines and tips for creating good HTML code.\n\nAlways declare the document type as the first line in your document.\n\nThe correct document type for HTML is:\n\nHTML allows mixing uppercase and lowercase letters in element names.\n\nHowever, we recommend using lowercase element names, because:\n\nIn HTML, you do not have to close all elements (for example the element).\n\nHowever, we strongly recommend closing all HTML elements, like this:\n\nHTML allows mixing uppercase and lowercase letters in attribute names.\n\nHowever, we recommend using lowercase attribute names, because:\n\nHowever, we recommend quoting attribute values, because:\n• You MUST use quotes if the value contains spaces\n\nAlways Specify alt, width, and height for Images\n\nAlways specify the attribute for images. This attribute is important if the image for some reason cannot be displayed.\n\nAlso, always define the and of images. This reduces flickering, because the browser can reserve space for the image before loading.\n\nHTML allows spaces around equal signs. But space-less is easier to read and groups entities better together.\n\nWhen using an HTML editor, it is NOT convenient to scroll right and left to read the HTML code.\n\nTry to avoid too long code lines.\n\nDo not add blank lines, spaces, or indentations without a reason.\n\nFor readability, add blank lines to separate large or logical code blocks.\n\nFor readability, add two spaces of indentation. Do not use the tab key.\n\nThe element is required in HTML.\n\nThe contents of a page title is very important for search engine optimization (SEO)! The page title is used by search engine algorithms to decide the order when listing pages in search results.\n• provides a title for the page when it is added to favorites\n• displays a title for the page in search-engine results\n\nSo, try to make the title as accurate and meaningful as possible:\n\nAn HTML page will validate without the and tags:\n\nHowever, we strongly recommend to always add the and tags!\n\nOmitting and can also crash DOM and XML software.\n\nThe HTML <head> tag can also be omitted.\n\nBrowsers will add all elements before , to a default element.\n\nHowever, we recommend using the tag.\n\nIn HTML, it is optional to close empty elements.\n\nIf you expect XML/XHTML software to access your page, keep the closing slash (/), because it is required in XML and XHTML.\n\nYou should always include the attribute inside the tag, to declare the language of the Web page. This is meant to assist search engines and browsers.\n\nTo ensure proper interpretation and correct search engine indexing, both the language and the character encoding should be defined as early as possible in an HTML document:\n\nThe viewport is the user's visible area of a web page. It varies with the device - it will be smaller on a mobile phone than on a computer screen.\n\nYou should include the following element in all your web pages:\n\nThis gives the browser instructions on how to control the page's dimensions and scaling.\n\nThe part sets the width of the page to follow the screen-width of the device (which will vary depending on the device).\n\nThe part sets the initial zoom level when the page is first loaded by the browser.\n\nHere is an example of a web page without the viewport meta tag, and the same web page with the viewport meta tag:\n\nShort comments should be written on one line, like this:\n\nComments that spans more than one line, should be written like this:\n\nLong comments are easier to observe if they are indented with two spaces.\n\nUse simple syntax for linking to style sheets (the attribute is not necessary):\n\nShort CSS rules can be written compressed, like this:\n\nLong CSS rules should be written over multiple lines:\n• Place the opening bracket on the same line as the selector\n• Use one space before the opening bracket\n• Use two spaces of indentation\n• Use semicolon after each property-value pair, including the last\n• Only use quotes around values if the value contains spaces\n• Place the closing bracket on a new line, without leading spaces\n\nUse simple syntax for loading external scripts (the attribute is not necessary):\n\nUsing \"untidy\" HTML code can result in JavaScript errors.\n\nThese two JavaScript statements will produce different results:\n\nSome web servers (Apache, Unix) are case sensitive about file names: \"london.jpg\" cannot be accessed as \"London.jpg\".\n\nOther web servers (Microsoft, IIS) are not case sensitive: \"london.jpg\" can be accessed as \"London.jpg\".\n\nIf you use a mix of uppercase and lowercase, you have to be aware of this.\n\nIf you move from a case-insensitive to a case-sensitive server, even small errors will break your web!\n\nTo avoid these problems, always use lowercase file names!\n\nHTML files should have a .html extension (.htm is allowed).\n\nThere is no difference between the .htm and .html file extensions!\n\nBoth will be treated as HTML by any web browser and web server.\n\nWhen a URL does not specify a filename at the end (like \"https://www.w3schools.com/\"), the server just adds a default filename, such as \"index.html\", \"index.htm\", \"default.html\", or \"default.htm\".\n\nIf your server is configured only with \"index.html\" as the default filename, your file must be named \"index.html\", and not \"default.html\".\n\nHowever, servers can be configured with more than one default filename; usually you can set up as many default filenames as you want."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Getting_started/Your_first_website/Styling_the_content",
        "document": "Like HTML, CSS is not a programming language. It's not a markup language either. CSS is a style sheet language. CSS is what you use to selectively style HTML elements. For example, this CSS selects paragraph text, setting the color to red:\n• Inside your folder, create another new folder called .\n• Using a text editor, paste the three lines of CSS shown above into a new file.\n• Save the file inside your folder with a filename of . To make the code work, we still need to apply this CSS (above) to your HTML document. Otherwise, the styling won't change the appearance of the HTML.\n• Open your file. Paste the following line inside the HTML head (between the and tags):\n• Save and load it in your browser. You should see something like this: If your paragraph text is red, congratulations! Your CSS is working.\n\nLet's dissect the CSS code for red paragraph text to understand how it works: The whole structure is called a ruleset. (The term ruleset is often referred to as just rule.) Note the names of the individual parts: This is the HTML element name at the start of the ruleset. It defines the element(s) to be styled (in this example, elements). To style a different element, change the selector. This is a single rule like . It specifies which of the element's properties you want to style. These are features of an HTML element that you can change the values of, to make it styled differently. (In this example, is a property of the elements.) In CSS, you choose which properties you want to affect in the rule. To the right of the property—after the colon—there is the property value. This chooses one out of many possible appearances for a given property. (For example, there are many values in addition to .) Note the other important parts of the syntax:\n• Apart from the selector, each ruleset must be wrapped in curly braces. ( )\n• Within each declaration, you must use a colon ( ) to separate the property from its value or values.\n• Within each ruleset, you must use a semicolon ( ) to separate each declaration from the next one. To modify multiple property values in one ruleset, write them separated by semicolons, like this:\n\nThere are many different types of selectors. The examples above use element selectors, which select all elements of a given type. But we can make more specific selections as well. Here are some of the more common types of selectors: What does it select All HTML elements of the specified type. The element on the page with the specified ID. On a given HTML page, each id value should be unique. The element(s) on the page with the specified class. Multiple instances of the same class can appear on a page. The element(s) on the page with the specified attribute. The specified element(s), but only when in the specified state. (For example, when a cursor hovers over a link.) \n\nselects , but only when the mouse pointer is hovering over the link. There are many more selectors to discover. To learn more, see our selectors tutorials, starting with Basic selectors.\n\nNow that we've explored some CSS fundamentals, let's improve the appearance of the example by adding more rules and information to the file.\n• First, find the output from Google Fonts that you previously saved from What will your website look like?. Add the element somewhere inside your 's head (anywhere between the and tags). It looks something like this: This code links your page to a style sheet that loads the Open Sans font family with your webpage.\n• Next, delete the existing rule you have in your file. It was a good test, but let's not continue with lots of red text.\n• Add the following lines (shown below), replacing the assignment with your selection from What will your website look like?. The property refers to the font(s) you want to use for text. This rule defines a global base font and font size for the whole page. Since is the parent element of the whole page, all elements inside it inherit the same and . html { font-size: 10px; /* px means \"pixels\": the base font size is now 10 pixels high */ font-family: \"Open Sans\", sans-serif; /* this should be the rest of the output you got from Google Fonts */ } Note: Anything in CSS between and is a CSS comment. The browser ignores comments as it renders the code. CSS comments are a way for you to write helpful notes about your code or logic.\n• Now let's set font sizes for elements that will have text inside the HTML body (<h1>, , and ). We'll also center the heading. Finally, let's expand the second ruleset (below) with settings for line height and letter spacing to make body content more readable. Adjust the values as you like. Your work-in-progress should look similar to this:\n\nSomething you'll notice about CSS as you use it more: a lot of it is about boxes. This includes setting size, color, and position. Most HTML elements on your page can be thought of as boxes sitting on top of other boxes. CSS layout is mostly based on the box model. Each box taking up space on your page has properties like:\n• , the space around the content. In the example below, it is the space around the paragraph text.\n• , the solid line that is just outside the padding.\n• , the space around the outside of the border. In this section we also use:\n• , the color behind an element's content and padding.\n• , the color of an element's content (usually text).\n• sets a drop shadow on the text inside an element.\n• sets the display mode of an element. (keep reading to learn more) To continue, let's add more CSS. Keep adding these new rules at the bottom of . Experiment with changing values to see what happens.\n\nYou may have noticed there's a horrible gap at the top of the body. That happens because browsers apply default styling to the h1 element (among others). That might seem like a bad idea, but the intent is to provide basic readability for unstyled pages. To eliminate the gap, we overwrite the browser's default styling with the setting . Next, we set the heading's top and bottom padding to 20 pixels. Following that, we set the heading text to be the same color as the HTML background color. Finally, applies a shadow to the text content of the element. Its four values are:\n• The first pixel value sets the horizontal offset of the shadow from the text: how far it moves across.\n• The second pixel value sets the vertical offset of the shadow from the text: how far it moves down.\n• The third pixel value sets the blur radius of the shadow. A larger value produces a more fuzzy-looking shadow.\n• The fourth value sets the base color of the shadow. Try experimenting with different values to see how it changes the appearance.\n\nNext, we center the image to make it look better. We could use the same trick as we did for the body. But there are differences that require an additional setting to make the CSS work. The is a block element, meaning it takes up space on the page. The margin applied to a block element will be respected by other elements on the page. In contrast, images are inline elements; for the auto margin trick to work on this image, we must give it block-level behavior using . Finally, we include to make sure that, if the image is larger than the set on the body (600 pixels), it will be displayed at this width, and no bigger. Note: Don't be too concerned if you don't completely understand and the differences between a block element and an inline element, or . They will make more sense as you continue your study of CSS. You can find more information about these properties on MDN's and reference pages."
    },
    {
        "link": "https://google.github.io/styleguide/htmlcssguide.html",
        "document": "This document defines formatting and style rules for HTML and CSS. It aims at improving collaboration, code quality, and enabling supporting infrastructure. It applies to raw, working files that use HTML and CSS, including Sass and GSS files. Tools are free to obfuscate, minify, and compile as long as the general code quality is maintained.\n\nUse HTTPS for embedded resources where possible.\n\nAlways use HTTPS ( ) for images and other media files, style sheets, and scripts, unless the respective files are not available over HTTPS.\n\nDon’t use tabs or mix tabs and spaces for indentation.\n\nAll code has to be lowercase: This applies to HTML element names, attributes, attribute values (unless ), CSS selectors, properties, and property values (with the exception of strings).\n\nTrailing white spaces are unnecessary and can complicate diffs.\n\nMake sure your editor uses UTF-8 as character encoding, without a byte order mark.\n\nSpecify the encoding in HTML templates and documents via . Do not specify the encoding of style sheets as these assume UTF-8.\n\nExplain code as needed, where possible.\n\nUse comments to explain code: What does it cover, what purpose does it serve, why is respective solution used or preferred?\n\nHighlight todos by using the keyword only, not other common formats like .\n\nAppend action items after a colon as in .\n\nAlways put your HTML in no-quirks mode by including at the beginning of the document.\n\nA document without a doctype is rendered in “quirks mode”, and one with a different doctype may be rendered in “limited-quirks mode”. These modes don’t follow the widely-understood, widely-documented behavior for various core HTML and CSS constructs, and are likely to cause subtle failures and incompatibilities especially when re-using code that expects no-quirks mode.\n\nUse valid HTML where possible.\n\nUse valid HTML code unless that is not possible due to otherwise unattainable performance goals regarding file size.\n\nUse tools such as the W3C HTML validator to test.\n\nUsing valid HTML is a measurable baseline quality attribute that contributes to learning about technical requirements and constraints, and that ensures proper HTML usage.\n\nUse HTML according to its purpose.\n\nUse elements (sometimes incorrectly called “tags”) for what they have been created for. For example, use heading elements for headings, elements for paragraphs, elements for anchors, etc.\n\nUsing HTML according to its purpose is important for accessibility, reuse, and code efficiency reasons.\n\nFor multimedia, such as images, videos, animated objects via , make sure to offer alternative access. For images that means use of meaningful alternative text ( ) and for video and audio transcripts and captions, if available.\n\nProviding alternative contents is important for accessibility reasons: A blind user has few cues to tell what an image is about without , and other users may have no way of understanding what video or audio contents are about either.\n\nStrictly keep structure (markup), presentation (styling), and behavior (scripting) apart, and try to keep the interaction between the three to an absolute minimum.\n\nThat is, make sure documents and templates contain only HTML and HTML that is solely serving structural purposes. Move everything presentational into style sheets, and everything behavioral into scripts.\n\nIn addition, keep the contact area as small as possible by linking as few style sheets and scripts as possible from documents and templates.\n\nSeparating structure from presentation from behavior is important for maintenance reasons. It is always more expensive to change HTML documents and templates than it is to update style sheets and scripts.\n\nDo not use entity references.\n\nThere is no need to use entity references like , , or , assuming the same encoding (UTF-8) is used for files and editors as well as among teams.\n\nThe only exceptions apply to characters with special meaning in HTML (like and ) as well as control or “invisible” characters (like no-break spaces).\n\nFor file size optimization and scannability purposes, consider omitting optional tags. The HTML5 specification defines what tags can be omitted.\n\nDo not use attributes for style sheets (unless not using CSS) and scripts (unless not using JavaScript).\n\nSpecifying attributes in these contexts is not necessary as HTML5 implies and as defaults. This can be safely done even for older browsers.\n\nPrefer attributes for styling and attributes for scripting.\n\nWhere attributes are strictly required, always include a hyphen in the value to ensure it does not match the JavaScript identifier syntax, e.g. use rather than just or .\n\nWhen an element has an attribute, browsers will make that available as a named property on the global prototype, which may cause unexpected behavior. While attribute values containing a hyphen are still available as property names, these cannot be referenced as global JavaScript variables.\n\nUse a new line for every block, list, or table element, and indent every such child element.\n\nIndependent of the styling of an element (as CSS allows elements to assume a different role per property), put every block, list, or table element on a new line.\n\nAlso, indent them if they are child elements of a block, list, or table element.\n\nWhile there is no column limit recommendation for HTML, you may consider wrapping long lines if it significantly improves readability.\n\nWhen line-wrapping, each continuation line should be indented to distinguish wrapped attributes from child elements. Lines should be wrapped consistently within a project, ideally enforced by automated code formatting tools.\n\nUse double ( ) rather than single quotation marks ( ) around attribute values.\n\nUse valid CSS where possible.\n\nUnless dealing with CSS validator bugs or requiring proprietary syntax, use valid CSS code.\n\nUse tools such as the W3C CSS validator to test.\n\nUsing valid CSS is a measurable baseline quality attribute that allows to spot CSS code that may not have any effect and can be removed, and that ensures proper CSS usage.\n\nInstead of presentational or cryptic names, always use class names that reflect the purpose of the element in question, or that are otherwise generic.\n\nNames that are specific and reflect the purpose of the element should be preferred as these are most understandable and the least likely to change.\n\nGeneric names are simply a fallback for elements that have no particular or no meaning different from their siblings. They are typically needed as “helpers.”\n\nUsing functional or generic names reduces the probability of unnecessary document or template changes.\n\nUse class names that are as short as possible but as long as necessary.\n\nTry to convey what a class is about while being as brief as possible.\n\nUsing class names this way contributes to acceptable levels of understandability and code efficiency.\n\nDo not concatenate words and abbreviations in selectors by any characters (including none at all) other than hyphens, in order to improve understanding and scannability.\n\nIn large projects as well as for code that gets embedded in other projects or on external sites use prefixes (as namespaces) for class names. Use short, unique identifiers followed by a dash.\n\nUsing namespaces helps preventing naming conflicts and can make maintenance easier, for example in search and replace operations.\n\nUnless necessary (for example with helper classes), do not use element names in conjunction with classes.\n\nAvoiding unnecessary ancestor selectors is useful for performance reasons.\n\nID attributes are expected to be unique across an entire page, which is difficult to guarantee when a page contains many components worked on by many different engineers. Class selectors should be preferred in all situations.\n\nUse shorthand properties where possible.\n\nCSS offers a variety of shorthand properties (like ) that should be used whenever possible, even in cases where only one value is explicitly set.\n\nUsing shorthand properties is useful for code efficiency and understandability.\n\nDo not use units after values unless they are required.\n\nPut s in front of values or lengths between -1 and 1.\n\nUse 3 character hexadecimal notation where possible.\n\nFor color values that permit it, 3 character hexadecimal notation is shorter and more succinct.\n\nThese declarations break the natural cascade of CSS and make it difficult to reason about and compose styles. Use selector specificity to override properties instead.\n\nAvoid user agent detection as well as CSS “hacks”—try a different approach first.\n\nIt’s tempting to address styling differences over user agent detection or special CSS filters, workarounds, and hacks. Both approaches should be considered last resort in order to achieve and maintain an efficient and manageable code base. Put another way, giving detection and hacks a free pass will hurt projects in the long run as projects tend to take the way of least resistance. That is, allowing and making it easy to use detection and hacks means using detection and hacks more frequently—and more frequently is too frequently.\n\nSort declarations consistently within a project. In the absence of tooling to automate and enforce a consistent sort order, consider putting declarations in alphabetical order in order to achieve consistent code in a way that is easy to learn, remember, and manually maintain.\n\nIgnore vendor-specific prefixes for sorting purposes. However, multiple vendor-specific prefixes for a certain CSS property should be kept sorted (e.g. -moz prefix comes before -webkit).\n\nIndent all block content, that is rules within rules as well as declarations, so to reflect hierarchy and improve understanding.\n\nUse a semicolon after every declaration.\n\nEnd every declaration with a semicolon for consistency and extensibility reasons.\n\nAlways use a single space between property and value (but no space between property and colon) for consistency reasons.\n\nUse a space between the last selector and the declaration block.\n\nAlways use a single space between the last selector and the opening brace that begins the declaration block.\n\nThe opening brace should be on the same line as the last selector in a given rule.\n\nSeparate selectors and declarations by new lines.\n\nAlways start a new line for each selector and declaration.\n\nAlways put a blank line (two line breaks) between rules.\n\nUse single ( ) rather than double ( ) quotation marks for attribute selectors and property values.\n\nDo not use quotation marks in URI values ( ).\n\nException: If you do need to use the rule, use double quotation marks—single quotation marks are not permitted.\n\nIf possible, group style sheet sections together by using comments. Separate sections with new lines.\n\nIf you’re editing code, take a few minutes to look at the code around you and determine its style. If they use spaces around all their arithmetic operators, you should too. If their comments have little boxes of hash marks around them, make your comments have little boxes of hash marks around them too.\n\nThe point of having style guidelines is to have a common vocabulary of coding so people can concentrate on what you’re saying rather than on how you’re saying it. We present global style rules here so people know the vocabulary, but local style is also important. If code you add to a file looks drastically different from the existing code around it, it throws readers out of their rhythm when they go to read it. Avoid this."
    },
    {
        "link": "https://w3schools.com/html/html_css.asp",
        "document": "CSS saves a lot of work. It can control the layout of multiple web pages all at once.\n\nCascading Style Sheets (CSS) is used to format the layout of a webpage.\n\nWith CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and much more!\n\nTip: The word cascading means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to \"blue\", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)!\n\nCSS can be added to HTML documents in 3 ways:\n• Inline - by using the attribute inside HTML elements\n• Internal - by using a element in the section\n• External - by using a element to link to an external CSS file\n\nThe most common way to add CSS, is to keep the styles in external CSS files. However, in this tutorial we will use inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself.\n\nAn inline CSS is used to apply a unique style to a single HTML element.\n\nAn inline CSS uses the attribute of an HTML element.\n\nThe following example sets the text color of the element to blue, and the text color of the element to red:\n\nAn internal CSS is used to define a style for a single HTML page.\n\nAn internal CSS is defined in the section of an HTML page, within a element.\n\nThe following example sets the text color of ALL the elements (on that page) to blue, and the text color of ALL the elements to red. In addition, the page will be displayed with a \"powderblue\" background color:\n\nAn external style sheet is used to define the style for many HTML pages.\n\nTo use an external style sheet, add a link to it in the section of each HTML page:\n\nThe external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension.\n\nHere is what the \"styles.css\" file looks like:\n\nHere, we will demonstrate some commonly used CSS properties. You will learn more about them later.\n\nThe CSS property defines the text color to be used.\n\nThe CSS property defines the font to be used.\n\nThe CSS property defines the text size to be used.\n\nThe CSS property defines a border around an HTML element.\n\nTip: You can define a border for nearly all HTML elements.\n\nThe CSS property defines a padding (space) between the text and the border.\n\nThe CSS property defines a margin (space) outside the border.\n\nExternal style sheets can be referenced with a full URL or with a path relative to the current web page.\n• Use the HTML attribute for inline styling\n• Use the HTML element to define internal CSS\n• Use the HTML element to refer to an external CSS file\n• Use the HTML element to store <style> and <link> elements\n• Use the CSS property for text colors\n• Use the CSS property for text fonts\n• Use the CSS property for text sizes\n• Use the CSS property for borders\n• Use the CSS property for space inside the border\n• Use the CSS property for space outside the border"
    }
]