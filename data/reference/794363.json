[
    {
        "link": "https://discourse.pyrevitlabs.io/t/use-autodesk-imports-with-pyrevit-transaction/3081",
        "document": "Yes, in the pyrevit.api module, in which you can see that it also does ; that same DB is then exposed in the init module, so it is exactly the same thing.\n\nThe code for pyrevit’s Transaction class can be found here.\n\n the method is the one that is called when exiting from the context manager, and you can see that it handles the if everything is good and in case of an exception, but there’s no call to .\n\nI’m not an IronPython guru, so I don’t know if the Dispose gets magically called during the garbage collection, or if it is an overlook by our part and we should call that method on exit.\n\nThe only piece of information that I can find is that with IronPython you can use the statement on objects to automatically dispose them on exit (but it’s not happening here)."
    },
    {
        "link": "https://learnrevitapi.com/free-lessons/1-05-pyrevit-template-and-anatomy",
        "document": "Welcome to the Fifth Lesson Today, we're diving into something really important: pyRevit script anatomy. In this lesson, I'll walk you through some pre-made templates that I've prepared for you and explain you pyRevit's meta tags. These templates will be a huge time saver in all your future projects, so you don't have to start with a blank page every time.\n\nYou will notice in both themplate the first line defines UTF-8 encoding. If you are not familiar, in IronPython, we need to explicitly declare encoding. UTF-8 is the standard which will allow you to use non standard ASCII characters like German, Russian, Chinese and other special characters.\n\nUsually people keep tooltip information short, but I like to break it down into multiple sections and provide more information like this: This way users can get used to this, and always know that they can learn what is the button, how to use it and other upcoming or updated features.\n\nIt's best to only include only the most used imports in your template to keep it neat. So feel free to remove what you don't need. But as a beginner, you can also put everything here so you don't have to remember where something comes from. And then slowly adjust to only most essential imports. But I strongly recommend you to leave .NET List import, because it's hard to remember by heart where it comes from. And while you won't need it in every script, it's very often required as an argument in Revit API methods. 💡Also keep in mind that there are many classes that can be located in discipline specific namespaces like Architecture, Structure, Mechanical, Electrical and many others… You can always check in Revit API Docs where they come from\n\nThe more readable you can make your code, the easier it is to maintain it. Personally, I like to organize my code with large ASCI-Art text blocks to separate into sections like Imports, Variables, Functions and so on. And on smaller scripts I use emojis. This is purely personal preference, and not a python standard at all. Python experts are probably going to go against it, but I know that many beginners love it, because it makes it so much easier to navigate, especially when you watch my tutorials.\n\nAlright, and now you have your pyRevit Template and you know about pyRevit metatags. You are ready now to create your first Revit Add-in and that's what we will do in the next lesson."
    },
    {
        "link": "https://reddit.com/r/bim/comments/1bavegk/help_me_get_started_with_revit_api_development_on",
        "document": "Hey guys, I am an architect but have been interested in doing BIM automation for my firm. I understand that I can use Python to access the Revit API, but most of the resources I have come across use C# or VB. I am not familiar with these languages at all. Does anyone have any recommendations for getting started with Revit API development in Python? Any assistance will be greatly appreciated. Thank you!"
    },
    {
        "link": "https://static.au-uw2-prd.autodesk.com/Class_Handout_BES219848_Revit_Programming_for_Beginners_Easily_Access_the_Revit_API_Using_Free_Tools_Dan_Mapes.pdf",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo?view=net-9.0",
        "document": "The following code example demonstrates how to use the ProcessStartInfo class to start Internet Explorer. The destination URLs are provided as ProcessStartInfo arguments.\n\nProcessStartInfo is used together with the Process component. When you start a process using the Process class, you have access to process information in addition to that available when attaching to a running process.\n\nYou can use the ProcessStartInfo class for better control over the process you start. You must at least set the FileName property, either manually or using the constructor. The file name is any application or document. Here a document is defined to be any file type that has an open or default action associated with it. You can view registered file types and their associated applications for your computer by using the Folder Options dialog box, which is available through the operating system. The Advanced button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.\n\nIn addition, you can set other properties that define actions to take with that file. You can specify a value specific to the type of the FileName property for the Verb property. For example, you can specify \"print\" for a document type. Additionally, you can specify Arguments property values to be command-line arguments to pass to the file's open procedure. For example, if you specify a text editor application in the FileName property, you can use the Arguments property to specify a text file to be opened by the editor.\n\nStandard input is usually the keyboard, and standard output and standard error are usually the monitor screen. However, you can use the RedirectStandardInput, RedirectStandardOutput, and RedirectStandardError properties to cause the process to get input from or return output to a file or other device. If you use the StandardInput, StandardOutput, or StandardError properties on the Process component, you must first set the corresponding value on the ProcessStartInfo property. Otherwise, the system throws an exception when you read or write to the stream.\n\nSet the UseShellExecute property to specify whether to start the process by using the operating system shell. If UseShellExecute is set to , the new process inherits the standard input, standard output, and standard error streams of the calling process, unless the RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError properties, respectively, are set to .\n\nYou can change the value of any ProcessStartInfo property up to the time that the process starts. After you start the process, changing these values has no effect.\n\nInitializes a new instance of the ProcessStartInfo class without specifying a file name with which to start the process. Initializes a new instance of the ProcessStartInfo class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application. Initializes a new instance of the ProcessStartInfo class and specifies a file name such as an application or document with which to start the process. Gets a collection of command-line arguments to use when starting the application. Strings added to the list don't need to be previously escaped. Gets or sets the set of command-line arguments to use when starting the application. Gets or sets a value indicating whether to start the process in a new window. Gets or sets a value that identifies the domain to use when starting the process. If this value is , the UserName property must be specified in UPN format. Gets the environment variables that apply to this process and its child processes. Gets search paths for files, directories for temporary files, application-specific options, and other similar information. Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started. Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started. Gets or sets the application or document to start. Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry. Gets or sets a secure string that contains the user password to use when starting the process. Gets or sets the user password in clear text to use when starting the process. Gets or sets a value that indicates whether the error output of an application is written to the StandardError stream. Gets or sets a value indicating whether the input for an application is read from the StandardInput stream. Gets or sets a value that indicates whether the textual output of an application is written to the StandardOutput stream. Gets or sets the preferred encoding for error output. Gets or sets the preferred encoding for standard input. Gets or sets the preferred encoding for standard output. Gets or sets the user name to use when starting the process. If you use the UPN format, , the Domain property must be . Gets or sets a value indicating whether to use the operating system shell to start the process. Gets or sets the verb to use when opening the application or document specified by the FileName property. Gets the set of verbs associated with the type of file specified by the FileName property. Gets or sets the window state to use when the process is started. When the UseShellExecute property is , gets or sets the working directory for the process to be started. When UseShellExecute is , gets or sets the directory that contains the process to be started. Determines whether the specified object is equal to the current object. (Inherited from Object) Gets the Type of the current instance. (Inherited from Object)"
    },
    {
        "link": "https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.start?view=net-9.0",
        "document": "This API is not CLS-compliant. Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new Process component. Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process The name of an application file to run in the process. Command-line arguments to pass when starting the process. The user name to use when starting the process. A SecureString that contains the password to use when starting the process. The domain to use when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified. An error occurred when opening the associated file. The file specified in the could not be found. The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" The process object has already been disposed. This member is not supported on Linux or macOS (.NET Core only). Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password). Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName, Arguments, UserName, Password, and Domain properties of the StartInfo property, and calling Start for the Process instance. Similarly, in the same way that the Run dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . The file name must represent an executable file in the Start overloads that have , , and parameters. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property.\n\nThis API is not CLS-compliant. Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new Process component. Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process The name of an application file to run in the process. The user name to use when starting the process. A SecureString that contains the password to use when starting the process. The domain to use when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified. There was an error in opening the associated file. The file specified in the could not be found. The process object has already been disposed. This member is not supported on Linux or macOS (.NET Core only). The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a Win32Exception when an attempt is made to start an application associated with a nonexecutable file. // NOTE: This example requires a text.txt file file in your Documents folder using System; using System.Diagnostics; using System.Security; using System.ComponentModel; class Example { static void Main() { Console.Write(\"Enter your domain: \"); string domain = Console.ReadLine(); Console.Write(\"Enter you user name: \"); string uname = Console.ReadLine(); Console.Write(\"Enter your password: \"); SecureString password = new SecureString(); ConsoleKeyInfo key; do { key = Console.ReadKey(true); // Ignore any key out of range. if (((int)key.Key) >= 33 && ((int)key.Key <= 90) && key.Key != ConsoleKey.Enter) { // Append the character to the password. password.AppendChar(key.KeyChar); Console.Write(\"*\"); } // Exit if Enter key is pressed. } while (key.Key != ConsoleKey.Enter); Console.WriteLine(); try { Console.WriteLine(\"\n\nTrying to launch NotePad using your login information...\"); Process.Start(\"notepad.exe\", uname, password, domain); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\\\"; try { // The following call to Start succeeds if test.txt exists. Console.WriteLine(\"\n\nTrying to launch 'text.txt'...\"); Process.Start(path + \"text.txt\"); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } try { // Attempting to start in a shell using this Start overload fails. This causes // the following exception, which is picked up in the catch block below: // The specified executable is not a valid application for this OS platform. Console.WriteLine(\"\n\nTrying to launch 'text.txt' with your login information...\"); Process.Start(path + \"text.txt\", uname, password, domain); } catch (Win32Exception ex) { Console.WriteLine(ex.Message); } finally { password.Dispose(); } } } // NOTE: This example requires a text.txt file file in your Documents folder open System open System.Diagnostics open System.Security open System.ComponentModel printf \"Enter your domain: \" let domain = stdin.ReadLine() printf \"Enter you user name: \" let uname = stdin.ReadLine() printf \"Enter your password: \" let password = new SecureString() let mutable key = Console.ReadKey(true) while key.Key <> ConsoleKey.Enter do // Ignore any key out of range. if int key.Key >= 33 && int key.Key <= 90 && key.Key <> ConsoleKey.Enter then // Append the character to the password. password.AppendChar key.KeyChar Console.Write \"*\" key <- Console.ReadKey(true) printfn \"\" try printfn \"\n\nTrying to launch NotePad using your login information...\" Process.Start(\"notepad.exe\", uname, password, domain) |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" let path = Environment.GetFolderPath Environment.SpecialFolder.MyDocuments + @\"\\\" try // The following call to Start succeeds if test.txt exists. printfn \"\n\nTrying to launch 'text.txt'...\" Process.Start $\"{path}text.txt\" |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" try try // Attempting to start in a shell using this Start overload fails. This causes // the following exception, which is picked up in the catch block below: // The specified executable is not a valid application for this OS platform. printfn \"\n\nTrying to launch 'text.txt' with your login information...\" Process.Start($\"{path}text.txt\", uname, password, domain) |> ignore with :? Win32Exception as ex -> printfn $\"{ex.Message}\" finally password.Dispose() ' This sample requires a text.txt file file in your documents folder. ' You'll also need to set the startup object in the project to Sub Main. Imports System.Diagnostics Imports System.Security Imports System.ComponentModel Module Program Sub Main() Console.Write(\"Enter your domain: \") Dim domain As String = Console.ReadLine() Console.Write(\"Enter you user name: \") Dim uname As String = Console.ReadLine() Console.Write(\"Enter your password: \") Dim password As New SecureString() Dim key As ConsoleKeyInfo Do key = Console.ReadKey(True) ' Ignore any key out of range. If key.Key >= 33 AndAlso key.Key <= 90 AndAlso key.Key <> ConsoleKey.Enter Then ' Append the character to the password. password.AppendChar(key.KeyChar) Console.Write(\"*\") End If ' Exit if Enter key is pressed. Loop While key.Key <> ConsoleKey.Enter Console.WriteLine() Try Console.WriteLine(vbCrLf + \"Trying to launch NotePad using your login information...\") Process.Start(\"notepad.exe\", uname, password, domain) Catch ex As Win32Exception Console.WriteLine(ex.Message) End Try Dim path As String = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) + \"\\\" Try ' The following call to Start succeeds if test.txt exists. Console.WriteLine(vbCrLf + \"Trying to launch 'text.txt'...\") Process.Start(path + \"Text.txt\") Catch ex As Win32Exception Console.WriteLine(ex.Message) End Try Try ' Attempting to start in a shell using this Start overload fails. This causes ' the following exception, which is picked up in the catch block below: ' The specified executable is not a valid application for this OS platform. Console.WriteLine(vbCrLf + \"Trying to launch 'text.txt' with your login information...\") Process.Start(path + \"Text.txt\", uname, password, domain) Catch ex As Win32Exception Console.WriteLine(ex.Message) Finally password.Dispose() End Try End Sub End Module Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password). Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName, UserName, Password, and Domain properties of the StartInfo property, and calling Start for the Process instance. Similarly, in the same way that the Run dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . The file name must represent an executable file in the Start overloads that have , , and parameters. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property.\n\nStarts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new Process component. Public Shared Function Start (fileName As String, arguments As String) As Process The name of an application file to run in the process. Command-line arguments to pass when starting the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. The or parameter is . An error occurred when opening the associated file. The file specified in the could not be found. The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" The process object has already been disposed. The PATH environment variable has a string containing quotes. The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying its file name and command-line arguments. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName and Arguments members of the StartInfo property, and calling Start for the Process instance. Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the dialog box of the Windows menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". If the parameter represents an executable file, the parameter might represent a file to act upon, such as the text file in . If the parameter represents a command (.cmd) file, the parameter must include either a \" \" or \" \" argument to specify whether the command window exits or remains after completion. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts a process resource by specifying the name of a document or application file and associates the resource with a new Process component. The name of a document or application file to run in the process. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. An error occurred when opening the associated file. The file specified in the could not be found. The process object has already been disposed. The PATH environment variable has a string containing quotes. The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying its file name. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. The overload is an alternative to the explicit steps of creating a new Process instance, setting the FileName member of the StartInfo property, and calling Start for the Process instance. You can start a ClickOnce application by setting the parameter to the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. Starting a process by specifying its file name is similar to typing the information in the dialog box of the Windows menu. Therefore, the file name does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application installed on the system. For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated .doc files with a word processing tool, such as Microsoft Word. Similarly, in the same way that the dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the parameter. For example, you can set the parameter to either \"Notepad.exe\" or \"Notepad\". This overload does not allow command-line arguments for the process. If you need to specify one or more command-line arguments for the process, use the Process.Start(ProcessStartInfo) or Process.Start(String, String) overloads. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new Process component. The ProcessStartInfo that contains the information that is used to start the process, including the file name and any command-line arguments. A new Process that is associated with the process resource, or if no process resource is started. Note that a new process that's started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its HasExited property already set to . In this case, the started process may have activated an existing instance of itself and then exited. No file name was specified in the parameter's FileName property. The UseShellExecute property of the parameter is and the RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError property is also . The UseShellExecute property of the parameter is and the UserName property is not or empty or the Password property is not . The process object has already been disposed. An error occurred when opening the associated file. The file specified in the parameter's FileName property could not be found. The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\" Method not supported on operating systems without shell support such as Nano Server (.NET Core only). The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser. It then starts some other instances of Internet Explorer and displays some specific pages or sites. Finally it starts Internet Explorer with the window being minimized while navigating to a specific site. For additional examples of other uses of this method, refer to the individual properties of the ProcessStartInfo class. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; // Opens the Internet Explorer application. void OpenApplication(String^ myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process::Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process::Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // URLs are not considered documents. They can only be opened // by passing them as arguments. Process::Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process::Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo^ startInfo = gcnew ProcessStartInfo(\"IExplore.exe\"); startInfo->WindowStyle = ProcessWindowStyle::Minimized; Process::Start(startInfo); startInfo->Arguments = \"www.northwindtraders.com\"; Process::Start(startInfo); } int main() { // Get the path that stores favorite links. String^ myFavoritesPath = Environment::GetFolderPath(Environment::SpecialFolder::Favorites); OpenApplication(myFavoritesPath); OpenWithArguments(); OpenWithStartInfo(); } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { // Opens the Internet Explorer application. void OpenApplication(string myFavoritesPath) { // Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\"); // Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath); } // Opens urls and .html documents using Internet Explorer. void OpenWithArguments() { // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\"); // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.htm\"); Process.Start(\"IExplore.exe\", \"C:\\\\myPath\\\\myFile.asp\"); } // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. void OpenWithStartInfo() { ProcessStartInfo startInfo = new ProcessStartInfo(\"IExplore.exe\"); startInfo.WindowStyle = ProcessWindowStyle.Minimized; Process.Start(startInfo); startInfo.Arguments = \"www.northwindtraders.com\"; Process.Start(startInfo); } static void Main() { // Get the path that stores favorite links. string myFavoritesPath = Environment.GetFolderPath(Environment.SpecialFolder.Favorites); MyProcess myProcess = new MyProcess(); myProcess.OpenApplication(myFavoritesPath); myProcess.OpenWithArguments(); myProcess.OpenWithStartInfo(); } } } module processstartstatic open System open System.Diagnostics // Opens the Internet Explorer application. let openApplication (myFavoritesPath: string) = // Start Internet Explorer. Defaults to the home page. Process.Start \"IExplore.exe\" |> ignore // Display the contents of the favorites folder in the browser. Process.Start myFavoritesPath |> ignore // Opens urls and .html documents using Internet Explorer. let openWithArguments () = // url's are not considered documents. They can only be opened // by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") |> ignore // Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.htm\") |> ignore Process.Start(\"IExplore.exe\", @\"C:\\myPath\\myFile.asp\") |> ignore // Uses the ProcessStartInfo class to start new processes, // both in a minimized mode. let openWithStartInfo () = let startInfo = ProcessStartInfo \"IExplore.exe\" startInfo.WindowStyle <- ProcessWindowStyle.Minimized Process.Start startInfo |> ignore startInfo.Arguments <- \"www.northwindtraders.com\" Process.Start startInfo |> ignore // Get the path that stores favorite links. let myFavoritesPath = Environment.GetFolderPath Environment.SpecialFolder.Favorites openApplication myFavoritesPath openWithArguments () openWithStartInfo () Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess ' Opens the Internet Explorer application. Public Sub OpenApplication(myFavoritesPath As String) ' Start Internet Explorer. Defaults to the home page. Process.Start(\"IExplore.exe\") ' Display the contents of the favorites folder in the browser. Process.Start(myFavoritesPath) End Sub ' Opens URLs and .html documents using Internet Explorer. Sub OpenWithArguments() ' URLs are not considered documents. They can only be opened ' by passing them as arguments. Process.Start(\"IExplore.exe\", \"www.northwindtraders.com\") ' Start a Web page using a browser associated with .html and .asp files. Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.htm\") Process.Start(\"IExplore.exe\", \"C:\\myPath\\myFile.asp\") End Sub ' Uses the ProcessStartInfo class to start new processes, ' both in a minimized mode. Sub OpenWithStartInfo() Dim startInfo As New ProcessStartInfo(\"IExplore.exe\") startInfo.WindowStyle = ProcessWindowStyle.Minimized Process.Start(startInfo) startInfo.Arguments = \"www.northwindtraders.com\" Process.Start(startInfo) End Sub Shared Sub Main() ' Get the path that stores favorite links. Dim myFavoritesPath As String = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) Dim myProcess As New MyProcess() myProcess.OpenApplication(myFavoritesPath) myProcess.OpenWithArguments() myProcess.OpenWithStartInfo() End Sub End Class End Namespace 'MyProcessSample Use this overload to start a process resource by specifying a ProcessStartInfo instance. The overload associates the resource with a new Process object. Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see Validate All Inputs. If the address of the executable file to start is a URL, the process is not started and is returned. This overload lets you start a process without first creating a new Process instance. Using this overload with a ProcessStartInfo parameter is an alternative to the explicit steps of creating a new Process instance, setting its StartInfo properties, and calling Start for the Process instance. Using a ProcessStartInfo instance as the parameter lets you call Start with the most control over what is passed into the call to start the process. If you need to pass only a file name or a file name and arguments, it is not necessary to create a new ProcessStartInfo instance, although that is an option. The only Process.StartInfo property that must be set is the FileName property. The FileName property does not need to represent an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the FileName property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word. You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. If the ProcessStartInfo.UserName and ProcessStartInfo.Password properties of the StartInfo instance are set, the unmanaged function is called, which starts the process in a new window even if the ProcessStartInfo.CreateNoWindow property value is or the ProcessStartInfo.WindowStyle property value is ProcessWindowStyle.Hidden. If the ProcessStartInfo.Domain property is , the ProcessStartInfo.UserName property must be in UPN format, user@DNS_domain_name. Unlike the other overloads, the overload of Start that has no parameters is not a member. Use that overload when you have already created a Process instance and specified start information (including the file name), and you want to start a process resource and associate it with the existing Process instance. Use one of the overloads when you want to create a new Process component rather than start a process for an existing component. Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a ProcessStartInfo instance. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the parameter, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread.\n\nStarts (or reuses) the process resource that is specified by the StartInfo property of this Process component and associates it with the component. if a process resource is started; if no new process resource is started (for example, if an existing process is reused). No file name was specified in the Process component's StartInfo. The UseShellExecute member of the StartInfo property is while RedirectStandardInput, RedirectStandardOutput, or RedirectStandardError is . There was an error in opening the associated file. The process object has already been disposed. Method not supported on operating systems without shell support such as Nano Server (.NET Core only). The following example uses an instance of the Process class to start a process. #using <System.dll> using namespace System; using namespace System::Diagnostics; using namespace System::ComponentModel; int main() { Process^ myProcess = gcnew Process; try { myProcess->StartInfo->UseShellExecute = false; // You can start any process, HelloWorld is a do-nothing example. myProcess->StartInfo->FileName = \"C:\\\\HelloWorld.exe\"; myProcess->StartInfo->CreateNoWindow = true; myProcess->Start(); // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. } catch ( Exception^ e ) { Console::WriteLine( e->Message ); } } using System; using System.Diagnostics; using System.ComponentModel; namespace MyProcessSample { class MyProcess { public static void Main() { try { using (Process myProcess = new Process()) { myProcess.StartInfo.UseShellExecute = false; // You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName = \"C:\\\\HelloWorld.exe\"; myProcess.StartInfo.CreateNoWindow = true; myProcess.Start(); // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. } } catch (Exception e) { Console.WriteLine(e.Message); } } } } open System.Diagnostics try use myProcess = new Process() myProcess.StartInfo.UseShellExecute <- false // You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName <- @\"C:\\HelloWorld.exe\" myProcess.StartInfo.CreateNoWindow <- true myProcess.Start() |> ignore // This code assumes the process you are starting will terminate itself. // Given that it is started without a window so you cannot terminate it // on the desktop, it must terminate itself or you can do it programmatically // from this application using the Kill method. with e -> printfn $\"{e.Message}\" Imports System.Diagnostics Imports System.ComponentModel Namespace MyProcessSample Class MyProcess Public Shared Sub Main() Try Using myProcess As New Process() myProcess.StartInfo.UseShellExecute = False ' You can start any process, HelloWorld is a do-nothing example. myProcess.StartInfo.FileName = \"C:\\\\HelloWorld.exe\" myProcess.StartInfo.CreateNoWindow = True myProcess.Start() ' This code assumes the process you are starting will terminate itself. ' Given that it is started without a window so you cannot terminate it ' on the desktop, it must terminate itself or you can do it programmatically ' from this application using the Kill method. End Using Catch e As Exception Console.WriteLine((e.Message)) End Try End Sub End Class End Namespace Use this overload to start a process resource and associate it with the current Process component. The return value indicates that a new process resource was started. If the process resource specified by the FileName member of the StartInfo property is already running on the computer, no additional process resource is started. Instead, the running process resource is reused and is returned. You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application. Do not start a ClickOnce application by specifying its installed location on your hard drive. Using an instance of this object with untrusted data is a security risk. Use this object only with trusted data. For more information, see Validate All Inputs. If you are using Visual Studio, this overload of the Start method is the one that you insert into your code after you drag a Process component onto the designer. Use the window to expand the category and write the appropriate value into the property. Your changes will appear in the form's procedure. This overload of Start is not a method. You must call it from an instance of the Process class. Before calling Start, you must first specify StartInfo property information for this Process instance, because that information is used to determine the process resource to start. The other overloads of the Start method are members. You do not need to create an instance of the Process component before you call those overloads of the method. Instead, you can call Start for the Process class itself, and a new Process component is created if the process was started. Or, is returned if a process was reused. The process resource is automatically associated with the new Process component that is returned by the Start method. The StartInfo members can be used to duplicate the functionality of the dialog box of the Windows menu. Anything that can be typed into a command line can be started by setting the appropriate values in the StartInfo property. The only StartInfo property that must be set is the FileName property. The FileName property does not have to be an executable file. It can be of any file type for which the extension has been associated with an application that is installed on the system. For example, the FileName property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated .doc files with a word processing tool, such as Microsoft Word. In the command line, you can specify actions to take for certain types of files. For example, you can print documents or edit text files. Specify these actions using the Verb member of the StartInfo property. For other types of files, you can specify command-line arguments when you start the file from the dialog box. For example, you can pass a URL as an argument if you specify your browser as the FileName. These arguments can be specified in the StartInfo property's Arguments member. If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location. Otherwise, the system will not find the path. For example, if is not in your path, and you add it using quotation marks: , you must fully qualify any process in when starting it. ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server. If you use the Start method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions. The process does not start in the same context as the client browser, and does not have access to the user desktop. Whenever you use Start to start a process, you might need to close it or you risk losing system resources. Close processes using CloseMainWindow or Kill. You can check whether a process has already been closed by using its HasExited property. A note about apartment states in managed threads is necessary here. When UseShellExecute is on the process component's StartInfo property, make sure you have set a threading model on your application by setting the attribute on the method. Otherwise, a managed thread can be in an state or put in the state, the latter of which conflicts with UseShellExecute being . Some methods require that the apartment state not be . If the state is not explicitly set, when the application encounters such a method, it defaults to , and once set, the apartment state cannot be changed. However, causes an exception to be thrown when the operating system shell is managing the thread."
    },
    {
        "link": "https://stackoverflow.com/questions/181719/how-do-i-start-a-process-from-c",
        "document": "As suggested by Matt Hamilton, the quick approach where you have limited control over the process, is to use the static Start method on the System.Diagnostics.Process class...\n\nThe alternative is to use an instance of the Process class. This allows much more control over the process including scheduling, the type of the window it will run in and, most usefully for me, the ability to wait for the process to finish.\n\nThis method allows far more control than I've mentioned."
    },
    {
        "link": "https://medium.com/@jepozdemir/how-to-launch-and-control-processes-in-c-net-applications-4ae6565410d6",
        "document": "How to Launch and Control Processes in C#.NET Applications\n\nHave you ever wanted your .NET application to open another program, run a command-line tool, or interact with other processes? The class makes this possible. It’s a powerful feature in .NET that lets you launch, monitor, and manage processes programmatically.\n\nIn this guide, we’ll cover the essentials of using straightforward examples.\n\nThe class is part of the System.Diagnostics namespace in .NET.\n\nIt allows you to:\n\nYou can launch an external application or command using the method. Here’s how to open Notepad:\n\nThis will open Notepad on your machine. Some processes require arguments. For example, opening a specific file with Notepad:\n\nIf you need more control (e.g., hiding the window or redirecting input/output), use the class.\n\nLet’s dive into the advanced options that class provides.\n\nWhile you can start a process with the method alone, gives you more control. is another class in the namespace. It provides a way to configure various settings for a process before starting it. Think of it as a blueprint for launching a program.\n\nIt’s especially useful when:\n• Specify the program or file to execute.\n• Control how the new process behaves (e.g., visibility, window style).\n\nThink of it as a detailed instruction manual for launching a process.\n\nHere are some commonly used properties of :\n• FileName: Specifies the application or file to execute.\n• Arguments: Specifies the command-line arguments to pass to the program.\n• UseShellExecute: Indicates whether to use the operating system shell to start the process.\n• CreateNoWindow: Specifies whether to create a new window for the process.\n• RedirectStandardInput: Allows you to redirect the process’s input stream.\n• RedirectStandardOutput: Allows you to redirect the process’s output stream.\n• RedirectStandardError: Allows you to redirect the process’s error stream.\n• WorkingDirectory: Specifies the working directory for the process.\n\nHow to Use -ProcessStartInfo-\n\nHere’s how you can use step by step:\n\nCreate an instance of and set its properties as follows:\n\nThen, you are able to use the class to start the process.\n\nIn this example:\n• We create a object and set the property to .\n• Then, we create a object and link it to the .\n• Finally, we call to launch the process.\n\nSuppose we want to open a specific text file in Notepad. \n\nHere, the property is set to “example.txt”. This tells to open the file .\n\nYou can manage how much CPU time a process gets by setting its priority using the property after starting the process.\n\nSome tasks don’t need a visible window. For example, running a background script:\n\nNote that in this example, ensures no command window pops up. is required for hiding the window and enabling advanced options like redirection.\n\nYou can subscribe to the event to run code when a process ends. This is useful for scenarios where you want to perform cleanup or logging.\n\nSometimes, a process requires specific environmental variables to run correctly. You can set these directly using the property.\n\nYou can use the property to add or modify environment variables for the process. This is handy when working with tools that rely on specific configurations.\n\nSometimes, you may need to send data to a process after it has started. This is possible by redirecting the standard input.\n\nYou can also redirect the standard output of a process for logging or analysis. \n\nAssume that you want to run a command-line process (cmd.exe), capture its output (what it writes to the console), and then display that output in our application.\n\nIf you want to capture errors generated by the process, you can redirect the standard error.\n\nWant to see which processes are running on your system? You can use the method to inspect running processes. \n\nFor example, listing all currently running processes:\n\nThis lists all active processes with their names and IDs.\n\nIf you need to terminate a specific process, you can use the method.\n\nFor example, to stop an unwanted Notepad instance:\n\nThis code finds all instances of Notepad and terminates them.\n\nSample codes used here are available in the following GitHub repository:\n\nis a powerful class in the .NET Framework for starting and configuring processes. Whether you need to open a file, run a command-line utility, or interact with another program, gives you the flexibility to get the job done.\n\nStart experimenting with in your projects, and you’ll see how it can simplify tasks that involve external processes!"
    },
    {
        "link": "https://stackoverflow.com/questions/578890/starting-external-process-from-asp-net",
        "document": "Here is a code snippet , hope this helps"
    },
    {
        "link": "https://scikit-learn.org/stable/model_persistence.html",
        "document": "After training a scikit-learn model, it is desirable to have a way to persist the model for future use without having to retrain. Based on your use-case, there are a few different ways to persist a scikit-learn model, and here we help you decide which one suits you best. In order to make a decision, you need to answer the following questions:\n• None Do you need the Python object after persistence, or do you only need to persist in order to serve the model and get predictions out of it?\n\nIf you only need to serve the model and no further investigation on the Python object itself is required, then ONNX might be the best fit for you. Note that not all models are supported by ONNX.\n\nIn case ONNX is not suitable for your use-case, the next question is:\n• None Do you absolutely trust the source of the model, or are there any security concerns regarding where the persisted model comes from?\n\nIf you have security concerns, then you should consider using skops.io which gives you back the Python object, but unlike based persistence solutions, loading the persisted model doesn’t automatically allow arbitrary code execution. Note that this requires manual investigation of the persisted file, which allows you to do.\n\nThe other solutions assume you absolutely trust the source of the file to be loaded, as they are all susceptible to arbitrary code execution upon loading the persisted file since they all use the pickle protocol under the hood.\n• None Do you care about the performance of loading the model, and sharing it between processes where a memory mapped object on disk is beneficial?\n\nIf yes, then you can consider using joblib. If this is not a major concern for you, then you can use the built-in module.\n• None Did you try or and found that the model cannot be persisted? It can happen for instance when you have user defined functions in your model.\n\nIf yes, then you can use cloudpickle which can serialize certain objects which cannot be serialized by or .\n\nIn a typical workflow, the first step is to train the model using scikit-learn and scikit-learn compatible libraries. Note that support for scikit-learn and third party estimators varies across the different persistence methods. Creating an appropriate model depends on your use-case. As an example, here we train a on the iris dataset: Once the model is trained, you can persist it using your desired method, and then you can load the model in a separate environment and get predictions from it given input data. Here there are two major paths depending on how you persist and plan to serve the model:\n• None ONNX: You need an runtime and an environment with appropriate dependencies installed to load the model and use the runtime to get predictions. This environment can be minimal and does not necessarily even require Python to be installed to load the model and compute predictions. Also note that typically requires much less RAM than Python to compute predictions from small models.\n• None , , , cloudpickle: You need a Python environment with the appropriate dependencies installed to load the model and get predictions from it. This environment should have the same packages and the same versions as the environment where the model was trained. Note that none of these methods support loading a model trained with a different version of scikit-learn, and possibly different versions of other dependencies such as and . Another concern would be running the persisted model on a different hardware, and in most cases you should be able to load your persisted model on a different hardware.\n\n, or Open Neural Network Exchange format is best suitable in use-cases where one needs to persist the model and then use the persisted artifact to get predictions without the need to load the Python object itself. It is also useful in cases where the serving environment needs to be lean and minimal, since the runtime does not require . is a binary serialization of the model. It has been developed to improve the usability of the interoperable representation of data models. It aims to facilitate the conversion of the data models between different machine learning frameworks, and to improve their portability on different computing architectures. More details are available from the ONNX tutorial. To convert scikit-learn model to sklearn-onnx has been developed. However, not all scikit-learn models are supported, and it is limited to the core scikit-learn and does not support most third party estimators. One can write a custom converter for third party or custom estimators, but the documentation to do that is sparse and it might be challenging to do so. To convert the model to format, you need to give the converter some information about the input as well, about which you can read more here: You can load the model in Python and use the runtime to get predictions:\n\n(and and by extension), has many documented security vulnerabilities by design and should only be used if the artifact, i.e. the pickle-file, is coming from a trusted and verified source. You should never load a pickle file from an untrusted source, similarly to how you should never execute code from an untrusted source. Also note that arbitrary computations can be represented using the format, and it is therefore recommended to serve models using in a sandboxed environment to safeguard against computational and memory exploits. Also note that there are no supported ways to load a model trained with a different version of scikit-learn. While using , , , or cloudpickle, models saved using one version of scikit-learn might load in other versions, however, this is entirely unsupported and inadvisable. It should also be kept in mind that operations performed on such data could give different and unexpected results, or even crash your Python process. In order to rebuild a similar model with future versions of scikit-learn, additional metadata should be saved along the pickled model:\n• None The training data, e.g. a reference to an immutable snapshot\n• None The Python source code used to generate the model\n• None The versions of scikit-learn and its dependencies\n• None The cross validation score obtained on the training data This should make it possible to check that the cross-validation score is in the same range as before. Aside for a few exceptions, persisted models should be portable across operating systems and hardware architectures assuming the same versions of dependencies and Python are used. If you encounter an estimator that is not portable, please open an issue on GitHub. Persisted models are often deployed in production using containers like Docker, in order to freeze the environment and dependencies. If you want to know more about these issues, please refer to these talks:\n• None Adrin Jalali: Let’s exploit pickle, and skops to the rescue! | PyData Amsterdam 2023.\n• None Alex Gaynor: Pickles are for Delis, not Software - PyCon 2014. If the versions of the dependencies used may differ from training to production, it may result in unexpected behaviour and errors while using the trained model. To prevent such situations it is recommended to use the same dependencies and versions in both the training and production environment. These transitive dependencies can be pinned with the help of package management tools like , , , , , , etc. It is not always possible to load an model trained with older versions of the scikit-learn library and its dependencies in an updated software environment. Instead, you might need to retrain the model with the new versions of the all the libraries. So when training a model, it is important to record the training recipe (e.g. a Python script) and training set information, and metadata about all the dependencies to be able to automatically reconstruct the same training environment for the updated software. When an estimator is loaded with a scikit-learn version that is inconsistent with the version the estimator was pickled with, a is raised. This warning can be caught to obtain the original version the estimator was pickled with: The last step after training a scikit-learn model is serving the model. Once the trained model is successfully loaded, it can be served to manage different prediction requests. This can involve deploying the model as a web service using containerization, or other model deployment strategies, according to the specifications.\n\nBased on the different approaches for model persistence, the key points for each approach can be summarized as follows:\n• None : It provides a uniform format for persisting any machine learning or deep learning model (other than scikit-learn) and is useful for model inference (predictions). It can however, result in compatibility issues with different frameworks.\n• None : Trained scikit-learn models can be easily shared and put into production using . It is more secure compared to alternate approaches based on because it does not load arbitrary code unless explicitly asked for by the user. Such code needs to be packaged and importable in the target Python environment.\n• None : Efficient memory mapping techniques make it faster when using the same persisted model in multiple Python processes when using . It also gives easy shortcuts to compress and decompress the persisted object without the need for extra code. However, it may trigger the execution of malicious code when loading a model from an untrusted source as any other pickle-based persistence mechanism.\n• None : It is native to Python and most Python objects can be serialized and deserialized using , including custom Python classes and functions as long as they are defined in a package that can be imported in the target environment. While can be used to easily save and load scikit-learn models, it may trigger the execution of malicious code while loading a model from an untrusted source. can also be very efficient memorywise if the model was persisted with but it does not support memory mapping.\n• None cloudpickle: It has comparable loading efficiency as and (without memory mapping), but offers additional flexibility to serialize custom Python code such as lambda expressions and interactively defined functions and classes. It might be a last resort to persist pipelines with custom Python components such as a that wraps a function defined in the training script itself or more generally outside of any importable Python package. Note that cloudpickle offers no forward compatibility guarantees and you might need the same version of cloudpickle to load the persisted model along with the same version of all the libraries used to define the model. As the other pickle-based persistence mechanisms, it may trigger the execution of malicious code while loading a model from an untrusted source."
    },
    {
        "link": "https://joblib.readthedocs.io/en/stable/developing.html",
        "document": "The homepage of joblib with user documentation is located on:\n\nTo run the test suite, you need the pytest (version >= 3) and coverage modules. Run the test suite using: from the root of the project.\n\nTo build the docs you need to have sphinx (>=1.4) and some dependencies installed: The docs can then be built with the following command: The html docs are located in the directory.\n\nDue to maintenance issues, 1.4.1 was not valid and we bumped the version to 1.4.2\n• None Fix a backward incompatible change in which needs to return the metadata. Also make sure that return an empty dict for metadata for consistency. https://github.com/joblib/joblib/pull/1576\n• None Try to cast to int in parallel and raise an error if it fails. This means that will now result in instead of failing. https://github.com/joblib/joblib/pull/1539\n• None Ensure that errors in the task generator given to Parallel’s call are raised in the results consumming thread. https://github.com/joblib/joblib/pull/1491\n• None Adjust codebase to NumPy 2.0 by changing to and importing from . https://github.com/joblib/joblib/pull/1501\n• None The parameter in can now be set to . In this case the results will be returned in the order of task completion rather than the order of submission. https://github.com/joblib/joblib/pull/1463\n• None Vendor cloudpickle 3.0.0 and end support for Python 3.7 which has reached end of life. https://github.com/joblib/joblib/pull/1487 https://github.com/joblib/joblib/pull/1515\n• None Fix a regression in introduced in 1.3.0 where explicitly setting was not interpreted as “unset”. https://github.com/joblib/joblib/pull/1475\n• None Fix a regression in introduced in 1.3.0 where logging methods exposed from inheritance to didn’t work because of missing logger initialization. https://github.com/joblib/joblib/pull/1494\n• None Various maintenance updates to the doc, the ci and the test. https://github.com/joblib/joblib/pull/1480, https://github.com/joblib/joblib/pull/1481, https://github.com/joblib/joblib/pull/1476, https://github.com/joblib/joblib/pull/1492\n• None Fix compatibility with python 3.7 by vendor loky 3.4.1 which is compatible with this version. https://github.com/joblib/joblib/pull/1472\n• None Add ability to change default Parallel backend in tests by setting the environment variable. https://github.com/joblib/joblib/pull/1356\n• None Fix temporary folder creation in on Linux subsystems on Windows which do have but don’t have the function https://github.com/joblib/joblib/issues/1353\n• None Drop runtime dependency on . is going away in Python 3.12 and is deprecated from Python 3.10 onwards. This import was kept around to avoid breaking scikit-learn, however it’s now been long enough since scikit-learn deployed a fixed (version 1.1 was released in May 2022) that it should be safe to remove this. https://github.com/joblib/joblib/pull/1361\n• None A warning is raised when a pickling error occurs during caching operations. In version 1.5, this warning will be turned into an error. For all other errors, a new warning has been introduced: . https://github.com/joblib/joblib/pull/1359\n• None Avoid (module, name) collisions when caching nested functions. This fix changes the module name of nested functions, invalidating caches from previous versions of Joblib. https://github.com/joblib/joblib/pull/1374\n• None Add in , to allow custom cache invalidation based on the metadata of the function call. https://github.com/joblib/joblib/pull/1149\n• None Improve the behavior of for , with simplified tracebacks and more efficient running time. https://github.com/joblib/joblib/pull/1393\n• None Add the context manager to allow for more fine-grained control over the backend configuration. It should be used in place of the context manager. In particular, it has the advantage of not requiring to set a specific backend in the context manager. https://github.com/joblib/joblib/pull/1392, https://github.com/joblib/joblib/pull/1457\n• None Add and in to make it easy to limit the number of items and remove items that have not been accessed for a long time in the cache. https://github.com/joblib/joblib/pull/1200\n• None Deprecate in as this is not automatically enforced, the limit can be directly passed to which needs to be called to actually enforce the limit. https://github.com/joblib/joblib/pull/1447\n• None Various updates to the documentation and to benchmarking tools. https://github.com/joblib/joblib/pull/1343, https://github.com/joblib/joblib/pull/1348, https://github.com/joblib/joblib/pull/1411, https://github.com/joblib/joblib/pull/1451, https://github.com/joblib/joblib/pull/1427, https://github.com/joblib/joblib/pull/1400\n• None Fix a security issue where could potentially run arbitrary code. Now only basic numerics are supported. https://github.com/joblib/joblib/pull/1327\n• None Make sure that joblib works even when multiprocessing is not available, for instance with Pyodide https://github.com/joblib/joblib/pull/1256\n• None Avoid unnecessary warnings when workers and main process delete the temporary memmap folder contents concurrently. https://github.com/joblib/joblib/pull/1263\n• None Fix memory alignment bug for pickles containing numpy arrays. This is especially important when loading the pickle with as the resulting object would not be able to correct the misalignment without performing a memory copy. This bug would cause invalid computation and segmentation faults with native code that would directly access the underlying data buffer of a numpy array, for instance C/C++/Cython code compiled with older GCC versions or some old OpenBLAS written in platform specific assembly. https://github.com/joblib/joblib/pull/1254\n• None Fix a security issue where could potentially run arbitrary code. Now only basic numerics are supported. https://github.com/joblib/joblib/pull/1327\n• None Fix byte order inconsistency issue during deserialization using joblib.load in cross-endian environment: the numpy arrays are now always loaded to use the system byte order, independently of the byte order of the system that serialized the pickle. https://github.com/joblib/joblib/pull/1181\n• None Fix joblib.Memory bug with the parameter when the cached function is a decorated function. https://github.com/joblib/joblib/pull/1165\n• None Fix to properly handle caching for functions defined interactively in a IPython session or in Jupyter notebook cell. https://github.com/joblib/joblib/pull/1214\n• None Update vendored loky (from version 2.9 to 3.0) and cloudpickle (from version 1.6 to 2.0) https://github.com/joblib/joblib/pull/1218\n• None dask: avoid redundant scattering of large arguments to make a more efficient use of the network resources and avoid crashing dask with “OSError: [Errno 55] No buffer space available” or “ConnectionResetError: [Errno 104] connection reset by peer”. https://github.com/joblib/joblib/pull/1133\n• None Make and caching system compatible with . Also make it explicit in the documentation that users should now expect to have their cache invalidated when either or a third party library involved in the cached values definition is upgraded. In particular, users updating to a release that includes this fix will see their previous cache invalidated if they contained reference to objects. https://github.com/joblib/joblib/pull/1136\n• None Fix a spurious invalidation of ’d functions called with under Jupyter or IPython. https://github.com/joblib/joblib/pull/1093\n• None Bump vendored loky to 2.9.0 and cloudpickle to 1.6.0. In particular this fixes a problem to add compat for Python 3.9.\n• None Fix a problem in the constructors of Parallel backends classes that inherit from the that prevented the dask backend to properly batch short tasks. https://github.com/joblib/joblib/pull/1062\n• None Fix a problem in the way the joblib dask backend batches calls that would badly interact with the dask callable pickling cache and lead to wrong results or errors. https://github.com/joblib/joblib/pull/1055\n• None Prevent a dask.distributed bug from surfacing in joblib’s dask backend during nested Parallel calls (due to joblib’s auto-scattering feature) https://github.com/joblib/joblib/pull/1061\n• None Workaround for a race condition after Parallel calls with the dask backend that would cause low level warnings from asyncio coroutines: https://github.com/joblib/joblib/pull/1078\n• None Make joblib work on Python 3 installation that do not ship with the lzma package in their standard library.\n• None Drop support for Python 2 and Python 3.5. All objects in and are now deprecated and will be removed in joblib 0.16. Note that no deprecation warning will be raised for these objects Python < 3.7. https://github.com/joblib/joblib/pull/1018\n• None Fix many bugs related to the temporary files and folder generated when automatically memory mapping large numpy arrays for efficient inter-process communication. In particular, this would cause exceptions to be raised under Windows and large leaked files in under Linux in case of crash. https://github.com/joblib/joblib/pull/966\n• None Make the dask backend collect results as soon as they complete leading to a performance improvement: https://github.com/joblib/joblib/pull/1025\n• None Fix the number of jobs reported by when called in a parallel backend context. https://github.com/joblib/joblib/pull/985\n• None Upgraded vendored cloupickle to 1.4.1 and loky to 2.8.0. This allows for Parallel calls of dynamically defined functions with type annotations in particular.\n• None Configure the loky workers’ environment to mitigate oversubsription with nested multi-threaded code in the following case:\n• None allow for a suitable number of threads for numba ( );\n• None enable Interprocess Communication for scheduler coordination when the nested code uses Threading Building Blocks (TBB) ( )\n• None Fix a regression where the loky backend was not reusing previously spawned workers. https://github.com/joblib/joblib/pull/968\n• None Revert https://github.com/joblib/joblib/pull/847 to avoid using that introduced a performance regression under Windows: https://github.com/joblib/joblib/issues/965\n• None Improved the load balancing between workers to avoid stranglers caused by an excessively large batch size when the task duration is varying significantly (because of the combined use of and with a partially warmed cache for instance). https://github.com/joblib/joblib/pull/899\n• None Add official support for Python 3.8: fixed protocol number in and updated tests.\n• None Fix a deadlock when using the dask backend (when scattering large numpy arrays). https://github.com/joblib/joblib/pull/914\n• None Warn users that they should never use with files from untrusted sources. Fix security related API change introduced in numpy 1.6.3 that would prevent using joblib with recent numpy versions. https://github.com/joblib/joblib/pull/879\n• None Upgrade to cloudpickle 1.1.1 that add supports for the upcoming Python 3.8 release among other things. https://github.com/joblib/joblib/pull/878\n• None Fix the oversubscription protection to only protect against nested calls. This allows to be run in background threads. https://github.com/joblib/joblib/pull/934\n• None Upgrade to loky 2.6.0 that add supports for the setting environment variables in child before loading any module. https://github.com/joblib/joblib/pull/940\n• None Fix the oversubscription protection for native libraries using threadpools (OpenBLAS, MKL, Blis and OpenMP runtimes). The maximal number of threads is can now be set in children using the in . It defaults to . https://github.com/joblib/joblib/pull/940 Add a non-regression test related to joblib issues #836 and #833, reporting that cloudpickle versions between 0.5.4 and 0.7 introduced a bug where global variables changes in a parent process between two calls to joblib.Parallel would not be propagated into the workers Memory now accepts pathlib.Path objects as parameter. Also, a warning is raised if the returned backend is None while is not None. Make raise an informative when the active parallel backend has zero worker. Make the wait for workers before trying to schedule work. This is useful in particular when the workers are provisionned dynamically but provisionning is not immediate (for instance using Kubernetes, Yarn or an HPC job queue). Include loky 2.4.2 with default serialization with . This can be tweaked with the environment variable . Fix nested backend in SequentialBackend to avoid changing the default backend to Sequential. (#792) Fix nested_backend behavior to avoid setting the default number of workers to -1 when the backend is not dask. (#784) Include loky 2.3.1 with better error reporting when a worker is abruptly terminated. Also fixes spurious debug output. Include cloudpickle 0.5.6. Fix a bug with the handling of global variables by locally defined functions. Include loky 2.3.0 with many bugfixes, notably w.r.t. when setting non-default multiprocessing contexts. Also include improvement on memory management of long running worker processes and fixed issues when using the loky backend under PyPy. Raises a more explicit exception when a corrupted MemorizedResult is loaded. Loading a corrupted cached file with mmap mode enabled would recompute the results and return them without memory mapping. Fixed a regression in Memory when positional arguments are called as kwargs several times with different values (#751). Integration of loky 2.2.2 that fixes issues with the selection of the default start method and improve the reporting when calling functions with arguments that raise an exception when unpickling. Prevent MemorizedFunc.call_and_shelve from loading cached results to RAM when not necessary. Results in big performance improvements Integrate loky 2.2.0 to fix regression with unpicklable arguments and functions reported by users (#723, #643). Loky 2.2.0 also provides a protection against memory leaks long running applications when psutil is installed (reported as #721). Joblib now includes the code for the dask backend which has been updated to properly handle nested parallelism and data scattering at the same time (#722). Restored some private API attribute and arguments ( and ’s ) for backward compat. (#716, #732). Make sure that any exception triggered when serializing jobs in the queue will be wrapped as a PicklingError as in past versions of joblib. Implement the backend with @ogrisel. This backend relies on a robust implementation of with spawned processes that can be reused across the calls. This fixes the bad integration with third paty libraries relying on thread pools, described in https://pythonhosted.org/joblib/parallel.html#bad-interaction-of-multiprocessing-and-third-party-libraries Limit the number of threads used in worker processes by C-libraries that relies on threadpools. This functionality works for MKL, OpenBLAS, OpenMP and Accelerated. Prevent numpy arrays with the same shape and data from hashing to the same memmap, to prevent jobs with preallocated arrays from writing over each other. Reduce overhead of automatic memmap by removing the need to hash the array. Make robust to under Windows when run in combination with . The automatic array memory mapping feature of does no longer use if it is too small (less than 2 GB). In particular in docker containers is only 64 MB by default which would cause frequent failures when running joblib in Docker containers. Make it possible to hint for thread-based parallelism with or enforce shared-memory semantics with . Rely on the built-in exception nesting system of Python 3 to preserve traceback information when an exception is raised on a remote worker process. This avoid verbose and redundant exception reports under Python 3. Preserve exception type information when doing nested Parallel calls instead of mapping the exception to the generic type. Introduce the concept of ‘store’ and refactor the internal storage implementation to make it accept extra store backends for caching results. and are the new options added to to specify and configure a store backend. Add the function to extend the store backend used by default with Memory. This default store backend is named ‘local’ and corresponds to the local filesystem. The store backend API is experimental and thus is subject to change in the future without deprecation. The parameter of is now marked as deprecated, use instead. Add support for LZ4 compression if package is installed. Allow passing a string to parameter in function. This string should correspond to the compressor used (e.g. zlib, gzip, lz4, etc). The default compression level is used in this case. Allow to be used globally instead of only as a context manager. Support lazy registration of external parallel backends Add initial implementation of LRU cache cleaning. You can specify the size limit of a object via the parameter and then need to clean explicitly the cache via the method. Make the multiprocessing backend work even when the name of the main thread is not the Python default. Thanks to Roman Yurchak for the suggestion. pytest is used to run the tests instead of nosetests. or do not work anymore, run instead. An instance of can be passed into the argument in . Fix handling of memmap objects with offsets greater than mmap.ALLOCATIONGRANULARITY in . See https://github.com/joblib/joblib/issues/451 for more details. Fix performance regression in with n_jobs=1. See https://github.com/joblib/joblib/issues/483 for more details. Fix race condition when a function cached with was used inside a . See https://github.com/joblib/joblib/issues/490 for more details. Fix tests when multiprocessing is disabled via the JOBLIB_MULTIPROCESSING environment variable. Remove warnings in nested Parallel objects when the inner Parallel has n_jobs=1. See https://github.com/joblib/joblib/pull/406 for more details. FIX a bug in stack formatting when the error happens in a compiled extension. See https://github.com/joblib/joblib/pull/382 for more details. FIX a bug in the constructor of BinaryZlibFile that would throw an exception when passing unicode filename (Python 2 only). See https://github.com/joblib/joblib/pull/384 for more details. Expose and in the public API to make them officially re-usable by backend implementers. ENH: joblib.dump/load now accept file-like objects besides filenames. https://github.com/joblib/joblib/pull/351 for more details. Refactored joblib.Parallel to enable the registration of custom computational backends. https://github.com/joblib/joblib/pull/306 Note the API to register custom backends is considered experimental and subject to change without deprecation. Joblib pickle format change: joblib.dump always create a single pickle file and joblib.dump/joblib.save never do any memory copy when writing/reading pickle files. Reading pickle files generated with joblib versions prior to 0.10 will be supported for a limited amount of time, we advise to regenerate them from scratch when convenient. joblib.dump and joblib.load also support pickle files compressed using various strategies: zlib, gzip, bz2, lzma and xz. Note that lzma and xz are only available with python >= 3.3. https://github.com/joblib/joblib/pull/260 for more details. ENH: joblib.dump/load now accept pathlib.Path objects as filenames. https://github.com/joblib/joblib/pull/316 for more details. Workaround for “WindowsError: [Error 5] Access is denied” when trying to terminate a multiprocessing pool under Windows: https://github.com/joblib/joblib/issues/354 FIX a race condition that could cause a joblib.Parallel to hang when collecting the result of a job that triggers an exception. https://github.com/joblib/joblib/pull/296 FIX a bug that caused joblib.Parallel to wrongly reuse previously memmapped arrays instead of creating new temporary files. https://github.com/joblib/joblib/pull/294 for more details. FIX for raising non inheritable exceptions in a Parallel call. See https://github.com/joblib/joblib/issues/269 for more details. FIX joblib.hash error with mixed types sets and dicts containing mixed types keys when using Python 3. see https://github.com/joblib/joblib/issues/254 FIX joblib.dump/load for big numpy arrays with dtype=object. See https://github.com/joblib/joblib/issues/220 for more details. FIX joblib.Parallel hanging when used with an exhausted iterator. See https://github.com/joblib/joblib/issues/292 for more details. Revert back to the start method (instead of ) as the latter was found to cause crashes in interactive Python sessions. Joblib hashing now uses the default pickle protocol (2 for Python 2 and 3 for Python 3). This makes it very unlikely to get the same hash for a given object under Python 2 and Python 3. In particular, for Python 3 users, this means that the output of joblib.hash changes when switching from joblib 0.8.4 to 0.9.2 . We strive to ensure that the output of joblib.hash does not change needlessly in future versions of joblib but this is not officially guaranteed. Joblib pickles generated with Python 2 can not be loaded with Python 3 and the same applies for joblib pickles generated with Python 3 and loaded with Python 2. During the beta period 0.9.0b2 to 0.9.0b4, we experimented with a joblib serialization that aimed to make pickles serialized with Python 3 loadable under Python 2. Unfortunately this serialization strategy proved to be too fragile as far as the long-term maintenance was concerned (For example see https://github.com/joblib/joblib/pull/243). That means that joblib pickles generated with joblib 0.9.0bN can not be loaded under joblib 0.9.2. Joblib beta testers, who are the only ones likely to be affected by this, are advised to delete their joblib cache when they upgrade from 0.9.0bN to 0.9.2. Fixed a bug with that used to return unstable values for strings and numpy.dtype instances depending on interning states. Make joblib use the ‘forkserver’ start method by default under Python 3.4+ to avoid causing crash with 3rd party libraries (such as Apple vecLib / Accelerate or the GCC OpenMP runtime) that use an internal thread pool that is not reinitialized when a system call happens. New context manager based API ( block) to re-use the same pool of workers across consecutive parallel calls. Automated batching of fast tasks into longer running jobs to hide multiprocessing dispatching overhead when possible. FIX make it possible to call on pickled objects that include a mix of arrays of both memory memmapable dtypes and object dtype. OPTIM use the C-optimized pickler under Python 3 This makes it possible to efficiently process parallel jobs that deal with numerous Python objects such as large dictionaries. This fix uses a queue.Queue datastructure in the failing test. This datastructure is thread-safe thanks to an internal Lock. This Lock instance not picklable hence cause the picklability check of delayed to check fail. When using the threading backend, picklability is no longer required, hence this PRs give the user the ability to disable it on a case by case basis. BUG: use mmap_mode=’r’ by default in Parallel and MemmappingPool The former default of mmap_mode=’c’ (copy-on-write) caused problematic use of the paging file under Windows. BUG: fix usage of the /dev/shm folder under Linux ENH: Make memory robust to modification of source files while the interpreter is running. Should lead to less spurious cache flushes and recomputations. New API to handle memoized results by reference instead of by value. FIX #105: Race condition in task iterable consumption when pre_dispatch != ‘all’ that could cause crash with error messages “Pools seems closed” and “ValueError: generator already executing”. ENH: set default value of Parallel’s max_nbytes to 100MB Motivation: avoid introducing disk latency on medium sized parallel workload where memory usage is not an issue. ENH: make Memory respect mmap_mode at first call too This is low overhead alternative backend to the default multiprocessing backend that is suitable when calling compiled extensions that release the GIL. FIX: use safe_repr to print arg vals in trace This fixes a problem in which extremely long (and slow) stack traces would be produced when function parameters are large numpy arrays. ENH: limit memory copy with Parallel by leveraging numpy.memmap when possible ENH Handles tuples, sets and Python 3’s dict_keys type the same as lists. in pre_dispatch This release drops support for Python 2.5 in favor of support for Python 3.0 ENH: Parallel: Turn of pre-dispatch for already expanded lists ENH: detect recursive sub-process spawning, as when people do not protect the __main__ in scripts under Windows, and raise a useful error. BUG: make sure that sets and dictionaries give reproducible hashes The ordering of a dictionary is random. As a result the function hashing was not reproducible. Pretty hard to test BUG: make sure Memory pickles even if cachedir=None Bugfix release because of a merge error in release 0.6.0 ENH: hash: bugware to be able to hash objects defined interactively in IPython ENH: Parallel: warn and not fail for nested loops ENH: Parallel: n_jobs=-2 now uses all CPUs but one Py3k: compatibility fixes. This makes run fine the tests test_disk and test_parallel ENH: Replace os.path.exists before makedirs with exception check New disk.mkdirp will fail with other errnos than EEXIST. API: All the useful symbols in the __init__ ENH: Make sure memory hash in a reproducible way TEST: Better testing of parallel and pre_dispatch ENH: JOBLIB_MULTIPROCESSING env var to disable multiprocessing from the environment ENH : adding log message to know how long it takes to load from disk the cache BUG: fix error management in rm_subdirs BUG: fix for race condition during tests in mem.clear() BUG: Many fixes to capture interprocess race condition when mem.cache is used by several processes on the same cache. ENH: pre_dispatch in parallel: lazy generation of jobs in parallel for to avoid drowning memory. ENH: Add the option of overloading the arguments of the mother ‘Memory’ object in the cache method that is doing the decoration. BUG: Exceptions raised by Parallel when n_job=1 are no longer captured. BUG: Fix Windows peculiarities with path separators and file names BUG: Fix more windows locking bugs ENH: Make sure that exceptions raised in Parallel also inherit from the original exception class ENH: Add a shadow set of exceptions ENH: Clean up the code for parallel. Thanks to Fabian Pedregosa for the patch. BUG: Fix Parallel on computers with only one CPU, for n_jobs=-1. BUG: Fix hashing for function with a side effect modifying their input argument. Thanks to Pietro Berkes for reporting the bug and proving the patch. BUG: Make sure that joblib still works with Python2.5. => release 0.4.2"
    },
    {
        "link": "https://stackoverflow.com/questions/65702949/update-scikit-model-so-it-is-compatible-with-newest-version",
        "document": "I have a question about scikit models and (retro-)compatibility.\n\nI have a model (saved using joblib) created in Python 3.5 from scikit-learn 0.21.2, which I then analyze with the package shap version 0.30. Since I upgraded to Ubuntu 20.04 I have Python 3.8 (and newer versions of both scikit-learn and shap). Because of the new packages version I cannot load them with Python 3.8, so I make a virtual environment with Py3.5 and the original package versions.\n\nNow my question is: is there a way to re-dump with joblib the models so I can also open them with Python 3.8? I'd like to re-analyze the model with the newest version of the package shap (but of course it has a scikit version requirement that would break the joblib loading).\n\nAlternatively, what other options do I have? (The only thing I do not want is to re-train the model)."
    },
    {
        "link": "https://scikit-learn.org/stable/api/index.html",
        "document": ""
    },
    {
        "link": "https://joblib.readthedocs.io/en/latest/developing.html",
        "document": "The homepage of joblib with user documentation is located on:\n\nYou can use to install joblib from any directory: or install it in editable mode from the source directory:\n\nTo contribute to joblib, first create an account on github. Once this is done, fork the joblib repository to have your own repository, clone it using . Make your changes in a branch of your clone, push them to your github account, test them locally, and when you are happy with them, send a pull request to the main repository. You can use pre-commit to run code style checks before each commit: pre-commit checks can be disabled for a single commit with:\n• None Enforce is a positive timedelta for , to avoid silently ignoring it. https://github.com/joblib/joblib/pull/1613\n• None Remove deprecated argument for , which should be passed directly to . https://github.com/joblib/joblib/pull/1569\n• None Extend functionality of the method to now also check against cache validity. Before, it would only check for a given call if it is in cache memory. https://github.com/joblib/joblib/pull/1584\n• None The Memory object now automatically creates a .gitignore file in its cache directory, instructing git to ignore the entire folder. https://github.com/joblib/joblib/pull/1674\n• None Fixed a bug that caused the parameter in to be ineffective when used along with . https://github.com/joblib/joblib/issues/1586\n• None Pretty printing of execution progress when the number of tasks is known. https://github.com/joblib/joblib/pull/1608\n• None Support for Python 3.13 free-threaded has been added. https://github.com/joblib/joblib/pull/1589\n• None Fixed an issue affecting calls with non-null parameter when loading compressed python objects. It wrongly attempted to load with anyway, resulting in python exceptions or corrupted data. The result now properly use in-memory arrays, in accordance with the warnings that are emitted in this case. https://github.com/joblib/joblib/pull/1681\n• None Fix support for python 3.14 in , with the addition of an extra argument in . https://github.com/joblib/joblib/pull/1688\n• None Bump vendored cloudpickle to 3.1.1 to support Python 3.14 (dev) and various other fixes.\n• None Bump vendored loky to 3.5.1 to support recent Python versions without raising the warning on calls to and fix various sources of crashes and deadlocks. Due to maintenance issues, 1.4.1 was not valid and we bumped the version to 1.4.2\n• None Fix a backward incompatible change in which needs to return the metadata. Also make sure that return an empty dict for metadata for consistency. https://github.com/joblib/joblib/pull/1576\n• None Try to cast to int in parallel and raise an error if it fails. This means that will now result in instead of failing. https://github.com/joblib/joblib/pull/1539\n• None Ensure that errors in the task generator given to Parallel’s call are raised in the results consumming thread. https://github.com/joblib/joblib/pull/1491\n• None Adjust codebase to NumPy 2.0 by changing to and importing from . https://github.com/joblib/joblib/pull/1501\n• None The parameter in can now be set to . In this case the results will be returned in the order of task completion rather than the order of submission. https://github.com/joblib/joblib/pull/1463\n• None Vendor cloudpickle 3.0.0 and end support for Python 3.7 which has reached end of life. https://github.com/joblib/joblib/pull/1487 https://github.com/joblib/joblib/pull/1515\n• None Fix a regression in introduced in 1.3.0 where explicitly setting was not interpreted as “unset”. https://github.com/joblib/joblib/pull/1475\n• None Fix a regression in introduced in 1.3.0 where logging methods exposed from inheritance to didn’t work because of missing logger initialization. https://github.com/joblib/joblib/pull/1494\n• None Various maintenance updates to the doc, the ci and the test. https://github.com/joblib/joblib/pull/1480, https://github.com/joblib/joblib/pull/1481, https://github.com/joblib/joblib/pull/1476, https://github.com/joblib/joblib/pull/1492\n• None Fix compatibility with python 3.7 by vendor loky 3.4.1 which is compatible with this version. https://github.com/joblib/joblib/pull/1472\n• None Add ability to change default Parallel backend in tests by setting the environment variable. https://github.com/joblib/joblib/pull/1356\n• None Fix temporary folder creation in on Linux subsystems on Windows which do have but don’t have the function https://github.com/joblib/joblib/issues/1353\n• None Drop runtime dependency on . is going away in Python 3.12 and is deprecated from Python 3.10 onwards. This import was kept around to avoid breaking scikit-learn, however it’s now been long enough since scikit-learn deployed a fixed (version 1.1 was released in May 2022) that it should be safe to remove this. https://github.com/joblib/joblib/pull/1361\n• None A warning is raised when a pickling error occurs during caching operations. In version 1.5, this warning will be turned into an error. For all other errors, a new warning has been introduced: . https://github.com/joblib/joblib/pull/1359\n• None Avoid (module, name) collisions when caching nested functions. This fix changes the module name of nested functions, invalidating caches from previous versions of Joblib. https://github.com/joblib/joblib/pull/1374\n• None Add in , to allow custom cache invalidation based on the metadata of the function call. https://github.com/joblib/joblib/pull/1149\n• None Improve the behavior of for , with simplified tracebacks and more efficient running time. https://github.com/joblib/joblib/pull/1393\n• None Add the context manager to allow for more fine-grained control over the backend configuration. It should be used in place of the context manager. In particular, it has the advantage of not requiring to set a specific backend in the context manager. https://github.com/joblib/joblib/pull/1392, https://github.com/joblib/joblib/pull/1457\n• None Add and in to make it easy to limit the number of items and remove items that have not been accessed for a long time in the cache. https://github.com/joblib/joblib/pull/1200\n• None Deprecate in as this is not automatically enforced, the limit can be directly passed to which needs to be called to actually enforce the limit. https://github.com/joblib/joblib/pull/1447\n• None Various updates to the documentation and to benchmarking tools. https://github.com/joblib/joblib/pull/1343, https://github.com/joblib/joblib/pull/1348, https://github.com/joblib/joblib/pull/1411, https://github.com/joblib/joblib/pull/1451, https://github.com/joblib/joblib/pull/1427, https://github.com/joblib/joblib/pull/1400\n• None Fix a security issue where could potentially run arbitrary code. Now only basic numerics are supported. https://github.com/joblib/joblib/pull/1327\n• None Make sure that joblib works even when multiprocessing is not available, for instance with Pyodide https://github.com/joblib/joblib/pull/1256\n• None Avoid unnecessary warnings when workers and main process delete the temporary memmap folder contents concurrently. https://github.com/joblib/joblib/pull/1263\n• None Fix memory alignment bug for pickles containing numpy arrays. This is especially important when loading the pickle with as the resulting object would not be able to correct the misalignment without performing a memory copy. This bug would cause invalid computation and segmentation faults with native code that would directly access the underlying data buffer of a numpy array, for instance C/C++/Cython code compiled with older GCC versions or some old OpenBLAS written in platform specific assembly. https://github.com/joblib/joblib/pull/1254\n• None Fix a security issue where could potentially run arbitrary code. Now only basic numerics are supported. https://github.com/joblib/joblib/pull/1327\n• None Fix byte order inconsistency issue during deserialization using joblib.load in cross-endian environment: the numpy arrays are now always loaded to use the system byte order, independently of the byte order of the system that serialized the pickle. https://github.com/joblib/joblib/pull/1181\n• None Fix joblib.Memory bug with the parameter when the cached function is a decorated function. https://github.com/joblib/joblib/pull/1165\n• None Fix to properly handle caching for functions defined interactively in a IPython session or in Jupyter notebook cell. https://github.com/joblib/joblib/pull/1214\n• None Update vendored loky (from version 2.9 to 3.0) and cloudpickle (from version 1.6 to 2.0) https://github.com/joblib/joblib/pull/1218\n• None dask: avoid redundant scattering of large arguments to make a more efficient use of the network resources and avoid crashing dask with “OSError: [Errno 55] No buffer space available” or “ConnectionResetError: [Errno 104] connection reset by peer”. https://github.com/joblib/joblib/pull/1133\n• None Make and caching system compatible with . Also make it explicit in the documentation that users should now expect to have their cache invalidated when either or a third party library involved in the cached values definition is upgraded. In particular, users updating to a release that includes this fix will see their previous cache invalidated if they contained reference to objects. https://github.com/joblib/joblib/pull/1136\n• None Fix a spurious invalidation of ’d functions called with under Jupyter or IPython. https://github.com/joblib/joblib/pull/1093\n• None Bump vendored loky to 2.9.0 and cloudpickle to 1.6.0. In particular this fixes a problem to add compat for Python 3.9.\n• None Fix a problem in the constructors of Parallel backends classes that inherit from the that prevented the dask backend to properly batch short tasks. https://github.com/joblib/joblib/pull/1062\n• None Fix a problem in the way the joblib dask backend batches calls that would badly interact with the dask callable pickling cache and lead to wrong results or errors. https://github.com/joblib/joblib/pull/1055\n• None Prevent a dask.distributed bug from surfacing in joblib’s dask backend during nested Parallel calls (due to joblib’s auto-scattering feature) https://github.com/joblib/joblib/pull/1061\n• None Workaround for a race condition after Parallel calls with the dask backend that would cause low level warnings from asyncio coroutines: https://github.com/joblib/joblib/pull/1078\n• None Make joblib work on Python 3 installation that do not ship with the lzma package in their standard library.\n• None Drop support for Python 2 and Python 3.5. All objects in and are now deprecated and will be removed in joblib 0.16. Note that no deprecation warning will be raised for these objects Python < 3.7. https://github.com/joblib/joblib/pull/1018\n• None Fix many bugs related to the temporary files and folder generated when automatically memory mapping large numpy arrays for efficient inter-process communication. In particular, this would cause exceptions to be raised under Windows and large leaked files in under Linux in case of crash. https://github.com/joblib/joblib/pull/966\n• None Make the dask backend collect results as soon as they complete leading to a performance improvement: https://github.com/joblib/joblib/pull/1025\n• None Fix the number of jobs reported by when called in a parallel backend context. https://github.com/joblib/joblib/pull/985\n• None Upgraded vendored cloupickle to 1.4.1 and loky to 2.8.0. This allows for Parallel calls of dynamically defined functions with type annotations in particular.\n• None Configure the loky workers’ environment to mitigate oversubsription with nested multi-threaded code in the following case:\n• None allow for a suitable number of threads for numba ( );\n• None enable Interprocess Communication for scheduler coordination when the nested code uses Threading Building Blocks (TBB) ( )\n• None Fix a regression where the loky backend was not reusing previously spawned workers. https://github.com/joblib/joblib/pull/968\n• None Revert https://github.com/joblib/joblib/pull/847 to avoid using that introduced a performance regression under Windows: https://github.com/joblib/joblib/issues/965\n• None Improved the load balancing between workers to avoid stranglers caused by an excessively large batch size when the task duration is varying significantly (because of the combined use of and with a partially warmed cache for instance). https://github.com/joblib/joblib/pull/899\n• None Add official support for Python 3.8: fixed protocol number in and updated tests.\n• None Fix a deadlock when using the dask backend (when scattering large numpy arrays). https://github.com/joblib/joblib/pull/914\n• None Warn users that they should never use with files from untrusted sources. Fix security related API change introduced in numpy 1.6.3 that would prevent using joblib with recent numpy versions. https://github.com/joblib/joblib/pull/879\n• None Upgrade to cloudpickle 1.1.1 that add supports for the upcoming Python 3.8 release among other things. https://github.com/joblib/joblib/pull/878\n• None Fix the oversubscription protection to only protect against nested calls. This allows to be run in background threads. https://github.com/joblib/joblib/pull/934\n• None Upgrade to loky 2.6.0 that add supports for the setting environment variables in child before loading any module. https://github.com/joblib/joblib/pull/940\n• None Fix the oversubscription protection for native libraries using threadpools (OpenBLAS, MKL, Blis and OpenMP runtimes). The maximal number of threads is can now be set in children using the in . It defaults to . https://github.com/joblib/joblib/pull/940 Add a non-regression test related to joblib issues #836 and #833, reporting that cloudpickle versions between 0.5.4 and 0.7 introduced a bug where global variables changes in a parent process between two calls to joblib.Parallel would not be propagated into the workers Memory now accepts pathlib.Path objects as parameter. Also, a warning is raised if the returned backend is None while is not None. Make raise an informative when the active parallel backend has zero worker. Make the wait for workers before trying to schedule work. This is useful in particular when the workers are provisionned dynamically but provisionning is not immediate (for instance using Kubernetes, Yarn or an HPC job queue). Include loky 2.4.2 with default serialization with . This can be tweaked with the environment variable . Fix nested backend in SequentialBackend to avoid changing the default backend to Sequential. (#792) Fix nested_backend behavior to avoid setting the default number of workers to -1 when the backend is not dask. (#784) Include loky 2.3.1 with better error reporting when a worker is abruptly terminated. Also fixes spurious debug output. Include cloudpickle 0.5.6. Fix a bug with the handling of global variables by locally defined functions. Include loky 2.3.0 with many bugfixes, notably w.r.t. when setting non-default multiprocessing contexts. Also include improvement on memory management of long running worker processes and fixed issues when using the loky backend under PyPy. Raises a more explicit exception when a corrupted MemorizedResult is loaded. Loading a corrupted cached file with mmap mode enabled would recompute the results and return them without memory mapping. Fixed a regression in Memory when positional arguments are called as kwargs several times with different values (#751). Integration of loky 2.2.2 that fixes issues with the selection of the default start method and improve the reporting when calling functions with arguments that raise an exception when unpickling. Prevent MemorizedFunc.call_and_shelve from loading cached results to RAM when not necessary. Results in big performance improvements Integrate loky 2.2.0 to fix regression with unpicklable arguments and functions reported by users (#723, #643). Loky 2.2.0 also provides a protection against memory leaks long running applications when psutil is installed (reported as #721). Joblib now includes the code for the dask backend which has been updated to properly handle nested parallelism and data scattering at the same time (#722). Restored some private API attribute and arguments ( and ’s ) for backward compat. (#716, #732). Make sure that any exception triggered when serializing jobs in the queue will be wrapped as a PicklingError as in past versions of joblib. Implement the backend with @ogrisel. This backend relies on a robust implementation of with spawned processes that can be reused across the calls. This fixes the bad integration with third paty libraries relying on thread pools, described in https://pythonhosted.org/joblib/parallel.html#bad-interaction-of-multiprocessing-and-third-party-libraries Limit the number of threads used in worker processes by C-libraries that relies on threadpools. This functionality works for MKL, OpenBLAS, OpenMP and Accelerated. Prevent numpy arrays with the same shape and data from hashing to the same memmap, to prevent jobs with preallocated arrays from writing over each other. Reduce overhead of automatic memmap by removing the need to hash the array. Make robust to under Windows when run in combination with . The automatic array memory mapping feature of does no longer use if it is too small (less than 2 GB). In particular in docker containers is only 64 MB by default which would cause frequent failures when running joblib in Docker containers. Make it possible to hint for thread-based parallelism with or enforce shared-memory semantics with . Rely on the built-in exception nesting system of Python 3 to preserve traceback information when an exception is raised on a remote worker process. This avoid verbose and redundant exception reports under Python 3. Preserve exception type information when doing nested Parallel calls instead of mapping the exception to the generic type. Introduce the concept of ‘store’ and refactor the internal storage implementation to make it accept extra store backends for caching results. and are the new options added to to specify and configure a store backend. Add the function to extend the store backend used by default with Memory. This default store backend is named ‘local’ and corresponds to the local filesystem. The store backend API is experimental and thus is subject to change in the future without deprecation. The parameter of is now marked as deprecated, use instead. Add support for LZ4 compression if package is installed. Allow passing a string to parameter in function. This string should correspond to the compressor used (e.g. zlib, gzip, lz4, etc). The default compression level is used in this case. Allow to be used globally instead of only as a context manager. Support lazy registration of external parallel backends Add initial implementation of LRU cache cleaning. You can specify the size limit of a object via the parameter and then need to clean explicitly the cache via the method. Make the multiprocessing backend work even when the name of the main thread is not the Python default. Thanks to Roman Yurchak for the suggestion. pytest is used to run the tests instead of nosetests. or do not work anymore, run instead. An instance of can be passed into the argument in . Fix handling of memmap objects with offsets greater than mmap.ALLOCATIONGRANULARITY in . See https://github.com/joblib/joblib/issues/451 for more details. Fix performance regression in with n_jobs=1. See https://github.com/joblib/joblib/issues/483 for more details. Fix race condition when a function cached with was used inside a . See https://github.com/joblib/joblib/issues/490 for more details. Fix tests when multiprocessing is disabled via the JOBLIB_MULTIPROCESSING environment variable. Remove warnings in nested Parallel objects when the inner Parallel has n_jobs=1. See https://github.com/joblib/joblib/pull/406 for more details. FIX a bug in stack formatting when the error happens in a compiled extension. See https://github.com/joblib/joblib/pull/382 for more details. FIX a bug in the constructor of BinaryZlibFile that would throw an exception when passing unicode filename (Python 2 only). See https://github.com/joblib/joblib/pull/384 for more details. Expose and in the public API to make them officially reusable by backend implementers. ENH: joblib.dump/load now accept file-like objects besides filenames. https://github.com/joblib/joblib/pull/351 for more details. Refactored joblib.Parallel to enable the registration of custom computational backends. https://github.com/joblib/joblib/pull/306 Note the API to register custom backends is considered experimental and subject to change without deprecation. Joblib pickle format change: joblib.dump always create a single pickle file and joblib.dump/joblib.save never do any memory copy when writing/reading pickle files. Reading pickle files generated with joblib versions prior to 0.10 will be supported for a limited amount of time, we advise to regenerate them from scratch when convenient. joblib.dump and joblib.load also support pickle files compressed using various strategies: zlib, gzip, bz2, lzma and xz. Note that lzma and xz are only available with python >= 3.3. https://github.com/joblib/joblib/pull/260 for more details. ENH: joblib.dump/load now accept pathlib.Path objects as filenames. https://github.com/joblib/joblib/pull/316 for more details. Workaround for “WindowsError: [Error 5] Access is denied” when trying to terminate a multiprocessing pool under Windows: https://github.com/joblib/joblib/issues/354 FIX a race condition that could cause a joblib.Parallel to hang when collecting the result of a job that triggers an exception. https://github.com/joblib/joblib/pull/296 FIX a bug that caused joblib.Parallel to wrongly reuse previously memmapped arrays instead of creating new temporary files. https://github.com/joblib/joblib/pull/294 for more details. FIX for raising non inheritable exceptions in a Parallel call. See https://github.com/joblib/joblib/issues/269 for more details. FIX joblib.hash error with mixed types sets and dicts containing mixed types keys when using Python 3. see https://github.com/joblib/joblib/issues/254 FIX joblib.dump/load for big numpy arrays with dtype=object. See https://github.com/joblib/joblib/issues/220 for more details. FIX joblib.Parallel hanging when used with an exhausted iterator. See https://github.com/joblib/joblib/issues/292 for more details. Revert back to the start method (instead of ) as the latter was found to cause crashes in interactive Python sessions. Joblib hashing now uses the default pickle protocol (2 for Python 2 and 3 for Python 3). This makes it very unlikely to get the same hash for a given object under Python 2 and Python 3. In particular, for Python 3 users, this means that the output of joblib.hash changes when switching from joblib 0.8.4 to 0.9.2 . We strive to ensure that the output of joblib.hash does not change needlessly in future versions of joblib but this is not officially guaranteed. Joblib pickles generated with Python 2 can not be loaded with Python 3 and the same applies for joblib pickles generated with Python 3 and loaded with Python 2. During the beta period 0.9.0b2 to 0.9.0b4, we experimented with a joblib serialization that aimed to make pickles serialized with Python 3 loadable under Python 2. Unfortunately this serialization strategy proved to be too fragile as far as the long-term maintenance was concerned (For example see https://github.com/joblib/joblib/pull/243). That means that joblib pickles generated with joblib 0.9.0bN can not be loaded under joblib 0.9.2. Joblib beta testers, who are the only ones likely to be affected by this, are advised to delete their joblib cache when they upgrade from 0.9.0bN to 0.9.2. Fixed a bug with that used to return unstable values for strings and numpy.dtype instances depending on interning states. Make joblib use the ‘forkserver’ start method by default under Python 3.4+ to avoid causing crash with 3rd party libraries (such as Apple vecLib / Accelerate or the GCC OpenMP runtime) that use an internal thread pool that is not reinitialized when a system call happens. New context manager based API ( block) to reuse the same pool of workers across consecutive parallel calls. Automated batching of fast tasks into longer running jobs to hide multiprocessing dispatching overhead when possible. FIX make it possible to call on pickled objects that include a mix of arrays of both memory memmapable dtypes and object dtype. OPTIM use the C-optimized pickler under Python 3 This makes it possible to efficiently process parallel jobs that deal with numerous Python objects such as large dictionaries. This fix uses a queue.Queue datastructure in the failing test. This datastructure is thread-safe thanks to an internal Lock. This Lock instance not picklable hence cause the picklability check of delayed to check fail. When using the threading backend, picklability is no longer required, hence this PRs give the user the ability to disable it on a case by case basis. BUG: use mmap_mode=’r’ by default in Parallel and MemmappingPool The former default of mmap_mode=’c’ (copy-on-write) caused problematic use of the paging file under Windows. BUG: fix usage of the /dev/shm folder under Linux ENH: Make memory robust to modification of source files while the interpreter is running. Should lead to less spurious cache flushes and recomputations. New API to handle memoized results by reference instead of by value. FIX #105: Race condition in task iterable consumption when pre_dispatch != ‘all’ that could cause crash with error messages “Pools seems closed” and “ValueError: generator already executing”. ENH: set default value of Parallel’s max_nbytes to 100MB Motivation: avoid introducing disk latency on medium sized parallel workload where memory usage is not an issue. ENH: make Memory respect mmap_mode at first call too This is low overhead alternative backend to the default multiprocessing backend that is suitable when calling compiled extensions that release the GIL. FIX: use safe_repr to print arg vals in trace This fixes a problem in which extremely long (and slow) stack traces would be produced when function parameters are large numpy arrays. ENH: limit memory copy with Parallel by leveraging numpy.memmap when possible ENH Handles tuples, sets and Python 3’s dict_keys type the same as lists. in pre_dispatch This release drops support for Python 2.5 in favor of support for Python 3.0 ENH: Parallel: Turn of pre-dispatch for already expanded lists ENH: detect recursive sub-process spawning, as when people do not protect the __main__ in scripts under Windows, and raise a useful error. BUG: make sure that sets and dictionaries give reproducible hashes The ordering of a dictionary is random. As a result the function hashing was not reproducible. Pretty hard to test BUG: make sure Memory pickles even if cachedir=None Bugfix release because of a merge error in release 0.6.0 ENH: hash: bugware to be able to hash objects defined interactively in IPython ENH: Parallel: warn and not fail for nested loops ENH: Parallel: n_jobs=-2 now uses all CPUs but one Py3k: compatibility fixes. This makes run fine the tests test_disk and test_parallel ENH: Replace os.path.exists before makedirs with exception check New disk.mkdirp will fail with other errnos than EEXIST. API: All the useful symbols in the __init__ ENH: Make sure memory hash in a reproducible way TEST: Better testing of parallel and pre_dispatch ENH: JOBLIB_MULTIPROCESSING env var to disable multiprocessing from the environment ENH : adding log message to know how long it takes to load from disk the cache BUG: fix error management in rm_subdirs BUG: fix for race condition during tests in mem.clear() BUG: Many fixes to capture interprocess race condition when mem.cache is used by several processes on the same cache. ENH: pre_dispatch in parallel: lazy generation of jobs in parallel for to avoid drowning memory. ENH: Add the option of overloading the arguments of the mother ‘Memory’ object in the cache method that is doing the decoration. BUG: Exceptions raised by Parallel when n_job=1 are no longer captured. BUG: Fix Windows peculiarities with path separators and file names BUG: Fix more windows locking bugs ENH: Make sure that exceptions raised in Parallel also inherit from the original exception class ENH: Add a shadow set of exceptions ENH: Clean up the code for parallel. Thanks to Fabian Pedregosa for the patch. BUG: Fix Parallel on computers with only one CPU, for n_jobs=-1. BUG: Fix hashing for function with a side effect modifying their input argument. Thanks to Pietro Berkes for reporting the bug and proving the patch. BUG: Make sure that joblib still works with Python2.5. => release 0.4.2"
    }
]