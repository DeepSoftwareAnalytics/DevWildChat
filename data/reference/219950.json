[
    {
        "link": "https://stackoverflow.com/questions/29190925/how-to-array-of-objects-in-template-ejs",
        "document": "I have a results variable that is an array of objects. I carry the results variable from my javascript file to my main route file. I am trying to render my page to display lists of each object in my template ejs file. I am able to list everything fine, but the lists are coming out as [object object] instead of the actual words that are in the objects. How do I get this to display as strings in my template file?\n\nThis is my route file:\n\nThis is what I am doing in my template ejs file:"
    },
    {
        "link": "https://stackoverflow.com/questions/45983078/how-to-pass-a-data-array-from-express-js-to-ejs-template-and-render-them",
        "document": "I use in my nodejs web app, user input some condition, and the program get an array of data such as this:\n\nI want to use the EJS template language to render all the objects in the array. How can I pass the data to the template and render them?"
    },
    {
        "link": "https://blog.logrocket.com/how-to-use-ejs-template-node-js-application",
        "document": "Node.js developers often have to dynamically generate HTML documents from the server side and send them to connected web app users. For example, a generic MVC web app displays the logged user’s name within the header section by dynamically constructing the header section HTML within the Node.js server. We can generate HTML documents using native HTML syntax and JavaScript with simple string concatenation, JavaScript template literals, or string replacement-based templating logic. However, these approaches become time-consuming and complex as the project complexity grows.\n\nTemplate engines offer a fully featured, pre-developed, productive solution for generating HTML documents based on templates and provided data objects. EJS (Embedded JavaScript Templating) is a popular template engine that we can use to send dynamically generated HTML documents from Node.js apps.\n\nIn this tutorial, we’ll learn EJS templating syntax, basic examples, and how to properly set up and use EJS templating in your Node.js apps. We’ll also explore advanced EJS templating techniques, best practices, and common development pitfalls, and compare EJS with other popular templating engines.\n\nEditor’s note — This blog was updated on 11 March, 2025, many thanks to the contributions of Shalitha Suranga. The revised post improves clarity with a more comprehensive introduction to EJS, detailed installation instructions, and expanded code examples. It also includes a comparison with other templating engines, a troubleshooting section, and answers to common reader questions. These updates make it an even more practical guide for developers working with EJS.\n• Template — Contains the static document structure, templating syntax, and static content\n• Data — Contents that the template engine uses to replace template syntax\n\nUnderstand the underlying process of a template engine using the following diagram:\n\nWeb template engines, like EJS, handle the task of interpolating data into HTML code while providing some features like repetitive blocks, nested blocks, shared templates that would have been difficult to implement by concatenating strings, or similar built-in JavaScript features.\n\nEJS is a web template engine that lets you generate HTML documents by embedding JavaScript code snippets within HTML code. EJS takes an HTML template written using EJS syntax and data as input parameters and renders the final HTML document by injecting data based on template logic.\n\nThe EJS web template engine comes with the following highlighted features:\n• Uses JavaScript as the templating language, so developers don’t have to learn a new language to get started\n• Allows developers to store templates in a standalone template files. The EJS engine handles files like PHP handles files to generate HTML documents dynamically\n• Works effectively with popular web frameworks like Express, and Fastify without requiring additional setup and advanced configuration\n• Comes with a fully-featured CLI that helps developers write automation scripts to generate HTML documents using templates and data files\n\nEJS is a popular web template engine that most Node.js developers integrate with their favorite web frameworks to build complex, MVC, server-rendered web apps.\n\nWe typically use EJS with web frameworks like Express and Fastify, but it’s possible to use EJS for templating requirements without a specific web framework. Let’s understand how EJS works by using it without a web framework.\n\nCreate a new Node.js project by using NPM or Yarn as follows:\n\nAdd the following code snippet to the file:\n\nThe method generates output based on the input template string and data. Here, the template uses the tag to render each data object property and we passed the required data properties from the second parameter of the method. EJS uses JavaScript as the templating language so expressions like directly get executed.\n\nWhen you run the file with Node.js, you’ll see the generated output on the terminal, as shown in the following preview:\n\nYou can also store the template content within a file named and use the method as follows:\n\nWe’ll learn how to use files in a web framework in an upcoming section soon!\n\nYou have just seen the basic syntax of EJS. The syntax used the following pattern and follows basic HTML-like syntax:\n\nFor example, previously we used the block to render the value of the data element. EJS has different tags for different purposes. The start tag is called the “HTML-escaped output” tag because if the string in the content has forbidden characters like and , the characters will be escaped (replaced by HTML codes) in the output string.\n\nHow to set up EJS in a Node.js application using Express\n\nEarlier, we wrote a sample templating example without using a web framework to simplify the introduction of this tutorial. Using a Node.js web framework undoubtedly boosts developer productivity and fastens feature delivery for building Node.js web apps, so let’s focus on using EJS under a web framework from now on.\n\nWe will use Express in this tutorial because it’s one of the best Node frameworks. It’s minimalistic and easy to get started with.\n\nLet’s start a project from scratch. Create a new directory where you want to put the project files.\n\nInitialize a new Node.js project in the directory by running or in the terminal, then to install Express and EJS, run:\n\nAfter installation, create a file and a directory in the root project directory. Inside the directory, create two directories — and . I will be explaining why we need these directories shortly.\n\nFirst, copy the following into :\n\nNow, inside the directory, create a file called . And the following into :\n\nIf you run on the terminal from the project directory, and then visit , you should see the following result:\n\nNow, let’s walk through some parts of the code and understand what is going on:\n• is self-explanatory. We are setting EJS as the Express app view engine. By default, Express will look inside of a directory when resolving the template files, which is why we had to create a directory\n• In , we are calling the method on the response object. This renders the view provided ( in this case) and sends back the rendered HTML string to the client\n• We didn’t have to provide the file extension because Express resolves it automatically; it knows the view engine we are using from . We also didn’t have to write the path as because the directory is used by default\n\nRecall that our aim is to combine data with templates. We can do that by passing a second argument to . This second argument must be an object, whose properties will be accessible in the EJS template file.\n\nThe above endpoint renders the template by passing the user details object via the property name, so we can now use the object identifier within the template to access available properties of the details object.\n\nUpdate too as follows:\n\nRun and you should get this:\n\nUsing JavaScript if statements in EJS\n\nThe EJS scriptlet tag, can contain view layer logic to render HTML content dynamically based on the provided data elements. Any JavaScript syntax can be used in this tag. You can use JavaScript statements to render HTML segments conditionally.\n\nTo see this in action, update the user details object in as follows:\n\nIf you run the app, you will see the paragraph in the statement displayed, as shown in the following preview:\n\nChange in the user details object, and the HTML block won’t be displayed.\n\nTake note of the syntax of the scriptlet . The opening is added within the second scriptlet block and the closing is added in the next scriptlet block. EJS scriptlet tags work the same as PHP tags.\n\nBecause the scriptlet tag can contain any valid JavaScript code, we can easily loop through and display data in EJS using JavaScript loop structures. You can use any preferred JavaScript loop structure with EJS by wrapping repetitive segments with a scriptlet block.\n\nCreate a new endpoint named and pass a list of sample articles into its template by adding the following code snippet to the :\n\nCreate a new file inside the named and add the following code:\n\nHere we used the JavaScript loop structure, but you can use the array method also based on your development preferences:\n\nWhen you run the app, visit and you should see the following:\n• We passed which is an array of article objects containing a and a to the template. Then, in the template, we loop through the array using ( or ) to render each post object as an HTML list item\n• The EJS engine repetitively runs the nested block since the parent scriptlet tag has a loop structure\n• The variable that references each item of the array on each iteration of the loop ( ) is accessible in the nested block of the template code until we reach the closing brackets,\n\nTry to use other JavaScript loop structures to render this article list.\n\nSome parts of websites stay the same across different pages, like the header, footer, and sidebar. If we repetitively add these parts in each page template, your project becomes hard to maintain since you’ll have to edit multiple templates to edit something in a common frontend section, i.e., adding a new link to the website’s primary navigation bar. EJS lets you create shared templates and import them with the inbuilt function.\n\nRecall that we created the directory earlier. Create two new files named and in this folder.\n\nThe content of should be the following:\n\nWe have included a link to Bootstrap in because we will be using Bootstrap classes to style the sample project.\n\nNow, update like so:\n\nAnd the following code to the file:\n• We’ve included the and partials using the function that takes the relative path to the file as an argument. Because and are in the same directory, to access from , we have to first go out of the directory using the template file path as\n• We used the HTML-unescaped output tag ( ) instead of the escaped output tag since we needed to render the HTML code of the shared template directly. Make sure not to use the HTML-unescaped output tag with untrusted user inputs, because it can expose your application to script injection attacks\n\nRun , visit and you should see this:\n\nNow we can reuse these EJS partials on other pages and avoid writing repetitive code segments. Include the partials within the file as follows:\n\nClick on the “Home” link. You’ll see the homepage with the same header and footer we’ve used for the articles page:\n\nNote that we can use any JavaScript operator in the EJS tags so that we can write this instead:\n\nSomething is wrong on the index page. Can you see it?\n\nThe title of the homepage is “Articles,” because the partial has the title of the web page hard coded as such, which is not desirable. We want the title of the page to reflect the content of the page, so we must pass in the title as an argument.\n\nEJS makes it easy because a partial has access to every variable in the parent view, so we just have to pass the variable in the object alongside the call to .\n\nUpdate the call to in as follows:\n\nThen update the title tag in :\n\nRun the app again and each page should have the correct title:\n\nYou can also pass a variable to a partial when you include it as follows:\n\nVariables passed this way precede variables passed through Express’s function.\n\nI intentionally didn’t implement the About page. Create the About page by passing some data to the to be more familiar with EJS partials and data passing.\n\nEJS uses JavaScript as the templating language, so it directly throws JavaScript exceptions and displays them within the terminal and website frontend. Here are some common EJS templating errors and how to resolve them:\n\nEJS throws a when you try to use a data property that is not provided by the function. This error can be fixed by sending the data element you used in the template or by checking whether the identifier is available as follows:\n\nEJS throws a if we try to read the properties of undefined identifiers. For example, if we try to access within the template but the object doesn’t contain the nested object, EJS throws this error.\n\nUsing JavaScript’s optional chaining operator is a popular way to solve these issues:\n\nMost developers know the possibility of printing HTML codes on the browser viewport by escaping HTML-specific characters. EJS renders HTML-escaped outputs with the tag, so if we use it to include a template, the raw code of the included template gets HTML-escaped, rendering visible HTML code on the browser viewport.\n\nTo solve this, check whether you use as follows:\n\nReplace with to render HTML-unescaped output to send raw HTML to the browser properly:\n\nis a general error type that JavaScript interpreters use to report language syntax issues, so EJS throws it for JavaScript-related syntax issues. Fixing JavaScript syntax issues is the only way to solve this issue. For example, the above error is thrown due to a missing curly brace of an statement, so closing the block properly resolves this issue:\n\nYou can use the ejs-lint NPM package or EJS code editor plugins to detect EJS syntax issues during development.\n\nAdhering to development best practices is the most practical way to create high-quality, maintainable, and beginner-friendly codebases. Consider adhering to the following best practices while developing EJS templates:\n• \n• Aim for simple, self-explanatory EJS templates by not writing complex JavaScript expressions within EJS output tags. You can either write the complex logic within the Express controller or a JavaScript function within the template\n• Effectively decompose your website into partials based on reusability requirements. Try not to create too many atomic parts or large parts that are difficult to maintain\n• Don’t assemble HTML blocks with so many output tags — use a few scriptlet tags and display HTML blocks conditionally to improve code readability, i.e., using one is better than using so many blocks\n• JavaScript errors prevent generating the final website page, so write JavaScript code within the EJS template by carefully inspecting available identifiers. Send all required data properly to the view and add conditional checks for optional data elements\n• Never create security vulnerabilities in your app from EJS templates using the tag with user inputs. Sanitize HTML strings properly if you need to render user input data as raw HTML\n\nApart from these EJS-specific best practices, write clean, readable, and error-free JavaScript code to improve the quality of JavaScript expressions in EJS templates.\n\nEJS has two main competitors: Pug and Handlebars. Both these EJS alternatives competitively offer features that EJS implements. Let’s check how EJS tries to offer a better templating solution by comparing it with Pug and Handlebars:\n\nEJS doesn’t implement template composition, but developers can use partials to decompose complex apps into reusable parts using the same technique that PHP developers use. Overall, EJS offers a simple and powerful templating solution by integrating native JavaScript with HTML using ASP-like tags.\n\nIn this article, we explored template engines, introduced EJS for Node.js app templating, and learned how to use it. We have seen how to reuse code with partials and how we can also pass data to them. Adhere to EJS templating best practices discussed above to write highly readable, maintainable, and beginner-friendly template source codes.\n\nHere is the EJS syntax reference if you want to learn more about what’s possible with EJS. You can check out the complete code for this article from this GitHub repository."
    },
    {
        "link": "https://dev.to/ryhenness/making-a-node-js-soundcloud-music-player-315d",
        "document": "What's up, it's been a while since I've posted! I'm excited about this one and I'm glad that you're here. :) I'm going to be building a SoundCloud music player using Node.js. This project's code can be found in my SweetCode repository alongside other code.\n\nThere are three main sections in this post. Following the post will walk you through the entire journey of building the SoundCloud music player - from setting up the 'Hello, world' server to changing the volume of the player:\n\nLet's start it off by making our server.js file. This is going to be our Node.js server, and it can stay simple for this project because a lot of the work will be done on the client-side. For this app, I'm going to be using Express as our minimalist server framework, and EJS as our view engine. If you're unfamiliar with setting up/running a Node.js server up, check this post out.\n\nAs you can see in our first route, we're going to be rendering client. \"Client\" is actually our .ejs file that is going to live in a folder called views. We've also got a public folder, this is where most of our JavaScript will live. Here is what the current folder structure looks like:\n\nWhenever I am starting work on a new project, I like to start simple and figure out what to focus on first. This project is mostly about making the browser play music from SoundCloud, so I want to keep the view as simple as possible for now. Let's set up our client.ejs file with a simple play button (this will give us a button to set the set up of our music player, it does nothing for now!).\n\nOkay so we're to the cool part! But how are we going to do this, what are we going to use? Well, we could use the vanilla SoundCloud API or we could search for some sort of wrapper package that someone has made for the SoundCloud API. I think I'm going to use this soundcloud-audio npm package written by Dmitri Voronianski, it seems solid and it's got good documentation to get us going.\n\nSince this npm package is written for the server-side, we're going to have to use some sort of bundler to allow us to use it on the client-side (the browser). You can find an explanation for this here. The bundler I am going to use is Browserify.\n\nLet's write our player.js file and then I'll show you how to bundle it and use it with your play button. Inside of our public folder, let's create our player.js. For this example, I'm going to be using this mix by Biskwiq.\n\n\n\nIn player.js let's first require our soundcloud-audio package and create our player. Creating the player requires you to use your own client id (I have scraped one from the web that you can use!)\n\nWe can give the window a function called play in which the player will call its resolve function with the link to the desired SoundCloud song.\n\nSweet, now all we have to do is include this script to our client.ejs file and assign it to the play button like so:\n\n\n\nOh wait! That's player-bundle.js, not player.js. We need to make this bundle file so that we can use this player on the client-side. Download Browserify by running this command in the root of your project:\n\n\n\nNow we can bundle the player.js by running the following command:\n\n\n\nThis will tell browserify to take the player.js file and bundle it up and throw its output into the same folder with the name player-bundle.js. Whenever we make a change to the player.js we need to rebundle it with this command. Running this command again will overwrite the bundle file without prompting.\n\nSweet! The play button now streams that song! NOTE: The volume will be high as we have not touched that setting yet. :)\n\nSo it plays music, but it doesn't do much else yet. I definitely expect a music player to have a pause button, and be able to change the volume. Let's do it! I'm first going to give my client.ejs the buttons:\n\nFirst, let's implement the pause function for the player since we're referencing it in the onclick but it's not actually defined yet. It's very easy, the function we want to use is already on the player constant we made:\n\nBam, the song pauses! Now let's get that volume control working so that we don't blow our ears off again. Our player is going to need to know what volume level to set the volume to, so let's make a function that takes a level. Note that this level needs to be a decimal, we'll be passing in a whole number then dividing it by 100 so that it's in decimal form for the player's setVolume function.\n\nSince we're not using a button for the volume, we can't use an onclick. What we can do is get the \"volume-range* control and call the setVolume function whenever it the control gets input.\n\nIf you followed along with me, congrats! You just made a SoundCloud music player. You used an Express Node.js server to serve a bundled npm package that wraps functionality for the SoundCloud API. If you want to continue development on this project, I've got a few suggestions:\n• Add a timeline for the song so that the user can change the time of the song.\n• Add some styling so that the player looks better!\n• Add a queue so that the user can add songs to be played next (also add a next button).\n• Show the currently playing song's cover art, title, and artist name.\n• Make it so that the player is shared across web browsers (if one user plays, skips, etc. then that function also happens for other users on the site). Look into socket.io.\n\nThanks for sticking around until the end. If you've got any questions feel free to comment/message me directly here, or on my socials: @rhenness & @ryhenness most places. :)\n\nIf you liked this post, you might also like Make a Node.js Twitter Bot: Bogus Definition."
    },
    {
        "link": "https://backbonejs.org",
        "document": "Backbone.js gives structure to web applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing API over a RESTful JSON interface.\n\nThe project is hosted on GitHub, and the annotated source code is available, as well as an online test suite, an example application, a list of tutorials and a long list of real-world projects that use Backbone. Backbone is available for use under the MIT software license.\n\nYou can report bugs and discuss features on the GitHub issues page, or add pages to the wiki.\n\nBackbone is an open-source component of DocumentCloud.\n\nBackbone's only hard dependency is Underscore.js ( >= 1.8.3). For RESTful persistence and DOM manipulation with Backbone.View, include jQuery ( >= 1.11.0). (Mimics of the Underscore and jQuery APIs, such as Lodash and Zepto, will also tend to work, with varying degrees of compatibility.)\n\nWhen working on a web application that involves a lot of JavaScript, one of the first things you learn is to stop tying your data to the DOM. It's all too easy to create JavaScript applications that end up as tangled piles of jQuery selectors and callbacks, all trying frantically to keep data in sync between the HTML UI, your JavaScript logic, and the database on your server. For rich client-side applications, a more structured approach is often helpful.\n\nWith Backbone, you represent your data as Models, which can be created, validated, destroyed, and saved to the server. Whenever a UI action causes an attribute of a model to change, the model triggers a \"change\" event; all the Views that display the model's state can be notified of the change, so that they are able to respond accordingly, re-rendering themselves with the new information. In a finished Backbone app, you don't have to write the glue code that looks into the DOM to find an element with a specific id, and update the HTML manually — when the model changes, the views simply update themselves.\n\nPhilosophically, Backbone is an attempt to discover the minimal set of data-structuring (models and collections) and user interface (views and URLs) primitives that are generally useful when building web applications with JavaScript. In an ecosystem where overarching, decides-everything-for-you frameworks are commonplace, and many libraries require your site to be reorganized to suit their look, feel, and default behavior — Backbone should continue to be a tool that gives you the freedom to design the full experience of your web application.\n\nIf you're new here, and aren't yet quite sure what Backbone is for, start by browsing the list of Backbone-based projects.\n\nMany of the code examples in this documentation are runnable, because Backbone is included on this page. Click the play button to execute them.\n\nThe single most important thing that Backbone can help you with is keeping your business logic separate from your user interface. When the two are entangled, change is hard; when logic doesn't depend on UI, your interface becomes easier to work with.\n\nA Model manages an internal table of data attributes, and triggers events when any of its data is modified. Models handle syncing data with a persistence layer — usually a REST API with a backing database. Design your models as the atomic reusable objects containing all of the helpful functions for manipulating their particular bit of data. Models should be able to be passed around throughout your app, and used anywhere that bit of data is needed.\n\nA View is an atomic chunk of user interface. It often renders the data from a specific model, or number of models — but views can also be data-less chunks of UI that stand alone. Models should be generally unaware of views. Instead, views listen to the model events, and react or re-render themselves appropriately.\n\nA Collection helps you deal with a group of related models, handling the loading and saving of new models to the server and providing helper functions for performing aggregations or computations against a list of models. Aside from their own events, collections also proxy through all of the events that occur to models within them, allowing you to listen in one place for any change that might happen to any model in the collection.\n\nBackbone is pre-configured to sync with a RESTful API. Simply create a new Collection with the of your resource endpoint:\n\nThe Collection and Model components together form a direct mapping of REST resources using the following methods:\n\nWhen fetching raw JSON data from an API, a Collection will automatically populate itself with data formatted as an array, while a Model will automatically populate itself with data formatted as an object:\n\nHowever, it's fairly common to encounter APIs that return data in a different format than what Backbone expects. For example, consider fetching a Collection from an API that returns the real data array wrapped in metadata:\n\nIn the above example data, a Collection should populate using the array rather than the root object structure. This difference is easily reconciled using a method that returns (or transforms) the desired portion of API data:\n\nEach View manages the rendering and user interaction within its own DOM element. If you're strict about not allowing views to reach outside of themselves, it helps keep your interface flexible — allowing views to be rendered in isolation in any place where they might be needed.\n\nBackbone remains unopinionated about the process used to render View objects and their subviews into UI: you define how your models get translated into HTML (or SVG, or Canvas, or something even more exotic). It could be as prosaic as a simple Underscore template, or as fancy as the React virtual DOM. Some basic approaches to rendering views can be found in the Backbone primer.\n\nIn rich web applications, we still want to provide linkable, bookmarkable, and shareable URLs to meaningful locations within an app. Use the Router to update the browser URL whenever the user reaches a new \"place\" in your app that they might want to bookmark or share. Conversely, the Router detects changes to the URL — say, pressing the \"Back\" button — and can tell your application exactly where you are now.\n\nEvents is a module that can be mixed in to any object, giving the object the ability to bind and trigger custom named events. Events do not have to be declared before they are bound, and may take passed arguments. For example:\n\nFor example, to make a handy event dispatcher that can coordinate events among different areas of your application:\n\non Alias: bind \n\n Bind a callback function to an object. The callback will be invoked whenever the event is fired. If you have a large number of different events on a page, the convention is to use colons to namespace them: , or . The event string may also be a space-delimited list of several events...\n\nCallbacks bound to the special event will be triggered when any event occurs, and are passed the name of the event as the first argument. For example, to proxy all events from one object to another:\n\nAll Backbone event methods also support an event map syntax, as an alternative to positional arguments:\n\nTo supply a context value for when the callback is invoked, pass the optional last argument: or .\n\noff Alias: unbind \n\n Remove a previously-bound callback function from an object. If no context is specified, all of the versions of the callback with different contexts will be removed. If no callback is specified, all callbacks for the event will be removed. If no event is specified, callbacks for all events will be removed.\n\nNote that calling , for example, will indeed remove all events on the model — including events that Backbone uses for internal bookkeeping.\n\ntrigger \n\n Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be passed along to the event callbacks.\n\nonce \n\n Just like on, but causes the bound callback to fire only once before being removed. Handy for saying \"the next time that X happens, do this\". When multiple events are passed in using the space separated syntax, the event will fire once for every event you passed in, not once for a combination of all events\n\nlistenTo \n\n Tell an object to listen to a particular event on an other object. The advantage of using this form, instead of , is that listenTo allows the object to keep track of the events, and they can be removed all at once later on. The callback will always be called with object as context.\n\nstopListening \n\n Tell an object to stop listening to events. Either call stopListening with no arguments to have the object remove all of its registered callbacks ... or be more precise by telling it to remove just the events it's listening to on a specific object, or a specific event, or just a specific callback.\n\nlistenToOnce \n\n Just like listenTo, but causes the bound callback to fire only once before being removed.\n\nCatalog of Events \n\n Here's the complete list of built-in Backbone events, with arguments. You're also free to trigger your own events on Models, Collections and Views as you see fit. The object itself mixes in , and can be used to emit any global events that your application needs.\n• \"add\" (model, collection, options) — when a model is added to a collection.\n• \"remove\" (model, collection, options) — when a model is removed from a collection.\n• \"update\" (collection, options) — single event triggered after any number of models have been added, removed or changed in a collection.\n• \"reset\" (collection, options) — when the collection's entire contents have been reset.\n• \"sort\" (collection, options) — when the collection has been re-sorted.\n• \"changeId\" (model, previousId, options) — when the model's id has been updated.\n• \"change:[attribute]\" (model, value, options) — when a specific attribute has been updated.\n• \"request\" (model_or_collection, xhr, options) — when a model or collection has started a request to the server.\n• \"sync\" (model_or_collection, response, options) — when a model or collection has been successfully synced with the server.\n• \"error\" (model_or_collection, xhr, options) — when a model's or collection's request to the server has failed.\n• \"invalid\" (model, error, options) — when a model's validation fails on the client.\n• \"route:[name]\" (params) — Fired by the router when a specific route is matched.\n• \"route\" (route, params) — Fired by the router when any route has been matched.\n• \"route\" (router, route, params) — Fired by history when any route has been matched.\n• \"notfound\" () — Fired by history when no route could be matched.\n• \"all\" — this special event fires for any triggered event, passing the event name as the first argument followed by all trigger arguments.\n\nGenerally speaking, when calling a function that emits an event ( , , and so on...), if you'd like to prevent the event from being triggered, you may pass as an option. Note that this is rarely, perhaps even never, a good idea. Passing through a specific flag in the options for your event callback to look at, and choose to ignore, will usually work out better.\n\nModels are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control. You extend Backbone.Model with your domain-specific methods, and Model provides a basic set of functionality for managing changes.\n\nThe following is a contrived example, but it demonstrates defining a model with a custom method, setting an attribute, and firing an event keyed to changes in that specific attribute. After running this code once, will be available in your browser's console, so you can play around with it.\n\nextend \n\n To create a Model class of your own, you extend Backbone.Model and provide instance properties, as well as optional classProperties to be attached directly to the constructor function.\n\nextend correctly sets up the prototype chain, so subclasses created with extend can be further extended and subclassed as far as you like.\n\nBrief aside on : JavaScript does not provide a simple way to call super — the function of the same name defined higher on the prototype chain. If you override a core function like , or , and you want to invoke the parent object's implementation, you'll have to explicitly call it, along these lines:\n\npreinitialize \n\n For use with models as ES classes. If you define a preinitialize method, it will be invoked when the Model is first created, before any instantiation logic is run for the Model.\n\nconstructor / initialize \n\n When creating an instance of a model, you can pass in the initial values of the attributes, which will be set on the model. If you define an initialize function, it will be invoked when the model is created.\n\nIn rare cases, if you're looking to get fancy, you may want to override constructor, which allows you to replace the actual constructor function for your model.\n\nIf you pass a as the options, the model gains a property that will be used to indicate which collection the model belongs to, and is used to help compute the model's url. The property is normally created automatically when you first add a model to a collection. Note that the reverse is not true, as passing this option to the constructor will not automatically add the model to the collection. Useful, sometimes.\n\nIf is passed as an option, the attributes will first be converted by parse before being set on the model.\n\nget \n\n Get the current value of an attribute from the model. For example:\n\nset \n\n Set a hash of attributes (one or many) on the model. If any of the attributes change the model's state, a event will be triggered on the model. Change events for specific attributes are also triggered, and you can bind to those as well, for example: , and . You may also pass individual keys and values.\n\nescape \n\n Similar to get, but returns the HTML-escaped version of a model's attribute. If you're interpolating data from the model into HTML, using escape to retrieve attributes will prevent XSS attacks.\n\nhas \n\n Returns if the attribute is set to a non-null or non-undefined value.\n\nunset \n\n Remove an attribute by deleting it from the internal attributes hash. Fires a event unless is passed as an option.\n\nclear \n\n Removes all attributes from the model, including the attribute. Fires a event unless is passed as an option.\n\nid \n\n A special property of models, the id is an arbitrary string (integer id or UUID). If you set the id in the attributes hash, it will be copied onto the model as a direct property. should not be manipulated directly, it should be modified only via . Models can be retrieved by id from collections, and the id is used to generate model URLs by default.\n\nidAttribute \n\n A model's unique identifier is stored under the attribute. If you're directly communicating with a backend (CouchDB, MongoDB) that uses a different unique key, you may set a Model's to transparently map from that key to . If you set , you may also want to override .\n\ncid \n\n A special property of models, the cid or client id is a unique identifier automatically assigned to all models when they're first created. Client ids are handy when the model has not yet been saved to the server, and does not yet have its eventual true id, but already needs to be visible in the UI.\n\ncidPrefix \n\n If your model has an that is anything other than an integer or a UUID, there is the possibility that it might collide with its . To prevent this, you can override the prefix that s start with.\n\nattributes \n\n The attributes property is the internal hash containing the model's state — usually (but not necessarily) a form of the JSON object representing the model data on the server. It's often a straightforward serialization of a row from the database, but it could also be client-side computed state.\n\nPlease use set to update the attributes instead of modifying them directly. If you'd like to retrieve and munge a copy of the model's attributes, use instead.\n\nDue to the fact that Events accepts space separated lists of events, attribute names should not include spaces.\n\nchanged \n\n The changed property is the internal hash containing all the attributes that have changed since its last set. Please do not update changed directly since its state is internally maintained by set. A copy of changed can be acquired from changedAttributes.\n\ndefaults \n\n The defaults hash (or function) can be used to specify the default attributes for your model. When creating an instance of the model, any unspecified attributes will be set to their default value.\n\nRemember that in JavaScript, objects are passed by reference, so if you include an object as a default value, it will be shared among all instances. Instead, define defaults as a function.\n\nIf you set a value for the model’s , you should define the defaults as a function that returns a different, unique id on every invocation. Not doing so would likely prevent an instance of from correctly identifying model hashes and is almost certainly a mistake, unless you never add instances of the model class to a collection.\n\ntoJSON \n\n Return a shallow copy of the model's attributes for JSON stringification. This can be used for persistence, serialization, or for augmentation before being sent to the server. The name of this method is a bit confusing, as it doesn't actually return a JSON string — but I'm afraid that it's the way that the JavaScript API for JSON.stringify works.\n\nsync \n\n Uses Backbone.sync to persist the state of a model to the server. Can be overridden for custom behavior.\n\nfetch \n\n Merges the model's state with attributes fetched from the server by delegating to Backbone.sync. Returns a jqXHR. Useful if the model has never been populated with data, or if you'd like to ensure that you have the latest server state. Triggers a event if the server's state differs from the current attributes. accepts and callbacks in the options hash, which are both passed as arguments.\n\nsave \n\n Save a model to your database (or alternative persistence layer), by delegating to Backbone.sync. Returns a jqXHR if validation is successful and otherwise. The attributes hash (as in set) should contain the attributes you'd like to change — keys that aren't mentioned won't be altered — but, a complete representation of the resource will be sent to the server. As with , you may pass individual keys and values instead of a hash. If the model has a validate method, and validation fails, the model will not be saved. If the model isNew, the save will be a (HTTP ), if the model already exists on the server, the save will be an (HTTP ).\n\nIf instead, you'd only like the changed attributes to be sent to the server, call . You'll get an HTTP request to the server with just the passed-in attributes.\n\nCalling with new attributes will cause a event immediately, a event as the Ajax request begins to go to the server, and a event after the server has acknowledged the successful change. Pass if you'd like to wait for the server before setting the new attributes on the model.\n\nIn the following example, notice how our overridden version of receives a request the first time the model is saved and an request the second time.\n\nsave accepts and callbacks in the options hash, which will be passed the arguments . If a server-side validation fails, return a non- HTTP response code, along with an error response in text or JSON.\n\ndestroy \n\n Destroys the model on the server by delegating an HTTP request to Backbone.sync. Returns a jqXHR object, or if the model isNew. Accepts and callbacks in the options hash, which will be passed . Triggers a event on the model, which will bubble up through any collections that contain it, a event as it begins the Ajax request to the server, and a event, after the server has successfully acknowledged the model's deletion. Pass if you'd like to wait for the server to respond before removing the model from the collection.\n\nUnderscore Methods (9) \n\n Backbone proxies to Underscore.js to provide 9 object functions on Backbone.Model. They aren't all documented here, but you can take a look at the Underscore documentation for the full details…\n\nBy default checks validate before setting any attributes but you may also tell to validate the new attributes by passing as an option. The validate method receives the model attributes as well as any options passed to or , if validate returns an error, does not continue, the model attributes are not modified on the server, an event is triggered, and the property is set on the model with the value returned by this method.\n\nevents are useful for providing coarse-grained error messages at the model or collection level.\n\nvalidationError \n\n The value returned by validate during the last failed validation.\n\nThe method receives the model attributes as well as any options passed to isValid, if returns an error an event is triggered, and the error is set on the model in the property.\n\nurl \n\n Returns the relative URL where the model's resource would be located on the server. If your models are located somewhere else, override this method with the correct logic. Generates URLs of the form: by default, but you may override by specifying an explicit if the model's collection shouldn't be taken into account.\n\nDelegates to Collection#url to generate the URL, so make sure that you have it defined, or a urlRoot property, if all models of this class share a common root URL. A model with an id of , stored in a Backbone.Collection with a of , would have this URL:\n\nurlRoot \n\n Specify a if you're using a model outside of a collection, to enable the default url function to generate URLs based on the model id. \n\n Normally, you won't need to define this. Note that may also be a function.\n\nparse \n\n parse is called whenever a model's data is returned by the server, in fetch, and save. The function is passed the raw object, and should return the attributes hash to be set on the model. The default implementation is a no-op, simply passing through the JSON response. Override this if you need to work with a preexisting API, or better namespace your responses.\n\nIf you're working with a Rails backend that has a version prior to 3.1, you'll notice that its default implementation includes a model's attributes under a namespace. To disable this behavior for seamless Backbone integration, set:\n\nclone \n\n Returns a new instance of the model with identical attributes.\n\nisNew \n\n Has this model been saved to the server yet? If the model does not yet have an , it is considered to be new.\n\nhasChanged \n\n Has the model changed since its last set? If an attribute is passed, returns if that specific attribute has changed.\n\nNote that this method, and the following change-related ones, are only useful during the course of a event.\n\nchangedAttributes \n\n Retrieve a hash of only the model's attributes that have changed since the last set, or if there are none. Optionally, an external attributes hash can be passed in, returning the attributes in that hash which differ from the model. This can be used to figure out which portions of a view should be updated, or what calls need to be made to sync the changes to the server.\n\nprevious \n\n During a event, this method can be used to get the previous value of a changed attribute.\n\npreviousAttributes \n\n Return a copy of the model's previous attributes. Useful for getting a diff between versions of a model, or getting back to a valid state after an error occurs.\n\nCollections are ordered sets of models. You can bind events to be notified when any model in the collection has been modified, listen for and events, the collection from the server, and use a full suite of Underscore.js methods.\n\nAny event that is triggered on a model in a collection will also be triggered on the collection directly, for convenience. This allows you to listen for changes to specific attributes in any model in a collection, for example:\n\nextend \n\n To create a Collection class of your own, extend Backbone.Collection, providing instance properties, as well as optional classProperties to be attached directly to the collection's constructor function.\n\nmodel \n\n Override this property to specify the model class that the collection contains. If defined, you can pass raw attributes objects (and arrays) and options to add, create, and reset, and the attributes will be converted into a model of the proper type using the provided options, if any.\n\nA collection can also contain polymorphic models by overriding this property with a constructor that returns a model.\n\nmodelId \n\n Override this method to return the value the collection will use to identify a model given its attributes. Useful for combining models from multiple tables with different values into a single collection.\n\nBy default returns the value of the given within the , or failing that, . If your collection uses a model factory and the id ranges of those models might collide, you must override this method.\n\npreinitialize \n\n For use with collections as ES classes. If you define a preinitialize method, it will be invoked when the Collection is first created and before any instantiation logic is run for the Collection.\n\nconstructor / initialize \n\n When creating a Collection, you may choose to pass in the initial array of models. The collection's comparator may be included as an option. Passing as the comparator option will prevent sorting. If you define an initialize function, it will be invoked when the collection is created. There are a couple of options that, if provided, are attached to the collection directly: and .\n\n Pass for to create an empty Collection with .\n\nIf is passed as an option, the attributes will first be converted by parse before being set on the collection.\n\nmodels \n\n Raw access to the JavaScript array of models inside of the collection. Usually you'll want to use , , or the Underscore methods to access model objects, but occasionally a direct reference to the array is desired.\n\ntoJSON \n\n Return an array containing the attributes hash of each model (via toJSON) in the collection. This can be used to serialize and persist the collection as a whole. The name of this method is a bit confusing, because it conforms to JavaScript's JSON API.\n\nsync \n\n Uses Backbone.sync to persist the state of a collection to the server. Can be overridden for custom behavior.\n\nUnderscore Methods (46) \n\n Backbone proxies to Underscore.js to provide 46 iteration functions on Backbone.Collection. They aren't all documented here, but you can take a look at the Underscore documentation for the full details…\n\nMost methods can take an object or string to support model-attribute-style predicates or a function that receives the model instance as an argument.\n\nadd \n\n Add a model (or an array of models) to the collection, firing an event for each model, and an event afterwards. This is a variant of set with the same options and return value, but it always adds and never removes. If you're adding models to the collection that are already in the collection, they'll be ignored, unless you pass , in which case their attributes will be merged into the corresponding models, firing any appropriate events.\n\nNote that adding the same model (a model with the same ) to a collection more than once \n\n is a no-op.\n\nremove \n\n Remove a model (or an array of models) from the collection, and return them. Each model can be a Model instance, an string or a JS object, any value acceptable as the argument of . Fires a event for each model, and a single event afterwards, unless is passed. The model's index before removal is available to listeners as .\n\nreset \n\n Adding and removing models one at a time is all well and good, but sometimes you have so many models to change that you'd rather just update the collection in bulk. Use reset to replace a collection with a new list of models (or attribute hashes), triggering a single event on completion, and without triggering any add or remove events on any models. Returns the newly-set models. For convenience, within a event, the list of any previous models is available as .\n\n Pass for to empty your Collection with .\n\nHere's an example using reset to bootstrap a collection during initial page load, in a Rails application:\n\nCalling without passing any models as arguments will empty the entire collection.\n\nset \n\n The set method performs a \"smart\" update of the collection with the passed list of models. If a model in the list isn't yet in the collection it will be added; if the model is already in the collection its attributes will be merged; and if the collection contains any models that aren't present in the list, they'll be removed. All of the appropriate , , and events are fired as this happens, with a single event at the end. Returns the touched models in the collection. If you'd like to customize this behavior, you can change it with options: , , or .\n\nIf a model property is defined, you may also pass raw attributes objects and options, and have them be vivified as instances of the model using the provided options. If you set a comparator, the collection will automatically sort itself and trigger a event, unless you pass or use the option. Pass to splice the model(s) into the collection at the specified .\n\nget \n\n Get a model from a collection, specified by an id, a cid, or by passing in a model.\n\nat \n\n Get a model from a collection, specified by index. Useful if your collection is sorted, and if your collection isn't sorted, at will still retrieve models in insertion order. When passed a negative index, it will retrieve the model from the back of the collection.\n\npush \n\n Like add, but always adds a model at the end of the collection and never sorts.\n\npop \n\n Remove and return the last model from a collection. Takes the same options as remove.\n\nunshift \n\n Like add, but always adds a model at the beginning of the collection and never sorts.\n\nshift \n\n Remove and return the first model from a collection. Takes the same options as remove.\n\nslice \n\n Return a shallow copy of this collection's models, using the same options as native Array#slice.\n\nlength \n\n Like an array, a Collection maintains a property, counting the number of models it contains.\n\ncomparator \n\n By default there is no comparator for a collection. If you define a comparator, it will be used to sort the collection any time a model is added. A comparator can be defined as a sortBy (pass a function that takes a single argument), as a sort (pass a comparator function that expects two arguments), or as a string indicating the attribute to sort by.\n\n\"sortBy\" comparator functions take a model and return a numeric or string value by which the model should be ordered relative to others. \"sort\" comparator functions take two models, and return if the first model should come before the second, if they are of the same rank and if the first model should come after. Note that Backbone depends on the arity of your comparator function to determine between the two styles, so be careful if your comparator function is bound.\n\nNote how even though all of the chapters in this example are added backwards, they come out in the proper order:\n\nCollections with a comparator will not automatically re-sort if you later change model attributes, so you may wish to call after changing model attributes that would affect the order.\n\nsort \n\n Force a collection to re-sort itself. Note that a collection with a comparator will sort itself automatically whenever a model is added. To disable sorting when adding a model, pass to . Calling sort triggers a event on the collection.\n\npluck \n\n Pluck an attribute from each model in the collection. Equivalent to calling and returning a single attribute from the iterator.\n\nwhere \n\n Return an array of all the models in a collection that match the passed attributes. Useful for simple cases of .\n\nfindWhere \n\n Just like where, but directly returns only the first model in the collection that matches the passed attributes. If no model matches returns .\n\nurl \n\n Set the url property (or function) on a collection to reference its location on the server. Models within the collection will use url to construct URLs of their own.\n\nparse \n\n parse is called by Backbone whenever a collection's models are returned by the server, in fetch. The function is passed the raw object, and should return the array of model attributes to be added to the collection. The default implementation is a no-op, simply passing through the JSON response. Override this if you need to work with a preexisting API, or better namespace your responses.\n\nclone \n\n Returns a new instance of the collection with an identical list of models.\n\nfetch \n\n Fetch the default set of models for this collection from the server, setting them on the collection when they arrive. The options hash takes and callbacks which will both be passed as arguments. When the model data returns from the server, it uses set to (intelligently) merge the fetched models, unless you pass , in which case the collection will be (efficiently) reset. Delegates to Backbone.sync under the covers for custom persistence strategies and returns a jqXHR. The server handler for fetch requests should return a JSON array of models.\n\nThe behavior of fetch can be customized by using the available set options. For example, to fetch a collection, getting an event for every new model, and a event for every changed existing model, without removing anything:\n\njQuery.ajax options can also be passed directly as fetch options, so to fetch a specific page of a paginated collection:\n\nNote that fetch should not be used to populate collections on page load — all models needed at load time should already be bootstrapped in to place. fetch is intended for lazily-loading models for interfaces that are not needed immediately: for example, documents with collections of notes that may be toggled open and closed.\n\ncreate \n\n Convenience to create a new instance of a model within a collection. Equivalent to instantiating a model with a hash of attributes, saving the model to the server, and adding the model to the set after being successfully created. Returns the new model. If client-side validation failed, the model will be unsaved, with validation errors. In order for this to work, you should set the model property of the collection. The create method can accept either an attributes hash and options to be passed down during model instantiation or an existing, unsaved model object.\n\nCreating a model will cause an immediate event to be triggered on the collection, a event as the new model is sent to the server, as well as a event, once the server has responded with the successful creation of the model. Pass if you'd like to wait for the server before adding the new model to the collection.\n\nmixin \n\n provides a way to enhance the base Backbone.Collection and any collections which extend it. This can be used to add generic methods (e.g. additional Underscore Methods).\n\nWeb applications often provide linkable, bookmarkable, shareable URLs for important locations in the app. Until recently, hash fragments ( ) were used to provide these permalinks, but with the arrival of the History API, it's now possible to use standard URLs ( ). Backbone.Router provides methods for routing client-side pages, and connecting them to actions and events. For browsers which don't yet support the History API, the Router handles graceful fallback and transparent translation to the fragment version of the URL.\n\nDuring page load, after your application has finished creating all of its routers, be sure to call or to route the initial URL.\n\nextend \n\n Get started by creating a custom router class. Define action functions that are triggered when certain URL fragments are matched, and provide a routes hash that pairs routes to actions. Note that you'll want to avoid using a leading slash in your route definitions:\n\nroutes \n\n The routes hash maps URLs with parameters to functions on your router (or just direct function definitions, if you prefer), similar to the View's events hash. Routes can contain parameter parts, , which match a single URL component between slashes; and splat parts , which can match any number of URL components. Part of a route can be made optional by surrounding it in parentheses .\n\nFor example, a route of will match a fragment of , passing and to the action as positional arguments.\n\nA route of will match , passing to the action.\n\nA route of will match and , passing to the action in the first case, and passing and to the action in the second.\n\nA nested optional route of will match , , and , passing to the action in the second case, and passing and to the action in the third.\n\nTrailing slashes are treated as part of the URL, and (correctly) treated as a unique route when accessed. and will fire different callbacks. If you can't avoid generating both types of URLs, you can define a matcher to capture both cases.\n\nWhen the visitor presses the back button, or enters a URL, and a particular route is matched, the name of the action will be fired as an event, so that other objects can listen to the router, and be notified. In the following example, visiting will fire a event from the router.\n\npreinitialize \n\n For use with routers as ES classes. If you define a preinitialize method, it will be invoked when the Router is first created and before any instantiation logic is run for the Router.\n\nconstructor / initialize \n\n When creating a new router, you may pass its routes hash directly as an option, if you choose. All will also be passed to your function, if defined.\n\nroute \n\n Manually create a route for the router, The argument may be a routing string or regular expression. Each matching capture from the route or regular expression will be passed as an argument to the callback. The argument will be triggered as a event whenever the route is matched. If the argument is omitted will be used instead. Routes added later may override previously declared routes.\n\nnavigate \n\n Whenever you reach a point in your application that you'd like to save as a URL, call navigate in order to update the URL. If you also wish to call the route function, set the trigger option to . To update the URL without creating an entry in the browser's history, set the replace option to .\n\nexecute \n\n This method is called internally within the router, whenever a route matches and its corresponding callback is about to be executed. Return false from execute to cancel the current transition. Override it to perform custom parsing or wrapping of your routes, for example, to parse query strings before handing them to your route callback, like so:\n\nHistory serves as a global router (per frame) to handle events or , match the appropriate route, and trigger callbacks. It forwards the and events of the matching router, or when no route in any router matches the current URL. You shouldn't ever have to create one of these yourself since already contains one.\n\npushState support exists on a purely opt-in basis in Backbone. Older browsers that don't support will continue to use hash-based URL fragments, and if a hash URL is visited by a -capable browser, it will be transparently upgraded to the true URL. Note that using real URLs requires your web server to be able to correctly render those pages, so back-end changes are required as well. For example, if you have a route of , your web server must be able to serve that page, if the browser visits that URL directly. For full search-engine crawlability, it's best to have the server generate the complete HTML for the page ... but if it's a web application, just rendering the same content you would have for the root URL, and filling in the rest with Backbone Views and JavaScript works fine.\n\nstart \n\n When all of your Routers have been created, and all of the routes are set up properly, call to begin monitoring events, and dispatching routes. Subsequent calls to will throw an error, and is a boolean value indicating whether it has already been called.\n\nTo indicate that you'd like to use HTML5 support in your application, use . If you'd like to use , but have browsers that don't support it natively use full page refreshes instead, you can add to the options.\n\nIf your application is not being served from the root url of your domain, be sure to tell History where the root really is, as an option: .\n\nThe value provided for will be normalized to include a leading and trailing slash. When navigating to a route the default behavior is to exclude the trailing slash from the URL (e.g., ). If you prefer to include the trailing slash (e.g., ) use . URLs will always contain a leading slash. When root is URLs will look like regardless of the value of .\n\nWhen called, if a route succeeds with a match for the current URL, returns and the and events are triggered. If no defined route matches the current URL, it returns and is triggered instead.\n\nIf the server has already rendered the entire page, and you don't want the initial route to trigger when starting History, pass .\n\nBecause hash-based history in Internet Explorer relies on an , be sure to call only after the DOM is ready.\n\nBackbone.sync is the function that Backbone calls every time it attempts to read or save a model to the server. By default, it uses to make a RESTful JSON request and returns a jqXHR. You can override it in order to use a different persistence strategy, such as WebSockets, XML transport, or Local Storage.\n\nThe method signature of Backbone.sync is\n• model – the model to be saved (or collection to be read)\n• options – success and error callbacks, and all other jQuery request options\n\nWith the default implementation, when Backbone.sync sends up a request to save a model, its attributes will be passed, serialized as JSON, and sent in the HTTP body with content-type . When returning a JSON response, send down the attributes of the model that have been changed by the server, and need to be updated on the client. When responding to a request from a collection (Collection#fetch), send down an array of model attribute objects.\n\nWhenever a model or collection begins a sync with the server, a event is emitted. If the request completes successfully you'll get a event, and an event if not.\n\nThe sync function may be overridden globally as , or at a finer-grained level, by adding a function to a Backbone collection or to an individual model.\n\nThe default sync handler maps CRUD to REST like so:\n\nAs an example, a Rails 4 handler responding to an call from might look like this:\n\nOne more tip for integrating Rails versions prior to 3.1 is to disable the default namespacing for calls on models by setting\n\najax \n\n If you want to use a custom AJAX function, or your endpoint doesn't support the jQuery.ajax API and you need to tweak things, you can do so by setting .\n\nemulateHTTP \n\n If you want to work with a legacy web server that doesn't support Backbone's default REST/HTTP approach, you may choose to turn on . Setting this option will fake , and requests with a HTTP , setting the header with the true method. If is also on, the true method will be passed as an additional parameter.\n\nemulateJSON \n\n If you're working with a legacy web server that can't handle requests encoded as , setting will cause the JSON to be serialized under a parameter, and the request to be made with a MIME type, as if from an HTML form.\n\nBackbone views are almost more convention than they are code — they don't determine anything about your HTML or CSS for you, and can be used with any JavaScript templating library. The general idea is to organize your interface into logical views, backed by models, each of which can be updated independently when the model changes, without having to redraw the page. Instead of digging into a JSON object, looking up an element in the DOM, and updating the HTML by hand, you can bind your view's function to the model's event — and now everywhere that model data is displayed in the UI, it is always immediately up to date.\n\nextend \n\n Get started with views by creating a custom view class. You'll want to override the render function, specify your declarative events, and perhaps the , , or of the View's root element.\n\nProperties like , , , , and may also be defined as a function, if you want to wait to define them until runtime.\n\npreinitialize \n\n For use with views as ES classes. If you define a preinitialize method, it will be invoked when the view is first created, before any instantiation logic is run.\n\nconstructor / initialize \n\n There are several special options that, if passed, will be attached directly to the view: , , , , , , and . If the view defines an initialize function, it will be called when the view is first created. If you'd like to create a view that references an element already in the DOM, pass in the element as an option:\n\nel \n\n All views have a DOM element at all times (the el property), whether they've already been inserted into the page or not. In this fashion, views can be rendered at any time, and inserted into the DOM all at once, in order to get high-performance UI rendering with as few reflows and repaints as possible.\n\ncan be resolved from a DOM selector string or an Element; otherwise it will be created from the view's , , and properties. If none are set, is an empty , which is often just fine. An el reference may also be passed in to the view's constructor.\n\n$el \n\n A cached jQuery object for the view's element. A handy reference instead of re-wrapping the DOM element all the time.\n\nsetElement \n\n If you'd like to apply a Backbone view to a different DOM element, use setElement, which will also create the cached reference and move the view's delegated events from the old element to the new one.\n\nattributes \n\n A hash of attributes that will be set as HTML DOM element attributes on the view's (id, class, data-properties, etc.), or a function that returns such a hash.\n\n$ (jQuery) \n\n If jQuery is included on the page, each view has a $ function that runs queries scoped within the view's element. If you use this scoped jQuery function, you don't have to use model ids as part of your query to pull out specific elements in a list, and can rely much more on HTML class attributes. It's equivalent to running:\n\ntemplate \n\n While templating for a view isn't a function provided directly by Backbone, it's often a nice convention to define a template function on your views. In this way, when rendering your view, you have convenient access to instance data. For example, using Underscore templates:\n\nrender \n\n The default implementation of render is a no-op. Override this function with your code that renders the view template from model data, and updates with the new HTML. A good convention is to at the end of render to enable chained calls.\n\nBackbone is agnostic with respect to your preferred method of HTML templating. Your render function could even munge together an HTML string, or use to generate a DOM tree. However, we suggest choosing a nice JavaScript templating library. Mustache.js, Haml-js, and Eco are all fine alternatives. Because Underscore.js is already on the page, _.template is available, and is an excellent choice if you prefer simple interpolated-JavaScript style templates.\n\nWhatever templating strategy you end up with, it's nice if you never have to put strings of HTML in your JavaScript. At DocumentCloud, we use Jammit in order to package up JavaScript templates stored in as part of our main asset package.\n\nremove \n\n Removes a view and its from the DOM, and calls stopListening to remove any bound events that the view has listenTo'd.\n\nevents \n\n The events hash (or method) can be used to specify a set of DOM events that will be bound to methods on your View through delegateEvents.\n\nBackbone will automatically attach the event listeners at instantiation time, right before invoking initialize.\n\ndelegateEvents \n\n Uses jQuery's function to provide declarative callbacks for DOM events within a view. If an events hash is not passed directly, uses as the source. Events are written in the format . The callback may be either the name of a method on the view, or a direct function body. Omitting the causes the event to be bound to the view's root element ( ). By default, is called within the View's constructor for you, so if you have a simple hash, all of your DOM events will always already be connected, and you will never have to call this function yourself.\n\nThe property may also be defined as a function that returns an events hash, to make it easier to programmatically define your events, as well as inherit them from parent views.\n\nUsing delegateEvents provides a number of advantages over manually using jQuery to bind events to child elements during render. All attached callbacks are bound to the view before being handed off to jQuery, so when the callbacks are invoked, continues to refer to the view object. When delegateEvents is run again, perhaps with a different hash, all callbacks are removed and delegated afresh — useful for views which need to behave differently when in different modes.\n\nA single-event version of delegateEvents is available as . In fact, delegateEvents is simply a multi-event wrapper around . A counterpart to is available as .\n\nA view that displays a document in a search result might look something like this:\n\nundelegateEvents \n\n Removes all of the view's delegated events. Useful if you want to disable or remove a view from the DOM temporarily.\n\nBackbone.noConflict \n\n Returns the object back to its original value. You can use the return value of to keep a local reference to Backbone. Useful for embedding Backbone on third-party websites, where you don't want to clobber the existing Backbone.\n\nBackbone.$ \n\n If you have multiple copies of on the page, or simply want to tell Backbone to use a particular object as its DOM / Ajax library, this is the property for you.\n\ndebugInfo \n\n In the unfortunate event that you need to submit a bug report, this function makes it easier to provide detailed information about your setup. It prints a JSON object with version information about Backbone and its dependencies through . It also returns this object in case you want to inspect it in code.\n\ncomes in a separate module that ships with the edge version and releases later than 1.5.0. It is available in UMD format under the same prefix as , but with as the file name. It is also experimentally available in ES module format under .\n\nWhy use Backbone, not [other framework X]? \n\n If your eye hasn't already been caught by the adaptability and elan on display in the above list of examples, we can get more specific: Backbone.js aims to provide the common foundation that data-rich web applications with ambitious interfaces require — while very deliberately avoiding painting you into a corner by making any decisions that you're better equipped to make yourself.\n• The focus is on supplying you with helpful methods to manipulate and query your data, not on HTML widgets or reinventing the JavaScript object model.\n• Backbone does not force you to use a single template engine. Views can bind to HTML constructed in your favorite way.\n• It's smaller. There are fewer kilobytes for your browser or phone to download, and less conceptual surface area. You can read and understand the source in an afternoon.\n• It doesn't depend on stuffing application logic into your HTML. There's no embedded JavaScript, template logic, or binding hookup code in or attributes, and no need to invent your own HTML tags.\n• Synchronous events are used as the fundamental building block, not a difficult-to-reason-about run loop, or by constantly polling and traversing your data structures to hunt for changes. And if you want a specific event to be asynchronous and aggregated, no problem.\n• Backbone scales well, from embedded widgets to massive apps.\n• Backbone is a library, not a framework, and plays well with others. You can embed Backbone widgets in Dojo apps without trouble, or use Backbone models as the data backing for D3 visualizations (to pick two entirely random examples).\n• \"Two-way data-binding\" is avoided. While it certainly makes for a nifty demo, and works for the most basic CRUD, it doesn't tend to be terribly useful in your real-world app. Sometimes you want to update on every keypress, sometimes on blur, sometimes when the panel is closed, and sometimes when the \"save\" button is clicked. In almost all cases, simply serializing the form to JSON is faster and easier. All that aside, if your heart is set, go for it.\n• There's no built-in performance penalty for choosing to structure your code with Backbone. And if you do want to optimize further, thin models and templates with flexible granularity make it easy to squeeze every last drop of potential performance out of, say, IE8.\n\nThere's More Than One Way To Do It \n\n It's common for folks just getting started to treat the examples listed on this page as some sort of gospel truth. In fact, Backbone.js is intended to be fairly agnostic about many common patterns in client-side code. For example...\n\nReferences between Models and Views can be handled several ways. Some people like to have direct pointers, where views correspond 1:1 with models ( and ). Others prefer to have intermediate \"controller\" objects that orchestrate the creation and organization of views into a hierarchy. Others still prefer the evented approach, and always fire events instead of calling methods directly. All of these styles work well.\n\nBatch operations on Models are common, but often best handled differently depending on your server-side setup. Some folks don't mind making individual Ajax requests. Others create explicit resources for RESTful batch operations: . Others tunnel REST over JSON, with the creation of \"changeset\" requests:\n\nFeel free to define your own events. Backbone.Events is designed so that you can mix it in to any JavaScript object or prototype. Since you can use any string as an event, it's often handy to bind and trigger your own custom events: or\n\nRender the UI as you see fit. Backbone is agnostic as to whether you use Underscore templates, Mustache.js, direct DOM manipulation, server-side rendered snippets of HTML, or jQuery UI in your function. Sometimes you'll create a view for each model ... sometimes you'll have a view that renders thousands of models at once, in a tight loop. Both can be appropriate in the same app, depending on the quantity of data involved, and the complexity of the UI.\n\nNested Models & Collections \n\n It's common to nest collections inside of models with Backbone. For example, consider a model that contains many models. One nice pattern for handling this is have a collection for each mailbox, enabling the lazy-loading of messages, when the mailbox is first opened ... perhaps with views listening for and events.\n\nIf you're looking for something more opinionated, there are a number of Backbone plugins that add sophisticated associations among models, available on the wiki.\n\nBackbone doesn't include direct support for nested models and collections or \"has many\" associations because there are a number of good patterns for modeling structured data on the client side, and Backbone should provide the foundation for implementing any of them. You may want to…\n• Mirror an SQL database's structure, or the structure of a NoSQL database.\n• Use models with arrays of \"foreign key\" ids, and join to top level collections (a-la tables).\n• For associations that are numerous, use a range of ids instead of an explicit list.\n• Avoid ids, and use direct references, creating a partial object graph representing your data set.\n• Lazily load joined models from the server, or lazily deserialize nested models from JSON documents.\n\nLoading Bootstrapped Models \n\n When your app first loads, it's common to have a set of initial models that you know you're going to need, in order to render the page. Instead of firing an extra AJAX request to fetch them, a nicer pattern is to have their data already bootstrapped into the page. You can then use reset to populate your collections with the initial data. At DocumentCloud, in the ERB template for the workspace, we do something along these lines:\n\nYou have to escape within the JSON string, to prevent JavaScript injection attacks.\n\nExtending Backbone \n\n Many JavaScript libraries are meant to be insular and self-enclosed, where you interact with them by calling their public API, but never peek inside at the guts. Backbone.js is not that kind of library.\n\nBecause it serves as a foundation for your application, you're meant to extend and enhance it in the ways you see fit — the entire source code is annotated to make this easier for you. You'll find that there's very little there apart from core functions, and most of those can be overridden or augmented should you find the need. If you catch yourself adding methods to , or creating your own base subclass, don't worry — that's how things are supposed to work.\n\nHow does Backbone relate to \"traditional\" MVC? \n\n Different implementations of the Model-View-Controller pattern tend to disagree about the definition of a controller. If it helps any, in Backbone, the View class can also be thought of as a kind of controller, dispatching events that originate from the UI, with the HTML template serving as the true view. We call it a View because it represents a logical chunk of UI, responsible for the contents of a single DOM element.\n\nComparing the overall structure of Backbone to a server-side MVC framework like Rails, the pieces line up like so:\n• Backbone.Model – Like a Rails model minus the class methods. Wraps a row of data in business logic.\n• Backbone.Collection – A group of models on the client-side, with sorting/filtering/aggregation logic.\n• Backbone.View – A logical, re-usable piece of UI. Often, but not always, associated with a model.\n\nBinding \"this\" \n\n Perhaps the single most common JavaScript \"gotcha\" is the fact that when you pass a function as a callback, its value for is lost. When dealing with events and callbacks in Backbone, you'll often find it useful to rely on listenTo or the optional argument that many of Underscore and Backbone's methods use to specify the that will be used when the callback is later invoked. (See _.each, _.map, and object.on, to name a few). View events are automatically bound to the view's context for you. You may also find it helpful to use _.bind and _.bindAll from Underscore.js.\n\nWorking with Rails \n\n Backbone.js was originally extracted from a Rails application; getting your client-side (Backbone) Models to sync correctly with your server-side (Rails) Models is painless, but there are still a few things to be aware of.\n\nBy default, Rails versions prior to 3.1 add an extra layer of wrapping around the JSON representation of models. You can disable this wrapping by setting:\n\n... in your configuration. Otherwise, override parse to pull model attributes out of the wrapper. Similarly, Backbone PUTs and POSTs direct JSON representations of models, where by default Rails expects namespaced attributes. You can have your controllers filter attributes directly from , or you can override toJSON in Backbone to add the extra wrapping Rails expects.\n\nThe list of examples that follows, while long, is not exhaustive — nor in any way current. If you've worked on an app that uses Backbone, please add it to the wiki page of Backbone apps.\n\nJérôme Gravel-Niquet has contributed a Todo List application that is bundled in the repository as Backbone example. If you're wondering where to get started with Backbone in general, take a moment to read through the annotated source. The app uses a LocalStorage adapter to transparently save all of your todos within your browser, instead of sending them to a server. Jérôme also has a version hosted at localtodos.com.\n\nThe DocumentCloud workspace is built on Backbone.js, with Documents, Projects, Notes, and Accounts all as Backbone models and collections. If you're interested in history — both Underscore.js and Backbone.js were originally extracted from the DocumentCloud codebase, and packaged into standalone JS libraries.\n\nUSA Today takes advantage of the modularity of Backbone's data/model lifecycle — which makes it simple to create, inherit, isolate, and link application objects — to keep the codebase both manageable and efficient. The new website also makes heavy use of the Backbone Router to control the page for both pushState-capable and legacy browsers. Finally, the team took advantage of Backbone's Event module to create a PubSub API that allows third parties and analytics packages to hook into the heart of the app.\n\nNew Rdio was developed from the ground up with a component based framework based on Backbone.js. Every component on the screen is dynamically loaded and rendered, with data provided by the Rdio API. When changes are pushed, every component can update itself without reloading the page or interrupting the user's music. All of this relies on Backbone's views and models, and all URL routing is handled by Backbone's Router. When data changes are signaled in realtime, Backbone's Events notify the interested components in the data changes. Backbone forms the core of the new, dynamic, realtime Rdio web and desktop applications.\n\nHulu used Backbone.js to build its next generation online video experience. With Backbone as a foundation, the web interface was rewritten from scratch so that all page content can be loaded dynamically with smooth transitions as you navigate. Backbone makes it easy to move through the app quickly without the reloading of scripts and embedded videos, while also offering models and collections for additional data manipulation support.\n\nQuartz sees itself as a digitally native news outlet for the new global economy. Because Quartz believes in the future of open, cross-platform web applications, they selected Backbone and Underscore to fetch, sort, store, and display content from a custom WordPress API. Although qz.com uses responsive design for phone, tablet, and desktop browsers, it also takes advantage of Backbone events and views to render device-specific templates in some cases.\n\nEarth.nullschool.net displays real-time weather conditions on an interactive animated globe, and Backbone provides the foundation upon which all of the site's components are built. Despite the presence of several other JavaScript libraries, Backbone's non-opinionated design made it effortless to mix-in the Events functionality used for distributing state changes throughout the page. When the decision was made to switch to Backbone, large blocks of custom logic simply disappeared.\n\nVox Media, the publisher of SB Nation, The Verge, Polygon, Eater, Racked, Curbed, and Vox.com, uses Backbone throughout Chorus, its home-grown publishing platform. Backbone powers the liveblogging platform and commenting system used across all Vox Media properties; Coverage, an internal editorial coordination tool; SB Nation Live, a live event coverage and chat tool; and Vox Cards, Vox.com's highlighter-and-index-card inspired app for providing context about the news.\n\nKinja is Gawker Media's publishing platform designed to create great stories by breaking down the lines between the traditional roles of content creators and consumers. Everyone — editors, readers, marketers — have access to the same tools to engage in passionate discussion and pursue the truth of the story. Sharing, recommending, and following within the Kinja ecosystem allows for improved information discovery across all the sites.\n\nKinja is the platform behind Gawker, Gizmodo, Lifehacker, io9 and other Gawker Media blogs. Backbone.js underlies the front-end application code that powers everything from user authentication to post authoring, commenting, and even serving ads. The JavaScript stack includes Underscore.js and jQuery, with some plugins, all loaded with RequireJS. Closure templates are shared between the Play! Framework based Scala application and Backbone views, and the responsive layout is done with the Foundation framework using SASS.\n\nMetaLab used Backbone.js to create Flow, a task management app for teams. The workspace relies on Backbone.js to construct task views, activities, accounts, folders, projects, and tags. You can see the internals under .\n\nGilt Groupe uses Backbone.js to build multiple applications across their family of sites. Gilt's mobile website uses Backbone and Zepto.js to create a blazing-fast shopping experience for users on-the-go, while Gilt Live combines Backbone with WebSockets to display the items that customers are buying in real-time. Gilt's search functionality also uses Backbone to filter and sort products efficiently by moving those actions to the client-side.\n\nEnigma is a portal amassing the largest collection of public data produced by governments, universities, companies, and organizations. Enigma uses Backbone Models and Collections to represent complex data structures; and Backbone's Router gives Enigma users unique URLs for application states, allowing them to navigate quickly through the site while maintaining the ability to bookmark pages and navigate forward and backward through their session.\n\nNewsBlur is an RSS feed reader and social news network with a fast and responsive UI that feels like a native desktop app. Backbone.js was selected for a major rewrite and transition from spaghetti code because of its powerful yet simple feature set, easy integration, and large community. If you want to poke around under the hood, NewsBlur is also entirely open-source.\n\nWordPress.com is the software-as-a-service version of WordPress. It uses Backbone.js Models, Collections, and Views in its Notifications system. Backbone.js was selected because it was easy to fit into the structure of the application, not the other way around. Automattic (the company behind WordPress.com) is integrating Backbone.js into the Stats tab and other features throughout the homepage.\n\nFoursquare is a fun little startup that helps you meet up with friends, discover new places, and save money. Backbone Models are heavily used in the core JavaScript API layer and Views power many popular features like the homepage map and lists.\n\nBitbucket is a free source code hosting service for Git and Mercurial. Through its models and collections, Backbone.js has proved valuable in supporting Bitbucket's REST API, as well as newer components such as in-line code comments and approvals for pull requests. Mustache templates provide server and client-side rendering, while a custom Google Closure inspired life-cycle for widgets allows Bitbucket to decorate existing DOM trees and insert new ones.\n\nDisqus chose Backbone.js to power the latest version of their commenting widget. Backbone’s small footprint and easy extensibility made it the right choice for Disqus’ distributed web application, which is hosted entirely inside an iframe and served on thousands of large web properties, including IGN, Wired, CNN, MLB, and more.\n\nDelicious is a social bookmarking platform making it easy to save, sort, and store bookmarks from across the web. Delicious uses Chaplin.js, Backbone.js and AppCache to build a full-featured MVC web app. The use of Backbone helped the website and mobile apps share a single API service, and the reuse of the model tier made it significantly easier to share code during the recent Delicious redesign.\n\nKhan Academy is on a mission to provide a free world-class education to anyone anywhere. With thousands of videos, hundreds of JavaScript-driven exercises, and big plans for the future, Khan Academy uses Backbone to keep frontend code modular and organized. User profiles and goal setting are implemented with Backbone, jQuery and Handlebars, and most new feature work is being pushed to the client side, greatly increasing the quality of the API.\n\nIRCCloud is an always-connected IRC client that you use in your browser — often leaving it open all day in a tab. The sleek web interface communicates with an Erlang backend via websockets and the IRCCloud API. It makes heavy use of Backbone.js events, models, views and routing to keep your IRC conversations flowing in real time.\n\nPitchfork uses Backbone.js to power its site-wide audio player, Pitchfork.tv, location routing, a write-thru page fragment cache, and more. Backbone.js (and Underscore.js) helps the team create clean and modular components, move very quickly, and focus on the site, not the spaghetti.\n\nSpin pulls in the latest news stories from their internal API onto their site using Backbone models and collections, and a custom method. Because the music should never stop playing, even as you click through to different \"pages\", Spin uses a Backbone router for navigation within the site.\n\nZocDoc helps patients find local, in-network doctors and dentists, see their real-time availability, and instantly book appointments. On the public side, the webapp uses Backbone.js to handle client-side state and rendering in search pages and doctor profiles. In addition, the new version of the doctor-facing part of the website is a large single-page application that benefits from Backbone's structure and modularity. ZocDoc's Backbone classes are tested with Jasmine, and delivered to the end user with Cassette.\n\nWalmart used Backbone.js to create the new version of their mobile web application and created two new frameworks in the process. Thorax provides mixins, inheritable events, as well as model and collection view bindings that integrate directly with Handlebars templates. Lumbar allows the application to be split into modules which can be loaded on demand, and creates platform specific builds for the portions of the web application that are embedded in Walmart's native Android and iOS applications.\n\nGroupon Now! helps you find local deals that you can buy and use right now. When first developing the product, the team decided it would be AJAX heavy with smooth transitions between sections instead of full refreshes, but still needed to be fully linkable and shareable. Despite never having used Backbone before, the learning curve was incredibly quick — a prototype was hacked out in an afternoon, and the team was able to ship the product in two weeks. Because the source is minimal and understandable, it was easy to add several Backbone extensions for Groupon Now!: changing the router to handle URLs with querystring parameters, and adding a simple in-memory store for caching repeated requests for the same data.\n\n37Signals chose Backbone.js to create the calendar feature of its popular project management software Basecamp. The Basecamp Calendar uses Backbone.js models and views in conjunction with the Eco templating system to present a polished, highly interactive group scheduling interface.\n\nSlavery Footprint allows consumers to visualize how their consumption habits are connected to modern-day slavery and provides them with an opportunity to have a deeper conversation with the companies that manufacture the goods they purchased. Based in Oakland, California, the Slavery Footprint team works to engage individuals, groups, and businesses to build awareness for and create deployable action against forced labor, human trafficking, and modern-day slavery through online tools, as well as off-line community education and mobilization programs.\n\nStripe provides an API for accepting credit cards on the web. Stripe's management interface was recently rewritten from scratch in CoffeeScript using Backbone.js as the primary framework, Eco for templates, Sass for stylesheets, and Stitch to package everything together as CommonJS modules. The new app uses Stripe's API directly for the majority of its actions; Backbone.js models made it simple to map client-side models to their corresponding RESTful resources.\n\nAirbnb uses Backbone in many of its products. It started with Airbnb Mobile Web (built in six weeks by a team of three) and has since grown to Wish Lists, Match, Search, Communities, Payments, and Internal Tools.\n\nSoundCloud is the leading sound sharing platform on the internet, and Backbone.js provides the foundation for SoundCloud Mobile. The project uses the public SoundCloud API as a data source (channeled through a nginx proxy), jQuery templates for the rendering, Qunit and PhantomJS for the testing suite. The JS code, templates and CSS are built for the production deployment with various Node.js tools like ready.js, Jake, jsdom. The Backbone.History was modified to support the HTML5 . Backbone.sync was extended with an additional SessionStorage based cache layer.\n\nArt.sy is a place to discover art you'll love. Art.sy is built on Rails, using Grape to serve a robust JSON API. The main site is a single page app written in CoffeeScript and uses Backbone to provide structure around this API. An admin panel and partner CMS have also been extracted into their own API-consuming Backbone projects.\n\nWhen Pandora redesigned their site in HTML5, they chose Backbone.js to help manage the user interface and interactions. For example, there's a model that represents the \"currently playing track\", and multiple views that automatically update when the current track changes. The station list is a collection, so that when stations are added or changed, the UI stays up to date.\n\nInkling is a cross-platform way to publish interactive learning content. Inkling for Web uses Backbone.js to make hundreds of complex books — from student textbooks to travel guides and programming manuals — engaging and accessible on the web. Inkling supports WebGL-enabled 3D graphics, interactive assessments, social sharing, and a system for running practice code right in the book, all within a single page Backbone-driven app. Early on, the team decided to keep the site lightweight by using only Backbone.js and raw JavaScript. The result? Complete source code weighing in at a mere 350kb with feature-parity across the iPad, iPhone and web clients. Give it a try with this excerpt from JavaScript: The Definitive Guide.\n\nCode School courses teach people about various programming topics like CoffeeScript, CSS, Ruby on Rails, and more. The new Code School course challenge page is built from the ground up on Backbone.js, using everything it has to offer: the router, collections, models, and complex event handling. Before, the page was a mess of jQuery DOM manipulation and manual Ajax calls. Backbone.js helped introduce a new way to think about developing an organized front-end application in JavaScript.\n\nCloudApp is simple file and link sharing for the Mac. Backbone.js powers the web tools which consume the documented API to manage Drops. Data is either pulled manually or pushed by Pusher and fed to Mustache templates for rendering. Check out the annotated source code to see the magic.\n\nSeatGeek's stadium ticket maps were originally developed with Prototype.js. Moving to Backbone.js and jQuery helped organize a lot of the UI code, and the increased structure has made adding features a lot easier. SeatGeek is also in the process of building a mobile interface that will be Backbone.js from top to bottom.\n\nEasel is an in-browser, high fidelity web design tool that integrates with your design and development process. The Easel team uses CoffeeScript, Underscore.js and Backbone.js for their rich visual editor as well as other management functions throughout the site. The structure of Backbone allowed the team to break the complex problem of building a visual editor into manageable components and still move quickly.\n\nJolicloud is an open and independent platform and operating system that provides music playback, video streaming, photo browsing and document editing — transforming low cost computers into beautiful cloud devices. The new Jolicloud HTML5 app was built from the ground up using Backbone and talks to the Jolicloud Platform, which is based on Node.js. Jolicloud works offline using the HTML5 AppCache, extends Backbone.sync to store data in IndexedDB or localStorage, and communicates with the Joli OS via WebSockets.\n\nSalon.io provides a space where photographers, artists and designers freely arrange their visual art on virtual walls. Salon.io runs on Rails, but does not use much of the traditional stack, as the entire frontend is designed as a single page web app, using Backbone.js, Brunch and CoffeeScript.\n\nOur fellow Knight Foundation News Challenge winners, MapBox, created an open-source map design studio with Backbone.js: TileMill. TileMill lets you manage map layers based on shapefiles and rasters, and edit their appearance directly in the browser with the Carto styling language. Note that the gorgeous MapBox homepage is also a Backbone.js app.\n\nBlossom is a lightweight project management tool for lean teams. Backbone.js is heavily used in combination with CoffeeScript to provide a smooth interaction experience. The app is packaged with Brunch. The RESTful backend is built with Flask on Google App Engine.\n\nTrello is a collaboration tool that organizes your projects into boards. A Trello board holds many lists of cards, which can contain checklists, files and conversations, and may be voted on and organized with labels. Updates on the board happen in real time. The site was built ground up using Backbone.js for all the models, views, and routes.\n\nCristi Balan and Irina Dumitrascu created Tzigla, a collaborative drawing application where artists make tiles that connect to each other to create surreal drawings. Backbone models help organize the code, routers provide bookmarkable deep links, and the views are rendered with haml.js and Zepto. Tzigla is written in Ruby (Rails) on the backend, and CoffeeScript on the frontend, with Jammit prepackaging the static assets.\n• Added a event to for when no router matches the current URL.\n• Fixed a corner case where a collection would forward events twice if the model was first added through the method with .\n• Added a option to the method. When this option is , the trailing slash of the is always retained in the route, even if the path segment of the current URL is empty.\n• Fixed a bug that caused collection events to include an irrelevant if other models were removed during the same call to .\n• Fixed a corner case where a collection would not forward the event if was invoked with .\n• Added a to the project root in order to promote consistent whitespace handling across editors.\n• Many clarifications, corrections and refinements to the documentation, as well as some code comments.\n• Improved support for polymorphic collections in which two or more model types might have different s. overrides can now exploit the fact that internal methods pass the as a second argument to .\n• Fixed a temporary inconsistency in a collection's internal administration during model events. Models (and by extension, collections) now emit a specialized event when the id changes.\n• Fixed an issue where an ES6 class or object method could not be used as the for a collection due to the lack of a .\n• Restored continuous integration using GitHub Actions and cross-browser testing using Sauce Labs.\n• Several improvements to the online documentation.\n• Due to upgraded development tools, the annotated sources of the example code as well as the sourcemap of the minified bundle have changed filenames. Aliases and redirects in the old locations are kept for backwards compatibility.\n• uses the listened object's public method. This helps maintain interoperability between Backbone and other event libraries (including Node.js).\n• Added support for setting instance properties before the constructor in with a method.\n• now checks if obj is a to allow retrieving models with an `attributes` key.\n• Fixed several issues with Router's URL hashing and parsing.\n• Added to \"update\" event which includes added, merged, and removed models.\n• Ensured and work without an initial value.\n• Fixed a bug where with object syntax failed to bind context.\n• Fixed regression where triggering a event without a would error.\n• Fixed regression where would be unintentionally .\n• Fixed regression which could cause an infinite loop under certain conditions.\n• Note that 1.3.3 fixes several bugs in versions 1.3.0 to 1.3.2. Please upgrade immediately if you are on one of those versions.\n• Fixed a minor regression in 1.2.2 that would cause an error when adding a model to a collection an out of bounds index.\n• Collection methods , , , , , and can now take a model-attributes-style predicate: .\n• Backbone Events once again supports multiple-event maps ( ). This was a previously undocumented feature inadvertently removed in 1.2.0.\n• Added as an alias of and as a replacement for in Underscore.js >= 1.8.\n• now avoids trying to parse a model instance when passed .\n• Bug fix in . The removed models are now actually returned.\n• no longer parses the response when passing .\n• Bug fix for iframe-based History when used with JSDOM.\n• Bug fix where was not taking additional arguments.\n• When using with an event map, you can now pass the context as the second argument. This was a previously undocumented feature inadvertently removed in 1.2.0.\n• Added new hooks to Views to allow them to work without jQuery. See the wiki page for more info.\n• As a neat side effect, Backbone.History no longer uses jQuery's event methods for and listeners. We're native all the way.\n• Also on the subject of jQuery, if you're using Backbone with CommonJS (node, browserify, webpack) Backbone will automatically try to load jQuery for you.\n• Views now always delegate their events in setElement. You can no longer modify the events hash or your view's property in .\n• Added an event that triggers after any amount of models are added or removed from a collection. Handy to re-render lists of things without debouncing.\n• Added to Collection for generating unique ids on polymorphic collections. Handy for cases when your model ids would otherwise collide.\n• Added an overridable for more advanced control of what's considered a model by your Collection.\n• The callback passed to is always called asynchronously now.\n• passes back the route name as its third argument.\n• Cancel the current Router transition by returning in . Great for checking logged-in status or other prerequisites.\n• Added and methods to Backbone.History as cross-browser and overridable ways of slicing up the URL.\n• Added and as finer-grained versions of and . Useful for plugin authors to use a consistent events interface in Backbone.\n• A collection will only fire a \"sort\" event if its order was actually updated, not on every .\n• Any passed are now respected when saving a model with .\n• now sets the and functions of the cloned collection to the new one.\n• Adding models to your Collection when specifying an position now sends the actual position of your model in the event, not just the one you've passed in.\n• will now only return a list of models that have actually been removed from the collection.\n• Backbone no longer tries to require jQuery in Node/CommonJS environments, for better compatibility with folks using Browserify. If you'd like to have Backbone use jQuery from Node, assign it like so:\n• Bugfix for route parameters with newlines in them.\n• Backbone now registers itself for AMD (Require.js), Bower and Component, as well as being a CommonJS module and a regular (Java)Script. Whew.\n• Added an hook to the Router, which allows you to hook in and custom-parse route arguments, like query strings, for example.\n• Better matching for Unicode in routes, in old browsers.\n• Backbone Routers now handle query params in route fragments, passing them into the handler as the last argument. Routes specified as strings should no longer include the query string ( should be ).\n• Made the return values of Collection's , , , and more useful. Instead of returning , they now return the changed (added, removed or updated) model or list of models.\n• Backbone Views no longer automatically attach options passed to the constructor as and Backbone Models no longer attach and options, but you can do it yourself if you prefer.\n• All events now pass consistent arguments. First the model in question, then the error object, then options.\n• You are no longer permitted to change the id of your model during . Use instead.\n• On the other hand, is now an excellent place to extract and vivify incoming nested JSON into associated submodels.\n• Many tweaks, optimizations and bugfixes relating to Backbone 1.0, including URL overrides, mutation of options, bulk ordering, trailing slashes, edge-case listener leaks, nested model parsing...\n• Renamed Collection's \"update\" to set, for parallelism with the similar , and contrast with reset. It's now the default updating mechanism after a fetch. If you'd like to continue using \"reset\", pass .\n• Your route handlers will now receive their URL parameters pre-decoded.\n• Added listenToOnce as the analogue of once.\n• Added the findWhere method to Collections, similar to where.\n• Added the , , , , , and Underscore.js methods to Backbone Models.\n• The routes in a Router's route map may now be function literals, instead of references to methods, if you like.\n• and properties may now be passed as options when instantiating a new Model.\n• A event is triggered on the router in addition to being fired on .\n• Model validation is now only enforced by default in and no longer enforced by default upon construction or in , unless the option is passed.\n• has been removed. You'll need to use directly to construct DOM elements now.\n• Passing on change will no longer delay individual events, instead they are silenced entirely.\n• The method has been removed, as delayed attribute changes are no longer available.\n• Bug fix on where attribute comparison uses instead of .\n• Bug fix where an empty response from the server on save would not call the success function.\n• now receives as its second argument.\n• Model validation now fires event instead of .\n• Added listenTo and stopListening to Events. They can be used as inversion-of-control flavors of and , for convenient unbinding of all events an object is currently listening to. automatically calls .\n• When using on a collection, passing will now cause duplicate models to have their attributes merged in to the existing models, instead of being ignored.\n• Added update (which is also available as an option to ) for \"smart\" updating of sets of models.\n• The object now extends so that you can use it as a global event bus, if you like.\n• Added a event to Backbone.sync, which triggers whenever a request begins to be made to the server. The natural complement to the event.\n• Router URLs now support optional parts via parentheses, without having to use a regex.\n• Backbone events now supports , similar to Node's , or jQuery's .\n• While listening to a event, the list of previous models is now available in , for convenience.\n• Validation now occurs even during \"silent\" changes. This change means that the method has been removed. Failed validations also trigger an error, even if an error callback is specified in the options.\n• Consolidated and events within Backbone.sync. They are now triggered regardless of the existence of or callbacks.\n• For mixed-mode APIs, now accepts and as inline options.\n• Collections now also proxy Underscore method name aliases (collect, inject, foldl, foldr, head, tail, take, and so on...)\n• Removed from Collections. now supports lookup by both and .\n• After fetching a model or a collection, all defined functions will now be run. So fetching a collection and getting back new models could cause both the collection to parse the list, and then each model to be parsed in turn, if you have both functions defined.\n• Bugfix for normalizing leading and trailing slashes in the Router definitions. Their presence (or absence) should not affect behavior.\n• When declaring a View, , , , and may now be defined as functions, if you want their values to be determined at runtime.\n• Added a hook for more convenient overriding of the default use of . If AJAX is too passé, set it to your preferred method for server communication.\n• now triggers a event, instead of a event.\n• Calling on a Model will now return if the model .\n• To set what library Backbone uses for DOM manipulation and Ajax calls, use instead of .\n• Removed the helper method. Overriding should work better for those particular use cases.\n• To improve the performance of , will no longer be set in the event callback. can be used to retrieve the index of a model as necessary.\n• For semantic and cross browser reasons, routes will now ignore search parameters. Routes like should become .\n• no longer accepts another model as an argument. This leads to subtle problems and is easily replaced with .\n• Instead of throwing an error when adding duplicate models to a collection, Backbone will now silently skip them instead.\n• A model's changed hash is now exposed for easy reading of the changed attribute delta, since the model's last event.\n• Added where to collections for simple filtering.\n• You can now use a single off call to remove all callbacks bound to a specific object.\n• Bug fixes for nested individual change events, some of which may be \"silent\".\n• Bug fix for client-side validation in advance of a call with .\n• Reverted to 0.5.3-esque behavior for validating models. Silent changes no longer trigger validation (making it easier to work with forms). Added an function that you can use to check if a model is currently in a valid state.\n• If you have multiple versions of jQuery on the page, you can now tell Backbone which one to use with .\n• Fixes regressions in 0.9.0 for routing with \"root\", saving with both \"wait\" and \"validate\", and the order of nested \"change\" events.\n• Creating and destroying models with and are now optimistic by default. Pass as an option if you'd like them to wait for a successful server response to proceed.\n• Two new properties on views: — a cached jQuery (or Zepto) reference to the view's element, and , which should be used instead of manually setting a view's . It will both set and correctly, as well as re-delegating events on the new DOM element.\n• You can now bind and trigger multiple spaced-delimited events at once. For example:\n• When you don't know the key in advance, you may now call as well as .\n• Multiple models with the same are no longer allowed in a single collection.\n• Added a event, which triggers whenever a model's state has been successfully synced with the server (create, save, destroy).\n• and have been renamed to and for clarity, following jQuery's lead. The old names are also still supported.\n• A Backbone collection's function may now behave either like a sortBy (pass a function that takes a single argument), or like a sort (pass a comparator function that expects two arguments). The comparator function is also now bound by default to the collection — so you can refer to within it.\n• A view's hash may now also contain direct function values as well as the string names of existing view methods.\n• Validation has gotten an overhaul — a model's function will now be run even for silent changes, and you can no longer create a model in an initially invalid state.\n• Added and to collections, proxied from Underscore.\n• may now be defined as a function as well as a value.\n• may now be defined as a function as well as a value.\n• Calling on a collection will now cause all fetched JSON to be run through the collection's model's function, if one is defined.\n• You may now tell a router to , which will either use or , in order to change the URL without adding a history entry.\n• Within a collection's and events, the index of the model being added or removed is now available as .\n• Added an to views, allowing you to manually remove all configured event delegations.\n• Although you shouldn't be writing your routes with them in any case — leading slashes ( ) are now stripped from routes.\n• Calling on a model now only passes the attributes for duplication, not a reference to the model itself.\n• Calling on a model now removes the attribute.\n\n0.5.3 — August 9, 2011 — Diff — Docs\n\n A View's property may now be defined as a function, as well as an object literal, making it easier to programmatically define and inherit events. is now proxied from Underscore as a method on Collections. If the server has already rendered everything on page load, pass to prevent the initial route from triggering. Bugfix for pushState with encoded URLs.\n\n0.5.2 — July 26, 2011 — Diff — Docs\n\n The function, can now take an optional third argument, to specify the of the callback function. Multiple models with the same are now allowed in a collection. Fixed a bug where calling could cause an incorrect URL to be serialized. Fixed a brief extra route fire before redirect, when degrading from .\n\n0.5.1 — July 5, 2011 — Diff — Docs\n\n Cleanups from the 0.5.0 release, to wit: improved transparent upgrades from hash-based URLs to pushState, and vice-versa. Fixed inconsistency with non-modified attributes being passed to . Reverted a 0.5.0 change that would strip leading hashbangs from routes. Added as an alias for .\n\n0.5.0 — July 1, 2011 — Diff — Docs\n\n A large number of tiny tweaks and micro bugfixes, best viewed by looking at the commit diff. HTML5 support, enabled by opting-in with: . was renamed to , for clarity. was renamed to to emphasize its ability to both reset the collection with new models, as well as empty out the collection when used with no parameters. was replaced with . RESTful persistence methods (save, fetch, etc.) now return the jQuery deferred object for further success/error chaining and general convenience. Improved XSS escaping for . Added a option to allow specifying RESTful urls without the use of a collection. An error is thrown if is called multiple times. now validates before initializing the new model. can now be a jQuery string lookup. Backbone Views can now also take an parameter. can now be a function as well as a literal attributes object.\n\n0.3.3 — Dec 1, 2010 — Diff — Docs\n\n Backbone.js now supports Zepto, alongside jQuery, as a framework for DOM manipulation and Ajax support. Implemented Model#escape, to efficiently handle attributes intended for HTML interpolation. When trying to persist a model, failed requests will now trigger an event. The ubiquitous argument is now passed as the final argument to all events.\n\n0.3.2 — Nov 23, 2010 — Diff — Docs\n\n Bugfix for IE7 + iframe-based \"hashchange\" events. may now be overridden on a per-model, or per-collection basis. Fixed recursion error when calling with no changed attributes, within a event.\n\n0.3.1 — Nov 15, 2010 — Diff — Docs\n\n All and events are now sent through the model, so that views can listen for them without having to know about the collection. Added a method to Backbone.View. is no longer called at all for and requests. Backbone routes are now able to load empty URL fragments.\n\n0.3.0 — Nov 9, 2010 — Diff — Docs\n\n Backbone now has Controllers and History, for doing client-side routing based on URL fragments. Added to provide support for legacy servers that don't do and . Added for servers that can't accept encoded requests. Added Model#clear, which removes all attributes from a model. All Backbone classes may now be seamlessly inherited by CoffeeScript classes.\n\n0.2.0 — Oct 25, 2010 — Diff — Docs\n\n Instead of requiring server responses to be namespaced under a key, now you can define your own parse method to convert responses into attributes for Models and Collections. The old function is now named delegateEvents, and is automatically called as part of the View's constructor. Added a toJSON function to Collections. Added Underscore's chain to Collections.\n\n0.1.2 — Oct 19, 2010 — Diff — Docs\n\n Added a Model#fetch method for refreshing the attributes of single model from the server. An callback may now be passed to and as an option, which will be invoked if validation fails, overriding the event. You can now tell backbone to use the hack instead of HTTP methods by setting . Existing Model and Collection data is no longer sent up unnecessarily with and requests. Added a task. Backbone is now published as an NPM module.\n\n0.1.1 — Oct 14, 2010 — Diff — Docs\n\n Added a convention for functions to be called upon instance construction, if defined. Documentation tweaks."
    },
    {
        "link": "https://expressjs.com/en/resources/middleware/session.html",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a “non-persistent cookie” and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set “trust proxy” in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the “X-Forwarded-Proto” header).\n\nThe default value is .\n• The “X-Forwarded-Proto” header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the “trust proxy” setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you’re using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you’ll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is “uninitialized” to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else–consult the store’s documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to “touch” a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://npmjs.com/package/express-session",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set \"trust proxy\" in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\" header).\n\nThe default value is .\n• The \"X-Forwarded-Proto\" header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the \"trust proxy\" setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you're using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you'll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else--consult the store's documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to \"touch\" a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://github.com/expressjs/session",
        "document": "This is a Node.js module available through the npm registry. Installation is done using the command:\n\nCreate a session middleware with the given .\n\nNote Session data is not saved in the cookie itself, just the session ID. Session data is stored server-side.\n\nNote Since version 1.5.0, the middleware no longer needs to be used for this module to work. This module now directly reads and writes cookies on / . Using may result in issues if the is not the same between this module and .\n\nWarning The default server-side session storage, , is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.\n\nFor a list of stores, see compatible session stores.\n\naccepts these properties in the options object.\n\nSettings object for the session ID cookie. The default value is .\n\nThe following are options that can be set in this object.\n\nSpecifies the value for the attribute. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\nSpecifies the object to be the value for the attribute. By default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nNote The option should not be set directly; instead only use the option.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is set.\n\nNote be careful when setting this to , as compliant clients will not allow client-side JavaScript to see the cookie in .\n\nSpecifies the (in milliseconds) to use when calculating the attribute. This is done by taking the current server time and adding milliseconds to the value to calculate an datetime. By default, no maximum age is set.\n\nNote If both and are set in the options, then the last one defined in the object is what is used.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in the proposal.\n\nSpecifies the value for the . By default, this is set to , which is the root path of the domain.\n\nSpecifies the to be the value for the attribute.\n• will set the attribute to .\n• will set the attribute to , the default priority when not set.\n• will set the attribute to .\n\nMore information about the different priority levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nSpecifies the or to be the value for the attribute. By default, this is .\n• will set the attribute to for strict same site enforcement.\n• will not set the attribute.\n• will set the attribute to for lax same site enforcement.\n• will set the attribute to for an explicit cross-site cookie.\n• will set the attribute to for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in the specification.\n\nNote This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nNote There is a draft spec that requires that the attribute be set to when the attribute has been set to . Some web browsers or other clients may be adopting this specification.\n\nSpecifies the value for the attribute. When truthy, the attribute is set, otherwise it is not. By default, the attribute is not set.\n\nNote be careful when setting this to , as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\nPlease note that is a recommended option. However, it requires an https-enabled website, i.e., HTTPS is necessary for secure cookies. If is set, and you access your site over HTTP, the cookie will not be set. If you have your node.js behind a proxy and are using , you need to set \"trust proxy\" in express:\n\nFor using secure cookies in production, but allowing for testing in development, the following is an example of enabling this setup based on in express:\n\nThe option can also be set to the special value to have this setting automatically match the determined security of the connection. Be careful when using this setting if the site is available both as HTTP and HTTPS, as once the cookie is set on HTTPS, it will no longer be visible over HTTP. This is useful when the Express setting is properly setup to simplify development vs production configuration.\n\nFunction to call to generate a new session ID. Provide a function that returns a string that will be used as a session ID. The function is given as the first argument if you want to use some value attached to when generating the ID.\n\nThe default value is a function which uses the library to generate IDs.\n\nNOTE be careful to generate unique IDs so your sessions do not conflict.\n\nThe name of the session ID cookie to set in the response (and read from in the request).\n\nThe default value is .\n\nNote if you have multiple apps running on the same hostname (this is just the name, i.e. or ; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different s per app.\n\nTrust the reverse proxy when setting secure cookies (via the \"X-Forwarded-Proto\" header).\n\nThe default value is .\n• The \"X-Forwarded-Proto\" header will be used.\n• All headers are ignored and the connection is considered secure only if there is a direct TLS/SSL connection.\n• Uses the \"trust proxy\" setting from express\n\nForces the session to be saved back to the session store, even if the session was never modified during the request. Depending on your store this may be necessary, but it can also create race conditions where a client makes two parallel requests to your server and changes made to the session in one request may get overwritten when the other request ends, even if it made no changes (this behavior also depends on what store you're using).\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case. Typically, you'll want .\n\nHow do I know if this is necessary for my store? The best way to know is to check with your store if it implements the method. If it does, then you can safely set . If it does not implement the method and your store sets an expiration date on stored sessions, then you likely need .\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original , resetting the expiration countdown.\n\nThe default value is .\n\nWith this enabled, the session identifier cookie will expire in since the last response was sent instead of in since the session was last modified by the server.\n\nThis is typically used in conjuction with short, non-session-length values to provide a quick timeout of the session data with reduced potential of it occurring during on going server interactions.\n\nNote When this option is set to but the option is set to , the cookie will not be set on a response with an uninitialized session. This option only modifies the behavior when an existing session was loaded for the request.\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing will also help with race conditions where a client makes multiple parallel requests without a session.\n\nThe default value is , but using the default has been deprecated, as the default will change in the future. Please research into this setting and choose what is appropriate to your use-case.\n\nNote if you are using Session in conjunction with PassportJS, Passport will add an empty Passport object to the session for use after a user is authenticated, which will be treated as a modification to the session, causing it to be saved. This has been fixed in PassportJS 0.3.0\n\nThis is the secret used to sign the session ID cookie. The secret can be any type of value that is supported by Node.js (like a string or a ). This can be either a single secret, or an array of multiple secrets. If an array of secrets is provided, only the first element will be used to sign the session ID cookie, while all the elements will be considered when verifying the signature in requests. The secret itself should be not easily parsed by a human and would best be a random set of characters. A best practice may include:\n• The use of environment variables to store the secret, ensuring the secret itself does not exist in your repository.\n• Periodic updates of the secret, while ensuring the previous secret is in the array.\n\nUsing a secret that cannot be guessed will reduce the ability to hijack a session to only guessing the session ID (as determined by the option).\n\nChanging the secret value will invalidate all existing sessions. In order to rotate the secret without invalidating sessions, provide an array of secrets, with the new secret as first element of the array, and including previous secrets as the later elements.\n\nNote HMAC-256 is used to sign the session ID. For this reason, the secret should contain at least 32 bytes of entropy.\n\nThe session store instance, defaults to a new instance.\n\nControl the result of unsetting (through , setting to , etc.).\n\nThe default value is .\n• The session will be destroyed (deleted) when the response ends.\n• The session in the store will be kept, but modifications made during the request are ignored and not saved.\n\nTo store or access session data, simply use the request property , which is (generally) serialized as JSON by the store, so nested objects are typically fine. For example below is a user-specific view counter:\n\nTo regenerate the session simply invoke the method. Once complete, a new SID and instance will be initialized at and the will be invoked.\n\nDestroys the session and will unset the property. Once complete, the will be invoked.\n\nReloads the session data from the store and re-populates the object. Once complete, the will be invoked.\n\nSave the session back to the store, replacing the contents on the store with the contents in memory (though a store may do something else--consult the store's documentation for exact behavior).\n\nThis method is automatically called at the end of the HTTP response if the session data has been altered (though this behavior can be altered with various options in the middleware constructor). Because of this, typically this method does not need to be called.\n\nThere are some cases where it is useful to call this method, for example, redirects, long-lived requests or in WebSockets.\n\nUpdates the property. Typically this is not necessary to call, as the session middleware does this for you.\n\nEach session has a unique ID associated with it. This property is an alias of and cannot be modified. It has been added to make the session ID accessible from the object.\n\nEach session has a unique cookie object accompany it. This allows you to alter the session cookie per visitor. For example we can set to to enable the cookie to remain for only the duration of the user-agent.\n\nAlternatively will return the time remaining in milliseconds, which we may also re-assign a new value to adjust the property appropriately. The following are essentially equivalent\n\nFor example when is set to (one minute), and 30 seconds has elapsed it will return until the current request has completed, at which time is called to reset to its original value.\n\nThe property returns the original (time-to-live), in milliseconds, of the session cookie.\n\nTo get the ID of the loaded session, access the request property . This is simply a read-only value set when a session is loaded/created.\n\nEvery session store must be an and implement specific methods. The following methods are the list of required, recommended, and optional.\n• Required methods are ones that this module will always call on the store.\n• Recommended methods are ones that this module will call on the store if available.\n• Optional methods are ones this module does not call at all, but helps present uniform stores to users.\n\nFor an example implementation view the connect-redis repo.\n\nThis optional method is used to get all sessions in the store as an array. The should be called as .\n\nThis required method is used to destroy/delete a session from the store given a session ID ( ). The should be called as once the session is destroyed.\n\nThis optional method is used to delete all sessions from the store. The should be called as once the store is cleared.\n\nThis optional method is used to get the count of all sessions in the store. The should be called as .\n\nThis required method is used to get a session from the store given a session ID ( ). The should be called as .\n\nThe argument should be a session if found, otherwise or if the session was not found (and there was no error). A special case is made when to act like .\n\nThis required method is used to upsert a session into the store given a session ID ( ) and session ( ) object. The callback should be called as once the session has been set in the store.\n\nThis recommended method is used to \"touch\" a given session given a session ID ( ) and session ( ) object. The should be called as once the session has been touched.\n\nThis is primarily used when the store will automatically delete idle sessions and this method is used to signal to the store the given session is active, potentially resetting the idle timer.\n\nThe following modules implement a session store that is compatible with this module. Please make a PR to add additional modules :)\n\ncluster-store A wrapper for using in-process / embedded stores - such as SQLite (via knex), leveldb, files, or memory - with node cluster (desirable for Raspberry Pi 2 and other multi-core embedded devices).\n\nconnect-memjs A memcached-based session store using memjs as the memcached client.\n\nconnect-session-knex A session store using Knex.js, which is a SQL query builder for PostgreSQL, MySQL, MariaDB, SQLite3, and Oracle.\n\nconnect-session-sequelize A session store using Sequelize.js, which is a Node.js / io.js ORM for PostgreSQL, MySQL, SQLite and MSSQL.\n\ndynamodb-store-v3 Implementation of a session store using DynamoDB backed by the AWS SDK for JavaScript v3.\n\nexpress-mysql-session A session store using native MySQL via the node-mysql module.\n\nexpress-oracle-session A session store using native oracle via the node-oracledb module.\n\nexpress-session-cache-manager A store that implements cache-manager, which supports a variety of storage types.\n\nexpress-session-rsdb Session store based on Rocket-Store: A very simple, super fast and yet powerfull, flat file database.\n\nnedb-session-store An alternate NeDB-based (either in-memory or file-persisted) session store.\n\nsession-pouchdb-store Session store for PouchDB / CouchDB. Accepts embedded, custom, or remote PouchDB instance and realtime synchronization.\n\nsessionstore A session store that works with various databases.\n\nA simple example using to store page views for a user.\n\nA simple example using to keep a user log in session.\n\nThis module uses the debug module internally to log information about session operations.\n\nTo see all the internal logs, set the environment variable to when launching your app ( , in this example):\n\nOn Windows, use the corresponding command;"
    },
    {
        "link": "https://dev.to/saint_vandora/how-to-implement-session-management-in-nodejs-applications-5emm",
        "document": "Session management is a crucial aspect of web application development, as it ensures that user data and preferences are stored securely and accurately. In this article, we will explore how to implement session management in Node.js applications.\n\nSession management is the process of managing user sessions within a web application. A session is a period of time in which a user interacts with an application, typically starting when the user logs in and ending when they log out. Session management ensures that user data, preferences, and session-related information are securely stored and managed.\n\nTo implement session management in Node.js applications, you need to use a session management middleware. A middleware is a function that sits between the client and the server, processing requests and responses.\n\nThe first step in implementing session management in Node.js applications is to install and configure the session middleware. There are several session middleware options available for Node.js, including , , and . You can install and configure these middleware options using .\n\nTo install express-session, we can run the following command:\n\n\n\nOnce installed, we can require it in our Node.js application and configure it as follows:\n\n\n\nIn the above code sample, we have initialized the express-session middleware with the following configuration options:\n• None secret: This option is used to set a secret key for the session. The secret key is used to sign the session ID cookie to prevent tampering.\n• None resave: This option determines whether the session should be saved to the store on every request. Setting this option to false can improve performance.\n• None saveUninitialized: This option determines whether to save uninitialized sessions. Setting this option to false can improve performance.\n\nOnce you have installed and configured the session middleware, the next step is to initialize it. Initialization involves creating a session object that stores user data and preferences. You can initialize the session middleware in your application's entry point, such as or .\n\n\n\nIn the above code sample, we have initialized the session middleware and accessed the session data using the object.\n\nThe session middleware stores session data in the server's memory or a separate session store, such as a Redis database. When a user logs in, the session middleware creates a session object and assigns it a unique ID. The session ID is then stored in a cookie on the user's browser. The session middleware uses the session ID to retrieve the session data from the server or session store.\n\n\n\nIn the above code sample, we have stored session data for an authenticated user using the object.\n\nTo ensure that session data is not stored indefinitely, it is essential to manage session timeouts. Session timeouts determine how long a session can remain idle before it is invalidated. You can set a timeout for a session by configuring the session middleware. When a session timeout occurs, the session middleware deletes the session data from the server or session store.\n\nWe can set the session timeout using the option when initializing the session middleware. The option is expressed in milliseconds and determines the maximum age of a session.\n\n\n\nIn the above code sample, we have set the session timeout to 60 seconds using the option.\n\nWhen a user logs out or the session expires, we need to destroy the session to ensure that session data is not stored indefinitely. We can destroy a session using the method.\n\n\n\nIn the above code sample, we have destroyed the session using the method.\n\nTo retrieve session data, we can access the object. The object is an object that contains session data.\n\n\n\nIn the above code sample, we have retrieved session data using the object.\n\nFinally, it is crucial to secure session data to prevent unauthorized access or tampering. You can secure session data by using secure cookies, encrypting session data, and implementing HTTPS encryption.\n\nSession management is a critical part of web application development. In this article, we have explored how to implement session management in Node.js applications using the express-session middleware. We have covered installing and configuring the session middleware, initializing the session middleware, storing session data, managing session timeouts, destroying sessions, and retrieving session data. By following the best practices outlined in this article, you can ensure that your Node.js applications are secure and reliable."
    },
    {
        "link": "https://valeriafischer.medium.com/understanding-sessions-in-node-js-and-express-a-beginners-guide-d9260abf1ac1",
        "document": "In web development, managing user sessions is crucial for maintaining stateful interactions between clients and servers. Sessions enable web applications to remember user data and preferences across multiple requests. In this guide, we’ll explore sessions in Node.js and Express, including their implementation, usage, security considerations, and practical examples.\n\nA session is a mechanism for persisting data across multiple requests from the same client. It allows servers to maintain stateful information about clients throughout their interactions with the application. Sessions are essential for tasks such as user authentication, storing user-specific data, and managing shopping cart information.\n\nIn Node.js and Express, sessions are typically managed using the middleware. Here's a breakdown of how sessions are implemented:\n\nConfiguration: First, we configure the session middleware with options such as a secret key, resave behavior, and uninitialized session handling.\n\nSetting Session Data: When a client makes a request, Express generates a unique session identifier (usually stored in a cookie) and associates it with the client. We can then set session data by assigning values to properties of .\n\nRetrieving Session Data: To retrieve session data, we access the properties of .\n\nDestroying Sessions: Sessions can be destroyed when they are no longer needed, such as when a user logs out or their session expires.\n\nWhen working with sessions, it’s crucial to address security concerns:\n• Secure Cookies: Use secure cookies (encrypted cookies sent over HTTPS) to protect session data from interception.\n• Session Expiration: Implement session expiration to invalidate sessions after a certain period of inactivity.\n• Session Regeneration: Regenerate session identifiers after significant events like authentication to mitigate session fixation attacks.\n\nSessions play a vital role in web development, enabling stateful communication between clients and servers. With Node.js and Express, managing sessions is straightforward using the middleware. By understanding session management principles and best practices, developers can build secure and robust web applications.\n\nBy implementing sessions effectively, developers can enhance user experience and security in their Node.js and Express applications."
    }
]