[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/excel/concepts/controls-dialogboxes-forms/create-a-user-form",
        "document": "To create a custom dialog box, you must create a UserForm. To create a UserForm, click UserForm on the Insert menu in the Visual Basic Editor.\n\nUse the Properties window to change the name, behavior, and appearance of the form. For example, to change the caption on a form, set the Caption property.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-gb/answers/questions/2153335/userform-create-with-vba-excel",
        "document": "Did you perform experiments with another new VBA project? What Excel are you using? (It seems that Excel for Mac has a different vision of User Forms)."
    },
    {
        "link": "https://simplilearn.com/tutorials/excel-tutorial/userform-in-excel",
        "document": ""
    },
    {
        "link": "https://indeed.com/career-advice/career-development/excel-userform",
        "document": "How To Create an Excel UserForm in 8 Steps (Plus Uses)\n\nProfessionals ranging from accountants and business analysts to cost estimators use Excel to store larges amounts of data. If you want to add and edit entries more easily, consider adding a UserForm that collects user input and populates it to the spreadsheet. This tool saves you from scrolling through thousands of rows and makes it easy to keep your spreadsheets up-to-date. In this article, we discuss what an Excel UserForm is and explain how to use this tool to streamline data entry for your spreadsheets.\n\nWhat is an Excel UserForm?\n\nAn Excel UserForm is a spreadsheet object that streamlines the data entry process. It appears as a dialog box where users can enter information via text boxes and drop-down menus. When users enter details into the form, the data automatically populates in the spreadsheet that you designate. These forms are also useful for editing existing entries and saving you from scrolling through thousands of rows.\n\nHow to create an Excel UserForm\n\nHere's how to create an Excel UserForm. These steps explain how to create a simple form that collects the user's name and populates entries into a spreadsheet. You can use this information to create more complicated forms that request additional details:\n\nOpen the spreadsheet where you want the form to appear. Click the \"Developer\" tab in the top ribbon. If you don't see this tab, click the \"File\" > \"Options\" > \"Customize Ribbon.\" In the \"Main Tabs\" section, check the box next to \"Developer.\" You can now open the \"Developer\" tab in the top ribbon. In this tab, select \"Visual Basic\" in the \"Code\" group to launch the VBA editor. Alternatively, you can access this editor by pressing \"Alt\" + \"F11\" on your keyboard.\n\nView the \"Project\" panel. Minimize the spreadsheets you aren't working on by clicking the minus symbol next to the file name. Ensure that the file you're working on has a plus symbol next to its name. In the drop-down menu under your desired file, select the sheet where you want to add the user form. In the top ribbon, click \"Insert\" > \"UserForm.\" In the \"Properties\" panel, highlight the field next to \"(Name)\" and type a descriptive name for the form. For this example, imagine that we name the form \"UF1.\"\n\nIn the \"Toolbox\" window, click the button that displays \"CommandButton\" when you hover your mouse over it. Move your cursor to the user form window, hold down the left mouse button and drag the cursor to create a button. Release the left mouse button when the button is the desired size.\n\nSelect the button, go to the \"Properties\" panel and highlight the field next to \"Caption.\" Enter the text you want to appear on the face of the button. For this example, imagine that the button says \"CONTINUE.\" You can also click the field next to \"(Name)\" to rename the object to \"CONTINUE.\"\n\nIn the top ribbon, click \"Insert\" > \"Module.\" Type \"Sub ShowUserForm ()\" on the first line of the coding interface, and note that \"ShowUserForm\" is the name of the module. Press \"Enter.\" On the line above the \"End Sub\" line that appears, type the name of the form followed by \".Show.\" For this example, the coding interface would read:\n\nMinimize the VBA editor to return to the spreadsheet view. Select the \"Developer\" tab in the top ribbon and go to the \"Controls\" group. Click the \"Insert\" drop-down menu and select \"Button (Form Control)\" under \"Form Controls.\" Hold down the \"Alt\" key, hold down the left mouse button and drag your cursor across the area of your spreadsheet where you want the button to appear.\n\nRight-click the button, select \"Edit Text,\" change the text to \"Add\" and click anywhere outside of the button. Right-click the button, select \"Assign Macro\" and select \"ShowUserForm,\" which is the name of the module you created in step four. Click \"OK.\"\n\nPress \"Alt\" + \"F11\" to open the VBA editor. Double-click the \"CONTINUE\" button on the form and select the area between \"Private Sub\" and \"End Sub.\" Type \"Msgbox \"The UF will be closed\", 0, \"Message\"\". Press \"Enter\" and type \"Unload UF1\" on the next line. This code means that when a user presses the \"CONTINUE\" button, a titled \"Message\" appears with the text \"The UF will be closed.\"\n\nGo to the \"Toolbox\" window and click \"Label.\" Hold down the left mouse button and drag the label across the area of the form where you want it to appear. Highlight the existing text and change it to \"Name.\" Go back to the \"Toolbox\" window, click \"TextBox\" and use your cursor to drag a textbox next to the \"Name\" label. In the \"Properties\" panel, change the \"(Name)\" of this textbox to \"Txt _ Name\".\n\nMinimize the VBA editor and select the cell in the row that appears before the first row you want data entries to appear. Click the \"Formulas\" tab and select \"Name Manager\" in the \"Defined Names\" group. Click \"New\" and type \"Start\" in the \"Name\" field. Click \"OK,\" then \"Close.\"\n\nPress \"Alt\" + \"F11\" to open the VBA editor. Click \"View\" > \"Code.\" Type the following under the \"Msgbox\" line:\n\nPlease note that none of the companies mentioned in this article are affiliated with Indeed."
    },
    {
        "link": "https://techcommunity.microsoft.com/discussions/excelgeneral/data-entry-form-help/3930042",
        "document": "1. Resolving the \"Cannot extend table or database\" Error: This error typically occurs when Excel cannot expand the table due to existing data, merged cells, or blank rows/columns surrounding the table. Here’s how to address this issue:\n• Check Surrounding Cells: Ensure that there are no merged cells or data in adjacent rows/columns around the table. Excel needs space to expand the table.\n• Table Boundaries: Ensure the table doesn’t have any blank rows or columns within it. Blank rows or columns can interrupt the table’s structure.\n• Formulas: If your table columns have formulas, ensure they are correctly set up and not causing issues with the table’s auto-expansion.\n\nIf the problem persists, consider recreating the table to ensure it's correctly defined.\n\n2. Making the UserForm Always Visible on Sheet B: To have a UserForm always available on Sheet B for data entry and searching, follow these steps:\n• Go to Insert > UserForm to create a new form. Add the necessary controls like TextBoxes, Labels, and Buttons.\n• In Sheet B, add a button and assign it a macro that shows the UserForm:\n\nVba Code is untested backup your file first\n• Add a button (e.g., \"Submit\") on the UserForm and attach the following code to submit data to your table:\n\nVba Code is untested backup your file first.\n\n3. Adding a Search Functionality: You can also add a search function to the UserForm that allows users to search for existing data. Here’s a simple way to implement it:\n• Add a TextBox (e.g., \"SearchBox\") and a Button (e.g., \"SearchButton\") on your UserForm.\n\nVba Code is untested backup your file first\n\nThis simple search will look for a value in the first column of the table and notify the user if a match is found."
    },
    {
        "link": "https://stackoverflow.com/questions/43403219/use-excel-vba-to-update-master-list-based-on-user-input-data",
        "document": "I have a single workbook with below sheets\n\nEach day the Master worksheet and the processors sheets are populated with fresh accounts.\n\neach worksheet Master, and 13 individuals processors has Columns A:F\n\nAs the processors work they update column F with status. Column A in all worksheets is account number\n\nAll I want to do is have a VBA that Starts in A1 of the Master searches each cell (a1,a2,a3...) until there are no more account numbers against column A of the processors individual sheets, upon finding a match in respective column A's updates column F of the master based on the text in column F of the processors sheet\n\nIts as simple as that.\n\nI for some reason cannot wrap my head around this VBA stuff, all the examples are way more complex and I cant seem to make them work.\n\nFeeling stressed with my first VBA outing and could really use some help"
    },
    {
        "link": "https://excelmacromastery.com/vba-userform",
        "document": "This post provides an in-depth guide to the VBA Userform starting from scratch.\n\nThe table of contents below shows the areas of the VBA UserForm that are covered and the section after this provides a quick guide so you can refer back to the UserForm code easily.\n\n“The system should treat all user input as sacred.” – Jef Raskin\n\nThe following table provides a quick guide to the most common features of the UserForm\n\nIf you are a member of the website, click on the image below to view the webinar for this post.\n\nThe VBA UserForm is a very useful tool. It provides a practical way for your application to get information from the user.\n\nIf you are new to UserForms you may be overwhelmed by the amount of information about them. As with most topics in VBA, 90% of the time you will only need 10% of the functionality.\n\nIn these two blog posts(part 2 is here) I will show you how to quickly and easily add a UserForm to your application.\n\nThis first post covers creating the VBA Userform and using it as modal or modeless. I will also show you how to easily pass the users selection back to the calling procedure.\n\nIn the second part of this post I will cover the main controls such as the ListBox, the ComboBox(also called the Dropdown menu), the TextBox and the CheckBox. This post will contain a ton of examples showing how to use each of these controls.\n\nWhat is the VBA Userform?\n\nThe VBA UserForm is a dialog which allows your application to get input from the user. UserForms are used throughout all Windows applications. Excel itself has a large number of UserForms such as the Format Cells UserForm shown in the screenshot below.\n\nUserForms contain different types of controls such as Buttons, ListBoxes, ComboBoxes(Dropdown lists), CheckBoxes and TextBoxes.\n\nIn the Format Cells screenshot above you can see examples of these controls:\n• Font, Font style and Size contain a textbox with a ListBox below it\n• Ok and Cancel are command Buttons\n\nThere are other controls but these are the ones you will use most of the time.\n\nIt is important to note that VBA has some useful built-in UserForms. These can be very useful and may save you having to create a custom one. Let’s start by having a look at the MsgBox.\n\nThe VBA message box allows you to display a dialog to the user. You can choose from a collection of buttons such as Yes, No, Ok and Cancel.\n\nYou can easily find out which of these buttons the user clicked on and use the results in your code.\n\nThe following code shows two simple examples of using a message box\n\nIn the next example, we ask the user to click Yes or No and print a message displaying which button was clicked\n\nIn the final example we ask the user to click Yes, No or Cancel\n\nYou can see all the MsgBox options here.\n\nIf you want to get a single piece of text or value from the user you can use the InputBox. The following code asks the user for a name and writes it to the Immediate Window(Ctrl + G):\n\nYou can add validation to the InputBox function using the Type parameter:\n\nYou can download the workbook with all the code examples from the top of this post.\n\n\n\nWe can use the Windows file dialog to allow the user to select a file or multiple files.\n\nThe first example allows the user to select a file\n\nThe following example allows the user to select multiple files\n\nNote: If you need more flexibility then you can use the File Dialog. This allows you to use the “Save as” file dialog, select folders and so on.\n\nIf the built-in UserForms do not cover your needs then you will need to create your own custom Userform. To use a UserForm in our code we must first create one. We then add the necessary controls to this Userform.\n\nWe create a UserForm with the following steps\n• Go to the Project Window which is normally on the left(select View->Project Explorer if it’s not visible)\n• Right-click on the workbook you wish to use\n• Select Insert and then UserForm(see screenshot below)\n\nA newly created UserForm will appear. Anytime you want to access this Userform you can double click on the UserForm name in the Project window.\n\nThe Toolbox dialog should also be visible. If it’s not visible select View->Toolbox from the menu. We use the toolbox too add controls to our UserForm.\n\nTo view the design of the UserForm, double click on it in the Project window. There are three important windows we use when creating our UserForms.\n• The properties window – this is where we can change the setting of the Userform and its controls\n• The toolbox – we use this to add new controls to our UserForm\n\nLet’s have a look at a very simple UserForm example.\n\nYou can download this and all the code examples from the top of this post.\n• Rename it to userformTest in the (Name) property in the properties window\n• Create a new module(Right-click on properties window and select Insert->Module)\n• Copy the DislayUserForm sub below to the module\n• Run the sub using Run->Run UserForm Sub from the menu\n• The UserForm will be displayed – you have created your first UserForm application!\n• Click on the in the top right of the UserForm to close\n\nSetting the Properties of the UserForm\n\nWe can change the attributes of the UserForm using the properties window. Select View->Properties Window if the window is not visible.\n\nWhen we click on the UserForm or a control on a UserForm then the Properties window displays the attributes of that item.\n\nGenerally speaking, you only use a few of these properties. The important ones for the UserForm are Name and Caption.\n\nTo change the name of the UserForm do the following\n• Click on the UserForm in the Project window or click on the UserForm itself\n• Click in the name field of the properties window\n• Type in the new name\n\nThe Controls of the VBA UserForm\n\nWe add controls to the UserForms to allow the user to make selections, enter text or click a button. To add a control use the steps below\n• Go to the toolbox dialog – if not visible select View->Toolbox\n• Click on the control you want to add – the button for this control will appear flat\n• Put the cursor over the UserForm\n• Hold down the left mouse button and drag until the size you want\n\nThe following table shows a list of the common controls\n\nTo view the code of the UserForm\n• Right-click on the UserForm in the properties windows(or the UserForm itself) and select “View Code”\n• You will see a sub called UserForm_Click. You can delete this when you create your first sub\n\nNote: If you double click on a control it will bring you to the click event of that control. This can be a quicker way to get to the UserForm code.\n\nWhen we use a UserForm we are dealing with events. What this means is that we want to perform actions when events occur. An event occurs when the users clicks a button, changes text, selects an item in a ComboBox, etc. We add a Sub for a particular event and place our code in it. When the event occurs our code will run.\n\nOne common event is the Initialize event which occurs when the UserForm is created at run time. We normally use this event to fill our controls with any necessary data. We will look at this event in the section below.\n\nTo add an event we use the ComboBoxes over the code window(see screenshot above). The left one is used to select the control and the right one is used to select the event. When we select the event it will automatically add this sub to our UserForm module.\n\nNote: Clicking on any control on the UserForm will create the click event for that control.\n\nThe Initialize Event of the VBA UserForm\n\nThe first thing we want to do with a UserForm is to fill the controls with values. For example, if we have a list of countries for the user to select from we could use this.\n\nTo do this we use the Initialize event. This is a sub that runs when the UserForm is created(see next section for more info).\n\nTo create the Initialize event we do the following\n• Right-click on the UserForm and select View Code from the menu.\n• In the Dropdown list on the left above the main Window, select UserForm.\n• This will create the UserForm_Click event. You can ignore this.\n• In the Dropdown list on the right above the main Window, select Initialize.\n• Optional: Delete the UserForm_Click sub created in step 2.\n\nWe can also create the Initialize event by copying or typing the following code\n\nOnce we have the Initialize event created we can use it to add the starting values to our controls. We will see more about this in the second part of this post.\n\nThe UserForm also has an Activate event. It is important to understand the difference between this and the Initialize event.\n\nThe Initialize event occurs when the actual object is created. This means as soon as you use on of the properties or functions of the UserForm. The code example below demonstrates this\n\nWe normally reference the UserForm first by calling Show which makes it seem that displaying the UserForm is triggering the Initialize event. This is why there is often confusion over this event.\n\nIn the example below calling Show is the first time we use the UserForm. Therefore it is created at this time and the Initialize event is triggered.\n\nThe Activate event occurs when the UserForm is displayed. This can happen using Show. It also occurs any time the UserForm is displayed. For example, if we switch to a different window and then switch back to the UserForm then the Activate event will be triggered.\n\nWe create the Activate event the same way we create the Initialize event or we can just copy or type the following code\n• Initialize occurs when the Userform is created. Activate occurs when the UserForm is displayed.\n• For each UserForm you use – Initialize occurs only once, Activate occurs one or more times.\n\nWe can use the VBA UserForm in two ways\n\nLet’s look at each of these in turn.\n\nModal means the user cannot interact with the parent application while this is visible. The excel Format cells dialog we looked at earlier is a modal UserForm. So are the Excel Colors and Name Manager dialogs.\n\nWe use modal when we don’t want the user to interact with any other part of the application until they are finished with the UserForm.\n\nModeless means the user can interact with other parts of the application while they are visible. An example of modeless forms in Excel is the Find dialog(Ctrl + F).\n\nYou may notice that any Excel dialog that allows the user to select a range has a limited type of Modeless – the user can select a range of cells but cannot do much else.\n\nThe actual code to make a UserForm modal or modeless is very simple. We determine which type we are using when we show the UserForm as the code below demonstrates\n\nAs the comments above indicate, the code behaves differently for Modal and Modeless. For the former, it waits for the UserForm to close and for the latter, it continues on.\n\nEven though we can display any UserForm as modal or modeless we normally use it in one way only. This is because how we use them is different\n\nWith a Modal UserForm we normally have an Ok and a Cancel button.\n\nThe Ok button normally closes the UserForm and performs the main action. This could be saving the user inputs or passing them back to the procedure.\n\nThe Cancel button normally closes the UserForm and cancels any action that may have taken place. Any changes the user made on the UserForm are ignored.\n\nWith a Modeless UserForm we normally have a close button and an action button e.g. the Find button on the Excel Find Dialog.\n\nWhen the action button is clicked an action takes place but the dialog remains open.\n\nThe Close button is used to close the dialog. It normally doesn’t do anything else.\n\nWe are going to create a Modal UserForm example. It is very simple so you can see clearly how to use a UserForm.\n\nYou can download this and all the code examples from the top of this post.\n\nThe following UserForm allows the user to enter the name of a fruit:\n\nWe use the following code to show this UserForm and to retrieve the contents of the fruit textbox:\n\nWhat you will notice is that we hide the UserForm when the user clicks Ok. We don’t set it to Nothing or unload it until after we are finished retrieving the user input. If we Unload the UserForm when the user clicks Ok then it no longers exists so we cannot access the values we want.\n\nUsing UserForm_QueryClose to Cancel the UserForm\n\nWe always want to give the user the option to cancel the UserForm. Once it is canceled we want to ignore any selections the user made.\n\nEach form comes with an X in the top right-hand corner which allows the user to cancel it:\n\nThis button cancels the UserForm automatically – no code is necessary. When the user clicks X the UserForm is unloaded from memory. That is, it no longer exists so we will get an error if we try to access it. The code below will give an error if the user clicks on the X\n\nTo avoid this error we want to prevent the UserForm from being Unloaded when the X button is clicked. To do this we use the QueryClose event.\n\nWe create a variable first at the top of the UserForm code module. We also add a property so that we can read the variable when we need to retrieve the value:\n\nThen we add the UserForm_QueryClose event to the UserForm module:\n\nIn the first line, we prevent the UserForm from being unloaded. With the next lines, we hide the UserForm and set the m_Cancelled variable to true. We will use this variable later to check if the UserForm was canceled:\n\nWe can then update our calling procedure to check if the UserForm was canceled\n\nIf we want to add a Cancel button it is simple to do. All we need to do is Hide the form and set the variable m_Cancelled to true. This is the same as we did in the QueryClose Event above:\n\nUsing the Escape key to cancel\n\nIf you want to allow the user to cancel using the Esc it is simple(but not obvious) to do. You set the Cancel property of your ‘Cancel’ button to True. When Esc is pressed the click event of your Cancel button will be used.\n\nPutting All the Modal Code Together\n\nThe final code for a Modal form looks like this:\n\n&nbps;\n\n You can use this code as a framework for any Modal UserForm that you create.\n\nWe are now going to use a simple example to show how to use a Modeless VBA UserForm. In this example, we will add a customer name to a worksheet each time the user clicks on the Add Customer button.\n\nYou can download this and all the code examples from the top of this post.\n\nThe code below displays the UserForm in Modeless mode. The problem with this code is that if you minimize Excel the UserForm may not be visible when you restore it:\n\nThe code below solves the problem above. When you display a Userform using this code it will remain visible when you minimize and restore Excel:\n\nAn important thing to keep in mind here is that after the frm.Show line, the code will continue on. This is different to Modal where the code waits at this line for the UserForm to be closed or hidden.\n\nWhen the Add button is clicked the action occurs immediately. We add the customer name to a new row in our worksheet. We can add as many names as we like. The UserForm will remain visible until we click on the Close button.\n\nThe following is the UserForm code for the customer example:\n\nYou can find the second part of this post here.\n\nFree VBA Tutorial If you are new to VBA or you want to sharpen your existing VBA skills then why not try out the The Ultimate VBA Tutorial.\n\nRelated Training: Get full access to the Excel VBA training webinars and all the tutorials."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/api/excel.application.inputbox",
        "document": "Displays a dialog box for user input. Returns the information entered in the dialog box.\n\nThe following table lists the values that can be passed in the Type argument. Can be one or a sum of the values. For example, for an input box that can accept both text and numbers, set Type to 1 + 2.\n\nUse InputBox to display a simple dialog box so that you can enter information to be used in a macro. The dialog box has an OK button and a Cancel button. If you select the OK button, InputBox returns the value entered in the dialog box. If you select the Cancel button, InputBox returns False.\n\nIf Type is 0, InputBox returns the formula in the form of text; for example, . If there are any references in the formula, they are returned as A1-style references. (Use ConvertFormula to convert between reference styles.)\n\nIf Type is 8, InputBox returns a Range object. You must use the Set statement to assign the result to a Range object, as shown in the following example.\n\nIf you don't use the Set statement, the variable is set to the value in the range, rather than the Range object itself.\n\nIf you use the InputBox method to ask the user for a formula, you must use the FormulaLocal property to assign the formula to a Range object. The input formula will be in the user's language.\n\nThe InputBox method differs from the InputBox function in that it allows selective validation of the user's input, and it can be used with Excel objects, error values, and formulas. Notice that calls the InputBox method; with no object qualifier calls the InputBox function.\n\nThis example prompts the user for a number.\n\nThis example prompts the user to select a cell on Sheet1. The example uses the Type argument to ensure that the return value is a valid cell reference (a Range object).\n\nThis example uses an InputBox for the user to select a range to pass to the user-defined function MyFunction, which multiplies three values in a range together and returns the result.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://reddit.com/r/excel/comments/7ywyfh/best_practices_for_designing_an",
        "document": "Any advice/tips on how to develop an intuitive application based on Excel VBA Userforms? I'm looking for some sort of guide on how to position or arrange certain aspects of a generic survey-based Userform. For example having the Cancel button on the bottom right.\n\nEDIT: Something like this is pretty useful to me https://www.ventureharbour.com/form-design-best-practices/"
    },
    {
        "link": "https://stackoverflow.com/questions/46457618/updating-excel-worksheet-data-with-userform",
        "document": "I am trying to enter in information in a database that I have in excel using a userform. The catch here is that I need to be able to enter data into a specific cell using a text box. For example, I open the userform and in textbox1 I type 123 in textbox2 I type 321. When I hit the submit button in the userform the code should look for the text \"123\" in a specific column. If the text \"123\" exists in the column specified in the code then it should take the data entered in textbox2(321) and put it in a cell adjacent to the cell containing the text 123\n\nI have combed the internet looking for a solution to this and only found one that only sort of worked.\n\nThis is the link to that solution: https://youtu.be/cKKgYPfq3_I\n\nThe code wouldn't work consistently though. I don't know if this is because some of the edits I made to the code in this video caused the errors or if the code itself had any errors.\n\nThis will be for a database that will have a ton of information on it. Having a function like this would make it a lot easier for someone to update information on the database. You could have for example a list of phone numbers and names. With this function it would allow you to enter a name in one text box and a new phone number in the second text box. You could then update an individuals phone number when pushing the submit button.\n\nAny suggestions would be a huge help.\n\nBelow is what I have so far that I found from a different forum and edited from some help that I got from here. It doesn't seem to work. Then again it could be because the code wasn't at all intended for what I would like it to do. (My knowledge of VBA is limited to puzzle piecing code together that I can find that seems to work.)"
    }
]