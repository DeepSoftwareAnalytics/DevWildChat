[
    {
        "link": "https://jsonlines.readthedocs.io",
        "document": "is a Python library to simplify working with jsonlines and ndjson data.\n\nThis data format is straight-forward: it is simply one valid JSON value per line, encoded using UTF-8. While code to consume and create such data is not that complex, it quickly becomes non-trivial enough to warrant a dedicated library when adding data validation, error handling, support for both binary and text streams, and so on. This small library implements all that (and more!) so that applications using this format do not have to reinvent the wheel.\n\nImport the module to get started: The convenience function takes a file name and returns either a reader or writer, making simple cases extremely simple: Instead of a file-like object, any iterable yielding JSON encoded strings can be provided: While the method can be used directly, it is often more convenient to use iteration: Custom iteration flags, such as type checks, can be specified by calling instead: A wraps a file-like object, and can write a single object, or multiple objects at once: Both readers and writers can be used as a context manager, in which case they will be closed automatically. Note that this will not close a passed-in file-like object since that object’s life span is controlled by the calling code. Example: Note that the function does close the opened file, since the open file is not explicitly opened by the calling code. That means no is needed there: This should be enough to get started. See the API docs below for more details.\n\nThis is a convenience function to open a file and wrap it in either a or instance, depending on the specified . Additional keyword arguments will be passed on to the reader and writer; see their documentation for available options. The resulting reader or writer must be closed after use by the caller, which will also close the opened file. This can be done by calling , but the easiest way to ensure proper resource finalisation is to use a block (context manager), e.g.\n• None file – name or ‘path-like object’ of the file to open\n• None mode – whether to open the file for reading ( ), writing ( ), appending ( ), or exclusive creation ( ). The first argument must be an iterable that yields JSON encoded strings. Usually this will be a readable file-like object, such as an open file or an instance, but it can also be something else as long as it yields strings when iterated over. Instances are iterable and can be used as a context manager. The argument can be used to replace the standard json decoder. If specified, it must be a callable that accepts a (unicode) string and returns the decoded object. This closes the underlying file if that file has been opened by this reader/writer. When an already opened file-like object was provided, the caller is responsible for closing it. This is the iterator equivalent to repeatedly calling . If no arguments are specified, this is the same as directly iterating over this instance. When is set to , invalid lines will be silently ignored. See for a description of the other arguments. The optional argument specifies the expected data type. Supported types are , , , , , and . When specified, non-conforming lines result in . By default, input lines containing (in JSON) are considered invalid, and will cause . The argument can be used to change this behaviour, in which case will be returned instead. If is set to , empty lines and lines containing only whitespace are silently skipped. Instances can be used as a context manager. The argument must be a file-like object with a method accepting either text (unicode) or bytes. The argument can be used to to produce smaller output. The argument can be used to sort keys in json objects, and will produce deterministic output. For more control, provide a a custom encoder callable using the argument. The callable must produce (unicode) string output. If specified, the and arguments will be ignored. When the argument is set to , the writer will call after each written line.\n• None compact – whether to use a compact output format\n• None flush – whether to flush the file-like object after writing each line This closes the underlying file if that file has been opened by this reader/writer. When an already opened file-like object was provided, the caller is responsible for closing it. obj – the object to encode and write Error raised when an invalid line is encountered. This happens when the line does not contain valid JSON, or if a specific data type has been requested, and the line contained a different data type. The original line itself is stored on the exception instance as the attribute, and the line number as . This class subclasses both and the built-in .\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n• None Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n• None Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n• None Neither the name of the author nor the names of the contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
    },
    {
        "link": "https://stackoverflow.com/questions/12451431/loading-and-parsing-a-json-file-with-multiple-json-objects",
        "document": "Just like Martijn Pieters' answer but maybe a bit more pythonic, and most of all, which enables streaming of data (see second part of the answer):\n\nThe function returns an iterator that applies to every item of , yielding the results (cf map() python doc).\n\n And the transforms this iterator into... a list :)\n\n But you can imagine to directly use the iterator returned by map instead: it iterates over each of your json lines. Note that in that case you need to do it in the context: that is the strength of this approach, the json lines are not fully loaded in a list, they are streamed: the map function read each line of the file when is called by the . \n\n It would give:\n\nAnd I have nothing to add to Martijn's answer for explanations about what is a jsonl (json line by line file) and why use it!"
    },
    {
        "link": "https://jsonlines.org/examples",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/50475635/loading-jsonl-file-as-json-objects",
        "document": "The splitlines would address that problem for you, so In general the code below will work for you:\n\nIf that's the response object the result would be:\n\ntreats line breaks differently than JSON's escape requirements. Specifically, splits on Unicode Line Separator (\\u2028), while JSON allows this character to remain unescaped in strings. When using with , Python will emit unescaped in strings."
    },
    {
        "link": "https://jsonlines.org",
        "document": "This page describes the JSON Lines text format, also called newline-delimited JSON. JSON Lines is a convenient format for storing structured data that may be processed one record at a time. It works well with unix-style text processing tools and shell pipelines. It's a great format for log files. It's also a flexible format for passing messages between cooperating processes.\n\nThe JSON Lines format has three requirements:\n\nJSON allows encoding Unicode strings with only ASCII escape sequences, however those escapes will be hard to read when viewed in a text editor. The author of the JSON Lines file may choose to escape characters to work with plain ASCII files.\n\nEncodings other than UTF-8 are very unlikely to be valid when decoded as UTF-8 so the chance of accidentally misinterpreting characters in JSON Lines files is low.\n\nLike the JSON standard a byte order mark (U+FEFF) must NOT be included.\n\n2. Each Line is a Valid JSON Value\n\nThe most common values will be objects or arrays, but any JSON value is permitted.\n\nSee json.org for a definition of JSON values.\n\nThis means is also supported because surrounding white space is implicitly ignored when parsing JSON values.\n\nThe last character in a file following the last JSON value may be a line separator. In this case the line separator does not indicate the start of another JSON value.\n\nJSON Lines files may be saved with the file extension .\n\nStream compressors like or are recommended for saving space, resulting in or files.\n\nMIME type may be , but this is not yet standardized; any help writing the RFC would be greatly appreciated (see issue).\n\nText editing programs call the first line of a text file \"line 1\". The first value in a JSON Lines file should also be called \"value 1\"."
    },
    {
        "link": "https://docs.python.org/3/library/json.html",
        "document": "JSON (JavaScript Object Notation), specified by RFC 7159 (which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript object literal syntax (although it is not a strict subset of JavaScript ).\n\nexposes an API familiar to users of the standard library and modules.\n\nUsing from the shell to validate and pretty-print:\n\nSerialize obj as a JSON formatted stream to fp (a -supporting file-like object) using this Python-to-JSON conversion table. Unlike and , JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to using the same fp will result in an invalid JSON file.\n• None obj (object) – The Python object to be serialized.\n• None fp (file-like object) – The file-like object obj will be serialized to. The module always produces objects, not objects, therefore must support input.\n• None skipkeys (bool) – If , keys that are not of a basic type ( , , , , ) will be skipped instead of raising a . Default .\n• None ensure_ascii (bool) – If (the default), the output is guaranteed to have all incoming non-ASCII characters escaped. If , these characters will be outputted as-is.\n• None check_circular (bool) – If , the circular reference check for container types is skipped and a circular reference will result in a (or worse). Default .\n• None allow_nan (bool) – If , serialization of out-of-range values ( , , ) will result in a , in strict compliance with the JSON specification. If (the default), their JavaScript equivalents ( , , ) are used.\n• None cls (a subclass) – If set, a custom JSON encoder with the method overridden, for serializing into custom datatypes. If (the default), is used.\n• None indent (int | str | None) – If a positive integer or string, JSON array elements and object members will be pretty-printed with that indent level. A positive integer indents that many spaces per level; a string (such as ) is used to indent each level. If zero, negative, or (the empty string), only newlines are inserted. If (the default), the most compact representation is used.\n• None separators (tuple | None) – A two-tuple: . If (the default), separators defaults to if indent is , and otherwise. For the most compact JSON, specify to eliminate whitespace.\n• None default (callable | None) – A function that is called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a . If (the default), is raised.\n• None sort_keys (bool) – If , dictionaries will be outputted sorted by key. Default . Changed in version 3.2: Allow strings for indent in addition to integers. Changed in version 3.4: Use as default if indent is not . Changed in version 3.6: All optional parameters are now keyword-only. Serialize obj to a JSON formatted using this conversion table. The arguments have the same meaning as in . Keys in key/value pairs of JSON are always of the type . When a dictionary is converted into JSON, all the keys of the dictionary are coerced to strings. As a result of this, if a dictionary is converted into JSON and then back into a dictionary, the dictionary may not equal the original one. That is, if x has non-string keys. Deserialize fp to a Python object using the JSON-to-Python conversion table.\n• None fp (file-like object) – A -supporting text file or binary file containing the JSON document to be deserialized.\n• None cls (a subclass) – If set, a custom JSON decoder. Additional keyword arguments to will be passed to the constructor of cls. If (the default), is used.\n• None object_hook (callable | None) – If set, a function that is called with the result of any object literal decoded (a ). The return value of this function will be used instead of the . This feature can be used to implement custom decoders, for example JSON-RPC class hinting. Default .\n• None object_pairs_hook (callable | None) – If set, a function that is called with the result of any object literal decoded with an ordered list of pairs. The return value of this function will be used instead of the . This feature can be used to implement custom decoders. If object_hook is also set, object_pairs_hook takes priority. Default .\n• None parse_float (callable | None) – If set, a function that is called with the string of every JSON float to be decoded. If (the default), it is equivalent to . This can be used to parse JSON floats into custom datatypes, for example .\n• None parse_int (callable | None) – If set, a function that is called with the string of every JSON int to be decoded. If (the default), it is equivalent to . This can be used to parse JSON integers into custom datatypes, for example .\n• None parse_constant (callable | None) – If set, a function that is called with one of the following strings: , , or . This can be used to raise an exception if invalid JSON numbers are encountered. Default .\n• None JSONDecodeError – When the data being deserialized is not a valid JSON document.\n• None UnicodeDecodeError – When the data being deserialized does not contain UTF-8, UTF-16 or UTF-32 encoded data.\n• None All optional parameters are now keyword-only.\n• None fp can now be a binary file. The input encoding should be UTF-8, UTF-16 or UTF-32. Changed in version 3.11: The default parse_int of now limits the maximum length of the integer string via the interpreter’s integer string conversion length limitation to help avoid denial of service attacks. Identical to , but instead of a file-like object, deserialize s (a , or instance containing a JSON document) to a Python object using this conversion table. Changed in version 3.6: s can now be of type or . The input encoding should be UTF-8, UTF-16 or UTF-32. Changed in version 3.9: The keyword argument encoding has been removed.\n\nPerforms the following translations in decoding by default: It also understands , , and as their corresponding values, which is outside the JSON spec. object_hook is an optional function that will be called with the result of every JSON object decoded and its return value will be used in place of the given . This can be used to provide custom deserializations (e.g. to support JSON-RPC class hinting). object_pairs_hook is an optional function that will be called with the result of every JSON object decoded with an ordered list of pairs. The return value of object_pairs_hook will be used instead of the . This feature can be used to implement custom decoders. If object_hook is also defined, the object_pairs_hook takes priority. parse_float is an optional function that will be called with the string of every JSON float to be decoded. By default, this is equivalent to . This can be used to use another datatype or parser for JSON floats (e.g. ). parse_int is an optional function that will be called with the string of every JSON int to be decoded. By default, this is equivalent to . This can be used to use another datatype or parser for JSON integers (e.g. ). parse_constant is an optional function that will be called with one of the following strings: , , . This can be used to raise an exception if invalid JSON numbers are encountered. If strict is false ( is the default), then control characters will be allowed inside strings. Control characters in this context are those with character codes in the 0–31 range, including (tab), , and . If the data being deserialized is not a valid JSON document, a will be raised. Changed in version 3.6: All parameters are now keyword-only. Return the Python representation of s (a instance containing a JSON document). will be raised if the given JSON document is not valid. Decode a JSON document from s (a beginning with a JSON document) and return a 2-tuple of the Python representation and the index in s where the document ended. This can be used to decode a JSON document from a string that may have extraneous data at the end. Supports the following objects and types by default: Changed in version 3.4: Added support for int- and float-derived Enum classes. To extend this to recognize other objects, subclass and implement a method with another method that returns a serializable object for if possible, otherwise it should call the superclass implementation (to raise ). If skipkeys is false (the default), a will be raised when trying to encode keys that are not , , or . If skipkeys is true, such items are simply skipped. If ensure_ascii is true (the default), the output is guaranteed to have all incoming non-ASCII characters escaped. If ensure_ascii is false, these characters will be output as-is. If check_circular is true (the default), then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause a ). Otherwise, no such check takes place. If allow_nan is true (the default), then , , and will be encoded as such. This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders. Otherwise, it will be a to encode such floats. If sort_keys is true (default: ), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis. If indent is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0, negative, or will only insert newlines. (the default) selects the most compact representation. Using a positive integer indent indents that many spaces per level. If indent is a string (such as ), that string is used to indent each level. Changed in version 3.2: Allow strings for indent in addition to integers. If specified, separators should be an tuple. The default is if indent is and otherwise. To get the most compact JSON representation, you should specify to eliminate whitespace. Changed in version 3.4: Use as default if indent is not . If specified, default should be a function that gets called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a . If not specified, is raised. Changed in version 3.6: All parameters are now keyword-only. Implement this method in a subclass such that it returns a serializable object for o, or calls the base implementation (to raise a ). For example, to support arbitrary iterators, you could implement like this: # Let the base class default method raise the TypeError Return a JSON string representation of a Python data structure, o. For example: Encode the given object, o, and yield each string representation as available. For example:\n\nThe JSON format is specified by RFC 7159 and by ECMA-404. This section details this module’s level of compliance with the RFC. For simplicity, and subclasses, and parameters other than those explicitly mentioned, are not considered. This module does not comply with the RFC in a strict fashion, implementing some extensions that are valid JavaScript but not valid JSON. In particular:\n• None Infinite and NaN number values are accepted and output;\n• None Repeated names within an object are accepted, and only the value of the last name-value pair is used. Since the RFC permits RFC-compliant parsers to accept input texts that are not RFC-compliant, this module’s deserializer is technically RFC-compliant under default settings. The RFC requires that JSON be represented using either UTF-8, UTF-16, or UTF-32, with UTF-8 being the recommended default for maximum interoperability. As permitted, though not required, by the RFC, this module’s serializer sets ensure_ascii=True by default, thus escaping the output so that the resulting strings only contain ASCII characters. Other than the ensure_ascii parameter, this module is defined strictly in terms of conversion between Python objects and , and thus does not otherwise directly address the issue of character encodings. The RFC prohibits adding a byte order mark (BOM) to the start of a JSON text, and this module’s serializer does not add a BOM to its output. The RFC permits, but does not require, JSON deserializers to ignore an initial BOM in their input. This module’s deserializer raises a when an initial BOM is present. The RFC does not explicitly forbid JSON strings which contain byte sequences that don’t correspond to valid Unicode characters (e.g. unpaired UTF-16 surrogates), but it does note that they may cause interoperability problems. By default, this module accepts and outputs (when present in the original ) code points for such sequences. The RFC does not permit the representation of infinite or NaN number values. Despite that, by default, this module accepts and outputs , , and as if they were valid JSON number literal values: # Neither of these calls raises an exception, but the results are not valid JSON In the serializer, the allow_nan parameter can be used to alter this behavior. In the deserializer, the parse_constant parameter can be used to alter this behavior. The RFC specifies that the names within a JSON object should be unique, but does not mandate how repeated names in JSON objects should be handled. By default, this module does not raise an exception; instead, it ignores all but the last name-value pair for a given name: The object_pairs_hook parameter can be used to alter this behavior. The old version of JSON specified by the obsolete RFC 4627 required that the top-level value of a JSON text must be either a JSON object or array (Python or ), and could not be a JSON null, boolean, number, or string value. RFC 7159 removed that restriction, and this module does not and has never implemented that restriction in either its serializer or its deserializer. Regardless, for maximum interoperability, you may wish to voluntarily adhere to the restriction yourself. Some JSON deserializer implementations may set limits on:\n• None the maximum level of nesting of JSON objects and arrays\n• None the range and precision of JSON numbers\n• None the content and maximum length of JSON strings This module does not impose any such limits beyond those of the relevant Python datatypes themselves or the Python interpreter itself. When serializing to JSON, beware any such limitations in applications that may consume your JSON. In particular, it is common for JSON numbers to be deserialized into IEEE 754 double precision numbers and thus subject to that representation’s range and precision limitations. This is especially relevant when serializing Python values of extremely large magnitude, or when serializing instances of “exotic” numerical types such as .\n\nThe module provides a simple command line interface to validate and pretty-print JSON objects. If the optional and arguments are not specified, and will be used respectively: Changed in version 3.5: The output is now in the same order as the input. Use the option to sort the output of dictionaries alphabetically by key. The JSON file to be validated or pretty-printed: python -m json.tool mp_films.json \"title\": \"And Now for Something Completely Different\", If infile is not specified, read from . Write the output of the infile to the given outfile. Otherwise, write it to . Sort the output of dictionaries alphabetically by key. Disable escaping of non-ascii characters, see for more information."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-convert-python-dictionary-to-json",
        "document": "JSON stands for JavaScript Object Notation. It means that a script (executable) file made of text in a programming language, is used to store and transfer the data. Python supports JSON through a built-in package called JSON. To use this feature, we import the JSON package in Python script. The text in JSON is done through quoted-string which contains a value in key-value mapping within {}. It is similar to the dictionary in Python.\n\nNote: For more information, refer to Read, Write, and Parse JSON using Python\n\nConvert Dictionary in Python to JSON File using json.dump()\n\nIn this program, we are going to convert the Python dictionary to a JSON object and then stored it in a file. Firstly we import the JSON module and then define a dictionary that stored student details. Now, we are going to use json.dump() method to convert and write the JSON object to a file along with open() method of file handling in Python. We open the sample.json file in writing mode and after that, we write the file using json.dump() method of JSON module in Python.\n\nIn the below code, we are going to convert a Python dictionary to a JSON object using json.dumps() method of JSON module in Python. Firstly, we import the JSON module and then define a dictionary that stores employee details. After that, we convert the ’employee_details’ dictionary to JSON object using json.dumps() method and stored into the variable ‘json_object’.\n\nIn the below code, we will convert the nested dictionary to JSON in Python. Firstly, we import JSON module and then create a nested dictionary. After that we convert the nested dictionary to JSON using json.dumps() method by passing dictionary ‘person’ and ‘indent=4’ as argument in it. Finally, we print the converted JSON.\n\nThe below code will convert a Python dictionary to a JSON string with double quotes around the keys and values, we can achieve this using the json.dumps() function with the ensure_ascii parameter set to ‘False’.\n\nIn the below code, we will convert the Python dictionary to JSON array. First, we create a sample dictionary ‘data’ and then create a list of dictionary using list comprehension to iterate over the keys of the dictionary and store it in a variable ‘array’. After that convert the array to JSON array using json.dumps() function and then print the JSON array.\n\nConvert Dictionary to JSON using sort_keys in Python\n\nIn the below code, we will convert the Python dictionary using while sorting the keys. To convert a Python dictionary to a JSON string with sorted keys we have to specify the ‘sort_keys’ parameter as ‘True’ in json.dumps() function. We can see in the output that data is sorted based on keys.\n\nJSON (JavaScript Object Notation) is a data interchange format used to store and exchange data between systems. A dictionary in Python is a built-in data structure used to store a collection of key-value pairs. JSON keys must be strings and enclosed in double quotes. Dictionary keys can be of various data types, including strings, numbers, and tuples (immutable types). JSON has a strict syntax with key-value pairs separated by colons (:), and pairs separated by commas (,). Curly braces {} enclose JSON objects. Python dictionaries use curly braces {} to enclose key-value pairs, with colons : separating keys and values. JSON keys and string values must be enclosed in double quotes (e.g., “key”: “value”). In Python dictionaries, keys can be specified without quotes (e.g., key: “value”), although quotes are also allowed. JSON values are accessed using keys as strings (e.g., data[“name”]). Dictionary values are accessed using keys (e.g., data[“name”]) or using the get() method. JSON data can be saved to and loaded from files using functions like json.dump() and json.load(). Python dictionaries can also be serialized to files using various methods, but you need to handle the serialization/deserialization logic yourself.\n\nHow to Convert Python Dictionary to JSON? – FAQs\n\nHow to convert an OrderedDict to JSON in Python?\n\nHow is a dictionary represented in JSON?\n\nHow to convert a list into a JSON dictionary in Python?\n\nHow to convert a JSON response to a dictionary?"
    },
    {
        "link": "https://stackoverflow.com/questions/16668511/python-dump-dict-as-a-json-string",
        "document": "You can use .\n\nIf you want to sort the keys, use as the second argument to :"
    },
    {
        "link": "https://geeksforgeeks.org/json-dumps-in-python",
        "document": "JSON is an acronym that stands for JavaScript Object Notation. Despite its name, JSON is a language agnostic format that is most commonly used to transmit data between systems, and on occasion, store data. Programs written in Python, as well as many other programming languages, can ingest JSON formatted data, and can serialize data in memory into the JSON format. Python supports JSON through a built-in package called json. To use this feature, import the json package into the Python script or module in which you wish to serialize or deserialize your data. JSON utilizes comma delimited key value pairs contained in double quotes and separated by colons. The body of a JSON file can be delimited in curly braces { } or square braces [] (also known as “brackets” in some locales). The JSON format appears to be similar to the dictionary in Python, but the specifics of the JSON format have significant differences, so use care when working with both formats.\n\n\n\njson.dumps() function will convert a subset of Python objects into a json string. Not all objects are convertible and you may need to create a dictionary of data you wish to expose before serializing to JSON.\n\n\n\nSyntax: \n\njson.dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)\n\nParameters: \n\nobj: Serialize obj as a JSON formatted stream \n\nskipkeys: If skipkeys is True (default: False), then dict keys that are not of a basic type (str, int, float, bool, None) will be skipped instead of raising a TypeError. \n\nensure_ascii: If ensure_ascii is True (the default), the output is guaranteed to have all incoming non-ASCII characters escaped. If ensure_ascii is False, these characters will be output as-is. \n\ncheck_circular: If check_circular is False (default: True), then the circular reference check for container types will be skipped and a circular reference will result in an OverflowError (or worse). \n\nallow_nan: If allow_nan is False (default: True), then it will be a ValueError to serialize out of range float values (nan, inf, -inf) in strict compliance of the JSON specification. If allow_nan is True, their JavaScript equivalents (NaN, Infinity, -Infinity) will be used. \n\nindent: If indent is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0, negative, or “” will only insert newlines. None (the default) selects the most compact representation. Using a positive integer indent indents that many spaces per level. If indent is a string (such as “\\t”), that string is used to indent each level. \n\nseparators: If specified, separators should be an (item_separator, key_separator) tuple. The default is (‘, ‘, ‘: ‘) if indent is None and (‘, ‘, ‘: ‘) otherwise. To get the most compact JSON representation, you should specify (‘, ‘, ‘:’) to eliminate whitespace. \n\ndefault: If specified, default should be a function that gets called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a TypeError. If not specified, TypeError is raised. \n\nsort_keys: If sort_keys is True (default: False), then the output of dictionaries will be sorted by key.\n\n\n\nExample #1: Passing the Python dictionary to json.dumps() function will return a string. \n\n\n\n\n\nExample #2: By setting the skipkeys to True(default: False) we automatically skip the keys that are not of basic type.\n\n\n\nWhat do json.dumps() do in Python?\n\nHow is json.dump() used?\n\nWhat is the difference between JSON dump() and JSON dumps()?\n\nHow to write JSON dump() to a file?\n\nWhat is the purpose of the dump() and load() methods in Python?"
    },
    {
        "link": "https://w3schools.com/python/python_json.asp",
        "document": "JSON is a syntax for storing and exchanging data.\n\nPython has a built-in package called , which can be used to work with JSON data.\n\nIf you have a JSON string, you can parse it by using the method.\n\nIf you have a Python object, you can convert it into a JSON string by using the method.\n\nYou can convert Python objects of the following types, into JSON strings:\n\nWhen you convert from Python to JSON, Python objects are converted into the JSON (JavaScript) equivalent:\n\nThe example above prints a JSON string, but it is not very easy to read, with no indentations and line breaks.\n\nThe method has parameters to make it easier to read the result:\n\nYou can also define the separators, default value is (\", \", \": \"), which means using a comma and a space to separate each object, and a colon and a space to separate keys from values:\n\nThe method has parameters to order the keys in the result:\n\nUse the parameter to specify if the result should be sorted or not: Try it Yourself »"
    }
]