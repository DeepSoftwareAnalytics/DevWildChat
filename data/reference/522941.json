[
    {
        "link": "https://geeksforgeeks.org/scanf-in-c",
        "document": "In C, scanf is a function that stands for Scan Formatted String. It is the most used function to read data from stdin (standard input stream i.e. usually keyboard) and stores the result into the given arguments. It can accept character, string, and numeric data from the user using standard input. It also uses format specifiers like printf.\n\nExplanation: In this example, scanf(“%d”, &n) reads an integer from the keyboard and stores it in the integer variable n. The %d format specifier indicates that an integer is expected, and &n provides the memory address of n so that scanf can store the input value there.\n\nThe syntax of scanf() in C is similar to the syntax of printf().\n• format: It is the format string that contains the format specifiers(s).\n• address_of_args: Address of the variables where we want to store the input.\n\nWe use & operator to find the address of the variables by appending it before the variable name. If you’re interested in learning more about input handling and integrating it into complex data structures, the C Programming Course Online with Data Structures covers practical applications of input functions in C.\n\nTo know more about format specifiers, refer to this article – Format Specifiers in C\n\nThe scanf in C returns three types of values:\n• >0: The number of values converted and assigned successfully.\n• 0: No value was assigned.\n• <0: Read error encountered or end-of-file (EOF) reached before any assignment was made.\n\nThe below examples demonstrate the use of scanf for different types of input:\n\nExplanation: The scanf(“%f”, &f) statement reads a floating-point number from user input and stores it in the variable f. The %f format specifier ensures the correct interpretation of the input, and &f passes the memory address of f to store the value.\n\nTake Two Integers as Input\n\nExplanation: scanf(“%d %d”, &a, &b) read two integers from the standard input. The space in the format string %d %d tells scanf to expect whitespace (spaces, tabs, or newlines/enters) between the two numbers. When you press Enter after typing the first number, it’s interpreted as whitespace, and scanf proceeds to read the second integer. The values are then stored in the integer variables a and b, respectively.\n\nExplanation: The scanf(“%s”, name) function reads a single input until the first space, so when “Abhishek Sharma” is entered, only “Abhishek” will be stored in name. Also, we don’t need to use the &operator for the address of name.\n\nIn C, scanf() provides a feature called scanset characters, which allows you to read custom pattern of input. For example, reading only specific characters, reading text with whitespaces, etc.\n• set: A sequence of characters that defines the pattern. This can include individual characters, ranges of characters (e.g., a-z for lowercase letters), or negated sets (e.g., [^0-9] to exclude digits).\n\nExplanation: The scanf(“%[^\n\n]s”, name) function reads an entire line, including spaces, until a newline (\n\n) is encountered. This allows storing full names like “Abhishek Sharma” in the name array. The program then prints the entered name using printf()."
    },
    {
        "link": "https://documentation.help/C-Cpp-Reference/scanf.html",
        "document": "The scanf() function reads input from stdin, according to the given format, and stores the data in the other arguments. It works a lot like printf(). The format string consists of control characters, whitespace characters, and non-whitespace characters. The control characters are preceded by a % sign, and are as follows:\n\nscanf() reads the input, matching the characters from format. When a control character is read, it puts the value in the next variable. Whitespace (tabs, spaces, etc) are skipped. Non-whitespace characters are matched to the input, then discarded. If a number comes between the % sign and the control character, then only that many characters will be converted into the variable. If scanf() encounters a set of characters, denoted by the %[] control character, then any characters found within the brackets are read into the variable. The return value of scanf() is the number of variables that were successfully assigned values, or EOF if there is an error.\n\nThis code snippet uses scanf() to read an int, float, and a double from the user. Note that the variable arguments to scanf() are passed in by address, as denoted by the ampersand (&) preceding each variable: int i; float f; double d; printf( \"Enter an integer: \" ); scanf( \"%d\", &i ); printf( \"Enter a float: \" ); scanf( \"%f\", &f ); printf( \"Enter a double: \" ); scanf( \"%lf\", &d ); printf( \"You entered %d, %f, and %f\n\n\", i, f, d );"
    },
    {
        "link": "https://w3schools.com/c/c_user_input.php",
        "document": "You have already learned that is used to output values in C.\n\nTo get user input, you can use the function:\n\n// Create an integer variable that will store the number we get from the user\n\nint myNum;\n\n\n\n// Ask the user to type a number\n\nprintf(\"Type a number: \n\n\");\n\n\n\n// Get and save the number the user types\n\nscanf(\"%d\", &myNum);\n\n \n\n// Output the number the user typed\n\nprintf(\"Your number is: %d\", myNum);\n\n Run example »\n\nThe function takes two arguments: the format specifier of the variable ( in the example above) and the reference operator ( ), which stores the memory address of the variable. Tip: You will learn more about memory addresses and functions in the next chapter.\n\nThe function also allow multiple inputs (an integer and a character in the following example):\n\n// Create an int and a char variable\n\nint myNum;\n\nchar myChar;\n\n\n\n // Ask the user to type a number AND a character\n\nprintf(\"Type a number AND a character and press enter: \n\n\"); \n\n\n\n// Get and save the number AND character the user types\n\nscanf(\"%d %c\", &myNum, &myChar);\n\n\n\n// Print the number\n\nprintf(\"Your number is: %d\n\n\", myNum);\n\n\n\n// Print the character\n\nprintf(\"Your character is: %c\n\n\", myChar);\n\n Run example »\n\nYou can also get a string entered by the user:\n\nNote: When working with strings in , you must specify the size of the string/array (we used a very high number, 30 in our example, but atleast then we are certain it will store enough characters for the first name), and you don't have to use the reference operator ( ).\n\nHowever, the function has some limitations: it considers space (whitespace, tabs, etc) as a terminating character, which means that it can only display a single word (even if you type many words). For example:\n\nFrom the example above, you would expect the program to print \"John Doe\", but it only prints \"John\".\n\nThat's why, when working with strings, we often use the function to read a line of text. Note that you must include the following arguments: the name of the string variable, (string_name), and :"
    },
    {
        "link": "https://freecodecamp.org/news/using-scanf-in-c",
        "document": "The function is a commonly used input function in the C programming language. It allows you to read input from the user or from a file and store that input in variables of different data types.\n\nInput is an essential part of most programs, and the function provides an easy way to read input in a variety of formats. But it's important to use carefully and to always validate user input to prevent security vulnerabilities and unexpected program behavior.\n\nIn this article, we'll take a closer look at the function and how to use it effectively in C programming.\n\nWhat you will learn\n\nHere are some things that you will learn:\n• What is and what it's used for\n• How to use to read input from the user or from a file\n• The syntax of the function and how to use conversion specifiers to read input\n• How to store input in variables using pointers\n• The importance of input validation and error checking to prevent unexpected program behavior and security vulnerabilities\n\nThe basic syntax of the function is as follows:\n\nThe function returns the number of items successfully read, or if an error occurs or the end of the input stream is reached.\n• : A string that specifies the format of the input to be read. This string can contain conversion specifiers that tell what type of input to expect and how to read it. See the next section for more details on conversion specifiers.\n• : A variable-length argument list that contains the memory addresses of variables where the input values will be stored. These memory addresses must be passed as pointers.\n\nHow to Use Conversion Specifiers to Read Input\n\nThe function takes a format string as its first argument, which specifies the format and data types of the input that will be read.\n\nThe format string can include conversion specifiers, which begin with the percent sign ( ) and are followed by one or more characters that specify the type of data to be read.\n\nThe most common conversion specifiers are:\n\nAfter the format string, the function takes a variable number of arguments, each of which is a pointer to the variable where the input value will be stored. The number and type of arguments must match the conversion specifiers in the format string.\n\nFor example, the following code reads an integer value and a floating-point value from the user, and stores them in the variables and , respectively:\n\nBelow is the expected output:\n\nIn this example, the format string tells to read an integer value followed by a floating-point value, separated by a space. The operator is used to pass the address of the and variables to , so that the input values can be stored in those variables.\n\nIn the C programming language, \"conversion specifiers\" and \"type specifiers\" are related concepts, but they have different meanings and purposes.\n\nA \"type specifier\" is a keyword that specifies the data type of a variable or expression. For example, the , , and keywords are type specifiers that indicate integer, floating-point, and character data types, respectively. We use type specifiers to declare variables and functions and to define the return type of a function.\n\nOn the other hand, a \"conversion specifier\" is a symbol we use in format strings to specify the format of input and output operations. Conversion specifiers start with the character, followed by a single letter or sequence of characters that indicates the type of data to be read or written. For example, the conversion specifier reads integer values, while the specifier reads floating-point values.\n\nIn summary, type specifiers are used to specify the data type of variables and expressions, while conversion specifiers are used to specify the format of input and output operations. Both concepts are important in C programming and are used in different contexts.\n\nHow to Store Input in Variables Using Pointers\n\nTo store input in a variable using , you need to pass the memory address of the variable as an argument to the function using the (address of) operator. This is because expects pointers as arguments to store input values directly in memory locations.\n\nHere's an example of using to read an integer value from the user and store it in a variable called :\n\nIn this example, the conversion specifier tells to expect an integer input value. The memory address of the variable is passed to using the operator, which returns a pointer to the memory location of .\n\nIf you need to read multiple input values, you can pass multiple pointers as arguments to in the order that they appear in the format string. For example, to read two integer values and store them in variables and , you could do:\n\nNote that it's important to make sure that the data types of the input values match the data types of the variables that you're storing them in. If the types don't match, the input value may be interpreted incorrectly, leading to unexpected program behavior.\n\nAdditionally, it's a good practice to validate input values and handle input errors, as discussed in the next section.\n\nInput validation and error checking are important concepts in programming, especially when dealing with user input or input from external sources. In C, you can use various techniques to validate input and handle input errors.\n\nOne common technique is to use the return value of to check if the input operation was successful or if an error occurred. The function returns the number of input values that were successfully read and stored, or if an error occurred or the end of the input stream was reached.\n\nBy checking the return value, you can determine if the input operation was successful or if an error occurred.\n\nFor example, if you're using to read an integer value from the user and store it in a variable called , you could use the following code to validate the input:\n\nIn this example, the function is used to read an integer value and store it in the variable. The return value of is compared to to check if one input value was successfully read and stored. If the return value is not , an error message is printed to the console and the program exits with an error code.\n\nBelow is the expected output:\n\nYou can use similar techniques to validate input of other types, such as floating-point numbers or strings. For example, to validate the input of a floating-point value, you could use the conversion specifier and check if the return value of is equal to .\n\nIn addition to checking the return value of , you can also use other techniques to validate input and handle errors, such as using to read input as a string and then parsing the string to extract the desired values, or using regular expressions to validate input patterns.\n\nIt's important to carefully validate input and handle errors to prevent unexpected program behavior or security vulnerabilities.\n\nand the Standard C Library\n\nThe function is included in the standard C library, which provides a collection of pre-defined functions that you can use in C programs. The header file is also part of the standard C library and contains declarations for input and output functions like , , and others.\n\nTo use the function in a C program, you need to include the header file at the beginning of your program using the preprocessor directive. This allows you to access the functions and data types defined in the standard C library, including .\n\nHere's an example of how to use in a C program:\n\nIn this example, we first include the header file using . We then define a variable of type . We use the function to prompt the user to enter an integer, and the function reads the user's input and stores it in the variable. Finally, we use another statement to print the value of .\n\nNote that we use the operator before the variable name in the function to pass the memory address of the variable to the function. This allows the function to store the user's input directly in the variable.\n\nThe function in C is a powerful tool for reading input from the user or from a file and storing it in variables. By specifying conversion specifiers in the format string, you can read input values of different types, such as integers, floating-point numbers, and strings.\n\nWhen using , it's important to be aware of potential input errors and to validate input values to prevent unexpected program behavior or security vulnerabilities.\n\nYou can use the return value of to check if the input operation was successful. You can also use various techniques to validate input and handle errors, such as checking input ranges, using regular expressions, or converting input values to strings and parsing them.\n\nOverall, is a versatile function that you can use in a variety of programming scenarios. By understanding how to use effectively and how to validate and handle input errors, you can build robust and reliable C programs that interact with users and external data sources in a safe and secure manner."
    },
    {
        "link": "https://medium.com/@future_fanatic/mastering-input-with-scanf-in-c-a-comprehensive-guide-e7d955ac5a48",
        "document": "In the world of C programming, handling user input is a fundamental skill. One of the key functions used for this purpose is scanf(). In this guide, we’ll delve deep into the scanf() function, exploring its syntax, usage, common pitfalls, and best practices. By the end of this article, you’ll be equipped with the knowledge and confidence to handle user input like a pro in your C programs.\n• Best Practices for Using\n\nThe scanf() function in C is used to read input from the standard input stream (usually the keyboard) and store it in variables. It allows programmers to interact with users by prompting them for input and capturing their responses.\n\nThe syntax of scanf() resembles that of printf(), with the addition of format specifiers (%d, %f, %c, %s, etc.) to indicate the type of input expected. For example:\n\nThis line reads an integer from the standard input and stores it in the variable ‘num’.\n\nThe scanf() function in C is a versatile tool for reading different data types from the standard input (usually the keyboard). It allows programmers to prompt users for input and store that input in variables of various data types. Here’s a closer look at how scanf() can be used to read different types of data:\n\nReading Integers: To read an integer using scanf(), you need to use the %d format specifier. For example:\n\nIn this example, the user is prompted to enter an integer, which is then stored in the variable num.\n\nReading Floating-Point Numbers: To read a floating-point number (such as a decimal) using scanf(), you can use the %f format specifier. For example:\n\nHere, the user is prompted to enter a floating-point number representing the price, which is stored in the variable price.\n\nReading Characters: To read a single character using scanf(), you can use the %c format specifier. For example:\n\nThis code prompts the user to enter a single character, which is then stored in the variable ch.\n\nReading Strings: To read a string (a sequence of characters) using scanf(), you can use the %s format specifier. For example:\n\nHere, the user is prompted to enter their name, which is stored in the character array name.\n\nIt’s important to note that scanf() can behave unpredictably if the input doesn’t match the specified format, leading to potential buffer overflows or other issues. Therefore, it’s essential to handle input validation and error checking to ensure robust program behavior.\n\nWhile scanf() offers flexibility in reading user input, it also poses a risk of security vulnerabilities if not used carefully. One common challenge is handling unexpected input from users, which can lead to buffer overflow and other security issues. To mitigate these risks, it’s crucial to validate and sanitize user input before processing it further. This involves checking the input against expected formats, ensuring that it falls within acceptable ranges, and sanitizing it to remove any potentially harmful characters or sequences. By implementing robust input validation and sanitization mechanisms, developers can enhance the security and reliability of their C programs, safeguarding against potential exploits and vulnerabilities.\n• Forgetting to include the ‘&’ operator before variable names in scanf() calls\n• Neglecting to check the return value of scanf() for errors\n• Providing incorrect format specifiers that do not match the input data type\n• Failing to handle newline characters left in the input buffer, leading to unexpected behavior\n• Using scanf() for input validation without considering its limitations and potential security risks\n\nBest Practices for Using scanf():\n• Always check the return value of scanf() to detect errors or unexpected input\n• Use appropriate format specifiers (%d for integers, %f for floating-point numbers, %c for characters, %s for strings) corresponding to the data type being read\n• Validate input data to ensure it meets expected criteria, such as range checking for integers or length checking for strings\n• Clear the input buffer after reading data to prevent leftover newline characters from interfering with subsequent input operations\n\nscanf() is a powerful function in C for reading user input, but it requires careful handling to avoid common pitfalls and security issues. By understanding its syntax, usage, and best practices, you can harness the full potential of scanf() and create robust, user-friendly C programs.\n\nReady to take your C programming skills to the next level? Explore our recommended books on C programming and enhance your knowledge today! Check here to browse our curated selection of C programming books on Amazon.\n\nAffiliate Buy Links : if you from this links I will earn commission, no extra cost to pay.\n\nC Programming Absolute Beginner’s Guide, 3e : https://amzn.to/3uOWPUi\n\nThe C Programming Language 2e : https://amzn.to/3URU4wb\n\nC: THE COMPLETE REFERENCE : https://amzn.to/48y6z2X\n\nHead First C: A Brain-Friendly Guide : https://amzn.to/42Tf2Nd\n\nC Programming in easy steps, 5th Edition : https://amzn.to/3uRkhjQ"
    },
    {
        "link": "https://geeksforgeeks.org/check-two-given-circles-touch-intersect",
        "document": "Check if two given circles touch or intersect each other\n\nThere are two circles A and B with their centres C1(x1, y1) and C2(x2, y2) and radius R1 and R2. The task is to check both circles A and B touch each other or not.\n\nApproach:\n\nDistance between centres C1 and C2 is calculated as\n\nThere are three conditions that arise.\n• C1C2 == R1 + R2: Circle A and B are in touch with each other.\n• Otherwise, Circle A and B do not overlap\n\nBelow is the implementation of the above approach:\n\n// C++ program to check if two // circles touch each other or not. \"Circle intersect to each other\" \"Circle touch to each other\" \"Circle not touch to each other\" // Java program to check if two // circles touch each other or not. // This article is contributed by vt_m. # Python program to check if two # circles touch each other or not. # Function to check if two circles touch each other \"Circle intersect to each other\" \"Circle touch to each other\" \"Circle not touch to each other\" # This code is contributed by Aman Kumar // C# program to check if two // circles touch each other or not. // This article is contributed by Pushpesh Raj. // JavaScript program to check if two circles touch each other or not. \"Circle intersect to each other\" \"Circle touch to each other\" \"Circle not touch to each other\" // this code is contributed by devendra\n\n\n\nThis article is contributed by Aarti_Rathi and Dharmendra kumar."
    },
    {
        "link": "https://geeksforgeeks.org/area-of-intersection-of-two-circles",
        "document": "Given the coordinates of the centers of two circles (X1, Y1) and (X2, Y2) as well as the radii of the respective circles R1 and R2. Find the floor of the area of their intersection.\n\nNote: Use the value of Pi as 3.14\n\nApproach: Follow the steps to solve this problem:\n• Firstly calculate the euclidean distance between the two points and store it (say d).\n• If, d > R1 + R2, then the circle never insects, so, return 0.\n• Else if, d ? (R1 – R2) and R1 ? R2, then circle with radius R2 is inside the circle with radius R1, so, return floor(Pi * R2 * R2).\n• Else if, d ? (R2 – R1) and R2 ? R1, then circle with radius R1 is inside the circle with radius R2, so, return floor(Pi * R1 * R1).\n• Else, find:\n• Return, the value of floor(a1+a2).\n\nBelow is the implementation of the above approach."
    },
    {
        "link": "https://stackoverflow.com/questions/24704091/which-is-the-more-efficient-method-for-calculating-the-intersections-of-two-circ",
        "document": "I'm trying to find the fastest and easiest way in a C# program to calculate the intersections of two circles. From what I can tell there are two possible methods, and you'll have to forgive me for not knowing the official names for them.\n\nWe're assuming you know the center points for both circles and their exact radii, from which you can calculate the distance between them, so all that is missing are the point(s) of intersection. This is taking place on a standard x-y plot.\n\nThe first is a kind of substitution method like the one described here where you combine the two circle formulas and isolate either or , then sub it back in to an original formula to end up with a quadratic equation that can be solved for two (or possibly one or none) coordinates for an axis, which then lets you find the corresponding coordinates on the other axis.\n\nThe second I have seen a reference to is using a Law of Cosines method to determine the angles, which would then let you plot a line for each side on the grid, and put in your radius to find the actual intersection point.\n\nI have written out the steps for the first method, and it seems rather lengthy. The second one is going to take some research/learning to write out but sounds simpler. What I've never done is translate processes like this into code, so I don't know ultimately which one will be the easiest for that application. Does anyone have advice on that? Or am I perhaps going about the the complete wrong way? Is there a library already out there that I can use for it instead of reinventing the wheel?\n\nSome context: I'm worried mainly about the cost to the CPU to do these calculations. I plan on the application doing a heck of a lot of them at once, repeatedly, hence why I want the simplest way to accomplish it."
    },
    {
        "link": "https://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection",
        "document": "How can I tell whether a circle and a rectangle intersect in 2D Euclidean space? (i.e. classic 2D geometry)\n\nHere is how I would do it: bool intersects(CircleType circle, RectType rect) { circleDistance.x = abs(circle.x - rect.x); circleDistance.y = abs(circle.y - rect.y); if (circleDistance.x > (rect.width/2 + circle.r)) { return false; } if (circleDistance.y > (rect.height/2 + circle.r)) { return false; } if (circleDistance.x <= (rect.width/2)) { return true; } if (circleDistance.y <= (rect.height/2)) { return true; } cornerDistance_sq = (circleDistance.x - rect.width/2)^2 + (circleDistance.y - rect.height/2)^2; return (cornerDistance_sq <= (circle.r^2)); }\n• None The first pair of lines calculate the absolute values of the x and y difference between the center of the circle and the center of the rectangle. This collapses the four quadrants down into one, so that the calculations do not have to be done four times. The image shows the area in which the center of the circle must now lie. Note that only the single quadrant is shown. The rectangle is the grey area, and the red border outlines the critical area which is exactly one radius away from the edges of the rectangle. The center of the circle has to be within this red border for the intersection to occur.\n• None The second pair of lines eliminate the easy cases where the circle is far enough away from the rectangle (in either direction) that no intersection is possible. This corresponds to the green area in the image.\n• None The third pair of lines handle the easy cases where the circle is close enough to the rectangle (in either direction) that an intersection is guaranteed. This corresponds to the orange and grey sections in the image. Note that this step must be done after step 2 for the logic to make sense.\n• None The remaining lines calculate the difficult case where the circle may intersect the corner of the rectangle. To solve, compute the distance from the center of the circle and the corner, and then verify that the distance is not more than the radius of the circle. This calculation returns false for all circles whose center is within the red shaded area and returns true for all circles whose center is within the white shaded area.\n\nThere are only two cases when the circle intersects with the rectangle:\n• Either the circle's centre lies inside the rectangle, or\n• One of the edges of the rectangle has a point in the circle. Note that this does not require the rectangle to be axis-parallel. With that insight, something like the following will work, where the circle has centre and radius , and the rectangle has vertices , , , in that order (not complete code): def intersect(Circle(P, R), Rectangle(A, B, C, D)): S = Circle(P, R) return (pointInRectangle(P, Rectangle(A, B, C, D)) or intersectCircle(S, (A, B)) or intersectCircle(S, (B, C)) or intersectCircle(S, (C, D)) or intersectCircle(S, (D, A))) If you're writing any geometry you probably have the above functions in your library already. Otherwise, can be implemented in several ways; any of the general point in polygon methods will work, but for a rectangle you can just check whether this works: And is easy to implement too: one way would be to check if the foot of the perpendicular from to the line is close enough and between the endpoints, and check the endpoints otherwise. The cool thing is that the same idea works not just for rectangles but for the intersection of a circle with any simple polygon — doesn't even have to be convex!\n\nyour sphere and rect intersect IIF \n\n the distance between the circle-center and one vertex of your rect is smaller than the radius of your sphere \n\n OR \n\n the distance between the circle-center and one edge of your rect is smaller than the radius of your sphere ([point-line distance ]) \n\n OR \n\n the circle center is inside the rect \n\n\n\n point-point distance: L1 = [x1,y1],L2 = [x2,y2] (two points of your line, ie the vertex points) P1 = [px,py] some point Distance d = abs( (x2-x1)(y1-py)-(x1-px)(y2-y1) ) / Distance(L1,L2) \n\n circle center inside rect: \n\n take an seperating axis aproach: if there exists a projection onto a line that seperates the rectangle from the point, they do not intersect you project the point on lines parallel to the sides of your rect and can then easily determine if they intersect. if they intersect not on all 4 projections, they (the point and the rectangle) can not intersect. you just need the inner-product ( x= [x1,x2] , y = [y1,y2] , x*y = x1*y1 + x2*y2 ) your test would look like that: //rectangle edges: TL (top left), TR (top right), BL (bottom left), BR (bottom right) //point to test: POI seperated = false for egde in { {TL,TR}, {BL,BR}, {TL,BL},{TR-BR} }: // the edges D = edge[0] - edge[1] innerProd = D * POI Interval_min = min(D*edge[0],D*edge[1]) Interval_max = max(D*edge[0],D*edge[1]) if not ( Interval_min ≤ innerProd ≤ Interval_max ) seperated = true break // end for loop end if end for if (seperated is true) return \"no intersection\" else return \"intersection\" end if this does not assume an axis-aligned rectangle and is easily extendable for testing intersections between convex sets.\n\nTo visualise, take your keyboard's numpad. If the key '5' represents your rectangle, then all the keys 1-9 represent the 9 quadrants of space divided by the lines that make up your rectangle (with 5 being the inside.) 1) If the circle's center is in quadrant 5 (i.e. inside the rectangle) then the two shapes intersect. With that out of the way, there are two possible cases: a) The circle intersects with two or more neighboring edges of the rectangle. b) The circle intersects with one edge of the rectangle. The first case is simple. If the circle intersects with two neighboring edges of the rectangle, it must contain the corner connecting those two edges. (That, or its center lies in quadrant 5, which we have already covered. Also note that the case where the circle intersects with only two opposing edges of the rectangle is covered as well.) 2) If any of the corners A, B, C, D of the rectangle lie inside the circle, then the two shapes intersect. The second case is trickier. We should make note of that it may only happen when the circle's center lies in one of the quadrants 2, 4, 6 or 8. (In fact, if the center is on any of the quadrants 1, 3, 7, 8, the corresponding corner will be the closest point to it.) Now we have the case that the circle's center is in one of the 'edge' quadrants, and it only intersects with the corresponding edge. Then, the point on the edge that is closest to the circle's center, must lie inside the circle. 3) For each line AB, BC, CD, DA, construct perpendicular lines p(AB,P), p(BC,P), p(CD,P), p(DA,P) through the circle's center P. For each perpendicular line, if the intersection with the original edge lies inside the circle, then the two shapes intersect. There is a shortcut for this last step. If the circle's center is in quadrant 8 and the edge AB is the top edge, the point of intersection will have the y-coordinate of A and B, and the x-coordinate of center P. You can construct the four line intersections and check if they lie on their corresponding edges, or find out which quadrant P is in and check the corresponding intersection. Both should simplify to the same boolean equation. Be wary of that the step 2 above did not rule out P being in one of the 'corner' quadrants; it just looked for an intersection. Edit: As it turns out, I have overlooked the simple fact that #2 is a subcase of #3 above. After all, corners too are points on the edges. See @ShreevatsaR's answer below for a great explanation. And in the meanwhile, forget #2 above unless you want a quick but redundant check.\n\nI developed this algorithm while making this game: https://mshwf.github.io/mates/ If the circle touches the square, then the distance between the centerline of the circle and the centerline of the square should equal . So, let's have a variable named that holds that distance. The problem was: which centerline should I consider: the horizontal or the vertical? Consider this frame: Each centerline gives different distances, and only one is a correct indication to a no-collision, but using our human intuition is a start to understand how the natural algorithm works. They are not touching, which means that the distance between the two centerlines should be greater than , which means that the natural algorithm picks the horizontal centerlines (the vertical centerlines says there's a collision!). By noticing multiple circles, you can tell: if the circle intersects with the vertical extension of the square, then we pick the vertical distance (between the horizontal centerlines), and if the circle intersects with the horizontal extension, we pick the horizontal distance: Another example, circle number 4: it intersects with the horizontal extension of the square, then we consider the horizontal distance which is equal to touching. Ok, the tough part is demystified, now we know how the algorithm will work, but how we know with which extension the circle intersects? It's easy actually: we calculate the distance between the most right and the most left (of both the circle and the square), and the same for the y-axis, the one with greater value is the axis with the extension that intersects with the circle (if it's greater than then the circle is outside the two square extensions, like circle #7). The code looks like: right = Math.max(square.x+square.side, circle.x+circle.rad); left = Math.min(square.x, circle.x-circle.rad); bottom = Math.max(square.y+square.side, circle.y+circle.rad); top = Math.min(square.y, circle.y-circle.rad); if (right - left > down - top) { //compare with horizontal distance } else { //compare with vertical distance } /*These equations assume that the reference point of the square is at its top left corner, and the reference point of the circle is at its center*/"
    },
    {
        "link": "https://cp-algorithms.com/geometry/circle-circle-intersection.html",
        "document": "You are given two circles on a 2D plane, each one described as coordinates of its center and its radius. Find the points of their intersection (possible cases: one or two points, no intersection or circles coincide).\n\nLet's reduce this problem to the circle-line intersection problem.\n\nAssume without loss of generality that the first circle is centered at the origin (if this is not true, we can move the origin to the center of the first circle and adjust the coordinates of intersection points accordingly at output time). We have a system of two equations:\n\nSubtract the first equation from the second one to get rid of the second powers of variables:\n\nThus, we've reduced the original problem to the problem of finding intersections of the first circle and a line:\n\nAnd this problem can be solved as described in the corresponding article.\n\nThe only degenerate case we need to consider separately is when the centers of the circles coincide. In this case $x_2=y_2=0$, and the line equation will be $C = r_1^2-r_2^2 = 0$. If the radii of the circles are the same, there are infinitely many intersection points, if they differ, there are no intersections."
    }
]