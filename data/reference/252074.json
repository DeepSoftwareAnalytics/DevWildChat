[
    {
        "link": "https://geeksforgeeks.org/pyqt5-qlistwidget-setting-edit-trigger-property",
        "document": "In this article we will see how we can set the edit trigger property of the QListWidget. QListWidget is a convenience class that provides a list view with a classic item-based interface for adding and removing items. QListWidget uses an internal model to manage each QListWidgetItem in the list. This property describes actions which will initiate item editing.\n\nIn order to do this we will use setEditTriggers method with the list widget object. Syntax : list_widget.setEditTriggers(et) Argument : It takes edit triggers object argument Return : It returns None\n\nBelow is the implementation"
    },
    {
        "link": "https://doc.qt.io/qtforpython-5/PySide2/QtWidgets/QListWidget.html",
        "document": "is a convenience class that provides a list view similar to the one supplied by , but with a classic item-based interface for adding and removing items. uses an internal model to manage each in the list.\n\nFor a more flexible list view widget, use the class with a standard model.\n\nList widgets are constructed in the same way as other widgets:\n\nThe of a list widget determines how many of the items in the list can be selected at the same time, and whether complex selections of items can be created. This can be set with the function.\n\nThere are two ways to add items to the list: they can be constructed with the list widget as their parent widget, or they can be constructed with no parent widget and added to the list later. If a list widget already exists when the items are constructed, the first method is easier to use:\n\nIf you need to insert a new item into the list at a particular position, then it should be constructed without a parent widget. The function should then be used to place it within the list. The list widget will take ownership of the item.\n\nFor multiple items, can be used instead. The number of items in the list is found with the function. To remove items from the list, use .\n\nThe current item in the list can be found with , and changed with . The user can also change the current item by navigating with the keyboard or clicking on a different item. When the current item changes, the signal is emitted with the new current item and the item that was previously current."
    },
    {
        "link": "https://geeksforgeeks.org/pyqt5-qlistwidget-getting-edit-trigger-property",
        "document": "In this article we will see how we can get the edit trigger property of the QListWidget. QListWidget is a convenience class that provides a list view with a classic item-based interface for adding and removing items. QListWidget uses an internal model to manage each QListWidgetItem in the list. This property describes actions which will initiate item editing, it can be set with the help of setEditTriggers method.\n\nIn order to do this we will use editTriggers method with the list widget object. Syntax : list_widget.editTriggers() Argument : It takes no argument Return : It returns edit triggers object\n\nBelow is the implementation"
    },
    {
        "link": "https://doc-snapshots.qt.io/qtforpython-5.15/PySide2/QtWidgets/QListWidget.html",
        "document": "is a convenience class that provides a list view similar to the one supplied by , but with a classic item-based interface for adding and removing items. uses an internal model to manage each in the list.\n\nFor a more flexible list view widget, use the class with a standard model.\n\nList widgets are constructed in the same way as other widgets:\n\nThe of a list widget determines how many of the items in the list can be selected at the same time, and whether complex selections of items can be created. This can be set with the function.\n\nThere are two ways to add items to the list: they can be constructed with the list widget as their parent widget, or they can be constructed with no parent widget and added to the list later. If a list widget already exists when the items are constructed, the first method is easier to use:\n\nIf you need to insert a new item into the list at a particular position, then it should be constructed without a parent widget. The function should then be used to place it within the list. The list widget will take ownership of the item.\n\nFor multiple items, can be used instead. The number of items in the list is found with the function. To remove items from the list, use .\n\nThe current item in the list can be found with , and changed with . The user can also change the current item by navigating with the keyboard or clicking on a different item. When the current item changes, the signal is emitted with the new current item and the item that was previously current."
    },
    {
        "link": "https://stackoverflow.com/questions/6249668/how-do-i-set-the-selected-item-in-a-qlistwidget",
        "document": "You could either do it like this:\n\nBut that would mean that you know that \"Weekend Plus is on second row and you need to remember that, in case you other items.\n\nOr you do it like that:\n\nAccording to your comment, I suggest using the edit triggers for item views. It allows you to add items directly by just typing what you want to add and press the return or enter key. The item you just added is selected and now appears as an item in the QListWidget.\n\nSee the docs for more information.\n\nIf you want to enter your new item somewhere else, there is a way of course, too. Let's say you have a line edit and you add the item with the name you entered there. Now you want the ListWidget where the item has been added to change to that new item. Assumed the new item is on the last position (because it has been added last) you can change the current row to the last row. (Note that also counts hidden items if you have any)"
    },
    {
        "link": "https://stackoverflow.com/questions/47962839/how-to-make-qlistwidget-items-editable",
        "document": "I am new to PyQt. I first made a dialog in Qt Designer, and implemented simple add, delete, up, down operations in a QListWidget. All my operations except edit worked a charm, so I did a lot of searching about how to make items editable, but results were not satisfactory. I was able to edit by using and , but the way it behaved was not what I wanted. I simply want the items to be editable when double-clicked or when the edit button is pressed, like in a normal gui.\n\nand my functioning code is:\n\nI am trying to make simple edit button that enables editing in currentSelection.Thats it"
    },
    {
        "link": "https://doc.qt.io/qt-6/qlistwidget.html",
        "document": "The QListWidget class provides an item-based list widget. More...\n\nThe current item in the list can be found with currentItem (), and changed with setCurrentItem (). The user can also change the current item by navigating with the keyboard or clicking on a different item. When the current item changes, the currentItemChanged () signal is emitted with the new current item and the item that was previously current.\n\nFor multiple items, insertItems () can be used instead. The number of items in the list is found with the count () function. To remove items from the list, use takeItem ().\n\nIf you need to insert a new item into the list at a particular position, then it should be constructed without a parent widget. The insertItem () function should then be used to place it within the list. The list widget will take ownership of the item.\n\nThere are two ways to add items to the list: they can be constructed with the list widget as their parent widget, or they can be constructed with no parent widget and added to the list later. If a list widget already exists when the items are constructed, the first method is easier to use:\n\nThe selectionMode () of a list widget determines how many of the items in the list can be selected at the same time, and whether complex selections of items can be created. This can be set with the setSelectionMode () function.\n\nList widgets are constructed in the same way as other widgets:\n\nFor a more flexible list view widget, use the QListView class with a standard model.\n\nQListWidget is a convenience class that provides a list view similar to the one supplied by QListView , but with a classic item-based interface for adding and removing items. QListWidget uses an internal model to manage each QListWidgetItem in the list.\n\nSee also QListWidgetItem, QListView, QTreeView, Model/View Programming, and Tab Dialog Example.\n\nThe default value is false.\n\nIf this property is true , sorting is enabled for the list; if the property is false, sorting is not enabled.\n\nThis property holds whether sorting is enabled\n\nDepending on the current selection mode, the row may also be selected.\n\nThis property holds the row of the current item.\n\nThis property holds the number of items in the list including any hidden items.\n\nConstructs an empty QListWidget with the given parent.\n\nDestroys the list widget and all its items.\n\nInserts the item at the end of the list widget.\n\nInserts an item with the text label at the end of the list widget.\n\nInserts items with the text labels at the end of the list widget.\n\nRemoves all items and selections in the view.\n\nCloses the persistent editor for the given item.\n\nSee also openPersistentEditor() and isPersistentEditorOpen().\n\nThis signal is emitted whenever the current item changes.\n\nprevious is the item that previously had the focus; current is the new current item.\n\nThis signal is emitted whenever the current item changes.\n\ncurrentRow is the row of the current item. If there is no current item, the currentRow is -1.\n\nThis signal is emitted whenever the current item changes.\n\ncurrentText is the text data in the current item. If there is no current item, the currentText is invalid.\n\nHandles data supplied by an external drag and drop operation that ended with the given action in the given index. Returns if data and action can be handled by the model; otherwise returns .\n\nStarts editing the item if it is editable.\n\nFinds items with the text that matches the string text using the given flags.\n\nReturns the QModelIndex associated with the given item.\n\nInserts the item at the position in the list given by row.\n\nInserts an item with the text label in the list widget at the position given by row.\n\nInserts items from the list of labels into the list, starting at the given row.\n\nSee also insertItem() and addItem().\n\nReturns whether a persistent editor is open for item item.\n\nSee also openPersistentEditor() and closePersistentEditor().\n\nReturns the item that occupies the given row in the list if one has been set; otherwise returns .\n\nThis signal is emitted when the item is activated. The item is activated when the user clicks or double clicks on it, depending on the system configuration. It is also activated when the user presses the activation key (on Windows and X11 this is the Return key, on Mac OS X it is Command+O).\n\nReturns a pointer to the item at the coordinates p. The coordinates are relative to the list widget's viewport().\n\nThis is an overloaded function.\n\nReturns a pointer to the item at the coordinates (x, y). The coordinates are relative to the list widget's viewport().\n\nThis signal is emitted whenever the data of item has changed.\n\nThis signal is emitted with the specified item when a mouse button is clicked on an item in the widget.\n\nSee also itemPressed() and itemDoubleClicked().\n\nThis signal is emitted with the specified item when a mouse button is double clicked on an item in the widget.\n\nSee also itemClicked() and itemPressed().\n\nThis signal is emitted when the mouse cursor enters an item. The item is the item entered. This signal is only emitted when mouseTracking is turned on, or when a mouse button is pressed while moving into an item.\n\nReturns a pointer to the QListWidgetItem associated with the given index.\n\nThis signal is emitted with the specified item when a mouse button is pressed on an item in the widget.\n\nSee also itemClicked() and itemDoubleClicked().\n\nThis signal is emitted whenever the selection changes.\n\nSee also selectedItems(), QListWidgetItem::isSelected(), and currentItemChanged().\n\nReturns the widget displayed in the given item.\n\nSee also setItemWidget() and removeItemWidget().\n\nReturns a list of pointers to the items contained in the data object. If the object was not created by a QListWidget in the same process, the list is empty.\n\nReturns an object that contains a serialized description of the specified items. The format used to describe the items is obtained from the mimeTypes() function.\n\nIf the list of items is empty, is returned instead of a serialized empty list.\n\nReturns a list of MIME types that can be used to describe a list of listwidget items.\n\nOpens an editor for the given item. The editor remains open after editing.\n\nSee also closePersistentEditor() and isPersistentEditorOpen().\n\nRemoves the widget set on the given item.\n\nTo remove an item (row) from the list entirely, either delete the item or use takeItem().\n\nSee also itemWidget() and setItemWidget().\n\nReturns the row containing the given item.\n\nScrolls the view if necessary to ensure that the item is visible.\n\nhint specifies where the item should be located after the operation.\n\nReturns a list of all selected items in the list widget.\n\nUnless the selection mode is NoSelection, the item is also selected.\n\nSet the current item to item, using the given command.\n\nSets the current row to be the given row, using the given command,\n\nSets the widget to be displayed in the given item.\n\nThis function should only be used to display static content in the place of a list widget item. If you want to display custom dynamic content or implement a custom editor widget, use QListView and subclass QStyledItemDelegate instead.\n\nSee also itemWidget(), removeItemWidget(), and Delegate Classes.\n\nSorts all the items in the list widget according to the specified order.\n\nReturns the drop actions supported by this view.\n\nRemoves and returns the item from the given row in the list widget; otherwise returns .\n\nItems removed from a list widget will not be managed by Qt, and will need to be deleted manually.\n\nSee also insertItem() and addItem().\n\nReturns the rectangle on the viewport occupied by the item at item."
    },
    {
        "link": "https://doc-snapshots.qt.io/qtforpython-5.15/PySide2/QtWidgets/QListWidget.html",
        "document": "is a convenience class that provides a list view similar to the one supplied by , but with a classic item-based interface for adding and removing items. uses an internal model to manage each in the list.\n\nFor a more flexible list view widget, use the class with a standard model.\n\nList widgets are constructed in the same way as other widgets:\n\nThe of a list widget determines how many of the items in the list can be selected at the same time, and whether complex selections of items can be created. This can be set with the function.\n\nThere are two ways to add items to the list: they can be constructed with the list widget as their parent widget, or they can be constructed with no parent widget and added to the list later. If a list widget already exists when the items are constructed, the first method is easier to use:\n\nIf you need to insert a new item into the list at a particular position, then it should be constructed without a parent widget. The function should then be used to place it within the list. The list widget will take ownership of the item.\n\nFor multiple items, can be used instead. The number of items in the list is found with the function. To remove items from the list, use .\n\nThe current item in the list can be found with , and changed with . The user can also change the current item by navigating with the keyboard or clicking on a different item. When the current item changes, the signal is emitted with the new current item and the item that was previously current."
    },
    {
        "link": "https://qtcentre.org/threads/16255-How-to-make-QListWidget-items-editable",
        "document": "Now, i have to check whether the data entered by the user in the list box item is a number or not. If it is not a number, i have to revert it to the original contents. Other option is to allow the user to enter only numeric values... if you have any idea about that, then please post...i think Qt has a built-in class for validating the input."
    },
    {
        "link": "https://stackoverflow.com/questions/50549274/setting-flags-to-make-an-item-unselectable-and-later-selectable-again",
        "document": "I am learning PySide and I was confused how to set the flag for a QListWidget item back to selectable after first setting it to unselectable. I know I can:\n\nI am a bit unsure why the flag is named, \"ItemIsSelelectable\" when it seems to make the item unselectable. But I wanted to set the item back to selectable after setting this flag."
    }
]