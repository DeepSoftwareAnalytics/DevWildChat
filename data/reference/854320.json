[
    {
        "link": "https://joshcollinsworth.com/blog/great-transitions",
        "document": "Ten tips for better CSS transitions and animations\n\nThere are certain things you just know when you experience them, even if you don’t know where the intuition comes from, or can’t quite put into words what it is you recognize, exactly.\n\nYou might not know anything about interiors, but you feel it when you’re in a well-designed space.\n\nSimilarly, you can likely distinguish a good app from a bad app, even if you can’t explain what makes one feel better than the other.\n\nIn just that same way: users may not realize what it is about the transitions or animations on our websites and apps, but they can keenly spot the difference between good and bad. They intuitively know when an app’s movement feels good, and when the impression is instead generic or unpolished—even if they can’t explain how or why.\n\nSo to get a better understanding of what’s giving off those vibes—and how to sidestep the bad ones when building your own UIs—I’ve assembled this collection of things I’ve learned about crafting transitions and animations on the web over the last decade or so.\n\n1. Make it shorter than you think it should be\n\nI get it; if you just poured your time and effort into creating a great transition, you want to enjoy it. If you’re like me (and most other developers), you might even just sit there admiring your fanciful animation, watching it transition back and forth in delight. But here’s the thing:\n\nYour users aren’t as enamored—and therefore, not as patient—as you are. They came here to get something done, and they aren’t interested in waiting longer than they need to, regardless of how cool it may be.\n\nMy advice is: try to make your transitions as quick as possible, without being so short that a user might miss them. As a rule of thumb, I find that most single transitions work best somewhere in the 150–400 millisecond range (0.15 to 0.4 seconds). If you have back-to-back transitions—as one element moves out then another moves in afterwards, for example—you can double that, and add a little time between them, too. (You wouldn’t want the whiplash of two separate animations rushing by.)\n\nThat said, however: there are always exceptions, and the bigger the change is on the page, the more noticeable the transition should probably be. There’s a big difference between, say, a nice little accent animation for the number of items in your cart updating, and an entire page transitioning out. Don’t let big changes go by too fast.\n\nOne final point worth noting: an animation might not always feel as long as it actually is. A transition with a very slow ease-in might seem like it doesn’t start right away; conversely, a transition with a long tail might seem finished before it technically is. Keep that in mind. Perception is reality, so how the change feels is more important than what the duration technically is in the code.\n\n2. Match the curve to the action\n\nAdmittedly, this is easier said than done. You might be saying “ok, great, but how do I actually know which kind of cubic bézier curve to use in any given situation?”\n\nThe unsatisfying answer is: trial-and-error (otherwise known as experience) is the best teacher here.\n\nThat said, there’s a trick to keep in mind: as you experiment, think of movement in the real world, and compare it to the movement you’re working with in your app. Is this transition a positive confirmation, appearing and sliding into place? That might call for a speedy intro with a smooth but quick easing out, like an eager helper running up to report their task is done.\n\nHow about a failure message appearing on the screen? That might call for a slightly slower easing curve, to indicate a slight reluctance.\n\nIf it’s something important that should be known about immediately, speed and apparency would be a priority. If it’s highly critical, it might even call for a more aggressive movement (like shaking), to convey the severity and draw attention where needed.\n\nSo my best recommendation is: invest the time, and ask whether the movement conveys the appropriate feeling. Does this movement seem consistent with the brand of the product or page?\n\nIf Pixar animated a robot that did the thing your UI is doing, how would it move?\n\nIn the real world, we pretty much never see any type of movement jump immediately to max speed, or come to a full and complete stop instantaneously. So our UIs will seem a little more “real” and intuitive if we avoid curves that create that kind of movement, too.\n\nEven if it’s slight, I’d still recommend adding a bit of easing in and out to your curves. That small but detectable bit of acceleration and/or deceleration could be the difference between a transition that feels smooth, and one that seems just a little off.\n\nTake a look at this demo, where all four squares rotate a full turn, but with different easings applied:\n\nSee the Pen Untitled by Josh Collinsworth (@collinsworth) on CodePen.\n\nNotice how the first and second squares above seem to start or end much too abruptly.\n\nThe third “smooth” option works much better, as its custom curve eases in and out for a more graceful movement that accelerates and decelerates.\n\nIf you want to go even further toward animation that feels like it has real-world physics applied, the fourth “inertia” option works well, too; it “winds up” and overshoots, as though powered by a spring. (Just bear in mind: a little goes a long way with this type of animation.)\n\nOne important note on sudden starts and stops, though: it’s fine if the user can’t see it. If the object in question fades in, then a sudden start might be fine (since the beginning of the animation won’t be perceptible in the first place).\n\nThe same goes in reverse; if an element is fading to , then it may not matter exactly how the transition curve ends, since it won’t be visible at the end anyway.\n\n4. Less is more\n\nA lot of these tips could be pretty well summarized as “less is more.”\n\nIt’s easy to get carried away and make every single thing on the page animate in. (I’ve certainly been guilty of that.) But unless this is your personal website and you just feel like going a little wild, too much movement can easily do more harm than good. When it comes to transitioning things with CSS, understated is usually better than overstated.\n\nIf you’re animating from 0 to 1 (or the other way around), maybe try a smaller range, like 0.4 to 1 instead. If your element scales up to full size, try making it just slightly smaller to start, rather than so small it can’t be seen.\n\nDoes an element slide into place? I find that in most cases, movement like that should be in the range of about 5–40 pixels. Any less, and the movement may be too subtle to even notice; much more, and a smooth slide may become a clumsy crash.\n\nHere’s an example of a transition that animates , and . Compare the first pronounced, drawn-out animation (orange), next to the very same transition, but toned down and a little quicker (blue).\n\nSee the Pen Big vs subtle animation by Josh Collinsworth (@collinsworth) on CodePen.\n\nDoing too much can be worse than doing nothing at all. So find the point where the transition is just enough to be effective, and if you go further, do so cautiously.\n\nYou may already know the browser has some built-in easing curves available to use: , , , , and .\n\nHowever, while these five named timing functions are convenient and useful in some situations, they’re also very generic. (Many of the animations built into tools and libraries online fall prey to the same homogeny, even if they do offer a wider range of choices.)\n\nIf you want to get the most out of movement, you should reach beyond the most common off-the-shelf named options.\n\nAs an alternative, VS Code has an amazing autocomplete for curves with a wide range of options; start typing in a CSS context, and you should see the following dropdown appear:\n\nAll of those options are covered in my easing playground, if you’d like to take a look and play with the presets.\n\nAnother excellent option: open your browser’s dev tools and play with the easing curves in there.\n\nEvery major browser has an easing panel available as a sandbox to try different options and make adjustments. To access it, open dev tools, and click the curve icon next to a value in the CSS styles panel. (The icon varies, but the workflow is basically identical across all browsers.)\n\nHowever you choose to define your easing curves, though: I recommend you take some time to make subtle tweaks. Use , and don’t be afraid to tinker.\n\nYou can certainly get by with the presets in the browser, or in VS Code. And if you’re using over keyword values, you’re ahead of the game already.\n\nThat said, though: you probably wouldn’t limit your color palette to only predefined CSS named colors. So you might not want to limit your transitions to a small handful of preset curves, either.\n\nWhile this one won’t always come in handy, there will be times you’ll be animating more than one property at once on a single element, like when you scale an item with as its also changes.\n\nYou could apply the same curve to both properties, as shown here:\n\nDepending, that might look just fine. However, there will be situations where the same curve doesn’t really work for every property being transitioned.\n\nIn those cases, you can split the animations by property, or specify multiple s. Then, you can specify a different curve for each property, since both and can accept multiple values:\n\nHere’s a demo; as the boxes alternate in and out, notice how and follow the same acceleration for the square on the left. On the right, however, follows its own linear curve.\n\nSee the Pen Varying easings per property by Josh Collinsworth (@collinsworth) on CodePen.\n\nWhich one is better? Well, that all depends on the effect you’re going for.\n\nAgain, this one may not come up too often, but it’s very handy when it does, and also easy to forget about, so it gets a spot on the list.\n\nYou could even go so far as to change the duration of each property, but be careful things don’t go out of sync if you decide to get that wacky.\n\nWhen transitioning multiple elements (or one element with many parts), don’t underestimate the effect or can have—particularly when staggered.\n\nTake a look at this CodePen example; each line uses a new kind of animation delay to create a different effect:\n\nSee the Pen Untitled by Josh Collinsworth (@collinsworth) on CodePen.\n\nIn the pen above, the first line just transitions all at once. Fine, but not particularly sharp.\n\nIn each line following, however, varying degrees of delay are applied to each letter, to create a playful “bounce-in” effect. There’s even one that goes backwards, and one that causes the line to appear from the middle out.\n\nHowever, remember less is more. It’s very easy to overdo animations like this, especially when there are lots of elements transitioning. I made that example much more overstated than I’d generally recommend, just for demonstration purposes. It’s probably a little too busy for most UI work.\n\nThat said: there are opportunities to apply this effect on a more subtle scale. Dots in a loading screen, maybe? Perhaps when a drawer or hamburger menu is opened, each item might appear on a slight delay?\n\nAgain, keep it short and subtle. But where applied well, staggered delays can help take web transitions to another level.\n\n8. Ins go out, outs go in\n\nIf you’ve looked at various kinds of easing curves, you may have noticed they tend to come in three varieties: an ease in (starts slower), ease out (ends slower), and in-out (which is essentially both; faster in the middle and slower at the beginning and the end).\n\nOk, that was probably as confusing for you to read as it was for me to write. Let’s back up.\n\nSay you’ve got an animation where one element leaves the page as another one appears to take its place, like a page transition, or sliding between two images in a lightbox.\n\nThe user perceives this as one UI transition. But under the hood, it’s actually two transitions: the old element leaving, followed by the new element entering.\n\nSo that means if you’re transitioning an element out, and you want it to start slowly, you need an ease in.\n\nConversely, when an element is transitioning in, it should usually come to a gradual stop. That calls for an ease out.\n\nThose two would come together to create the effect of one seamless movement.\n\nNot all CSS properties can be animated or transitioned smoothly across all devices and browsers. In fact, only a handful are capable of tapping into a device’s hardware acceleration for the smoothest, highest-framerate transitions possible.\n\nProperties that can always be hardware-accelerated:\n\nProperties that can sometimes be hardware-accelerated:\n• , depending on the browser and the filter\n\nSome other non-CSS things, like canvas and WebGL, can tap into hardware acceleration, too. I won’t go into those here, however.\n\nThe tl;dr of all the above is:\n\nApplying a won’t affect layout, which minimizes recalculations and keeps the browser humming along smoothly. Handily, many of the most common animations and transitions you might use on the web can be achieved using some combination of and .\n\nBut whatever you do, avoid changing the size or placement of an element directly. If you change a property that could potentially affect the layout of the elements on the page— , , , , , etc.—you risk noticeably slowing down the page with the calculations required to make that change.\n\nIf you do need to animate such properties, be sure to test in every possible device and browser. In my experience, Safari in particular is very bad about processing animations in a performant way by default, especially on iOS. Firefox isn’t far behind, but you might not realize it if you’re only testing on high-powered devices. A lot of the world lives on budget Androids; don’t leave those out of your testing.\n\nIf you do run into issues with animations that should be smooth and performant in theory, but that seem choppy or stilted in practice (again: this is usually in Safari for me, but your mileage may vary), make use of the property.\n\nI won’t go too far into the technical details, but essentially lets you tell the browser what will change (easy enough to remember), so it can skip over other calculations. It’s a little like letting the restaurant know ahead of time that your whole party will be ordering only from a limited menu; it saves time by letting the kitchen/browser know what to focus on, and what it doesn’t need to care about.\n\nAn example: if you know for sure the only thing that’s going to change with an element is its property, and can confidently let the browser know ahead of time via , it can safely skip all the other steps it might otherwise go through to re-render that element when something changes on the page.\n\nBest-case scenario: when used with properties that don’t affect layout, this lets the browser offload the computation entirely to the GPU for the highest framerate, and smoothest performance.\n\nHowever, is not a silver bullet. In fact, if over-used, it can actually harm performance.\n\nThat’s because the browser creates a new layer (kind of like a new level) for every element that has applied to it, making things a bit more complex to composite. Used judiciously, this exchange is worth the price. Used carelessly, however, it could create even more work for the browser. From MDN:\n\nSome sources even go so far as to recommend applying prior to an animation or transition, and then removing it afterwards.\n\nSo here again, the best advice is: test thoroughly.\n\nUsers can indicate via their device settings whether they prefer reduced motion.\n\nThe reasons a user may do so are many and varied. There’s a range of medical reasons, for starters: a user may experience vertigo, nausea, or even seizures when exposed to excessive movement. Or, a user may just find too much movement distracting or obnoxious.\n\nIt doesn’t really matter why, though; it’s our job as developers to accommodate the user’s preferences regardless.\n\nWe can either do this in CSS, using a media query (like this, from MDN):\n\nOr we can use JavaScript. In this example, we’ll check for a reduced-motion preference, and add a class to the tag if found:\n\nFollowing that JavaScript example, we could then add CSS to target elements on the page to set overrides:\n\nJust note that when using JavaScript, we’d want the page to be progressively enhanced, in order to ensure there was no flash of motion before the script ran, and no excluding users who have JavaScript disabled. So a mix of both techniques is ideal.\n\nAs far as what, exactly, we should do with our CSS in these cases: remember that reduced motion doesn’t mean no motion, or even no animation at all.\n\nOne technique I often use is: change up keyframe animations to only use opacity where a reduced motion preference is detected:\n\nJust because a user prefers minimal motion doesn’t mean they don’t value transitions.\n\nPlus, there are some situations where it may be better to keep movement intact. For example, if you show a progress bar as something loads in the background—or a playback indicator on an audio or video file—that’s a key piece of information in the UI. Rather than eliminating that indicator altogether, consider finding a way to make the movement subtle and unobtrusive. Potentially, allow the user to hide the movement. Or, representing the info differently may be the way to go (a numerical percentage counter instead of an animated bar, as an example).\n\nAt the very least, users should be able to pause all continuous animations, including videos and gifs. However, ideally, we should be anticipating their needs based on their device preferences, instead of forcing them to deal with something they’ve already indicated they’d rather not see.\n\nI refer you to this piece by Val Head for Smashing Magazine, for a deeper dive on the topic of designing with reduced motion. It’s a big topic in its own right, but hopefully this tip provides some general guidance.\n\nPutting it all together\n\nThis CodePen demo helps to illustrate how putting the tips in this article all together can completely change the feel of a UI transition. Click the “run animation” button on either side to see that column’s items transition in.\n\nSee the Pen Animation tips visualized by Josh Collinsworth (@collinsworth) on CodePen.\n\nNotice how both sides have essentially the same animation; the boxes scale, move, and fade in in both cases. But the details of that transition completely transform the effect (no pun intended).\n\nOn the left (red-orange) column, the items have no delay staggering; they all fade in at once, with a huge swing in opacity, position, and scale. The transition also lasts a pretty long time, and uses the browser default curve—which isn’t bad in this case, but it’s not optimal, either.\n\nOn the right (blue) column, on the other hand, the animation is staggered so the items enter one after the other. The delay and the total transition time are both fairly minimal, and the effects are all still there, but much more subtle. Finally, the easing is a custom curve.\n\nHopefully this demo makes it easy to see what a huge difference some small tweaks can make.\n\nBest of luck crafting your own animations on the web! I hope this post has been engaging and useful, and you feel better equipped to make even stronger interactive experiences.\n\nAs always, feel free to send feedback or questions below, and thanks for reading!"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_transitions/Using_CSS_transitions",
        "document": "CSS transitions provide a way to control animation speed when changing CSS properties. Instead of having property changes take effect immediately, you can cause the changes in a property to take place over a period of time. For example, if you change the color of an element from white to black, usually the change is instantaneous. With CSS transitions enabled, changes occur at time intervals that follow an acceleration curve, all of which can be customized. Animations that involve transitioning between two states are often called implicit transitions as the states in between the start and final states are implicitly defined by the browser. CSS transitions let you decide which properties to animate (by listing them explicitly), when the animation will start (by setting a delay), how long the transition will last (by setting a duration), and how the transition will run (by defining an easing function, e.g., linearly or quick at the beginning, slow at the end).\n\nWhich CSS properties can be transitioned? The Web author can define which property has to be animated and in which way. This allows the creation of complex transitions. However, some properties are not animatable as it doesn't make sense to animate them. Note: The value is often a very complex case. The specification recommends not animating from and to . Some user agents, like those based on Gecko, implement this requirement and others, like those based on WebKit, are less strict. Using animations with may lead to unpredictable results, depending on the browser and its version, and should be avoided.\n\nCSS Transitions are controlled using the shorthand property. This is the best way to configure transitions, as it makes it easier to avoid out of sync parameters, which can be very frustrating to have to spend lots of time debugging in CSS. You can control the individual components of the transition with the following sub-properties: Specifies the name or names of the CSS properties to which transitions should be applied. Only properties listed here are animated during transitions; changes to all other properties occur instantaneously as usual. Specifies the duration over which transitions should occur. You can specify a single duration that applies to all properties during the transition, or multiple values to allow each property to transition over a different period of time. Specifies a function to define how intermediate values for properties are computed. Easing functions determine how intermediate values of the transition are calculated. Most easing functions can be specified by providing the graph of the corresponding function, as defined by four points defining a cubic bezier. You can also choose easing from Easing functions cheat sheet. Defines how long to wait between the time a property is changed and the transition actually begins. The shorthand CSS syntax is written as follows:\n\nWhen property value lists are of different lengths If any property's list of values is shorter than the others, its values are repeated to make them match. For example: This is treated as if it were: Similarly, if any property's value list is longer than that for , it's truncated, so if you have the following CSS: This gets interpreted as:\n\nA common use of CSS is to highlight items in a menu as the user hovers the mouse cursor over them. It's easy to use transitions to make the effect even more attractive. First, we set up the menu using HTML: Then we build the CSS to implement the look and feel of our menu: This CSS establishes the look of the menu, with the background and text colors both changing when the element is in its and states:\n\nThis example demonstrates how and can be transitioned. This behavior is useful for creating entry/exit animations where you want to for example remove a container from the DOM with , but have it fade out with rather than disappearing immediately. Supporting browsers transition and with a variation on the discrete animation type. This generally means that properties will flip between two values 50% through animating between the two. There is an exception, however, which is when animating to/from or . In this case, the browser will flip between the two values so that the transitioned content is shown for the entire animation duration.\n• When animating from to (or another visible value), the value will flip to at of the animation duration so it is visible throughout.\n• When animating from (or another visible value) to , the value will flip to at of the animation duration so it is visible throughout. When transitioning these properties needs to be set on the transitions. This effectively enables / transitions. When transitioning , is needed to provide a set of starting values for properties set on an element that you want to transition from when the element receives its first style update. This is needed to avoid unexpected behavior. By default, CSS transitions are not triggered on elements' first style updates when they first appear in the DOM, which includes when changes from to another state. animations do not need starting values specified in a block. This is because doesn't hide an element from the DOM like does: it just skips rendering the element's content. The HTML contains two elements with a in between that we will animate from to . <p> Click anywhere on the screen or press any key to toggle the <code><div></code> between hidden and showing. </p> <div> This is a <code><div></code> element that transitions between <code>display: none; opacity: 0</code> and <code>display: block; opacity: 1</code>. Neat, huh? </div> <p> This is another paragraph to show that <code>display: none;</code> is being applied and removed on the above <code><div> </code>. If only its <code>opacity</code> was being changed, it would always take up the space in the DOM. </p> html { height: 100vh; } div { font-size: 1.6rem; padding: 20px; border: 3px solid red; border-radius: 20px; width: 480px; display: none; opacity: 0; transition: opacity 1s, display 1s allow-discrete; /* Equivalent to transition: all 1s allow-discrete; */ } .showing { opacity: 1; display: block; } @starting-style { .showing { opacity: 0; } } Note the block used to specify the starting style for the transition, and the inclusion of the property in the transitions list, with set on it. Finally, we include a bit of JavaScript to set up event listeners to trigger the transition (via the class). The code renders as follows:"
    },
    {
        "link": "https://web.dev/articles/animations-guide",
        "document": "Stay organized with collections Save and categorize content based on your preferences.\n\nThis guide teaches you how to create high-performance CSS animations.\n\nSee Why are some animations slow? to learn the theory behind these recommendations.\n\nAll the CSS properties that this guide recommends have good cross-browser support.\n\nTo move an element, use the or keyword values of the property.\n\nFor example, to slide an item into view, use .\n\nUse to rotate elements. The following example rotates an element 360 degrees.\n\nTo resize an element, use the keyword value of the property.\n\nTo show or hide an element, use .\n\nBefore using any CSS property for animation (other than and ), determine the property's impact on the rendering pipeline. Avoid any property that triggers layout or paint unless it's absolutely necessary.\n\nAs explained in Why are some animations slow?, placing elements on a new layer lets the browser repaint them without needing to repaint the rest of the layout.\n\nBrowsers can usually make good decisions about which items should be placed on a new layer, but you can manually force layer creation with the property. As the name suggests, this property tells the browser that this element is going to be changed in some way.\n\nIn CSS, you can apply to any selector:\n\nHowever, the specification suggests that you should only do this for elements that are always about to change. For example, this might be true for a sidebar the user can slide in and out. For elements that don't change frequently, we recommend applying using JavaScript when a change is likely to happen. Make sure to give the browser enough time to perform the necessary optimizations, and remove the property when the change has stopped.\n\nIf you to force layer creation in a browser that doesn't support (most likely Internet Explorer), you can set .\n\nChrome DevTools and Firefox DevTools have lots of tools to help you figure out why your animations are slow or glitchy.\n\nAn animation that moves an element using something other than is likely to be slow. The following example compares an animation using to an animation using and .\n\nYou can test this in the following two Glitch examples, and explore performance using DevTools.\n• Record runtime performance while your animation is happening.\n\nIf you see a nonzero value for Rendering in the Summary tab, it might mean your animation is making the browser do layout work.\n\nIn Firefox DevTools the Waterfall can help you understand where the browser is spending time.\n• Start recording performance while your animation is happening.\n• Stop the recording and inspect the Waterfall tab.\n\nIf you see entries for Recalculate Style, that means the browser has to return to the start of the rendering waterfall to render the animation.\n• Watch the values while your animation runs.\n\nPay attention to the Frames label at the top of the FPS meter UI. This shows values like . A high-performance animation has a high percentage, such as , meaning that few frames are being dropped and the animation looks smooth.\n\nSome properties are more expensive for the browser to paint than others. For example, anything that involves a blur (like a shadow, for example) takse longer to paint than drawing a red box. These differences aren't always obvious in the CSS, but browser DevTools can help you to identify which areas need to be repainted, as well as other painting-related performance issues.\n• Move the pointer around the screen.\n\nIf you see the whole screen flashing, or areas highlighted that you don't think should change, investigate further.\n\nIf you need to determine whether a particular property is causing painting-related performance issues, the paint profiler in Chrome DevTools can help.\n• On the page you want to inspect, toggle the button on and move your mouse or scroll to see highlighted areas.\n\nWhere possible, restrict animations to and to keep animations on the compositing stage of the rendering path. Use DevTools to check which stage of the path is being affected by your animations.\n\nUse the paint profiler to see if any paint operations are particularly expensive. If you find anything, check whether a different CSS property gives the same look and feel with better performance.\n\nUse the property sparingly, and only if you encounter a performance issue."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animations/Using_CSS_animations",
        "document": "CSS animations make it possible to animate transitions from one CSS style configuration to another. Animations consist of two components: a style describing the CSS animation and a set of keyframes that indicate the start and end states of the animation's style, as well as possible intermediate waypoints. There are three key advantages to CSS animations over traditional script-driven animation techniques:\n• They're easy to use for basic animations; you can create them without even having to know JavaScript.\n• The animations run well, even under moderate system load. Simple animations can often perform poorly in JavaScript. The rendering engine can use frame-skipping and other techniques to keep the performance as smooth as possible.\n• Letting the browser control the animation sequence lets the browser optimize performance and efficiency by, for example, reducing the update frequency of animations running in tabs that aren't currently visible.\n\nTo create a CSS animation sequence, you style the element you want to animate with the property or its sub-properties. This lets you configure the timing, duration, and other details of how the animation sequence should progress. This does not configure the actual appearance of the animation, which is done using the at-rule as described in the Defining animation sequence using keyframes section below. The sub-properties of the property are: Specifies the composite operation to use when multiple animations affect the same property simultaneously. This property is not part of the shorthand property. Specifies the delay between an element loading and the start of an animation sequence and whether the animation should start immediately from its beginning or partway through the animation. Specifies whether an animation's first iteration should be forward or backward and whether subsequent iterations should alternate direction on each run through the sequence or reset to the start point and repeat. Specifies the length of time in which an animation completes one cycle. Specifies how an animation applies styles to its target before and after it runs. Note: In the case of animation forwards fill mode, animated properties behave as if included in a set property value. If a new stacking context was created during the animation, the target element retains the stacking context after the animation has finished. Specifies the number of times an animation should repeat. Specifies the name of the at-rule describing an animation's keyframes. Specifies whether to pause or play an animation sequence. Specifies the timeline that is used to control the progress of a CSS animation. Specifies how an animation transitions through keyframes by establishing acceleration curves.\n\nAfter you've configured the animation's timing, you need to define the appearance of the animation. This is done by establishing one or more keyframes using the at-rule. Each keyframe describes how the animated element should render at a given time during the animation sequence. Since the timing of the animation is defined in the CSS style that configures the animation, keyframes use a to indicate the time during the animation sequence at which they take place. 0% indicates the first moment of the animation sequence, while 100% indicates the final state of the animation. Because these two times are so important, they have special aliases: and . Both are optional. If / or / is not specified, the browser starts or finishes the animation using the computed values of all attributes. You can optionally include additional keyframes that describe intermediate steps between the start and end of the animation.\n\nThe CSS animation longhand properties can accept multiple values, separated by commas. This feature can be used when you want to apply multiple animations in a single rule and set different durations, iteration counts, etc., for each of the animations. Let's look at some quick examples to explain the different permutations. In this first example, there are three duration and three iteration count values. So each animation is assigned a value of duration and iteration count with the same position as the animation name. The animation is assigned a duration of and an iteration count of , and the animation is assigned a duration of and an iteration count of . In this second example, three animation names are set, but there's only one duration and iteration count. In this case, all three animations are given the same duration and iteration count. In this third example, three animations are specified, but only two durations and iteration counts. In such cases where there are not enough values in the list to assign a separate one to each animation, the value assignment cycles from the first to the last item in the available list and then cycles back to the first item. So, gets a duration of , and gets a duration of , which is the last value in the list of duration values. The duration value assignment now resets to the first value; , therefore, gets a duration of . The iteration count values (and any other property values you specify) will be assigned in the same way. If the mismatch in the number of animations and animation property values is inverted, say there are five values for three values, then the extra or unused animation property values, in this case, two values, don't apply to any animation and are ignored.\n\nThis basic example styles a element using the and transition properties so that the text slides in from off the right edge of the browser window. In this example, the style for the element specifies that the animation should take 3 seconds to execute from start to finish, using the property and that the name of the at-rule defining the keyframes for the animation sequence is . In this case, we have just two keyframes. The first occurs at (using the alias ). Here, we configure the property of the element to be at (that is, beyond the far right edge of the containing element), and the of the element to be 200% (or two times its default inline size), causing the paragraph to be twice as wide as its containing block. This causes the first frame of the animation to have the header drawn off the right edge of the browser window. The second keyframe occurs at (using the alias ). The property is set to and the of the element is set to , which is . This causes the header to finish its animation in its default state, flush against the left edge of the content area. <p> The Caterpillar and Alice looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. </p> Note: Reload page to see the animation.\n\nLet's add another keyframe to the previous example's animation. Let's say we want Alice's name to turn pink and grow and then shrink back to its original size and color as it moves from right to left. While we could change the , changing any properties that impact the box model negatively impacts performance. Instead, we wrap her name in a and then scale and assign a color to that separately. That requires adding a second animation impacting only the : The full code now looks like this: <p> The Caterpillar and <span>Alice</span> looked at each other for some time in silence: at last the Caterpillar took the hookah out of its mouth, and addressed her in a languid, sleepy voice. </p> This tells the browser the name should be normal for the first and last 25% of the animation, but turn pink while being scaled up and back again in the middle. We set the spans's property to as the properties do not affect non-replaced inline-level content. Note: Reload page to see the animation.\n\nYou can get additional control over animations — as well as useful information about them — by making use of animation events. These events, represented by the object, can be used to detect when animations start, finish, and begin a new iteration. Each event includes the time at which it occurred as well as the name of the animation that triggered the event. We'll modify the sliding text example to output some information about each animation event when it occurs, so we can get a look at how they work. We've included the same keyframe animation as the previous example. This animation will last 3 seconds, be called \"slide-in\", repeat 3 times, and travel in an alternate direction each time. In the , the scale and translation are manipulated along the x-axis to make the element slide across the screen. We'll use JavaScript code to listen for all three possible animation events. This code configures our event listeners; we call it when the document is first loaded in order to set things up. This is pretty standard code; you can get details on how it works in the documentation for . The last thing this code does is set the on the element we'll be animating to \"slide-in\"; we do this to start the animation. Why? Because the event fires as soon as the animation starts, and in our case, that happens before our code runs. So we'll start the animation ourselves by setting the class of the element to the style that gets animated after the fact. The events get delivered to the function, which is shown below. function listener(event) { const l = document.createElement(\"li\"); switch (event.type) { case \"animationstart\": l.textContent = `Started: elapsed time is ${event.elapsedTime}`; break; case \"animationend\": l.textContent = `Ended: elapsed time is ${event.elapsedTime}`; break; case \"animationiteration\": l.textContent = `New loop started at time ${event.elapsedTime}`; break; } document.getElementById(\"output\").appendChild(l); } This code, too, is very simple. It looks at the to determine which kind of animation event occurred, then adds an appropriate note to the (unordered list) we're using to log these events. The output, when all is said and done, looks something like this: Note that the times are very close to, but not exactly, those expected given the timing established when the animation was configured. Note also that after the final iteration of the animation, the event isn't sent; instead, the event is sent. Just for the sake of completeness, here's the HTML that displays the page content, including the list into which the script inserts information about the received events: <h1 id=\"watch-me\">Watch me move</h1> <p> This example shows how to use CSS animations to make <code>H1</code> elements move across the page. </p> <p> In addition, we output some text each time an animation event fires, so you can see them in action. </p> <ul id=\"output\"></ul> Note: Reload page to see the animation."
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-use-css-transitions-for-smooth-web-animations",
        "document": "CSS transitions are a powerful tool in web design, enabling developers to create smooth, engaging animations that enhance the user experience. By allowing elements to change from one style to another over a specified duration, CSS transitions can make websites feel more interactive and dynamic. In this article, we’ll explore how to use CSS transitions effectively to create smooth web animations, covering essential techniques, practical examples, and best practices.\n\nCSS transitions allow you to change property values smoothly (over a given duration) instead of abruptly. When a property changes, the transition controls the speed of the change, creating an animation-like effect.\n\nThis can apply to various properties, such as color, size, position, and opacity.\n\nTo create a CSS transition, you need to specify four key components:\n\nThe property to be transitioned, the duration of the transition, the timing function, and the delay before the transition starts. Understanding these components will help you craft smooth and effective transitions.\n\nThe basic syntax for a CSS transition looks like this:\n\nFor example, if you want to change the background color of an element over 0.5 seconds with a linear timing function and no delay, the code would look like this:\n\nOne of the simplest and most common uses of CSS transitions is changing an element’s background color. This can be used to create hover effects, active states, and other interactive elements.\n\nHere’s an example of a button that changes its background color smoothly when hovered over:\n\nYou can also use CSS transitions to change the color of text. This is useful for links, buttons, or any text element that you want to highlight on interaction.\n\nHere’s an example of a text element that changes color smoothly on hover:\n\nCSS transitions can be used to smoothly change the size of elements, such as expanding a card or button on hover. This creates a more engaging user experience by adding a layer of interactivity.\n\nHere’s an example of a card that expands smoothly when hovered over:\n\nYou can also move elements smoothly using CSS transitions, such as sliding a menu into view or creating smooth scrolling effects.\n\nHere’s an example of a menu that slides in from the left when activated:\n\nFading Elements In and Out\n\nChanging an element’s opacity is a common way to create fade-in and fade-out effects. This can be used for modals, tooltips, and other elements that appear or disappear.\n\nHere’s an example of a modal that fades in and out:\n\nAlthough is not a transitionable property, you can combine it with opacity to create smoother transitions for showing and hiding elements.\n\nHere’s an example of an element that transitions in and out of view:\n\nYou can apply multiple transitions to an element simultaneously, affecting different properties. This can create complex animations with minimal effort.\n\nHere’s an example of a card that changes size, background color, and text color smoothly on hover:\n\nChaining transitions involves creating a sequence of animations that occur one after the other. This can be achieved using delays and careful timing.\n\nHere’s an example of a box that moves to the right and then changes its background color:\n\nPseudo-elements like and can be used to add decorative transitions without additional HTML elements. This technique is useful for adding extra flair to your designs.\n\nHere’s an example of a button with a pseudo-element that creates an underline effect on hover:\n\nCSS transformations like , , , and can be smoothly animated using transitions. This allows you to create more dynamic and engaging animations.\n\nHere’s an example of a box that scales and rotates smoothly on hover:\n\nWhile transitions can enhance user experience, overusing them can be distracting. Keep transitions subtle and purposeful, ensuring they contribute positively to the overall design.\n\nTo ensure smooth animations, optimize your transitions by minimizing the number of properties being animated and using hardware-accelerated properties like and .\n\nAvoid animating properties that trigger layout recalculations, such as , , and .\n\nTransitions can behave differently across various devices and browsers. Always test your transitions on multiple platforms to ensure they perform consistently and smoothly.\n\nSome users may prefer to disable animations for various reasons, including accessibility. Consider providing an option to disable transitions or use reduced-motion media queries to accommodate these users.\n\nHere’s how you can use the media query:\n\nA navigation menu can become more engaging with smooth transitions for hover states and dropdowns. This improves user experience by providing visual feedback and making the interface feel more responsive.\n\nHere’s an example of a navigation menu with smooth hover effects:\n\nIn an image gallery, transitions can enhance the visual appeal by adding hover effects, enlarging images, or creating smooth slideshows.\n\nHere’s an example of an image gallery where images enlarge smoothly on hover:\n\nCall-to-action buttons are essential elements on any website. Smooth transitions can make them more noticeable and inviting, encouraging users to click.\n\nHere’s an example of a call-to-action button with a smooth hover effect:\n\nCSS transitions can significantly improve the user experience of forms. By adding smooth animations to focus states, validation messages, and interactive elements, you can make forms more user-friendly and engaging.\n\nHere’s an example of a form input field that changes its border color and box shadow smoothly when focused:\n\nInteractive cards that change appearance on hover can make a webpage more dynamic and visually appealing. These cards can be used for showcasing products, blog posts, or any content that benefits from additional visual emphasis.\n\nHere’s an example of a card that lifts slightly and adds a shadow effect on hover:\n\nModal windows can benefit from transitions to appear and disappear smoothly, creating a more polished user experience. This makes interactions feel more natural and less jarring.\n\nHere’s an example of a modal window that fades in and scales up when activated:\n\nWhile CSS transitions handle simple animations well, CSS keyframes can be used for more complex animations. Keyframes allow you to define multiple stages of an animation, giving you more control over the sequence of changes.\n\nHere’s an example of a box that changes color and rotates using keyframes:\n\nWhile CSS transitions are powerful, combining them with JavaScript allows for even more dynamic interactions. JavaScript can change styles and trigger transitions based on user interactions, such as clicking a button or scrolling.\n\nHere’s an example of a box that slides in from the left when a button is clicked:\n\nCombining hover and focus states with CSS transitions can create highly interactive and accessible web elements. This is particularly useful for buttons, links, and form inputs.\n\nHere’s an example of a link that changes color and adds an underline smoothly on hover and focus:\n\nOne of the most visually appealing uses of CSS transitions is animating background images. This can be particularly effective for buttons, cards, and other interactive elements.\n\nHere’s an example of a button with a background image that shifts position on hover, creating a parallax-like effect:\n\nYou can also use CSS transitions to smoothly change from one background image to another. This technique can be used for galleries, sliders, and featured sections.\n\nHere’s an example of a card that transitions between two background images:\n\nDropdown menus can benefit greatly from CSS transitions, making them feel more polished and user-friendly. By smoothly transitioning the visibility and opacity, you can create dropdowns that appear and disappear in a more engaging manner.\n\nHere’s an example of a dropdown menu that fades in and slides down smoothly:\n\nSidebars can be made more interactive with CSS transitions, providing a smooth experience when showing or hiding the menu. This is especially useful for mobile-friendly designs where the sidebar menu can slide in and out.\n\nHere’s an example of a sidebar navigation that slides in from the left:\n\nLoading animations can significantly enhance the user experience by providing visual feedback during data fetches or slow operations. Animated spinners are a common way to indicate loading status.\n\nHere’s an example of a simple CSS spinner that rotates smoothly:\n\nProgress bars can be animated to show the progress of an operation, providing clear feedback to users. This is useful for tasks like form submissions, file uploads, and page loads.\n\nHere’s an example of a progress bar that fills up smoothly:\n\nUsing CSS transitions, you can create animations that change the shape of elements by adjusting properties like . This can be particularly effective for buttons, cards, or other interactive elements.\n\nHere’s an example of a button that transitions from a rectangle to a circle on hover:\n\nChanging the width or color of borders can create subtle yet effective animations. This can be useful for highlighting focus states, hover effects, or active elements.\n\nHere’s an example of an input field that transitions its border color and width smoothly on focus:\n\nText color transitions can enhance readability and user interaction. This can be applied to links, buttons, or any text elements that need to stand out on interaction.\n\nHere’s an example of a link that changes its color smoothly on hover:\n\nSmoothly transitioning the font size can create dynamic and engaging headlines or text elements that respond to user interaction or scrolling.\n\nHere’s an example of a heading that smoothly increases in size on hover:\n\nAnimating list items can create engaging menus or accordions. Smoothly expanding and collapsing list items enhances usability and provides a polished user experience.\n\nHere’s an example of a list item that expands smoothly on hover:\n\nYou can use CSS transitions to create a smooth effect when switching between different views or states of a list, such as changing the layout from grid to list view.\n\nHere’s an example of a list that transitions from grid to list view:\n\nCSS transitions can enhance the user experience of responsive menus by creating smooth animations for expanding and collapsing menu items.\n\nHere’s an example of a responsive menu that transitions smoothly between expanded and collapsed states:\n\nUsing CSS transitions with media queries can create smooth animations when the layout changes due to viewport resizing. This can enhance the visual appeal and usability of your responsive design.\n\nHere’s an example of a layout that transitions smoothly between different styles based on viewport size:\n\nModern browsers come with powerful developer tools that can help you debug and refine your CSS transitions. Use these tools to inspect elements, view computed styles, and test different transition properties in real time.\n\nThis can be incredibly useful for fine-tuning animations and ensuring they perform smoothly across different browsers.\n\nCSS provides several timing functions like , , , and , each creating a different pacing for your transitions. Experimenting with these can help you find the right feel for your animations.\n\nFor more complex animations, consider using cubic-bezier functions to create custom timing functions.\n\nHere’s an example using a cubic-bezier timing function for a custom transition:\n\nWhile CSS transitions are powerful, combining them with other animation techniques, such as CSS keyframes or JavaScript, can create more complex and engaging animations.\n\nThis approach allows for more detailed control over animations and can be used to create more interactive experiences.\n\nAlways consider accessibility when implementing animations. Some users may find animations distracting or may have conditions that make them sensitive to motion.\n\nUse the media query to respect user preferences and provide alternative experiences.\n\nHere’s how you can use the media query:\n\nThe field of web design is continuously evolving, and new techniques and best practices for CSS transitions are always emerging. Stay inspired by exploring other websites, participating in design communities, and continuously learning.\n\nWebsites like CodePen, Dribbble, and Awwwards can be great sources of inspiration.\n\nCSS transitions are a powerful tool for creating smooth, engaging animations on the web. They enhance user experience by adding interactivity and visual appeal to elements like buttons, forms, images, and navigation menus. By understanding key concepts and applying best practices, you can create dynamic and user-friendly websites.\n\nKeep transitions subtle and purposeful, optimize for performance, test across devices, and consider accessibility. Experiment with timing functions and combine transitions with other animation techniques for more complex effects. Use browser developer tools to debug and refine your animations.\n\nStaying inspired and continuously learning will help you master CSS transitions and elevate your web design projects. With thoughtful implementation, CSS transitions can transform your websites, making them more interactive and engaging.\n• How to Set Up a Git Repository: Step-by-Step Guide\n• How to Use Bitbucket for Version Control in Web Development\n• The Role of Version Control in Agile Development\n• How to Implement Continuous Integration with Git"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since September 2015 . * Some parts of this feature may have varying levels of support.\n\nThe CSS at-rule controls the intermediate steps in a CSS animation sequence by defining styles for keyframes (or waypoints) along the animation sequence. This gives more control over the intermediate steps of the animation sequence than transitions.\n\nA name identifying the keyframe list. This must match the identifier production in CSS syntax. A percentage of the time through the animation sequence at which the specified keyframe should occur. A percentage of the time through the specified at which the specified keyframe should occur. See CSS scroll-driven animations for more information on the kinds of animations that use named timeline ranges.\n\nTo use keyframes, create a rule with a name that is then used by the property to match an animation to its keyframe declaration. Each rule contains a style list of keyframe selectors, which specify percentages along the animation when the keyframe occurs, and a block containing the styles for that keyframe. You can list the keyframe percentages in any order; they will be handled in the order they should occur. JavaScript can access the at-rule with the CSS object model interface .\n\nIf a keyframe rule doesn't specify the start or end states of the animation (that is, / and / ), browsers will use the element's existing styles for the start/end states. This can be used to animate an element from its initial state and back. Properties that can't be animated in keyframe rules are ignored, but supported properties will still be animated.\n\nIf multiple keyframe sets exist for a given name, the last one encountered by the parser is used. rules don't cascade, so animations never derive keyframes from more than one rule set. If a given animation time offset is duplicated, all keyframes in the rule for that percentage are used for that frame. There is cascading within a rule if multiple keyframes specify the same percentage values.\n\nWhen properties are left out of some keyframes Properties that aren't specified in every keyframe are interpolated if possible — properties that can't be interpolated are dropped from the animation. For example: Here, the property animates using the , , and keyframes, and animates using the , , and keyframes.\n\nIf a keyframe is defined multiple times but not all affected properties are in each keyframe, all values specified in these keyframes are considered. For example: In this example, at the keyframe, the values used are and ."
    },
    {
        "link": "https://christinatruong.medium.com/how-to-create-animations-using-only-css-and-keyframes-9b282289e70",
        "document": "How to create animations using only CSS and @ keyframes\n\nAdding dynamic elements to your website usually requires JavaScript. But the property and the rule can be used to add animation effects using only CSS!\n\nBefore we get too deep into the properties, let's take a step back and talk about how to create the actual animation itself. CSS properties are used to define styles. CSS at-rules are statements used to provide CSS instructions.\n\nFor animations, the rule is used to define the sequence of the animation and which styles are to be animated.\n\nLet’s look at an example. Below is a website I created for my podcast. It’s a pretty basic page so I wanted to add a little something to it. I used the same five colors, seen in the cassette tape in the logo, as the page’s background colors. With I was able to cycle through the colors and make them fade between each change, on a continuous loop.\n\nPreviously, I’ve talked about using the property to animate style changes. But only allows you to have a start and end point. So in this example, I would have only been able to transition between two colors: one at the start and one at the end.\n\nWith , more complex effects can be created by setting multiple points for your animations, which in this case, allows me to use as many colors as I want.\n\nHow to use @keyframes\n\nTo create this effect, start with the keyword.\n\nThen, name the animation with a unique identifier. I recommend choosing something descriptive. Instead using a generic name like “myAnimation” choose a name that describes what you’re creating. This can help you clearly see what the animation is being used for, just by looking at the name.\n\nIn my example, my animation effect was used to change the background color. So I could name that animation “colorChange” or “bgColorChange” to make it more specific.\n\nJust like CSS class and ID names, the animation name cannot contain spaces. It can be written as one word or use a dash, underscore or camel casing to separate the words.\n\nThese identifiers are case sensitive so each of these example names would be rendered as different names. So pick a style and be consistent. For me personally, I like to use dashes for my CSS class names and camel casing for animation names.\n\nNext, add the left and right curly brackets to contain the animation sequence and style rules.\n\nThen, define the sequence for the animation by using percentages or keywords. Since I have five colors to cycle through, I will need five animation points in my sequence. The start and end points are defined as 0% and 100%. Each will also be followed by a pair of curly brackets.\n\nThis step not only defines the interval points, it is also where the style rules will be added.\n\nThe keywords and can also be used instead of 0% and 100%.\n\nBut I’ll stick with percentages for this example since I’ll need more keyframes to animate between all five colors. The remaining percentages can be set at 25%, 50% and 75%. Now I have 5 even animation intervals for each color change in my sequence.\n\nSince I only want the background color to change, I’ll use the property. Just to make it easier to read for this example, instead of using the hex code values for my podcast brand colors, I'll use similar color keywords for the demo: , , , and . The style declarations added to each interval will be add using the same syntax that you would normally use to declare any other CSS styles.\n\nIt’s usually convention to put the curly brackets on their own line and the style rules in between. But when I’m only using one property, I like to leave it on one line. This is just a personal preference. It’s totally up to you.\n\nAt this point, you won’t actually see any animations just yet because this part only creates the sequence. It still has to be initiated and defined using the property.\n\nis actually shorthand for eight sub-properties. Let's take a closer look at each one.\n\nIn the example, I want to apply the changes to the whole page, so the style rule can be added to the selector. The value of the property is the name of the sequence created in the previous step. This is how the animation will be initiated.\n\nOne more property is still needed to be able to actually see the animation in action: . This property is used to set the length of time it will take for the animation to complete one cycle. The value is set using the unit for seconds or for milliseconds. It can be define with whole numbers or decimals.\n\nIf the for the background color change example is set to , it will take 10 seconds (2 seconds for each color) to complete one cycle.\n\nOnly and are required to initiate and run the animation. But you may find that you will need to add some additional style rules.\n\nAt the end of the example animation, the background color shows the default white background color. That’s because the animation only runs once. So when it’s done, there are no more colors to transition into.\n\nThe property can be used to control how a CSS animation is applied before and after its execution.\n\nIf I wanted the animation to hold onto the last color (blue), I can define this property using the keyword to instruct the animation to retain the last keyframe value. Now, when the animation finishes, the browser will show the blue background color instead of the default white.\n\nTo see all the available keyword values, refer to the MDN documentation.\n\nWhat if you want the animation to run more than once? You can do that with . This property is used to set the number of times an animation sequence will be played. Number values can be used to define the amount of times the sequence should run, or use the keyword to set the animation to repeat forever.\n\nFor the background color change, if the animation is set on an infinite loop, then we’ll no longer need the property because the animation now runs more than once.\n\nAnimations also start right away, as soon as you load the page. So if you want it to start later, use the property to specify the amount of time to wait before beginning the animation. This property can also be defined using seconds or milliseconds. You can also use a negative number to start the animation partway through.\n\nIf you set the to , any value declared with will only be applied to the first iteration of the animation. When the animation loops, there will be no delay.\n\nThe property is used to set the direction of the sequence.\n\nis the default, which shows the animation playing in a forward cycle.\n\n will play it backwards.\n\n will play it forwards first, then play it backwards and alternate.\n\n will play it backwards first and then alternate.\n\nIf this property is applied to the background color example, it will change the direction of the color changes. For example, instead of cycling from red to blue and starting again at red, will play it from red to blue then back to red and so on.\n\nTry adding this property to the CodePen with the different values and see how it changes.\n\nThe will allow you to pause or run the animation. This property is probably most useful when creating some kind of animation that requires user interaction.\n\nAnd the last one, determines how the animation will progress through the cycle. Different values can be declared to vary the speed over the duration of the change from one style to the other. The keyword values are based on Bézier curves, specifically cubic Bézier curves, which uses four points to define the acceleration pattern.\n\nFor example, the keyword will animate at an even speed. will animate the property slowly at the beginning, speed up, then slow down at the end.\n\ncan be used with many more keyword or function values, to create your own acceleration patterns. These values is very similar to the property that I covered in a previous post about animation with the property. You can check out that video or post to see more about how these values work or view the examples in the MDN documentation.\n\nUsing animation and @keyframes with multiple styles\n\nIn the example I’ve been using so far, I’ve only created an animation with one CSS property, the . But you can also animate multiple CSS properties at the same time. Let's take a look at another example. This animation will create a bounce effect.\n\nRight now, the setup is similar to the previous example, the background color is changing between keyframes: at the beginning and at the end.\n\nTo create a bounce effect and make it look like the circle in bouncing up and down, in addition to the color change, move the the circle up and down.\n\nThe property is set to in the class declaration block, since that style won't change. But in the declaration, the property will be used to change the position of the circle.\n\nThough we can use multiple properties, the animation itself can only be applied to the same property. So if I want to move this circle down the page, I can’t start with and move it to because and are different properties. But, the element can be moved down by declaring a new value. Here's how:\n• Start with a value of 0px, so it can display at the top of its container.\n• At the 50% keyframe, set the value to (or whatever number you want to reposition the circle to where you want it to be displayed).\n• At 100%, set the value back to to move it back to the top of the container.\n\nThis will give the appearance of a bounce effect because it starts at the top of the container, moves 250px down halfway through and then ends back up at the top. Now the position and the background color of the circle is being animated at the same time.\n\nIn the bounce effect example, I used the shorthand property.\n\nHere’s how it would look using the longhand properties:\n\nWhen using the shorthand property, order matters when defining the and values.\n\nBoth use the same type of number values, so the first <time> value will always be assigned to the . If there is a second <time> value, then it will be assigned to the property.\n\nI generally recommend using shorthand whenever possible, to make your CSS more efficient. The less you write, the better. But if it makes more sense to use the longhand properties, especially if you’re still getting used to writing CSS, then use the longhand syntax. You can always re-write it later.\n\nOr, what I like to do is use the shorthand property, but add a comment.\n\nSince all these properties begin with animation, I just use the second part of the property name to make the comment shorter. I also separate the values with the pipe character, which is this vertical line. This comment is just a note for yourself so you can format however you like.\n\nIn case you missed it, the links to the Codepen examples used in this tutorial can be found here and here. To see a more detailed breakdown of the techniques mentioned in the article, check out the corresponding video."
    },
    {
        "link": "https://developer.apple.com/library/archive/documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/AnimatingWithKeyframes/AnimatingWithKeyframes.html",
        "document": "Safari supports two types of CSS animation: transition animations and keyframe animations. To simply animate changes in CSS properties whenever those properties change, you should probably use an animated transition (see Animating CSS Transitions).\n\nTo create complex animations—such as a bumblebee’s flight or a change that starts and stops or repeats indefinitely—or to trigger animations under arbitrary conditions using JavaScript, use keyframe animations.\n• None Choose any number of CSS properties to change and define points along a timeline that have specific states.\n• None Animation between two defined points is automatic but can be guided by specifying a timing function.\n• None Keyframe animations can be set to repeat a finite number of times or to repeat indefinitely, proceeding in the same direction each time, or alternating forward and backward.\n• None Keyframe animations can be paused and resumed.\n• None All of the elements in a class can be animated as part of a single animation.\n\nWhen a keyframe animation completes, an animated element returns to its original CSS style. You can override this behavior, however, and make the final animation state persistent. You can also change an element’s style when the animation ends by installing a JavaScript listener function for the event.\n\nCreate stunning effects by combining animation with 2D and 3D transforms. For example, Figure 6-1 shows an animation of text elements in 3D space. See the PosterCircle sample code project for the complete source code for this example.\n\nA keyframe animation has—at minimum—a name, a duration, and one or more keyframes. A keyframe is a CSS rule consisting of a set of properties and values associated with a point in time. To create a keyframe animation, perform the following steps:\n• None Create a named set of keyframes in CSS using the rule. The set must include at least one keyframe.\n• None Set the property to a positive, nonzero value.\n• None Set the property to the name of the set of keyframes. The following example defines a single keyframe in a set named . The keyframe specifies a blue background color. The example defines the pseudoclass as having the animation name and the animation duration of . When the user hovers over or touches any element, it turns blue for one second.\n\nKeyframes are specified in CSS using the rule. The rule consists of the keyword, followed by the animation name then by a series of style rules for each keyframe. The style rules are grouped in blocks surrounded by braces, and each is preceded by a relative point in time (typically a percentage of the animation’s duration). Any number of CSS properties can be specified by the style rules. Listing 6-2 shows a set of keyframes where the animation is named and the keyframes move an element back and forth while changing its background color over time. The property animates back and forth between and , while the background color cycles between red, white, and blue. The relative point in time is given either as a percentage of the animation’s duration or by the keywords or . For example, specifies the start of an animation, is halfway through an animation, and is the end of an animation. The keyword is equivalent to and the keyword is equivalent to . When the animation executes, it transitions smoothly from one state to the next in increasing order, from 0% to 100%. One of the CSS properties that you can specify in a keyframe is . This property specifies the rate of change for the animation from the current keyframe to the next keyframe. For details, see Animation Timing Functions. Note: You may specify any CSS properties in the style rules, but you should specify the same set of properties in all of the rules. Exact behavior when the set of properties varies from rule to rule is currently unspecified and subject to change. One exception is the property; if not specified for a particular keyframe, the default timing function is used.\n\nYou typically set keyframe animation properties by defining a CSS class or pseudoclass, but you can also set the animation properties by using the HTML attribute in an HTML tag or by setting the property of an element using JavaScript. You must set the and properties in order to see an animation. You can also set the following animation properties:\n• None —Sets the number of times to repeat the animation. The default value is . Can be set to an integer value or to .\n• None —Causes repeating animation to either proceed in the same direction each time or to alternate directions. Can be set to (default) or . If set to , the animation goes forward and backward—from 0% to 100% and from 100% to 0%—on alternate iterations. The value must be greater than one1 for this property to have any effect.\n• None —Pauses or resumes an animation. Set this property to to pause and or (default) to continue the animation.\n• None —The time to wait between triggering the animation and beginning the animation (default is ).\n• None —The default timing function to use between keyframes. You can override this property on a per-keyframe basis by specifying additional timing functions within keyframes.\n• None —Causes the animation to change an element’s style before or after the animation runs. By default, an element’s style is unchanged by a keyframe animation, both before and after the animation runs. If set to , the end state of the animation is persistent. If set to , the beginning state of the animation is applied during the delay before starting the animation. If set to , both and are specified.\n\nAnimation timing functions control an animation's rate of change. A timing function is a mathematical function that provides a smooth curve or path for the rate of change. Specify a timing function using the property. Include the timing function property in a keyframe to specify how to transition from that keyframe to the next. Specify a default timing function to use between all pairs of keyframes by setting the timing function property for an element or a class. The timing function determines the speed of an animation from the current to the next keyframe. You can specify one of the predefined timing functions: You can also specify as the animation timing function. The cubic Bezier curve is defined by four control points, as illustrated in Figure 6-2. The first control point is always (0,0) and the last control point is (1,1), so you specify the two intermediate control points of the curve. The control points are specified as x,y coordinates, where x is a fraction of the duration between keyframes and y is a fraction of the change in properties. For example, the following line of code sets the second point to (0.5, 0.1) and the third point to (0.9, 0.3) using the function: This example causes the animation to begin very slowly, completing only 10% of the change after 50% of the animation and 30% of the change after 90% of the animation. Since the function always ends at the point (1,1), the rest of the animation goes very quickly.\n\nOnce a set of keyframes is created, an animation is triggered when the following conditions are met:\n• None An element’s property is set to the name of the group of keyframes.\n• None The element’s property has been set to a positive nonzero value.\n• None The element’s property is not set to . Consequently, there are several ways to trigger an animation. Here are a few of the most common methods:\n• None Setting the class name at runtime—Set up the animation as part of an unassigned CSS class, then use JavaScript to assign that class to an object by setting the object’s property at runtime.\n• None Setting the animation name at runtime—Set up the animation using an element’s CSS class definition without specifying the animation name, then trigger the animation by setting the element’s property in JavaScript or by setting property through a CSS pseudoclass.\n• None Setting the animation play state at runtime—Set up the animation using an element’s CSS class definition while specifying the animation state as , then trigger the animation by setting the element’s property to in JavaScript or setting property to through a CSS pseudoclass.\n• None Starting out running—For an animation that runs when the page loads, set up the animation as part of a CSS class that includes at least one HTML element. Listing 6-3 is an example that shows how to apply an animation to an element when the user clicks it. // slide right, then diagonally down and right // animate over 2s, repeat animation 4 times, back and forth, with linear timing <P>Click to slide right and down, then back.</p>\n\nControl a CSS animation using JavaScript either by changing an element’s property or by changing an element’s animation properties individually. One thing to remember is that the JavaScript name for a property is not always the same as the CSS name. Compound names in CSS typically contain dashes, but in JavaScript the dash is the subtraction operator, so JavaScript names omit the dash. Compound names in JavaScript usually capitalize the first character of each word after the first word; so if a CSS name were , the JavaScript name would usually be . As an example, to set the CSS property from JavaScript, set the element’s property. Listing 6-4 creates three buttons and a round element with a radial gradient background. The first button animates the element by changing its class name. The second and third buttons pause and continue the animation by setting the element’s property. Figure 6-3 illustrates the result.\n\nThree animation-related events are available through the DOM event system:\n• None —Sent when the animation begins (after any specified delay).\n• None —Sent at the end of each iteration. Note that when the final iteration in a series completes, it triggers both a and a event. Each of these events has three significant properties:\n• None The property is the object being animated.\n• None The property is the name of the animation that generated the event.\n• None The property is the length of time the animation has been running. Elapsed time does not include any time the animation was in the paused play state, nor does it include any specified delay time. As an example of event handling, Listing 6-5 creates three colored balls (round elements) that roll away and disappear when clicked. The balls are given a class name that includes animation but begins with the animation play state set to ; an handler in each ball sets the play state for that element to . The example adds an event listener for events on the element. When a event occurs, the listener function removes the animated element by changing the element’s property to . Click the colored balls to make them roll away: Note: To see the example in action, copy the listing into a text editor and save it with the file extension."
    },
    {
        "link": "https://yannispanagis.com/blog/gradient-animations-with-keyframes-tailwind-and-react",
        "document": "Recently I worked on a project, one of the requirements was a subtle gradient animation in the background of the site - kind of like the ones we’ve seen on sites like Stripe’s. I’ve always wondered how you these animations get crafted and pulled off because they can have a big impact on the tone of a site.\n\nOnly take what you need on the way\n\nIf you're performance oriented with the way you build for the web, then you should be conscious about which external dependencies you pull into a project. Most of the time, new dependencies mean a bigger bundle, more JavaScript, slower load times. From my experience, pulling in lots of extra dependencies that you don't need is a recipe for danger whether you've got a big team of developers or a small one. Those external dependencies will have dependencies of their own and at some point down the line, one way or another something stops getting maintained or gets incompatible with something else. That's why I'd suggest only pulling packages into your project if you really need them and can't avoid it.\n\nAlmost a year ago, I participated in a hackathon with a friend and we built (DigitalFootprint.earth)[https://digitalfootprint.earth] to look deeper at the carbon footprint of sites on the web. With billions of users on the web, visiting billions of sites, the carbon footprint of our internet is very much invisible to most of the world. People buy electric cars, travel less, eat locally sourced food but the time they spend on the internet also has a carbon impact. I bring this up because a big part of the carbon footprint of your site is determined by the amount of data that is transferred. More packages, means more javascript and more data passed around - which means taking the time to focus on performance and optimise your builds is much more environmentally and socially responsible too.\n\nBut you didn't come here to listen to me rant about performance and bundle sizes so let's build some gradient animations!\n\nWe’re going to build this animation in the context of a React project with TailwindCSS and some plain old CSS Keyframes. People always get excited to jump to the next amazing animation framework, but you can do a lot with some simple keyframes.\n\nThe way the code has been structured, I’ve tried tried to keep it flexible and basic as possible to make sure its maintainable and can easily be extended. There are quite a few benefits to keeping things simple this way.\n• For simple animations using CSS keyframes is easy and doesn’t require any complicated JavaScript knowledge, just a bit of imagination!\n• CSS native animations are usually very performant and have great cross browser and device compatibility. Other script generated animations are often far less compatible with other browsers and devices but CSS is pretty universal! Fair warning, even in 2022 you should still check what CSS transforms you’re using because they’re not all compatible with every browser if that sort of thing matters to you.\n• CSS native animations also give the browser back some control (which you may or may not want)! If the browser can control your animation sequences then it can optimise them for your site, but if they’re central to your experience maybe you’d be more reluctant to relinquish that control.\n\nIf you’re already familiar with keyframe animations feel free to skip ahead, but if you’re not here’s the 101 intro.\n\nKeyframes are specified in a CSS file and prefixed with the keyword that acts like a decorator to name the class for the animation. The name “key frame” comes from films, where each frame represented a point in time (a “frame”) in a timeline or transition. When these key frames happen very quickly in succession, they emulate movement between the frames.\n\nIn CSS, we start with the decorator and then specify the keyword for the animation. Inside, we can specify discrete steps that define the different steps in the animation. In the simplest case, we can specify where the animation should start and stop with the keywords and :”\n\nCSS Keyframes are applied using the CSS animation property. The animation property has many sub properties to specify exactly how the animations should work. One of the best places to learn more about keyframes and animations is in the Mozilla docs - they explain it so well there’s no point for me to repeat it here.\n\nEnough with the basics\n\nThe only real difference between our more elegant keyframe animation and the one in the example above is that instead of just using and , we’re going to use percentages to define each more of the steps in our animation. I would highly encourage you to play around with these if you can to tune this animation to your heart’s content.\n\nThe key is that the ends have to match up if you want infinite animations to /feel infinite/ without a glitch or a noticeable finish. Otherwise it’ll look like a poorly timed TikTok trying to make it seem like an infinite loop but the timing is juuust a little off.\n\nIn this case, we’re dealing with rotations and translations (movements in the vertical and horizontal axis), so this means we want to make sure that regardless of how we change the numbers, the initial (0%) and final (100%) translations and degrees line up. With percents for the translations, 0 = 0 (seems obvious enough), but just to throw a bit of maths in here, with degrees you have to remember that 0 matches up with 360 and every multiple after that. Any value you want to use in degrees should line up with itself +/- 360deg.\n\nWith that we have our keyframe animation code but we still have to attach it to an element in our project. The snippet I’ve included below is written in React and TypeScript and uses TailwindCSS to make the code easier to read. There’s now requirement to use TailwindCSS, TypeScript, or event React - you can do everything we’ve just done using whatever tools you like and you have to pick what’s right for your (or your teams) experience and stack.\n\nI use this animation in the context of a NextJS project with React, Typescript and TailwindCSS for my personal website and also for some other bigger projects currently in the works but there’s no reason you have to do the same. Everything here should be easily transferrable and if you do try it out I’d love it if you could share this article and say hi on Twitter to share what you’ve come up with!"
    },
    {
        "link": "https://stackoverflow.com/questions/23441060/how-to-animate-gradients-using-css",
        "document": "How about this:\n\nSet the body margin and padding to 0. Set an html rule to 100% height (higher than 100% may be required).\n\nSet the body to the end state for the gradient.\n\nCreate an empty div with a background which is the start state for the gradient. Give the empty div 100% height.\n\nGive both the body and the empty div a background-attachment: fixed;\n\nSet the empty div to position: fixed; Set the wrapper to position: relative; Give both a z-index, the wrapper being higher.\n\nCreate an animation that will change the opacity of the empty div from 1 to 0 over the desired time. Add animation-fill-mode:forwards; to the div rule so the animation stays where it ends.\n\nIt's not as sexy as a real animated gradient shift, but it's as simple as you can get with CSS only and keyframes, I think."
    }
]