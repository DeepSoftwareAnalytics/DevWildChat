[
    {
        "link": "https://w3schools.com/js/js_popup.asp",
        "document": "JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.\n\nAn alert box is often used if you want to make sure information comes through to the user.\n\nWhen an alert box pops up, the user will have to click \"OK\" to proceed.\n\nThe method can be written without the window prefix.\n\nA confirm box is often used if you want the user to verify or accept something.\n\nWhen a confirm box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed.\n\nIf the user clicks \"OK\", the box returns true. If the user clicks \"Cancel\", the box returns false.\n\nThe method can be written without the window prefix.\n\nA prompt box is often used if you want the user to input a value before entering a page.\n\nWhen a prompt box pops up, the user will have to click either \"OK\" or \"Cancel\" to proceed after entering an input value.\n\nIf the user clicks \"OK\" the box returns the input value. If the user clicks \"Cancel\" the box returns null.\n\nThe method can be written without the window prefix.\n\nlet person = prompt(\"Please enter your name\", \"Harry Potter\");\n\n let text;\n\nif (person == null || person == \"\") {\n\n text = \"User cancelled the prompt.\";\n\n} else {\n\n text = \"Hello \" + person + \"! How are you today?\";\n\n} Try it Yourself »\n\nTo display line breaks inside a popup box, use a back-slash followed by the character n."
    },
    {
        "link": "https://telerik.com/blogs/how-to-do-javascript-alerts-without-being-a-jerk",
        "document": "Like pretty much every programming language, the first thing I ever learned how to do with JavaScript was create a \"Hello World\" program. I followed a tutorial I found on the Oracle website which looked like this.\n\n21 characters to write \"Hello World\" in JavaScript. You could even shave it down to 20 if your moral compass will allow you to leave off the semicolon, and you drop the exclamation point. If that doesn't speak volumes about how easy it is to write apps with JavaScript, I'm just not sure what does.\n\nI learned an important lesson that day: JavaScript alerts are AMAZING!.\n\nThe ONLY thing I took from that tutorial was that I could create a modal window in JavaScript with virtually zero effort on my part. What transpired next was several years of flagrant \"alert abuse\". I put alerts everywhere. Alerts, prompts, confirms - you name it. Debugging, validation, errors, warnings, success; I had an alert for every occasion. I even created alerts to tell you that I was about to alert you. I turned the JavaScript alert into an art form.\n\nI wasn't the only one though! Remember days when you would end up on a website and you would literally be held hostage by alerts? One right after the other blocking the entire browser UI. They were always oddly phrased questions asking you in a reverse way if you wanted a toolbar extension. No matter how I answered, I always ended up with a toolbar extension. I had a lot of toolbar extensions.\n\nOver the years, we've realized that JavaScript alerts really just don't have a good place in modern applications. Several browser vendors have even gone so far as to curtail alerts completely. Consider Google Chrome who allows the end user to block all alerts after the first one.\n\nAlerts can be dangerous if overused. Additionally, they are not going to win you any design awards. However, they do have a place. There was outrage earlier this year when Apple either intentionally or inadvertently removed alerts from Home Screen webapps in iOS 7.\n\nThe problem is that alerts are incredibly obtrusive. They lock the entire browser demanding your attention. You cannot ignore them. If an alert is opened on a an inactive tab, it will immediately come to the front and you will not be doing anything else until you actively dismiss it. This is commonly seen with banking websites which have a session timeout period and is generally referred to as \"stealing the focus\". This is one of the most disruptive things you can do to a user.\n\nSo what do you do when you need to give the user an alert? Sometimes you do need to stop your user and give them a message; let them know that they have been logged out, or that some other critical action has taken place. It is possible to do it though without being a jerk?\n\nThe First Rule Of Alerts Is:\n\nDon't use a JavaScript alert if you can avoid it. \n\n \n\n That means that you pick some other method of feedback. For instance, if you are a bank and a user's session expires, there is no need to alert them that you are about to log them out. They have no choice in the matter, so just get on with it already. It would be nice if you put a message on the login screen explaining that they have been logged out for their own safety. There is no reason to steal their focus. They will see the message when they come back to the tab to resume their banking activities.\n\nBut If You Must Alert, Remember:\n\nDon't use a JavaScript alert if you can avoid it.\n\nIf you find that you must have an alert, there is a still a strong argument to be made that you shouldn't use the built-in JavaScript one. An alternative is to create your own alert using a JavaScript UI framework and modal window.\n\nNearly every JavaScript UI framework includes a modal window of some sort. These windows use overlays to block interaction with the page. There are several reasons why these widgets are better than the browser's native alert...\n• They do not lock the entire browser, only preventing interaction with the viewport\n• They are far more customizable\n• They are (generally) much nicer looking\n\nMany jQuery libraries offer a modal window, including Kendo UI, Telerik HTML5 and JavaScript framework. One trick that you can use with Kendo UI is to create a modal window on the fly. This means that you don't actually have to have an element in the page to turn into an alert. You can do this, but you have to be very careful with it, and I'll explain why in a moment.\n\nDisclaimer: Do not do this. This is bad. Make sure you read why bad.\n\nThis will give you a modal window on the fly with your message as the content. That div is created by jQuery, appended to the body and then the modal window is displayed. It all sounds wonderful until you realize that everytime you click the button, a new with markup gets added to the page. Yikes! You don't need a new window everytime, you just want to reuse the same one.\n\nYou should instead create the window once and then use the same one over and over again. This can be done by using a closure. The concept of closures can easily get you super confused. A closure is when you use an outer function to lock in the state for an inner function. To avoid sending you down the rabbit hole and for the sake of what we're going to do here, let’s put it like this: Let’s say function A creates function B – function B has access to all the variables/state that were around when function A created B… even if function A returns function B to something else and that something else invokes it later.\n\nWhat we'll do is create that outer function which executes itself (IIFE). When it executes it will create the modal window and store a reference to it. It will then return a function which sets the content, and then opens the window. This inner/outer function relationship is the closure.\n\nIf you're rather new to JavaScript and the above concept is incredibly confusing, don't for one second feel bad. It IS incredibly confusing, but after you get used to leveraging closures to encapsulate your code, it will start to feel very natural. It's actually quite a powerful concept, but it's a brain bender the first time you try and soak it in.\n\nOne of the nice things about the built-in JavaScript alert is that - unlike virtually anything else in JavaScript - it's synchronous. It's completely blocking, and no other code will execute until it's been dismissed. Once you begin to use a JavaScript modal window replacement, you lose this incredibly valuable pause in execution.\n\nIn our current implementation of the Kendo UI Window, any code that occurs after a call to will get executed immediately. The browser could care less if our custom modal window is open or closed, dead or alive. It's going to execute the code to open the window and then go right on processing any subsequent JavaScript. If we want some action to occur after the user has dismissed the alert, we need to handle that ourselves.\n\nBut how on earth do you turn asynchronous code into a syncronous operation? We have two options here...\n\nCallbacks are the oldest trick in the book for making two operations synchronous. The concept plays out like this...\n• You call Operation 1 and send it a function you want executed on completion of Operation 1\n• Operation 1 fires an event when it is finished\n• Operation 1 finished event calls the function you passed in - the callback\n\nIn the case of the modal window, Kendo UI Windows will call a event when they have been dismissed and have finished their closing animation. What we want to do is specify a function for that Kendo UI Window to call when it's deactivated event is fired. Since we are reusing the same window over and over again, we have to bind to the event at the time we call .\n\nCallbacks have been around for a very long time. Since JavaScript is rather functional in nature, we can pass functions around like this and it's perfectly acceptable. That is at least, until it's not.\n\nThere are a few implementation problems with callbacks in our paticular scenario. For starters, we have to check each and every time gets called. Then we have to bind or unbind to the Kendo UI Window deactivate event each and every time based on whether or not we passed a function for the parameter. And really, we should be checking for whether or not even IS a function before we try and execute it. This is very manual and kind of gross. We can make this better by using a concept that jQuery already has implemented for us.\n\nA new specification has emerged in the past few years and has been implemented nearly everywhere, including Windows 8 HTML/JS apps. Promises. The whole point of promises is to make dealing with callbacks cleaner, easier, safer, and more reliable.\n\nThe theory works like this...\n• You call a function and in return you get back a promise which represents the operation you just requested via your function call.\n• That promise gives you several methods that you can use to handle the result of the otherwise asynchronous operation.\n\nPromises are not magic or new language functionality, they are simply a pattern for helping us get out of \"callback hell\". jQuery implements promises in the form of something called a \"Deferred\". There is a lot of argument and debate about whether or not jQuery implements the promises specification correctly. I am not here to weigh in on that debate in any form. Rather, we are going to use Deferred's as jQuery implements them (right or wrong) to use a promise instead of dealing with a callback and all the manual logic that comes with it.\n\nYou can see from the above code what the Deferred buys us here. We still have to pass a callback, but we no longer have to babysit that callback all the way through to it's execution. Instead, our call returns the Deferred object which has a method. We simply call this method and pass in the function we want executed. The window will resolve the Deferred promise in the event, which I specified in the window initialization code. And what happens if we don't specify an action to occur on deactivate? Nothing. No checking or logic required on our part.\n\nAny subsequent calls are ignored if they are made while a is still open. That's why you would want to use the method to make sure your alerts aren't stepping on each other.\n\nI mentioned earlier that we could customize these modal windows much much more than a standard JavaScript alert. Here is an example of one I created that alllow you to set the title, gives it a bit of style, replicates the \"ok\" button in a standard alert, and alters the animation some too.\n\nIt's remarkable how many concepts a simple UI element like an alert can combine. In that last example you will find closures, templating, promises and event delegation. It's fun to build these simple reusable components since you learn so much in the process!\n\nSee anything I missed? Can you improve on this code? What about adding \"OK\" and \"Cancel\" buttons and handling those events as well? What about collecting user input? JavaScript provides us with the alert, confirm and prompt to handle all of these scenarios. Download your copy of Kendo UI and see if you can't expand on this sample to create a reusable and robust alert/confirm/prompt component that won't steal your user's sunshine."
    },
    {
        "link": "https://javascript.info/alert-prompt-confirm",
        "document": "As we’ll be using the browser as our demo environment, let’s see a couple of functions to interact with the user: , and .\n\nThis one we’ve seen already. It shows a message and waits for the user to press “OK”.\n\nThe mini-window with the message is called a modal window. The word “modal” means that the visitor can’t interact with the rest of the page, press other buttons, etc, until they have dealt with the window. In this case – until they press “OK”.\n\nIt shows a modal window with a text message, an input field for the visitor, and the buttons OK/Cancel.\n\nThe visitor can type something in the prompt input field and press OK. Then we get that text in the . Or they can cancel the input by pressing Cancel or hitting the key, then we get as the .\n\nThe call to returns the text from the input field or if the input was canceled.\n\nThe function shows a modal window with a and two buttons: OK and Cancel.\n\nThe result is if OK is pressed and otherwise.\n\nWe covered 3 browser-specific functions to interact with visitors:\n\nAll these methods are modal: they pause script execution and don’t allow the visitor to interact with the rest of the page until the window has been dismissed.\n\nThere are two limitations shared by all the methods above:\n• The exact location of the modal window is determined by the browser. Usually, it’s in the center.\n• The exact look of the window also depends on the browser. We can’t modify it.\n\nThat is the price for simplicity. There are other ways to show nicer windows and richer interaction with the visitor, but if “bells and whistles” do not matter much, these methods work just fine."
    },
    {
        "link": "https://medium.com/@stheodorejohn/exploring-alert-box-confirm-box-and-prompt-box-in-javascript-7d81429f825",
        "document": "Lets level up our web development skills with JavaScript dialog boxes!!!!! 🚀 Learn to create engaging user interactions using Alert, Confirm, and Prompt Boxes. Enhance user experience now! 📢 #JavaScript #WebDevelopment #UserInteraction😊\n\nIn web development, user interaction is a critical aspect of creating engaging and interactive applications. JavaScript provides built-in functions to display various dialog boxes that allow developers to communicate with users effectively. In this article, we will explore three commonly used dialog boxes: Alert Box, Confirm Box, and Prompt Box. We will discuss their purposes, demonstrate their usage with code snippets, and explain how they enhance user experience.\n\nThe Alert Box is used to display a message to the user and prompt them to take notice or acknowledge the information. It is commonly used to show informative messages, notifications, warnings, or error alerts.\n\nIn the code snippet, the function is used to display an Alert Box with the message \"Welcome to our website!\" when the code is executed. The user needs to click the \"OK\" button to dismiss the alert."
    },
    {
        "link": "https://geeksforgeeks.org/javascript-window-confirm-method",
        "document": "The method in JavaScript displays a dialog box with a message and two buttons: OK and Cancel. It is often used to get user confirmation before an action, returning true if OK is clicked, and false if Cancel is clicked.\n• message: It is the optional string to be displayed in the dialog. It returns a boolean value indicating whether OK or Cancel was selected (true means OK and false means that the user clicked cancel).\n\nIn this example the window.confirm() method displays a dialog box with “OK” and “Cancel” options. It returns true if “OK” is clicked and false for “Cancel,” allowing conditional actions based on user response.\n\nIn this example The window.confirm() method displays a confirmation dialog when a user clicks the link. Returning true allows navigation; false cancels it, preventing the link from opening based on the user’s choice.\n\nHow does the confirm() method differ from alert() in JavaScript?\n\nCan I customize the buttons or dialog box in the confirm() method?\n\nCan I use the confirm() method in mobile browsers?\n\nWhat happens if the user closes the confirm() dialog without clicking OK or Cancel?\n\nCan I use the confirm() method in an asynchronous function?"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",
        "document": "instructs the browser to display a dialog with an optional message prompting the user to input some text, and to wait until the user either submits the text or cancels the dialog. Under some conditions (when the user switches tabs, for example) the browser may not display a dialog, or may not wait for the user to submit text or to cancel the dialog.\n\nUsing a prompt with a message and default value The following example shows how to check the returned value of a prompt. When the user clicks the OK button, text entered in the input field is returned. If the user clicks OK without entering any text, an empty string is returned. If the user clicks the Cancel button, this function returns . const signButton = document.querySelector(\"#signButton\"); const log = document.querySelector(\"#log\"); signButton.addEventListener(\"click\", () => { let sign = prompt(\"What's your sign?\"); if (sign === null) { log.innerText = \"OK, maybe next time.\"; } else if (sign.toLowerCase() === \"\") { log.innerText = \"Don't be shy, enter your sign!\"; } else if (sign.toLowerCase() === \"scorpio\") { log.innerText = \"Wow! I'm a Scorpio too!\"; } else { log.innerText = `${sign} is my favorite!`; } });\n\nThere are multiple ways to use a prompt, using , , and providing a message and default values: // open a blank prompt window sign = prompt(); // open a blank prompt window sign = window.prompt(); // open a prompt with the text \"Are you feeling lucky\" sign = window.prompt(\"Are you feeling lucky\"); // open a prompt with the text \"Are you feeling lucky\" and \"sure\" as the default value sign = prompt(\"Are you feeling lucky\", \"sure\");\n\nDialog boxes are modal windows — they prevent the user from accessing the rest of the program's interface until the dialog box is closed. For this reason, you should not overuse any function that creates a dialog box or a modal window. Alternatively, a element can be used for confirmations. A prompt dialog contains a single-line textbox, a Cancel button, and an OK button, and returns the (possibly empty) text the user entered into that textbox. The result is a string, which means you should sometimes cast the value given by the user. For example, if their answer should be a Number, you should cast the value to Number."
    },
    {
        "link": "https://shecodes.io/athena/111739-how-to-use-prompt-in-javascript",
        "document": "const toggleInfo = (index, event) => { setVisibleLightIndexes((prev) => { if (prev.includes(index)) { return prev.filter((i) => i !== index); } else { return [...prev, index]; } }); const clickedElement = event.target.closest(\".chauvetLights\"); if (clickedElement) { clickedElement.classList.toggle(\"expanded\"); } toggleBackgroundColor(event); }; TypeError: Cannot read properties of undefined (reading 'target') at k (home-OO3WpeNb.js:1:102576) at onClick (home-OO3WpeNb.js:1:104620) at Object.Em (index-h-qGlws7.js:38:9852) at km (index-h-qGlws7.js:38:10006) at Cm (index-h-qGlws7.js:38:10063) at Wa (index-h-qGlws7.js:38:31422) at fd (index-h-qGlws7.js:38:31839) at index-h-qGlws7.js:38:36751 at Vs (index-h-qGlws7.js:41:36768) at Df (index-h-qGlws7.js:38:8988)\n\nAdd a value attribute to both radio buttons. For convenience, set the button's value attribute to the same value as its id attribute."
    },
    {
        "link": "https://w3schools.com/jsref/met_win_prompt.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://stackoverflow.com/questions/25559776/prompt-method-in-javascript",
        "document": "I'm a beginner to Javascript and I have a basic question about how to use the prompt method. None of the code seems to process below. Is there some sort of hidden rule about using multiple prompt boxes or does my code just have a syntax error? Any help would be much appreciated. Thanks in advance."
    },
    {
        "link": "https://medium.com/@tajammalmaqbool11/3-methods-to-ask-for-user-input-in-the-javascript-console-4b83f3bbb1fe",
        "document": "The JavaScript console is a powerful tool for developers. It’s commonly used for debugging and testing but can also collect user input during development. This is particularly useful for prototyping, debugging, or testing without creating a user interface.\n\nJavaScript is one of the most widely used programming languages for building interactive and dynamic websites. Browsers primarily use it to add interactivity, manipulate the DOM (Document Object Model), and enhance user experiences.\n\nHowever, JavaScript isn’t limited to browsers; it can also run on servers using Node.js.\n\nNode.js is a runtime environment that allows developers to execute JavaScript code outside the browser, typically on servers. It’s popular for building scalable and high-performance applications, such as APIs and command-line tools.\n\nThis blog will focus on how JavaScript can gather user input in two environments:\n\nLet’s dive into 3 effective methods for asking users for input using the javascript console.\n\nThe function is a simple way to ask for user input directly in the browser. It shows a dialog box with a message and an input field where users can type their responses.\n• The browser displays a dialog box with the text “What is your name?” and an input field.\n• The user enters their response and clicks “OK.”\n• The value is stored in the variable and logged to the console.\n\nSince returns a string, you need to convert the input if you expect a number.\n\nFor more interactive input gathering in browsers, you can use event listeners to capture user actions like key presses. This approach is non-blocking and works dynamically during runtime.\n• The method listens for the event.\n• Each time a key is pressed, the event object is passed to the callback function.\n• The key pressed is logged in the console using .\n\nIn server-side JavaScript, input from the terminal is handled differently. Node.js provides the module, which is designed to gather input interactively in a command-line interface.\n• The method displays a prompt in the terminal and waits for the user’s response.\n• The response is passed as an argument to a callback function.\n• The method closes the input stream after collecting input.\n\nJavaScript offers flexible methods for gathering user input in both browser and Node.js environments. Whether you use the simple function, interactive event listeners, or the robust module, each method has unique strengths tailored for specific scenarios."
    }
]