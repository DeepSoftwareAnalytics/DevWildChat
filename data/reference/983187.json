[
    {
        "link": "https://pypdf2.readthedocs.io",
        "document": "This page is about PyPDF2. PyPDF2 is deprecated, please use pypdf\n\nPyPDF2 is a free and open source pure-python PDF library capable of splitting, merging, cropping, and transforming the pages of PDF files. It can also add custom data, viewing options, and passwords to PDF files. PyPDF2 can retrieve text and metadata from PDFs as well.\n\nYou can contribute to PyPDF2 on GitHub."
    },
    {
        "link": "https://nanonets.com/blog/pypdf2-library-working-with-pdf-files-in-python",
        "document": "Looking to extract data from documents? Try Nanonets OCR software. Extract data from receipts, bills, PDF documents, and more on autopilot. No Credit Card. Forever Free plans.\n\nThe most popular file type is Portable Document Format, also known as PDF. It can be an ebook, digitally signed agreements, password-protected documents, or scanned documents like passports. AI document processing tools often play a key role in handling these PDFs, especially when extracting or analyzing data from scanned or complex files.\n\nPDF is the most extensively used digital format, and the International Standards Organization (ISO) maintains it as an open standard.\n\nThis shows the enormous amount of data stored within these file types, which are generally difficult to edit or modify. Here in this blog, we will see how you can use the Python library, PyPDF2 to work with PDF files and perform the following tasks:\n\nPyPDF2 isn’t the only Python library you can use for PDF OCR using python. Here are some common Python PDF libraries:\n• PDFQuery: PDFQuery is a PDF scraping library, and it is a fast and user-friendly python wrapper for PyQuery, PDFMiner, and XML.\n• Tabula.py: It is a Python wrapper around tabula-java used to read tables in PDF. Tabula.py enables you to read tables and can be converted into Pandas DataFrame.\n• Slate: It is used to extract text from PDF files, depending on the PDFMiner package. Slate is a lightweight annotation tool that supports annotation in Python.\n• PDFMiner: It is an open-source PDF library used to extract text from PDF. You can use PDFMiner to perform analysis on data. However, it only supports Python3.\n• pdflib: PDFlib is a library for creating PDFs in python. This development library contains several levels for creating, personalizing, and importing PDFs.\n• Xpdf: It is a Python wrapper for pdf.\n• PyPDF2: It is one of the best-known python libraries that enable you to perform tasks on PDFs, including merging PDF files, extracting document information, splitting or extracting PDF pages, and much more.\n\nHere in this article, we will discuss the PyPDF2 library, known as one of the best libraries to manipulate PDF in Python and is available on every platform.\n\nWhat is the Best PDF Library for Python?\n\nThe best library for working with PDFs in Python is PyPDF2. It’s lightweight, fast, and well-documented. The library is available on the Python Package Index (PyPI).\n\nIf you need to create a PDF file from scratch, you’ll want to use PyPDF2 because it has robust support for creating new documents. If you need to parse an existing record, then PyPDF2 is perfect because it has better support for detecting different types of fonts and other features.\n\nPyPDF2 is a Python library that allows the manipulation of PDF documents. It can be used to create new PDF documents, modify existing ones and extract content from documents. PyPDF2 is a pure Python library that requires no non-standard modules.\n\nThe low-level API (based on Pygments) allows writing programs that generate or efficiently manipulate documents. The high-level API (based on ReportLab) enables the creation of complex documents such as forms, books, or magazines with just a few lines of code.\n• Converting PDF files into images (png or jpeg) or text files;\n• Signing documents with digital signatures (certificates must be present);\n\nPyPDF2 has been designed with performance in mind. It uses native C code to handle the most time-consuming tasks (such as parsing) but never sacrifices the simplicity of its interface. The library is also thread-safe, and its memory footprint is not much larger than the one required by Python (around 1MB).\n\nHow do I read a PDF in PyPDF2?\n\nAlthough PyPDF2 doesn't have a method specifically for reading remote files, you can use Python's urllib.request module to read the remote file in bytes before passing it to the PdfFileReader() function with the file in the format of the byte. The remaining steps resemble reading a local PDF file.\n\nWant to automate data extraction from pdfs and increase efficiency? If yes, Click below to Schedule a Free Demo with Nanonets' Automation Experts.\n\nWhat is the difference between PyPDF, PyPDF2 and PyPDF4?\n\nPyPDF2 is the successor to PyPDF, which is no longer maintained.\n\nPyPDF2 is a library used to create, manipulate and decode portable documents. It allows you to extract text, merge and split PDFs, add watermarks, and more. It's widely used and well-maintained. It supports PDF 1.4, 1.5, and 1.6, as well as all the security features in PDF 1.7, including digital signatures and permissions.\n\nPyPDF2 has no dependencies other than the Python standard library. It is pure Python code, but it does use C extensions for some algorithms to improve performance.\n\nPyPDF4 is an advanced tool for working with PDF documents on the macOS, Windows, and Linux platforms. It includes:\n• A GUI for creating PDF files from scratch with text, images, and shapes; A browser for viewing PDF files\n• A command-line tool for performing all other operations on existing files or creating new ones from scratch using Python scripts or shell commands such as sed(1) or awk(1).\n\nPyPDF4 is based on the PyPDF2 library and shares its license but has additional features like:\n• Support for encrypted documents (including their decryption at runtime)\n• Support for bookmarks with links between pages\n\nWant to scrape data from PDF ? Check out Nanonets' to extract data, scan QR codes, and read barcodes from documents easily.\n\nWhat is the Use of PyPDF2?\n\nThe PyPDF2 library can be used in many different ways:\n• PyPDF2 is used as a command line tool to create or modify PDFs. This is useful if you have shell access to a server but not a graphical desktop environment.\n• It runs the library inside Python scripts by importing it as a module and calling its functions. This is useful if you want to automate tasks directly or build complex applications using PyPDF2.\n• It can read, parse and write PDFs. It can be used as a command line tool or as a library.\n• It's written in pure Python with no external dependencies (except for Python itself).\n• It supports Unicode strings so that it can handle non-English characters.\n\nHere are some of the use cases where PyPDF2 can be used for:\n\nConverting PDF to Word or Other Formats\n\nFor instance, if you want to convert PDF to Word or another format, you'll have to download a separate program for each conversion. And if you're trying to do this on multiple documents at a time, the process can be slow and cumbersome.\n\nPyPDF2 is a command-line tool that offers an alternative way of working with PDFs. You can use it as part of your regular workflow or as a Python program.\n\nUsers may use PyPDF2 to modify the contents of a PDF document. For example, add or remove pages from a PDF or extract text. It's also possible to add images and other objects to existing PDFs.\n\nMerging multiple PDFs together can be done using PyPDF2 as well. This can be done by specifying the input paths for each PDF file and then combining them together into one document.\n\nIf you need to split a large document into smaller ones, PyPDF2 is the library you should use. The library supports splitting documents by page, every n pages, and by range of pages.\n\nIt also supports splitting documents based on their metadata, which is useful if you want to split documents according to their author or title.\n\nThere are various methods for installing PyPDF2. The most popular choice is to employ pip.\n\nPython 3.6 and up is needed to run PyPDF2.\n\nA package installer called pip is typically included with Python. It allows you to set up PyPDF2:\n\nYou can just install PyPDF2 for your current user if you're not a superuser (a system administrator or root):\n\nYou'll need to install a few additional requirements if you want to use PyPDF2 to encrypt or decrypt AES PDFs. RC4 encryption is supported by using the standard installation.\n\nHow to install Python-PyPDF2 on Linux?\n\nPython-PyPDF2 is a library for manipulating PDF files, including reading, merging, and modifying pages. This guide shows how to install PyPDF2 on a Linux system.\n\nPrerequisites Ensure Python and pip are installed by running or and in your terminal.\n\nVerify Installation: Check the installation by importing PyPDF2 in Python\n\nPyPDF2 is a Python library for working with PDF documents. It can be used to parse PDFs, modify them, and create new PDFs. PyPDF2 can be used to extract some text and metadata from a PDF. This can be helpful if you're automating some processes on your existing PDF files.\n\nThe current categories of data that can be extracted are as follows:\n\nTo utilize this example, you must locate a PDF. Any PDF that is readily available on your computer may be used.\n\nHere’s a code example for this:\n\nPyPDF.pdf.DocumentInformation will return comprising useful attributes, including author, creator, producer, subject, and title.\n\nBy printing the DocumentInformation object, you will get the required output like this:\n\nThe PyPDF2 package's PdfFileReader is imported here. A class called PdfFileReader offers several ways to deal with PDF files.\n\nIn this instance, you call.getDocumentInfo(), which will provide you a DocumentInformation object. Most of this information is what you're most interested in.\n\nAdditionally, you may obtain the document's page count by calling the reader object.getNumPages() method.\n\nYou can use the information variable's various instance attributes to extract the remaining document metadata that you require. You take a printout of the information and give it back for future use.\n\nThe.extractText() function in PyPDF2 can be used on its page objects (not shown in this example), although it is not very effective. Some PDFs will yield text, while others will return an empty string.\n\nCheck out the Nanonets instead if you want to extract text from a PDF. Since it was created expressly for extracting text from PDFs, Nanonets is significantly more capable.\n\nExtracting text from PDF using PyPDF2 is hard as it has limited support for text extraction. The return of the code will not be in a proper format. You may get a series of line break characters due to PyPDF2's limited support.\n\nLet’s see how you can extract text from a PDF:\n\nAdditional Uses for the PyPDF2 Module\n\nMany operations can be carried out on PDF files using the PyPDF2 module, including:\n• Reading the PDF file's text, as we have just done above\n• Changing the angle at which a PDF file page is rotated\n• by combining two or more PDF files on a specific page.\n• To obtain information such as the creator, author, creation date, etc., locate all the metadata for every PDF file.\n• Even better, we can use the text from a text file to produce a new PDF document.\n\nAutomate PDF processing like document upload, extracting text, splitting PDF, rearranging PDF pages, edit PDF metadata, and more with workflow automation.\n\nHow to Rotate Pages of a PDF File?\n\nThe Python module PyPDF2 is a library used to manipulate PDF files. It's straightforward to use and is available for many different platforms.\n\nHere we'll see how we can rotate the pages of a pdf file. Save the PDF in another file and run the following code:\n\nInstead of using codes, use Nanonets to rotate PDFs with no-code workflow automation. Over 10,000+ users use Nanonets to automate PDF processing.\n\nTry Nanonets for free, or set up a call with us.\n\nAfter scanning multiple pages of a document or storing numerous pages as separate documents on your computer, merging PDF files is frequently necessary.\n\nNumerous programs, including Adobe and online applications, can help do this task swiftly. However, most of them are either for sale or may not offer enough security measures.\n\nOpen your preferred editor, then make a new file called \"pdfMerger.py.\" Make sure the Python program is located in the same directory as the PDF files that will be attached.\n\nYou can combine two or more PDF files by using the following block of code:\n\nThe code above appears pretty straightforward, but what if you want to combine more than two files? For each file, you want to add, line 3 would need to be repeated, which would make your application rather long. In this circumstance, a for loop can be used.\n\nAnother method to combine multiple PDF files is shown in the following code.\n\nAn additional way of merging PDF files is using no-code workflows on Nanonets. You can merge PDF files and create custom deep learning OCR models on Nanonets. Set up a 10 minute call with our team to learn more!\n\nHow to Split Pages from a PDF File?\n\nFor various reasons, you may often want to extract a specific page from a large PDF file or combine several PDF files into one. This can be accomplished with certain PDF editor software. Still, you may find that the split and merge features are typically not included in the free version or that processing so many pages or files makes them too laborious. In this article, I'll share a straightforward Python script that you can use to split or combine several PDF files.\n\nUsing PdfFileReader to read the original file will allow you to access a specific page by its page number when you wish to extract a particular page from the PDF file and create it as a separate PDF file (page number starts from 0). The add page function of the PdfFileWriter allows you to add a PDF page to a brand-new PDF object and save it.\n\nHere is an example of code that separates the file1.pdf's first page into a separate PDF file called first page.pdf.\n\nHow to Merge Pages of a PDF File?\n\nYou can use PdfFileMerger to combine multiple PDF files into a single document. Even though you may also use PdfFileWriter to accomplish this, merging pages without editing them first makes using PdfFileMerger more straightforward.\n\nThe sample code that uses the PdfFileMerger's append method to add multiple PDF files and write them into a single file called merged is shown below.\n\nIf you want to add certain pages from your original file to the new PDF file, you can use the pages argument of the append function to give a tuple containing the beginning and ending page numbers.\n\nIf you wish to specify where your pages go, you must use the merge function because the append function will continually add new pages at the end. It enables you to select the page's location on which you wish to insert new pages.\n\nIf you have a lot of files to process, you can automate splitting, merging and rotating PDF pages with a simple no-code workflow process on Nanonets.\n\nTry Nanonets for free, or set up a call with us.\n\nA PDF file can be encrypted using a password or a digital certificate. The encryption method is chosen by the user when the file is created. A password-protected PDF file can be opened, edited, and printed by anyone who knows the password. It cannot be opened or edited by someone who does not know the password. A digitally signed document is also protected from unauthorized editing. Still, it also includes an electronic signature that can be verified by anyone who has access to the original document or its digital signature.\n\nYou can password protect a PDF file using the above code just like this:\n\nHow to Add a Watermark to a PDF File?\n\nA watermark is a text or graphic overlay on your document's front. It can help you protect your work from unauthorized use or misuse and show which records have been modified or printed. You can add text and graphics to make custom watermarks for your documents.\n\nHere’s a code snippet about how to add a watermark to a PDF File:\n\nHere is how the first page of original (left) and watermarked (right) PDF file looks like:\n\nThree arguments must be carefully considered while using the encrypt function.\n• User password user pwd is used to limit file opening and reading;\n• User password is one step below the owner pwd, str. The file can be opened without any limitations when it is given. Default owner pwd and user pwd are the same if not supplied;\n• Use the 128bit Boolean option to specify whether or not to utilize 128 bits for a password. False indicates a 40-bit password should be used; True is the default;\n\nWant to automate data extraction from pdfs and increase efficiency? If yes, Click below to Schedule a Free Demo with Nanonets' Automation Experts.\n\nNanonets has an OCR API that can be used to extract text from PDF documents, including invoices, receipts, customer orders, claim forms, and more. It can also identify handwritten documents and characters from 200+ languages. Furthermore, you can automate all aspects of data extraction by using automated workflows. Nanonets GUI allows you to extract data from unstructured PDFs on the go with pre-trained OCR templates. You can also create your custom model in 15 minutes.\n\nNanonets is an online OCR software; therefore, you can use all the features from your browser without downloading anything.\n\nYou can start using Nanonets by using the GUI interface: https://app.nanonets.com/\n\nOr, you can access Nanonets OCR API with the following steps.\n\nStep 2: Get your free Nanonets API Key\n\n Get your free API Key from https://app.nanonets.com/#/keys\n\nStep 3: Set the API key as an Environment Variable\n\nStep 4: Create a New Model on the interface\n\nNote: This generates a MODEL_ID that you need for the next step\n\nNote: you will get YOUR_MODEL_ID from the previous step\n\nStep 6: Upload the Training Data\n\n The training data is found in (image files) and (annotations for the image files)\n\nStep 7: Train the Model\n\n Once the Images have been uploaded, begin training the Model\n\nStep 8: Get Model State\n\n The model takes ~2 hours to train. You'll be notified via email once the model is trained. You can check model state with the following\n\nStep 9: Make Prediction\n\n Once the model is trained. You can make predictions using the model\n\nNanonets is an AI-based PDF OCR software that extracts text and tables from PDFs, handwritten scanned documents, emails, or images with 95% accuracy. Nanonets GUI is a no-code platform that allows you to automate data extraction using rule-based workflows.\n\nThe upshot? The time spent on manual processing nosedives, freeing up employees to focus on more strategic tasks that drive growth.\n\nPyPDF2 is one of the easiest ways to convert PDF files, and it's completely open source. If you're in a hurry, the excellent online documentation will have you up and running in minutes. If you have questions or need more help, the friendly PyPDF2 community will gladly offer their assistance. As well as being simple to use, PyPDF2 is exceptionally lightweight—it has no other dependencies besides Python (which means it'll work on almost every platform imaginable).\n\nMoreover, PyPDF2 is distributed under a BSD-style license, so you can bundle it with your software if you like. In short, this is an excellent tool for manipulating PDFs, and we recommend that Python developers check it out.\n\nWant to automate manual data extraction processes and increase efficiency? If yes, Click below to Schedule a Free Demo with Nanonets' Automation Experts.\n\nPython has no native support for reading PDF files, so this isn't something you will be able to do with a single line of code. But plenty of third-party libraries allow Python to read PDFs and convert them into other formats, such as HTML or plain text.\n\nAnother question arises here if Python reads a PDF, then:\n\nYes, Python can read Excel files. Pandas make it simple to import an Excel file into Python. You must use read_excel to achieve this objective.\n\nPyPDF2 is open-source software licensed under the LGPL.\n\nAlso, PyPDF2 is available for download in source code form. It can be installed using pip or downloading the zip file and extracting it to your chosen directory.\n\nThe PyPDF2 library includes several command-line tools that can be used to convert PDF files into other formats. These tools are installed with the Python module when it is installed.\n\nPyPDF2 aims to provide a pure Python interface to libpdf (the C++ PDF Reference Library) rather than having a separate C extension module linked to Python.\n\nThe primary goal of PyPDF2 is to make it easier for developers to create PDF applications without having to worry about installing a complicated development environment or dealing with multiple versions of external libraries.\n\nYes, Excel can extract data from PDF.\n\nExcel is a great tool for manipulating data and is easy to use. It's also very powerful and can be used to handle many different types of data.\n\nIn addition, Excel is a big advantage because you can use it on any platform (Windows, Mac, Linux), and you don't need any special software.\n\nThe process of extracting data from a PDF is not always straightforward, but this guide will show you how to extract data from a PDF step by step.\n\nOCR Python is a fully-featured OCR library written in pure Python. It wraps the Tesseract open source OCR engine and provides a simple API for developers to use. OCR, Optical Character Recognition, converts scanned text images into searchable, digital text.\n\nPython Tesseract OCR is the underlying technology behind OCR Python, leveraging Tesseract's high-quality output as its base. It can also be used with any other OCR engine that uses the Leptonica or Harp libraries (such as GOCR).\n\nIf you want to digitize documents using OCR, then this library will help you quickly and easily.\n\nWhy is Text Extraction from PDF Hard?\n\nText extraction from PDF is hard. There are many reasons for this:\n\nThe PDF format was designed to be read by humans, not machines. The world's most popular document format has many neat features that make it easy for people to read, but it's a pain for computers to deal with.\n\nPDFs can contain any content (text, charts, images, etc.), and they can be laid out in any way you want. This means there is no standard way to extract text from a PDF file — every file has its unique layout.\n\nThe text in a given PDF might not be located where you expect it to be! Some PDFs have tables of contents or indexes containing all the document's text; others have footnotes or endnotes; others have headers and footers that repeat at regular intervals; others use frames or layers instead of pages (this is rare).\n\nText can be extracted from photographs using optical character recognition (OCR). OCR software is what accomplishes this. The most well-known Open Source OCR program is the tesseract OCR engine.\n\nNanonets online OCR & OCR API have many interesting use cases that could optimize your business performance, save costs and boost growth. Find out how Nanonets' use cases can apply to your product."
    },
    {
        "link": "https://geeksforgeeks.org/introduction-to-python-pypdf2-library",
        "document": "PyPDF2 is a Python library that helps in working and dealing with PDF files. It allows us to read, manipulate, and extract information from PDFs without the need for complex software. Using PyPDF2, we can split a single PDF into multiple files, merge multiple PDFs into one, extract text, rotate pages, and even add watermarks. In this article, we are going to learn most of the PyPDF2 library.\n\nWe use PyPDF2 when we have to deal with large documents. Suppose we have a large PDF document, and we only need to send a few pages to someone. Instead of manually extracting those pages, we can do this in just a few lines of code using PyPDF2. We use PyPDF2 to combine multiple PDF files into one file. This tool helps us do things such as reading, extracting text, merging, splitting, rotating, and even encrypting/decrypting PDF files.\n\nWe have to first install PyPDF2 before using it. We can install using pip. We open our command prompt or terminal and run the following command:\n\nNow, let's look at some important key concepts before understand the features of PyPDF's:\n• PDF Structure: A PDF file consists of objects like text, images, metadata, and page structure.\n• Pages: PDF files contain multiple pages, and each page can be manipulated individually.\n• Metadata: PDFs contain information such as the author, title, and creation date.\n\nSome of key features of PyPDF2 are given below:\n• None It is used for reading PDF files.\n• None It is used for extracting text and metadata.\n• None It is used for merging, splitting, and rotating pages.\n• None It is used for encrypting and decrypting PDF files.\n• None It is also used for adding watermarks and modifying PDF content.\n\nIf we want to read a PDF file, we have to first open it using PyPDF2. Let's we have a pdf named example.pdf.\n\nHere is how we can read a pdf using PyPDF2.\n\nWe can easily extract text from PDF files using the extract_text() function. This can be useful for parsing large documents.\n\nPyPDF2 allows us to extract metadata such as the author, title, and creation date:\n\nWe can play around with all the pdfs we have. Let's see a few ways to manipulate pdfs.\n\nWe can merge multiple PDF files into one using PyPDF2's PdfWriter(). Let's we have an another pdf file named example2.pdf.\n\nHere we get a merged.pdf file.\n\nIf we want to split a PDF into separate pages, PyPDF2 makes this easy. Let's split the merged.pdf file.\n\nThe page_1.pdf and page_2.pdf will have contents of page1 and page two of merged.pdf file respectively.\n\nWe can also add watermark in PDF file if we want. We need another PDF file containing the watermark (like a logo or text). We can overlay this on our main PDF file.\n\nPython program to add watermark to a pdf using PyPDF2.\n\nWe can also password-protect our PDF files using encryption.\n\nBelow is example:\n\nWhen we try to open the file, we will need to pass the password:\n• None We can automate generating PDF reports by extracting or merging data.\n• None We can also combine PyPDF2 with other\n\nPyPDF2 is a useful, simple and powerful library for working with PDFs in Python. By following the steps given above, we can start extracting text from PDF files and explore further to discover all the features PyPDF2 provides."
    },
    {
        "link": "https://analyticsvidhya.com/blog/2021/09/pypdf2-library-for-working-with-pdf-files-in-python",
        "document": "PyPDF2 Library for Working with PDF Files in Python\n\nPDF stands for Portable Document Format and has a .pdf file extension. Users predominantly utilize this format for document sharing because it preserves the original formatting, ensuring that documents appear consistent across various platforms, regardless of the hardware, software, or operating system used. This consistency makes PDFs the format of choice for distributing, viewing, and ensuring the integrity of documents on a global scale.\n\nOriginally developed by Adobe, PDF has transcended its proprietary origins to become an open standard, governed by the International Organization for Standardization (ISO). This transition to an ISO standard has further cemented PDF’s position as a cornerstone of digital document management, facilitating its adoption in a wide range of applications from academic publishing to business communications.\n\nIn this tutorial, we will learn how to work with PDF files in Python. The following topics will be covered:\n• How to extract text from a PDF file.\n• How to rotate pages of a PDF file.\n• How to extract document information from a PDF file.\n• How to split pages from a PDF file.\n• How to add a watermark to a PDF file.\n\nThis article was published as a part of the Data Science Blogathon.\n\nSome Common Libraries for PDFs in Python\n\nThere are many libraries available freely for working with PDFs:\n• PDFMiner: It is an open-source tool for extracting text from PDF. It is used for performing analysis on the data. It can also be used as a PDF transformer or PDF parser.\n• PDFQuery: It is a lightweight python wrapper around PDFMiner, Ixml, and PyQuery. It is a fast, user-friendly PDF scraping library.\n• Tabula.py: It is a python wrapper for tabula.java. It converts PDF files into a Pandas data frame, allowing you to perform all data manipulation operations on the data frame.\n• Xpdf: It allows conversion of PDFs into text.\n• pdflib: It is an extension of the poppler library with python bindings present in it.\n• Slate: It is a Python package based on the PDFMiner and used for extraction of text from PDF.\n• PyPDF2: This Python library performs major tasks on PDF files, such as extracting document-specific information, merging PDF files, splitting pages of a PDF file, adding watermarks to a file, and encrypting or decrypting PDF files. We will use the PyPDF2 library in this tutorial. It is a pure python library so it can run on any platform without any platform-related dependencies on any external libraries.\n\nGetting Started with the PyPDF2 Library\n\nPyPDF2 is a comprehensive Python library designed for the manipulation of PDF files. It enables users to create, modify, and extract content from PDF documents. Built entirely in Python, PyPDF2 does not rely on any external modules, making it an accessible tool for Python developers.\n\nThe library offers a dual API system to cater to different programming needs. The low-level API, inspired by Pygments, provides the capability to craft programs that can generate or manipulate documents with high efficiency. On the other hand, the high-level API, influenced by ReportLab, simplifies the creation of complex documents—ranging from forms to entire books or magazines—with minimal coding effort.\n• Transformation of PDFs into image formats like PNG or JPEG, as well as conversion into text files.\n• Generation of new PDF documents from the ground up.\n• Modification of existing PDFs through the addition, deletion, or alteration of pages.\n• Advanced editing features such as page rotation, watermark addition, font adjustments, and more.\n• The ability to secure documents with digital signatures, provided the necessary certificates are available.\n\nDesigned for efficiency, PyPDF2 leverages native C code for intensive operations like parsing, ensuring optimal performance without compromising the simplicity of its Pythonic interface. Additionally, the library is thread-safe, boasting a modest memory footprint approximately the size of Python’s own (around 1MB), making it both powerful and lightweight for developers looking to manage PDF documents in their projects.\n\nPyPDF2’s flexibility and command-line interface make it an ideal choice for integrating PDF processing into your workflow or Python projects. Below are some practical applications where PyPDF2 excels:\n\nPDF Conversion to Word or Other Formats\n\nTraditionally, converting PDFs into Word or other file formats requires specialized software for each conversion type, which can be inefficient, especially when handling multiple documents. PyPDF2 offers a streamlined alternative, enabling users to automate the conversion process within their Python scripts or via command-line instructions, significantly simplifying the task of converting PDF files into desired formats.\n\nWhether you’re compiling reports, combining chapters of a book, or consolidating financial statements, PyPDF2 simplifies the process of merging multiple PDF files into a single document. This capability is invaluable for creating cohesive documents from disparate sources, enhancing organization and accessibility.\n\nPyPDF2’s functionality extends beyond basic file manipulation, allowing for detailed modifications within PDF documents. Users can add or remove pages, extract text for analysis, and even insert images or other objects into existing PDFs. This level of control makes PyPDF2 a versatile tool for tailoring documents to specific requirements.\n\nLarge PDF documents can be unwieldy, making them difficult to share or process. PyPDF2 addresses this challenge by providing robust tools for splitting a single, large document into smaller, more manageable files. Whether you need to divide a document by page number, at regular intervals (every n pages), or according to document metadata such as author or title, PyPDF2 equips you with the necessary functionality.\n• Extracting and Analyzing PDF Content: PyPDF2 can be employed for text mining and analysis, extracting text from PDFs for use in data analysis projects, natural language processing, or content aggregation.\n• Automating Report Generation: Automate the creation of reports by compiling data and text into professionally formatted PDFs, complete with dynamically added graphs, tables, and text.\n• Securing PDFs: Implement security measures by encrypting PDFs, setting permissions, or adding digital signatures to protect sensitive information.\n• Custom PDF Creation: Generate customized PDFs from scratch, using PyPDF2 to programmatically create documents that meet precise layout and content specifications.In summary, PyPDF2 is not just a library for manipulating PDF files; it’s a comprehensive toolset that caters to a wide array of PDF-related tasks, from document conversion and merging to complex modifications and automated report generation. Its capabilities make it an indispensable resource for professionals, developers, and hobbyists alike, seeking to streamline their document management processes.\n\nTo install PyPDF2, copy the following commands in the command prompt and run:\n\nPyPDF2 provides metadata about the PDF document. This can be useful information about the PDF files. Information like the author of the document, title, producer, Subject, etc is available directly.\n\nTo extract the above information, run the following code:\n\nThe output of the above code is as follows:\n\nLet us format the output:\n\nExtracting text from PDFs with PyPDF2 can be challenging due to its restricted capabilities in text extraction. The output generated by the code might not be well-formatted, often resulting in an output cluttered with line break characters, a consequence of PyPDF2’s constrained text extraction support.\n\nTo extract text, we will read the file and create a PDF object of the file.\n\nThen we will create a PDFReader class object and pass PDF File Object to it.\n\nAnd Finally, we will extract each page and concatenate the text of each page.\n\nThe output text is as follows:\n\nTo rotate a page of a PDF file and save it another file, copy the following code and run it.\n\nWe can also merge two or more PDF files using the following commands:\n\nThe output PDF is shown below:\n\nWe can split a PDF into separate pages and save them again as PDFs.\n\nEncryption of a PDF file means adding a password to the file. Each time the file is opened, it prompts to give the password for the file. It allows the content to be password protected. The following popup comes up:\n\nWe can use the following code for the same:\n\nA watermark is an identifying image or pattern that appears on each page. It can be a company logo or any strong information to be reflected on each page. To add a watermark to each page of the PDF, copy the following code and run.\n\nThe above code reads two files- the input file and the watermark. Then after reading each page it attaches the watermark to each page and saves the new file in the same location.\n\nPyPDF2 stands out as a highly accessible solution for PDF file conversion, celebrated for its open-source nature and integration capabilities. Its comprehensive online documentation, hosted on GitHub, ensures that even those pressed for time can quickly find their way through setup and execution, streamlining the learning curve with well-organized docs and examples. For those seeking further assistance or looking to contribute, the PyPDF2 community on GitHub welcomes inquiries and contributions, fostering an environment of support and continuous improvement.\n\nThis library is not only user-friendly but also designed with automation and integration in mind, making it a go-to choice for developers looking to incorporate PDF manipulation into their workflows or applications. Since PyPDF2 is available on PyPI, installing it is straightforward for any Python project, and its compatibility with HTML and other formats enhances its versatility in handling various document conversion tasks.\n\nWith no dependencies other than Python, PyPDF2 promises exceptional portability across different operating systems, ensuring developers can deploy it in diverse environments without compatibility issues. The BSD-style license under which PyPDF2 is released allows developers to include it in commercial software packages without legal concerns.\n\nIn essence, PyPDF2 serves as an invaluable tool for Python developers interested in automating PDF manipulation, providing an optimal blend of ease of use, efficiency, and adaptability. Whether you’re generating reports, converting documents, or integrating PDF functionalities into larger systems, PyPDF2’s robust feature set and supportive community make it a highly recommended resource.\n\nThe media shown in this article are not owned by Analytics Vidhya and are used at the Author’s discretion."
    },
    {
        "link": "https://pypdf2.readthedocs.io/en/3.0.0/modules/PdfWriter.html",
        "document": "This class supports writing PDF files out, given pages produced by another class (typically ).\n\nIdentical to the method, but assumes you want to concatenate all pages onto the end of the file instead of specifying a position.\n• None fileobj – A File Object or an object that supports the standard read and seek methods similar to a File Object. Could also be a string representing a path to a PDF file.\n• None outline_item (str) – Optionally, you may specify a string to build an outline (aka ‘bookmark’) to identify the beginning of the included file.\n• None pages – can be a or a tuple or a list of pages to be processed to merge only the specified range of pages from the source document into the output document.\n• None import_outline (bool) – You may prevent the source document’s outline (collection of outline items, previously referred to as ‘bookmarks’) from being imported by specifying this as .\n• None excluded_fields (List) – provide the list of fields/keys to be ignored if “/Annots” is part of the list, the annotation will be ignored if “/B” is part of the list, the articles will be ignored\n\nMerge the pages from the given file into the output file at the specified page number.\n• None position (int) – The page number to insert this file. File will be inserted after the given number.\n• None fileobj – A File Object or an object that supports the standard read and seek methods similar to a File Object. Could also be a string representing a path to a PDF file.\n• None outline_item (str) – Optionally, you may specify a string to build an outline (aka ‘bookmark’) to identify the beginning of the included file.\n• None pages – can be a or a tuple or a list of pages to be processed to merge only the specified range of pages from the source document into the output document.\n• None import_outline (bool) – You may prevent the source document’s outline (collection of outline items, previously referred to as ‘bookmarks’) from being imported by specifying this as .\n• None excluded_fields (List) – provide the list of fields/keys to be ignored if “/Annots” is part of the list, the annotation will be ignored if “/B” is part of the list, the articles will be ignored\n\nProperty to access the opening destination (“/OpenAction” entry in the PDF catalog). it returns if the entry does not exist is not set. :param destination:. the property can be set to a Destination, a Page or an string(NamedDest) or\n\nlayout (str) – The page layout to be used Show pages in two columns, odd-numbered pages on the left Show pages in two columns, odd-numbered pages on the right Show two pages at a time, odd-numbered pages on the left Show two pages at a time, odd-numbered pages on the right"
    },
    {
        "link": "https://github.com/py-pdf/pypdf/discussions/1065",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://stackoverflow.com/questions/31646450/find-blank-pages-from-pdf-files",
        "document": "You could check the size of each page. It is the easiest solution I have found so far:\n\nI was just trying somethings out, so it is not finished, I needed to find each page because I have to add the label :\"No text\" on blank pages and put sequential page numbers on every page of each topic (which can have multiple files). That is the reason I am using canvas and page merge.\n\nI used too many temp files, but will clean the code soon.\n\nHope this helps you. It is in Python 3. The number 60,000 is the size I put because all blank pages on my files were less than 50,000 and all pages that had information were over 100,000, but it could change if your files are different. Try it with some of them and adjust the number to your needs."
    },
    {
        "link": "https://stackoverflow.com/questions/12571905/finding-on-which-page-a-search-string-is-located-in-a-pdf-document-using-python",
        "document": "Which python packages can I use to find out out on which page a specific “search string” is located ?\n\nI looked into several python pdf packages but couldn't figure out which one I should use. PyPDF does not seem to have this functionality and PDFMiner seems to be an overkill for such simple task. Any advice ?\n\nMore precise: I have several PDF documents and I would like to extract pages which are between a string “Begin” and a string “End” ."
    },
    {
        "link": "https://nanonets.com/blog/pypdf2-library-working-with-pdf-files-in-python",
        "document": "Looking to extract data from documents? Try Nanonets OCR software. Extract data from receipts, bills, PDF documents, and more on autopilot. No Credit Card. Forever Free plans.\n\nThe most popular file type is Portable Document Format, also known as PDF. It can be an ebook, digitally signed agreements, password-protected documents, or scanned documents like passports. AI document processing tools often play a key role in handling these PDFs, especially when extracting or analyzing data from scanned or complex files.\n\nPDF is the most extensively used digital format, and the International Standards Organization (ISO) maintains it as an open standard.\n\nThis shows the enormous amount of data stored within these file types, which are generally difficult to edit or modify. Here in this blog, we will see how you can use the Python library, PyPDF2 to work with PDF files and perform the following tasks:\n\nPyPDF2 isn’t the only Python library you can use for PDF OCR using python. Here are some common Python PDF libraries:\n• PDFQuery: PDFQuery is a PDF scraping library, and it is a fast and user-friendly python wrapper for PyQuery, PDFMiner, and XML.\n• Tabula.py: It is a Python wrapper around tabula-java used to read tables in PDF. Tabula.py enables you to read tables and can be converted into Pandas DataFrame.\n• Slate: It is used to extract text from PDF files, depending on the PDFMiner package. Slate is a lightweight annotation tool that supports annotation in Python.\n• PDFMiner: It is an open-source PDF library used to extract text from PDF. You can use PDFMiner to perform analysis on data. However, it only supports Python3.\n• pdflib: PDFlib is a library for creating PDFs in python. This development library contains several levels for creating, personalizing, and importing PDFs.\n• Xpdf: It is a Python wrapper for pdf.\n• PyPDF2: It is one of the best-known python libraries that enable you to perform tasks on PDFs, including merging PDF files, extracting document information, splitting or extracting PDF pages, and much more.\n\nHere in this article, we will discuss the PyPDF2 library, known as one of the best libraries to manipulate PDF in Python and is available on every platform.\n\nWhat is the Best PDF Library for Python?\n\nThe best library for working with PDFs in Python is PyPDF2. It’s lightweight, fast, and well-documented. The library is available on the Python Package Index (PyPI).\n\nIf you need to create a PDF file from scratch, you’ll want to use PyPDF2 because it has robust support for creating new documents. If you need to parse an existing record, then PyPDF2 is perfect because it has better support for detecting different types of fonts and other features.\n\nPyPDF2 is a Python library that allows the manipulation of PDF documents. It can be used to create new PDF documents, modify existing ones and extract content from documents. PyPDF2 is a pure Python library that requires no non-standard modules.\n\nThe low-level API (based on Pygments) allows writing programs that generate or efficiently manipulate documents. The high-level API (based on ReportLab) enables the creation of complex documents such as forms, books, or magazines with just a few lines of code.\n• Converting PDF files into images (png or jpeg) or text files;\n• Signing documents with digital signatures (certificates must be present);\n\nPyPDF2 has been designed with performance in mind. It uses native C code to handle the most time-consuming tasks (such as parsing) but never sacrifices the simplicity of its interface. The library is also thread-safe, and its memory footprint is not much larger than the one required by Python (around 1MB).\n\nHow do I read a PDF in PyPDF2?\n\nAlthough PyPDF2 doesn't have a method specifically for reading remote files, you can use Python's urllib.request module to read the remote file in bytes before passing it to the PdfFileReader() function with the file in the format of the byte. The remaining steps resemble reading a local PDF file.\n\nWant to automate data extraction from pdfs and increase efficiency? If yes, Click below to Schedule a Free Demo with Nanonets' Automation Experts.\n\nWhat is the difference between PyPDF, PyPDF2 and PyPDF4?\n\nPyPDF2 is the successor to PyPDF, which is no longer maintained.\n\nPyPDF2 is a library used to create, manipulate and decode portable documents. It allows you to extract text, merge and split PDFs, add watermarks, and more. It's widely used and well-maintained. It supports PDF 1.4, 1.5, and 1.6, as well as all the security features in PDF 1.7, including digital signatures and permissions.\n\nPyPDF2 has no dependencies other than the Python standard library. It is pure Python code, but it does use C extensions for some algorithms to improve performance.\n\nPyPDF4 is an advanced tool for working with PDF documents on the macOS, Windows, and Linux platforms. It includes:\n• A GUI for creating PDF files from scratch with text, images, and shapes; A browser for viewing PDF files\n• A command-line tool for performing all other operations on existing files or creating new ones from scratch using Python scripts or shell commands such as sed(1) or awk(1).\n\nPyPDF4 is based on the PyPDF2 library and shares its license but has additional features like:\n• Support for encrypted documents (including their decryption at runtime)\n• Support for bookmarks with links between pages\n\nWant to scrape data from PDF ? Check out Nanonets' to extract data, scan QR codes, and read barcodes from documents easily.\n\nWhat is the Use of PyPDF2?\n\nThe PyPDF2 library can be used in many different ways:\n• PyPDF2 is used as a command line tool to create or modify PDFs. This is useful if you have shell access to a server but not a graphical desktop environment.\n• It runs the library inside Python scripts by importing it as a module and calling its functions. This is useful if you want to automate tasks directly or build complex applications using PyPDF2.\n• It can read, parse and write PDFs. It can be used as a command line tool or as a library.\n• It's written in pure Python with no external dependencies (except for Python itself).\n• It supports Unicode strings so that it can handle non-English characters.\n\nHere are some of the use cases where PyPDF2 can be used for:\n\nConverting PDF to Word or Other Formats\n\nFor instance, if you want to convert PDF to Word or another format, you'll have to download a separate program for each conversion. And if you're trying to do this on multiple documents at a time, the process can be slow and cumbersome.\n\nPyPDF2 is a command-line tool that offers an alternative way of working with PDFs. You can use it as part of your regular workflow or as a Python program.\n\nUsers may use PyPDF2 to modify the contents of a PDF document. For example, add or remove pages from a PDF or extract text. It's also possible to add images and other objects to existing PDFs.\n\nMerging multiple PDFs together can be done using PyPDF2 as well. This can be done by specifying the input paths for each PDF file and then combining them together into one document.\n\nIf you need to split a large document into smaller ones, PyPDF2 is the library you should use. The library supports splitting documents by page, every n pages, and by range of pages.\n\nIt also supports splitting documents based on their metadata, which is useful if you want to split documents according to their author or title.\n\nThere are various methods for installing PyPDF2. The most popular choice is to employ pip.\n\nPython 3.6 and up is needed to run PyPDF2.\n\nA package installer called pip is typically included with Python. It allows you to set up PyPDF2:\n\nYou can just install PyPDF2 for your current user if you're not a superuser (a system administrator or root):\n\nYou'll need to install a few additional requirements if you want to use PyPDF2 to encrypt or decrypt AES PDFs. RC4 encryption is supported by using the standard installation.\n\nHow to install Python-PyPDF2 on Linux?\n\nPython-PyPDF2 is a library for manipulating PDF files, including reading, merging, and modifying pages. This guide shows how to install PyPDF2 on a Linux system.\n\nPrerequisites Ensure Python and pip are installed by running or and in your terminal.\n\nVerify Installation: Check the installation by importing PyPDF2 in Python\n\nPyPDF2 is a Python library for working with PDF documents. It can be used to parse PDFs, modify them, and create new PDFs. PyPDF2 can be used to extract some text and metadata from a PDF. This can be helpful if you're automating some processes on your existing PDF files.\n\nThe current categories of data that can be extracted are as follows:\n\nTo utilize this example, you must locate a PDF. Any PDF that is readily available on your computer may be used.\n\nHere’s a code example for this:\n\nPyPDF.pdf.DocumentInformation will return comprising useful attributes, including author, creator, producer, subject, and title.\n\nBy printing the DocumentInformation object, you will get the required output like this:\n\nThe PyPDF2 package's PdfFileReader is imported here. A class called PdfFileReader offers several ways to deal with PDF files.\n\nIn this instance, you call.getDocumentInfo(), which will provide you a DocumentInformation object. Most of this information is what you're most interested in.\n\nAdditionally, you may obtain the document's page count by calling the reader object.getNumPages() method.\n\nYou can use the information variable's various instance attributes to extract the remaining document metadata that you require. You take a printout of the information and give it back for future use.\n\nThe.extractText() function in PyPDF2 can be used on its page objects (not shown in this example), although it is not very effective. Some PDFs will yield text, while others will return an empty string.\n\nCheck out the Nanonets instead if you want to extract text from a PDF. Since it was created expressly for extracting text from PDFs, Nanonets is significantly more capable.\n\nExtracting text from PDF using PyPDF2 is hard as it has limited support for text extraction. The return of the code will not be in a proper format. You may get a series of line break characters due to PyPDF2's limited support.\n\nLet’s see how you can extract text from a PDF:\n\nAdditional Uses for the PyPDF2 Module\n\nMany operations can be carried out on PDF files using the PyPDF2 module, including:\n• Reading the PDF file's text, as we have just done above\n• Changing the angle at which a PDF file page is rotated\n• by combining two or more PDF files on a specific page.\n• To obtain information such as the creator, author, creation date, etc., locate all the metadata for every PDF file.\n• Even better, we can use the text from a text file to produce a new PDF document.\n\nAutomate PDF processing like document upload, extracting text, splitting PDF, rearranging PDF pages, edit PDF metadata, and more with workflow automation.\n\nHow to Rotate Pages of a PDF File?\n\nThe Python module PyPDF2 is a library used to manipulate PDF files. It's straightforward to use and is available for many different platforms.\n\nHere we'll see how we can rotate the pages of a pdf file. Save the PDF in another file and run the following code:\n\nInstead of using codes, use Nanonets to rotate PDFs with no-code workflow automation. Over 10,000+ users use Nanonets to automate PDF processing.\n\nTry Nanonets for free, or set up a call with us.\n\nAfter scanning multiple pages of a document or storing numerous pages as separate documents on your computer, merging PDF files is frequently necessary.\n\nNumerous programs, including Adobe and online applications, can help do this task swiftly. However, most of them are either for sale or may not offer enough security measures.\n\nOpen your preferred editor, then make a new file called \"pdfMerger.py.\" Make sure the Python program is located in the same directory as the PDF files that will be attached.\n\nYou can combine two or more PDF files by using the following block of code:\n\nThe code above appears pretty straightforward, but what if you want to combine more than two files? For each file, you want to add, line 3 would need to be repeated, which would make your application rather long. In this circumstance, a for loop can be used.\n\nAnother method to combine multiple PDF files is shown in the following code.\n\nAn additional way of merging PDF files is using no-code workflows on Nanonets. You can merge PDF files and create custom deep learning OCR models on Nanonets. Set up a 10 minute call with our team to learn more!\n\nHow to Split Pages from a PDF File?\n\nFor various reasons, you may often want to extract a specific page from a large PDF file or combine several PDF files into one. This can be accomplished with certain PDF editor software. Still, you may find that the split and merge features are typically not included in the free version or that processing so many pages or files makes them too laborious. In this article, I'll share a straightforward Python script that you can use to split or combine several PDF files.\n\nUsing PdfFileReader to read the original file will allow you to access a specific page by its page number when you wish to extract a particular page from the PDF file and create it as a separate PDF file (page number starts from 0). The add page function of the PdfFileWriter allows you to add a PDF page to a brand-new PDF object and save it.\n\nHere is an example of code that separates the file1.pdf's first page into a separate PDF file called first page.pdf.\n\nHow to Merge Pages of a PDF File?\n\nYou can use PdfFileMerger to combine multiple PDF files into a single document. Even though you may also use PdfFileWriter to accomplish this, merging pages without editing them first makes using PdfFileMerger more straightforward.\n\nThe sample code that uses the PdfFileMerger's append method to add multiple PDF files and write them into a single file called merged is shown below.\n\nIf you want to add certain pages from your original file to the new PDF file, you can use the pages argument of the append function to give a tuple containing the beginning and ending page numbers.\n\nIf you wish to specify where your pages go, you must use the merge function because the append function will continually add new pages at the end. It enables you to select the page's location on which you wish to insert new pages.\n\nIf you have a lot of files to process, you can automate splitting, merging and rotating PDF pages with a simple no-code workflow process on Nanonets.\n\nTry Nanonets for free, or set up a call with us.\n\nA PDF file can be encrypted using a password or a digital certificate. The encryption method is chosen by the user when the file is created. A password-protected PDF file can be opened, edited, and printed by anyone who knows the password. It cannot be opened or edited by someone who does not know the password. A digitally signed document is also protected from unauthorized editing. Still, it also includes an electronic signature that can be verified by anyone who has access to the original document or its digital signature.\n\nYou can password protect a PDF file using the above code just like this:\n\nHow to Add a Watermark to a PDF File?\n\nA watermark is a text or graphic overlay on your document's front. It can help you protect your work from unauthorized use or misuse and show which records have been modified or printed. You can add text and graphics to make custom watermarks for your documents.\n\nHere’s a code snippet about how to add a watermark to a PDF File:\n\nHere is how the first page of original (left) and watermarked (right) PDF file looks like:\n\nThree arguments must be carefully considered while using the encrypt function.\n• User password user pwd is used to limit file opening and reading;\n• User password is one step below the owner pwd, str. The file can be opened without any limitations when it is given. Default owner pwd and user pwd are the same if not supplied;\n• Use the 128bit Boolean option to specify whether or not to utilize 128 bits for a password. False indicates a 40-bit password should be used; True is the default;\n\nWant to automate data extraction from pdfs and increase efficiency? If yes, Click below to Schedule a Free Demo with Nanonets' Automation Experts.\n\nNanonets has an OCR API that can be used to extract text from PDF documents, including invoices, receipts, customer orders, claim forms, and more. It can also identify handwritten documents and characters from 200+ languages. Furthermore, you can automate all aspects of data extraction by using automated workflows. Nanonets GUI allows you to extract data from unstructured PDFs on the go with pre-trained OCR templates. You can also create your custom model in 15 minutes.\n\nNanonets is an online OCR software; therefore, you can use all the features from your browser without downloading anything.\n\nYou can start using Nanonets by using the GUI interface: https://app.nanonets.com/\n\nOr, you can access Nanonets OCR API with the following steps.\n\nStep 2: Get your free Nanonets API Key\n\n Get your free API Key from https://app.nanonets.com/#/keys\n\nStep 3: Set the API key as an Environment Variable\n\nStep 4: Create a New Model on the interface\n\nNote: This generates a MODEL_ID that you need for the next step\n\nNote: you will get YOUR_MODEL_ID from the previous step\n\nStep 6: Upload the Training Data\n\n The training data is found in (image files) and (annotations for the image files)\n\nStep 7: Train the Model\n\n Once the Images have been uploaded, begin training the Model\n\nStep 8: Get Model State\n\n The model takes ~2 hours to train. You'll be notified via email once the model is trained. You can check model state with the following\n\nStep 9: Make Prediction\n\n Once the model is trained. You can make predictions using the model\n\nNanonets is an AI-based PDF OCR software that extracts text and tables from PDFs, handwritten scanned documents, emails, or images with 95% accuracy. Nanonets GUI is a no-code platform that allows you to automate data extraction using rule-based workflows.\n\nThe upshot? The time spent on manual processing nosedives, freeing up employees to focus on more strategic tasks that drive growth.\n\nPyPDF2 is one of the easiest ways to convert PDF files, and it's completely open source. If you're in a hurry, the excellent online documentation will have you up and running in minutes. If you have questions or need more help, the friendly PyPDF2 community will gladly offer their assistance. As well as being simple to use, PyPDF2 is exceptionally lightweight—it has no other dependencies besides Python (which means it'll work on almost every platform imaginable).\n\nMoreover, PyPDF2 is distributed under a BSD-style license, so you can bundle it with your software if you like. In short, this is an excellent tool for manipulating PDFs, and we recommend that Python developers check it out.\n\nWant to automate manual data extraction processes and increase efficiency? If yes, Click below to Schedule a Free Demo with Nanonets' Automation Experts.\n\nPython has no native support for reading PDF files, so this isn't something you will be able to do with a single line of code. But plenty of third-party libraries allow Python to read PDFs and convert them into other formats, such as HTML or plain text.\n\nAnother question arises here if Python reads a PDF, then:\n\nYes, Python can read Excel files. Pandas make it simple to import an Excel file into Python. You must use read_excel to achieve this objective.\n\nPyPDF2 is open-source software licensed under the LGPL.\n\nAlso, PyPDF2 is available for download in source code form. It can be installed using pip or downloading the zip file and extracting it to your chosen directory.\n\nThe PyPDF2 library includes several command-line tools that can be used to convert PDF files into other formats. These tools are installed with the Python module when it is installed.\n\nPyPDF2 aims to provide a pure Python interface to libpdf (the C++ PDF Reference Library) rather than having a separate C extension module linked to Python.\n\nThe primary goal of PyPDF2 is to make it easier for developers to create PDF applications without having to worry about installing a complicated development environment or dealing with multiple versions of external libraries.\n\nYes, Excel can extract data from PDF.\n\nExcel is a great tool for manipulating data and is easy to use. It's also very powerful and can be used to handle many different types of data.\n\nIn addition, Excel is a big advantage because you can use it on any platform (Windows, Mac, Linux), and you don't need any special software.\n\nThe process of extracting data from a PDF is not always straightforward, but this guide will show you how to extract data from a PDF step by step.\n\nOCR Python is a fully-featured OCR library written in pure Python. It wraps the Tesseract open source OCR engine and provides a simple API for developers to use. OCR, Optical Character Recognition, converts scanned text images into searchable, digital text.\n\nPython Tesseract OCR is the underlying technology behind OCR Python, leveraging Tesseract's high-quality output as its base. It can also be used with any other OCR engine that uses the Leptonica or Harp libraries (such as GOCR).\n\nIf you want to digitize documents using OCR, then this library will help you quickly and easily.\n\nWhy is Text Extraction from PDF Hard?\n\nText extraction from PDF is hard. There are many reasons for this:\n\nThe PDF format was designed to be read by humans, not machines. The world's most popular document format has many neat features that make it easy for people to read, but it's a pain for computers to deal with.\n\nPDFs can contain any content (text, charts, images, etc.), and they can be laid out in any way you want. This means there is no standard way to extract text from a PDF file — every file has its unique layout.\n\nThe text in a given PDF might not be located where you expect it to be! Some PDFs have tables of contents or indexes containing all the document's text; others have footnotes or endnotes; others have headers and footers that repeat at regular intervals; others use frames or layers instead of pages (this is rare).\n\nText can be extracted from photographs using optical character recognition (OCR). OCR software is what accomplishes this. The most well-known Open Source OCR program is the tesseract OCR engine.\n\nNanonets online OCR & OCR API have many interesting use cases that could optimize your business performance, save costs and boost growth. Find out how Nanonets' use cases can apply to your product."
    },
    {
        "link": "https://theseattledataguy.com/challenges-you-will-face-when-parsing-pdfs-with-python-how-to-parse-pdfs-with-python",
        "document": "Scraping data from PDFs is a right of passage if you work in data. Someone somewhere always needs help getting invoices parsed, contracts read through, or dozens of other use cases. Most of us will turn to Python and our trusty list of Python libraries and start plugging away.\n\nOf course, there are many challenges you’ll face when scraping PDFs using any programming language. You’ll run into various data types and formats. There will be tables, images, text, and numbers. Not to mention, some PDFs are well constructed and easy to parse, while others are simply scans of actual contracts, which can be difficult to parse accurately, even with OCR. Now, in a prior article, we discussed how you can parse PDFs, and in this article, I wanted to discuss some of the challenges you’ll face when parsing PDFs. This ranges from the issues when developing custom pipelines to other challenges.\n\nSo, let’s talk about the challenges you’ll face when parsing PDFs with Python.\n\nHere are some of the key issues we’ve run into when parsing PDFs.\n\nThe initial challenge most developers might run into is that it is time-consuming to build a proper system to scrape PDFs. Don’t get me wrong. Writing the initial Python scripts to parse PDFs is pretty easy.\n\nBut as you develop a more robust system, one that likely can handle large amounts of data, you’ll likely run into various issues. This ranges from data quality issues to performance issues, etc. So, building out this proper system becomes very time-consuming. You’re generally building a data pipeline, meaning it needs to be managed like one and not just a bunch of Python notebooks duct-taped together.\n\nThis also means that the engineering time can really add up. As soon as you feel like you’ve created a method to handle parsing the PDFs, you run into a gotcha. I recall going through several Facebook pipelines that were thousands of lines to properly parse, map and transform data from PDFs. So it can get quite expensive.\n\nPerhaps the most obvious issue is the fact that the data is unstructured. Unlike data stored in spreadsheets or databases, PDFs are designed for display rather than structured data storage. This lack of standard formatting makes it difficult to extract meaningful data, especially from text-heavy PDFs where there’s no clear separation of fields or records. Not to mention that PDFs often combine various types of content, like headers, footers, tables, images, and multi-paragraph text, without a consistent structure. This means that data points might appear anywhere on the page, often requiring manual identification and extraction rules.\n\nThis is why many companies are looking for other options, such as using LLMs to help manage these rules because that way, if a data point is on page 5 instead of page 10 on one set of PDFs, you don’t have to know that. All you have to do is tell the LLM to find a specific data point.\n\nOne less thought of the issue is the layout. Now, some of this has to do with a point similar to the above. Sometimes, the chart you’re looking to parse or the contract details you want to extract are on a different page or in a different section.\n\nDon’t believe me, you’ve likely had schema issues with structured files. You don’t think it’ll be worse with unstructured PDFs? So here are some of those issues you’ll face in terms of layout.\n• None PDFs with multi-column layouts, common in research papers and newspapers, are especially difficult to parse because the columns Parsing tools often read text line-by-line, which doesn’t naturally account for multiple columns.\n• None Documents with complex tables, such as nested tables (tables within tables), require extra effort to parse accurately. Standard table-extraction tools may fail to recognize nested structures, leading to incomplete or incorrect data extraction.\n• None Parsing tools often don’t differentiate between main content and repetitive page elements, so headers, footers, and page numbers can interfere with actual content. Separating these elements requires either page-specific handling or custom filtering.\n\nPDFs created from scanned images contain no raw text data. Instead, all text is embedded within images, making Optical Character Recognition (OCR) essential for text extraction. This can introduce further complications, as OCR often struggles with low-resolution images, non-standard fonts, and complex layouts. Let’s be clear: even with OCR tools like Tesseract, accuracy isn’t guaranteed, especially when dealing with complex fonts or low-quality scans. It’s not a magic bullet. It’ll do its best to try to decipher the text. Sometimes, it won’t get it right. You want to make sure you build this into your system and have data quality checks that can detect some of these issues.\n\nAnother challenges you’ll likely have to tackle is the accurate parsing of lengthy PDFs that contain similar information presented in multiple formats. For instance, in SEC filings, you often encounter various tables displaying revenue, profits, and losses from different perspectives—adjusted, unadjusted, and segmented by business unit or geography. Parsing these documents accurately requires not only distinguishing these subtle variations but also interpreting them correctly to ensure the data is properly categorized and actionable.\n\nFor example, imagine an SEC filing for a large multinational corporation. You might find three separate tables showing revenue figures for adjusted revenue, segment revenue and consolidated revenue. While these tables look similar, each serves a different analytical purpose. Parsing the PDF accurately involves recognizing which table is which, interpreting the adjustments made, and ensuring that the final analysis reflects the intended financial perspective.\n\nParsing large PDFs can be memory-intensive, especially when handling multi-page documents or high-resolution scans. Standard libraries may struggle to load large files into memory, leading to performance bottlenecks or even crashes. In turn, this leads to slow processing, not to mention needing to manage large chunks of data in memory for multi-page PDFs. This means you’ll need to create more robust systems that can actually manage the larger data sets and perhaps parallelize some of the workloads.\n\nNow, we’ve already talked about several Python Libraries, but let’s dig into those a little more deeply and offer a few tools you can use to parse PDFs.\n\nPytesseract – is an OCR (Optical Character Recognition) tool, which means it’s used to extract text from images or scanned documents. If you have a document or image that is not in a text-based format, such as a PNG, JPEG or scanned PDF, Pytesseract will likely be the right tool.\n\nPyPDF2 – is designed to handle text extraction, manipulation, and merging/splitting of text-based PDF files, not scanned images. If the PDF is not a scanned document but was generated electronically, PyPDF2 can directly extract this text.\n\npdfplumber – is designed for extracting structured data from PDFs, including text, tables, and positional information. It excels at handling PDFs with complex layouts, making it ideal for extracting tabular data and analyzing precise document structures. Its ability to extract tables and text accurately makes it a go-to tool for processing financial statements, invoices, and reports.\n\nRoe.ai – If you’re not comfortable with Python or you just want to be able to run large queries over your PDFs, you can use tools like Roe AI. Roe has built-in data connectors to unstructured data sources. This includes data sources such as S3, which allow you to query data directly from PDFs via SQL and their agents. So, instead of needing to manually write Python to parse PDFs, load that data into a database, and then write a query. You can just write a query!\n\nIf you are looking to parse PDFs with Python, then here are a few quick scripts and tips you can use to get started.\n\nNo single library can handle all aspects of PDF parsing well, so combining libraries can help tackle different challenges. For example: Use pdfplumber for tables and PyPDF2 for text extraction if a document contains a mix of structured and unstructured content.\n\nFor scanned PDFs, combine `pdf2image` and `Tesseract OCR` to handle image-based text extraction.\n\nExample: Extract text and table data from a PDF with both text and tables.\n\nIt’s hard to ignore that LLMs are playing a role in making many tedious tasks easier. Whether you’re using ChatGPT, Claude or another LLM. Many of them provide some option for parsing PDFs.\n\nWith vision-enabled LLMs like ChatGPT with image understanding, you can directly analyze PDFs without needing external tools to extract content. This capability allows the model to “see” the structure and layout of the document, enabling tasks such as direct parsing, contextual summarization and even better accuracy. But they aren’t the only option.\n\nUse Tools Like Roe.AI To Help Reduce Time To Value\n\nBesides writing custom code and using an LLM, you can use tools such as Roe.ai to make handling PDFs far simpler. For some teams, you might be too busy to build an entire PDF parser and still for others it might require more technical skill than you currently have. Still others might be looking for a way to more accurately extract data from their PDFs which Roe can help do.\n\nFor example, you could use Roe to help parse and analyze thousands of resumes or SEC files. This could be to perform some form of financial analysis or quickly going through resumes.\n\nInstead of code, you can use agents like the ones in the image below to parse specific data points out of PDFs. Ensuring both faster and more accurate parsing.\n\nThis would allow your team to focus more on the analysis and less on the parsing of PDFs. Meaning you can drive value faster!\n\nParsing PDFs is a common need for large enterprises and start-ups. However, it continues to provide similar challenges, from having to build systems that can handle varying types of PDFs to data rarely being structured in similar formats. Luckily, we live in a world now where LLMs and tools developed around them can help make our lives easier as we parse PDFs. So, if you’re building a system to extract data from a PDF, hopefully, you found this article helpful.\n\nIf you’re looking to dig deeper into parsing PDFs for analytics, then I’d love to chat.\n\nDisclosure: Seattle Data Guy does have a stake in Roe.AI\n\nAlso! Don’t forget to check the articles below.\n\nHow to cut exact scoring moments from Euro 2024 videos with SQL\n\nBuild A Data Stack That Lasts – How To Ensure Your Data Infrastructure Is Maintainable\n\nHow To Modernize Your Data Strategy And Infrastructure For 2025"
    }
]