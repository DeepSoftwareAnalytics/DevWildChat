[
    {
        "link": "https://stackoverflow.com/questions/72102435/how-to-install-python-3-6-on-ubuntu-22-04",
        "document": "I need to install this specific Python version, to prepare a developer environment, because I'm maintaining a system with multiple libraries based on python 3.6.9. I recently installed Ubuntu 22.04 on my laptop, but I had no success trying to install this python version.\n\nI tried to install with apt-get after adding the deadsnake repository, but this python version is not available.\n\nI tried installing from source by compiling, but it did not work. Running exited with this error:"
    },
    {
        "link": "https://eukhost.com/kb/how-to-install-and-switch-python-versions-on-ubuntu-22-04",
        "document": ""
    },
    {
        "link": "https://phoenixnap.com/kb/how-to-install-python-3-ubuntu",
        "document": "Python is a popular programming language used to write automation and other types of scripts. Python 3, the latest program version, includes performance improvements, new features, security patches, and enhanced compatibility with libraries and tools.\n\nIn this tutorial, you will learn how to install Python 3 on Ubuntu.\n• A system running Ubuntu (this tutorial uses Ubuntu 22.04 or Ubuntu 24.04).\n\nCheck if Python Is Installed on Ubuntu\n\nBefore installing Python 3, check whether you have it on your system. Run the following command:\n\nIf the output shows the version, Python 3 is already installed. You can also see additional information about copyright, license, etc.\n\nIf the command shows an error saying , Python is not installed.\n\nThere are several methods for installing Python on Ubuntu:\n• Via APT. Install the latest version available in the default Ubuntu repository.\n• From source code. Install the latest version from the official Python website.\n• Via PPA. Install Python from the Deadsnakes PPA, a third-party repository designed for Ubuntu.\n\nThe sections below show the process for each installation method.\n\nThis process uses the apt package manager and the default Ubuntu repository to install Python. This method is the easiest but does not always provide the latest version. The latest Python versions are available on the official website or in a third-party repository.\n\nUpdate the package repository to ensure you get the latest available program version. Run the following command:\n\nAfter the package repository information is updated, run the command below to install Python:\n\nVerify whether the installation was successful by checking the program version:\n\nUse this method to download and compile the source code from the official developer. It is a bit more complicated, but the trade-off is accessing a newer Python release.\n\nCompiling a package from source code requires additional software. Run the following command to install the required packages for Python:\n\n1. Navigate to the /tmp directory with the cd command.\n\nThe /tmp directory is often used for downloading source code because it is designated for temporary storage, allowing easy cleanup of downloaded files after installation.\n\n2. Navigate to the official Python source code webpage and select the program version you want to install. Scroll down to the Files section and copy the link to the Gzipped source tarball:\n\n3. Use the wget command and the link above to download the newest release of Python Source Code:\n\nIn this step, extract the tgz file you downloaded. Run the command below:\n\nReplace the version numbers in the tgz file name with the one you have downloaded. The command has no output.\n\nBefore you install the software, make sure you test the system and optimize Python.\n\nSwitch to the directory you extracted the tgz file to, and enter:\n\nThe command evaluates and prepares Python for the installation. Using the option speeds up code execution by 10-20%.\n\nThe process takes some time to complete. Wait until it finishes before moving on to the next step.\n\nAfter the optimization and test are complete, run the make command to build the Python package:\n\nAllow the process to complete.\n\nCheck if the installation is completed correctly by running:\n\nThe command shows the version of the program.\n\nA Personal Package Archive (PPA) is a third-party repository in Ubuntu that offers a convenient way to access and install newer versions of programs that aren't included in the standard Ubuntu repositories.\n\nFollow the steps below to install Python via a PPA:\n\nOpen a terminal window and run the command below:\n\nThe package gives better control over your package manager by letting you add PPA (Personal Package Archive) repositories. Install the supporting software with the command below:\n\nDeadsnakes is a PPA with newer releases than the default Ubuntu repositories. Add the PPA by running the following:\n\nThe system prompts you to press Enter to continue. Update the package lists again once the process completes:\n\nThe Deadsnakes PPA has many Python versions in its database and allows you to install older versions as well. Specify the version in the package name to install that version.\n\nFor example, run this command to install Python 3.12:\n\nThe output states the program version you chose to install.\n\nThis article explained how to install Python 3 on your Ubuntu system. With everything set, you can start with some basics, like getting the current time and date in Python, learning file handling in Python with built-in methods, or using Python struct functions.\n\nNext, consider installing PIP for Python if you haven't already."
    },
    {
        "link": "https://cherryservers.com/blog/install-python-on-ubuntu",
        "document": "This step-by-step guide demonstrates how to install Python3 on Ubuntu 22.04. Afterward, you will also learn how to set up a local Python3 virtual environment and test it using a simple Python program.\n\n#What is Python used for?\n\nPython is a high-level, interactive, and object-oriented programming language developed by Guido van Rossum in 1991. It's a general-purpose and open-source programming language that is used in diverse domains, including Data Science, Machine learning, Artificial Intelligence (AI), and web development, to mention a few.\n\nPython is beginner-friendly thanks to its code-readability and easy-to-learn syntax. It’s also widely used by experienced developers due to its flexibility and great support from a large community of developers.\n\nBefore getting started, here is a list of requirements that you need:\n• SSH access to the server with a sudo user configured.\n\n#How to install Python on Ubuntu 22.04: Step-by-step\n\nFollow the steps below to install Python on Ubuntu 22.04, and set up a local Python 3 virtual environment.\n\nUbuntu 22.04 ships with Python3 out of the box. To confirm this, run the command:\n\nYou should get the following output. Python3.10 comes preinstalled by default on Ubuntu 22.04\n\nIf you want to install the latest Python version, you can use two options: installing from a PPA or from source. Let’s go over each of these methods.\n\nTo get off the ground, update the local package index as shown.\n\nNext, install dependencies that will be required during the installation of Python.\n\nOnce that’s done, add the PPA as follows.\n\nThe command populates information about the PPA as shown below. Take your time and brush over the information provided on your terminal.\n\nThe PPA provides Python 3.7, Python 3.9, and Python 3.11 for Ubuntu 22.04. As discussed earlier, Python 3.10 is provided by Official Ubuntu repositories and is preinstalled by default.\n\nWhen prompted to continue, hit on the keyboard.\n\nOnce the repository is added, update the package lists once again to update the packages index with the newly added PPA.\n\nNext, install Python3.11 using the APT package manager, as shown.\n\nThis installs Python3.11 along with associated Python3.11 libraries.\n\nTo confirm that you have installed Python 3.11, run the command:\n\nThe following output confirms that we have installed the latest version of Python, Python 3.11.4.\n\nInstalling Python from source is the best approach if you want to install the latest version of Python. This is a longer method of installing Python but the most recommended if you intend to install the latest Python release.\n\nAs mentioned earlier, Python 3.11.4 is the latest stable version of Python. The latest version might be different by the time you are reading this guide. For this guide, we will install Python3.11.4 for demonstration.\n\nTo get started, update the local package repository.\n\nNext, install the dependencies required to build and compile Python code, as shown.\n\nNow head over to Python’s download page and download the latest release of Python using the wget command:\n\nOnce downloaded, verify the integrity of the tarball file by checking its MD5 checksum using the command.\n\nThis prints out a checksum, a string that combines letters and digits that act as a fingerprint for the file. This string should match the MD5 checksum on the official website, as shown.\n\nNext, navigate to the uncompressed folder:\n\nThen execute the following command. The command runs a thorough test to check if all the dependencies for installing Python3 are met.\n\nThe option specifies the number of CPU cores on your system.\n\nIn our case, our server instance has 2 CPU cores.\n\nFinally, install the Python binaries as shown. The command ensures that the default Python library on your system is not overwritten.\n\nUpon installation of all the required Python libraries, now confirm the version of Python installed.\n\nThe output below confirms that we have installed Python 3.11.4\n\nA virtual environment provides an isolated space on your system to run Python projects. It ensures that each Python project runs separately from the rest and has its own set of dependencies. This provides greater control over your Python projects and is especially crucial when projects have different sets of requirements.\n\nA virtual environment is essentially a folder with libraries, dependencies, and a few scripts. To set up a virtual environment, start by installing the module.\n\nWith that module installed, you can set up your environment in any directory of your preference. In this case, we will create a new directory and navigate into it.\n\nNext, create a virtual environment using the following command. Here, we are creating an environment called .\n\nYou can view the contents of the virtual environment using the command as shown.\n\nTo activate the virtual environment, run the command shown below.\n\nAfter activating the virtual environment, you will notice that the command prompt is prefixed with the name of your environment enclosed in parentheses, in this case, .\n\nThe prefix shows that the virtual environment is currently active. All the applications created and tested here will be restricted to using this particular environment’s packages, libraries, settings, and scripts.\n\nWith the virtual environment set up, we are going to create a simple Python program that prompts a user to provide two numbers and later sums them up and prints out the result. This will let us test our environment and confirm if we can run Python programs.\n\nTo accomplish this, we'll create a simple Python file using the Nano text editor. Here, our Python file is called ‘addTwoNumbers.py’.\n\nNext, we’ll add the following lines of code, which will define the program for adding two numbers provided by the user.\n\nYou can create just about any Python program you deem fit for testing purposes. Be sure to save the changes by pressing ‘CTRL + O and exit the nano editor by pressing ‘CTRL + Y.\n\nFinally, we will run the program as follows.\n\nFrom the output, you can see that the program runs just as expected and prints out the sum of the numbers provided by the user.\n\nIn this tutorial, we have walked you through how to install Python on Ubuntu 22.04 in various ways. In addition, we have gone a step further and set up a virtual python3 programming environment for running Python programs in isolation from other projects."
    },
    {
        "link": "https://askubuntu.com/questions/865554/how-do-i-install-python-3-6-using-apt-get",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/72102435/how-to-install-python-3-6-on-ubuntu-22-04",
        "document": "I need to install this specific Python version, to prepare a developer environment, because I'm maintaining a system with multiple libraries based on python 3.6.9. I recently installed Ubuntu 22.04 on my laptop, but I had no success trying to install this python version.\n\nI tried to install with apt-get after adding the deadsnake repository, but this python version is not available.\n\nI tried installing from source by compiling, but it did not work. Running exited with this error:"
    },
    {
        "link": "https://askubuntu.com/questions/1413421/how-to-install-older-version-of-python-in-ubuntu-22-04",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://askubuntu.com/questions/1451071/whats-the-default-python-version-in-ubuntu-22-04",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://eukhost.com/kb/how-to-install-and-switch-python-versions-on-ubuntu-22-04",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/74577733/with-python-installed-from-source-cant-install-any-package-with-pip-ssl-module",
        "document": "I'm on Ubuntu 22.04.1 which comes whit its own python3.11, where pip works perfectly. If I install other python versions through apt-get ( ) the related pip works perfectly.\n\nBut I just installed an alternative python version (3.7.9 ) from source (I'm not able to use apt for this python version), doing the following\n\nPython3.7 works fine, but if I try to install any package (using pip3.7 or, after creating a virtualenv based on python3.7, using pip) I get the following warning\n\nFollowed by the error\n\nI'm sure I have Openssl installed because other versions of python don't give probelms with pip (also I can see ssl in the folder ) so the problem seems to be related only on a link between ssl and python installed from source."
    },
    {
        "link": "https://askubuntu.com/questions/1485405/considerations-when-upgrading-ubuntu-from-18-04-to-22-04-software-development",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://reddit.com/r/Ubuntu/comments/11e5ic9/how_to_properly_migrate_python_on_lts_upgrade",
        "document": "I recently performed a LTS upgrade from 20.04.4 to 22.04.2, but I have noticed that many if not all my applications installed in python 3.8 (default on 20.04) were not ported/upgraded to 3.10 (default on 22.04). Python 3.8 got simply erased, although both and are still present. I have asked around and figured out that I most likely should:\n• upgrade all the missing apps/modules to 3.10;\n• erase what is left on 3.8.\n\nNevertheless, I could not find a standard procedure to deal with this issue, and I am not confident enough that the former solution is valid (for sure is highly time consume and prone to errors). Please let me know how it is usually tacked a LTS upgrade for python."
    },
    {
        "link": "https://reddit.com/r/Ubuntu/comments/18xzoic/python_version_upgrade",
        "document": "I’ve be using Ubuntu 22.04 since it was released. Does conical upgrade python version, because right now the latest version is at 3.12 whilst the default version is still at 3.10.6? Or is it our responsibility as users to upgrade or I’m being impatient? Thanks in advance"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/how-to-upgrade-to-ubuntu-22-04-jammy-jellyfish",
        "document": "The Ubuntu operating system’s latest Long Term Support (LTS) release, Ubuntu 22.04 (Jammy Jellyfish), was released on April 21, 2022. This guide will explain how to upgrade an Ubuntu system of version 20.04 or later to Ubuntu 22.04.\n\nWarning: As with almost any upgrade between major releases of an operating system, this process carries an inherent risk of failure, data loss, or broken software configuration. Comprehensive backups and extensive testing are strongly advised. To avoid these problems, we recommend migrating to a fresh Ubuntu 22.04 server rather than upgrading in-place. You may still need to review differences in software configuration when upgrading, but the core system will likely have greater stability. You can follow our series on how to migrate to a new Linux server to learn how to migrate between servers.\n\nThis guide assumes that you have an Ubuntu 20.04 or later system configured with a sudo-enabled non-root user.\n\nAlthough many systems can be upgraded in place without incident, it is often safer and more predictable to migrate to a major new release by installing the distribution from scratch, configuring services with careful testing along the way, and migrating application or user data as a separate step.\n\nYou should never upgrade a production system without first testing all of your deployed software and services against the upgrade in a staging environment. Keep in mind that libraries, languages, and system services may have changed substantially. Before upgrading, consider reading the Jammy Jellyfish Release Notes.\n\nBefore attempting a major upgrade on any system, you should make sure you won’t lose data if the upgrade goes awry. The best way to accomplish this is to make a backup of your entire filesystem. Failing that, ensure that you have copies of user home directories, any custom configuration files, and data stored by services such as relational databases.\n\nOn a DigitalOcean Droplet, one approach is to power down the system and take a snapshot (powering down ensures that the filesystem will be more consistent). See How to Create Snapshots of Droplets for more details on the snapshot process. After you have verified that the Ubuntu update was successful, you can delete the snapshot so that you will no longer be charged for its storage.\n\nFor backup methods which will work on most Ubuntu systems, see How To Choose an Effective Backup Strategy for your VPS.\n\nBefore beginning the release upgrade, it’s safest to update to the latest versions of all packages for the current release. Begin by updating the package list:\n\nNext, upgrade installed packages to their latest available versions:\n\nYou will be shown a list of upgrades, and prompted to continue. Press y to confirm and press Enter.\n\nThis process may take some time. Once it finishes, use the command with , which will perform any additional upgrades that involve changing dependencies, adding or removing new packages as necessary. This will handle a set of upgrades which may have been held back by the previous step:\n\nAgain, answer y when prompted to continue, and wait for upgrades to finish.\n\nNow that you have an up-to-date installation of Ubuntu, you can use to upgrade to the 22.04 release.\n\nTraditionally, Ubuntu releases have been upgradeable by changing Apt’s – which specifies package repositories – and using to perform the upgrade itself. Though this process is still likely to work, Ubuntu provides a tool called to make the upgrade safer and easier.\n\nhandles checking for a new release, updating , and a range of other tasks, and is the officially recommended upgrade path for server upgrades which must be performed over a remote connection.\n\nStart by running with no options:\n\nIf the new Ubuntu version has not been officially released yet, you may get the following output:\n\nNote that on Ubuntu Server, the new LTS release isn’t made available to until its first point release, in this case . This usually comes a few months after the initial release date.\n\nIf you don’t see an available release, add the option to upgrade to the development release:\n\nIf you’re connected to your system over SSH, you’ll be asked whether you wish to continue. For virtual machines or managed servers you should keep in mind that losing SSH connectivity is a risk, particularly if you don’t have another means of remotely connecting to the system’s console (such as a web-based console feature, for example).\n\nFor other systems under your control, remember that it’s safest to perform major operating system upgrades only when you have direct physical access to the machine.\n\nAt the prompt, type y and press Enter to continue:\n\nNext, you’ll be informed that is starting a new instance of on port 1022:\n\nPress . Next, you may be warned that a mirror entry was not found. On DigitalOcean systems, it is safe to ignore this warning and proceed with the upgrade, since a local mirror for 22.04 is in fact available. Enter y:\n\nOnce the new package lists have been downloaded and changes calculated, you’ll be asked if you want to start the upgrade. Again, enter to continue:\n\nYou may receive another warning about not being able to disable a lock screen:\n\nIf you are connecting to a Ubuntu server, rather than a desktop, you can ignore this warning by pressing .\n\nNew packages will now be retrieved, unpacked, and installed. Even if your system is on a fast connection, this will take a while.\n\nDuring the installation, you may be presented with interactive dialogs for various questions. For example, you may be asked if you want to automatically restart services when required:\n\nIn this case, it is safe to answer Yes. In other cases, you may be asked if you wish to replace a configuration file that you have modified. This is often a judgment call, and is likely to require knowledge about specific software that is outside the scope of this tutorial.\n\nOnce new packages have finished installing, you’ll be asked whether you’re ready to remove obsolete packages. On a stock system with no custom configuration, it should be safe to enter y here. On a system you have modified heavily, you may wish to enter d and inspect the list of packages to be removed, in case it includes anything you’ll need to reinstall later.\n\nFinally, assuming all has gone well, you’ll be informed that the upgrade is complete and a restart is required. Enter y to continue:\n\nOn an SSH session, you’ll likely see something like the following:\n\nYou may need to press a key here to exit to your local prompt, since your SSH session will have terminated on the server end.\n\nWait a moment for your server to reboot, then reconnect. On login, you should be greeted by a message confirming that you’re now on Focal Fossa :\n\nYou should now have a working Ubuntu 22.04 installation. From here, you likely need to investigate necessary configuration changes to services and deployed applications.\n\nYou can find more 22.04 tutorials and questions on our Ubuntu 22.04 Tutorials tag page."
    },
    {
        "link": "https://stackoverflow.com/questions/72102435/how-to-install-python-3-6-on-ubuntu-22-04",
        "document": "I need to install this specific Python version, to prepare a developer environment, because I'm maintaining a system with multiple libraries based on python 3.6.9. I recently installed Ubuntu 22.04 on my laptop, but I had no success trying to install this python version.\n\nI tried to install with apt-get after adding the deadsnake repository, but this python version is not available.\n\nI tried installing from source by compiling, but it did not work. Running exited with this error:"
    }
]