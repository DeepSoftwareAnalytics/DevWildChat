[
    {
        "link": "https://support.google.com/docs/answer/3093275?hl=en",
        "document": "Enables the display of values returned from an array formula into multiple rows and/or columns and the use of non-array functions with arrays.\n• - A range, mathematical expression using one cell range or multiple ranges of the same size, or a function that returns a result greater than one cell.\n• Many array formulas will be automatically expanded into neighboring cells, obviating the explicit use of .\n• Pressing Ctrl+Shift+Enter while editing a formula will automatically add to the beginning of the formula.\n• Note that array formulas cannot be exported.\n\n: Constrains an array result to a specified size."
    },
    {
        "link": "https://support.google.com/docs/answer/6208276?hl=en",
        "document": "An array is a table (consisting of rows and columns) of values. If you want to group the values of your cells together in a particular order, you can use arrays in your spreadsheet. Some functions return arrays. For example, returns an array of values by importing the specified range from another spreadsheet. When you write a formula using , you'll see its array result spill over to the cells to the right and below. Any function that takes a range, such as A1:B6, as an input parameter will also accept an array in its place. For example, takes a range as the first parameter to specify the values to plot. You can use the array result of as input.\n\nYou can also create your own arrays in a formula in your spreadsheet by using brackets { }. The brackets allow you to group together values, while you use the following punctuation to determine which order the values are displayed in:\n• Commas: Separate columns to help you write a row of data in an array. For example, would place the number 1 in the first cell and the number 2 in the cell to the right in a new column.\n• Semicolons: Separate rows to help you write a column of data in an array. For example, would place the number 1 in the first cell and the number 2 in the cell below in a new row.\n\nNote: For countries that use commas as decimal separators (for example €1,00), commas would be replaced by backslashes (\\) when creating arrays.\n\nYou can join multiple ranges into one continuous range using this same punctuation. For example, to combine values from A1-A10 with the values from D1-D10, you can use the following formula to create a range in a continuous column: .\n\nYou can also use arrays with other existing formulas using brackets in order to organize the returns from your formulas into rows or columns. For example, will produce two values. The first cell will contain the sum of A1 to A10, the cell to the right will contain the sum of B1 to B10."
    },
    {
        "link": "https://blog.coupler.io/arrayformula-google-sheets",
        "document": "Let’s imagine a situation where you’ve got 2 columns in a Google spreadsheet: the 1st with prices, the 2nd with the number of items, and you need to multiply them in the 3rd column. What do you usually do in this case? If you were like me in the past, you’d compose a formula in the first row and copy-paste it into the other rows. A good old-school method that works fine.\n\nBut what if there are 1000 rows or even more? Annoying, right? Let alone time-consuming. It can also cause a performance issue since a bunch of similar formulas slow down the whole spreadsheet. And, if you need to add a new value and create a separate row for it, Google Sheets will not automatically copy the formula. OK, so what’s the solution here?\n\nActually, there is a dynamic and efficient way to address the discussed issues, and this way is called ARRAYFORMULA. In this article, we’ll explain how you can use it and cover a few cases. If you prefer watching to reading, check out this video tutorial about ARRAYFORMULA in Google Sheets.\n\nWhat is ARRAYFORMULA in Google Sheets?\n\nIn short, ARRAYFORMULA is a function that outputs a range of cells instead of just a single value and can be used with non-array functions.\n\nWell, the definition kills any desire to use the function, but wait, do not jump to a conclusion. It is tremendously useful and easier to use than it sounds in the description.\n\nTo use it in Google Sheets, you can either directly type “ARRAYFORMULA” or hit a Ctrl+Shift+Enter Google Sheets shortcut (Cmd + Shift + Enter on a Mac), while your cursor is in the formula bar to make a formula an array formula (Google Sheets will automatically add ARRAYFORMULA to the start of the formula).\n\nHow does Google Sheets ARRAYFORMULA solve the problems?\n• Since this is one single formula even for a huge dataset, you won’t end up with a lot of formulas, and your Google Sheets will run smoothly.\n• ARRAYFORMULA is also expandable – a change in one place will expand down the entire data range.\n• And it is dynamic as well. When a new row is introduced into the dataset, the formula will automatically be applied to it.\n\nis a parameter that can be\n• a mathematical expression using ranges of the same size, or\n• a function that returns a result greater than one cell\n\nLet’s have a closer look at how the ARRAYFORMULA works. The easiest way to understand this is through an example.\n\nLet’s say we have a dataset showing the quantity of four different products sold in the summer months\n\nand we need to calculate the total amount of sold products.\n\nSure, we could do it by writing a formula in column E that adds B, C, and D.\n\nOr use the SUM function.\n\nTo find the sold quantity of B, C, and D products, you can copy the formula in E2 and then paste it into the cells E3, E4, and E5\n\nand then use SUM at the bottom of column E.\n\nHowever, the ARRAYFORMULA function lets you skip all those steps and get straight to the answer with a single formula, which saves you time and energy if you’ve got 1000+ products.\n\nIn our case we will have\n\nNow, I am adding a new range for Product A1.\n\nARRAYFORMULA takes into account the new range (changes B5 to B6, C5 to C6, D5 to D6 in the formula), and does the calculation, unlike SUM, which is expected for Google Sheets. Now the formula looks as follows:\n\nIf a formula already returns an array of values, wrapping it up with ARRAYFORMULA is not necessary. This means that combining ARRAYFORMULA with, for example, FILTER, SEQUENCE, or QUERY, won’t bring any value.\n\nAt the same time, you cannot benefit from nesting ARRAYFORMULA with many non-array functions including:\n\nHowever, as we mentioned before, ARRAYFORMULA can be used with non-array functions, for example, IF, SUMIF, COUNTIF, VLOOKUP, and others.\n\nWe’ll check out how they work below, but first, let’s get some datasets that we can use as examples. No need to copy and paste data since it’s not efficient and time-consuming. Instead, we can use Coupler.io, a reporting automation solution to automate exports from 50+ sources to Google Sheets. All you have to do is select the needed source and click Proceed in the form below. You can sign up for free with your Google account.\n\nOnce you connect your apps, you can filter, sort, add, and hide columns to organize your data.\n\nNext, configure a data refresh schedule as you like. Taking this step, you’ll get ever-updating, real-time data in Google Sheets for your analytics purposes.\n\nTo remind you, the IF function in Google Sheets works by performing a logical test that can only have one of two outcomes: true or false. Read more about IF and other logical functions in Google Sheets,\n\nLet’s see how to use the IF function and ARRAY on the sales spreadsheet. Consider a standard IF statement that checks whether there are enough (more than 10) items left in stock for next month.\n\nIn cell G2, I’d like to display the text “order” if there are fewer than ten items left in stock, and “no” if the outcome is false.\n\nThe IF function does its calculation and, for this first item, since there are only eight left in stock, the text “order” is displayed.\n\nNow let’s run the test for each item, and this is where a single ARRAYFORMULA comes in handy. Type ARRAYFORMULA before IF, and it runs the IF statement across all the rows at once. Cool, right?\n\nBuilding on the previous example, let’s have a look at how ARRAYFORMULA can be used with SUMIF and SUMIFS Google Sheet functions.\n\nSUMIF and SUMIFS are two independent functions in Google Sheets. SUMIF is used for adding values based on one condition and the purpose of SUMIFS is to sum the values in a range, based on multiple conditions.\n\nSo, let’s code an array formula for SUMIF. Let’s say you need to find out how many stationery items have been already ordered and you apply SUMIF function, which returns you 32 in cell I2.\n\nAnd if you want to know the number of items already ordered for each category, the best way is to apply ARRAYFORMULA, which again will be extremely helpful if you have way too many categories.\n\nWith SUMIFS, things are a little bit more complicated. Its syntax is:\n\nUnlike SUMIF, the SUMIFS function does not expand the results even if you use ARRAYFORMULA with it. The logic is simple, since SUMIFS in Google Sheets returns the sum of an array conditionally, so it can be nothing but a single result.\n\nThe SUMIFS in the above example sums up the amount of “Stationery” items that need to be ordered. And, even if we nest SUMIFS with ARRAYFORMULA, it won’t expand but will return a single result one way or another.\n\nTo solve this expanding issue, one should use alternative formulas. There are several options on how to address SUMIFS-ARRAYFORMULA-expansion issues, and the easiest one is with the help of SUMIF.\n\nActually, the SUMIF function can handle multiple criteria to expand the results, though in a slightly tricky way. The main tip here is to combine ranges and corresponding criteria using AMPERSAND ( ).\n\nAnd, as you can see, it is perfectly expandable.\n\nAnother workaround is to use the combination of ARRAYFORMULA, IF, LEN, VLOOKUP, and QUERY functions. Looks complicated? Well, actually, it is. But the formula works perfectly, no doubt.\n\nCan I use QUERY as an alternative to SUMIFS+ARRAYFORMULA in Google Sheets?\n\nYou may come up with the idea of trying to use something simpler, like QUERY solo, as some other internet resources suggest. Well, we tried to apply the following formula:\n\nAnd logically it should have worked, but it hasn’t as it returns results in random order, which is not user-friendly at all, to say the least. So, if you have no prejudices or limitations about using SUMIF, better check out the Alternative #1.\n\nRead more about the power of QUERY function in Google Sheets.\n\nFor a lot of Google sheets users, mastering VLOOKUP is the turning point. That’s when they are really getting comfortable with many functions and their application.\n\nAnd, if you still haven’t mastered it, open up VLOOKUP by reading our dedicated post VLOOKUP Explained: How to Search Data Vertically in Spreadsheets.\n\nAs you are probably aware, the main limiting problem with VLOOKUP is that it only allows you to look for a single value. However, the real world often requires you to use two or more criteria when looking up data from a database. To vertically lookup multiple criteria, nest VLOOKUP with ARRAYFORMULA:\n\nLet’s have a look at the already-familiar table, assuming we want to search for Item SKU# and return Amount Sold, Price and Category.\n\nSince we need VLOOKUP to return multiple columns, let’s use curly brackets “ ” to indicate the columns we want to return, and apply ARRAYFORMULA, so Google Sheets knows we’re working with a range output, not a single value. My data table is in the range A2:G17 and the search value is in A13, so the formula will be as follows:\n\nIn fact, this is a regular VLOOKUP formula but, instead of a single column, we use an array of columns in curly brackets:\n\nA more traditional use case of VLOOKUP and ARRAYFORMULA in Google Sheets is a vertical lookup.\n\nWith the help of Pipedrive to Google Sheets integration by Coupler.io, we have two sheets. The first one, Countries, contains two columns: Countries and Company name.\n\nThe second sheet, Deal info, contains a few columns with information about deals but the column Country is empty.\n\nWe need to populate this column with values from the Country column on the Countries sheet. This is what the VLOOKUP + ARRAYFORMULA can help us complete.\n\nOnce we insert the following formula in the A2 cell, we’ll get the Country column populated with the values related to the Company name values\n\nNo doubt, the ARRAYFORMULA-VLOOKUP combination, when used properly, is a tool that can save you tons of time and spare you a lot of busy work.\n\nAnother popular and useful function that proves beneficial when you need to find information quickly is the FILTER function. It is used to conditionally filter the specified data range to get the required info. This Google Sheets function has already been explained in the FILTER How-To Guide, but let’s reconsider the application of FILTER with ARRAYFORMULA.\n\nIn the sales spreadsheet, let’s filter out duplicates – in our case, the identical sales numbers. Since there is no direct function in Google Sheets to cope with the task, the optimal workaround will be to use FILTER with UNIQUE, ARRAYFORMULA, and COUNTIF:\n\nAs you can see, the formula meets the challenges and returns one duplicate.\n\nHow to use ARRAYFORMULA to combine columns in Google Sheets\n\nARRAYFORMULA also helps you do manipulation with a text. You can actually combine a text with a text, a text with a number, and a text with a date in Google Sheets and apply ARRAYFORMULA to that combination.\n\nFor example, if we have a list of, let’s say, sales managers, and need to combine the first and last names. To get the name and the surname of the first sales manager, use the following formula:\n\nThe full name appears in a single cell, E2. Read more about Merging Data in Google Sheets.\n\nSo, let’s use the ARRAYFORMULA function to have all the names and surnames coupled.\n\nApplied only in E2, the formula automatically expanded to the other cells below.\n\nWhen you work with the ARRAYFORMULA function, you have to be careful with the array sizes. They should always be the same, for example, F2:F17&G2:G17. Otherwise, Google Sheets won’t carry out the calculation. As an option, not to sweat too much, you may use the infinite range, as we did with SUMIF.\n\nBut, in this case, you may face another challenge – extra blank cells in your formula output. In my instance with ARRAYFORMULA+SUMIF in I2, if there is a limited range of H2:H4, all will work well.\n\nHowever, if you change it to H2:H, SUMIF will treat this range as the one containing the criteria and will sum the column accordingly.\n\nWell, it may spoil the looks, let alone litter up the whole spreadsheet, but, most importantly, when you enter any value in any of those cells, the formula will return a #REF! Error.\n\nAnd this happens not only with SUMIF but with other formulas as well. So, let’s see how to remove them.\n\nHow to remove extra blank cells in ARRAYFORMULA Google Sheets output\n\nSo, to remove extra blank cells returned by ARRAYFORMULA nested with SUMIF in Google Sheets, we can use the FILTER function to filter out blank cells in the criteria that cause the extra zeros and the blank cells correspondingly.\n\nOr, alternatively, you can use IF+LEN and it will do the same job.\n\nBut, unlike the option with FILTER, IF+LEN won’t help to avoid the issue with #REF! Error and will also return it if you enter any value in blank cells, so be careful!\n\nHardly. The Google Sheet ARRAYFORMULA function is a really multi-purpose tool and can be used with many other combinations and applications not covered here. If you have any in mind and want to discuss them, comment below and we’ll elaborate.\n\nAs for now, good luck with your data, and as Ben Collins, Google Sheets developer and data analytics instructor, wrote in his blog, “Hip, Hip Array!”"
    },
    {
        "link": "https://owox.com/blog/articles/array-formulas-google-sheets",
        "document": "ARRAYFORMULA in Google Sheets is a game-changer for data management and analysis. This guide simplifies the process, making it accessible for everyone from spreadsheet fans to business analysts, project managers, and small business owners.\n\nLearn to utilize the power of array formulas to tackle complex data challenges easily and confidently.\n\nTapping into the Power of ARRAYFORMULA in Google Sheets\n\nARRAYFORMULA in Google Sheets is a pivotal feature for anyone who deals with complex data management and analysis. This advanced function enables users to apply a single formula across multiple cells or ranges, automating calculations and transforming the way data is handled. By using ARRAYFORMULA, you can perform multiple calculations over a range of cells within a single, optimized formula, enhancing the efficiency and scalability of your data work.\n\nThe general structure of an ARRAYFORMULA is:\n• array_formula: This is the range of expression over which you want the ARRAYFORMULA to operate. It could be a simple mathematical operation, a complex function, or even a combination of different functions.\n\nThe ARRAYFORMULA lets you apply a formula over a range of cells without having to copy the formula into each cell. This not only saves time but also ensures consistency in your calculations.\n\nFor example, the formula above multiplies values in two columns, saving time and effort.\n• Imagine calculating total sales by multiplying units sold by price per unit for multiple items – ARRAYFORMULA makes this quick and easy.\n\nThe output would look something like this:\n\nSteps to Applying the ARRAYFORMULA in Google Sheets\n\nTo use ARRAYFORMULA in Google Sheets effectively, follow these steps to understand its syntax:\n• Add the formula: Insert the following formula =ARRAYFORMULA to signal Google Sheets that you're using an array formula.\n• Insert your operation: Inside the parentheses, add the operation or calculation you want to perform on your data.\n• Understand the encapsulation: Recognize that this syntax encapsulates your entire formula, allowing it to be applied across a range of cells.\n\nOptimize data processing: Realize that this structure enables bulk operations and the simultaneous application of functions to multiple data points, making your data processing tasks more efficient.\n\n🎥 Dive deeper into the power of ARRAYFORMULA with our comprehensive video tutorial. This visual guide walks you through essential techniques and examples, making it easier to apply ARRAYFORMULA in your Google Sheets projects.\n\nARRAYFORMULA in Google Sheets offers a range of advantages for users seeking efficient and effective data management. In this section, we'll explore the benefits of ARRAYFORMULA, enhancing your ability to work with data seamlessly and boosting productivity.\n\nArray formulas in Google Sheets allow you to perform multiple calculations with just one formula, reducing clutter and error potential. Instead of writing a formula for each row, the ARRAYFORMULA can multiply quantities by unit prices across multiple rows in one go, as in the example before and the one below:\n\nArray formulas automatically adjust to new data. This makes them ideal for datasets that frequently change or expand. For example, imagine you're tracking monthly sales and as you enter new sales data each month, the array formula will look like:\n\nHere, we used a combination of the ARRAYFORMULA and SUMIF function, which is something we’ll cover further in this article.\n\nThe result in cell E3 will update automatically to include these new entries, calculating the total sales from a specific start date without needing any formula adjustments.\n\nArray formulas are dynamic, which means they adapt to dataset changes.\n\nFor example, in project management this formula is going to be super useful:\n\nThis formula automatically updates task statuses. As you add new tasks or update completion dates, the formula reflects these changes instantly. This ensures your project status is always up-to-date, adapting to any additions or modifications in your task list.\n\n\n\nThe output would look something like this:\n\nBefore we explore the specific examples of how the ARRAYFORMULA can revolutionize your data management, we highly recommend downloading the comprehensive Google Sheets template below. It's crafted to complement the article and empower you to practice in real time, solidifying your understanding of each function as you progress. This hands-on approach will ensure you're not just reading, but truly learning and applying each concept effectively.\n\nPractical Ways to Apply ARRAYFORMULA in Google Sheets (With Syntax)\n\nUsing ARRAYFORMULA in Google Sheets can be done by entering the following formula in the appropriate cell. For instance, to add numbers in two columns, you could use:\n\nThis method allows you to perform calculations over a range of cells efficiently.\n\nArray formulas are effective at merging data from various columns into one. Suppose you have a dataset where you're tracking different marketing campaigns. Column B contains the type of campaign (e.g., \"Email\", \"Social Media\"), and Column C contains the specific campaign name or identifier. You want to create a full campaign description in Column E.\n\nThis formula combines the type of campaign and campaign identifier with a dash in between, making data organization neater.\n\n\n\nArray formulas simplify matrix multiplication, allowing you to perform complex calculations between two arrays of numbers efficiently. They turn complex matrix multiplication into a straightforward task.\n\nFor instance, if you have two matrices - say, sales data for different regions in one matrix (B4:C5) and commission rates in another (D4:E5) - you can easily calculate total commissions.\n\nUsing the formula above, the output looks like this:\n\n\n\nIt multiplies corresponding cells from both matrices, giving you a quick view of commissions for each region and product. This method simplifies what would otherwise be a time-consuming process of multiplying each cell pair manually.\n\nUse Cases of ARRAYFORMULA with Other Google Sheets Functions (Including Examples)\n\nIn this section, we’ll explore practical examples, showing you how to seamlessly combine ARRAYFORMULA with other functions in Google Sheets to solve real-world data problems efficiently.\n\nIntegrating IF Function in ARRAYFORMULA for Conditional Operations\n\nWhen we use the IF function in ARRAYFORMULA, it allows us to do conditional data operations. For each item in your array (a collection of data), the IF function checks whether that item meets your condition. If it does, the function can do one thing; if it doesn't, it can do something else.\n\nThis is super handy for sorting through data, doing calculations, or making decisions based on what's in your array. It's like having a smart filter that can automatically decide what to do with each piece of data based on the rules you set.\n\nFor instance, you are an employer, and you wish to calculate bonuses based on the sales performance of employees. If an employee makes sales exceeding $1000, they will receive a 10% bonus; otherwise, it's zero.\n\nSo, the formula would look like this:\n\nThe column E with bonuses is dynamically updated based on the sales amount of each employee. You can see the output below.\n\n\n\nIn Google Sheets, combining ARRAYFORMULA with SUMIF and SUMIFS functions opens up advanced possibilities for summing and analyzing data. These techniques are particularly useful when dealing with large datasets where you need to sum values based on specific conditions.\n\nBy integrating SUMIF into an array formula, you can sum data that meets certain criteria across a range, all in one go.\n\nSuppose you are analyzing the effectiveness of different marketing campaigns set up by your company. As a marketing manager, you want to calculate the total revenue generated in Q1 from campaigns in North America (given the data collected). To achieve this, you can use a combination of SUMIF and ARRAYFORMULA.\n\nIn Google Sheets, the formula will look like this:\n• C3:C16 & F3:F16: This concatenates the 'Region' and 'Quarter' columns into a single array. Each cell in this new array is a combination of the Region and Quarter (e.g., \"North America\" & \"Q1\").\n• SUMIF(C3:C16 & F3:F16, \"North America\"&\"Q1\", E3:E16): The SUMIF function is used here to sum the 'Revenue' (column E) where the concatenated array matches \"North AmericaQ1\".\n• ARRAYFORMULA(...): This is used to enable the processing of the entire range of cells as an array. This is necessary because normally, SUMIF doesn't handle array operations natively.\n\nIn advanced data analysis, SUMIFS combined with an array formula in Google Sheets enables multi-criteria summation, significantly enhancing data handling capabilities. This powerful combination allows for summing data across multiple conditions simultaneously. It's particularly useful for aggregating financial metrics, like campaign budgets or revenues, and sales data, across diverse categories and timeframes, providing deeper insights.\n\nThe SUMIFS Syntax is slightly different from the SUMIF Syntax as given above. The SUMIFS formula returns the sum of a range depending on multiple criteria.\n\nFor example, the formula above sums the values in C3:C11 (sales amount) where B3:B11 (units sold) are 10 or more, and D3:D11 are 20 or less. This method is ideal for more complex situations, like calculating total sales for products within a specific price range and with a minimum sales quantity.\n\n\n\nArray formulas combined with COUNTIF or COUNTIFS offer a potent method to tally cells that meet specific criteria in your dataset.\n\nFor example: In the table showing sales data for Regions 1 and 2, we can determine which product was the most sold in each region using the following formula:\n\nThis gives the outcome, which looks like:\n\n\n\nWe can see that for Region 1, \"Product A\" was the max seller with 4 occurrences, while in Region 2, \"Product B\" took the lead with 3 occurrences. This formula simplifies the process of counting specific product sales across multiple regions, simplifying your data analysis.\n\nNOTE: In this formula, we use curly braces {} to create an array of criteria, where each criterion is enclosed in double quotation marks. This will count the occurrences of \"Product A,\" \"Product B,\" and \"Product C\" in the specified range (C3:D10) and display the results in an array format.\n\nArray formulas, when paired with the FILTER function, empower you to perform advanced data filtering effortlessly. It returns a filtered version of the source range, returning only rows or columns that meet the specified conditions.\n\nImagine you have a sales dataset with multiple criteria like product category and region. To filter products that fall into a specific category (e.g., Electronics) and region (e.g., North), you can use this formula:\n\nThis formula efficiently extracts only the rows where both criteria match, simplifying data analysis.\n\nArray formulas can be tailored to clean up data by ignoring or removing blank cells. Consider a dataset with missing values in Column A. To filter out these blanks:\n\nThis formula leaves you with a cleaner dataset for analysis.\n\nIf you want to do a bulk lookup, you’ll need to combine VLOOKUP and ARRAYFORMULA functions to handle multiple lookup values at once. It is like having a super tool for handling big lists of lookup values simultaneously. Imagine you've got a huge pile of data and need to find specific bits of information based on different search terms. That's where this combo shines.\n\nLet’s explore a detailed explanation of VLOOKUP and an example to illustrate this concept.\n\nVLOOKUP stands for vertical lookup. It searches down the first column of a range for a key and returns the value of a specified cell in the row found. It also has other variations, like VLOOKUP with IF Statement and so on. Its basic syntax is VLOOKUP(search_key, range, index, [is_sorted]).\n\nNow, suppose you have a chosen list of employee IDs and you want to find their corresponding Departments and Names.\n\nThe formula for finding the Departments would be:\n\nThis formula will look up each ID in the range F4:F10 in the dataset range B3:D16 and return the department (which is in the 3rd column of the dataset) for each ID.\n\nSimilarly, it can return the Names of the people with the ID number input using the formula:\n• The IF Statement part checks if there is an ID entered in each cell of F14 through F16. If there's no ID (the cell is empty), it will leave the corresponding cell in column G empty.\n• The VLOOKUP function that looks up each ID from F14 through F16 in the range B3 to D16 and returns the corresponding department from the third column. It does so similarly for the Name column.\n\nNote: Make sure that the range you specify in the formula matches the actual range of your data in the Google Sheets. If your data range is different, adjust the formula accordingly.\n\nThe concatenation formula in spreadsheets, typically using the & operator or the CONCATENATE function, lets you combine text from multiple cells into a single string. This makes the data easier to read and format.\n\nARRAYFORMULA offers creative text concatenation. Say you have product names in Column A and descriptions in Column B. To combine them use this formula:\n• This part of the formula \" - \" & B3:B11 & \": \" & C3:C11 concatenates the product name from Column A with the description from Column B.\n• The last part of the formula CHAR(10) adds a newline character at the end of each concatenated string. It’s the newline character in Google Sheets.\n\nThe result would look like this:\n\n💡If manual data merging is proving cumbersome, consider exploring tools that automate text concatenation and eliminate the constraints of standard methods. Check out our complete guide on using CONCATENATE for seamless text integration and simplification in your data workflows.\n• Break Down Complex Formulas: Simplify the formula by breaking it into smaller parts. This can help isolate the part of the formula causing the error.\n• Check Data Types: Ensure that the data types (text, numbers, etc.) match what the formula expects.\n• Review Cell References: Ensure that all cell references are correct and that the cells contain the expected data.\n• Use Error Checking Tools: Google Sheets provides error-checking features that can help identify and explain errors in formulas.\n• Consult Documentation: If unsure about a function's usage, consult Google Sheets' documentation or help forums for guidance.\n\nBy understanding the nature of these common errors and applying these solutions, you can effectively troubleshoot and resolve issues in your Array Formulas in Google Sheets, leading to more accurate and efficient data analysis and calculations.\n\nThis is common in complex formulas where there's an issue with numerical calculations, such as division by zero or taking square roots for negative numbers.\n\nChecking the formula for valid numeric operations is crucial. Here's how you can approach it:\n• Locate the Issue: Check your formula for operations like division or square roots that could cause errors.\n• Avoid Division by Zero: Use an IF statement to prevent division when the denominator is zero, providing an alternative outcome instead.\n• Ensure Positive Square Roots: Incorporate a condition to confirm inputs for SQRT are non-negative, offering a different calculation if not applicable.\n• Apply Error-Handling Functions: Employ functions like IFERROR or ISERROR to manage and substitute errors with predefined values or actions.\n\nThis error indicates a reference issue, often occurring when a formula refers to a cell that no longer exists. The key here is to adjust the formula to reference existing cells or ranges.\n• Review Formula References: Carefully inspect the formula to ensure all referenced cells or ranges exist within your spreadsheet.\n• Update References: Modify any references in the formula to point to the correct, existing cells or ranges.\n• Use Defined Names: Consider using defined names for ranges, which can help prevent reference errors if cells are moved or deleted.\n• By attentively managing and updating your references, you can eliminate the #REF! error and ensure your array formulas function as intended.\n\nOften seen in lookup functions, this error happens when the function can't find a result. Using IFERROR with VLOOKUP can provide a default value or message in such cases.\n• Verify Lookup Value: Ensure the value you're searching for exists in the lookup range.\n• Correct Range Reference: Double-check that your lookup range is correctly specified.\n• Implement IFERROR: Use the IFERROR function around your lookup formula to specify an alternative output, like a default value or a custom message, when the #N/A error occurs.\n\nThis general error can result from various issues like syntax errors or incorrect function use.\n• Check Syntax: Revisit your formula to ensure correct syntax, paying close attention to parentheses, commas, and other formula components.\n• Validate Function Use: Confirm that all functions are used correctly, with appropriate arguments, and in the correct context.\n• Utilize Formula Auditing Tools: Most spreadsheet applications offer tools to audit and debug formulas. Leverage these to identify and rectify errors in your formulations.\n\nTo enhance Google Sheets performance with ARRAYFORMULA, limit your formula ranges for faster processing and simplify complex formulas for smoother calculations, ensuring a more efficient data management experience.\n\nRather than applying array formulas to entire columns (e.g., A:A), confine them to the specific range where your data resides (e.g., A1:A100). This strategic limitation reduces the computational load and significantly enhances Google Sheets' performance, particularly with large datasets.\n\nSimplify complex array formulas by breaking them into smaller, manageable components. This enhances calculation speed and facilitates easier debugging, making your spreadsheet more efficient and user-friendly.\n\nOptimize Google Sheets performance in array formulas by minimizing volatile functions such as NOW(), TODAY(), RAND(), and INDIRECT(). These functions trigger frequent recalculations, so use them sparingly to maintain efficient data processing.\n\nTo efficiently manage errors in your array formulas, enclose them in IFERROR(). This prevents the entire formula from recalculating if it encounters an error, ensuring smoother data analysis while maintaining formula integrity.\n\nIn certain scenarios, with specific data manipulation or analysis tasks, it's essential to consider alternative approaches that might outperform traditional array formulas. Functions like FILTER(), QUERY(), and VLOOKUP() can provide more efficient solutions in such cases.\n\nImprove data processing by opting for IFS() or SWITCH() functions over intricate nested IF() statements. These alternatives enhance both the readability and performance of conditional calculations.\n\nThere are a few more useful Google Sheets formulas like:\n• UNIQUE: Helps you pick out unique items from a list, so you don't count the same thing twice.\n• IMPORT Functions: These functions are used to grab data from different sources or formats and bring it into your spreadsheet.\n• PIVOT Table: A robust utility that seamlessly compiles, structures, and sifts through voluminous datasets, facilitating effortless extraction of insights and trends.\n• QUERY: Empowers users to undertake intricate data tasks via a SQL-esque syntax, enabling direct within-spreadsheet filtration, ordering, and compilation.\n• SEARCH: Locates the position of a substring within a text string, making it easier to find specific data points.\n• MATCH: Identifies the relative position of a specified value within a range, facilitating the alignment and comparison of data.\n\nWhile ARRAYFORMULA is a valuable function for data analysts using Google Sheets, it comes with its limitations and requires a considerable amount of manual setup. For those seeking to bypass these constraints and enhance efficiency, the OWOX: Reports, Charts & Pivots Extension presents a robust solution.\n\nDiscover how OWOX Reports Extension for Google Sheets can transform your Google Sheets data management, offering sophisticated insights and detailed analysis. This tool enhances the capabilities of Google Sheets, particularly when working with complex datasets and array formulas, providing deeper insights and streamlined data analysis processes.\n\nOur guide demystifies the use of ARRAYFORMULA in Google Sheets, empowering you to refine your data management and analytical prowess. Ideal for business analysts, project managers, or small business owners, mastering the use of array formulas with the help of OWOX: Reports, Charts & Pivots Extension will significantly boost your competency in data manipulation and decision-making."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/guidelines-and-examples-of-array-formulas-7d94a64e-3ff3-4686-9372-ecfd5caa57c7",
        "document": "This exercise shows you how to use multi-cell and single-cell array formulas to calculate a set of sales figures. The first set of steps uses a multi-cell formula to calculate a set of subtotals. The second set uses a single-cell formula to calculate a grand total.\n• Here we're calculating Total Sales of coupes and sedans for each salesperson by entering =F10:F19*G10:G19 in cell H10. When you press Enter, you'll see the results spill down to cells H10:H19. Notice that the spill range is highlighted with a border when you select any cell within the spill range. You might also notice that the formulas in cells H10:H19 are grayed out. They’re just there for reference, so if you want to adjust the formula, you’ll need to select cell H10, where the master formula lives.\n• In cell H20 of the example workbook, type or copy and paste =SUM(F10:F19*G10:G19), and then press Enter. In this case, Excel multiplies the values in the array (the cell range F10 through G19), and then uses the SUM function to add the totals together. The result is a grand total of $1,590,000 in sales. This example shows how powerful this type of formula can be. For example, suppose you have 1,000 rows of data. You can sum part or all of that data by creating an array formula in a single cell instead of dragging the formula down through the 1,000 rows. Also, notice that the single-cell formula in cell H20 is completely independent of the multi-cell formula (the formula in cells H10 through H19). This is another advantage of using array formulas — flexibility. You could change the other formulas in column H without affecting the formula in H20. It can also be good practice to have independent totals like this, as it helps validate the accuracy of your results.\n• \n• Consistency If you click any of the cells from H10 downward, you see the same formula. That consistency can help ensure greater accuracy.\n• Safety You can't overwrite a component of a multi-cell array formula. For example, click cell H11 and press Delete. Excel won’t change the array’s output. To change it, you need to select the top-left cell in the array, or cell H10.\n• Smaller file sizes You can often use a single array formula instead of several intermediate formulas. For example, the car sales example uses one array formula to calculate the results in column E. If you had used standard formulas such as =F10*G10, F11*G11, F12*G12, etc., you would have used 11 different formulas to calculate the same results. That’s not a big deal, but what if you had thousands of rows to total? Then it can make a big difference.\n• Efficiency Array functions can be an efficient way to build complex formulas. The array formula =SUM(F10:F19*G10:G19) is the same as this: =SUM(F10*G10,F11*G11,F12*G12,F13*G13,F14*G14,F15*G15,F16*G16,F17*G17,F18*G18,F19*G19).\n• Spilling Dynamic array formulas will automatically spill into the output range. If your source data is in an Excel table, then your dynamic array formulas will automatically resize as you add or remove data.\n• #SPILL! error Dynamic arrays introduced the #SPILL! error, which indicates that the intended spill range is blocked for some reason. When you resolve the blockage, the formula will automatically spill. Array constants are a component of array formulas. You create array constants by entering a list of items and then manually surrounding the list with braces ({ }), like this: If you separate the items by using commas, you create a horizontal array (a row). If you separate the items by using semicolons, you create a vertical array (a column). To create a two-dimensional array, you delimit the items in each row with commas, and delimit each row with semicolons. The following procedures will give you some practice in creating horizontal, vertical, and two-dimensional constants. We’ll show examples using the SEQUENCE function to automatically generate array constants, as well as manually entered array constants.\n• Use the workbook from the previous examples, or create a new workbook. Select any empty cell and enter =SEQUENCE(1,5). The SEQUENCE function builds a 1 row by 5 column array the same as ={1,2,3,4,5}. The following result is displayed:\n• Select any blank cell with room beneath it, and enter =SEQUENCE(5), or ={1;2;3;4;5}. The following result is displayed:\n• Select any blank cell with room to the right and beneath it, and enter =SEQUENCE(3,4). You see the following result: You can also enter: or ={1,2,3,4;5,6,7,8;9,10,11,12}, but you'll want to pay attention to where you put semi-colons versus commas. As you can see, the SEQUENCE option offers significant advantages over manually entering your array constant values. Primarily, it saves you time, but it can also help reduce errors from manual entry. It’s also easier to read, especially as the semi-colons can be hard to distinguish from the comma separators. Here's an example that uses array constants as part of a bigger formula. In the sample workbook, go to the Constant in a formula worksheet, or create a new worksheet. In cell D9, we entered =SEQUENCE(1,5,3,1), but you could also enter 3, 4, 5, 6, and 7 in cells A9:H9. There's nothing special about that particular number selection, we just chose something other than 1-5 for differentiation. In cell E11, enter =SUM(D9:H9*SEQUENCE(1,5)), or =SUM(D9:H9*{1,2,3,4,5}). The formulas return 85. The SEQUENCE function builds the equivalent of the array constant {1,2,3,4,5}. Because Excel performs operations on expressions enclosed in parentheses first, the next two elements that come into play are the cell values in D9:H9, and the multiplication operator (*). At this point, the formula multiplies the values in the stored array by the corresponding values in the constant. It's the equivalent of: Finally, the SUM function adds the values, and returns 85. To avoid using the stored array and keep the operation entirely in memory, you can replace it with another array constant: Elements that you can use in array constants\n• Array constants can contain numbers, text, logical values (such as TRUE and FALSE), and error values such as #N/A. You can use numbers in integer, decimal, and scientific formats. If you include text, you need to surround it with quotation marks (\"text”).\n• Array constants can't contain additional arrays, formulas, or functions. In other words, they can contain only text or numbers that are separated by commas or semicolons. Excel displays a warning message when you enter a formula such as {1,2,A1:D4} or {1,2,SUM(Q2:Z8)}. Also, numeric values can't contain percent signs, dollar signs, commas, or parentheses. One of the best ways to use array constants is to name them. Named constants can be much easier to use, and they can hide some of the complexity of your array formulas from others. To name an array constant and use it in a formula, do the following: Go to Formulas > Defined Names > Define Name. In the Name box, type Quarter1. In the Refers to box, enter the following constant (remember to type the braces manually): The dialog box should now look like this: Click OK, then select any row with three blank cells, and enter =Quarter1. The following result is displayed: If you want the results to spill vertically instead of horizontally, you can use =TRANSPOSE(Quarter1). If you want to display a list of 12 months, like you might use when building a financial statement, you can base one off the current year with the SEQUENCE function. The neat thing about this function is that even though only the month is displaying, there is a valid date behind it that you can use in other calculations. You’ll find these examples on the Named array constant and Quick sample dataset worksheets in the example workbook. This uses the DATE function to create a date based on the current year, SEQUENCE creates an array constant from 1 to 12 for January through December, then the TEXT function converts the display format to \"mmm\" (Jan, Feb, Mar, etc.). If you wanted to display the full month name, such as January, you'd use \"mmmm\". When you use a named constant as an array formula, remember to enter the equal sign, as in =Quarter1, not just Quarter1. If you don't, Excel interprets the array as a string of text and your formula won't work as expected. Finally, keep in mind that you can use combinations of functions, text and numbers. It all depends on how creative you want to get. The following examples demonstrate a few of the ways in which you can put array constants to use in array formulas. Some of the examples use the TRANSPOSE function to convert rows to columns and vice versa.\n• Multiple each item in an array You can also divide with (/), add with (+), and subtract with (-).\n• Square the items in an array\n• Find the square root of squared items in an array\n• Even though you entered a horizontal array constant, the TRANSPOSE function converts the array constant into a column.\n• Even though you entered a vertical array constant, the TRANSPOSE function converts the constant into a row.\n• The TRANSPOSE function converts each row into a series of columns. This section provides examples of basic array formulas.\n• The following example explains how to use array formulas to create a new array from an existing array. Be sure to type { (opening brace) before you type 10, and } (closing brace) after you type 180, because you're creating an array of numbers. Next, enter =D9#, or =D9:I11 in a blank cell. A 3 x 6 array of cells appears with the same values you see in D9:D11. The # sign is called the spilled range operator, and it’s Excel’s way of referencing the entire array range instead of having to type it out.\n• You can take the results of a spilled array formula and convert that into its component parts. Select cell D9, then press F2 to switch to edit mode. Next, press F9 to convert the cell references to values, which Excel then converts into an array constant. When you press Enter, the formula, =D9#, should now be ={10,20,30;40,50,60;70,80,90}.\n• The following example shows you how to count the number of characters in a range of cells. This includes spaces. In this case, the LEN function returns the length of each text string in each of the cells in the range. The SUM function then adds those values together and displays the result (66). If you wanted to get average number of characters, you could use:\n• This formula works only when a data range contains a single column of cells. Let's take a closer look at the formula, starting from the inner elements and working outward. The LEN function returns the length of each of the items in the cell range D2:D6. The MAX function calculates the largest value among those items, which corresponds to the longest text string, which is in cell D3. Here's where things get a little complex. The MATCH function calculates the offset (the relative position) of the cell that contains the longest text string. To do that, it requires three arguments: a lookup value, a lookup array, and a match type. The MATCH function searches the lookup array for the specified lookup value. In this case, the lookup value is the longest text string: and that string resides in this array: The match type argument in this case is 0. The match type can be a 1, 0, or -1 value.\n• 1 - returns the largest value that is less than or equal to the lookup val\n• 0 - returns the first value exactly equal to the lookup value\n• -1 - returns the smallest value that is greater than or equal to the specified lookup value Finally, the INDEX function takes these arguments: an array, and a row and column number within that array. The cell range C9:C13 provides the array, the MATCH function provides the cell address, and the final argument (1) specifies that the value comes from the first column in the array. If you wanted to get the contents of the smallest text string, you would replace MAX in the above example with MIN.\n• This example shows how to find the three smallest values in a range of cells, where an array of sample data in cells B9:B18has been created with: =INT(RANDARRAY(10,1)*100). Note that RANDARRAY is a volatile function, so you’ll get a new set of random numbers each time Excel calculates. This formula uses an array constant to evaluate the SMALL function three times and return the smallest 3 members in the array that’s contained in cells B9:B18, where 3 is a variable value in cell D9. To find more values, you can increase the value in the SEQUENCE function, or add more arguments to the constant. You can also use additional functions with this formula, such as SUM or AVERAGE. For example:\n• To find the largest values in a range, you can replace the SMALL function with the LARGE function. In addition, the following example uses the ROW and INDIRECT functions. At this point, it may help to know a bit about the ROW and INDIRECT functions. You can use the ROW function to create an array of consecutive integers. For example, select an empty and enter: The formula creates a column of 10 consecutive integers. To see a potential problem, insert a row above the range that contains the array formula (that is, above row 1). Excel adjusts the row references, and the formula now generates integers from 2 to 11. To fix that problem, you add the INDIRECT function to the formula: The INDIRECT function uses text strings as its arguments (which is why the range 1:10 is surrounded by quotation marks). Excel does not adjust text values when you insert rows or otherwise move the array formula. As a result, the ROW function always generates the array of integers that you want. You could just as easily use SEQUENCE: Let's examine the formula that you used earlier — =LARGE(B9#,ROW(INDIRECT(\"1:3\"))) — starting from the inner parentheses and working outward: The INDIRECT function returns a set of text values, in this case the values 1 through 3. The ROW function in turn generates a three-cell column array. The LARGE function uses the values in the cell range B9:B18, and it is evaluated three times, once for each reference returned by the ROW function. If you want to find more values, you add a greater cell range to the INDIRECT function. Finally, as with the SMALL examples, you can use this formula with other functions, such as SUM and AVERAGE.\n• The SUM function in Excel does not work when you try to sum a range that contains an error value, such as #VALUE! or #N/A. This example shows you how to sum the values in a range named Data that contains errors:\n• The formula creates a new array that contains the original values minus any error values. Starting from the inner functions and working outward, the ISERROR function searches the cell range (Data) for errors. The IF function returns a specific value if a condition you specify evaluates to TRUE and another value if it evaluates to FALSE. In this case, it returns empty strings (\"\") for all error values because they evaluate to TRUE, and it returns the remaining values from the range (Data) because they evaluate to FALSE, meaning that they don't contain error values. The SUM function then calculates the total for the filtered array.\n• Count the number of error values in a range This example is like the previous formula, but it returns the number of error values in a range named Data instead of filtering them out: This formula creates an array that contains the value 1 for the cells that contain errors and the value 0 for the cells that don't contain errors. You can simplify the formula and achieve the same result by removing the third argument for the IF function, like this: If you don't specify the argument, the IF function returns FALSE if a cell does not contain an error value. You can simplify the formula even more: This version works because TRUE*1=1 and FALSE*1=0. You might need to sum values based on conditions. For example, this array formula sums just the positive integers in a range named Sales, which represents cells E9:E24 in the example above: The IF function creates an array of positive and false values. The SUM function essentially ignores the false values because 0+0=0. The cell range that you use in this formula can consist of any number of rows and columns. You can also sum values that meet more than one condition. For example, this array formula calculates values greater than 0 AND less than 2500: Keep in mind that this formula returns an error if the range contains one or more non-numeric cells. You can also create array formulas that use a type of OR condition. For example, you can sum values that are greater than 0 OR less than 2500: You can't use the AND and OR functions in array formulas directly because those functions return a single result, either TRUE or FALSE, and array functions require arrays of results. You can work around the problem by using the logic shown in the previous formula. In other words, you perform math operations, such as addition or multiplication on values that meet the OR or AND condition. This example shows you how to remove zeros from a range when you need to average the values in that range. The formula uses a data range named Sales: The IF function creates an array of values that do not equal 0 and then passes those values to the AVERAGE function. Count the number of differences between two ranges of cells This array formula compares the values in two ranges of cells named MyData and YourData and returns the number of differences between the two. If the contents of the two ranges are identical, the formula returns 0. To use this formula, the cell ranges need to be the same size and of the same dimension. For example, if MyData is a range of 3 rows by 5 columns, YourData must also be 3 rows by 5 columns: The formula creates a new array of the same size as the ranges that you are comparing. The IF function fills the array with the value 0 and the value 1 (0 for mismatches and 1 for identical cells). The SUM function then returns the sum of the values in the array. You can simplify the formula like this: Like the formula that counts error values in a range, this formula works because TRUE*1=1, and FALSE*1=0. This array formula returns the row number of the maximum value in a single-column range named Data: The IF function creates a new array that corresponds to the range named Data. If a corresponding cell contains the maximum value in the range, the array contains the row number. Otherwise, the array contains an empty string (\"\"). The MIN function uses the new array as its second argument and returns the smallest value, which corresponds to the row number of the maximum value in Data. If the range named Data contains identical maximum values, the formula returns the row of the first value. If you want to return the actual cell address of a maximum value, use this formula: You'll find similar examples in the sample workbook on the Differences between datasets worksheet.\n\nThis exercise shows you how to use multi-cell and single-cell array formulas to calculate a set of sales figures. The first set of steps uses a multi-cell formula to calculate a set of subtotals. The second set uses a single-cell formula to calculate a grand total. Copy the entire table below and paste it into cell A1 in a blank worksheet.\n• To see Total Sales of coupes and sedans for each salesperson, select cells E2:E11, enter the formula =C2:C11*D2:D11, and then press Ctrl+Shift+Enter.\n• To see the Grand Total of all sales, select cell F11, enter the formula =SUM(C2:C11*D2:D11), and then press Ctrl+Shift+Enter. When you press Ctrl+Shift+Enter, Excel surrounds the formula with braces ({ }) and inserts an instance of the formula in each cell of the selected range. This happens very quickly, so what you see in column E is the total sales amount for each car type for each salesperson. If you select E2, then select E3, E4, and so on, you'll see that the same formula is shown: {=C2:C11*D2:D11}. In cell D13 of the workbook, type the following formula, and then press Ctrl+Shift+Enter: In this case, Excel multiplies the values in the array (the cell range C2 through D11) and then uses the SUM function to add the totals together. The result is a grand total of $1,590,000 in sales. This example shows how powerful this type of formula can be. For example, suppose you have 1,000 rows of data. You can sum part or all of that data by creating an array formula in a single cell instead of dragging the formula down through the 1,000 rows. Also, notice that the single-cell formula in cell D13 is completely independent of the multi-cell formula (the formula in cells E2 through E11). This is another advantage of using array formulas — flexibility. You could change the formulas in column E or delete that column altogether, without affecting the formula in D13.\n• Consistency If you click any of the cells from E2 downward, you see the same formula. That consistency can help ensure greater accuracy.\n• Safety You cannot overwrite a component of a multi-cell array formula. For example, click cell E3 and press Delete. You have to either select the entire range of cells (E2 through E11) and change the formula for the entire array, or leave the array as is. As an added safety measure, you have to press Ctrl+Shift+Enter to confirm any change to the formula.\n• Smaller file sizes You can often use a single array formula instead of several intermediate formulas. For example, the workbook uses one array formula to calculate the results in column E. If you had used standard formulas (such as =C2*D2, C3*D3, C4*D4…), you would have used 11 different formulas to calculate the same results. In general, array formulas use standard formula syntax. They all begin with an equal (=) sign, and you can use most of the built-in Excel functions in your array formulas. The key difference is that when using an array formula, you press Ctrl+Shift+Enter to enter your formula. When you do this, Excel surrounds your array formula with braces — if you type the braces manually, your formula will be converted to a text string, and it won't work. Array functions can be an efficient way to build complex formulas. The array formula =SUM(C2:C11*D2:D11) is the same as this: =SUM(C2*D2,C3*D3,C4*D4,C5*D5,C6*D6,C7*D7,C8*D8,C9*D9,C10*D10,C11*D11). Important: Press Ctrl+Shift+Enter whenever you need to enter an array formula. This applies to both single-cell and multi-cell formulas. Whenever you work with multi-cell formulas, also remember:\n• Select the range of cells to hold your results before you enter the formula. You did this when you created the multi-cell array formula when you selected cells E2 through E11.\n• You can't change the contents of an individual cell in an array formula. To try this, select cell E3 in the workbook and press Delete. Excel displays a message that tells you that you can't change part of an array.\n• You can move or delete an entire array formula, but you can't move or delete part of it. In other words, to shrink an array formula, you first delete the existing formula and then start over.\n• To delete an array formula, select the entire formula range (for example, E2:E11), then press Delete.\n• You can't insert blank cells into, or delete cells from a multi-cell array formula. At times, you may need to expand an array formula. Select the first cell in existing array range, and continue until you've selected the entire range that you want to extend the formula to. Press F2 to edit the formula, then press CTRL+SHIFT+ENTER to confirm the formula once you've adjusted the formula range. The key is to select the entire range, starting with the top-left cell in the array. The top-left cell is the one that gets edited. Array formulas are great, but they can have some disadvantages:\n• You may occasionally forget to press Ctrl+Shift+Enter. It can happen to even the most experienced Excel users. Remember to press this key combination whenever you enter or edit an array formula.\n• Other users of your workbook might not understand your formulas. In practice, array formulas are generally not explained in a worksheet. Therefore, if other people need to modify your workbooks, you should either avoid array formulas or make sure those people know about any array formulas and understand how to change them, if they need to.\n• Depending on the processing speed and memory of your computer, large array formulas can slow down calculations. Array constants are a component of array formulas. You create array constants by entering a list of items and then manually surrounding the list with braces ({ }), like this: By now, you know you need to press Ctrl+Shift+Enter when you create array formulas. Because array constants are a component of array formulas, you surround the constants with braces by manually typing them. You then use Ctrl+Shift+Enter to enter the entire formula. If you separate the items by using commas, you create a horizontal array (a row). If you separate the items by using semicolons, you create a vertical array (a column). To create a two-dimensional array, you delimit the items in each row by using commas and delimit each row by using semicolons. Here's an array in a single row: {1,2,3,4}. Here's an array in a single column: {1;2;3;4}. And here's an array of two rows and four columns: {1,2,3,4;5,6,7,8}. In the two row array, the first row is 1, 2, 3, and 4, and the second row is 5, 6, 7, and 8. A single semicolon separates the two rows, between 4 and 5. As with array formulas, you can use array constants with most of the built-in functions that Excel provides. The following sections explain how to create each kind of constant and how to use these constants with functions in Excel. The following procedures will give you some practice in creating horizontal, vertical, and two-dimensional constants.\n• In the formula bar, enter the following formula, and then press Ctrl+Shift+Enter: In this case, you should type the opening and closing braces ({ }), and Excel will add the second set for you. The following result is displayed.\n• In your workbook, select a column of five cells.\n• In the formula bar, enter the following formula, and then press Ctrl+Shift+Enter: The following result is displayed.\n• In your workbook, select a block of cells four columns wide by three rows high.\n• In the formula bar, enter the following formula, and then press Ctrl+Shift+Enter: You see the following result: Here is a simple example that uses constants:\n• In the sample workbook, create a new worksheet.\n• In cell A1, type 3, and then type 4 in B1, 5 in C1, 6 in D1, and 7 in E1.\n• In cell A3, type the following formula, and then press Ctrl+Shift+Enter: Notice that Excel surrounds the constant with another set of braces, because you entered it as an array formula. The value 85 appears in cell A3. The next section explains how the formula works. The formula you just used contains several parts. The last element inside the parentheses is the array constant: {1,2,3,4,5}. Remember that Excel does not surround array constants with braces; you actually type them. Also remember that after you add a constant to an array formula, you press Ctrl+Shift+Enter to enter the formula. Because Excel performs operations on expressions enclosed in parentheses first, the next two elements that come into play are the values stored in the workbook (A1:E1) and the operator. At this point, the formula multiplies the values in the stored array by the corresponding values in the constant. It's the equivalent of: Finally, the SUM function adds the values, and the sum 85 appears in cell A3. To avoid using the stored array and to just keep the operation entirely in memory, replace the stored array with another array constant: To try this, copy the function, select a blank cell in your workbook, paste the formula into the formula bar, and then press Ctrl+Shift+Enter. You'll see the same result as you did in the earlier exercise that used the array formula: Elements that you can use in constants Array constants can contain numbers, text, logical values (such as TRUE and FALSE), and error values ( such as #N/A). You can use numbers in the integer, decimal, and scientific formats. If you include text, you need to surround the text with quotation marks (\"). Array constants can't contain additional arrays, formulas, or functions. In other words, they can contain only text or numbers that are separated by commas or semicolons. Excel displays a warning message when you enter a formula such as {1,2,A1:D4} or {1,2,SUM(Q2:Z8)}. Also, numeric values can't contain percent signs, dollar signs, commas, or parentheses. One of the best way to use array constants is to name them. Named constants can be much easier to use, and they can hide some of the complexity of your array formulas from others. To name an array constant and use it in a formula, do the following:\n• On the Formulas tab, in the Defined Names group, click Define Name.\n\n The Define Name dialog box appears.\n• In the Name box, type Quarter1.\n• In the Refers to box, enter the following constant (remember to type the braces manually): The contents of the dialog box now looks like this:\n• Click OK, and then select a row of three blank cells.\n• Type the following formula, and then press Ctrl+Shift+Enter. The following result is displayed. When you use a named constant as an array formula, remember to enter the equal sign. If you don't, Excel interprets the array as a string of text and your formula won't work as expected. Finally, keep in mind that you can use combinations of text and numbers. Look for the following problems when your array constants don't work:\n• Some elements might not be separated with the proper character. If you omit a comma or semicolon, or if you put one in the wrong place, the array constant might not be created correctly, or you might see a warning message.\n• You might have selected a range of cells that doesn't match the number of elements in your constant. For example, if you select a column of six cells for use with a five-cell constant, the #N/A error value appears in the empty cell. Conversely, if you select too few cells, Excel omits the values that don't have a corresponding cell. The following examples demonstrate a few of the ways in which you can put array constants to use in array formulas. Some of the examples use the TRANSPOSE function to convert rows to columns and vice versa. Multiply each item in an array\n• Create a new worksheet, and then select a block of empty cells four columns wide by three rows high.\n• Type the following formula, and then press Ctrl+Shift+Enter: Square the items in an array\n• Select a block of empty cells four columns wide by three rows high.\n• Type the following array formula, and then press Ctrl+Shift+Enter: Alternatively, enter this array formula, which uses the caret operator (^):\n• Type the following formula, and then press Ctrl+Shift+Enter: Even though you entered a horizontal array constant, the TRANSPOSE function converts the array constant into a column.\n• Enter the following formula, and then press Ctrl+Shift+Enter: Even though you entered a vertical array constant, the TRANSPOSE function converts the constant into a row.\n• Select a block of cells three columns wide by four rows high.\n• Enter the following constant, and then press Ctrl+Shift+Enter: The TRANSPOSE function converts each row into a series of columns. This section provides examples of basic array formulas. The following example explains how to use array formulas to create links between ranges of cells in different worksheets. It also shows you how to create an array constant from the same set of values.\n• On a worksheet in Excel, select cells C8:E10, and enter this formula: Be sure to type { (opening brace) before you type 10, and } (closing brace) after you type 90, because you're creating an array of numbers.\n• Press Ctrl+Shift+Enter, which enters this array of numbers in the cell range C8:E10 by using an array formula. On your worksheet, C8 through E10 should look like this:\n• Enter the following formula in the formula bar, and then press Ctrl+Shift+Enter: A 3x3 array of cells appears in cells C1 through E3 with the same values you see in C8 through E10.\n• With cells C1:C3 selected, press F2 to switch to edit mode.\n• Press F9 to convert the cell references to values. Excel converts the values into an array constant. The formula should now be ={10,20,30;40,50,60;70,80,90}.\n• Press Ctrl+Shift+Enter to enter the array constant as an array formula. The following example shows you how to count the number of characters, including spaces, in a range of cells.\n• Copy this entire table and paste into a worksheet in cell A1.\n• Select cell A8, and then press Ctrl+Shift+Enter to see the total number of characters in cells A2:A6 (66).\n• Select cell A10, and then press Ctrl+Shift+Enter to see the contents of the longest of cells A2:A6 (cell A3). The following formula is used in cell A8 counts the total number of characters (66) in cells A2 through A6. In this case, the LEN function returns the length of each text string in each of the cells in the range. The SUM function then adds those values together and displays the result (66). This example shows how to find the three smallest values in a range of cells.\n• Select cells C1 through C3. This set of cells will hold the results returned by the array formula.\n• Enter the following formula, and then press Ctrl+Shift+Enter: This formula uses an array constant to evaluate the SMALL function three times and return the smallest (1), second smallest (2), and third smallest (3) members in the array that is contained in cells A1:A10 To find more values, you add more arguments to the constant. You can also use additional functions with this formula, such as SUM or AVERAGE. For example: To find the largest values in a range, you can replace the SMALL function with the LARGE function. In addition, the following example uses the ROW and INDIRECT functions.\n• In the formula bar, enter this formula, and then press Ctrl+Shift+Enter: At this point, it may help to know a bit about the ROW and INDIRECT functions. You can use the ROW function to create an array of consecutive integers. For example, select an empty column of 10 cells in your practice workbook, enter this array formula, and then press Ctrl+Shift+Enter: The formula creates a column of 10 consecutive integers. To see a potential problem, insert a row above the range that contains the array formula (that is, above row 1). Excel adjusts the row references, and the formula generates integers from 2 to 11. To fix that problem, you add the INDIRECT function to the formula: The INDIRECT function uses text strings as its arguments (which is why the range 1:10 is surrounded by double quotation marks). Excel does not adjust text values when you insert rows or otherwise move the array formula. As a result, the ROW function always generates the array of integers that you want. Let's take a look at the formula that you used earlier — =LARGE(A5:A14,ROW(INDIRECT(\"1:3\"))) — starting from the inner parentheses and working outward: The INDIRECT function returns a set of text values, in this case the values 1 through 3. The ROW function in turn generates a three-cell columnar array. The LARGE function uses the values in the cell range A5:A14, and it is evaluated three times, once for each reference returned by the ROW function. The values 3200, 2700, and 2000 are returned to the three-cell columnar array. If you want to find more values, you add a greater cell range to the INDIRECT function. As with earlier examples, you can use this formula with other functions, such as SUM and AVERAGE. Find the longest text string in a range of cells Go back to the earlier text string example, enter the following formula in an empty cell, and press Ctrl+Shift+Enter: The text \"bunch of cells that\" appears. Let's take a closer look at the formula, starting from the inner elements and working outward. The LEN function returns the length of each of the items in the cell range A2:A6. The MAX function calculates the largest value among those items, which corresponds to the longest text string, which is in cell A3. Here's where things get a little complex. The MATCH function calculates the offset (the relative position) of the cell that contains the longest text string. To do that, it requires three arguments: a lookup value, a lookup array, and a match type. The MATCH function searches the lookup array for the specified lookup value. In this case, the lookup value is the longest text string: and that string resides in this array: The match type argument is 0. The match type can consist of a 1, 0, or -1 value. If you specify 1, MATCH returns the largest value that is less than or equal to the lookup value. If you specify 0, MATCH returns the first value exactly equal to the lookup value. If you specify -1, MATCH finds the smallest value that is greater than or equal to the specified lookup value. If you omit a match type, Excel assumes 1. Finally, the INDEX function takes these arguments: an array, and a row and column number within that array. The cell range A2:A6 provides the array, the MATCH function provides the cell address, and the final argument (1) specifies that the value comes from the first column in the array. This section provides examples of advanced array formulas. The SUM function in Excel does not work when you try to sum a range that contains an error value, such as #N/A. This example shows you how to sum the values in a range named Data that contains errors. The formula creates a new array that contains the original values minus any error values. Starting from the inner functions and working outward, the ISERROR function searches the cell range (Data) for errors. The IF function returns a specific value if a condition you specify evaluates to TRUE and another value if it evaluates to FALSE. In this case, it returns empty strings (\"\") for all error values because they evaluate to TRUE, and it returns the remaining values from the range (Data) because they evaluate to FALSE, meaning that they don't contain error values. The SUM function then calculates the total for the filtered array. Count the number of error values in a range This example is similar to the previous formula, but it returns the number of error values in a range named Data instead of filtering them out: This formula creates an array that contains the value 1 for the cells that contain errors and the value 0 for the cells that don't contain errors. You can simplify the formula and achieve the same result by removing the third argument for the IF function, like this: If you don't specify the argument, the IF function returns FALSE if a cell does not contain an error value. You can simplify the formula even more: This version works because TRUE*1=1 and FALSE*1=0. You might need to sum values based on conditions. For example, this array formula sums just the positive integers in a range named Sales: The IF function creates an array of positive values and false values. The SUM function essentially ignores the false values because 0+0=0. The cell range that you use in this formula can consist of any number of rows and columns. You can also sum values that meet more than one condition. For example, this array formula calculates values greater than 0 and less than or equal to 5: Keep in mind that this formula returns an error if the range contains one or more non-numeric cells. You can also create array formulas that use a type of OR condition. For example, you can sum values that are less than 5 and greater than 15: The IF function finds all values smaller than 5 and greater than 15 and then passes those values to the SUM function. You can't use the AND and OR functions in array formulas directly because those functions return a single result, either TRUE or FALSE, and array functions require arrays of results. You can work around the problem by using the logic shown in the previous formula. In other words, you perform math operations, such as addition or multiplication, on values that meet the OR or AND condition. This example shows you how to remove zeros from a range when you need to average the values in that range. The formula uses a data range named Sales: The IF function creates an array of values that do not equal 0 and then passes those values to the AVERAGE function. Count the number of differences between two ranges of cells This array formula compares the values in two ranges of cells named MyData and YourData and returns the number of differences between the two. If the contents of the two ranges are identical, the formula returns 0. To use this formula, the cell ranges need to be the same size and of the same dimension (for example, if MyData is a range of 3 rows by 5 columns, YourData must also be 3 rows by 5 columns): The formula creates a new array of the same size as the ranges that you are comparing. The IF function fills the array with the value 0 and the value 1 (0 for mismatches and 1 for identical cells). The SUM function then returns the sum of the values in the array. You can simplify the formula like this: Like the formula that counts error values in a range, this formula works because TRUE*1=1, and FALSE*1=0. Find the location of the maximum value in a range This array formula returns the row number of the maximum value in a single-column range named Data: The IF function creates a new array that corresponds to the range named Data. If a corresponding cell contains the maximum value in the range, the array contains the row number. Otherwise, the array contains an empty string (\"\"). The MIN function uses the new array as its second argument and returns the smallest value, which corresponds to the row number of the maximum value in Data. If the range named Data contains identical maximum values, the formula returns the row of the first value. If you want to return the actual cell address of a maximum value, use this formula:"
    },
    {
        "link": "https://coefficient.io/iferror-google-sheets",
        "document": "This guide to IFERROR in Google Sheets will show you how to detect and contain broken formulas so they don’t disrupt your spreadsheet.\n\nRead the following blog to learn how to use IFERROR in Google Sheets, through easy-to-follow examples and step-by-step walkthroughs.\n\nVideo Walkthrough: How to Use IFERROR in Google Sheets\n\nWhat the IFERROR Function Does in Google Sheets\n\nThe IFERROR function is designed to identify and replace errors in your Google spreadsheet with preset values.\n\nIFERROR wraps around a formula in Google Sheets, and ascertains if the formula is incapable of executing correctly.\n\nIf the formula returns any errors, the function returns a preset value that you’ve specified, or blank text. The IFERROR function is mainly used for:\n• Managing arguments or parameters in an ARRAYFORMULA\n\nIFERROR is leveraged for a wide variety of reasons, with use cases as diverse as:\n\nUltimately, IFERROR helps ensure that your spreadsheet workflows operate seamlessly, whether you’re generating monthly marketing reports or building sales dashboards in Google Sheets.\n\nTypes of Google Sheets Errors — And Why They Matter\n\nThe IFERROR function returns a specified value when a formula contains a parse error. A parse error occurs when Google Sheets can’t interpret or perform a formula operation.\n\nIn Google Sheets, parse errors are formal objects that can be leveraged by functions such as IFERROR. Parse errors can transpire due to typos, mathematical impossibilities, or any other issues that obstruct a formula.\n\nBefore you can deal with parse errors using the IFERROR function, you need to know the various error types and what they mean. Read about the common error codes that Google Sheets returns below.\n\nA #REF error in Google Sheets occurs when a formula contains an invalid reference, including:\n\nAn #N/A error in Google Sheets means that a specific value is not available. This happens when a function tries to leverage an inaccessible cell.\n\nThe error typically occurs in lookup functions, VLOOKUP. Read our ultimate guide to VLOOKUP in Google Sheets to learn more about this lookup function.\n\nA function usually returns a #NAME? error in Google Sheets when there are problems with a formula’s syntax.\n\nThe error could be caused by a wrong name range, spelling mistake, or the misuse of quotes within a parameter value.\n\nIn Google Sheets, formulas that try to divide by zero will return the DIV/0! error. Dividing a number by zero is mathematically impossible, prompting Google Sheets to terminate the formula’s execution.\n\nThe #VALUE error code transpires when a parameter within your formula is a type that the function does not expect.\n\nFor example, if you use a number parameter in a function that only accepts text, the function will return a #VALUE error message.\n\nGoogle Sheets returns the #ERROR! message when it can’t determine what’s wrong with the formula. This allows Google Sheets to flag faulty formulas, even if it can’t pinpoint the specific error.\n\nThe #ERROR! message can occur when:\n• An important operator is missing in the formula\n• There are unequal numbers of opening and closing brackets in a formula\n• There’s an equal sign at the beginning of a text that isn’t a formula\n\nA function returns a #NUM! error when the formula contains invalid numeric values.\n\nFor instance, this error can occur when a function returns a number too big for Google Sheets to process, or when it tries to find the square root of a negative number.\n\nLet’s break down how the syntax works.\n• test_value is the cell reference, formula, or value the function tests for errors\n• value_if_error is the value returned if test_value finds an error. It’s an optional parameter.\n\nThe IFERROR function returns test_value if it does not contain an error. If there is an error with test_value, the function returns value_if_error. If value_if_error is unspecified, the function returns a blank value.\n\nHow to Use IFERROR in Google Sheets\n\nBefore discussing use cases for IFERROR, let’s set up sample data to work with. We’ll use Coefficient to pull real-time data from HubSpot into Google Sheets.\n\nFor a full walkthrough on how to do this, read our blog: how to connect HubSpot to Google Sheets.\n\nCoefficient runs as a Google Sheets add-on that lets you pull live data from your business systems into Google Sheets in seconds.\n\nNow that we have a dataset in the spreadsheet, let’s review various examples for the IFERROR function.\n\nExample 1: Return a Value Instead of an Error Code\n\nThe IFERROR function can return preset values instead of error codes. This is the most common use of the function.\n\nHere’s an example. In the dataset below, the calculation returns a #DIV/0! Error, because it tries to divide by zero (cell E6).\n\nIf you want to return a blank value instead of the #DIV/0! error code, use the following IFERROR formula:\n\nYou can also use an IFERROR formula to return preset text instead of a blank cell. For instance, the formula below will return the text “None” when the calculation returns an error value.\n\nYou can also use Coefficient’s free Formula Builder to automatically create the formulas in this first example. To use Formula Builder, you need to install Coefficient. The install process takes less than a minute.\n\nWe’ll outline how to install Coefficient from the Google Workspace Marketplace. Or you can skip the marketplace altogether, and get started for free right from our website.\n\nFirst, click Extensions from the Google Sheets menu. Choose Add-ons -> Get add-ons. This will display the Google Workspace Marketplace. Here a direct link to Coefficient’s Google Workspace Marketplace listing.\n\nSearch for “Coefficient”. Click on the Coefficient app in the search results.\n\nAccept the prompts to install. Once the installation is finished, return to Extensions on the Google Sheets menu. Coefficient will be available as an add-on.\n\nNow launch the app. Coefficient will run on the sidebar of your Google Sheet. Select GPT Copilot on the Coefficient sidebar.\n\nType a description of a formula into the text box. For this example, type: Divide cell E6 by F6, and if there’s an error, return “None”.\n\nThen press ‘Build’. Formula Builder will automatically generate the formula from the first example.\n\nExample 2: VLOOKUP Cannot Find a Lookup Value\n\nA VLOOKUP function returns a #N/A! Error when it can’t find the lookup value. However, you can use the IFERROR function to return a preset value instead of the error message.\n\nIn the example below, cell E3 displays an #N/A error, since the VLOOKUP formula can’t find the lookup value in the B3:C18 cell range.\n\nUse the formula below in cell E3 to return “Not in List” instead of the #N/A error code.\n\nYou can also use the IFNA function instead of an IFERROR formula. If the error is #N/A, the IFNA function returns the value you’ve specified.\n\nExample 3: Use IFERROR in ArrayFormulas\n\nThe IFERROR function is helpful when you’re using the Array Formula function in Google Sheets.\n\nIn the example below, we’ve used an array formula to quickly divide the values in column E with those in column D.\n\nThis gives us all the results of column F in just one formula.\n\nYou’ll notice that the row six result (cell F6) shows a #DIV/0! error since you are trying to divide by the cell value in D6, which is zero.\n\nHere’s the solution: wrap the Array Formula inside the IFERROR function, like this:\n\nThis formula applies the IFERROR function to every value within the returned array. Now you’ll see a blank cell in F6 instead of the error.\n\nLimitations of the IFERROR function in Google Sheets\n\nThe IFERROR function is a generic solution to all formula and operations errors in Google Sheets.\n\nThe downside of the function is that it doesn’t differentiate the various error messages and treats them all the same.\n\nWhether you get a #VALUE or #REF! error, the IFERROR function will always return the same value_if_error.\n\nThis can make troubleshooting the errors challenging for other users, since they won’t know the type of error they’re dealing with.\n\nIn the same sense, the IFERROR function can also hide errors, since spreadsheet users will only see the value_if_error specified.\n\nOther Formulas Similar to IFERROR in Google Sheets\n\nBesides the IFERROR function, you can use similar formulas to ensure that errors don’t disrupt your spreadsheets, including:\n• IFNA: =IFNA(value, value_if_na). The IFNA function returns the first argument’s value if it’s not null and returns the second argument’s value if the first argument is null.\n• IF Statement: =IF(logical_expression, value_if_true, value_if_false). The IF function returns the first argument’s value if it’s not false, and the second argument’s value if the first argument is false.\n\nKeep Your Spreadsheets Running Smoothly with the IFERROR Function\n\nUsing IFERROR in Google Sheets is one of the most efficient ways to handle errors in your spreadsheet formulas.\n\nThe IFERROR function has limitations, but in general it’s a useful way to keep spreadsheet operations and analysis running smoothly.\n\nAnd now you can combine IFERROR with live data from your company systems using Coefficient for seamless data analysis.\n\nTry Coefficient for free now to import real-time data from Salesforce, HubSpot, and other business systems into Google Sheets."
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-iferror-function-formula-examples",
        "document": "The tutorial shows how to use IFERROR in Excel to catch errors and replace them with a blank cell, another value or a custom message. You will learn how to use the IFERROR function with Vlookup and Index Match, and how it compares to IF ISERROR and IFNA.\n\n\"Give me the place to stand, and I shall move the earth,\" Archimedes once said. \"Give me a formula, and I shall make it return an error,\" an Excel user would say. In this tutorial, we won't be looking at how to return errors in Excel, we'd rather learn how to prevent them in order to keep your worksheets clean and your formulas transparent.\n\nThe IFERROR function in Excel is designed to trap and manage errors in formulas and calculations. More specifically, IFERROR checks a formula, and if it evaluates to an error, returns another value you specify; otherwise, returns the result of the formula. The syntax of the Excel IFERROR function is as follows:\n• Value (required) - what to check for errors. It can be a formula, expression, value, or cell reference.\n• Value_if_error (required) - what to return if an error is found. It can be an empty string (blank cell), text message, numeric value, another formula or calculation. For example, when dividing two columns of numbers, you may get a bunch of different errors if one of the columns contains empty cells, zeros or text.\n\n To prevent that from happening, use the IFERROR function to catch and handle errors the way you want. Supply an empty string (\") to the value_if_error argument to return a blank cell if an error is found: You can also display your own message instead of Excel's standard error notation: 5 things you should know about Excel IFERROR function\n• The IFERROR function in Excel handles all error types including #DIV/0!, #N/A, #NAME?, #NULL!, #NUM!, #REF!, and #VALUE!.\n• Depending on the contents of the value_if_error argument, IFERROR can replace errors with your custom text message, number, date or logical value, the result of another formula, or an empty string (blank cell).\n• If the value argument is a blank cell, it is treated as an empty string (''') but not an error.\n• IFERROR was introduced in Excel 2007 and is available in all subsequent versions of Excel 2010, Excel 2013, Excel 2016, Excel 2019, Excel 2021, and Excel 365.\n• To trap errors in Excel 2003 and earlier versions, use the ISERROR function in combination with IF, as shown in this example.\n\nThe following examples show how to use IFERROR in Excel in combination with other functions to accomplish more complex tasks. One of the most common uses of the IFERROR function is telling the users that the value they are searching for does not exist in the data set. For this, you wrap a VLOOKUP formula in IFERROR like this: If the lookup value is not in the table you are looking in, a regular Vlookup formula would return the #N/A error:\n\n For your users' piece of mind, wrap VLOOKUP in IFERROR and display a more informative and user-friendly message: The screenshot below shows this Iferror formula in Excel:\n\n If you'd like to trap only #N/A errors but not all errors, use the IFNA function instead of IFERROR. For more Excel IFERROR VLOOKUP formula examples, please check out these tutorials:\n• Iferror with Vlookup to trap and handle errors\n• How to get Nth occurrence of lookup value\n• How to get all occurrences of lookup value Nested IFERROR functions to do sequential Vlookups in Excel In situations when you need to perform multiple Vlookups based on whether the previous Vlookup succeeded or failed, you can nest two or more IFERROR functions one into another. Supposing you have a number of sales reports from regional branches of your company, and you want to get an amount for a certain order ID. With A2 as the lookup value in the current sheet, and A2:B5 as the lookup range in 3 lookup sheets (Report 1, Report 2 and Report 3), the formula goes as follows: The result will look something similar to this:\n\n For the detailed explanation of the formula's logic, please see How to do sequential Vlookups in Excel.\n\n As you probably know, array formulas in Excel are meant to perform multiple calculations within a single formula. If you supply an array formula or expression that results in an array in the value argument of the IFERROR function, it'd return an array of values for each cell in the specified range. The below example shows the details. Let's say, you have Total in column B and Price in column C, and you want to calculate Total Quantity. This can be done by using the following array formula, which divides each cell in the range B2:B4 by the corresponding cell of the range C2:C4, and then adds up the results: The formula works fine as long as the divisor range does not have zeros or empty cells. If there is at least one 0 value or blank cell, the #DIV/0! error is returned:\n\n To fix that error, simply do the division within the IFERROR function: What the formula does is to divide a value in column B by a value in column C in each row (100/2, 200/5 and 0/0) and return the array of results {50; 40; #DIV/0!}. The IFERROR function catches all #DIV/0! errors and replaces them with zeros. And then, the SUM function adds up the values in the resulting array {50; 40; 0} and outputs the final result (50+40=90).\n\n Note. Please remember that array formulas should be completed by pressing the Ctrl + Shift + Enter shortcut.\n\nNow that you know how easy it is to use the IFERROR function in Excel, you may wonder why some people still lean towards using the IF ISERROR combination. Does it have any advantages compared to IFERROR? None. In the bad old days of Excel 2003 and lower when IFERROR did not exist, IF ISERROR was the only possible way to trap errors. In Excel 2007 and later, it's just a bit more complex way to achieve the same result. For instance, to catch Vlookup errors, you can use either of the below formulas. Notice that in the IF ISERROR VLOOKUP formula, you have to Vlookup twice. In plain English, the formula can be read as follows: If Vlookup results in error, return \"Not found\", otherwise output the Vlookup result. And here is a real-life example of an Excel If Iserror Vlookup formula: For more information, please see Using ISERROR function in Excel.\n\n\n\nIntroduced with Excel 2013, IFNA is one more function to check a formula for errors. Its syntax is similar to that of IFERROR: In what way is IFNA different from IFERROR? The IFNA function catches only #N/A errors while IFERROR handles all error types. In which situations you may want to use IFNA? When it is unwise to disguise all errors. For example, when working with important or sensitive data, you may want to be alerted about possible faults in your data set, and standard Excel error messages with the \"#\" symbol could be vivid visual indicators. Let's see how you can make a formula that displays the \"Not found\" message instead of the N/A error, which appears when the lookup value is not present in the data set, but brings other Excel errors to your attention. Supposing you want to pull Qty. from the lookup table to the summary table as shown in the screenshot below. Using the Excel Iferror Vlookup formula would produce an aesthetically pleasing result, which is technically incorrect because Lemons do exist in the lookup table:\n\n To catch #N/A but display the #DIV/0 error, use the IFNA function in Excel 2013 and Excel 2016: Or, the IF ISNA combination in Excel 2010 and earlier versions: The syntax of the IFNA VLOOKUP and IF ISNA VLOOKUP formulas are similar to that of IFERROR VLOOKUP and IF ISERROR VLOOKUP discussed earlier. As shown in the screenshot below, the Ifna Vlookup formula returns \"Not found\" only for the item that is not present in the lookup table (Peaches). For Lemons, it shows #DIV/0! indicating that our lookup table contains a divide by zero error:\n\n For more details, please see Using IFNA function in Excel.\n\n\n\nBest practices for using IFERROR in Excel By now you already know that the IFERROR function is the easiest way to catch errors in Excel and mask them with blank cells, zero values, or custom messages of your own. However, that does not mean you should wrap each and every formula with error handling. The following simple recommendations may help you keep the balance.\n• Wrap the smallest possible part of a formula in IFERROR.\n• To handle only specific errors, use an error handling function with a smaller scope:\n• IFNA or IF ISNA to catch only #N/A errors.\n• ISERR to catch all errors except for #N/A. This is how you use the IFERROR function in Excel to trap and handle errors. To have a closer look at the formulas discussed in this tutorial, you are welcome to download our sample IFERROR Excel workbook. I thank you for reading and hope to see you on our blog next week."
    },
    {
        "link": "https://blog.sheetgo.com/google-sheets-formulas/iferror-formula-google-sheets",
        "document": "Note: This post was originally published in our community forum. Looking to supercharge your..."
    },
    {
        "link": "https://skills.ai/blog/mastering-iferror-function-in-google-sheets",
        "document": "In the realm of Google Sheets, managing errors efficiently is crucial for maintaining the integrity of data analysis and reporting. The IFERROR function emerges as a powerful tool, allowing users to gracefully handle errors by specifying a custom output whenever an error is encountered. This article delves deep into the intricacies of the IFERROR function, aiming to equip Google Sheets users with the knowledge to leverage this function fully.\n• Overview of the IFERROR function in Google Sheets\n\nBefore diving into the practical applications, it's essential to grasp what the IFERROR function is and how it operates within Google Sheets. This foundational knowledge sets the stage for more advanced utilization. The IFERROR function is a powerful tool designed to streamline workflows and enhance data analysis by efficiently handling errors. Understanding its mechanics, applications, and nuances will empower users to leverage Google Sheets to its fullest potential.\n\nThe IFERROR function in Google Sheets is a versatile tool that detects and handles errors, allowing users to specify an alternative action or value if an error is encountered. Its syntax is straightforward: where:\n• is the expression or formula being evaluated.\n• is the value to return if an error is detected; this parameter is optional and defaults to a blank cell if omitted.\n\nFor instance, would return \"Error in calculation\" because dividing by zero triggers an #DIV/0! error. This simple yet effective mechanism ensures that spreadsheets remain clean and user-friendly, even when unexpected errors arise.\n\nAt its core, IFERROR operates by continuously monitoring the evaluation of the given formula or expression for errors. When it detects an error, it immediately substitutes the error with the user-defined value or action. Consider a scenario where you're calculating the average sales from a dataset that might include empty cells: . Here, IFERROR ensures that instead of displaying an error due to empty cells or invalid data, it presents a more informative and user-friendly message, \"No data\". This function thus acts as a safety net, preventing errors from disrupting the flow of data analysis and reporting.\n\nGoogle Sheets can display a variety of errors, each indicating a specific issue. Understanding these errors is crucial for effective error management with IFERROR. Common errors include:\n• #DIV/0!: Occurs when a number is divided by zero.\n• #N/A: Signifies that a value is not available to a formula or function.\n• #VALUE!: Indicates that the wrong type of argument or operand has been used.\n\nBy recognizing these errors, users can tailor their use of IFERROR to address specific issues. For example, effectively handles the #N/A error by providing a \"Not Found\" message when a VLOOKUP does not return a result. This not only improves the readability of your spreadsheets but also enhances error diagnostics.\n\nWith a foundational grasp of the IFERROR function's mechanics, we're now poised to delve into its practical deployment across a spectrum of real-world scenarios. This segment furnishes a meticulous, step-by-step manual on leveraging IFERROR, transitioning from elementary to more intricate applications. Whether you're aiming to refine your spreadsheet's resilience against errors or seeking to enhance data analysis through strategic formula combinations, this guide is your compass.\n\nDiving into IFERROR begins with understanding its most straightforward application - safeguarding your Google Sheets from common errors. Imagine a scenario where you're dividing numbers, but want to avoid the infamous error.\n\nIn this formula, if divided by results in any error, graciously replaces it with a custom message, \"Error in Calculation\". This not only keeps your sheets clean but also improves readability by signalling exactly where issues lie, without disrupting the user's experience.\n\nThe true versatility of IFERROR shines when it's paired with other Google Sheets functions. Consider combining it with VLOOKUP to fetch data without stumbling over errors when a lookup value is missing.\n\nThis formula attempts to locate 's value within the range . If unsuccessful, instead of the default error, it gracefully presents \"Not Found\". Such strategic combinations not only elevate error handling but significantly bolster data analysis capabilities, enabling seamless data retrieval and interpretation.\n\nBeyond conventional applications, IFERROR can unlock a realm of creativity within your spreadsheets. Imagine using it to create a dynamic drop-down list that adjusts based on available data, circumventing errors when referenced ranges are empty.\n\nConsider a scenario where you're dynamically pulling a list of names based on a specific criterion using QUERY or FILTER functions. Wrapping these functions within IFERROR allows you to provide a fallback option, such as \"Data not available\", ensuring your interface remains user-friendly and informative, even when underlying data is in flux.\n\nHarnessing IFERROR in such innovative ways not only streamlines data management but also enhances user interaction with your sheets, making data exploration both an error-free and engaging experience.\n\nIn the realm of Google Sheets, mastering the IFERROR function is akin to having a Swiss Army knife for data management. Its versatility in handling errors not only keeps your spreadsheets clean but also ensures the integrity of your data analysis. This section delves into common scenarios where IFERROR becomes an indispensable tool, underscoring its value in error-free reporting, data validation, and formula debugging.\n\nCreating reports that are both informative and professional is paramount in any business setting. The IFERROR function acts as your first line of defense against unexpected errors that can tarnish the credibility of your reports. Imagine a scenario where you're calculating the average sales per region, but some regions have no sales data yet, leading to a #DIV/0! error.\n\nBy wrapping this formula with IFERROR, you can display a more professional 'Data Not Available' message instead of an error code.\n\nThis approach not only keeps your reports looking clean but also communicates issues more effectively to stakeholders.\n\nEfficiently managing and cleaning data is crucial for any data-driven decision-making process. IFERROR shines brightly in this domain by streamlining data validation and cleanup processes. Consider you’re using a VLOOKUP to match product IDs from two different lists, but not all IDs find a match, leading to the infamous #N/A error.\n\nWith IFERROR, you can replace these errors with a clear indicator such as 'ID Not Found', simplifying the subsequent data cleanup and validation.\n\nThis method not only aids in identifying mismatches quickly but also facilitates a smoother data validation process, ensuring your datasets are accurate and reliable.\n\nNavigating through complex formulas can be daunting, especially when they start throwing errors at you. IFERROR becomes a powerful ally in debugging these formulas by isolating errors and managing them effectively. Imagine you have a complex formula combining multiple nested functions, and it’s returning an error. Pinpointing the source can be like finding a needle in a haystack.\n\nBy strategically placing IFERROR around different segments of your formula, you can identify which part is failing. For instance:\n\nThis technique allows you to isolate and address errors in a controlled manner, making the debugging process less of a headache and more of a strategic problem-solving exercise. It ensures that each part of your formula is error-free, paving the way for accurate and reliable data analysis.\n\nMastering the IFERROR function in Google Sheets goes beyond just knowing its basic applications. It entails uncovering and applying advanced strategies to enhance your spreadsheets' resilience and efficiency. This section delves into optimizing performance, utilizing nested IFERROR functions, and avoiding common pitfalls, ensuring you leverage IFERROR's full potential for cleaner, more reliable data management.\n\nUsing IFERROR in Google Sheets should not come at the cost of performance, especially in large and complex spreadsheets. Here are some tips to maintain efficiency:\n• Minimize Usage in Large Data Sets: Use IFERROR selectively, especially when working with extensive data arrays. Excessive use can slow down calculations.\n• Combine with Array Formulas: Instead of applying IFERROR to individual cells, combine it with array formulas to process large data sets more efficiently. For example, processes 100 calculations in a single, more performance-friendly step.\n• Pre-Calculate Where Possible: Perform calculations outside of the IFERROR function when feasible. This reduces the computational load, as IFERROR only needs to handle the final result rather than processing the entire calculation.\n\nImplementing these strategies ensures that your use of IFERROR contributes to, rather than detracts from, the overall performance of your Google Sheets projects.\n\nIn complex spreadsheets, a single formula might encounter multiple types of errors. Nested IFERROR functions provide a robust solution:\n• Sequential Error Handling: You can nest IFERROR functions to handle different errors with specific responses. For example, tries the first formula, then the second if the first fails, and finally returns a custom message if both fail.\n• Layered Validation: Nesting allows for layered validation checks, useful in data processing and cleansing. Each layer can address a specific error type or data inconsistency, ensuring thorough data validation.\n\nThe key to successful nesting is maintaining clarity and avoiding over-complication, which could otherwise lead to difficult-to-debug formulas.\n\nWhile IFERROR is incredibly useful, it's essential to use it wisely to avoid common pitfalls:\n• Overuse: Relying too heavily on IFERROR can mask underlying problems in your data or formulas. Use it as a last resort rather than a first response.\n• Error Masking: Be careful not to hide errors that need attention. For instance, a formula error that returns #VALUE! might indicate a deeper issue that IFERROR would simply mask.\n• Performance Impact: As mentioned, unnecessary or excessive use of IFERROR can impact spreadsheet performance. Be strategic in its application.\n\nBy being mindful of these pitfalls and employing IFERROR judiciously, you can ensure its benefits are fully realized without unintended consequences.\n\nEven for the seasoned Google Sheets user, the IFERROR function can sometimes present challenges that obscure data accuracy or mask underlying issues. This section delves into strategies for identifying and resolving these challenges, ensuring your spreadsheets remain both functional and insightful.\n\nIdentifying Errors Masked by IFERROR involves a keen eye and a strategic approach. While IFERROR is invaluable for cleaner presentations, it can inadvertently conceal errors that need addressing. Consider a scenario where a formula might return #DIV/0!, but IFERROR replaces it with a more palatable \"N/A\" or a zero. To unearth these hidden errors:\n• Use Conditional Formatting: Highlight cells that may contain hidden errors by setting up rules that detect unusually high or low values, or specific text strings like \"N/A\".\n• Temporary Toggle: Temporarily replace IFERROR with IF to see what errors emerge. For instance, can reveal underlying issues.\n\nBy adopting these strategies, you ensure a robust data analysis process, leveraging IFERROR without sacrificing accuracy.\n\nHandling Complex Errors that surpass the straightforward application of IFERROR requires a deeper understanding of both the errors and the data. Complex errors often involve nested functions or data that doesn't conform to expected formats. To manage these:\n• Break Down Formulas: Dissect complex formulas into smaller parts. By evaluating each segment individually, you can pinpoint the error's origin.\n• Use Auxiliary Columns: For multi-step calculations, use auxiliary columns for each step. This approach not only makes debugging easier but also clarifies the logic for future reference.\n\nThese tips empower you to maintain control over your data, ensuring that even the most intricate errors don't compromise your work.\n\nBest Practices for Error Handling in Google Sheets\n\nAdopting Best Practices for Error Handling ensures that your use of IFERROR in Google Sheets maximizes utility without undermining data integrity. Key strategies include:\n• Comprehensive Testing: Before deploying IFERROR widely, test formulas with known error conditions to understand how they'll behave.\n• Document Assumptions: Keep a record of why you're using IFERROR in a particular context. This documentation is invaluable for future troubleshooting and for others who may work with your spreadsheet.\n• Regular Audits: Periodically review your sheets to ensure that the use of IFERROR still aligns with your data management goals.\n\nBy integrating these practices into your workflow, you can leverage IFERROR effectively, enhancing both productivity and data quality.\n\nThe IFERROR function in Google Sheets is a potent tool for managing and mitigating errors in data analysis and reporting. By understanding its basic to advanced applications, users can ensure their spreadsheets remain clean, accurate, and professional. Embracing the tips, tricks, and troubleshooting strategies outlined in this guide will empower Google Sheets users to handle errors with confidence and precision, ultimately enhancing their data management skills.\n\nQ: What is the IFERROR function in Google Sheets?\n\nA: The IFERROR function in Google Sheets allows users to specify a custom output (such as a message or alternative value) whenever an encountered formula results in an error. It’s designed to enhance data integrity and user experience by gracefully handling errors.\n\nQ: How do I use the IFERROR function in Google Sheets?\n\nA: To use the IFERROR function, input the formula as where is the expression to be evaluated and is the output if results in an error. Replace with what you want to appear in case of an error.\n\nQ: Can the IFERROR function be combined with other functions?\n\nA: Yes, the IFERROR function can be combined with other Google Sheets functions to create more sophisticated error-handling mechanisms. This can enhance data analysis, improve error reporting, and streamline spreadsheet management.\n\nQ: What types of errors can IFERROR handle in Google Sheets?\n\nA: IFERROR can handle various types of errors in Google Sheets, including , , , , , , and . It's a versatile tool for managing unexpected or problematic outputs in formulas.\n\nQ: Are there any limitations to using IFERROR in Google Sheets?\n\nA: While IFERROR is highly useful, it may mask underlying issues if used indiscriminately. It's important to ensure that its use doesn’t hide errors that need addressing or correction, especially in complex data analysis scenarios.\n\nQ: How can I troubleshoot errors masked by the IFERROR function?\n\nA: To troubleshoot errors masked by IFERROR, temporarily remove the IFERROR wrapper from your formula to expose the underlying error. This allows you to directly address the issue. Always scrutinize formulas for potential errors before applying IFERROR.\n\nQ: What are some advanced tips for using IFERROR in Google Sheets?\n\nA: Advanced tips include nesting IFERROR functions for handling multiple error types in a single formula, using IFERROR with array formulas for bulk error handling, and combining it with conditional formatting for visual error alerts."
    },
    {
        "link": "https://exceltactics.com/make-filtered-list-sub-arrays-excel-using-small/4",
        "document": "Then we need to design the formula that will pull the rows of the table that meet our criteria. This formula will be broken down into its individual functions so we can walk through each part in turn. The sub-array formula is built with the following functions:\n\nThe IFERROR function is just a security measure. It tries to run the formula inside it, and if any errors occur, it lets us control what happens instead of just outputting an error message. To learn more about how Excel handles errors, check out the Definitive Guide to Excel Error Types and Error Handling. The syntax for IFERROR is simple:\n\nThe rest of our sub-array formula will go inside the value field of the IFERROR function.\n\nThe INDEX function is responsible for pulling the information from the rows of data in our original table that meet our criteria. The way it knows which rows to show is based on the rest of the functions inside our formula. The syntax for INDEX is as follows:\n\nThe array will be the column of data that matches our table header from the original data set. The row_num will be determined by the SMALL, IF, ROW, and ROWS functions.\n\nThe SMALL function extracts a specific item from the list of items we are calling an array. The syntax for SMALL is simple:\n\nThe array will be determined by the IF and ROW functions. The item, k, will be determined by the ROWS function.\n\nThe IF function tests each row in our original data table to see if it meets our criteria. If it does, it will tell SMALL to give the item to INDEX and output it to our output table. The syntax for IF is as follows:\n\nThe logical_test will include our criteria. The if_true will pass the row number to SMALL using the ROW function.\n\nThe ROW function just gives the active row number to the SMALL function when the IF statement is true. The syntax is simple:\n\nWhen there is no reference provided, ROW() returns the current row number.\n\nThe ROWS function tells the total number of rows in the sub-array to SMALL. The syntax is simple:\n\nAll of these functions combine into an array formula that must be entered with a CTRL+SHIFT+ENTER instead of a normal ENTER command. This lets us provide the formula with entire ranges of cells instead of individual cell references and this is what allows the formula to work.\n\nThe full syntax of the sub-array formula is complicated and a bit confusing, so we will break down each part individually. First, though, let’s take a look at the full formula for Cell A5 in our example. Cell A5 should have the Make of the first car in our original data that meets our Combined MPG criteria of 45. The formula for A5 is as follows:\n\nThe function is surrounded by curly brackets {} automatically when you enter it as an array formula (CTRL+SHIFT+ENTER). You can select everything in between the brackets, paste it into cell A5 in the example, and enter it by pressing CTRL+SHIFT+ENTER."
    }
]