[
    {
        "link": "https://gist.github.com/villares/c5d097b8a8c6178284ae0a6adfd3e7e5",
        "document": "You signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://docs.pysimplegui.com/en/latest/documentation/press_kit",
        "document": "PySimpleGUI is a product of PySimpleSoft, Inc., whose mission is to make the best Python application develement environment much, much better. Our main product is PySimpleGUI 5. (Stay tuned for future announcements.)\n\nPySimpleGUI is the top-rated Python GUI development environment, actively used by millions of developers world-wide.\n\nPySimpleGUI 5 is licensed software that requires all users to register at PySimpleGUI.com, to receive a developer key. Commercial users must pay a license fee when they register, while Hobbyist users register for PySimpleGUI 5 at no cost.\n\nThe names PySimpleSoft and PySimpleGUI are protected marks, and may be used only to refer to products offered directly by PySimpleSoft.\n\nIf you are PySimpleSoft customer, consider the following language to accurately describe your product’s use of the PySimpleGUI library. This language can be displayed in product GUI, promotional materials, press materials, and app descriptions.\n\nUse terminology that make it clear your product incorporates PySimpleGUI 5. (“User interface powered by PySimpleGUI 5” is preferred).\n\nYour product name should appear first, followed by PySimpleGUI and other Python libraries.\n\nOur “Powered by PySimpleGUI 5” badge indicates that a project uses PySimpleGUI 5 for the GUI component."
    },
    {
        "link": "https://docs.pysimplegui.com/en/latest",
        "document": "We were recently informed by PyPI that PySimpleGUI does not meet updated PyPI Terms of Service, that it needs to be removed, and hosted on a private server. As a result, you’ll need to add a parameter to your pip install commands in order to access the PySimpleGUI private PyPI server. The parameter to add is:\n\nTo force a reinstall of PySimpleGUI from new server\n\nThis command will also install needed modules like rsa from PyPI automatically\n\nThe new command with the new parameter is:\n\nIf you're getting errors, please uninstall PySimpleGUI entirely and install again using the new parameter.\n\nWe gave it our best shot…. After 7 years of attempting to make the PySimpleGUI project sustainable, we are stopping the PySimpleGUI project.\n\nIf you've followed the project over the years, you'll have read about the difficulties that all open-source projects face in generating enough income to pay for the project, seen the requests for sponsorships, and attempts to generate income via a Udemy course. There was not enough income to cover the costs of running a business and, of course, wasn’t able to generate any income for our small team. This isn’t a sustainable situation.\n\nIt's been a little over a year since the release of PySimpleGUI 5. Of the 100,000’s of Version 5 users, 10,000's of which were large corporate users, only 600 people paid the $99 for a commercial license.\n\nThe revenue generated was not enough to cover the basic costs, so we've made the difficult decision to end the PySimpleGUI project.\n\nUnlike traditional software companies, where stopping business means support ends immediately, we thought it would be classier to go the extra mile by continuing to provide support to Commercial License users this year as a way of saying \"thank you\" for your help in trying to give the project a viable future. Please provide your Priority Support code or your submission will be automatically blocked. We'll do the best we can to help with the limited resources we've got.\n\nYour license doesn’t expire so you’ll be able to continue to run your applications at the end of the year we’re providing maintenance and beyond. We’ll be distributing an offline version of the documentation so that you’ll have it for the future.\n\nHobbyists can continue to use PySimpleGUI 5 until their keys expire. After that you'll need to switch to version 4, which you'll find 1,000s of copies on GitHub with at least 1 being community supported.\n\nIf you wish to use PySimpleGUI without the key expiring or want support, then you can buy a Commercial License which is good perpetually.\n\nThe PySimpleGUI registration and documentation websites will continue to operate for a couple of months to give commercial customers an opportunity to create distribution keys. No new Hobbyist keys will be available.\n\nThank you to everyone\n\nPySimpleGUI has been an experience of a lifetime, and we’ve enjoyed watching & helping people create incredible applications.\n\nIf you're a business with a serious partnership that you wish to discuss, email [email protected]."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element",
        "document": "Warning: These are old SVG elements which are deprecated and should not be used. You should never use them in new projects, and should replace them in old projects as soon as you can. They are listed here for informational purposes only."
    },
    {
        "link": "https://stackoverflow.com/questions/70877668/displaying-an-image-in-pysimplegui",
        "document": "I'm trying to display an image in a simple GUI using PySimpleGui but it might be a bit more complicated than I thought.\n\nThis is what I'm currently attempting:\n\nAnd this is the error Sublime is throwing out:\n\nReally not sure what to google as there are so few PySimpleGUI resources out there."
    },
    {
        "link": "https://gist.github.com/villares/c5d097b8a8c6178284ae0a6adfd3e7e5",
        "document": "You signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://stackoverflow.com/questions/70877668/displaying-an-image-in-pysimplegui",
        "document": "I'm trying to display an image in a simple GUI using PySimpleGui but it might be a bit more complicated than I thought.\n\nThis is what I'm currently attempting:\n\nAnd this is the error Sublime is throwing out:\n\nReally not sure what to google as there are so few PySimpleGUI resources out there."
    },
    {
        "link": "https://stackoverflow.com/questions/70474671/pysimplegui-graph-displaying-an-image-directly",
        "document": "I am trying to use Pysimplegui and its \"graph\" component to make an app such that the user can draw polygons on an image using the app. Here is a part of my code:\n\nHere length and width refers to the size of image I have. The only way which I know how to display the image is via , where the path is the location of an png file.\n\nMy question is: Is there a way to display an image in graph that uses directly the image and not a path. (i.e. If I have an nd numpy array that represents an image, is it possible for me to directly make it show up in the canvas rather than first save as png then load the location?). Is it possible to avoid any kind of saving at all?\n\nIntuitively, the method reads the path and opens the image and then displays. There should be a method to avoid any saving and make graph directly display an image."
    },
    {
        "link": "https://github.com/meerk40t/svgelements",
        "document": "does high fidelity SVG parsing and geometric rendering. The goal is to successfully and correctly process SVG for use with any scripts that may need or want to use SVG files as geometric data.\n\nThis is both facilitated by, and results in, very useful elements within the SVG spec: Path, Matrix, Angle, Length, Color, Point and other SVG and CSS Elements. The SVG spec defines a variety of elements which generally interoperate. In order to have a robust experience with SVGs we must be able to correctly deal with the parsing and interactions of these elements.\n\nThis project began as part of which does SVG loading of files for laser cutting. It attempts to more fully map out the SVG specification, objects, and paths, while remaining easy to use and largely backwards compatible. These elements are quite useful in their own right. For example, the zooming and panning within is done using the SVG matrix which more robust than the wxPython one. Internal console commands within allows specifying robustly parsed angles of rotation, colors of objects, and naively uses the Path() and SVGImage objects. The ability to have these robustly manipulated with affine transformations provides considerable utility. There is significant utility in the interactions between these objects, however if you just want to robustly parse some SVG and convert the data to your own structures that is entirely reasonable.\n\nWithout robust SVG parsing you'll find repeated edge cases of some svg files that do not parse correctly. aims to avoid those pitfalls with robust adherence to the SVG spec.\n\nThis module is under a MIT License. https://github.com/meerk40t/svgelements/blob/master/LICENSE\n\nHowever, there are some soft dependencies, with some common additions do modify the functionality slightly. If is installed then the arc length code quickly provide the exact correct answer. Some of the SVGImage code is able to load the images if given access to PIL/Pillow. And if exists there's a special command to do lightning fast linearization for Shapes.\n\nis compatible with Python 3+. Support for 2.7 was dropped at Python 2 End-Of-Life January 1, 2020.\n\nWe remain nominally backwards compatible with , passing the same robust tests from that project. There may be number of breaking changes. However, since permit a lot of leeway in what is accepted and how it's accepted it will have a huge degree of compatibility with projects seen and unseen.\n\nThe goal of this project is to provide SVG spec-like elements and structures. Conforming to the SVG standard 1.1 and elements of 2.0. These provide much of the implementation decisions, with regard to the implementation of the objects. If there is a question on implementation and the SVG documentation has a methodology, that is the preferred methodology. If the SVG spec says one thing, and does something else, that is a bug.\n\nThe primary goal of this project is to make a more robust version of to fully parse SVG files. This requires including other elements like , , and , etc. with clear emphasis on conforming to the SVG spec in all ways that realworld uses for SVG demands.\n\nshould conform to the SVG Conforming Interpreter class (2.5.4. Conforming SVG Interpreters):\n\nReal world functionality demands we must correctly and reasonably provide reading, transcoding, and manipulation of SVG content.\n\nThe svgelements code should not include any hard dependencies. It should remain a single file with emphasis on allowing projects to merely include a copy of to do any SVG parsing required.\n\nSVG is a huge spec and bleeds into a lot of areas. Many of these are supported some are not.\n• SVG/CSS Matrix\n• Full matrix support. All objects have a object with all cascading matrix operations. Including viewport.\n• CSS Angle - , , , . Full use of these within transformation command.\n• Transformation of Shapes and Paths, within groups as well as with respect to the SVG Viewport.\n• First order use of , and for all Shapes. and are colors (Fill may return a , or Gradient-type in future versions, but is currently always a Color), and is a length/percent value (will be rendered to a float during parsing).\n• SVG Spec deconstruction of basic shapes into Paths within regard to the SVG 2.0 spec. Path(shape) or shape.d()\n• objects, these are assigned as a to any object that referenced them.\n• and functionality within the parsing tree.\n• Accurate referencing of objects in the ShadowDOM.\n• objects. These are parsed they are not currently assigned.\n• objects. The lack of a font engine makes this class more of a parsed stub class.\n• creates objects which will load Images if is installed with a call to . Correct parsing of , , , and .\n\nSome things are currently not supported.\n• Full CSS StyleSheet. Stylesheets should be read anywhere in the file and styled all matching objects even those already parsed. We accept Styling that occurs before the objects.\n• Nesting of elements within an object.\n• , length and font engine requiring code. (the height of 'm' and 'x' is unknown).\n• Slicing of SVG geometry, outside of viewbox.\n• External loading of CSS data from another file.\n\nThe primary function of is to parse svg files. There are two main functions to facilitate this\n\nThis parse function takes in values that cannot be known to the SVG but which are essential to the the rendering of the shapes. Parsing will pre-apply things like the relative translation by the viewport. It will solve the structural changes for the with the and , and any items that are known SVG elements will be turned into their requisite values and parsed accordingly. So the and of a will be filled in with a type of and the of the Shape will be a type of . The for all the will have the relevant inherited values. This permits parsing to deal with even unknown types of objects within the SVG by falling back to something akin to DOM parsing of the file. In cases of and these unknown elements can still reference other. Since this structural shadow tree will be solved during the parse.\n\nis a static function which takes a file or stream of svg data to be parsed. This will return an object which is a type of . There are several values which can be configured with other values as needed. determines whether the parsed elements in the should have their transform matrix applied or not. This includes the effective matrix resulting from viewport.\n\nThe value defaults to as this is quite common some other graphics programs use and other values are permitted. Since there's nothing directly in the SVG spec setting this value and other places can vary with their value here. We can't predetermine this value. However it regulates all the relationships between physical values like a 1in by 1in to the unitless pixel values of the SVG.\n\nThe and values are unknown to the SVG parsing. This is the physical view size of the svg itself. This often will have little impact in the SVG rendering however sometimes things widths are set to or heights to and those are according to the spec relative to the actual view we're using. The svg has no direct access to this. If we have a value these height and width can be set to absolute units like or any other acceptable value that can be solved with .\n\nThe is the value of the within the SVG spec. Usually the default stroke and fill values are set but in some cases these are set to which is a property of the CSS outside the scope of the SVG. In this case that color needs to be provided. It will be a rare edge case.\n\nThe value is typical CSS/SVG transform matrix code to be preappended to the matrix before even the viewbox. If you need to set some units or apply something to the entire svg without changing things within the CSS this value becomes important. Especially when dealing with edge cases like the difference of applied directly to the tag itself.\n\nThe permits giving a context of already set values that are come from outside the current svg context, such as we would find if we had SVG files embedded into SVG files.\n\nThe second function within parsing that matters is the this is a function that exists on any object and will flatten the elements yielding them in order.\n\nHere's an example parser with elements().\n\nHere a few things are checked. The element.values for ['visibility'] is checked if it's hidden it is not added to our flat object list. Texts are specific added. Paths are only added if they have and are not completely blank. Any Shape object is converted to a Path() object and reified. Any SVGImage objects are loaded. This is a soft dependency on PIL/Pillow to load images stored within SVG. The SVG function can also take a conditional function that well be used to test each element before yielding it. In most cases we don't want every single type of thing an svg can produce. We might just want all the Path objects so we check for any Path and include that but also for any non-Path Shape and convert that to a path. is an attempt to get the local directory for loading relative path images.\n\nCirca 1.9.0+ some basic SVG writing was added. Any object will permit you to call the expectation is that you save svg files. If you specify an file it will gzip the save stream providing you with a file. If you want the xml for a different purpose you may also call which provides the object as a string.\n\nThis is not intended to be perfect, the project itself is potentially lossy and CSS tables and style tags will be gone, objects will be replaced with their real objects and these modifications are not able to be restored. The primary purpose of this project is to read correct geometric data.\n\nOr getting slightly more complex:\n\nWriting should work, but this is not the initial purpose of the library. Some non-parsed elements will restore to the file correctly, others may be lost. However, errors in this should still be reported. The reading is quite well vetted and robust, the writing may have issues needing to be corrected.\n\nThe versatility of the project is provided through expansive and highly intuitive dunder methods, and robust parsing of object parameters. Points, PathSegments, Paths, Shapes, Subpaths can be multiplied by a matrix. We can add Shapes, Paths, PathSegments, and Subpaths together. And many non-declared but functionally understandable elements are automatically parsed. Such as adding strings of path_d characters to a Path or multiplying an element by the SVG Transform string elements.\n\nWhile many objects perform a lot of interoperations, a lot many svg elements are designed to also work independently, and be independently useful.\n\nPoints define a single location in 2D space. The Point class is intended to take a wide variety of different initial definitions to wrap them into being a point.\n• a class with .x and .y as methods.\n\nMost objects requiring a point will wrap that object with the included Point class meaning any of these initial arguments is acceptable. Including independent x and y parameters, a tuple of x and y, a list of x and y, a string that parses akin to points within objects, complex numbers with a real x and imag y values. And any class with or attributes.\n• Transform string values.\n• Any valid SVG or CSS transform string will be accepted as a matrix.\n\nThe matrix class also supports Length translates for x, and y. In some instances, CSS transforms permit length transforms so \"translate(20cm, 200mm)\" are valid transformations. However, these will cause issues for objects which require non-native units so it is expected that will be called on these before they are used in some manner.\n\nPaths define sequences of PathSegments that can map out any path element in SVG.\n\nAngles define various changes in direction.\n\nLengths define the amount of linear space between two things.\n\nRotate a Partial Path with an implied matrix: (Note: The SVG does not allow us to specify a start point for this invalid path)\n\nSince Move() is a qualified element we can postpend the SVG text:\n\nAdd two shapes, and query their bounding boxes:\n\nAdd two shapes and query their length:\n\nThe elements are the core functionality of this class. These are svg-based objects which interact in coherent ways.\n\nThe Path element is based on regebro's code and methods from the project. The primary methodology is to use different PathSegment classes for each segment within a pathd code. These should always have a high degree of backwards compatibility. And for most purposes importing the relevant classes from should be highly compatible with any existing code.\n\nFor this reason tests include tests in this project. And while the Point class accepts and works like a it is not actually a complex. This permits code from other projects to quickly port without requiring an extensive rewrite. But, the custom class allows for improvements like making the object easy.\n\nJust as with the class is a mutable sequence, and it behaves like a list. You can add to it and replace path segments etc:\n\nThe path object also has a method that will return the SVG representation of the Path segments:\n\nThe d() parameter also takes a value for relative:\n\nMore modern and preferred methods are to simply use path_d strings where needed.\n\nAnd to use scaling factors as needed.\n\nA object that is a collection of the PathSegment objects. These can be defined by combining a PathSegment with another PathSegment initializing it with or or .\n\nSubpaths provide a window into a Path object. These are backed by the Path they are created from and consequently operations performed on them apply to that part of the path.\n\nor likewise (notice the path will go 80,40 first rather than 40,80.)\n\nThere are 6 PathSegment objects: , , , , and . These have a 1:1 correspondence to the commands in a .\n\nAll of these objects have a function which will return the coordinates of a point on the path, where the point is given as a floating point value where is the start of the path and is end.\n\nYou can calculate the length of a Path or its segments with the function. For CubicBezier and Arc segments this is done by geometric approximation and for this reason may be very slow. You can make it faster by passing in an option to the method. If you don't pass in error, it defaults to . While the project has no dependencies, if you have installed the Arc.length() function will use to the hypergeometric exact formula contained and will quickly return with the exact answer.\n\nCubicBezier and Arc also has a option that specifies the minimum recursion depth. This is set to 5 by default, resulting in using a minimum of 32 segments for the calculation. Setting it to 0 is a bad idea for CubicBeziers, as they may become approximated to a straight line.\n\nand also takes these parameters, but they unneeded as direct values rather than approximations are returned.\n\nCubicBezier and QuadraticBezier also have methods, that checks if the segment is a \"smooth\" segment compared to the given segment.\n\nUnlike the preferred method of getting a Path from a string is as an argument:\n\nThese are the SVG PathSegment classes. See the _ for more information on what each parameter means.\n• The move object describes a move to the start of the next subpath. It may lack a start position but not an end position.\n• The close object describes a close path element. It will have a length if and only if the end point is not equal to the subpath start point. Neither the start point or end point is required.\n• The line object describes a line moving straight from one point to the next point.\n• The arc object describes an arc across a circular path. This supports multiple types of parameterizations. The given default there is compatible with and has a complex radius. It is also valid to divide radius into and or Arc(start, end, center, prx, pry, sweep) where start, end, center, prx, pry are points and sweep is the radians value of the arc distance traveled.\n\nYou can format SVG paths in many different ways, all valid paths should be accepted:\n\nAnd these paths should be equal:\n\nYou can also build a path from objects:\n\nAnd it should again be equal to the first path::\n\nPaths are mutable sequences, you can slice and append::\n\nNote that there is no protection against you creating paths that are invalid. You can for example have a Close command that doesn't end at the path start:\n\nSince we are delegating to SVG spec for such things, this is how it is implemented in elements.\n\nTo be compatible with SVG 1.1 and SVG 2.0 the matrix class provided has all the SVG functions as well as the CSS functions:\n\nSince we have compatibility with CSS for the SVG 2.0 spec compatibility we can perform length translations:\n\nDo note, however that this isn't an intended purpose. Points are expected in native units. You should render the Matrix prior to using it. This means you must give it the correct units to translate the information from one form to another.\n\nWe can also rotate by , , , which are permitted CSS angles:\n\nA goal of this project is to provide a robust modifications of Path objects including matrix transformations. This is done by three major shifts from s methods.\n• Points are not stored as complex numbers. These are stored as Point objects, which have backwards compatibility with complex numbers, without the data actually being backed by a .\n• A matrix is added which conforms to the SVGMatrix element. The matrix contains valid versions of all the affine transformations elements required by the SVG Spec.\n• The object is fundamentally backed by a different point-based parameterization.\n\nThe objects themselves have robust dunder methods. So if you have a path object you may simply multiply it by a matrix.\n\nThe Matrix objects can be used to modify points:\n\nDo note that the order of operations for matrices matters:\n\nThe first version is:\n\nThe second is:\n\nThere is need in many applications to append a transformation for the viewbox, height, width. So as to prevent a variety of errors where the expected size is vastly different from the actual size. If we have a viewbox of \"0 0 100 100\" but the height and width show that to be 50cm wide, then a path \"M25,50L75,50\" within that viewbox has a real size of length of 25cm which can be quite different from 50 (unitless value).\n\nThis conversion is done through the object. This operation is automatically done for during SVG parsing.\n\nViewbox objects have a call to which will provide the string for an equivalent transformation for the given viewbox.\n\nThe code conforms to the algorithm given in SVG 1.1 7.2, SVG 2.0 8.2 'equivalent transform of an SVG viewport.' This will also fully implement the , , and values for the viewboxes.\n\nAnother important SVG elements are the shapes. While all of these can be converted to paths. They can serve some usages in their original form. There are methods to deform a rectangle that simple don't exist in the path form of that object.\n\nThe Line shape is converted into a shape called SimpleLine to not interfere with the Line(PathSegment).\n\nA Shape is said to be equal to another Shape or a Path if they decompose to same Path.\n\nRectangles are defined by x, y and height, width. Within SVG there are also rounded corners defined with and .\n\nMuch like all the paths these shapes also contain a function that produces the path data for them. This could then be wrapped into a Path().\n\nOr simply passed to the Path:\n\nOr simply multiplied by the matrix itself:\n\nAnd you can equally decompose that Shape:\n\nMatrices can be applied to Rect objects directly.\n\nThis also works with and : (Note: the path will now contain Arcs)\n\nYou can also decompose the shapes in relative modes:\n\nEllipses and Circles are different shapes but since a circle is a particular kind of Ellipse much of the functionality here is duplicated.\n\nWhile the objects are different they can be checked for equivalency:\n\nSimpleLine is renamed from the SVG form of since we already have objects as .\n\nThe difference here is polylines are not closed while Polygons are closed.\n\nand the same for Polyline:\n\nYou can just append a \"z\" to the polyline path though.\n\nThe conversion of lengths to utilizes another element It provides conversions for , , , , , , . You can also parse an element like the string '25mm' calling Length('25mm').value(ppi=96) and get the expected results. You can also call which will return 25mm in inches. This can be independently useful when dealing with lengths, etc.\n\nColor is another fundamental element within SVG that is also useful elsewhere. The object contains an 'int' as 'value' in RGBA order, storing alpha in the 8 least signficant bits. It parses all the SVG color functions.\n\nIf we get the or of an object. This can be expressed in many ways, and needs to be converted to a consistent form. We could have a 3, 4, 6, or 8 digit hex. rgb(r,g,b) value, a static dictionary name or percent rgb(r,g,b). And must be properly parsed according to the spec.\n\nIn addition you can set various properties of a particular color. Check distances to other colors.\n\nAngle is backed by a 'float' and contains all the CSS angle values. 'deg', 'rad', 'grad', 'turn'.\n\nThe Angle element is used automatically with the Skew and Rotate for matrix.\n\nPoint is used in all the SVG path segment objects. With regard to it is not back by, but implements all the same functionality as a and will take a complex as an input. This is so that older code will remain valid. While also allowing for additional functionality like finding a distance.\n\nThe class supports subscribable elements, and methods, and and . As well as providing several of these indexing methods.\n\nIt includes a number of point functions like:\n• : Move this point towards the other point. with an amount [0,1]\n• : Calculate the Euclidean distance to the other point.\n• : Calculate the angle to the given point.\n• : Return a point via polar coords at the angle and distance.\n• : Returns a point reflected across another point. (Smooth bezier curves use this).\n\nThis for example takes the 0,0 point turns 1/8th of a turn, and moves forward by 5cm.\n\nThe Path element of this project is based in part on the ( https://github.com/regebro/svg.path ) project. It is also may be based, in part, on some elements of ( https://github.com/mathandy/svgpathtools )."
    },
    {
        "link": "https://pymupdf.readthedocs.io/en/latest/recipes-images.html",
        "document": "How to Make Images from Document Pages# This little script will take a document filename and generate a PNG file from each of its pages. The document can be any supported type. The script works as a command line tool which expects the filename being supplied as a parameter. The generated image files (1 per page) are stored in the directory of the script: The script directory will now contain PNG image files named page-0.png, page-1.png, etc. Pictures have the dimension of their pages with width and height rounded to integers, e.g. 595 x 842 pixels for an A4 portrait sized page. They will have a resolution of 96 dpi in x and y dimension and have no transparency. You can change all that – for how to do this, read the next sections.\n\nThe image of a document page is represented by a Pixmap, and the simplest way to create a pixmap is via method . This method has many options to influence the result. The most important among them is the Matrix, which lets you zoom, rotate, distort or mirror the outcome. by default will use the Identity matrix, which does nothing. In the following, we apply a zoom factor of 2 to each dimension, which will generate an image with a four times better resolution for us (and also about 4 times the size): # use 'mat' instead of the identity matrix Since version 1.19.2 there is a more direct way to set the resolution: Parameter (dots per inch) can be used in place of . To create a 300 dpi image of a page specify . Apart from notation brevity, this approach has the additional advantage that the dpi value is saved with the image file – which does not happen automatically when using the Matrix notation.\n\nYou do not always need or want the full image of a page. This is the case e.g. when you display the image in a GUI and would like to fill the respective window with a zoomed part of the page. Let’s assume your GUI window has room to display a full document page, but you now want to fill this room with the bottom right quarter of your page, thus using a four times better resolution. To achieve this, define a rectangle equal to the area you want to appear in the GUI and call it “clip”. One way of constructing rectangles in PyMuPDF is by providing two diagonally opposite corners, which is what we are doing here. # its middle point, becomes top-left of clip In the above we construct clip by specifying two diagonally opposite points: the middle point mp of the page rectangle, and its bottom right, rect.br.\n\nHow to Zoom a Clip to a GUI Window# Please also read the previous section. This time we want to compute the zoom factor for a clip, such that its image best fits a given GUI window. This means, that the image’s width or height (or both) will equal the window dimension. For the following code snippet you need to provide the WIDTH and HEIGHT of your GUI’s window that should receive the page’s clip rectangle. For the other way round, now assume you have the zoom factor and need to compute the fitting clip. In this case we have , so we must set and, . Choose the top-left point of the clip on the page to compute the right pixmap: # ensure we still are inside the page\n\nLike any other “object” in a PDF, images are identified by a cross reference number ( , an integer). If you know this number, you have two ways to access the image’s data:\n• None Create a Pixmap of the image with instruction pix = pymupdf.Pixmap(doc, xref). This method is very fast (single digit micro-seconds). The pixmap’s properties (width, height, …) will reflect the ones of the image. In this case there is no way to tell which image format the embedded original has.\n• None Extract the image with img = doc.extract_image(xref). This is a dictionary containing the binary image data as img[“image”]. A number of meta data are also provided – mostly the same as you would find in the pixmap of the image. The major difference is string img[“ext”], which specifies the image format: apart from “png”, strings like “jpeg”, “bmp”, “tiff”, etc. can also occur. Use this string as the file extension if you want to store to disk. The execution speed of this method should be compared to the combined speed of the statements pix = pymupdf.Pixmap(doc, xref);pix.tobytes(). If the embedded image is in PNG format, the speed of is about the same (and the binary image data are identical). Otherwise, this method is thousands of times faster, and the image data is much smaller. The question remains: “How do I know those ‘xref’ numbers of images?”. There are two answers to this:\n• None “Inspect the page objects:” Loop through the items of . It is a list of list, and its items look like [xref, smask, …], containing the of an image. This can then be used with one of the above methods. Use this method for valid (undamaged) documents. Be wary however, that the same image may be referenced multiple times (by different pages), so you might want to provide a mechanism avoiding multiple extracts.\n• None “No need to know:” Loop through the list of all xrefs of the document and perform a for each one. If the returned dictionary is empty, then continue – this is no image. Use this method if the PDF is damaged (unusable pages). Note that a PDF often contains “pseudo-images” (“stencil masks”) with the special purpose of defining the transparency of some other image. You may want to provide logic to exclude those from extraction. Also have a look at the next section. For both extraction approaches, there exist ready-to-use general purpose scripts:\n\nSome images in PDFs are accompanied by image masks. In their simplest form, masks represent alpha (transparency) bytes stored as separate images. In order to reconstruct the original of an image, which has a mask, it must be “enriched” with transparency bytes taken from its mask. Whether an image does have such a mask can be recognized in one of two ways in PyMuPDF:\n• None An item of has the general format , where xref is the image’s and smask, if positive, then it is the of a mask.\n• None The (dictionary) results of have a key “smask”, which also contains any mask’s if positive. If smask == 0 then the image encountered via can be processed as it is. To recover the original image using PyMuPDF, the procedure depicted as follows must be executed: Step (1) creates a pixmap of the basic image. Step (2) does the same with the image mask. Step (3) adds an alpha channel and fills it with transparency information. The scripts extract-from-pages.py, and extract-from-xref.py above also contain this logic.\n\nHow to Make one PDF of all your Pictures (or Files)# We show here three scripts that take a list of (image and other) files and put them all in one PDF. The first one converts each image to a PDF page with the same dimensions. The result will be a PDF with one page per image. It will only work for supported image file formats: This will generate a PDF only marginally larger than the combined pictures’ size. Some numbers on performance: The above script needed about 1 minute on my machine for 149 pictures with a total size of 514 MB (and about the same resulting PDF size). Look here for a more complete source code: it offers a directory selection dialog and skips unsupported files and non-file entries. We might have used instead of , and the result would have been a similar looking file. However, depending on the image type, it may store images uncompressed. Therefore, the save option deflate = True must be used to achieve a reasonable file size, which hugely increases the runtime for large numbers of images. So this alternative cannot be recommended here. The second script embeds arbitrary files – not only images. The resulting PDF will have just one (empty) page, required for technical reasons. To later access the embedded files again, you would need a suitable PDF viewer that can display and / or extract embedded files: # at least 1 page is needed This is by far the fastest method, and it also produces the smallest possible output file size. The above pictures needed 20 seconds on my machine and yielded a PDF size of 510 MB. Look here for a more complete source code: it offers a directory selection dialog and skips non-file entries. A third way to achieve this task is attaching files via page annotations see here for the complete source code. This has a similar performance as the previous script and it also produces a similar file size. It will produce PDF pages which show a ‘FileAttachment’ icon for each attached file. Both, the embed and the attach methods can be used for arbitrary files – not just images. We strongly recommend using the awesome package PySimpleGUI to display a progress meter for tasks that may run for an extended time span. It’s pure Python, uses Tkinter (no additional GUI package) and requires just one more line of code!\n\nHow to Use Pixmaps: Making a Fractal# Here is another Pixmap example that creates Sierpinski’s Carpet – a fractal generalizing the Cantor Set to two dimensions. Given a square carpet, mark its 9 sub-suqares (3 times 3) and cut out the one in the center. Treat each of the remaining eight sub-squares in the same way, and continue ad infinitum. The end result is a set with area zero and fractal dimension 1.8928… This script creates an approximate image of it as a PNG, by going down to one-pixel granularity. To increase the image precision, change the value of n (precision): \"need PyMuPDF v1.14.8 for this script\" # fill it with some background color # this could be anything, e.g. some photo image ... \"\"\"Recursively \"punch a hole\" in the central square of a pixmap. Arguments are top-left coords and the step width. Some alternative punching methods are commented out. # the central one will be filled with the color # this is not the central cube # now start punching holes into the pixmap The result should look something like this:"
    },
    {
        "link": "https://stackoverflow.com/questions/70877668/displaying-an-image-in-pysimplegui",
        "document": "I'm trying to display an image in a simple GUI using PySimpleGui but it might be a bit more complicated than I thought.\n\nThis is what I'm currently attempting:\n\nAnd this is the error Sublime is throwing out:\n\nReally not sure what to google as there are so few PySimpleGUI resources out there."
    },
    {
        "link": "https://stackoverflow.com/questions/67079155/displaying-an-image-using-pysimplegui-without-having-to-use-an-event-listener",
        "document": "I am trying to display an image in my GUI using PySimpleGUI. I know that I could just do sg.Image('image_file') when setting up the GUI itself, but I also want to resize the image. I can't figure out how to do that. I've tried doing sg.Image(size=(300,300),'image_file') but that does not work. Thanks in advance."
    },
    {
        "link": "https://github.com/dddomodossola/remi/issues/279",
        "document": ""
    },
    {
        "link": "https://tutorialspoint.com/pysimplegui/pysimplegui_image_element.htm",
        "document": "The PySimpleGUI library contains an Image element, which has the ability to display images of PNG, GIF, PPM/PGM format. The Image() function needs one mandatory argument which is the path to the image file.\n\nThe following code displays the PySimpleGUI logo on the application window.\n\nIt will produce the following output window −\n\nYou can also display image on a Graph container element with its draw_image() method as the following code shows −\n\nIt will produce the following output window −"
    },
    {
        "link": "https://docs.pysimplegui.com/en/latest/documentation/module/elements/image",
        "document": "The Image element displays an image in your window provided they are in PNG, GIF, PPM/PGM format. JPGs cannot be shown because tkinter does not naively support JPGs. You can use the Python Imaging Library (PIL) package to convert your image to PNG prior to calling PySimpleGUI if your images are in JPG format.\n\nA general discussion of images and image formats used in PySimpleGUI can be found in the images section.\n\nIf events are enabled for the element, then the element's key will be returned as an event when the image is clicked with the left mouse button.\n\nNo entry is in the values dictionary for elements.\n\nReminder - As discussed in the section on image formats, the tkinter port of PySimpleGUI only supports PNG & GIF format, not JPG.\n\nThere are 3 parameters that can be used to specify the image to be displayed. You can also create the in your layout without specifying any image to be initially displayed, and then use the method later to display an image.\n\nThese 3 parameters specify the image:\n• - A \"union\" of the other 2 parameters. The type passed in will determine if it's a filename, Base64 string or raw image\n• - A string representing the location on disk of your image\n• - Either a Base64 encoded byte string or a byte string (an unencoded \"raw\" image)\n\nWhile you cannot resize your image to an arbitrary size, you can increase or decrease the size of your image to be displayed. For example, if you're displaying the built-in emoji used in the example layout above, you'll find that this image has pixel size of 56 x 56 pixels. The parameter will not scale up/down the image to a specific size, for example (200,200) pixels. The parameter changes the size the element will use in your layout, but will not change the scale of the image itself.\n\nTwo parameters can be used to provide a rough scaling of your image:\n• - decreases the image scale by multiplying the size by 1/\n• - increaes the image scale by multiplying the size by\n\nFor example, if you want your image to be 1/2 the size it normally has, set . If you want the image to be twice the size, use . You can combine these 2 parameters as well. To get 2/3 the original size, set\n\nThis layout demonstrates using these scaling parameters:\n\nTo resize to a specific pixel dimension, you can use the PIL package. There are numerous Demo Programs that provide code demonstrating this operation.\n\nYou can easily get a button-like behavior by enabling events for an element. If events are enabled, then when you click the image, you'll receive and event back from that equal to the for the element."
    }
]