[
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/windows-commands",
        "document": "All supported versions of Windows and Windows Server have a set of Win32 console commands built in. This set of documentation describes the Windows Commands you can use to automate tasks by using scripts or scripting tools.\n\nWindows has two command-line shells: the Command shell and PowerShell. Each shell is a software program that provides direct communication between you and the operating system or application, providing an environment to automate IT operations.\n\nThe Command shell was the first shell built into Windows to automate routine tasks, like user account management or nightly backups, with batch (.bat) files. With Windows Script Host, you could run more sophisticated scripts in the Command shell. For more information, see cscript or wscript. You can perform operations more efficiently by using scripts than you can by using the user interface. Scripts accept all commands that are available at the command line.\n\nPowerShell was designed to extend the capabilities of the Command shell to run PowerShell commands called cmdlets. Cmdlets are similar to Windows Commands but provide a more extensible scripting language. You can run both Windows Commands and PowerShell cmdlets in PowerShell, but the Command shell can only run Windows Commands and not PowerShell cmdlets.\n\nFor the most robust, up-to-date Windows automation, we recommend using PowerShell instead of Windows Commands or Windows Script Host for Windows automation.\n\nA reference of exit and error codes for Windows Commands can be found in the Debug system error codes articles that may be helpful to understanding errors produced. Windows Commands also include command redirection operators. To learn more of their use, see Using command redirection operators.\n\nYou can configure the Command shell to automatically complete file and directory names on a computer or user session when a specified control character is pressed. By default this control character is configured to be the tab key for both file and directory names, although they can be different. To change this control character, run and navigate to either of the following registry keys and entries, depending on whether you wish to change the value for the current user only, or for all users of the computer.\n\nSet these values to that of the control character you wish to use. See virtual key codes for a complete list. To disable a particular completion character in the registry, use the value for space (0x20) as it isn't a valid control character. The type of value for this registry entry is REG_DWORD, and can also be specified by hexadecimal or decimal value.\n\nYou can also enable or disable file and directory name completion per instance of a Command shell by running with the parameter and switch or . If name completion is enabled with the parameter and switch, the two control characters used are for directory name completion and for file name completion. User-specified settings take precedence over computer settings, and command-line options take precedence over registry settings.\n\nTo find information about a specific command, in the following A-Z menu, select the letter that the command starts with, and then select the command name."
    },
    {
        "link": "https://stackoverflow.com/questions/162304/how-do-i-shutdown-restart-or-log-off-windows-via-a-bat-file",
        "document": ""
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/shutdown",
        "document": "Enables you to shut down or restart local or remote computers, one at a time.\n• None Users must be assigned the Shut down the system user right to shut down a local or remotely administered computer that is using the shutdown command.\n• None Users must be members of the Administrators group to annotate an unexpected shutdown of a local or remotely administered computer. If the target computer is joined to a domain, members of the Domain Admins group might be able to perform this procedure. For more information, see:\n• None If you want to shut down more than one computer at a time, you can call shutdown for each computer by using a script, or you can use shutdown /i to display the Remote Shutdown box.\n• None If you specify major and minor reason codes, you must first define these reason codes on each computer where you plan to use the reasons. If the reason codes aren't defined on the target computer, Shutdown Event Tracker can't log the correct reason text.\n• None Remember to indicate that a shutdown is planned by using the /p parameter. Not using the /p parameter, indicates that the shutdown was unplanned.\n• None Using the /p parameter, along the reason code for an unplanned shutdown, causes the shutdown to fail.\n• None Not using the /p parameter, and only providing the reason code for a planned shutdown, also causes the shutdown to fail.\n\nThe shutdown or restart reasons uses the following legend:\n• E: Expected - An expected shutdown or restart that is planned and communicated in advance.\n• U: Unexpected - An unexpected shutdown or restart occurs where the system stops working due to an error, such as a system crash, power failure or other.\n• P: Planned - A planned shutdown or restart scheduled in advance, such as system maintenance, software installation or other.\n• C: Customer Defined - Specify a custom reason for the system shutdown or restart.\n\nTo force apps to close and to restart the local computer after a one-minute delay, with the reason Application: Maintenance (Planned) and the comment \"Reconfiguring myapp.exe\", type:\n\nTo perform a planned shutdown of a device in 10 minutes and capture the reason in the shutdown event tracker with the comment \"Scheduled maintenance\", type:\n\nTo restart the remote computer myremoteserver with the same parameters as the previous example, type:\n\nTo restart the remote computer myremoteserver in 5 minutes due to a security update and include a custom reason in the shutdown event tracker, type:"
    },
    {
        "link": "https://en.wikibooks.org/wiki/Windows_Batch_Scripting",
        "document": "This book describes and shows how to use the Microsoft-supplied command interpreter cmd.exe and the associated commands, and how to write Windows batch scripts for the interpreter. cmd.exe is the default interpreter on all Windows NT-based operating systems, including Windows XP, Windows 7 and Windows 10.\n\nThis book addresses 32-bit Windows commands applicable to modern versions of Windows based on the Windows NT environment. It does not address commands that are specific to DOS environments and to DOS-based operating systems, such as Windows 95, Windows 98, and Windows Me, whose Microsoft-supplied command interpreters are in fact DOS programs, not Win32 programs.\n\nYou can find out which version of Windows you are running using the VER command.\n\nThis book first describes using the Windows NT command interpreter, how it receives, parses, and processes commands from users. Then it describes various commands available.\n\nTo obtain an extensive list of Windows commands and their short summaries, open the command prompt on any Windows computer, and type . To find out about a particular command, type the name of the command followed by \"/?\".\n\nThe subject of this book is also known as \"batch programming\", even though \"batch\" refers not only to batch files for MS DOS and Windows command interpreter. Other subject terms include \"batch file programming\", \"batch file scripting\", \"Windows batch command\", \"Windows batch file\", \"Windows command line\", \"Windows command prompt\", and \"Windows shell scripting\".\n\nFor Windows scripting, cmd.exe is a legacy technology; a modern equivalent is PowerShell, which is based on .NET and whose streams for pipelines are objects, not character (byte) streams. PowerShell capabilities vastly outstrip those of cmd.exe; PowerShell has the capabilities of a full programming language, including typed content of variables, floating-point arithmetic, big integers, GUI programming via .NET classes, etc. Nonetheless, cmd.exe is still useful for simple scripting and command-line interaction tasks, often offering shorter syntax and quicker startup time, and working with the character stream pipelining familiar from other operating systems. cmd.exe can be enhanced by commands known from other operating systems; see #Unix commands. Another alternative for scripting Windows is the popular Python with its pywin32 and wmi libraries; however, that requires installation.\n\nThe parsing of a command line into a sequence of commands is complex. There are four main components:\n• Variable substitution: A command line is scanned for variable specifications, and any found are replaced with the contents of those variables.\n• Quoting: Special characters can be quoted, to remove their special meanings.\n• Syntax: Command lines are developed into a sequence of commands according to a syntax.\n• Redirection: Redirection specifications are applied, and removed from the command line, before an individual command in a sequence is executed.\n\nCommand lines can contain variable specifications. These comprise a % character followed by a name, followed by a second % character unless the name is a digit in 0 ... 9 or an asterisk *.\n\nVariable specifications are replaced with values as follows:\n• %varname%, such as %PATH% or %USERNAME%, is replaced with the value of the named environment variable. For example, %PATH% is replaced by the value of the PATH environment variable. The variable name match is case insensitive: %PATH% and %path% have the same effect.\n• %n for 0 <= n <= 9, such as %0 or %9, is replaced with the value of the n-th parameter passed to the batch file when it was invoked, subject to any subsequent modifications by the SHIFT command. For example: %2 is replaced by the value of the second batch file parameter. In interactive use (outside of a batch), no substitution takes place for this case.\n• %* is replaced with the values of all the command-line parameters except for %0, even those beyond index 9. SHIFT command has no impact on the result of %*. See also Command-line arguments. In interactive use (outside of a batch), no substitution takes place for this case.\n\nSome variable names are not visible using SET command. Rather, they are made available for reading using the % notation. To find out about them, type \"help set\".\n\nSpecial variable names and what they expand to:\n\nYou can prevent the special characters that control command syntax from having their special meanings as follows, except for the percent sign (%):\n• You can surround a string containing a special character by quotation marks.\n• You can place caret (^), an escape character, immediately before the special characters. In a command located after a pipe (|), you need to use three carets (^^^) for this to work.\n\nThe special characters that need quoting or escaping are usually <, >, |, &, and ^. In some circumstances, ! and \\ may need to be escaped. A newline can be escaped using caret as well.\n\nWhen you surround the string using quotation marks, they become part of the argument passed to the command invoked. By contrast, when you use caret as an escape character, the caret does not become part of the argument passed.\n\nThe percent sign (%) is a special case. On the command line, it does not need quoting or escaping unless two of them are used to indicate a variable, such as %OS%. But in a batch file, you have to use a double percent sign (%%) to yield a single percent sign (%). Enclosing the percent sign in quotation marks or preceding it with caret does not work.\n• echo \"Johnson & son\"\n• Echoes the complete string rather than splitting the command line at the & character. Quotes are echoed as well\n• echo Johnson ^& son\n• As above, but using caret before the special character ampersand. No quotes are echoed.\n• echo Johnson & son\n• Does not use an escape character and therefore, \"son\" is interpreted as a separate command, usually leading to an error message that command son is not found.\n• echo A ^^ B\n• Echoes A ^ B. Caret needs escaping as well or else it is interpreted as escaping a space.\n• echo > NUL | echo A ^^^^ B\n• Echoes A ^ B. When after a pipe, a caret used for escaping needs to be tripled to work; the fourth caret is the one being escaped.\n• if 1 equ 1 ^\n\necho Equal &^\n\necho Indeed, equal\n• Echoes the two strings. The caret at the end of the line escapes the newlines, leading to the three lines being treated as if they were a single line. The space before the first caret is necessary or else 1 gets joined with the following echo to yield 1echo.\n• attrib File^ 1.txt\n• Does not show attributes of file named \"File 1.txt\" since escaping of space does not work. Using quotes, as in attrib \"File 1.txt\", works.\n• echo The ratio was 47%.\n• If run from a batch, the percent sign is ignored.\n• echo The ratio was 47%%.\n• If run from a batch, the percent sign is output once.\n• set /a modulo=14%%3\n• If run from a batch, sets modulo variable to 2, the remainder of dividing 14 by 3. Does not work with single %.\n• for %%i in (1,2,3) do echo %%i\n• If run from a batch, outputs 1, 2 and 3.\n• echo %temp%\n• Outputs the content of temp variable even if run from a batch file. Use of the percent sign in a batch to access environment variables and passed arguments needs no escaping.\n• echo ^%temp^%\n• Outputs literally %temp% when run from the command line.\n• echo //comment line | findstr \\//\n• Command FINDSTR uses backslash (\\) for escaping. Unlike caret, this is internal to the command and unknown to the command shell.\n\nCommand lines are developed into a sequence of commands according to a syntax. In that syntax, simple commands may be combined to form pipelines, which may in turn be combined to form compound commands, which finally may be turned into parenthesized commands.\n\nA simple command is just a command name, a command tail, and some redirection specifications. An example of a simple command is .\n\nA pipeline is several simple commands joined together with the \"pipe\" metacharacter—\"|\", also known as the \"vertical bar\". The standard output of the simple command preceding each vertical bar is connected to the standard input of the simple command following it, via a pipe. The command interpreter runs all of the simple commands in the pipeline in parallel. An example of a pipeline (comprising two simple commands) is .\n\nA compound command is a set of pipelines separated by conjunctions. The pipelines are executed sequentially, one after the other, and the conjunction controls whether the command interpreter executes the next pipeline or not. An example of a compound command (comprising two pipelines, which themselves are just simple commands) is .\n• & - An unconditional conjunction. The next pipeline is always executed after the current one has completed executing.\n• && - A positive conditional conjunction. The next pipeline is executed if the current one completes executing with a zero exit status.\n• || - A negative conditional conjunction. The next pipeline is executed if the current one completes executing with a non-zero exit status.\n\nA parenthesized command is a compound command enclosed in parentheses (i.e. and ). From the point of view of syntax, this turns a compound command into a simple command, whose overall output can be redirected.\n\nFor example: The command line causes the standard output of the entire compound command to be redirected to somefile.\n• Using parenthesis/brackets to group expressions at ss64.com\n\nRedirection specifications are applied, and removed from the command line, before an individual command in a sequence is executed. Redirection specifications control where the standard input, standard output, and standard error file handles for a simple command point. They override any effects to those file handles that may have resulted from pipelining. (See the preceding section on command syntax.) Redirection signs > and >> can be prefixed with 1 for the standard output (same as no prefix) or 2 for the standard error.\n• dir *.txt >listing.log\n• Redirects the output of the dir command to listing.log file.\n• dir *.txt > listing.log\n• As above; the space before the file name makes no difference. However, if you type this into the command window, auto-completion with tab after typing \"> l\" actually works, while it does not work with \">listing.log\".\n• dir *.txt 2>NUL\n• Redirects errors of the dir command to nowhere.\n• dir *.txt >>listing.log\n• Redirects the output of the dir command to listing.log file, appending to the file. Thereby, the content of the file before the redirected command was executed does not get lost.\n• dir *.txt >listing.log 2>&1\n• Redirects the output of the dir command to listing.log file, along with the error messages.\n• dir *.txt >listing.log 2>listing-errors.log\n• Redirects the output of the dir command to listing.log file, and the error messages to listing-errors.log file.\n• >myfile.txt echo Hello\n• The redirection can precede the command.\n• echo Hello & echo World >myfile.txt\n• Only the 2nd echo gets redirected.\n• (echo Hello & echo World) >myfile.txt\n• Output of both echos gets redirected.\n• type con >myfile.txt\n• Redirects console input (con) to the file. Thus, allows multi-line user input terminated by user pressing Control + Z. See also #User input.\n• (for %i in (1,2,3) do @echo %i) > myfile.txt\n• Redirects the entire output of the loop to the file.\n• for %i in (1,2,3) do @echo %i > myfile.txt\n• Starts redirection anew each time the body of the loop is entered, losing the output of all but the latest loop iteration.\n\nThe command interpreter reloads the content of a batch after each execution of a line or a bracketed group.\n\nIf you start the following batch and change \"echo A\" to \"echo B\" in the batch shortly after starting it, the output will be B.\n\nWhat is on a single line does matter; changing \"echo A\" in the following batch after running it has no impact:\n\nNor have after-start changes have any impact on commands bracketed with ( and ). Thus, changing \"echo A\" after starting the following batch has no impact:\n\nDitto for any other enclosing, including this one:\n\nThe environment variables of the command interpreter process are inherited by the processes of any (external) commands that it executes. A few environment variables are used by the command interpreter itself. Changing them changes its operation.\n\nEnvironment variables are affected by the SET, PATH, and PROMPT commands.\n\nTo unset a variable, set it to empty string, such as \"set myvar=\".\n\nThe command interpreter inherits its initial set of environment variables from the process that created it. In the case of command interpreters invoked from desktop shortcuts this will be Windows Explorer, for example.\n\nCommand interpreters generally have textual user interfaces, not graphical ones, and so do not recognize the Windows message that informs applications that the environment variable template in the Registry has been changed. Changing the environment variables in Control Panel will cause Windows Explorer to update its own environment variables from the template in the Registry, and thus change the environment variables that any subsequently invoked command interpreters will inherit. However, it will not cause command interpreters that are already running to update their environment variables from the template in the Registry.\n\nThe COMSPEC environment variable contains the full pathname of the command interpreter program file. This is just inherited from the parent process, and is thus indirectly derived from the setting of COMSPEC in the environment variable template in the Registry.\n\nThe value of the PATH environment variable comprises a list of directory names, separated by semi-colon characters. This is the list of directories that are searched, in order, when locating the program file of an external command to execute.\n\nThe value of the PATHEXT environment variable is a list of filename extensions separated by semicolons (\";\"). This is the list of filename extensions that are applied, in order, when locating the program file of an external command to execute.\n\nAn example content of PATHEXT printed by \"echo %PATHEXT%\":\n\nBy adding \".PL\" to the variable, you can ensure Perl programs get run from the command line even when typed without the \".pl\" extension. Thus, instead of typing \"mydiff.pl a.txt b.txt\", you can type \"mydiff a.txt b.txt\".\n\nAdding \".PL\" to the variable in Windows Vista and later:\n• setx PATHEXT %PATHEXT%;.PL\n• If you use \"set\" available in Windows XP, the effect will be temporary and impacting only the current console or process.\n• Making Python scripts run on Windows without specifying “.py” extension at stackoverflow\n\nThe PROMPT environment variable controls the text emitted when the command interpreter displays the prompt. The command interpreter displays the prompt when prompting for a new command line in interactive mode, or when echoing a batch file line in batch file mode.\n\nVarious special character sequences in the value of the PROMPT environment variable cause various special effects when the prompt is displayed, as in the following table:\n\nMost Windows commands provide switches AKA options to direct their behavior.\n• Switches most often consist of a single-letter; some switches consist of a sequence of multiple letters.\n• Switches are preceded with a slash (/) rather than, as in some other operating systems, with a minus sign (-).\n• Switches are case-insensitive rather than, as in some other operating systems, case-sensitive.\n• If a command from another operating system is ported to Windows (such as grep), it usually retains the option conventions from the original operating system, including the use of minus sign and case-sensitivity.\n• dir /?\n• Outputs the help. This option is provided by many commands.\n• dir /b /s\n• Lists all files and folders in the current folder recursively. Two switches are used: b and s.\n• dir /bs\n• Does not work; switches cannot be accumulated behind a single slash.\n• findstr /ric:\"id: *[0-9]*\" File.txt\n• Unlike many other commands, findstr allows the accumulation of switches behind a single slash. Indeed, r, i and c are single-letter switches.\n• dir/b/s\n• Works. In dir, removing whitespace between the command and the first switch or between the switches does not make a difference; thus, does the same as dir /b /s.\n• tree/f/a\n• Does not work, unlike tree /f /a. In tree, separation by whitespace is mandatory. Nor does find/i/v work.\n• dir /od\n• The switch letter o is further modified by a single letter specifying that ordering should be by date. The letter d is not a switch by itself. Similar cases include dir /ad and more /t4.\n• dir /B /S\n• The switches are case-insensitive, unlike in some other operating systems.\n• sort /reverse file.txt\n• Sort allows the switch string to be longer than a single-letter.\n• sort /reve file.txt\n• Sort allows the specified switch string to be a substring of the complete long name of the switch. Thus, does the same as the above.\n• sort /reva file.txt\n• Does not work, since \"reva\" is not a substring of \"reverse\".\n• taskkill /im AcroRd32.exe\n• Taskkill requires a multiletter switch name for /im; shortening to /i does not work.\n• java -version\n• Java, which originated in the environment of another operating system family, uses the minus convention for its switches AKA options.\n• grep --help\n• If GNU grep is installed, it requires multi-letter switches to be preceded by two dashes.\n\nCommands usually set error level at the end of their execution. In Windows NT and later, it is a 32-bit signed integer; in MS DOS, it used to be an integer from 0 to 255. Keywords: return code, exit code, exit status.\n\nThe conventional meaning of the error level:\n• The error levels being set are usually positive.\n• If the command does not distinguish various kinds of failure, the error level on failure is usually 1.\n\nUses of the error level:\n• It can be tested using && and ||; see also #Syntax.\n• It can be tested using IF.\n• The value can be accessed from ERRORLEVEL variable.\n• dir >NUL && echo Success\n• The part after && is executed only if the error level is zero.\n• color 00 || echo Failure\n• The part after || is executed only if the error level is non-zero, whether positive or negative.\n• echo %ERRORLEVEL%\n• Outputs the error level without changing it.\n• if %errorlevel% equ 0 echo The error level is zero, meaning success.\n• if %errorlevel% neq 0 echo The error level is non-zero, meaning failure.\n• if errorlevel 1 echo The error level is >= 1, meaning failure via positive error level.\n• Does not cover failure via negative error level. Note the \">=\" part: this is not the same as if %errorlevel% equ 1.\n• cmd /c \"exit /b 10\"\n• In the middle of a batch file or on the command line, sets the error level to 10.\n• (cmd /c \"exit /b 0\" && Echo Success) & (cmd /c \"exit /b -1\" || Echo Failure)\n• As above, showing the error level is indeed affected.\n• (cmd /c \"exit /b 0\" & cmd /c \"exit /b 1\") || Echo Failure\n• The error level of a chain created by & is the error level of the last command of the chain.\n• cmd /c \"exit /b -1\" & if not errorlevel 1 echo Would-be success\n• The \"if not errorlevel 1\" test, which might appear to test for success, passes on negative numbers: it tests on \"not error level >= 1\", which is \"error level <= 0\".\n• set myerrorlevel=%errorlevel%\n• Remembers the error level for later.\n• set errorlevel=0\n• To be avoided: overshadows the built-in errorlevel variable. Ensures that subsequent accesses via %ERRORLEVEL% return 0 rather than the actual error level.\n• cmd /c \"exit /b 0\"\n\nif 1 equ 1 ( cmd /c \"exit /b 1\" & echo %errorlevel% )\n• Outputs 0, since %errorlevel% gets expanded before cmd /c \"exit /b 1\" gets executed.\n• if not \"%a:bc=%\"==\"%a%\" echo yes\n• If variable a contains \"bc\" as a substring, echo \"yes\".\n• This test is a trick that uses string replacement, discussed below.\n• This test does not work if the variable contains a quotation mark.\n\nSee also the help for SET command: set /?.\n\nSplitting a string by any of \" \", \",\" and \";\": [\"space\", \"comma\" and \"semicolon\":]\n\nSplitting a string by semicolon, assuming the string contains no quotation marks:\n• The above string processing does not work with parameter variables (%1, %2, ...).\n\nThe command-line arguments AKA command-line parameters passed to a batch script are accessible as %1, %2, ..., %9. There can be more than nine arguments; to access them, see how to loop over all of them below.\n\nThe syntax %0 does not refer to a command-line argument but rather to the name of the batch file.\n\nTesting for whether the first command-line argument has been provided:\n\nA robust looping over all command-line arguments using SHIFT (for each command-line argument, ...):\n\nA robust looping over all command-line arguments using SHIFT without modifying %1, %2, etc.:\n\nLooping over all command-line arguments, albeit not a robust one:\n\nThis looks elegant but is non-robust, maltreating arguments containing wildcards (*, ?). In particular, the above for command replaces arguments that contain wildcards (*, ?) with file names that match them, or drops them if no files match. Nonetheless, the above loop works as expected as long as the passed arguments do not contain wildcards.\n\nFinding the number of command-line arguments, in a non-robust way:\n\nAgain, this does not work with arguments containing wildcards.\n\nThe maximum possible number of arguments is greater than 4000, as empirically determined on a Windows Vista machine. The number can differ on Windows XP and Windows 7.\n\nIn passing arguments to a batch script, characters used for argument separation are the following ones:\n\nThus, the following lines pass the same four arguments:\n\nYes, even the line with \"a b,c;,;=d\" passes four arguments, since a sequence of separating characters is considered a single separator.\n\nTo have a space, comma or semicolon in the argument value, you can pass the value enclosed in quotation marks. However, the quotation marks become part of the argument value. To get rid of the enclosing quotation marks when referring to the argument in the script, you can use %~<number> described in #Percent tilde.\n\nWhen passing arguments to an invoked command rather than a batch script, you usually need to separate the command from the first argument using a space. However, for internal commands, that separation is not necessary if the first character after the command name is one of a couple of symbols, including .\\/, and more:\n• tree.\n• Fails: \"tree.\" not found. tree is an external command.\n• dir..\n• Lists the content of the parent directory.\n• cd..\n• Changes the current directory to the parent one.\n• cd\\\n• Changes the current directory to the root one.\n\nMany commands accept file name wildcards--characters that do not stand for themselves and enable matching of a group of filenames.\n• ? (question mark): a single character other than a period (\".\") or, if part of a sequence of question marks at the end of a maximum period-free part of a file name, possibly zero number of characters; see examples for clarification\n• dir *.txt\n• Matches Myfile.txt, Plan.txt and any other file with the .txt extension.\n• dir *txt\n• The period does not need to be included. However, this will also match files named without the period convention, such as myfiletxt.\n• ren *.cxx *.cpp\n• Renames all files with .cxx extension to have .cpp extension.\n• dir a?b.txt\n• Does not match ab.txt, since a question mark followed by a character other than a question mark or period cannot match zero characters.\n• Does not match a.b.txt, since a question mark cannot match a period.\n• dir ???.txt\n• Matches .txt, a.txt, aa.txt, and aaa.txt, among others, since each question mark in the sequence followed by a period can match zero number of characters.\n• dir a???.b???.txt???\n• Matches a.b.txt, among others. While the last question mark sequence is not followed by a period, it is still a sequence at the end of a maximum period-free part of a file name.\n• dir ????????.txt & @REM eight question marks\n• Matches the same files as *.txt, since each file also has a short file name that has no more than 8 characters before .txt.\n\nQuirk with short file names: the wildcard matching is performed both on long file names and the usually hidden short 8 chars + period + 3 chars file names. This can lead to bad surprises.\n\nUnlike shells of some other operating systems, the cmd.exe shell does not perform wildcard expansion (replacement of the pattern containing wildcards with the list of file names matching the pattern) on its own. It is the responsibility of each program to treat wildcards as such. This enables such things as \"ren *.txt *.bat\", since the ren command actually sees the * wildcard rather than a list of files matching the wildcard. Thus, \"echo *.txt\" does not display files in the current folder matching the pattern but rather literally outputs \"*.txt\". Another consequence is that you can write \"findstr a.*txt\" without fearing that the \"a.*txt\" part gets replaced with the names of some files in the current folder. Furthermore, recursive \"findstr /s pattern *.txt\" is possible, while in some other operating systems, the \"*.txt\" part would get replaced with the file names found in the current folder, disregarding nested folders.\n\nYou can get input from the user using the following methods:\n• Using \"type con >myfile.txt\", for which the multi-line user input is terminated by user pressing Control + Z.\n\nWhen a command-line argument contains a file name, special syntax can be used to get various information about the file.\n\nThe following syntaxes expand to various information about the file passed as %1:\n\nThe same syntax applies to single-letter variables created by FOR command, such as \"%%i\".\n\nTo learn about this subject from the command line, type \"call /?\" or \"for /?\".\n\nFunctions AKA subprograms can be emulated using CALL, labels, SETLOCAL and ENDLOCAL.\n\nAn example of a function that determines arithmetic power:\n\nWhile the goto :eof at the end of the function is not really needed, it has to be there in the general case in which there is more than one function.\n\nThe variable into which the result should be stored can be specified on the calling line as follows:\n\nIn the example above, exit /b is used instead of goto :eof to the same effect.\n\nAlso, remember that the equal sign is a way to separate parameters. Thus, the following items achieve the same:\n\nBatch scripts can do simple 32-bit signed integer arithmetic and bitwise manipulation using SET /a command. The largest supported integer is 2147483647 = 2 ^ 31 - 1. The smallest supported integer is -2147483648 = - (2 ^ 31), assignable with the trick of set /a num=-2147483647-1. The syntax is reminiscent of the C language.\n\nArithmetic operators include *, /, % (modulo), +, -. In a batch, modulo has to be entered as \"%%\". There is no exponentiation operator.\n\nBitwise operators interpret the number as a sequence of 32 binary digits. These are ~ (complement), & (and), | (or), ^ (xor), << (left shift), >> (arithmetic AKA sign-preserving right shift). There is no logical AKA sign-erasing right shift and no bit rotation operators.\n\nA logical operator of negation is !: it turns zero into one and non-zero into zero.\n\nA combination operator is ,: it allows more calculations in one set command.\n\nCombined assignment operators are modeled on \"+=\", which, in \"a+=b\", means \"a=a+b\". Thus, \"a-=b\" means \"a=a-b\". Similarly for *=, /=, %=, &=, ^=, |=, <<=, and >>=.\n\nThe precedence order of supported operators, is as follows:\n\nLiterals can be entered as decimal (1234), hexadecimal (0xffff, leading 0x), and octal (0777, leading 0).\n\nThe internal bit representation of negative integers is two's complement. This provides for bit operations on negative integers, assignment and arithmetic results for hexadecimal literals larger than 0x7FFFFFFF and smaller or equal to 0xFFFFFFFF, and overflow and underflow behavior for arithmetic operations. For instance, -2147483648 is represented as 0x80000000, and therefore the binary complement operation \"set /a num=~(-2147483647-1)\" yields 2147483647, which equals 0x7FFFFFFF (type set /a num=0x7FFFFFFF to check). For another instance, \"-2 & 0xF\" yields 14 since -2 is 0xFFFFFFFE, which ANDed with 0xF yields 0xE, which is 14. While maximum decimal literal is 2147483647, maximum hexadecimal literal is 0xFFFFFFFF, which gets assigned as decadic -1. Similarly, 0xFFFFFFFE gets assigned as decadic -2, etc., and therefore, e.g. 0xFFFFFFFE - 2 yields -4. A hexadecimal literal larger than 0xFFFFFFFF is converted to -1, e.g. 0xFFFFFFFFFFFFFFFF, while a decimal literal larger than 2147483647 yields an error. The smallest representable 32-bit signed integer is -2147483648; \"-2147483648\" cannot be assigned directly since this is interpreted as -1 * 2147483648, and 2147483648 is larger than the maximum decimal literal 2147483647; however, -2147483647-1 does the trick, as does 0x80000000. \"-2147483647-2\" underflows to the largest positive integer, 2147483647; similarly, \"-2147483647-3\" underflows to 2147483646. In the other direction, \"2147483647+1\" overflows to -2147483648, which corresponds to the addition being performed on the internal bit representation as if unsigned; \"2147483647+2\" overflows to -2147483647, etc.\n\nAs some of the operators have special meaning for the command interpreter, an expression using them needs to be enclosed in quotation marks, such as this:\n• set /a num=255^^127\n• Escape ^ using ^ instead of quotation marks.\n• set /a n=(2+3)*5\n• Performs a simple calculation and stores the result in environment variable n. When called interactively (outside of a batch), outputs the result of calculation, otherwise outputs nothing.\n• set /a (2+3)*5\n• When called interactively (outside of a batch), outputs the result of calculation, otherwise outputs nothing. Changes no variable, being useful only for interactive use.\n• set n1=40 & set n2=25\n• Uses the standard percent notation for variable expansion.\n• set n1=40 & set n2=25\n• Avoids the percent notation around variable names as unneeded for /a.\n• set /a num=\"255^127\"\n• Encloses \"^\" in quotation marks to prevent its special meaning for the command interpreter.\n• set /a n1 = (10 + 5)/5\n• The spaces around = do not matter with /a. However, getting used to it lends itself to writing \"set var = value\" without /a, which sets the value of \"var \" rather than \"var\".\n• if 1==1 (set /a n1=(2+4)*5)\n• Does not work: the arithmetic brackets within grouping brackets cause trouble.\n• if 1==1 (set /a n1=^(2+4^)*5)\n• Escaping the arithmetic brackets with caret (^) works, as does enclosing \"n1=2+(4*5)\" in quotation marks.\n• set /a n1=n2=2\n• Has the same effect as n1=2,n2=2.\n• set n1=40 & set n2=25 & set /a n3=%n1%+%n2%\n• Does not work unless n1 and n2 were set previously. The variable specifications \"%n1%\" and \"%n2\"% get expanded before the first set command is executed. Dropping percent notation makes it work.\n• set /a n1=2,n2=3,n3=%n1%+%n2%\n• Does not work unless n1 and n2 were set previously, for the reason stated in the previous example.\n• set /a n1=\"~0\"\n• Sets n1 to -1, in keeping with the underlying two's complement representation of negative integers. Thus, bitwise complements (~) of non-negative integers yield negative integers.\n• set /a \"n1=-1>>1\"\n• Outputs -1 as a result of the \">>\" operator being an arithmetic right shift, preserving the highest bit of the underlying bitwise representation of the signed 32-bit integer. Note that -1 is internally 0xFFFFFFFF. Logical right shift (highest-bit-dropping one) would result in 0x7FFFFFFF, the maximum positive 32-bit integer.\n• set /a \"n1=(-1>>1) & 0x7FFFFFFF\"\n• Emulates logical right shift (highest-bit-dropping one) by 1 by clearing the highest bit of the underlying bitwise representation of the 32-bit signed integer.\n• set /a \"n=-1, shiftcount=4, n1=(n>>shiftcount) & (0x7FFFFFFF >> (shiftcount-1))\"\n• Emulates logical right shift for shiftcount > 0, which when by more than 1 bit requires clearing multiple highest bits.\n• set /a \"n1=1<<32\"\n• Yields 0 for the right operand being 32 or higher, or when negative. This is unlike the behavior of the left shift instruction on modern x86 processors, which for 32-bit registers masks the right operand to constrain it to 5 bits. Thus, using the x86 instruction, the result would be 1 since 32 & 0x1F is 0. In the C language, the result is undefined and the actual result is platform dependent.\n• set /a n1=\"%random%>>10\"\n• A pseudo-random number from 0 to 31 = 2^5-1. The shift right operator drops 10 out of 15 bits, keeping 5 bits.\n• set /a n1=%random%%50\n• A pseudo-random number from 0 to 49. Uses the % modulo operator. In a batch, %% is needed for modulo: set /a n1=%random%%%50. Because of this particular use of the modulo, the result is not perfectly uniform; it is uniform if the 2nd modulo operand--above 50--equals to a power of 2, e.g. 256 = 2^8.\n• set /a n1=\"(%random%<<15)+%random%\"\n• A pseudo-random number from 0 to 1073741823 = 2^30 - 1. Combines the two 15-bit random numbers produced by %random% alone to produce a single 30-bit random number..\n• set /a n1=\"((%random%<<15)+%random%)%1000000\"\n• As above, but again using modulo, this time to achieve the range 0 to 999999.\n\nAn example calculation that prints prime numbers:\n• Rules for how CMD.EXE parses numbers by dbenham, dostips.com\n\nFiles can be found using #DIR, #FOR, #FINDSTR, #FORFILES, and #WHERE.\n• dir /b /s *base*.doc*\n• Outputs all files in the current folder and its subfolders such that the file name before the extension contains the word \"base\" and whose extension starts with \"doc\", which includes \"doc\" and \"docx\". The files are output with full paths, one file per line.\n• dir /b /s *.txt | findstr /i pers.*doc\n• Combines the result of outputting files including their complete paths with the findstr filtering command supporting limited regular expressions, yielding a versatile and powerful combination for finding files by names and the names of their directories.\n• for /r %i in (*) do @if %~zi geq 1000000 echo %~zi %i\n• For each file in the current folder and its subfolders that has the size greater than or equal to 1,000,000 bytes, outputs the file size in bytes and the full path of the file. For the syntax in %~zi, see #Percent tilde.\n• forfiles /s /d 06/10/2015 /c \"cmd /c echo @fdate @path\"\n• For each file in the current folder and its subfolders modified on 10 June 2015 or later, outputs the file modification date and full file path. The date format after /d is locale specific. Thus, allows to find most recently modified files.\n• (for /r %i in (*) do @echo %~ti :: %i) | findstr 2015.*::\n• Searching the current folder recursively, outputs files whose last modification date is in year 2015. Places the modification date and time, followed by a double colon, before the file name. Works as long as the used version of Windows and locale displays dates in a format that contains four-digit years. The double colon is used to make sure the findstr command is matching the date and not the file name.\n• for /r %i in (*) do @echo %~ti | findstr 2015 >NUL && echo %i\n• As above, outputs files changed in 2015. Unlike the above, only outputs the files, not the modification dates.\n• findstr /i /s /m cat.*mat *.txt\n• Finds files by their content. Performs a full text search for regular expression cat.*mat in files with names ending in .txt, and outputs the files names. The /m switch ensures only the file names are output.\n• where *.bat\n• Outputs all .bat files in the current directory and in the directories that are in PATH.\n\nWhen using Windows command line from the standard console that appears after typing cmd.exe after pressing Windows + R, you can use multiple keyboard shortcuts, including function keys:\n• Tab: Completes the relevant part of the typed string from file names or folder names in the current folder. The relevant part is usually the last space-free part, but use of quotation marks changes that. Generally considers both files and folders for completion, but cd command only considers folders.\n• Up and down arrow keys: Enters commands from the command history, one at a time.\n• F1: Types the characters from the single previously entered command from the command history, one character at a time. Each subsequent press of F1 enters one more character.\n• F2: Asks you to type a character, and enters the shortest prefix of the previous command from the command history that does not include the typed character. Thus, if the previous command was echo Hello world and you typed o, enters ech.\n• F3: Enters the single previous command from the command history. Repeated pressing has no further effect.\n• F4: Asks you to type a character, and erases the part of the currently typed string that starts at the current cursor location, continues to the right, and ends with the character you entered excluding that character. Thus, if you type echo Hello world, place the cursor at H using left arrow key, press F4 and then w, you get echo world. If you press F4 and then Enter, erases the text from the cursor to the end of the line.\n• F5: Enters previous commands from the command history, one at a time.\n• F7: Opens a character-based popup window with the command history, and lets you use arrow key and enter to select a command. After you press enter in the popup, the command is immediately executed.\n• F8: Given an already typed string, shows items from the command history that have that string as a prefix, one at a time.\n• F9: Lets you enter the number of the command from the command history, and then executes the command.\n\nThe above are also known as command prompt keyboard shortcuts.\n\nThe availability of the above shortcuts does not seem to depend on running DOSKEY.\n\nFile and directory paths follow certain conventions. These include the possible use of a drive letter followed by a colon (:), the use of backslash (\\) as the path separator, and the distinction between relative and absolute paths.\n\nForward slash (/) often works when used instead of (\\) but not always; it is normally used to mark switches (options). Using forward slash can lead to various obscure behaviors, and is best avoided.\n\nSpecial device names include NUL, CON, PRN, AUX, COM1, ..., COM9, LPT1, ..., LPT9; these can be redirected to.\n• attrib C:\\Windows\\System32\n\notepad.exe\n• Succeeds if the file exists, as it should. This is an absolute path with a drive letter. It is also known as a fully qualified path.\n• attrib \\Windows\\System32\n\notepad.exe\n• Succeeds if the current drive is C:, and if the file exists, as it should. This is an absolute path without a drive letter.\n• cd /d C:\\Windows & attrib System32\n\notepad.exe\n• Succeeds if the file exists. The path given to attrib is a relative path.\n• cd /d C:\\Windows\\System32 & attrib C:notepad.exe\n• Succeeds if the file exists. The path given to attrib is a relative one despite containing a drive letter: there would have to be C:\n\notepad.exe with a backslash for that to be an absolute path.\n• cd /d C:\\Windows & attrib .\\System32\n\notepad.exe\n• Succeeds if the file exists. A single period denotes the current folder.\n• cd /d C:\\Windows & attrib .\\System32\\\\\n\notepad.exe\n• Succeeds if the file exists. Piling of backslashes has no impact beyond the first backslash.\n• cd /d C:\\Windows & attrib .\\System32\\\n• Fails. Folders are usually denoted without the final backslash.\n• attrib C:\\Windows\\System32\\..\\..\\Windows\\System32\n• A double period can be used in the middle of the path to navigate to the parent folder, even multiple times.\n• attrib \\\\myserver\\myvolume\n• A network UNC path starts with double backslash and no drive letter.\n• cd \\\\myserver\\myvolume\n• Does not work; changing to a server folder in this direct manner does not work.\n• pushd \\\\myserver\\folder\n• Automatically creates a drive for the folder and changes to it. After you use #POPD, the drive gets unassigned again.\n• attrib C:/Windows/System32/notepad.exe\n• Succeeds on multiple versions of cmd.exe. Uses forward slashes.\n• Why does the cmd.exe shell on Windows fail with paths using a forward-slash ('/) path separator?, stackoverflow.com\n\nArrays can be emulated in the delayed expansion mode using the combination of % and ! to indicate variables. There, %i% is the value of variable i with the immediate expansion while !i! is the value of variable i in the delayed expansion.\n• Arrays, linked lists and other data structures in cmd.exe (batch) script, stackoverflow.com\n\nSome tasks can be conveniently achieved with Perl one-liners. Perl is a scripting language originating in the environment of another operating system. Since many Windows computing environments have Perl installed, Perl one-liners are a natural and compact extension of Windows batch scripting.\n• echo \"abcbbc\"| perl -pe \"s/a.*?c/ac/\"\n• Lets Perl act as sed, the utility that supports textual replacements specified using regular expressions.\n• echo a b| perl -lane \"print $F[1]\"\n• Lets Perl act as cut command, displaying the 2nd field or column of the line, in this case b. Use $F[2] to display 3rd field; indexing starts at zero. Native solution: FOR /f.\n• perl -ne \"print if /\\x22hello\\x22/\" file.txt\n• Acts as grep or FINDSTR, outputting the lines in file.txt that match the regular expression after if. Uses the powerful Perl regular expressions, more powerful than those of FINDSTR.\n• perl -ne \"$. <= 10 and print\" MyFile.txt\n• Lets Perl act as head -10 command, outputting the first 10 lines of the file.\n• for /f %i in ('perl -MPOSIX -le \"print strftime '%Y-%m-%d', localtime\"') do @set isodate=%i\n• Gets current date in the ISO format into isodate variable.\n• perl -MWin32::Clipboard -e \"print Win32::Clipboard->Get()\"\n• Outputs the text content of the clipboard. When stored to getclip.bat, yields a handy getclip command to complement CLIP command.\n• perl -MText::Diff -e \"print diff 'File1.txt', 'File2.txt'\"\n• Outputs differences between two files in a format similar to diff command known from other operating systems, including context lines, lines starting with + and lines starting with -.\n• perl -MWin32::Sound -e \"Win32::Sound::Play('C:\\WINDOWS\\Media\n\notify.wav');\"\n• Plays notification sound in notify.wav without showing any window.\n\nOn the web, Perl one-liners are often posted in the command-line conventions of another operating system, including the use of apostrophe (') to surround the arguments instead of Windows quotation marks. These need to be tweaked for Windows.\n• Why doesn't my Perl one-liner work on Windows? at stackoverflow.com\n\nWindows cmd.exe command interpreter can use commands from Unix-like operating systems, provided they are installed. Example commands include grep, sed, awk, wc, head and tail. The commands are available from GNU project, and their Windows ports exist. You can learn more about the commands in Guide to Unix Wikibook. Beware that batch programs that come to depend on these commands are not guaranteed to work on other Windows machines.\n\nFreely licensed Windows versions of GNU commands can be obtained from the following projects:\n• ezwinports, sourceforge.net: has some fresher ports than GnuWin32\n\nAn alternative way of running GNU commands for Windows 10 is Windows Subsystem for Linux.\n\nThere is no touch command familiar from other operating systems. The touch command would modify the last-modification timestamp of a file without changing its content.\n\nOne workaround, with unclear reliability and applicability across various Windows versions, is this:\n• Windows version of the Unix touch command at stackoverflow.com\n\nThere is no built-in command to get last lines of a file; no equivalent of tail command. However, a batch can be written to do the job and is available from the link below. Alternatively, one can install tail command for Windows, or run a PowerShell equivalent with no installation required.\n• CMD.EXE batch script to display last 10 lines from a txt file, stackoverflow.com\n\nThere is no preinstalled hex dump tool to view file content in hexadecimal. Nonetheless, there are the following options:\n\n1) Use fsutil file createnew to create a file of all zero bytes and use fc to view the bytes via comparison:\n• \n• The notepad.exe bytes that are zero are not shown in the comparison, but other bytes are shown with their offset, one byte per line. You can determine how many initial bytes you want to see by choosing the length of the all-zero-byte file by changing the final 1000 above. To view complete file, create the all-zero-byte file of the length of the inspected file. Far from perfect, but can be used as a quick hack to view e.g. BOM marks or the kind of newlines used.\n\n2) Use certutil -encodeHex, where the encodeHex feature is not officially documented:\n• \n• Writes the file content of file.txt in hexadecimal to filehex.txt. Refuses to overwrite filehex.txt if it exists. You cannot limit the number of bytes to be converted.\n\n4) Install a command such as the feature-rich od or hexdump; see Unix commands. od can do octal dump as well.\n\n5) If you are on old 32-bit version of Windows (not very likely), use debug; see DEBUG.\n• New function - :hexDump by Dave Benham, dostips.com - pure batch; heavy batch magic and also slow\n\nIf your user has elevated administration privileges, you can use these if you start cmd.exe in a particular way. To start cmd.exe with these elevated privileges, you can do the following.\n• Right-click on the cmd.exe icon and select Run as administrator.\n\nTo test whether you have elevated privileges:\n• Run \"net session\", which will fail if you do not have the privileges.\n• No while loop; can be emulated via labels and goto. There is a for loop and an if statement.\n• No break and continue statements for loop control known from the C language.\n• No proper custom functions; a custom function can be created using labels, call and %n parameter expansion.\n• Fragile processing of strings with special characters such as quotation marks (\") or ampersands (&).\n• No arrays; can be emulated in a limited manner.\n• No ternary conditional operator from the C language.\n• No function to convert a character to its ascii value or to convert an ascii value to a character. No sane workarounds.\n• No touch command to change file timestamp from other operating systems; no head and tail commands.\n\nThese commands are all built in to the command interpreter itself, and cannot be changed. Sometimes this is because they require access to internal command interpreter data structures, or modify properties of the command interpreter process itself.\n\nAssociates an extension with a file type (FTYPE), outputs existing associations, or deletes an association. See also FTYPE.\n• assoc\n• Lists all associations, in the format \"<file extension>=<file type>\", as, for example, \".pl=Perl\" or \".xls=Excel.Sheet.8\".\n• Making Python scripts run on Windows without specifying “.py” extension at stackoverflow\n\nIn Windows versions based on Windows NT, does nothing; kept for compatibility with MS DOS.\n• break > empty.txt\n• Creates an empty file or to clears the content of an existing file, taking advantage of the fact that break does nothing and has no output. Shorter to type than \"type nul > empty.txt\".\n\nCalls one batch program from another, calls a subprogram within a single batch program, or, as an undocumented behavior, starts a program. In particular, suspends the execution of the caller, starts executing the callee, and resumes the execution of the caller if and when the callee finishes execution.\n\nBeware that calling a batch program from a batch without using the call keyword results in the execution never returning to the caller once the callee finishes.\n\nThe callee inherits environment variables of the caller, and unless the callee prevents that via SETLOCAL, changes made by the callee to environment variables become visible to the caller once it resumes execution.\n• mybatch.bat\n• If used in a batch, transfers control to mybatch.bat and never resumes the execution of the caller.\n• cmd /c mybatch.bat\n• Similar to call, but resumes execution even when there are errors. Furthermore, any changes the callee makes to environment variables are not propagated to the caller.\n• call notepad.exe\n• Launches Notepad, or in general, any other executable. This is apparently not the intended usage of call, and is not officially documented.\n\nChanges to a different directory, or outputs the current directory. However, if a different drive letter is used, it does not switch to that different drive or volume.\n• cd C:\\Program Files\n• No surrounding quotes are needed around paths with spaces.\n• cd /d C:\\Program Files\n• Changes to the directory of the C: drive even if C: is not the current drive.\n• C: & cd C:\\Program Files.\n• Changes to the directory of the C: drive even if C: is not the current drive.\n• cd ..\n• Changes to the parent directory. Does nothing if already in the root directory.\n• cd ..\\..\n• Changes to the parent directory two levels up.\n• C: & cd C:\\Windows\\System32 & cd ..\\..\\Program Files\n• Uses \"..\" to navigate through the directory tree up and down\n• cd \\\\myserver\\folder\n• Does not work. Changing the directory directly to a network Universal Naming Convention (UNC) folder does not work. Keywords: UNC path.\n• subst A: \\\\myserver\\folder && cd /d A:\n• Changes the directory to a server folder with the use of #SUBST command, assuming drive letter A: is free.\n• pushd \\\\myserver\\folder\n• Automatically creates a drive for the folder and changes to it. After you use #POPD, the drive gets unassigned again.\n• cd C:\\W*\n• Changes to C:\\Windows, in a typical Windows setup. Thus, wildcards work. Useful for manual typing from the command line.\n• cd C:\\W*\\*32\n• Changes to C:\\Windows\\System32, in a typical Windows setup.\n\nCopies files. See also MOVE, XCOPY and ROBOCOPY.\n• copy F:\\File.txt\n• Copies the file into the current directory, assuming the current directory is not F:\\.\n• copy \"F:\\My File.txt\"\n• As above; quotation marks are needed to surround a file with spaces.\n• copy F:\\*.txt\n• Copies the files located at F:\\ and ending in dot txt into the current directory, assuming the current directory is not F:\\.\n• copy F:\\*.txt .\n• Does the same as the above command.\n• copy File.txt\n• Issues an error message, as File.txt cannot be copied over itself.\n• copy File1.txt File2.txt\n• Copies File1.txt to File2.txt, overwriting File2.txt if confirmed by the user or if run from a batch script.\n• copy File.txt \"My Directory\"\n• Copies File.txt into \"My Directory\" directory, assuming \"My Directory\" exists.\n• copy Dir1 Dir2\n• Copies all files directly located in directory Dir1 into Dir2, assuming Dir1 and Dir2 are directories. Does not copy files located in nested directories of Dir1.\n• copy *.txt *.bak\n• For each *.txt file in the current folder, makes a copy ending with \"bak\" rather than \"txt\".\n\nDeletes files. Use with caution, especially in combination with wildcards. Only deletes files, not directories, for which see RD. For more, type \"del /?\".\n• del /s *.txt\n• Deletes the files recursively including nested directories, but keeps the directories; mercilessly deletes all matching files without asking for confirmation.\n• del /p /s *.txt\n• As above, but asks for confirmation before every single file.\n• del /q *.txt\n• Deletes without asking for confirmation.\n\nLists the contents of a directory. Offers a range of options. Type \"dir /?\" for more help.\n• dir\n• Lists the files and folders in the current folder, excluding hidden files and system files; uses a different manner of listing if DIRCMD variable is non-empty and contains switches for dir.\n• dir /s\n• Lists the contents of the directory and all subdirectories recursively.\n• dir /s /b\n• Lists the contents of the directory and all subdirectories recursively, one file per line, displaying complete path for each listed file or directory.\n• dir /a\n• Includes hidden files and system files in the listing.\n• dir /ad\n• Lists directories only. Other letters after /A include S, I, R, A and L.\n• dir /od\n• Orders the files and folders by the date of last modification. Other letters after /O include N (by name), E (by extension), S (by size), and G (folders first)\n• dir /o-s\n• Orders the files by the size descending; the impact on folder order is unclear.\n• dir /-c /o-s /a-d\n• Lists files ordered by size descending, omitting the thousands separator via /-C, excluding folders.\n• dir /s /b /od\n• Lists the contents of the directory and all subdirectories recursively, ordering the files in each directory by the date of last modification. The ordering only happens per directory; the complete set of files so found is not ordered as a whole.\n• dir /a /s\n• Lists files recursively including hidden files and system files. Can be used to find out the disk usage (directory size), by considering the final lines of the output.\n\nOutputs or sets the date. The way the date is output depends on country settings. Date can also be output using \"echo %DATE%\".\n\nGetting date in the iso format, like \"2000-01-28\": That is nowhere easy, as the date format depends on country settings.\n• If you can assume the format of \"Mon 01/28/2000\", the following will do:\n• If you have WMIC, the following is locale independent:\n• for /f %i in ('wmic os get LocalDateTime') do @if %i lss a if %i gtr 0 set localdt=%i\n\nset isodate=%localdt:~0,4%-%localdt:~4,2%-%localdt:~6,2%\n• To use the above in a batch, turn %i into %%i and remove @ from before if.\n• If you have Perl installed:\n• for /f %i in ('perl -MPOSIX -le \"print strftime '%Y-%m-%d', localtime\"') do @set isodate=%i\n• How to get current datetime on Windows command line, in a suitable format for using in a filename? at stackoverflow\n\nOutputs messages, or turns command echoing on or off.\n• echo Owner ^& son\n• Uses caret (^) to escape ampersand (&), thereby enabling echoing ampersands.\n• echo 1&echo 2&echo 3\n• Outputs three strings, each followed by a newline.\n• echo.\n• Outputs a newline while the period is not being output. Without the period, outputs \"echo off\" or \"echo on\". Adding a space before the period leads to the period being output. Other characters having the same effect as period include :;,/\\(=+[].\n• echo %random%>>MyRandomNumbers.txt\n• While it seems to output random numbers to MyRandomNumbers.txt, it actually does not do so for numbers 0-9, since these, when placed before >>, indicate which channel is to be redirected. See also #Redirection.\n• echo 2>>MyRandomNumbers.txt\n• Instead of echoing 2, redirects standard error to the file.\n• (echo 2)>>MyRandomNumbers.txt\n• Echoes even a small number (in this case 2) and redirects the result.\n• >>MyRandomNumbers.txt echo 2\n• Another way to echo even a small number and redirect the result.\n• set <NUL /p=Output of a command:\n• Outputs \"Output of a command:\". The output of the next command will be displayed immediately after \":\".\n• set <NUL /p=Current time: & time /t\n• Outputs \"Current time: \" followed by the output of \"time /t\".\n• (set <NUL /p=Current time: & time /t) >tmp.txt\n• Like before, with redirecting the output of both commands to a file.\n\nSee also IF.\n\nEnds local set of environment variables started using SETLOCAL. Can be used to create subprograms: see Functions.\n\nExits the DOS console or, with /b, only the currently running batch or the currently executed subroutine. If used without /b in a batch file, causes the DOS console calling the batch to close.\n\nIn the following examples, %i is to be used from the command line while %%i is to be used from a batch. The index (e.g., %i) must be a single character variable name.\n\nExamples without switches and with /r and /d switches:\n• for %%i in (1,2,3) do echo %%i\n• In a batch, echoes 1, 2, and 3. In a batch, the command must use a double percent sign.\n• The remaining examples are intended to be directly pasted into a command line, so they use a single percent sign and include \"@\" to prevent repetitive display.\n• for %i in (1,2,3) do @echo %i\n• The for command tries to interpret the items as file names and as patterns of file names containing wildcards.\n• It does not complain if the items do not match existing file names, though.\n• for %i in (1,2,a*d*c*e*t) do @echo %i\n• Unless you happen to have a file matching the third pattern, echoes 1 and 2, discarding the third item.\n• for %i in (1 2,3;4) do @echo %i\n• Echoes 1, 2, 3, and 4. Yes, a mixture of item separators is used.\n• for %i in (*.txt) do @echo %i\n• Echoes file names of files located in the current folder and having the .txt extension.\n• for %i in (\"C:\\Windows\\system32\\*.exe\") do @echo %i\n• for /r %i in (*.txt) do @echo %i\n• Echoes file names with full paths, of files having the extension .txt located anywhere in the current folder including nested folders.\n• for /d %i in (*) do @echo %i\n• Echoes the names of all folders in the current folder.\n• for /r /d %i in (*) do @echo %i\n• Echoes the names including full paths of all folders in the current folder, including nested folders.\n• for /r %i in (*) do @if %~zi geq 1000000 echo %~zi %i\n• For each file in the current folder and its subfolders that has the size greater than or equal to 1,000,000 bytes, outputs the file size in bytes and the full path of the file. For the syntax in %~zi, see #Percent tilde.\n• for /l %i in (1,2,11) do @echo %i\n• Echoes the numbers from 1 to 11 with step 2. Thus, the format is (start, step, end). 32-bit signed integers are supported.\n• for /l %i in (10,-1,1) do @echo %i\n• Echoes the numbers from 10 to 1 descending.\n• for /l %i in (1,0,1) do @echo %i\n• for /l %i in (0) do @echo %i\n• for /l %i in () do @echo %i\n• for /l %i in (-10,1) do @echo %i\n• Echoes the numbers from -10 to 0; the unstated end limit integer is taken to be zero.\n• for /l %i in (0xF, 1, 020) do @echo %i\n• Echoes the numbers from 15 to 16; thus, hexadecimal and octal literals are supported.\n• for /l %i in (2147483646,1,2147483647) do @echo %i\n• Echoes 2147483646, then 2147483647, then -2147483648, then -2147483647, and so on. This is probably caused by an increment of 2147483647 overflowing to -2147483648.\n• for /l %i in (-2147483648,1,-2147483647) do @echo %i\n• Echoes -2147483648 and then -2147483647. Thus, directly supports -2147483648 literal, unlike set /a.\n• for /f \"tokens=*\" %i in (list.txt) do @echo %i\n• For each line in a file, echoes the line.\n• for /f \"tokens=*\" %i in (list1.txt list2.txt) do @echo %i\n• For each line in the files, echoes the line.\n• for /f \"tokens=*\" %i in (*.txt) do @echo %i\n• Does nothing. Does not accept wildcards to match file names.\n• for /f \"tokens=1-3 delims=:\" %a in (\"First:Second::Third\") do @echo %c-%b-%a\n• The quotation marks indicate the string is not a file name.\n• The second and third tokens are stored in %b and %c even though %b and %c are not expressly mentioned in the part of the command before \"do\".\n• The two consecutive colons are treated as one separator; %c is not \"\" but rather \"Third\".\n• Does some of the job of the cut command from other operating systems.\n• for /f \"tokens=1-3* delims=:\" %a in (\"First:Second::Third:Fourth:Fifth\") do @echo %c-%b-%a: %d\n• As above, just that the 4th and 5th items get captured in %d as \"Fourth:Fifth\", including the separator.\n• for /f \"tokens=1-3* delims=:,\" %a in (\"First,Second,:Third:Fourth:Fifth\") do @echo %c-%b-%a: %d\n• for /f \"tokens=1-3\" %a in (\"First Second Third,item\") do @echo %c-%b-%a\n• The default delimiters are space and tab. Thus, they differ from the separators used to separate arguments passed to a batch.\n• for /f \"tokens=*\" %i in ('cd') do @echo %i\n• For each line of the result of a command, echoes the line.\n• for /f \"tokens=*\" %i in ('dir /b /a-d-h') do @echo %~nxai\n• For each non-hidden file in the current folder, outputs the file attributes followed by the file name. In the string \"%~nxai\", uses the syntax described at #Percent tilde.\n• for /f \"usebackq tokens=*\" %i in (`dir /b /a-d-h`) do @echo %~nxai\n• As above, but using the backquote character (`) around the command to be executed.\n• for /f \"tokens=*\" %i in ('tasklist ^| sort ^& echo End') do @echo %i\n• Pipes and ampersands in the command to be executed must be escaped using caret (^).\n• (for %i in (1,2,3) do @echo %i) > anyoldtemp.txt\n• To redirect the entire result of a for loop, place the entire loop inside brackets before redirecting. Otherwise, the redirection will tie to the body of the loop, so each new iteration of the body of the loop will override the results of the previous iterations.\n• for %i in (1,2,3) do @echo %i > anyoldtemp.txt\n• An example related to the one above. It shows the consequence of failing to put the loop inside brackets.\n\nContinue: To jump to the next iteration of the loop and thus emulate the continue statement known from many languages, you can use goto provided you put the loop body in a subroutine, as shown in the following:\n\nIf you use goto directly inside the for loop, the use of goto breaks the loop bookkeeping. The following fails:\n• Rules for how CMD.EXE parses numbers by dbenham, dostips.com\n\nOutputs or sets the command to be executed for a file type. See also ASSOC.\n• ftype\n• Lists all associations of commands to be executed with file types, as, for example, 'Perl=\"C:\\Perl\\bin\\perl.exe\" \"%1\" %*'\n• ftype | find \"Excel.Sheet\"\n• Lists only associations whose display line contains \"Excel.Sheet\"\n• Making Python scripts run on Windows without specifying “.py” extension at stackoverflow\n\nGoto within the body of a for loop makes cmd forget about the loop, even if the label is within the same loop body.\n\nConditionally executes a command. Documentation is available by entering IF /? to CMD prompt.\n• <expression1> leq <expression2> -- less than or equal\n\nTo each elementary test, \"not\" can be applied. Apparently there are no operators like AND, OR, etc. to combine elementary tests.\n\nThe /I switch makes the == and equ comparisons ignore case.\n• if not 1 equ 0 echo Not equal\n• if 1 equ 0 echo A & echo B\n• Does nothing; both echo commands are subject to the condition.\n• if not a geq b echo Not greater\n• if 1 equ 0 (echo Equal) else echo Unequal\n• Notice the brackets around the positive then-part to make it work.\n• if /i==/i echo This does not work\n• if \"/i\"==\"/i\" echo Equal, using quotation marks to prevent the literal meaning of /i\n\nCreates a new directory or directories. Has a synonym MKDIR; see also its antonym RD.\n• md Dir\n• Creates one directory in the current directory.\n• md Dir1 Dir2\n• Creates two directories in the current directory.\n• md \"My Dir With Spaces\"\n• Creates a directory with a name containing spaces in the current directory.\n\nMakes a symbolic link or other type of link. Available since Windows Vista.\n\nMoves files or directories between directories, or renames them. See also REN.\n• move File1.txt File2.txt\n• Renames File1.txt to File2.txt, overwriting File2.txt if confirmed by the user or if run from a batch script.\n• move File.txt Dir\n• Moves File.txt file into Dir directory, assuming File.txt is a file and Dir is a directory; overwrites target file Dir\\a.txt if conditions for overwriting are met.\n• move Dir1 Dir2\n• Renames directory Dir1 to Dir2, assuming Dir1 is a directory and Dir2 does not exist.\n• move Dir1 Dir2\n• Moves directory Dir1 into Dir2, resulting in existence of Dir2\\Dir1, assuming both Dir1 and Dir2 are existing directories.\n• move F:\\File.txt\n• Moves the file to the current directory.\n• move F:\\*.txt\n• Moves the files located at F:\\ and ending in dot txt into the current directory, assuming the current directory is not F:\\.\n\nOutputs or sets the value of the PATH environment variable. When outputting, includes \"PATH=\" at the beginning of the output.\n• path\n• Outputs the PATH. An example output:\n• path C:\\Users\\Joe Hoe\\Scripts;%path%\n• Extends the path with C:\\Users\\Joe Hoe\\Scripts, applying only to the process of the cmd.exe.\n• echo %path% | perl -pe \"s/;/\n\n/g\" | sort\n• Shows the folders in the path sorted if you have perl installed.\n\nPrompts the user and waits for a line of input to be entered.\n\nChanges to the drive and directory popped from the directory stack. The directory stack is filled using the PUSHD command.\n\nCan be used to change or reset the cmd.exe prompt. It sets the value of the PROMPT environment variable.\n\nThe PROMPT command is used to set the prompt to \"MyPrompt>\". The CD shows that the current directory path is \"C:\\\". Using PROMPT without any parameters sets the prompt back to the directory path.\n\nPushes the current directory onto the directory stack, making it available for the POPD command to retrieve, and, if executed with an argument, changes to the directory stated as the argument.\n\nRemoves directories. See also its synonym RMDIR and antonym MD. Per default, only empty directories can be removed. Also type \"rd /?\".\n• rd /s Dir1\n• Removes the directory Dir1 including all the files and subdirectories in it, asking for confirmation once before proceeding with the removal. To delete files recursively in nested directories with a confirmation per file, use DEL with /s switch.\n• rd /q /s Dir1\n• Like above, but without asking for confirmation.\n• How does the Windows RENAME command interpret wildcards?, superuser.com\n\nThis is a synonym of REN command.\n\nUsed for remarks in batch files, preventing the content of the remark from being executed.\n\nREM is typically placed at the beginning of a line. If placed behind a command, it does not work, unless preceded by an ampersand, as shown in the example above.\n\nDouble colon is an alternative to REM. It can cause trouble when used in the middle of sequences in parentheses, like those used in FOR loops. The double colon seems to be just a trick, a label that starts with a colon.\n• Which comment style should I use in batch files?, stackoverflow.com\n\nThis is a synonym of RD.\n\nOutputs or sets environment variables. With /P switch, it asks the user for input, storing the result in the variable. With /A switch, it performs simple arithmetic calculations, storing the result in the variable. With string assignments, spaces before and after the equality sign are usually avoided since they lead to usually unintended consequences: \"set name = Peter\" assigns to variable \"name \", while \"set name=Peter\" assigns to variable \"name\". See also #Environment variables and #Calculation.\n• set\n• Outputs a list of environment variables with their values, in the format of VAR=VALUE, a variable per line.\n• set home\n• Outputs a list of environment variables with their values for the variables whose names start with \"home\", case-insensitive, in the format of VAR=VALUE, a variable per line.\n• set HOME\n• As above; the match between the variable name prefix and the variable name is case insensitive.\n• set myname=Joe Hoe\n• Sets the variable to a new value.\n• set mynumber=56\n• Sets the variable to the string value of \"56\".\n• set mynumber=\n• Unsets the variable, removing it from variables. The equal sign (=) must be the final character; with any spaces after the equal sign, they become the new value of the variable.\n• set /P firstline=< File.txt\n• Sets the variable to the first line of the file. An equivalent of head -1 command from other operating systems.\n• set /A result = 4 * ( 6 / 3 )\n• Sets the result variable with the result of a calculation. See also #Calculation.\n• set name = Peter\n\necho *%name %*\n• Sets the value of variable \"name \", with ending space, to the value of \" Peter\", with leading space. The intent was probably to use \"set name=Peter\", with no separating spaces.\n\nWhen used in a batch file, makes all further changes to environment variables local to the current batch file. When used outside of a batch file, does nothing. Can be ended using ENDLOCAL. Exiting a batch file automatically calls \"end local\". Can be used to create subprograms: see Functions.\n\nFurthermore, can be used to enable delayed expansion like this: \"setlocal EnableDelayedExpansion\". Delayed expansion consists in the names of variables enclosed in exclamation marks being replaced with their values only after the execution reaches the location of their use rather than at an earlier point.\n\nThe following is an example of using delayed expansion in a script that prints the specified number of first lines of a file, providing some of the function of the command \"head\" known from other operating systems:\n\nShifts the batch file arguments along, but does not affect %*. Thus, if %1=Hello 1, %2=Hello 2, and %3=Hello 3, then, after SHIFT, %1=Hello 2, and %2=Hello 3, but %* is \"Hello 1\" \"Hello 2\" \"Hello 3\".\n\nStarts a program in new window, or opens a document. Uses an unclear algorithm to determine whether the first passed argument is a window title or a program to be executed; hypothesis: it uses the presence of quotes around the first argument as a hint that it is a window title.\n• start notepad.exe & echo \"Done.\"\n• Starts notepad.exe, proceeding to the next command without waiting for finishing the started one. Keywords: asynchronous.\n• start \"notepad.exe\"\n• Launches a new console window with notepad.exe being its title, apparently an undesired outcome.\n• start \"\" \"C:\\Program Files\\Internet Explorer\\iexplore.exe\"\n• Starts Internet Explorer. The empty \"\" passed as the first argument is the window title of a console that actually does not get opened, or at least not visibly so.\n• start \"C:\\Program Files\\Internet Explorer\\iexplore.exe\"\n• Launches a new console window with \"C:\\Program Files\\Internet Explorer\\iexplore.exe\" being its title, apparently an undesired outcome.\n• start /wait notepad.exe & echo \"Done.\"\n• Starts notepad.exe, waiting for it to end before proceeding.\n• start /low notepad.exe & echo \"Done.\"\n• As above, but starting the program with a low priority.\n• start \"\" MyFile.xls\n• Opens the document in the program assigned to open it.\n• start\n• Starts a new console (command-line window) in the same current folder.\n• start \"\" \"mailto:\"\n• Starts the application for writing a new email.\n• start \"\" \"mailto:joe.hoe@hoemail.com?subject=Notification&body=Hello Joe, I'd like to...\"\n• Starts the application for writing a new email, specifying the to, subject and body of the new email.\n• start \"\" \"mailto:joe.hoe@hoemail.com?subject=Notification&body=Hello Joe,%0a%0aI'd like to...\"\n• As above, with newlines entered as %0a.\n• start /b TODO:example-application-where-this-is-useful\n• Starts the application without opening a new console window, redirecting the output to the console from which the start command was called.\n• How to use command line switches to create a pre-addressed e-mail message in Outlook, support.microsoft.com\n\nOuputs or sets the system time. See also #DATE and TIME variable in #Special variable names.\n• time /t\n• Outputs the system time in HH:MM format, with no seconds and milliseconds. An example output: 09:19.\n• time\n• Outputs the system time in a locale-specific format possibly featuring seconds and hundredths of seconds and asks for a new time to set; the time is preceded by a locale-specific message, usually a translation of \"Current time:\". Thus, the output format differs from the one of \"time /t\".\n• echo %time%\n• Outputs the current time using the special variable TIME, in a locale-dependent format featuring hours, minutes, seconds and possibly hundredths of seconds. An example output for one locale: 9:19:31.55.\n• echo %time% & timeout 1 >nul & echo,|time\n• Outputs time before and after the command in the middle, here timeout 1. Can be used to measure execution time of the sequence in the middle; keywords: how long does it take.\n\nSets the title displayed in the console window.\n\nPrints the content of a file or files to the output.\n\nSets or clears the setting to verify whether COPY files etc. are written correctly.\n\nExternal commands available to Windows command interpreter are separate executable program files, supplied with the operating system by Microsoft, or bundled as standard with the third-party command interpreters. By replacing the program files, the meanings and functions of these commands can be changed.\n\nMany, but not all, external commands support the \"/?\" convention, causing them to write on-line usage information to their standard output and then to exit with a status code of 0.\n\nOutputs or changes items in the address resolution protocol cache, which maps IP addresses to physical addresses.\n\nSchedules a program to be run at a certain time. See also SCHTASKS.\n\nOutputs or sets file attributes. With no arguments, it outputs the attributes of all files in the current directory. With no attribute modification instructions, it outputs the attributes of the files and directories that match the given search wildcard specifications. Similar to chmod of other operating systems.\n• To add an attribute, attach a '+' in front of its letter.\n• To remove an attribute, attach a '-' in front of its letter\n• attrib\n• Outputs the attributes of all files in the current directory.\n• attrib File.txt\n• Outputs the attributes of the file.\n• attrib +r File.txt\n• Adds the \"Read-only\" attribute to the file.\n• attrib -a File.txt\n• Removes the \"Archived\" attribute from the file.\n• attrib -a +r File.txt\n• Removes the \"Archived\" attribute and adds the \"Read-only\" attribute to the file.\n\n(Not in XP). Edits Boot Configuration Data (BCD) files. For more, type \"bcdedit /?\".\n\nOutputs or changes discretionary access control lists (DACLs). See also ICACLS. For more, type \"cacls /?\".\n\nOutputs or sets the active code page number. For more, type \"chcp /?\".\n\nChecks disks for disk problems, listing them and repairing them if wished. For more, type \"chkdsk /?\".\n\nShows or sets whether system checking should be run when the computer is started. The system checking is done using Autochk.exe. The \"NTFS\" part of the command name is misleading, since the command works not only with NTFS file system but also with FAT and FAT32 file systems. For more, type \"chkntfs /?\".\n\nLets the user choose one of multiple options by pressing a single key, and sets the error level as per the chosen option. Absent in Windows 2000 and Windows XP, it was reintroduced in Windows Vista, and has remained in Windows 7 and 8.\n• choice /m \"Do you agree\"\n• Presents the user with a yes/no question, setting the error level to 1 for yes and to 2 for no. If the user presses Control + C, the error level is 0.\n• choice /c rgb /m \"Which color do you prefer\"\n• Presents the user with a question, and indicates the letters for the user. Responds to user pressing r, g or b, setting the error level to 1, 2 or 3.\n\nAn alternative is \"set /p\"; see SET.\n\nShows the encryption state, encrypts or decrypts folders on a NTFS volume.\n\n(Not in XP, or make a copy from Server 2003) Places the piped input to the clipboard.\n• set | clip\n• Places the listing of environment variables to the clipboard.\n• clip < File1.txt\n• Places the content of File1.txt to the clipboard.\n\nShows or changes the compression of files or folders on NTFS partitions.\n\nConverts a volume from FAT16 or FAT32 file system to NTFS file system.\n\nAllows to interactively examine file and memory contents in assembly language, hexadecimal or ASCII. Available in 32-bit Windows including Windows 7; the availability in 64-bit Windows is unclear. In modern Windows, useful as a quick hack to view hex content of a file. Keywords: hex dump, hexdump, hexadecimal dump, view hex, view hexadecimal, disassembler.\n\nDebug offers its own command line. Once on its command like, type \"?\" to find about debug commands.\n\nTo view hex of a file, invoke debug.exe with the file name as a parameter, and then repeatedly type \"d\" followed by enter on the debug command line.\n• Being a DOS program, debug chokes on long file names. Use dir /x to find the 8.3 file name, and apply debug on that one.\n\nCompares the content of two floppies.\n\nCopies the content of one floppy to another.\n\nShows and configures the properties of disk partitions.\n\nAbove all, creates macros known from other operating systems as aliases. Moreover, provides functions related to command history, and enhanced command-line editing. Macros are an alternative to very short batch scripts.\n• doskey np=notepad $1\n• Creates a single macro that passes its first argument to notepad.\n• doskey /macros\n• Lists all defined macros with their definitions.\n• doskey /macros | find \"da\"\n• Lists all macro definitions that contain \"da\" as a substring; see also FIND.\n• doskey /history | find \"dir\"\n• Lists each line of command history that contains \"dir\" as a substring\n• doskey /listsize=100\n• Sets the size of command history to 100.\n\nTo get help on doskey from command line, type \"doskey /?\".\n\nShows all installed device drivers and their properties.\n\nExtracts files from compressed .cab cabinet files. See also #MAKECAB.\n\nCompares files, displaying the differences in their content in a peculiar way.\n• fc File1.txt File2.txt >NUL && Echo Same || echo Different or error\n• Detects difference using the error level of fc. The error level of zero means the files are the same; non-zero can mean the files differ but also that one of the files does not exist.\n\nSearches for a string in files or input, outputting matching lines. Unlike FINDSTR, it cannot search folders recursively, cannot search for a regular expression, requires quotation marks around the sought string, and treats space literally rather than as a logical or.\n• dir /S /B | find /I /V \"receipt\"\n• Prints all non-matching lines in the output of the dir command, ignoring letter case.\n• find /C \"inlined\" *.h\n• Instead of outputting the matching lines, outputs their count. If more than one file is searched, outputs one count number per file preceded with a series of dashes followed by the file name; does not output the total number of matching lines in all files.\n• find /C /V \"\" < file.txt\n• Outputs the number of lines AKA line count in \"file.txt\". Does the job of \"wc -l\" of other operating systems. Works by treating \"\" as a string not found on the lines. The use of redirection prevents the file name from being output before the number of lines.\n• type file.txt | find /C /V \"\"\n• Like the above, with a different syntax.\n• type *.txt 2>NUL | find /C /V \"\"\n• Outputs the sum of line counts of the files ending in \".txt\" in the current folder. The \"2>NUL\" is a redirection of standard error that removes the names of files followed by empty lines from the output.\n• find \"Schönheit\" *.txt\n• If run from a batch file saved in unicode UTF-8 encoding, searches for the search term \"Schönheit\" in UTF-8 encoded *.txt files. For this to work, the batch file must not contain the byte order mark written by Notepad when saving in UTF-8. Notepad++ is an example of a program that lets you write UTF-8 encoded plain text files without byte order mark. While this works with find command, it does not work with #FINDSTR.\n• find \"Copyright\" C:\\Windows\\system32\\a*.exe\n• Works with binary files no less than text files.\n\nSearches for regular expressions or text strings in files. Does some of the job of \"grep\" command known from other operating systems, but is much more limited in the regular expressions it supports.\n\nTreats space in a regular expression as a disjunction AKA logical or unless prevented with /c option.\n• findstr /s \"[0-9][0-9].*[0-9][0-9]\" *.h *.cpp\n• Searches recursively all files whose name ends with dot h or dot cpp, printing only lines that contain two consecutive decimal digits followed by anything followed by two consecutive decimal digits.\n• findstr \"a.*b a.*c\" File.txt\n• Outputs all lines in File.txt that match any of the two regular expressions separated by the space. Thus, the effect is one of logical or on regular expressions.\n• echo world | findstr \"hello wo.ld\"\n• Does not match. Since the 1st item before the space does not look like a regex, findstr treats the whole search term as a plain search term.\n• echo world | findstr /r \"hello wo.ld\"\n• Matches. The use of /r forces regex treatment.\n• findstr /r /c:\"ID: *[0-9]*\" File.txt\n• Outputs all lines in File.txt that match the single regular expression containing a space. The use of /c prevents the space from being treated as a logical or. The use of /r switches the regular expression treatment on, which was disabled by default by the use of /c. To test this, try the following:\n• echo ID: 12|findstr /c:\"ID: *[0-9]*$\"\n• Does not match, as the search string is not interpreted as a regular expression.\n• echo ID: abc|findstr \"ID: *[0-9]*$\"\n• Matches despite the output of echo failing to match the complete regular expression: the search is interpreted as one for lines matching \"ID:\" or \"*[0-9]*$\".\n• findstr /ric:\"id: *[0-9]*\" File.txt\n• Does the same as the previous example, but in a case-insensitive manner.\n• While findstr enables this sort of accumulation of switches behind a single \"/\", this is not possible with any command. For instance, \"dir /bs\" does not work, while \"dir /b /s\" does.\n• To test this, try the following:\n• findstr /msric:\"id: *[0-9]*\" *.txt\n• Like above, but recursively for all files per /s, displaying only matching files rather than matching lines per /m.\n• echo hel lo | findstr /c:\"hel lo\" /c:world\n• /c switch can be used multiple times to create logical or.\n• echo \\hello\\ | findstr \"\\hello\\\"\n• Does not match. Backslash before quotation marks and multiple other characters acts as an escape; thus, \\\" matches \".\n• echo \\hello\\ | findstr \\hello\\\n• Matches. None of the single backslashes passed to findstr is followed by a character on which the backslash acts as an escape.\n• echo ^\"hey | findstr \\^\"hey | more\n• To search for a quote (quotation mark), you need to escape it two times: once for the shell using caret (^), and once for findstr using backslash (\\).\n• echo ^\"hey | findstr ^\"\\^\"hey there^\" | more\n• To search for a quote and have the search term enclosed in quotes as well, the enclosing quotes need to be escaped for the shell using caret (^).\n• echo //comment line | findstr \\//\n• If forward slash (/) is the 1st character in the search term, it needs to be escaped with a backslash (\\). The escaping is needed even if the search term is enclosed in quotes.\n• findstr /f:FileList.txt def.*():\n• Search in the files stated in FileList.txt, one file per line. File names in FileList.txt can contain spaces and do not need to be surrounded with quotation marks for this to work.\n• findstr /g:SearchTermsFile.txt *.txt\n• Search for the search terms found in SearchTermsFile.txt, one search term per line. A space does not serve to separate two search terms; rather, each line is a complete search term. A line is matched if at least one of the search terms matches. If the first search term looks like a regex, the search will be a regex one, but if it looks like a plain search term, the whole search will be a plain one even if 2nd or later search terms look like regex.\n• findstr /m Microsoft C:\\Windows\\system32\\*.com\n• Works with binary files no less than text files.\n\nLimitations of the regular expressions of \"findstr\", as compared to \"grep\":\n• No support of \"zero or one of the previous\" -- \"?\".\n\nOther limitations: There is a variety of limitations and strange behaviors as documented at What are the undocumented features and limitations of the Windows FINDSTR command?.\n• echo bb|findstr \"bb baaaa\"\n• Does not find anything in multiple Windows versions, but it should.\n• What are the undocumented features and limitations of the Windows FINDSTR command? at StackOverflow\n\nFinds files by their modification date and file name pattern, and executes a command for each found file. Is very limited, especially compared to the find command of other operating systems. Available since Windows Vista. For more, type \"forfiles /?\".\n• forfiles /s /d 06/10/2015 /c \"cmd /c echo @fdate @path\"\n• For each file in the current folder and its subfolders modified on 10 June 2015 or later, outputs the file modification date and full file path. The date format after /d is locale specific. Thus, allows to find most recently modified files. Keywords: most recently changed files.\n• forfiles /m *.txt /s /d 06/10/2015 /c \"cmd /c echo @fdate @path\"\n• As above, but only for files ending in .txt.\n\nFormats a disk to use Windows-supported file system such as FAT, FAT32 or NTFS, thereby overwriting the previous content of the disk. To be used with great caution.\n\nA powerful tool performing actions related to FAT and NTFS file systems, to be ideally only used by powerusers with an extensive knowledge of the operating systems.\n\nOutputs group policy settings and more for a user or a computer.\n\nEnables the display of an extended character set in graphics mode. For more, type \"graftabl /?\".\n• help copy\n• Shows the help for COPY command, also available by typing \"copy /?\".\n\n(Not in XP) Shows or changes discretionary access control lists (DACLs) of files or folders. See also CACLS. Fore more, type \"icacls /?\".\n\nOutputs Windows IP Configuration. Shows configuration by connection and the name of that connection (i.e. Ethernet adapter Local Area Connection) Below that the specific info pertaining to that connection is displayed such as DNS suffix and ip address and subnet mask.\n\nPlaces files into compressed .cab cabinet file. See also #EXPAND.\n\nA multi-purpose command to display device status, configure ports and devices, and more.\n• mode\n• Outputs status and configuration of all devices, such as com3 and con.\n• mode con\n• Outputs status and configuration of con device, the console in which the command interpreter is running.\n• mode con cols=120 lines=20\n• Sets the number of columns and lines for the current console, resulting in window resizing, and clears the screen. The setting does not affect new console instances. Keywords: wide screen, wide window, screen size, window size, resize screen, resize window.\n• mode 120, 20\n• As above: Sets the number of columns (120) and lines (20), resulting in window resizing, and clears the screen.\n• mode con cols=120\n• Sets the number of columns for the current console, resulting in window resizing, and clears the screen. It seems to change the number of visible lines as well, but the total lines count of the console buffer seems unchanged.\n• mode 120\n• As above: Sets the number of columns.\n• mode con cp\n• Outputs the current code page of the console.\n• mode con cp select=850\n• Sets the current code page of the console. For a list of code pages, see the linked Microsoft documentation below.\n• mode con rate=31 delay=1\n• Sets the rate and delay for repeated entry of a character while a key is held pressed, of the console. The lower the rate, the fewer repetitions per second.\n\nOutputs the contents of a file or files, one screen at a time. When redirected to a file, performs some conversions, also depending on the used switches.\n• grep -i sought.*string Source.txt | more /p >Out.txt\n• Taking the output of a non-Windows grep command that produces line breaks consisting solely of LF character without CR character, converts LF line breaks to CR-LF line breaks. CR-LF newlines are also known as DOS line breaks, Windows line breaks, DOS newlines, Windows newlines, and CR/LF line endings,as opposed to LF line breaks used by some other operating systems.\n• In some setups, seems to output gibberish if the input contains LF line breaks and tab characters at the same time.\n• In some setups, for the conversion, /p may be unneeded. Thus, \"more\" would convert the line breaks even without /p.\n• more /t4 Source.txt >Target.txt\n• In some setups, tab conversion takes place automatically, even without the /t switch. If so, it is per default to 8 spaces.\n• The online documentation for \"more\" in Windows XP and Windows Vista does not mention the switch.\n• The switch /e is mentioned in \"more /?\" at least in Windows XP and Windows Vista.\n• Per \"more /?\", the switch is supposed to enable extended features listed at the end of \"more /?\" help such as showing the current row on pressing \"=\". However, in Windows XP and Windows Vista, that seems to be enabled by default even without /e.\n• Hypothesis: In Windows XP and Windows Vista, /e does not do anything; it is present for compatibility reasons.\n\nProvides various network services, depending on the command used. Available variants per command:\n\nPerforms actions pertaining to open files, especially those opened by other users over the network. The actions involve querying, displaying, and disconnecting. For more, type \"openfiles /?\".\n\nSend ICMP/IP \"echo\" packets over the network to the designated address (or the first IP address that the designated hostname maps to via name lookup) and print all responses received.\n\nRecovers as much information as it can from damaged files on a defective disk.\n\nThe first argument is one of the following commands: query, add, delete, copy, save, load, unload, restore, compare, export, import, and flags. To learn more about a command, follow it by /?, like reg query /?.\n\nReplaces files in the destination folder with same-named files in the source folder.\n\n(Not in XP) Copies files and folders. See also XCOPY and COPY.\n• robocopy /s C:\\Windows\\system C:\\Windows-2\\system *.dll\n• Copies all files ending in .dll from one directory to another, replicating the nested directory structure.\n\nRuns a function available from a DLL. The available DLLs and their functions differ among Windows versions.\n• rundll32 sysdm.cpl,EditEnvironmentVariables\n• In some Windows versions, opens the dialog for editing environment variables.\n\nControls Windows services, supporting starting, stopping, querying and more. Windows services are process-like things. A Windows service is either hosted in its own process or it is hosted in an instance of svchost.exe process, often with multiple services in the same instance. Processor time use of a particular service can be found using freely downloadable Process Explorer from Sysinternals, by going to properties of a service and then Threads tab. Another command capable of controlling services is NET. TASKLIST can list hosted services using /svc switch.\n• sc config SysMain start= disabled\n• Make sure SysMain service is disabled after start. SysMain is the SuperFetch service, causing repeated harddrive activity by trying to guess which programs to load into RAM in case they will be used, and loading them. Notice the mandatory lack of space before = and the mandatory space after =.\n\nSchedules a program to be run at a certain time, more powerful than AT.\n\nLike SET, but affecting the whole machine rather than the current console or process. Not available in Windows XP; available in Windows Vista and later.\n\nShuts down a computer, or logs off the current user.\n• shutdown /s /t 0\n• Shuts down the computer with zero delay.\n\nSorts alphabetically, from A to Z or Z to A, case insensitive. Cannot sort numerically: if the input contains one integer per line, \"12\" comes before \"9\".\n\nAssigns a drive letter to a local folder, outputs current assignments, or removes an assignment.\n\nShows configuration of a computer and its operating system.\n\nEnds one or more tasks.\n• taskkill /im AcroRd32.exe\n• Ends all process with the name \"AcroRd32.exe\"; thus, ends all open instances of Acrobat Reader. The name can be found using tasklist.\n• taskkill /f /im AcroRd32.exe\n• As above, but forced. Succeeds in ending some processes that do not get ended without /f.\n• tasklist | find \"notepad\"\n• Ends the process AKA task with process ID (PID) of 5792; the assumption is you have found the PID using tasklist.\n• tasklist | find /C \"chrome.exe\"\n• Outputs the number of tasks named \"chrome.exe\", belonging to Google Chrome browser.\n• tasklist /svc | findstr svchost\n• Outputs Windows services hosted in svchost.exe processes alongside the usual information abot the process.\n\nWaits a specified number of seconds, displaying the number of remaining seconds as time passes, allowing the user to interrupt the waiting by pressing a key. Also known as delay or sleep. Available in Windows Vista and later.\n• timeout /t 5\n• Waits for five seconds, allowing the user to cancel the waiting by pressing a key.\n• timeout /t 5 /nobreak\n• Waits for five seconds, ignoring user input other than Control + C.\n• timeout /t 5 /nobreak >nul\n• As above, but with no output.\n• ping -n 6 127.0.0.1 >nul\n• Waits for five seconds; the number after -n is the number of seconds to wait plus 1.\n• How to wait in a batch script? at stackoverflow.com\n\nOutputs a tree of all subdirectories of the current directory to any level of recursion or depth. If used with /F switch, outputs not only subdirectories but also files.\n• tree /f\n• Includes files in the listing, in addition to directories.\n• tree /f /a\n• As above, but uses 7-bit ASCII characters including \"+\", \"-\" and \\\" to draw the tree.\n\nOutputs one or more locations of a file or a file name pattern, where the file or pattern does not need to state the extension if it listed in PATHEXT, such as .exe. Searches in the current directory and in the PATH by default. Does some of the job of \"which\" command of some other operating systems, but is more flexible.\n\nAvailable on Windows 2003, Windows Vista, Windows 7, and later; not available on Windows XP. An alternative to be used with Windows XP is in the examples below.\n\nDoes not find internal commands, as there are no dot exe files for them to match.\n• where find\n• Outputs the location of the find command, possibly \"C:\\Windows\\System32\\find.exe\". The .exe extension does not need to be specified as long as it is listed in PATHEXT, which it is by default.\n• If there are more find commands in the path, outputs paths to both. In some situations, it can output the following:\n• for %i in (find.exe) do @echo %~$PATH:i\n• Outputs the location of \"find.exe\" on Windows XP. The name has to include \".exe\", unlike with the where command.\n• where /r . Tasks*\n• Searches for files whose name matches \"Task*\" recursively from the current folder. Similar to \"dir /b /s Tasks*\". The /r switch disables search in the folders in PATH.\n• where *.bat\n• Outputs all .bat files in the current directory and in the directories that are in PATH. Thus, outputs all .bat files that you can run without entering their full path.\n• where ls*.bat\n• As above, constraining also the beginning of the name of the .bat files.\n• where ls*\n• As above, but with no constraint on the extension. Finds lsdisks.bat, lsmice.pl, and lsmnts.py if in the current directory or in the path.\n• where *.exe *.com | more\n• Outputs countless .exe and .com files in the path and in the current folder, including those in C:\\Windows\\System32.\n• where $path:*.bat\n• Outputs .bat files in the path but not those in the current folder unless the current folder is in PATH. Instead of path, another environment variable containing a list of directories can be used.\n• where $windir:*.exe\n• Outputs .exe files found in the folder stated in WINDIR environment variable.\n• where $path:*.bat $windir:*.exe\n• A combination is possible. Outputs all files matching either of the two queries.\n• where /q *.bat && echo Found\n• Suppresses both standard and error output, but sets the error level, enabling testing on it. The error level is set either way, with or without /q.\n• Is there an equivalent of 'which' on windows?\n\nStarts Windows Management Instrumentation Command-line (WMIC), or with arguments given, passes the arguments as commands to WMIC. Not in Windows XP Home. For more, type \"wmic /?\".\n• wmic logicaldisk get caption,description\n• Lists drives (disks) accessible under a drive letter, whether local hard drives, CD-ROM drives, removable flash drives, network drives or drives created using #SUBST.\n• wmic logicaldisk get /format:list\n• Outputs all properties of \"logicaldisk\" object, one property per separate line.\n• wmic\n\nControl + C\n• Enters wmic and then interrupts it. A side effect is that the console buffer becomes very wide, and the screen becomes horizontally resizable with the mouse as a consequence. This is the result of wmic setting a high number of columns of the console, which you can verify using mode con. You can achieve a similar result by typing mode 1500. See also #MODE.\n• wmic datafile where name=\"C:\\\\Windows\\\\System32\\\\cmd.exe\" get Version /value\n• Outputs the version of the cmd.exe, which should be close to the Windows version.\n• wmic os get /format:list\n• Outputs all properties of \"os\" object, one property per separate line.\n\nCopies files and directories in a more advanced way than COPY, deprecated in Windows Vista and later in favor of ROBOCOPY. Type xcopy /? to learn more, including countless options.\n• xcopy C:\\Windows\\system\n• Copies all files, but not files in nested folders, from the source folder (\"C:\\Windows\\system\") to the current folder.\n• xcopy /s /i C:\\Windows\\system C:\\Windows-2\\system\n• Copies all files and folders to any nesting depth (via \"/s\") from the source folder (\"C:\\Windows\\system\") to \"C:\\Windows-2\\system\", creating \"Windows-2\\system\" if it does not exist (via \"/i\").\n• xcopy /s /i /d:09-01-2014 C:\\Windows\\system C:\\Windows-2\\system\n• As above, but copies only files changed on 1 September 2014 or later. Notice the use of the month-first convention even if you are on a non-US locale of Windows.\n• xcopy /L /s /i /d:09-01-2014 C:\\Windows\\system C:\\Windows-2\\system\n• As above, but in a test mode via /L (list-only, output-only, display-only). Thus, does not do any actual copying, merely lists what would be copied.\n• xcopy /s /i C:\\Windows\\system\\*.dll C:\\Windows-2\\system\n• As one of the examples above, but copies only files ending in .dll, including those in nested folders.\n• Windows CMD Commands at ss64.com -- licensed under Creative Commons Attribution-Non-Commercial-Share Alike 2.0 UK: England & Wales[1], and thus incompatible with CC-BY-SA used by Wikibooks\n• The FreeDOS HTML Help at fdos.org -- a hypertext help system for FreeDOS commands, written in 2003/2004, available under the GNU Free Documentation License"
    },
    {
        "link": "https://dl.icdst.org/pdfs/files2/f85f26d3d951602bfeadd1ebf689ad58.pdf",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/SCCM/comments/182ml1b/how_do_you_manage_software_updates_for",
        "document": "Hi all, I've had a good amount of experience with deployments and SCCM etc and unfortunately my organization is closed to outside internet, so alot of updates are manually downloaded. (Adobe/Chrome etc)\n\nI was wondering how do you manage if you don't have PatchMyPC or 3rd party update catalog?\n\nI keep finding I copy alot of applications just so i can test pilot (ALWAYS TEST) the updates, and then retire the previous ones and replace them... But it starts to be too time consuming.\n\nHope I was clear enough! thanks in advance :)"
    },
    {
        "link": "https://community.spiceworks.com/t/how-do-you-manage-patching-or-updates-for-microsoft-office-applications/799613",
        "document": "I work at an MSP that uses the Connectwise Suite (Labtech/automate) Today a bad update was released for the Microsoft Office applications that affected a lot of users with a nasty side-effect. They were unable to see the content in the body of emails within the Outlook application. We looked in Patch Manager within Automate to see if there was evidence of a patch release and it looks like Patch Manager doesn’t manage updates for the newer Office applications. Does anyone have a recommendation on how you manage Office updates to try and prevent everyone from receiving a bad update like this? Is my understanding that Patch Manager doesn’t manage updates for the newer Office applications correct?\n\nIndividual updates for Office 365 aren’t available on Automate’s Patch Manager, only Windows and 3rd party updates. Office 365 updates are released via Microsoft’s content delivery network. If you look in task scheduler and under Task Scheduler Library> Microsoft> Office, there is a scheduled task called Office Automatic Updates 2.0 that checks for updates regularly. You can use Automate to create a script to disable that task on your agents. In the Office 365 admin portal, under Settings> Org settings> Organization profile> Release preferences, you can choose how the updates are released. You can select a few people as pilot test users to preview new updates and features before everyone else. And if they report any issues, use Automate to push the script to temporarily disable updates to all agents.\n\nWe use WSUS for managing all of our updates. You can Decline updates before they are installed or even Approve an update for Removal. It doesn’t take a ton to get working, but it does work pretty good. I haven’t used it, but there is Windows Update for Business . I’m not entirely sure what you need to get started with it.\n\nIf you need a tool to manage patching or updates for Microsoft Office applications, you can use our cloud-based solution Astion1. Action1 allows you to control Office updates like Windows updates (via the Windows Update service). The best practice here is to test all updates on parts of computers before rolling them out to all. The product should allow you to set an update policy, for example, for 10 computers, and after some time, if everything is OK with the update, it is already deployed to all computers. It is not recommended to deploy new updates to all computers. Action1 allows you to do this. Also, Action1 is entirely free to use to manage up to 50 endpoints and suits well for enterprises too. Check please free version."
    },
    {
        "link": "https://stackoverflow.com/questions/453005/best-practice-for-autoupdates",
        "document": "\n• None Regardless of how you choose to do it, please don't create a new service or process to check for updates and then leave it on continuously. You know, like Adobe and Sun (for Java) like to do. Regardless of what you're making, I can guarantee that it's not important enough that it needs to be updated every time the user starts the computer. Updates should either be integrated with a standardized update process common to the OS or when the application is running. Updates should not continuously steal system resources or slow down the boot process by default.\n• None If you maintain separate directories for each version, you need to add code to maintain that. Disk space is not intended to fuel updates. I recall one Citrix application that had 5 different versions on my computer at one time. The user should not see more than two copies (maximum of one backup, confirmed as functional) of your application on their file system unless they explicitly placed them there. Shortcuts to your application can become outdated when the folder location changes like this, so be careful.\n• None If you update after the program has been started, I would recommend notifying the user in a non-obtrusive fashion. If the update doesn't cause a significant change in functionality, download the update in the background, switch to the new version the next time the application is executed, and notify the user of significant changes (don't use a modal dialog or steal focus). Don't make the user click a button to agree to install updates before launching the app, or force them to restart to use the updated version. Allow users to configure automatic updates, then do it without impacting their productivity. Firefox is rather bad about this, which is sad since it's such an integral application to many users.\n• None Don't touch the system tray. That should be reserved for useful (to the user) applications. I'd also recommend against balloon notifications, as well. Use something like the infobar commonly seen in browsers. Microsoft applications are particularly bad about using the system tray and balloon notifications to waste user time with unimportant notifications. If the user enabled automatic updates, they really don't need to know that everything is working just as they expected. Tell them when there's something new or useful, and don't force the knowledge down their throats. Leave the changelog under a Help menu item so they can check bug fixes on their own.\n• None Be careful of updates using the MSI system if you deploy a default configuration file. You don't want to overwrite any user files in your update. In the same vein, if the format of configuration files or user files changes, you should provide a mechanism to automatically backup and upgrade those files. Or start building default settings internally within the application instead of deploying them."
    },
    {
        "link": "https://reddit.com/r/sysadmin/comments/lwseqr/you_need_to_patch_google_chrome_again",
        "document": "No it's not Groundhog Day. Yet another actively exploited zero day bug to deal with.\n\nGoogle rated the zero-day vulnerability as high severity and described it as an \"Object lifecycle issue in audio.\" The security flaw was reported last month by Alison Huffman of Microsoft Browser Vulnerability Research on 2021-02-11. Although Google says that it is aware of reports that a CVE-2021-21166 exploit exists in the wild, the search giant did not share any info regarding the threat actors behind these attacks."
    },
    {
        "link": "https://secpod.com/blog/how-do-you-set-up-your-microsoft-office-patching-for-continuous-update-mode",
        "document": "With every passing day, every vendor seems to release many patches to their software application to fix vulnerabilities. But with so many patches and apps, it becomes cumbersome to keep them all up-to-date manually. Additionally, not patching apps poses a security risk to your organization too. Microsoft releases patches to all their software monthly, known as Patch Tuesday. It also sends out patches on an intermittent basis when needed. A Patch Management System can ease your patching requirements. With Microsoft applications, like MS Office, on every device nowadays and so many patches every month, how do you keep it updated?\n\nMicrosoft knows this issue. So, in the Office suite, you can enable Continuous Update Mode, which automatically downloads all the patches and keeps them up-to-date. Patch management tools can simplify this process. This should ideally solve the problem. But manually enabling the Continuous Update Mode itself is a humongous task in a network of hundreds and thousands of devices. So what can be done?\n\nSanerNow is an advanced vulnerability management solution that can take you out of tight spots like these. From vulnerability scanning to remediation via patching, SanerNow can perform a wide range of tasks automatically. With its advanced capabilities, SanerNow can manage your IT infrastructure and protect it from dangerous cyberattacks.\n\nHere, in the case of Microsoft patches, SanerNow can automatically download the latest Microsoft Office updates and keep all the devices in your network updated, or it can also enable the Continuous Update Mode on all devices.\n• Instead of SanerNow downloading the updates, SanerNow can enable Continuous Update Mode, allowing Office to download all the updates automatically. This can be performed using SanerNow Endpoint Management.\n• In the EM dashboard, select Software Deployment under the Actions menu. Here, you can upload batch files by clicking the upload button. This allows SanerNow to enable the Continuous Update Mode in the Office.\n• Download the Batch files here\n\nZip File for MS Office 2013: Download \n\nZip File for Microsoft 365 Apps for enterprise, Office LTSC 2021, Office 2019, and Office 2016: Download\n• Once the batch files are uploaded, you can initiate the installation task (see below). SanerNow will run the script, which changes the registry values and enables the Continuous update mode.\n• Within the SanerNow Patch Management dashboard, click on the Automation button on the top bar. This provides a complete list of all the software assets in your network.\n• Next, you have to set up an automation rule. By choosing MS Office in the list of assets and clicking on Create Automation rule, you can customize when you want SanerNow to check for updates and download them. This can be set for the 2nd week of every month to match Patch Tuesday releases, but the scans can be more frequent to ensure no other patches are missed.\n\nSanerNow can perform a whole lot more than this too. From detecting dangerous anomalies and vulnerabilities in your IT infrastructure to instantly mitigating them, SanerNow is not a part of your cyber-defense arsenal; it’s an entire arsenal on its own."
    }
]