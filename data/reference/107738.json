[
    {
        "link": "https://w3schools.com/php/php_mysql_connect.asp",
        "document": "PHP 5 and later can work with a MySQL database using:\n\nEarlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012.\n\nShould I Use MySQLi or PDO?\n\nIf you need a short answer, it would be \"Whatever you like\".\n\nBoth MySQLi and PDO have their advantages:\n\nPDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases.\n\nSo, if you have to switch your project to use another database, PDO makes the process easy. You only have to change the connection string and a few queries. With MySQLi, you will need to rewrite the entire code - queries included.\n\nBoth are object-oriented, but MySQLi also offers a procedural API.\n\nBoth support Prepared Statements. Prepared Statements protect from SQL injection, and are very important for web application security.\n\nMySQL Examples in Both MySQLi and PDO Syntax\n\nIn this, and in the following chapters we demonstrate three ways of working with PHP and MySQL:\n\nFor Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql package is installed.\n\nFor installation details, go to: http://php.net/manual/en/mysqli.installation.php\n\nFor installation details, go to: http://php.net/manual/en/pdo.installation.php\n\nBefore we can access data in the MySQL database, we need to be able to connect to the server:\n\nNote: In the PDO example above we have also specified a database (myDB). PDO require a valid database to connect to. If no database is specified, an exception is thrown.\n\nTip: A great benefit of PDO is that it has an exception class to handle any problems that may occur in our database queries. If an exception is thrown within the try{ } block, the script stops executing and flows directly to the first catch(){ } block.\n\nThe connection will be closed automatically when the script ends. To close the connection before, use the following:"
    },
    {
        "link": "https://w3schools.com/php/func_mysqli_connect.asp",
        "document": "Open a new connection to the MySQL server: <?php\n\n $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n \n\n// Check connection\n\nif ($mysqli -> connect_errno) {\n\n echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\n\n exit();\n\n }\n\n?> \n\n\n\nLook at example of procedural style at the bottom.\n\nThe connect() / mysqli_connect() function opens a new connection to the MySQL server."
    },
    {
        "link": "https://php.net/manual/en/book.mysqli.php",
        "document": "and to navigate\n‚Ä¢ to select\n‚Ä¢ to close\n\nPress without selection to search using Google"
    },
    {
        "link": "https://cloudways.com/blog/connect-mysql-with-php",
        "document": "Connecting a MySQL database to your PHP website can be challenging, especially for beginners. Ensuring accurate login information and proper setup is crucial to avoid errors.\n\nEven after establishing a PHP database connection, retrieving data or making changes can be problematic. Additionally, security concerns and protecting data from hackers are always present.\n\nThis post provides step-by-step instructions for two methods to connect a MySQL database on different servers, catering to both localhost and Cloudways server environments.\n\nWhy Should You Use MySQL?\n\nMySQL is a popular choice for data management due to several key factors. Its exceptional performance and scalability ensure efficient handling of high-volume transactions and read-heavy workloads.\n\nFurthermore, MySQL‚Äôs widespread adoption has resulted in a rich ecosystem. This translates to a wealth of resources, tutorials, and plugins that simplify integration with various programming languages, frameworks, and tools.\n\nSecurity is another MySQL strength, with features like encryption, user authentication, and role-based access control ensuring data protection. Additionally, built-in tools for database observability allow developers to monitor and optimize performance effectively.\n\nMySQLi and PDO are actively supported and widely used.\n\nMySQLi, a PHP extension tailored for MySQL databases, was launched with PHP 5.0.0. Supporting MySQL versions 4.1.13 and later, it delivers enhanced features and functionality. MySQLi also provides advancements in security, speed, and flexibility.\n\nIt supports both procedural and object-oriented programming styles, easing the transition from the older mysql() extension.\n\nMySQLi also includes advanced features like prepared statements and transactions for enhanced security and performance.\n\nThe PHP Data Objects (PDO) extension acts as a database abstraction layer, providing a consistent Application Programming Interface (API) for interacting with various database types, including MySQL, PostgreSQL, SQLite, and more.\n\nThis allows developers to switch between different databases without significant code changes.\n\nPDO supports prepared statements, error handling, and fetching data in different formats. Its portability makes it a great choice for projects that may require future support for multiple database types.\n\nShould I Use MySQLi or PDO?\n\nBoth MySQLi and PDO are excellent choices for PHP-MySQL interaction. The best choice depends on project requirements and coding style preferences.\n‚Ä¢ MySQLi is ideal for projects working exclusively with MySQL databases. It provides both procedural and object-oriented interfaces and directly supports MySQL-specific features.\n‚Ä¢ PDO is better suited for projects that may need to interact with multiple database types, thanks to its unified API.\n\nSecurity Considerations: Both MySQLi and PDO, when used with prepared statements, protect against SQL injection attacks.\n\nWhen choosing between MySQLi and PDO, consider the following:\n‚Ä¢ Use MySQLi for exclusive MySQL work and preference for a MySQL-specific API.\n‚Ä¢ Use PDO for potential multi-database support or preference for a consistent interface.\n\nHow to Connect MySQL to PHP?\n\nFirst we‚Äôre going to take a look at a general steps to establish a PHP MySQL connection. And after that, we‚Äôll check out how to PHP MySQL connect on Cloudways.\n\nWhat we‚Äôre doing: Setting up a local server environment.\n\nWhat You Need:\n‚Ä¢ A Code Editor ‚Äì Such as VS Code, Sublime Text, or Notepad++.\n‚Ä¢ Install XAMPP and start Apache and MySQL from the XAMPP Control Panel.\n\nüí° If you see green indicators, everything is running fine!\n‚Ä¢ Open your browser and go to http://localhost/phpmyadmin/ to verify MySQL is running.\n\nWhat we‚Äôre doing: Creating a database where our data will be stored.\n\nWhere to Do This: PHPMyAdmin\n‚Ä¢ Open your browser and go to localhost/phpmyadmin.\n‚Ä¢ Click on ‚ÄúNew‚Äù in the left sidebar.\n\nOur database is now set up, but right now, it‚Äôs empty. We‚Äôll have to fix that.\n\nWhat we‚Äôre doing: Setting up a folder to store our PHP project files.\n\nWhere to Do This: XAMPP htdocs or WAMP www\n‚Ä¢ Navigate to your XAMPP or WAMP installation folder.\n‚Ä¢ Open the htdocs (for XAMPP) or www (for WAMP) folder. I‚Äôm using XAMPP, so I‚Äôll open the htdocs folder.\n‚Ä¢ Create a new folder named practice. This is where all our project files will go.\n\nWhat we‚Äôre doing: Writing PHP code to connect to MySQL.\n‚Ä¢ Inside the practice folder, create a new file named db_connection.php. Make sure the file extension is .php, not .txt. To verify, click View in the top menu and enable File name extensions (if using Windows).\n‚Ä¢ Open it in a text editor (e.g., VS Code, Sublime Text, Notepad++). I‚Äôll use VS Code.\n\nNotice that I‚Äôve also added error handling, so if there‚Äôs an issue, it will display: Connection failed: error message.\n\nI‚Äôve added error handling here as well, using try-catch to handle connection failures more gracefully.\n\nStep 5: Create an Index File to Test the Connection\n\nWhat we‚Äôre doing: Checking if our database connection works.\n‚Ä¢ Inside the practice folder, create a new file named index.php. Again, make sure your file is not saved as index.php.txt.\n‚Ä¢ Open it in a text editor and add the following code:\n\nThis code we just wrote includes our database connection file and prints ‚ÄúConnected Successfully‚Äù if everything works.\n\nWhat we‚Äôre doing: Running the PHP script in a browser.\n\nWhere to Do This: Web Browser\n‚Ä¢ Open your browser and go to: http://localhost/practice/index.php\n‚Ä¢ If everything is set up correctly, you will see: ‚ÄúConnected Successfully‚Äù.\n‚Ä¢ If there‚Äôs an issue, check the error message and verify your db_connection.php file settings.\n\nSince we got the Connected Successfully message on our screen, we‚Äôve successfully connected our database to our localhost.\n\nIf you‚Äôve followed this guide carefully, you may have noticed that I didn‚Äôt set a password when creating the db_connection.php file.\n\nThe code is written as:\n\nWhile this works for local development in XAMPP, it‚Äôs important to set a strong password for security reasons when deploying your project online.\n\nWhat we‚Äôre doing: Adding a password for security.\n\nHow to Do This:\n‚Ä¢ In PHPMyAdmin, go to ‚ÄúUser Accounts‚Äú.\n‚Ä¢ Update your db_connection.php file with the new password. Just like I showed you earlier, you can do this by going to C:\\xampp\\htdocs\\practice and then replacing the old db_connection.php file with the new file.\n\nThis is the updated code with the password you can use:\n\nNote: The password you set in phpMyAdmin under ‚ÄúEdit Privileges‚Äù for the root user must match the password in your db_connection.php file.\n\nIf they don‚Äôt match, your PHP script won‚Äôt be able to connect to MySQL, and you‚Äôll see an authentication error like this:\n\nAccess denied for user ‚Äòroot‚Äô@‚Äôlocalhost‚Äô (using password: YES)\n\nAnd that is all about it. You‚Äôve now added a password to your database connection as well.\n\nHow to Create MySQL Database on Cloudways?\n\nTo create a MySQL database in Cloudways and connect it to your PHP application, you can SSH into your server or use an FTP client to simply upload your PHP files.\n\nFor this tutorial, I‚Äôll use the FTP approach. I‚Äôll use FileZilla, but you can use any FTP client you like to establish a PHP database connection.\n\nOkay, so now that you know the prerequisites, let‚Äôs get started‚Ä¶\n\nFor this tutorial, I‚Äôm assuming you have a PHP application installed on the Cloudways server already.\n‚Ä¢ Log in to your Cloudways account:\n‚Ä¢ After logging in, you‚Äôll be taken to the Dashboard.\n‚Ä¢ Click on the View All Servers tab to access the server on which your PHP app is deployed.\n‚Ä¢ Click on the server on which your PHP app is deployed.\n‚Ä¢ In the Master Credentials tab, you can view your Public IP, Username, and Password. You‚Äôll need these to access your server through SSH or FTP.\n\nStep 3: Access Your Server Files via SSH or FTP\n‚Ä¢ From the Master Credentials tab, scroll down and click on Launch SSH Terminal to connect via SSH or use an FTP client like FileZilla.\n‚Ä¢ Since I‚Äôm using FileZilla, I‚Äôll need to log in to my server using my Master Credentials.\n‚Ä¢ For the Host, I‚Äôll use my server‚Äôs Public IP.\n‚Ä¢ Once you‚Äôre inside your sever, navigate to the public_html folder, which is where the main files of your application should reside. Example path: /home/master/applications/practice/public_html/.\n\nAs you can see, there is already an index.php file present in our public_html folder.\n‚Ä¢ Now, create a new file. Name the file db_connection.php. Make sure the extension is .php. I can‚Äôt stress this enough.\n‚Ä¢ Add the following PHP code to the file:\n‚Ä¢ Make sure to add the actual access details of your application to the code. So replace:\n\nFor ‚Äúservername‚Äù, use your server‚Äôs Public IP. For the rest, check out the image below for clarity.\n‚Ä¢ Now, place the file inside the public_html folder using FileZilla.\n‚Ä¢ Now, create another PHP file (e.g., index.php) in the same public_html folder to test the PHP database connection. Overwrite the existing file.\n‚Ä¢ Edit index.php and add the following code to test if the connection is working:\n‚Ä¢ Next, in your browser, go to your application URL. For example: http://your-app-name.cloudwaysapps.com/index.php. You can find your application URL in Access Details under Application URL.\n‚Ä¢ If everything is set up correctly, you should see: ‚ÄúConnected Successfully‚Äú.\n\nAnd that‚Äôs it! Our PHP application is now successfully connected to our MySQL database on Cloudways. You can also use WordPress dedicated server hosting offered by Cloudways, for seamless integration with MySQL.\n\nManaging a MySQL database can be challenging, but the correct tools simplify the process. Whether you are a developer, database administrator, or IT professional, a dependable MySQL management tool can conserve time and help avert costly errors. Three of the best options available are outlined below.\n\nDBeaver is a multifaceted database management tool compatible with MySQL and various other databases. Its design facilitates a user-friendly interface while incorporating advanced features for professionals. DBeaver is commonly used in development environments and supports multiple operating systems, making it a flexible option for both teams and individuals.\n‚Ä¢ Some advanced features may require a learning curve for new users.\n‚Ä¢ Performance can be affected when handling very large databases.\n\nMySQL Workbench, developed by Oracle, is a comprehensive tool for designing, developing, and managing MySQL databases. It is a preferred option for developers who require an integrated environment for database modeling, SQL development, and performance optimization. Its built-in monitoring tools allow users to manage databases efficiently and track server health.\n‚Ä¢ Advanced SQL editor with features like auto-completion and syntax highlighting.\n‚Ä¢ Can be resource-intensive, leading to potential performance issues on lower-end systems.\n\nNavicat for MySQL is a graphical tool designed for managing MySQL and MariaDB databases. It offers a user-friendly interface combined with advanced features, making it suitable for both beginners and experienced professionals.\n‚Ä¢ Data modeling and design tools for creating and visualizing database structures.\n‚Ä¢ Advanced SQL editor with features like code completion and snippets.\n‚Ä¢ Support for cloud databases like Amazon RDS and Google Cloud.\n‚Ä¢ Efficient connection to MySQL databases via SSH and HTTP tunneling.\n‚Ä¢ Scheduling capabilities for automated tasks like backups and reports.\n‚Ä¢ Some users may find it slower compared to other tools, especially when handling large databases.\n\nOne of the most common problems occurs when the database credentials in your PHP script don‚Äôt match the actual login details.\n\nIf you see an error message like ‚ÄúAccess denied‚Äù or ‚ÄúCould not connect to database‚Äù, followed by ‚Äú(using password: YES)‚Äù, the issue is most likely an incorrect password.\n\nHow to Fix It:\n‚Ä¢ Double-check the database username, password, and database name in your PHP script.\n‚Ä¢ Make sure these credentials match the ones stored in your database.\n‚Ä¢ If you recently changed the password, update your PHP script accordingly.\n\nIf you encounter an error like ‚ÄúCan‚Äôt connect to MySQL server on ‚Äòserver‚Äô (110)‚Äù when using MySQLi, it indicates that the script isn‚Äôt able to reach the MySQL server.\n\nIn PDO, the error might look like this:\n\nConnection failed: SQLSTATE[Hy000] [2002] No such file or directory\n\nThis problem often occurs when the hostname is incorrect, or the MySQL server isn‚Äôt running.\n\nHow to Fix It:\n‚Ä¢ If your database is hosted on the same server as your script, use ‚Äúlocalhost‚Äù instead of a remote domain or IP.\n‚Ä¢ Check if the MySQL service is running. If you have SSH access, you can verify this by running:systemctl status mysql\n‚Ä¢ If your database is hosted remotely, confirm that the server firewall isn‚Äôt blocking connections.\n\nSeeing a ‚ÄúToo many connections‚Äú error means the MySQL server has reached its limit for active connections.\n\nHow to Fix It:\n‚Ä¢ Wait a few minutes and try again, as some connections may close automatically.\n\nIf you have control over the server, increase the allowed connections by modifying your MySQL configuration file (my.cnf or my.ini):\n\nIf you see ‚ÄúUnknown database ‚Äòdatabase_name‚Äô‚Äù, it means the database you‚Äôre trying to connect to doesn‚Äôt exist.\n\nHow to Fix It:\n‚Ä¢ Verify that the database name in your PHP script matches the actual database name.\n‚Ä¢ Use phpMyAdmin or the command line to check if the database exists:\n\nIf the database is missing, you may need to recreate it:\n\nIf you get an error like ‚ÄúTable ‚Äòdatabase_name.table_name‚Äô doesn‚Äôt exist‚Äù, it means MySQL cannot find the table you‚Äôre trying to use.\n\nHow to Fix It:\n‚Ä¢ Double-check the spelling of the table name in your queries.\n‚Ä¢ Run this command to verify if the table exists:SHOW TABLES FROM database_name;\n‚Ä¢ If the table was accidentally deleted, restore it from a backup.\n\nIf you see ‚ÄúYou have an error in your SQL syntax‚Äù, there‚Äôs likely a mistake in your query.\n\nHow to Fix It:\n‚Ä¢ Carefully review your SQL syntax. Missing quotes, incorrect spacing, or misplaced commands can cause issues.\n‚Ä¢ Test your query in phpMyAdmin or the MySQL command line to see detailed error messages.\n‚Ä¢ If the query is built dynamically in PHP, echo it before execution to check for errors:echo $query;\n\n7. MySQL Server Has Gone Away\n\nIf you encounter ‚ÄúMySQL server has gone away‚Äù, it means the connection was lost due to inactivity or a large query.\n\nHow to Fix It:\n‚Ä¢ If running long queries, increase the max_allowed_packet setting in MySQL‚Äôs configuration file (my.cnf or my.ini).\n‚Ä¢ If the server times out due to inactivity, adjust the wait_timeout setting.\n\nErrors related to collation or character sets can cause queries to fail, especially if your database and tables use different encodings.\n\nHow to Fix It:\n\nCheck the collation settings of your database and tables:\n\nIf needed, convert the collation of your tables to match:\n\nIf you‚Äôre stuck, your error log can provide useful clues. The log is typically found in the same folder as your script. If your script runs inside public_html, check:\n\nReading the error log can save time and help identify issues quickly.\n\nMany beginners face challenges when establishing a PHP database connection with MySQL.\n\nIn this guide, I covered two methods for connecting a MySQL database to your PHP website, with clear instructions for both localhost and Cloudways server environments. I also highlighted the three best MySQL management tools to simplify database administration.\n\nI broke down the key differences between MySQLi and PDO, so you can choose the right tool for your project. Additionally, I shared essential troubleshooting tips to resolve common connection issues.\n\nIf you have any questions, feel free to ask in the comments below."
    },
    {
        "link": "https://php.net/manual/en/mysqli.quickstart.connections.php",
        "document": "The MySQL server supports the use of different transport layers for connections. Connections use TCP/IP, Unix domain sockets or Windows named pipes.\n\nThe hostname has a special meaning. It is bound to the use of Unix domain sockets. To open a TCP/IP connection to the localhost, must be used instead of the hostname .\n\nDepending on the connection function used, assorted parameters can be omitted. If a parameter is not provided, then the extension attempts to use the default values that are set in the PHP configuration file.\n\nThe resulting parameter values are then passed to the client library that is used by the extension. If the client library detects empty or unset parameters, then it may default to the library built-in values.\n\nIf the host value is unset or empty, then the client library will default to a Unix socket connection on . If socket is unset or empty, and a Unix socket connection is requested, then a connection to the default socket on is attempted.\n\nOn Windows systems, the host name is interpreted by the client library as an attempt to open a Windows named pipe based connection. In this case the socket parameter is interpreted as the pipe name. If not given or empty, then the socket (pipe name) defaults to .\n\nIf neither a Unix domain socket based not a Windows named pipe based connection is to be established and the port parameter value is unset, the library will default to port .\n\nThe mysqlnd library and the MySQL Client Library (libmysqlclient) implement the same logic for determining defaults.\n\nConnection options are available to, for example, set init commands which are executed upon connect, or for requesting use of a certain charset. Connection options must be set before a network connection is established.\n\nFor setting a connection option, the connect operation has to be performed in three steps: creating a connection handle with mysqli_init() or mysqli::__construct(), setting the requested options using mysqli::options(), and establishing the network connection with mysqli::real_connect().\n\nThe mysqli extension supports persistent database connections, which are a special kind of pooled connections. By default, every database connection opened by a script is either explicitly closed by the user during runtime or released automatically at the end of the script. A persistent connection is not. Instead it is put into a pool for later reuse, if a connection to the same server using the same username, password, socket, port and default database is opened. Reuse saves connection overhead.\n\nEvery PHP process is using its own mysqli connection pool. Depending on the web server deployment model, a PHP process may serve one or multiple requests. Therefore, a pooled connection may be used by one or more scripts subsequently.\n\nIf an unused persistent connection for a given combination of host, username, password, socket, port and default database cannot be found in the connection pool, then mysqli opens a new connection. The use of persistent connections can be enabled and disabled using the PHP directive mysqli.allow_persistent. The total number of connections opened by a script can be limited with mysqli.max_links. The maximum number of persistent connections per PHP process can be restricted with mysqli.max_persistent. Please note that the web server may spawn many PHP processes.\n\nA common complain about persistent connections is that their state is not reset before reuse. For example, open and unfinished transactions are not automatically rolled back. But also, authorization changes which happened in the time between putting the connection into the pool and reusing it are not reflected. This may be seen as an unwanted side-effect. On the contrary, the name may be understood as a promise that the state is persisted.\n\nThe mysqli extension supports both interpretations of a persistent connection: state persisted, and state reset before reuse. The default is reset. Before a persistent connection is reused, the mysqli extension implicitly calls mysqli::change_user() to reset the state. The persistent connection appears to the user as if it was just opened. No artifacts from previous usages are visible.\n\nThe mysqli::change_user() call is an expensive operation. For best performance, users may want to recompile the extension with the compile flag being set.\n\nIt is left to the user to choose between safe behavior and best performance. Both are valid optimization goals. For ease of use, the safe behavior has been made the default at the expense of maximum performance."
    },
    {
        "link": "https://stackoverflow.com/questions/24412647/php-mysqli-fetch-results-best-practice",
        "document": "These are my two methods for querying a database.\n\nThis is my first method that saves all the results in an array. Then i use a foreach loop to loop through the array.\n\nThen to output I use:\n\nThis is my second method:\n\nI notice that in many cases I need to output the results so I think using the first method is bad because I use once the loop and then I use again a loop so the work is done twice but the second way is not very .\n\nCan anyone suggest me the best method of this or if possible another better method?"
    },
    {
        "link": "https://stackoverflow.com/questions/24028697/how-to-fetch-data-in-php-with-mysqli",
        "document": "To successfully fetch data from MySQL using mysqli extension in PHP you need to perform more or less three actions: connect, execute prepared statement, fetch data.\n\nThe connection is really simple. There should always be only 3 lines of code for opening a connection. You enable error reporting, create new instance of mysqli, and set the correct charset.\n\nThis is the tricky part. You need to prepare SQL statement to be executed. Careful, never concatenate PHP variables into SQL directly. Bind the variables using placeholders. Once the statement is ready you can execute it on the server.\n\nIf your prepared statement should return some results, you need to fetch them and do something with the records. To fetch the result use . This will give you an object that you can iterate on to fetch each row one by one.\n\nIf you are only starting learning PHP, please consider learning PDO instead. It is easier to use and offers more functionality. Use mysqli only for legacy projects."
    },
    {
        "link": "https://geeksforgeeks.org/how-to-execute-an-sql-query-and-fetch-results-using-php",
        "document": "How to execute an SQL query and fetch results using PHP ?\n\nIn this article, we will discuss how to execute an SQL query and how to fetch its result?\n\nWe can perform a query against the database using the PHP mysqli_query() method.\n\nSyntax: We can use the mysqli_query( ) method in two ways:\n‚Ä¢ connection: It is required that specifies the connection to use.\n‚Ä¢ query: It is also required that specifies the database query.\n‚Ä¢ result mode: It is optional to use.\n\nReturn value: For SELECT, SHOW, DESCRIBE, or EXPLAIN it returns a mysqli_result object. For other successful queries, it returns true. Otherwise, it returns false on failure.\n\nLet‚Äôs understand how we can execute an SQL query.\n\nExecuting an SQL query: We will understand how we can execute an SQL query with an example. We will create a database, table and then insert some values into it.\n\nExample: Create a database and insert some values into it.\n\nInserting some values into the table ‚ÄúEmp‚Äù:\n\nNote: Since we have used AUTO_INCREMENT, it will automatically insert the record with ‚Äúid=1‚Äù and for each newly inserted record, it will increase the ‚Äúid‚Äù by one."
    },
    {
        "link": "https://phpdelusions.net/mysqli_examples/select",
        "document": "How to run a SELECT query using Mysqli\n\nThere are basically two ways to run a SELECT query with mysqli.\n‚Ä¢ in case there are no variables going to be used in the query, we can run our query using a conventional query() method (mysqli_query() function)\n‚Ä¢ if even a single variable is going to be used in the query, a prepared statement must be used. Below we will see both methods explained.\n\nJust make sure you've got a properly configured mysqli connection variable that is required in order to run SQL queries and to inform you of the possible errors.\n\nWhen no variables are going to be used in the query, a familiar method, that returns a familiar mysqli result variable can be used. The result can be iterated over using a familiar while loop.\n\nIn case you are expecting only a single row, just fetch it right away without a loop:\n\nThere as a very handy function that deserves a better recognition. In case you need to get an array with all query results, you can use method instead of a loop. So instead of four lines\n\nit could be just a single line:\n\nBy default this function returns enumerated arrays, so to get associative arrays the mode must be set explicitly.\n\nYou must use for any SQL query that would contain a PHP variable. To do so, always follow the below steps\n‚Ä¢ create a correct SQL SELECT statement. Test it in mysql console/phpmyadmin if needed\n‚Ä¢ replace all variables in the query with with question marks (called placeholders or parameters)\n‚Ä¢ Bind all variables to the previously prepared statement\n‚Ä¢ get the mysqli result variable from the statement.\n\nLong story short, here is the code:\n\nAnd have your SELECT query executed without a single syntax error or SQL injection.\n\nWhat is going on here?\n\nLike it was said above, first we are writing an SQL query where all variables are substituted with question marks.\n\nThen, the query is prepared. The idea is very smart. To avoid even a possibility of the SQL injection or a syntax error caused by the input data, the query and the data are sent to database server separately. So it goes on here: with we are sending the query to the database server ahead. A special variable, a statement is created as a result. We would use this variable from now on.\n\nThen variables must be bound to the statement. The call consists of two parts - the string with types and the list of variables. With mysqli, you have to designate the type for each bound variable. It is represented by a single letter in the first parameter. The number of letters should be always equal to the number of variables. The possible types are\n\nSo now you can tell that \"s\" means \"there would be 1 variable, of string type\". And then, naturally, a variable follows.\n\nThen the query finally gets executed. Means variables get sent to database server and the query is actually executed.\n\nHere we are calling a very smart function. By default, for some reason it's impossible to fetch a familiar array (like we did with ) from a mysqli statement. So this function is here to help, getting a mysqli result from a mysqli statement.\n\nAs you may noted, the code is quite verbose. If you like to build a code like a Lego figure, with shining ranks of operators, you may keep it as is. If you, like me, hate useless repetitions and like to write concise and meaningful code, then there is a simple helper function. With it, the code will become two times shorter:\n\nOnly three lines instead of six!"
    },
    {
        "link": "https://php.net/manual/en/mysqli.execute-query.php",
        "document": "The statement template can contain zero or more question mark ( ) parameter markers‚Å†‚Äîalso called placeholders. The parameter values must be provided as an array using parameter.\n\nA prepared statement is created under the hood but it's never exposed outside of the function. It's impossible to access properties of the statement as one would do with the mysqli_stmt object. Due to this limitation, the status information is copied to the mysqli object and is available using its methods, e.g. mysqli_affected_rows() or mysqli_error().\n\nIn the case where a statement is passed to mysqli_execute_query() that is longer than of the server, the returned error codes are different depending on the operating system. The behavior is as follows:\n‚Ä¢ On Linux returns an error code of 1153. The error message means .\n‚Ä¢ On Windows returns an error code 2006. This error message means server has gone away ."
    },
    {
        "link": "https://php.net/manual/en/mysqli.error.php",
        "document": "information at saunderswebsolutions dot com ¬∂ The mysqli_sql_exception class is not available to PHP 5.05\n\n\n\nI used this code to catch errors \n\n The problem with this is that valid values for $res are: a mysqli_result object , true or false\n\nThis doesn't tell us that there has been an error with the sql used.\n\nIf you pass an update statement, false is a valid result if the update fails.\n\n\n\nSo, a better way is:\n\n \n\nThis would output something like:\n\nUnexpected PHP error [mysqli::query() [<a href='function.query'>function.query</a>]: (42S22/1054): Unknown column 'XXname' in 'field list'] severity [E_WARNING] in [G:\\database.php] line [249]\n\n\n\nVery frustrating as I wanted to also catch the sql error and print out the stack trace. \n\n\n\nA better way is:\n\n\n\n Prints out something like:\n\nError No: 1054\n\nUnknown column 'XXname' in 'field list'\n\nQuery: \n\nSELECT XXname FROM customer_table\n\n\n\n#0 G:\\\\database.php(251): database->dbError('Unknown column ...', 1054, 'getQuery()', 'SELECT XXname F...')\n\n#1 G:\\data\\WorkSites\\1framework5\\tests\\dbtest.php(29): database->getString('SELECT XXname F...')\n\n#2 c:\\PHP\\includes\\simpletest\\runner.php(58): testOfDB->testGetVal()\n\n#3 c:\\PHP\\includes\\simpletest\\runner.php(96): SimpleInvoker->invoke('testGetVal')\n\n#4 c:\\PHP\\includes\\simpletest\\runner.php(125): SimpleInvokerDecorator->invoke('testGetVal')\n\n#5 c:\\PHP\\includes\\simpletest\\runner.php(183): SimpleErrorTrappingInvoker->invoke('testGetVal')\n\n#6 c:\\PHP\\includes\\simpletest\\simple_test.php(90): SimpleRunner->run()\n\n#7 c:\\PHP\\includes\\simpletest\\simple_test.php(498): SimpleTestCase->run(Object(HtmlReporter))\n\n#8 c:\\PHP\\includes\\simpletest\\simple_test.php(500): GroupTest->run(Object(HtmlReporter))\n\n#9 G:\\all_tests.php(16): GroupTest->run(Object(HtmlReporter))\n\n\n\nThis will actually print out the error, a stack trace and the offending sql statement. Much more helpful when the sql statement is generated somewhere else in the code.\n\nse (at) brainbits (dot) net ¬∂ The decription \"mysqli_error -- Returns a string description of the LAST error\" is not exactly that what you get from mysqli_error. You get the error description from the last mysqli-function, not from the last mysql-error.\n\n\n\nIf you have the following situation\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n $mysqli->query(\"ROLLBACK;\")\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n}\n\n\n\nyou don't get an error-message, if the ROLLBACK-Query didn't failed, too. In order to get the right error-message you have to write:\n\n\n\nif (!$mysqli->query(\"SET a=1\")) {\n\n printf(\"Errormessage: %s\n\n\", $mysqli->error);\n\n $mysqli->query(\"ROLLBACK;\")\n\n}\n\ncallforeach at gmail dot com ¬∂ I had to set mysqli_report(MYSQLI_REPORT_ALL) at the begin of my script to be able to catch mysqli errors within the catch block of my php code.\n\n\n\nInitially, I used the below code to throw and subsequent catch mysqli exceptions\n\n\n\n I realized the exception was being thrown before the actual block was not being called 'm able to trap all mysqli errors\n\nasmith16 at littlesvr dot ca ¬∂ Please note that the string returned may contain data initially provided by the user, possibly making your code vulnerable to XSS. \n\n\n\nSo even if you escape everything in your SQL query using mysqli_real_escape_string(), make sure that if you plan to display the string returned by mysqli_error() you run that string through htmlspecialchars().\n\n\n\nAs far as I can tell the two escape functions don't escape the same characters, which is why you need both (the first for SQL and the second for HTML/JS)."
    },
    {
        "link": "https://stackoverflow.com/questions/45474141/php-mysqli-connection-and-query-error-handling-how",
        "document": "The following PHP code works. I just don't seem to be able to handle its errors in a custom way.\n\nFor example, when I intentionally misspell anything in the connection string to return code \"3\" for database down, my AJAX script just hangs in beforeSend forever...\n\nThis is what I got:\n\nAlright. After some research I have found that this works. It appears that you need to tell mysqli to throw exceptions.. For some reason this is different than just trying to handle an error the \"IF\" way. Any suggestions for improvement?\n\nHere's is the final tested and working PHP solution for all to see."
    },
    {
        "link": "https://stackoverflow.com/questions/73326155/php-error-handling-working-in-mysql-mysqli-but-not-pdo",
        "document": "It's a very common fallacy, that one needs a dedicated error handling code for PDO or Mysqli (or whatever else module for that matter). Least it should be even more specific, such as \"Mysqli connection\" handler, as it seems with your old mysqli code.\n\nIf you think of it, you don't really care whether it was exactly a database error that prevented the code form being executed correctly. There can be any other problem as well.\n\nAdmittedly, one hardly can expect any other problem from such a simple code but still, the code may grow, become more modular, perform more tasks - and therefore error out in any other part as well. Like, writing database credentials in the every file is a bit of waste. So it's natural to put them in a file and then just include it in the every other script that requires a database interaction. So this file may get corrupted which will has the same effect as a database error. And will need to be fixed as well.\n\nOr, if you're handling only the connection error, the problem can happen during the query execution as well (especially in your case, as the way the query is executed it will error out even if a customer will simply enter for example).\n\nWhat you really care for is whether the data has been stored correctly (and probably whether emails were sent as well) or not, no matter what could be the possible failure. This is being the exact reason, why I wrote in the article this warning against wrapping some specific part of code in a try-catch in order to report this particular error. As error reporting handler must be common for the entire code.\n\nAdmittedly, the simplest exception handling method is simply wrapping the entire code in a try catch block where the most generic exception type, namely , must be checked for. Not very reliable but simplest.\n\nThe key here is to wrap the entire code, not just some random part of it. But one shouldn't forget to set the exception mode for PDO, in order let the query execution errors to be caught in this block as well.\n\nNote that I substituted actual variables in the query with question marks, which is being correct way of using prepared statements, that otherwise become useless and render all your transition from mysqli fruitless (especially given that mysqli supports prepared statements as well).\n\nUnfortunately, PHP has two kinds of errors - exceptions and errors proper. And try-catch can catch only the former. In order to handle all kinds of errors, an error handler can be used. You can see a very basic example of one in my article on PHP error reporting.\n\nThe last note: sending an email every time an error occurs on the site is not the wisest move. Although in your case it could be justified, given PHP is only involved when a user submits a form, but on a regular site, where PHP is used to handle every page, it can lead to thousands emails. Or even in your case, spammers may target your forms and send thousands requests as well (which itself may cause some overflow error and therefore thousands emails in the inbox). Instead of sending emails manually, consider using a dedicated error monitoring software, such as Sentry. It will send only new errors, as well as aggregated error info."
    },
    {
        "link": "https://php.net/manual/en/mysqli.connect-error.php",
        "document": "/* @ is used to suppress warnings */\n\n /* Use your preferred error logging method here */"
    },
    {
        "link": "https://w3schools.com/php/func_mysqli_error.asp",
        "document": "Return the last error description for the most recent function call, if any:\n\n<?php\n\n $mysqli = new mysqli(\"localhost\",\"my_user\",\"my_password\",\"my_db\");\n\n \n\nif ($mysqli -> connect_errno) {\n\n echo \"Failed to connect to MySQL: \" . $mysqli -> connect_error;\n\n exit();\n\n }\n\n\n\n// Perform a query, check for error\n\nif (!$mysqli -> query(\"INSERT INTO Persons (FirstName) VALUES ('Glenn')\")) {\n\n echo(\"Error description: \" . $mysqli -> error);\n\n }\n\n \n\n$mysqli -> close();\n\n?>"
    }
]