[
    {
        "link": "https://plyr.io",
        "document": "A simple, accessible and customisable media player for HTML5 Video , HTML5 Audio , YouTube YouTube and Vimeo Vimeo\n\nIf you think Plyr's good, tweet it üëç"
    },
    {
        "link": "https://github.com/sampotts/plyr",
        "document": "Plyr is a simple, lightweight, accessible and customizable HTML5, YouTube and Vimeo media player that supports modern browsers.\n‚Ä¢ üîß Customizable - make the player look how you want with the markup you want\n‚Ä¢ üòé Clean HTML - uses the right elements. for volume and for progress and well, s for buttons. There's no or button hacks\n‚Ä¢ üéõ API - toggle playback, volume, seeking, and more through a standardized API\n‚Ä¢ üé§ Events - no messing around with Vimeo and YouTube APIs, all events are standardized across formats\n‚Ä¢ ü§ü No frameworks - written in \"vanilla\" ES6 JavaScript, no jQuery required\n‚Ä¢ üíÅ‚Äç‚ôÄÔ∏è Sass - to include in your build processes\n\nYou can try Plyr in Codepen using our minimal templates: HTML5 video, HTML5 audio, YouTube, Vimeo. For Streaming we also have example integrations with: Dash.js, Hls.js and Shaka Player\n\nPlyr extends upon the standard HTML5 media element markup so that's all you need for those types.\n\nNote: The poster image should be specified using . This is to prevent it being downloaded twice. If you're sure the image will be cached, you can still use the attribute for true progressive enhancement.\n\nFor YouTube and Vimeo players, Plyr uses progressive enhancement to enhance the default embeds. Below are some examples. The classname will make the embed responsive. You can add the , , (YouTube only) and (YouTube only) query parameters to the URL and they will be set as config options automatically. For YouTube, the should be updated to reflect the domain you're hosting the embed on, or you can opt to omit it.\n\nWe recommend progressive enhancement with the embedded players. You can elect to use an as the source element (which Plyr will progressively enhance) or a bog standard with two essential data attributes - and .\n\nNote: The classname will make the player a responsive 16:9 (most common) iframe embed. When plyr itself kicks in, your custom config option will be used.\n\nOr the non progressively enhanced method:\n\nNote: The can either be the video ID or URL for the media.\n\nMuch the same as YouTube above.\n\nOr the non progressively enhanced method:\n\nYou can use Plyr as an ES6 module as follows:\n\nAlternatively you can include the script before the closing tag and then in your JS create a new instance of Plyr as below.\n\nSee initialising for more information on advanced setups.\n\nYou can use our CDN (provided by Cloudflare) for the JavaScript. There's 2 versions; one with and one without polyfills. My recommendation would be to manage polyfills separately as part of your application but to make life easier you can use the polyfilled build.\n\nInclude the stylesheet into your .\n\nIf you want to use our CDN (provided by Cloudflare) for the default CSS, you can use the following:\n\nThe SVG sprite is loaded automatically from our CDN (provided by Cloudflare). To change this, see the options below. For reference, the CDN hosted SVG sprite can be found at .\n\nIf you don't want to create a build system to include Plyr as an npm module, you can use the pre-built files. You have a few options:\n‚Ä¢ Download the files from the CDN links above, they're already minified.\n‚Ä¢ Download the files from unpkg or similar services.\n‚Ä¢ Build the project yourself using , which installs the dependencies and spits out a build to .\n\nPlyr has partnered up with vi.ai to offer monetization options for your videos. Getting setup is easy:\n‚Ä¢ Grab your publisher ID from the code snippet\n‚Ä¢ Enable ads in the config options and enter your publisher ID\n\nAny questions regarding the ads can be sent straight to vi.ai and any issues with rendering raised through GitHub issues.\n\nIf you do not wish to use Vi, you can set your own option.\n\nIf you want to change any design tokens used for the rendering of the player, you can do so using CSS Custom Properties.\n\nHere's a list of the properties and what they are used for:\n\nYou can set them in your CSS for all players:\n\n...or for a specific class name:\n\n...or in your HTML:\n\nYou can use file included in as part of your build and change variables to suit your design. The Sass requires you to use autoprefixer (you should be already!) as all declarations use the W3C definitions.\n\nThe HTML markup uses the BEM methodology with as the block, e.g. . You can change the class hooks in the options to match any custom CSS you write. Check out the JavaScript source for more on this.\n\nThe icons used in the Plyr controls are loaded in an SVG sprite. The sprite is automatically loaded from our CDN by default. If you already have an icon build system in place, you can include the source plyr icons (see for source icons).\n\nYou can however specify your own option and Plyr will determine if the url is absolute and requires loading by AJAX/CORS due to current browser limitations or if it's a relative path, just use the path directly.\n\nIf you're using the tag on your site, you may need to use something like this: svgfixer.js\n\nMore info on SVG sprites here: http://css-tricks.com/svg-sprites-use-better-icon-fonts/ and the AJAX technique here: http://css-tricks.com/ajaxing-svg-sprite/\n\nYou'll notice the attribute on the example elements. This is because the TextTrack captions are loaded from another domain. If your TextTrack captions are also hosted on another domain, you will need to add this attribute and make sure your host has the correct headers setup. For more info on CORS checkout the MDN docs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n\nWebVTT captions are supported. To add a caption track, check the HTML example above and look for the element. Be sure to validate your caption files.\n\nYou can specify a range of arguments for the constructor to use:\n\nNote: If a , , or jQuery object are passed, the first element will be used for setup. To setup multiple players, see multiple players below.\n\nThe HTMLElement or string selector can be the target , , or wrapper for embeds.\n\nYou have two choices here. You can either use a simple array loop to map the constructor:\n\n...or use a static method where you can pass a CSS string selector, a NodeList, an Array of HTMLElement, or a JQuery object:\n\nBoth options will also return an array of instances in the order of they were in the DOM for the string selector or the source NodeList or Array.\n\nThe second argument for the constructor is the options object:\n\nOptions can be passed as an object to the constructor as above or as JSON in attribute on each of your target elements:\n\nNote the single quotes encapsulating the JSON and double quotes on the object keys. Only string values need double quotes.\n‚Ä¢ Autoplay is generally not recommended as it is seen as a negative user experience. It is also disabled in many browsers. Before raising issues, do your homework. More info can be found here:\n‚Ä¢ YouTube does not support programatically toggling the native fullscreen player via it's API. This means on iOS you have two options, neither being perfect:\n‚Ä¢ Use the fallback/faux fullscreen option which covers the whole viewport (this is the default)\n‚Ä¢ Set to and/or to - either option hides the fullscreen toggle in the UI (because of the above API issue) and means iOS will play the video in it's native player.\n\nThere are methods, setters and getters on a Plyr object.\n\nThe easiest way to access the Plyr object is to set the return value from your call to the constructor to a variable. For example:\n\nYou can also access the object through any events:\n‚Ä¢ For HTML5 players, will return a for most browsers - e.g. Chrome, Firefox, Opera, Safari and Edge according to MDN at time of writing.\n\nThis allows changing the player source and type on the fly.\n\nNote: property for YouTube and Vimeo can either be the video ID or the whole URL.\n\nYou can listen for events on the target element you setup Plyr on (see example under the table). Some events only apply to HTML5 audio and video. Using your reference to the instance, you can use the API method or . Access to the API can be obtained this way through the property. Here's an example:\n\nNote: These events also bubble up the DOM. The event target will be the container element.\n\nYouTube and Vimeo are currently supported and function much like a HTML5 video. Similar events and API methods are available for all types. However if you wish to access the API's directly. You can do so via the property of your player object - e.g. . You can then use the relevant methods from the third party APIs. More info on the respective API's here:\n\nNote: Not all API methods may work 100%. Your mileage may vary. It's better to use the Plyr API where possible.\n\nBy default, a player will bind the following keyboard shortcuts when it has focus. If you have the option to and there's only one player in the document then the shortcuts will work when any element has focus, apart from an element that requires input.\n\nIt's possible to display preview thumbnails as per the demo when you hover over the scrubber or while you are scrubbing in the main video area. This can be used for all video types but is easiest with HTML5 of course. You will need to generate the sprite or images yourself. This is possible using something like AWS transcoder to generate the frames and then combine them into a sprite image. Sprites are recommended for performance reasons - they will be much faster to download and easier to compress into a small file size making them load faster.\n\nYou can see the example VTT files here and here for how the sprites are done. The coordinates are set as the hash on the URL in the order X Offset, Y Offset, Width, Height (e.g. is offset from the left, from the top and is . If you want to include images per frame, this is also possible but will be slower, resulting in a degraded experience.\n\nFullscreen in Plyr is supported by all browsers that currently support it.\n\nPlyr supports the last 2 versions of most modern browsers.\n‚Ä¢ Mobile Safari on the iPhone forces the native player for unless the attribute is present. Volume controls are also disabled as they are handled device wide.\n‚Ä¢ Native player used (no support for or ) but the API is supported. No native fullscreen support, fallback can be used (see options).\n\nPlyr uses ES6 which isn't supported in all browsers quite yet. This means some features will need to be polyfilled to be available otherwise you'll run into issues. We've elected to not burden the ~90% of users that do support these features with extra JS and instead leave polyfilling to you to work out based on your needs.\n\nYou can use the static method to check for support. For example\n\nThe option can be used to disable certain User Agents. For example, if you don't want to use Plyr for smartphones, you could use:\n\nIf a User Agent is disabled but supports and natively, it will use the native player.\n\nSome awesome folks have made plugins for CMSs and Components for JavaScript frameworks:\n\nIf you find anything weird with Plyr, please let us know using the GitHub issues tracker.\n\nPlyr is developed by @sam_potts / sampotts.me with help from the awesome contributors\n\nPlyr costs money to run, not only my time. I donate my time for free as I enjoy building Plyr but unfortunately have to pay for domains, hosting, and more. Any help with costs is appreciated...\n\nIf you want to be added to the list, open a pull request. It'd be awesome to see how you're using Plyr üòé\n‚Ä¢ PayPal's Accessible HTML5 Video Player (which Plyr was originally ported from)\n‚Ä¢ An awesome guide for Plyr in Japanese! by @arayutw\n‚Ä¢ Cloudflare and Fastly for providing the CDN services.\n‚Ä¢ Sentry for error logging service on the demo website.\n\nThis project exists thanks to all the people who contribute. [Contribute].\n\nBecome a financial contributor and help us sustain our community. [Contribute]\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]"
    },
    {
        "link": "https://github.com/sampotts/plyr/blob/master/README.md",
        "document": "Plyr is a simple, lightweight, accessible and customizable HTML5, YouTube and Vimeo media player that supports modern browsers.\n‚Ä¢ üîß Customizable - make the player look how you want with the markup you want\n‚Ä¢ üòé Clean HTML - uses the right elements. for volume and for progress and well, s for buttons. There's no or button hacks\n‚Ä¢ üéõ API - toggle playback, volume, seeking, and more through a standardized API\n‚Ä¢ üé§ Events - no messing around with Vimeo and YouTube APIs, all events are standardized across formats\n‚Ä¢ ü§ü No frameworks - written in \"vanilla\" ES6 JavaScript, no jQuery required\n‚Ä¢ üíÅ‚Äç‚ôÄÔ∏è Sass - to include in your build processes\n\nYou can try Plyr in Codepen using our minimal templates: HTML5 video, HTML5 audio, YouTube, Vimeo. For Streaming we also have example integrations with: Dash.js, Hls.js and Shaka Player\n\nPlyr extends upon the standard HTML5 media element markup so that's all you need for those types.\n\nNote: The poster image should be specified using . This is to prevent it being downloaded twice. If you're sure the image will be cached, you can still use the attribute for true progressive enhancement.\n\nFor YouTube and Vimeo players, Plyr uses progressive enhancement to enhance the default embeds. Below are some examples. The classname will make the embed responsive. You can add the , , (YouTube only) and (YouTube only) query parameters to the URL and they will be set as config options automatically. For YouTube, the should be updated to reflect the domain you're hosting the embed on, or you can opt to omit it.\n\nWe recommend progressive enhancement with the embedded players. You can elect to use an as the source element (which Plyr will progressively enhance) or a bog standard with two essential data attributes - and .\n\nNote: The classname will make the player a responsive 16:9 (most common) iframe embed. When plyr itself kicks in, your custom config option will be used.\n\nOr the non progressively enhanced method:\n\nNote: The can either be the video ID or URL for the media.\n\nMuch the same as YouTube above.\n\nOr the non progressively enhanced method:\n\nYou can use Plyr as an ES6 module as follows:\n\nAlternatively you can include the script before the closing tag and then in your JS create a new instance of Plyr as below.\n\nSee initialising for more information on advanced setups.\n\nYou can use our CDN (provided by Cloudflare) for the JavaScript. There's 2 versions; one with and one without polyfills. My recommendation would be to manage polyfills separately as part of your application but to make life easier you can use the polyfilled build.\n\nInclude the stylesheet into your .\n\nIf you want to use our CDN (provided by Cloudflare) for the default CSS, you can use the following:\n\nThe SVG sprite is loaded automatically from our CDN (provided by Cloudflare). To change this, see the options below. For reference, the CDN hosted SVG sprite can be found at .\n\nIf you don't want to create a build system to include Plyr as an npm module, you can use the pre-built files. You have a few options:\n‚Ä¢ Download the files from the CDN links above, they're already minified.\n‚Ä¢ Download the files from unpkg or similar services.\n‚Ä¢ Build the project yourself using , which installs the dependencies and spits out a build to .\n\nPlyr has partnered up with vi.ai to offer monetization options for your videos. Getting setup is easy:\n‚Ä¢ Grab your publisher ID from the code snippet\n‚Ä¢ Enable ads in the config options and enter your publisher ID\n\nAny questions regarding the ads can be sent straight to vi.ai and any issues with rendering raised through GitHub issues.\n\nIf you do not wish to use Vi, you can set your own option.\n\nIf you want to change any design tokens used for the rendering of the player, you can do so using CSS Custom Properties.\n\nHere's a list of the properties and what they are used for:\n\nYou can set them in your CSS for all players:\n\n...or for a specific class name:\n\n...or in your HTML:\n\nYou can use file included in as part of your build and change variables to suit your design. The Sass requires you to use autoprefixer (you should be already!) as all declarations use the W3C definitions.\n\nThe HTML markup uses the BEM methodology with as the block, e.g. . You can change the class hooks in the options to match any custom CSS you write. Check out the JavaScript source for more on this.\n\nThe icons used in the Plyr controls are loaded in an SVG sprite. The sprite is automatically loaded from our CDN by default. If you already have an icon build system in place, you can include the source plyr icons (see for source icons).\n\nYou can however specify your own option and Plyr will determine if the url is absolute and requires loading by AJAX/CORS due to current browser limitations or if it's a relative path, just use the path directly.\n\nIf you're using the tag on your site, you may need to use something like this: svgfixer.js\n\nMore info on SVG sprites here: http://css-tricks.com/svg-sprites-use-better-icon-fonts/ and the AJAX technique here: http://css-tricks.com/ajaxing-svg-sprite/\n\nYou'll notice the attribute on the example elements. This is because the TextTrack captions are loaded from another domain. If your TextTrack captions are also hosted on another domain, you will need to add this attribute and make sure your host has the correct headers setup. For more info on CORS checkout the MDN docs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n\nWebVTT captions are supported. To add a caption track, check the HTML example above and look for the element. Be sure to validate your caption files.\n\nYou can specify a range of arguments for the constructor to use:\n\nNote: If a , , or jQuery object are passed, the first element will be used for setup. To setup multiple players, see multiple players below.\n\nThe HTMLElement or string selector can be the target , , or wrapper for embeds.\n\nYou have two choices here. You can either use a simple array loop to map the constructor:\n\n...or use a static method where you can pass a CSS string selector, a NodeList, an Array of HTMLElement, or a JQuery object:\n\nBoth options will also return an array of instances in the order of they were in the DOM for the string selector or the source NodeList or Array.\n\nThe second argument for the constructor is the options object:\n\nOptions can be passed as an object to the constructor as above or as JSON in attribute on each of your target elements:\n\nNote the single quotes encapsulating the JSON and double quotes on the object keys. Only string values need double quotes.\n‚Ä¢ Autoplay is generally not recommended as it is seen as a negative user experience. It is also disabled in many browsers. Before raising issues, do your homework. More info can be found here:\n‚Ä¢ YouTube does not support programatically toggling the native fullscreen player via it's API. This means on iOS you have two options, neither being perfect:\n‚Ä¢ Use the fallback/faux fullscreen option which covers the whole viewport (this is the default)\n‚Ä¢ Set to and/or to - either option hides the fullscreen toggle in the UI (because of the above API issue) and means iOS will play the video in it's native player.\n\nThere are methods, setters and getters on a Plyr object.\n\nThe easiest way to access the Plyr object is to set the return value from your call to the constructor to a variable. For example:\n\nYou can also access the object through any events:\n‚Ä¢ For HTML5 players, will return a for most browsers - e.g. Chrome, Firefox, Opera, Safari and Edge according to MDN at time of writing.\n\nThis allows changing the player source and type on the fly.\n\nNote: property for YouTube and Vimeo can either be the video ID or the whole URL.\n\nYou can listen for events on the target element you setup Plyr on (see example under the table). Some events only apply to HTML5 audio and video. Using your reference to the instance, you can use the API method or . Access to the API can be obtained this way through the property. Here's an example:\n\nNote: These events also bubble up the DOM. The event target will be the container element.\n\nYouTube and Vimeo are currently supported and function much like a HTML5 video. Similar events and API methods are available for all types. However if you wish to access the API's directly. You can do so via the property of your player object - e.g. . You can then use the relevant methods from the third party APIs. More info on the respective API's here:\n\nNote: Not all API methods may work 100%. Your mileage may vary. It's better to use the Plyr API where possible.\n\nBy default, a player will bind the following keyboard shortcuts when it has focus. If you have the option to and there's only one player in the document then the shortcuts will work when any element has focus, apart from an element that requires input.\n\nIt's possible to display preview thumbnails as per the demo when you hover over the scrubber or while you are scrubbing in the main video area. This can be used for all video types but is easiest with HTML5 of course. You will need to generate the sprite or images yourself. This is possible using something like AWS transcoder to generate the frames and then combine them into a sprite image. Sprites are recommended for performance reasons - they will be much faster to download and easier to compress into a small file size making them load faster.\n\nYou can see the example VTT files here and here for how the sprites are done. The coordinates are set as the hash on the URL in the order X Offset, Y Offset, Width, Height (e.g. is offset from the left, from the top and is . If you want to include images per frame, this is also possible but will be slower, resulting in a degraded experience.\n\nFullscreen in Plyr is supported by all browsers that currently support it.\n\nPlyr supports the last 2 versions of most modern browsers.\n‚Ä¢ Mobile Safari on the iPhone forces the native player for unless the attribute is present. Volume controls are also disabled as they are handled device wide.\n‚Ä¢ Native player used (no support for or ) but the API is supported. No native fullscreen support, fallback can be used (see options).\n\nPlyr uses ES6 which isn't supported in all browsers quite yet. This means some features will need to be polyfilled to be available otherwise you'll run into issues. We've elected to not burden the ~90% of users that do support these features with extra JS and instead leave polyfilling to you to work out based on your needs.\n\nYou can use the static method to check for support. For example\n\nThe option can be used to disable certain User Agents. For example, if you don't want to use Plyr for smartphones, you could use:\n\nIf a User Agent is disabled but supports and natively, it will use the native player.\n\nSome awesome folks have made plugins for CMSs and Components for JavaScript frameworks:\n\nIf you find anything weird with Plyr, please let us know using the GitHub issues tracker.\n\nPlyr is developed by @sam_potts / sampotts.me with help from the awesome contributors\n\nPlyr costs money to run, not only my time. I donate my time for free as I enjoy building Plyr but unfortunately have to pay for domains, hosting, and more. Any help with costs is appreciated...\n\nIf you want to be added to the list, open a pull request. It'd be awesome to see how you're using Plyr üòé\n‚Ä¢ PayPal's Accessible HTML5 Video Player (which Plyr was originally ported from)\n‚Ä¢ An awesome guide for Plyr in Japanese! by @arayutw\n‚Ä¢ Cloudflare and Fastly for providing the CDN services.\n‚Ä¢ Sentry for error logging service on the demo website.\n\nThis project exists thanks to all the people who contribute. [Contribute].\n\nBecome a financial contributor and help us sustain our community. [Contribute]\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]"
    },
    {
        "link": "https://rdrr.io/cran/plyr/api",
        "document": "Add the following code to your website.\n\nFor more information on customizing the embed code, read Embedding Snippets."
    },
    {
        "link": "https://developers.google.com/youtube/iframe_api_reference",
        "document": "The IFrame player API lets you embed a YouTube video player on your website and control the player using JavaScript.\n\nUsing the API's JavaScript functions, you can queue videos for playback; play, pause, or stop those videos; adjust the player volume; or retrieve information about the video being played. You can also add event listeners that will execute in response to certain player events, such as a player state change.\n\nThis guide explains how to use the IFrame API. It identifies the different types of events that the API can send and explains how to write event listeners to respond to those events. It also details the different JavaScript functions that you can call to control the video player as well as the player parameters you can use to further customize the player.\n\nThe user's browser must support the HTML5 feature. Most modern browsers support .\n\nEmbedded players must have a viewport that is at least 200px by 200px. If the player displays controls, it must be large enough to fully display the controls without shrinking the viewport below the minimum size. We recommend 16:9 players be at least 480 pixels wide and 270 pixels tall.\n\nAny web page that uses the IFrame API must also implement the following JavaScript function:\n‚Ä¢ ‚Äì The API will call this function when the page has finished downloading the JavaScript for the player API, which enables you to then use the API on your page. Thus, this function might create the player objects that you want to display when the page loads.\n\nThe sample HTML page below creates an embedded player that will load a video, play it for six seconds, and then stop the playback. The numbered comments in the HTML are explained in the list below the example.\n\nThe following list provides more details about the sample above:\n‚Ä¢ The tag in this section identifies the location on the page where the IFrame API will place the video player. The constructor for the player object, which is described in the Loading a video player section, identifies the tag by its to ensure that the API places the in the proper location. Specifically, the IFrame API will replace the tag with the tag. As an alternative, you could also put the element directly on the page. The Loading a video player section explains how to do so.\n‚Ä¢ The code in this section loads the IFrame Player API JavaScript code. The example uses DOM modification to download the API code to ensure that the code is retrieved asynchronously. (The tag's attribute, which also enables asynchronous downloads, is not yet supported in all modern browsers as discussed in this Stack Overflow answer.\n‚Ä¢ The function will execute as soon as the player API code downloads. This portion of the code defines a global variable, , which refers to the video player you are embedding, and the function then constructs the video player object.\n‚Ä¢ The function will execute when the event fires. In this example, the function indicates that when the video player is ready, it should begin to play.\n‚Ä¢ The API will call the function when the player's state changes, which may indicate that the player is playing, paused, finished, and so forth. The function indicates that when the player state is (playing), the player should play for six seconds and then call the function to stop the video.\n\nAfter the API's JavaScript code loads, the API will call the function, at which point you can construct a object to insert a video player on your page. The HTML excerpt below shows the function from the example above:\n\nThe constructor for the video player specifies the following parameters:\n‚Ä¢ The first parameter specifies either the DOM element or the of the HTML element where the API will insert the tag containing the player. The IFrame API will replace the specified element with the element containing the player. This could affect the layout of your page if the element being replaced has a different display style than the inserted element. By default, an displays as an element.\n‚Ä¢ The second parameter is an object that specifies player options. The object contains the following properties:\n‚Ä¢ (number) ‚Äì The width of the video player. The default value is .\n‚Ä¢ (number) ‚Äì The height of the video player. The default value is .\n‚Ä¢ (string) ‚Äì The YouTube video ID that identifies the video that the player will load.\n‚Ä¢ (object) ‚Äì The object's properties identify player parameters that can be used to customize the player.\n‚Ä¢ (object) ‚Äì The object's properties identify the events that the API fires and the functions (event listeners) that the API will call when those events occur. In the example, the constructor indicates that the function will execute when the event fires and that the function will execute when the event fires.\n\nAs mentioned in the Getting started section, instead of writing an empty element on your page, which the player API's JavaScript code will then replace with an element, you could create the tag yourself. The first example in the Examples section shows how to do this.\n\nNote that if you do write the tag, then when you construct the object, you do not need to specify values for the and , which are specified as attributes of the tag, or the and player parameters, which are are specified in the URL. As an extra security measure, you should also include the parameter to the URL, specifying the URL scheme ( or ) and full domain of your host page as the parameter value. While is optional, including it protects against malicious third-party JavaScript being injected into your page and hijacking control of your YouTube player.\n\nFor other examples on constructing video player objects, see Examples.\n\nTo call the player API methods, you must first get a reference to the player object you wish to control. You obtain the reference by creating a object as discussed in the Getting started and Loading a video player sections of this document.\n\nQueueing functions allow you to load and play a video, a playlist, or another list of videos. If you are using the object syntax described below to call these functions, then you can also queue or load a list of a user's uploaded videos.\n\nThe API supports two different syntaxes for calling the queueing functions.\n‚Ä¢ The argument syntax requires function arguments to be listed in a prescribed order.\n‚Ä¢ The object syntax lets you pass an object as a single parameter and to define object properties for the function arguments that you wish to set. In addition, the API may support additional functionality that the argument syntax does not support.\n\nFor example, the function can be called in either of the following ways. Note that the object syntax supports the property, which the argument syntax does not support.\n\nThe and functions allow you to load and play a playlist. If you are using object syntax to call these functions, you can also queue (or load) a list of a user's uploaded videos.\n\nSince the functions work differently depending on whether they are called using the argument syntax or the object syntax, both calling methods are documented below.\n\nNote: The 360¬∞ video playback experience has limited support on mobile devices. On unsupported devices, 360¬∞ videos appear distorted and there is no supported way to change the viewing perspective at all, including through the API, using orientation sensors, or responding to touch/drag actions on the device's screen.\n\nThe API fires events to notify your application of changes to the embedded player. As noted in the previous section, you can subscribe to events by adding an event listener when constructing the object, and you can also use the function.\n\nThe API will pass an event object as the sole argument to each of those functions. The event object has the following properties:\n‚Ä¢ The event's identifies the video player that corresponds to the event.\n‚Ä¢ The event's specifies a value relevant to the event. Note that the and events do not specify a property.\n\nThe following list defines the events that the API fires:\n‚Ä¢ Example 1: Use API with existing <iframe> In this example, an element on the page already defines the player with which the API will be used. Note that either the player's URL must set the parameter to or the element's attribute must be set to . The function changes the color of the border around the player to orange when the player is ready. The function then changes the color of the border around the player based on the current player status. For example, the color is green when the player is playing, red when paused, blue when buffering, and so forth. This example uses the following code:\n‚Ä¢ This example creates a 1280px by 720px video player. The event listener for the event then calls the function to adjust the volume to the highest setting.\n‚Ä¢ Example 3: This example sets player parameters to automatically play the video when it loads and to hide the video player's controls. It also adds event listeners for several events that the API broadcasts.\n\nThis example uses the following code:\n\nYouTube has extended the Android WebView Media Integrity API to enable embedded media players, including YouTube player embeds in Android applications, to verify the embedding app's authenticity. With this change, embedding apps automatically send an attested app ID to YouTube. The data collected through usage of this API is the app metadata (the package name, version number, and signing certificate) and a device attestation token generated by Google Play services.\n\nThe data is used to verify the application and device integrity. It is encrypted, not shared with third parties, and deleted following a fixed retention period. App developers can configure their app identity in the WebView Media Integrity API. The configuration supports an opt-out option."
    },
    {
        "link": "https://npmjs.com/package/plyr/v/3.6.12",
        "document": "Plyr is a simple, lightweight, accessible and customizable HTML5, YouTube and Vimeo media player that supports modern browsers.\n‚Ä¢ Customizable - make the player look how you want with the markup you want\n‚Ä¢ Clean HTML - uses the right elements. for volume and for progress and well, s for buttons. There's no or button hacks\n‚Ä¢ API - toggle playback, volume, seeking, and more through a standardized API\n‚Ä¢ Events - no messing around with Vimeo and YouTube APIs, all events are standardized across formats\n‚Ä¢ No frameworks - written in \"vanilla\" ES6 JavaScript, no jQuery required\n‚Ä¢ SASS - to include in your build processes\n\nYou can try Plyr in Codepen using our minimal templates: HTML5 video, HTML5 audio, YouTube, Vimeo. For Streaming we also have example integrations with: Dash.js, Hls.js and Shaka Player\n\nPlyr extends upon the standard HTML5 media element markup so that's all you need for those types.\n\nNote: The poster image should be specified using . This is to prevent it being downloaded twice. If you're sure the image will be cached, you can still use the attribute for true progressive enhancement.\n\nFor YouTube and Vimeo players, Plyr uses progressive enhancement to enhance the default embeds. Below are some examples. The classname will make the embed responsive. You can add the , , (YouTube only) and (YouTube only) query parameters to the URL and they will be set as config options automatically. For YouTube, the should be updated to reflect the domain you're hosting the embed on, or you can opt to omit it.\n\nWe recommend progressive enhancement with the embedded players. You can elect to use an as the source element (which Plyr will progressively enhance) or a bog standard with two essential data attributes - and .\n\nNote: The classname will make the player a responsive 16:9 (most common) iframe embed. When plyr itself kicks in, your custom config option will be used.\n\nOr the non progressively enhanced method:\n\nNote: The can either be the video ID or URL for the media.\n\nMuch the same as YouTube above.\n\nOr the non progressively enhanced method:\n\nYou can use Plyr as an ES6 module as follows:\n\nAlternatively you can include the script before the closing tag and then in your JS create a new instance of Plyr as below.\n\nSee initialising for more information on advanced setups.\n\nYou can use our CDN (provided by Fastly) for the JavaScript. There's 2 versions; one with and one without polyfills. My recommendation would be to manage polyfills separately as part of your application but to make life easier you can use the polyfilled build.\n\nInclude the stylesheet into your .\n\nIf you want to use our CDN (provided by Fastly) for the default CSS, you can use the following:\n\nThe SVG sprite is loaded automatically from our CDN (provided by Fastly). To change this, see the options below. For reference, the CDN hosted SVG sprite can be found at .\n\nPlyr has partnered up with vi.ai to offer monetization options for your videos. Getting setup is easy:\n‚Ä¢ Grab your publisher ID from the code snippet\n‚Ä¢ Enable ads in the config options and enter your publisher ID\n\nAny questions regarding the ads can be sent straight to vi.ai and any issues with rendering raised through GitHub issues.\n\nIf you do not wish to use Vi, you can set your own option.\n\nIf you want to change any design tokens used for the rendering of the player, you can do so using CSS Custom Properties.\n\nHere's a list of the properties and what they are used for:\n\nYou can set them in your CSS for all players:\n\n...or for a specific class name:\n\n...or in your HTML:\n\nYou can use file included in as part of your build and change variables to suit your design. The SASS requires you to use autoprefixer (you should be already!) as all declarations use the W3C definitions.\n\nThe HTML markup uses the BEM methodology with as the block, e.g. . You can change the class hooks in the options to match any custom CSS you write. Check out the JavaScript source for more on this.\n\nThe icons used in the Plyr controls are loaded in an SVG sprite. The sprite is automatically loaded from our CDN by default. If you already have an icon build system in place, you can include the source plyr icons (see for source icons).\n\nYou can however specify your own option and Plyr will determine if the url is absolute and requires loading by AJAX/CORS due to current browser limitations or if it's a relative path, just use the path directly.\n\nIf you're using the tag on your site, you may need to use something like this: svgfixer.js\n\nMore info on SVG sprites here: http://css-tricks.com/svg-sprites-use-better-icon-fonts/ and the AJAX technique here: http://css-tricks.com/ajaxing-svg-sprite/\n\nYou'll notice the attribute on the example elements. This is because the TextTrack captions are loaded from another domain. If your TextTrack captions are also hosted on another domain, you will need to add this attribute and make sure your host has the correct headers setup. For more info on CORS checkout the MDN docs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n\nWebVTT captions are supported. To add a caption track, check the HTML example above and look for the element. Be sure to validate your caption files.\n\nYou can specify a range of arguments for the constructor to use:\n\nNote: If a , , or jQuery object are passed, the first element will be used for setup. To setup multiple players, see multiple players below.\n\nThe HTMLElement or string selector can be the target , , or wrapper for embeds.\n\nYou have two choices here. You can either use a simple array loop to map the constructor:\n\n...or use a static method where you can pass a CSS string selector, a NodeList, an Array of HTMLElement, or a JQuery object:\n\nBoth options will also return an array of instances in the order of they were in the DOM for the string selector or the source NodeList or Array.\n\nThe second argument for the constructor is the options object:\n\nOptions can be passed as an object to the constructor as above or as JSON in attribute on each of your target elements:\n\nNote the single quotes encapsulating the JSON and double quotes on the object keys. Only string values need double quotes.\n‚Ä¢ Autoplay is generally not recommended as it is seen as a negative user experience. It is also disabled in many browsers. Before raising issues, do your homework. More info can be found here:\n\nThere are methods, setters and getters on a Plyr object.\n\nThe easiest way to access the Plyr object is to set the return value from your call to the constructor to a variable. For example:\n\nYou can also access the object through any events:\n‚Ä¢ For HTML5 players, will return a for most browsers - e.g. Chrome, Firefox, Opera, Safari and Edge according to MDN at time of writing.\n\nThis allows changing the player source and type on the fly.\n\nNote: property for YouTube and Vimeo can either be the video ID or the whole URL.\n\nYou can listen for events on the target element you setup Plyr on (see example under the table). Some events only apply to HTML5 audio and video. Using your reference to the instance, you can use the API method or . Access to the API can be obtained this way through the property. Here's an example:\n\nNote: These events also bubble up the DOM. The event target will be the container element.\n\nYouTube and Vimeo are currently supported and function much like a HTML5 video. Similar events and API methods are available for all types. However if you wish to access the API's directly. You can do so via the property of your player object - e.g. . You can then use the relevant methods from the third party APIs. More info on the respective API's here:\n\nNote: Not all API methods may work 100%. Your mileage may vary. It's better to use the Plyr API where possible.\n\nBy default, a player will bind the following keyboard shortcuts when it has focus. If you have the option to and there's only one player in the document then the shortcuts will work when any element has focus, apart from an element that requires input.\n\nIt's possible to display preview thumbnails as per the demo when you hover over the scrubber or while you are scrubbing in the main video area. This can be used for all video types but is easiest with HTML5 of course. You will need to generate the sprite or images yourself. This is possible using something like AWS transcoder to generate the frames and then combine them into a sprite image. Sprites are recommended for performance reasons - they will be much faster to download and easier to compress into a small file size making them load faster.\n\nYou can see the example VTT files here and here for how the sprites are done. The coordinates are set as the hash on the URL in the order X Offset, Y Offset, Width, Height (e.g. is offset from the left, from the top and is . If you want to include images per frame, this is also possible but will be slower, resulting in a degraded experience.\n\nFullscreen in Plyr is supported by all browsers that currently support it.\n\nPlyr supports the last 2 versions of most modern browsers.\n‚Ä¢ Mobile Safari on the iPhone forces the native player for unless the attribute is present. Volume controls are also disabled as they are handled device wide.\n‚Ä¢ Native player used (no support for or ) but the API is supported. No native fullscreen support, fallback can be used (see options).\n\nPlyr uses ES6 which isn't supported in all browsers quite yet. This means some features will need to be polyfilled to be available otherwise you'll run into issues. We've elected to not burden the ~90% of users that do support these features with extra JS and instead leave polyfilling to you to work out based on your needs. The easiest method I've found is to use polyfill.io which provides polyfills based on user agent. This is the method the demo uses.\n\nYou can use the static method to check for support. For example\n‚Ä¢ Whether the player has the attribute (only applicable to iOS 10+)\n\nThe option can be used to disable certain User Agents. For example, if you don't want to use Plyr for smartphones, you could use:\n\nIf a User Agent is disabled but supports and natively, it will use the native player.\n\nSome awesome folks have made plugins for CMSs and Components for JavaScript frameworks:\n\nIf you find anything weird with Plyr, please let us know using the GitHub issues tracker.\n\nPlyr is developed by @sam_potts / sampotts.me with help from the awesome contributors\n\nPlyr costs money to run, not only my time. I donate my time for free as I enjoy building Plyr but unfortunately have to pay for domains, hosting, and more. Any help with costs is appreciated...\n\nIf you want to be added to the list, open a pull request. It'd be awesome to see how you're using Plyr\n‚Ä¢ PayPal's Accessible HTML5 Video Player (which Plyr was originally ported from)\n‚Ä¢ An awesome guide for Plyr in Japanese! by @arayutw\n\nMassive thanks to Fastly for providing the CDN services.\n\nMassive thanks to Sentry for providing the logging services for the demo site.\n\nThis project exists thanks to all the people who contribute. [Contribute].\n\nBecome a financial contributor and help us sustain our community. [Contribute]\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]"
    },
    {
        "link": "https://plyr.io",
        "document": "A simple, accessible and customisable media player for HTML5 Video , HTML5 Audio , YouTube YouTube and Vimeo Vimeo\n\nIf you think Plyr's good, tweet it üëç"
    },
    {
        "link": "https://github.com/sampotts/plyr",
        "document": "Plyr is a simple, lightweight, accessible and customizable HTML5, YouTube and Vimeo media player that supports modern browsers.\n‚Ä¢ üîß Customizable - make the player look how you want with the markup you want\n‚Ä¢ üòé Clean HTML - uses the right elements. for volume and for progress and well, s for buttons. There's no or button hacks\n‚Ä¢ üéõ API - toggle playback, volume, seeking, and more through a standardized API\n‚Ä¢ üé§ Events - no messing around with Vimeo and YouTube APIs, all events are standardized across formats\n‚Ä¢ ü§ü No frameworks - written in \"vanilla\" ES6 JavaScript, no jQuery required\n‚Ä¢ üíÅ‚Äç‚ôÄÔ∏è Sass - to include in your build processes\n\nYou can try Plyr in Codepen using our minimal templates: HTML5 video, HTML5 audio, YouTube, Vimeo. For Streaming we also have example integrations with: Dash.js, Hls.js and Shaka Player\n\nPlyr extends upon the standard HTML5 media element markup so that's all you need for those types.\n\nNote: The poster image should be specified using . This is to prevent it being downloaded twice. If you're sure the image will be cached, you can still use the attribute for true progressive enhancement.\n\nFor YouTube and Vimeo players, Plyr uses progressive enhancement to enhance the default embeds. Below are some examples. The classname will make the embed responsive. You can add the , , (YouTube only) and (YouTube only) query parameters to the URL and they will be set as config options automatically. For YouTube, the should be updated to reflect the domain you're hosting the embed on, or you can opt to omit it.\n\nWe recommend progressive enhancement with the embedded players. You can elect to use an as the source element (which Plyr will progressively enhance) or a bog standard with two essential data attributes - and .\n\nNote: The classname will make the player a responsive 16:9 (most common) iframe embed. When plyr itself kicks in, your custom config option will be used.\n\nOr the non progressively enhanced method:\n\nNote: The can either be the video ID or URL for the media.\n\nMuch the same as YouTube above.\n\nOr the non progressively enhanced method:\n\nYou can use Plyr as an ES6 module as follows:\n\nAlternatively you can include the script before the closing tag and then in your JS create a new instance of Plyr as below.\n\nSee initialising for more information on advanced setups.\n\nYou can use our CDN (provided by Cloudflare) for the JavaScript. There's 2 versions; one with and one without polyfills. My recommendation would be to manage polyfills separately as part of your application but to make life easier you can use the polyfilled build.\n\nInclude the stylesheet into your .\n\nIf you want to use our CDN (provided by Cloudflare) for the default CSS, you can use the following:\n\nThe SVG sprite is loaded automatically from our CDN (provided by Cloudflare). To change this, see the options below. For reference, the CDN hosted SVG sprite can be found at .\n\nIf you don't want to create a build system to include Plyr as an npm module, you can use the pre-built files. You have a few options:\n‚Ä¢ Download the files from the CDN links above, they're already minified.\n‚Ä¢ Download the files from unpkg or similar services.\n‚Ä¢ Build the project yourself using , which installs the dependencies and spits out a build to .\n\nPlyr has partnered up with vi.ai to offer monetization options for your videos. Getting setup is easy:\n‚Ä¢ Grab your publisher ID from the code snippet\n‚Ä¢ Enable ads in the config options and enter your publisher ID\n\nAny questions regarding the ads can be sent straight to vi.ai and any issues with rendering raised through GitHub issues.\n\nIf you do not wish to use Vi, you can set your own option.\n\nIf you want to change any design tokens used for the rendering of the player, you can do so using CSS Custom Properties.\n\nHere's a list of the properties and what they are used for:\n\nYou can set them in your CSS for all players:\n\n...or for a specific class name:\n\n...or in your HTML:\n\nYou can use file included in as part of your build and change variables to suit your design. The Sass requires you to use autoprefixer (you should be already!) as all declarations use the W3C definitions.\n\nThe HTML markup uses the BEM methodology with as the block, e.g. . You can change the class hooks in the options to match any custom CSS you write. Check out the JavaScript source for more on this.\n\nThe icons used in the Plyr controls are loaded in an SVG sprite. The sprite is automatically loaded from our CDN by default. If you already have an icon build system in place, you can include the source plyr icons (see for source icons).\n\nYou can however specify your own option and Plyr will determine if the url is absolute and requires loading by AJAX/CORS due to current browser limitations or if it's a relative path, just use the path directly.\n\nIf you're using the tag on your site, you may need to use something like this: svgfixer.js\n\nMore info on SVG sprites here: http://css-tricks.com/svg-sprites-use-better-icon-fonts/ and the AJAX technique here: http://css-tricks.com/ajaxing-svg-sprite/\n\nYou'll notice the attribute on the example elements. This is because the TextTrack captions are loaded from another domain. If your TextTrack captions are also hosted on another domain, you will need to add this attribute and make sure your host has the correct headers setup. For more info on CORS checkout the MDN docs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n\nWebVTT captions are supported. To add a caption track, check the HTML example above and look for the element. Be sure to validate your caption files.\n\nYou can specify a range of arguments for the constructor to use:\n\nNote: If a , , or jQuery object are passed, the first element will be used for setup. To setup multiple players, see multiple players below.\n\nThe HTMLElement or string selector can be the target , , or wrapper for embeds.\n\nYou have two choices here. You can either use a simple array loop to map the constructor:\n\n...or use a static method where you can pass a CSS string selector, a NodeList, an Array of HTMLElement, or a JQuery object:\n\nBoth options will also return an array of instances in the order of they were in the DOM for the string selector or the source NodeList or Array.\n\nThe second argument for the constructor is the options object:\n\nOptions can be passed as an object to the constructor as above or as JSON in attribute on each of your target elements:\n\nNote the single quotes encapsulating the JSON and double quotes on the object keys. Only string values need double quotes.\n‚Ä¢ Autoplay is generally not recommended as it is seen as a negative user experience. It is also disabled in many browsers. Before raising issues, do your homework. More info can be found here:\n‚Ä¢ YouTube does not support programatically toggling the native fullscreen player via it's API. This means on iOS you have two options, neither being perfect:\n‚Ä¢ Use the fallback/faux fullscreen option which covers the whole viewport (this is the default)\n‚Ä¢ Set to and/or to - either option hides the fullscreen toggle in the UI (because of the above API issue) and means iOS will play the video in it's native player.\n\nThere are methods, setters and getters on a Plyr object.\n\nThe easiest way to access the Plyr object is to set the return value from your call to the constructor to a variable. For example:\n\nYou can also access the object through any events:\n‚Ä¢ For HTML5 players, will return a for most browsers - e.g. Chrome, Firefox, Opera, Safari and Edge according to MDN at time of writing.\n\nThis allows changing the player source and type on the fly.\n\nNote: property for YouTube and Vimeo can either be the video ID or the whole URL.\n\nYou can listen for events on the target element you setup Plyr on (see example under the table). Some events only apply to HTML5 audio and video. Using your reference to the instance, you can use the API method or . Access to the API can be obtained this way through the property. Here's an example:\n\nNote: These events also bubble up the DOM. The event target will be the container element.\n\nYouTube and Vimeo are currently supported and function much like a HTML5 video. Similar events and API methods are available for all types. However if you wish to access the API's directly. You can do so via the property of your player object - e.g. . You can then use the relevant methods from the third party APIs. More info on the respective API's here:\n\nNote: Not all API methods may work 100%. Your mileage may vary. It's better to use the Plyr API where possible.\n\nBy default, a player will bind the following keyboard shortcuts when it has focus. If you have the option to and there's only one player in the document then the shortcuts will work when any element has focus, apart from an element that requires input.\n\nIt's possible to display preview thumbnails as per the demo when you hover over the scrubber or while you are scrubbing in the main video area. This can be used for all video types but is easiest with HTML5 of course. You will need to generate the sprite or images yourself. This is possible using something like AWS transcoder to generate the frames and then combine them into a sprite image. Sprites are recommended for performance reasons - they will be much faster to download and easier to compress into a small file size making them load faster.\n\nYou can see the example VTT files here and here for how the sprites are done. The coordinates are set as the hash on the URL in the order X Offset, Y Offset, Width, Height (e.g. is offset from the left, from the top and is . If you want to include images per frame, this is also possible but will be slower, resulting in a degraded experience.\n\nFullscreen in Plyr is supported by all browsers that currently support it.\n\nPlyr supports the last 2 versions of most modern browsers.\n‚Ä¢ Mobile Safari on the iPhone forces the native player for unless the attribute is present. Volume controls are also disabled as they are handled device wide.\n‚Ä¢ Native player used (no support for or ) but the API is supported. No native fullscreen support, fallback can be used (see options).\n\nPlyr uses ES6 which isn't supported in all browsers quite yet. This means some features will need to be polyfilled to be available otherwise you'll run into issues. We've elected to not burden the ~90% of users that do support these features with extra JS and instead leave polyfilling to you to work out based on your needs.\n\nYou can use the static method to check for support. For example\n\nThe option can be used to disable certain User Agents. For example, if you don't want to use Plyr for smartphones, you could use:\n\nIf a User Agent is disabled but supports and natively, it will use the native player.\n\nSome awesome folks have made plugins for CMSs and Components for JavaScript frameworks:\n\nIf you find anything weird with Plyr, please let us know using the GitHub issues tracker.\n\nPlyr is developed by @sam_potts / sampotts.me with help from the awesome contributors\n\nPlyr costs money to run, not only my time. I donate my time for free as I enjoy building Plyr but unfortunately have to pay for domains, hosting, and more. Any help with costs is appreciated...\n\nIf you want to be added to the list, open a pull request. It'd be awesome to see how you're using Plyr üòé\n‚Ä¢ PayPal's Accessible HTML5 Video Player (which Plyr was originally ported from)\n‚Ä¢ An awesome guide for Plyr in Japanese! by @arayutw\n‚Ä¢ Cloudflare and Fastly for providing the CDN services.\n‚Ä¢ Sentry for error logging service on the demo website.\n\nThis project exists thanks to all the people who contribute. [Contribute].\n\nBecome a financial contributor and help us sustain our community. [Contribute]\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]"
    },
    {
        "link": "https://npmjs.com/package/plyr",
        "document": "Plyr is a simple, lightweight, accessible and customizable HTML5, YouTube and Vimeo media player that supports modern browsers.\n‚Ä¢ Customizable - make the player look how you want with the markup you want\n‚Ä¢ Clean HTML - uses the right elements. for volume and for progress and well, s for buttons. There's no or button hacks\n‚Ä¢ API - toggle playback, volume, seeking, and more through a standardized API\n‚Ä¢ Events - no messing around with Vimeo and YouTube APIs, all events are standardized across formats\n‚Ä¢ No frameworks - written in \"vanilla\" ES6 JavaScript, no jQuery required\n‚Ä¢ Sass - to include in your build processes\n\nYou can try Plyr in Codepen using our minimal templates: HTML5 video, HTML5 audio, YouTube, Vimeo. For Streaming we also have example integrations with: Dash.js, Hls.js and Shaka Player\n\nPlyr extends upon the standard HTML5 media element markup so that's all you need for those types.\n\nNote: The poster image should be specified using . This is to prevent it being downloaded twice. If you're sure the image will be cached, you can still use the attribute for true progressive enhancement.\n\nFor YouTube and Vimeo players, Plyr uses progressive enhancement to enhance the default embeds. Below are some examples. The classname will make the embed responsive. You can add the , , (YouTube only) and (YouTube only) query parameters to the URL and they will be set as config options automatically. For YouTube, the should be updated to reflect the domain you're hosting the embed on, or you can opt to omit it.\n\nWe recommend progressive enhancement with the embedded players. You can elect to use an as the source element (which Plyr will progressively enhance) or a bog standard with two essential data attributes - and .\n\nNote: The classname will make the player a responsive 16:9 (most common) iframe embed. When plyr itself kicks in, your custom config option will be used.\n\nOr the non progressively enhanced method:\n\nNote: The can either be the video ID or URL for the media.\n\nMuch the same as YouTube above.\n\nOr the non progressively enhanced method:\n\nYou can use Plyr as an ES6 module as follows:\n\nAlternatively you can include the script before the closing tag and then in your JS create a new instance of Plyr as below.\n\nSee initialising for more information on advanced setups.\n\nYou can use our CDN (provided by Cloudflare) for the JavaScript. There's 2 versions; one with and one without polyfills. My recommendation would be to manage polyfills separately as part of your application but to make life easier you can use the polyfilled build.\n\nInclude the stylesheet into your .\n\nIf you want to use our CDN (provided by Cloudflare) for the default CSS, you can use the following:\n\nThe SVG sprite is loaded automatically from our CDN (provided by Cloudflare). To change this, see the options below. For reference, the CDN hosted SVG sprite can be found at .\n\nIf you don't want to create a build system to include Plyr as an npm module, you can use the pre-built files. You have a few options:\n‚Ä¢ Download the files from the CDN links above, they're already minified.\n‚Ä¢ Download the files from unpkg or similar services.\n‚Ä¢ Build the project yourself using , which installs the dependencies and spits out a build to .\n\nPlyr has partnered up with vi.ai to offer monetization options for your videos. Getting setup is easy:\n‚Ä¢ Grab your publisher ID from the code snippet\n‚Ä¢ Enable ads in the config options and enter your publisher ID\n\nAny questions regarding the ads can be sent straight to vi.ai and any issues with rendering raised through GitHub issues.\n\nIf you do not wish to use Vi, you can set your own option.\n\nIf you want to change any design tokens used for the rendering of the player, you can do so using CSS Custom Properties.\n\nHere's a list of the properties and what they are used for:\n\nYou can set them in your CSS for all players:\n\n...or for a specific class name:\n\n...or in your HTML:\n\nYou can use file included in as part of your build and change variables to suit your design. The Sass requires you to use autoprefixer (you should be already!) as all declarations use the W3C definitions.\n\nThe HTML markup uses the BEM methodology with as the block, e.g. . You can change the class hooks in the options to match any custom CSS you write. Check out the JavaScript source for more on this.\n\nThe icons used in the Plyr controls are loaded in an SVG sprite. The sprite is automatically loaded from our CDN by default. If you already have an icon build system in place, you can include the source plyr icons (see for source icons).\n\nYou can however specify your own option and Plyr will determine if the url is absolute and requires loading by AJAX/CORS due to current browser limitations or if it's a relative path, just use the path directly.\n\nIf you're using the tag on your site, you may need to use something like this: svgfixer.js\n\nMore info on SVG sprites here: http://css-tricks.com/svg-sprites-use-better-icon-fonts/ and the AJAX technique here: http://css-tricks.com/ajaxing-svg-sprite/\n\nYou'll notice the attribute on the example elements. This is because the TextTrack captions are loaded from another domain. If your TextTrack captions are also hosted on another domain, you will need to add this attribute and make sure your host has the correct headers setup. For more info on CORS checkout the MDN docs: https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS\n\nWebVTT captions are supported. To add a caption track, check the HTML example above and look for the element. Be sure to validate your caption files.\n\nYou can specify a range of arguments for the constructor to use:\n\nNote: If a , , or jQuery object are passed, the first element will be used for setup. To setup multiple players, see multiple players below.\n\nThe HTMLElement or string selector can be the target , , or wrapper for embeds.\n\nYou have two choices here. You can either use a simple array loop to map the constructor:\n\n...or use a static method where you can pass a CSS string selector, a NodeList, an Array of HTMLElement, or a JQuery object:\n\nBoth options will also return an array of instances in the order of they were in the DOM for the string selector or the source NodeList or Array.\n\nThe second argument for the constructor is the options object:\n\nOptions can be passed as an object to the constructor as above or as JSON in attribute on each of your target elements:\n\nNote the single quotes encapsulating the JSON and double quotes on the object keys. Only string values need double quotes.\n‚Ä¢ Autoplay is generally not recommended as it is seen as a negative user experience. It is also disabled in many browsers. Before raising issues, do your homework. More info can be found here:\n‚Ä¢ YouTube does not support programatically toggling the native fullscreen player via it's API. This means on iOS you have two options, neither being perfect:\n‚Ä¢ Use the fallback/faux fullscreen option which covers the whole viewport (this is the default)\n‚Ä¢ Set to and/or to - either option hides the fullscreen toggle in the UI (because of the above API issue) and means iOS will play the video in it's native player.\n\nThere are methods, setters and getters on a Plyr object.\n\nThe easiest way to access the Plyr object is to set the return value from your call to the constructor to a variable. For example:\n\nYou can also access the object through any events:\n‚Ä¢ For HTML5 players, will return a for most browsers - e.g. Chrome, Firefox, Opera, Safari and Edge according to MDN at time of writing.\n\nThis allows changing the player source and type on the fly.\n\nNote: property for YouTube and Vimeo can either be the video ID or the whole URL.\n\nYou can listen for events on the target element you setup Plyr on (see example under the table). Some events only apply to HTML5 audio and video. Using your reference to the instance, you can use the API method or . Access to the API can be obtained this way through the property. Here's an example:\n\nNote: These events also bubble up the DOM. The event target will be the container element.\n\nYouTube and Vimeo are currently supported and function much like a HTML5 video. Similar events and API methods are available for all types. However if you wish to access the API's directly. You can do so via the property of your player object - e.g. . You can then use the relevant methods from the third party APIs. More info on the respective API's here:\n\nNote: Not all API methods may work 100%. Your mileage may vary. It's better to use the Plyr API where possible.\n\nBy default, a player will bind the following keyboard shortcuts when it has focus. If you have the option to and there's only one player in the document then the shortcuts will work when any element has focus, apart from an element that requires input.\n\nIt's possible to display preview thumbnails as per the demo when you hover over the scrubber or while you are scrubbing in the main video area. This can be used for all video types but is easiest with HTML5 of course. You will need to generate the sprite or images yourself. This is possible using something like AWS transcoder to generate the frames and then combine them into a sprite image. Sprites are recommended for performance reasons - they will be much faster to download and easier to compress into a small file size making them load faster.\n\nYou can see the example VTT files here and here for how the sprites are done. The coordinates are set as the hash on the URL in the order X Offset, Y Offset, Width, Height (e.g. is offset from the left, from the top and is . If you want to include images per frame, this is also possible but will be slower, resulting in a degraded experience.\n\nFullscreen in Plyr is supported by all browsers that currently support it.\n\nPlyr supports the last 2 versions of most modern browsers.\n‚Ä¢ Mobile Safari on the iPhone forces the native player for unless the attribute is present. Volume controls are also disabled as they are handled device wide.\n‚Ä¢ Native player used (no support for or ) but the API is supported. No native fullscreen support, fallback can be used (see options).\n\nPlyr uses ES6 which isn't supported in all browsers quite yet. This means some features will need to be polyfilled to be available otherwise you'll run into issues. We've elected to not burden the ~90% of users that do support these features with extra JS and instead leave polyfilling to you to work out based on your needs. The easiest method I've found is to use polyfill.io which provides polyfills based on user agent. This is the method the demo uses.\n\nYou can use the static method to check for support. For example\n\nThe option can be used to disable certain User Agents. For example, if you don't want to use Plyr for smartphones, you could use:\n\nIf a User Agent is disabled but supports and natively, it will use the native player.\n\nSome awesome folks have made plugins for CMSs and Components for JavaScript frameworks:\n\nIf you find anything weird with Plyr, please let us know using the GitHub issues tracker.\n\nPlyr is developed by @sam_potts / sampotts.me with help from the awesome contributors\n\nPlyr costs money to run, not only my time. I donate my time for free as I enjoy building Plyr but unfortunately have to pay for domains, hosting, and more. Any help with costs is appreciated...\n\nIf you want to be added to the list, open a pull request. It'd be awesome to see how you're using Plyr\n‚Ä¢ PayPal's Accessible HTML5 Video Player (which Plyr was originally ported from)\n‚Ä¢ An awesome guide for Plyr in Japanese! by @arayutw\n‚Ä¢ Cloudflare and Fastly for providing the CDN services.\n‚Ä¢ Sentry for error logging service on the demo website.\n\nThis project exists thanks to all the people who contribute. [Contribute].\n\nBecome a financial contributor and help us sustain our community. [Contribute]\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]"
    },
    {
        "link": "https://community.kodular.io/t/how-to-use-plyr-extension-in-full-screen-video-play/120182",
        "document": "Get start value and then play video in landscape full screen video\n\nPlease show the blocks to play it in full screen mode.\n\nI don‚Äôt know how to play in full screen so I have no created any block\n\nThen for what this topic is created ?\n\nBecause I want to know how to created this block so I have created this topic\n\nIt is given in original page of Plyr video player extension\n\n but the extension is somewhat having error in changing the screen orientation so the extension developer has recommended not to change the screen orientation.\n\n Go through it [banner] PLYR Video Player Plyr is a simple and straightforward way to implement an awesome video player in your apps without worrying about state management. It has tone of features that make it stand out against other players in the market. You can freely use it in your personal & commercial projects. It is based on Plyr.io Features Supports Thumbnail Supports live streaming Supports M3U8 files Supports Multiple Captions Supports Multiple video qualities Supports Cache Smooth Video Load‚Ä¶\n\nYou can find details about the issue here: Whats the issue when you change the orientation the whole activity is created again. That means that all the layouts are again drawn on the screen. As I have mentioned earlier the player uses the height and width of its container therefore when you change the orientation the height and width at that time is not calculated and it causes the player to scale abnormally. And I can‚Äôt do anything about it. Moreover JavaScript code execution is a tricky part as well. Therefore those who have scaling is‚Ä¶\n\nI want to play video directe landscape mode I don‚Äôt want to change orientation I need only landscape mood"
    }
]