[
    {
        "link": "https://cliplab.org/~logalg/doc/The_Art_of_Prolog.pdf",
        "document": ""
    },
    {
        "link": "https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/1407/1407.pdf?dl=1",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/66996131/understanding-prolog-better",
        "document": "No, it did not. Or, well, kind of. Just type to see that it loops again. And what about which loops immediately?\n\nTo understand this, it suffices to look at a very tiny part of your program, namely this one:\n\nNote the variable which is never used in the visible part. So it cannot have any influence on termination. And note which is just handed to the first goal. So both arguments have no influence in this program. Thus this program terminates never. It might find a solution here and there, but it will never terminate when asked to find all of them.\n\nThis tiny fragment is called a failure-slice and if it does not terminate so does your entire program! That is, there is no need to read your definition of at all1.\n\nIf you want to master Prolog's execution, you need to master that notion of a failure slice. For, experienced programmers do this more or less by intuition. Thus, they do not read the entire program, they just scan for relevant parts. The nice thing here in Prolog being that there is a truly causal relationship between such a slice and the entire program.\n\nTo solve this problem, you need to change something in the part that has been highlighted by the failure slice. Here is one such possible change:\n\nBut once you have cycles in , this no longer works. Then, consider :\n\nAnother way is to use tabling. But be warned, tabling solves this one problem but will no longer work in the context of constraints (which sooner or later you will encounter).\n\n1) provided you have a pure monotonic program as you do."
    },
    {
        "link": "https://ir.cwi.nl/pub/1494/1494D.pdf",
        "document": ""
    },
    {
        "link": "https://swi-prolog.org/download/stable/doc/SWI-Prolog-8.2.1.pdf",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/31635851/intersection-of-two-lists-without-duplicate-elements-in-prolog",
        "document": "If by \"conjunction\" you mean \"intersection\", you should take a look at the implementation in the SWI-Prolog of the predicate . It contains cuts, but you can leave them out if you don't mind all the choicepoints.\n\nOf course, this doesn't work even in the library predicate, because you need sets with your current definition. (It is enough if only the first argument is a set.)\n\nYou can make sets with the predicate: if the first argument is a list with repetitions, the second argument will be a sorted list without repetitions, for example:\n\nIf you sort both arguments, you can use a from , implemented in terms of .\n\nImportantly, does not use any cuts in its implementation. It however assumes that the first and second arguments are lists of elements sorted by the \"standard order of terms\" and without duplicates, as done by .\n\nIf for some reason you don't want to use , you could maybe use an accumulator and check against it before taking an element to the intersection:\n\nOf course, the order of the elements in the result will be now reversed. If this is not what you mean by \"conjunction\", you could for example rewrite the first two clauses of as:"
    },
    {
        "link": "https://swi-prolog.org/pldoc/man?predicate=intersection/3",
        "document": "What is wrong with and friends?\n\nWhat is wrong with intersection/3 and friends?\n\nThe library(lists) contains a number of old predicates for manipulating sets represented as unordered lists, notably intersection/3, union/3, subset/2 and subtract/3. These predicates all use memberchk/2 to find equivalent elements. As a result these are not logical while unification can easily lead to dubious results. Operating on unordered sets these predicates typically have complexity |Set1|*|Set2|.\n\nWhen using these predicates\n• Make sure to respect the mode, i.e., make sure the input lists are proper lists. See is_list/1.\n• Make sure elements are sufficiently instantiated such that their equality can safely be checked using unification. See ?=/2.\n• Make sure the inputs are indeed sets, i.e., the lists contain no duplicates. In this case, a list is considered to have a duplicate if two members of the list can unify.\n\nNote that duplicates in the input may result in duplicates in the output (example by Boris)."
    },
    {
        "link": "https://stackoverflow.com/questions/6163044/operations-with-sets-in-prolog",
        "document": "Check out the section library(lists): List Manipulation in the SWI-Prolog manual. Try out the set-specific predicates listed there and check their source code using , e.g.\n\nSets are represented as lists, so to check for members use , to check if a set is empty, check if it unifies with an empty list. To check the nature of the elements of the set, e.g. to see if all are numbers, you can use :\n\nTwo sets are equivalent if they are subsets of each other."
    },
    {
        "link": "https://geeksforgeeks.org/set-operations",
        "document": "Set Operations can be defined as the operations performed on two or more sets to obtain a single set containing a combination of elements from all the sets being operated upon.\n• None which are collections of distinct objects or elements .\n• None There are three major types of operation on sets, Union (∪), Intersection (∩), and Difference (-). Other operations include Difference, Complement, Addition & Subtraction\n\nUnion of sets A and B, denoted by A ∪ B, is the set of distinct elements that belong to set A or set B, or both.\n\nThis operation can be represented as; A ∪ B = {x: x ∈ A or x ∈ B}\n\nWhere x is the elements present in both sets A and B.\n\nAbove is the Venn Diagram of A U B.\n\nFind the union of A = {2, 3, 4} and B = {3, 4, 5};\n\nThe intersection of the sets A and B, denoted by A ∩ B, is the set of elements that belong to both A and B i.e. set of the common elements in A and B.\n\nThis operation is represented as: A∩B={x: x∈ A and x∈ B}\n\nHere, x represents the elements that are common to both sets A and B.\n\nFind the intersection of A = {2, 3, 4} and B = {3, 4, 5}\n\nThe intersection of sets A and B, can also be interpreted as:\n\nWhere,\n\nn(A)= the cardinality (or number of elements) of set A,\n\nn(B)= the cardinality of set B,\n\nn(A∪B) = the cardinality of the union of sets A and B.\n\nTwo sets are said to be disjoint if their intersection is the empty set. i.e, sets have no common elements.\n\nFor Example: Let A = {1, 3, 5, 7, 9} and B = {2, 4, 6, 8}\n\nA and B are disjoint sets since both of them have no common elements.\n\nThe difference between sets is denoted by ‘A – B’, which is the set containing elements that are in A but not in B. i.e., all elements of A except the element of B.\n\nExample: If A = {1, 2, 3, 4, 5} and B = {2, 4, 6, 8}, find A – B\n\nWe can also state that the difference between set A and set B is equivalent to the intersection of set A with the complement of set B. Therefore,\n\nIf U is a universal set and X is any subset of U, then the complement of X consists of all the elements in U that are not in X.\n\nThen, the complement of A, denoted as A′, will be: A′={3,4,7,8}\n\nThe addition of sets A and B, known as Minkowski addition, results in a new set where each element is the sum of every possible pair of elements, one from set A and one from set B. In other words, the new set contains all possible sums of elements taken from the two sets. Set subtraction operates similarly but involves subtracting each element of set B from each element of set A. These operations are only meaningful when applied to numeric data types; if applied otherwise, they become symbolic with no practical significance.\n\nAdditionally, set addition is commutative, meaning the order of the sets does not affect the result. However, set subtraction is not commutative, as the order of the sets does affect the outcome.\n\nSet operations have several important properties that govern their behavior. Here are some fundamental properties of set operations:\n• None Set operations are closed under their respective operations, meaning that performing an operation on sets results in another set.\n• None For example, the union, intersection, and difference of sets always produce sets as their results.\n• None Union over Intersection: A ∪ (B ∩ C) = (A ∪ B) ∩ (A ∪ C)\n• None Intersection over Union: A ∩ (B ∪ C) = (A ∩ B) ∪ (A ∩ C)\n• None Union: A ∪ A’ = U, where U is the universal set\n\nExample 1: Find the union of two sets A = {8, 10, 14} and B = {7, 16}\n\nExample 2: Find the intersection of sets P = {a, n, x} and Q = {x, y, z}\n\nExample 3: Find the complement of set X = {4, 6, 9} where Universal set U = {1, 2, 3, 4, 6, 9}\n\nExample 4: Given two sets A = {5, 6, 9, 10} and B = {3, 6, 12} then find, A – B and B – A\n\nExample 5: Find the number of elements in set (A ∪ B) given that n(A) = 10, n(B) = 4 and n (A ∩ B) = 5.\n\nQ1. Find the union of two sets A = {2, 4, 5, 9} and B = {2, 6, 10, 12}\n\nQ2. Find the intersection of sets P = {5, 6, 7, 9} and Q = {6, 9}\n\nQ3. Find the complement of set X = {p, q, r} where Universal set U = {e, f, h, p, q, r}\n\nQ4. Given two sets A = {1, 2, 4, 7, 10} and B = {1, 2, 8, 15} then find, B – A\n\nQ5. Find the number of elements in set A given that n (A ∪ B) = 12, n(B) = 7 and n (A ∩ B) = 4.\n\nCan set operations be extended to more than two sets?\n\nCan set operations be applied to non-numeric data?\n\nHow do set operations relate to real-world problems?\n\nHow do set operations relate to logic gates?\n\nWhat is Power of a Set?"
    },
    {
        "link": "http://kti.ms.mff.cuni.cz/~bartak/prolog/sets.html",
        "document": ""
    }
]