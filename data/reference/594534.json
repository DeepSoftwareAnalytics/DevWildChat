[
    {
        "link": "https://developer.wordpress.org/reference/classes/wp_query",
        "document": "View all references View on Trac View on GitHub"
    },
    {
        "link": "https://wordpress.stackexchange.com/questions/102279/wp-query-parameters-for-date-range",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://wpmudev.com/blog/wp-query-arguments-filterable",
        "document": "The class is very powerful. It lets you create your own custom queries to run anywhere in your WordPress site – in the main content, in the sidebar or anywhere else you like.\n\nIt’s something I use a lot, either in custom template files or in areas outside the content such as the sidebar or footer. And I’ve lost count of how many times I’ve coded a custom query using .\n\nBut it is possible to avoid all that rework. If you make your query arguments filterable, you can write a function to amend the arguments and run a different query in different places in your site. This means you can write a plugin with some default arguments (or indeed with no arguments at all), and then write a function in your theme (or in another plugin) that amends those arguments.\n\nThis won’t change the loop that runs using your query arguments (although if you want you could also create another filter for that), but it does mean you can code your instance once and then tweak it when you need to.\n\nIn this post, I’ll show you how to write a plugin with a filterable instance of and then write a function in your theme’s functions file to edit the arguments.\n\nContinue reading, or jump ahead using these links:\n• Using the Filter in Your Theme\n• Filtering the Arguments in Your Theme\n\nTo follow along with this post, you’ll need access to a couple of things:\n• A development or testing installation of WordPress running your own theme or a child theme\n\nYou’ll also need an understanding of how to write plugins, how to edit the functions file, and how works.\n\nStart by creating your plugin. Create a new folder for your plugin in your wp-content/plugins folder, and then create a blank file inside that. I always create a folder in case I want to add any styles, scripts or include files to my plugin at a later date.\n\nHere’s the opening lines of my plugin:\n\nNow let’s add the function. I’ll start by adding the variable, but keep it empty:\n\nThen we add the loop:\n\nWe now have a fairly standard query and loop. This will run a query based on the arguments (which are currently empty), then output a heading followed by a list of the items fetched with links to them. It could be used to output a list of posts using categories, taxonomies, post types or anything else as the arguments.\n\nRight now though, it won’t output anything, as those arguments are empty. Let’s add some arguments but wrap them in a filter.\n\nTake the section of your code and edit it to add some arguments.\n\nI’m just going to add an argument for , to limit the number of posts output. I won’t add any other arguments: this way the most recent five posts will be output. If you’d like, you can add some different arguments.\n\nSo far, so straightforward. Now let’s enclose those arguments in a filter. Here’s the code:\n\nThis wraps our single argument in a filter called , which you can then hook into from another plugin, or from your theme, to amend those arguments.\n\nWhile we’re at it, let’s add a filter to that header inside the loop, as it’s a bit generic.\n\nEdit your loop so it includes a filter:\n\nAnd that’s it. Unless you decide to add some more filters to the loop, your plugin is ready.\n\nUsing the Filter in Your Theme\n\nThe next step is to write a couple of functions in your theme.\n\nThe first will call the action hook and output it in your page. You can call this in one of a number of ways.\n\nThe first is to attach it to an action hook in your theme, by using the function. So if your theme had a hook called , you would output the query in the sidebar like this:\n\nThe second is to code it directly into a theme template file. I prefer to work with hooks where possible, as they give me more flexibility, but if your theme doesn’t have any hooks this might be the best approach. If you’re working with a third party theme, don’t edit the theme files directly – instead, create a copy of it in a child theme.\n\nThen in your theme template file, add a call to the function:\n\nThis simply runs the function in the spot in your template file where you place it.\n\nThe third option is to create a new template file, such as a page template file, which will run this query instead of the default query. In this case you’d make a copy of page.php from your theme or your parent theme, and replace the standard loop with the call to the function, as above.\n\nSo that’s how you add the function to your theme. But how about filtering those arguments?\n\nFiltering the Arguments in Your Theme\n\nThe final step is to write a function in your theme’s functions file to filter the query arguments. You can also add a second function to filter the heading, as well as any functions to make use of any other filters you might choose to add to the loop in your plugin.\n\nNote that you could do this using a plugin if you wanted, but as you’ve already coded the function into your theme, I think it’s neater to add this code to your functions file.\n\nLet’s imagine you’ve registered a post type called doohickey, and you want to output that instead. But instead of outputting six posts, you want to show four.\n\nIn your functions file, you’d need this code:\n\nThis replaces the contents of the original filter with the new contents in the function. Note that if you want to retain any of the arguments in the original filter, you’ll have to add them to this function, as the new code overrides the old code, and doesn’t add to it.\n\nNext let’s add a function to edit the heading text:\n\nThat will output the content of the new function instead of , which was inside the filter.\n\nYou can amend both of these functions as you see fit.\n\nMaking WP_Query Filterable Makes Your Code More Efficient and Saves Time\n\nIf you’re going to be using the class in lots of sites and want to save yourself the bother of coding in full every time, this can save you some work. In each site where you use , you only need to add the call for the function, and the function to attach to the filter hook.\n\nIf you wanted to make your plugin even more flexible, you could use an include file for the loop instead of coding it directly into the plugin, and then enclose the call in a filter. This way, you could call a different include file if you wanted to, and output a different version of the loop."
    },
    {
        "link": "https://codeable.io/blog/wp_query-object-wordpress",
        "document": "Imagine you’re running a bustling online magazine, or perhaps an eCommerce store, and your users are engaging with your content like never before. However, as your site’s content library grows, finding specific posts becomes increasingly challenging. The default WordPress queries might no longer cut it.\n\nIf you’ve ever wondered how to wield the true potential of your WordPress website and harness the full power of post queries, then you’ve come to the right place. Enter WordPress query object – a feature-packed class that empowers you to craft custom queries and retrieve precisely the content you need.\n\nIn this technical article, we’ll dive into the WP_Query object, the powerhouse behind custom post queries in WordPress. Whether you are a seasoned developer seeking to fine-tune your post retrievals or a curious beginner wanting to enhance your website’s or WooCommerce store’s performance, understanding the intricacies of WP_Query is essential.\n\nWe’ll also unravel the mechanics of WP_Query, exploring its myriad of parameters and possibilities. By the end of this guide, you’ll be proficient in constructing intricate and targeted post queries that meet your exact requirements!\n\nWhat is the WP_Query object?\n\nThe WP_Query object, also known as the WordPress query class, acts as a robust and flexible means of retrieving content from the WordPress database. It allows developers to formulate specific queries to fetch posts, pages, custom post types, attachments, and other content entities, empowering them to tailor content presentations according to precise requirements.\n\nThis ability is particularly useful for building custom templates, creating custom loops, and implementing advanced features.\n\nAt its core, the WordPress query class is responsible for parsing and processing the query parameters provided by developers, executing the database query, and then returning the matching results. These results are typically arrays of post objects that contain the relevant information about each post or page that meets the specified criteria.\n\nMetadata plays a pivotal role in enhancing the functionality, accessibility, and searchability of a website, contributing significantly to its overall success. It allows the efficient use of the WP_Query object, enhancing the flexibility and precision of the queries performed on your website’s database.\n\nIn simple terms, metadata refers to the information about your content. It is the hidden treasure that provides context, structure, and organization to your web pages. Although largely unseen by site visitors, metadata significantly impacts search engines, social media platforms, and other digital services that help users discover and interact with your content more effectively.\n\nApart from the standard metadata types (title metadata, description metadata, etc.), WordPress also allows you to add custom metadata. Custom fields enable you to store additional information specific to your content, enhancing its organization and presentation.\n\nFor more advanced users, WordPress permits manual editing of metadata directly within the HTML code or through custom fields. This method grants you greater control and flexibility, especially for complex website structures.\n\nBy tapping into the power of metadata, you can refine your queries, enhance content organization, facilitate complex relationships, optimize performance, and provide personalized user experiences. Embracing metadata in your WP_Query operations empowers you to make the most of WordPress’s capabilities and deliver a more tailored and compelling website for your audience.\n\nCodeable’s WordPress experts can help you with this task and other WordPress optimization endeavors.\n\nPost parameters are key-value pairs that allow you to specify certain attributes or conditions for querying posts or custom post types. These parameters are integral to creating custom queries and fetching content based on your desired rules.\n• post_type: The post_type parameter is fundamental as it allows you to filter posts based on the type of content you want to display. For instance, if you have a custom post type for Products or Events, you can use this parameter to retrieve only those specific types.\n• post_status: This parameter enables you to fetch posts based on their status, such as published, draft, private, or pending review. This is useful for managing the visibility and accessibility of your content.\n• Orderby and order: The orderby parameter determines how posts should be sorted, and order sets the sorting direction, either in ascending or descending order. You can sort posts based on various criteria like date, title, custom fields, or even random.\n• Custom fields: The meta_key and meta_value parameters are valuable when you want to filter posts based on custom field values. It allows you to query posts that match specific criteria stored in custom fields, offering greater flexibility in content filtering.\n• date_query: This parameter allows you to filter posts based on date-related conditions, like displaying posts published within a certain time frame or excluding posts from the past.\n\nUsing post parameters and WP_Query to filter your post/post_type results\n\nHere is a simple example of filtering posts by category by adjusting the post/post_type results parameters.\n\nLet’s say you have a blog with multiple categories, and you want to display posts from a specific category. By utilizing post parameters, you can easily achieve this. For this tutorial, we’ll suppose that you want to display posts from the Technology category.\n\nIn this example, we set the category_name parameter to technology to filter posts from the Technology category. The post_type parameter is set to ‘post’ to ensure we only get regular posts, excluding any custom post types. We also specified posts_per_page to limit the number of posts displayed to 5.\n\nThe equivalent SQL query for this WP_Query would be:\n\nUsing custom field parameters and the WP query class to filter your post/post_type results by post meta key/values\n\nLet’s look at some simple WP_Query examples of how you could filter your posts or post types by their parameters.\n\nSuppose you have a custom post type named Product, and you want to retrieve products that have a specific custom field value, such as featured being set to yes.\n\nIn this use case, we set post_type to product to retrieve posts from the custom post type Product. The meta_key and meta_value parameters help filter posts based on the custom field featured with the value yes. The posts_per_page parameter limits the number of displayed products to 10.\n\nThis is what happens on the SQL level:\n\nWP_Query allows you to combine multiple parameters to create complex filters. Let’s say you want to display posts from a specific category but exclude those marked as outdated.\n\nIn this example, we use the meta_query parameter to filter out posts with a custom field status set to outdated. The compare parameter is set to NOT LIKE to exclude such posts from the result.\n\nThe SQL query for this example would look like:\n\nWhy you should get to know WP_Query better\n\nWhen developing a WordPress website, you may not always encounter the need to use or worry about the WP_Query object. In most cases, a simple check using if (have_posts()) along with the loop suffices for retrieving and listing posts or pages.\n\nHowever, as your project requirements become more complex, such as building a theme, a child theme, or an advanced plugin with custom post types, you will likely need to utilize the power of WP_Query.\n\nUnderstanding how to use WP_Query can bring significant benefits to your development process:\n• It will save you valuable time and effort, leading to a more efficient and robust product.\n• It will ensure that your code adheres to WordPress standards and best practices.\n• It will facilitate future collaboration with other WordPress developers. If you ever need to hire additional team members to work on your project, they can quickly pick up and update your queries.\n\nConsider the example of dealing with metadata. Without WP_Query, you might have to construct complex SQL queries manually, which can be error-prone and time-consuming. Using WP_Query simplifies the process and makes your code more concise and readable.\n\nLet’s compare the two approaches. In the non-WP_Query version:\n\nIn contrast, using WP_Query, the code becomes more elegant:\n\nAs you can see, WP_Query offers a more concise and user-friendly way to achieve the same outcome. Mastering this approach will undoubtedly streamline your development process and positively impact the quality of your WordPress projects.\n\nNeed help with your next WordPress project? Hire Jonathan Bossenger and start working with him immediately!\n\nTips, best practices, and common pitfalls in using WP_Query Object\n\nBy understanding its purpose, following best practices, and being cautious about common pitfalls, you can harness its power effectively and enhance your website’s functionality and performance.\n\nWhen constructing a WP_Query, carefully select the arguments that align with your specific requirements. The post_type argument, for example, allows you to filter by post types, such as posts, pages, or custom post types.\n\nYou can also use category_name and tag to retrieve posts based on their assigned categories or tags. Using the right combination of arguments ensures precise and efficient data retrieval.\n\nIn many cases, you won’t need to fetch all available posts, especially if you’re displaying them on a frontend page.\n\nUtilize the posts_per_page parameter to limit the number of posts retrieved. This can significantly enhance the performance of your queries and reduce server load, particularly when dealing with larger websites.\n\nWhile WP_Query is powerful, inefficient use can impact your website’s performance. Frequent and resource-intensive queries can lead to slow page loading times and even server crashes during high traffic.\n\nOptimize your queries by selecting only the necessary fields using the fields parameter, and consider using object caching plugins to reduce database hits.\n\nIf you create custom WP_Query instances within the main loop or nested loops, ensure to reset the query using the wp_reset_query() function after each loop.\n\nFailing to reset the query can cause unexpected behavior and may lead to showing incorrect or duplicated content.\n\nWhen modifying the main query using pre_get_posts action, exercise caution. While it’s a powerful way to alter the main loop, doing so incorrectly can break other parts of your website, such as menus and widgets.\n\nAlways check the is_main_query() condition to target only the main query and avoid unintentional consequences.\n\nBefore deploying code changes involving WP_Query, thoroughly test and debug your code.\n\nUse debugging plugins or testing tools to examine the queries executed and verify if they produce the expected results. Additionally, enable debugging in WordPress to catch any potential errors and warnings.\n\nIncorporate WordPress query class in your website effectively with Codeable\n\nThe WP_Query object empowers developers with a feature-packed class to craft custom queries, filter content precisely, and optimize website performance. By understanding the intricacies of WP_Query, you can streamline your development process, adhere to best practices, and avoid common pitfalls.\n\nHowever, as projects grow in complexity, seeking expert assistance becomes crucial. Codeable, a leading platform for hiring WordPress professionals, offers an optimal solution for any intricate development needs.\n\nCodeable connects website owners or businesses with experienced WordPress developers who can help with various WordPress-related tasks, including using advanced post queries with the WP_Query object. Its pool of seasoned developers can help you master WP_Query and unlock the full potential of your WordPress site, ensuring a robust and efficient product that meets your exact requirements. \n\n\n\nSo, whether you’re running a bustling online store or any WordPress-based venture, submit your task today and partner with Codeable to bring your vision to life with the utmost precision and professionalism!"
    },
    {
        "link": "https://advancedcustomfields.com/blog/wp-query",
        "document": "\n• is a core WordPress class that retrieves and displays posts based on specific criteria, enabling dynamic, customized content without raw SQL queries.\n• By defining parameters, executing queries, and looping through results, developers can filter content by categories, dates, and custom fields, tailoring displays for themes and plugins.\n• Combine with tools like Advanced Custom Fields (ACF®) for complex meta queries, taxonomy filtering, and optimized performance, making scalable, data-rich WordPress sites easy to build and maintain.\n\nFor WordPress developers, one of the most persistent challenges is retrieving and displaying content exactly the way they envision. Thankfully, exists to address these challenges, offering granular control over content retrieval, from basic posts to highly customized data sets.\n\nThis guide will break down from its core concepts to its most advanced implementations. Get ready to learn how to build efficient queries tailored to your needs, use custom fields to create complex content relationships, and optimize performance for speed and scalability.\n\nWith practical, real-world examples, you’ll gain the tools to solve common problems and unlock ’s full potential. Whether you’re new to WordPress development or aiming to refine your skills, this deep dive will help you master the art of content retrieval and take your projects to the next level.\n\nis a built-in WordPress feature designed to help you fetch and display posts based on specific criteria. Instead of writing complex database queries, you can use it to safely and easily retrieve content. Its main job is to enable dynamic and customized content displays on your site.\n\nYou can use it to filter posts by category, tag, date, or even custom fields, making it essential for creating flexible, content-rich websites.\n\nprovides a structured way to retrieve and display specific content from the WordPress database. Here’s how to use it:\n• Set parameters by defining the content to retrieve, such as posts from a specific category, author, or date range. These filters control what data is pulled from the database.\n• Execute the query as takes the defined parameters and searches the WordPress database for posts that meet the specified conditions.\n• Retrieve results from the database, gather the posts matching your criteria, and organize them for use in your theme or plugin.\n• Loop through results to display each post’s content, title, metadata, or custom fields, depending on your site’s requirements.\n• Reset data after running the custom query to ensure WordPress’s global query and other site functionality remain unaffected.\n\nThis class runs behind the scenes for standard pages, archives, and search results, but its flexibility allows developers to tailor queries to fit specific content and organizational needs without altering the underlying database structure.\n\nHow to use WP_Query\n\nThis section breaks down how to work with , covering everything from simple queries to advanced techniques like handling custom fields.\n\n💡 You can build custom fields hassle-free using the Advanced Custom Fields (ACF®) plugin.\n\nMastering the basics: How to query and display\n\nTo get started with , follow these steps for querying, retrieving, and displaying content:\n• Start by specifying what content you need, such as posts, pages, or custom post types. For example, to retrieve the latest five posts, set your parameters like this:\n\nHere, specifies the type of content to query – means it will retrieve standard blog posts. You can change this to other types, such as ‘page’ for static pages or custom post types (like ‘products’, ‘events’, etc.) if they exist in your WordPress setup.\n\nMeanwhile, specifies the number of posts to retrieve in the query – indicates the most five recent posts (based on publish date).\n• Pass your parameters to a new instance of to execute the query:\n• Use a loop to process and display each post. For example:\n• After the loop, reset WordPress’s global post data to prevent conflicts:\n\nA meta query in allows you to filter posts based on metadata conditions, such as value comparisons or specific ranges. This opens up powerful customization possibilities, including retrieving posts by custom fields or publication dates.\n\nHere’s an example showing how to filter posts by date using :\n• To filter posts by date, include a array within your . This allows you to specify conditions like retrieving posts published after, before, or between specific dates. For example:\n• Pass these parameters into a new instance to execute the query:\n• Use a loop to process and display each post:\n\nACF is a powerful tool for managing custom metadata in WordPress, designed to work smoothly with . It stores field values as metadata, providing a structured and efficient way to handle custom data. This eliminates the hassle of manually managing complex conditions, making it easier to retrieve and display specific content.\n\nACF simplifies data organization and scales well as projects grow, enabling developers to build dynamic, data-rich sites without sacrificing maintainability. Combined with , ACF transforms custom field management from a tedious task into a streamlined, scalable solution for advanced WordPress development.\n\nLet’s say you’re building a site to showcase cars and want to query them based on specific attributes. Start by creating a custom field group in ACF called Cars with fields like make, year, and price. Assign this field group to your custom post type, Car, and add data to several posts.\n\nWith everything in place, we can query the cars:\n• Use a array to filter posts based on specific field values, like displaying Toyotas made in 2015 or later that cost less than $20,000:\n• Loop through the results to display the filtered cars:\n\nIf you’ve registered custom taxonomies with ACF, you can use to filter posts based on taxonomy terms.\n\nHere’s how to set up a query for a custom taxonomy like :\n• Define the parameter in the array to filter posts by the taxonomy, specifically for the term “toyota”:\n• Use the defined arguments to create a new instance:\n• Use a loop to process and display the filtered posts:\n• Once the loop is complete, reset global post data to avoid conflicts with the main query:\n\nOptimizing WP_Query for better performance: 8 best practices\n\nis powerful, but without optimization, it can quietly drag down your site’s speed and scalability. Here are eight ways to keep your site both dynamic and lightning-fast while querying:\n• Use ACF for better data organization to streamline metadata storage and retrieval. The plugin allows you to manage custom fields efficiently, reducing the complexity of operations and making data relationships easier to maintain and query.\n• Simplify and by limiting conditions and avoiding unnecessary nested queries. This reduces processing time and makes your code easier to manage and debug.\n• Index frequently queried fields to speed up database operations. Adding indexes to metadata and taxonomy term fields can significantly reduce query times for high-traffic sites.\n• Limit results with to retrieve only the number of posts you need. This minimizes database load and reduces memory usage, improving overall site performance.\n• Use for non-paginated queries to skip calculating total rows. This speeds up queries when pagination isn’t necessary, especially in custom loops for homepage or sidebar widgets.\n• Use transient caching to store query results temporarily. For data that doesn’t change often, transients reduce the number of repeated database queries, improving page load times.\n• Retrieve specific fields with to fetch only the post IDs rather than full post objects. This drastically reduces the amount of data being processed and speeds up your query.\n• Profile queries with tools like Query Monitor or New Relic to identify and optimize slow or inefficient queries. Regular profiling ensures that your database interactions remain fast and scalable as your site grows.\n\nTake your WordPress queries to the max with ACF\n\nallows WordPress to retrieve and display content dynamically and lets developers filter and fetch posts, pages, and custom content types based on specific criteria like categories, metadata, or custom fields.\n\nACF further enhances by simplifying the management and retrieval of custom metadata. It streamlines operations, improves data consistency, and reduces query complexity, allowing for precise content control and efficient, scalable WordPress solutions. ACF makes building dynamic, data-driven sites faster and more maintainable.\n\nWhen you use alongside ACF, you have everything you need to create efficient, scalable WordPress solutions tailored to your needs.\n\nGet started with the free ACF plugin and take charge of your WordPress content."
    },
    {
        "link": "https://developer.wordpress.org/reference/classes/wp_query",
        "document": "View all references View on Trac View on GitHub"
    },
    {
        "link": "https://wordpress.stackexchange.com/questions/102279/wp-query-parameters-for-date-range",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://rudrastyh.com/wordpress/date-range-filter.html",
        "document": "How to Filter Posts by Date Range\n\nNot so long ago I was adding a posts filter by date range into my site’s admin dashboard and I thought why not share the whole process of doing it here, on my blog?\n\nIt is useful to mention that I will show you how to add a filter by date range not only for regular WordPress posts and pages but also for any custom post type and even attachments (media library).\n\nIn the first part of the tutorial, we will dive into the examples of using the parameter of the class. The second part of the tutorial will be more practical because we’re going to create an actual date range filter for both posts and the media library page:\n\nIn case you’re creating your custom filter functionality or something and you were just wondering how to make it work under the hood, let’s start with the basics first – let’s talk about the parameter of the class.\n\nThis parameter appeared a long time ago, actually, in WordPress 3.7 and it is as convenient and sick as the meta_query parameter.\n\nLet’s jump straight to the examples then!\n\nExample 1. Between days of the week\n\nWe can easily get posts or attachments that were published between specific days of the week using the array key.\n\nFor example, we can get all posts published from Monday to Thursday using this snippet:\n\nIf you decide to get posts published only on weekends (Saturday and Sunday), it is not necessary to provide the parameter with the value, because (Saturday) and (Sunday) are in a consecutive order anyway.\n\nSince we don’t have so many days in a week, nothing stops you from providing all the day numbers like this: and to completely skip the parameter.\n\nBy the way, you can use the instead of the if you prefer to start the week on Monday.\n\nThe same way we created complex conditions for the we can do it for the as well – using multiple sub-arrays and the parameter.\n\nFor example, let’s try to filter our posts both by the days of the week and by a timeframe period of the day.\n\nThe parameter has value by default, you skip it in the above example and add it only if you need to use value.\n\nExample 3. Get posts between two dates\n\nOk, now we’re getting close to the actual goal of this article – to filter WordPress posts by a date range.\n\nBoth and parameters support different date formats, for example, below, when creating a filter by date range in the WordPress admin, I am using the format.\n\nExample 4. Filter posts across all sites in WordPress Multisite by a date range\n\nIn case you’re using my plugin which allows you to get posts from all blogs across your WordPress multisite network with the help of the class (similar to ), then I have good news for you, my plugin also supports the parameter.\n\nBasically, you can get posts between two dates with the following code snippet:\n\nFiltering Posts by Date Range in the Admin Dashboard\n\nIt is time to create a nice date range filter with a date picker in the WordPress admin dashboard:\n\nIn my opinion, the only challenge here, is to design a nice and slick calendar with CSS, because the standard jQuery UI CSS is not what we need. Luckily, I have already created it for you, you can get it from this article.\n\nAlso, don’t forget to include the script. By the way, you don’t need to do that if you’re using WooCommerce.\n\nFirst things first, let’s add fields to the filter form. We can do it with the help of the action hook:\n\nIf you wish to remove the standard filter by month you can use this code line:\n\nFor this jQuery code, I would recommend to create a separate file and include it with the dependency.\n\nBy the way, you can filter not only by the publish date but also by the last update date if you change the value of the parameter to . It also supports and values."
    },
    {
        "link": "https://github.com/WP-API/WP-API/issues/389",
        "document": "You can’t perform that action at this time."
    },
    {
        "link": "https://stackoverflow.com/questions/56577812/wordpress-wp-query-my-date-query-doesnt-work-for-filtering-upcoming-events",
        "document": "This code doesn't return any posts. Is there something wrong with the date? I was thinking it might use the creation date and not the publishing date.\n\nI tried using another date at the 'after' query. It works if I use first of june for example."
    }
]