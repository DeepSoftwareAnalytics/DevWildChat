[
    {
        "link": "https://mathworks.com/help/matlab/ref/double.linspace.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help/signal/ug/create-uniform-and-nonuniform-time-vectors.html",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/matlab/comments/hsbc3b/creating_a_time_vector_with_linspace",
        "document": "I am trying to use linspace to create a time vector that is equal to length of the number of samples in an array. For example, I have a test with 30000 samples and each was taken 5ms in between As a result, first samples starts at 0, second at 5, third at 10th, and so on. I am trying to use linspace to accomplish this but running into problems. Here is what I am trying to do *test is the array with all the samples*\n\nI am trying to create a vector that starts at zero and increments by 5 for each sample. All this does is create 5 times that are crazily spaced. I realize that the last variable actually just generate 5 number of points but thats not what I am trying to do as I want the step size to be 5. Any ideas? Thanks so much in advance!"
    },
    {
        "link": "https://mathworks.com/help/matlab/matlab_prog/generate-sequence-of-dates-and-time.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/matlabcentral/answers/1815865-want-to-create-a-time-vector",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help/control/ug/transfer-functions.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help/control/ref/tf.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/discovery/transfer-function.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/matlabcentral/answers/268460-transfer-function-tf",
        "document": ""
    },
    {
        "link": "https://mathworks.com/matlabcentral/fileexchange/54533-lab-3-digital-signal-processing-transfer-functions?s_tid=FX_rc3_behav",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help/ident/ref/dynamicsystem.lsim.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help/control/ref/dynamicsystem.lsim.html",
        "document": ""
    },
    {
        "link": "https://de.mathworks.com/help/ident/ref/dynamicsystem.lsim.html",
        "document": ""
    },
    {
        "link": "https://mathworks.com/help//releases/R2021a/control/ref/lti.lsim.html",
        "document": "plots the simulated time response of the dynamic system model to the input history ( , ). The vector specifies the time samples for the simulation. For single-input systems, the input signal is a vector of the same length as . For multi-input systems, is an array with as many rows as there are time samples ( ) and as many columns as there are inputs to . further specifies a vector of initial state values, when is a state-space model. specifies how interpolates the input values between samples, when is a continuous-time model. simulates the responses of several dynamic system models to the same input history and plots these responses on a single figure. All systems must have the same number of inputs and outputs. You can also use the and input arguments when computing the responses of multiple models. specifies a color, line style, and marker for each system in the plot. When you need additional plot customization options, use instead. returns the system response , sampled at the same times as the input. For single-output systems, is a vector of the same length as . For multi-output systems, is an array having as many rows as there are time samples ( ) and as many columns as there are outputs in . This syntax does not generate a plot. further specifies a vector of initial state values, when is a state-space model. specifies how interpolates the input values between samples, when is a continuous-time model. returns the state trajectories , when is a state-space model. is an array with as many rows as there are time samples and as many columns as there are states in . This syntax also returns the time samples used for the simulation in . opens the Linear Simulation Tool. For more information about using this tool for linear analysis, see Working with the Linear Simulation Tool.\n\nConsider the following transfer function. To compute the response of this system to an arbitrary input signal, provide with a vector of the times at which you want to compute the response and a vector containing the corresponding signal values. For instance, plot the system response to a ramping step signal that starts at 0 at time , ramps from 0 at to 1 at , and then holds steady at 1. Define and compute the values of . Use without an output argument to plot the system response to the signal. The plot shows the applied input in gray and the system response in blue. Use with an output argument to obtain the simulated response data. The vector contains the simulated response at the corresponding times in . Use to create periodic input signals such as sine waves and square waves for use with . Simulate the response to a square wave of the following SISO state-space model. For this example, create a square wave with a period of 10 s and a duration of 20 s. returns the vector of time steps and the vector containing the corresponding values of the input signal. (If you do not specify a sample time for , then generates 64 samples per period.) Use these with and plot the system response. The plot shows the applied square wave in gray and the system response in blue. Call with an output argument to obtain the response values at each point in . When you simulate the response of a discrete-time system, the time vector must be of the form , where is the sample time of the model. Simulate the response of the following discrete-time transfer function to a ramp step input. This transfer function has a sample time of 0.05 s. Use the same sample time to generate the time vector and a ramped step signal . To simulate the response of a discrete-time system to a periodic input signal, use the same sample time with to generate the input. For instance, simulate the system response to a sine wave with period of 1 s and a duration of 4 s. Plot Response of Multiple Systems to Same Input\n\n allows you to plot the simulated responses of multiple dynamic systems on the same axis. For instance, compare the closed-loop response of a system with a PI controller and a PID controller. Create a transfer function of the system and tune the controllers. Plot the responses of both systems to a square wave with a period of 4 s. By default, chooses distinct colors for each system that you plot. You can specify colors and line styles using the input argument. The first \" specifies a dashed red line for the response with the PI controller. The second \" specifies a solid blue line for the response with the PID controller. The legend reflects the specified colors and line styles. For more plot customization options, use . In a MIMO system, at each time step , the input is a vector whose length is the number of inputs. To use , you specify as a matrix with dimensions -by- , where is the number of system inputs and is the length of . In other words, each column of is the input signal applied to the corresponding system input. For instance, to simulate a system with four inputs for 201 time steps, provide as a matrix of four columns and 201 rows, where each row is the vector of input values at the th time step; each column is the signal applied at the th input. Similarly, the output computed by is a matrix whose columns represent the signal at each system output. When you use to plot the simulated response, provides separate axes for each output, representing the system response in each output channel to the input applied at all inputs. Consider the two-input, three-output state-space model with the following state-space matrices. Plot the response of to a square wave of period 4 s, applied to the first input and a pulse applied to the second input every 3 s. To do so, create column vectors representing the square wave and the pulsed signal using . Then stack the columns into an input matrix. To ensure the two signals have the same number of samples, specify the same end time and sample time. Each axis shows the response of one of the three system outputs to the signals applied at all inputs. Each plot also shows all input signals in gray. By default, simulates the model assuming all states are zero at the start of the simulation. When simulating the response of a state-space model, use the optional input argument to specify nonzero initial state values. Consider the following two-state SISO state-space model. Suppose that you want to allow the system to evolve from a known set of initial states with no input for 2 s, and then apply a unit step change. Specify the vector of initial state values, and create the input vector. The first half of the plot shows the free evolution of the system from the initial state values . At there is a step change to the input, and the plot shows the system response to this new signal beginning from the state values at that time. When you use with output arguments, it returns the simulated response data in an array. For a SISO system, the response data is returned as a column vector of the same length as . For instance, extract the response of a SISO system to a square wave. Create the square wave using . The vector contains the simulated response at each time step in . ( returns the time vector as a convenience.) For a MIMO system, the response data is returned in an array of dimensions N-by-Ny-by-Nu, where Ny and Nu are the number of outputs and inputs of the dynamic system. For instance, consider the following state-space model, representing a three-state system with two inputs and three outputs. Extract the responses of the three output channels to the square wave applied at both inputs. is a column vector containing response at the jth output to the square wave applied to both inputs. That is, is a vector of three values, the output values at the ith time step. Because is a state-space model, you can extract the time evolution of the state values in response to the input signal. Each row of contains the state values at the corresponding time in . In other words, is the state vector at the ith time step. Plot the state values. The example Plot Response of Multiple Systems to Same Input shows how to plot responses of several individual systems on a single axis. When you have multiple dynamic systems arranged in a model array, plots all their responses at once. Create a model array. For this example, use a one-dimensional array of second-order transfer functions having different natural frequencies. First, preallocate memory for the model array. The following command creates a 1-by-5 row of zero-gain SISO transfer functions. The first two dimensions represent the model outputs and inputs. The remaining dimensions are the array dimensions. (For more information about model arrays and how to create them, see Model Arrays.) Plot the responses of all models in the array to a square wave input. uses the same line style for the responses of all entries in the array. One way to distinguish among entries is to use the property of dynamic system models to associate each entry in the array with the corresponding value. Now, when you plot the responses in a MATLAB figure window, you can click a trace to see which frequency value it corresponds to. is an object that stores the one-input two-output estimation data with a sample time of 0.1 s. is the estimated model and is the estimated initial states. Simulate the response of using the same input data as the one used for estimation and the initial states returned by the estimation command. Here, is the system response, is the time vector used for simulation, and is the state trajectory. Compare the simulated response to the measured response for both outputs. The choice of sample time can drastically affect simulation results. To illustrate why, consider the following second-order model. Simulate the response of this model to a square wave with period 1 s, using a sample time of 0.1 s. simulates the model using the specified input signal, but it issues a warning that the input signal is undersampled. recommends a sample time that generates at least 64 samples per period of the input . To see why this recommendation matters, simulate again using a sample time smaller than the recommended maximum. This response exhibits strong oscillatory behavior that is hidden in the undersampled version.\n\nDynamic system, specified as a SISO or MIMO dynamic system model or array of dynamic system models. Dynamic systems whose responses you can simulate include:\n• None Continuous-time or discrete-time numeric LTI models, such as , , or models.\n• None Generalized or uncertain LTI models such as or models. (Using uncertain models requires Robust Control Toolbox™ software.)\n• None For tunable control design blocks, the function evaluates the model at its current value for both plotting and returning response data.\n• None For uncertain control design blocks, the function plots the nominal value and random samples of the model. When you use output arguments, the function returns response data for the nominal model only.\n• None Sparse state-space models such as and models.\n• None Identified LTI models, such as , , or models. For identified models, you can also use the (System Identification Toolbox) command, which can compute the standard deviation of the simulated response and state trajectories. can also simulate all types of models with nonzero initial conditions, and can simulate nonlinear identified models.(Using identified models requires System Identification Toolbox™ software.) does not support frequency-response data models such as , , or models. If is an array of models, the function plots the responses of all models in the array on the same axes. See Response of Systems in Model Array. Input signal for simulation, specified as a vector for single-input systems, and an array for multi-input systems.\n• None For single-input systems, is a vector of the same length as .\n• None For multi-input systems, is an array with as many rows as there are time samples ( ) and as many columns as there are inputs to . In other words, each row represents the values applied at the inputs of at time . Each column is the signal applied to the th input of . Time samples at which to compute the response, specified as a vector of the form . The command interprets as having the units specified in the property of the model . For continuous-time , the command uses the time step to discretize the model. If is too large relative to the system dynamics (undersampling), issues a warning recommending a faster sampling time. For further discussion of the impact of sampling time on simulation, see Effect of Sample Time on Simulation. For discrete-time , the time step must equal the sample time of . Alternatively, you can omit or set it to . In that case, sets to a vector of the same length as that begins at 0 with a time step equal to . Initial state values for simulating a state-space model, specified as a vector having one entry for each state in . If you omit this argument, then sets all states to zero at . Discretization method for sampling continuous-time models, specified as one of the following. When is a continuous-time model, computes the time response by discretizing the model using a sample time equal to the time step of . If you do not specify a discretization method, then selects the method automatically based on the smoothness of the signal . For more information about these two discretization methods, see Continuous-Discrete Conversion Methods. Line style, marker, and color, specified as a string or vector of one, two, or three characters. The characters can appear in any order. You do not need to specify all three characteristics (line style, marker, and color). For example, if you omit the line style and specify the marker, then the plot shows only the marker and no line. For more information about configuring this argument, see the input argument of the function.\n\nfilters the input based on the recursion associated with this transfer function: For discrete-time models, filters the input through a series of first-order or second-order sections. This approach avoids forming the numerator and denominator polynomials, which can cause numerical instability for higher-order models. For continuous-time systems, first discretizes the system using , and then propagates the resulting discrete-time state-space equations. Unless you specify otherwise with the input argument, uses the first-order-hold discretization method when the input signal is smooth, and zero-order hold when the input signal is discontinuous, such as for pulses or square waves. The sample time for discretization is the spacing between the time samples you supply in ."
    },
    {
        "link": "https://es.mathworks.com/help/control/ref/dynamicsystem.lsim.html",
        "document": ""
    }
]