[
    {
        "link": "https://api.jquery.com/jQuery.ajax",
        "document": "In jQuery 1.5 , the withCredentials property was not propagated to the native XHR and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.\n\nAn object of fieldName-fieldValue pairs to set on the native XHR object. For example, you can use it to set withCredentials to true for cross-domain requests if needed.\n\nCallback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.\n\nA username to be used with XMLHttpRequest in response to an HTTP access authentication request.\n\nA string containing the URL to which the request is sent.\n\nAn alias for method . You should use type if you're using versions of jQuery prior to 1.9.0.\n\nSet this toif you wish to use the traditional style of param serialization\n\nSet a timeout (in milliseconds) for the request. A value of 0 means there will be no timeout. This will override any global timeout set with $.ajaxSetup() . The timeout period starts at the point thecall is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent.the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception.script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.\n\nA function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to theparameter or thecallback function, if specified; a string describing the status; and the(in jQuery 1.4.x, XMLHttpRequest) object., the success setting can accept an array of functions. Each function will be called in turn. This is an Ajax Event\n\nIf the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.\n\nAn object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:\n\nOnly applies when the \"script\" transport is used. Sets the charset attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script. Alternatively, the charset attribute can be specified in scriptAttrs instead, which will also ensure the use of the \"script\" transport.\n\nDefines an object with additional attributes to be used in a \"script\" or \"jsonp\" request. The key represents the name of the attribute and the value is the attribute's value. If this object is provided it will force the use of a script-tag transport. For example, this can be used to set, orattributes to satisfy Content Security Policy requirements.\n\nBy default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false .\n\nA password to be used with XMLHttpRequest in response to an HTTP access authentication request.\n\nSpecify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. As of jQuery 1.5 , you can also use a function for this setting, in which case the value of jsonpCallback is set to the return value of that function.\n\nOverride the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So {jsonp:'onJSONPLoad'} would result in 'onJSONPLoad=?' passed to the server. As of jQuery 1.5 , setting the jsonp option to false prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the jsonpCallback setting. For example, { jsonp: false, jsonpCallback: \"callbackName\" } . If you don't trust the target of your Ajax requests, consider setting the jsonp property to false for security reasons.\n\nAllow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local:, and. If thesetting needs modification, it is recommended to do so once in themethod.\n\nAllow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is false , ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.\n\nAn object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The headeris always added, but its defaultvalue can be changed here. Values in thesetting can also be overwritten from within thefunction.\n\nWhether to trigger global Ajax event handlers for this request. The default is. Set toto prevent the global handlers likeorfrom being triggered. This can be used to control various Ajax Events\n\nA function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides) are, and. When an HTTP error occurs,receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" (in HTTP/2 it may instead be an empty string), thesetting can accept an array of functions. Each function will be called in turn.This handler is not called for cross-domain scripts and cross-domain JSONP requests. This is an Ajax Event\n\nThe type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:\n\nA function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.\n\nIn requests with dataType: \"json\" or dataType: \"jsonp\" , if the string contains a double question mark ( ?? ) anywhere in the URL or a single question mark ( ? ) in the query string, it is replaced with a value generated by jQuery that is unique for each copy of the library on the page (e.g. jQuery21406515378922229067_1479880736745 ).\n\nWhen data is passed as a string it should already be encoded using the correct encoding for contentType , which by default is application/x-www-form-urlencoded .\n\nWhen data is an object, jQuery generates the data string from the object's key/value pairs unless the processData option is set to false . For example, { a: \"bc\", d: \"e,f\" } is converted to the string \"a=bc&d=e%2Cf\" . If the value is an array, jQuery serializes multiple values with same key based on the value of the traditional setting (described below). For example, { a: [1,2] } becomes the string \"a%5B%5D=1&a%5B%5D=2\" with the default traditional: false setting.\n\nData to be sent to the server. If the HTTP method is one that cannot have an entity body, such as GET, the data is appended to the URL.\n\nIf you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to. This allows, for example, server-side redirection to another domain.\n\nAn object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.\n\nThis object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (merged with the settings passed to). For example, specifying a DOM element as the context will make that the context for thecallback of a request, like so:\n\nWhen sending data to the server, use this content type. Default is \"application/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to $.ajax() , then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded , multipart/form-data , or text/plain will trigger the browser to send a preflight OPTIONS request to the server.\n\nAn object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.\n\nA function to be called when the request finishes (afterandcallbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (, or)., thesetting can accept an array of functions. Each function will be called in turn. This is an Ajax Event\n\nIf set to false , it will force requested pages not to be cached by the browser. Note: Setting cache to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.\n\nA pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event . Returningin thefunction will cancel the request., theoption will be called regardless of the type of request.\n\nBy default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to false . Cross-domain requests and dataType: \"jsonp\" requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of jQuery 1.8 , the use of async: false with jqXHR ( $.Deferred ) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as jqXHR.done() .\n\nA set of key/value pairs that map a givento its MIME type, which gets sent in therequest header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom typeto be sent with the request:You will need to specify a complementary entry for this type infor this to work properly.\n\nA set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup()\n\nA set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with $.ajaxSetup() . See jQuery.ajax( settings ) below for a complete list of all settings.\n\nA string containing the URL to which the request is sent.\n\nThe function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like and are available and are easier to use. If less common options are required, though, can be used more flexibly.\n\nAt its simplest, the function can be called with no arguments:\n\nNote: Default settings can be set globally by using the function.\n\nThis example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.\n\nThe jQuery XMLHttpRequest (jqXHR) object returned by as of jQuery 1.5 is a superset of the browser's native XMLHttpRequest object. For example, it contains and properties, as well as a method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the object simulates native XHR functionality where possible.\n\nAs of jQuery 1.5.1, the object also contains the method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The method may be used in the callback function, for example, to modify the response content-type header:\n\nThe jqXHR objects returned by as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see Deferred object for more information). These methods take one or more function arguments that are called when the request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include:\n• jqXHR.done(function( data, textStatus, jqXHR ) {}); An alternative construct to the success callback option, refer to for implementation details.\n• jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {}); An alternative construct to the error callback option, the method replaces the deprecated method. Refer to for implementation details.\n• jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { }); (added in jQuery 1.6) An alternative construct to the complete callback option, the method replaces the deprecated method. In response to a successful request, the function's arguments are the same as those of : data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of : the jqXHR object, textStatus, and errorThrown. Refer to for implementation details.\n• jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {}); Incorporates the functionality of the and methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to for implementation details.\n\nThe reference within all callbacks is the object in the option passed to in the settings; if is not specified, is a reference to the Ajax settings themselves.\n\nFor backward compatibility with , a object will expose the following properties and methods:\n• and/or when the underlying request responded with xml and/or text, respectively\n• which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one\n\nNo mechanism is provided, however, since , , , and cover all conceivable requirements.\n\nThe , , , and options all accept callback functions that are invoked at the appropriate times.\n\nAs of jQuery 1.5, the and , and, as of jQuery 1.6, callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See Deferred object methods, which are implemented internally for these callback hooks.\n\nThe callback hooks provided by are as follows:\n• callback option is invoked; it receives the object and the object as parameters.\n• callback option is invoked, if the request fails. It receives the , a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\".\n• callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of , and must return the (possibly altered) data to pass on to .\n• callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the object.\n• Promise callbacks — , , , and — are invoked, in the order they are registered.\n• callback option fires, when the request finishes, whether in failure or success. It receives the object, as well as a string containing the success or error code.\n\nDifferent types of response to call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the option. If the option is provided, the Content-Type header of the response will be disregarded.\n\nThe available data types are , , , , , and .\n\nIf or is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the property of the object.\n\nIf is specified, the response is parsed using before being passed, as an , to the success handler. The XML document is made available through the property of the object.\n\nIf is specified, the response is parsed using before being passed, as an object, to the success handler. The parsed JSON object is made available through the property of the object.\n\nIf is specified, will execute the JavaScript that is received from the server before passing it on to the success handler as a string.\n\nIf is specified, will automatically append a query string parameter of (by default) to the URL. The and properties of the settings passed to can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the success handler.\n\nFor more information on JSONP, see the original post detailing its use.\n\nBy default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the option. This option affects how the contents of the option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.\n\nThe option can contain either a query string of the form , or an object of the form . If the latter form is used, the data is converted into a query string using before it is sent. This processing can be circumvented by setting to . The processing might be undesirable if you wish to send an XML object to the server; in this case, change the option from to a more appropriate MIME type.\n\nThe option prevents handlers registered for the , , and similar events from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with an handler if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to . See the descriptions of these methods below for more details.\n\nIf the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the and options.\n\nAjax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using rather than being overridden for specific requests with the option.\n\nBy default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set to . To cause the request to report failure if the asset has not been modified since the last request, set to .\n\nThe allows the character set to be explicitly specified for requests that use a tag (that is, a type of or ). This is useful if the script and host page have differing character sets.\n\nThe first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The option to defaults to , indicating that code execution can continue after the request is made. Setting this option to (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.\n\nThe function returns the object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling on the object will halt the request before it completes.\n\nAs of jQuery 1.5, jQuery's Ajax implementation includes prefilters, transports, and converters that allow you to extend Ajax with a great deal of flexibility.\n\nconverters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g ), you must add a correspondence between the response Content-Type and the actual data type using the option:\n\nThis extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).\n\nTo convert from a supported type (e.g , ) to a custom data type and back again, use another pass-through converter:\n\nThe above now allows passing from to and then to ."
    },
    {
        "link": "https://w3schools.com/jquery/jquery_ref_ajax.asp",
        "document": "AJAX is the art of exchanging data with a server, and update parts of a web page - without reloading the whole page.\n\nThe following table lists all the jQuery AJAX methods:"
    },
    {
        "link": "https://api.jquery.com/category/ajax",
        "document": "Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties."
    },
    {
        "link": "http://w3schools.com/JQuery/jquery_ref_ajax.asp",
        "document": "AJAX is the art of exchanging data with a server, and update parts of a web page - without reloading the whole page.\n\nThe following table lists all the jQuery AJAX methods:"
    },
    {
        "link": "https://api.jquery.com",
        "document": "Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nNote: This feature is available in Web Workers, except for Service Workers. The XMLHttpRequest API enables web apps to make HTTP requests to web servers and receive the responses programmatically using JavaScript. This in turn enables a website to update just part of a page with data from the server, rather than having to navigate to a whole new page. This practice is also sometimes known as AJAX. The Fetch API is the more flexible and powerful replacement for the XMLHttpRequest API. The Fetch API uses promises instead of events to handle asynchronous responses, integrates well with service workers, and supports advanced aspects of HTTP such as CORS. For these reasons, the Fetch API is usually used in modern web apps instead of .\n\nThe central interface in the XMLHttpRequest API is . To make an HTTP request:\n• Create a new instance by calling its constructor.\n• Initialize it by calling . At this point you provide the URL for the request, the HTTP method to use, and optionally, a username and password.\n• Attach event handlers to get the result of the request. For example, the event is fired when the request has successfully completed, and the event is fired in various error conditions. For an in-depth guide to the XMLHttpRequest API, see Using XMLHttpRequest.\n\nAn object representing fields and their values, which can be sent to a server using or . A subclass of which is passed into the , and which contains information about how much of the request has been completed. A superclass of both and , defining the events that are available in both of those interfaces. Represents the upload process for an HTTP upload. Provides events enabling code to track the progress of an upload."
    },
    {
        "link": "https://forum.freecodecamp.org/t/xmlhttprequest-and-json/620388",
        "document": "I am working on the challenge Get JSON with the JavaScript XMLHttpRequest Method and I had a question about parsing the JSON data.\n\nHere is the example code:\n\nMy question is, if the request returns the as a string by default, then wouldn’t it be redundant to use in line only to it back to a string in the next line?\n\nCouldn’t we just add the to the HTML element by doing something like:"
    },
    {
        "link": "https://stackoverflow.com/questions/1973140/parsing-json-from-xmlhttprequest-responsejson",
        "document": "TL;DR I'd recommend this way as long as you don't have to send synchronous requests or support old browsers.\n\nA long as your request is asynchronous you can use the Fetch API to send HTTP requests. The fetch API works with promises, which is a nice way to handle asynchronous workflows in JavaScript. With this approach you use to send a request and to parse the response:\n\nYou can use the statement instead of the promise notation, to keep the code readable:\n\nCompatibility: The Fetch API is not supported by IE11 as well as Edge 12 & 13. However, there are polyfills.\n\nAs Londeren has written in his answer, newer browsers allow you to use the property to define the expected format of the response. The parsed response data can then be accessed via the property:\n\nCompatibility: is not supported by IE11.\n\nThe standard XMLHttpRequest has no property, just and . As long as bitly really responds with some JSON to your request, should contain the JSON code as text, so all you've got to do is to parse it with :\n\nCompatibility: This approach should work with any browser that supports and .\n\nDisclosure: I'm the owner of Pixels|Bytes. I thought that my script was a good solution for the original question, but it is rather outdated today. I do not recommend to use it anymore.\n\nIf you prefer to use , but want a more lightweight solution than JQuery, you might want to check out my JSONHttpRequest. It works exactly like a normal XMLHttpRequest, but also provides the property. All you have to change in your code would be the first line:\n\nJSONHttpRequest also provides functionality to easily send JavaScript objects as JSON. More details and the code can be found here: http://pixelsvsbytes.com/2011/12/teach-your-xmlhttprequest-some-json/."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_XMLHttpRequest",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nIn this guide, we'll take a look at how to use to issue HTTP requests in order to exchange data between the website and a server. Examples of both common and more obscure use cases for are included. After the transaction completes, the object will contain useful information such as the response body and the HTTP status of the result.\n\nA request made via can fetch the data in one of two ways, asynchronously or synchronously. The type of request is dictated by the optional argument (the third argument) that is set on the method. If this argument is or not specified, the is processed asynchronously, otherwise the process is handled synchronously. A detailed discussion and demonstrations of these two types of requests can be found on the synchronous and asynchronous requests page. You can't use synchronous requests outside web workers as it freezes the main interface. Note: The constructor isn't limited to only XML documents. It starts with \"XML\" because when it was created the main format that was originally used for asynchronous data exchange was XML.\n\nAlthough is most commonly used to send and receive textual data, it can be used to send and receive binary content. There are several well tested methods for coercing the response of an into sending binary data. These involve utilizing the method on the object and is a workable solution. However, more modern techniques are available, since the attribute now supports a number of additional content types, which makes sending and receiving binary data much easier. For example, consider this snippet, which uses the of to fetch the remote content into a object, which stores the raw binary data. For more examples check out the Sending and Receiving Binary Data page.\n\nprovides the ability to listen to various events that can occur while the request is being processed. This includes periodic progress notifications, error notifications, and so forth. Support for DOM event monitoring of transfers follows the specification for progress events: these events implement the interface. The actual events you can monitor to determine the state of an ongoing transfer are: The amount of data that has been retrieved has changed. The transfer is complete; all data is now in the const req = new XMLHttpRequest(); req.addEventListener(\"progress\", updateProgress); req.addEventListener(\"load\", transferComplete); req.addEventListener(\"error\", transferFailed); req.addEventListener(\"abort\", transferCanceled); req.open(); // … // progress on transfers from the server to the client (downloads) function updateProgress(event) { if (event.lengthComputable) { const percentComplete = (event.loaded / event.total) * 100; // … } else { // Unable to compute progress information since the total size is unknown } } function transferComplete(evt) { console.log(\"The transfer is complete.\"); } function transferFailed(evt) { console.log(\"An error occurred while transferring the file.\"); } function transferCanceled(evt) { console.log(\"The transfer has been canceled by the user.\"); } We add event listeners for the various events that are sent while performing a data transfer using . Note: You need to add the event listeners before calling on the request. Otherwise the events will not fire. The progress event handler, specified by the function in this example, receives the total number of bytes to transfer as well as the number of bytes transferred so far in the event's and fields. However, if the field is false, the total length is not known and will be zero. Progress events exist for both download and upload transfers. The download events are fired on the object itself, as shown in the above sample. The upload events are fired on the object, as shown below: Note: Progress events are not available for the protocol. Progress events come in for every chunk of data received, including the last chunk in cases in which the last packet is received and the connection closed before the progress event is fired. In this case, the progress event is automatically fired when the load event occurs for that packet. This lets you now reliably monitor progress by only watching the \"progress\" event. One can also detect all three load-ending conditions ( , , or ) using the event: req.addEventListener(\"loadend\", loadEnd); function loadEnd(e) { console.log( \"The transfer finished (although we don't know if it succeeded or not).\", ); } Note there is no way to be certain, from the information received by the event, as to which condition caused the operation to terminate; however, you can use this to handle tasks that need to be performed in all end-of-transfer scenarios.\n\nIf you conclude with an XMLHttpRequest receiving and , this means the request was not allowed to be performed. It was . A likely cause for this is when the origin (at the creation of the XMLHttpRequest) has changed when the XMLHttpRequest is subsequently . This case can happen, for example, when one has an XMLHttpRequest that gets fired on an onunload event for a window, the expected XMLHttpRequest is created when the window to be closed is still there, and finally sending the request (in other words, ) when this window has lost its focus and another window gains focus. The most effective way to avoid this problem is to set a listener on the new window's event which is set once the terminated window has its event triggered."
    },
    {
        "link": "http://w3schools.com/Js/js_json_http.asp",
        "document": "A common use of JSON is to read data from a web server, and display the data in a web page.\n\nThis chapter will teach you, in 4 easy steps, how to read JSON data, using XMLHttp.\n\nThis example reads a menu from myTutorials.txt, and displays the menu in a web page:\n\n<div id=\"id01\"></div>\n\n\n\n<script>\n\nvar xmlhttp = new XMLHttpRequest();\n\n var url = \"myTutorials.txt\";\n\n\n\nxmlhttp.onreadystatechange = function() {\n\n if (this.readyState == 4 && this.status == 200) {\n\n var myArr = JSON.parse(this.responseText);\n\n myFunction(myArr);\n\n }\n\n};\n\nxmlhttp.open(\"GET\", url, true);\n\n xmlhttp.send();\n\n\n\nfunction myFunction(arr) {\n\n var out = \"\";\n\n var i;\n\n for(i = 0; i < arr.length; i++) {\n\n out += '<a href=\"' + arr[i].url + '\">' + \n\n arr[i].display + '</a><br>';\n\n }\n\n document.getElementById(\"id01\").innerHTML = out;\n\n}\n\n </script>\n\n Try it Yourself »\n\nUse an array literal to declare an array of objects.\n\nGive each object two properties: display and url.\n\nCreate a function myFunction() that loops the array objects, and display the content as HTML links:\n\n4: Read the text file with an XMLHttpRequest\n\nWrite an XMLHttpRequest to read the text file, and use myFunction() to display the array:"
    }
]