[
    {
        "link": "https://api.jquery.com",
        "document": "Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first."
    },
    {
        "link": "https://api.jquery.com/find",
        "document": "Description: Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.\n\nAn element or a jQuery object to match elements against.\n\nGiven a jQuery object that represents a set of DOM elements, the method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The and methods are similar, except that the latter only travels a single level down the DOM tree.\n\nThe first signature for the method accepts a selector expression of the same type that we can pass to the function. The elements will be filtered by testing whether they match this selector; all parts of the selector must lie inside of an element on which .find() is called. The expressions allowed include selectors like which will find all the paragraphs that are children of the elements in the jQuery object.\n\nConsider a page with a basic nested list on it:\n\nIf we begin at item II, we can find list items within it:\n\nThe result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.\n\nSelector context is implemented with the therefore, is equivalent to .\n\nAs of jQuery 1.6, we can also filter the selection with a given jQuery collection or element. With the same nested list as above, if we start with:\n\nAnd then pass this jQuery object to find:\n\nThis will return a jQuery collection which contains only the list elements that are descendants of item II.\n\nSimilarly, an element may also be passed to find:\n\nThe result of this call would be a red background on item 1."
    },
    {
        "link": "https://api.jquery.com/category/version/3.2",
        "document": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element."
    },
    {
        "link": "https://github.com/jquery/api.jquery.com",
        "document": "To build and deploy your changes for previewing in a instance, follow the workflow instructions from our documentation on contributing to jQuery Foundation web sites.\n\nThe and utilities need to be in your path. If you are on Windows, you can get libxml2 and libxslt from zlatkovic.com.\n\nNote: If you're using Windows and you receive the error \"Error\" when executing the task , try to add the DLL in the root of the project.\n• Keep sentences short and to the point.\n• Include the Oxford (serial) comma in a list of three or more items.\n• Yes: The , , and events (e.g., on an element) do not bubble\n• No: The , and events (e.g., on an element) do not bubble\n• The documentation standardizes on American English spelling. For example:\n• Yes: color, while, among, customize, argument\n• Use second-person pronoun (\"you\") when necessary, but try to avoid it.\n• Favor the definite article (\"the\") over second-person possessive (\"your\").\n• Yes: Insert the paragraph after the unordered list.\n• No: Insert your paragraph after the unordered list.\n• When editing current entries, change first-person plural pronouns (\"we,\" \"our,\" \"us\") to second-person.\n• Yes: The method here adds an unordered list beneath the paragraph.\n• No: And now we have our paragraph beneath the unordered list.\n• Prefer active voice over passive.\n• Active: Calling binds a click handler to the elements in the collection\n• Passive: Click handlers are bound to elements in the collection when is called\n\nCode in the API documentation should follow the jQuery Core Style Guide with the following addition:\n• Document ready syntax: Use instead of as it's harder for new users to distinguish the difference between the latter and an IIFE.\n• Methods: use a dot, followed by the method name, followed by parentheses: e.g. The method is a shortcut for in the first and second variations, and in the third.\n• Properties: use a dot, followed by the property name: e.g. .\n• Functions: use the function name, followed by parentheses: .\n• Examples should indicate what the expected result will be before presenting the code. This makes code clearer and skimming easier, especially for newer coders who may not understand what is supposed to be happening from reading the code itself.\n• Yes: Find all p elements that are children of a div element and apply a border to them.\n• No: Find all p elements that are children of a div element.\n• Make your example easy to follow with good comments so that the explanation isn't necessary.\n• Purpose\n• Describe comprehensively and accessibly every public method, property, and selector in the jQuery library\n• Demonstrate the effect the methods have by executing code examples\n• Authors\n• Well versed in jQuery best practices\n• Tone\n• Middle ground between formal and familiar. Err on the side of formality."
    },
    {
        "link": "https://w3schools.com/jquery/jquery_get_started.asp",
        "document": "There are several ways to start using jQuery on your web site. You can:\n\nThere are two versions of jQuery available for downloading:\n• Production version - this is for your live website because it has been minified and compressed\n• Development version - this is for testing and development (uncompressed and readable code)\n\nBoth versions can be downloaded from jQuery.com.\n\nThe jQuery library is a single JavaScript file, and you reference it with the HTML tag (notice that the tag should be inside the section):\n\nTip: Place the downloaded file in the same directory as the pages where you wish to use it.\n\n\n\nIf you don't want to download and host jQuery yourself, you can include it from a CDN (Content Delivery Network).\n\nGoogle is an example of someone who host jQuery:"
    },
    {
        "link": "https://stackoverflow.com/questions/27801174/how-to-secure-my-login-credentials-within-an-ajax-call",
        "document": "I have the following situation:\n\nI have a website where the user need to enter a username and a password and then the site make a ajax call to the .\n\nOn the other site I have a running which gets the parameters and checks if the username and password is right.\n\nHow to secure this process e.g: how to secure it if the website does not use https and the user submits his username and password? Is there any algorithm which can do this?"
    },
    {
        "link": "https://stackoverflow.com/questions/39305806/creating-a-secure-login-method-using-asp-net-jquery-and-ajax",
        "document": "I am trying to build a login screen for my website, I would like to make it work without having to refresh the page (using AJAX). I have decided to use JQuery AJAX for this purpose to call an ASP.net WebMethod using the code below.\n\nThe question is, is this code secure enough? is this the right way to make a login asynchronously? is it secure to expose this LogIn publicly?"
    },
    {
        "link": "https://raibledesigns.com/rd/entry/implementing_ajax_authentication_using_jquery",
        "document": "I've always had a keen interest in implementing security in webapps. I implemented container-managed authentication (CMA) in AppFuse in 2002, watched Tomcat improve it's implementation in 2003 and implemented Remember Me with CMA in 2004. In 2005, I switched from CMA to Acegi Security (now Spring Security) and never looked back. I've been very happy with Spring Security over the years, but also hope to learn more about Apache Shiro and implementing OAuth to protect JavaScript APIs in the near future.\n\nI was recently re-inspired to learn more about security when working on a new feature at Overstock.com. The feature hasn't been released yet, but basically boils down to allowing users to login without leaving a page. For example, if they want to leave a review on a product, they would click a link, be prompted to login, enter their credentials, then continue to leave their review. The login prompt and subsequent review would likely be implemented using a lightbox. While lightboxes are often seen in webapps these days because they look good, it's also possible Lightbox UIs provide a poor user experience. User experience aside, I think it's interesting to see what's required to implement such a feature.\n\nTo demonstrate how we did it, I whipped up an example using AppFuse Light, jQuery and Spring Security. The source is available in my ajax-login project on GitHub. To begin, I wanted to accomplish a number of things to replicate the Overstock environment:\n• Implement a RESTful LoginService that allows users to login.\n• Implement login with Ajax, with the request coming from an insecure page.\n\nForcing HTTPS with Spring Security\n\n The first feature was fairly easy to implement thanks to Spring Security. Its configuration supports a requires-channel attribute that can be used for this. I used this to force HTTPS on the \"users\" page and it subsequently causes the login to be secure.\n\nTesting HTTPS without adding a certificate locally\n\n After making the above change in security.xml, I had to modify my jWebUnit test to work with SSL. In reality, I didn't have to modify the test, I just had to modify the configuration that ran the test. In my last post, I wrote about adding my 'untrusted' cert to my JVM keystore. For some reason, this works for HttpClient, but not for jWebUnit/HtmlUnit. The good news is I figured out an easier solution - adding the trustStore and trustStore password as system properties to the maven-failsafe-plugin configuration.\n\nThe disadvantage to doing things this way is you'll have to pass these in as arguments when running unit tests in your IDE.\n\nImplementing a LoginService\n\n Next, I set about implementing a LoginService as a Spring MVC Controller that returns JSON thanks to the @ResponseBody annotation and Jackson.\n\nTo verify this class worked as expected, I wrote a unit test using JUnit and Mockito. I used Mockito because Overstock is transitioning to it from EasyMock and I've found it very simple to use.\n\nImplement login with Ajax\n\n The last feature was the hardest to implement and still isn't fully working as I'd hoped. I used jQuery and jQuery UI to implement a dialog that opens the login page on the same page rather than redirecting to the login page. The \"#demo\" locator refers to a button in the page.\n\nPassing in the \"ajax=true\" parameter disables SiteMesh decoration on the login page, something that's described in my Ajaxified Body article.\n\nInstead of adding a click handler to a specific id, it's probably better to use a CSS class that indicates authentication is required for a link, or -- even better -- use Ajax to see if the link is secured.\n\nThe login page then has the following JavaScript to add a click handler to the \"login\" button that submits the request securely to the LoginService.\n\nThe biggest secret to making this all work (the HTTP -> HTTPS communication, which is considered cross-domain), is the window.name Transport and the jQuery plugin that implements it. To make this plugin work with Firefox 3.6, I had to implement a Filter that adds Access-Control headers. A question on Stackoverflow helped me figure this out.\n\nIssues\n\n I encountered a number of issues when implementing this in the ajax-login project.\n• If you try to run this with ports (e.g. 8080 and 8443) in your URLs, you'll get a 501 (Not Implemented) response. Removing the ports by fronting with Apache and mod_proxy solves this problem.\n• If you haven't accepted the certificate in your browser, the Ajax request will fail. In the example, I solved this by clicking on the \"Users\" tab to make a secure request, then going back to the homepage to try and login.\n• The jQuery window.name version 0.9.1 doesn't work with jQuery 1.5.0. The error is \"$.httpSuccess function not found.\"\n• Finally, even though I was able to authenticate successfully, I was unable to make the authentication persist. I tried adding the following to persist the updated SecurityContext to the session, but it doesn't work. I expect the solution is to create a secure JSESSIONID cookie somehow. @Autowired SecurityContextRepository repository; @RequestMapping(method = RequestMethod.POST) @ResponseBody public LoginStatus login(@RequestParam(\"j_username\") String username, @RequestParam(\"j_password\") String password, HttpServletRequest request, HttpServletResponse response) { UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, password); ... try { Authentication auth = authenticationManager.authenticate(token); SecurityContextHolder.getContext().setAuthentication(auth); // save the updated context to the session repository.saveContext(SecurityContextHolder.getContext(), request, response); return new LoginStatus(auth.isAuthenticated(), auth.getName()); } catch (BadCredentialsException e) { return new LoginStatus(false, null); } }\n\nConclusion\n\n This article has shown you how to force HTTPS for login, how to do integration testing with a self-generated certificate, how to implement a LoginService with Spring MVC and Spring Security, as well as how to use jQuery to talk to a service cross-domain with the window.name Transport. While I don't have everything working as much as I'd like, I hope this helps you implement a similar feature in your applications.\n\nOne thing to be aware of is with lightbox/dialog logins and HTTP -> HTTPS is that users won't see a secure icon in their address bar. If your app has sensitive data, you might want to force https for your entire app. OWASP's Secure Login Pages has a lot of good tips in this area.\n\nUpdate: I've posted a demo of the ajax-login webapp. Thanks to Contegix for hosting the demo and helping obtain/install an SSL certificate so quickly."
    },
    {
        "link": "https://labex.io/tutorials/javascript-json-data-transfer-with-ajax-300378",
        "document": "In this project, you will learn how to implement a login verification feature using AJAX and JSON data transfer. The project involves creating a login form, handling the form submission with AJAX, and validating the user's login credentials on the server-side.\n\nIn this project, you will learn:\n• How to prepare the project environment and set up the necessary files and dependencies.\n• How to implement the login form in the page using HTML.\n• How to handle the login form submission using jQuery and AJAX.\n• How to encapsulate the login data in JSON format and send it to the server.\n• How to receive and process the JSON response from the server to determine the login status.\n• How to redirect the user to the appropriate page based on the login result.\n\nAfter completing this project, you will be able to:\n• Use AJAX to send data to the server without a full page refresh.\n• Work with JSON data format for data transfer between the client and server.\n• Handle form submission and user input validation on the client-side.\n• Process the server's response and update the user interface accordingly.\n\n%%%%{init: {'theme':'neutral'}}%%%% flowchart RL javascript((\"JavaScript\")) -.-> javascript/NetworkingGroup([\"Networking\"]) javascript((\"JavaScript\")) -.-> javascript/DOMManipulationGroup([\"DOM Manipulation\"]) javascript/DOMManipulationGroup -.-> javascript/dom_manip(\"DOM Manipulation\") javascript/DOMManipulationGroup -.-> javascript/event_handle(\"Event Handling\") javascript/NetworkingGroup -.-> javascript/http_req(\"HTTP Requests\") javascript/NetworkingGroup -.-> javascript/json(\"JSON\") subgraph Lab Skills javascript/dom_manip -.-> lab-300378{{\"JSON Data Transfer with AJAX\"}} javascript/event_handle -.-> lab-300378{{\"JSON Data Transfer with AJAX\"}} javascript/http_req -.-> lab-300378{{\"JSON Data Transfer with AJAX\"}} javascript/json -.-> lab-300378{{\"JSON Data Transfer with AJAX\"}} end"
    },
    {
        "link": "https://sitepoint.com/community/t/ajax-login-security-and-best-practices/213242",
        "document": "I’ve been playing around with AJAX login for my PHP authentication system. The authentication system is well tested, and for the sake of this thread we will say that it is 100% secure. I say that because it’s not the PHP that I am concerned with, it’s the javascript.\n\nWhen somebody attempts to log in, AJAX is sending the request, which is processed by PHP, and then PHP sends back a response. In that response, depending on if the login attempt was successful, there could be info like the user’s ID, what level user they are, etc. If there was an error, the response would include things like the error count, if the user is on hold (which means they have too many login attempts), etc.\n\nSo, let’s say that the login attempt was successful. In plain HTTP requests (non-AJAX) I would be able to show the site visitor something based on their user ID, user level, etc. But with this AJAX login, what can I do? Anything that I can think of doing with AJAX can just be circumnavigated by somebody in their console.\n\nFor instance, if I have a hidden div#cool_stuff and showed it based on a successful login, there’s no security in that, because a person could just type $(‘#cool_stuff’).show(); into their browser’s console.\n\nSo, what I’m wondering is, what are the best practices concerning AJAX login. It honestly doesn’t seem very useful, but I would hope that somebody here can shed some light on this concern of mine."
    }
]