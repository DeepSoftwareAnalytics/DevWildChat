[
    {
        "link": "https://blogs.embarcadero.com/utilize-real-png-files-in-your-delphi-c-builder-applications",
        "document": "In VCL, of course, you can use Real PNG files with the TPngImage class. With TPngImage class, you can load and manipulate PNG graphics. But there is another option to use PNG image files with PNGComponents.\n\nPNGComponents is a set of components that allows you to easily include PNG files in your application. This is a source-only release of TurboPack PNGComponents. It includes design-time and runtime packages for Delphi and C++Builder additionally, the library supports Win32 and Win64.\n\nWhy should I use PngComponents?\n\nThe library says it best: “The PngComponents library offers a major leap forward in creating nice GUI’s in designtime. Not only does it speed up the implementation of alphablended icons in your application, it eases the way you can use them throughout your software. No longer do you need to put them in a resource file manually and then manually drawing them on a temporary bitmap and assigning that to somewhere. Adding beautiful alphablended icons to your interface is but a few clicks away.“\n\nHow can I get the PngComponents?\n\nYou can download and install these PNG Components from GetIt Package Manager with one click.\n\nYou will get 5 different PNG components:\n\nEach component has several properties to handle PNG files easily.\n\nBe sure to head over and check out the PNG Components in the GetIt portal and download it from the IDE."
    },
    {
        "link": "https://stackoverflow.com/questions/23269531/load-png-to-timage-in-embarcadero-cbuilder-xe5",
        "document": "Just add an include for .\n\nAt designtime, this will make .png files available in the dialog. At runtime, you can create and load a TPngImage with the file, and assign it to the .\n\nMore info in the XE5 documentation"
    },
    {
        "link": "https://docwiki.embarcadero.com/Libraries/Alexandria/en/Vcl.Imaging.jpeg.TJPEGImage",
        "document": "Use TJPEGImage to read and write jpeg compressed image data. TJPEGImage handles the digital compression and decompression of still images for use in computer systems. It uses the data from an instance of TJPEGData, which contains the actual jpeg data source and is never modified. Each jpeg image object may share its TJPEGData object with other instances of a jpeg image by creating copies using the Assign method. The jpeg data source handles reference counting for the jpeg image objects that are linked to it.\n\nTJPEGImage has an internal bitmap that represents the jpeg image. This internal image and the original source of the jpeg image are read only. TJPEGImage has properties that determine how each instance will handle color conversion, compression, decompression, performance, and so on.\n\nThe following are characteristics of this object. A TJPEGImage object:\n\nHas no canvas (so it cannot draw onto a canvas). However, TJPEGImage implements the protected Draw method introduced in TGraphic, so it can draw itself on the canvas of another object.\n\nProvides no access to the internal bitmap image that it creates for the JPEG image.\n\nPerforms reference counting and handle sharing by means of the TJPEGData object. Multiple instances can refer to the same TJPEGData image. TJPEGData is the actual owner of the file handle to the jpeg data source."
    },
    {
        "link": "https://functionx.com/cppbuilder/graphics/introduction.htm",
        "document": ""
    },
    {
        "link": "https://svgmagic.io",
        "document": "There are two ways to use the SVG graphic component. You can either use it natively, through the VCL TImage component. In this case, simply put a TImage on your form, then open the Picture property to load a file, and select the SVG file to open as any other image. Or you can use it in your code exactly the same way as any TGraphic descendents, like a TPngImage or a TJpgImage. For example, here is a sample code that illustrates how to paint a SVG onto a canvas: How to change the animation position in TImage? pSVG := pImage.Picture.Graphic as TWSVGGraphic; pSVG.Position := 0.5; // in percent, between 0.0 and 1.0 pSVG = dynamic_cast<TWSVGGraphic*>(pImage->Picture->Graphic); pSVG->Position = 0.5; // in percent, between 0.0 and 1.0 How to change the animation position of TWSVGImage? pImage.Animation.Position := 50; // in percent, between 0 and 100 pImage->Animation->Position = 50; // in percent, between 0 and 100\n\nIf you bought the single developer license, email us at hello@svgmagic.io to get your update. added: Several new recognized color key codes from https://www.w3.org/TR/SVG11/types.html#ColorKeywords added: Demo application x64 version changed: Default text font size to match the standards, which is defined to medium (i.e ~16px) improved: Images which contain a big amount of references may be loaded and drawn quicker fixed: Trying to load an image with a big amount of references may raise an out of memory exception fixed: Svg containing utf8 chars in their text may be broken after be saved fixed: Colored animations doesn't work unless animateColor tag is used instead of the animate one fixed: Colored animations based on values and key frames were not supported fixed: Colored animation did not work if fill or stroke value was missing, even if animated values were defined fixed: Embedded jpeg images were detected as svg, and thus couldn't be opened fixed: Memory leaks in rasterizer fixed: Documentation issues added: Embarcadero RAD Studio 10.4 Sydney support added: SVG symbol elements are now supported added: SVG embedded images are now supported, also supports embedded SVG added: enumerators can now be animated using key frames added: animation discrete mode is now supported added: LoadFromStr() function in TWSVGGraphic to allow SVG files to be loaded from a text fixed: several matrices based animations did not work properly, and may raise exceptions fixed: some properties could be lost from the source of an use element fixed: an incorrect pointer assignation could cause access violation during draw process fixed: documentation issues fixed: clip path didn't work, now they are supported as expected added: missing .bpi files in package fixed: animation of different types were not supported if defined in the same group fixed: matrix animation was never applied to groups, switches and actions fixed: array of values was not supported in animated transform matrices fixed: a rounding error could cause jerks in several animations fixed: a possible buffer overflow, which could happen in rare occurrences fixed: several SVG files could no longer be loaded with 10.3.3 Rio (perhaps also with 10.3.2 Rio) improved: unified all the animation properties to share the same engine fixed: an issue in checkbox and radio button styles could cause the target content to be drawn incorrectly on high dpi fixed: the animation could run too quickly in TWSVGGraphic because the interpolation was applied twice fixed: in XE2, the component icons didn't appear on the designer fixed: in XE2, a stream corruption could break several images, which appeared with a fuchsia halo around them improved: high dpi support fixed: issue with graphical cache, which prevented several brushes to be cached correctly fixed: several SVG images could be lost in design time the first time the project was reopened (since XE8) fixed: library raised an exception while opening SVG files if decimal separator was not configured to \".\" in computer locale fixed: high DPI issues with component styles fixed: trial library could not be tested in 64 bit due to a memory error fixed: c++ demo project could not be compiled under 64 bit fixed: several configuration issues in 10.2.3 Tokyo and 10.3 Rio demo projects added: RAD Studio XE2, XE8, 10.0 Seattle and 10.1 Berlin support fixed: incorrect BkColor default value in TWSVGImageList fixed: users no longer have to link the Uniscribe library (usp10.dll) explicitly added: new property (DPIScale) to allow image list content to be auto-scaled on DPI changes added: drag&drop support in TWSVGImageList design time editor changed: now TWSCGImageList design time editor is shown as a grid instead of a list added: library version number property is now exposed in components fixed: now TWSVGImageList no longer clears its content when the size is changed fixed: Delphi demos for 10.2 Tokyo and 10.3 Rio contained several graphical glitches and path to DCU was missing for 64 bit compilation\n\nNo. SVGMagic only targets the VCL. Is SVGMagic available for compiler versions earlier than XE2? No. However the whole library source code is provided with the purchase of a Small Team license ($299), and compile it with an earlier compiler may be tried. But be aware that we no guarantee that this will be succesfully possible, and the following points should be considered before taking a such decision :\n• Generic types are used, and the System.Generics.Collections unit is included in at least 19 files.\n• Anonymous functions are used, at least one time for a smart pointer class, which is declared this way:\n• The RTTI is also used, as well as generic containers (e.g. TList<T> or TObjectList<T>) and we wrote several classes independent of data type, e.g. a class to provide generic numbers, which uses instructions like: TWGenericNumber<T> = record ... class operator TWGenericNumber<T>.Add(a, b: TWGenericNumber<T>): TWGenericNumber<T>; var left, right, resVal: TValue; begin ... left := TValue.From<T>(a.Value); right := TValue.From<T>(b.Value); ... case (left.Kind) of tkInteger, tkInt64: ... resVal := left.AsInt64 + right.AsInt64; ... tkFloat: ... resVal := left.AsExtended + right.AsExtended; ... ... end; ... Result.Value := resVal.AsType<T>; end; Is it possible to convert another format like a Bitmap, a Png, ... to a SVG image using SVGMagic ? No. However it is possible to convert a SVG in any other format supported by the VCL. I installed SVGMagic but it doesn't work. I get the following error message : The most likely causes for this issue are:\n• You unpacked the SVG Magic package inside an incorrect folder, like e.g. the C:\\Users\\Public\\Documents\\Embarcadero\\Studio\\[Installed version]\\ folder instead of the C:\\Users\\Public\\Documents\\Embarcadero\\Studio\\ one.\n• You have changed the BDSCOMMONDIR path in your environment variables to point to another folder. To solve it, please apply the following procedure:\n• Open your IDE, and under Component->Install packages... select your installed package, then click on Remove.\n• Close your IDE and delete all the files you previously installed from your SVGMagic package.\n• Open the folder matching with your BDSCOMMONDIR environment variable, by default it's the\n\n C:\\Users\\Public\\Documents\\Embarcadero\\Studio\\ folder.\n\n NOTE If you're unsure about that path, you may open Tools->Options... in your IDE, then under Environment Options->Environment variables, check if the BDSCOMMONDIR has an override, and if yes on which path it's pointing to.\n• Copy the content of the folder matching with your installed RAD Studio version number from the temporary dir in which you just unpacked the zip file to the folder pointed by your BDSCOMMONDIR.\n\n NOTE If you're in the right folder, you should see at least the following sub-folders: Bpl, Dcp and Hpp.\n• While copying the files, you may receive messages asking if you accept to merge folders, accept them (click yes).\n• Follow again the point nb 2 in the Readme.txt file. This should resolve your issue. A “Xml.VerySimple.pas” file is missing and prevents me to compile the library. Where can I find it? The VerySimpleXml library is a third party library required to compile the SVGMagic source code. It is linked as a submodule to the main repository. For that reason you need to initialize and/or update your local copy using one or several of the following Git commands: # initialize the submodules to get from the repository in the local copy git submodule init # get a working copy of the submodules in the local dir, and/or update them # NOTE must be executed after a submodule init git submodule update # initialize and update the submodules in the local dir (same as the 2 commands above) # NOTE if the recursive option is added, all the children submodules will also be included git submodule update --init (--recursive) # pull all changes in the repo including changes in the submodules git pull --recurse-submodules # pull all changes for the submodules git submodule update –remote Why I get a \"F1026 File not found UTWSVGGraphic.dcu\" error (or any error saying that a .dcu file is missing) when I try to compile my first project using SVGMagic? Why this error didn't happen when I tested the demo projects? This error happens because the compiler needs to know the path where the compiled .dcu files belonging to the SVGMagic library are located. It's why you have to define them in order to compile your project.\n\n \n\n The reason why the demo projects can be compiled and are working directly is because this path was already defined and is pointing to the path where the library is installed by default, as you can see if you open the project properties, under Delphi Compiler -> Search Path.\n\n \n\n NOTE the Target field must be set to All configurations - 32-bit Windows platform or All configurations - 64-bit Windows platform in order to show the path. This error may happen when the project is updated from a previous RAD Studio version to a newer. It may be ignored, and should no longer appear after the project is saved. Such issues may come from the component used in the background. The most classic case is e.g. if a TPanel is set as a background for the animated image, and its ParentBackground property is configured to True, while its DoubleBuffered property is set to False. Inverting these properties should remove the flickering. This issue may also happen if the image is put directly above a tab control. In this case, introducing a TPanel between the tab control and the image may resolve it. How may the content of a SVG image be modified dynamically, e.g. changing the background color of a particular item in runtime? SVGMagic doesn't provide such functionality. However the SVG content is accessible at any time and may be modified dynamically before being read by the graphic component. You just need to write the code modifying the content. No. However, as mentioned previously, the SVG content is accessible at any time, and you may write the code required to select and extract the part of the SVG you want to draw. Is it possible to create a TBitmap directly from a TWSVGGraphic? Yes. Below is a sample code showing how to do that: Is it possible to create a PNG image (TPngImage) from a TWSVGGraphic? Yes. You may use e.g. the following function: function SvgToPng(pSvgGraphic: TWSvgGraphic): TPngImage; const colorKey = $010101; var pBitmap: TBitmap; rect: TRect; begin if (not Assigned(pSvgGraphic)) then Exit(nil); // create a RGBA bitmap compatible with SVG to convert pBitmap := TBitmap.Create; pBitmap.PixelFormat := pf32bit; pBitmap.AlphaFormat := afDefined; pBitmap.Transparent := True; pBitmap.TransparentColor := colorKey; pBitmap.SetSize(pSvgGraphic.Width, pSvgGraphic.Height); // create a rect matching the svg size rect.Left := 0; rect.Top := 0; rect.Right := pSvgGraphic.Width; rect.Bottom := pSvgGraphic.Height; // clear bitmap canvas pBitmap.Canvas.Brush.Color := colorKey; pBitmap.Canvas.Brush.Style := bsSolid; pBitmap.Canvas.FillRect(rect); // convert svg to transparent RGBA bitmap pBitmap.Canvas.Draw(0, 0, pSvgGraphic); // now convert bitmap to png Result := TPngImage.Create; Result.Assign(pBitmap); pBitmap.Free; end; You can then use it in the following manner: NOTE the above function supports the transparency, and the color key may be adapted depending on the SVG images you need to convert. But normally the default color key should work with the majority of SVG images to convert. The SVG files seem to have an inherent size! But shouldn't SVGs be scalable by definition? So how can the resulting Bitmaps be scaled to a uniform (proportional) size without quality loss? The SVG files are resizable without loss of quality. The inherent size provided by the graphic is the one defined in the file itself (e.g. by the width and height properties, and/or viewBox property). But contrary to the other graphic formats, the width and height of a TWSVGGraphic component may be changed after the image was loaded, without clearing its content. For that reason the code below is valid: NOTE the TWSVGImageList behaves the same way, and their size may be changed dynamically without losing their content, for the same reasons. A more standard solution may also be preferred, e.g. if a generic source code compatible with all graphic formats should be created, by using the StretchDraw() function instead of Draw(). Below is an example: In case proportional thumbnails are required, the code may be modified as follows: the TWSVGImageList behaves the same way, and their size may be changed dynamically without losing their content, for the same reasons. A more standard solution may also be preferred, e.g. if a generic source code compatible with all graphic formats should be created, by using the StretchDraw() function instead of Draw(). Below is an example:In case proportional thumbnails are required, the code may be modified as follows: No. Only the SMIL based animations which are part of the SVG standards, are supported. All the other script languages are not supported by SVGMagic. Does SVGMagic support the animated SVG exported by third-party creation tools? It depends on the exporter. If the SMIL based animations are supported by the exporter, SVGMagic will be able to draw and animate the resulting SVG. On the other hand, if the SVG contains CSS, or any other script language, after the export, it will not be the case. What is the SMIL standard on which SVG animations are based? SMIL is a standard describing how a media may change its properties over time. More information may be found here:\n\n https://www.w3.org/TR/SVG11/animate.html. And here are typical SMIL-based animated SVG, well supported by SVGMagic :\n\n https://github.com/SamHerbert/SVG-Loaders/tree/master/svg-loaders. What are the known SVGMagic library limitations?\n• The SVGMagic library isn't compatible with FireMonkey, and there is no plan actually to make it compatible.\n• The CSS instructions aren't supported, only SVG instructions following the SVG1.1 (SMIL) standards are supported.\n• The SVGMagic library isn't compatible with Embarcadero versions prior to XE2.\n• Some SVG patterns instructions may not work.\n• Effects (e.g blur) are not supported for now.\n• Several very complex animations (e.g which use paths) may not work.\n• The font weights are not supported for now, due to a GDI/GDI+ limitation."
    },
    {
        "link": "https://stackoverflow.com/questions/9825513/delphi-loading-timage-from-createblobstream-ado-query",
        "document": "does not hold a unless you tell it to. It starts out empty, so the property is null. That's why you get an access violation when you try to call methods on it.\n\nIf you don't already know what kind of graphic you've stored, you'll either have to write something that inspects the contents of the field to figure it out, or add another field to your database that describes the format of the graphic field.\n\nOnce you know what kind of graphic you have, you can create an instance of that class, load it from the stream, and assign it to the container. Free your graphic afterward since creates its own copy of the graphic. Here's an example:\n\nIf the known type is always one of the graphic properties that already has, then you can access the type-specific property directly and skip the step of allocating your own graphic object. For example, if your database holds bitmaps, then you can access instead of . Then will create a object automatically. For example:"
    },
    {
        "link": "https://stackoverflow.com/questions/18214686/saving-and-loading-jpeg-images-to-database-not-working-delphi",
        "document": "I'm trying to make a program that saves images in a database. I've pulled together some info on the net and wrote up code that I think is supposed to work, but fails in a completely unique way on either side (the saving and the loading).\n\nHere's my code, could you tell me what I'm doing wrong?\n\nLoad from Database, gives me a memory address access violation error:\n\nSaving to the database. This code doesn't give an error as such, but it just doesn't save the image to the database:"
    },
    {
        "link": "https://theswissbay.ch/pdf/Gentoomen%20Library/Programming/Delphi/Delphi/Delphi%20-%20Using%20ADO%20from%20Delphi.pdf",
        "document": ""
    },
    {
        "link": "https://chiefdelphi.com/t/displaying-camera-image-in-c-dashboard/102356",
        "document": ""
    },
    {
        "link": "https://en.delphipraxis.net/topic/6257-wsocket1-send-image-as-memory-stream",
        "document": "This is the way to send the content of the stream.\n\nBut you have a problem for the receiver: how will the receiver know the length of the stream? It would be OK if this is the only thing sent for the whole session. Not a very good design. You should probably first send an integer with the stream size and then the stream content. The receiver will then first receive the length and then know how many byte it has to receive for the content.\n\nAlso, you don't need to decode the JPEG before sending. Just load the file into the memory stream. The receiver will decode the JPEG. This will result in much less data sent thru the network.\n\nI don't know why you want to send the image using a bare socket. Bette to use a higher level component such as HTTP of FTP.\n\nSince you have not explained your whole problem, I cannot help you more."
    }
]