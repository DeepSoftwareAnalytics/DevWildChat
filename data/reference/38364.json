[
    {
        "link": "https://wiki.videolan.org/VLC_command-line_help",
        "document": "will create a .TXT file containing all the command-line options.\n\nYou can also use this to get more exhaustive list:\n\nIf you look for help, on a particular module, you can also use\n\nexplains things. Omit this option if too much output is generated\n\nTo view this without leaving the command-line in Windows, use the following command (assuming you installed it in the default folder):\n\nThis trick uses the command-line command to show the file screen-by-screen. Pressing spacebar will advance the output a screen at a time, and pressing enter will advance the output one line at a time.\n\nHere's the output of vlc -H of vlc-4.0.0-dev under Windows. If the text is too small, pressing and together in most browsers will increase the font size (reset with and together)."
    },
    {
        "link": "https://stackoverflow.com/questions/78668114/how-do-i-get-the-pts-of-a-video-stream-from-the-vlc-plugin-for-unity",
        "document": "I'm working on a Unity project using the VLC plugin to display a live streaming, and I want access to the PTS for each frame to synchronize other things happening in my scene.\n\nI've been looking closely at the libraries and forums, but unfortunately can't figure out how to access it. Neither the Media class nor the LibVLC class provide access to the streamed data (afaik). Maybe this is not possible at all?\n\nThank you in advance!"
    },
    {
        "link": "https://reddit.com/r/VLC/comments/1jepv8r/how_to_play_synchronized_video_folders_in_vlc",
        "document": "Hello everyone, I’m looking for an efficient way to play back recordings from my security camera system on my PC, but in a synchronized manner, so I can view footage from two cameras happening at the same time.\n\nCurrently, the videos are organized in folders by date and camera (e.g., January 10 Camera 1, January 10 Camera 2, January 11 Camera 1, etc.). The problem is that, to review them, I manually open two VLC windows and drag the corresponding folders to each window. This is quite inconvenient because:\n• I have to pause, fast forward, rewind, or adjust the playback speed in each window individually.\n• I always struggle to \"synchronize them by eye,\" which can be frustrating.\n• Since I review the recordings at accelerated speeds (x32), any desynchronization becomes even more noticeable.\n\nI tried using VLC's synchronized playback feature, but it’s inconsistent; with some videos, it simply doesn’t work, and I’ve never managed to make it work with entire folders.\n\nHow could I solve this? Ideally, I’m looking for something that allows me to handle both camera videos in a synchronized way, with an accelerated playback option (x32 or x64), all within a single interface.\n\nI’m trying to track down my lost turtle, so I’d really appreciate any suggestions or support. Thanks in advance!"
    },
    {
        "link": "http://forum.videolan.org/viewtopic.php?t=117358",
        "document": "How to Sync Different Video Files Recorded with NTP\n\nI searched the forums and I came across some sync options/software (like netsync and syncplay) but they seem to be mostly aimed at synching the same file on multiple players.\n\n \n\n I'm building an application that views and records four AV streams from four cameras using nVLC (in c#.Net). The playback streams themselves are designed using the traditional VLC command lines. I'm using a laptop connected to a switch and four IP cameras are connected to this switch and the IP cameras are streaming H.264 video over RTSP. The laptop has an NTP server software on it and this keeps the cameras synched with the laptop. My problem is that I don't know how to sync the videos on playback so that they're playing the same scene (from different angles) at the same time. Is there a way similar to how VLC syncs the audio and video of one RTSP stream that I can use to sync the videos of two or more (AV file playback) streams together (perhaps to one master video?). Sorry if I missed anything obvious, I've been researching this for a few weeks."
    },
    {
        "link": "https://stackoverflow.com/questions/44716952/mpeg2-ts-pcr-and-pts",
        "document": "The PCR is there for over the air and satellite transmission. As you know, PTS is 90000 ticks per second. But first the encoder and decoder needs to decide on the definition of a second. A decoders clock could run a little fast (causing buffering) or a little slow (causing memory exhaustion). The PCR is a signal sent very frequently to keep these clocks synced in one way signal transmission. This is less of an issue today as devices are connected to the internet and regularly sync their clock via a separate method. For your purpose, yes just using the PTS from another stream will work fine as, as unless you are are making a broadcast encoder for Motorola, it won't matter."
    },
    {
        "link": "https://osqa-ask.wireshark.org/questions/31108/time-stamping-issue",
        "document": "I use a Gigamon Switch to tap network devices. The Gigamon performs it's own time stamping and adds it's own header in each packet, the time is taken remotely from a NTP source (GPS). Connected to the Gigamon is a Wireshark server (tool port definition in Gigamon terms). So data is sent from the network device onto passive tap, then onto the Gigamon (network port in Gigamon terminology), data is sent through the chassis and forwarded on to a Gigamon tool port (Wireshark server in my case).\n\nWhen data is captured I see a major difference is time stamps for each packet (usually 8-10ms).\n\nAs you can see above the time difference between frame entering the Wire and the Gigagmon time stamp in the hello packet is approx 9ms out.\n\n9ms is a lot, I would expect only µs difference. I logged a support call with Gigamon who said that NTP can be out 10ms + , their suggestion to use their own GPS input antenna on the device. I wouldn't expect that an NTP clock could be out by 10ms.\n\nAs you can see below the Tool (Wireshark Server) the Primary NTP delay is 1ms, well there is a reason for this delay, we are using a NTP Clock located in another Data Centre, until we buy a new clock. The RTT between Data Centres in 1ms (.5ms is either direction)\n\nMy question is how could there is a 10ms delay between the Frame and Gigamon TS? Can NTP be out by 10MS? Anyone seen this issue before. I work for a low latency financial where accurate timing is imperative."
    },
    {
        "link": "https://sharkfest.wireshark.org/retrospective/sfus/presentations17/15.pdf",
        "document": ""
    },
    {
        "link": "https://geeksforgeeks.org/time-stamps-in-wireshark",
        "document": "A timestamp is a sequence of characters that determines when a certain event occurred, usually the date and time of day and even accurately to a small fraction of a second. When we capture packets in Wireshark, each and every packet is time-stamped and saved to the capture file, so that it can be used for further analysis. The packets get their timestamp from the libpcap (Npcap) library. The host kernel provides the system’s time to the libpcap library.\n\nThe internal format of the packet captured by Wireshark typically consists of the date and time of day (in nanoseconds). However, we can change the format in which the Wireshark displays the time stamp by changing the format in the “Time Display Format” menu item in the “View” menu.\n\nThe timestamp data between the capture file format and the internal format can be changed while reading and writing a capture file.\n\nA different capture file supports different time stamp precision in which time varies from one second to one nanosecond. A capture file might have a fixed precision or it can store the time stamp precision itself.\n\nThe captured file format of the libpcap library used by Wireshark supports a fixed microsecond resolution. If we load a capture file with nanosecond resolution and store the capture data in a libpcap file having microsecond resolution then Wireshark lowers the precision from nanosecond to microsecond.\n\nThe timestamp provided by the external NIC’s is not very precise because the captured packets have to traverse through the USB cable until they reach the host kernel. Since the incoming packets are timestamped when they are processed by the kernel, therefore this makes the timestamp with external NIC’s inaccurate."
    },
    {
        "link": "https://stackoverflow.com/questions/42375791/wireshark-show-time-in-milliseconds",
        "document": "Old question, not sure if you already have the answer. I got the same \"Problem\" recently, and figured out there is an option of \"millisecond/microsecond/nanosecond\" in View --> Time Display Format menu. It was set to second by default. Select millisecond, it'll show million second."
    },
    {
        "link": "https://wireshark.org/docs/wsug_html",
        "document": "D.3. : Capturing with “tcpdump” for viewing with Wireshark D.4. : Capturing with “dumpcap” for viewing with Wireshark Wireshark comes with an array of command line tools which can be helpful for packet analysis. Some of these tools are described in this chapter. You can find more information about all of Wireshark’s command line tools on the web site. TShark is a terminal oriented version of Wireshark designed for capturing and displaying packets when an interactive user interface isn’t necessary or available. It supports the same options as . For more information on consult your local manual page ( ) or the online version. Help information available from . TShark (Wireshark) 4.5.0 (v4.5.0rc0-1519-gdac4ac7b76ff) Dump and analyze network traffic. See https://www.wireshark.org for more information. Usage: tshark [options] ... Capture interface: -i <interface>, --interface <interface> name or idx of interface (def: first non-loopback) -f <capture filter> packet filter in libpcap filter syntax -s <snaplen>, --snapshot-length <snaplen> packet snapshot length (def: appropriate maximum) -p, --no-promiscuous-mode don't capture in promiscuous mode -I, --monitor-mode capture in monitor mode, if available -B <buffer size>, --buffer-size <buffer size> size of kernel buffer in MiB (def: 2MiB) -y <link type>, --linktype <link type> link layer type (def: first appropriate) --time-stamp-type <type> timestamp method for interface -D, --list-interfaces print list of interfaces and exit -L, --list-data-link-types print list of link-layer types of iface and exit --list-time-stamp-types print list of timestamp types for iface and exit Capture display: --update-interval interval between updates with new packets, in milliseconds (def: 100ms) Capture stop conditions: -c <packet count> stop after n packets (def: infinite) -a <autostop cond.> ..., --autostop <autostop cond.> ... duration:NUM - stop after NUM seconds filesize:NUM - stop this file after NUM KB files:NUM - stop after NUM files packets:NUM - stop after NUM packets Capture output: -b <ringbuffer opt.> ..., --ring-buffer <ringbuffer opt.> duration:NUM - switch to next file after NUM secs filesize:NUM - switch to next file after NUM KB files:NUM - ringbuffer: replace after NUM files packets:NUM - switch to next file after NUM packets interval:NUM - switch to next file when the time is an exact multiple of NUM secs printname:FILE - print filename to FILE when written (can use 'stdout' or 'stderr') Input file: -r <infile>, --read-file <infile> set the filename to read from (or '-' for stdin) Processing: -2 perform a two-pass analysis -M <packet count> perform session auto reset -R <read filter>, --read-filter <read filter> packet Read filter in Wireshark display filter syntax (requires -2) -Y <display filter>, --display-filter <display filter> packet displaY filter in Wireshark display filter syntax -n disable all name resolutions (def: \"mNd\" enabled, or as set in preferences) -N <name resolve flags> enable specific name resolution(s): \"mtndsNvg\" -d <layer_type>==<selector>,<decode_as_protocol> ... \"Decode As\", see the man page for details Example: tcp.port==8888,http -H <hosts file> read a list of entries from a hosts file, which will then be written to a capture file. (Implies -W n) --enable-protocol <proto_name> enable dissection of proto_name --disable-protocol <proto_name> disable dissection of proto_name --only-protocols <protocols> Only enable dissection of these protocols, comma separated. Disable everything else --disable-all-protocols Disable dissection of all protocols --enable-heuristic <short_name> enable dissection of heuristic protocol --disable-heuristic <short_name> disable dissection of heuristic protocol Output: -w <outfile|-> write packets to a pcapng-format file named \"outfile\" (or '-' for stdout). If the output filename has the .gz extension, it will be compressed to a gzip archive --capture-comment <comment> add a capture file comment, if supported -C <config profile> start with specified configuration profile --global-profile use the global profile instead of personal profile -F <output file type> set the output file type; default is pcapng. an empty \"-F\" option will list the file types -V add output of packet tree (Packet Details) -O <protocols> Only show packet details of these protocols, comma separated -P, --print print packet summary even when writing to a file -S <separator> the line separator to print between packets -x add output of hex and ASCII dump (Packet Bytes) --hexdump <hexoption> add hexdump, set options for data source and ASCII dump all dump all data sources (-x default) frames dump only frame data source ascii include ASCII dump text (-x default) delimit delimit ASCII dump text with '|' characters noascii exclude ASCII dump text time include frame timestamp preamble notime do not include frame timestamp preamble (-x default) help display help for --hexdump and exit -T pdml|ps|psml|json|jsonraw|ek|tabs|text|fields|? format of text output (def: text) -j <protocolfilter> protocols layers filter if -T ek|pdml|json selected (e.g. \"ip ip.flags text\", filter does not expand child nodes, unless child is specified also in the filter) -J <protocolfilter> top level protocol filter if -T ek|pdml|json selected (e.g. \"http tcp\", filter which expands all child nodes) -e <field> field to print if -Tfields selected (e.g. tcp.port, _ws.col.info) this option can be repeated to print multiple fields -E<fieldsoption>=<value> set options for output when -Tfields selected: bom=y|n print a UTF-8 BOM header=y|n switch headers on and off separator=/t|/s|<char> select tab, space, printable character as separator occurrence=f|l|a print first, last or all occurrences of each field aggregator=,|/s|<char> select comma, space, printable character as aggregator quote=d|s|n select double, single, no quotes for values -t (a|ad|adoy|d|dd|e|r|u|ud|udoy)[.[N]]|.[N] output format of time stamps (def: r: rel. to first) -u s|hms output format of seconds (def: s: seconds) -l flush standard output after each packet (implies --update-interval 0) -q be more quiet on stdout (e.g. when using statistics) -Q only log true errors to stderr (quieter than -q) -g enable group read access on the output file(s) -W n Save extra information in the file, if supported. n = write network address resolution information -X <key>:<value> eXtension options, see the man page for details -U tap_name PDUs export mode, see the man page for details -z <statistics> various statistics, see the man page for details --export-objects <protocol>,<destdir> save exported objects for a protocol to a directory named \"destdir\" --export-tls-session-keys <keyfile> export TLS Session Keys to a file named \"keyfile\" --color color output text similarly to the Wireshark GUI, requires a terminal with 24-bit color support Also supplies color attributes to pdml and psml formats (Note that attributes are nonstandard) --no-duplicate-keys If -T json is specified, merge duplicate keys in an object into a single key with as value a json array containing all values --elastic-mapping-filter <protocols> If -G elastic-mapping is specified, put only the specified protocols within the mapping file --temp-dir <directory> write temporary files to this directory (default: /tmp) --compress <type> compress the output file using the type compression format Diagnostic output: --log-level <level> sets the active log level (\"critical\", \"warning\", etc.) --log-fatal <level> sets level to abort the program (\"critical\" or \"warning\") --log-domains <[!]list> comma-separated list of the active log domains --log-fatal-domains <list> list of domains that cause the program to abort --log-debug <[!]list> list of domains with \"debug\" level --log-noisy <[!]list> list of domains with \"noisy\" level --log-file <path> file to output messages to (in addition to stderr) Miscellaneous: -h, --help display this help and exit -v, --version display version info and exit -o <name>:<value> ... override preference setting -K <keytab> keytab file to use for kerberos decryption -G [report] dump one of several available reports and exit default report=\"fields\" use \"-G help\" for more help Dumpcap can benefit from an enabled BPF JIT compiler if available. You might want to enable it by executing: \"echo 1 > /proc/sys/net/core/bpf_jit_enable\" Note that this can make your system less secure! D.3. : Capturing with “tcpdump” for viewing with Wireshark It’s often more useful to capture packets using rather than . For example, you might want to do a remote capture and either don’t have GUI access or don’t have Wireshark installed on the remote machine. Older versions of truncate packets to 68 or 96 bytes. If this is the case, use to capture full-sized packets: You will have to specify the correct interface and the name of a file to save into. In addition, you will have to terminate the capture with ^C when you believe you have captured enough packets. is not part of the Wireshark distribution. You can get it from https://www.tcpdump.org/ or as a standard package in most Linux distributions. For more information on consult your local manual page ( ) or the online version. D.4. : Capturing with “dumpcap” for viewing with Wireshark Dumpcap is a network traffic dump tool. It captures packet data from a live network and writes the packets to a file. Dumpcap’s native capture file format is pcapng, which is also the format used by Wireshark. By default, Dumpcap uses the pcap library to capture traffic from the first available network interface and writes the received raw packet data, along with the packets’ time stamps into a pcapng file. The capture filter syntax follows the rules of the pcap library. For more information on consult your local manual page ( ) or the online version. Help information available from . Dumpcap (Wireshark) 4.5.0 (v4.5.0rc0-1954-gf0e43e21168b) Capture network packets and dump them into a pcapng or pcap file. See https://www.wireshark.org for more information. Usage: dumpcap [options] ... Capture interface: -i <interface>, --interface <interface> name or idx of interface (def: first non-loopback) or for remote capturing, use this format: TCP@<host>:<port> --ifname <name> name to use in the capture file for a pipe from which we're capturing --ifdescr <description> description to use in the capture file for a pipe from which we're capturing -f <capture filter> packet filter in libpcap filter syntax -s <snaplen>, --snapshot-length <snaplen> packet snapshot length (def: appropriate maximum) -p, --no-promiscuous-mode don't capture in promiscuous mode -I, --monitor-mode capture in monitor mode, if available -B <buffer size>, --buffer-size <buffer size> size of kernel buffer in MiB (def: 2MiB) -y <link type>, --linktype <link type> link layer type (def: first appropriate) --time-stamp-type <type> timestamp method for interface -D, --list-interfaces print list of interfaces and exit -L, --list-data-link-types print list of link-layer types of iface and exit --list-time-stamp-types print list of timestamp types for iface and exit --update-interval interval between updates with new packets, in milliseconds (def: 100ms) -d print generated BPF code for capture filter -k <freq>,[<type>],[<center_freq1>],[<center_freq2>] set channel on wifi interface -S print statistics for each interface once per second -M for -D, -L, and -S, produce machine-readable output Stop conditions: -c <packet count> stop after n packets (def: infinite) -a <autostop cond.> ..., --autostop <autostop cond.> ... duration:NUM - stop after NUM seconds filesize:NUM - stop this file after NUM kB files:NUM - stop after NUM files packets:NUM - stop after NUM packets Output (files): -w <filename> name of file to save (def: tempfile) -g enable group read access on the output file(s) -b <ringbuffer opt.> ..., --ring-buffer <ringbuffer opt.> duration:NUM - switch to next file after NUM secs filesize:NUM - switch to next file after NUM kB files:NUM - ringbuffer: replace after NUM files packets:NUM - ringbuffer: replace after NUM packets interval:NUM - switch to next file when the time is an exact multiple of NUM secs printname:FILE - print filename to FILE when written (can use 'stdout' or 'stderr') -F output file type (default: pcapng) an empty \"-F\" option will list the file types -n use pcapng format instead of pcap (default) -P use libpcap format instead of pcapng --capture-comment <comment> add a capture comment to the output file (only for pcapng) --temp-dir <directory> write temporary files to this directory (default: /tmp) Diagnostic output: --log-level <level> sets the active log level (\"critical\", \"warning\", etc.) --log-fatal <level> sets level to abort the program (\"critical\" or \"warning\") --log-domains <[!]list> comma-separated list of the active log domains --log-fatal-domains <list> list of domains that cause the program to abort --log-debug <[!]list> list of domains with \"debug\" level --log-noisy <[!]list> list of domains with \"noisy\" level --log-file <path> file to output messages to (in addition to stderr) Miscellaneous: -N <packet_limit> maximum number of packets buffered within dumpcap -C <byte_limit> maximum number of bytes used for buffering packets within dumpcap -t use a separate thread per interface -q don't report packet capture counts -Q suppress all non-error status messages to stderr --application-flavor <flavor> set the application flavor -v, --version print version information and exit -h, --help display this help and exit Dumpcap can benefit from an enabled BPF JIT compiler if available. You might want to enable it by executing: \"echo 1 > /proc/sys/net/core/bpf_jit_enable\" Note that this can make your system less secure! Example: dumpcap -i eth0 -a duration:60 -w output.pcapng \"Capture packets from interface eth0 until 60s passed into output.pcapng\" Use Ctrl-C to stop capturing at any time. can print information about capture files including the file type, number of packets, date and time information, and file hashes. Information can be printed in human and machine readable formats. For more information on consult your local manual page ( ) or the online version. Help information available from . Capinfos (Wireshark) 4.5.0 (v4.5.0rc0-48-g7b7ca8210417) Print various information (infos) about capture files. See https://www.wireshark.org for more information. Usage: capinfos [options] <infile> ... General infos: -t display the capture file type -E display the capture file encapsulation -I display the capture file interface information -F display additional capture file information -H display the SHA256 and SHA1 hashes of the file -k display the capture comment -p display individual packet comments Size infos: -c display the number of packets -s display the size of the file (in bytes) -d display the total length of all packets (in bytes) -l display the packet size limit (snapshot length) Time infos: -u display the capture duration (in seconds) -a display the timestamp of the earliest packet -e display the timestamp of the latest packet -o display the capture file chronological status (True/False) -S display earliest and latest packet timestamps as seconds Statistic infos: -y display average data rate (in bytes/sec) -i display average data rate (in bits/sec) -z display average packet size (in bytes) -x display average packet rate (in packets/sec) Metadata infos: -n display number of resolved IPv4 and IPv6 addresses -D display number of decryption secrets Output format: -L generate long report (default) -T generate table report -M display machine-readable values in long reports Table report options: -R generate header record (default) -r do not generate header record -B separate infos with TAB character (default) -m separate infos with comma (,) character -b separate infos with SPACE character -N do not quote infos (default) -q quote infos with single quotes (') -Q quote infos with double quotes (\") Miscellaneous: -h, --help display this help and exit -v, --version display version info and exit -C cancel processing if file open fails (default is to continue) -A generate all infos (default) -K disable displaying the capture comment -P disable displaying individual packet comments Options are processed from left to right order with later options superseding or adding to earlier options. If no options are given the default is to display all infos in long report output format. Rawshark reads a stream of packets from a file or pipe, and prints a line describing its output, followed by a set of matching fields for each packet on stdout. For more information on consult your local manual page ( ) or the online version. Help information available from . Rawshark (Wireshark) 4.5.0 (v4.5.0rc0-48-g7b7ca8210417) Dump and analyze network traffic. See https://www.wireshark.org for more information. Usage: rawshark [options] ... Input file: -r <infile>, --read-file <infile> set the pipe or file name to read from Processing: -d <encap:linktype>|<proto:protoname> packet encapsulation or protocol -F <field> field to display -m virtual memory limit, in bytes -n disable all name resolutions (def: \"mNd\" enabled, or as set in preferences) -N <name resolve flags> enable specific name resolution(s): \"mnNtdv\" -p use the system's packet header format (which may have 64-bit timestamps) -R <read filter>, --read-filter <read filter> packet filter in Wireshark display filter syntax -s skip PCAP header on input -Y <display filter>, --display-filter <display filter> packet filter in Wireshark display filter syntax --enable-protocol <proto_name> enable dissection of proto_name --disable-protocol <proto_name> disable dissection of proto_name --only-protocols <protocols> Only enable dissection of these protocols, comma separated. Disable everything else --disable-all-protocols Disable dissection of all protocols --enable-heuristic <short_name> enable dissection of heuristic protocol --disable-heuristic <short_name> disable dissection of heuristic protocol Output: -l flush output after each packet -S format string for fields (%D - name, %S - stringval, %N numval) -t (a|ad|adoy|d|dd|e|r|u|ud|udoy)[.[N]]|.[N] output format of time stamps (def: r: rel. to first) -u s|hms output format of seconds (def: s: seconds) Diagnostic output: --log-level <level> sets the active log level (\"critical\", \"warning\", etc.) --log-fatal <level> sets level to abort the program (\"critical\" or \"warning\") --log-domains <[!]list> comma-separated list of the active log domains --log-fatal-domains <list> list of domains that cause the program to abort --log-debug <[!]list> list of domains with \"debug\" level --log-noisy <[!]list> list of domains with \"noisy\" level --log-file <path> file to output messages to (in addition to stderr) Miscellaneous: -h, --help display this help and exit -v, --version display version info and exit -o <name>:<value> ... override preference setting -K <keytab> keytab file to use for kerberos decryption is a general-purpose utility for modifying capture files. Its main function is to remove packets from capture files, but it can also be used to convert capture files from one format to another, as well as to print information about capture files. For more information on consult your local manual page ( ) or the online version. Help information available from editcap. Editcap (Wireshark) 4.5.0 (v4.5.0rc0-2007-gb95179da6871) Edit and/or translate the format of capture files. See https://www.wireshark.org for more information. Usage: editcap [options] ... <infile> <outfile> [ <packet#>[-<packet#>] ... ] <infile> and <outfile> must both be present; use '-' for stdin or stdout. A single packet or a range of packets can be selected. Packet selection: -r keep the selected packets; default is to delete them. -A <start time> only read packets whose timestamp is after (or equal to) the given time. -B <stop time> only read packets whose timestamp is before the given time. Time format for -A/-B/-R options is YYYY-MM-DDThh:mm:ss[.nnnnnnnnn][Z|+-hh:mm] Unix epoch timestamps are also supported. Duplicate packet removal: --novlan remove vlan info from packets before checking for duplicates. -d remove packet if duplicate (window == 5). -D <dup window> remove packet if duplicate; configurable <dup window>. Valid <dup window> values are 0 to 1000000. NOTE: A <dup window> of 0 with -V (verbose option) is useful to print MD5 hashes. -w <dup time window> remove packet if duplicate packet is found EQUAL TO OR LESS THAN <dup time window> prior to current packet. A <dup time window> is specified in relative seconds (e.g. 0.000001). NOTE: The use of the 'Duplicate packet removal' options with other editcap options except -V may not always work as expected. Specifically the -r, -t or -S options will very likely NOT have the desired effect if combined with the -d, -D or -w. --skip-radiotap-header skip radiotap header when checking for packet duplicates. Useful when processing packets captured by multiple radios on the same channel in the vicinity of each other. --set-unused set unused byts to zero in sll link addr. Packet manipulation: -s <snaplen> truncate each packet to max. <snaplen> bytes of data. -C [offset:]<choplen> chop each packet by <choplen> bytes. Positive values chop at the packet beginning, negative values at the packet end. If an optional offset precedes the length, then the bytes chopped will be offset from that value. Positive offsets are from the packet beginning, negative offsets are from the packet end. You can use this option more than once, allowing up to 2 chopping regions within a packet provided that at least 1 choplen is positive and at least 1 is negative. -L adjust the frame (i.e. reported) length when chopping and/or snapping. -R <framenum>:<time> replace the timestamp for given frame number. Accept the same time format as used for -A/-B options. -t <time adjustment> adjust the timestamp of each packet. <time adjustment> is in relative seconds (e.g. -0.5). -S <strict adjustment> adjust timestamp of packets if necessary to ensure strict chronological increasing order. The <strict adjustment> is specified in relative seconds with values of 0 or 0.000001 being the most reasonable. A negative adjustment value will modify timestamps so that each packet's delta time is the absolute value of the adjustment specified. A value of -0 will set all packets to the timestamp of the first packet. -E <error probability> set the probability (between 0.0 and 1.0 incl.) that a particular packet byte will be randomly changed. -o <change offset> When used in conjunction with -E, skip some bytes from the beginning of the packet. This allows one to preserve some bytes, in order to have some headers untouched. --seed <seed> When used in conjunction with -E, set the seed to use for the pseudo-random number generator. This allows one to repeat a particular sequence of errors. -I <bytes to ignore> ignore the specified number of bytes at the beginning of the frame during MD5 hash calculation, unless the frame is too short, then the full frame is used. Useful to remove duplicated packets taken on several routers (different mac addresses for example). e.g. -I 26 in case of Ether/IP will ignore ether(14) and IP header(20 - 4(src ip) - 4(dst ip)). -a <framenum>:<comment> Add or replace packet comment for given frame number. Any pre-existing packet comments from the input file for the specified frame will be replaced unless used in conjunction with \"--preserve-packet-comments\". --discard-packet-comments Discard all pre-existing packet comments from the input file when writing the output file. Does not discard new comments added by \"-a\" in the same command line. --preserve-packet-comments Preserve from the input file all pre-existing packet comments when adding a new packet comment with \"-a\". Without this option each \"-a\" will cause to be discarded any pre-existing comments for the specified frame. Output File(s): if the output file(s) have the .gz extension, then gzip compression will be used -c <packets per file> split the packet output to different files based on uniform packet counts with a maximum of <packets per file> each. -i <seconds per file> split the packet output to different files based on uniform time intervals with a maximum of <seconds per file> each. -F <capture type> set the output file type; default is pcapng. An empty \"-F\" option will list the file types. -T <encap type> set the output file encapsulation type; default is the same as the input file. An empty \"-T\" option will list the encapsulation types. --inject-secrets <type>,<file> Insert decryption secrets from <file>. List supported secret types with \"--inject-secrets help\". --extract-secrets Extract decryption secrets into the output file instead. Incompatible with other options besides -V. --discard-all-secrets Discard all decryption secrets from the input file when writing the output file. Does not discard secrets added by \"--inject-secrets\" in the same command line. --capture-comment <comment> Add a capture file comment, if supported. --discard-capture-comment Discard capture file comments from the input file when writing the output file. Does not discard comments added by \"--capture-comment\" in the same command line. --compress <type> Compress the output file using the type compression format. Miscellaneous: -h, --help display this help and exit. -V verbose output. If -V is used with any of the 'Duplicate Packet Removal' options (-d, -D or -w) then Packet lengths and MD5 hashes are printed to standard-error. -v, --version print version information and exit. editcap: The available capture file types for the \"-F\" flag are: pcap - Wireshark/tcpdump/... - pcap pcapng - Wireshark/... - pcapng 5views - InfoVista 5View capture btsnoop - Symbian OS btsnoop commview-ncf - TamoSoft CommView NCF commview-ncfx - TamoSoft CommView NCFX dct2000 - Catapult DCT2000 trace (.out format) erf - Endace ERF capture eyesdn - EyeSDN USB S0/E1 ISDN trace format k12text - K12 text file lanalyzer - Novell LANalyzer logcat - Android Logcat Binary format logcat-brief - Android Logcat Brief text format logcat-long - Android Logcat Long text format logcat-process - Android Logcat Process text format logcat-tag - Android Logcat Tag text format logcat-thread - Android Logcat Thread text format logcat-threadtime - Android Logcat Threadtime text format logcat-time - Android Logcat Time text format modpcap - Modified tcpdump - pcap mp2t - MPEG2 transport stream netmon1 - Microsoft NetMon 1.x netmon2 - Microsoft NetMon 2.x nettl - HP-UX nettl trace ngsniffer - Sniffer (DOS) ngwsniffer_1_1 - NetXray, Sniffer (Windows) 1.1 ngwsniffer_2_0 - Sniffer (Windows) 2.00x nokiapcap - Nokia tcpdump - pcap nsecpcap - Wireshark/tcpdump/... - nanosecond pcap nstrace10 - NetScaler Trace (Version 1.0) nstrace20 - NetScaler Trace (Version 2.0) nstrace30 - NetScaler Trace (Version 3.0) nstrace35 - NetScaler Trace (Version 3.5) observer - Viavi Observer rf5 - Tektronix K12xx 32-bit .rf5 format rh6_1pcap - RedHat 6.1 tcpdump - pcap snoop - Sun snoop suse6_3pcap - SuSE 6.3 tcpdump - pcap visual - Visual Networks traffic capture editcap: The available encapsulation types for the \"-T\" flag are: alp - ATSC Link-Layer Protocol (A/330) packets ap1394 - Apple IP-over-IEEE 1394 arcnet - ARCNET arcnet_linux - Linux ARCNET ascend - Lucent/Ascend access equipment atm-pdus - ATM PDUs atm-pdus-untruncated - ATM PDUs - untruncated atm-rfc1483 - RFC 1483 ATM auerlog - Auerswald Log autosardlt - AUTOSAR DLT ax25 - Amateur Radio AX.25 ax25-kiss - AX.25 with KISS header bacnet-ms-tp - BACnet MS/TP bacnet-ms-tp-with-direction - BACnet MS/TP with Directional Info ber - ASN.1 Basic Encoding Rules bluetooth-bredr-bb-rf - Bluetooth BR/EDR Baseband RF bluetooth-h4 - Bluetooth H4 bluetooth-h4-linux - Bluetooth H4 with linux header bluetooth-hci - Bluetooth without transport layer bluetooth-le-ll - Bluetooth Low Energy Link Layer bluetooth-le-ll-rf - Bluetooth Low Energy Link Layer RF bluetooth-linux-monitor - Bluetooth Linux Monitor can20b - Controller Area Network 2.0B chdlc - Cisco HDLC chdlc-with-direction - Cisco HDLC with Directional Info cosine - CoSine L2 debug log dbus - D-Bus dct2000 - Catapult DCT2000 dect_nr - DECT-2020 New Radio (NR) MAC layer docsis - Data Over Cable Service Interface Specification docsis31_xra31 - DOCSIS with Excentis XRA pseudo-header dpauxmon - DisplayPort AUX channel with Unigraf pseudo-header dpnss_link - Digital Private Signalling System No 1 Link Layer dvbci - DVB-CI (Common Interface) ebhscr - Elektrobit High Speed Capture and Replay ems - EMS (EGNOS Message Server) file enc - OpenBSD enc(4) encapsulating interface epon - Ethernet Passive Optical Network erf - Extensible Record Format eri_enb_log - Ericsson eNode-B raw log ether - Ethernet ether-mpacket - IEEE 802.3br mPackets ether-nettl - Ethernet with nettl headers etw - Event Tracing for Windows messages fc2 - Fibre Channel FC-2 fc2sof - Fibre Channel FC-2 With Frame Delimiter fddi - FDDI fddi-nettl - FDDI with nettl headers fddi-swapped - FDDI with bit-swapped MAC addresses fira-uci - FiRa UWB Controller Interface (UCI) protocol. flexray - FlexRay frelay - Frame Relay frelay-with-direction - Frame Relay with Directional Info gcom-serial - GCOM Serial gcom-tie1 - GCOM TIE1 gfp-f - ITU-T G.7041/Y.1303 Generic Framing Procedure Frame-mapped mode gfp-t - ITU-T G.7041/Y.1303 Generic Framing Procedure Transparent mode gprs-llc - GPRS LLC gsm_um - GSM Um Interface hhdlc - HiPath HDLC i2c-linux - I2C with Linux-specific pseudo-header ieee-802-11 - IEEE 802.11 Wireless LAN ieee-802-11-avs - IEEE 802.11 plus AVS radio header ieee-802-11-netmon - IEEE 802.11 plus Network Monitor radio header ieee-802-11-prism - IEEE 802.11 plus Prism II monitor mode radio header ieee-802-11-radio - IEEE 802.11 Wireless LAN with radio information ieee-802-11-radiotap - IEEE 802.11 plus radiotap radio header ieee-802-16-mac-cps - IEEE 802.16 MAC Common Part Sublayer infiniband - InfiniBand ios - Cisco IOS internal ip-ib - IP over IB ip-over-fc - RFC 2625 IP-over-Fibre Channel ip-over-ib - IP over InfiniBand ipfix - RFC 5655/RFC 5101 IPFIX ipmb-kontron - Intelligent Platform Management Bus with Kontron pseudo-header ipmi-trace - IPMI Trace Data Collection ipnet - Solaris IPNET irda - IrDA isdn - ISDN iso14443 - ISO 14443 contactless smartcard standards ixveriwave - IxVeriWave header and stats block jfif - JPEG/JFIF json - JavaScript Object Notation juniper-atm1 - Juniper ATM1 juniper-atm2 - Juniper ATM2 juniper-chdlc - Juniper C-HDLC juniper-ether - Juniper Ethernet juniper-frelay - Juniper Frame-Relay juniper-ggsn - Juniper GGSN juniper-mlfr - Juniper MLFR juniper-mlppp - Juniper MLPPP juniper-ppp - Juniper PPP juniper-pppoe - Juniper PPPoE juniper-st - Juniper Secure Tunnel Information juniper-svcs - Juniper Services juniper-vn - Juniper VN juniper-vp - Juniper Voice PIC k12 - K12 protocol analyzer lapb - LAPB lapd - LAPD layer1-event - EyeSDN Layer 1 event lin - Local Interconnect Network linux-atm-clip - Linux ATM CLIP linux-lapd - LAPD with Linux pseudo-header linux-sll - Linux cooked-mode capture v1 linux-sll2 - Linux cooked-mode capture v2 log_3GPP - 3GPP Phone Log logcat - Android Logcat Binary format logcat_brief - Android Logcat Brief text format logcat_long - Android Logcat Long text format logcat_process - Android Logcat Process text format logcat_tag - Android Logcat Tag text format logcat_thread - Android Logcat Thread text format logcat_threadtime - Android Logcat Threadtime text format logcat_time - Android Logcat Time text format loop - OpenBSD loopback loratap - LoRaTap ltalk - Localtalk mdb - MDB (Multi-Drop Bus) message_analyzer_wfp_capture2_v4 - Message Analyzer WFP Capture2 v4 message_analyzer_wfp_capture2_v6 - Message Analyzer WFP Capture2 v6 message_analyzer_wfp_capture_auth_v4 - Message Analyzer WFP Capture Auth v4 message_analyzer_wfp_capture_auth_v6 - Message Analyzer WFP Capture Auth v6 message_analyzer_wfp_capture_v4 - Message Analyzer WFP Capture v4 message_analyzer_wfp_capture_v6 - Message Analyzer WFP Capture v6 mime - MIME most - Media Oriented Systems Transport mp2ts - ISO/IEC 13818-1 MPEG2-TS mp4 - MP4 files mpeg - MPEG mtp2 - SS7 MTP2 mtp2-with-phdr - MTP2 with pseudoheader mtp3 - SS7 MTP3 mux27010 - MUX27010 netanalyzer - Hilscher netANALYZER netanalyzer-transparent - Hilscher netANALYZER-Transparent netlink - Linux Netlink netmon_event - Network Monitor Network Event netmon_filter - Network Monitor Filter netmon_header - Network Monitor Header netmon_network_info - Network Monitor Network Info nfc-llcp - NFC LLCP nflog - NFLOG nordic_ble - nRF Sniffer for Bluetooth LE nstrace10 - NetScaler Encapsulation 1.0 of Ethernet nstrace20 - NetScaler Encapsulation 2.0 of Ethernet nstrace30 - NetScaler Encapsulation 3.0 of Ethernet nstrace35 - NetScaler Encapsulation 3.5 of Ethernet null - NULL/Loopback packetlogger - Apple Bluetooth PacketLogger pflog - OpenBSD PF Firewall logs pflog-old - OpenBSD PF Firewall logs, pre-3.4 pktap - Apple PKTAP ppi - Per-Packet Information header ppp - PPP ppp-with-direction - PPP with Directional Info pppoes - PPP-over-Ethernet session raw-icmp-nettl - Raw ICMP with nettl headers raw-icmpv6-nettl - Raw ICMPv6 with nettl headers raw-telnet-nettl - Raw telnet with nettl headers rawip - Raw IP rawip-nettl - Raw IP with nettl headers rawip4 - Raw IPv4 rawip6 - Raw IPv6 redback - Redback SmartEdge rfc7468 - RFC 7468 file rtac-serial - RTAC serial-line ruby_marshal - Ruby marshal object s4607 - STANAG 4607 s5066-dpdu - STANAG 5066 Data Transfer Sublayer PDUs(D_PDU) sccp - SS7 SCCP sctp - SCTP sdh - SDH sdjournal - systemd journal sdlc - SDLC silabs-dch - Silabs Debug Channel sita-wan - SITA WAN packets slip - SLIP socketcan - SocketCAN symantec - Symantec Enterprise Firewall tnef - Transport-Neutral Encapsulation Format tr - Token Ring tr-nettl - Token Ring with nettl headers tzsp - Tazmen sniffer protocol unknown - Unknown unknown-nettl - Unknown link-layer type with nettl headers usb-20 - USB 2.0/1.1/1.0 packets usb-20-full - Full-Speed USB 2.0/1.1/1.0 packets usb-20-high - High-Speed USB 2.0 packets usb-20-low - Low-Speed USB 2.0/1.1/1.0 packets usb-darwin - USB packets with Darwin (macOS, etc.) headers usb-freebsd - USB packets with FreeBSD header usb-linux - USB packets with Linux header usb-linux-mmap - USB packets with Linux header and padding usb-usbpcap - USB packets with USBPcap header user0 - USER 0 user1 - USER 1 user2 - USER 2 user3 - USER 3 user4 - USER 4 user5 - USER 5 user6 - USER 6 user7 - USER 7 user8 - USER 8 user9 - USER 9 user10 - USER 10 user11 - USER 11 user12 - USER 12 user13 - USER 13 user14 - USER 14 user15 - USER 15 v5-ef - V5 Envelope Function vpp - Vector Packet Processing graph dispatch trace vsock - Linux vsock whdlc - Wellfleet HDLC wireshark-upper-pdu - Wireshark Upper PDU export wpan - IEEE 802.15.4 Wireless PAN wpan-nofcs - IEEE 802.15.4 Wireless PAN with FCS not present wpan-nonask-phy - IEEE 802.15.4 Wireless PAN non-ASK PHY wpan-tap - IEEE 802.15.4 Wireless with TAP pseudo-header x2e-serial - X2E serial line capture x2e-xoraya - X2E Xoraya x25-nettl - X.25 with nettl headers xeth - Xerox 3MB Ethernet zbncp - ZBOSS NCP zwave-serial - Z-Wave Serial API packets Mergecap is a program that combines multiple saved capture files into a single output file specified by the argument. Mergecap can read libpcap capture files, including those of tcpdump. In addition, Mergecap can read capture files from snoop (including Shomiti) and atmsnoop, LanAlyzer, Sniffer (compressed or uncompressed), Microsoft Network Monitor, AIX’s iptrace, NetXray, Sniffer Pro, RADCOM’s WAN/LAN analyzer, Lucent/Ascend router debug output, HP-UX’s nettl, and the dump output from Toshiba’s ISDN routers. There is no need to tell Mergecap what type of file you are reading; it will determine the file type by itself. Mergecap is also capable of reading any of these file formats if they are compressed using . Mergecap recognizes this directly from the file; the “.gz” extension is not required for this purpose. By default, Mergecap writes all of the packets in the input capture files to a pcapng file. The flag can be used to specify the capture file’s output format ; it can write the file in libpcap format (standard libpcap format, a modified format used by some patched versions of libpcap, the format used by Red Hat Linux 6.1, or the format used by SuSE Linux 6.3), snoop format, uncompressed Sniffer format, Microsoft Network Monitor 1.x format, and the format used by Windows-based versions of the Sniffer software. Packets from the input files are merged in chronological order based on each frame’s timestamp, unless the flag is specified. Mergecap assumes that frames within a single capture file are already stored in chronological order. When the flag is specified, packets are copied directly from each input file to the output file, independent of each frame’s timestamp. If the flag is used to specify a snapshot length, frames in the input file with more captured data than the specified snapshot length will have only the amount of data specified by the snapshot length written to the output file. This may be useful if the program that is to read the output file cannot handle packets larger than a certain size (for example, the versions of snoop in Solaris 2.5.1 and Solaris 2.6 appear to reject Ethernet frames larger than the standard Ethernet MTU, making them incapable of handling gigabit Ethernet captures if jumbo frames were used). If the flag is used to specify an encapsulation type, the encapsulation type of the output capture file will be forced to the specified type, rather than being the type appropriate to the encapsulation type of the input capture file. Note that this merely forces the encapsulation type of the output file to be the specified type; the packet headers of the packets will not be translated from the encapsulation type of the input capture file to the specified encapsulation type (for example, it will not translate an Ethernet capture to an FDDI capture if an Ethernet capture is read and is specified). For more information on consult your local manual page ( ) or the online version. Help information available from . Mergecap (Wireshark) 4.5.0 (v4.5.0rc0-48-g7b7ca8210417) Merge two or more capture files into one. See https://www.wireshark.org for more information. Usage: mergecap [options] -w <outfile>|- <infile> [<infile> ...] Output: -a concatenate rather than merge files. default is to merge based on frame timestamps. -s <snaplen> truncate packets to <snaplen> bytes of data. -w <outfile>|- set the output filename to <outfile> or '-' for stdout. if the output filename has the .gz extension, it will be compressed to a gzip archive -F <capture type> set the output file type; default is pcapng. an empty \"-F\" option will list the file types. -I <IDB merge mode> set the merge mode for Interface Description Blocks; default is 'all'. an empty \"-I\" option will list the merge modes. --compress <type> compress the output file using the type compression format. Miscellaneous: -h, --help display this help and exit. -V verbose output. -v, --version print version information and exit. A simple example merging and into is shown below. Simple example of using mergecap. There may be some occasions when you wish to convert a hex dump of some network traffic into a capture file. is a program that reads in an ASCII hex dump and writes the data described into any capture file format supported by libwiretap. can read hexdumps with multiple packets in them, and build a capture file of multiple packets. is also capable of generating dummy Ethernet, IP, UDP, TCP or SCTP headers, in order to build fully processable packet dumps from hexdumps of application-level data only. understands a hexdump of the form generated by . In other words, each byte is individually displayed and surrounded with a space. Each line begins with an offset describing the position in the packet, each new packet starts with an offset of 0 and there is a space separating the offset from the following bytes. The offset is a hex number (can also be octal - see ), of more than two hex digits. Here is a sample dump that can recognize: There is no limit on the width or number of bytes per line. Also the text dump at the end of the line is ignored. Bytes/hex numbers can be uppercase or lowercase. Any text before the offset is ignored, including email forwarding characters “>”. Any lines of text between the bytestring lines is ignored. The offsets are used to track the bytes, so offsets must be correct. Any line which has only bytes without a leading offset is ignored. An offset is recognized as being a hex number longer than two characters. Any text after the bytes is ignored (e.g., the character dump). Any hex numbers in this text are also ignored. An offset of zero is indicative of starting a new packet, so a single text file with a series of hexdumps can be converted into a packet capture with multiple packets. Packets may be preceded by a timestamp. These are interpreted according to the format given on the command line. If not, the first packet is timestamped with the current time the conversion takes place. Multiple packets are written with timestamps differing by one microsecond each. In general, short of these restrictions, is pretty liberal about reading in hexdumps and has been tested with a variety of mangled outputs (including being forwarded through email multiple times, with limited line wrap etc.) There are a couple of other special features to note. Any line where the first non-whitespace character is “#” will be ignored as a comment. Any line beginning with #TEXT2PCAP is a directive and options can be inserted after this command to be processed by . Currently there are no directives implemented; in the future, these may be used to give more fine-grained control on the dump and the way it should be processed e.g., timestamps, encapsulation type etc. also allows the user to read in dumps of application-level data, by inserting dummy L2, L3 and L4 headers before each packet. Possibilities include inserting headers such as Ethernet, Ethernet + IP, Ethernet + IP + UDP, or TCP, or SCTP before each packet. This allows Wireshark or any other full-packet decoder to handle these dumps. For more information on consult your local manual page ( ) or the online version. Help information available from text2pcap. Text2pcap (Wireshark) 4.5.0 (v4.5.0rc0-48-g7b7ca8210417) Generate a capture file from an ASCII hexdump of packets. See https://www.wireshark.org for more information. Usage: text2pcap [options] <infile> <outfile> where <infile> specifies input filename (use - for standard input) <outfile> specifies output filename (use - for standard output) Input: -o hex|oct|dec|none parse offsets as (h)ex, (o)ctal, (d)ecimal, or (n)one; default is hex. -t <timefmt> treat the text before the packet as a date/time code; <timefmt> is a format string supported by strptime, with an optional %f descriptor for fractional seconds. Example: The time \"10:15:14.5476\" has the format code \"%H:%M:%S.%f\" The special format string ISO supports ISO-8601 times. NOTE: Date/time fields from the current date/time are used as the default for unspecified fields. -D the text before the packet starts with an I or an O, indicating that the packet is inbound or outbound. This is used when generating dummy headers if the output format supports it (e.g. pcapng). -a enable ASCII text dump identification. The start of the ASCII text dump can be identified and excluded from the packet data, even if it looks like a HEX dump. NOTE: Do not enable it if the input file does not contain the ASCII text dump. -r <regex> enable regex mode. Scan the input using <regex>, a Perl compatible regular expression matching a single packet. Named capturing subgroups are used to identify fields: <data> (mand.), and <time>, <dir>, and <seqno> (opt.) The time field format is taken from the -t option Example: -r '^(?<dir>[<>])\\s(?<time>\\d+:\\d\\d:\\d\\d.\\d+)\\s(?<data>[0-9a-fA-F]+)$' could match a file with lines like > 0:00:00.265620 a130368b000000080060 < 0:00:00.295459 a2010800000000000000000800000000 -b 2|8|16|64 encoding base (radix) of the packet data in regex mode (def: 16: hexadecimal) No effect in hexdump mode. Output: if the output file(s) have the .gz extension, then gzip compression will be used. -F <capture type> set the output file type; default is pcapng. an empty \"-F\" option will list the file types. -E <encap type> set the output file encapsulation type; default is ether (Ethernet). An empty \"-E\" option will list the encapsulation types. -l <typenum> set the output file encapsulation type via link-layer type number; default is 1 (Ethernet). See https://www.tcpdump.org/linktypes.html for a list of numbers. Example: -l 7 for ARCNet packets. -m <max-packet> max packet length in output; default is 262144 -N <intf-name> assign name to the interface in the pcapng file. --compress <type> Compress the output file using the type compression format. Prepend dummy header: -e <ethertype> prepend dummy Ethernet II header with specified EtherType (in HEX). Example: -e 0x806 to specify an ARP packet. -i <proto> prepend dummy IP header with specified IP protocol (in DECIMAL). Automatically prepends Ethernet header as well if link-layer type is Ethernet. Example: -i 46 -4 <srcip>,<destip> prepend dummy IPv4 header with specified source and destination addresses. Example: -4 10.0.0.1,10.0.0.2 -6 <srcip>,<destip> prepend dummy IPv6 header with specified source and destination addresses. Example: -6 2001:db8::b3ff:fe1e:8329,2001:0db8:85a3::8a2e:0370:7334 -u <srcp>,<destp> prepend dummy UDP header with specified source and destination ports (in DECIMAL). Automatically prepends Ethernet & IP headers as well. Example: -u 1000,69 to make the packets look like TFTP/UDP packets. -T <srcp>,<destp> prepend dummy TCP header with specified source and destination ports (in DECIMAL). Automatically prepends Ethernet & IP headers as well. Example: -T 50,60 -s <srcp>,<dstp>,<tag> prepend dummy SCTP header with specified source/destination ports and verification tag (in DECIMAL). Automatically prepends Ethernet & IP headers as well. Example: -s 30,40,34 -S <srcp>,<dstp>,<ppi> prepend dummy SCTP header with specified source/destination ports and verification tag 0. Automatically prepends a dummy SCTP DATA chunk header with payload protocol identifier ppi. Example: -S 30,40,34 -P <dissector> prepend EXPORTED_PDU header with specified dissector as the payload DISSECTOR_NAME tag. Automatically sets link type to Upper PDU Export. EXPORTED_PDU payload defaults to \"data\" otherwise. Diagnostic output: --log-level <level> sets the active log level (\"critical\", \"warning\", etc.) --log-fatal <level> sets level to abort the program (\"critical\" or \"warning\") --log-domains <[!]list> comma-separated list of the active log domains --log-fatal-domains <list> list of domains that cause the program to abort --log-debug <[!]list> list of domains with \"debug\" level --log-noisy <[!]list> list of domains with \"noisy\" level --log-file <path> file to output messages to (in addition to stderr) Miscellaneous: -h, --help display this help and exit -v, --version print version information and exit -q don't report processed packet counts lets you reorder a capture file according to the packets timestamp. For more information on consult your local manual page ( ) or the online version. Help information available from reordercap. Reordercap (Wireshark) 4.5.0 (v4.5.0rc0-48-g7b7ca8210417) Reorder timestamps of input file frames into output file. See https://www.wireshark.org for more information. Usage: reordercap [options] <infile> <outfile> Options: -n don't write to output file if the input file is ordered. -h, --help display this help and exit. -v, --version print version information and exit.\n\nAs with the original license and documentation distributed with Wireshark, this document is covered by the GNU General Public License (GNU GPL). If you haven’t read the GPL before, please do so. It explains all the things that you are allowed to do with this code and documentation. GNU GENERAL PUBLIC LICENSE Version 2, June 1991 Copyright (C) 1989, 1991 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The licenses for most software are designed to take away your freedom to share and change it. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users. This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it. (Some other Free Software Foundation software is covered by the GNU Library General Public License instead.) You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software. If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations. Finally, any free program is threatened constantly by software patents. We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary. To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and modification follow. GNU GENERAL PUBLIC LICENSE TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 0. This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License. The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language. (Hereinafter, translation is included without limitation in the term \"modification\".) Each licensee is addressed as \"you\". Activities other than copying, distribution and modification are not covered by this License; they are outside its scope. The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program. You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions: a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License. c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License. (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.) These requirements apply to the modified work as a whole. If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works. But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program. In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License. 3. You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following: a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or, c) Accompany it with the information you received as to the offer to distribute corresponding source code. (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.) The source code for a work means the preferred form of the work for making modifications to it. For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable. However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable. If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance. 5. You are not required to accept this License, since you have not signed it. However, nothing else grants you permission to modify or distribute the Program or its derivative works. These actions are prohibited by law if you do not accept this License. Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it. 6. Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions. You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License. 7. If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all. For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices. Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice. This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded. In such case, this License incorporates the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation. 10. If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission. For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this. Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally. NO WARRANTY 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this when it starts in an interactive mode: Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, the commands you use may be called something other than `show w' and `show c'; they could even be mouse-clicks or menu items--whatever suits your program. You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. Here is a sample; alter the names: Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker. <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice This General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Library General Public License instead of this License."
    }
]