[
    {
        "link": "https://joshwcomeau.com/css/interactive-guide-to-grid",
        "document": "CSS Grid is one of the most amazing parts of the CSS language. It gives us a ton of new tools we can use to create sophisticated and fluid layouts.\n\nIt's also surprisingly complex. It took me quite a while to truly become comfortable with CSS Grid!\n\nIn this tutorial, I'm going to share the biggest üí° lightbulb moments I've had in my own journey with CSS Grid. You'll learn the fundamentals of this layout mode, and see how to do some pretty cool stuff with it. ‚ú®\n\nCSS is comprised of several different layout algorithms, each designed for different types of user interfaces. The default layout algorithm, Flow layout, is designed for digital documents. Table layout is designed for tabular data. Flexbox is designed for distributing items along a single axis.\n\nCSS Grid is the latest and greatest layout algorithm. It's incredibly powerful: we can use it to build complex layouts that fluidly adapt based on a number of constraints.\n\nThe most unusual part of CSS Grid, in my opinion, is that the grid structure, the rows and columns, are defined purely in CSS:\n\nWith CSS Grid, a single DOM node is sub-divided into rows and columns. In this tutorial, we're highlighting the rows/columns with dashed lines, but in reality, they're invisible.\n\nThis is super weird! In every other layout mode, the only way to create compartments like this is by adding more DOM nodes. In Table layout, for example, each row is created with a , and each cell within that row using or :\n\nUnlike Table layout, CSS Grid lets us manage the layout entirely from within CSS. We can slice up the container however we wish, creating compartments that our grid children can use as anchors.\n\nWe opt in to the Grid layout mode with the property:\n\nBy default, CSS Grid uses a single column, and will create rows as needed, based on the number of children. This is known as an implicit grid, since we aren't explicitly defining any structure.\n\nImplicit grids are dynamic; rows will be added and removed based on the number of children. Each child gets its own row.\n\nBy default, the height of the grid parent is determined by its children. It grows and shrinks dynamically. Interestingly, this isn't even a ‚ÄúCSS Grid‚Äù thing; the grid parent is still using Flow layout, and block elements in Flow layout grow vertically to contain their content. Only the children are arranged using Grid layout.\n\nBut what if we give the grid a fixed height? In that case, the total surface area is divided into equally-sized rows:\n\nBy default, CSS Grid will create a single-column layout. We can specify columns using the property:\n\nBy passing two values to ‚Äî and ‚Äî I'm telling the CSS Grid algorithm to slice the element up into two columns.\n\nColumns can be defined using any valid CSS <length-percentage> value (opens in new tab), including pixels, rems, viewport units, and so on. Additionally, we also gain access to a new unit, the unit:\n\nstands for ‚Äúfraction‚Äù. In this example, we're saying that the first column should consume 1 unit of space, while the second column consumes 3 units of space. That means there are 4 total units of space, and this becomes the denominator. The first column eats up ¬º of the available space, while the second column consumes ¬æ.\n\nThe unit brings Flexbox-style flexibility to CSS Grid. Percentages and values create hard constraints, while columns are free to grow and shrink as required, to contain their contents.\n\nTry shrinking this container to see the difference:\n\nIn this scenario, our first column has a cuddly ghost that has been given an explicit width of 55px. But what if the column is too small to contain it?\n‚Ä¢ None Percentage-based columns are rigid, and so our ghost image will overflow, spilling out of the column.\n‚Ä¢ None -based columns are flexible, and so the column won't shrink below its minimum content size, even if that means breaking the proportions.\n\nTo be more precise: the unit distributes extra space. First, column widths will be calculated based on their contents. If there's any leftover space, it'll be distributed based on the values. This is very similar to , as discussed in my Interactive Guide to Flexbox.\n\nIn general, this flexibility is a good thing. Percentages are too strict.\n\nWe can see a perfect example of this with . is a magical CSS property that adds a fixed amount of space between all of the columns and rows within our grid.\n\nCheck out what happens when we toggle between percentages and fractions:\n\nNotice how the contents spill outside the grid parent when using percentage-based columns? This happens because percentages are calculated using the total grid area. The two columns consume 100% of the parent's content area, and they aren't allowed to shrink. When we add 16px of , the columns have no choice but to spill beyond the container.\n\nThe unit, by contrast, is calculated based on the extra space. In this case, the extra space has been reduced by 16px, for the . The CSS Grid algorithm distributes the remaining space between the two grid columns.\n\nWhat happens if we add more than two children to a two-column grid?\n\nInteresting! Our grid gains a second row. The grid algorithm wants to ensure that every child has its own grid cell. It‚Äôll spawn new rows as-needed to fulfill this goal. This is handy in situations where we have a variable number of items (eg. a photo grid), and we want the grid to expand automatically.\n\nIn other situations, though, we want to define the rows explicitly, to create a specific layout. We can do that with the property:\n\nBy defining both and , we've created an explicit grid. This is perfect for building page layouts, like the This was the name given to the most common layout in the days of the early web: a header, sidebar, main content area, and footer. layout at the top of this tutorial.\n\nCSS Grid is a wonderful tool for this sort of thing. We can structure it as a 7-column grid, with each column consuming 1 unit of space:\n\nThis works, but it's a bit annoying to have to count each of those ‚Äôs. Imagine if we had 50 columns!\n\nFortunately, there's a nicer way to solve for this:\n\nThe function will do the copy/pasting for us. We're saying we want 7 columns that are each wide.\n\nHere's the playground showing the full code, if you're curious:\n\nBy default, the CSS Grid algorithm will assign each child to the first unoccupied grid cell, much like how a tradesperson might lay tiles in a bathroom floor.\n\nHere's the cool thing though: we can assign our items to whichever cells we want! Children can even span across multiple rows/columns.\n\nHere's an interactive demo that shows how this works. Click/press and drag to place a child in the grid If you're not using a pointer device like a mouse or touchscreen, keyboard-based controls have also been provided. Check out the ‚ÄúHelp‚Äù screen below for more information. :\n\nThe and properties allow us to specify which track(s) our grid child should occupy.\n\nIf we want the child to occupy a single row or column, we can specify it by its number. will set the child to sit in the third column.\n\nGrid children can also stretch across multiple rows/columns. The syntax for this uses a slash to delineate start and end:\n\nAt first glance, this looks like a fraction, ¬º. In CSS, though, the slash character is not used for division, it's used to separate groups of values. In this case, it allows us to set the start and end columns in a single declaration.\n\nIt's essentially a shorthand for this:\n\nThere's a sneaky gotcha here: The numbers we're providing are based on the column lines, not the column indexes.\n\nIt'll be easiest to understand this gotcha with a diagram:\n\nConfusingly, a 4-column grid actually has 5 column lines. When we assign a child to our grid, we anchor them using these lines. If we want our child to span the first 3 columns, it needs to start on the 1st line and end on the 4th line.\n\nAlright, time to talk about one of the coolest parts of CSS Grid. üòÑ\n\nUsing what we've learned so far, we could structure it like this:\n\nThis works, but there's a more ergonomic way to do this: grid areas.\n\nHere's what it looks like:\n\nLike before, we're defining the grid structure with and . But then, we have this curious declaration:\n\nHere's how this works: We're drawing out the grid we want to create, almost as if we were making Art made out of typographical characters. Popular in the days of command-line computing. . Each line represents a row, and each word is a name we're giving to a particular slice of the grid. See how it sorta looks like the grid, visually?\n\nThen, instead of assigning a child with and , we assign it with !\n\nWhen we want a particular area to span multiple rows or columns, we can repeat the name of that area in our template. In this example, the ‚Äúsidebar‚Äù area spans both rows, and so we write for both cells in the first column.\n\nShould we use areas, or rows/columns? When building explicit layouts like this, I really like using areas. It allows me to give semantic meaning to my grid assignments, instead of using inscrutable row/column numbers. That said, areas work best when the grid has a fixed number of rows and columns. and can be useful for implicit grids.\n\nThere's a big gotcha when it comes to grid assignments: tab order will still be based on DOM position, not grid position.\n\nIt'll be easier to explain with an example. In this playground, I've set up a group of buttons, and arranged them with CSS Grid:\n\nIn the ‚ÄúRESULT‚Äù pane, the buttons appear to be in order. By reading from left to right, and from top to bottom, we go from one to six.\n\nIf you're using a device with a keyboard, try to tab through these buttons. You can do this by clicking the first button in the top left (‚ÄúOne‚Äù), and then pressing to move through the buttons one at a time.\n\nYou should see something like this:\n\nThe focus outline jumps around the page without rhyme or reason, from the user's perspective. This happens because the buttons are being focused based on the order they appear in the DOM.\n\nTo fix this, we should re-order the grid children in the DOM so that they match the visual order, so that I can tab through from left to right, and from top to bottom. This will even work correctly for right-to-left languages like Arabic and Hebrew; CSS Grid columns will be mirrored in these languages, with column 1 being on the right instead of the left. And so, the same DOM order works for all languages.\n\nIn all the examples we've seen so far, our columns and rows stretch to fill the entire grid container. This doesn't need to be the case, however!\n\nFor example, let's suppose we define two columns that are each 90px wide. As long as the grid parent is larger than 180px, there will be some dead space at the end:\n\nWe can control the distribution of the columns using the property:\n\nIf you're familiar with the Flexbox layout algorithm, this probably feels pretty familiar. CSS Grid builds on the alignment properties first introduced with Flexbox, taking them even further.\n\nThe big difference is that we're aligning the columns, not the items themselves. Essentially, lets us arrange the compartments of our grid, distributing them across the grid however we wish.\n\nIf we want to align the items themselves within their columns, we can use the property:\n\nWhen we plop a DOM node into a grid parent, the default behaviour is for it to stretch across that entire column, just like how a in Flow layout will stretch horizontally to fill its container. With , however, we can tweak that behaviour.\n\nThis is useful because it allows us to break free from the rigid symmetry of columns. When we set to something other than , the children will shrink down to their default width, as determined by their contents. As a result, items in the same column can be different widths.\n\nWe can even control the alignment of a specific grid child using the property:\n\nUnlike , which is set on the grid parent and controls the alignment of all grid children, is set on the child. We can think of as a way to set a default value for on all grid children.\n\nSo far, we've been talking about how to align stuff in the horizontal direction. CSS Grid provides an additional set of properties to align stuff in the vertical direction:\n\nis like , but it affects rows instead of columns. Similarly, is like , but it handles the vertical alignment of items inside their grid area, rather than horizontal.\n\nTo break things down even further:\n‚Ä¢ None ‚Äî deals with the DOM nodes within the grid structure.\n\nFinally, in addition to , we also have . This property controls the vertical position of a single grid item within its cell.\n\nThere's one last thing I want to show you. It's one of my favourite little tricks with CSS Grid.\n\nUsing only two CSS properties, we can center a child within a container, both horizontally and vertically:\n\nThe property is a shorthand. It's syntactic sugar for this:\n\nAs we've learned, controls the position of columns. controls the position of rows. In this situation, we have an implicit grid with a single child, and so we wind up with a 1√ó1 grid. pushes both the row and column to the center.\n\nThere are lots of ways to center a div in modern CSS, but this is the only way I know of that only requires two CSS declarations!\n\nIn this tutorial, we've covered some of the most fundamental parts of the CSS Grid layout algorithm, but honestly, there's so much more stuff we haven't talked about!\n\nIf you found this blog post helpful, you might be interested to know that I've created a comprehensive learning resource that goes way deeper. It's called CSS for JavaScript Developers (opens in new tab).\n\nThe course uses the same technologies as my blog, and so it's chock full of interactive explanations. But there are also bite-sized videos, practice exercises, real-world-inspired projects, and even a few mini-games.\n\nIf you found this blog post helpful, you'll love the course. It follows a similar approach, but for the entire CSS language, and with hands-on practice to make sure you're actually developing new skills.\n\nIt's specifically built for folks who use a JS framework like React/Angular/Vue. 80% of the course focuses on CSS fundamentals, but we also see how to integrate those fundamentals into a modern JS application, how to structure our CSS, stuff like that.\n\nIf you struggle with CSS, I hope you'll check it out. Gaining confidence with CSS is game-changing, especially if you're already comfortable with HTML and JS. When you complete the holy trinity, it becomes so much easier to stay in flow, to truly enjoy developing web applications.\n\nYou can learn more here:\n\nI hope you found this tutorial useful. ‚ù§Ô∏è"
    },
    {
        "link": "https://blog.pixelfreestudio.com/how-to-use-css-grid-to-build-interactive-web-layouts",
        "document": "CSS Grid has revolutionized the way we design web layouts. It provides a powerful, flexible, and intuitive way to create complex designs that are responsive and interactive. With CSS Grid, you can easily arrange elements in a two-dimensional grid, offering more control over the placement and alignment of items. This guide will take you through the basics and advanced techniques of using CSS Grid to build interactive web layouts.\n\nCSS Grid is a layout system that allows you to design web pages using a grid-based structure. Unlike other layout methods like floats or flexbox, CSS Grid enables you to create both rows and columns, giving you more control over the entire layout.\n\nThis makes it an excellent choice for complex web designs that require precise placement of elements.\n\nTo start using CSS Grid, you need to define a container as a grid. This is done using the property. Once the container is set to a grid, you can define the structure of your grid using the and properties.\n\nIn this example, the grid container is divided into three equal columns, and the rows will automatically adjust based on the content.\n\nOnce your grid is defined, you can place items within it using the and properties. These properties allow you to specify the starting and ending lines for each item, giving you precise control over their placement.\n\nIn this example, spans from the first to the second column, while spans from the third column to the end and covers two rows.\n\nCSS Grid makes it easy to create responsive layouts using fractional units ( ) and the keyword. Fractional units allow you to distribute space within the grid container evenly. The keyword lets the content size itself automatically.\n\nIn this example, the second column will be twice as wide as the first and third columns, and the rows will adjust based on their content.\n\nTo ensure your grid layout is responsive across different devices, you can use media queries to adjust the grid structure based on the viewport size.\n\nIn this example, the grid will adjust to a single column layout when the viewport width is 768 pixels or less.\n\nGrid areas allow you to name specific sections of the grid and place items within those areas. This technique is useful for creating complex layouts that are easy to manage.\n\nIn this example, the grid is divided into four areas: header, sidebar, content, and footer. Each area is assigned to a grid item, making it easy to manage the layout.\n\nNested grids allow you to create grids within grids, providing even more flexibility for complex designs. You can define a grid container within a grid item and create a separate grid layout for that item.\n\nIn this example, a nested grid is created within one of the grid items, allowing for a more complex and flexible layout.\n\nHover effects can enhance the interactivity of your grid layout, making it more engaging for users. You can change the appearance of grid items when a user hovers over them, providing visual feedback.\n\nIn this example, each grid item will slightly increase in size when hovered over, creating a subtle yet effective interactive effect.\n\nGrid template areas can be particularly useful for creating responsive designs that adapt to different screen sizes. By redefining grid areas within media queries, you can create layouts that change dynamically based on the viewport size.\n\nIn this example, the layout switches from a three-column to a single-column design on smaller screens, ensuring that content remains readable and well-organized.\n\nOne of the strengths of CSS Grid is its ability to handle dynamic content gracefully. Whether you are loading content from an API or allowing users to interact with elements, CSS Grid can adapt to changes without breaking the layout.\n\nFor example, you can create a photo gallery where the number of images varies:\n\nIn this example, the value allows the grid to create as many columns as fit within the container, adjusting the number of columns based on the viewport width and the number of images.\n\nDashboards often require complex, interactive layouts that display various types of information. CSS Grid is an excellent tool for building such layouts due to its flexibility and ease of use.\n\nIn this example, the dashboard layout includes a header, navigation menu, main content area, and footer. Each section is placed within the grid using grid template areas, making it easy to manage and adjust.\n\nInteractive content sections, such as tabs or accordion menus, can be integrated into your CSS Grid layout to enhance user engagement. CSS Grid provides the structure, while JavaScript can be used to handle the interactive behavior.\n\nIn this example, clicking on a tab button will display the corresponding content panel, making the layout interactive.\n\nAnimations and transitions can make your grid layout more dynamic and engaging. CSS Grid works seamlessly with CSS animations and transitions, allowing you to create smooth and visually appealing effects.\n\nIn this example, grid items will move up slightly and change color when hovered over, creating a more interactive and engaging experience.\n\nEnsuring that your CSS Grid layout is accessible to all users is crucial. Use semantic HTML elements and ARIA (Accessible Rich Internet Applications) attributes to improve accessibility. Make sure that all interactive elements are keyboard navigable and provide sufficient color contrast for readability.\n\nIn this example, each grid item can be focused using the keyboard, and the grid container has a label to describe its content.\n\nA responsive image gallery is a common use case for CSS Grid. This type of layout requires flexibility to accommodate different screen sizes and image counts, making CSS Grid an ideal solution.\n\nIn this example, the and functions ensure that the gallery adapts to different screen sizes, creating a fluid and responsive layout.\n\nA blog layout typically includes various sections like the main content, sidebar, and footer. CSS Grid allows you to arrange these sections neatly and responsively.\n\nThis example demonstrates a clean and organized blog layout where the sidebar and main content area are placed side by side, and the header and footer span the entire width.\n\nA pricing table is another practical application of CSS Grid, allowing you to display pricing plans side by side in a structured manner.\n\nIn this example, the pricing plans are displayed in a grid layout, making it easy for users to compare the different options.\n\nA product listing page often features multiple products in a grid format, with each product displaying an image, title, and price.\n\nThis layout adapts to various screen sizes, ensuring that the product listings look great on any device.\n\nGrid gaps can sometimes cause unexpected layout issues, especially in responsive designs. To handle gaps effectively, ensure that you set consistent gap values and adjust them as needed for different screen sizes.\n\nIn this example, the gap between grid items is adjusted for smaller screens to maintain a balanced layout.\n\nOverflow issues can occur when grid items exceed the size of their containers. To prevent this, use the property to manage how content is displayed when it overflows its container.\n\nThis ensures that text within grid items does not overflow and cause layout issues, providing a clean and professional appearance.\n\nDifferent browsers may interpret CSS Grid properties differently, leading to inconsistencies. To ensure cross-browser compatibility, use feature queries and vendor prefixes where necessary.\n\nUsing feature queries and vendor prefixes helps ensure that your grid layout works consistently across different browsers and devices.\n\nWhile CSS Grid is ideal for creating two-dimensional layouts, Flexbox excels at one-dimensional layouts. Combining both can leverage their strengths and create more complex and responsive designs.\n\nIn this example, Flexbox is used within a grid item to align child elements vertically, showcasing how both systems can work together seamlessly.\n\nCSS variables can add dynamic and reusable aspects to your grid layouts. They allow you to define values once and reuse them throughout your CSS, making it easier to maintain and update your layouts.\n\nIn this example, variables are used to define the number of columns and the gap size, allowing for easy adjustments to the layout.\n\nCSS frameworks like Bootstrap and Foundation offer grid systems that can be enhanced with CSS Grid for more complex layouts. Integrating CSS Grid with these frameworks can provide additional flexibility and control.\n\nIn this example, Bootstrap‚Äôs grid system is combined with a nested CSS Grid, allowing for a more detailed and flexible layout within the existing framework.\n\nReflow and repaint are processes that the browser undergoes to render a page, and excessive reflow can degrade performance. CSS Grid can help optimize performance by reducing the need for reflow and repaint during layout changes.\n\nFor example, avoid changing the layout properties frequently within JavaScript. Instead, make use of CSS classes to apply bulk changes:\n\nIn this example, adding a class to the grid container applies multiple layout changes at once, minimizing reflow and repaint.\n\nLazy loading images and other resources can improve page load times and performance. CSS Grid layouts can accommodate lazy-loaded content without disrupting the overall design.\n\nFor example, using the attribute on images:\n\nThis ensures that images load only when they are about to enter the viewport, reducing the initial load time and improving performance.\n\nEfficiently sizing grid items can also contribute to better performance. Using properties like , , and can help the browser render content more efficiently.\n\nIn this example, the columns are sized based on their content, which can help optimize layout performance by reducing unnecessary space allocation.\n\nAsymmetrical layouts can create a visually interesting and dynamic design. CSS Grid allows for precise control over the placement and sizing of elements, making it easy to create asymmetrical layouts.\n\nIn this example, the first grid item spans two columns, creating an asymmetrical and engaging layout.\n\nCSS Grid makes it easy to create overlapping elements, adding depth and interest to your design. By placing grid items in the same grid cell or using negative margins, you can achieve this effect.\n\nIn this example, the overlapping grid item spans multiple columns and rows, creating a layered effect that adds visual interest.\n\nGrid lines and areas can be used creatively to enhance the aesthetic appeal of your layout. By defining specific areas and using grid lines for precise placement, you can create clean and organized designs.\n\nThis example demonstrates how grid areas can be used to clearly define different sections of the layout, resulting in a well-structured and visually appealing design.\n\nCSS Grid offers a powerful and flexible way to create interactive web layouts that are both responsive and visually appealing. By understanding the basics, leveraging advanced techniques, and applying practical use cases, you can build sophisticated layouts that enhance user experience. Whether you‚Äôre creating a simple image gallery or a complex dashboard, CSS Grid provides the tools you need to achieve your design goals. With continuous practice and experimentation, you can master CSS Grid and unlock its full potential for your web design projects.\n‚Ä¢ The Role of Animation in Responsive Web Design\n‚Ä¢ How to Create Loading Animations for Better UX\n‚Ä¢ How to Create Loading Animations for Better UX\n‚Ä¢ Best Practices for Cross-Browser Compatibility in E-Commerce Sites\n‚Ä¢ How to Achieve Cross-Browser Compatibility for Progressive Web Apps (PWAs)"
    },
    {
        "link": "https://w3schools.com/css/css_grid.asp",
        "document": "Try it Yourself ¬ª\n\nThe Grid Layout Module offers a grid-based layout system, with rows and columns.\n\nThe Grid Layout Module allows developers to easily create complex web layouts.\n\nThe Grid Layout Module makes it easier to design a responsive layout structure, without using float or positioning.\n\nThe CSS grid properties are supported in all modern browsers.\n\nThe CSS Grid Layout should be used for two-dimensional layout, with rows AND columns. The CSS Flexbox Layout should be used for one-dimensional layout, with rows OR columns.\n\nA grid layout consists of a parent element (the grid container), with one or more grid items.\n\nAll direct children of the grid container automatically become grid items.\n\nThe element becomes a grid container when its property is set to or ."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Grids",
        "document": "A grid is a collection of horizontal and vertical lines creating a pattern against which we can line up our design elements. They help us to create layouts in which our elements won't jump around or change width as we move from page to page, providing greater consistency on our websites. A grid will typically have columns, rows, and then gaps between each row and column. The gaps are commonly referred to as gutters.\n\nLet's try out grid layouts, here is an example with a container, which has some child items. By default, these items are displayed in a normal flow, causing them to appear one below the other. Similar to how you define flexbox, you define a grid layout by setting the value of the property to . As in the case of flexbox, the property transforms all the direct children of the container into grid items. We have added the following CSS to the file: Unlike flexbox, the items will not immediately look any different. Declaring gives you a one column grid, so your items will continue to display one below the other as they do in normal flow. To see something that looks more grid-like, we'll need to add some columns to the grid. Let's add three 200-pixel columns. You can use any length unit or percentage to create these column tracks. You should see that the items have rearranged themselves such that there's one in each cell of the grid.\n\nIn addition to creating grids using lengths and percentages, we can use . The unit represents one fraction of the available space in the grid container to flexibly size grid rows and columns. Here we change the track listing to the following definition, creating three tracks: You now have flexible tracks. The unit distributes space proportionally, so you can specify different positive values for your tracks. Change your track listing to the following definition, creating one track and two tracks: The first track gets of the available space and the other two tracks get , making the first track larger. You can mix units with fixed length units. In this case, the space needed for the fixed tracks is used up first before the remaining space is distributed to the other tracks. Note: The unit distributes available space, not all space. Therefore, if one of your tracks has something large inside it, there will be less free space to share.\n\nOur 100-pixel tall tracks won't be very useful if we add content into those tracks that is taller than 100 pixels, in which case it would cause an overflow. It might be better to have tracks that are at least 100 pixels tall and can still expand if more content becomes added. A fairly basic fact about the web is that you never really know how tall something is going to be ‚Äî additional content or larger font sizes can cause problems with designs that attempt to be pixel perfect in every dimension. The function lets us set a minimum and maximum size for a track, for example, . The minimum size is 100 pixels, but the maximum is , which will expand to accommodate more content. Here we change the to use a value: If you add extra content, you'll see that the track expands to allow it to fit. Note that the expansion happens right along the row.\n\nAs many columns as will fit We can combine some of the lessons we've learned about track listing, repeat notation, and to create a useful pattern. Sometimes it's helpful to be able to ask grid to create as many columns as will fit into the container. We do this by setting the value of using the function, but instead of passing in a number, pass in the keyword . For the second parameter of the function we use with a minimum value equal to the minimum track size that we would like to have and a maximum of . This works because grid is creating as many 230-pixel columns as will fit into the container, then sharing whatever space is leftover among all the columns. The maximum is which, as we already know, distributes space evenly between tracks.\n\nWe now move on from creating a grid to placing things on the grid. Our grid always has lines ‚Äî these are numbered beginning with 1 and relate to the writing mode of the document. For example, column line 1 in English (written left-to-right) would be on the left-hand side of the grid and row line 1 at the top, while in Arabic (written right-to-left), column line 1 would be on the right-hand side. To position items along these lines, we can specify the start and end lines of the grid area where an item should be placed. There are four properties we can use to do this: These properties accept line numbers as their values, so we can specify that an item should start on line 1 and end on line 3, for example. Alternatively, you can also use shorthand properties that let you specify the start and end lines simultaneously, separated by a forward slash : With out the placement defined, you can see that auto-placement is placing each item into its own cell in the grid. The is taking up (one quarter) and the is taking up (three quarters). Let's arrange all of the elements for our site by using the grid lines. Add the following rules to the bottom of your CSS: Now the and are set to , which means to start at line and ends at line . Note: You can also use the value to target the end column or row line, then count inwards from the end using negative values. Note also that lines count always from the edges of the explicit grid, not the implicit grid.\n\nAn alternative way to arrange items on your grid is to use the property and give the various elements of your design a name. Here we are using the property to define how the 3 rows are laid out. The first row has a value of , the second and the third . We are then using the property to define where elements are placed in the . The rules for are as follows:\n‚Ä¢ You need to have every cell of the grid filled.\n‚Ä¢ To span across two cells, repeat the name.\n‚Ä¢ Areas must be rectangular ‚Äî for example, you can't have an L-shaped area.\n‚Ä¢ Areas can't be repeated in different locations. You can play around with our layout, changing the footer to only sit underneath the article and the sidebar to span all the way down. This is a very nice way to describe a layout because it's clear just from looking at the CSS to know exactly what's happening.\n\nIt's possible to nest a grid within another grid, creating a \"subgrid\". You can do this by setting the property on an item in the parent grid. Let's expand on the previous example by adding a container for articles and using a nested grid to control the layout of multiple articles. While we're using only one column in the nested grid, we can define the rows to be split in a 4:3:3 ratio by using the property. This approach allows us to create a layout where one article at the top of the page has a large display, while the others have a smaller, preview-like layout. To make it easier to work with layouts in nested grids, you can use on and properties. This allows you to leverage the tracks defined in the parent grid. In the following example, we're using line-based placement, enabling the nested grid to span multiple columns and rows of the parent grid. We've added to inherit the parent grid's column tracks while adding a different layout for the rows within the nested grid."
    },
    {
        "link": "https://css-tricks.com/snippets/css/complete-guide-grid",
        "document": "CSS Grid Layout (aka ‚ÄúGrid‚Äù or ‚ÄúCSS Grid‚Äù), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. CSS has always been used to layout our web pages, but it‚Äôs never done a very good job of it. First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). Flexbox is also a very great layout tool, but its one-directional flow has different use cases ‚Äî and they actually work together quite well! Grid is the very first CSS module created specifically to solve the layout problems we‚Äôve all been hacking our way around for as long as we‚Äôve been making websites. The intention of this guide is to present the Grid concepts as they exist in the latest version of the specification. So I won‚Äôt be covering the out-of-date Internet Explorer syntax (even though you can absolutely use Grid in IE 11) or other historical hacks.\n\nAs of March 2017, most browsers shipped native, unprefixed support for CSS Grid: Chrome (including on Android), Firefox, Safari (including on iOS), and Opera. Internet Explorer 10 and 11 on the other hand support it, but it‚Äôs an old implementation with an outdated syntax. The time to build with grid is now! To get started you have to define a container element as a grid with , set the column and row sizes with and , and then place its child elements into the grid with and . Similarly to flexbox, the source order of the grid items doesn‚Äôt matter. Your CSS can place them in any order, which makes it super easy to rearrange your grid with media queries. Imagine defining the layout of your entire page, and then completely rearranging it to accommodate a different screen width all with only a couple lines of CSS. Grid is one of the most powerful CSS modules ever introduced.\n\nBefore diving into the concepts of Grid it‚Äôs important to understand the terminology. Since the terms involved here are all kinda conceptually similar, it‚Äôs easy to confuse them with one another if you don‚Äôt first memorize their meanings defined by the Grid specification. But don‚Äôt worry, there aren‚Äôt many of them. The element on which is applied. It‚Äôs the direct parent of all the grid items. In this example is the grid container. The dividing lines that make up the structure of the grid. They can be either vertical (‚Äúcolumn grid lines‚Äù) or horizontal (‚Äúrow grid lines‚Äù) and reside on either side of a row or column. Here the yellow line is an example of a column grid line. The space between two adjacent grid lines. You can think of them as the columns or rows of the grid. Here‚Äôs the grid track between the second and third-row grid lines. The total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. Here‚Äôs the grid area between row grid lines 1 and 3, and column grid lines 1 and 3. The children (i.e. direct descendants) of the grid container. Here the elements are grid items, but isn‚Äôt. The space between two adjacent row and two adjacent column grid lines. It‚Äôs a single ‚Äúunit‚Äù of the grid. Here‚Äôs the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Scripting/Events",
        "document": "Events are things that happen in the system you are programming, which the system tells you about so your code can react to them. For example, if the user clicks a button on a webpage, you might want to react to that action by displaying an information box. In this article, we discuss some important concepts surrounding events, and look at the fundamentals of how they work in browsers. An understanding of HTML and the fundamentals of CSS, familiarity with JavaScript basics as covered in previous lessons.\n‚Ä¢ What events are ‚Äî a signal fired by the browser when something significant happens, which the developer can run some code in response to.\n‚Ä¢ Setting up event handlers using (and ) and event handler properties.\n‚Ä¢ Inline event handler attributes, and why you shouldn't use them.\n\nWhat is an event? Events are things that happen in the system you are programming ‚Äî the system produces (or \"fires\") a signal of some kind when an event occurs, and provides a mechanism by which an action can be automatically taken (that is, some code running) when the event occurs. Events are fired inside the browser window, and tend to be attached to a specific item that resides in it. This might be a single element, a set of elements, the HTML document loaded in the current tab, or the entire browser window. There are many different types of events that can occur.\n‚Ä¢ The user selects, clicks, or hovers the cursor over a certain element.\n‚Ä¢ The user presses a key on the keyboard.\n‚Ä¢ The user resizes or closes the browser window. You can gather from this (and from glancing at the MDN event reference) that there are a lot of events that can be fired. To react to an event, you attach an event handler to it. This is a block of code (usually a JavaScript function that you as a programmer create) that runs when the event fires. When such a block of code is defined to run in response to an event, we say we are registering an event handler. Note: Event handlers are sometimes called event listeners ‚Äî they are pretty much interchangeable for our purposes, although strictly speaking, they work together. The listener listens out for the event happening, and the handler is the code that runs in response to it happening. Note: Web events are not part of the core JavaScript language ‚Äî they are defined as part of the APIs built into the browser.\n\nIn the following example, we have a single in the page: Then we have some JavaScript. We'll look at this in more detail in the next section, but for now we can just say: it adds an event handler to the button's event, and the handler reacts to the event by setting the page background to a random color: The example output is as follows. Try clicking the button:\n\nIf you've added an event handler using , you can remove it again using the method. For example, this would remove the event handler: Event handlers can also be removed by passing an to and then later calling on the controller owning the . For example, to add an event handler that we can remove with an : const controller = new AbortController(); btn.addEventListener(\"click\", () => { const rndCol = `rgb(${random(255)} ${random(255)} ${random(255)})`; document.body.style.backgroundColor = rndCol; }, { signal: controller.signal } // pass an AbortSignal to this handler ); Then the event handler created by the code above can be removed like this: controller.abort(); // removes any/all event handlers associated with this controller For simple, small programs, cleaning up old, unused event handlers isn't necessary, but for larger, more complex programs, it can improve efficiency. Also, the ability to remove event handlers allows you to have the same button performing different actions in different circumstances: all you have to do is add or remove handlers.\n\nObjects (such as buttons) that can fire events also usually have properties whose name is followed by the name of the event. For example, elements have a property . This is called an event handler property. To listen for the event, you can assign the handler function to the property. For example, we could rewrite the random-color example like this: You can also set the handler property to a named function: With event handler properties, you can't add more than one handler for a single event. For example, you can call on an element multiple times, with different functions specified in the second argument: This is impossible with event handler properties because any subsequent attempts to set the property will overwrite earlier ones:\n\nYou might also see a pattern like this in your code: The earliest method of registering event handlers found on the Web involved event handler HTML attributes (or inline event handlers) like the one shown above ‚Äî the attribute value is literally the JavaScript code you want to run when the event occurs. The above example invokes a function defined inside a element on the same page, but you could also insert JavaScript directly inside the attribute, for example: <button onclick=\"alert('Hello, this is my old-fashioned event handler!');\"> Press me </button> You can find HTML attribute equivalents for many of the event handler properties; however, you shouldn't use these ‚Äî they are considered bad practice. It might seem easy to use an event handler attribute if you are doing something really quick, but they quickly become unmanageable and inefficient. For a start, it is not a good idea to mix up your HTML and your JavaScript, as it becomes hard to read. Keeping your JavaScript separate is a good practice, and if it is in a separate file you can apply it to multiple HTML documents. Even in a single file, inline event handlers are not a good idea. One button is OK, but what if you had 100 buttons? You'd have to add 100 attributes to the file; it would quickly turn into a maintenance nightmare. With JavaScript, you could easily add an event handler function to all the buttons on the page no matter how many there were, using something like this: Finally, many common server configurations will disallow inline JavaScript, as a security measure. You should never use the HTML event handler attributes ‚Äî those are outdated, and using them is bad practice.\n\nSometimes, inside an event handler function, you'll see a parameter specified with a name such as , , or . This is called the event object, and it is automatically passed to event handlers to provide extra features and information. For example, let's rewrite our random color example again slightly: Note: You can find the full source code for this example on GitHub (also see it running live). Here you can see we are including an event object, e, in the function, and in the function setting a background color style on ‚Äî which is the button itself. The property of the event object is always a reference to the element the event occurred upon. So, in this example, we are setting a random background color on the button, not the page. Note: You can use any name you like for the event object ‚Äî you just need to choose a name that you can then use to reference it inside the event handler function. / / is most commonly used by developers because they are short and easy to remember. It's always good to be consistent ‚Äî with yourself, and with others if possible.\n\nSometimes, you'll come across a situation where you want to prevent an event from doing what it does by default. The most common example is that of a web form, for example, a custom registration form. When you fill in the details and click the submit button, the natural behavior is for the data to be submitted to a specified page on the server for processing, and the browser to be redirected to a \"success message\" page of some kind (or the same page, if another is not specified). The trouble comes when the user has not submitted the data correctly ‚Äî as a developer, you want to prevent the submission to the server and give an error message saying what's wrong and what needs to be done to put things right. Some browsers support automatic form data validation features, but since many don't, you are advised to not rely on those and implement your own validation checks. Let's look at an example. First, a simple HTML form that requires you to enter your first and last name: Now some JavaScript ‚Äî here we implement a very simple check inside a handler for the event (the submit event is fired on a form when it is submitted) that tests whether the text fields are empty. If they are, we call the function on the event object ‚Äî which stops the form submission ‚Äî and then display an error message in the paragraph below our form to tell the user what's wrong: const form = document.querySelector(\"form\"); const fname = document.getElementById(\"fname\"); const lname = document.getElementById(\"lname\"); const para = document.querySelector(\"p\"); form.addEventListener(\"submit\", (e) => { if (fname.value === \"\" || lname.value === \"\") { e.preventDefault(); para.textContent = \"You need to fill in both names!\"; } }); Obviously, this is pretty weak form validation ‚Äî it wouldn't stop the user from validating the form with spaces or numbers entered into the fields, for example ‚Äî but it is OK for example purposes. The output is as follows: Note: For the full source code, see preventdefault-validation.html (also see it running live here)."
    },
    {
        "link": "https://stackoverflow.com/questions/4959487/best-way-to-capture-all-key-events-for-a-web-application",
        "document": "I'm a little distraught at the current state of key capturing for web applications. It works great as long as you know your user is going to be typing in a specific place (e.g. an field), but as soon as you want to do global shortcuts for an entire \"application\", it seems to fall apart.\n\nI'm trying to find out if there is a better way to capture all the key events for a web page than the method I am currently using.\n\nMy current method is to use the JQuery Hotkeys plugin, bound to the element, i.e.:\n\nThat works great for most purposes, but for example on Firefox, if the user happens to absentmindedly move their mouse over the navigation bar, the delete key will sometimes result in the user going \"back\", and the key is never received by the handler so that I can stop propagation.\n\nIs there a different element I should be binding to? Is there a better plugin out there for this? Should I just avoid using any keys that are bound to things in common web browsers?\n\nAs more and more web applications look to mimic their desktop counterparts, it seems like this is a basic feature that web developers will increasingly require.\n\nEDIT: I should point out that I am already using and . The main problem seems to be that sometimes the event is never even passed to the bound function. I am basically wondering if anyone has figured out a \"higher\" element to bind to other than . Or is there an alternative I have never even thought of? Embedding an invisible Flash element on the page and then passing all keys from that to JavaScript, for example (I don't think this would work).\n\nI think, at this point, I am doing things the \"standard, well-known way.\" I am trying to see if there is an outside-the-box way that isn't widely known that maybe someone on Stack Overflow knows about :-)."
    },
    {
        "link": "https://medium.com/@francesco.saviano87/mastering-javascript-events-how-to-handle-user-actions-with-ease-9c50f29816b8",
        "document": "JavaScript events are the backbone of making modern websites interactive. They allow developers to capture user actions like clicking a button, scrolling through a page, or submitting a form. Mastering event handling is key to creating responsive web applications that enhance user experience. Whether you‚Äôre building a simple form validation or a complex web game, understanding how events work will save you time and allow you to build dynamic, engaging user interfaces.\n\nIn this post, we‚Äôll dive into JavaScript events ‚Äî what they are, how to use them, and why they‚Äôre crucial for modern web development. You‚Äôll learn the different types of events, how to capture them, and best practices for handling user actions. This guide is perfect for beginner developers looking to take their JavaScript skills to the next level.\n\nBy the end, you‚Äôll be confident in using events to build more interactive and engaging web applications.\n\nPlease note that this content was crafted with the assistance of ChatGPT, an artificial intelligence language model developed by OpenAI. The author has overseen and refined AI‚Äôs contributions to ensure adherence to editorial standards and the accurate reflection of the intended messaging.\n\nWhat Are JavaScript Events and Why Do They Matter?\n\nAt the heart of every interactive web application are JavaScript events. These events are actions or occurrences ‚Äî like clicking a button, typing into a form, or resizing a window ‚Äî that happen in the browser and are detected by JavaScript. By responding to these events, you can create dynamic websites that provide instant feedback to users.\n\nIn JavaScript, events can be triggered by both users and the browser itself. For example, a user may trigger a mouse event by clicking on a button, or the browser might trigger a window event when a page finishes loading. JavaScript events make it possible to capture these actions and execute code that modifies the page without needing to reload it.\n\nThe significance of events lies in their ability to make web pages feel more responsive. Without event handling, websites would function as static documents where every interaction requires a full page reload ‚Äî much like the web of the late 90s. By learning how to handle events in JavaScript, you can dramatically enhance the user experience, making your web applications more fluid and engaging.\n\nHow Do You Listen for Events in JavaScript?\n\nIn JavaScript, the most common way to interact with events is by listening for them. Listening for an event means waiting for a specific action to occur, like a button click, a keypress, or a mouse hover, and then executing a function in response. There are two main methods for adding event listeners in JavaScript:\n\nInline event handlers involve embedding the event-handling function directly in the HTML element. For example, you might use the attribute to trigger an event when a button is clicked:\n\nWhile this method is simple and easy to understand, it has several drawbacks. Inline event handlers mix HTML and JavaScript code, which can make your code harder to maintain and debug as your project grows. Additionally, inline event handlers are less flexible, as you can only bind one event handler per element.\n\nThe recommended and more flexible approach to event handling is using the method. This method allows you to attach multiple event handlers to a single element and keeps your JavaScript code separate from your HTML.\n\nHere‚Äôs an example using :\n\nWith , you can attach as many event listeners as you need to any element, making it ideal for complex, interactive web applications. It also provides better control over when and how events are triggered, and allows for more efficient event delegation, which we‚Äôll cover later in this post.\n\nDifferent Types of Events You Can Handle\n\nJavaScript events come in various forms, each triggered by different user actions or browser behaviors. Understanding these event types is essential for crafting dynamic web applications that can react to anything the user does. Let‚Äôs dive into some of the most common categories of events and what they represent:\n\nMouse events are some of the most frequently used in web development. They are triggered by actions like clicking, hovering, or dragging with the mouse. Examples include:\n‚Ä¢ : Fired when a user clicks on an element.\n‚Ä¢ : Occurs when the mouse pointer moves over an element.\n‚Ä¢ : Fires when the pointer leaves an element.\n\nThese events are invaluable for creating interactive UI components like buttons, image galleries, and navigation menus.\n\nKeyboard events are triggered when a user interacts with their keyboard. These are especially useful for handling form inputs or creating keyboard shortcuts:\n‚Ä¢ : Fires when a key is pressed down.\n‚Ä¢ : Deprecated, but was used to detect keypresses.\n\nWith keyboard events, you can create rich interactions like form validation, shortcuts, or even entire games controlled by keyboard input.\n\nForm elements like input fields, text areas, and select boxes often need special attention. Form events are used to capture and respond to changes in these elements:\n‚Ä¢ : Triggered when the value of an input element changes.\n‚Ä¢ : Fires when an element gains focus (e.g., when a user clicks on a text box).\n\nForm events make it easy to create interactive forms that validate data on the fly, ensuring that user input meets your application‚Äôs requirements before submission.\n\nWindow events are triggered by actions that involve the browser window or document. These are particularly useful when building responsive layouts or when detecting user actions like resizing or scrolling:\n‚Ä¢ : Fired when the entire page has finished loading.\n‚Ä¢ : Triggered when the browser window is resized.\n‚Ä¢ : Fired when the user scrolls within the document.\n\nWindow events are crucial for implementing features like lazy loading of images, sticky headers, or infinite scrolling.\n\nEach of these event categories offers unique ways to interact with users, enabling you to make your web applications more dynamic and responsive.\n\nHow to Use Event Listeners: The Method\n\nThe method is the most powerful and flexible way to handle events in JavaScript. It allows you to attach one or more event handlers to any DOM element without mixing JavaScript directly into your HTML. Unlike inline event handlers, which only allow one function per event, lets you assign multiple functions to a single event, making it the preferred choice for modern web development.\n\nThe basic syntax of is:\n‚Ä¢ : The type of event to listen for, like , , or .\n‚Ä¢ : The function to execute when the event is triggered.\n‚Ä¢ (optional): A boolean that defines whether the event should be captured or bubbled. We‚Äôll discuss this more in the event propagation section.\n\nHere‚Äôs a simple example where an event listener is added to a button element:\n\nIn this example, when the button is clicked, the event triggers the anonymous function, which displays an alert message.\n\nWhy Use Over Inline Handlers?\n\nThere are several advantages to using over older methods like inline event handlers:\n‚Ä¢ Multiple Event Handlers: With , you can attach several event listeners to the same element and event type. For example, you could log a message in the console and change a button‚Äôs color with two different functions.\n\n2. Separation of Concerns: By keeping your JavaScript and HTML separate, your code becomes easier to read, maintain, and debug. This approach is more scalable for larger applications.\n\n3. Capturing and Bubbling Phases: You can control when the event is triggered during its propagation through the DOM. More on this when we discuss event propagation.\n\nUsing is considered a best practice because it keeps your HTML clean, allows for multiple handlers, and provides greater control over how events are processed in your application.\n\nWhen you click on an element in a web page, the event doesn‚Äôt just stop there ‚Äî it can travel through multiple elements. This movement of an event through different layers of the DOM is known as event propagation. In JavaScript, event propagation occurs in two main phases: bubbling and capturing. Understanding these phases is crucial for managing event behavior in complex layouts or nested elements.\n\nBy default, most events in JavaScript follow the bubbling phase, which means the event starts from the target element (the one that was clicked or interacted with) and ‚Äúbubbles up‚Äù through its parent elements, all the way to the root of the document.\n\nFor instance, if you have a button inside a , and the button is clicked, the event will first be handled by the button, then by its parent , and eventually by the of the document.\n\nIf you click on the button, both the button‚Äôs and the div‚Äôs event listeners will trigger, logging messages to the console in that order. This is because the event bubbles from the button to the parent .\n\nThe capturing phase, also known as trickle-down, occurs before the bubbling phase. During this phase, the event starts at the document‚Äôs root and moves down toward the target element. By default, JavaScript events don‚Äôt use the capturing phase unless explicitly specified.\n\nYou can enable capturing by passing a third argument ( ) to :\n\nIn this case, the would catch the event before the button does, because the event is captured as it \"trickles down\" through the DOM.\n\nLet‚Äôs demonstrate the difference with both phases enabled:\n\nWhen you click the button, the console will log:\n\nThis shows how the event travels down the DOM during the capturing phase and then bubbles up after reaching the target.\n\nWhen to Use Bubbling and Capturing\n\nEvent bubbling is generally used more often because it‚Äôs the default behavior, and it works well for most cases. However, event capturing can be useful when you need more control over how events are processed, especially in complex layouts or when dealing with nested elements.\n\nIn many cases, when a user triggers an event ‚Äî like submitting a form or clicking a link ‚Äî the browser will automatically carry out a default action. For instance, submitting a form refreshes the page, and clicking a link takes the user to a new URL. However, there are situations where you want to stop these default behaviors from happening. That‚Äôs where comes in handy.\n\nWhat Does Do?\n\nThe method is used to stop the browser‚Äôs default action for a specific event. Instead of allowing the form to submit or a link to follow its attribute, this method cancels the default action, giving you full control over what happens next.\n\nLet‚Äôs say you have a form, and you want to validate the user‚Äôs input before submitting it. Using allows you to stop the form from submitting until the validation is successful:\n\nIn this example, if the input field is empty, the form will not submit, and an alert will prompt the user to fill out the required field. Without , the form would submit and refresh the page, making it harder for the user to correct their mistake.\n\nImagine you want to prevent a link from navigating to a new page under certain conditions. For example, you might want to warn the user before they leave the current page:\n\nIn this scenario, if the user clicks ‚ÄúCancel‚Äù in the confirmation dialog, the link won‚Äôt be followed, allowing them to stay on the current page. Without , the browser would follow the link immediately after the click.\n‚Ä¢ Form Validation: To prevent form submissions when inputs are incomplete or invalid.\n‚Ä¢ Link Overrides: To control when and how links are followed, especially in single-page applications (SPAs).\n‚Ä¢ Context Menus: To prevent the browser‚Äôs default context menu from appearing on right-click.\n\ngives developers more flexibility and control, making it essential for handling advanced event behaviors and improving user experience.\n\nWhen an event is triggered in JavaScript, it creates an event object that contains important information about the event. This object is automatically passed to the event handler function, allowing developers to access properties like the event type, the element that triggered the event, and even the mouse coordinates at the time of the event. By utilizing this information, you can create more interactive and dynamic user experiences.\n\nHere are some of the most commonly used properties of the event object:\n‚Ä¢ : This property returns the type of event that was triggered (e.g., , ). It's useful for determining what action took place.\n‚Ä¢ : This property provides a reference to the element that triggered the event. You can use to modify the element that was clicked or interacted with.\n‚Ä¢ and : These properties return the X and Y coordinates of the mouse pointer when the event was triggered. This is useful for detecting where on the page a user clicked.\n‚Ä¢ , , and : These boolean properties return if the Alt, Ctrl, or Shift key was pressed during the event. They can be used to detect keyboard modifiers in conjunction with other events.\n\nExample: Accessing the Event Object in a Click Event\n\nLet‚Äôs walk through a practical example where we capture several properties from the event object when a button is clicked:\n\nIn this example:\n‚Ä¢ will log , since that‚Äôs the event being listened for.\n‚Ä¢ will refer to the button that was clicked.\n‚Ä¢ and will return the exact mouse coordinates at the time of the click, which can be useful in scenarios like creating custom tooltips or menus that appear at the click location.\n\nUsing the Event Object to Modify Elements\n\nThe event object can also be used to directly modify the appearance or behavior of elements based on user interactions. For example, you could change the background color of a clicked button:\n\nIn this case, the property refers to the button that was clicked, and the property is used to change its color dynamically.\n\nYou can also use the event object to detect whether a modifier key (e.g., Alt, Ctrl, Shift) was pressed during the event. For example, you can modify the behavior of a click event when the Alt key is held:\n\nThis allows you to add custom behavior for keyboard modifiers, which can be useful for creating shortcuts or enhancing accessibility features.\n\nUsing Event Delegation for Better Performance\n\nAs your web applications grow, you may find yourself attaching event listeners to multiple elements. While this works, it can lead to performance issues, especially if your page has many elements or dynamically generated content. This is where event delegation comes in ‚Äî a technique that lets you handle events efficiently by attaching a single event listener to a parent element instead of each individual child element.\n\nEvent delegation leverages event bubbling, a process where an event triggered on a child element propagates up to its parent elements. Instead of adding separate event listeners to every child, you can attach one listener to the parent element, which will handle events for all its children. This technique is particularly useful when dealing with lists, tables, or dynamically created elements.\n\nLet‚Äôs say you have a list of items, and you want to handle click events for each item. Without event delegation, you would need to attach a listener to each list item like this:\n\nWhile this works, it becomes inefficient if the list contains many items. Instead, you can attach the event listener to the parent element:\n\nIn this example, the click event bubbles up from the clicked list item to the parent . By checking if the event‚Äôs target is a element, you ensure that the click event is only handled when a list item is clicked.\n‚Ä¢ Performance Improvement: Instead of adding multiple event listeners, you can reduce memory usage by attaching just one listener to a parent element. This is especially useful in scenarios where elements are dynamically added or removed.\n‚Ä¢ Simpler Code: With event delegation, you don‚Äôt have to worry about attaching or removing event listeners for dynamically created elements. The single parent listener handles it all.\n‚Ä¢ Scalability: Whether you‚Äôre working with a few elements or thousands, event delegation scales well because the number of event listeners remains constant.\n\nImagine a to-do list where users can add new tasks. Instead of attaching event listeners to each task item when it‚Äôs created, you can delegate the event to the parent list:\n\nIn this example, the parent manages all clicks on its child elements, even for new items added dynamically. This demonstrates how event delegation simplifies event management and improves scalability.\n\nUnlock your JavaScript potential with ‚Äô50 Real-World JavaScript Apps for Beginners and Intermediates.‚Äô Now available for download on both Gumroad and Ko-fi! Start building amazing projects today!\n\nWhile adding event listeners is essential for handling user interactions, it‚Äôs equally important to know how to remove them. Attaching too many event listeners or forgetting to remove them when they are no longer needed can lead to memory leaks and performance issues. Fortunately, JavaScript provides the method, which allows you to remove specific event listeners that were added via .\n\nThe syntax for removing an event listener is nearly identical to adding one:\n‚Ä¢ : The event type you want to remove (e.g., ).\n‚Ä¢ : The exact function that was initially passed to . This must be the same, meaning you cannot remove anonymous functions.\n‚Ä¢ : The same value (either or ) that was used when attaching the event listener, specifying whether the listener was added in the capturing or bubbling phase.\n\nConsider the following example where a click event is added to a button and then removed after it is triggered once:\n\nIn this case, the function is passed to both and . As a result, the button will no longer respond to click events once the listener is removed.\n\nOne limitation of is that it requires the exact reference to the function used in . This means if you attached an event using an anonymous function, you won‚Äôt be able to remove it:\n\nIn the example above, even though the anonymous functions look identical, they are different in memory, so cannot match them.\n‚Ä¢ Store Functions in Variables: To avoid issues with anonymous functions, store your event-handling functions in variables so you can remove them when needed.\n\n2. Remove Unnecessary Event Listeners: It‚Äôs a good practice to remove event listeners when they are no longer needed. For instance, in single-page applications, you may want to remove listeners when navigating away from a specific page.\n\n3. Use Option: If you only need an event to trigger once, consider using the option in :\n\nThis automatically removes the event listener after the first trigger, so you don‚Äôt need to manually remove it.\n\nFailing to remove unused event listeners can lead to memory leaks, especially when listeners are added to elements that are later removed from the DOM. Always remember to remove event listeners when they are no longer necessary, particularly in long-running applications.\n\nis a critical tool for managing the lifecycle of event listeners in your application. By efficiently adding and removing listeners, you can avoid performance bottlenecks and ensure your web applications run smoothly.\n\nAs you become more comfortable with JavaScript event handling, it‚Äôs important to adopt best practices to ensure that your code is efficient, scalable, and maintainable. Poor event handling can lead to performance issues, memory leaks, or hard-to-maintain code, especially as your projects grow in complexity. By following a few key practices, you can prevent these problems and build more robust web applications.\n\nWhile inline event handlers (e.g., using directly in HTML) might seem simple, they mix HTML and JavaScript, leading to less maintainable code. It‚Äôs generally best to keep your JavaScript logic separate from your HTML to ensure better organization and easier debugging. Here‚Äôs an example of an inline handler you should avoid:\n\nInstead, opt for the method in your JavaScript:\n\nThis approach allows you to keep your HTML clean and your JavaScript in one place, making your code easier to manage and understand.\n\n2. Use Event Delegation When Appropriate\n\nAs we discussed earlier, event delegation allows you to handle events efficiently by attaching a single event listener to a parent element rather than individual listeners to every child element. This not only reduces the number of event listeners in your application but also allows you to handle dynamically added elements without extra code.\n\nThis technique is especially useful when dealing with large datasets or when your page structure is complex. For instance, managing events for a long list of items is much more efficient when using event delegation rather than individual event listeners for each item.\n\nOne of the most common issues with JavaScript event handling is memory leaks caused by forgotten or unnecessary event listeners. If your web application adds a lot of event listeners, it‚Äôs crucial to remove them when they‚Äôre no longer needed ‚Äî especially for elements that are removed from the DOM. This ensures that your application doesn‚Äôt hold onto memory unnecessarily, which can slow down performance over time.\n\nUse to clean up unused event listeners, particularly when navigating between different views in a single-page application (SPA) or when removing elements dynamically.\n\n4. Use Passive Event Listeners for Scroll and Touch Events\n\nScroll and touch events are fired frequently and can cause performance bottlenecks, especially on mobile devices. By using passive event listeners, you inform the browser that the event handler will not call , allowing the browser to optimize scrolling performance.\n\nHere‚Äôs how you can use a passive event listener:\n\nThis small change can result in smoother scrolling and better performance, particularly in mobile browsers.\n\nAccessing the DOM (Document Object Model) is relatively slow, so it‚Äôs best to minimize how often you query the DOM inside event handlers. Instead, try caching elements outside the event handler and reusing them:\n\nBy reducing repeated DOM access, you can improve the overall performance of your application, especially if the event handler is triggered frequently, such as with scroll or mouse movement events.\n\n6. Use Throttling or Debouncing for High-Frequency Events\n\nFor events that trigger frequently ‚Äî such as scroll, resize, or mousemove ‚Äî it‚Äôs best to use throttling or debouncing to limit how often your event handler runs. This ensures that the handler doesn‚Äôt run too often, which can affect the performance of your page.\n‚Ä¢ Debouncing delays the execution of the event handler until the event stops firing.\n\nIn this example, the event handler only fires 200 milliseconds after the user has finished resizing the window.\n\nBy following these best practices, you‚Äôll write more efficient and maintainable event-driven JavaScript applications. Proper use of , event delegation, and performance optimization techniques will ensure that your code scales effectively as your projects grow in complexity.\n\nJavaScript events are the foundation of creating dynamic and responsive web applications. By mastering event handling, you‚Äôll be able to create interactive user experiences, improve your code efficiency, and ensure scalability in your projects. From understanding event propagation to utilizing event delegation, applying best practices will elevate your development skills.\n\nTo further expand your knowledge on JavaScript events and front-end development, here are some excellent resources:\n‚Ä¢ Udemy Web Development Bootcamp: A full-stack course that covers everything from JavaScript to building complete web applications.\n\nWith these tools, you‚Äôll be well-equipped to build robust, interactive web applications. Keep exploring and experimenting with event handling, and you‚Äôll find countless ways to enhance your projects."
    },
    {
        "link": "https://designwithrehana.com/handling-keyboard-events-in-javascript",
        "document": "Keyboard events are fundamental to creating interactive web applications. They enable developers to capture and respond to user input via the keyboard, such as typing, pressing specific keys, or activating shortcuts. JavaScript offers robust support for handling keyboard interactions, providing several events to manage user input effectively.\n‚Ä¢ keydown: Triggered when a key is pressed down. It is fired continuously as long as the key remains pressed.\n‚Ä¢ keypress: Triggered when a key is pressed and then released. Note that this event is now considered deprecated and has been replaced by the keydown and keyup events for broader compatibility.\n\nTo capture keyboard events, you can use the addEventListener method, which attaches an event listener to an element or the document object. This allows you to detect when a specific key is pressed or released. Here‚Äôs a basic example:\n‚Ä¢ An event listener is attached to the document.\n‚Ä¢ The callback function is executed whenever a key is pressed, logging the name of the pressed key using the event.key property. This approach is versatile and can be used to listen for keyboard inputs anywhere on the webpage.\n\nKeyboard events in JavaScript provide several properties that offer detailed information about the interaction. These properties allow developers to create precise and context-aware behaviors. Some commonly used properties include:\n‚Ä¢ key: Returns the actual key pressed, such as ‚Äúa‚Äù, ‚ÄúEnter‚Äù, or ‚ÄúArrowUp‚Äù.\n‚Ä¢ keyCode: Returns the numeric Unicode code of the key pressed. For instance, the key ‚ÄúA‚Äù has a keyCode of 65. Note: This property is deprecated.\n‚Ä¢ which: Similar to keyCode, this returns the numeric code of the pressed key but is also deprecated.\n‚Ä¢ altKey: A boolean indicating whether the Alt key was pressed simultaneously.\n‚Ä¢ ctrlKey: A boolean indicating whether the Ctrl key was pressed.\n‚Ä¢ shiftKey: A boolean indicating whether the Shift key was pressed.\n‚Ä¢ metaKey: A boolean indicating whether the Meta key (Command on macOS or Windows key on Windows) was pressed. Here‚Äôs an example to log additional properties:\n\nSometimes, you may want to override the default behavior associated with a key press. For instance, pressing the Enter key in a form typically triggers form submission. You can use the preventDefault method to stop this default action.\n\nKeyboard events propagate through the DOM hierarchy by default. To prevent a keyboard event from propagating further, use the stopPropagation method. This is useful when handling events at a specific level without affecting parent or child elements.\n\nEvent delegation is a technique where you attach an event listener to a parent element to monitor keyboard events for its child elements. This approach improves performance and simplifies code when dealing with dynamically added elements.\n\nFor more insights on JavaScript and web development, visit my website DesignWithRehana or check out my tutorials on YouTube for in-depth explanations and live coding sessions."
    },
    {
        "link": "https://accessibility.asu.edu/articles/javascript",
        "document": ""
    }
]