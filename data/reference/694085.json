[
    {
        "link": "https://geeksforgeeks.org/multidimensional-arrays-in-c",
        "document": "A multi-dimensional array can be defined as an array that has more than one dimension. Having more than one dimension means that it can grow in multiple directions. Some popular multidimensional arrays are 2D arrays and 3D arrays. In this article, we will learn about multidimensional arrays in C programming language.\n\nThe general form of declaring N-dimensional arrays is shown below:\n• type : Type of data to be stored in the array.\n• arr_name : Name assigned to the array.\n\nThe total number of elements that can be stored in a multidimensional array can be calculated by multiplying the size of both dimensions. Consider the array arr[10][20]:\n\nTo get the size in bytes, we multiply the size of a single element (in bytes) by the total number of elements in the array.\n• int arr[10][20] = 10 * 20 * 4 = 800 bytes, where the size of int is 4 bytes.\n\nIn C, there can be many types of arrays depending on their dimensions but two of them are most commonly used:\n\nA two-dimensional array or 2D array is the simplest form of the multidimensional array. We can visualize a two-dimensional array as one-dimensional arrays stacked vertically forming a table with ‘m’ rows and ‘n’ columns. In C, arrays are 0-indexed, so the row number ranges from 0 to (m-1) and the column number ranges from 0 to (n-1).\n\nA 2D array with m rows and n columns can be created as:\n• type: Type of data to be stored in each element.\n• arr_name: Name assigned to the array.\n\nFor example, we can declare a two-dimensional integer array with name ‘arr’ with 10 rows and 20 columns as:\n\nWe can initialize a 2D array by using a list of values enclosed inside ‘{ }’ and separated by a comma as shown in the example below:\n\nThe elements will be stored in the array from left to right and top to bottom. So, the first 4 elements from the left will be filled in the first row, the next 4 elements in the second row, and so on. This is clearly shown in the second syntax where each set of inner braces represents one row.\n\nIn list initialization, we can skip specifying the size of the row. The compiler will automatically deduce it in this case. So, the below declaration is valid.\n\nIt is still compulsory to define the number of columns.\n\nTraversal means accessing all the elements of the array one by one. An element in two-dimensional array is accessed using row indexes and column indexes inside array subscript operator [].\n\nwhere, i and j are row index and column index.\n\nTo traverse the whole array, we will use two loops. One loop to go over each row from top to bottom and the other nested inside it to access each element in the current row from left to right.\n\nThe below example demonstrates the row-by-row traversal of a 2D array.\n\nTime Complexity: O(n * m), where n and m are numbers of rows and columns respectively.\n\nAuxiliary Space: O(1)\n\nHow 2D Arrays are Stored in the Memory?\n\nAs an array, the elements of the 2D array have to be stored contiguously in memory. As the computers have linear memory addresses, the 2-D arrays must be linearized so as to enable their storage. There are two ways to achieve this:\n• Row Major Order: The technique stores the 2D array row after row. It means that the first row is stored first in the memory, then the second row of the array, then the third row, and so on.\n• Column Major Column: This technique stores the 2D array column after column. It means that first column is stored first in the memory, then the second column, then the third column, and so on.\n\nThis allows the random access to the 2D array elements as the computer need not keep track of the addresses of all the elements of the array. It only tracks of the Base Address (starting address of the very first element) and calculates the addresses of other array elements using the base address.\n\nPassing 2D arrays to functions need a specialized syntax so that the function knows that the data being passed is 2d array. The function signature that takes 2D array as argument is shown below:\n\nwhere m and n are the number of rows and columns. We also need to pass these sizes of rows and columns of the array because an array is always passed as pointers.\n\nA Three-Dimensional Array or 3D array in C is a collection of two-dimensional arrays. It can be visualized as multiple 2D arrays stacked on top of each other.\n\nDeclaration of 3D Array in C\n\nWe can declare a 3D array with x 2D arrays each having m rows and n columns using the syntax shown below:\n• type: Type of data to be stored in each element.\n• arr_name: name of the array\n• x: Number of 2D arrays. (also called depth of the array)\n• m: Number of rows in each 2D array.\n• n: Number of columns in each 2D array.\n\nInitialization of 3D Array in C\n\nInitialization in a 3D array is the same as that of 2D arrays. The difference is as the number of dimensions increases so the number of nested braces will also increase.\n\nAgain, just like the 2D arrays, we can also declare the 3D arrays without specifying the size of the first dimensions if we are using initializer list. The compiler will automatically deduce the size of the first dimension. But we still need to specify the rest of the dimensions.\n\nTo access an elements in 3D array, we use three indexes. One for depth, one for row and one for column.\n\nwhere, d, i and j are the indexes for depth (representing a specific 2D array.), the row within that 2D array, and the column within that 2D array respectively.\n\nTo traverse the entire 3D array, you need to use three nested loops: an outer loop that goes through the depth (or the set of 2D arrays), a middle loop goes through the rows of each 2D array and at last an inner loop goes through each element of the current row.\n\nHow 3D Arrays are Stored in the Memory?\n\nLike 2D arrays, the elements of a 3D array should also be stored contiguously in memory.\n\nSince computers have linear memory, the 3D array must also be linearized for storage. We use the same two techniques, the Row Major Order and Column Major Order but with added dimension. The elements are first stored layer by layer (or 2D array by 2D array). Within each 2D array, the elements follow the corresponding row or column major order.\n\nPassing a 3D array to a function in C is similar to passing 2D arrays, but with an additional dimension. When passing a 3D array, you need to pass the sizes of all the dimensions separately because the size information of array is lost while passing.\n\nWe discussed multidimensional array with two examples, the 2D and 3D arrays. The methods which we learned here can be extended to work with arrays with any number of dimensions. However, the complexity also increases as the number of dimensions increases.\n\nIs there a limit to how many dimensions an array can have?\n\nCan I resize a multidimensional array after it is declared?\n\nHow do row-major and column-major orders affect the traversal of arrays?"
    },
    {
        "link": "https://w3schools.com/c/c_arrays_multi.php",
        "document": "In the previous chapter, you learned about arrays, which is also known as single dimension arrays. These are great, and something you will use a lot while programming in C. However, if you want to store data as a tabular form, like a table with rows and columns, you need to get familiar with multidimensional arrays.\n\nA multidimensional array is basically an array of arrays.\n\nArrays can have any number of dimensions. In this chapter, we will introduce the most common; two-dimensional arrays (2D).\n\nA 2D array is also known as a matrix (a table of rows and columns).\n\nTo create a 2D array of integers, take a look at the following example:\n\nThe first dimension represents the number of rows [2], while the second dimension represents the number of columns [3]. The values are placed in row-order, and can be visualized like this:\n\nTo access an element of a two-dimensional array, you must specify the index number of both the row and column.\n\nThis statement accesses the value of the element in the first row (0) and third column (2) of the matrix array.\n\nTo change the value of an element, refer to the index number of the element in each of the dimensions:\n\nThe following example will change the value of the element in the first row (0) and first column (0):\n\nTo loop through a multi-dimensional array, you need one loop for each of the array's dimensions.\n\nThe following example outputs all elements in the matrix array:"
    },
    {
        "link": "https://beginnersbook.com/2014/01/2d-arrays-in-c-example",
        "document": "Please wait while your request is being verified..."
    },
    {
        "link": "https://ccbp.in/blog/articles/two-dimensional-array-in-c",
        "document": "This makes them particularly useful for handling grids, mathematical matrices, game boards, and structured datasets. Programmers can efficiently manage and process data that requires a more structured layout by using a two-dimensional array in c, which improves readability and functionality in their programs.\n\nA two-dimensional array in C is a powerful data structure used to store and organize data in a tabular form, similar to a matrix or a table. Unlike one-dimensional arrays, which store data in a linear format, two-dimensional arrays allow data to be arranged in rows and columns.\n\nA multidimensional array in C is an array that has more than one dimension. Instead of storing values in a single line like a one-dimensional array, it arranges data in a structured format, similar to a table or a grid.\n\nThe general form for declaring N-dimensional arrays is outlined below:\n• Type: Specifies the data type of the array elements (e.g., int, float).\n• Array Name: The identifier used to reference the array.\n• Size of Each Dimension: Defines the number of elements each dimension can hold.\n\nIn C, arrays can have more than one dimension, meaning they can store data in a structured way. While arrays can have multiple dimensions, the two most commonly used types are:\n\nA two-dimensional array is like a table with rows and columns. It allows us to store data in a grid-like format, making it useful for representing matrices, tables, or game boards. It is used in applications where data is arranged in a structured way, such as storing student marks in subjects or representing a chessboard in a game.\n• The array int arr[05][20] can store total of (05*20) = 100 elements.\n• To find the size in bytes, multiply the size of each element (in bytes) by the total number of elements in the array.\n• The size of array int arr[05][20] = 05 * 20 * 4 = 400 bytes, where the size of int is 4 bytes.\n\nA three-dimensional array adds another layer to a 2D array, making it useful for handling more complex data structures. Think of it as multiple 2D arrays stacked together. It is commonly used in graphics, scientific computations, and simulations. For example, a 3D array can store pixel data with different color layers (RGB).\n\nDeclaration of 3D Array in C\n\nA three-dimensional (3D) array is an extension of the 2D array, adding another dimension called depth.\n• Type: Specifies the data type stored in each element (e.g., int, float).\n• Array Name: The identifier used to reference the array.\n• Depth: Number of 2D arrays present in the 3D array.\n• Rows: Number of rows in each 2D array.\n• Columns: Number of columns in each 2D array.\n\nWhat Is Two-Dimensional Array In C?\n\nA two-dimensional array in c is essentially a collection of one-dimensional arrays arranged in a structured format of rows and columns. This forms a grid-like structure that is commonly referred to as a matrix. Each element in a 2D array is identified using two indices: the row number and the column number.\n\nSyntax Of A 2D Array In C\n\nHere, data_type specifies the type of elements stored in the array (e.g., int, float, char), array_name is the chosen name of the array, and [rows][columns] defines the number of rows and columns.\n\nTo declare a two-dimensional array in c of integers with 4 rows and 3 columns, we note:\n\nThis creates a matrix with 4 rows and 3 columns, where each element can be accessed using its row and column index.\n\nMemory Layout of Two-Dimensional Arrays in C\n\nIn C, two-dimensional arrays are stored in row-major order, meaning that all row elements are placed next to each other in memory before moving to the next row. This arrangement confirms that accessing elements row-wise is more efficient because they are stored in consecutive memory locations. On the other hand, accessing elements column-wise can be slower, as it requires jumping across non-contiguous memory locations. When working with large datasets or nested loops learning this memory layout helps optimize performance.\n\nTwo-dimensional arrays in C are stored in contiguous memory locations. This means that all elements are placed in a single memory block, making data access faster when iterating row-wise.\n\nA two-dimensional array is essentially stored as a single block of memory rather than separate memory blocks for each row. This design improves cache locality and improves performance when processing large arrays.\n\nA two-dimensional array in C can be initialized at the time of declaration by specifying values for each element in a structured format. This helps assign values to the array without manually setting each component individually.\n• arr is a two-dimensional array with 4 rows and 3 columns (a 4×3 matrix).\n• Each row contains three elements, making it easy to represent data in a table-like format.\n• The values are assigned in a structured manner, so the code is more readable and organized.\n\nElements in a Two-Dimensional Array In C are accessed using their row and column indices. The general syntax for accessing an element is:\n\nTwo-Dimensional Array In C Example\n• arr[2][1] refers to the element in the third row (index 2) and second column (index 1).\n• The retrieved value is 8, which is then printed to the console.\n• Time Complexity: Accessing an element in a two-dimensional array takes O(1) time since we use direct indexing (arr[row][col]).‍\n• Space Complexity: The space required for a m × n two-dimensional array is O(m × n) because we store m × n elements in contiguous memory. In our example, since we declared a 3×3 array, the space complexity is O(3×3) = O(9) ≈ O(n²).\n\nTraversing a Two-Dimensional Array In C means accessing and processing each element stored in the array. This is done using nested loops, where the outer loop iterates through the rows, and the inner loop iterates through the columns. Here is a simple C program that shows how to traverse and print the elements of a two-dimensional array.\n\nTwo-Dimensional Array In C Example\n\nHere we define a Two-Dimensional Array In C arr with rows and columns that initialize it with integer values. The outer for loop runs from i = 0 to i < 4, controlling the rows, while the inner for loop runs from j = 0 to j < 3, controlling the columns.\n\nFor each combination of i and j, the value stored at arr[i][j] is printed, displaying the element and its respective position in the array. This structured traversal ensures that every array component is accessed and printed systematically.\n\nThe time complexity of traversing a two-dimensional array of size m x n is O(m × n), as each element is accessed precisely once. The space complexity is O(1) since no extra space is used apart from the given array.\n\nA Two-Dimensional Array In C can be settled using user input. This provides flexibility in choosing the size of the array and filling it with specific values. An example program prompts the user for the number of rows and columns for two-dimensional array in c, accepts the elements for each position, and prints the filled array.\n\nTwo-Dimensional Array Program In C Example\n\nIn this program, the user is first asked to input the number of rows and columns they want for the two-dimensional array in c. The size of the array is then dynamically set based on the user input. After that, the user is prompted to enter the elements individually.\n\nEach element is stored at the appropriate position in the array. Once all elements are entered, the program prints the entire matrix by iterating through the rows and columns and displaying each element in a row-wise format.\n• Time complexity: O(m × n), The program must visit each element of the array, where m is the number of rows and n is the number of columns.\n• Space complexity: O(m × n), The space used depends on the size of the 2D array, which is determined by the number of rows and columns.\n\nPassing a two-dimensional array to a function requires specifying at least the second dimension size.\n• Function Definition: printArray(int arr[][3], int rows, int cols) accepts a 2D array and its dimensions as arguments.\n• Looping through Rows and Columns: The function prints each element in a structured format.\n• Passing the Array: The array is passed to the function without specifying the first dimension, but the second dimension must be fixed ([3]).\n\nTwo-Dimensional Array In C is used in various practical applications across different fields. Here are some essential examples,\n\nIn mathematics and computer science, two-dimensional arrays are used to represent matrices. This allows for the efficient storage and manipulation of numbers in rows and columns, essential for performing calculations in areas such as linear algebra.\n\nMany board games, such as Tic-Tac-Toe or Chess, use two-dimensional arrays to represent the game grid. Each element in the array corresponds to a cell in the grid, making it easier to track the game's progress and check for win conditions.\n\nTwo-dimensional arrays play an essential role in image processing, where each pixel in an image can be stored as an element in the array. The array's rows and columns represent the image’s height and width, with each element containing information like color or brightness levels.\n\nIn applications like spreadsheets, two-dimensional arrays store and organize data in rows and columns. This structure allows for easy access, editing, and manipulation of data, such as in databases or statistical analysis tools.\n\nIn computer science, two-dimensional arrays are commonly used to represent graphs through an adjacency matrix. This matrix helps store the relationships between nodes in a graph and it is easier to apply graph algorithms for tasks like finding paths or identifying connected components.\n\nDifferences and Similarities Between 1D 2D and 3D Arrays\n\nTwo-dimensional arrays in C programming provide an organized way to store and manage data efficiently. Developers can write more efficient and maintainable code by learning to declare, initialize, access, and iterate through these arrays.\n\nPractising with different examples helps strengthen your understanding of two-dimensional array in c and how to apply them effectively in various programming techniques.\n\n1. How do you declare a two-dimensional array in C?\n\nYou declare it by specifying the data type, name, and size of rows and columns: data_type array_name[rows][columns]; Example: int arr[3][4]; This creates a 2D array with 3 rows and 4 columns.\n\n2. How are elements accessed in a two-dimensional array?\n\nYou access an element by specifying the row and column indices: array_name[row_index][column_index]; Example: arr[1][2] refers to the element in the second row, third column.\n\n3. Can a two-dimensional array store different data types in C?\n\nNo, it can only store one type of data. If you need different data types, you can use structures or unions, which allow mixing various data types in a single array-like structure.\n\n4. What are the applications of 2D arrays?\n\n2D arrays are used in areas like image processing, game development (for game boards), and scientific computing. They help with efficient data organization and complex manipulations.\n\n5. How to create a 2D array in C++?\n\nIn C++, you can declare a 2D array using the same syntax as in C: data_type array_name[rows][columns]; Alternatively, you can use vectors for dynamic sizing: vector<vector<int>> arr(rows, vector<int>(columns));\n\n6. What common operations can be performed on two-dimensional arrays?\n\nCommon operations include traversing elements, performing mathematical operations like matrix addition or multiplication, searching for values, and modifying specific elements based on conditions."
    },
    {
        "link": "https://geeksforgeeks.org/pass-2d-array-parameter-c",
        "document": "How to pass a 2D array as a parameter in C?\n\nA 2D array is essentially an array of arrays, where each element of the main array holds another array. In this article, we will see how to pass a 2D array to a function.\n\nThe simplest and most common method to pass 2D array to a function is by specifying the parameter as 2D array with row size and column size. One thing to note is that we always have to pass the size of the array’s dimensions separately.\n\nLet’s take a look at an example:\n\nExplanation: In this example, a 2D array arr is passed to the print function in the same way as it was declared but without the row size. The sizes of its dimensions are passed separately.\n\nIn the above method, the size of the row dimension can be omitted, and the program will still work.\n\nAs Pointer to an Array\n\nArrays are decayed into pointers when passed to a function. So, we can directly specify the parameter of the function as pointer to an array of give size (column size).\n\nInternally, 2D arrays are stored sequentially either row after row or column after column. So, we can pass the 2D array as single level array if we know how elements are internally stored.\n\nThis method is not generally preferred as it is highly error prone."
    },
    {
        "link": "https://geeksforgeeks.org/multidimensional-arrays-in-c",
        "document": "A multi-dimensional array can be defined as an array that has more than one dimension. Having more than one dimension means that it can grow in multiple directions. Some popular multidimensional arrays are 2D arrays and 3D arrays. In this article, we will learn about multidimensional arrays in C programming language.\n\nThe general form of declaring N-dimensional arrays is shown below:\n• type : Type of data to be stored in the array.\n• arr_name : Name assigned to the array.\n\nThe total number of elements that can be stored in a multidimensional array can be calculated by multiplying the size of both dimensions. Consider the array arr[10][20]:\n\nTo get the size in bytes, we multiply the size of a single element (in bytes) by the total number of elements in the array.\n• int arr[10][20] = 10 * 20 * 4 = 800 bytes, where the size of int is 4 bytes.\n\nIn C, there can be many types of arrays depending on their dimensions but two of them are most commonly used:\n\nA two-dimensional array or 2D array is the simplest form of the multidimensional array. We can visualize a two-dimensional array as one-dimensional arrays stacked vertically forming a table with ‘m’ rows and ‘n’ columns. In C, arrays are 0-indexed, so the row number ranges from 0 to (m-1) and the column number ranges from 0 to (n-1).\n\nA 2D array with m rows and n columns can be created as:\n• type: Type of data to be stored in each element.\n• arr_name: Name assigned to the array.\n\nFor example, we can declare a two-dimensional integer array with name ‘arr’ with 10 rows and 20 columns as:\n\nWe can initialize a 2D array by using a list of values enclosed inside ‘{ }’ and separated by a comma as shown in the example below:\n\nThe elements will be stored in the array from left to right and top to bottom. So, the first 4 elements from the left will be filled in the first row, the next 4 elements in the second row, and so on. This is clearly shown in the second syntax where each set of inner braces represents one row.\n\nIn list initialization, we can skip specifying the size of the row. The compiler will automatically deduce it in this case. So, the below declaration is valid.\n\nIt is still compulsory to define the number of columns.\n\nTraversal means accessing all the elements of the array one by one. An element in two-dimensional array is accessed using row indexes and column indexes inside array subscript operator [].\n\nwhere, i and j are row index and column index.\n\nTo traverse the whole array, we will use two loops. One loop to go over each row from top to bottom and the other nested inside it to access each element in the current row from left to right.\n\nThe below example demonstrates the row-by-row traversal of a 2D array.\n\nTime Complexity: O(n * m), where n and m are numbers of rows and columns respectively.\n\nAuxiliary Space: O(1)\n\nHow 2D Arrays are Stored in the Memory?\n\nAs an array, the elements of the 2D array have to be stored contiguously in memory. As the computers have linear memory addresses, the 2-D arrays must be linearized so as to enable their storage. There are two ways to achieve this:\n• Row Major Order: The technique stores the 2D array row after row. It means that the first row is stored first in the memory, then the second row of the array, then the third row, and so on.\n• Column Major Column: This technique stores the 2D array column after column. It means that first column is stored first in the memory, then the second column, then the third column, and so on.\n\nThis allows the random access to the 2D array elements as the computer need not keep track of the addresses of all the elements of the array. It only tracks of the Base Address (starting address of the very first element) and calculates the addresses of other array elements using the base address.\n\nPassing 2D arrays to functions need a specialized syntax so that the function knows that the data being passed is 2d array. The function signature that takes 2D array as argument is shown below:\n\nwhere m and n are the number of rows and columns. We also need to pass these sizes of rows and columns of the array because an array is always passed as pointers.\n\nA Three-Dimensional Array or 3D array in C is a collection of two-dimensional arrays. It can be visualized as multiple 2D arrays stacked on top of each other.\n\nDeclaration of 3D Array in C\n\nWe can declare a 3D array with x 2D arrays each having m rows and n columns using the syntax shown below:\n• type: Type of data to be stored in each element.\n• arr_name: name of the array\n• x: Number of 2D arrays. (also called depth of the array)\n• m: Number of rows in each 2D array.\n• n: Number of columns in each 2D array.\n\nInitialization of 3D Array in C\n\nInitialization in a 3D array is the same as that of 2D arrays. The difference is as the number of dimensions increases so the number of nested braces will also increase.\n\nAgain, just like the 2D arrays, we can also declare the 3D arrays without specifying the size of the first dimensions if we are using initializer list. The compiler will automatically deduce the size of the first dimension. But we still need to specify the rest of the dimensions.\n\nTo access an elements in 3D array, we use three indexes. One for depth, one for row and one for column.\n\nwhere, d, i and j are the indexes for depth (representing a specific 2D array.), the row within that 2D array, and the column within that 2D array respectively.\n\nTo traverse the entire 3D array, you need to use three nested loops: an outer loop that goes through the depth (or the set of 2D arrays), a middle loop goes through the rows of each 2D array and at last an inner loop goes through each element of the current row.\n\nHow 3D Arrays are Stored in the Memory?\n\nLike 2D arrays, the elements of a 3D array should also be stored contiguously in memory.\n\nSince computers have linear memory, the 3D array must also be linearized for storage. We use the same two techniques, the Row Major Order and Column Major Order but with added dimension. The elements are first stored layer by layer (or 2D array by 2D array). Within each 2D array, the elements follow the corresponding row or column major order.\n\nPassing a 3D array to a function in C is similar to passing 2D arrays, but with an additional dimension. When passing a 3D array, you need to pass the sizes of all the dimensions separately because the size information of array is lost while passing.\n\nWe discussed multidimensional array with two examples, the 2D and 3D arrays. The methods which we learned here can be extended to work with arrays with any number of dimensions. However, the complexity also increases as the number of dimensions increases.\n\nIs there a limit to how many dimensions an array can have?\n\nCan I resize a multidimensional array after it is declared?\n\nHow do row-major and column-major orders affect the traversal of arrays?"
    },
    {
        "link": "https://stackoverflow.com/questions/61730431/problem-when-passing-multidimensional-array-to-a-function-in-c",
        "document": "What are you entering for and ? If it's not and , then no, this code doesn't have a hope of working.\n\nAlso, if the array is required to be a square matrix, why ask for number of rows and columns? Just ask for one value and apply it to both dimensions:\n\nSince you are creating as a VLA in main, you need to declare it as a VLA in as well:\n\nand then change your call appropriately:"
    },
    {
        "link": "https://stackoverflow.com/questions/9943111/passing-multi-dimensional-arrays-to-functions-in-c",
        "document": "Why is it necessary to specify the number of elements of a C-array when it is passed as a parameter to a function (10 in the following example)?\n\nIs it so because the number of elements is needed to determine the address of the cell being accessed?"
    },
    {
        "link": "https://geeksforgeeks.org/pass-2d-array-parameter-c",
        "document": "How to pass a 2D array as a parameter in C?\n\nA 2D array is essentially an array of arrays, where each element of the main array holds another array. In this article, we will see how to pass a 2D array to a function.\n\nThe simplest and most common method to pass 2D array to a function is by specifying the parameter as 2D array with row size and column size. One thing to note is that we always have to pass the size of the array’s dimensions separately.\n\nLet’s take a look at an example:\n\nExplanation: In this example, a 2D array arr is passed to the print function in the same way as it was declared but without the row size. The sizes of its dimensions are passed separately.\n\nIn the above method, the size of the row dimension can be omitted, and the program will still work.\n\nAs Pointer to an Array\n\nArrays are decayed into pointers when passed to a function. So, we can directly specify the parameter of the function as pointer to an array of give size (column size).\n\nInternally, 2D arrays are stored sequentially either row after row or column after column. So, we can pass the 2D array as single level array if we know how elements are internally stored.\n\nThis method is not generally preferred as it is highly error prone."
    },
    {
        "link": "https://programiz.com/c-programming/c-arrays-functions",
        "document": "In C programming, you can pass an entire array to functions. Before we learn that, let's see how you can pass individual elements of an array to functions.\n\nPassing array elements to a function is similar to passing variables to a function.\n\nHere, we have passed array parameters to the function in the same way we pass variables to a function.\n\nWe can see this in the function definition, where the function parameters are individual variables:\n\nTo pass an entire array to a function, only the name of the array is passed as an argument.\n\nHowever, notice the use of in the function definition.\n\nThis informs the compiler that you are passing a one-dimensional array to the function.\n\nTo pass multidimensional arrays to a function, only the name of the array is passed to the function (similar to one-dimensional arrays).\n\nNotice the parameter in the function prototype and function definition:\n\nThis signifies that the function takes a two-dimensional array as an argument. We can also pass arrays with more than 2 dimensions as a function argument.\n\nWhen passing two-dimensional arrays, it is not mandatory to specify the number of rows in the array. However, the number of columns should always be specified.\n\nRecommended Reading: Call by Reference in C"
    }
]