[
    {
        "link": "https://docs.fivem.net/docs/scripting-manual/introduction/about-native-functions",
        "document": "In FiveM, you have access to what are called \"native functions\" or simply \"natives\". These functions are provided by the game itself, using them will allow you to perform a wide variety of actions within the game environment. This guide will explain what natives are, where you can find them, and how to use them in your scripts.\n\nNative functions in FiveM are predefined functions that enable interaction with the game. They are essential for creating and managing game mechanics, player interactions, and various other functionalities within your server. Natives are used in both client-side and server-side. Some of them are created by Cfx like DropPlayer.\n\nWhere Can You Find Native Functions?\n\nFiveM provides comprehensive documentation for native functions. This documentation is essential for understanding what each native function does, how to use it, and what parameters it requires.\n• FiveM Natives: All documented natives can be found on our official website.\n• Community Forums: The Cfx.re Forums are another valuable resource. Here, you can find discussions, tutorials, and examples from other developers who share their experiences and solutions related to using native functions.\n• Native Docs Repo: Users can contribute to the repository by adding descriptions, names, and new native functions.\n\nClient natives are functions that run on the player's game client. These functions are primarily used to handle tasks related to the player's immediate environment, rendering, input handling, and interactions that need to occur on the client side. Examples include manipulating the player’s view, handling UI elements, and interacting with client-specific data.\n\nServer-side natives, on the other hand, run on the server. These functions manage game logic that needs to be controlled and validated by the server, such as player authentication and ensuring game state consistency. They are crucial for maintaining the integrity and security of the game.\n\nPlease note that some natives can be used on client and server. You can refer to setter in the official native documentation.\n\nclient: Only runs for client server: Only runs for server shared: Runs for client and server\n\nHow to Use Native Functions\n\nUsing native functions in your FiveM resources involves calling the functions with the appropriate parameters. Let's go through the basic steps of using natives in both client-side and server-side resources.\n\nClient-side scripts are executed on the player's game client and are used to handle tasks such as rendering, player input, and more. Here’s a basic example of how to use a native function in a client-side script:\n• Create a Client Script: In your resource folder, create a new client script file, e.g., .\n• Register and Use a Native Function: Use the native function to add a custom text entry that can be displayed on the game UI.\n\nServer-side scripts run on the game server and are responsible for handling game logic, player data, and other backend tasks. Here’s an example of using a native function in a server-side script:\n• Create a Server Script: In your resource folder, create a new server script file, e.g., .\n• Register a Command and Use a Native Function: Use the native function to get the name of a player and print it to the server console.\n\nTo learn how to create your first resource step-by-step, refer to the comprehensive guide in this section. This guide will walk you through the process of setting up a new resource, writing your first script, and integrating it into your FiveM server.\n\nHere are some commonly used native functions and their descriptions:\n• GetPlayerName: Returns the name of a player.\n\nBy following this guide, you should now have a basic understanding of what native functions are, where to find them, and how to use them in your FiveM scripts. Happy coding!"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-reference/server-functions",
        "document": "Here is a list of some of the functions that you can use specifically in server side scripts.\n\nServer-side native functions are provided by the Citizen framework. Refer to the FiveM Native Reference, where you can see syntax per language, a description, and examples for each native.\n\nThese natives are usable in all runtimes.\n\nSome functions are exclusive to the scripting runtime you're using, and are not documented in the FiveM Native Reference List. Refer to their docs for more detail."
    },
    {
        "link": "https://github.com/nbredikhin/fivem-rpc",
        "document": "This resource is a simple RPC library for FiveM. It allows you to call methods on remote side and receive return values.\n• Copy this resource to your directory. Resource name should be .\n\nYou can also do asynchronous calls inside FiveM threads:\n\nYou can find working example code in folder.\n\nRegisters new method that can be called from remote side.\n• - player who called this method (only for server-side)\n\nfunction can be used to return values asynchronously:\n\nIf you return anything from method callback, will be ignored and return value will be passed to caller (see first callback example).\n• - optional player source to call method on (only for server-side)\n• - optional player source to call method on (only for server-side)\n\nCalls remote method asynchronously. Can only be used inside .\n• - optional player source to call method on (only for server-side)"
    },
    {
        "link": "https://github.com/citizenfx/example-resources",
        "document": "Welcome to the Gamemode Examples Repository. Here, you'll find resources for a variety of gamemodes. Our primary goal is to provide documented official methods for creating gamemodes, thoroughly reviewed by our team. Please note that these resources may evolve to incorporate technological advancements and community feedback.\n\nAdditionally, we may introduce new gamemodes in the future.\n\nExplore, learn, and stay tuned for updates as we continue to expand our repository!\n\nIn FiveM, a 'resource' is essentially a structured folder containing various files that contribute to modifying or enhancing gameplay on a FiveM server.\n\nThese resources can include scripts for gameplay mechanics, assets like models and textures for new objects or vehicles, and other files that enhance the overall gaming experience on a FiveM server.\n\nServer owners and developers can use these resources to customize and tailor their server to their preferences and the desires of their community.\n• TDM Gamemode: A simple team death match game mode where players are put in teams and are allowed to compete against each other.\n• CTF Gamemode: A game mode that involves capturing an objective by taking it from point A to B.\n\nWe recommend checking out this guide (Creating your first script in Lua), as a starting point to set up the game modes. This guide assumes you already have a server set up, if not, you may follow one of these guides (Setting up a server).\n\nThe manifest file ( ) is used to define what files/scripts are used by the resource. More about it can be found in Introduction to resources.\n\nIt's important to note that when you browse the files mentioned above, you will see many function calls that don't seem to be declared anywhere; those are most likely natives, i.e., .\n\nNatives are used to call in-game function methods that execute larger chunks of game logic within the game. It's how the game mode communicates with the game-client (when called via client scripts such as or ).\n\nIf called on the server side, it may call server-related natives and not client natives, but client natives can still be called by the server via RPC (Remote Procedure Call).\n\nThe full list of natives and their corresponding documentation can be found here.\n\nThe game mode makes use of events (server and client) to communicate data back and forth. Documentation regarding events can be found here."
    },
    {
        "link": "https://docs.unity3d.com/351/Documentation/Components/net-RPCDetails.html",
        "document": "Remote Procedure Calls (RPCs) let you call functions on a remote machine. Invoking an RPC is similar to calling a normal function and almost as easy but there are some important differences to understand.\n• An RPC call can have as many parameters as you like but the network bandwidth involved will increase with the number and size of parameters. You should keep parameters to a minimum in order to get the best performance.\n• Unlike a normal function call, an RPC needs an additional parameter to denote the recipients of the RPC request. There are several possible RPC call modes to cover all common use cases. For example, you can easily invoke the RPC function on all connected machines, on the server alone, on all clients but the one sending the RPC call or on a specific client.\n\nRPC calls are usually used to execute some event on all clients in the game or pass event information specifically between two parties, but you can be creative and use them however you like. For example, a server for a game which only starts after four clients have connected could send an RPC call to all clients as soon as the fourth one connects, thus starting the game. A client could send RPC calls to everyone to signal that he picked up an item. A server could send an RPC to a particular client to initialize him right after he connects, for example, to give him his player number, spawn location, team color, etc. A client could in turn send an RPC only to the server to specify his starting options, such as the color he prefers or the items he has bought.\n\nA function must be marked as an RPC before it can be invoked remotely. This is done by prefixing the function in the script with an RPC attribute:-\n\nAll network communication is handled by NetworkView components, so you must attach one to the object whose script declares the RPC functions before they can be called.\n\nYou can use the following variable types as parameters to RPCs:-\n\nFor example, the following code invokes an RPC function with a single string parameter:-\n\nThe first parameter of RPC() is the name of the function to be invoked while the second determines the targets on which it will be invoked. In this case we invoke the RPC call on everyone who is connected to the server (but the call will not be buffered to wait for clients who connect later - see below for further details about buffering).\n\nAll parameters after the first two are the ones that will be passed to the RPC function and be sent across the network. In this case, \"Hello World\" will be sent as a parameter and be passed as the text parameter in the PrintText function.\n\nYou can also access an extra internal parameter, a NetworkMessageInfo struct which holds additional information, such as where the RPC call came from. This information will be passed automatically, so the PrintText function shown above will be can be declared as:-\n\n...while being invoked the same way as before.\n\nAs mentioned above, a Network View must be attached to any GameObject which has a script containing RPC functions. If you are using RPCs exclusively (ie, without state synchronisation) then the Network View's State Synchronization can be set to Off.\n\nRPC calls can also be buffered. Buffered RPC calls are stored up and executed in the order they were issued for each new client that connects. This can be a useful way to ensure that a latecoming player gets all necessary information to start. A common scenario is that every player who joins a game should first load a specific level. You could send the details of this level to all connected players but also buffer it for any who join in the future. By doing this, you ensure that the new player receives the level information just as if he had been present from the start.\n\nYou can also remove calls from the RPC buffer when necessary. Continuing the example above, the game may have moved on from the starting level by the time a new player joins, so you could remove the original buffered RPC and send a new one to request the new level."
    },
    {
        "link": "https://forum.cfx.re/t/anyone-know-how-to-create-manage-peds-on-the-server-side/173437",
        "document": "Sets the coordinates (world position) for a specified entity, offset by the radius of the entity on the Z axis. **This is the server-side RPC native equivalent of the client native [SET_ENTITY_COORDS"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-reference/server-functions",
        "document": "Here is a list of some of the functions that you can use specifically in server side scripts.\n\nServer-side native functions are provided by the Citizen framework. Refer to the FiveM Native Reference, where you can see syntax per language, a description, and examples for each native.\n\nThese natives are usable in all runtimes.\n\nSome functions are exclusive to the scripting runtime you're using, and are not documented in the FiveM Native Reference List. Refer to their docs for more detail."
    },
    {
        "link": "https://github.com/citizenfx/fivem/issues/2787",
        "document": "For a considerable time, many developers have been requesting Server Setters as an alternative to RPC natives. It's widely acknowledged in the FiveM community that RPC natives are often unstable or broken.\n\n@prikolium-cfx mentioned the reliability issues of RPC natives in this pull request.\n• \n• and vehicle RPC natives frequently require workarounds. (when they work)\n• Developers often need to implement delays to ensure entity existence before manipulation.\n• \n• Reliance on RPC natives often leads to complex, less maintainable code.\n\nWhile these are beneficial, they are insufficient for a robust server API.\n\nPlease note that this list is not exhaustive and is intended to provide examples of the types of setters that would be useful:\n• \n• Precise control over NPC movements and actions from the server.\n• \n• Server can validate and correct entities properties to prevent client-side manipulation.\n• Use weird workaround to use them or directly use client side code"
    },
    {
        "link": "https://docs.fivem.net/docs/scripting-reference/runtimes/lua/server-functions",
        "document": "Refer to the FiveM Native Reference for game functions."
    },
    {
        "link": "https://github.com/nbredikhin/fivem-rpc",
        "document": "This resource is a simple RPC library for FiveM. It allows you to call methods on remote side and receive return values.\n• Copy this resource to your directory. Resource name should be .\n\nYou can also do asynchronous calls inside FiveM threads:\n\nYou can find working example code in folder.\n\nRegisters new method that can be called from remote side.\n• - player who called this method (only for server-side)\n\nfunction can be used to return values asynchronously:\n\nIf you return anything from method callback, will be ignored and return value will be passed to caller (see first callback example).\n• - optional player source to call method on (only for server-side)\n• - optional player source to call method on (only for server-side)\n\nCalls remote method asynchronously. Can only be used inside .\n• - optional player source to call method on (only for server-side)"
    }
]