[
    {
        "link": "https://docs.python.org/3/library/os.html",
        "document": "This module provides a portable way of using operating system dependent functionality. If you just want to read or write a file see , if you want to manipulate paths, see the module, and if you want to read all the lines in all the files on the command line see the module. For creating temporary files and directories see the module, and for high-level file and directory handling see the module.\n\nNotes on the availability of these functions:\n• None The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function returns stat information about path in the same format (which happens to have originated with the POSIX interface).\n• None Extensions peculiar to a particular operating system are also available through the module, but using them is of course a threat to portability.\n• None All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned.\n• None On VxWorks, os.popen, os.fork, os.execv and os.spawn*p* are not supported.\n• None On WebAssembly platforms, Android and iOS, large parts of the module are not available or behave differently. APIs related to processes (e.g. , ) and resources (e.g. ) are not available. Others like and are emulated or stubs. WebAssembly platforms also lack support for signals (e.g. , )."
    },
    {
        "link": "https://geeksforgeeks.org/os-module-python-examples",
        "document": "The OS module in Python provides functions for interacting with the operating system. OS comes under Python’s standard utility modules. This module provides a portable way of using operating system-dependent functionality.\n\nThe *os* and *os.path* modules include many functions to interact with the file system.\n\nHere we will discuss some important functions of the Python os module :\n• None Listing out Files and Directories with Python\n\nConsider Current Working Directory(CWD) as a folder, where Python is operating. Whenever the files are called only by their name, Python assumes that it starts in the CWD which means that name-only reference will be successful only if the file is in the Python’s CWD.\n\nTo get the location of the current working directory os.getcwd() is used.\n\nExample: This code uses the ‘ module to get and print the current working directory (CWD) of the Python script. It retrieves the CWD using the ‘ and then prints it to the console.\n\nTo change the current working directory(CWD) os.chdir() method is used. This method changes the CWD to a specified path. It only takes a single argument as a new directory path.\n\nExample: The code checks and displays the current working directory (CWD) twice: before and after changing the directory up one level using . It provides a simple example of how to work with the current working directory in Python.\n\nThere are different methods available in the OS module for creating a directory. These are –\n\nBy using os.mkdir() method in Python is used to create a directory named path with the specified numeric mode. This method raises FileExistsError if the directory to be created already exists.\n\nExample: This code creates two directories: “GeeksforGeeks” within the “D:/Pycharm projects/” directory and “Geeks” within the “D:/Pycharm projects” directory.\n• None The first directory is created using the method without specifying the mode.\n• None The second directory is created using the same method, but a specific mode ( ) is provided, which grants read and write permissions.\n• None The code then prints messages to indicate that the directories have been created.\n\nos.makedirs() method in Python is used to create a directory recursively. That means while making leaf directory if any intermediate-level directory is missing, os.makedirs() method will create them all.\n\nExample: This code creates two directories, “Nikhil” and “c”, within different parent directories. It uses the function to ensure that parent directories are created if they don’t exist.\n\nIt also sets the permissions for the “c” directory. The code prints messages to confirm the creation of these directories\n\nListing out Files and Directories with Python\n\nThere is os.listdir() method in Python is used to get the list of all files and directories in the specified directory. If we don’t specify any directory, then the list of files and directories in the current working directory will be returned.\n\nExample: This code lists all the files and directories in the root directory (“/”). It uses the function to get the list of files and directories in the specified path and then prints the results.\n\nOS module provides different methods for removing directories and files in Python. These are –\n\nos.remove() method in Python is used to remove or delete a file path. This method can not remove or delete a directory. If the specified path is a directory then OSError will be raised by the method.\n\nExample: Suppose the file contained in the folder are:\n\n\n\nThis code removes a file named “file1.txt” from the specified location “D:/Pycharm projects/GeeksforGeeks/Authors/Nikhil/”. It uses the function to delete the file at the specified path.\n\nos.rmdir() method in Python is used to remove or delete an empty directory. OSError will be raised if the specified path is not an empty directory.\n\nExample: Suppose the directories are\n\nThis code attempts to remove a directory named “Geeks” located at “D:/Pycharm projects/”.\n\nIt uses the function to delete the directory. If the directory is empty, it will be removed. If it contains files or subdirectories, you may encounter an error.\n\nThis function gives the name of the operating system dependent module imported. The following names have currently been registered: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’ and ‘riscos’.\n\nNote: It may give different output on different interpreters, such as ‘posix’ when you run the code here.\n\nAll functions in this module raise OSError in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. os.error is an alias for built-in OSError exception.\n\nThis code reads the contents of a file named ‘GFG.txt’. It uses a ‘try…except‘ block to handle potential errors, particularly the ‘IOError‘ that may occur if there’s a problem reading the file.\n\nIf an error occurs, it will print a message saying, “Problem reading: GFG.txt.”\n\nThis method opens a pipe to or from command. The return value can be read or written depending on whether the mode is ‘r’ or ‘w’. \n\nSyntax:\n\nParameters mode & bufsize are not necessary parameters, if not provided, default ‘r’ is taken for mode.\n\nThis code opens a file named ‘GFG.txt’ in write mode, writes “Hello” to it, and then reads and prints its contents. The use of is not recommended, and standard file operations are used for these tasks.\n\nNote: Output for popen() will not be shown, there would be direct changes into the file.\n\nClose file descriptor fd. A file opened using open(), can be closed by close()only. But file opened through os.popen(), can be closed with close() or os.close(). If we try closing a file opened with open(), using os.close(), Python would throw TypeError.\n\nNote: The same error may not be thrown, due to the non-existent file or permission privilege.\n\nA file old.txt can be renamed to new.txt, using the function os.rename(). The name of the file changes only if, the file exists and the user has sufficient privilege permission to change the file.\n\nA file name “GFG.txt” exists, thus when os.rename() is used the first time, the file gets renamed.\n\nUpon calling the function os.rename() second time, file “New.txt” exists and not “GFG.txt” thus Python throws FileNotFoundError.\n\nUsing the Os module we can remove a file in our system using the os.remove() method. To remove a file we need to pass the name of the file as a parameter.\n\nThe OS module provides us a layer of abstraction between us and the operating system.\n\nWhen we are working with os module always specify the absolute path depending upon the operating system the code can run on any os but we need to change the path exactly. If you try to remove a file that does not exist you will get FileNotFoundError.\n\nThis method will check whether a file exists or not by passing the name of the file as a parameter. OS module has a sub-module named PATH by using which we can perform many more functions.\n\nAs in the above code, the file does not exist it will give output False. If the file exists it will give us output True.\n\nIn os.path.getsize() function, python will give us the size of the file in bytes. To use this method we need to pass the name of the file as a parameter.\n\nWhat is the OS module in Python?\n\nWhat is an OS package?\n\nWhat is OS name in Python?\n\nWhat is the OS process in Python?"
    },
    {
        "link": "https://python101.pythonlibrary.org/chapter16_os.html",
        "document": "The os module has many uses. We won’t be covering everything that it can do. Instead, we will get an overview of its uses and we’ll also take a look at one of its sub-modules, known as os.path. Specifically, we will be covering the following:\n\nThat looks like a lot to cover, but there is at least ten times as many other actions that the os module can do. This chapter is just going to give you a little taste of what’s available. To use any of the methods mentioned in this section, you will need to import the os module, like this:\n\nLet’s start learning how to use this module!\n\nThe os module has both callable functions and normal values. In the case of os.name, it is just a value. When you access os.name, you will get information about what platform you are running on. You will receive one of the following values: ‘posix’, ‘nt’, ‘os2’, ‘ce’, ‘java’, ‘riscos’. Let’s see what we get when we run it on Windows 7: This tells us that our Python instance is running on a Windows box. How do we know this? Because Microsoft started calling its operating system NT many years ago. For example, Windows 7 is also known as Windows NT 6.1.\n\nThe os.environ value is known as a mapping object that returns a dictionary of the user’s environmental variables. You may not know this, but every time you use your computer, some environment variables are set. These can give you valuable information, such as number of processors, type of CPU, the computer name, etc. Let’s see what we can find out about our machine: Your output won’t be the same as mine as everyone’s PC configuration is a little different, but you’ll see something similar. As you may have noticed, this returned a dictionary. That means you can access the environmental variables using your normal dictionary methods. Here’s an example: You could also use the os.getenv function to access this environmental variable: The benefit of using os.getenv() instead of the os.environ dictionary is that if you happen to try to access an environmental variable that doesn’t exist, the getenv function will just return None. If you did the same thing with os.environ, you would receive an error. Let’s give it a try so you can see what happens:\n\nThe os.chdir function allows us to change the directory that we’re currently running our Python session in. If you want to actually know what path you are currently in, then you would call os.getcwd(). Let’s try them both out: The code above shows us that we started out in the Python directory by default when we run this code in IDLE. Then we change folders using os.chdir(). Finally we call os.getcwd() a second time to make sure that we changed to the folder successfully.\n\nYou might have guessed this already, but the two methods covered in this section are used for creating directories. The first one is os.mkdir(), which allows us to create a single folder. Let’s try it out: The first line of code will create a folder named test in the current directory. You can use the methods in the previous section to figure out where you just ran your code if you’ve forgotten. The second example assigns a path to a variable and then we pass the path to os.mkdir(). This allows you to create a folder anywhere on your system that you have permission to. The os.makedirs() function will create all the intermediate folders in a path if they don’t already exist. Basically this means that you can created a path that has nested folders in it. I find myself doing this a lot when I create a log file that is in a dated folder structure, like Year/Month/Day. Let’s look at an example: What happened here? This code just created a bunch of folders! If you still had the pytest folder in your system, then it just added a 2014 folder with another folder inside of it which also contained a folder. Try it out for yourself using a valid path on your system.\n\nThe os.remove() and os.rmdir() functions are used for deleting files and directories respectively. Let’s look at an example of os.remove(): This code snippet will attempt to remove a file named test.txt from your current working directory. If it cannot find the file, you will likely receive some sort of error. You will also receive an error if the file is in use (i.e. locked) or you don’t have permission to delete the file. You might also want to check out os.unlink, which does the same thing. The term unlink is the traditional Unix name for this procedure. Now let’s look at an example of os.rmdir(): The code above will attempt to remove a directory named pytest from your current working directory. If it’s successful, you will see that the directory no longer exists. An error will be raised if the directory does not exist, you do not have permission to remove it or if the directory is not empty. You might also want to take a look at os.removedirs() which can remove nested empty directories recursively.\n\nThe os.walk() method gives us a way to iterate over a root level path. What this means is that we can pass a path to this function and get access to all its sub-directories and files. Let’s use one of the Python folders that we have handy to test this function with. We’ll use: C:\\Python27\\Tools If you want, you can also loop over dirs and files too. Here’s one way to do it: This piece of code will print a lot of stuff out, so I won’t be showing its output here, but feel free to give it a try. Now we’re ready to learn about working with paths!\n\nThe os.path sub-module of the os module has lots of great functionality built into it. We’ll be looking at the following functions: There are lots of other functions in this sub-module. You are welcome to go read about them in the Python documentation, section 10.1. The basename function will return just the filename of a path. Here is an example: I have found this useful whenever I need to use a filename for naming some related file, such as a log file. This happens a lot when I’m processing a data file. The dirname function will return just the directory portion of the path. It’s easier to understand if we take a look at some code: In this example, we just get the directory path back. This is also useful when you want to store other files next to the file you’re processing, like the aforementioned log file. The exists function will tell you if a path exists or not. All you have to do is pass it a path. Let’s take a look: In the first example, we pass the exists function a real path and it returns True, which means that the path exists. In the second example, we passed it a bad path and it told us that the path did not exist by returning False. The isdir and isfile methods are closely related to the exists method in that they also test for existence. However, isdir only checks if the path is a directory and isfile only checks if the path is a file. If you want to check if a path exists regardless of whether it is a file or a directory, then you’ll want to use the exists method. Anyway, let’s study some examples: Take a moment to study this set of examples. In the first one we pass a path to a file and check if the path is really a file. Then the second example checks the same path to see if it’s a directory. You can see for yourself how that turned out. Then in the last two examples, we switched things up a bit by passing a path to a directory to the same two functions. These examples demonstrate how these two functions work. The join method give you the ability to join one or more path components together using the appropriate separator. For example, on Windows, the separator is the backslash, but on Linux, the separator is the forward slash. Here’s how it works: In this example, we joined a directory path and a file path together to get a fully qualified path. Note however that the join method does not check if the result actually exists! The split method will split a path into a tuple that contains the directory and the file. Let’s take a look: This example shows what happens when we path in a path with a file. Let’s see what happens if the path doesn’t have a filename on the end: As you can see, it took the path and split it in such a way that the last sub-folder became the second element of the tuple with the rest of the path in the first element. For our final example, I thought you might like to see a commmon use case of the split: This shows how to do multiple assignment. When you split the path, it returns a two-element tuple. Since we have two variables on the left, the first element of the tuple is assigned to the first variable and the second element to the second variable."
    },
    {
        "link": "https://docs.python.org/2/library/os.html",
        "document": "This module provides a portable way of using operating system dependent functionality. If you just want to read or write a file see , if you want to manipulate paths, see the module, and if you want to read all the lines in all the files on the command line see the module. For creating temporary files and directories see the module, and for high-level file and directory handling see the module.\n\nNotes on the availability of these functions:\n• None The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function returns stat information about path in the same format (which happens to have originated with the POSIX interface).\n• None Extensions peculiar to a particular operating system are also available through the module, but using them is of course a threat to portability.\n• None An “Availability: Unix” note means that this function is commonly found on Unix systems. It does not make any claims about its existence on a specific operating system.\n• None If not separately noted, all functions that claim “Availability: Unix” are supported on Mac OS X, which builds on a Unix core.\n\nThese functions and data items provide information and operate on the current process and user. A mapping object representing the string environment. For example, is the pathname of your home directory (on some platforms), and is equivalent to in C. This mapping is captured the first time the module is imported, typically during Python startup as part of processing . Changes to the environment made after this time are not reflected in , except for changes made by modifying directly. If the platform supports the function, this mapping may be used to modify the environment as well as query the environment. will be called automatically when the mapping is modified. Calling directly does not change , so it’s better to modify . On some platforms, including FreeBSD and Mac OS X, setting may cause memory leaks. Refer to the system documentation for . If is not provided, a modified copy of this mapping may be passed to the appropriate process-creation functions to cause child processes to use a modified environment. If the platform supports the function, you can delete items in this mapping to unset environment variables. will be called automatically when an item is deleted from , and when one of the or methods is called. Changed in version 2.6: Also unset environment variables when calling and . These functions are described in Files and Directories. Return the filename corresponding to the controlling terminal of the process. Return the effective group id of the current process. This corresponds to the “set id” bit on the file being executed in the current process. Return the real group id of the current process. Return list of supplemental group ids associated with the current process. On Mac OS X, behavior differs somewhat from other Unix platforms. If the Python interpreter was built with a deployment target of or earlier, returns the list of effective group ids associated with the current user process; this list is limited to a system-defined number of entries, typically 16, and may be modified by calls to if suitably privileged. If built with a deployment target greater than , returns the current group access list for the user associated with the effective user id of the process; the group access list may change over the lifetime of the process, it is not affected by calls to , and its length is not limited to 16. The deployment target value, , can be obtained with . Call the system initgroups() to initialize the group access list with all of the groups of which the specified username is a member, plus the specified group id. Return the name of the user logged in on the controlling terminal of the process. For most purposes, it is more useful to use the environment variable to find out who the user is, or to get the login name of the process’s real user id. Return the process group id of the process with process id pid. If pid is 0, the process group id of the current process is returned. Return the id of the current process group. Return the value of the environment variable varname if it exists, or value if it doesn’t. value defaults to . Set the environment variable named varname to the string value. Such changes to the environment affect subprocesses started with , or and . On some platforms, including FreeBSD and Mac OS X, setting may cause memory leaks. Refer to the system documentation for putenv. When is supported, assignments to items in are automatically translated into corresponding calls to ; however, calls to don’t update , so it is actually preferable to assign to items of . Set the list of supplemental group ids associated with the current process to groups. groups must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser. On Mac OS X, the length of groups may not exceed the system-defined maximum number of effective group ids, typically 16. See the documentation for for cases where it may not return the same group list set by calling setgroups(). Call the system call or depending on which version is implemented (if any). See the Unix manual for the semantics. Call the system call to set the process group id of the process with id pid to the process group with id pgrp. See the Unix manual for the semantics. Call the system call . See the Unix manual for the semantics. Call the system call . See the Unix manual for the semantics. Return the error message corresponding to the error code in code. On platforms where returns when given an unknown error number, is raised. Set the current numeric umask and return the previous umask. Return a 5-tuple containing information identifying the current operating system. The tuple contains 5 strings: . Some systems truncate the nodename to 8 characters or to the leading component; a better way to get the hostname is or even . Unset (delete) the environment variable named varname. Such changes to the environment affect subprocesses started with , or and . When is supported, deletion of items in is automatically translated into a corresponding call to ; however, calls to don’t update , so it is actually preferable to delete items of .\n\nThese functions create new file objects. (See also .) Return an open file object connected to the file descriptor fd. The mode and bufsize arguments have the same meaning as the corresponding arguments to the built-in function. If raises an exception, it leaves fd untouched (unclosed). Changed in version 2.3: When specified, the mode argument must now start with one of the letters , , or , otherwise a is raised. Changed in version 2.5: On Unix, when the mode argument starts with , the O_APPEND flag is set on the file descriptor (which the implementation already does on most platforms). Open a pipe to or from command. The return value is an open file object connected to the pipe, which can be read or written depending on whether mode is (default) or . The bufsize argument has the same meaning as the corresponding argument to the built-in function. The exit status of the command (encoded in the format specified for ) is available as the return value of the method of the file object, except that when the exit status is zero (termination without errors), is returned. Deprecated since version 2.6: This function is obsolete. Use the module. Check especially the Replacing Older Functions with the subprocess Module section. Changed in version 2.0: This function worked unreliably under Windows in earlier versions of Python. This was due to the use of the function from the libraries provided with Windows. Newer versions of Python do not use the broken implementation from the Windows libraries. Return a new file object opened in update mode ( ). The file has no directory entries associated with it and will be automatically deleted once there are no file descriptors for the file. There are a number of different functions that provide slightly different ways to create subprocesses. Deprecated since version 2.6: All of the functions are obsolete. Use the module. For each of the variants, if bufsize is specified, it specifies the buffer size for the I/O pipes. mode, if provided, should be the string or ; on Windows this is needed to determine whether the file objects should be opened in binary or text mode. The default value for mode is . Also, for each of these variants, on Unix, cmd may be a sequence, in which case arguments will be passed directly to the program without shell intervention (as with ). If cmd is a string it will be passed to the shell (as with ). These methods do not make it possible to retrieve the exit status from the child processes. The only way to control the input and output streams and also retrieve the return codes is to use the module; these are only available on Unix. For a discussion of possible deadlock conditions related to the use of these functions, see Flow Control Issues. Execute cmd as a sub-process and return the file objects . Deprecated since version 2.6: This function is obsolete. Use the module. Check especially the Replacing Older Functions with the subprocess Module section. Execute cmd as a sub-process and return the file objects . Deprecated since version 2.6: This function is obsolete. Use the module. Check especially the Replacing Older Functions with the subprocess Module section. Execute cmd as a sub-process and return the file objects . Deprecated since version 2.6: This function is obsolete. Use the module. Check especially the Replacing Older Functions with the subprocess Module section. This functionality is also available in the module using functions of the same names, but the return values of those functions have a different order.\n\nThese functions operate on I/O streams referenced using file descriptors. File descriptors are small integers corresponding to a file that has been opened by the current process. For example, standard input is usually file descriptor 0, standard output is 1, and standard error is 2. Further files opened by a process will then be assigned 3, 4, 5, and so forth. The name “file descriptor” is slightly deceptive; on Unix platforms, sockets and pipes are also referenced by file descriptors. The method can be used to obtain the file descriptor associated with a file object when required. Note that using the file descriptor directly will bypass the file object methods, ignoring aspects such as internal buffering of data. This function is intended for low-level I/O and must be applied to a file descriptor as returned by or . To close a “file object” returned by the built-in function or by or , use its method. Close all file descriptors from fd_low (inclusive) to fd_high (exclusive), ignoring errors. Equivalent to: Duplicate file descriptor fd to fd2, closing the latter first if necessary. Change the mode of the file given by fd to the numeric mode. See the docs for for possible values of mode. Change the owner and group id of the file given by fd to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. Force write of file with filedescriptor fd to disk. Does not force update of metadata. This function is not available on MacOS. Return system configuration information relevant to an open file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted. If name is a string and is not known, is raised. If a specific value for name is not supported by the host system, even if it is included in , an is raised with for the error number. Return information about the filesystem containing the file associated with file descriptor fd, like . Force write of file with filedescriptor fd to disk. On Unix, this calls the native function; on Windows, the MS function. If you’re starting with a Python file object f, first do , and then do , to ensure that all internal buffers associated with f are written to disk. Truncate the file corresponding to file descriptor fd, so that it is at most length bytes in size. Return if the file descriptor fd is open and connected to a tty(-like) device, else . Set the current position of file descriptor fd to position pos, modified by how: or to set the position relative to the beginning of the file; or to set it relative to the current position; or to set it relative to the end of the file. Return the new cursor position in bytes, starting from the beginning. Parameters to the function. Their values are 0, 1, and 2, respectively. Open the file file and set various flags according to flags and possibly its mode according to mode. The default mode is (octal), and the current umask value is first masked out. Return the file descriptor for the newly opened file. For a description of the flag and mode values, see the C run-time documentation; flag constants (like and ) are defined in this module too (see open() flag constants). In particular, on Windows adding is needed to open files in binary mode. This function is intended for low-level I/O. For normal usage, use the built-in function , which returns a “file object” with and methods (and many more). To wrap a file descriptor in a “file object”, use . Open a new pseudo-terminal pair. Return a pair of file descriptors for the pty and the tty, respectively. For a (slightly) more portable approach, use the module. Create a pipe. Return a pair of file descriptors usable for reading and writing, respectively. Read at most n bytes from file descriptor fd. Return a string containing the bytes read. If the end of the file referred to by fd has been reached, an empty string is returned. This function is intended for low-level I/O and must be applied to a file descriptor as returned by or . To read a “file object” returned by the built-in function or by or , or , use its or methods. Return the process group associated with the terminal given by fd (an open file descriptor as returned by ). Set the process group associated with the terminal given by fd (an open file descriptor as returned by ) to pg. Return a string which specifies the terminal device associated with file descriptor fd. If fd is not associated with a terminal device, an exception is raised. Write the string str to file descriptor fd. Return the number of bytes actually written. This function is intended for low-level I/O and must be applied to a file descriptor as returned by or . To write a “file object” returned by the built-in function or by or , or or , use its method. The following constants are options for the flags parameter to the function. They can be combined using the bitwise OR operator . Some of them are not available on all platforms. For descriptions of their availability and use, consult the open(2) manual page on Unix or the MSDN on Windows. The above constants are available on Unix and Windows. The above constants are only available on Unix. The above constants are only available on Windows. The above constants are extensions and not present if they are not defined by the C library.\n\nUse the real uid/gid to test for access to path. Note that most operations will use the effective uid/gid, therefore this routine can be used in a suid/sgid environment to test if the invoking user has the specified access to path. mode should be to test the existence of path, or it can be the inclusive OR of one or more of , , and to test permissions. Return if access is allowed, if not. See the Unix man page access(2) for more information. Using to check if a user is authorized to e.g. open a file before actually doing so using creates a security hole, because the user might exploit the short time interval between checking and opening the file to manipulate it. It’s preferable to use EAFP techniques. For example: I/O operations may fail even when indicates that they would succeed, particularly for operations on network filesystems which may have permissions semantics beyond the usual POSIX permission-bit model. Value to pass as the mode parameter of to test the existence of path. Value to include in the mode parameter of to test the readability of path. Value to include in the mode parameter of to test the writability of path. Value to include in the mode parameter of to determine if path can be executed. Change the current working directory to the directory represented by the file descriptor fd. The descriptor must refer to an opened directory, not an open file. Set the flags of path to the numeric flags. flags may take a combination (bitwise OR) of the following values (as defined in the module): Change the root directory of the current process to path. Availability: Unix. Change the mode of path to the numeric mode. mode may take one of the following values (as defined in the module) or bitwise ORed combinations of them: Although Windows supports , you can only set the file’s read-only flag with it (via the and constants or a corresponding integer value). All other bits are ignored. Change the owner and group id of path to the numeric uid and gid. To leave one of the ids unchanged, set it to -1. Set the flags of path to the numeric flags, like , but do not follow symbolic links. Change the mode of path to the numeric mode. If path is a symlink, this affects the symlink rather than the target. See the docs for for possible values of mode. Change the owner and group id of path to the numeric uid and gid. This function will not follow symbolic links. Return a list containing the names of the entries in the directory given by path. The list is in arbitrary order. It does not include the special entries and even if they are present in the directory. Changed in version 2.3: On Windows NT/2k/XP and Unix, if path is a Unicode object, the result will be a list of Unicode objects. Undecodable filenames will still be returned as string objects. Perform the equivalent of an system call on the given path. Similar to , but does not follow symbolic links. On platforms that do not support symbolic links, this is an alias for . Create a FIFO (a named pipe) named path with numeric mode mode. The default mode is (octal). The current umask value is first masked out from the mode. FIFOs are pipes that can be accessed like regular files. FIFOs exist until they are deleted (for example with ). Generally, FIFOs are used as rendezvous between “client” and “server” type processes: the server opens the FIFO for reading, and the client opens it for writing. Note that doesn’t open the FIFO — it just creates the rendezvous point. Create a filesystem node (file, device special file or named pipe) named filename. mode specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of , , , and (those constants are available in ). For and , device defines the newly created device special file (probably using ), otherwise it is ignored. Extract the device major number from a raw device number (usually the or field from ). Extract the device minor number from a raw device number (usually the or field from ). Compose a raw device number from the major and minor device numbers. Create a directory named path with numeric mode mode. The default mode is (octal). If the directory already exists, is raised. On some systems, mode is ignored. Where it is used, the current umask value is first masked out. If bits other than the last 9 (i.e. the last 3 digits of the octal representation of the mode) are set, their meaning is platform-dependent. On some platforms, they are ignored and you should call explicitly to set them. It is also possible to create temporary directories; see the module’s function. Recursive directory creation function. Like , but makes all intermediate-level directories needed to contain the leaf directory. Raises an exception if the leaf directory already exists or cannot be created. The default mode is (octal). The mode parameter is passed to ; see the mkdir() description for how it is interpreted. will become confused if the path elements to create include . Changed in version 2.3: This function now handles UNC paths correctly. Return system configuration information relevant to a named file. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted. If name is a string and is not known, is raised. If a specific value for name is not supported by the host system, even if it is included in , an is raised with for the error number. Dictionary mapping names accepted by and to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. Availability: Unix. Return a string representing the path to which the symbolic link points. The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using . Changed in version 2.6: If the path is a Unicode object the result will also be a Unicode object. Remove (delete) the file path. If path is a directory, is raised; see below to remove a directory. This is identical to the function documented below. On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use. Remove directories recursively. Works like except that, if the leaf directory is successfully removed, tries to successively remove every parent directory mentioned in path until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, will first remove the directory , and then remove and if they are empty. Raises if the leaf directory could not be successfully removed. Rename the file or directory src to dst. If dst is a directory, will be raised. On Unix, if dst exists and is a file, it will be replaced silently if the user has permission. The operation may fail on some Unix flavors if src and dst are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement). On Windows, if dst already exists, will be raised even if it is a file; there may be no way to implement an atomic rename when dst names an existing file. Recursive directory or file renaming function. Works like , except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using . This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file. Remove (delete) the directory path. Only works when the directory is empty, otherwise, is raised. In order to remove whole directory trees, can be used. Perform the equivalent of a system call on the given path. (This function follows symlinks; to stat a symlink use .) The return value is an object whose attributes correspond to the members of the structure, namely:\n• None - platform dependent; time of most recent metadata change on Unix, or the time of creation on Windows) Changed in version 2.3: If returns , the time values are floats, measuring seconds. Fractions of a second may be reported if the system supports that. See for further discussion. On some Unix systems (such as Linux), the following attributes may also be available:\n• None - type of device if an inode device On other Unix systems (such as FreeBSD), the following attributes may be available (but may be only filled out if root tries to use them): On RISCOS systems, the following attributes are also available: The exact meaning and resolution of the , , and attributes depend on the operating system and the file system. For example, on Windows systems using the FAT or FAT32 file systems, has 2-second resolution, and has only 1-day resolution. See your operating system documentation for details. For backward compatibility, the return value of is also accessible as a tuple of at least 10 integers giving the most important (and portable) members of the structure, in the order , , , , , , , , , . More items may be added at the end by some implementations. The standard module defines functions and constants that are useful for extracting information from a structure. (On Windows, some items are filled with dummy values.) Changed in version 2.2: Added access to values as attributes of the returned object. Determine whether represents time stamps as float objects. If newvalue is , future calls to return floats, if it is , future calls return ints. If newvalue is omitted, return the current setting. For compatibility with older Python versions, accessing as a tuple always returns integers. Changed in version 2.5: Python now returns float values by default. Applications which do not work correctly with floating point time stamps can use this function to restore the old behaviour. The resolution of the timestamps (that is the smallest possible fraction) depends on the system. Some systems only support second resolution; on these systems, the fraction will always be zero. It is recommended that this setting is only changed at program startup time in the __main__ module; libraries should never change this setting. If an application uses a library that works incorrectly if floating point time stamps are processed, this application should turn the feature off until the library has been corrected. Perform a system call on the given path. The return value is an object whose attributes describe the filesystem on the given path, and correspond to the members of the structure, namely: , , , , , , , , , . For backward compatibility, the return value is also accessible as a tuple whose values correspond to the attributes, in the order given above. The standard module defines constants that are useful for extracting information from a structure when accessing it as a sequence; this remains useful when writing code that needs to work with versions of Python that don’t support accessing the fields as attributes. Changed in version 2.2: Added access to values as attributes of the returned object. Return a unique path name that is reasonable for creating a temporary file. This will be an absolute path that names a potential directory entry in the directory dir or a common location for temporary files if dir is omitted or . If given and not , prefix is used to provide a short prefix to the filename. Applications are responsible for properly creating and managing files created using paths returned by ; no automatic cleanup is provided. On Unix, the environment variable overrides dir, while on Windows is used. The specific behavior of this function depends on the C library implementation; some aspects are underspecified in system documentation. Use of is vulnerable to symlink attacks; consider using (section File Object Creation) instead. Return a unique path name that is reasonable for creating a temporary file. This will be an absolute path that names a potential directory entry in a common location for temporary files. Applications are responsible for properly creating and managing files created using paths returned by ; no automatic cleanup is provided. Use of is vulnerable to symlink attacks; consider using (section File Object Creation) instead. Availability: Unix, Windows. This function probably shouldn’t be used on Windows, though: Microsoft’s implementation of always creates a name in the root directory of the current drive, and that’s generally a poor location for a temp file (depending on privileges, you may not even be able to open a file using this name). The maximum number of unique names that will generate before reusing names. Remove (delete) the file path. This is the same function as ; the name is its traditional Unix name. Set the access and modified times of the file specified by path. If times is , then the file’s access and modified times are set to the current time. (The effect is similar to running the Unix program touch on the path.) Otherwise, times must be a 2-tuple of numbers, of the form which is used to set the access and modified times, respectively. Whether a directory can be given for path depends on whether the operating system implements directories as files (for example, Windows does not). Note that the exact times you set here may not be returned by a subsequent call, depending on the resolution with which your operating system records access and modification times; see . Changed in version 2.0: Added support for for times. Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple . dirpath is a string, the path to the directory. dirnames is a list of the names of the subdirectories in dirpath (excluding and ). filenames is a list of the names of the non-directory files in dirpath. Note that the names in the lists contain no path components. To get a full path (which begins with top) to a file or directory in dirpath, do . If optional argument topdown is or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down). If topdown is , the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). No matter the value of topdown, the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated. When topdown is , the caller can modify the dirnames list in-place (perhaps using or slice assignment), and will only recurse into the subdirectories whose names remain in dirnames; this can be used to prune the search, impose a specific order of visiting, or even to inform about directories the caller creates or renames before it resumes again. Modifying dirnames when topdown is has no effect on the behavior of the walk, because in bottom-up mode the directories in dirnames are generated before dirpath itself is generated. By default, errors from the call are ignored. If optional argument onerror is specified, it should be a function; it will be called with one argument, an instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the attribute of the exception object. By default, will not walk down into symbolic links that resolve to directories. Set followlinks to to visit directories pointed to by symlinks, on systems that support them. New in version 2.6: The followlinks parameter. Be aware that setting followlinks to can lead to infinite recursion if a link points to a parent directory of itself. does not keep track of the directories it visited already. If you pass a relative pathname, don’t change the current working directory between resumptions of . never changes the current directory, and assumes that its caller doesn’t either. This example displays the number of bytes taken by non-directory files in each directory under the starting directory, except that it doesn’t look under any CVS subdirectory: In the next example, walking the tree bottom-up is essential: doesn’t allow deleting a directory before the directory is empty: # Delete everything reachable from the directory named in \"top\", # assuming there are no symbolic links. # CAUTION: This is dangerous! For example, if top == '/', it # could delete all your disk files.\n\nThese functions may be used to create and manage processes. The various functions take a list of arguments for the new program loaded into the process. In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line. For the C programmer, this is the passed to a program’s . For example, will only print on standard output; will seem to be ignored. Generate a signal to the current process. On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of . Be aware that calling this function will not call the Python signal handler registered for with . These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as exceptions. The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using or before calling an function. The “l” and “v” variants of the functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter. In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced. The variants which include a “p” near the end ( , , , and ) will use the environment variable to locate the program file. When the environment is being replaced (using one of the variants, discussed in the next paragraph), the new environment is used as the source of the variable. The other variants, , , , and , will not use the variable to locate the executable; path must contain an appropriate absolute or relative path. For , , , and (note that these all end in “e”), the env parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process’ environment); the functions , , , and all cause the new process to inherit the environment of the current process. Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc. The standard way to exit is . should normally only be used in the child process after a . The following exit codes are defined and can be used with , although they are not required. These are typically used for system programs written in Python, such as a mail server’s external command delivery program. Some of these may not be available on all Unix platforms, since there is some variation. These constants are defined where they are defined by the underlying platform. Exit code that means the command was used incorrectly, such as when the wrong number of arguments are given. Exit code that means the input data was incorrect. Exit code that means an input file did not exist or was not readable. Exit code that means a specified user did not exist. Exit code that means a specified host did not exist. Exit code that means that a required service is unavailable. Exit code that means an internal software error was detected. Exit code that means an operating system error was detected, such as the inability to fork or create a pipe. Exit code that means some system file did not exist, could not be opened, or had some other kind of error. Exit code that means a user specified output file could not be created. Exit code that means that an error occurred while doing I/O on some file. Exit code that means a temporary failure occurred. This indicates something that may not really be an error, such as a network connection that couldn’t be made during a retryable operation. Exit code that means that a protocol exchange was illegal, invalid, or not understood. Exit code that means that there were insufficient permissions to perform the operation (but not intended for file system problems). Exit code that means that some kind of configuration error occurred. Exit code that means something like “an entry was not found”. Fork a child process. Return in the child and the child’s process id in the parent. If an error occurs is raised. Note that some platforms including FreeBSD <= 6.3, Cygwin and OS/2 EMX have known issues when using fork() from a thread. See for applications that use the SSL module with fork(). Fork a child process, using a new pseudo-terminal as the child’s controlling terminal. Return a pair of , where pid is in the child, the new child’s process id in the parent, and fd is the file descriptor of the master end of the pseudo-terminal. For a more portable approach, use the module. If an error occurs is raised. Send signal sig to the process pid. Constants for the specific signals available on the host platform are defined in the module. Windows: The and signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for sig will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to sig. The Windows version of additionally takes process handles to be killed. Send the signal sig to the process group pgid. Add increment to the process’s “niceness”. Return the new niceness. Lock program segments into memory. The value of op (defined in ) determines which segments are locked. Run child processes, returning opened pipes for communications. These functions are described in section File Object Creation. Execute the program path in a new process. If mode is , this function returns the process id of the new process; if mode is , returns the process’s exit code if it exits normally, or , where signal is the signal that killed the process. On Windows, the process id will actually be the process handle, so can be used with the function. The “l” and “v” variants of the functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the args parameter. In either case, the arguments to the child process must start with the name of the command being run. The variants which include a second “p” near the end ( , , , and ) will use the environment variable to locate the program file. When the environment is being replaced (using one of the variants, discussed in the next paragraph), the new environment is used as the source of the variable. The other variants, , , , and , will not use the variable to locate the executable; path must contain an appropriate absolute or relative path. For , , , and (note that these all end in “e”), the env parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process’ environment); the functions , , , and all cause the new process to inherit the environment of the current process. Note that keys and values in the env dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of . As an example, the following calls to and are equivalent: Availability: Unix, Windows. , , and are not available on Windows. and are not thread-safe on Windows; we advise you to use the module instead. Possible values for the mode parameter to the family of functions. If either of these values is given, the functions will return as soon as the new process has been created, with the process id as the return value. Possible value for the mode parameter to the family of functions. If this is given as mode, the functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or if a signal kills the process. Possible values for the mode parameter to the family of functions. These are less portable than those listed above. is similar to , but the new process is detached from the console of the calling process. If is used, the current process will be replaced; the function will not return. Start a file with its associated application. When operation is not specified or , this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the start command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated. When another operation is given, it must be a “command verb” that specifies what should be done with the file. Common verbs documented by Microsoft are and (to be used on files) as well as and (to be used on directories). returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application’s exit status. The path parameter is relative to the current directory. If you want to use an absolute path, make sure the first character is not a slash ( ); the underlying Win32 function doesn’t work if it is. Use the function to ensure that the path is properly encoded for Win32. New in version 2.5: The operation parameter. Execute the command (a string) in a subshell. This is implemented by calling the Standard C function , and has the same limitations. Changes to , etc. are not reflected in the environment of the executed command. On Unix, the return value is the exit status of the process encoded in the format specified for . Note that POSIX does not specify the meaning of the return value of the C function, so the return value of the Python function is system-dependent. On Windows, the return value is that returned by the system shell after running command, given by the Windows environment variable : on command.com systems (Windows 95, 98 and ME) this is always ; on cmd.exe systems (Windows NT, 2000 and XP) this is the exit status of the command run; on systems using a non-native shell, consult your shell documentation. The module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the Replacing Older Functions with the subprocess Module section in the documentation for some helpful recipes. Return a 5-tuple of floating point numbers indicating accumulated (processor or other) times, in seconds. The items are: user time, system time, children’s user time, children’s system time, and elapsed real time since a fixed point in the past, in that order. See the Unix manual page times(2) or the corresponding Windows Platform API documentation. On Windows, only the first two items are filled, the others are zero. Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced. The details of this function differ on Unix and Windows. On Unix: Wait for completion of a child process given by process id pid, and return a tuple containing its process id and exit status indication (encoded as for ). The semantics of the call are affected by the value of the integer options, which should be for normal operation. If pid is greater than , requests status information for that specific process. If pid is , the request is for the status of any child in the process group of the current process. If pid is , the request pertains to any child of the current process. If pid is less than , status is requested for any process in the process group (the absolute value of pid). An is raised with the value of errno when the syscall returns -1. On Windows: Wait for completion of a process given by process handle pid, and return a tuple containing pid, and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A pid less than or equal to has no special meaning on Windows, and raises an exception. The value of integer options has no effect. pid can refer to any process whose id is known, not necessarily a child process. The functions called with return suitable process handles. Similar to , except no process id argument is given and a 3-element tuple containing the child’s process id, exit status indication, and resource usage information is returned. Refer to . for details on resource usage information. The option argument is the same as that provided to and . Similar to , except a 3-element tuple, containing the child’s process id, exit status indication, and resource usage information is returned. Refer to . for details on resource usage information. The arguments to are the same as those provided to . The option for to return immediately if no child process status is available immediately. The function returns in this case. This option causes child processes to be reported if they have been continued from a job control stop since their status was last reported. This option causes child processes to be reported if they have been stopped but their current state has not been reported since they were stopped. The following functions take a process status code as returned by , , or as a parameter. They may be used to determine the disposition of a process. Return if a core dump was generated for the process, otherwise return . Return if the process has been continued from a job control stop, otherwise return . Return if the process has been stopped, otherwise return . Return if the process exited due to a signal, otherwise return . Return if the process exited using the exit(2) system call, otherwise return . If is true, return the integer parameter to the exit(2) system call. Otherwise, the return value is meaningless. Return the signal which caused the process to stop. Return the signal which caused the process to exit.\n\nReturn string-valued system configuration values. name specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given as the keys of the dictionary. For configuration variables not included in that mapping, passing an integer for name is also accepted. If the configuration value specified by name isn’t defined, is returned. If name is a string and is not known, is raised. If a specific value for name is not supported by the host system, even if it is included in , an is raised with for the error number. Dictionary mapping names accepted by to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. Return the number of processes in the system run queue averaged over the last 1, 5, and 15 minutes or raises if the load average was unobtainable. Return integer-valued system configuration values. If the configuration value specified by name isn’t defined, is returned. The comments regarding the name parameter for apply here as well; the dictionary that provides information on the known names is given by . Dictionary mapping names accepted by to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system. The following data values are used to support path manipulation operations. These are defined for all platforms. Higher-level operations on pathnames are defined in the module. The constant string used by the operating system to refer to the current directory. This is for Windows and POSIX. Also available via . The constant string used by the operating system to refer to the parent directory. This is for Windows and POSIX. Also available via . The character used by the operating system to separate pathname components. This is for POSIX and for Windows. Note that knowing this is not sufficient to be able to parse or concatenate pathnames — use and — but it is occasionally useful. Also available via . An alternative character used by the operating system to separate pathname components, or if only one separator character exists. This is set to on Windows systems where is a backslash. Also available via . The character which separates the base filename from the extension; for example, the in . Also available via . The character conventionally used by the operating system to separate search path components (as in ), such as for POSIX or for Windows. Also available via . The default search path used by and if the environment doesn’t have a key. Also available via . The string used to separate (or, rather, terminate) lines on the current platform. This may be a single character, such as for POSIX, or multiple characters, for example, for Windows. Do not use os.linesep as a line terminator when writing files opened in text mode (the default); use a single instead, on all platforms. The file path of the null device. For example: for POSIX, for Windows. Also available via ."
    },
    {
        "link": "https://geeksforgeeks.org/python-os-system-method",
        "document": "The OS module in Python provides functions for interacting with the operating system. OS comes under Python’s standard utility modules. This module provides a portable way of using operating system-dependent functionality.\n\nmethod executes the command (a string) in a subshell. This method is implemented by calling the Standard C function system() and has the same limitations. If the command generates any output, it is sent to the interpreter’s standard output stream. Whenever this method is used then the respective shell of the Operating system is opened and the command is executed on it.\n\nThere are various uses of os.system in the Python operating system or OS command. here we are discussing some general uses of os.system in the Python operating system or OS command those are following.\n\nIn this example, code imports the `os` module or uses the OS command and uses `os.system(‘date’)` to execute the ‘date’ command in a Windows operating system.\n\nIn this example code imports the `os` module or use the OS command and uses `os.system(‘notepad’)` to execute the ‘notepad’ command on a Windows operating system, opening the Notepad application.\n\nWhat is OS Command Used For?\n\nHow Do I Delete a File in Python?\n\nTo delete a file in Python, you can use the function from the module. Here’s how to do it: \n\n\n\n # File path which you want to delete \n\n \n\n\n\n\n\n \n\n\n\n\n\n \n\n\n\n This script checks if the file exists to avoid throwing an error if the file is not found."
    },
    {
        "link": "https://stackoverflow.com/questions/2084508/clear-the-terminal-in-python",
        "document": "This function works in GNOME terminal because, by default, it recognizes ANSI escape sequences. It gives you a clean prompt distance from the bottom of the terminal, but also precisely from where it was called. It gives you complete control over how much to clear.\n\nParameters: is the number of clear text rows to add between prompt and bottom of terminal, pushing everything up. is the height of the terminal (or maximum clearing height) in text rows, and only needs to be set once, but it can be reset at any time. in the third parameter position means all following parameters are keyword only (e.g., clear(absolute=5)). (default) works better in Interactive mode. works better for text-based, terminal applications. was added to try to fix glitchy gap problems in Interactive mode after reducing size of terminal, but can also be used for terminal applications. is just for secret, \"persistent\" storage of value; don't explicitly use this parameter. (When an argument is not passed for , changing the list contents of changes this parameter's default value. Hence, persistent storage.)\n\nPortability: Sorry, this doesn't work in IDLE, but it works >> very cool << in Interactive mode in a terminal (console) that recognizes ANSI escape sequences. I only tested this in Ubuntu 13.10 (Saucy Salamander) using Python 3.3 in gnome-terminal. So I can only assume portability is dependant upon Python 3.3 (for the function for best results) and ANSI recognition. The function is Python 3. I also tested this with a simple, text-based, terminal tic-tac-toe game (application).\n\nFor use in Interactive mode: First copy and paste the function in Interactive mode and see if it works for you. If so, then put the above function into a file named clear.py. In the terminal, start the Python interpreter, with 'python3'. Enter:\n\nNow drop the clear.py file into one of the directories listed so that Python can find it (don't overwrite any existing files). To easily use from now on:\n\nFor use in a terminal application: Put the function into a file named clear.py in the same folder with your main.py file. Here is a working abstract (skeleton) example from a tic-tac-toe game application (run from terminal prompt: python3 tictactoe.py):\n\nExplanation: on line 19 is a version of needed to keep track of how many new lines have been printed ( ). Otherwise, you would have to all over the place where is called throughout the entire program. So each time the board is redrawn by calling the previous board is cleared out and the new board is printed exactly where it should be. Notice on line 9 basically pushes everything up RELATIVE to the bottom of the terminal, but does not clear the original calling line. In contrast, on line 29 absolutely clears out everything distance upward, rather than just pushing everything upward relative to the bottom of the terminal.\n\nUbuntu users with Python 3.3: Put on the very first line of the tictactoe.py file. Right click on the tictactoe.py file => Properties => Permissions tab => Check Execute: Allow executing file as program. Double click on the file => Click Run in Terminal button. If an open terminal's current directory is that of the tictactoe.py file, you can also start the file with ."
    },
    {
        "link": "https://stackoverflow.com/questions/34388390/python-clearing-the-terminal-screen-more-elegantly",
        "document": "You could also cache the clear-screen escape sequence produced by command:\n\nany time you want to clear the screen.\n\ncommand that produces the same sequence is defined in POSIX.\n\nYou could use , to get the sequence:\n\nThe advantage is that you don't need to call that is required to get a window object which has , methods.\n\nTo use the same source on both Python 2 and 3, you could use function:\n\ncommand on my system also tries to clear the scrollback buffer using ."
    },
    {
        "link": "https://geeksforgeeks.org/clear-screen-python",
        "document": "Most of the time, while working with Python interactive shell/terminal (not a console), we end up with a messy output and want to clear the screen for some reason. In an interactive shell/terminal, we can simply use\n\nBut, what if we want to clear the screen while running a python script? Unfortunately, there’s no built-in keyword or function/method to clear the screen. So, we do it on our own.\n\nYou can simply “cls” to clear the screen in windows.\n\nExample 2: Clear screen in Python using clear\n\nYou can also only “import os” instead of “from os import system” but with that, you have to change system(‘clear’) to os.system(‘clear’).\n\nExample 3: Clear screen in Python using call\n\nAnother way to accomplish this is using the subprocess module.\n\nIn this example, we used the time module and os module to clear the screen in Linux os.\n\nHow to clear screen in python? – FAQs\n\nHow to Clear Screen in Python in Code?\n\nTo clear the screen in a Python script running in a command line or terminal, you can use the module to execute the relevant command for your operating system: This function checks the operating system and executes for Windows or for Unix-based systems (Linux and macOS).\n\nHow Do I Clear the Screen GUI in Python?\n\nFor clearing a graphical user interface (GUI) in Python, it depends on the GUI toolkit you are using. For example, in Tkinter, you might clear the contents of widgets or reset them. Here’s a simple example of how to clear a text widget in Tkinter: This sets up a window with a text box and a button that clears the text box when clicked.\n\nHow to Clear Screen in Python PyCharm?\n\nAssuming is a Turtle object in the Python Turtle graphics module, clears the drawings on the screen done by the turtle instance but does not move the turtle. The screen remains intact, and the turtle state is unchanged. Here’s how you might use it: This would draw a line and then remove it without moving the turtle back to its starting position.\n\nHow to Clear Input in Python?\n\nIn Python, once you’ve taken input using the function, you can’t “clear” it in the sense of removing it from memory immediately as inputs are stored in variables. You can overwrite the variable or delimit its scope to ensure it’s no longer accessible: If your goal is to ignore a user’s input under certain conditions and prompt them again, you’d typically use a loop that continues to request input until a valid condition is met. Each of these methods addresses different types of “clearing” in Python, tailored to the environment or framework being used"
    },
    {
        "link": "https://dev.to/olddutchcap/a-handy-way-to-clear-the-terminal-in-python-25ge",
        "document": "So I have been using the Python REPL quite a bit lately. I've been using it on Windows and it was really getting quite annoying to me that I couldn't clear the terminal screen.\n\nWith a little bit of work I was able to hack together this code to allow me to clear the terminal. There were a few small issues that made this non-trivial.\n\nMost of the examples I could find on StackOverflow used os.cmd to call either or . Using is deprecated. I needed to figure out how to run this as a subprocess. This made it slightly more tricky because cls is an internal command. That means it's built into the cmd executable. We can't execute cls directly therefore we need to execute it as part of an invocation of cmd.\n\nThe command line is . The parameter tells the command processor to immediately exit after executing the cls.\n\n\n\nSo while we have the right code now we want it to automatically be available to us every time we fire up a Python REPL clear is available to us.\n\nIt's my understanding that there are multiple ways to stash this code so that Python picks it up automatically. Here's how I did it.\n\nI created a new User Level Environment Variable and pointed it to my directory. USERPROFILE is the Windows analog of the HOME directory on a *nix machine. I saved the code in a .pyrc file which I stored into the %PYTHONSTARTUP% directory.\n\nThis is nothing major or earthshaking but it took me a few minutes of work to figure it out so I thought others might like to know about it as well."
    },
    {
        "link": "https://scaler.com/topics/how-to-clear-screen-in-python",
        "document": "Suppose there is a case where you have given the information of 3 students, and you have to print their details in a way like first there will be information of student 1, then after some time information of student 2 will be displayed and then finally the information of student 3 will be displayed. So, in that case, we will have to clear the python console each time after displaying information about each student. Image Explanation of the above Example In an interactive shell/terminal, to clear the python console, we can use the ctrl+l command, but in most cases, we have to clear the screen while running the python script, so we have to do it programmatically. We can clear screen programmatically, and it helps us to format the output in the way we want. We can also clear the output whenever we want many numbers of times.\n\nHow to clear the python console screen? Clearing the console in python has different methods for different Operating Systems. These are stated below:\n• In Windows: For clearing the console in the windows operating system, we will use the from the os module with the 'cls' parameter. Syntax of the system() function: system() function is in the os module, so the os module needs to be imported before using the system() function in Windows. After importing the os module, the string parameter 'cls' is passed inside the system function to clear the screen.\n• In Linux and MacOS: For clearing the console in Linux and Mac operating systems, we will use the system() function from the os module with the 'clear' parameter. Syntax: os module needs to be imported before using the system() function in Linux. After importing the os module string value parameter 'clear' is passed inside the system function to clear the screen.\n• Ctrl+l: This method only works for Linux operating system. In an interactive shell/terminal, we can simply use ctrl+l to clear the screen.\n\nLet's look at an example of the clear screen in python to clarify our understanding. We will use the above-stated system() function for clearing the python console. First, we will print some Output; then we will wait for 4 seconds using the sleep() function to halt the program for 4 seconds, and after that, we will apply os.system('cls') to clear the screen. The output window will print the given text first, then the program will sleep for 4 seconds, then the screen will be cleared, and program execution will be stopped. Example 2: Clearing the screen, then printing some more information in Windows Operating System. First we will print some Output, then we will wait for 1 second using the sleep() function, and after that, we will apply os.system('cls') to clear the screen. After that, we will print some more information. The output window will print the first information, then the program will sleep for 1 second, and the screen will be cleared, and then it will print the second information. Again the program will sleep for 1 second, and at last, the program will be stopped after printing the final batch of information. We will use the above-stated system() method for clearing the python console. First, we will print some Output; then we will wait for 5 seconds using the sleep() function, and after that, we will apply os.system('clear') to clear the screen.\n• After 5 seconds, the screen is cleared. The output window will print the given text first, then the program will sleep for 5 seconds, then the screen will be cleared, and program execution will be stopped. Example 4: What if we don't know what OS we are working on? There can be a case where we must first determine what OS we are working on. So, we will first determine whether the os is Windows, Linux, or Mac. For Windows, the os name is \"nt\" and for Linux or mac, the OS name is \"posix\". So we will check the os name and then accordingly apply the function. For this case, the os name is nt, so windows console will be cleared after 2 seconds of program sleep, and then it will be terminated."
    }
]