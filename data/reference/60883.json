[
    {
        "link": "https://support.microsoft.com/en-us/office/look-up-values-with-vlookup-index-or-match-68297403-7c3c-4150-9e3c-4d348188976b",
        "document": "Tip: Try using the new XLOOKUP and XMATCH functions, improved versions of the functions described in this article. These new functions work in any direction and return exact matches by default, making them easier and more convenient to use than their predecessors. Suppose that you have a list of office location numbers, and you need to know which employees are in each office. The spreadsheet is huge, so you might think it is challenging task. It's actually quite easy to do with a lookup function. The VLOOKUP and HLOOKUP functions, together with INDEX and MATCH,﻿ are some of the most useful functions in Excel. Note: The Lookup Wizard feature is no longer available in Excel. Here's an example of how to use VLOOKUP. In this example, B2 is the first argument—an element of data that the function needs to work. For VLOOKUP, this first argument is the value that you want to find. This argument can be a cell reference, or a fixed value such as \"smith\" or 21,000. The second argument is the range of cells, C2-:E7, in which to search for the value you want to find. The third argument is the column in that range of cells that contains the value that you seek. The fourth argument is optional. Enter either TRUE or FALSE. If you enter TRUE, or leave the argument blank, the function returns an approximate match of the value you specify in the first argument. If you enter FALSE, the function will match the value provide by the first argument. In other words, leaving the fourth argument blank—or entering TRUE—gives you more flexibility. This example shows you how the function works. When you enter a value in cell B2 (the first argument), VLOOKUP searches the cells in the range C2:E7 (2nd argument) and returns the closest approximate match from the third column in the range, column E (3rd argument). The fourth argument is empty, so the function returns an approximate match. If it didn't, you'd have to enter one of the values in columns C or D to get a result at all. When you're comfortable with VLOOKUP, the HLOOKUP function is equally easy to use. You enter the same arguments, but it searches in rows instead of columns.\n\nUsing INDEX and MATCH instead of VLOOKUP There are certain limitations with using VLOOKUP—the VLOOKUP function can only look up a value from left to right. This means that the column containing the value you look up should always be located to the left of the column containing the return value. Now if your spreadsheet isn't built this way, then do not use VLOOKUP. Use the combination of INDEX and MATCH functions instead. This example shows a small list where the value we want to search on, Chicago, isn't in the leftmost column. So, we can't use VLOOKUP. Instead, we'll use the MATCH function to find Chicago in the range B1:B11. It's found in row 4. Then, INDEX uses that value as the lookup argument, and finds the population for Chicago in the 4th column (column D). The formula used is shown in cell A14.\n\nIf you want to experiment with lookup functions before you try them out with your own data, here's some sample data. Copy the following data into a blank spreadsheet. Tip: Before you paste the data into Excel, set the column widths for columns A through C to 250 pixels, and click Wrap Text (Home tab, Alignment group). Using an approximate match, searches for the value 1 in column A, finds the largest value less than or equal to 1 in column A which is 0.946, and then returns the value from column B in the same row. Using an approximate match, searches for the value 1 in column A, finds the largest value less than or equal to 1 in column A, which is 0.946, and then returns the value from column C in the same row. Using an exact match, searches for the value 0.7 in column A. Because there is no exact match in column A, an error is returned. Using an approximate match, searches for the value 0.1 in column A. Because 0.1 is less than the smallest value in column A, an error is returned. Using an approximate match, searches for the value 2 in column A, finds the largest value less than or equal to 2 in column A, which is 1.29, and then returns the value from column B in the same row. Copy all the cells in this table and paste it into cell A1 on a blank worksheet in Excel. Tip: Before you paste the data into Excel, set the column widths for columns A through C to 250 pixels, and click Wrap Text (Home tab, Alignment group). Looks up \"Axles\" in row 1, and returns the value from row 2 that's in the same column (column A). Looks up \"Bearings\" in row 1, and returns the value from row 3 that's in the same column (column B). Looks up \"B\" in row 1, and returns the value from row 3 that's in the same column. Because an exact match for \"B\" is not found, the largest value in row 1 that is less than \"B\" is used: \"Axles,\" in column A. Looks up \"Bolts\" in row 1, and returns the value from row 4 that's in the same column (column C). Looks up the number 3 in the three-row array constant, and returns the value from row 2 in the same (in this case, third) column. There are three rows of values in the array constant, each row separated by a semicolon (;). Because \"c\" is found in row 2 and in the same column as 3, \"c\" is returned. This last example employs the INDEX and MATCH functions together to return the earliest invoice number and its corresponding date for each of five cities. Because the date is returned as a number, we use the TEXT function to format it as a date. The INDEX function actually uses the result of the MATCH function as its argument. The combination of the INDEX and MATCH functions are used twice in each formula – first, to return the invoice number, and then to return the date. Copy all the cells in this table and paste it into cell A1 on a blank worksheet in Excel. Tip: Before you paste the data into Excel, set the column widths for columns A through D to 250 pixels, and click Wrap Text (Home tab, Alignment group)."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/match-function-e8dffd45-c762-47d6-bf89-533f4a37673a",
        "document": "Tip: Try using the new XMATCH function, an improved version of MATCH that works in any direction and returns exact matches by default, making it easier and more convenient to use than its predecessor. The MATCH function searches for a specified item in a range of cells, and then returns the relative position of that item in the range. For example, if the range A1:A3 contains the values 5, 25, and 38, then the formula =MATCH(25,A1:A3,0) returns the number 2, because 25 is the second item in the range. Tip: Use MATCH instead of one of the LOOKUP functions when you need the position of an item in a range instead of the item itself. For example, you might use the MATCH function to provide a value for the row_num argument of the INDEX function.\n\nThe MATCH function syntax has the following arguments:\n• lookup_value Required. The value that you want to match in lookup_array. For example, when you look up someone's number in a telephone book, you are using the person's name as the lookup value, but the telephone number is the value you want.\n\n\n\nThe lookup_value argument can be a value (number, text, or logical value) or a cell reference to a number, text, or logical value.\n• lookup_array Required. The range of cells being searched.\n• match_type Optional. The number -1, 0, or 1. The match_type argument specifies how Excel matches lookup_value with values in lookup_array. The default value for this argument is 1.\n\n\n\nThe following table describes how the function finds values based on the setting of the match_type argument. MATCH finds the largest value that is less than or equal to lookup_value. The values in the lookup_array argument must be placed in ascending order, for example: ...-2, -1, 0, 1, 2, ..., A-Z, FALSE, TRUE. MATCH finds the first value that is exactly equal to lookup_value. The values in the lookup_array argument can be in any order. MATCH finds the smallest value that is greater than or equal tolookup_value. The values in the lookup_array argument must be placed in descending order, for example: TRUE, FALSE, Z-A, ...2, 1, 0, -1, -2, ..., and so on.\n• MATCH returns the position of the matched value within lookup_array, not the value itself. For example, MATCH(\"b\",{\"a\",\"b\",\"c\"},0) returns 2, which is the relative position of \"b\" within the array {\"a\",\"b\",\"c\"}.\n• MATCH does not distinguish between uppercase and lowercase letters when matching text values.\n• If MATCH is unsuccessful in finding a match, it returns the #N/A error value.\n• If match_type is 0 and lookup_value is a text string, you can use the wildcard characters — the question mark (?) and asterisk (*) — in the lookup_value argument. A question mark matches any single character; an asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) before the character.\n\nCopy the example data in the following table, and paste it in cell A1 of a new Excel worksheet. For formulas to show results, select them, press F2, and then press Enter. If you need to, you can adjust the column widths to see all the data. Because there is not an exact match, the position of the next lowest value (38) in the range B2:B5 is returned. The position of the value 41 in the range B2:B5. Returns an error because the values in the range B2:B5 are not in descending order."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/index-function-a5dcf0dd-996d-40a4-a822-b56b061328bd",
        "document": "The INDEX function returns a value or the reference to a value from within a table or range. There are two ways to use the INDEX function:\n• If you want to return the value of a specified cell or array of cells, see Array form.\n• If you want to return a reference to specified cells, see Reference form.\n\nReturns the value of an element in a table or an array, selected by the row and column number indexes. Use the array form if the first argument to INDEX is an array constant. The array form of the INDEX function has the following arguments:\n• array Required. A range of cells or an array constant.\n• If array contains only one row or column, the corresponding row_num or column_num argument is optional.\n• If array has more than one row and more than one column, and only row_num or column_num is used, INDEX returns an array of the entire row or column in array.\n• row_num Required, unless column_num is present. Selects the row in array from which to return a value. If row_num is omitted, column_num is required.\n• column_num Optional. Selects the column in array from which to return a value. If column_num is omitted, row_num is required.\n• If both the row_num and column_num arguments are used, INDEX returns the value in the cell at the intersection of row_num and column_num.\n• row_num and column_num must point to a cell within array; otherwise, INDEX returns a #REF! error.\n• If you set row_num or column_num to 0 (zero), INDEX returns the array of values for the entire column or row, respectively. To use values returned as an array, enter the INDEX function as an array formula. Note: If you have a current version of Microsoft 365, then you can input the formula in the top-left-cell of the output range, then press ENTER to confirm the formula as a dynamic array formula. Otherwise, the formula must be entered as a legacy array formula by first selecting the output range, input the formula in the top-left-cell of the output range, then press CTRL+SHIFT+ENTER to confirm it. Excel inserts curly brackets at the beginning and end of the formula for you. For more information on array formulas, see Guidelines and examples of array formulas.\n\nThese examples use the INDEX function to find the value in the intersecting cell where a row and a column meet. Copy the example data in the following table, and paste it in cell A1 of a new Excel worksheet. For formulas to show results, select them, press F2, and then press Enter. Value at the intersection of the second row and second column in the range A2:B3. Value at the intersection of the second row and first column in the range A2:B3. This example uses the INDEX function in an array formula to find the values in two cells specified in a 2x2 array. Note: If you have a current version of Microsoft 365, then you can input the formula in the top-left-cell of the output range, then press ENTER to confirm the formula as a dynamic array formula. Otherwise, the formula must be entered as a legacy array formula by first selecting two blank cells, input the formula in the top-left-cell of the output range, then press CTRL+SHIFT+ENTER to confirm it. Excel inserts curly brackets at the beginning and end of the formula for you. For more information on array formulas, see Guidelines and examples of array formulas. Value found in the first row, second column in the array. The array contains 1 and 2 in the first row and 3 and 4 in the second row. Value found in the second row, second column in the array (same array as above).\n\nReturns the reference of the cell at the intersection of a particular row and column. If the reference is made up of non-adjacent selections, you can pick the selection to look in. The reference form of the INDEX function has the following arguments:\n• reference Required. A reference to one or more cell ranges.\n• If you are entering a non-adjacent range for the reference, enclose reference in parentheses.\n• If each area in reference contains only one row or column, the row_num or column_num argument, respectively, is optional. For example, for a single row reference, use INDEX(reference,,column_num).\n• row_num Required. The number of the row in reference from which to return a reference.\n• column_num Optional. The number of the column in reference from which to return a reference.\n• area_num Optional. Selects a range in reference from which to return the intersection of row_num and column_num. The first area selected or entered is numbered 1, the second is 2, and so on. If area_num is omitted, INDEX uses area 1. The areas listed here must all be located on one sheet. If you specify areas that are not on the same sheet as each other, it will cause a #VALUE! error. If you need to use ranges that are located on different sheets from each other, it is recommended that you use the array form of the INDEX function, and use another function to calculate the range that makes up the array. For example, you could use the CHOOSE function to calculate which range will be used. For example, if Reference describes the cells (A1:B4,D1:E4,G1:H4), area_num 1 is the range A1:B4, area_num 2 is the range D1:E4, and area_num 3 is the range G1:H4.\n• After reference and area_num have selected a particular range, row_num and column_num select a particular cell: row_num 1 is the first row in the range, column_num 1 is the first column, and so on. The reference returned by INDEX is the intersection of row_num and column_num.\n• If you set row_num or column_num to 0 (zero), INDEX returns the reference for the entire column or row, respectively.\n• row_num, column_num, and area_num must point to a cell within reference; otherwise, INDEX returns a #REF! error. If row_num and column_num are omitted, INDEX returns the area in reference specified by area_num.\n• The result of the INDEX function is a reference and is interpreted as such by other formulas. Depending on the formula, the return value of INDEX may be used as a reference or as a value. For example, the formula CELL(\"width\",INDEX(A1:B2,1,2)) is equivalent to CELL(\"width\",B1). The CELL function uses the return value of INDEX as a cell reference. On the other hand, a formula such as 2*INDEX(A1:B2,1,2) translates the return value of INDEX into the number in cell B1.\n\nCopy the example data in the following table, and paste it in cell A1 of a new Excel worksheet. For formulas to show results, select them, press F2, and then press Enter. The intersection of the second row and third column in the range A2:C6, which is the contents of cell C3. The intersection of the second row and second column in the second area of A8:C11, which is the contents of cell B9. The sum of the third column in the first area of the range A1:C11, which is the sum of C1:C11. The sum of the range starting at B2, and ending at the intersection of the fifth row and the second column of the range A2:A6, which is the sum of B2:B6."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/vlookup-function-0bbc8083-26fe-4963-8ab8-93a18ad188a1",
        "document": "Tip: Try using the new XLOOKUP function, an improved version of VLOOKUP that works in any direction and returns exact matches by default, making it easier and more convenient to use than its predecessor. Use VLOOKUP when you need to find things in a table or a range by row. For example, look up a price of an automotive part by the part number, or find an employee name based on their employee ID. In its simplest form, the VLOOKUP function says: =VLOOKUP(What you want to look up, where you want to look for it, the column number in the range containing the value to return, return an Approximate or Exact match – indicated as 1/TRUE, or 0/FALSE).\n• The secret to VLOOKUP is to organize your data so that the value you look up (Fruit) is to the left of the return value (Amount) you want to find.\n• If you're a Microsoft Copilot subscriber Copilot can make it even easier to insert and use VLookup or XLookup functions. See Copilot makes lookups in Excel easy.\n\nUse the VLOOKUP function to look up a value in a table. The value you want to look up. The value you want to look up must be in the first column of the range of cells you specify in the table_array argument. For example, if table-array spans cells B2:D7, then your lookup_value must be in column B. Lookup_value can be a value or a reference to a cell. The range of cells in which the VLOOKUP will search for the lookup_value and the return value. You can use a named range or a table, and you can use names in the argument instead of cell references. The first column in the cell range must contain the lookup_value. The cell range also needs to include the return value you want to find. Learn how to select ranges in a worksheet. The column number (starting with 1 for the left-most column of table_array) that contains the return value. A logical value that specifies whether you want VLOOKUP to find an approximate or an exact match:\n• Approximate match - 1/TRUE assumes the first column in the table is sorted either numerically or alphabetically, and will then search for the closest value. This is the default method if you don't specify one. For example, =VLOOKUP(90,A1:B100,2,TRUE).\n• Exact match - 0/FALSE searches for the exact value in the first column. For example, =VLOOKUP(\"Smith\",A1:B100,2,FALSE).\n\nHow to get started There are four pieces of information that you will need in order to build the VLOOKUP syntax:\n• The value you want to look up, also called the lookup value.\n• The range where the lookup value is located. Remember that the lookup value should always be in the first column in the range for VLOOKUP to work correctly. For example, if your lookup value is in cell C2 then your range should start with C.\n• The column number in the range that contains the return value. For example, if you specify B2:D11 as the range, you should count B as the first column, C as the second, and so on.\n• Optionally, you can specify TRUE if you want an approximate match or FALSE if you want an exact match of the return value. If you don't specify anything, the default value will always be TRUE or approximate match. Now put all of the above together as follows: =VLOOKUP(lookup value, range containing the lookup value, the column number in the range containing the return value, Approximate match (TRUE) or Exact match (FALSE)).\n\nIf range_lookup is TRUE or left out, the first column needs to be sorted alphabetically or numerically. If the first column isn't sorted, the return value might be something you don't expect. Either sort the first column, or use FALSE for an exact match.\n• If range_lookup is TRUE, then if the value in the lookup_value is smaller than the smallest value in the first column of the table_array, you'll get the #N/A error value.\n• If range_lookup is FALSE, the #N/A error value indicates that the exact number isn't found. For more information on resolving #N/A errors in VLOOKUP, see How to correct a #N/A error in the VLOOKUP function. If col_index_num is greater than the number of columns in table-array, you'll get the #REF! error value. For more information on resolving #REF! errors in VLOOKUP, see How to correct a #REF! error. If the table_array is less than 1, you'll get the #VALUE! error value. For more information on resolving #VALUE! errors in VLOOKUP, see How to correct a #VALUE! error in the VLOOKUP function. The #NAME? error value usually means that the formula is missing quotes. To look up a person's name, make sure you use quotes around the name in the formula. For example, enter the name as \"Fontana\" in =VLOOKUP(\"Fontana\",B2:E7,2,FALSE). For more information, see How to correct a #NAME! error. This particular #SPILL! error usually means that your formula is relying on implicit intersection for the lookup value, and using an entire column as a reference. For example, =VLOOKUP(A:A,A:C,2,FALSE). You can resolve the issue by anchoring the lookup reference with the @ operator like this: =VLOOKUP(@A:A,A:C,2,FALSE). Alternatively, you can use the traditional VLOOKUP method and refer to a single cell instead of an entire column: =VLOOKUP(A2,A:C,2,FALSE).\n\nUsing absolute references allows you to fill-down a formula so that it always looks at the same exact lookup range. Learn how to use absolute cell references. When searching number or date values, be sure the data in the first column of table_array isn't stored as text values. Otherwise, VLOOKUP might return an incorrect or unexpected value. Sort the first column of the table_array before using VLOOKUP when range_lookup is TRUE. If range_lookup is FALSE and lookup_value is text, you can use the wildcard characters—the question mark (?) and asterisk (*)—in lookup_value. A question mark matches any single character. An asterisk matches any sequence of characters. If you want to find an actual question mark or asterisk, type a tilde (~) in front of the character. For example, =VLOOKUP(\"Fontan?\",B2:E7,2,FALSE) will search for all instances of Fontana with a last letter that could vary. Make sure your data doesn't contain erroneous characters. When searching text values in the first column, make sure the data in the first column doesn't have leading spaces, trailing spaces, inconsistent use of straight ( ' or \" ) and curly ( ‘ or \") quotation marks, or nonprinting characters. In these cases, VLOOKUP might return an unexpected value. To get accurate results, try using the CLEAN function or the TRIM function to remove trailing spaces after table values in a cell."
    },
    {
        "link": "https://support.microsoft.com/en-us/office/excel-functions-by-category-5f91f4e9-7b42-46d2-9bd1-63f26a86c0eb",
        "document": "Returns the accrued interest for a security that pays periodic interest Returns the accrued interest for a security that pays interest at maturity Returns the depreciation for each accounting period by using a depreciation coefficient Returns the depreciation for each accounting period Returns the number of days from the beginning of the coupon period to the settlement date Returns the number of days in the coupon period that contains the settlement date Returns the number of days from the settlement date to the next coupon date Returns the next coupon date after the settlement date Returns the number of coupons payable between the settlement date and maturity date Returns the previous coupon date before the settlement date Returns the cumulative interest paid between two periods Returns the cumulative principal paid on a loan between two periods Returns the depreciation of an asset for a specified period by using the fixed-declining balance method Returns the depreciation of an asset for a specified period by using the double-declining balance method or some other method that you specify Converts a dollar price, expressed as a fraction, into a dollar price, expressed as a decimal number Converts a dollar price, expressed as a decimal number, into a dollar price, expressed as a fraction Returns the annual duration of a security with periodic interest payments Returns the future value of an investment Returns the future value of an initial principal after applying a series of compound interest rates Returns the interest payment for an investment for a given period Returns the internal rate of return for a series of cash flows Calculates the interest paid during a specific period of an investment Returns the Macauley modified duration for a security with an assumed par value of $100 Returns the internal rate of return where positive and negative cash flows are financed at different rates Returns the number of periods for an investment Returns the net present value of an investment based on a series of periodic cash flows and a discount rate Returns the price per $100 face value of a security with an odd first period Returns the yield of a security with an odd first period Returns the price per $100 face value of a security with an odd last period Returns the yield of a security with an odd last period Returns the number of periods required by an investment to reach a specified value Returns the periodic payment for an annuity Returns the payment on the principal for an investment for a given period Returns the price per $100 face value of a security that pays periodic interest Returns the price per $100 face value of a discounted security Returns the price per $100 face value of a security that pays interest at maturity Returns the present value of an investment Returns the interest rate per period of an annuity Returns the amount received at maturity for a fully invested security Returns an equivalent interest rate for the growth of an investment Returns the straight-line depreciation of an asset for one period Returns the sum-of-years' digits depreciation of an asset for a specified period Returns the price per $100 face value for a Treasury bill Returns the depreciation of an asset for a specified or partial period by using a declining balance method Returns the internal rate of return for a schedule of cash flows that is not necessarily periodic Returns the net present value for a schedule of cash flows that is not necessarily periodic Returns the yield on a security that pays periodic interest Returns the annual yield for a discounted security; for example, a Treasury bill Returns the annual yield of a security that pays interest at maturity\n\nReturns a reference as text to a single cell in a worksheet Returns the number of areas in a reference Chooses a value from a list of values Returns the specified columns from an array Returns the specified rows from an array Returns the number of columns in a reference Excludes a specified number of rows or columns from the start or end of an array Expands or pads an array to specified row and column dimensions Filters a range of data based on criteria you define Returns the formula at the given reference as text Helps a user group, aggregate, sort, and filter data based on the fields you specify Looks in the top row of an array and returns the value of the indicated cell Appends arrays horizontally and in sequence to return a larger array Creates a shortcut or jump that opens a document stored on a network server, an intranet, or the Internet Returns an image from a given source Uses an index to choose a value from a reference or array Returns a reference indicated by a text value Looks up values in a vector or array Looks up values in a reference or array Helps a user group, aggregate, sort, and filter data based on the row and column fields that you specify Returns the number of rows in a reference Retrieves real-time data from a program that supports COM automation Sorts the contents of a range or array Sorts the contents of a range or array based on the values in a corresponding range or array Returns a specified number of contiguous rows or columns from the start or end of an array Returns the transpose of an array Scans in from the edges of a range or array until it finds a non-blank cell (or value), it then excludes those blank rows or columns Returns a list of unique values in a list or range Looks in the first column of an array and moves across the row to return the value of a cell Appends arrays vertically and in sequence to return a larger array Wraps the provided row or column of values by columns after a specified number of elements Wraps the provided row or column of values by rows after a specified number of elements Searches a range or an array, and returns an item corresponding to the first match it finds. If a match doesn't exist, then XLOOKUP can return the closest (approximate) match. Returns the relative position of an item in an array or range of cells.\n\nReturns the absolute value of a number Returns an aggregate in a list or database Returns the arctangent from x- and y-coordinates Converts a number into a text representation with the given radix (base) Rounds a number to the nearest integer or to the nearest multiple of significance Rounds a number up, to the nearest integer or to the nearest multiple of significance Rounds a number the nearest integer or to the nearest multiple of significance. Regardless of the sign of the number, the number is rounded up. Returns the number of combinations for a given number of objects Returns the number of combinations with repetitions for a given number of items Returns the cotangent of an angle Returns the cosecant of an angle Returns the hyperbolic cosecant of an angle Converts a text representation of a number in a given base into a decimal number Rounds a number up to the nearest even integer Returns e raised to the power of a given number Rounds a number down, toward zero Rounds a number down, to the nearest integer or to the nearest multiple of significance Rounds a number down to the nearest integer or to the nearest multiple of significance. Regardless of the sign of the number, the number is rounded down. Rounds a number down to the nearest integer Returns a number that is rounded up to the nearest integer or to the nearest multiple of significance Assigns names to calculation results to allow storing intermediate calculations, values, or defining names inside a formula Returns the logarithm of a number to a specified base Returns the matrix determinant of an array Returns the matrix inverse of an array Returns the matrix product of two arrays Returns the multinomial of a set of numbers Returns the unit matrix or the specified dimension Rounds a number up to the nearest odd integer Sums the values in the subset and divides it by all the values Returns the result of a number raised to a power Returns an array of random numbers between 0 and 1. However, you can specify the number of rows and columns to fill, minimum and maximum values, and whether to return whole numbers or decimal values. Returns a random number between the numbers you specify Converts an Arabic numeral to Roman, as text Rounds a number to a specified number of digits Rounds a number down, toward zero Rounds a number up, away from zero Returns the secant of an angle Returns the hyperbolic secant of an angle Returns the sum of a power series based on the formula Generates a list of sequential numbers in an array, such as 1, 2, 3, 4 Returns the sine of the given angle Adds the cells specified by a given criteria Adds the cells in a range that meet multiple criteria Returns the sum of the products of corresponding array components Returns the sum of the squares of the arguments Returns the sum of the difference of squares of corresponding values in two arrays Returns the sum of the sum of squares of corresponding values in two arrays Returns the sum of squares of differences of corresponding values in two arrays\n\nReturns the average of the absolute deviations of data points from their mean Returns the average of its arguments Returns the average of its arguments, including numbers, text, and logical values Returns the average (arithmetic mean) of all the cells in a range that meet a given criteria Returns the average (arithmetic mean) of all cells that meet multiple criteria Returns the inverse of the cumulative distribution function for a specified beta distribution Returns the probability of a trial result using a binomial distribution Returns the smallest value for which the cumulative binomial distribution is less than or equal to a criterion value Returns the one-tailed probability of the chi-squared distribution Returns the inverse of the one-tailed probability of the chi-squared distribution Returns the confidence interval for a population mean Returns the confidence interval for a population mean, using a Student's t distribution Returns the correlation coefficient between two data sets Counts how many numbers are in the list of arguments Counts how many values are in the list of arguments Counts the number of blank cells within a range Counts the number of cells within a range that meet the given criteria Counts the number of cells within a range that meet multiple criteria Returns covariance, the average of the products of paired deviations Returns the sample covariance, the average of the products deviations for each data point pair in two data sets Returns the sum of squares of deviations Returns the inverse of the F probability distribution Returns the inverse of the F probability distribution Returns the result of an F-test Returns the inverse of the Fisher transformation Note: In Excel 2016, this function is replaced with FORECAST.LINEAR as part of the new Forecasting functions, but it's still available for compatibility with earlier versions. Returns a future value based on existing (historical) values by using the AAA version of the Exponential Smoothing (ETS) algorithm Returns a confidence interval for the forecast value at the specified target date Returns the length of the repetitive pattern Excel detects for the specified time series Returns a statistical value as a result of time series forecasting Returns the inverse of the gamma cumulative distribution Returns the natural logarithm of the gamma function, Γ(x) Returns the natural logarithm of the gamma function, Γ(x) Returns 0.5 less than the standard normal cumulative distribution Returns the intercept of the linear regression line Returns the k-th largest value in a data set Returns the parameters of an exponential trend Returns the inverse of the lognormal cumulative distribution Returns the maximum value in a list of arguments Returns the maximum value in a list of arguments, including numbers, text, and logical values Returns the maximum value among cells specified by a given set of conditions or criteria Returns the median of the given numbers Returns the minimum value in a list of arguments Returns the smallest value in a list of arguments, including numbers, text, and logical values Returns the minimum value among cells specified by a given set of conditions or criteria. Returns a vertical array of the most frequently occurring, or repetitive values in an array or range of data Returns the most common value in a data set Returns the inverse of the normal cumulative distribution Returns the inverse of the standard normal cumulative distribution Returns the k-th percentile of values in a range, where k is in the range 0..1, exclusive Returns the k-th percentile of values in a range Returns the rank of a value in a data set as a percentage (0..1, exclusive) of the data set Returns the percentage rank of a value in a data set Returns the number of permutations for a given number of objects Returns the number of permutations for a given number of objects (with repetitions) that can be selected from the total objects Returns the value of the density function for a standard normal distribution Returns the probability that values in a range are between two limits Returns the quartile of the data set, based on percentile values from 0..1, exclusive Returns the rank of a number in a list of numbers Returns the rank of a number in a list of numbers Returns the square of the Pearson product moment correlation coefficient Returns the skewness of a distribution based on a population: a characterization of the degree of asymmetry of a distribution around its mean Returns the slope of the linear regression line Returns the k-th smallest value in a data set Calculates standard deviation based on the entire population, including numbers, text, and logical values Returns the standard error of the predicted y-value for each x in the regression Returns the Percentage Points (probability) for the Student t-distribution Returns the Percentage Points (probability) for the Student t-distribution Returns the t-value of the Student's t-distribution as a function of the probability and the degrees of freedom Returns the inverse of the Student's t-distribution Returns the probability associated with a Student's t-test Returns the mean of the interior of a data set Calculates variance based on the entire population, including numbers, text, and logical values\n\nChanges full-width (double-byte) English letters or katakana within a character string to half-width (single-byte) characters Returns an array of text values from any specified range Converts a number to text, using the ß (baht) currency format Returns the character specified by the code number Returns a numeric code for the first character in a text string Combines the text from multiple ranges and/or strings, but it doesn't provide the delimiter or IgnoreEmpty arguments. Joins several text items into one text item Changes half-width (single-byte) English letters or katakana within a character string to full-width (double-byte) characters Identifies the language of a specified text Converts a number to text, using the $ (dollar) currency format Checks to see if two text values are identical Finds one text value within another (case-sensitive) Formats a number as text with a fixed number of decimals Returns the leftmost characters from a text value Returns the number of characters in a text string Returns a specific number of characters from a text string starting at the position you specify Capitalizes the first letter in each word of a text value Extracts strings within the provided text that matches the pattern Replaces strings within the provided text that matches the pattern with replacement Determines whether any part of text matches the pattern Returns the rightmost characters from a text value Finds one text value within another (not case-sensitive) Substitutes new text for old text in a text string Formats a number and converts it to text Returns text that occurs after given character or string Returns text that occurs before a given character or string Splits text strings by using column and row delimiters Translates a text from one language to another Returns the Unicode character that is references by the given numeric value Returns the number (code point) that corresponds to the first character of the text Returns text from any specified value"
    },
    {
        "link": "https://ablebits.com/office-addins-blog/excel-index-match-function-vlookup",
        "document": "This tutorial shows how to use INDEX and MATCH in Excel and how it is better than VLOOKUP.\n\nIn a couple of recent articles, we made a good effort to explain the basics of VLOOKUP function to beginners and provide more complex VLOOKUP formula examples to power users. And now, I will try if not to talk you out of using VLOOKUP, then at least show you an alternative way to do a vertical lookup in Excel.\n\n\"What do I need that for?\" you may wonder. Because VLOOKUP has numerous limitations that can prevent you from getting the desired result in many situations. On the other hand, the INDEX MATCH combination is more flexible and has many awesome features that make it superior to VLOOKUP in many respects.\n\n\n\nSince the aim of this tutorial is to demonstrate an alternative way to do a vlookup in Excel by using a combination of INDEX and MATCH functions, we won't dwell much on their syntax and uses. We will cover only the minimum necessary for understanding the general idea and then take an in-depth look at formula examples that reveal all the advantages of using INDEX MATCH instead of VLOOKUP. The Excel INDEX function returns a value in an array based on the row and column numbers you specify. The syntax of the INDEX function is straightforward: Here is a very simple explanation of each parameter:\n• array - a range of cells that you want to return a value from.\n• row_num - the row number in array from which you want to return a value. If omitted, the column_num is required.\n• column_num - the column number in array from which you want to return a value. If omitted, row_num is required. For more information, please see Excel INDEX function. And here is an example of the INDEX formula in its simplest form: The formula searches in cells A1 through C10 and returns a value of the cell in the 2nd row and the 3rd column, i.e. cell C2. Very easy, right? However, when working with real data you would hardly ever know which row and column you want, that's where the MATCH function comes in handy.\n\n The Excel MATCH function searches for a lookup value in a range of cells and returns the relative position of that value in the range. The syntax of the MATCH function is as follows:\n• lookup_value - the number or text value you are looking for.\n• match_type - specifies whether to return an exact match or the nearest match:\n• 0 - exact match. In the INDEX / MATCH combination, you almost always need an exact match, so you set the third argument of your MATCH function to 0. For example, if the range B1:B3 contains the values \"New-York\", \"Paris\", \"London\", the below formula returns the number 3, because \"London\" is the third entry in the range: For more information, please see Excel MATCH function. At first sight, the usefulness of the MATCH function may seem questionable. Who cares about the position of a value in a range? What we do want to know is the value itself. Let me remind you that the relative position of the lookup value (i.e. row and column numbers) is exactly what you need to supply to the row_num and column_num arguments of the INDEX function. As you remember, Excel INDEX can find the value at the juncture of a given row and column, but it cannot determine which exactly row and column you want.\n\n\n\nHow to use INDEX MATCH function in Excel Now that you know the basics, I believe it has already started making sense how MATCH and INDEX work together. In a nutshell, INDEX finds the lookup value by column and row numbers, and MATCH provides those numbers. That's it! For vertical lookup, you use the MATCH function only to determine the row number and supply the column range directly to INDEX: INDEX(column to return a value from, MATCH(lookup value, column to look up against, 0)) Still having difficulties to figure that out? It might be easier to understand from an example. Suppose you have a list of national capitals and their population:\n\n To find the population of a certain capital, say the capital of Japan, use the following INDEX MATCH formula: Now, let's analyze what each component of this formula actually does:\n• The MATCH function searches for the lookup value \"Japan\" in the range A2:A10, and returns the number 3, because \"Japan\" is third in the lookup array.\n• The row number goes directly to the row_num argument of INDEX instructing it to return a value from that row. So, the above formula turns into a simple INDEX(C2:C,3) that says to search in cells C2 through C10 and pull the value from the 3rd cell in that range, i.e. C4 because we start counting from the second row. Don't want to hardcode the city in the formula? Input it in some cell, say F1, supply the cell reference to MATCH, and you will get a dynamic lookup formula: Important note! The number of rows in the array argument of INDEX should match the number of rows in the lookup_array argument of MATCH, otherwise the formula will produce an incorrect result. Wait, wait… why don't we simply use the following Vlookup formula? What's the point in wasting time trying to figure out the arcane twists of Excel MATCH INDEX? In this case, no point at all :) This simple example is for demonstration purposes only, so that you get a feel of how the INDEX and MATCH functions work together. Other examples that follow below will show you the real power of this combination that easily copes with many complex scenarios when VLOOKUP stumbles.\n• In Excel 365 and Excel 2021, you can use a more modern INDEX XMATCH formula.\n• For Google Sheets, see formula examples with INDEX MATCH in this article.\n\nWhen deciding which function to use for vertical lookups, most Excel gurus agree that INDEX MATCH is far better than VLOOKUP. However, many people still stay with VLOOKUP, firstly, because it's simpler and, secondly, because they do not fully understand all benefits of using the INDEX MATCH formula in Excel. Without such understanding no one is willing to invest their time to learn a more complex syntax. Below, I will point out the key advantages of MATCH INDEX over VLOOKUP, and you decide whether it's a worthy addition to your Excel arsenal. 4 main reasons to use INDEX MATCH instead of VLOOKUP\n• Right to left lookup. As any educated user knows, VLOOKUP cannot look to its left, meaning your lookup value should always reside in the leftmost column of the table. INDEX MATCH can do left lookup with ease! The following example shows it in action: How to Vlookup a value to the left in Excel.\n• Insert or delete columns safely. VLOOKUP formulas get broken or delivers incorrect results when a new column is deleted from or added to a lookup table because VLOOKUP's syntax requires specifying the index number of the column you want to pull the data from. Naturally, when you add or delete columns, the index number changes. With INDEX MATCH, you specify the return column range, not an index number. As the result, you are free to insert and remove as many columns as you want without worrying about updating every associated formula.\n• No limit for a lookup value's size. When using the VLOOKUP function, the total length of your lookup criteria cannot exceed 255 characters, otherwise you will end up having the #VALUE! error. So, if your dataset contains long strings, INDEX MATCH is the only working solution.\n• Higher processing speed. If your tables are relatively small, there will hardly be any significant difference in Excel performance. But if your worksheets contain hundreds or thousands of rows, and consequently hundreds or thousands of formulas, MATCH INDEX will work much faster than VLOOKUP because Excel will have to process only the lookup and return columns rather than the entire table array. VLOOKUP's impact on Excel's performance may be especially noticeable if your workbook contains complex array formulas like VLOOKUP and SUM. The point is that checking each value in the array requires a separate call of the VLOOKUP function. So, the more values your array contains and the more array formulas you have in a workbook, the slower Excel performs. To discover the nuanced differences between INDEX MATCH and XLOOKUP, explore the in-depth analysis in this guide: Excel XLOOKUP vs INDEX MATCH.\n\n\n\nKnowing the reasons to learn the MATCH INDEX function, let's get to the most interesting part and see how you can apply the theoretical knowledge in practice. INDEX MATCH formula to look up from right to left As already mentioned, VLOOKUP cannot look at its left. So, unless your lookup values are is the leftmost column, there's no chance that a Vlookup formula will bring you the result you want. The INDEX MATCH function in Excel is more versatile and does not really care where the lookup and return columns are located. For this example, we will add the Rank column to the left of our sample table and try to figure out how the Russian capital, Moscow, ranks in terms of population. With the lookup value in G1, use the following formula to search in C2:C10 and return a corresponding value from A2:A10: Tip. If you plan to use your INDEX MATCH formula for more than one cell, be sure to lock both ranges with absolute cell references (like $A$2:$A$10 and $C$2:4C$10) so they won't get distorted when copying the formula. INDEX MATCH MATCH to search in rows and columns In the above examples, we used INDEX MATCH as the replacement for classic VLOOKUP to return a value from a predefined one-column range. But what if you need to look up in multiple rows and columns? In other words, what if you want to perform the so-called matrix or two-way lookup? This may sound tricky, but the formula is very similar to the basic Excel INDEX MATCH function, with just one difference. Guess what? Simply, use two MATCH functions – one to get a row number and the other to get a column number. And I congratulate those of you who have guessed right :) INDEX(array, MATCH(vlookup value, column to look up against, 0), MATCH(hlookup value, row to look up against, 0)) And now, please take a look at the below table and let's build an INDEX MATCH MATCH formula to find the population (in millions) in a given country for a given year. With the target country in G1 (vlookup value) and the target year in G2 (hlookup value), the formula takes this shape: Whenever you need to understand a complex Excel formula, break it down into smaller parts and see what each individual function does: – searches through A2:A11 for the value in cell G1 (\"China\") and returns its position, which is 2. – searches through B1:D1 to get the position of the value in cell G2 (\"2015\"), which is 3. The above row and column numbers go to the corresponding arguments of the INDEX function: As the result, you get a value at the intersection of the 2nd row and 3rd column in the range B2:D11, which is the value in cell D3. Easy? Yep!\n\n Excel INDEX MATCH to look up multiple criteria If you had a chance to read our Excel VLOOKUP tutorial, you have probably already tested a formula to Vlookup with multiple criteria. However, a significant limitation of that approach is the necessity to add a helper column. The good news is that Excel's INDEX MATCH function can look up with two or more criteria too, without modifying or restructuring your source data! Note. This is an array formula that must be completed with the Ctrl + Shift + Enter shortcut. In the sample table below, supposing you want to find the amount based on 2 criteria, Customer and Product. Where C2:C10 is the range to return a value from, F1 is criteria1, A2:A10 is the range to compare against criteria1, F2 is criteria 2, and B2:B10 is the range to compare against criteria2. Remember to enter the formula correctly by pressing Ctrl + Shift + Enter, and Excel will automatically enclose it curly brackets as shown in the screenshot:\n\n If you'd rather not use array formulas in your worksheets, add one more INDEX function to the formula and complete it with a usual Enter hit:\n\n The formulas use the same approach as the basic INDEX MATCH function that looks through a single column. To evaluate multiple criteria, you create two or more arrays of TRUE and FALSE values that represent matches and non-matches for each individual criterion, and then multiply the corresponding elements of these arrays. The multiplication operation converts TRUE and FALSE into 1 and 0, respectively, and produces an array where 1's correspond to rows that match all the criteria. The MATCH function with a lookup value of 1 finds the first \"1\" in the array and passes its position to INDEX, which returns a value in this row from the specified column. The non-array formula relies on the ability of the INDEX function to handle arrays natively. The second INDEX is configured with 0 row_num so that it will pass the entire column array to MATCH. That is a high-level explanation of the formula's logic. For full details, please see Excel INDEX MATCH with multiple criteria.\n\n Microsoft Excel has special functions to find a minimum, maximum and average value in a range. But what if you need to get a value from another cell that is associated with those values? In this case, use the MAX, MIN or AVERAGE function together with INDEX MATCH. To find the largest value in column D and return a value from column C in the same row, use this formula: To locate the smallest value in column D and pull an associated value from column C, use this one: To work out the value closest to the average in D2:D10 and get a corresponding value from column C, this is the formula to use: Depending on how your data is organized, supply either 1 or -1 to the third argument (match_type) of the MATCH function:\n• If your lookup column (column D in our case) is sorted ascending, put 1. The formula will calculate the largest value that is less than or equal to the average value.\n• If your lookup column is sorted descending, enter -1. The formula will compute the smallest value that is greater than or equal to the average value.\n• If your lookup array contains a value exactly equal to the average, you can enter 0 for exact match. No sorting is required. In our example, the populations in column D are sorted in descending order, so we use -1 for match type. As the result, we get \"Tokyo\" since its population (13,189,000) is the closest match that is greater than average (12,269,006).\n\n You may be curious to know that VLOOKUP can perform such calculations too, but as an array formula: VLOOKUP with AVERAGE, MAX, MIN.\n\n\n\nAs you have probably noticed, if an INDEX MATCH formula in Excel cannot find a lookup value, it produces an #N/A error. If you wish to replace the standard error notation with something more meaningful, wrap your INDEX MATCH formula in the IFNA function. For example: And now, if someone inputs a lookup table that does not exist in the lookup range, the formula will explicitly inform the user that no match is found:\n\n If you'd like to catch all errors, not only #N/A, use the IFERROR function instead of IFNA: Please keep in mind that in many situations it might be unwise to disguise all errors because they alert you about possible faults in your formula.\n\n\n\nThat's how to use INDEX and MATCH in Excel. I hope our formula examples will prove helpful for you and look forward to seeing you on our blog next week!"
    },
    {
        "link": "https://mergeos.com/articles/learn/5-reasons-index-match-is-better-than-vlookup",
        "document": "Whether you're a newcomer to Excel or a seasoned user, you've likely encountered the limitations of VLOOKUP in managing your spreadsheets. Today, we're introducing a more efficient, versatile solution.\n\n\n\n\n\n\n\nOne function that most Excel users learn early on is VLOOKUP. This has become a favorite of many Excel users because it can be used to look up and retrieve data in a table based on criteria that you can set. The V stands for vertical, meaning it will search vertically in the first column. This contrasts the similar HLOOKUP function. The syntax is as follows:\n• lookup_table is the value you’re searching for in the leftmost column of the table\n• table_array is the range of cells that you want to search\n• col_index_num is the column number in the table (relative to the first column)\n• [range_lookup] is an optional argument that specifies if you’re looking for an exact or close match. This is enabled by default.\n\n\n\nThe superior alternative to VLOOKUP is INDEX MATCH. While VLOOKUP works fine in most cases, it tends to reveal flaws when you start using it in large and complex sheets. The INDEX MATCH formula is actually two different functions; INDEX and MATCH.\n\n\n\nINDEX returns a value in a table based on a set of coordinates for the column and row while MATCH searches for a given value in a range of cells and then returns the relative position in that range as a coordinate. A common way to use the INDEX function is to select one value from an array of cells, based one row:\n• array is range of cells or an array constant.\n• row_num selects the row in array from which to return a value.\n• lookup_value is the value that you want to match in lookup_array\n• lookup_array is the range of cells being searched.\n• [match_type] is a number, either -1, 0, or 1. We mostly use 0, which means to match the value exactly. 1 is the default and matches the largest value less than or equal to the lookup_value, whereas -1 matches the smallest value greater than or equal to the lookup_value\n\n\n\n\n\nYou might find this a little complicated at first, but let's explore why it’s a game-changer for your Excel tasks.\n\n\n\n Remember the last time you were crunching a deadline and had to manually adjust your entire set of VLOOKUP formulas just because you added a new column? With INDEX MATCH, those days are behind you. \n\n \n\n\n\n You can combine the INDEX and MATCH functions to return a specific value based on coordinates.You might find this a little complicated at first, but let's explore why it’s a game-changer for your Excel tasks.\n\n\n\nOne of the biggest issues with using VLOOKUP is that it uses a static column reference. On the other hand, INDEX MATCH uses a dynamic column reference which means it can lead to fewer errors when moving around columns. This is an advantage that becomes more apparent as you create larger and more complex spreadsheets.\n\n\n\n\n\n\n\nVLOOKUP requires you to point to a specific table array. When you need to expand this table and pull values from an additional column, you’ll need to readjust all of your formulas. This can be a pain when you need to modify multiple formulas across a large spreadsheet.\n\n\n\n\n\n\n\nAnother standout benefit of INDEX MATCH? Freedom from the tyranny of rigid structures. Add new columns at will, without messing up your lookup results. Say goodbye to tedious formula edits.\n\n\n\n \n\n\n\n\n\n\n\n\n\nWhen working with a large spreadsheet or data set, you’ll typically create several lookup formulas. This requires you to drag and copy your formula, meaning you’ll need to rewrite the formula if you’re using VLOOKUP. This is because VLOOKUP requires a specific column reference. With INDEX MATCH, you can simply drag and copy formulas as needed, saving you a lot of time in tweaking formulas.\n\n\n\n\n\n5. Faster and less intensive on your computer\n\n\n\nLastly, INDEX MATCH is ultimately faster and less intensive on your computer. It might sound strange in the context of Excel, but large and complex spreadsheets can often result in high CPU usage because of all the background calculations going on. VLOOKUP takes up a lot more processing power since it needs to check the entire array in the formula. INDEX MATCH only uses the lookup column and return column, meaning it has fewer cells to consider. In a small spreadsheet, the difference might be minimal, but you’ll certainly notice the speed benefit with a larger data set.\n\n\n\nIn short, there’s nothing wrong with using a VLOOKUP match for a very simple sheet. However, if you plan to use Excel for more complicated and detailed spreadsheets in the future, learning to use INDEX MATCH gives you a lot more flexibility. \n\n\n\n Are you ready to put an end to countless wasted hours copying and pasting data into Spreadsheets and Word documents? Imagine a world where your reports and documents are automatically generated with ease. That's the power of MergeOS. Don't just take our word for it. Experience the difference for yourself with our 2-week free trial. Try it out for free for 2 week here. \n\n\n\n Lastly, INDEX MATCH is ultimately faster and less intensive on your computer. It might sound strange in the context of Excel, but large and complex spreadsheets can often result in high CPU usage because of all the background calculations going on. VLOOKUP takes up a lot more processing power since it needs to check the entire array in the formula. INDEX MATCH only uses the lookup column and return column, meaning it has fewer cells to consider. In a small spreadsheet, the difference might be minimal, but you’ll certainly notice the speed benefit with a larger data set.In short, there’s nothing wrong with using a VLOOKUP match for a very simple sheet. However, if you plan to use Excel for more complicated and detailed spreadsheets in the future, learning to use INDEX MATCH gives you a lot more flexibility. Click here for fully working examples in a downloadable spreadsheet that show you how to use INDEX MATCH."
    },
    {
        "link": "https://stackoverflow.com/questions/53462277/index-match-instead-using-vlookup",
        "document": "For such queries the best way is to try them yourself, even if you fail at first but you would learn even if you fail or succeed, the best way would have been that you had searched the internet for index match and try to implement that on your data.\n\nbut as you are here, I shall try to make it clear how it is done\n\nMatch function finds a value in a range and when it finds it; it will return its position in that range (which is the relative row number if we have provided a column range)\n\nIndex function can be used on that returned position. We can give index a range and provide a position to it. It return a value at this particular location from the provided range. The trick is; that in this case we shall provide a different column and it will return data from that column\n\nI am going to explain one row (#8), all other rows are same\n• Match Result B8: it is using match() to search the id in A8 in the range A2 to A4, and when it finds that range it is returning its position in that range which is 2\n• Index result C8: it is using index function() to retrieve the value at position 2 (returned by match in previous line) from the range D2 to D4, as it is nanana it will return that.\n\nD8 to D10 is same formula but combined\n\nThe formulas in the cells are as below"
    },
    {
        "link": "https://reddit.com/r/excel/comments/9pg87k/can_someone_explain_the_index_and_match_functions",
        "document": "Title pretty much sums it up. I understand =VLOOKUP() and the other two I cannot seem to get a grasp on. Thank you very much."
    },
    {
        "link": "https://geeksforgeeks.org/index-match-vs-vlookup",
        "document": "When comparing INDEX MATCH vs. VLOOKUP in Excel, one key difference lies in how they handle column references. VLOOKUP relies on a fixed column number, which can lead to errors if columns are rearranged, making it less flexible for dynamic datasets. On the other hand, INDEX MATCH uses a dynamic column reference, automatically adjusting to changes in your data, which is especially beneficial for larger and more complex spreadsheets. Both functions are powerful tools for performing lookups in Excel, each with unique strengths and limitations.\n\nWhether you’re analyzing complex datasets, creating dynamic reports, or solving lookup challenges, understanding the advantages of INDEX MATCH over VLOOKUP can help you choose the right function for your specific needs. This guide offers a detailed comparison of these functions, helping you master efficient data analysis and improve your Excel skills.\n\nWhat is INDEX MATCH in Excel\n\nThe Following Formula is the blend of two capabilities in Excel: INDEX and MATCH. Consolidated, the two equations can gaze upward and return the worth of a cell in a table in light of vertical and level standards.\n\nWhen comparing INDEX MATCH and VLOOKUP, the primary distinction lies in how these formulas operate and their flexibility in handling data lookups. Below is a breakdown of their formula structures, along with their use cases and key differences.\n\nThe VLOOKUP function is used to search for a value in the first column of a range and return a value in the same row from another column.\n• None lookup_value: The value to look for in the first column of the range.\n• None table_array: The table or range containing the data to search.\n• None col_index_num: The column number in the range from which to retrieve the result.\n\nThe INDEX MATCH formula is a combination of two functions:\n• None retrieves a value from a range based on row and column numbers.\n• None finds the relative position of a value in a range.\n\nHow to Use the INDEX Formula in Excel\n\nThe following is a table showing individuals’ names, levels, and weights. We need to utilize the INDEX equation to look into Thanish’s level, here is an illustration of how to make it happen. Following these means,\n• None Type “=INDEX(” and select the region of the table, then, at that point, add a comma\n• None Type the column number for Thanish, which is “4,” and add a comma\n• None Type the section number for Height, which is “2,” and close the section\n\nHow to Use the MATCH Formula in Excel\n\nStaying with a similar model as over, we should utilize MATCH to sort out what column Thanish is in.\n• =MATCH( ” and connection to the cell containing “ Thanish “… the name we need to turn upward.\n• None Select every one of the cells in the Name section (counting the “ Name\n• None The outcome is that Thanish is in column “4.”\n\nHow to Combine INDEX and MATCH\n\nPresently we can take the two MATCH equations and use them to supplant the “4” and the “2” in the first INDEX recipe. The outcome is an INDEX MATCH equation.\n• None Cut the MATCH equation for Thanish and supplant the “4” with it.\n• None Cut the MATCH equation for Height and supplant the “2” with it.\n• None The outcome is Thanish’s Height is “5.8.”\n• None Congrats, you currently have a powerful INDEX MATCH equation!\n\nWhat is VLOOKUP in Excel\n\nVLOOKUP means ‘Vertical Lookup‘. A capability makes Excel look for a specific worth in a segment (the purported ‘table cluster‘), to return a worth from an alternate section in a similar column. This article will show you how to utilize the VLOOKUP capability.\n• None The worth you need to turn upward;\n• None The reach wherein you need to find the worth and bring esteem back;\n• None The quantity of the section inside your characterized range, that contains the bring esteem back;\n• 0 FALSE for an accurate coordinate with the worth you are searching for; 1 or TRUE for an estimated match.\n\nIn our model, we have a rundown of Names, Height, and Weights. We need to find the Height of Sai rapidly in this table. In the first place, select a cell in which you need to distribute the Height:\n\nAlong these lines, in our chosen cell we begin composing: =VLOOKUP( :\n\nThen, at that point, we select the worth we need to look into, for this situation, it’s ‘Sai’ in cell F3,\n\nNext, we enter ‘,’ and select the reach (or table cluster) in which we need to find the query esteem and the bring esteem back. For this situation it is range (B2:D8):\n\nThen, at that point, we enter ‘,’ and the quantity of the section inside the characterized range wherein we need to search for the bring esteem back. For this situation, it is segment 2, trailed by ‘,’ and ‘0’ or Misleading for a definite coordinate with the query esteem ‘Sai’:\n\nAt the point when we press enter, we get the comparing cost from the column that holds esteem ‘Sai’ inside the chosen table exhibit:\n\nIn this model we just have a little rundown of names, however, envision you have a considerable rundown of information and you wish to utilize a specific worth somewhere else in your bookkeeping sheet. Utilizing VLOOKUP (and HLOOKUP) the client just needs to change a specific worth in one worksheet and it will consequently be changed in any remaining significant spots. Be that as it may, imagine a scenario in which we’re unsure about the query esteem. This is the point at which the estimated match may be valuable.\n\nAt the point when we enter the word ‘Sia‘ in our query esteem cell G3, the VLOOKUP capability as we planned gets confounded, because it can’t track down this worth in the table exhibit. It returns the standard Excel blunder #N/A:\n\nBe that as it may, when we change the ‘0’ (or ‘False’) part of our VLOOKUP capability to ‘1’ or ‘Valid’:\n\nPresently we have requested that the capability search for an estimated coordination with ‘Sia’. On the off chance that it can’t find the specific match, it will search for the nearest match to the worth ‘Sia’, not as much as ‘Sia’, which is ‘Sai’:\n\n5 Reasons INDEX MATCH Is Better Than VLOOKUP\n\nWhen choosing a function for vertical lookups, most Excel experts agree that INDEX MATCH outperforms VLOOKUP. Despite this, many users stick with VLOOKUP, mainly because it’s easier to use and they may not fully realize the advantages of INDEX MATCH in Excel. Without a clear understanding of its benefits, few are motivated to spend the time learning the more complex INDEX MATCH syntax.\n\nThe critical contrast between INDEX MATCH and VLOOKUP is that VLOOKUP requires a static section reference while INDEX MATCH utilizes a powerful segment reference. With VLOOKUP, the vast majority will include a particular, static number to show which section they need to get back from. At the point when you use INDEX MATCH, the recipe permits you to physically pick which section you need to pull from. The explanation this prompts fewer blunders is that when you follow the INDEX MATCH linguistic structure, you click straightforwardly on the field containing the worth you need to return.\n\nWith the VLOOKUP language structure, you determine your whole table exhibit, AND THEN you determine a section reference to show which segment you need to pull information from.\n\nIt’s a little contrast, however, this extra step without a doubt prompts more blunders. This mistake is particularly predominant when you have a huge table cluster and need to outwardly count the number of sections you need to move over. At the point when you use INDEX MATCH, no such counting is required.\n\nThe following two benefits of utilizing INDEX MATCH likewise come from the way that VLOOKUP requires a static segment reference input for the qualities you need to return. If it’s not too much trouble, note that you could get around the static reference issue by utilizing an equation inside the VLOOKUP punctuation, making a mix recipe like VLOOKUP MATCH or VLOOKUP HLOOKUP. Notwithstanding, it’s a lot more straightforward just to learn INDEX MATCH and gain every one of the extra advantages past having dynamic section reference.\n\nThe best advantage of utilizing INDEX MATCH over VLOOKUP is the way that, with INDEX MATCH, you can embed segments in your table exhibit without misshaping your query results. Any time you work with a huge dataset, there’s a decent opportunity you’ll have to return to alter our sections and possibly embed another segment. With VLOOKUP, any embedded or erased section that uproots your return values will change the aftereffects of your equations.\n\nHere, we’ve arranged the equation to pull the State esteem from our information table. Since it is a VLOOKUP recipe, we have referred to the fourth section.\n\nIf we insert a column in the middle of the table array, the new result is now “Bangalore”; we are no longer pulling the correct value for State and must change the column reference.\n\nINDEX MATCH as an embed section insusceptibility, so you can embed and erase segments without stressing over refreshing each related query equation.\n\nWhile working with enormous datasets, it’s uncommon to compose only a solitary query recipe; you’re probably going to have to drag and duplicate your equation to numerous cells to play out different queries. For instance, suppose that for a particular ID, I need to return a progression of values from my table precisely as per the pattern in which they show up in the table. At the point when I attempt to drag and duplicate the standard VLOOKUP equation across (with a reference lock on both the query esteem and the table cluster), the query doesn’t work since it simply pulls a similar incentive for every passage. This lack is again brought about by VLOOKUP requiring a particular section reference input for your bring values back.\n\nWith INDEX MATCH, since you can set the return section to drift (basically by not reference locking it) the return segment will move as you duplicate your equation over, giving you the various fields as they show up.\n\nOne more key impediment of VLOOKUP is that it expects you to determine a square table cluster wherein your segment reference can’t move past. The key circumstance when this turns into an issue is the point at which you add another field to your dataset past your unique table cluster. Consider the model beneath:\n\nAssuming we add another segment to this dataset, we can’t utilize my unique VLOOKUP recipe to pull values from that new section. If we change my section reference to “6,” the recipe returns a mistake because my table is just 5 segments wide. To make the recipe work, we need to refresh the table exhibit we determined each time we added another segment.\n\nWith INDEX MATCH, you don’t have to determine a table cluster and hence don’t deal with this issue.\n\nINDEX MATCH formula to look up from right to left\n\nOne of the vital advantages of utilizing INDEX MATCH is having the option to make query keys on the right half of your information table. New query keys are for the most part made by running estimations on fields inside your unique dataset. These keys address your query segment inside the INDEX MATCH language structure. While utilizing INDEX MATCH, you can add these new query keys to the right half of your table and play out an option to pass on the query to pull the qualities you need to return. The INDEX MATCH punctuation doesn’t mind whether your query segment is on the left or right half of your bring section back.\n\nComparison Table: Reasons to Opt for INDEX MATCH Over VLOOKUP in Excel\n\nBoth INDEX MATCH and VLOOKUP are essential tools for data lookups in Excel, but their applications vary depending on the requirements. VLOOKUP is straightforward and ideal for simple tasks with static data structures. On the other hand, INDEX MATCH offers greater flexibility, supporting lookups in any direction, dynamic column referencing, multiple criteria, and case sensitivity.\n\nFor beginners, VLOOKUP might be easier to learn, but for advanced users or when dealing with large, complex datasets, INDEX MATCH is the superior choice. Choose the method that best fits your needs, and leverage their strengths to improve your Excel efficiency!\n\nIs INDEX and match better than VLOOKUP?\n\nWhat are the limitations of INDEX MATCH ?"
    }
]