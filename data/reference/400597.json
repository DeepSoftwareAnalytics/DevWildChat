[
    {
        "link": "https://dolthub.com/blog/2024-01-17-writing-mysql-procedures",
        "document": "MySQL allows you to define stored procedures on your databases that can execute arbitrary SQL statements whenever you invoke them, including updating data in one or more tables. This tutorial will teach you how to use stored procedures and give you some ideas about what they're good for.\n\nA stored procedure is a set of SQL statements that you invoke with the keyword. They can accept parameters that change how the procedure operates. Here's a simple classic example using MySQL stored procedure syntax: defining a stored procedure that inserts values into multiple tables.\n\nThis procedure inserts a row into both the and tables, using the generated employee ID from the first to do the second.\n\nLet's break down the definition of this stored procedure and see what each part does.\n\nThe procedure we defined above looks like this. I'm commenting every element in the definition to make it clear what it does.\n\nSo a procedure has a number of parts that must be declared in the order above. They are:\n• The name of the procedure. Procedure names must be unique in a schema.\n• A list of parameters (could be none). Each parameter must have:\n• or . Out-params are how MySQL returns values from stored procedures (see next section). Params are by default.\n• A name, which must be unique in the parameter list\n• A type, which MySQL will convert automatically if possible (like how the string \"1980-02-03\" got converted to a date)\n• starts the body of the procedure, like a curly brace in most programming languages. This is optional if your procedure has only a single statement\n• One or more statements for the body of the procedure, each ending in\n• ends the body of the procedure\n\nAlso note the use of . This isn't a SQL statement, it's a command to the MySQL shell. These are only necessary if you're using the MySQL shell to define your procedure. If you're using another tool, like a GUI workbench, it will already correctly interpret the characters in the body of the procedure.\n\nMySQL stored procedures don't use the keyword to return a value to the caller like other programming languages. Instead, you declare parameters as rather than , and then they're set in the procedure body. Here's a simple example.\n\nNote that is used two different ways:\n• Inside the stored procedure, it's used as a parameter that gets a value assigned to it with a statement.. You could also use the syntax for this purpose.\n• Outside the stored procedure, the variable is initialized before the call, passed into the procedure, and then selected to get the result.\n\nGenerally speaking, if your procedure needs to return a value, it probably makes more sense to write it as a function instead, but there are situations where parameters are important.\n\nStored procedures can set session variables ( ), or global variables ( ), or local variables. The latter are defined only in the scope of an execution of a call of the procedure. Which one you use depends on what you're trying to accomplish. It's considered best practice to use the syntax to declare local variables for the procedure, and then to return any values necessary back to the calling scope with params.\n\nDeclaring and using variables looks like this:\n\nHere we are declaring two local variables and , both of the type. The syntax is very similar to parameters, with the added wrinkle that you can define more than one variable with the same type in the same statement.\n\nNote that statements must occur at the beginning of the procedure, before other kinds of statements, similar to older versions of C that require all variables to be declared before other statements in a function.\n\nJust like any other programming language, MySQL stored procedures support conditional logic by means of a set of control flow statements like , , etc. Using these statements makes it possible to implement any logic you can imagine in your stored procedures.\n\nstatements execute one of N statements depending on a condition. Multiple cases can follow the , and an optional can end the block. The keyword that follows and begins a block of statements similar to . Finally, the entire statement must be terminated by . Let's see an example.\n\nstatements are another way of expressing conditional logic, when the same expression is evaluated for every logical branch, similar to the switch statement found in many programming languages. We can implement the same procedure above using case statements instead. Note that you end a block with a statement.\n\nCompared to using and , the version makes it clearer that the choice of execution path depends on the value of the variable.\n\nTo repeat the same set of statements more than once, use a loop construct. MySQL provides three different loop constructs to choose from: , , and . Which one you use is mostly a matter of personal preference and how easy you find them to read for a particular situation.\n\nFor this example, we'll write a procedure that computes the Nth fibonnaci number and assigns it to an out parameter.\n\nFirst let's look at the keyword:\n\nNote the use of the keyword on the statements, which we hadn't used before. This assigns an initial value to the variable. Unlike other languages, MySQL integer variables do not default to or any other value, but instead are initialized to by default (which you don't want for calculation).\n\nNow that our procedure works, let's write a version using :\n\nUnlike , loops check the loop condition at the end of the loop, not the beginning. So they always execute the body of the loop at least once. Because of this, we needed to adjust our initial variable values for the n=1 and n=2 cases.\n\nFinally let's look at . Unlike and , has no built-in exit condition, making it very easy to write an infinite loop. You have to use a label and code an explicit statement to exit the loop. Here's the same procedure again, with the label applied:\n\nNote that the label occurs both before the as well as at the end of it. The statement terminates the loop.\n\nIn addition to the keyword, it can sometimes be useful or clearer to use the keyword. Here's a version of the loop that uses :\n\nWhich way you choose to write a depends on what you're trying to do and the cleanest way to express it. You can also use to conditionally skip parts of a loop under certain circumstances.\n\nMySQL stored procedures support terminating execution with an error with a special keyword. You can also define your own named error conditions to use in stored procedures you write for readability. This can be used to halt the operation of a transaction and cause it to be rolled back, just like any native MySQL error. This can be useful when implementing complex data integrity checks.\n\nThe syntax to signal an error is unfamiliar but straightforward. This example comes straight out of the MySQL docs:\n\nWhat are stored procedures used for?\n\nNow that you understand how to define a stored procedures in MySQL, you might be asking yourself why you would want to. What are they good for? What do people use these things to do? Stored procedures are a general tool you can use to do all sorts of things, but here are some of the more common ones in our experience.\n\nSometimes it's convenient or desirable to encode business logic directly in the database, in the same place where the data is defined and stored. This approach means that the logic to maintain key database properties isn't spread out somewhere else in a distributed system (like a batch job), but directly in the database itself.\n\nFor example, consider an online storefront, where you store an order history for every customer. It might make sense to archive details about these orders, like tracking information and return requests, once they get old enough that it's unlikely they'll be useful any longer. Archiving old data means a smaller database, which means lower storage bills for your backups and possibly faster execution time on queries.\n\nNote that this procedure encapsulates the logic of deleting old data from many tables into a single procedure. As the database schema continues to evolve, new logic can be added here as necessary.\n\nProcedures like this one tend to be run on a periodic basis, and you can schedule MySQL to run them for you automatically:\n\nYou can also alter this procedure to perform work in small chunks, if the data is truly massive and there's any concern about interfering with other write throughput. Just run the with a clause in a loop:\n\nSome regulations, such as GDPR, require online businesses to remove customer data upon request or face heavy fines. Usually there is a grace period of some number of days for the customer to change their mind, during which time you don't want to delete their data if possible. Here again it may make sense to implement a stored procedure to encapsulate the logic of what a deletion request does, then run it on a timer.\n\nFirst, create a table that logs when a customer requests data removal:\n\nNow define a procedure to delete all personally identifiable data associated with a customer.\n\nNotice that this procedure completely encapsulates the logic required to comply with the regulation. We can't just delete the record because that would cause referential constraint violations, or cascading deletion, in other tables storing information we're required to keep for financial reasons. Instead, we perform a mix of deletions where possible and updates to redact personally identifiable information where it's not.\n\nFinally we schedule an event to delete customers whose time is up:\n\nFor some complex table relationships, it might be desirable to define the logic of inserting or updating the data in the tables in a procedure. This has the advantage of allowing you to execute arbitrarily complex logic for validation, things that can't be expressed with simple or constraints.\n\nConsider a library system with tables for books, holds, and checkouts.\n\nWe can define a procedure to handle all the business logic we want to consider when checking out a book:\n\nIt's also possible (and more common) to define this sort of logic in application code. But the advantage of defining logic at the database level is that multiple applications can use this stored procedure without needing to each understand the business logic around checking out a book. The logic can be updated in one place when policy like the max number of books per patron changes.\n\nIn modern architectures, this role is more typically filled by a web service than a database, but there are still a surprising number of older systems out there where this isn't an option, where multiple legacy applications still connect directly to and update a shared database. For these systems, it's useful to have this kind of trick up our sleeves.\n\nThe examples above all limit results from SQL queries in procedures to a single row, and usually a single value. There's a lot you can do with this pattern, but for some situations you really need to examine multiple rows in a loop to answer some question. For those situations, MySQL provides cursors. For obvious reasons, it's a lot more difficult to write correct stored procedures that require cursors than ones that don't.\n\nThis simple example is straight out of the MySQL docs.\n\nThis tutorial should get you on your way using stored procedures in MySQL. They're pretty handy!\n\nBefore you go, did we mention that we built a MySQL-compatible database with built-in version control called Dolt? Dolt is a great way to experiment with advanced database features like stored procedures, because you have the safety of version control to fall back on -- if you mess up, you can always to roll back to a previous revision. Dolt also lets you diff two revisions of your database, so you can see what changed when a stored procedure ran, as well as compare revisions of a procedure definition to look for bugs.\n\nDolt is free and open source, so go check it out! All of the examples in this tutorial work in Dolt's built-in SQL shell, so you can use it to follow along at home.\n\nHave questions about Dolt or MySQL stored procedures? Join us on Discord to talk to our engineering team and meet other Dolt users."
    },
    {
        "link": "https://stackoverflow.com/questions/45708193/mysql-stored-procedure-like-syntaxt-in-cursor-declaration",
        "document": "I am very green when it comes to MySQL Stored Procedures and i have been having trouble with selecting all payments received in the current month and looping through them to see which accounts did not pay the monthly fee, my problem seems to be with the LIKE statement in the declaration of the cursor. Here is the code:\n\nEverything works but it obviously selects * payments received instead of those that occured during ,for example, Aug 2017. I do not want to select * because over time there will be hundreds of thousands of rows in the specific table and i do not want the overhead to become too much. I have also tested this:\n\nWhich also does not work. During debuggin i also tried to use a specifi date like this:\n\nAnd everything worked nicely but it is obviously just to test and see if the WHERE cluase was syntactically correct inside the cursor declaration.\n\nI am at a lost here and would appreciate some assistance from you guy's.\n\nThank You in advance."
    },
    {
        "link": "https://mysqltutorial.org/mysql-stored-procedure/variables-in-stored-procedures",
        "document": "Summary: in this tutorial, you will learn about MySQL stored procedure’s variables including how to declare and use them.\n\nA variable is a named data object whose value can change during the execution of a stored procedure.\n\nTypically, you use variables to hold immediate results. These variables are local to the stored procedure.\n\nBefore using a variable, you need to declare it.\n\nTo declare a variable inside a stored procedure, you use the statement as follows:\n• First, specify the name of the variable after the keyword. Ensure the variable name adheres to MySQL table column naming rules.\n• Second, define the data type and length of the variable. Variables can have any MySQL data type, such as , , and .\n• Third, assign a default value to the variable using the option. If you declare a variable without specifying a default value, its default value is .\n\nThe following example declares a variable named with the data type and default value of :\n\nMySQL allows you to declare two or more variables that share the same data type using a single statement.\n\nFor example, the following example declares two integer variables and , and sets their default values to zero.\n\nAfter declaring a variable, you can start using it.\n\nAs of MySQL 8.0.34, it is not possible to declare multiple variables with different data types using a single DECLARE statement.\n\nFor example, the following declaration will cause a syntax error:\n\nTo fix the error, you need to use multiple statements as follows:\n\nTo assign a variable a value, you use the statement:\n\nThe value of the variable is after the assignment.\n\nIn addition to the statement, you can use the statement to assign the result of a query to a variable as shown in the following example:\n\nIn this example:\n• First, declare a variable named and initialize its value to .\n• Then, use the statement to assign the variable the number of products selected from the table.\n\nA variable has its own scope, which determines its lifetime. If you declare a variable inside a stored procedure, it will be out of scope when the statement of the stored procedure is reached.\n\nWhen you declare a variable inside the block, it goes out of scope once the is reached.\n\nMySQL allows you to declare two or more variables that share the same name in different scopes because a variable is only effective within its scope.\n\nHowever, declaring variables with the same name in different scopes is not considered good programming practice.\n\nA variable whose name begins with the sign is a session variable, available and accessible until the session ends.\n\nThe following example illustrates how to declare and use a variable in a stored procedure:\n\nFirst, declare a variable with a default value of zero. This variable will store the number of orders from the table.\n\nSecond, use the statement to assign the variable the number of orders selected from the table:\n\nThird, select the value of the variable .\n\nNote that you will learn how to use variables practically in the subsequent tutorials. The example in this tutorial serves as an illustration to help you understand the concept.\n\nHere is the output:\n• Use variables to hold immediate results in a stored procedure.\n• The scope of a variable determines the variable’s lifetime."
    },
    {
        "link": "https://dev.mysql.com/doc/mysql/en/faqs-stored-procs.html",
        "document": "Stored procedures can, but stored functions cannot. If you perform an ordinary inside a stored procedure, the result set is returned directly to the client. You need to use the MySQL 4.1 (or higher) client/server protocol for this to work. This means that, for example, in PHP, you need to use the extension rather than the old extension.\n\nYes, you can do this in a stored procedure, but not in a stored function. If you perform an ordinary inside a stored procedure, the result set is returned directly to the client. You must use the MySQL 4.1 (or above) client/server protocol for this to work. This means that, for example, in PHP, you need to use the extension rather than the old extension.\n\nYes. Because a replica has authority to execute any statement read from a source's binary log, special security constraints exist for using stored functions with replication. If replication or binary logging in general (for the purpose of point-in-time recovery) is active, then MySQL DBAs have two security options open to them:\n• None Any user wishing to create stored functions must be granted the privilege.\n• None Alternatively, a DBA can set the system variable to 1, which enables anyone with the standard privilege to create stored functions.\n\nNondeterministic (random) or time-based actions embedded in stored procedures may not replicate properly. By their very nature, randomly produced results are not predictable and cannot be exactly reproduced; therefore, random actions replicated to a replica do not mirror those performed on a source. Declaring stored functions to be or setting the system variable to 0 keeps random operations producing random values from being invoked. In addition, time-based actions cannot be reproduced on a replica because the timing of such actions in a stored procedure is not reproducible through the binary log used for replication. It records only DML events and does not factor in timing constraints. Finally, nontransactional tables for which errors occur during large DML actions (such as bulk inserts) may experience replication issues in that a source may be partially updated from DML activity, but no updates are done to the replica because of the errors that occurred. A workaround is for a function's DML actions to be carried out with the keyword so that updates on the source that cause errors are ignored and updates that do not cause errors are replicated to the replica.\n\nYou can choose either statement-based replication or row-based replication. The original replication implementation is based on statement-based binary logging. Row-based binary logging resolves the limitations mentioned earlier. Mixed replication is also available (by starting the server with ). This hybrid form of replication “knows” whether statement-level replication can safely be used, or row-level replication is required."
    },
    {
        "link": "https://stackoverflow.com/questions/20811146/mysql-stored-procedures-variable-assignments-on-cursor",
        "document": "Your test query obfuscates whatever you are actually doing so much that it's really impossible to pinpoint the underlying problem. You have a setting a variable (\"done\") that is not only not tested (to break out of a loop that also doesn't exist), it isn't even defined, so the code as written is too vague (and, the community requires code examples to be valid -- producing the wrong result doesn't make it invalid by definition, but not being runnable does, and this code should not work with an undeclared variable).\n\nPresumably you know that is a program variable and is a user-defined variable, meaning that the two are completely unrelated. I've never seen program variables used in queries with the assignment hackery, so it could be that this isn't valid (and would make sense, if it isn't, because the two types of variables can behave very differently).\n\nIf the problem is that simple, then:\n\n...at an apprioriately-early part of the proc, and use the user-defined variable in the query.\n\nWhile Iit seems like a strange thing to require, it's not the only case where something like this (copying a program variable into a user-defined variable) might be needed... prepared statements can only use user-defined variables, too."
    },
    {
        "link": "https://dev.mysql.com/doc/en/insert.html",
        "document": "inserts new rows into an existing table. The , , and forms of the statement insert rows based on explicitly specified values. The form inserts rows selected from another table or tables. You can also use to insert rows from a single table. with an clause enables existing rows to be updated if a row to be inserted would cause a duplicate value in a index or . A row alias with one or more optional column aliases can be used with to refer to the row to be inserted.\n\nFor additional information about and , see Section 15.2.7.1, “INSERT ... SELECT Statement”, and Section 15.2.7.2, “INSERT ... ON DUPLICATE KEY UPDATE Statement”.\n\nIn MySQL 8.4, the keyword is accepted but ignored by the server. For the reasons for this, see Section 15.2.7.3, “INSERT DELAYED Statement”,\n\nInserting into a table requires the privilege for the table. If the clause is used and a duplicate key causes an to be performed instead, the statement requires the privilege for the columns to be updated. For columns that are read but not modified you need only the privilege (such as for a column referenced only on the right hand side of an = assignment in an clause).\n\nWhen inserting into a partitioned table, you can control which partitions and subpartitions accept new rows. The clause takes a list of the comma-separated names of one or more partitions or subpartitions (or both) of the table. If any of the rows to be inserted by a given statement do not match one of the partitions listed, the statement fails with the error Found a row not matching the given partition set. For more information and examples, see Section 26.5, “Partition Selection”.\n\nis the table into which rows should be inserted. Specify the columns for which the statement provides values as follows:\n\nColumn values can be given in several ways:\n• None If strict SQL mode is not enabled, any column not explicitly given a value is set to its default (explicit or implicit) value. For example, if you specify a column list that does not name all the columns in the table, unnamed columns are set to their default values. Default value assignment is described in Section 13.6, “Data Type Default Values”. If strict SQL mode is enabled, an statement generates an error if it does not specify an explicit value for every column that has no default value. See Section 7.1.11, “Server SQL Modes”.\n• None If both the column list and the list are empty, creates a row with each column set to its default value: If strict mode is not enabled, MySQL uses the implicit default value for any column that has no explicitly defined default. If strict mode is enabled, an error occurs if any column has no default value.\n• None Use the keyword to set a column explicitly to its default value. This makes it easier to write statements that assign values to all but a few columns, because it enables you to avoid writing an incomplete list that does not include a value for each column in the table. Otherwise, you must provide the list of column names corresponding to each value in the list.\n• None If a generated column is inserted into explicitly, the only permitted value is . For information about generated columns, see Section 15.1.20.8, “CREATE TABLE and Generated Columns”.\n• None In expressions, you can use to produce the default value for column .\n• None Type conversion of an expression that provides a column value might occur if the expression data type does not match the column data type. Conversion of a given value can result in different inserted values depending on the column type. For example, inserting the string into an , , , or column inserts the value , , , or , respectively. The value stored in the and columns is because the string-to-number conversion looks only at as much of the initial part of the string as may be considered a valid integer or year. For the and columns, the string-to-number conversion considers the entire string a valid numeric value.\n• None An expression can refer to any column that was set earlier in a value list. For example, you can do this because the value for refers to , which has previously been assigned: But the following is not legal, because the value for refers to , which is assigned after : An exception occurs for columns that contain values. Because values are generated after other value assignments, any reference to an column in the assignment returns a .\n\nstatements that use syntax can insert multiple rows. To do this, include multiple lists of comma-separated column values, with lists enclosed within parentheses and separated by commas. Example:\n\nEach values list must contain exactly as many values as are to be inserted per row. The following statement is invalid because it contains one list of nine values, rather than three lists of three values each:\n\nis a synonym for in this context. Neither implies anything about the number of values lists, nor about the number of values per list. Either may be used whether there is a single values list or multiple lists, and regardless of the number of values per list.\n\nstatements using syntax can also insert multiple rows. In this case, each value list must be contained within a (row constructor), like this:\n\nThe affected-rows value for an can be obtained using the SQL function or the C API function. See Section 14.15, “Information Functions”, and mysql_affected_rows().\n\nIf you use or with multiple value lists, or or , the statement returns an information string in this format:\n\nIf you are using the C API, the information string can be obtained by invoking the function. See mysql_info().\n\nindicates the number of rows processed by the statement. (This is not necessarily the number of rows actually inserted because can be nonzero.) indicates the number of rows that could not be inserted because they would duplicate some existing unique index value. indicates the number of attempts to insert column values that were problematic in some way. Warnings can occur under any of the following conditions:\n\nThe statement supports the following modifiers:"
    },
    {
        "link": "https://dev.mysql.com/doc/refman/9.0/en/insert.html",
        "document": "inserts new rows into an existing table. The , , and forms of the statement insert rows based on explicitly specified values. The form inserts rows selected from another table or tables. You can also use to insert rows from a single table. with an clause enables existing rows to be updated if a row to be inserted would cause a duplicate value in a index or . A row alias with one or more optional column aliases can be used with to refer to the row to be inserted.\n\nFor additional information about and , see Section 15.2.7.1, “INSERT ... SELECT Statement”, and Section 15.2.7.2, “INSERT ... ON DUPLICATE KEY UPDATE Statement”.\n\nIn MySQL 9.0, the keyword is accepted but ignored by the server. For the reasons for this, see Section 15.2.7.3, “INSERT DELAYED Statement”,\n\nInserting into a table requires the privilege for the table. If the clause is used and a duplicate key causes an to be performed instead, the statement requires the privilege for the columns to be updated. For columns that are read but not modified you need only the privilege (such as for a column referenced only on the right hand side of an = assignment in an clause).\n\nWhen inserting into a partitioned table, you can control which partitions and subpartitions accept new rows. The clause takes a list of the comma-separated names of one or more partitions or subpartitions (or both) of the table. If any of the rows to be inserted by a given statement do not match one of the partitions listed, the statement fails with the error Found a row not matching the given partition set. For more information and examples, see Section 26.5, “Partition Selection”.\n\nis the table into which rows should be inserted. Specify the columns for which the statement provides values as follows:\n\nColumn values can be given in several ways:\n• None If strict SQL mode is not enabled, any column not explicitly given a value is set to its default (explicit or implicit) value. For example, if you specify a column list that does not name all the columns in the table, unnamed columns are set to their default values. Default value assignment is described in Section 13.6, “Data Type Default Values”. If strict SQL mode is enabled, an statement generates an error if it does not specify an explicit value for every column that has no default value. See Section 7.1.11, “Server SQL Modes”.\n• None If both the column list and the list are empty, creates a row with each column set to its default value: If strict mode is not enabled, MySQL uses the implicit default value for any column that has no explicitly defined default. If strict mode is enabled, an error occurs if any column has no default value.\n• None Use the keyword to set a column explicitly to its default value. This makes it easier to write statements that assign values to all but a few columns, because it enables you to avoid writing an incomplete list that does not include a value for each column in the table. Otherwise, you must provide the list of column names corresponding to each value in the list.\n• None If a generated column is inserted into explicitly, the only permitted value is . For information about generated columns, see Section 15.1.20.8, “CREATE TABLE and Generated Columns”.\n• None In expressions, you can use to produce the default value for column .\n• None Type conversion of an expression that provides a column value might occur if the expression data type does not match the column data type. Conversion of a given value can result in different inserted values depending on the column type. For example, inserting the string into an , , , or column inserts the value , , , or , respectively. The value stored in the and columns is because the string-to-number conversion looks only at as much of the initial part of the string as may be considered a valid integer or year. For the and columns, the string-to-number conversion considers the entire string a valid numeric value.\n• None An expression can refer to any column that was set earlier in a value list. For example, you can do this because the value for refers to , which has previously been assigned: But the following is not legal, because the value for refers to , which is assigned after : An exception occurs for columns that contain values. Because values are generated after other value assignments, any reference to an column in the assignment returns a .\n\nstatements that use syntax can insert multiple rows. To do this, include multiple lists of comma-separated column values, with lists enclosed within parentheses and separated by commas. Example:\n\nEach values list must contain exactly as many values as are to be inserted per row. The following statement is invalid because it contains one list of nine values, rather than three lists of three values each:\n\nis a synonym for in this context. Neither implies anything about the number of values lists, nor about the number of values per list. Either may be used whether there is a single values list or multiple lists, and regardless of the number of values per list.\n\nstatements using syntax can also insert multiple rows. In this case, each value list must be contained within a (row constructor), like this:\n\nThe affected-rows value for an can be obtained using the SQL function or the C API function. See Section 14.15, “Information Functions”, and mysql_affected_rows().\n\nIf you use or with multiple value lists, or or , the statement returns an information string in this format:\n\nIf you are using the C API, the information string can be obtained by invoking the function. See mysql_info().\n\nindicates the number of rows processed by the statement. (This is not necessarily the number of rows actually inserted because can be nonzero.) indicates the number of rows that could not be inserted because they would duplicate some existing unique index value. indicates the number of attempts to insert column values that were problematic in some way. Warnings can occur under any of the following conditions:\n\nThe statement supports the following modifiers:"
    },
    {
        "link": "https://dev.mysql.com/doc/refman/8.2/en/values.html",
        "document": "is a DML statement which returns a set of one or more rows as a table. In other words, it is a table value constructor which also functions as a standalone SQL statement.\n\nThe statement consists of the keyword followed by a list of one or more row constructors, separated by commas. A row constructor consists of the row constructor clause with a value list of one or more scalar values enclosed in the parentheses. A value can be a literal of any MySQL data type or an expression that resolves to a scalar value.\n\ncannot be empty (but each of the supplied scalar values can be ). Each in the same statement must have the same number of values in its value list.\n\nThe keyword is not supported by and causes a syntax error, except when it is used to supply values in an statement.\n\nThe output of is a table:\n\nThe columns of the table output from have the implicitly named columns , , , and so on, always beginning with . This fact can be used to order the rows by column using an optional clause in the same way that this clause works with a statement, as shown here:\n\nstatement also supports a clause for limiting the number of rows in the output.\n\nThe statement is permissive regarding data types of column values; you can mix types within the same column, as shown here:\n\nwith one or more instances of acts as a table value constructor; although it can be used to supply values in an or statement, do not confuse it with the keyword that is also used for this purpose. You should also not confuse it with the function that refers to column values in . You should also bear in mind that is a row value constructor (see Section 15.2.15.5, “Row Subqueries”), whereas is a table value constructor; the two cannot be used interchangeably.\n\ncan be used in many cases where you could employ , including those listed here:\n• None With , as shown here: You can union together constructed tables having more than one row, like this: You can also (and it is usually preferable to) omit altogether in such cases and use a single statement, like this: can also be used in unions with statements, statements, or both. The constructed tables in the must contain the same number of columns, just as if you were using . See Section 15.2.18, “UNION Clause”, for further examples. You can use and with in much the same way as , as shown here: mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6) -> INTERSECT -> VALUES ROW(10,15), ROW(20,25), ROW(3,4); +----------+----------+ | column_0 | column_1 | +----------+----------+ | 3 | 4 | +----------+----------+ 1 row in set (0.00 sec) mysql> VALUES ROW(1,2), ROW(3,4), ROW(5,6) -> EXCEPT -> VALUES ROW(10,15), ROW(20,25), ROW(3,4); +----------+----------+ | column_0 | column_1 | +----------+----------+ | 1 | 2 | | 5 | 6 | +----------+----------+ 2 rows in set (0.00 sec) See Section 15.2.4, “EXCEPT Clause”, and Section 15.2.8, “INTERSECT Clause”, for more information.\n• None In joins. See Section 15.2.13.2, “JOIN Clause”, for more information and examples.\n• None In place of in an or statement, in which case its semantics differ slightly from what is described here. See Section 15.2.7, “INSERT Statement”, for details.\n• None In place of the source table in and . See the descriptions of these statements for more information and examples."
    },
    {
        "link": "https://datacamp.com/doc/mysql/mysql-insert",
        "document": "The `INSERT` statement in MySQL is used to add new rows of data into a table. It is essential for populating tables with initial data or appending new records.\n\nThe `INSERT` statement is employed when you need to add new data to a table. It can insert single or multiple rows at once, specifying the values for each column.\n\nIn this syntax, `INSERT INTO` defines the target table and columns, while `VALUES` specifies the data to be inserted. Additionally, the `INSERT ... SET` syntax can be used to specify column-value pairs directly:\n\nThis example inserts a single row into the `products` table with values for `product_name` and `price`.\n\nThis syntax demonstrates inserting multiple rows into the `employees` table in one statement for efficiency.\n\nThis example copies data from the `orders` table to `archived_orders` for records with an order date before 2022, useful for tasks such as data archiving or migration.\n\nThis statement attempts to insert a row and ignores it if a duplicate key is encountered.\n\nThis example updates the `username` if a duplicate key exists.\n• Specify column names. Always specify column names to ensure data is inserted into the correct columns, maintaining clarity and avoiding errors.\n• Use transactions. For bulk inserts or critical data, use transactions to ensure data integrity.\n• Check for duplicates. Use `INSERT IGNORE` or `ON DUPLICATE KEY UPDATE` to handle potential duplicate entries gracefully.\n• Validate data types. Ensure the values being inserted match the data types defined in the table schema.\n• Proper indexing. Consider proper indexing to enhance performance, especially when frequently inserting large amounts of data.\n• Handle NULL values. Be mindful of NULL values and their implications during insert operations, ensuring that columns with NOT NULL constraints are appropriately handled."
    },
    {
        "link": "https://w3schools.com/mysql/mysql_insert.asp",
        "document": "The statement is used to insert new records in a table.\n\nIt is possible to write the statement in two ways:\n\n1. Specify both the column names and the values to be inserted:\n\n2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the syntax would be as follows:\n\nBelow is a selection from the \"Customers\" table in the Northwind sample database:\n\nThe following SQL statement inserts a new record in the \"Customers\" table:\n\nThe selection from the \"Customers\" table will now look like this:\n\nInsert Data Only in Specified Columns\n\nIt is also possible to only insert data in specific columns.\n\nThe following SQL statement will insert a new record, but only insert data in the \"CustomerName\", \"City\", and \"Country\" columns (CustomerID will be updated automatically):\n\nThe selection from the \"Customers\" table will now look like this:"
    }
]