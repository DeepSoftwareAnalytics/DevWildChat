[
    {
        "link": "https://stackoverflow.com/questions/11079135/how-to-post-json-data-with-php-curl",
        "document": "You are POSTing the json incorrectly -- but even if it were correct, you would not be able to test using (read why here). Instead, on your second page, you can nab the incoming request using , which will contain the POSTed json. To view the received data in a more readable format, try this:\n\nIn your code, you are indicating , but you are not json-encoding all of the POST data -- only the value of the \"customer\" POST field. Instead, do something like this:\n\nSidenote: You might benefit from using a third-party library instead of interfacing with the Shopify API directly yourself."
    },
    {
        "link": "https://reqbin.com/code/php/goecadht/php-curl-post-json-example",
        "document": "PHP is a server-side scripting language that is widely used in web development programming. PHP supports many protocols and standards, such as HTTP, SMTP, POP3, IMAP, FTP, and XML. PHP can easily integrate with web development technologies such as HTML, CSS, and JavaScript. One of PHP's key advantages is its cross-platform compatibility, which means it can run on multiple operating systems, including macOS, Windows, Linux, and Unix.\n\nJSON (JavaScript Object Notation) is a standard text format for storing and transmitting data over the network. API clients extensively use the JSON format to send or receive data from a server. JSON represents four primitive types (strings, numbers, booleans, and null) and two structured types (objects and arrays). JSON file names use the .json extension. JSON is used to exchange data between applications written in many programming languages, including PHP, JavaScript, Java, C++, C#, Go, Python, and many more.\n\nThe HTTP POST request method is used to send data to the server, such as web form data or PDF files, or to create or update resources when communicating over the REST API protocol. The HTTP POST request can be with or without a body. The body of the POST request message carries the data sent to the server. The Content-Type header specifies the data type present within the POST request's body, and the data length is indicated using the HTTP Content-Length header. \n\n\n\n\n\nThe PHP Curl library is a convenient and flexible way to make HTTP requests in PHP. The PHP Curl library provides web application developers with an easy and secure way to interact with external servers and APIs.\n\nThe PHP Curl Library allows you to interact with servers through various types of protocols, including HTTP, HTTPS, FTP, and others. The Libcurl library supports HTTPS certificates, HTTP GET, POST, PUT, PATCH, and other HTTP methods, FTP file upload (FTP file upload can also be done with PHP FTP extension), proxy, cookies, user authentication, and HTML forms based upload.\n\nPHP Curl library is an extension of PHP. To use PHP Curl features, you need to install libcurl 7.10.5 or later and compile PHP with Curl support. The behavior of the PHP Curl functions is affected by the curl.cainfo setting in the php.ini file.\n\nHow to make POST requests using the PHP Curl Library?\n\nTo make POST requests using the Curl library, follow these steps: initialize a Curl session with curl_init(), set additional parameters with curl_setopt(), start the session using curl_exec(), close the session with curl_close(), and output the returned string.\n\nHow to send JSON using PHP Curl Library?\n\nTo send JSON data using the PHP Curl Library, you need to follow these steps:\n• Create the object or array of data you want to send;\n• Convert it to JSON format using the json_encode() function;\n• Close the Curl session with the curl_close() function.\n• How do I send a POST request using PHP?\n• How do I send a GET request using PHP?"
    },
    {
        "link": "https://geeksforgeeks.org/how-to-pass-json-data-in-a-url-using-curl-in-php",
        "document": "How to Pass JSON Data in a URL using CURL in PHP ?\n\nIn this article, we will see how to pass the JSON Data in a URL using CURL in PHP, along with understanding the different ways for passing the data in a URL through the illustrations. The cURL stands for client URL, which allows us to connect with other URLs & use their responses in our code, i.e., it is a tool for sending and getting files using URL syntax. The cURL facilitates the way that can hit a URL from our code to get an HTML response from it. The cURL is also used in command lines or scripts for data transfer. Here, we need to pass JSON data in a URL using cURL in PHP and handle the POST request. This task can be accomplished with the help of the following ways:\n\nWe will explore all the above approaches & understand them through examples.\n\nSyntax for passing JSON data in a URL using cURL:\n• By using the cURL POST Request\n• We need to specify the URL, where the JSON data need to be sent.\n• Put JSON data in a PHP array and set up JSON data.\n• And using json_encode() encode it into JSON string.\n• Setting the options for the cURL.\n• Switching request type from get to post using CURLOPT_POST.\n• Now attach the encoded string in the post field using CURLOPT_POSTFIELDS.\n• Setting the curl option RETURNTRANSFER to true so that it returns the response instead of just outputting it.\n• Using the CURLOPT_HTTPHEADER set the Content-Type to application/JSON.\n• Setting multiple options for a cURL session. Using the curl_setopt_array() function, setting a large number of options for cURL without repetitively calling it.\n• Using curl_exec() to execute the POST request.\n• Decode the response and Return the response as a string.\n\nExample 1: This example illustrates passing the JSON Data in a URL using cURL in PHP by using the cURL POST Request.\n• By using cURL GET Request\n• We need to specify the URL, Where the JSON data is going to be sent.\n• Next, we have to set options for the cURL.\n• Setting the curl option RETURNTRANSFER to true so that it returns the response instead of just outputting it.\n• Setting multiple options for a cURL session. Using the curl_setopt_array() function, setting a large number of options for cURL without repetitively calling it.\n• Using curl_exec() to execute the GET request.\n• Decode the response and Return the response as a string.\n\nExample 2: This example illustrates passing the JSON Data in a URL using cURL in PHP by using the cURL GET Request.\n• We need to specify the URL, where the JSON data need to be sent.\n• Put JSON data in a PHP array and set up JSON data.\n• And using json_encode() encode it into JSON string.\n• Setting the options for the cURL.\n• Now attach the encoded string in the post field using CURLOPT_POSTFIELDS.\n• Setting the curl option RETURNTRANSFER to true so that it returns the response instead of just outputting it.\n• Using the CURLOPT_HTTPHEADER set the Content-Type to application/JSON.\n• Instead of using CURLOPT_POST, we use here CURLOPT_CUSTOMREQUEST for specifying the PUT request.\n• Setting multiple options for a cURL session. Using the curl_setopt_array() function, setting a large number of options for cURL without repetitively calling it.\n• Using curl_exec() to execute the PUT request.\n• Decode the response and Return the response as a string.\n\nExample 3: This example illustrates passing the JSON Data in a URL using cURL in PHP by using the cURL PUT Request."
    },
    {
        "link": "https://stackoverflow.com/questions/44882777/php-curl-using-post-raw-json-data",
        "document": "I am working with PHP curl for post, for some reason I couldn't post the form successfully.\n\nWhen I try using the same in post it works, but not with PHP."
    },
    {
        "link": "https://scrapingbee.com/webscraping-questions/curl/post-json-curl",
        "document": "You can send JSON with a request using cURL using the -X option with POST and the -d option (data).\n\nHere is a sample command that sends a request to our hosted version of HTTPBin with JSON data:\n\nNote that your JSON data must be enclosed in single quotes.\n\ncURL is an open-source command-line tool used to transfer data to and from a server. It is extremely versatile and supports various protocols including HTTP, FTP, SMTP, and many others. It is generally used to test and interact with APIs, download files, and perform various other tasks involving network communication.\n\nAn HTTP POST request is like filling out a form and handing it in at an office. In the online world, it's when you submit information, such as filling out a contact form or posting a comment on a website. Your web browser (the client) packages up the data you've entered and sends it over to the server with a message that says, \"Here's some new info, please process and store it accordingly.\" The server then takes care of the data, either saving it or letting you know if there was an issue. POST requests are part of the HTTP protocol, which governs the way web clients and servers exchange information.\n\nJSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language, Standard ECMA-262 3rd Edition - December 1999. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. These properties make JSON an ideal data-interchange language."
    },
    {
        "link": "https://developers.mattermost.com/integrate/webhooks/incoming",
        "document": "Let’s learn how to create a simple incoming webhook that posts the following message to Mattermost.\n• In Mattermost, go to Product menu > Integrations > Incoming Webhook.\n• If you don’t have the Integrations option, incoming webhooks may not be enabled on your Mattermost server or may be disabled for non-admins. They can be enabled by a System Admin from System Console > Integrations > Integration Management. Once incoming webhooks are enabled, continue with the steps below.\n• Select Add Incoming Webhook and add a name and description for the webhook. The description can be up to 500 characters.\n• Select the channel to receive webhook payloads, then select Add to create the webhook.\n\nYou will end up with a webhook endpoint that looks like so:\n\nTreat this endpoint as a secret. Anyone who has it will be able to post messages to your Mattermost instance.\n\nTo use the endpoint, have your application make the following request:\n\nFor example, here is the same request using :\n\nFor compatibility with Slack incoming webhooks, if no header is set then the request body must be prefixed with , like so:\n\nA successful request will get the following response:\n\nAll webhook posts will display a indicator next to the username in Mattermost clients to help prevent against phishing attacks.\n\nIncoming webhooks support more than just the field. Here is a full list of supported parameters.\n\nAn example request using more parameters would look like this:\n\nThis content will be displayed in the Town Square channel:\n\nAn example request displaying additional data in the right-hand side panel, by passing Markdown text into the field of the object would look like this:\n\nWhen there is a object with a property attached to the webhook payload, the posted message displays a small info icon next to the timestamp. Clicking this icon expands the right-hand side panel to display the Markdown included in the property:\n\nMattermost makes it easy to migrate integrations written for Slack to Mattermost. Using the Slack parameter overrides the profile icon and the parameter and is supported from Mattermost v5.14.\n• JSON payloads written for Slack, that contain the following, are translated to Mattermost markdown and rendered equivalently to Slack:\n• to denote a URL link, such as\n• within a to define linked text, such as\n• to trigger a mention to a user, such as\n• , , or to trigger a mention to a channel, such as\n• You can override the channel name with a @username, such as to send a direct message like in Slack.\n• You can prepend a channel name with # and the message will still be sent to the correct channel like in Slack.\n\nGitLab is the leading open-source alternative to GitHub and offers built-in integrations with Slack. You can use the Slack interface in GitLab to add Mattermost webhooks directly without changing code:\n• In GitLab, go to Settings > Services and select Slack.\n• Paste the incoming webhook URL provided by Mattermost from Main Menu > Integrations > Incoming Webhooks.\n• Optionally set the Username you’d like displayed when the notification is made. Leave the Channel field blank.\n• Select Save, then test the settings to confirm messages are sent successfully to Mattermost.\n• Referencing channels using does not link to the channel.\n• and are not supported.\n• Parameters “mrkdwn”, “parse”, and “link_names” are not supported. Mattermost converts Markdown by default and automatically links @mentions.\n• Bold formatting as is not supported (must be done as ).\n• Webhooks cannot direct message the user who created the webhook.\n• If the is longer than the allowable character limit per post, the message is split into multiple consecutive posts, each within the character limit. From Mattermost Server v5.0, posts up to 16383 characters are supported.\n• Your webhook integration may be written in any programming language as long as it supports sending an HTTP POST request.\n• Both and are supported headers. If no is provided, is assumed.\n• To send a message to a direct message channel, add an “@” symbol followed by the username to the channel parameter. You can add your own username to send the webhook posts to a direct message channel with yourself. payload={\"channel\": \"@username\", \"text\": \"Hello, this is some text\n\nThis is more text. 🎉\"} This will send a message from the account that has set up the incoming webhook to the username after the “@” symbol. For example, if you create a webhook with the user and send a direct message to using a webhook, it will show up as a direct message from to regardless of other settings such as username. To send a message to a different direct message channel between two other users, you can specify the channel with the user IDs for the users separated with two underscore (_) symbols. To find the user ID you can use mmctl user search. payload={\"channel\": \"6w41z1q367dujfaxr1nrykr5oc__94dzjnkd8igafdraw66syi1cde\", \"text\": \"Hello, this is some text\n\nThis is more text. 🎉\"}\n\nTo debug incoming webhooks in System Console > Logs, set System Console > Logging > Enable Webhook Debugging to true, and set System Console > Logging > Console Log Level to DEBUG.\n• : Indicates that the channel doesn’t exist or is invalid. Please modify the parameter before sending another request.\n• : Indicates that the user doesn’t exist or is invalid. Please modify the parameter before sending another request.\n• : Indicates that the request received is malformed. Try reviewing that the JSON payload is in a correct format and doesn’t have typos such as extra .\n• : Typically an error when using cURL on Windows, when:\n• You have space around JSON separator colons, or\n• You are using single quotes to wrap the data,\n\nIf your integration prints the JSON payload data instead of rendering the generated message, make sure your integration is returning the content-type.\n\nFor further assistance, review the Troubleshooting forum for previously reported errors, or join the Mattermost user community for troubleshooting help."
    },
    {
        "link": "https://mattermost.com/blog/mattermost-integrations-incoming-webhooks",
        "document": "Incoming webhooks are the easiest way to let other programs send messages to Mattermost\n\nLast week, we shared an introduction on how to use incoming webhooks to integrate with Mattermost. Here’s an example of how to use them in action.\n\nOur fridges need to retain a constant temperature. When the temperature gets too high, we have to react quickly to prevent food from spoiling. If the temperature increases, it could be a sign that there’s a problem with the fridge or that someone didn’t close it well.\n\nWe built a monitoring system that warned relevant people by email when the fridge got too hot. But let’s be honest: Email will become like faxes—once great but soon outdated.\n\nWe integrated the monitoring system with Mattermost because it enables us to use push notifications to see at glance if anyone checked the situation. We have an overview in the channel that outlines how often incidents occur.\n\nKeep reading to learn how you can build an incoming webhook for a similar use case.\n\nCreate the incoming webhook in four steps\n\n1. Go to the Menu and choose :\n\n2. On the following screen, choose :\n\n3. On the next screen, you can see your existing incoming webhooks and add a new one.\n\n4. Now, you can set up the incoming webhook in five simple steps:\n• Select the default channel that receives the messages that the incoming webhook is sending\n• Choose if you want to lock the incoming webhook to the channel or that it is allowed to send to other channels as well\n\nSee, that wasn’t that hard. You get a confirmation with a very important URL, which listens to the messages we will be sending.\n\nOk, you are all set! Let’s start sending messages!\n\nDo you want to do a quick check if it’s working? You can check it with curl:\n\nIf you don’t like JSON, you can send a plain webrequest as well:\n\nOr if you prefer NodeJS:\n\nIf you didn’t check the checkbox, you can send messages to other channels by sending a channel-variable:\n\nIf you want to use another username to appear as the sender, you can add the username variable. This setting is default disabled and must be enabled in the Management Console.\n\nIf you want to change the profile picture, add the in the request.\n\nIf you want to add an emoticon in the text, add a shortcode like :tada: in the text.\n\nIf you are not familiar with Markdown layout, you can find an introduction in the Mattermost Documentation.\n\nIs something not working as expected? Go to the System Console and click on under .\n\nIn the section, enable and set to .\n\nYou’ll find all the relevant information you need in the logfiles (or in the console if you enabled logging to the console).\n\nMy most common mistake is a typo in the request. It gives me an “Unable to parse incoming data” error.\n\nFor more comprehensive information on incoming webhooks, check out the official Mattermost documentation. You can also always ask for help over on the Mattermost Forum."
    },
    {
        "link": "https://developers.mattermost.com/integrate/webhooks",
        "document": "Mattermost supports webhooks to easily integrate external applications into the server.\n\nUse incoming webhooks to post messages to Mattermost public channels, private channels, and direct messages. Messages are sent via an HTTP POST request to a Mattermost URL generated for each application and contain a specifically formatted JSON payload in the request body.\n\nOutgoing webhooks will send an HTTP POST request to a web service and process a response back to Mattermost when a message matches one or both of the following conditions:\n• The first word matches or starts with one of the defined trigger words, such as .\n\nOutgoing webhooks are supported in public channels only. If you need a trigger that works in a private channel or a direct message, consider using a slash command instead."
    },
    {
        "link": "https://forum.mattermost.com/t/incoming-webhook-send-into-direct-message-channel-between-two-other-users/4937",
        "document": "we use a software where I implemented an Incoming Webhook call to Mattermost, to notify another user of something. (I.e.: “Have a look at this : ”)\n\n This is sent to the user as direct message via “channel”: “@username”. The problem I’m facing is, I’d like to send it “in the name of” the user, that triggered the webhook in the other software tool, as a direct message between “user.A” and “user.B”. At the moment it sends it as direct message between Webhook user “Webbot” and “user.B”.\n\nThe advantage I’d see in changed behaviour is:\n• users see what they recommended/notified about\n• sending and addressed user can start a conversation about that topic right away\n\nI could see a solution/workaround in creating webhook for every user in the system, but I’d prefer an easier solution if possible…"
    },
    {
        "link": "https://jeffschering.github.io/mmdocs/upgrade/developer/webhooks-incoming.html",
        "document": "Mattermost supports Webhooks to integrate external applications into the platform easily. Webhooks are simple event-notifications via HTTP POST. Incoming Webhooks may post a message to a Mattermost instance into public channels, private channels, and direct messages. The HTTP POST contains a specifically formatted JSON payload and is sent to Mattermost URL generated specifically for each application.\n• The external application may be written in the programming language of your choice. It only needs to support sending a HTTP POST in the required JSON format to the specific URL.\n• Webhooks are designed to post a message only. It is not possible to trigger any other event, like »create new channel« with a Webhook. Use the for this task.\n• Mattermost incoming webhooks are Slack-compatible. If you’ve used Slack’s incoming webhooks previously, you can copy and paste that code to create Mattermost integrations. Mattermost automatically translates Slack’s proprietary JSON payload format.\n• Mattermost incoming webhooks support full markdown. Unlike in Slack a rich range of formatting is made possible through in Mattermost, including headings, formatted fonts, tables, inline images and other options supported by Mattermost Markdown.\n\nSuppose you have an external application which sends notifications, and these notifications should be posted into a Mattermost channel as well. The application may publish a statistic of executed software tests once a day. The application then just needs to send a HTTP request with a defined JSON format to Mattermost.\n\nThe JSON payload for this example might be:\n\nWhich would render in a Mattermost message as follows:\n\nIncoming webhooks should be enabled on your Mattermost instance by default, but if they are not you’ll need to get your system administrator to enable them. If you are the system administrator you can enable them by doing the following:\n• Login to your Mattermost team account that has the system administrator role.\n• (Optional) Configure the Enable integrations to override usernames option to allow external applications to post messages under any name. If not enabled, the username is set to “webhook”.\n• (Optional) Configure the Enable integrations to override profile picture icons option to allow external applications to change the icon of the account posting messages. If not enabled, the icon of the creator of the webhook URL is used to post messages.\n\nIf you’ve already found or built an integration and are just looking to hook it up, then you should just need to follow the specific instructions of that integration. If the integration is using Mattermost incoming webhooks, then at some point in the instructions it will ask for a webhook URL. You can get this URL by following the first step in the next section.\n\nYou can create a webhook integration to post into any Mattermost public channels and into private channels you have permission to by using these steps: Incoming webhooks must be enabled. Only your Mattermost system administrator can enable incoming webhooks if they are currently disabled.\n• Login to your Mattermost team site and go to Main Menu > Integrations > Incoming Webhooks.\n• Select the channel to receive webhook payloads, then click Add to create the webhook.\n• To see your new webhook in action, try a curl command from your terminal or command-line to send a JSON string as the parameter in a HTTP POST request. For example: curl -i -X POST -d 'payload={\"text\": \"Hello, this is some text.\n\nThis is more text.\"}' http://{your-mattermost-site}/hooks/xxx-generatedkey-xxx\n• Build your integration in the programming language of your choice.\n• Most integrations will be used to translate some sort of output from another system to an appropriately formatted input that will be passed into the Mattermost webhook URL. For example, an integration could take events generated by GitLab outgoing webhooks and parse them into a JSON body to post into Mattermost.\n• To get the message posted into Mattermost, your integration will need to create an HTTP POST request that will submit to the incoming webhook URL you created before. The body of the request must have a payload that contains a JSON object that specifies a text parameter. For example, is a valid body for a request.\n• Set up your integration running on Heroku, an AWS server or a server of your own to start sending real-time updates to Mattermost channels.\n• For the HTTP request body, if is specified as in the headers of the HTTP request then the body of the request can be direct JSON. For example,\n• You can override the channel specified in the webhook definition by specifying a parameter in your payload. For example, you might have a single webhook created for Town Square, but you can use to send a message to the Off-Topic channel using the same webhook URL. If an @ symbol followed by a username is specified, then the message will be sent to that user’s direct message channel.\n• In addition, with Enable integrations to override usernames turned on, you can also override the username the message posts as by providing a username parameter in your JSON payload. For example, you might want your message looking like it came from a robot so you can use to change the username of the post to “robot”. Note, to combat any malicious users from trying to use this to perform phishing attacks a BOT indicator appears next to posts coming from webhooks.\n• With Enable integrations to override profile picture icons turned on, you can similarly change the icon the message posts with by providing a link to an image in the icon_url parameter of your payload. For example, will post using whatever image is located at http://example.com/somecoolimage.jpg as the icon for the post.\n• Also, as mentioned previously, can be used to create richly formatted payloads, for example: creates a message with a header, a carriage return, and bold text for “the”.\n• Including @username in the JSON payload will trigger a mention notification for the person with the specified username. Channels can be mentioned by including @channel or <!channel>. For example: would create a message that mentions @channel.\n• If the text is longer than 4000 characters, the message is split into multiple consecutive posts, each within the 4000 character limit.\n• Posts with advanced formatting can be created by including an in the JSON payload.\n\nMattermost makes it easy to take integrations written for Slack’s proprietary JSON payload format and repurpose them to become Mattermost integrations. For example: GitLab is the leading open-source alternative to GitHub and offers built-in integrations with Slack. Rather than having to change code to support Mattermost, users can add Mattermost webhooks directly into the interface for Slack.\n• In GitLab, go to Settings > Services and select Slack.\n• Paste in the incoming webhook URL provided by Mattermost from under Main Menu > Integration > Incoming Webhooks.\n• Optionally set the Username you’d like displayed when the notification is made. Leave the Channel field blank.\n• Click Save then test the settings to confirm posts will be made to Mattermost. The following describes the automatic translations Mattermost performance to process data coming from Slack:\n• Payloads designed for Slack using <> to note the need to hyperlink a URL, such as , are translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack.\n• Similiarly, payloads designed for Slack using | within a <> to define linked text, such as , are also translated to the equivalent markdown in Mattermost and rendered the same as you would see in Slack.\n• Like Slack, by overriding the channel name with a @username, such as , you can send the message to a user through your direct message chat.\n• Channel names can be prepended with a #, like they are in Slack incoming webhooks, and the message will still be sent to the correct channel. To see samples and community contributions, please visit our app directory.\n• Using icon_emoji to override the username is not supported.\n• Referencing channels using <#CHANNEL_ID> does not link to the channel.\n• , , and are not supported.\n• Parameters “mrkdwn”, “parse”, and “link_names” are not supported (Mattermost always converts markdown and automatically links @mentions).\n• Bold formatting as is not supported (must be done as ).\n• Webhooks cannot direct message the user who created the webhook."
    }
]