[
    {
        "link": "https://w3schools.com/css/css_form.asp",
        "document": "The look of an HTML form can be greatly improved with CSS:\n\nUse the property to determine the width of the input field:\n\nThe example above applies to all <input> elements. If you only want to style a specific input type, you can use attribute selectors:\n\nUse the property to add space inside the text field.\n\nTip: When you have many inputs after each other, you might also want to add some , to add more space outside of them:\n\nNote that we have set the property to . This makes sure that the padding and eventually borders are included in the total width and height of the elements. \n\nRead more about the property in our CSS Box Sizing chapter.\n\nUse the property to change the border size and color, and use the property to add rounded corners:\n\nIf you only want a bottom border, use the property:\n\nUse the property to add a background color to the input, and the property to change the text color:\n\nBy default, some browsers will add a blue outline around the input when it gets focus (clicked on). You can remove this behavior by adding to the input.\n\nUse the selector to do something with the input field when it gets focus:\n\nIf you want an icon inside the input, use the property and position it with the property. Also notice that we add a large left padding to reserve the space of the icon:\n\nIn this example we use the CSS property to animate the width of the search input when it gets focus. You will learn more about the property later, in our CSS Transitions chapter.\n\nTip: Use the property to prevent textareas from being resized (disable the \"grabber\" in the bottom right corner):\n\nFor more information about how to style buttons with CSS, read our CSS Buttons Tutorial.\n\nResize the browser window to see the effect. When the screen is less than 600px wide, make the two columns stack on top of each other instead of next to each other."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Styling_web_forms",
        "document": "In 1995, the HTML 2 specification introduced form controls (a.k.a. \"form widgets\", or \"form elements\"). But CSS wasn't released until late 1996, and wasn't supported by most browsers until years afterward; so, in the interim, browsers relied on the underlying operating system to render form widgets. Even with CSS available, browser vendors were reluctant at first to make form elements stylable, because users were so accustomed to the looks of their respective browsers. But things have changed, and forms widgets are now mostly stylable, with a few exceptions.\n\nCSS font and text features can be used easily with any widget (and yes, you can use with form widgets). However, browser behavior is often inconsistent. By default, some widgets do not inherit and from their parents. Many browsers use the system's default appearance instead. To make your forms' appearance consistent with the rest of your content, you can add the following rules to your stylesheet: The property value causes the property value to match the computed value of the property of its parent element; inheriting the value of the parent. The screenshots below show the difference. On the left is the default rendering of an , , , , , and a in Chrome on macOS, with the platform's default font style in use. On the right are the same elements, with our above style rule applied. The defaults differed in a number of ways. Inheriting should change their fonts to that of the parent's font family — in this case, the default serif font of the parent container. They all do, with a strange exception — does not inherit from the parent paragraph in Chrome. Rather, it uses the . This is another reason to use elements over their equivalent input types! There's a lot of debate as to whether forms look better using the system default styles, or customized styles designed to match your content. This decision is yours to make, as the designer of your site, or web application.\n\nAll text fields have complete support for every property related to the CSS box model, such as , , , , and . As before, however, browsers rely on the system default styles when displaying these widgets. It's up to you to define how you wish to blend them into your content. If you want to keep the native look and feel of the widgets, you'll face a little difficulty if you want to give them a consistent size. This is because each widget has its own rules for border, padding, and margin. To give the same size to several different widgets, you can use the property along with some consistent values for other properties: In the screenshot below, the left column shows the default rendering of an , , , , , , , , and . The right column on the other hand shows the same elements with our above rule applied to them. Notice how this lets us ensure that all of the elements occupy the same amount of space, despite the platform's default rules for each kind of widget. What may not be apparent via the screenshot is that the radio and checkbox controls still look the same, but they are centered in the 150px of horizontal space provided by the property. Other browsers may not center the widgets, but they do adhere to the space allotted.\n\nThe element is okay to style, but it can be a bit tricky to control the placement of it. By default, it is always positioned over the top border of its parent, near the top left corner. To position it somewhere else, for example inside the fieldset somewhere, or near the bottom left corner, you need to rely on the positioning. Take the following example: To position the legend in this manner, we used the following CSS (other declarations removed for brevity): The needs to be positioned too, so that the is positioned relative to it (otherwise the would be positioned relative to the ). The element is very important for accessibility — it will be spoken by assistive technologies as part of the label of each form element inside the fieldset — but using a technique like the one above is fine. The legend contents will still be spoken in the same way; it is just the visual position that has changed. Note: You could also use the property to help you with positioning your . However, when you position it with for example a , it moves but leaves an ugly gap in the border, which is not easy to get rid of.\n\nNow we can dig into the CSS for the example. Add all the code blocks shown below inside the element, one after another. First, we prepare by defining our rules, and all the basic styles set on the and elements. If the fontsquirrel output was different from what we described above, you can find the correct blocks inside your downloaded webfont kit, in the file (you'll need to replace the below blocks with them, and update the paths to the font files): Notice that we've used some CSS grid and Flexbox to lay out the form. Using this we can easily position our elements, including the title and all the form elements: Now we can start working on the form elements themselves. First, let's ensure that the s are given the right font: The text fields require some common rules. In other words, we remove their and , and redefine their and : When one of these fields gains focus, we highlight them with a light grey, transparent, background (it is always important to have focus style, for usability and keyboard accessibility): Now that our text fields are complete, we need to adjust the display of the single and multiple-line text fields to match, since they won't typically look the same using the defaults. elements default to being rendered as an inline-block element. The two important things here are the and properties. While our design is a fixed-size design, and we could use the property to prevent users from resizing our multi-line text field, it is best to not prevent users from resizing a textarea if they so choose. The property is used to make the field render more consistently across browsers. Some browsers default to the value , while some default to the value . In our case, it's better to be sure everyone will use : The element is really convenient to style with CSS; you can do whatever you want, even using pseudo-elements:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Advanced_form_styling",
        "document": "In the previous article we said that historically, the styling of web form controls was largely taken from the underlying operating system, which is part of the problem with customizing the look of these controls. The property was created as a way to control what OS- or system-level styling was applied to web form controls. By far the most helpful value, and probably the only one you'll use, is . This stops any control you apply it to from using system-level styling, as much as possible, and lets you build up the styles yourself using CSS. For example, let's take the following controls: Applying the following CSS to them removes system-level styling. The following live example shows you what they look like in your system — default on the left, and with the above CSS applied on the right (find it here also if you want to test it on other systems). In most cases, the effect is to remove the stylized border, which makes CSS styling a bit easier, but isn't really essential. In a couple of cases — search and radio buttons/checkboxes, it becomes way more useful. We'll look at those now.\n\nis basically just a text input, so why is useful here? The answer is that Safari search boxes have some styling restrictions — you can't adjust their or freely, for example. This can be fixed using our friend , which disables the default appearance: In the example below, you can see two identical styled search boxes. The right one has applied, and the left one doesn't. If you look at it in Safari on macOS you'll see that the left one isn't sized properly. Interestingly, setting border/background on the search field also fixes this problem. The following styled search doesn't have applied, but it doesn't suffer from the same problem in Safari as the previous example. Note: You may have noticed that in the search field, the \"x\" delete icon, which appears when the value of the search is not null, disappears when the input loses focus in Edge and Chrome, but stays put in Safari. To remove via CSS, you can use .\n\nStyling a checkbox or a radio button is tricky by default. The sizes of checkboxes and radio buttons are not meant to be changed with their default designs, and browsers react very differently when you try. For example, consider this simple test case: Different browsers handle the checkbox and span differently, often ugly ways: Using appearance: none on radios/checkboxes As we showed before, you can remove the default appearance of a checkbox or radio button altogether with . Let's take this example HTML: <form> <fieldset> <legend>Fruit preferences</legend> <p> <label> <input type=\"checkbox\" name=\"fruit\" value=\"cherry\" /> I like cherry </label> </p> <p> <label> <input type=\"checkbox\" name=\"fruit\" value=\"banana\" disabled /> I can't like banana </label> </p> <p> <label> <input type=\"checkbox\" name=\"fruit\" value=\"strawberry\" /> I like strawberry </label> </p> </fieldset> </form> Now, let's style these with a custom checkbox design. Let's start by unstyling the original check boxes: We can use the and pseudo-classes to change the appearance of our custom checkbox as its state changes: input[type=\"checkbox\"] { position: relative; width: 1em; height: 1em; border: 1px solid gray; /* Adjusts the position of the checkboxes on the text baseline */ vertical-align: -2px; /* Set here so that Windows' High-Contrast Mode can override */ color: green; } input[type=\"checkbox\"]::before { content: \"✔\"; position: absolute; font-size: 1.2em; right: -1px; top: -0.3em; visibility: hidden; } input[type=\"checkbox\"]:checked::before { /* Use `visibility` instead of `display` to avoid recalculating layout */ visibility: visible; } input[type=\"checkbox\"]:disabled { border-color: black; background: #ddd; color: gray; } You'll find out more about such pseudo-classes and more in the next article; the above ones do the following:\n• — the checkbox (or radio button) is in a checked state — the user has clicked/activated it.\n• — the checkbox (or radio button) is in a disabled state — it cannot be interacted with. You can see the live result: We've also created a couple of other examples to give you more ideas:\n• Toggle switch example: A checkbox styled to look like a toggle switch. If you view these checkboxes in a browser that doesn't support , your custom design will be lost, but they will still look like checkboxes and be usable.\n\nWhat can be done about the \"ugly\" elements? Now let's turn our attention to the \"ugly\" controls — the ones that are really hard to thoroughly style. In short, these are drop-down boxes, complex control types like and , and feedback—oriented controls like and . The problem is that these elements have very different default looks across browsers, and while you can style them in some ways, some parts of their internals are literally impossible to style. If you are prepared to live with some differences in look and feel, you can get away with some simple styling to make sizing consistent, uniform styling of things like background-colors, and usage of appearance to get rid of some system-level styling. Take the following example, which shows a number of the \"ugly\" form features in action: This example has the following CSS applied to it: Note: If you want to test these examples across a number of browsers simultaneously, you can find it live here (also see here for the source code). Also bear in mind that we've added some JavaScript to the page that lists the files selected by the file picker, below the control itself. This is a simplified version of the example found on the reference page. As you can see, we've done fairly well at getting these to look uniform across modern browsers. We've applied some global normalizing CSS to all the controls and their labels, to get them to size in the same way, adopt their parent font, etc., as mentioned in the previous article: We also added some uniform shadow and rounded corners to the controls on which it made sense: On other controls like range types, progress bars, and meters they just add an ugly box around the control area, so it doesn't make sense. Let's talk about some specifics of each of these types of control, highlighting difficulties along the way.\n\nIn modern browsers, selects and datalists are generally not too bad to style provided you don't want to vary the look and feel too much from the defaults. We've managed to get the basic look of the boxes looking pretty uniform and consistent. The datalist control is anyway, so we knew this wouldn't be a problem. Two things are slightly more problematic. First of all, the select's \"arrow\" icon that indicates it is a dropdown differs across browsers. It also tends to change if you increase the size of the select box, or resize in an ugly fashion. To fix this in our example we first used our old friend to get rid of the icon altogether: We then created our own icon using generated content. We put an extra wrapper around the control, because / don't work on elements (because their content is fully controlled by the browser): We then use generated content to generate a little down arrow, and put it in the right place using positioning: The second, slightly more important issue is that you don't have control over the box that appears containing the options when you click on the box to open it. You can inherit the font set on the parent, but you won't be able to set things like spacing and colors. The same is true for the autocomplete list that appears with . If you really need full control over the option styling, you'll have to either use some kind of library to generate a custom control, or build your own custom control, or in the case of select use the attribute, which makes all the options appear on the page, sidestepping this particular problem: Of course, this might also not fit in with the design you are going for, but it's worth noting!\n\nThe date/time input types ( , , , ) all have the same major associated issue. The actual containing box is as easy to style as any text input, and what we've got in this demo looks fine. However, the internal parts of the control (e.g. the popup calendar that you use to pick a date, the spinner that you can use to increment/decrement values) are not stylable at all, and you can't get rid of them using . If you really need full control over the styling, you'll have to either use some kind of library to generate a custom control, or build your own. Note: It is worth mentioning here too — this also has a spinner that you can use to increment/decrement values, so potentially suffers from the same problem. However, in the case of the type the data being collected is simpler, and it is easy to just use a input type instead which has the appearance of , but displays the numeric keypad in devices with touch keyboards.\n\nand are possibly the worst of the lot. As you saw in the earlier example, we can set them to the desired width relatively accurately. But beyond that, they are really difficult to style in any way. They don't handle height settings consistently between each other and between browsers, you can color the background, but not the foreground bar, and setting on them makes things worse, not better. It is easier to just create your own custom solution for these features, if you want to be able to control the styling, or use a third-party solution such as progressbar.js. The article How to build custom form controls provides an example of how to build a custom designed select with HTML, CSS, and JavaScript."
    },
    {
        "link": "https://medium.com/swlh/how-to-style-a-form-with-html-and-css-96e8d0e46596",
        "document": "Happy day 9 of 365 Days of Coding! Today is day 2 of a 4 day series on creating a sign up form! This form can have any input but you must require, first name, last name, phone number and email. It should also have a section for OAuth (allow for sign in with Facebook, Google, etc.). The phone number must be formatted. It will also have validation for the email and phone number. Since this is more than just 1 function I am going to create a Github repository for it. Every day will be a branch and each day the branch will be merged into master so master will eventually have the final solution but each day will still be broken out if you want to see my solution for each day as well. Here is the link to the repository I will also link it below.\n\nIf you would like me to do a post on Github and how to use it let me know I am happy to do so!\n\nDisclaimer: there are MANY ways to solve this challenge this is just my version of this challenge\n\nTLDR: Solution is at the bottom of the post\n\nTo test your code all your have to do is go to the folder where the index.html document created is and double click it. It will open a web browser with your code. To see changes you have made save the file and refresh that page.\n\nStyle your form from yesterday and page! Make it pretty!\n\nWe are going use some CSS to take our form from yesterday from this….\n\nFirst I am going to add a couple more divs. My form is going to have a left side and a right side. The right side is going to be our OAuth and the left side will be the form that we build yesterday. So I am going to wrap the form we built yesterday in a div so that we can style it properly on the left side of the formContainer. I am also going to add a div for the right side of the formContainer.\n\nI am also going to have a circle between the two sections that says “OR” so I will be adding a div for that as well. The body now looks like this:\n\nI want to change my header from an h1 to an h2 and add a class because I will need to do some styling to this header.\n\nI want to add a positioning style to all inputs. I could just use the formInput class but I also want to add it to the submit button and it is a positioning style for all elements in the form so I am going to wrap them in a class for that as well.\n\nI am going to move the css to its own file so I will be adding a tag to bring that in. My HTML now looks like this:\n\nLet’s make our background of our page less boring first. I found this awesome background using css gradients here. This is also a great site to create the gradient you want and have it create the css for that gradient because css gradients can be a bit of a pain. I am also a fan of sans-serif fonts so I am going to make all the text to sans-serif using font-family. The css for the body is going to look like this:\n\nNow its a little hard to read so we are going to put a background on the formContainer. I am going to make it white. I also want to move it more toward the middle of the page. I don’t want it exactly in the middle of the page so my positioning is going to be a bit different than if you want it exactly in the middle of the page. You should however be able to use a lot of the same ideas.\n\nYou will notice I use a lot of percentages in my styling. I do this because it usually transfers better with the different screen sizing requiring a lot less specific tweaking when going between screen sizes. This is not to say it is perfect and will not need to but it does help.\n\nI am going to use margin: 8% auto to make it 8% off the top of the page and auto will center it from each side.\n\nBox-sizing: border-box is used to tell the website to take padding and borders into consideration when it is calculating the total size (height and width). Since I will be adding padding to the container I will be adding it.\n\nI will also be adding a shadow around the box to make it pop a bit. Box-shadow may look a little confusing but the property template looks like this: box-shadow: offset-x, offset-y, blur-radius, spread-radius, color\n\nI don’t want the container to have sharp corners so I am adding a border-radius. The higher the number on the border radius the bigger the curve.\n\nI am adding padding to the formContainer. The way I am doing it is a 1 liner since I am updating 2 of the sides. You can do this by making a padding property for each side you want to change or in a one liner with this template: padding: top, right, bottom, left;\n\nPosition relative makes the position of the element relative to itself. It is not relative to any other elements on the page and will not affect any other elements on the page.\n\nThe formContainer CSS ends up looking like this:\n\nFor the header I just want the text to be centered in the section so I am going to use text-align: center. I’m also going to add a margin to the formContentContainer to give it some space away from the header.\n\nFor all the inputs I want to take off the border as they are a little dated. So I will use border: none to take off the border then use border-bottom so that only the bottom has a border. If you do border none after the border-bottom there will be no border so that has to go before border: none. Border-bottom’s template is border-bottom: border-width border-style color;\n\nThe margin template is the same as padding.\n\nEverything else should look familiar\n\nFor the submit button I was the text to be upper case so I am going to use text-transform: uppercase.\n\nThe margin template for this one is margin: (top and bottom margin) (left and right) so the first number will apply to both the top and bottom and the second number will apply to the left and right.\n\nI also want the cursor to be the pointy finger emoji looking cursor when hovering over the button so I am going to add cursor: pointer.\n\nEverything else should look familiar\n\nWe are going to made the circle for the “or” with CSS. We do this with border-radius: 50%.\n\nI am using position: absolute this time. That will make all the positioning relative to its parent which is the formContainer.\n\nThe left and right sides are going to be very similar. The only difference will be the left and right and the right side is going to have a black background. I may update the background later when I add the OAuth but for now it’ll be black. I am also adding a border-radius to the right side because if I don’t the right side of the form will not have curved edges. To match the other corners I need to add a border-radius. You could put all the similar properties in one set of brackets like:\n\nbut I have to make separate sections for each either way. I also don’t necessarily want the positioning for one to be effected by the positioning for the other (if I decided to make one side bigger than the other). So I am going to opt for just having 2 different tag blocks.\n\nSo my HTML file looks like this:\n\nand my CSS file looks like this:\n\nI hope you had fun with this one! Please leave your repo links to your form in the comments section. Also let me know if you like the multi day challenges or really hate them! If you have any challenge you would like to see done also leave that in the comments below you may see it come up! If you would like to get the challenge emailed to you every day in morning and a notification when the solution is posted subscribe here."
    },
    {
        "link": "https://w3schools.com/howto/howto_css_contact_form.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Aligning_items_in_a_flex_container",
        "document": "Flexbox provides several properties to control alignment and spacing, with and being fundamental for centering elements. To center an element, we use the property to align the item on the cross axis, which in this case is the block axis running vertically. We use to align the item on the main axis, which in this case is the inline axis running horizontally. Change the size of the container or nested element in the code example below. The nested element always remains centered.\n\nThe property, set on the flex container, and the property, set on flex items, control the alignment of flex items on the cross axis. The cross axis runs down the columns if is and along the rows if is . In this basic flex example, we're using cross-axis alignment. When we add to a container, the child items become flex items arranged in a row. By default, they will all stretch to match the height of the tallest item, as that item defines the height of the items on the cross axis. If the flex container has a height set, the items will stretch to that height, regardless of how much content is in each item. The reason the items become the same height is that the initial value of , the property that controls alignment on the cross axis, is set to . We can use other values to control how the items align: In the example below, the value of is . Try the other values and see how the items align against each other in the flex container.\n\nThe property sets the property on all of the flex items as a group. This means you can explicitly declare the property to target a single item. The property accepts all of the same values as , plus a value of , which resets the value to that defined on the flex container. In this next live example, the flex container has , which means the items are all aligned to the start of the cross axis. Using the selector, the first item is set to . Another item with the class has set. Change the value of or change the values of on the individual items to see how this works.\n\nThus far, we have looked at alignment behavior when the defaults to while working in a language written top to bottom, with a horizontal main axis and vertical cross axis. Keeping the same writing mode, when the is changed to , the and properties will align the items to the left and right instead of top and bottom; these properties are still aligning items along the cross axis, but the cross axis is now horizontal! You can try this out in the example below, which has a flex container with yet otherwise is exactly the same as the previous example.\n\nAligning content on the cross axis with the property So far, we have focused on aligning items or individual items inside the area defined by a flex container containing a single line of flex items. When flex items are allowed to wrap across multiple lines, the property can be used to control the distribution of space between the lines, also known as packing flex lines. For to have an effect, the cross axis dimension (the height in this case) of the flex container must be greater than needed to display the items. It then works on all the items as a set. The values dictate what happens with the extra available space and the alignment of the entire set of items within it. The property takes the following values: In the live example below, the flex container has a height of , which is more than needed to display our items. The value of is , which means that the available space is shared out between the flex lines, which are placed flush with the start and end of the container on the cross axis. Try out the other values to see how the property works. Once again we can switch our to in order to see how this property behaves when we are working by column. As before, we need enough space in the cross axis to have some free space after displaying all of the items.\n\nNow that we have seen how alignment works on the cross axis, we can take a look at the main axis. Here we only have one property available to us — . This is because we are only dealing with items as a group on the main axis. With we control what happens with available space, should there be more space than is needed to display the items. In our initial example with on the container, the items display as a row and all line up at the start of the container. This is due to the initial value of being , which behaves as . Any available space is placed at the end of the items. The values aren't relevant in this dimension. Otherwise, the property accepts the same values as . In the example below, the value of is . The available space after displaying the items is distributed between the items. The left and right item line up flush with the start and end. If the main axis is in the block direction because is set to , then will distribute space between items in that dimension as long as there is space in the flex container to distribute.\n\nRemember that with all of these alignment methods, the values of and are writing mode-aware. If the value of is and the writing mode is left-to-right, as in English, the items will align starting at the left side of the container. However if the writing mode is right-to-left as in Arabic, the items will line up starting at the right side of the container. The live example below has the property set to to force a right-to-left flow for our items. You can remove this, or change the values of to see how flexbox behaves when the start of the inline direction is on the right.\n\nThe direction of of the line will also change if you change the property — for example, using instead of . In this next example, and define the direction and location of the items within the flex container. In a left to right language, the items line up on the left. Try changing to . You will see that the items now move to the right-hand side, and the visual order of the items is reversed. While this may all seem a little confusing, the rule to remember is that unless you do something to change it, flex items lay themselves out in the direction that words are laid out in the language of your document along the inline, row axis. and will be where the beginning of a sentence of text would start. You can switch them to display in the block direction for the language of your document by selecting . Then, and will be where the top of your first paragraph of text would start. If you change to one of the reverse values, they will lay themselves out from the end axis and in the reverse order to the way words are written in the language of your document. Then, and will change to the end of that axis — so to the location where your lines would wrap if working in rows, or at the end of your last paragraph of text in the block direction.\n\nWe don't have a or property available to us on the main axis as our items are treated as a group on that axis. However it is possible to do some individual alignment in order to separate an item or a group of items from others by using auto margins along with flexbox. A common pattern is a navigation bar where some key items are aligned to the right, with the main group on the left. You might think that this should be a use case for a property. However, consider the image below. As an example, take the following image with three items on one side and two on the other. If were to work on flex items and was set on item d, it would also change the alignment of item e that follows, which may or may not be what is intended. Instead, the d item can be pushed over using CSS margins. In this live example, item 4 is separated from the first three items by setting to , which consumes all the space it can in its axis. This is how centering a block with auto left and right works. Each side tries to take as much space as it can, and so the block is pushed into the middle. In this live example, the flex items are arranged in a row with the basic flex values, and the class , set on the fourth item, applies to that item. Try removing the class on the fourth item or adding the class to a different item to see how it works.\n\nTo create a gap between flex items, use the , , and properties. The property creates gaps between items in a row. The property creates gaps between flex lines when you have set to . The property is a shorthand that sets both and . The gaps between flex items or flex lines depend on the direction. If the property creates rows, the first value defines the gap between flex lines, and the second value defines the gap between items within each line. With columns (when is set to or ), the first value defines the gap between flex items, and the second value defines the gaps between flex lines."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/css-centering-using-flexbox",
        "document": "Centering of elements on a page, especially vertical centering, has been notoriously difficult to do in the past with CSS and we’ve had to resolve to a number of hacks. Thankfully though, Flexbox makes it all easier, and we can now instead focus our designing energy towards higher level problems.\n\nThe following is a very simple guide on centering elements using Flexbox.\n\nLet’s start with a that contains two paragraphs that we want to center horizontally on the same axis. It’s as easy as using the property with a value of center on the container:\n\nThe power of Flexbox really shines when we also need to center elements vertically. Here’s our example, but with the flex items also centered vertically:\n\nIf you just want specific flex items to be centered vertically, you can set on the items instead:\n\nIf you want to put an element at the dead center of a page, it can be a little bit more tricky because flex items will only center vertically according to the height of their container. That means that the container itself needs to be the same height as the page itself. That easy-enough to do using viewport units, where 100vh is 100% of the height of the viewport."
    },
    {
        "link": "https://stackoverflow.com/questions/28700805/aligning-elements-left-and-center-with-flexbox",
        "document": "EDIT: See Solo's answer below, it is the better solution.\n\nThe idea behind flexbox is to provide a framework for easily aligning elements with variable dimensions within a container. As such, it makes little sense to provide a layout where the width of one element is totally ignored. In essence, that is exactly what absolute positioning is for, as it takes the element out of the normal flow.\n\nAs far as I know, there is no nice way of doing this without using , so I would suggest using it... but If you REALLY don't want to, or can't use absolute positioning then I suppose you could use one of the following workarounds.\n\nIf you know the exact width of the \"Left\" div, then you could change to (left) and then align the \"Center\" div like this:\n\nIf you do not know the width, then you could duplicate \"Left\" on the right side, use , and hide the new right element: Just to be clear, this is really, really ugly... better to use absolute positioning than to duplicate content. :-)"
    },
    {
        "link": "https://css-tricks.com/centering-css-complete-guide",
        "document": "Centering things in CSS is the poster child of CSS complaining. Why does it have to be so hard? They jeer. I think the issue isn’t that it’s difficult to do, but in that there so many different ways of doing it, depending on the situation, it’s hard to know which to reach for.\n\nSo let’s make it a decision tree and hopefully make it easier.\n\nIs it inline or inline-* elements (like text or links)? You can center inline elements horizontally, within a block-level parent element, with just: This will work for inline, inline-block, inline-table, inline-flex, etc. You can center a block-level element by giving it and of (and it has a set , otherwise it would be full width and wouldn’t need centering). That’s often done with shorthand like this: This will work no matter what the width of the block level element you’re centering, or the parent. Note that you can’t an element to the center. There is a trick though. Is there more than one block level element? If you have two or more block-level elements that need to be centered horizontally in a row, chances are you’d be better served making them a different type. Here’s an example of making them and an example of flexbox: Unless you mean you have multiple block level elements stacked on top of each other, in which case the auto margin technique is still fine:\n\nIs it inline or inline-* elements (like text or links)? Sometimes inline / text elements can appear vertically centered, just because there is equal padding above and below them. If padding isn’t an option for some reason, and you’re trying to center some text that you know will not wrap, there is a trick were making the equal to the height will the text. Equal padding on top and bottom can give the centered effect for multiple lines of text too, but if that isn’t going to work, perhaps the element the text is in can be a table cell, either literally or made to behave like one with CSS. The property handles this, in this case, unlike what it normally does which is handle the alignment of elements aligned on a row. (More on that.) If something table-like is out, perhaps you could use flexbox? A single flex-child can be made to center in a flex-parent pretty easily. Remember that it’s only really relevant if the parent container has a fixed height (px, %, etc), which is why the container here has a height. If both of these techniques are out, you could employ the “ghost element” technique, in which a full-height pseudo-element is placed inside the container and the text is vertically aligned with that. Do you know the height of the element? It’s fairly common to not know the height in web page layout, for lots of reasons: if the width changes, text reflow can change the height. Variance in the styling of text can change the height. Variance in the amount of text can change the height. Elements with a fixed aspect ratio, like images, can change height when resized. Etc. But if you do know the height, you can center vertically like: .parent { position: relative; } .child { position: absolute; top: 50%; height: 100px; margin-top: -50px; /* account for padding and border if not using box-sizing: border-box; */ } Is the element of unknown height? It’s still possible to center it by nudging it up half of it’s height after bumping it down halfway: Do you care if the element stretches the height of the container? If you don’t, you just need the content inside vertically centered, using tables or CSS display to make elements into tables can do the trick. Can you use flexbox? No big surprise, this is a lot easier in flexbox. You can also get centering in flexbox using on the child element.\n\nYou can combine the techniques above in any fashion to get perfectly centered elements. But I find this generally falls into three camps: Is the element of fixed width and height? Using negative margins equal to half of that width and height, after you’ve absolutely positioned it at 50% / 50% will center it with great cross-browser support: Is the element of unknown width and height? If you don’t know the width or height, you can use the transform property and a negative translate of 50% in both directions (it is based on the current width/height of the element) to center: Can you use flexbox? To center in both directions with flexbox, you need to use two centering properties: Can you use grid? This is just a little trick (sent in by Lance Janssen) that will pretty much work for one element:"
    },
    {
        "link": "https://stackoverflow.com/questions/19026884/flexbox-center-horizontally-and-vertically",
        "document": "How to Center Elements Vertically and Horizontally in Flexbox\n\nBelow are two general centering solutions.\n\nOne for vertically-aligned flex items ( ) and the other for horizontally-aligned flex items ( ).\n\nIn both cases the height of the centered divs can be variable, undefined, unknown, whatever. The height of the centered divs doesn't matter.\n\nHere's the HTML for both:\n\nAdjust the rule from the code above.\n\nCentering the content of the flex items\n\nThe scope of a flex formatting context is limited to a parent-child relationship. Descendants of a flex container beyond the children do not participate in flex layout and will ignore flex properties. Essentially, flex properties are not inheritable beyond the children.\n\nHence, you will always need to apply or to a parent element in order to apply flex properties to the child.\n\nIn order to vertically and/or horizontally center text or other content contained in a flex item, make the item a (nested) flex container, and repeat the centering rules.\n\nMore details here: How to vertically align text inside a flexbox?\n\nAlternatively, you can apply to the content element of the flex item.\n\nLearn about flex margins here: Methods for Aligning Flex Items (see box#56).\n\nWhen a flex container has multiple lines (due to wrapping) the property will be necessary for cross-axis alignment.\n\nThe property aligns a flex container’s lines within the flex container when there is extra space in the cross-axis, similar to how aligns individual items within the main-axis. Note, this property has no effect on a single-line flex container.\n\nMore details here: How does flex-wrap work with align-self, align-items and align-content?\n\nFlexbox is supported by all major browsers, except IE < 10. Some recent browser versions, such as Safari 8 and IE10, require vendor prefixes. For a quick way to add prefixes use Autoprefixer. More details in this answer.\n\nFor an alternative centering solution using CSS table and positioning properties see this answer: https://stackoverflow.com/a/31977476/3597276"
    }
]