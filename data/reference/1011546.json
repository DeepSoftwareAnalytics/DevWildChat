[
    {
        "link": "https://asmirvine.com/gettingStartedVS2015/index.htm",
        "document": "This tutorial assumes that you are using the Seventh Edition of Assembly Language for x86 Processors. We show you how to set up Visual Studio 2015. Here's how to get started:\n\n Right-click here to download the code examples and required libraries for the book. Unzip the downloaded file into a directory named Irvine on Drive C. Next, Right-click here to download a zip file containing a 32-bit Visual Studio 2015 project. You can extract this file into any folder on your computer. Finally, Right-click here to download a zip file containing a 64-bit Visual Studio 2015 project. You can extract this file into any folder on your computer. Now you are ready to begin the tutorials listed below. Topics: The book's example programs in Chapters 1-13 have been successfully tested in both 32/64-bit Windows 7,8, and 10. On the other hand, many programs in Chapters 14-17 will not run in any Microsoft OS later than Windows 98, because they rely on direct access to hardware and system memory. You cannot directly run 16-bit applications in any 64-bit version of Windows. Found an error in this document? Please email the author. Except where noted, all instructions in this document apply equally to Visual Studio and Visual Studio Community Edition. When installing Visual Studio, be sure to select Visual C++ under the Programming Languages category. (If you forget to do this, you can always rerun the install file and modify the existing installation.) Visual Studio includes Microsoft Assembler (MASM) version 14. Look for the file named ml.exe in the \\vc\\bin folder of your Visual Studio installation directory, such as c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\vc\\bin.\n\n The Book's Example Programs At the top of this document, we explained how to download the file named Irvine.zip and extract it into the C:\\Irvine folder. Unless you have some objection to using that location, do not alter the path. (Note to lab administrators: you can designate c:\\Irvine directory as read-only.) If you plan to change the installation location, read our instructions relating to Creating a Project from Scratch. The folllowing files should appear in the c:\\Irvine directory: Include file used with the Irvine16 link library (16-bit applications) 16-bit link function library used with this book Include file used with the Irvine32 link library (32-bit applications) Small-sized include file containing MS-Windows definitions, used by Irvine32.inc A subdirectory named Examples will contain all the example programs shown in the book, source code for the book's 16-, 32-, and 64-bit libraries, and two sample projects for earlier versions of Visual Studio. You will only have to do these steps the first time you use Visual Studio. Add the Start Without Debugging command to the Debug menu It's very useful to run programs without having to debug them. To do that, you will want to add a new command to the Debug menu: Start Without Debugging. Here's how to do it:\n• Select Start Without Debugging in the right-hand list box. In fact, you can use the same sequence to customize any of the menus and toolbars in Visual Studio. Visual Studio supports multiple programming languages and application types. The C++ programming language configuration most closely matches that of assembly language programming, so we suggest the following steps:\n• Select Tools | Import and Export Settings from the menu\n• Select the \"No, just import...\" radio button\n• Select \"Visual C++\" from the Default Settings List and click the Next button\n• Click the Finish button, then click the Close button\n• Notice the tabs on the left and right sides of the Visual Studio workspace. Close the Server Explorer, Toolbox, and Properties tabs. Use the mouse to drag the Solution Explorer tool window to the right side of the workspace. You can also select other tabs at the bottom of this window, such as \"Class View\", \"Property Manager\", and \"Team Explorer\", and close them. They will not be used in the future. If you need to bring back the Solution Explorer window at any time in the future, select View from the menu, and locate Solution Explorer in the list of views. (This is an optional step.) Start Visual Studio, and select Options from the Tools menu. Select Text Editor, Select All Languages, and select Tabs. Optionally, you may want to select the Insert spaces radio button: Set the Tab Size and Indent Size to 5. Now you're ready to open and build your first 32-bit project. Visual Studio requires assembly language source files to belong to a project, which is a kind of container. A project holds configuration information such as the locations of the assembler, linker, and required libraries. A project has its own folder, and it holds the names and locations of all files belonging to it. If you have not already done so,Right-click here to download a zip file containing an up-to-date Visual Studio 2015 project that has been configured for assembly language. After downloading this file, un-zip it into your working directory. It contains a sample asm test file named AddTwo.asm. Do the following steps, in order:\n• To begin, open our sample Visual Studio project file by selecting File/Open/Project from the Visual Studio menu.\n• Navigate to your working folder where you unzipped our project file, and select the file named Project.sln.\n• Once the project has been opened, you will see the project name in the Solution Explorer window. You should also see an assembly language source file in the project named AddTwo.asm. Double-click the file name to open it in the editor. You should see the following program in the editor window: In the future, you can use this file as a starting point to create new programs by copying it and renaming the copy in the Solution Explorer window. Adding a File to a Project: If you ever need to add an .asm file to an open project, do the following: (1) Right-click the project name in the Visual Studio window, select Add, select Existing Item. (2) In the Add Existing Item dialog window, browse to the location of the file you want to add, select the filename, and click the Add button to close the dialog window. Now you will build (assemble and link) the sample program. Select Build Project from the Build menu. In the Output window for Visual Studio at the bottom of the screen, you should see messages similar to the following, indicating the build progress: If you do not see these messages, the project has probably not been modified since it was last built. No problem--just select Rebuild Project from the Build menu. Select Start without Debugging from the Debug menu. The following console window should appear, although your window will be larger than the one shown here: The \"Press any key to continue...\" message is automatically generated by Visual Studio. Congratulations, you have just run your first Assembly Language program! Press any key to close the Console window. Running a program from the Command Prompt: When you assembled and linked the project, a file named Project32_VS2015.exe was created inside the project's \\Debug folder. This file executes when you run the project. You can execute any EXE by double-clicking its name inside Windows Explorer, but it will often just flash on the screen and disappear. That is because Windows Explorer does not pause the display before closing the command window. On the other hand, you can open a Command prompt window, move to the Debug directory, and run Project32_VS2015.exe by typing \"Project32_VS2015\" (without the quotes). You will need to do some reading on Windows shell commands if you plan to use the command line. Any time you want to remove a source file from the Visual Studio window, right-click its filename and select Remove. The file will not be deleted from the file system. On the other hand, if you want to delete the file, select it and press the Del key. In this step, you set a breakpoint inside the sample program. Then you use the Visual Studio debugger to step through the program's execution one statement at a time.\n• Make sure the ASM source code file is open in the editor window.\n• To begin stepping through your program in Debug mode, press the F10 key.\n• A yellow arrow should appear next to the first program statement.The arrow indicates that the statement is next to be executed.\n• Press the F10 key (called Step Over) to execute the current statement. Continue pressing F10 until the program is about to execute the invoke statement.\n• A small black window icon should appear on your Windows status bar. Open it and look at the contents of the Command window. The window should be blank because this program does not display any output.\n• Press F10 one more time to end the program. If you want to display the CPU registers, do the following: Start debugging the program, then select Windows from the Debug menu. Select Registers from the drop-down list. The Registers window may appear at the bottom of the workspace, as a tab highlighted in yellow. Use the mouse to drag the window to the right side of the work area. Right click inside the Registers window and check the item Flags to enable the display of CPU status flags. You can interrupt a debugging session at any time by selecting Stop Debugging from the Debug menu. You can do the same by clicking the maroon-colored square button on the toolbar. To remove a breakpoint from the program, click on its red dot to make it disappear. If you set a breakpoint in a program, you can use the debugger to execute the program a full speed (more or less) until it reaches the breakpoint. At that point, the debugger drops into single-step mode.\n• In our sample program, click the mouse along the border to the left of the mov eax,5 statement. A large red dot should appear in the margin.\n• Select Start Debugging from the Debug menu. The program should run, and pause on the line with the breakpoint, showing the same Yellow arrow as before. You can remove a breakpoint by clicking its red dot with the mouse. Take a few minutes to experiment with the Debug menu commands. Set more breakpoints and run the program again. For the time being, you can use the F11 key to step through the program in the same way the F10 key did. Suppose you want to run another example program, or possibly create your own program. You can remove the existing assembly language file from the Solution Explorer window and insert a new .asm file into the project.\n• To remove a program from a project without deleting the file, right-click its name in the Solution Explorer window. In the context menu, select Remove. If you change your mind and decide to add it back to the project, right-click in the same window, select Add, select Existing item, and select the file you want to add. An easy way to add an assembly language source file to an open project is to drag its filename with the mouse from a Windows Explorer window onto the name of your project in the Solution Explorer window. The physical file will not be copied--the project only holds a reference to the file's location. Try this now:\n• Remove the AddTwo.asm file from your project.\n• Add a reference to the file Examples\\ch03\\AddTwoSum.asm to the project. One way to make a copy of an existing source code file is to use Windows Explorer to copy the file into your project directory. Then, right-click the project name in Solution Explorer, select Add, select Existing Item, and select the filename. In this tutorial, we will show you how to assemble, link, and run a sample 64-bit program. We assume you have already completed our tutorial entitled Building a 32-Bit Assembly Language Program. Do the following steps, in order:\n• Right-click here to download the Project64_VS2015.zip file and unzip it into your working directory.\n• In Visual Studio 2015, select Open Project from the File menu, navigate to the Project64_VS2015 folder, and select the file named Project.sln.\n• You are about to add an existing source code file to the project. To do that, right-click on Project in the Solution Explorer window, select Add, select Existing Item, navigate to the book's Examples\\ch03\\64 bit\" folder, select AddTwoSum_64.asm, and click the Add button to close the dialog window.\n• Open the AddTwoSum_64.asm file for editing by double-clicking its filename in the Solution Explorer window. You should see the following program in the editor window: (Notice that the program's entry point is the main procedure. If you wish to use a different name for your startup procedure in your own programs, you can modify this option by selecting Properties from the Project menu, and then selecting Linker / Advanced / Entry Point.) Select Build Project from the Build menu. You should see text written to Visual Studio's output window like the following: If you do not see these messages, the project has probably not been modified since it was last built. No problem--just select Rebuild Project from the Build menu. You use the same Visual Studio commands to run and debug 64-bit programs as you would for 32-bit programs. Only Chapters 14 through 17 require you to build 16-bit applications. Except for a few exceptions, which are noted in the book, your 16-bit applications will run under the 32-bit versions of Windows (XP, Vista, 7). But 16-bit applications will not run directly in any 64-bit version of Windows. If you plan to build 16-bit applications, you need to add two new commands to the Visual Studio Tools menu. To add a command, select External Tools from the Tools menu. The following dialog will appear, although many of the items in your list on the left side will be missing. The filename in the sample image (make16.bat) has been replaced by two files: Click the Add button and fill in the Title, Command, Arguments, and Initial directory fields as shown in the screen snapshot. If you click the buttons with arrows on the right side of the Arguments and Initial directory fields, a convenient list appears. You can select an item without having to worry about spelling: Click the Apply button to save the command. Click the Add button again, and create a new command named Run 16-bit ASM: Uncheck the \"Close on exit\" option and click the OK button to save the command and close the External Tools dialog. To test your new 16-bit commands, close any Visual Studio project that happens to be open. Then, select File | Open | File from the menu and choose the file named 16-bit.asm from the ch03 folder in the book's example programs. Select Build 16-bit ASM from the Tools menu. The following command window should appear, showing the successful execution of the assembler and linker, followed by a listing of all files related to this program: Press a key to close the window. Next, you will run the program. Select Run 16-bit ASM from the Tools menu. The following window will appear, although the contents of all registers except EAX will be different: You have completed the setup for building and running 16-bit assembly language programs. Visual Studio makes it possible (in 14 steps!) to create an Assembly Language project from scratch. You must create a Win32 Console application designed for C++ and modify various settings. Step 1: Select New from the File menu, then select Project. In the New Project window, select Win32 under Visual C++ in the left panel, and select Win32 Console Application in the middle panel. Give your project a suitable name (near the bottom of the window): Step 2: Click the OK button to continue. The Win32 Application Wizard window will appear. Select Application Settings, and then select the Empty project check box. Step 3: Click the Finish button to save the new project. Step 4: Open the Solution Explorer window and add an assembly language source file to your project. Here's how: Right-click the project name in the Visual Studio window, select Add, select Existing Item. In the Add Existing Item dialog window, browse to the location of the file you want to add, select the filename, and click the Add button to close the dialog window. Note: You may delete the Header Files, Resource Files, and Source Files folders if you wish. They are not necessary. Step 5: Next, right click your project name, select Build Dependencies, then select Build Customizations from the popup menu. When you see this window, select the check box next to masm and click the OK button to close the dialog. Step 6: You're almost ready to set the assembler properties. But first, you must help Visual Studio associate source code files having the .asm extension with the Microsoft Macro Assembler. To do this, right-click the .asm file in the Solution Explorer window, select Properties from the popup window, click on Item Type in the right-hand pane, scroll down the list, and select Microsoft Macro Assembler. Click OK to close the dialog window. Step 7: Right-click the project name in the Solution Explorer window and select Properties from the popup menu. Expand the entry under Configuration Properties. Then expand the entry named Microsoft Macro Assembler. This is what you should see: Step 8: Modify the Include Paths option so it equals \"C:\\Irvine\". This tells the assembler where to find files having a filename extension of \".inc\". Here is a sample: Step 9: Next, select the Listing File entry, also in the Microsoft Macro Assembler group. Modify the Assembled Code Listing File entry (shown below) so it contains $(ProjectName).lst. This uses a built-in variable to identify the name of the source input file, with a file extension of .lst. So, if your project were named MyProject, the listing file would be named MyProject.lst: Step 10: Find the Linker entry under Configuration Properties. Select the Input entry in the left panel and insert irvine32.lib; at the beginning of the Additional Dependencies entry. The irvine32.lib file is the link library file supplied with this book. The filenames must be separated by semicolons. Step 11: Select Linker under Configuration Properties, and then select General. The Additional Library Directories entry must contain c:\\Irvine so the linker can find the Irvine32.lib library file: Step 12: Select Linker under the Configuration Properties and select Debugging. Verify that the Generate Debug Info option is equal to Yes(/DEBUG) Step 13: Select Advanced under the Linker entry. Set the Image Has Safe Exception Handlers option to No. Step 14: Click the OK button to close the Property Pages window. Verify that your project has been created correctly by building and debugging the program as you did in an earlier tutorial. Return to top\n\n Open the project. From the menu, select Project, select Properties. In the list box, select Microsoft Macro Assembler, then select Listing File. Set the Assembled Code Listing file option to $(InputName).lst. Return to top When a text editor uses syntax highlighting, language keywords, strings, and other elements appear in different colors. Visual Studio highlights MASM reserved words and strings, as shown in the following example: This won't happen automatically, but you can create a syntax definition file named Usertype.dat that contains MASM keywords. Then when Visual Studio starts, it reads the syntax file and highlights MASM keywords. There is an interesting third party Visual Studio 2015 extension named Asm-Dude, featuring a rich set of syntax highlighting and code completion features. You can download it from GitHub. If you decide to use Visual Studio's built-in MASM syntax highlighter, here are the required steps to set it up: 1) Download the Usertype.dat file (enclosed in a ZIP file) given here to a folder in which you have read/write permissions. If you are using Windows 7, download to My Documents, or C:\\temp, or any folder that doesn't have security restrictions. 2) Copy Usertype.dat to the C:\\Program Files\\Microsoft Visual Studio 12.x\\Common7\\IDE folder. In 64-bit windows, Program Files will be named Program Files(x86). Windows will display a verification dialog before copying the file. 3) Open Visual Studio, select Options from the Tools menu, select Text Editor, and select File Extension. On the right side of the dialog (shown below), enter asm as the extension, select Microsoft Visual C++ from the Editor list, and click the Add button. Click the OK button to save your changes. Close Visual Studio and restart it. Open your project and display an ASM file. You should see syntax highlighting in the editor. There is a glitch in the highlighting--assembly language comment line starts start with a semicolon, which C++ doesn't recognize. But this is a simple workaround: add an extra // right after the semicolon, like this, which will cause the comments to appear in their usual green color: Return to top\n\n Many people like to use a Windows batch file to assemble and link programs. A batch file is a text file containing a sequence of commands that execute as if they had been typed at the command prompt. In fact, they are powerful enough to contain variables, loops, IF statements, and so on. The easiest way to run a batch file is to first open a Command window and then type the name of the batch file (along with arguments) at the command prompt. To open a Command window, you must execute a program named cmd.exe. We will make that easy for you. Step 1: containing the following items:\n• A shortcut to cmd.exe, which opens a Command window in the current directory Step 2: Extract the ZIP file into the c:\\Irvine\\Examples directory on your computer. containing the following items:Extract the ZIP file into the c:\\Irvine\\Examples directory on your computer. Download a ZIP file containing the following items:Extract the ZIP file into the c:\\Irvine\\Examples directory on your computer. Step 3: If you're running 64-bit Windows, open the file with a text editor (such as NotePad++) and find this line: And change it to the correct path for Visual Studio: Step 4: Do the following:\n• Copy asm32.bat to any directory on your system path. By doing this, you make it possible for MS-Windows to recognize asm32 as a valid command when typed at the MS-Windows command prompt.(If you want to find out which directories are on the current system path, type path and press Enter at the system command prompt.)\n• Double-click the shortcut to cmd.exe. A Command window should appear.\n• At the command prompt in this window, type asm32 and press Enter. This will execute the asm32 batch file and display help information. This file assembles, links, and debugs a single assembly language source file. Before using it, install Visual Studio 2013 in the following directory: C:\\Program Files\\Microsoft Visual Studio 12.0 Next, install the Irvine link libraires and include files in the following directory: C:\\Irvine Finally, copy this batch file to a location on your system path. We recommend the following directory: C:\\Program Files\\Microsoft Visual Studio 12.0\\VC\\bin Command-line syntax: asm32 [/H | /h | -H | -h] -- display this help information asm32 filelist -- assemble and link all files asm32 /D filelist -- assemble, link, and debug asm32 /C filelist -- assemble only <filelist> is a list of up to 5 filenames (without extensions), separated by spaces. The filenames are assumed to refer to files having .asm extensions. Command-line switches are case-sensitive. If you're running 64-bit Windows, open the file with a text editor (such as NotePad++) and find this line:And change it to the correct path for Visual Studio:Do the following: Type the following command to assemble and link a source file named main.asm: You should see the following messages: Linking main.obj to the Irvine32, Kernel32, and User32 libraries. In fact, several files were produced. If there were syntax errors in your program, you would see error messages generated by the assembler. Here is an example: You would then open the main.asm file with a text editor (such as Notepad), fix the errors, and run the asm32 batch file again. Although we used a file named main.asm in this example, the asm32.bat batch file will work for any assembly language file, regardless of the name. The only requirement is that your assembly language source file have a .asm filename extension. No doubt, you will want to assemble programs in various different disk folders, not just the batch_sample folder used in the foregoing example. All you need to do is copy the cmd.exe shortcut we gave you to your working directory, where your assembly language source files are located. When you double-click to run the shortcut, it will open a Command window in the current folder. In addition to assembling and linking, you can use the asm32.bat file to launch your program in the Visual Studio debugger. Try the following command: If the program assembles and links with no errors, your program should load in Visual Studio. The first time you do this with a new program, the source code will not appear. All you have to do is press the F10 key to begin debugging, and your program should appear with a yellow band across the first executable line: From here, you can step through the program. When you get to the call to WriteString, you can even trace into its code by pressing the F11 key (trace to). When you finish, close Visual Studio. From this time on, when you load the same program in the Visual Studio debugger, your source code will appear right away. Occasionally, you may want to assemble programs but not link them. This happens, for example, when you are creating a multimodule project and you want to assemble each asm file into an obj file separately before linking them into the final exe program. Or, you might be assembling a module to be inserted into a link library (like Irvine32.lib). To assemble a source file only, inser the /C option before the name of the file being assembled: You should see the following output: If you are interested in learning more about how batch file commands work, here are some reference links we found:\n• Microsoft TechNet article: Using Batch Files in Windows NT, by Troy Thompson Links go out of date quickly, but you can do a web search for Windows batch files and get plenty of hits. Return to top"
    },
    {
        "link": "https://csc.csudh.edu/mmccullough/asm/help",
        "document": "To display this page you need a browser with JavaScript support."
    },
    {
        "link": "https://github.com/miguelmota/x86-assembly-examples/blob/master/IrvineExamplesVS2012/Examples/Lib32/Irvine32_Library/Irvine32.asm",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/54386649/what-is-the-irvine32-library-and-why-do-we-use-it",
        "document": "Irvine32 library is collection of helpful functions, you may check online documentation for list of them and further details.\n\nI don't know why you use it.\n\nUsually one wants to use it to avoid writing the code providing that functionality himself. As the assembly code replicating some of the functionality may be tens or hundreds of lines of code (or even thousands for very complex functions), and having it to write every time may be cumbersome.\n\nAlso the API provided by Irvine32 functions is often simpler to use than similar API provided by OS services, so it may be often somewhat simpler to use Irvine32 instead of calling the OS services directly.\n\nIt also provides library functions that read and print integers (like ), which there's no system call for. So it's like a simplified C library . And returns a value in EAX, and success/fail in FLAGS (CF), while C library requires you to pass a pointer where the result will be stored1.\n\nIt's designed for beginners and simple programs, not for efficiency. For example, Irvine32 uses its own calling convention with no call-clobbered registers, so you can print stuff inside a loop without having to think of keeping your loop counter in a register that it's not going to step on.\n\nFootnote 1: Because scanf can do multiple conversions in one call, and because C can't return both an integer and a flag as two separate return values. Returning a value in a register with success/fail in CF is something only asm calling conventions can normally use. It's not unique to Irvine32, though. Mac OS system calls do that, for example."
    },
    {
        "link": "https://broman.dev/download/Assembly%20Language%20for%20x86%20Processors%207th%20Edition.pdf",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/74752404/largest-prime-factor-in-assembly",
        "document": "Regardless of anything you wrote in your mainloop, it does not have any exit and so it will run forever.\n\nYour print function is unreachable because of the infinite mainloop but also because of the in front of it.\n\nProbably in response to my answer to your previous question did you revert from using 32-bit registers in this question. You should not have done that because here the number 116,924,417 is too big for any of the 16-bit registers.\n\n Also did you notice the typo? In the code you use 116984417 and in the accompanying text you use 116924417.\n\nThis is my version of the search for the largest prime factor (first draft). I have tested it in DOSBox and it works fine:\n\nThe result fits in the 16-bit AX, so you can keep using the 16-bit print function.\n\nThis subroutine in context. You could make it a proc of course if you feel to."
    },
    {
        "link": "https://bookgoldmine.com/Blog/finding-prime-numbers-a-simple-assembly-language-example-using-nasm/2",
        "document": "Lately I've been really getting into low level programming. As much as I love .NET, coding no longer feels like man vs machine; it's now more like man vs framework. Now don't get me wrong, I'm haven't gone off the deep end yet, I am in no way considering (or advocating) leaving our modern programming comforts to go back to the ways of old. I do, however, believe that any good software engineer should know what's going on under the hood, and there really is no other way of doing that other than coding in assembly (well, I guess you could code all the instructions in binary...).\n\nFor all intents and purposes, this is my first assembly program. Yes, like most other Computer Science students, I took an assembly language course in college. Unfortunately, our professor didn't get us much further than the \"Hello World\" program, which hardly qualifies me as being experienced with assembly. Please keep in mind that this is my first stab at it, and if you see stuff that doesn't look quite right, then it very well may be my inexperience coming to light.\n\nI used NASM for this example. I feel that NASM is a bit cleaner and easier to understand than MASM. I really wish that there would be more NASM documentation, however. Most books and tutorials are written using MASM. Thankfully the two aren't too different. You can read the MASM stuff, do a few NASM tutorials to get a feel for the difference, and you'll be pretty much in sync. I also use a C skeleton program to call the assembly procedure. Yes, its \"cheating\" a bit, since I'm using C to get me into protected mode and to set up the segments and segment registers. Quite honestly though, that isn't the stuff I'm interested in, or at least not now. I use the DJGPP environment to use gcc as my c compiler.\n\nNote (4/20/2008): There's PLENTY of room for optimization here - this is a very slow algorithm. Still, I think it serves as a good starting point for assembly language as solving primes is an easy, but not trivial problem.\n\nNote 2: I had to move the code comments around because the way the code was laid out before was breaking IE (big surprise). If something looks out of place please let me know.\n\nIn case you don't remember, a prime number is a number that is divisible only by two numbers. Lots of people say that a prime number is any number divisible by 1 and itself. This is incorrect, since 1 is NOT a prime number (it is only divisible by 1 number, itself).\n\nThe simplest prime number program you can write is to have two loops: the outer loop (i) controls the prime number candidate, and the second loop (j) runs from 2 to i-1. Within the middle loop, we divide i by j; if we have no remainder, we know its not a prime, and break from the second loop. While simple, this algorithm is O(n²). Sure, we can double efficiency by eliminating even numbers (which, other then 2, will never be prime), but n²/2 is still O(n²).\n\nOur technique builds upon this little fact about composite (non prime) numbers: \n\n composite numbers are multiples of prime numbers. We can use this to our advantage because now we can check our prime number candidate against previously found prime numbers instead of ALL of the numbers from 1 to i. This puts us at O(nlogn), which is definately better than where we were before. I don't claim that my algorithm is the best, if you search the web you'll probably find more clever algorithms. If you decide to implement it in assembly, please send me a copy!"
    },
    {
        "link": "https://stackoverflow.com/questions/75761200/how-to-find-the-factors-of-a-number",
        "document": "You are given a non-negative integer n. Find the number of divisors of this number from the range [2, n-1].\n\n input: An integer non-negative number n not exceeding 1000.\n\n output: Integer non-negative number\n\nI tried the code a bit, but I can't always get the correct result.\n\nIs there something wrong with my code? Please point it out for me."
    },
    {
        "link": "https://quora.com/What-is-an-assembly-language-program-to-display-prime-numbers-between-two-intervals",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://ic.unicamp.br/~pannain/mc404/aulas/pdfs/Art%20Of%20Intel%20x86%20Assembly.pdf",
        "document": ""
    }
]