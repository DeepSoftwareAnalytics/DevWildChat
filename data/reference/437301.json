[
    {
        "link": "https://stackoverflow.com/questions/67402289/tampermonkey-best-practices-for-sharing",
        "document": "I have developed a userscript for blind users that reads screen on a card-game website playing audio files and also lets user play cards using keyboard instead of mouse.\n\nThe script is now working fine on my computer but I plan on keep updating it with new features.\n\nInitially this was designed for just 1 person, but word spread and more people from other countries are gonna use it.\n\nMy question is this: what is the recomended way to export the script into their computers? Is there any kind of \"userscript store\" for tampermonkey scripts where I can place the script for anyone to download and use?\n\nI have seen tutorials explaining how to download scripts other made, but none about sharing the ones you make with others.\n\nHow are new versions managed?\n\nI was thinking about copying the main code into my personal website and reference it as a required script so anytime I update it they get a new version, but wonder if this is the way to go."
    },
    {
        "link": "https://todaydouglearned.wordpress.com/2019/10/21/web-scraping-with-tampermonkey",
        "document": "I ran into a scenario today where a client needed data scraped from a website, but the website offers no API, cURL, or fetch capabilities as far as I can tell. The data can be presented in a datatable, but this would require some scripting to run through multiple pages of results, each row being dumped into an output file. Alternatively, the website offers a CSV export button. I like the idea of having pre-formatted, clean data exported from the site on a schedule – the other half of the battle is figuring out how to move that data into a warehouse. But in this blog post I’ll cover the scraping portion, and perhaps I’ll write again when I figure out the rest.\n\nAs I was examining a variety of scraping options I ran into this post over at Stack Overflow: https://stackoverflow.com/questions/36045745/automate-daily-csv-file-download-from-website-button-click\n\nThe author pivoted from their initial attempts to what they considered to be a more elegant solution – using a Chrome extension called Tampermonkey to run a script on a particular web page, and automating this process with a .bat file. I figured I’d give it a try.\n\nInstalling Tampermonkey was really easy. You visit their extension page in the Chrome Web Store, click the Add To Chrome button, and give the extension some permissions – poof, you’re in business. Once the extension has been added, you can hover over it and click on the “Create a new script…” option to get started. The interface is simple – they provide a template containing some comments/options you can configure and then a Javascript editor where you can drop in your code.\n\nYou can even run their built-in syntax checker to ensure that you don’t have any particularly stupid errors. My one big complaint about Tampermonkey is that there isn’t an error log built into it, but it’s not a big deal to just run Chrome’s developer tools while you’re building and testing to track any potential bugs.\n\nIn a nutshell, when you set a URL value in the @match field, Tampermonkey will execute your script every time Chrome opens that address. This works great for me – the report I want to scrape is always at a particular URL. I also needed to set some start and end dates before clicking a button, and of course Javascript provides some simple DOM methods (e.g. document.getElementById(), document.querySelector(), etc.) to manipulate input fields. Seven lines of code and I’m scraping the report every time my browser opens the URL.\n\nTo fully automate this process, I set up a .bat file that will run once a day:\n\nPiece of cake! The .bat file opens Chrome, directs it to the page where Tampermonkey will run, and then moves the downloaded file from my Downloads folder to a predetermined location. Then Chrome’s task gets killed, eliminating any warning messages."
    },
    {
        "link": "https://freecodecamp.org/news/customize-website-experience-with-tampermonkey",
        "document": "Tampermonkey is a browser extension that lets you add custom scripts to websites, making them work or look the way you want. It's like giving websites a makeover or adding new features.\n\nThese scripts are called userscripts and you can make tampermonkey run those scripts when you visit a particular site.\n\nHow to Use Tampermonkey to Customize the User Experience of a Website\n\nThere are a lot of use cases for Tampermonkey. The most obvious one is adding your own custom styling. You can add custom css for a specific site and change up the appearance as you want. But as you can run a script, you can also manipulate the DOM elements.\n\nI will list out of the things I have done to give you some ideas to what is possible.\n• Remove ads on sites that don't allow an ad blocker.\n• Declutter a site so that you can focus on the portion that you're interested in.\n\nToday you'll get a glimpse of what you can do with Tampermonkey by writing scripts that'll work on the freeCodeCamp /news site.\n\nFirst we will see how to declutter for a more focused reading experience. Then we will attach copy buttons on the code snippets. And lastly, we'll automatically generate table of contents that you can access with a toggle button.\n\nThe source code is available on GitHub.\n\nIt's worth pointing out that any changes your script makes will only be available in your browser. So as long as you don't deal with any sensetive data on that site, you can go as wild as you want.\n\nBut be aware that some sites may have some policy in regards to using third party JavaScript and take disciplinary action if you violate that policy.\n\nAs we will be modifying a website, basic knowledge of HTML, CSS, and JavaScript is required to go through this tutorial. Some experience with DOM manipulation would be great as well.\n\nIf you can effectively manipulate exisiting DOM elements, that will allow you to write Tampermonkey scripts to make yourself more productive on any website.\n• How to Create a New Userscript\n• How to Implement Reader View for freeCodeCamp /news Articles\n• How to Add Copy Buttons to the Code Snippets\n• How to Auto-generate a Table of Contents\n\nFor Chrome, the extension is available on the chrome web store.\n\nIt's also available for Firefox, which you can install from Firefox Add-Ons.\n\nFor other browsers, you can visit the Tampermonkey Home Page. Currently, Chrome, Firefox, Edge, Safari and Opera are officially supported. But the one from Chrome web store works fine on Chromium-based browsers like Brave.\n\nHow to Create a New Userscript\n\nThe easiest way to get started is using the option from the toolbar.\n\nYou will be presented with something like this:\n\nThe userscript header contains information about the script and other important parameters as well.\n\nFor now the relevant part is . This tells Tampermonkey for which sites to run the script. I have changed to match any article on the freeCodeCamp news site by using the \"*\" wildcard.\n\nTest it out by putting something simple as on the function. Then navigate to any article on freecodecamp.org/news.\n\nLets do something interesting next. This will be a brief introduction to DOM manipulation.\n\nBefore writing code in the userscript, it's better to write out your code in the dev console first. Then, when you have working code, you can just paste it in the Tampermonkey script. This is how we will write all the scripts in this article as well.\n\nAt the end of each freeCodeCamp article there is a button that says \"Tweet a thanks\". You can see the onclick function of the button by using the element picker from the dev tools and clicking on that button.\n\nClicking on that button will open a new window in Twitter with some default text for a tweet like the following:\n\nLet's say that you want to change up the default text to something like this:\n\nThe new text is static as you will chose it, but there are some variables here. You need to extract these 3 things:\n• The link of the article.\n• The Twitter username of the author.\n\nExtracting the link is as .\n\nNow how to extract the Twitter username?\n\nAt first glance, you may think the name after the author image is the answer. But that's actually the author's name (which is not necessarily unique) – it's not their Twitter username. So, where would you start looking for it?\n\nSince you can just click the button or inspect it, you already know the values of all these variables. So a good way to find the Twitter username would be just to search for it in the entire HTML document. As it is unique, there won't be many occurrences.\n\nOpen the dev tools and search for the Twitter username. You will find this tag:\n\nWhich is not surprising, as most publishing sites put information such article title, tags, description, and author information in the meta tags for SEO purposes. But most of the time you can just find what you are looking for by using the inspection tool.\n\nSo how do we extract the \"content\" property of this meta tag? Considering that an article is written by only one author, there will always be only one meta tag with name \"twitter:creator\". So you can just use the querySelector.\n\nNow on to extracting the title. If you have wandered around looking for the Twitter username, you will find that there is also a meta tag with name \"twitter:title\". But this time, the title is something that you can visually see and inspect. In most cases that's the easier way to go about it.\n\nIf you inspect on the article title above the cover image, you will see it's inside an h1 with the class \"post-full-title\". You can select this with the following:\n\nNow we have all the pieces we need to make the change. Inspect the target button and you will see it comes with an id of \"tweet-btn\". Now let's define our text.\n\nPutting it all together by changing the button's onclick, here's what you should have:\n\nBecause the text contains newline characters, we have to convert it url-encoded format.\n\nPaste the function inside the userscript and call it.\n\nNow reload the article page and click on the button to see if it's working as expected.\n\nIt is possible that it won't work as expected. Especially if the page takes a lot of time to load.\n\nWith this script, we are modifying a button which is a DOM element. But what if the element is not yet loaded? Then you will face unexpected results.\n\nTampermonkey provides the \"// @run-at\" header which you can specify to \"document-end\", but I've found that it still produces unexpected results sometimes.\n\nThe right way to mitigate it is to use the \"load\" event which is emitted when the whole page is loaded. So, we can refactor our driver function in the following way:\n\nYou can be extra careful and throw a delay as well:\n\nFrom now on, we will call all the functions in this main function which will run after the load event is fired.\n\nNote that you could have achieved the same result using a regular expression. In that case, you could extract the variables from the button's onclick which contains the URL with the full text.\n\nBut extracting information from the tags is better because if one day the default tweet text changes, you would need the change the regex as well.\n\nHow to Implement Reader View for freeCodeCamp /news Articles\n\nIf you make your browser fullscreen, the top navigation bar still stays at the top – which is not the best reading experience. So, we want to hide everything except the main article body.\n\nLet's start inspecting. You will see that, close to the \"main\" tag, there is an \"article\" tag with class \"post\". It contains all the text of the article including the heading and cover image.\n\nThis time, we will live-edit the CSS of the page. In Firefox, you can use the \"Style Editor\" tab in the dev tools. Click on the \"+\" icon and start testing out your CSS.\n\nAs of now, there is no built-in way to hide all elements except one (in our case article.post) using CSS. You might be tempted to use but it won't work because if any ancestor of the element is hidden, then all the descendents will be hidden as well.\n\nWe can accomplish our goal by using the \":has\" selector. will select all the ancestors of article.post so we can select the inverse of it with .\n\nBut there's still a problem: the descendent of article.post is also ignored by this selector. We can bring them back by chaining another not – . This will select everything that is not an article.post or a descendent of it.\n\nThis is the final CSS:\n\nAt the time of writing this, the \":has\" selector is experimental in Firefox. But you can go to and enable it by changing the value of to true.\n\nWhat if you want to use the navigation bar? It would be a shame to manually write the CSS and remove it when you don't want it, right? Especially now that you can do some scripting.\n\nWe will add a keyboard shortcut to the site that will make the browser fullscreen. We'll also apply that CSS and, upon exiting fullscreen, the CSS will be removed.\n\nOne of the exposed APIs of tampermonkey is for adding CSS. For this API to work, you need to include to the userscript header and also remove if you have that.\n\nTo create the shortcut, you will use a \"keydown\" event listener.\n\nWe are applying the CSS to the elements with the class \"declutter\". By toggling the \"declutter\" on the body we are essentially toggling the CSS on the entire page.\n\nNow, we just have to add the function call in our main function.\n\nReload the page and you will see that pressing \"F\" will toggle fullscreen and also remove everything except article body when in the fullscreen state.\n\nHow to Add Copy Buttons to the Code Snippets\n\nThe first step is always identifying the correct selector. If you inspect any code snippet you will see that they're contained in blocks and have a as a parent. So, to select all code snippets, the selector can be .\n\nNow the question is where to place the button? For easy access, we want the button to be on top of the code snippet and aligned to the right. You may think, placing it between the tag and tag could work – but that will interfere with the content of the code snippet which is not ideal.\n\nThe ideal solution is wrapping the tag with a div and creating the structure as .\n\nThe copying is done by the clipboard API using the method. We will also apply some styling and let the reader know their copying was successful by changing the button text from \"copy\" to \"copied\" for a small duration of time.\n\nThe function finds all code snippets and wraps them around a div, adds classes to them, and attaches a button which will copy the code content on click.\n\nCall the function just as before:\n\nHeres some practice, try adding click event listeners to all tags that are not inside a tag. On a mouse click on the block the contents of the block will be copied.\n\nHow to Auto-generate a Table of Contents\n\nfreeCodeCamp is a great place for reading in-depth articles. The articles are well organized as well. Most authors use proper headings and provide a table of contents. But the ToC is not accessible on every part of the page.\n\nIf you want to jump somewhere you will have to go back to the ToC then click on your section of interest. And then there are shorter articles that don't provide a ToC at all.\n\nThat's where we can introduce a userscript that will automatically generate a table of contents which is accessible anywhere on the page. This improves the user experience when reading longer articles.\n\nThe first thing you should know is how a ToC works. A section in the ToC is just an anchor tag with an href value of . Here \"some-section\" can be the name property of an anchor tag of the target location (for example, ) or if its used as an id on any element (for example, ).\n\nIf you inspect on any heading tag, you will see that the id attribute is present. This is automatically inserted when the article page is built. So we can use that for our ToC.\n\nThis is a ToC generator function modified from a StackOverflow answer.\n\nWe are using a regex to match h2, h3, h4, and h5 tags and creating an ordered list to display to ToC contents and returning the HTML of the whole ToC.\n\nNow we will add this HTML to a div that will contain the ToC. That div will be wrapped inside a dialog component so that we can use a modal to easily show/hide the ToC. We will also add a button that will be used as the toggle.\n\nFinally we will provide a driver function that will perform all the necessary tasks related to ToC generation. We will also add a keyboard shortcut to toggle the ToC.\n\nNow, just call the driver function in main.\n\nNow whenever, you read an article on freeCodeCamp, you can use the toggle button or a shortcut to view the ToC.\n\nFor practice, try making the toc sticky in the side (left/right). If you are on a wider screen, having the toc on the side will make the reading experience even better.\n\nYou should never run arbitrary JavaScript on any occasion. That goes for Tampermonkey scripts as well.\n\nI recommend going through every line of code before using a userscript. As you can already imagine, a userscript can drastically alter a website's appearance. If you are not careful enough, you might click a button that you expect to do one thing but it does something completely different, so always err on the side of caution.\n\nWhen writing userscripts, keep these things in mind:\n• Always test your code in the dev console first and take care of all edge cases.\n• Prefer creating/manipulating DOM elements using built-in functions instead of modifying the innerHTML.\n• If you find any unexpected behaviour, try throwing a long delay and checking if that resolves the issue.\n\nYou can read my other articles on my blog. Find me on Twitter LinkedIn."
    },
    {
        "link": "https://toolify.ai/ai-news/mastering-tampermonkey-userscripts-393107",
        "document": "\n• Understanding the Basics of Web Browsers and Web Pages 2.1. Three Main Components of a Web Page 2.2. Introduction to JavaScript 2.3. Browser Extensions and User Script Managers\n• Exploring User Scripts and Tampermonkey 3.1. Greasemonkey vs. Tampermonkey 3.2. Installing Tampermonkey 3.3. Finding and Installing User Scripts\n• Creating Your Own User Script 4.1. Identify the Website or Web Page 4.2. Determine Functionality and Enhancements 4.3. Using JavaScript to Modify Web Pages 4.4. Adding a Copy to Clipboard Button 4.5. Testing and Refining the User Script\n• Advanced Techniques and Customization 5.1. Modifying CSS and Styling 5.2. Using Event Listeners and DOM Manipulation\n• Sharing and Distributing User Scripts 6.1. Converting User Script to a .user.js File 6.2. Uploading User Scripts to Public Gists 6.3. Sharing User Scripts with Others\n\nArticle: How to Create and Use Tampermonkey User Scripts for Web Browsing Enhancement\n\nWeb browsing has become an indispensable part of our daily lives, offering a plethora of content and information. However, sometimes we wish to customize our browsing experience or add new functionalities to websites we frequently visit. This is where Tampermonkey user scripts come into play. In this article, we will explore how to create and use user scripts using Tampermonkey, a popular user script manager, to enhance our web browsing experience.\n\nUnderstanding the Basics of Web Browsers and Web Pages\n\nBefore diving into user scripts, it's essential to have a basic understanding of how web browsers and web pages are structured. A web page consists of three main components: HTML, CSS, and JavaScript. HTML provides the structure and content of the page, CSS adds the visual styling, and JavaScript adds interactivity and dynamic behavior to web pages.\n\nJavaScript is a widely used client-side scripting language that enhances the functionality of websites. All major web browsers have built-in JavaScript engines that execute the JavaScript code on the user's device. JavaScript is instrumental in making web pages more interactive and dynamic.\n\nWeb browsers also support browser extensions, small software programs that customize the browsing experience. These extensions can modify the user interface, block ads, manage cookies, and perform various other tasks on web pages. One intriguing Type of browser extension is a user script manager.\n\nUser script managers, like Greasemonkey and Tampermonkey, provide a user interface to manage user scripts. User scripts are programs, usually written in JavaScript, that modify web pages' functionality when they are loaded. They are executed by the user script manager and enhance the browsing experience by adding or modifying features on web pages.\n\nIn this section, we will Delve deeper into user scripts and understand how to utilize Tampermonkey to install and manage them effectively.\n\nGreasemonkey, initially developed for Firefox, was the first user script manager. However, Tampermonkey quickly gained popularity as a versatile and portable user script manager that works across various web browsers, including Firefox, Chrome, Microsoft Edge, Opera, and Safari. Tampermonkey offers a user-friendly interface and comprehensive features, making it the preferred choice for most users.\n\nTo begin using user scripts, we first need to install Tampermonkey on our web browser. Tampermonkey is available as a browser extension and can be installed by visiting the official Tampermonkey Website (tampermonkey.net). The website provides options for different web browsers, allowing You to install the extension that is compatible with your specific browser. Once installed, the Tampermonkey icon will appear in your browser's toolbar.\n\nOnce Tampermonkey is installed, you can start searching for user scripts to enhance your browsing experience. numerous user script repositories offer a wide range of scripts with various functionalities. Popular repositories include Greasy Fork, OpenUserJS, and GitHub.\n\nTo find and install user scripts, visit one of these repositories and browse through the available scripts. Each script will have a description, usage instructions, and often the source code. Before installing a script, it is advisable to review the source code to ensure its safety and compatibility with your browsing requirements.\n\nWhile installing existing user scripts can greatly enhance your browsing experience, you might also want to create your own user script to tailor it to your specific needs. In this section, we will walk through the process of creating a user script using Tampermonkey.\n• Identify the Website or Web Page: Determine the website or web page you want to modify or enhance. This can be any website that you frequently visit and wish to customize.\n• Determine Functionality and Enhancements: Outline the specific enhancements or modifications you want to make to the web page. This can include adding buttons, changing layouts, modifying colors, or automating certain actions.\n• Using JavaScript to Modify Web Pages: JavaScript allows us to Interact with the Document Object Model (DOM) of the web page, which represents the structure and elements of the page. By manipulating the DOM using JavaScript, we can add or modify elements, change styles, and perform various other actions.\n• Adding a Copy to Clipboard Button: As an example, let's consider adding a \"Copy to Clipboard\" button to a website's input/output section. This button would allow users to easily copy example inputs or outputs for testing purposes.\n• Testing and Refining the User Script: Once the user script is implemented, it is crucial to test it thoroughly on the target web page. This ensures that it functions as expected and does not interfere with the normal browsing experience. Continuously refine and optimize the script Based on user feedback and usage.\n\nOnce you are familiar with the basics of user scripts, you can explore more advanced techniques to further customize and enhance your browsing experience. This includes modifying CSS to change the visual styling of web pages, using event listeners and DOM manipulation to respond to user actions dynamically, and implementing additional functionality using JavaScript.\n\nIf you have created a user script that you believe others may find useful, you can share it with the community. Tampermonkey allows you to export your user script as a .user.js file, which can be uploaded to public code-sharing platforms like GitHub Gists. Sharing your user scripts allows others to benefit from your enhancements and modifications.\n\nTampermonkey and user scripts offer a powerful way to customize and enhance your web browsing experience. By understanding the basics of web browsers, web pages, and JavaScript, you can create user scripts that add functionality, modify layouts, and automate actions on your favorite websites. With the ability to share and distribute your user scripts, you can contribute to a thriving community of users who continuously improve and personalize their browsing experience."
    },
    {
        "link": "https://github.com/OpenUserJs/OpenUserJS.org/wiki/Userscript-beginners-HOWTO",
        "document": "These pages are a work in progress, but are intended to help users with no previous knowledge understand how to install and use userscripts on their computer.\n\nUserscripts (a.k.a User Scripts, User scripts, or ) are open-source licensed add-ons for web browsers that change web pages as they are loaded. They give users the power to make websites do what they want them to, rather than what was originally intended. This kind of script is usually file named on your computer as site it affects - what useful name you want to call it.user.js and always does end in .\n\nUseful tasks like improving layout, fixing bugs, automating common tasks and adding new functions can all be done by userscripts. More complicated userscripts can create mash-ups by combining information from different websites or embedding new data into a web page, e.g. to add reviews or price comparisons to a shopping website.\n\nLibrary scripts (a.k.a libs, libraries, or plain ) are reusable open-source licensed pieces of code that are shared for common uses in other Userscripts. This kind of script is usually file named what useful name you want to call it.js and always does not end in .\n\nIt requires the installation of an extension specific to your browser. These extensions help simplify management tasks like installing, removing and updating userscripts. The original userscript manager was Greasemonkey for the Firefox browser, so you may often hear userscripts referred to as Greasemonkey scripts. To find out how to get going, look at the options for your browser in the table below.\n\nYou should be aware of privacy issues when using userscripts, and should not install them from sources you do not trust. Userscripts can carry out actions on your behalf and can potentially access any information on a website you have access to, or that you enter into a website. They are often permitted to carry out functions that scripts on normal websites cannot, such as storing information on your computer and sharing it between website. Badly written userscripts could potentially also be exploited by malicious websites.\n\nTo reduce security risks, most userscript managers let you control which websites a userscript can access and whether it can operate on secure (https) websites or local files on your computer. On OpenUserJS, the source code of every userscript is available to be examined, so that other programmers can see whether or not there is any malicious code or dangerous bugs.\n\nFind your web browser in the table below, and follow the links to find out the options for making userscripts work on your platform:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll",
        "document": "A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a exception is thrown. Note that the HTML specification does not require attribute values to be valid CSS identifiers. If a or attribute value is not a valid CSS identifier, then you must escape it before using it in a selector, either by calling on the value, or using one of the techniques described in Escaping characters. See Escaping attribute values for an example.\n\nA non-live containing one object for each element that matches at least one of the specified selectors or an empty in case of no matches. The elements are in document order — that is, parents before children, earlier siblings before later siblings. Note: If the specified include a CSS pseudo-element, the returned list is always empty.\n\nTo obtain a of all of the elements in the document: This example returns a list of all elements within the document with a class of either or : Here, we get a list of elements whose immediate parent element is a with the class and which are located inside a container whose ID is . This example uses an attribute selector to return a list of the elements in the document that contain an attribute named : Here, an attribute selector is used to return a list of the list items contained within a list whose ID is which have a attribute whose value is :\n\nOnce the of matching elements is returned, you can examine it just like any array. If the array is empty (that is, its property is 0), then no matches were found. Otherwise, you can use standard array notation to access the contents of the list. You can use any common looping statement, such as:\n\nThis example shows that if an HTML document contains an which is not a valid CSS identifier, then we must escape the attribute value before using it in . In the following code, a element has an of , which is not a valid CSS identifier, because the character is not allowed in CSS identifiers. We also have three buttons, and a element for logging errors. All three buttons, when clicked, try to select the , and then set its background color to a random value.\n• The first button uses the value directly.\n• The second button escapes the value using .\n• The third button explicitly escapes the character using a backslash. Note that we must also escape the backslash itself, using another backslash, like: . Clicking the first button gives an error, while the second and third buttons work properly."
    },
    {
        "link": "https://w3schools.com/jsref/met_document_queryselectorall.asp",
        "document": "The method returns all elements that matches a CSS selector(s).\n\nThe method throws a SYNTAX_ERR exception if the selector(s) is invalid\n\nA NodeList is an array-like collection (list) of nodes.\n\nThe nodes in the list can be accessed by index. The index starts at 0.\n\nThe length Poperty returns the number of nodes in the list.\n\nAdd a background color to the first <p> element with class=\"example\": Try it Yourself »\n\nSet the background color of all elements with class=\"example\": Try it Yourself »\n\nIt is fully supported in all modern browsers:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll",
        "document": "The method returns a static (not live) representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.\n\nA string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a exception is thrown. Note that the HTML specification does not require attribute values to be valid CSS identifiers. If a or attribute value is not a valid CSS identifier, then you must escape it before using it in a selector, either by calling on the value, or using one of the techniques described in Escaping characters. See Escaping attribute values for an example. The selectors are applied to the entire document, not just the particular element on which is called. To restrict the selector to the element on which is called, include the pseudo-class at the start of the selector. See the selector scope example.\n\nA non-live containing one object for each descendant node that matches at least one of the specified selectors. The elements are in document order — that is, parents before children, earlier siblings before later siblings. Note: If the specified include a CSS pseudo-element, the returned list is always empty.\n\nTo obtain a of all of the elements contained within the element : This example returns a list of all elements within with a class of either or : Here, we get a list of the document's elements whose immediate parent element is a with the class and which are located inside a container whose ID is . This example uses an attribute selector to return a list of the elements in the document that contain an attribute named : Here, an attribute selector is used to return a list of the list items contained within a list whose ID is which have a attribute whose value is :\n\nOnce the of matching elements is returned, you can examine it just like any array. If the array is empty (that is, its property is ), then no matches were found. Otherwise, you can use standard array notation to access the contents of the list. You can use any common looping statement, such as: Note: is not a genuine array, that is to say it doesn't have array methods like , , , etc. To convert it into an array, try .\n\nThe method applies its selectors to the whole document: they are not scoped to the element on which the method is called. To scope the selectors, include the pseudo-class at the start of the selector string. In this example the HTML contains:\n• a element which the example uses for output. In the JavaScript, we first select the element. When the button is pressed, we call on , passing as the selector string. When the button is pressed, we again call on , but this time we pass as the selector string. When we press \"Select\", the selector selects all elements with an ID of that also have an ancestor with an ID of . Note that even though is outside the element, it is still used in selection, so our element is found. When we press \"Select with :scope\", the pseudo-class restricts the selector scope to , so is not used in selector matching, and we don't find the element."
    },
    {
        "link": "https://stackoverflow.com/questions/34001917/queryselectorall-with-multiple-conditions-in-javascript",
        "document": "Yes, because accepts full CSS selectors, and CSS has the concept of selector groups, which lets you specify more than one unrelated selector. For instance:\n\n...will return a list containing any element that is a or or .\n\nCSS also has the other concept: Restricting based on more criteria. You just combine multiple aspects of a selector. For instance:\n\n...will return a list of all elements that also (and) have the class , ignoring other elements.\n\nYou can, of course, combine them:\n\n...which means \"Include any element that also has the class, any element that also has the class, and any element that's also inside a .\""
    },
    {
        "link": "https://w3schools.com/jsref/met_element_queryselectorall.asp",
        "document": "Set the background color of the first element (in \"myDiv\") with class=\"example\":\n\nMore \"Try it Yourself\" examples below."
    }
]