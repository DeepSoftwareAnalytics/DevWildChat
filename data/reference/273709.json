[
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-montage-overview?application_version=4.27",
        "document": "An Animation montage (or montage for short) provides a way for you to control an animation asset directly through Blueprint or C++ code. With an Animation Montage, you can combine several different animation sequences into a single asset that you can break up into sections for playback either individually or in combination. You can also fire off events within a montage that can perform a variety of local or replicated tasks, such as playing sound cues or particle effects, changing player values like ammunition count, or even replicating root motion in networked games (provided root motion is enabled on the animation).\n\nThe following animation sequence of a character reloading a shotgun demonstrates a practical use case for montages:\n\nIn the video above, the character reaches for a clip, reloads, then returns to an idle pose. While this is perfectly fine to use as a reload animation, a montage provides much more control. For example, suppose you wanted the character to reload a variable amount of bullets instead always reloading the same amount. By splitting this animation up into three parts (grabbing a clip, reloading, and returning to idle) and combining those parts in a montage, you could section them off and selectively play any or all of those sections.\n\nBelow is an example montage used to handle the reloading of a shotgun. It is sectioned into three parts: Start, Loop, and End.\n\nWith Blueprint or C++, we can define that when the player presses a button, the animation begins playing at the Start section. The looping middle section, called Loop, immediately follows the Start section, and is set to repeat indefinitely within the montage. If the player releases the reload button, or they've filled the shotgun with bullets, the animation stops looping and can be set to jump to the End section to transition out of the animation, as seen in the video below.\n\nThe reload motion is a little bit faster than the baked sequence; however, you can adjust the play rate of our looping animation if you want. This gives you the ability to control when you want to stop the reloading motion and return the character to an idle pose. A similar example is when a character jumps in the air, loops an animation of being in the air or falling, then has a landing sequence. The amount of time in the air could vary, and we want to be able to move out of that portion of the montage at any point.\n\nSome additional uses for montages include:\n• You can play an animation from the Event Graph of an Animation Blueprint.\n• You can chain together a complex sequence of animations that you want to think of as a single animation.\n• You can loop only a specific portion of one or more animations, based on code or a Blueprint script.\n• You can manage event-based switching of multiple animations, based on code or a Blueprint script.\n• You can assign complex animation sequences to named slots, that can be switched between using code or Blueprint.\n• You can create precise switching between various AnimSequences, based on code or a Blueprint script.\n\nAfter creating a montage and opening it inside the Animation Editor, you can use the Asset Editor panel to define how your montage functions.\n\nThe Asset Editor panel of a montage is broken up into the following primary areas:\n\nThe Montage area of the panel contains the following:\n• Sections�Shows any sections that have been created within the montage.\n• Slot�Shows the animations that have been added to the current slot.\n• Group/Slot�Shows the currently selected Anim Group and slot.\n\nCreating sections provides a way to break a slot into multiple portions of animation. Each section has a name and location in the slot's timeline. Using the name, you can either jump directly to a particular section, or queue it up to play next when the current section is complete. In Blueprint, you can query the current section, jump to a section, or set the next section that will play.\n\nAnother way to think of sections is like songs in a music playlist, with slots being the album. You may be currently playing a section (song), but you can queue up or jump to another section within the slot (album) when the current section finishes, or just jump to the one you want to play right now.\n\nWithin a montage, a slot is a single track that can hold any number of animations. You can pick any name for a slot and then use that name to blend to the animations within. Going back to the reload montage example, we could have different versions of the reload for when characters are standing and when they are prone. In this case, we could place animations for each character pose in separate slots in our montage (below), and use the Slot node in the AnimGraph of our Animation Blueprint to determine which set of animations to use based on whether the character is standing or prone.\n\nAbove we use the DefaultProne slot for when our character is reloading while standing, and the Prone slot for when our character is reloading while prone.\n\nWhen multiple slots are assigned, you can click the Preview button for the slot you want to preview in the Editor.\n\nAnim Groups are a collection of slots, and for each group you can only play a single montage. If you want to play another montage at the same time, you can create a new group for it. Anim Groups and slots are centralized within the Anim Slot Manager tab, which you can open by clicking the AnimSlot Manager (magnifying glass) icon. You can use the dropdown menu to choose between valid slots. When creating a new montage, Slot nodes start out with a single Default Slot so that they are immediately functional.\n\nThe Sections area is where you can establish relationships between the sections you define in the Montage area.\n• Create Default / Clear�Click the Create Default button to create the default associations between all sections, stringing them together one after another. Click the Clear button to remove all associations.\n• Section Buttons�In this area, there is a button for each of the sections you define in the Montage area that are available for Section Association.\n• Section Association Tracks�In this area, you can visualize the relationships between animation sections by clicking Preview All Sections, or see individual tracks by clicking Preview for that track.\n\nSections can be set up to loop indefinitely, which is extremely useful for any action that you need to repeat. By associating the same section more than once in a Section Association Track, you cause that association track to run in a loop. This is shown by the section turning blue.\n\nAs an example, consider the animation in which a character is reloading a shotgun, one shell at a time. You can loop the section in which the character inserts a shell. Then by using Notifies, you can create Notify events in the Blueprint that increment the ammo count each time the animation plays through. Once that count reaches a set number (representing full ammo), you can then switch to an animation of the character closing the receiver and returning to an idle pose.\n\nThe Element Timing track takes information from the Montage and Notifies areas to help with the timing of different sections.\n\nEach node in the track is given a number denoting the trigger order of that object within the montage, and is color coded as follows:\n\nClicking the dropdown button on the Element Timing track presents you with options for showing/hiding additional information.\n\nAnimation Notifies (or Notifies for short) are a way to set up events to occur at specific points in the animation. For example, in the image above we have placed Notifies in our reload montage to play the sounds for grabbing a clip each time the reload animation plays. We also call a custom event called SpawnClip that we can use to spawn a mesh in the world that represents an ammo clip. Finally, we use a Branch event during the looping portion, to determine if we should exit the loop and move on to the End section of our animation where the character returns to an idle pose.\n\nYou can use Animation Curves to change the value of a Material parameter or a Morph Target while an animation is playing. The workflow requires that you designate the asset you want to modify (either a Material or a Morph Target), name the curve accordingly, and then adjust keyframe values across the duration of an animation.\n\nMontage assets can be played in different ways, based on what you need. If you want a skeletal mesh to play the montage automatically, you can assign it as the Anim to Play for the skeletal mesh. However, if you only want your montage to play when specific criteria are met, you can create a Blueprint script that calls for the montage, or sections within the montage, to play using the Play Montage node. You can also tell Montages to play through C++ code based on your defined criteria.\n\nWith Child Montages you can create animation variants without affecting gameplay, and without needing to recreate and maintain Notifies (or other details) across multiple assets. An example use case for this might be varying the auto-attack animations on units in a real-time strategy (RTS) game, or changing a character's idle animation in a role-playing game (RPG) based on what kind of weapons the character is holding. A child animation montage can be created from an existing animation montage by right-clicking on an animation montage in the Content Browser and selecting the Create Child Montage option.\n\nThe new montage will have the same name as the original, but with \"_Child\" added to the end.\n\nWhen opening a child montage, all elements within the montage will be grayed out, and text will appear at the top indicating that it is a child.\n\nYou can right-click the Anim Segment in the Slot Track and override it with a new animation.\n\nIn the Slot Track, it is possible to substitute any animation for any other, even if they are of different lengths. Unreal Engine will automatically adjust the play rate, start time, and end time of the replacement animation so that it uses the same portion and runs at the same time as the original. Animations that have not been changed from the parent will be shown in green, and animations that have been overridden will be shown in yellow.\n\nAbove we have replaced our attack animation with a different attack animation."
    },
    {
        "link": "https://forums.unrealengine.com/t/how-can-i-listen-for-an-anim-notify-event-on-c/343231",
        "document": "Hi. I’m trying to create AnimNotifies in code so I can drive notifies from a excel datatable. The code below seems to work, it adds a notify to notify track 0 in my UAnimMontage is visible in the editor and fires events in game. However if I click..."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-notifications-notifies?application_version=4.27",
        "document": "Different types of Notifies cause different events to be triggered. Camera effects, particle effects, sounds, for example can all be triggered at any point during an animation through the use of a Notify. Adding a Notify can be done by right-clicking on a Notify Track at the point in the animation you want the Notify to occur, and then choosing the type of Notify to add.\n\nSkeleton Notifies serve as a catch-all for anything an artist may want to do within a Animation Blueprint at a certain point in an animation. They are created by right-clicking on a Notify track, choosing Add Notify... then selecting New Notify... from the context menu.\n\nYou will be prompted to enter a name for the newly created Notify.\n\nAll of your created Skeleton Notifies will be displayed under the Skeleton Notifies menu.\n\nSelecting a Skeleton Notify will added it to the Notifies Track.\n\nSkeleton Notifies enable you to create a Notify Event of the same name in the Event Graph or Transition Graphs in the State Machine for a Skeletal Mesh's Animation Blueprint. To add your Skeleton Notify, right-click anywhere in your Event or Transition Graphs and select your Notify from the Add Anim Notify Event menu.\n\nAn Event node will be added to the Graph which will be executed when the Notify is called from the animation it resides in.\n\nThere are several native Notifies that can be added to control Clothing Simulation at a given point in an animation.\n• Pause Clothing Simulation will pause the simulation of clothing.\n• Resume Clothing Simulation is used to continue simulation of clothing after having been paused.\n• Reset Clothing Simulation will initialize clothing simulation back to its default state.\n\nBelow is an example video illustrating the use of Clothing Simulation Notifies.\n\nThe Play Particle Effect Notify spawns and plays a particle system at a given Socket location and at a specific point along an animation's timeline. This is useful for such effects as causing a cloud of dust to appear around a player's feet when they move, fire to spew from an exhaust pipe when the player uses a Nitro-Boost power-up, or other such effects.\n\nA Play Particle Effect Notify does not use the Animation Blueprint to control behavior. Instead, it uses a few properties defined in the Details panel to determine what Particle System is used and from what Socket the particles will originate.\n\nOnce set up, the associated Particle System will play, using the Socket location as the spawn point.\n\nThe Play Sound Notify provides a simple means to get your sound effects synced with animation. Much like Play Particle Effect, this Notify has properties that can be set in the Details panel, which allow for fast and easy sound effect setup. This is useful for such things as mechanical sounds when a robot moves, the rustle of cloth during character motion, and similar types of effects.\n\nThe Play Sound Notify uses the following properties defined in the Details panel to determine what sound effect is used and from what Socket or Bone the sound will originate.\n\nThe Reset Dynamics Notify can be used to restore any AnimDynamics that are applied to the Skeletal Mesh, back to their original state when called upon from the animation.\n\nYou can also change the color of this Notify in the Notifies Track window through the Details panel.\n\nAnim Notify States (Notify States) work much like the standard Notifies above. They have 3 distinct events: a begin, a tick, and an end. They start straightforward, firing at the moment the Notify begins and ends, and the Event Graphs in them fire off when their time comes up in the animation. The tick fires off every animation update until the end event is hit. The major difference between normal Notifies and Notify States is that Notify States are self-contained Blueprints.\n• You are guaranteed to start with a Notify Begin Event.\n• You are guaranteed to end with a Notify End Event.\n• You are guaranteed to have Notify Tick wrapped between a Notify Begin and a Notify End event.\n• The order between different Anim Notifies (normal or state) is not guaranteed. If you put two Anim Notify States next to each other, the first one is not guaranteed to end before the next one starts. Only use this for individual actions which do not rely on other Notifies.\n• Negative play rates are supported. Notify Begin is still called first regardless, and Notify End called last.\n\nThe Timed Particle Effect is very similar to the Play Particle Effect Notify in that they both allow you to play a Particle Effect at any given point in an animation, the difference however is that with a Timed Particle Effect, you are given the ability to define the length of the effect inside the Notify itself.\n\nIn the image below, a Timed Particle Effect is assigned to an animation. By left-clicking on the handle bar at the end (or at the start), you can drag to increase or decrease the length of the effect.\n\nThe properties of a Timed Particle Effect are the same as the Play Particle Effect Notify and can be adjusted inside the Details panel.\n\nAnimation Trails (or AnimTrail for short) are emitters that allow you to leave trails behind moving objects in a scene. They do this by sampling the positions of two sockets on a Skeletal Mesh each tick and stitching triangles between the sockets, down the length of the trail.\n\nBelow is an example of Animation Trails in use with an animated character.\n\nTo use an AnimTrail emitter you must:\n• Create a Particle System that contains an emitter with AnimTrail type data.\n• Create and add a Notify State of the Trail type to an animation.\n\nOnce you have added an AnimTrail, you can adjust its properties from the Details panel:\n\nThe above properties are required but the below are optional. They allow you to alter the width of the trail during the animation. You could also attach the trail to sockets that move as you need but this may not be ideal. This method is based on providing a width scale value. A width scale of 1.0 will keep the trail the same width, 0.0 will cause a trail of zero width.\n\nThe left image depicts From Centre which scales outwards from center, the middle image shows From First Socket which scales away from the first socket and the right image demonstrates From Second Socket which scales away from the second socket.\n\nThere are also some debug rendering options available:\n\nYou can also change the Notify Color to change the color used in the Notify Track window.\n\nCreating Custom Notify States (which are the same as the native Notify States but are custom Blueprints that you can provide any logic you need to occur during an animation) is done the same as adding a regular Notify.Before you can use a custom Notify State, you must first create a Blueprint Class of the Anim Notify State class. Once created, right-click in the Notify Track of an animation and select Add Notify State... then select your custom Notify.\n\nAn AnimNotifyState Blueprint Class called MyCustomNotifyState (above) was created so that we may select it as the Notify State to use in our animation. Once you have created your Anim Notify State Blueprint, you can open it and begin implementing the functions that determine how your Notify is used (below).\n\nIt is not necessary to implement every function, but at the bare minimum you should implement Received Notify Tick or both Received Notify Begin and Received Notify End. If implementing just Received Notify Begin or Received Notify End, you could simply use a standard Animation Notify.\n\nBelow is the Notify Begin override:\n\nBelow is the Notify End override:\n\nBelow is the Notify Tick override:\n\nBelow is a description of how each pin type is used in the override functions:\n\nIf you are looking for a way to keep related animations synchronized with one another, you can use Sync Groups. Animations can also be synchronized using Sync Markers within the related animations. To add a Sync Marker, right-click in the Notifies Track window and select Add Sync Marker...\n\n\n\nYou will be prompted to enter a name for your Sync Marker:\n\nAfter entering a Sync Marker Name, you will find it under the Existing Sync Markers sub-menu.\n\nYou can then add your created Sync Markers to other animations.\n\nSome elements to consider when working with Sync Markers:\n• Only animations within the same Sync Group are synced, and the Leader drives the positions of followers within the same Sync Group.\n• The play rate is always that of the master animation (play rate adjustment is currently not available).\n• Only markers common to all animations within a group are synced.\n• For example, if one animation is missing the \"Right Foot Down\" markers, those markers will be ignored for all animations when determining that frame's position.\n• Position is synced based on the relative position of the Leader with respect to its common markers.\n• For example, if the Leader is 25% of the way between its left and right foot markers, the followers will be synced to 25% of the way of their respective left and right markers.\n• Marker based sync is used automatically when animations in a Sync Group have enough matching markers. Otherwise, the original scaled length syncing behavior is used.\n• AnimMontages also support marker-based sync while blending out, so you can transition back to other animations seamlessly.\n• You can find the Sync Group setting Asset Details panel in the AnimMontage.\n\nIf you want to add new, rename or remove existing Skeleton Notifies you can do so from the Manage Notifies option when right-clicking on the Notifies track.\n\nThe Animation Notifies window will appear and display any Notifies you have created.\n\nRight-click to create new Notifies, or right-click on a Notify to rename or delete it.\n\nThrough the Manage Notifies window you can also see what animations are currently using the selected Notify from the Details panel by clicking the Scan button.\n\nAny animations that use the selected Notify will be displayed in the Details panel.\n\nIn addition to the properties that can be modified in the Anim Notify section of the Details panel for each type of Notify (when applicable), the properties below can also be used to define how your Notify is used.\n\nThe key difference between Queued and Branching Point settings for the Montage Tick Type is that Queued Notifies is asynchronous, while Branching Points are synchronous. What this means to the end user is that Branching Points come with a much higher degree of precision for where they will take place along the animation timeline.\n\nHigh precision is important when you need to jump to a specific animation at a very precise moment in time. While you could use a Queued Notify to do the same job, the asynchronous nature of Queued Notifies means that the event could be fired at the incorrect animation frame, which can lead to hitches and jumps in your motion."
    },
    {
        "link": "https://forums.unrealengine.com/t/animmontage-and-animnotify-callback-to-code/3405",
        "document": "After over a year in maintenance mode, the official Unreal Engine Wiki is now permanently offline. These resources now live on a new community-run Unreal Engine Community Wiki — https://unrealcommunity.wiki/! You will be able to find content from..."
    },
    {
        "link": "https://forums.unrealengine.com/t/is-it-possible-to-run-c-code-from-an-animation-notify/33871",
        "document": "I have a Combat component on my ACharacter which contains all the code to run sweep tests around a certain location to check for enemies, and I have my prototype punch animation in Persona, but the only Notifies I’m seeing are for particles and sound effects- is there a super-simple way I can call my Attack(FVector hitboxCenter) on a specific frame and pass it a specific bone/socket’s FVector as an argument? Is there any way to handle AnimNotify Event in Cpp Code\n\nYou can create a subclass of UAnimNotify (or UAnimNotifyState) in C++ and override Notify (or NotifyBegin/NotifyTick/NotifyEnd) to do whatever you want. For one-offs without a payload, you can also just expose the C++ method in your UAnimInstance subclass, and call it from a BP AnimNotify (Add Notify…New Notify, then implement that in the event graph to call your C++ function).\n\nSo that is just incredibly awesome, thank you!! I’m curious, for events that need to be frame-specific, like setting some bool bCanMove false for five very specific frames of an attack, would your recommendation be to use a single notify setting the bool to false during NotifyBegin and true on NotifyEnd, or to use two separate notifies to achieve the same effect?\n\nI’d use an AnimNotifyState, as it has an explicit duration that you can see in the animation editor and it ensures that the events are all generated correctly/in the proper order, I think even if you skip time into the middle of the range. For example, Fortnite uses exactly this pattern to tell the pawn owner during NotifyBegin and NotifyEnd, calling the same method with true in begin and false in end, to enable/disable some things.\n\nQuick follow-up if you don’t mind- is there any obvious reason why the following isn’t working? The notify is exposed in Persona, I can set it to a range of frames and edit the UPROPERTY-ed variables in the editor, but the debug message in the notify doesn’t fire on the designated frame:\n\nHeya, there are a couple of issues here. First, you’ve derived from the wrong class. UAnimNotify has only Notify, while UAnimNotifyState has NotifyBegin, NotifyTick, and NotifyEnd. Note: When you override methods, you can put the override keyword at the end of the function declaration, and the compiler will let you know if you have a typo or the base class got refactored (saying something like overriding a method that doesn’t exist in the parent class). This is really helpful in keeping your code working in the long term and helps catch issues like this quickly. Second, you’re using the names of the Blueprint events rather than the C++ methods that call those events. You’ll want to use NotifyBegin/NotifyEnd rather than Recieved_*.\n\nThat is a darn handy trick with override- you are absolutely on the money with the comment about using the blueprint events instead of the C++ function- taking a look at UAnimNotify.h cleared up a lot. It all works now, thank you so much!"
    },
    {
        "link": "https://forums.unrealengine.com/t/how-can-i-listen-for-an-anim-notify-event-on-c/343231",
        "document": "Hi. I’m trying to create AnimNotifies in code so I can drive notifies from a excel datatable. The code below seems to work, it adds a notify to notify track 0 in my UAnimMontage is visible in the editor and fires events in game. However if I click..."
    },
    {
        "link": "https://forums.unrealengine.com/t/animmontage-and-animnotify-callback-to-code/3405",
        "document": "After over a year in maintenance mode, the official Unreal Engine Wiki is now permanently offline. These resources now live on a new community-run Unreal Engine Community Wiki — https://unrealcommunity.wiki/! You will be able to find content from..."
    },
    {
        "link": "https://forums.unrealengine.com/t/can-i-add-animation-notify-using-only-c/414855",
        "document": "Hello. Unreal Developer !\n\n I can not speak English very well. hope you understand.\n\nMy question is,\n\n Can I use C ++ only to add “Notify” to the montage and receive events from this “Notify”?\n\nIf this is possible,\n\n Could you explain how to implement it?\n\nhttps://answers.unrealengine.com/questions/440602/custom-animnotify-in-c-uanimsequencebase-is-null.html https://answers.unrealengine.com/questions/231681/my-uanimnotify-custom-c-class-received-notify-wont.html https://answers.unrealengine.com/questions/441017/how-to-get-character-within-uanimnotify.html https://forums.unrealengine.com/development-discussion/c-gameplay-programming/45844-is-it-possible-to-run-c-code-from-an-animation-notify?74606-Is-it-possible-to-run-C-code-from-an-animation-Notify=This is what I found when I did a search, and I think it seems to be possible to implement it.\n\nI want to implement, \n\n\n\n I want to add “Notify” before playing montage and receive an event for “Notify” I added while montage is playing. \n\n\n\n i need to add “notify” dynamically depending on the data in the CSV file( or ini file ).\n\n\n\n \n\n\n\n To implement this,\n\n Create a new class derived from UAnimNotify or UAnimNotifyState,\n\n Also,\n\n Should I also create a new class derived from UAnimInstance?"
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-notifications-notifies?application_version=4.27",
        "document": "Different types of Notifies cause different events to be triggered. Camera effects, particle effects, sounds, for example can all be triggered at any point during an animation through the use of a Notify. Adding a Notify can be done by right-clicking on a Notify Track at the point in the animation you want the Notify to occur, and then choosing the type of Notify to add.\n\nSkeleton Notifies serve as a catch-all for anything an artist may want to do within a Animation Blueprint at a certain point in an animation. They are created by right-clicking on a Notify track, choosing Add Notify... then selecting New Notify... from the context menu.\n\nYou will be prompted to enter a name for the newly created Notify.\n\nAll of your created Skeleton Notifies will be displayed under the Skeleton Notifies menu.\n\nSelecting a Skeleton Notify will added it to the Notifies Track.\n\nSkeleton Notifies enable you to create a Notify Event of the same name in the Event Graph or Transition Graphs in the State Machine for a Skeletal Mesh's Animation Blueprint. To add your Skeleton Notify, right-click anywhere in your Event or Transition Graphs and select your Notify from the Add Anim Notify Event menu.\n\nAn Event node will be added to the Graph which will be executed when the Notify is called from the animation it resides in.\n\nThere are several native Notifies that can be added to control Clothing Simulation at a given point in an animation.\n• Pause Clothing Simulation will pause the simulation of clothing.\n• Resume Clothing Simulation is used to continue simulation of clothing after having been paused.\n• Reset Clothing Simulation will initialize clothing simulation back to its default state.\n\nBelow is an example video illustrating the use of Clothing Simulation Notifies.\n\nThe Play Particle Effect Notify spawns and plays a particle system at a given Socket location and at a specific point along an animation's timeline. This is useful for such effects as causing a cloud of dust to appear around a player's feet when they move, fire to spew from an exhaust pipe when the player uses a Nitro-Boost power-up, or other such effects.\n\nA Play Particle Effect Notify does not use the Animation Blueprint to control behavior. Instead, it uses a few properties defined in the Details panel to determine what Particle System is used and from what Socket the particles will originate.\n\nOnce set up, the associated Particle System will play, using the Socket location as the spawn point.\n\nThe Play Sound Notify provides a simple means to get your sound effects synced with animation. Much like Play Particle Effect, this Notify has properties that can be set in the Details panel, which allow for fast and easy sound effect setup. This is useful for such things as mechanical sounds when a robot moves, the rustle of cloth during character motion, and similar types of effects.\n\nThe Play Sound Notify uses the following properties defined in the Details panel to determine what sound effect is used and from what Socket or Bone the sound will originate.\n\nThe Reset Dynamics Notify can be used to restore any AnimDynamics that are applied to the Skeletal Mesh, back to their original state when called upon from the animation.\n\nYou can also change the color of this Notify in the Notifies Track window through the Details panel.\n\nAnim Notify States (Notify States) work much like the standard Notifies above. They have 3 distinct events: a begin, a tick, and an end. They start straightforward, firing at the moment the Notify begins and ends, and the Event Graphs in them fire off when their time comes up in the animation. The tick fires off every animation update until the end event is hit. The major difference between normal Notifies and Notify States is that Notify States are self-contained Blueprints.\n• You are guaranteed to start with a Notify Begin Event.\n• You are guaranteed to end with a Notify End Event.\n• You are guaranteed to have Notify Tick wrapped between a Notify Begin and a Notify End event.\n• The order between different Anim Notifies (normal or state) is not guaranteed. If you put two Anim Notify States next to each other, the first one is not guaranteed to end before the next one starts. Only use this for individual actions which do not rely on other Notifies.\n• Negative play rates are supported. Notify Begin is still called first regardless, and Notify End called last.\n\nThe Timed Particle Effect is very similar to the Play Particle Effect Notify in that they both allow you to play a Particle Effect at any given point in an animation, the difference however is that with a Timed Particle Effect, you are given the ability to define the length of the effect inside the Notify itself.\n\nIn the image below, a Timed Particle Effect is assigned to an animation. By left-clicking on the handle bar at the end (or at the start), you can drag to increase or decrease the length of the effect.\n\nThe properties of a Timed Particle Effect are the same as the Play Particle Effect Notify and can be adjusted inside the Details panel.\n\nAnimation Trails (or AnimTrail for short) are emitters that allow you to leave trails behind moving objects in a scene. They do this by sampling the positions of two sockets on a Skeletal Mesh each tick and stitching triangles between the sockets, down the length of the trail.\n\nBelow is an example of Animation Trails in use with an animated character.\n\nTo use an AnimTrail emitter you must:\n• Create a Particle System that contains an emitter with AnimTrail type data.\n• Create and add a Notify State of the Trail type to an animation.\n\nOnce you have added an AnimTrail, you can adjust its properties from the Details panel:\n\nThe above properties are required but the below are optional. They allow you to alter the width of the trail during the animation. You could also attach the trail to sockets that move as you need but this may not be ideal. This method is based on providing a width scale value. A width scale of 1.0 will keep the trail the same width, 0.0 will cause a trail of zero width.\n\nThe left image depicts From Centre which scales outwards from center, the middle image shows From First Socket which scales away from the first socket and the right image demonstrates From Second Socket which scales away from the second socket.\n\nThere are also some debug rendering options available:\n\nYou can also change the Notify Color to change the color used in the Notify Track window.\n\nCreating Custom Notify States (which are the same as the native Notify States but are custom Blueprints that you can provide any logic you need to occur during an animation) is done the same as adding a regular Notify.Before you can use a custom Notify State, you must first create a Blueprint Class of the Anim Notify State class. Once created, right-click in the Notify Track of an animation and select Add Notify State... then select your custom Notify.\n\nAn AnimNotifyState Blueprint Class called MyCustomNotifyState (above) was created so that we may select it as the Notify State to use in our animation. Once you have created your Anim Notify State Blueprint, you can open it and begin implementing the functions that determine how your Notify is used (below).\n\nIt is not necessary to implement every function, but at the bare minimum you should implement Received Notify Tick or both Received Notify Begin and Received Notify End. If implementing just Received Notify Begin or Received Notify End, you could simply use a standard Animation Notify.\n\nBelow is the Notify Begin override:\n\nBelow is the Notify End override:\n\nBelow is the Notify Tick override:\n\nBelow is a description of how each pin type is used in the override functions:\n\nIf you are looking for a way to keep related animations synchronized with one another, you can use Sync Groups. Animations can also be synchronized using Sync Markers within the related animations. To add a Sync Marker, right-click in the Notifies Track window and select Add Sync Marker...\n\n\n\nYou will be prompted to enter a name for your Sync Marker:\n\nAfter entering a Sync Marker Name, you will find it under the Existing Sync Markers sub-menu.\n\nYou can then add your created Sync Markers to other animations.\n\nSome elements to consider when working with Sync Markers:\n• Only animations within the same Sync Group are synced, and the Leader drives the positions of followers within the same Sync Group.\n• The play rate is always that of the master animation (play rate adjustment is currently not available).\n• Only markers common to all animations within a group are synced.\n• For example, if one animation is missing the \"Right Foot Down\" markers, those markers will be ignored for all animations when determining that frame's position.\n• Position is synced based on the relative position of the Leader with respect to its common markers.\n• For example, if the Leader is 25% of the way between its left and right foot markers, the followers will be synced to 25% of the way of their respective left and right markers.\n• Marker based sync is used automatically when animations in a Sync Group have enough matching markers. Otherwise, the original scaled length syncing behavior is used.\n• AnimMontages also support marker-based sync while blending out, so you can transition back to other animations seamlessly.\n• You can find the Sync Group setting Asset Details panel in the AnimMontage.\n\nIf you want to add new, rename or remove existing Skeleton Notifies you can do so from the Manage Notifies option when right-clicking on the Notifies track.\n\nThe Animation Notifies window will appear and display any Notifies you have created.\n\nRight-click to create new Notifies, or right-click on a Notify to rename or delete it.\n\nThrough the Manage Notifies window you can also see what animations are currently using the selected Notify from the Details panel by clicking the Scan button.\n\nAny animations that use the selected Notify will be displayed in the Details panel.\n\nIn addition to the properties that can be modified in the Anim Notify section of the Details panel for each type of Notify (when applicable), the properties below can also be used to define how your Notify is used.\n\nThe key difference between Queued and Branching Point settings for the Montage Tick Type is that Queued Notifies is asynchronous, while Branching Points are synchronous. What this means to the end user is that Branching Points come with a much higher degree of precision for where they will take place along the animation timeline.\n\nHigh precision is important when you need to jump to a specific animation at a very precise moment in time. While you could use a Queued Notify to do the same job, the asynchronous nature of Queued Notifies means that the event could be fired at the incorrect animation frame, which can lead to hitches and jumps in your motion."
    },
    {
        "link": "https://qa.fmod.com/t/how-do-i-access-an-event-from-an-animation-montage-notify-in-c/18322",
        "document": "I’m really new to FMOD and integrating it with UE4 so I apologize if this is a naive question. I have an enemy which has a “charging up” audio and I would like to fade that out if the enemy dies or is interrupted. Right now, I have some events which are triggered on an animation montage using FMODAnimNotifyPlay.\n\nHow would I go about accessing these FMOD events from C++? Is the event owned by the Animation Blueprint, Animation Instance, the Skeletal Mesh, etc…? Should I try to access them through blueprints instead?"
    }
]