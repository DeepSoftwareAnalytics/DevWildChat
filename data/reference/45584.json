[
    {
        "link": "https://taglib.org",
        "document": ""
    },
    {
        "link": "https://github.com/mono/taglib-sharp",
        "document": "(aka Taglib-sharp) is a .NET platform-independent library (tested on Windows/Linux) for reading and writing metadata in media files, including video, audio, and photo formats. This is a convenient one-stop-shop to present or tag all your media collection, regardless of which format/container these might use. You can read/write the standard or more common tags/properties of a media, or you can also create and retrieve your own custom tags.\n\nIt supports the following formats (by file-extensions):\n\nIt is API stable, with only API additions (not changes or removals) occuring in the 2.0 series.\n\nTagLib# is available on GitHub: https://github.com/mono/taglib-sharp\n• Git: Get the source at git://github.com/mono/taglib-sharp.git\n\nTagLib# is available on NuGet: https://www.nuget.org/packages/TagLibSharp\n\nYou can open it in Visual Studio by using TaglibSharp.sln\n• In Visual Studio, go to menu: Tools > Extensions and Updates > Online (In Visual Studio 2019, use Extensions > Manage Extensions)\n• Open from menu: Test > Windows > Test Explorer (In Visual Studio 2019, use Test > Test Explorer)\n• You can run your tests from this panel (not using the \"Start\" button)\n• You can debug your tests from this panel:\n• Double click on a test. Set some breakpoints in the test in the editor panel.\n• right-click on the same test, select \"Debug Selected tests\".\n• Make the \"debug\" project the Startup project (Right-click on the project, select: \"Set as StartUp Project\")\n• Set some breakpoints and hit the \"Start\" button\n\nNon exhaustive list of projects that use TagLib#:\n\nAnd you, what do you use TagLib# for? Reply here\n\nTagLib# is free/open source software, released under the LGPL. We welcome contributions! Please try to match our coding style, and include unit tests with any patches. Patches can be submitted by issuing a Pull Request (Git)."
    },
    {
        "link": "https://stackoverflow.com/questions/57218600/how-to-use-taglib-to-get-information-from-a-audio-file",
        "document": "At the first when I want to create a file with I get following error.\n\nThe path of the file is a string, why does this error appear ?"
    },
    {
        "link": "https://stackoverflow.com/questions/18250281/reading-writing-metadata-of-audio-video-files",
        "document": "I need some help in reading/writing meta data inforamation of audio/vido file. I have searched alot but not find anything thing helpful. Taglib sharp is an open source library that provide help in reading/writing metadata. Using tag lib i'm able to edit some of values but not all like.\n\nbut i'm unable to edit following properties like Author url, producers etc. How i edit these properties ??"
    },
    {
        "link": "https://taglib.org/api",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/476101/extracting-album-art-from-mp3-files-using-taglib-is-there-a-better-way-write-t",
        "document": "The following code extracts the album art from an MP3 file and displays it in a PictureBox.\n\nIs there a better way to write this code?"
    },
    {
        "link": "https://stackoverflow.com/questions/57218600/how-to-use-taglib-to-get-information-from-a-audio-file",
        "document": "At the first when I want to create a file with I get following error.\n\nThe path of the file is a string, why does this error appear ?"
    },
    {
        "link": "https://developeronfire.com/blog/tagging-audio-files-with-taglib",
        "document": "Tagging audio files with meta-information about the person(s) responsible for the creation of the audio content, the genre of said content, and other bits of data is useful for consumers of content. It embeds information into the audio files themselves to be used by software and users. End-user applications such as ITunes, Windows Media Player, and podcast players use this information to provide display of information for selection and during playback of media. Typically, a podcast player will gather more information from a feed and what is embedded in the file is of less importance, but it still matters, especially with embedding images. In addition, if someone has downloaded your media file directly and has just the file in isolation, ID3 tagging reveals information about the source and the content in the likes of Windows Explorer, the OS X Spotlight Search and Finder, and media playing software. If you are producing audio content and want the consumers of your product/art/propaganda to have an optimal experience, you should be including ID3 tags in the media files.\n\nThere are several tools you can use to manually add ID3 tags to your audio files. Often, though, particularly with podcasting, the information going into the tags is needed elsewhere. For instance, it will probably show up in a blog post or on some other web-exposed property. Instead of keying and/or copying and pasting this information to multiple places, we can do better.\n\nCustom software that writes tags is a better answer. I am currently working on a product that automates the entire workflow for publishing media content, including podcasts. A part of this process involves writing ID3 tags to the resulting audio files and uploading them to podcast hosts. The tagging portion is very straightforward, because I’m using TagLib# (or if you prefer taglib-sharp) an open-source library with a straightforward API that makes reading and writing tags a snap from C#.\n\nThere is nothing more required to write tags to a file than to install the package from Nuget\n\nand to create a function such as the following:\n\nThat’s all there is to it. ID3 tags to your audio files straight from your software. This code takes an input audio file as a byte array and an image to embed as a byte array and input to include in the tags and returns a byte array with the content of the tagged file. It may require some customization to fit other needs, but this is what I am using for my automation. Happy coding!"
    },
    {
        "link": "https://github.com/mono/taglib-sharp",
        "document": "(aka Taglib-sharp) is a .NET platform-independent library (tested on Windows/Linux) for reading and writing metadata in media files, including video, audio, and photo formats. This is a convenient one-stop-shop to present or tag all your media collection, regardless of which format/container these might use. You can read/write the standard or more common tags/properties of a media, or you can also create and retrieve your own custom tags.\n\nIt supports the following formats (by file-extensions):\n\nIt is API stable, with only API additions (not changes or removals) occuring in the 2.0 series.\n\nTagLib# is available on GitHub: https://github.com/mono/taglib-sharp\n• Git: Get the source at git://github.com/mono/taglib-sharp.git\n\nTagLib# is available on NuGet: https://www.nuget.org/packages/TagLibSharp\n\nYou can open it in Visual Studio by using TaglibSharp.sln\n• In Visual Studio, go to menu: Tools > Extensions and Updates > Online (In Visual Studio 2019, use Extensions > Manage Extensions)\n• Open from menu: Test > Windows > Test Explorer (In Visual Studio 2019, use Test > Test Explorer)\n• You can run your tests from this panel (not using the \"Start\" button)\n• You can debug your tests from this panel:\n• Double click on a test. Set some breakpoints in the test in the editor panel.\n• right-click on the same test, select \"Debug Selected tests\".\n• Make the \"debug\" project the Startup project (Right-click on the project, select: \"Set as StartUp Project\")\n• Set some breakpoints and hit the \"Start\" button\n\nNon exhaustive list of projects that use TagLib#:\n\nAnd you, what do you use TagLib# for? Reply here\n\nTagLib# is free/open source software, released under the LGPL. We welcome contributions! Please try to match our coding style, and include unit tests with any patches. Patches can be submitted by issuing a Pull Request (Git)."
    },
    {
        "link": "https://github.com/mono/taglib-sharp/issues/131",
        "document": "Hi! I have been using this library in my code for a while and never really noticed this little detail before.\n\nThing is i have set up a program that copys a cetrain mp3 file from one directory into anotherone:\n\n\n\nI then use this new mp3 to edit with the library to apply some tags:\n\nACTUALL ISSUE:\n\n Then comes the issue, when i try to apply a cover to it:\n\nNow the thing is ImagePath is the path to the image on the left wich is the one supposed to be used as a cover but when i open the mp3 i get the image on the right wich is totally a different one, is there any step im missing or something im doing that i shouldnt? Maybe its autodetected by amozon or some music app and being auto changed?\n\n *also the original mp3 does not contain a cover when i open it so i dont really know where its taking the picture from if not from ImagePath\n\n *mind you this is inside a foreach statement BUT im debugging it with only 1 object in my list so undiscarded objects shouldnt really be a problem.\n\n *Also it does not enter the catch so it will always be pic.Data = TagLib.ByteVector.FromPath(ImagePath);"
    }
]