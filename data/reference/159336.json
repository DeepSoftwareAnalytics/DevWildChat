[
    {
        "link": "https://developer.valvesoftware.com/wiki/Entities_in_Depth",
        "document": "Entities provide the level of interaction found in all levels, from the car that explodes to the Antlion Guard throwing you across the room it all originates with entities. Entities provide all the interaction a level designer can create and also provide a lot of functionality. Entities are essential to level design, period.\n\nWhat they are\n\nAn entity is a collection of special information that informs the game how to behave and how particular objects behave. All the information that defines what entities can do is hidden away within the game's code; therefore, for Hammer to know and use the possibilities that exist, a reference file is written. The reference file is know as an FGD, and is important to note because it lists all the information about entities, as far as Hammer is concerned. The FGD does not create the entities, it just tells Hammer how to use the code. Level designers work with two types of entities, point and brush. Each categorizes a different set of properties and effects which are then created and used in different manners; however, they both work exactly the same.\n\n\n\n Further information on using entities can be found here. An entity consists of several different groups of information: Properties, Flags, and I/O. All go together to make one entity and often work in conjunction (for example, inputs can change properties, flags can alter a properties effect, and properties can define what triggers an output). The three groups of information are detailed below.\n\nProperties are the variables of an entity, they can contain any value or a set range of values. The properties detail information such as name, color, or rendering effects. There is a property and a key value. The key value stores the information about the property, whether the Color property is blue, red or green. Hammer will put detailed names and descriptions of the effects up on the screen with the feature \"Smart Edit\", turning it off removes the user friendly names and help and reveals the properties and values as seen in game.\n\nFlags represent simple boolean conditions of an entity. They often change the fundamental behavior of an entity. Often overlooked, useful conditions are often found in here such as \"Motion disable\" for a prop_physics to stop it moving at all. Flags often set default states or dis/allow a certain behavior. Flags themselves cannot be changed in game, but sometimes the properties they affect can be.\n\nInputs and outputs are how information is passed between entities. Inputs and outputs are directly linked to each other: when an output condition is met, it is triggered and that information is then passed into an input. That input will then cause certain changes within the receiving entity. When a player walks into a trigger_once, the output is fired. This can then trigger any input on another entity making a light go on or an alarm sound. Simple at first glance, the I/O system is incredibly powerful and can even go so far as reproducing simple games such as breakout. Looking at an entity's available inputs can tell you what you can change, but often a bit of experimentation is need to figure out when each output is fired.\n\nProper use of entities is one of the topics that goes far beyond the scope of any one article, but as a simple introduction to entities here’s a few of the common tasks explained in depth in their own tutorials.\n\nThere are a lot of examples to be found in the folder that demonstrate how to use several of the simpler and even more complex entities and plenty more tutorials on the site; however, your own ingenuity and understanding are the true keys to unlocking their power.\n\nEntities are the core of interesting level design and allow great flexibility and power, time should be spent familiarizing yourself with them and their effects. Often creating small maps for the single purpose of playing with an entity’s effects is a great way to spend some time, as understanding what entities can and can't do can save hours of grief when trying to implement effects in full blown levels."
    },
    {
        "link": "https://developer.valvesoftware.com/wiki/Triggers",
        "document": "Triggers are entities which respond to the presence of other entities. Trigger brushes can be created by mappers, while programmers can make anything into a trigger.\n\nNote: Having the keyvalue in a trigger can actually rotate it in the game. This could be useful, but also annoying if it is left over and not removed.\n\nThere are many types of brush entity trigger that can be created from within Hammer; see Special:PrefixIndex/trigger for the complete list. The most common general-purpose ones are , , , and . They all share these properties and outputs:\n\nAll entities can respond to collisions with other entities (see ). If you want touches without actual collisions, then you have two options:\n\nTo make a new brush trigger, which tests using the shape of its brush model instead of a bounding box, inherit from and call ."
    },
    {
        "link": "https://documentation.help/Valve-Hammer-Editor-3.4/Creating_Entities.htm",
        "document": "Entities give life to your level. They are the monsters, doors, switches and lights that turn your static architecture into an interactive environment. Careful use of entities is critical to creating an interesting, unique and fun level for others to play.\n\nUnlike solids, entities are not created within the editor. Most users will simply choose from a pre-existing set of entities provided with Half-Life. Once you have selected the appropriate entity, the editor gives you control over its placement and other properties.\n\nThere are two types of entities: point-based and brush-based.\n\nPoint-based entities exist only at a certain exact point. Examples include lights, monsters, and player start points. (Monsters do have an area, but it is defined by the game code and is not modifiable from within the map.) Some point type entities are just that: points. For example, the env_beam entity, which controls Half-Life's beam effects, uses two info_target entities as targets and the beam of light runs between these two points.\n\nBrush-based entities are entities that depend on either a brush for their physical presence (like doors, trains, and other moving entities) or an \"area\" (like triggers, which require an activation field).\n• Press Shift+E to go into entity mode..\n• From the New Objects toolbar, select the entity you want. Note: the entity list in the New Objects dialog is for point-based entities only. For information on brush-based entities, please refer to the following section.\n• Click in a 2D window, then position the entity cursor with the mouse.\n\n\n\nBrush-based entity placement\n\n Brush-based entities are a bit more complicated than point-based entities, but should not pose any difficulties once you know their basics.\n• Create the object where you would like it. You can use as many brushes as you'd like when building a brush-based entity.\n• Press the Ctrl+T hotkey, which will turn the selected objects into a brush based entity and...\n• ...bring up the entity properties dialog. Select the appropriate entity from the Class list box. Once the entity type is selected, you can modify the entity properties as needed. Tip: Bring up the entity properties for a brush-based entity the same way you do for a point-based entity: select it and press Alt-Enter.\n• You will notice that brush-based entities appear as a different color in the 2D windows, typically purple."
    },
    {
        "link": "https://reddit.com/r/hammer/comments/c7ch11/editing_entites_and_triggers",
        "document": "How do i edit triggers and entities and such, i always press ctrl + t and it resets it to a func_detail.\n\nPeople say its alt + enter, but thats a completely different pop up window, and i have no idea how to work that one!\n\nTried Googling it but only alt + enter is the result i'm getting."
    },
    {
        "link": "https://documentation.help/Valve-Hammer-Editor-3.4/documentation.pdf",
        "document": ""
    },
    {
        "link": "http://interlopers.net/tutorials/1850/the-ravanholm-traps",
        "document": "Forums quiet? We're more active in our Discord server."
    },
    {
        "link": "https://youtube.com/playlist?list=PL8tDEPB6h7LmleyhpHStBaYT-EsTIg7eS",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/hammer/comments/4tce41/how_would_i_go_about_creating_a_car_trap_like_the",
        "document": "This subreddit is meant for everything around the mapping tool Hammer. Here you can post questions, get feedback, help others, or simply brag about your work!"
    },
    {
        "link": "https://developer.valvesoftware.com/wiki/Suspended_Object_Trap",
        "document": "This tutorial explains the process of creating a trap consisting of a heavy object suspended by a dynamic rope which can then be triggered to fall with devastating effect. This is an advanced tutorial covering entity creation, parenting, I/O configuration, keyframe editing, and flag manipulation. Overall completion time is estimated at 45 minutes to 1 hour.\n\nThe Source Hammer editor does not allow a user to directly attach an object to a rope. However, there is a workaround. The basic idea involves parenting the end of a rope to a secondary entity. This secondary entity is then used in conjunction with a few physics entities that measure the movement of the secondary entity and translate its movements back to the rope. We'll also be creating a trigger that will break the rope when it gets damaged causing the previously suspended object to crash down! Sounds complicated but don't worry, it'll make sense once it's done. Let's get started!\n• a brush with the same or as-near-as-possible dimensions of the / , tied (Ctrl+T) to a entity.\n\nPlace the following entities or brushes:\n• Place the to where you'd like to anchor the rope.\n• Place the / to where you'd like the object to hang from.\n• This tutorial will be using a prop instead of a physbox, but both can be used.\n• Place the to where you'd like to anchor the rope to the or .\n• Hint: Just inside the surface of the prop or brush works best.\n• Remember your physics: once in game, the center of gravity of the prop and the anchor point will interact and your prop will reach a balance point accordingly.\n• Place the in the exact same location of the and drag the lengthconstraint's small white circle to the center of the .\n• Place the in the exact same location of the .\n• Place the off to the side for easy access.\n• Place the in the same location as the / .\n\nNaming your entities is arbitrary - you can choose what names you want. For the purposes of this tutorial the nomenclature is:\n\nAs you can see, each entity has the prefix dynamicXX, followed by a descriptive suffix. This is a useful naming system when you have several dynamic systems and need to keep them separate.\n\nHere comes the tricky part where most errors are made. Set the keyvalues of the entities like this:\n\nTime to change the func_button. First, texture it in inivs and then change its keyvalues like this:\n\nNow change its flags like this:\n\n...and finally give it the following outputs:"
    },
    {
        "link": "https://combineoverwiki.net/wiki/Developer_commentary/Half-Life_2",
        "document": "The following is a list of all of the developer commentary from Half-Life 2's commentary mode."
    }
]