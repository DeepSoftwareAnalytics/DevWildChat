[
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Mathf.PerlinNoise.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nfloat Value between 0.0 and 1.0. (Return value might be slightly below 0.0 or beyond 1.0.)\n\nPerlin noise is a pseudo-random pattern of float values generated across a 2D plane (although the technique does generalise to three or more dimensions, this is not implemented in Unity). The noise does not contain a completely random value at each point but rather consists of \"waves\" whose values gradually increase and decrease across the pattern. The noise can be used as the basis for texture effects but also for animation, generating terrain heightmaps and many other things.\n\n\n\n \n\n Perlin noise sampled in the range 0..10 (the greyscale values represent values from 0..1)\n\n\n\nAny point in the plane can be sampled by passing the appropriate X and Y coordinates. The same coordinates will always return the same sample value but the plane is essentially infinite so it is easy to avoid repetition by choosing a random area to sample from.\n\nNote: The return value can be slightly lower than 0.0f or slightly higher than 1.0f. If you need the range of return values to be between 0.0 and 1.0, clamp the return values."
    },
    {
        "link": "https://discussions.unity.com/t/terrain-and-perlin-noise/940657",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/mathf-perlinnoise-method/513429",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/2020.1/Documentation/ScriptReference/Mathf.PerlinNoise.html",
        "document": "Did you find this page useful? Please give it a rating:\n\nIs something described here not working as you expect it to? It might be a Known Issue . Please check with the Issue Tracker at\n\nWhat kind of problem would you like to report?\n\nThanks for letting us know! This page has been marked for review based on your feedback. If you have time, you can provide more information to help us fix the problem faster. Provide more information\n\nYou've told us this page needs code samples. If you'd like to help us further, you could provide a code sample, or tell us about what kind of code sample you'd like to see:\n\nYou've told us there are code samples on this page which don't work. If you know how to fix it, or have something better we could use instead, please let us know:\n\nYou've told us there is information missing from this page. Please tell us more about what's missing:\n\nYou've told us there is incorrect information on this page. If you know what we should change to make it correct, please tell us:\n\nYou've told us this page has unclear or confusing information. Please tell us more about what you found unclear or confusing, or let us know how we could make it clearer:\n\nYou've told us there is a spelling or grammar error on this page. Please tell us what's wrong:\n\nYou've told us this page has a problem. Please tell us more about what's wrong:"
    },
    {
        "link": "https://medium.com/@lemapp09/beginning-game-development-terrain-with-perlin-noise-6471c6401151",
        "document": "Procedural Content Generation (PCG) is a fascinating technique in game development used to create content algorithmically, rather than manually. One of the most common applications of PCG is generating terrain in video games. By using algorithms to generate terrain, developers can create large, immersive worlds without needing to manually design every detail. In this article, we’ll explore how to generate procedural terrain using Perlin Noise, an algorithm commonly used to generate smooth, natural-looking variations in terrain.\n\nPerlin Noise is a gradient noise function invented by Ken Perlin in 1983, widely used in computer graphics to generate natural-looking textures and terrain. Unlike random noise, which produces jagged and harsh transitions, Perlin noise generates smooth, continuous waves. This makes it perfect for creating terrain features like hills, valleys, and mountains.\n\nIn game development, Perlin noise is commonly used to generate heightmaps, which define the height of the terrain at each point on a grid.\n\nTo create terrain in Unity using Perlin noise, we can manipulate the `Terrain` component’s heightmap. Unity’s `Terrain` object allows us to easily modify the height of the terrain at any given point, and by using Perlin noise, we can create more natural-looking features.\n\nBelow, we’ll walk through a simple example of how to generate procedural terrain using Perlin noise in Unity.\n\nStep 1: Setting Up the Terrain in Unity\n\nFirst, let’s set up a basic Unity scene with a terrain:\n\n1. Create a Terrain:\n\n — In Unity, right-click in the Hierarchy window, then choose `3D Object` > `Terrain`.\n\n \n\n2. Add a new C# Script:\n\n — Right-click in the `Assets` folder and create a new C# script named `TerrainGenerator`.\n\n — Attach the script to the Terrain object.\n\nNow, let’s dive into the code. The core concept of the terrain generation will involve using Perlin noise to manipulate the heightmap of the terrain.\n\n- `width` and `height`: These variables define the size of the terrain. You can adjust them to create larger or smaller terrain grids.\n\n- `scale`: This controls the frequency of the Perlin noise. A higher scale value will result in smaller, more frequent features (like hills), while a lower scale will produce larger, smoother terrain features.\n\n- `heightMultiplier`: This controls the height of the terrain. A higher multiplier will result in more extreme elevation changes.\n\n- `offsetX` and `offsetY`: These offsets allow you to shift the Perlin noise horizontally and vertically, giving you different terrain features each time you run the program.\n\n- `Mathf.PerlinNoise`: This Unity function generates a smooth noise value between 0 and 1 based on the given x and y coordinates.\n\n- `terrain.terrainData.SetHeights`: This function updates the terrain’s heightmap with the generated noise values.\n\n1. Attach the Script to Terrain: \n\n — Drag the `TerrainGenerator` script onto the `Terrain` GameObject in the Hierarchy.\n\n \n\n2. Adjust the Parameters:\n\n — In the Inspector, you can tweak the values for width, height, scale, and heightMultiplier to adjust the appearance of the terrain. The default values should work fine for a simple terrain.\n\n3. Play the Scene: \n\n — Click `Play` in Unity, and you should see the procedural terrain generated based on Perlin noise. The terrain will have smooth, natural-looking elevation changes.\n\nWhile the basic Perlin noise terrain generation works, there are several ways to improve the visual quality of the terrain. You can:\n\n1. Add Multiple Layers of Perlin Noise: By layering multiple noise functions with different frequencies (octaves), you can create more detailed, multi-scale terrain.\n\n \n\n2. Add Terrain Textures: Apply different textures (e.g., grass, rock, snow) to the terrain based on height or slope. Unity’s Terrain component allows you to assign different textures based on terrain height and slope angle.\n\n3. Use Erosion Techniques: You can simulate erosion algorithms to create more natural terrain shapes by simulating water flow or wind erosion over time.\n\nProcedural content generation, especially terrain generation using Perlin noise, is a powerful technique that allows game developers to create vast, unique, and detailed environments with minimal manual effort. By understanding and implementing algorithms like Perlin noise, developers can create natural-looking landscapes that enhance player immersion and game performance.\n\nPerlin noise serves as a foundational tool for creating terrain, but by combining it with other techniques like multi-layer noise, erosion algorithms, and texture mapping, you can create truly dynamic worlds. Whether you’re building a small indie game or a massive open-world game, procedural terrain generation will be an invaluable tool in your development toolkit.\n\nHappy coding, and may your virtual worlds be ever-changing and expansive!\n\nHere are some resources to deepen your understanding of procedural terrain generation, Perlin noise, and related concepts in Unity:\n\n1. Unity Documentation — Terrain: \n\n [Unity Terrain Component Documentation](https://docs.unity3d.com/Manual/terrain-HowDoI.html) \n\n Learn about Unity’s built-in Terrain component and how to use it to generate landscapes and add textures.\n\n2. Perlin Noise Explained: \n\n [Ken Perlin’s Website](http://www.noisemachine.com/talk1/) \n\n Learn more about Ken Perlin’s original implementation of Perlin Noise and its application in graphics.\n\n3. Procedural Generation with Unity: \n\n [Procedural Generation in Unity — A Beginner’s Guide](https://www.gamasutra.com/blogs/WilliamElder/20170926/306548/Procedural_Generation_in_Unity_A_Beginners_Guide.php) \n\n A guide to generating procedural content in Unity, covering various techniques including terrain and level generation.\n\n4. Introduction to Perlin Noise in C#: \n\n [Perlin Noise in C#](https://www.redblobgames.com/maps/terrain-from-noise/) \n\n An in-depth tutorial on how to implement Perlin noise in C# for terrain generation and other use cases.\n\n5. Noise Functions and Terrain Generation: \n\n [Understanding Noise Functions for Terrain Generation](https://www.gamasutra.com/blogs/MorganMcGuire/20150902/261636/Procedural_Terrain_Generation_Using_Noise.php) \n\n An exploration of noise functions, including Perlin noise, simplex noise, and others, and their applications in terrain generation."
    },
    {
        "link": "https://discussions.unity.com/t/procedural-terrain-generation-with-perlin-noise/518682",
        "document": ""
    },
    {
        "link": "https://medium.com/geekculture/how-to-use-math-noises-for-procedural-generation-in-unity-c-44902a21d8e",
        "document": "Download the complement Unity assets (additional noises, parameters & a little shader for level curves) 📦\n\nWhen you develop games, you usually have two ways of designing your levels: you either do everything by hand and apply your game designer skills to this specific context; or you write up a machine, or a set of rules, that can be fed some initial start values and then automatically create a (valid) level for you.\n\nThis automated approach is called procedural generation: it relies on various algorithms and/or static data that are combined into a chain of building stages. For example, you can generate the 3d landscape, the assets…"
    },
    {
        "link": "https://reddit.com/r/Unity3D/comments/u0kyeq/finished_my_very_first_tutorial_its_on_optimized",
        "document": "A subreddit for News, Help, Resources, and Conversation regarding Unity, the game engine. Do NOT use your phone to take screenshots. Video and photos of computer screens taken by phones are NOT allowed. All screenshots must be grabbed from the computer itself."
    },
    {
        "link": "https://discussions.unity.com/t/perlin-noise-mesh/523822",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/proceduralgeneration/comments/mi004i/coursestutorials_on_procedural_generation_in_3d",
        "document": "I'm a complete beginner to Unity and C# and procedural generation. I hope I'm asking this in the right subreddit. I've begun learning game development with C# and Unity, but I've hit a bit of a roadblock.\n\nEvery single terrain generation system / video / course I found uses regular heightmaps. While these can be useful and amazing, I would like to learn how to create something that can generate a realistic landscape that allows for noise in a dimension that ISN'T height.\n\nThe only example of this I managed to find is minecraft, which can create outcrops, arches and caves in its terrain.\n\nI did find a course which explained how one could achieve this using Perlin noise and Fractional Brownian Noise, but the course was outdated and also didn't explain how one would manipulate the noise in any way, meaning the results only created random, chaotic noise, instead of semi-natural structures such as mountains (which would be bottom-heavy) or caves (which would have a worm-like structure).\n\nI hope I've managed to describe what I need well-enough. Once again, I am just a beginner looking for what I want to learn. Paid courses are fine too.\n\nThank you all in advance!"
    }
]