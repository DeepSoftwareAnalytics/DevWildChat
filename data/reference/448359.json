[
    {
        "link": "https://developer.android.com/develop/ui/views/layout/cardview",
        "document": "Apps often need to display data in similarly styled containers, such as containers that hold information about the items in a list. The system provides the API for you to show information in cards that have a consistent look across the platform. For example, cards have a default elevation above their containing view group, so the system draws shadows below them. Cards provide a way to contain a group of views while providing a consistent style for the container.\n\nThe widget is part of AndroidX. To use it in your project, add the following dependency to your app module's file:\n\nTo use a , add it to your layout file. Use it as a view group to contain other views. In the following example, the contains an and a few to display some information to the user:\n\nThe previous code snippet produces something similar to the following, assuming you use the same Android logo image:\n\nThe card in this example is drawn to the screen with a default elevation, which causes the system to draw a shadow under it. You can provide a custom elevation for a card with the attribute. A card at a higher elevation has a more pronounced shadow, and a card at a lower elevation has a lighter shadow. uses real elevation and dynamic shadows on Android 5.0 (API level 21) and higher.\n\nUse these properties to customize the appearance of the widget:\n• To set the corner radius in your layouts, use the attribute.\n• To set the corner radius in your code, use the method.\n• To set the background color of a card, use the attribute."
    },
    {
        "link": "https://geeksforgeeks.org/cardview-in-android-with-example",
        "document": "CardView is a new widget in Android that can be used to display any sort of data by providing a rounded corner layout along with a specific elevation. CardView is the view that can display views on top of each other. The main usage of CardView is that it helps to give a rich feel and look to the UI design. This widget can be easily seen in many different Android Apps. CardView can be used for creating items in listview or inside RecyclerView. The best part about CardView is that it extends Framelayout and it can be displayed on all platforms of Android. Now we will see the simple example of CardView implementation.\n\nFor creating a new Android Studio Project. Click on File>New>New Project.\n\nStep 2: Add the necessary dependency in build.gradle file.\n\nNavigate to Gradle Scripts then to build.gradle(module level) and then add below dependency to it.\n\nAfter adding this dependency you will get to see a popup option at top right corner which mentions “Sync now“. Click on that option to sync your project.\n\nStep 3: Add google repository in the settings.gradle.kts file of the application project if by default it is not there\n\nNavigate to app > res > layout > activity_main.xml then add the following code to create a new CardView widget.\n\n\n\nOutput: Now run your app on your emulator or device you will get to see the output."
    },
    {
        "link": "https://medium.com/@erim.gokaslan/cardview-in-android-studio-a-comprehensive-guide-95147809ab68",
        "document": "As an Software developer, creating visually appealing and user-friendly interfaces is crucial. CardView is a versatile component that helps achieve modern and elegant UI designs. This guide will walk you through everything you need to know about CardView, from basic setup to advanced customizations and real-world applications.\n\nCardView is a layout container that allows you to create a card-like UI design. It offers a consistent look and feel across different devices and enhances the user experience with customizable features like rounded corners, elevation, and shadows.\n\nCardView is a layout container in Android that provides a consistent look and feel across different devices. It allows for easy customization, such as rounded corners and shadows, to create a sense of depth and elevation. This enhances the user experience by making UI elements more engaging and interactive.\n\nOpen your file (usually located in the module).\n\nNext, sync your project to ensure the dependency is added correctly.\n\nThis layout creates a CardView with rounded corners and a slight elevation, containing a simple TextView with some padding.\n\nCardView can be customized in various ways to fit your design needs. You can add images, buttons, and other views inside the CardView. For example, to add an image and a button:\n\nUpdate your layout XML file with the following code:\n\nThis example demonstrates a CardView containing an ImageView, a TextView, and a Button, all arranged vertically within a LinearLayout.\n\nCardView is often used within a RecyclerView to create a list of card items. Here’s how you can do it:\n\nSet up the RecyclerView in your Activity:\n\nCardView is a powerful tool for creating beautiful and interactive UI components in Android. By following the tips and examples in this guide, you can start incorporating CardView into your apps to enhance their visual appeal and user experience."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/android-recyclerview-android-cardview-example-tutorial",
        "document": "Android RecyclerView and Android CardView got introduced in Android Lollipop with Material Design. For those who’re not aware of Material Design, its a comprehensive guide of UI Widgets introduced since Android 5.0 and it improves the visual appeal of the apps.\n\nAndroid RecyclerView is a more advanced, powerful and flexible version of the ListView. Android RecyclerView is similar to ListView except that it forces us to use RecyclerView.ViewHolder class to hold the elements which is not a compulsion in ListView. As the name suggests, Android RecyclerView is used to reuse cells when scrolling up and down by recycling the items in the list. Another improvement in RecyclerView is that it allows us to set the LayoutManagers dynamically at runtime, unlike the ListView which was only available in a Vertical scrolling List. RecyclerView allows us to set the following types of Layouts at runtime.\n• LinearLayoutManager : it supports both vertical and horizontal lists\n• GridLayoutManager : it supports displaying grids as seen in GalleryView earlier\n• The RecyclerView.ItemAnimator class provides better support to animating the views unlike the ListViews\n• The RecyclerView.ItemDecorator class provides better support when it comes to adding borders and dividers thereby giving huge control to us\n\nHence a RecyclerView is more customizable when compared to ListView and gives greater control to the users. The RecyclerView is available in the support library. So we need to modify our gradle script to add the following dependency.\n\nAndroid CardView UI component shows information inside cards. This component is generally used to show contact information. This component is available in another support library so we have to add its dependency too.\n\nAndroid CardView widget allows us to control the background color, shadow, corner radius, elevation etc. For using the custom attributes in XML, we need to add the following namespace declaration to the parent layout. Following is the namespace declaration with some attributes from our project.\n\nThe important attributes used above are:\n• card_view:cardCornerRadius : Used to set the corner radius in our layouts\n• card_view:cardBackgroundColor : Used to set the background color of the view\n\nIn our example project, we’ll add a RecyclerView to display a list of CardViews that contains Android Version Names and Numbers along with a sample logo. The CardView is programmed to remove that Card from the list. We’ve added a menu option in the ActionBar to add back the removed cards in order. Note: The logo images are taken at random from Google. So sizes would vary.\n\nThe project consists of a that displays the . The CardView is added to the RecyclerView from the CustomAdapter class. The DataModel is used to retrieve the data for each CardView through getters. The MyData class holds the arrays of textviews and drawables along with their ids.\n\nThe holds the RecyclerView inside a RelativeLayout as shown below. activity_main.xml code:\n\nAndroid CardView holds an ImageView along with two TextViews in a Nested Linear Layout. The contains a single item to add back the cards removed. menu_main.xml code:\n\nThe class is defined below :\n\nThe method is invoked from the listener method to remove the CardView clicked. Its respective id is stored in an array to retrieve later. To add the view later we’ve implemented another method named . In this method, we add that view at a predefined position in the list and remove its id from the array. The CustomAdapter is notified in both the cases. The CustomeAdapter.java class is defined below :\n\nIn the above code, we’ve implemented our own ViewHolder by extending RecyclerView.ViewHolder. The view is inflated from the which we had defined in the layouts directory. The onClickListener in the MainActivity is attached to this view in the below snippet.\n\nAn ArrayList stores all the data in the form of a DataModel class object in an ArrayList and adds them to the respective cards in the list. The and class which contains the data specific to this application are given below :\n\nBelow is the output produced by our android RecyclerView and CardView example application. As you can see the removed item is always added at the third index (fourth position in the list) This brings an end to this tutorial about android RecyclerView and CardView. You can download the Android RecyclerView CardView Example Project from the below link."
    },
    {
        "link": "https://stackoverflow.com/questions/68141502/use-attributes-in-layout",
        "document": "I want to use dark mode in my layout. I have tried this: \n\n \n\n attr.xml:\n\nbut I got this error:\n\nis there another way to do this?"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/android-layout-linearlayout-relativelayout",
        "document": "In this tutorial, we will provide an overview of android layout. We will also explore some of the specific layout controls available for organising the screen content namely - Android LinearLayout and Android RelativeLayout.\n\nThe basic building block for user interface is a View object that is created from the View class and occupies a rectangular area on the screen. Views are the base class for UI components like TextView, Button, EditText etc. The ViewGroup is a subclass of View. One or more Views can be grouped together into a ViewGroup. A ViewGroup provides the android layout in which we can order the appearance and sequence of views. Examples of ViewGroup are , , etc.\n\nAndroid provides the following ViewGroups or layouts:\n• : is a ViewGroup that aligns all children in a single direction, vertically or horizontally\n• : is a ViewGroup that displays child views in relative positions\n• : allows us to specify the exact location of the child views and widgets\n• : is a view that groups its child views into rows and columns\n• : is a placeholder on screen that is used to display a single view\n• : is a special type of FrameLayout in that it allows users to scroll through a list of views that occupy more space than the physical display. The ScrollView can contain only one child view or ViewGroup, which normally is a LinearLayout\n• : is a view group that displays a list of scrollable item\n• : is a ViewGroup that displays items in two-dimensional scrolling grid. The items in the grid come from the ListAdapter associated with this view\n\nIn this tutorial we’ll focus on the two most used android layout:\n• android:id : This is the ID which uniquely identifies the view\n• android:layout_width : This is the width of the layout\n• android:layout_height : This is the height of the layout\n• android:layout_margin : This is the extra space outside of the view. For example if you give , then the view will be arranged after 20dp from left\n• android:layout_padding : This is similar to android:layout_margin except that it specifies the extra space inside the view\n• android:layout_gravity : This specifies how child Views are positioned\n• android:layout_weight : This specifies how much of the extra space in the layout should be allocated to the view\n• android:layout_x : This specifies the x-coordinate of the layout\n• android:layout_y : This specifies the y-coordinate of the layout\n\nandroid:layout_width=wrap_content tells the view to size itself to the dimensions required by its content. android:layout_width=match_parent tells the view to become as big as its parent view.\n\nThe syntax for an ID, inside an XML tag is:\n• The at-symbol (@) at the beginning of the string indicates that the XML parser should parse and expand the rest of the ID string and identify it as an ID resource\n• The plus-symbol (+) means that this is a new resource name that must be created and added to our resources\n\nAndroid LinearLayout organizes elements along a single line. We can specify whether that line is vertical or horizontal using . The orientation is horizontal by default. A vertical LinearLayout will only have one child per row (so it is a column of single elements), and a horizontal LinearLayout will only have one single row of elements on the screen. android:layout_weight attribute depicts the importance of the element. An element with larger weight occupies more screen space. Here is a sample Layout XML using LinearLayout:\n\nIn this layout we have a Parent which has a vertical orientation and contains buttons, textviews and a nested Linear Layout(having a horizontal orientation) as child views. Note: Nested layouts don’t have to be of one type. We could, for example, have a LinearLayout as one of the children in a RelativeLayout and vice-versa.\n\nAndroid RelativeLayout lays out elements based on their relationships with one another, and with the parent container. This is one of the most complicated layout and we need several properties to actually get the layout we desire. That is, using RelativeLayout we can position a view to be toLeftOf, toRightOf, below or above its siblings. We can also position a view with respect to its parent such as centered horizontally, vertically or both, or aligned with any of the edges of the parent . If none of these attributes are specified on a child view then the view is by default rendered to the top left position.\n\nThe following are the major attributes used across RelativeLayout. They lay across three different categories:\n• android:layout_alignParentBottom : Places the bottom of the element on the bottom of the container\n• android:layout_alignParentLeft : Places the left of the element on the left side of the container\n• android:layout_alignParentRight : Places the right of the element on the right side of the container\n• android:layout_alignParentTop : Places the element at the top of the container\n• android:layout_centerHorizontal : Centers the element horizontally within its parent container\n• android:layout_centerInParent : Centers the element both horizontally and vertically within its container\n• android:layout_centerVertical : Centers the element vertically within its parent container\n• android:layout_above : Places the element above the specified element\n• android:layout_below : Places the element below the specified element\n• android:layout_toLeftOf : Places the element to the left of the specified element\n• android:layout_toRightOf : Places the element to the right of the specified element\n\n“@id/XXXXX” is used to reference an element by its id. One thing to remember is that referencing an element before it has been declared will produce an error so @+id/ should be used in such cases.\n• android:layout_alignBaseline : Aligns baseline of the new element with the baseline of the specified element\n• android:layout_alignBottom : Aligns the bottom of new element in with the bottom of the specified element\n• android:layout_alignLeft : Aligns left edge of the new element with the left edge of the specified element\n• android:layout_alignRight : Aligns right edge of the new element with the right edge of the specified element\n• android:layout_alignTop : Places top of the new element in alignment with the top of the specified element\n\nThe following xml layout uses :\n\nAs you can see we can rearrange elements based on their relative positions. The following xml layout represents a custom layout having nested linear and relative layouts.\n\nThis project consists of three activities and the respective layouts that were discussed above.\n\nThe application launches into the MainActivity which loads the contents by the following code:\n\nThe and load the and layouts respectively as shown below:\n\nThe image outputs of the three layout files are shown below: layout_linear.xml As you can see the Parent LinearLayout consists of 6 child elements in a single vertical column among which one is a nested LinearLayout child view containing 4 components in horizontal orientation. layout_relative.xml The arrows pointing in the image above depict how siblings are positioned relative to each other and relative to the container. layout_mixed.xml This Relative Layout consists of a Vertical LinearLayout within a Nested Horizontal LinearLayout along with a Child RelativeLayout. Note: Components belonging to different layouts are not siblings and hence can’t be positioned relative to each other. It’s their container layouts that are siblings and can be positioned relative to each other. If you are wondering about the blue lined rectangles and arrows, it’s because the images are from xml layouts in graphical view. When you will run the app, these blue lines and rectangles will not be shown. This brings an end to android layout tutorial. We’ll cover the other android layouts in the next tutorials. You can download the final Android Layout Project from the link below."
    },
    {
        "link": "https://stackoverflow.com/questions/21371689/linearlayout-within-relative-layout-xml",
        "document": "I've got my LinearLayout part of my app complete. I'm now adding a small bar at the top of the screen/activity using RelativeLayout, but I seem to have it backwards of the way I want it in the picture below.\n\nThe tan-colored Linear Layout is visible in a small bar at the top, which is what I want the white RelativeLayout to be and the LinearLayout should be using the white space that RelativeLayout's taking up. I'm confused as how to:\n• None change RelativeLayout so that it's height is only as tall as the bar on the top (50dp)\n• None have LinearLayout begin 50dp down, so that it's top meets the bottom of the RelativeLayout\n\nThanks for any help offered in advance."
    },
    {
        "link": "https://stackoverflow.com/questions/31509212/android-linearlayout-relativelayout-alignment",
        "document": "I am attempting to create a simple UI that looks something like this\n\nI am very new to android and have been trying different types of layouts (Linear/Relative) and I believe Linear may be the way to go here (I hope to make the amount of ListViews dynamic at some stage but for now 2 is fine).\n\nShould I be using a Linear Layout or Relative layout, or some combination of both to achieve this.\n\nHere is the XML which I have, I can't seem to get the button to align right, even though its gravity is set to right. I am open to any suggestions on how to fix this, or if there is a better way\n\nedit : here is what the UI currently looks like"
    },
    {
        "link": "https://topcoder.com/thrive/articles/relativelayout-and-linearlayout-in-android",
        "document": "A RelativeLayout is a ViewGroup that displays child view in a relative position. The position of each view can be relative to the sibling, (like on the left or below another view), or relative to the position of the main area of the relative layout, like bottom, left, or center.\n\nThis layout is very flexible, Android is used to customize. This layout allows us to position our view or components based on the position of relative or sibling views. Using this layout you can position a view to be , , , or its siblings. This layout is simple because you can place views anywhere.\n\nRelativeLayout attributes\n\nThe following are a few important attributes specified to RelativeLayout.\n• None : This attribute is used to place the bottom of the element on the bottom of the container. You can change layout_align parent like top, left, and right.\n• None : This attribute is used to center the element horizontally within its parent container. You can change like or .\n\nUsing layout_centerInParent, attributes are used to center the element both horizontally and vertically within its container.\n• None : With the help of this attribute, we can place the element above the specified element.\n• None : With the help of this attribute, we can place the element below the specified element.\n• None : With the help of this attribute, we can place the view in the left of the specified view ID.\n• None : With the help of this attribute, we can place the view in the right of the specified view ID.\n• None : With the help of this attribute, we can align the baseline of the new view with the baseline of the specified view ID.\n• None : With the help of this attribute, we can\n\nalign the bottom of the view with the bottom of the specified view ID.\n• None : With the help of this attribute, we can align the left edge of the new view with the left edge of the specified view ID.\n• None : With the help of this attribute, we can align the right edge of the new view with the right edge of the specified view ID.\n• None : With the help of this attribute, we can place the top of the new view in alignment with the top of the specified view ID.\n\nLinearLayout is a ViewGroup that displays the view horizontally or vertically. This is the simplest layout, it can arrange elements one after another vertically or horizontally. The attributes are used to position control in this layout. You can specify whether that line is horizontal or vertical by using the attribute. By default, orientation is horizontal. Horizontal orientation will only have one single row of elements on the screen and in the case of vertical orientation, it will only have one child per row. One more important attribute in a linear layout is the attribute which assigns weights to elements. An element with a larger weight will occupy more screen space even though the importance of the element is more.\n\nThe following are a few important attributes specified to LinearLayout.\n• None : Using this attribute, we can specify the direction of arrangement. We will use horizontal for a row, and vertical for a column. This attribute by default is horizontal.\n• None : This attribute is used to specify how an object should position its content, on both the X and Y axes. The possible object values are top, bottom, left, right, center, center_vertical, center_horizontal, etc.\n• None : This attribute is drawable to use as a vertical divider between buttons.\n• None : This attribute must be a boolean value, either true or false, and it prevents the layout from aligning its children’s baselines.\n• None : This attribute is used to sum up a child’s weight."
    },
    {
        "link": "https://reddit.com/r/androiddev/comments/igvuet/am_i_the_only_one_still_using_relativelayout",
        "document": "Are you still using these like me or have you changed all to ConstraintLayout or CoordinatorLayout ?"
    }
]