[
    {
        "link": "https://github.com/ohyo-io/gopdf",
        "document": "Package gofpdf implements a PDF document generator with high level support for text, drawing and images.\n\ngofpdf has no dependencies other than the Go standard library. All tests pass on Linux, Mac and Windows platforms.\n\ngofpdf supports UTF-8 TrueType fonts and “right-to-left” languages. Note that Chinese, Japanese, and Korean characters may not be included in many general purpose fonts. For these languages, a specialized font (for example, NotoSansSC for simplified Chinese) can be used.\n\nAlso, support is provided to automatically translate UTF-8 runes to code page encodings for languages that have fewer than 256 glyphs.\n\nThis repository will not be maintained, at least for some unknown duration. But it is hoped that gofpdf has a bright future in the open source world. Due to Go’s promise of compatibility, gofpdf should continue to function without modification for a longer time than would be the case with many other languages.\n\nForks should be based on the last viable commit. Tools such as active-forks can be used to select a fork that looks promising for your needs. If a particular fork looks like it has taken the lead in attracting followers, this README will be updated to point people in that direction.\n\nThe efforts of all contributors to this project have been deeply appreciated. Best wishes to all of you.\n\nTo install the package on your system, run\n\nThe following Go code generates a simple PDF file.\n\nSee the functions in the fpdf_test.go file (shown as examples in this documentation) for more advanced PDF examples.\n\nIf an error occurs in an Fpdf method, an internal error field is set. After this occurs, Fpdf method calls typically return without performing any operations and the error state is retained. This error management scheme facilitates PDF generation since individual method calls do not need to be examined for failure; it is generally sufficient to wait until after is called. For the same reason, if an error occurs in the calling application during PDF generation, it may be desirable for the application to transfer the error to the Fpdf instance by calling the method or the method. At any time during the life cycle of the Fpdf instance, the error state can be determined with a call to or . The error itself can be retrieved with a call to .\n\nThis package is a relatively straightforward translation from the original FPDF library written in PHP (despite the caveat in the introduction to Effective Go). The API names have been retained even though the Go idiom would suggest otherwise (for example, is used rather than simply ). The similarity of the two libraries makes the original FPDF website a good source of information. It includes a forum and FAQ.\n\nHowever, some internal changes have been made. Page content is built up using buffers (of type bytes.Buffer) rather than repeated string concatenation. Errors are handled as explained above rather than panicking. Output is generated through an interface of type io.Writer or io.WriteCloser. A number of the original PHP methods behave differently based on the type of the arguments that are passed to them; in these cases additional methods have been exported to provide similar functionality. Font definition files are produced in JSON rather than PHP.\n\nA side effect of running is the production of a number of example PDFs. These can be found in the gofpdf/pdf directory after the tests complete.\n\nPlease note that these examples run in the context of a test. In order run an example as a standalone application, you’ll need to examine fpdf_test.go for some helper routines, for example and .\n\nExample PDFs can be compared with reference copies in order to verify that they have been generated as expected. This comparison will be performed if a PDF with the same name as the example PDF is placed in the gofpdf/pdf/reference directory and if the third argument to in internal/example/example.go is true. (By default it is false.) The routine that summarizes an example will look for this file and, if found, will call to check the example PDF for equality with its reference PDF. If differences exist between the two files they will be printed to standard output and the test will fail. If the reference file is missing, the comparison is considered to succeed. In order to successfully compare two PDFs, the placement of internal resources must be consistent and the internal creation timestamps must be the same. To do this, the methods and need to be called for both files. This is done automatically for all examples.\n\nNothing special is required to use the standard PDF fonts (courier, helvetica, times, zapfdingbats) in your documents other than calling .\n\nYou should use or to add a TrueType UTF-8 encoded font. Use and methods switch between “right-to-left” and “left-to-right” mode.\n\nIn order to use a different non-UTF-8 TrueType or Type1 font, you will need to generate a font definition file and, if the font will be embedded into PDFs, a compressed version of the font file. This is done by calling the MakeFont function or using the included makefont command line utility. To create the utility, cd into the makefont subdirectory and run “go build”. This will produce a standalone executable named makefont. Select the appropriate encoding file from the font subdirectory and run the command as in the following example.\n\nIn your PDF generation code, call to load the font and, as with the standard fonts, SetFont() to begin using it. Most examples, including the package example, demonstrate this method. Good sources of free, open-source fonts include Google Fonts and DejaVu Fonts.\n\nThe draw2d package is a two dimensional vector graphics library that can generate output in different forms. It uses gofpdf for its document production mode.\n\ngofpdf is a global community effort and you are invited to make it even better. If you have implemented a new feature or corrected a problem, please consider contributing your change to the project. A contribution that does not directly pertain to the core functionality of gofpdf should be placed in its own directory directly beneath the directory.\n\nHere are guidelines for making submissions. Your change should\n• be compatible with the MIT License\n• include an example in fpdf_test.go if appropriate\n• conform to the standards of golint and go vet, that is, and should not generate any warnings\n\nPull requests are the preferred means of accepting your changes.\n\ngofpdf is released under the MIT License. It is copyrighted by Kurt Jung and the contributors acknowledged below.\n\nThis package’s code and documentation are closely derived from the FPDF library created by Olivier Plathey, and a number of font and image resources are copied directly from it. Bruno Michel has provided valuable assistance with the code. Drawing support is adapted from the FPDF geometric figures script by David Hernández Sanz. Transparency support is adapted from the FPDF transparency script by Martin Hall-May. Support for gradients and clipping is adapted from FPDF scripts by Andreas Würmser. Support for outline bookmarks is adapted from Olivier Plathey by Manuel Cornes. Layer support is adapted from Olivier Plathey. Support for transformations is adapted from the FPDF transformation script by Moritz Wagner and Andreas Würmser. PDF protection is adapted from the work of Klemen Vodopivec for the FPDF product. Lawrence Kesteloot provided code to allow an image’s extent to be determined prior to placement. Support for vertical alignment within a cell was provided by Stefan Schroeder. Ivan Daniluk generalized the font and image loading code to use the Reader interface while maintaining backward compatibility. Anthony Starks provided code for the Polygon function. Robert Lillack provided the Beziergon function and corrected some naming issues with the internal curve function. Claudio Felber provided implementations for dashed line drawing and generalized font loading. Stani Michiels provided support for multi-segment path drawing with smooth line joins, line join styles, enhanced fill modes, and has helped greatly with package presentation and tests. Templating is adapted by Marcus Downing from the FPDF_Tpl library created by Jan Slabon and Setasign. Jelmer Snoeck contributed packages that generate a variety of barcodes and help with registering images on the web. Jelmer Snoek and Guillermo Pascual augmented the basic HTML functionality with aligned text. Kent Quirk implemented backwards-compatible support for reading DPI from images that support it, and for setting DPI manually and then having it properly taken into account when calculating image size. Paulo Coutinho provided support for static embedded fonts. Dan Meyers added support for embedded JavaScript. David Fish added a generic alias-replacement function to enable, among other things, table of contents functionality. Andy Bakun identified and corrected a problem in which the internal catalogs were not sorted stably. Paul Montag added encoding and decoding functionality for templates, including images that are embedded in templates; this allows templates to be stored independently of gofpdf. Paul also added support for page boxes used in printing PDF documents. Wojciech Matusiak added supported for word spacing. Artem Korotkiy added support of UTF-8 fonts. Dave Barnes added support for imported objects and templates. Brigham Thompson added support for rounded rectangles. Joe Westcott added underline functionality and optimized image storage. Benoit KUGLER contributed support for rectangles with corners of unequal radius, modification times, and for file attachments and annotations.\n• Improve test coverage as reported by the coverage tool."
    },
    {
        "link": "https://pkg.go.dev/github.com/Artui/gopdf",
        "document": "Attachment defines a content to be included in the pdf, in one of the following ways :\n\nFontDescType (font descriptor) specifies metrics and other attributes of a font, as distinct from the metrics of individual glyphs (as defined in the pdf specification).\n\nOpen provides an io.Reader for the specified font file (.json or .z). The file name never includes a path. Open returns an error if the specified file cannot be opened.\n\nFontLoader is used to read fonts (JSON font specification and zlib compressed font binaries) from arbitrary locations (e.g. files, zip files, embedded font resources).\n\nFpdf is the principal structure for creating a single PDF document"
    },
    {
        "link": "https://pkg.go.dev/github.com/jung-kurt/gofpdf",
        "document": "Attachment defines a content to be included in the pdf, in one of the following ways :\n\nFontDescType (font descriptor) specifies metrics and other attributes of a font, as distinct from the metrics of individual glyphs (as defined in the pdf specification).\n\nOpen provides an io.Reader for the specified font file (.json or .z). The file name never includes a path. Open returns an error if the specified file cannot be opened.\n\nFontLoader is used to read fonts (JSON font specification and zlib compressed font binaries) from arbitrary locations (e.g. files, zip files, embedded font resources).\n\nFpdf is the principal structure for creating a single PDF document"
    },
    {
        "link": "https://github.com/jung-kurt/gofpdf",
        "document": "Package gofpdf implements a PDF document generator with high level support for text, drawing and images.\n\ngofpdf has no dependencies other than the Go standard library. All tests pass on Linux, Mac and Windows platforms.\n\ngofpdf supports UTF-8 TrueType fonts and “right-to-left” languages. Note that Chinese, Japanese, and Korean characters may not be included in many general purpose fonts. For these languages, a specialized font (for example, NotoSansSC for simplified Chinese) can be used.\n\nAlso, support is provided to automatically translate UTF-8 runes to code page encodings for languages that have fewer than 256 glyphs.\n\nThis repository will not be maintained, at least for some unknown duration. But it is hoped that gofpdf has a bright future in the open source world. Due to Go’s promise of compatibility, gofpdf should continue to function without modification for a longer time than would be the case with many other languages.\n\nForks should be based on the last viable commit. Tools such as active-forks can be used to select a fork that looks promising for your needs. If a particular fork looks like it has taken the lead in attracting followers, this README will be updated to point people in that direction.\n\nThe efforts of all contributors to this project have been deeply appreciated. Best wishes to all of you.\n\nTo install the package on your system, run\n\nThe following Go code generates a simple PDF file.\n\nSee the functions in the fpdf_test.go file (shown as examples in this documentation) for more advanced PDF examples.\n\nIf an error occurs in an Fpdf method, an internal error field is set. After this occurs, Fpdf method calls typically return without performing any operations and the error state is retained. This error management scheme facilitates PDF generation since individual method calls do not need to be examined for failure; it is generally sufficient to wait until after is called. For the same reason, if an error occurs in the calling application during PDF generation, it may be desirable for the application to transfer the error to the Fpdf instance by calling the method or the method. At any time during the life cycle of the Fpdf instance, the error state can be determined with a call to or . The error itself can be retrieved with a call to .\n\nThis package is a relatively straightforward translation from the original FPDF library written in PHP (despite the caveat in the introduction to Effective Go). The API names have been retained even though the Go idiom would suggest otherwise (for example, is used rather than simply ). The similarity of the two libraries makes the original FPDF website a good source of information. It includes a forum and FAQ.\n\nHowever, some internal changes have been made. Page content is built up using buffers (of type bytes.Buffer) rather than repeated string concatenation. Errors are handled as explained above rather than panicking. Output is generated through an interface of type io.Writer or io.WriteCloser. A number of the original PHP methods behave differently based on the type of the arguments that are passed to them; in these cases additional methods have been exported to provide similar functionality. Font definition files are produced in JSON rather than PHP.\n\nA side effect of running is the production of a number of example PDFs. These can be found in the gofpdf/pdf directory after the tests complete.\n\nPlease note that these examples run in the context of a test. In order run an example as a standalone application, you’ll need to examine fpdf_test.go for some helper routines, for example and .\n\nExample PDFs can be compared with reference copies in order to verify that they have been generated as expected. This comparison will be performed if a PDF with the same name as the example PDF is placed in the gofpdf/pdf/reference directory and if the third argument to in internal/example/example.go is true. (By default it is false.) The routine that summarizes an example will look for this file and, if found, will call to check the example PDF for equality with its reference PDF. If differences exist between the two files they will be printed to standard output and the test will fail. If the reference file is missing, the comparison is considered to succeed. In order to successfully compare two PDFs, the placement of internal resources must be consistent and the internal creation timestamps must be the same. To do this, the methods and need to be called for both files. This is done automatically for all examples.\n\nNothing special is required to use the standard PDF fonts (courier, helvetica, times, zapfdingbats) in your documents other than calling .\n\nYou should use or to add a TrueType UTF-8 encoded font. Use and methods switch between “right-to-left” and “left-to-right” mode.\n\nIn order to use a different non-UTF-8 TrueType or Type1 font, you will need to generate a font definition file and, if the font will be embedded into PDFs, a compressed version of the font file. This is done by calling the MakeFont function or using the included makefont command line utility. To create the utility, cd into the makefont subdirectory and run “go build”. This will produce a standalone executable named makefont. Select the appropriate encoding file from the font subdirectory and run the command as in the following example.\n\nIn your PDF generation code, call to load the font and, as with the standard fonts, SetFont() to begin using it. Most examples, including the package example, demonstrate this method. Good sources of free, open-source fonts include Google Fonts and DejaVu Fonts.\n\nThe draw2d package is a two dimensional vector graphics library that can generate output in different forms. It uses gofpdf for its document production mode.\n\ngofpdf is a global community effort and you are invited to make it even better. If you have implemented a new feature or corrected a problem, please consider contributing your change to the project. A contribution that does not directly pertain to the core functionality of gofpdf should be placed in its own directory directly beneath the directory.\n\nHere are guidelines for making submissions. Your change should\n• be compatible with the MIT License\n• include an example in fpdf_test.go if appropriate\n• conform to the standards of golint and go vet, that is, and should not generate any warnings\n\nPull requests are the preferred means of accepting your changes.\n\ngofpdf is released under the MIT License. It is copyrighted by Kurt Jung and the contributors acknowledged below.\n\nThis package’s code and documentation are closely derived from the FPDF library created by Olivier Plathey, and a number of font and image resources are copied directly from it. Bruno Michel has provided valuable assistance with the code. Drawing support is adapted from the FPDF geometric figures script by David Hernández Sanz. Transparency support is adapted from the FPDF transparency script by Martin Hall-May. Support for gradients and clipping is adapted from FPDF scripts by Andreas Würmser. Support for outline bookmarks is adapted from Olivier Plathey by Manuel Cornes. Layer support is adapted from Olivier Plathey. Support for transformations is adapted from the FPDF transformation script by Moritz Wagner and Andreas Würmser. PDF protection is adapted from the work of Klemen Vodopivec for the FPDF product. Lawrence Kesteloot provided code to allow an image’s extent to be determined prior to placement. Support for vertical alignment within a cell was provided by Stefan Schroeder. Ivan Daniluk generalized the font and image loading code to use the Reader interface while maintaining backward compatibility. Anthony Starks provided code for the Polygon function. Robert Lillack provided the Beziergon function and corrected some naming issues with the internal curve function. Claudio Felber provided implementations for dashed line drawing and generalized font loading. Stani Michiels provided support for multi-segment path drawing with smooth line joins, line join styles, enhanced fill modes, and has helped greatly with package presentation and tests. Templating is adapted by Marcus Downing from the FPDF_Tpl library created by Jan Slabon and Setasign. Jelmer Snoeck contributed packages that generate a variety of barcodes and help with registering images on the web. Jelmer Snoek and Guillermo Pascual augmented the basic HTML functionality with aligned text. Kent Quirk implemented backwards-compatible support for reading DPI from images that support it, and for setting DPI manually and then having it properly taken into account when calculating image size. Paulo Coutinho provided support for static embedded fonts. Dan Meyers added support for embedded JavaScript. David Fish added a generic alias-replacement function to enable, among other things, table of contents functionality. Andy Bakun identified and corrected a problem in which the internal catalogs were not sorted stably. Paul Montag added encoding and decoding functionality for templates, including images that are embedded in templates; this allows templates to be stored independently of gofpdf. Paul also added support for page boxes used in printing PDF documents. Wojciech Matusiak added supported for word spacing. Artem Korotkiy added support of UTF-8 fonts. Dave Barnes added support for imported objects and templates. Brigham Thompson added support for rounded rectangles. Joe Westcott added underline functionality and optimized image storage. Benoit KUGLER contributed support for rectangles with corners of unequal radius, modification times, and for file attachments and annotations.\n• Improve test coverage as reported by the coverage tool."
    },
    {
        "link": "https://unidoc.io/post/how-to-annotate-a-pdf",
        "document": "In today’s digital age, knowing how to annotate a PDF efficiently is invaluable, especially for developers seeking to automate document management processes.\n\nAnnotating PDFs is a common task, whether it’s adding comments, highlighting text, or inserting images. While many tools exist for PDF annotation, leveraging Golang for this purpose offers a unique advantage.\n\nIn this guide, we’ll explore how to annotate PDFs efficiently using Golang, empowering developers with the flexibility and power of this programming language.\n\nBefore diving into Golang-specific techniques, let’s grasp the fundamentals of PDF annotation.\n\nAnnotation involves adding extra information to a PDF document without altering its core content. Common annotation types include text comments, highlights, underlines, stamps, and digital signatures. Each annotation type serves a specific purpose, facilitating collaboration, feedback, and document enhancement.\n\nNumerous software tools and libraries exist for PDF annotation across various programming languages. However, Golang developers often face a scarcity of dedicated libraries for PDF manipulation.\n\nWhen it comes to PDF manipulation in Golang, the UniPDF library stands out for its robust functionality, including creating, modifying, and annotating PDFs.\n\nLeveraging this library simplifies the process of annotating PDFs programmatically, making it an ideal choice for Golang developers.\n\nTo begin annotating PDFs with Golang, developers first need to install the library. Utilizing Go’s package management tool, , ensures a seamless setup process:\n\nWith installed, developers can start integrating PDF annotation capabilities into their Golang applications.\n• Loading a PDF File: The first step involves loading the target PDF file into memory. provides functions for loading PDF files, enabling developers to access their content programmatically.\n• Adding Text Annotations: Text annotations are among the most common types of annotations. With , developers can easily insert text annotations into PDF documents, specifying the text content, position, and appearance properties.\n• Incorporating Image Annotations: In addition to text annotations, developers may need to add image annotations to PDFs. Whether it’s inserting logos, signatures, or graphical elements, UniPDF facilitates seamless integration of image annotations.\n• Implementing Highlighting and Underlining: Highlighting and underlining text are essential annotation features for emphasizing key points in PDF documents. With , developers can programmatically apply highlighting and underlining effects to specific text segments.\n• Managing Annotation Properties: offers extensive control over annotation properties, including color, opacity, border style, and annotation type. Developers can fine-tune these properties to align with their application’s requirements and design preferences.\n• Saving Annotated PDFs: Once all annotations are applied, developers need to save the modified PDF document. UniPDF facilitates seamless saving of annotated PDFs, preserving all modifications for future reference or distribution.\n\nBest Practices for PDF Annotation in Golang:\n\nWhile annotating PDFs with Golang offers unparalleled flexibility, developers should adhere to best practices to ensure optimal performance and maintainability:\n• Error Handling: Proper error handling is crucial to address potential issues during PDF annotation, ensuring robustness and reliability.\n• Documentation: Comprehensive documentation of annotation functions and usage guidelines fosters ease of adoption for other developers working on the project.\n\nWhen learning how to annotate a PDF with Golang, it’s essential to choose the right library for the job. UniPDF stands out as a comprehensive solution that simplifies the annotation process.\n\nIn conclusion, annotating PDFs with Golang using the UniPDF library offers a powerful solution for developers seeking to automate document manipulation tasks.\n\nBy following the steps outlined in this guide and adhering to best practices, developers can streamline PDF annotation processes and unlock new possibilities for document management applications.\n\nWith Golang’s simplicity and versatility, annotating PDFs becomes a straightforward endeavor, empowering developers to accomplish complex tasks with ease.\n\nReady to streamline your document management workflows with Golang and the UniPDF library? Have questions or need assistance?\n\nContact us today to learn more about how we can help you achieve your PDF annotation goals."
    },
    {
        "link": "https://gopdf.io/blog/pdf-editing-online-with-gopdf-a-step-by-step-guide",
        "document": "Beginning your adventure in PDF editing online with GoPDF opens doors to a world of options. We will comprehensively take you through a hassle-free procedure on how to use GoPDF for editing PDFs with ease. GoPDF’s easy-to-use online PDF editor tool can solve all types of errors, including typographical errors, update crucial information, or improve the textual content in general. Enhance your PDF editing online skills by discovering all that GoPDF has in store for you and making it a convenient mission. Come along with us on every step and explore how you can easily edit a PDF online, from simple corrections to complex improvements.\n\nGoPDF has provided a tool kit encompassing a number of options aimed at raising your PDF editing online capabilities. Here’s a glimpse of what you will accomplish.\n\nAttaching and then uploading files is the first order of business when using GoPDF. This simple process offers you two convenient options:\n\nMake a decision towards this option if an established dataset is needed to attach to, amend, and reconstruct. This becomes the best solution for revisiting and revising old projects.\n• Go to where your current PDF file lies.\n• Open your document within the GoPDF editor to edit the pdf after selecting it and clicking on “open’.\n\nSelect this alternative if it is a fresh venture of yours involving several ideas that have to be combined in a single paper. However, this choice allows you to begin at square one with your own PDF.\n• Drop these into your documents at the start, including texts, images, and so on.\n• If you want to create a new PDF, click on the save button and save your document to the GoPDf editor.\n• The Other four give you an opportunity to customize your job experience for specific projects. These are easy to use since their interface is friendly, and hence one has an easy time while editing on Go PDF.\n\nBesides, ‘Add Text’ functions enable text input and editing while creating your own PDF document. This feature ensures easy and convenient text editing, as it involves correcting typos, updating information, and improving content. The online editing tool from GoPDF brings life to your changes as you watch them.\n• Search for ‘Add Text’ in the toolbar of the opened PDF.\n• Click on the place where you want to insert or edit a new text.\n• Click on the textbox; type or correct your text as necessary.\n• Save the document after making these adjustments by clicking on ‘Save’.\n\nWith this choice, one can effortlessly enhance his document by adding photos and different forms. Incorporate the custom-shaped media into your pdf so that it fits your unique preference in terms of appealing appearance. The simplicity of GoPDF’s PDF tool online enables one to be as creative as possible while designing even polygonal-structured forms within a limited PDF framework.\n• Look for Add Image and Shape under Content within the toolbar.\n• Simply click on a document field and choose the insertion of an image or a shape.\n• Hit ‘Add Image’ for adding a photo and ‘Add Shape’ for different forms.\n• Move and resize the newly introduced element to suit your preferences.\n• Click on save, and the picture or object will appear in your PDF document.\n\nThis makes it easy for you to search for and replace particular elements in your scanned PDF files quickly. It comes in handy, especially when one requires general corrections to their document. The use of advanced searching on GoPDF saves time and ensures precision, so all occurrences will be replaced accurately.\n• In the toolbar, go to the search and replace tool.\n• Type in the phrase to be searched for or replaced.\n• The ‘Replace’ button works for one instance, while the ‘Replace All’ button modifies all instances.\n\nContinue perfecting your document with additional images at ease using the Add Image from File option. You can also include pictures, diagrams, and illustrations in order to support the visually represented elements of the story within your PDF. GoPDF understands that visual aspects are central to effective communication, thus giving users the means to easily incorporate images that help improve the general impression generated by the document.\n• Click on “Add images from file” on the toolbar.\n• Go to the folder containing the image file on your computer.\n• Inserting an image in your PDF involves selecting the image file and clicking on ‘Open’.\n• You can change the position and dimensions of the image.\n• Make sure you save it in order to add your picture to the pdf.\n\nThe ‘Add Link’ feature allows you to make links in your pdf and helps you navigate through pages or outgoing sources easily. Adding contextual hyperlinks will further enhance the interactivity of your document. Turning documents from static into dynamic experiences is an easy and efficient way to engage your audience with GoPDF.\n• In the toolbar, select the ‘Add link’ option.\n• Simply click and hold to select the region to which you wish to add the hyperlink.\n• Include the link address by typing the desired URL or page.\n• To apply a hyperlink to your pdf, save changes.\n\nUse a signature to make sure that any document you sign is authentic. GoPDF enables you to digitally sign documents, ensuring legitimacy and the convenience of checking on your papers through sign PDF feature. In addition, digital signatures improve document security and simplify approval processes, making it possible for GoPDF to be helpful in professional workflows.\n• Select an existing signature or develop a new one.\n• Sign in to the appropriate location of your PDF.\n• Scale up or down the size and format of the signature if necessary.\n• Remember to add it and save changes if you want to sign it in PDF.\n\nYou will have a smooth time by downloading the edited PDFs provided herein. You can save your edited documents directly to your device so that they will be easy to share or store when needed. Downloading in GoPDF is made easy, as users can easily retrieve their modified files to use at a later date.\n• Click the drop-down arrow labeled ‘download’ located in the toolbar.\n• Select the folder for downloaded files, if any.\n• The final step is clicking ‘download’, which will store the edited pdf on your machine.\n\nCreate push buttons, checkboxes, radio buttons, comboboxes, or listboxes. Adding an interactive feature to your PDF, Form Creation, enables you to interact with your audience and extract their personal information from the document. Static documents can be transformed as easily as possible with the help of GoPDF, which thus becomes a source of powerful information acquisition as well as communication with the users.\n\nCreate interactive items like push buttons, drop-down menus, check boxes, radio buttons, etc. inside your PDFs to make your forms more efficient and interesting.\n• Look for ‘form’ in your toolbar.\n• Once you click on the document, position the form element.\n• Adjust the attributes of the form element accordingly.\n• Include an interactive form in your PDF by saving your changes.\n\nUse of shapes for different purposes, such as rectangle, oval, line, arrow, polygon, and polyline Create customized PDFs of different shapes to create visual appeal and organization in your textual content. The versatile shape formatting in GoPDF allows users to design attractive material that breaks away from conventional body-oriented formatting.\n• The ‘Shapes’ option can be located on top of your document.\n• There are different shapes available, including rectangles, ovals, lines, arrows, polygons, and polylines.\n• Click on it to put it in your selected shape.\n• Resize, reposition, and change the style of the shape if necessary.\n• Incorporate the shape in your PDF by saving your changes to do that.\n\nThe merge PDF file feature can be used to combine several documents into a single coherent document. You can easily put together different files using the merge file feature incorporated in GoPDF. Such an aspect comes in handy in the consolidation of different sources’ information and the creation of a complete paper. It is crucial to note that GoPDF facilitates the file assembly process by allowing users to merge different files into one unified document.\n• Choose the files you would like to combine.\n• Combine the selected files into one PDF by clicking “Merge”.\n\nWith ‘Convert Files’, you can convert your PDF into various other formats in no time. The platform provides flexibility in using different output formats, like Word, Excel, or other options, for easy shareability and editable document options. The file conversion feature of GoPDF saves its users time by removing the need for any other software in order to transform one’s pdf files into editable versions.\n\nUse Convert File in order to transform your PDF into different formats.\n• Choose the output format you desire for.\n• Click “Convert” to convert the PDF into the desired format.\n• Convert and save the converted file on your computer disk.\n\n13-Zoom In and Out a PDF File\n\nWith various zoom options, for example, In, Out, Fit Page, Fit Width, Fit Visible and 50%–100%, you can customize your view. Ensure that the preferred view is tailored to you to enable a proper editing experience. Zoom functionality allows users to change the way they view the pages according to their needs, ensuring a comfortable editing process.\n\nZoom in and out of the viewing area in any direction you wish with more than one zoom mode.\n• Look for ‘zoom’ tabbed buttons on the toolbar.\n• Select preferred In/Out, Fit Page, Fit Visible, or Fit Width zoom settings or specify a precise percentage.\n• Click to change your document zoom level to that of the selection.\n\nUtilize the Password Protect PDF feature to ensure the security of your document. With regards to protecting your sensitive information, PDF editing online with GoPDF allows users to set passwords and remove other types of security measures. Secure storage of documents is the number one option offered by GoPDF as far as securing documents goes, providing users with all necessary tools to enhance the confidentiality of their documents. Encrypt or unencrypt the document using the Secure Document menu.\n• Click on ‘password protect’ if you would like to insert encryption, or click on remove security to remove existing protective measures.\n• To add or delete security for PDF, please save or discard the changes you made.\n\nIn this tutorial, we have shown you one of the simplest and effective ways of PDF Editing online by means of the available GoPDF’s toolkit. Complex edits follow these steps in a straightforward fashion such that no user suffers.\n\nSome platforms change the document’s format during editing, unlike GoPDF that offers direct amendments in the document without interfering with its layout. With GoPDF, you can easily edit your text, add media, and secure your documents.\n\nIn brief, the core lesson is that successful PDF editing online largely depends on understanding your tools. Today is no longer the case because with GoPDF you have everything that you need concerning making fast changes on your PDF documents using trial-and-error method without much time wastage. GoPDf- take your PDF Editing online to a higher level of effectiveness and simplicity!"
    },
    {
        "link": "https://github.com/signintech/gopdf/issues/109",
        "document": "Hi! I have created a go package called gofpdi (Go Free PDF Document Importer) that allows you to import PDFs. I have created a pull request that integrates gofpdi with gopdf, allowing you to embed a PDF into your GoPDF document."
    },
    {
        "link": "https://pkg.go.dev/github.com/Artui/gopdf",
        "document": "Attachment defines a content to be included in the pdf, in one of the following ways :\n\nFontDescType (font descriptor) specifies metrics and other attributes of a font, as distinct from the metrics of individual glyphs (as defined in the pdf specification).\n\nOpen provides an io.Reader for the specified font file (.json or .z). The file name never includes a path. Open returns an error if the specified file cannot be opened.\n\nFontLoader is used to read fonts (JSON font specification and zlib compressed font binaries) from arbitrary locations (e.g. files, zip files, embedded font resources).\n\nFpdf is the principal structure for creating a single PDF document"
    },
    {
        "link": "https://github.com/go-pdf/fpdf/blob/main/fpdf_example_test.go",
        "document": ""
    },
    {
        "link": "https://pkg.go.dev/github.com/jung-kurt/gofpdf",
        "document": "Attachment defines a content to be included in the pdf, in one of the following ways :\n\nFontDescType (font descriptor) specifies metrics and other attributes of a font, as distinct from the metrics of individual glyphs (as defined in the pdf specification).\n\nOpen provides an io.Reader for the specified font file (.json or .z). The file name never includes a path. Open returns an error if the specified file cannot be opened.\n\nFontLoader is used to read fonts (JSON font specification and zlib compressed font binaries) from arbitrary locations (e.g. files, zip files, embedded font resources).\n\nFpdf is the principal structure for creating a single PDF document"
    }
]