[
    {
        "link": "https://php.net/manual/en/language.constants.php",
        "document": "A constant is an identifier (name) for a simple value. As the name suggests, that value cannot change during the execution of the script (except for magic constants, which aren't actually constants). Constants are case-sensitive. By convention, constant identifiers are always uppercase. Prior to PHP 8.0.0, constants defined using the define() function may be case-insensitive. The name of a constant follows the same rules as any label in PHP. A valid constant name starts with a letter or underscore, followed by any number of letters, numbers, or underscores. As a regular expression, it would be expressed thusly: It is possible to define() constants with reserved or even invalid names, whose value can only be retrieved with the constant() function. However, doing so is not recommended. Tip See also the Userland Naming Guide. // This is valid, but should be avoided:\n\n// PHP may one day provide a magical constant\n\n// that will break your script\n\n Note: For our purposes here, a letter is a-z, A-Z, and the ASCII characters from 128 through 255 (0x80-0xff). Like superglobals, the scope of a constant is global. Constants can be accessed from anywhere in a script without regard to scope. For more information on scope, read the manual section on variable scope. Note: As of PHP 7.1.0, class constant may declare a visibility of protected or private, making them only available in the hierarchical scope of the class in which it is defined."
    },
    {
        "link": "https://w3schools.com/php/php_constants.asp",
        "document": "Constants are like variables, except that once they are defined they cannot be changed or undefined.\n\nA constant is an identifier (name) for a simple value. The value cannot be changed during the script.\n\nA valid constant name starts with a letter or underscore (no $ sign before the constant name).\n\nNote: Unlike variables, constants are automatically global across the entire script.\n\nTo create a constant, use the function.\n• name: Specifies the name of the constant\n• value: Specifies the value of the constant\n\nYou can also create a constant by using the keyword.\n\nFrom PHP7, you can create an Array constant using the function.\n\nConstants are automatically global and can be used across the entire script."
    },
    {
        "link": "https://php.net/manual/en/function.define.php",
        "document": "ravenswd at gmail dot com ¶ Be aware that if \"Notice\"-level error reporting is turned off, then trying to use a constant as a variable will result in it being interpreted as a string, if it has not been defined.\n\n\n\nI was working on a program which included a config file which contained:\n\n\n\n\n\nSince I wanted to remove the ability for uploads, I changed the file to read:\n\n\n\n\n\nHowever, to my surprise, the program was still allowing uploads. Digging deeper into the code, I discovered this:\n\n\n\n\n\nSince 'ENABLE_UPLOADS' was not defined as a constant, PHP was interpreting its use as a string constant, which of course evaluates as True.\n\n@SimoEast on Twitter ¶ Not sure why the docs omit this, but when attempting to define() a constant that has already been defined, it will fail, trigger an E_NOTICE and the constant's value will remain as it was originally defined (with the new value ignored).\n\n\n\n(Guess that's why they're called \"constants\".)\n\ndanbettles at yahoo dot co dot uk ¶ define() will define constants exactly as specified. So, if you want to define a constant in a namespace, you will need to specify the namespace in your call to define(), even if you're calling define() from within a namespace. The following examples will make it clear.\n\n\n\nThe following code will define the constant \"MESSAGE\" in the global namespace (i.e. \"\\MESSAGE\").\n\n\n\n\n\nThe following code will define two constants in the \"test\" namespace.\n\n\n\n\n\neparkerii at carolina dot rr dot com ¶ Found something interesting. The following define: \n\n \n\n \n\nWill return a '0'. \n\n \n\nWhereas this: \n\n \n\n \n\nWill return 'This is a test'. \n\n \n\nThis may be common knowledge but I only found out a few minutes ago. \n\n \n\n[EDIT BY danbrown AT php DOT net: The original poster is referring to the hyphens versus underscores. Hyphens do not work in defines or variables, which is expected behavior.]\n\nswisschocolate at cmail dot nu ¶ I think worth mentioning is that define() appears to ignore invalid constant names.\n\nOne immediate implication of this seem to be that if you use an invalid constant name you have to use constant() to access it and obviously that you can't use the return value from define() to tell you whether the constant name used is invalid or not.\n\n\n\nFor example:\n\n$name = '7(/!§%';\n\nvar_dump(define($name, \"hello\")); // outputs bool(true)\n\nvar_dump(constant($name)); // outputs string(5) \"hello\"\n\nAnonymous ¶ There's an undocumented side-effect of setting the third parameter to true (case-insensitive constants): these constants can actually be \"redefined\" as case-sensitive, unless it's all lowercase (which you shouldn't define anyway).\n\n\n\nThe fact is that case-sensitive constants are stored as is, while case-insensitive constants are stored in lowercase, internally. You're still allowed to define other constants with the same name but capitalized differently (except for all lowercase).\n\n\n\n\n\nWhy would you use this?\n\n\n\nA third party plugin might attempt to define a constant for which you already set a value. If it's fine for them to set the new value, assuming you cannot edit the plugin, you could define your constant case-insensitive. You can still access the original value, if needed, by using any capitalization other than the one the plugin uses. As a matter of fact, I can't think of another case where you would want a case-insensitive constant...\n\nme at mariusgerum dot de ¶ You can define constants with variable names (works also with constant values or variables or array values or class properties and so on - as long it's a valid constant name).\n\n\n\n\n\nNeedless to say that you'll lose your IDE support for refactoring and highlighting completely for such cases.\n\nNo clue why someone would / could actually use this but i thought it's worth mentioning."
    },
    {
        "link": "https://php.net/manual/en/language.oop5.constants.php",
        "document": "It is possible to define constants on a per-class basis remaining the same and unchangeable. The default visibility of class constants is . Class constants can be redefined by a child class. As of PHP 8.1.0, class constants cannot be redefined by a child class if it is defined as final. It's also possible for interfaces to have constants. Look at the interface documentation for examples. It's possible to reference the class using a variable. The variable's value can not be a keyword (e.g. , and ). Note that class constants are allocated once per class, and not for each class instance. Example #1 Defining and using a constant The special constant allows for fully qualified class name resolution at compile time, this is useful for namespaced classes: Example #4 Class constant visibility modifiers, as of PHP 7.1.0 Output of the above example in PHP 7.1: As of PHP 7.1.0 visibility modifiers are allowed for class constants. Example #5 Class constant visibility variance check, as of PHP 8.3.0 Output of the above example in PHP 8.3: Fatal error: Access level to MyClass::VALUE must be public (as in interface MyInterface) … Note: As of PHP 8.3.0 visibility variance is checked more strictly. Prior to this version, the visibility of a class constant could be different from the visibility of the constant in the implemented interface. Example #6 Fetch class constant syntax, as of PHP 8.3.0 As of PHP 8.3.0, class constants can be fetched dynamically using a variable."
    },
    {
        "link": "https://php.watch/versions/8.3/typed-constants",
        "document": "PHP 8.3 and later support declaring a type for PHP Class constants. This ensures type compatibility of the constants when child classes and interface implementation override them.\n\nPrior to PHP 8.3, it was not possible to programmatically enforce type compatibility.\n\nIn PHP 8.3 and later, class constants can declare a type after the keyword:\n\nThe necessity for types in class constants is in enforcing all subclasses that override class constants to not change the type of the constants.\n\nWhen a class constant is declared with a type, PHP enforces it on the declaration itself and subclasses/implementations following covariance. Further, PHP does not coerce constant values, and is always considered strictly typed.\n\nPHP fatal errors if a class constant is declared with a different type that the declaration:\n\nThe following are valid examples of class constants that use constant visibility modifiers (added in PHP 7.1), class constants (added in PHP 8.1), and support for constants in traits (added in PHP 8.3). Further, constants declared in Enums also support adding types to them.\n\nThe following types are not supported for class constant types:\n• and types: These types are only meant to be used as types.\n• : This type is context-dependent, and is not supported in typed properties either. However, the type is allowed.\n\nThe following declarations are not allowed:\n\nRegardless of the behavior declared in the PHP script, class constants are always evaluated strictly.\n\nSimilar to return types, class constant types can also be \"narrowed\", or kept the same in a sub-class or an implementation. This follows LSP.\n\nIf a class constant attempts to change or widen the declaration (which means they are incompatible), PHP emits a fatal error at compile time:\n\nOne noteworthy point is that if a parent class declares a constant type, all sub-classes must also declare a compatible type. Omitting the class constant type is considered an incompatible type.\n\nFor example, in the snippet below, is declared without a type. Because constant is declared with a type, this causes a fatal error:\n\nIn PHP 8.3, Zip, SNMP, and Phar core extensions declare class constants, which is a breaking change.\n\nIt is possible to retrieve the type of class constants using the Reflection API.\n\nThe class supports two additional methods in PHP 8.3:\n\nThe method returns whether the constant is declared with a constant.\n\nThe method returns if the class constant is declared with no type, or a object if a type is declared.\n\nClass constant type syntax is a backward incompatible change. PHP code that use class constant types do not compile in PHP at all, and results in a Parse error.\n\nNote that declaring a class constant type in a PHP class can be an API-incompatible change, because all sub-classes must also declare the constant type, or PHP emits a fatal error otherwise."
    },
    {
        "link": "https://stackoverflow.com/questions/48290075/send-a-message-to-a-telegram-bot-using-php",
        "document": "I'm trying to send a message to a Telegram Bot using CURL in this PHP code ...\n\nThe code runs with no error but no message is shown in my destination Telegram bot.\n\nThe token is what the BotFather give me when I created my destination Telegram bot (Use this token to access the HTTP API: )\n\nAny suggestion will be appreciated ..."
    },
    {
        "link": "https://stackoverflow.com/questions/32418338/telegram-botapi-send-message-to-multiple-chat-id",
        "document": "The problem with foreach or any other massive sendMessage is that the API will not allow more than ~30 messages to different users per second.\n\nAccording to Bots FAQ in telegram site:\n\nHow can I message all of my bot's subscribers at once?\n\n Unfortunately, at this moment we don't have methods for sending bulk messages, e.g. notifications. We may add something along these lines in the future.\n\n In order to avoid hitting our limits when sending out mass notifications, consider spreading them over longer intervals, e.g. 8-12 hours. The API will not allow more than ~30 messages to different users per second, if you go over that, you'll start getting 429 errors. You can't send message this way to all user.\n\nMy bot is hitting limits, how do I avoid this?\n\n When sending messages inside a particular chat, avoid sending more than one message per second. We may allow short bursts that go over this limit, but eventually you'll begin receiving 429 errors.\n\n If you're sending bulk notifications to multiple users, the API will not allow more than 30 messages per second or so. Consider spreading out notifications over large intervals of 8—12 hours for best results.\n\n Also note that your bot will not be able to send more than 20 messages per minute to the same group."
    },
    {
        "link": "https://dev.to/p1ngger/phptelegram-5-easy-ways-how-to-send-a-message-5an9",
        "document": "In the world of online communication, Telegram stands out as a popular messaging platform. If you're a developer, it might be useful to know how to easily send a message to Telegram from the code. This article will show you 5 easy ways to do it using PHP.\n\nTelegram provides a variety of API endpoints and methods, which can be found in the documentation.\n\nToday we're gonna focus on the sendMessage endpoint. It sends some text to the particular channel by the bot \n\n\n\nThere are a lot of ways to call this endpoint and send a message to the channel inside a PHP project. We will cover 5 of them.\n\nSymfony is one of the most popular PHP frameworks. It provides a lot of different components out of the box and one of them is HTTP Client. It allows you to make HTTP requests easily.\n\nAnd use it inside your service\n\n\n\nAnother Symfony component that can send a message to the Telegram channel is Telegram Notifier.\n\nAnd use it inside your service\n\n\n\nTelegram Bot SDK lets you develop Telegram Bots in PHP easily! Supports Laravel framework and comes with addons to enhance your bot development experience.\n\nThere are many ways to achieve the same goal. With so many options available, there's no definitive \"right\" way to send a Telegram message using PHP. The choice you make depends on your needs and the technologies you're working with. This article shows five simple ways to send messages to Telegram using PHP, in fact there are many more than five and it's up to you which one to use."
    },
    {
        "link": "https://gist.github.com/nafiesl/4ad622f344cd1dc3bb1ecbe468ff9f8a",
        "document": "\n• Get Chat ID for a Topic in a Group Chat\n• Follow the instruction until we get message like so Done! Congratulations on your new bot. You will find it at t.me/new_bot. You can now add a description..... Use this token to access the HTTP API: 63xxxxxx71:AAFoxxxxn0hwA-2TVSxxxNf4c Keep your token secure and store it safely, it can be used by anyone to control your bot. For a description of the Bot API, see this page: https://core.telegram.org/bots/api\n• So here is our bot token (make sure we don't share it to anyone).\n• Search and open our new Telegram bot\n• Open this URL in a browser\n• See we need to prefix our token with a word\n• We will see a json like so\n• Check the value of , and here is our Chat ID:\n• When we set the bot token and chat id correctly, the message should be arrived on our Telegram bot chat.\n• We will see a json like so\n• Check the value of , and here is our Chat ID:\n• When we set the bot token and chat id correctly, the message should be arrived on our Telegram channel.\n\nThe easiest way to get a group chat ID is through a Telegram desktop application.\n• Right click on the message and click\n• We will get a link like so:\n• So here is our Chat ID:\n• To use the group chat ID in the API, we need to prefix it with the number , like so:\n• Now let's try to send a message:\n• When we set the bot token and chat id correctly, the message should be arrived on our group chat.\n\nIn order to send a message to a specific topic on Telegram group, we need to get the topic ID.\n• Similar to steps above, after we click the , we will get a link like: , so the group Topic ID is .\n• Now we can use it like so (see ):\n• When we set the bot token and chat id correctly, the message should be arrived inside our group chat topic."
    },
    {
        "link": "https://github.com/php-telegram-bot/core/issues/1245",
        "document": "Right now, my php app has the ability to send email reminders to users via phpmailer.\n\n So i am looking for a telegram equivalent. The users cell / mobile phone number is stored in my app.\n\nHow do we do this using your library ?\n\n I have seen some tutorials in youtube but they are more about sending messages to a telegram group instead of individuals."
    }
]