[
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API",
        "document": "The system clipboard is a data buffer belonging to the operating system hosting the browser, which is used for short-term data storage and/or data transfers between documents or applications. It is usually implemented as an anonymous, temporary data buffer, sometimes called the paste buffer, that can be accessed from most or all programs within the environment via defined programming interfaces.\n\nThe Clipboard API allows users to programmatically read and write text and other kinds of data to and from the system clipboard in secure contexts, provided the user has met the criteria outlined in the Security considerations.\n\nEvents are fired as the result of , , and operations modifying the clipboard. The events have a default action, for example the action copies the current selection to the system clipboard by default. The default action can be overridden by the event handler — see each of the events for more information."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Clipboard",
        "document": "The interface of the Clipboard API provides read and write access to the contents of the system clipboard. This allows a web application to implement cut, copy, and paste features.\n\nThe system clipboard is exposed through the global property.\n\nAll of the Clipboard API methods operate asynchronously; they return a which is resolved once the clipboard access has been completed. The promise is rejected if clipboard access is denied.\n\nAll the methods require a secure context. Additional requirements for using the API are discussed in the Security consideration section of the API overview topic."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard",
        "document": "The following code uses to access the system clipboard in order to read text contents from the clipboard.\n\nThis snippet replaces the contents of the element whose class is with the text contents of the clipboard. Perhaps this code is being used in a browser extension that displays the current clipboard contents, automatically updating periodically or when specific events fire.\n\nIf the clipboard is empty or doesn't contain text, the element's contents are cleared. This happens because returns an empty string if the clipboard is empty or doesn't contain text."
    },
    {
        "link": "https://dev.to/salehmubashar/clipboard-api-in-javascript-p18",
        "document": "The Clipboard API in JavaScript allows you to read data from and write data to the system clipboard. This enables capabilities like copying text to the clipboard and pasting clipboard content into your web apps.\n\nThe method allows us to write data to the clipboard. The method returns a promise and takes 2 arguments:\n• The data to write (eg. string, text or DOM element/image)\n• The type of data. To copy plain text to the clipboard we can use the method above like this: ```javascript\n\nnavigator.clipboard.writeText('Sample text to save in clipboard!')\n\n .then(() => {\n\n console.log('Text copied!');\n\n })\n\n .catch(err => { \n\n console.error(err.message);\n\n });\n\n## Reading Data from the Clipboard The method `navigator.clipboard.read()` reads data from the clipboard and returns a promise. It takes one argument which is the type of data to read: - \"text/plain\" for plain text - \"text/html\" for HTML content - \"image/*\" for image data To read plain text from the clipboard, we can use the method above like this: ```javascript navigator.clipboard.readText() .then(text => { console.log(text); }) .catch(err => { console.error(err); });\n\nNow let's create a practical example. You may have seen on many websites a button that let's you copy a code or some link. Let's see how we can build it. The HTML/CSS is simple and can be see in the codepen given below.\n\n For the JavaScript, we will first get the paragraph or text element using . Next, we will create a function that will save the of the text element in the clipboard when the button is clicked.\n\nThank you for Reading!\n\n Check out this post on my Blog!"
    },
    {
        "link": "https://sitelint.com/blog/javascript-clipboard-api-with-fallback",
        "document": "Learn how to use the JavaScript Clipboard API with fallback solutions for older browsers and unsupported environments.\n\nThe Clipboard API in JavaScript provides a modern way to interact with the system clipboard, allowing reading from and writing to it programmatically. However, not all browsers support this API, or the API may not be available, so it’s important to implement a fallback solution for better compatibility. Let’s explore how to use the Clipboard API with a fallback mechanism.\n\nHere’s an example of how you can use the Clipboard API with a fallback:\n\nIn this example, the function checks if the object is available. If it is, the function uses the method to copy the text to the clipboard. If the object is not available, the function creates a temporary element, sets its value to the text to be copied, selects the text, and uses the method to copy the text to the clipboard. Note that the is a method that checks whether the command is supported by the browser.\n\nThe may not be available for the following reasons:\n• Older browser: the older browsers might not support the Clipboard API. You can check the browser compatibility on the MDN Web Docs website.\n• Node.js environment: the Clipboard API is not available in Node.js environments, as it’s a browser-specific feature.\n• Web Worker: in some cases, the Clipboard API might not be available in Web Workers. This typically means that the worker must be running in a context that has a visible window or a frame, and that the worker has been granted permission to access the clipboard.\n• Security restrictions: some browsers or environments might restrict access to the Clipboard API due to security concerns. If your website is not using SSL, you will not be able to use the Clipboard API.\n• Permissions: the Clipboard API requires permission to access the clipboard. If the permission is not granted, the API will not be available.\n\nHere’s an example of how to use the JavaScript Clipboard API to copy text to the clipboard:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Interact_with_the_clipboard",
        "document": "Working with the clipboard in extensions is transitioning from the Web API method (which is deprecated) to the method. Note: The API is a recent addition to the specification and may not be fully implemented in all browsers. This article describes some limitations, but be sure to review the compatibility tables for each method before using them to ensure that the API supports your needs. The difference between the two APIs is that this is analogous to the keyboard copy, cut, and paste actions – exchanging data between a webpage and clipboard – whereas writes and reads arbitrary data to and from the clipboard.\n• images, rich text, HTML, and other rich content, using and . However, while and work on all browsers, and do not. For example, on Firefox at the time of writing, and are not fully implemented, such that to:\n• work with images use to write images to the clipboard and to paste images to a webpage.\n• write rich content (such as, HTML, rich text including images, etc.) to the clipboard, use or . Then, either (recommended) or to read the content from the clipboard.\n\nThe Clipboard API writes arbitrary data to the clipboard from your extension. Using the API requires the permission or in your file. As the API is only available to Secure Contexts, it cannot be used from a content script running on -pages, only -pages. For page scripts, the permission needs to be requested using the Web API . You can check for that permission using : navigator.permissions.query({ name: \"clipboard-write\" }).then((result) => { if (result.state === \"granted\" || result.state === \"prompt\") { /* write to the clipboard now */ } }); Note: The permission name is not supported in Firefox, only Chromium browsers. This function takes a string and writes it to the clipboard:\n\nThe and commands of the method are used to replace the clipboard's content with the selected material. These commands can be used without any special permission in short-lived event handlers for a user action (for example, a click handler). For example, suppose you've got a popup that includes the following HTML: To make the button copy the contents of the element, you can use code like this: Because the call is inside a click event handler, you don't need any special permissions. However, let's say that instead you trigger the copy from an alarm: Depending on the browser, this may not work. On Firefox, it will not work, and you'll see a message like this in your console: document.execCommand('cut'/'copy') was denied because it was not called from inside a short running user-generated event handler. To enable this use case, you need to ask for the permission. So: enables you to write to the clipboard outside a short-lived event handler for a user action. Note: does not work on input fields of , with the HTML5 attribute , or any matching CSS rule using . So, to add a \"copy to clipboard\" button to a , , or tag, you need to use a workaround, such as setting the input's position to absolute and moving it out of the viewport.\n\nThe Clipboard API's and methods let you read arbitrary text or binary data from the clipboard in secure contexts. This lets you access the data in the clipboard without pasting it into an editable element. Once you have the permission from the Permissions API, you can read from the clipboard easily. For example, this snippet of code fetches the text from the clipboard and replaces the contents of the element with the ID with that text."
    },
    {
        "link": "https://stackoverflow.com/questions/60217202/copy-text-to-clipboard-now-that-execcommandcopy-is-obsolete",
        "document": "I just saw on the Mozilla page that execCommand() is obsolete https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand\n\n\"This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.\"\n\nThis is what I currently use to copy text to the user's clipboard when the user clicks a \"copy text\" button. Is there another way to do it?\n\nEdit: This How do I copy to the clipboard in JavaScript? does not answer the question. It suggests the same obsolete solution."
    },
    {
        "link": "https://medium.com/geekculture/explore-clipboard-operation-in-javascript-c6399619c0ac",
        "document": "Clipboard API is the next-generation clipboard operation method, which is more powerful and reasonable than the traditional method. All its operations are asynchronous and return Promise objects without causing page jams. Moreover, it can put arbitrary content (such as pictures) into the clipboard. The property returns the Clipboard object, and all operations are performed through this object.\n\nIf the property returns , it means that the current browser does not support this API (you can see the full compatibly table on Can I use…). Since users may put sensitive data (such as passwords) on the clipboard, allowing scripts to read them arbitrarily will cause security risks, so this API has more security restrictions. First of all, the Chrome browser stipulates that only HTTPS protocol pages can use this API. However, the development environment ( ) allows the use of non-encrypted protocols. Secondly, the user’s permission needs to be clearly obtained when calling. The specific implementation of permissions uses the Permissions API. There are two permissions related to the clipboard: (write permission) and (read permission). The “write permission” is automatically granted to the script, and the “read permission” must be explicitly granted by the user. In other words, the script can be automatically completed when writing to the clipboard, but when reading the clipboard, the browser will pop up a dialog box asking whether the user agrees to read.\n\nIn addition, it should be noted that what the script reads is always the clipboard of the current page. One problem that this brings is that if you paste the relevant code into the developer tool and run it directly, an error may be reported because the current page at this time is the window of the developer tool, not a web page.\n\nIf you paste the above code into the developer tool and run it, an error will be reported. Because when the code is running, the developer tool window is the current page, and there is no DOM interface that the Clipboard API depends on this page. One solution is to put the relevant code in setTimeout() to delay running, and quickly click on the page window of the browser before calling the function to turn it into the current page.\n\nAfter the above code is pasted into the developer tool to run, quickly click on the page window of the webpage to make it the current page, so that no error will be reported.\n\nThe method is used to copy the text data in the clipboard.\n\nIn the above example, after the user clicks on the page, the text in the clipboard will be output. Note that the browser will pop up a dialog box at this time, asking the user whether to agree with the script to read the clipboard.\n\nIf the user disagrees, the script will report an error. At this time, you can use the structure to handle errors.\n\nThe method is used to copy the data in the clipboard, which can be text data or binary data (such as pictures). This method requires explicit permission from the user. This method returns a Promise object. Once the state of the object becomes resolved, an array can be obtained, and each array member is an instance of a ClipboardItem object.\n\nThe ClipboardItem object represents a single clip item and each clip item has a property and a method. The property returns an array whose members are the MIME types available for the clip item. For example, a clip item can be pasted in HTML format or in plain text format. Then it has two MIME types ( and ). The method is used to read the data of the clip item and returns a Promise object. This method accepts the MIME type of the clip item as a parameter and returns the data of that type. This parameter is required, otherwise, an error will be reported.\n\nThe method is used to write text content to the clipboard.\n\nThe above example is that after the user clicks on the web page, the script writes text data to the clipboard. This method does not require user permission, but it is best to put it in to prevent errors.\n\nThe method is used to write arbitrary data to the clipboard, which can be text data or binary data. This method accepts a ClipboardItem instance as a parameter, which represents the data written to the clipboard.\n\nIn the above example, the script writes a picture to the clipboard. Note that the Chrome browser currently (until this writer writes this article) only supports writing images in PNG format. is a constructor natively provided by the browser to generate an instance of . It accepts an object as a parameter. The key name of the object is the MIME type of the data, and the key value is the data itself. The following example is to write the value of the same clip item in multiple formats to the clipboard, one is text data, and the other is binary data for pasting on different occasions."
    },
    {
        "link": "https://stackoverflow.com/questions/60581285/execcommand-is-now-obsolete-whats-the-alternative",
        "document": "I created the Rich Editor for my platform's XML (HTML5 + XHTML) editing purposes. I would not say that is completely dead because some parts of it still work fine. Unfortunately the primary issue for me was that browsers use a lot of different code to generate those styles which are not recognized by screen readers used by those who are blind or nearly so.\n\nAdditionally the most expensive time bug I ever had to conquer was a Gecko/Presto bug where the visual and technical selections (why they aren't the same thing, don't ask me) would result in part of the DOM being changed that the user did not intend and this would come down to the fact that the pixel count per character is low so if the Rich Editor did not honor visual selections a user would very quickly walk away. That required four months to conquer and there are other bugs too.\n\nUltimately it's a harsh though achievable endeavor though if you intend to build an HTML/XML editor like I did you should plan for at least six months if you plan to not only do it properly though test it to the point of hating cake to then only have someone come along and point out yet another bug.\n\nYour primary focus JavaScript wise should be on the following:\n\nIn place of inconsistent code generated by using from different browsers (often setting inline styling which would complicate your site's CSS if not outright negating it) you should stick to using the following elements which you not only can have control over though are compatible with screen readers:\n• for emphasis (or \"italics\", is deprecated).\n• for strongly read text (or \"bold\", is deprecated).\n• for underline (be sure your anchors are styled to differentiate from u elements; might be considered \"deprecated\" though I will reverse this when I fix the standards in the next ten years or so, use it appropriately).\n• for sub-line text that appears vertically lower than normal text.\n• for supper-line text that appears vertically higher than normal text.\n• Do not use the element to specifically add these styles as screen readers will not understand or reveal buggy behavior; it is still a valid generic inline element when used appropriately.\n\nI actually have been intending to revise my Rich Editor (it's been getting patched though not yet properly rewritten) though you're welcome to look at the source code when it loads on a blog page in the site linked in my profile. The original project took me 11 months though with my experience now I think it would take me about three to four. If you're serious I highly recommend staying the hell away from frameworks and libraries. \"But ... but, they make life easier!\" ... until you want to use a new version and have to rewrite the entire project. Use pure JavaScript the first time and negate pointless maintenance. Good luck!\n\n2021-09-24: I ended up resuming work on the Rich Editor II from roughly a year ago and managed to convert the code that changed styles from 100,515 characters to ~6,000 and reduce the file request (effective bandwidth after compression) by a full third. Here are the key parts to that success:\n• None The and can switch depending on if you select left-to-right or right-to-left. Because I couldn't find any justification of why that would matter (for my platform) I made the object (for ) on the left and the object (for ) always on the right side.\n• None I resolved the Gecko/Presto issue using ~1,700 characters; you can find it on the site (visit a page that has a Rich form) first.\n• None To resolve the issue of selecting through numerous interchanges by , , , etc (you must test both simple and wildly convoluted examples) I ended up using with and then before processing that stripped what wasn't included in the selection. Then I simply used to remove the selection and replace it with the new style element via that I could easily the selection to and insert it at .\n\nGecko browsers such as Waterfox, Pale Moon and the now utterly destroyed Firefox allow you to select multiple instances of text. To do so simply hold the key to create extra selections. Since it doesn't really help in any meaningful way (and this stuff is already convoluted enough as it is) I didn't go out of my way to support it at this time.\n\nI'll be updating my platform either today or this weekend (as of this post edit) to reflect the new changes. I am keeping a lot of the older code due to numerous issues with Gecko browsers. I have expanded upon the functionality and resolved numerous bugs and did not have to resort to any hacks and as usual no garage (frameworks or libraries).\n\n2021-09-26: For those interested in redo/undo functionality you'll have to resort to basically keeping text versions of the part of the DOM that you're editing. Sure, there could be other ways to implement it though those would be wildly convoluted. You basically just make a copy of the editor parent element using and then while it's in memory use something along the lines of . Since you'll be storing it as text it won't have the huge memory implications that the DOM has. You will literally be replacing the entire DOM in the editor as well as tracking every iteration of a change so it'll still be a hefty project. For my platform it's not necessary right now though I wanted to cover this as some people have mentioned it in the comments."
    },
    {
        "link": "https://sitepoint.com/clipboard-api",
        "document": "Cut, Copy and Paste in JavaScript with the Clipboard API\n\nAccessing the OS clipboard using browser JavaScript has been possible for several years using , but we now have a better option in the asynchronous Clipboard API.\n\nUnfortunately, there are some problems with :\n• clipboard access is synchronous, which has performance and security implications\n• support is patchy, especially on older versions of Safari on macOS and iOS\n• the API could never be considered elegant\n\nIt’s finally been superseded by a new asynchronous Clipboard API. It’s new, and no browser supports all features, but it’s easier to use and more robust.\n• The asynchronous Clipboard API in JavaScript is a more efficient and robust method for accessing the OS clipboard than the older document.execCommand() method. It has better performance and security, and is easier to use, although not all browsers support all its features yet.\n• The Clipboard API can be used to enhance user experience by providing easy-to-use cut, copy, and paste icons, especially for less tech-savvy users or those using touch-screen devices. It can also be used to modify content when a clipboard action is completed.\n• Due to potential security risks, the Clipboard API can only be used on pages served over HTTPS and requires user interaction such as a click to be triggered. It also requires permissions for clipboard-read and clipboard-write when running in an iframe.\n\nWhy Would an App Need to Access the Clipboard?\n\nAs a developer, you’ll know how the clipboard works and regularly use the following keyboard shortcuts:\n\nThose with less computing experience won’t necessarily have that knowledge. They may also be using a touch-screen device where keyboard shortcuts aren’t available. Offering easy-to-use cut and paste icons can be useful.\n\nAdditionally, you may want to modify content when a clipboard action is completed, such as adding or removing formatting.\n• Users often copy passwords or private information so no page should be able to arbitrarily read clipboard data.\n• Pages should be restricted when adding data to the clipboard. A nefarious page could replace copied text with a dangerous command or even an executable file.\n\nTo avoid potential issues, the Clipboard API can only be used on pages served over HTTPS ( is also permitted). When running in an iframe, the parent page must also grant and/or permissions:\n\nThe API is only available to the active browser tab (not background tabs) and can only be triggered by a user interaction such as a click. When necessary, the user will be prompted for permission to read clipboard data:\n\nThis alert is shown when a page first requests clipboard access. It shouldn’t cause any issues, given that the API is asynchronous and returns a Promise. It’s also possible to examine and request the status using the Permissions API.\n\nThe Clipboard API is available when returns a truthy result. For example:\n\nHowever, this doesn’t guarantee the browser supports all features, so it’s necessary to make further checks. For example, at the time of writing, Chrome supports the API’s readText() method, while Firefox doesn’t.\n\nCopying and pasting text will be a useful option in most applications. The API is refreshingly simple:\n\nYou’ll require considerably more code to detect support and handle errors …\n\nThe code can be downloaded from GitHub. Refer to clipboardtext.js for the JavaScript.\n\nThis example implements text copying when a attribute is added any HTML element such as a button. You can set this value to either of these:\n• a hard-coded string — such as data-copy=\"copy this to the clipboard\" .\n• a CSS selector — such as . The text content of the first matching element is then copied.\n\nOptionally, you can set a custom success message in a attribute:\n\nThe button is only shown when is supported. When clicked, the JavaScript event handler locates the text, copies it to the clipboard, and shows an animated success message.\n\nThe text paste button is very similar except it defines a attribute which must point to a DOM node:\n\nThe Clipboard API’s and are convenience options for the more generic and methods. These have less browser support but are able to copy and paste any type of data such as binary images.\n\nCopying requires blob data typically returned by a or method. This is passed to a constructor so it can be written to the clipboard:\n\nPasting is more complex because multiple objects can be returned with differing content types. It’s therefore necessary to iterate through each type until a useful format is found. For example:\n\nThe code can be downloaded from GitHub. Refer to clipboardblob.js for the JavaScript.\n\nThis works in a similar way to the text demonstration, in that copy and paste buttons must point to DOM elements using a CSS selector in and attributes. For example:\n\nTry copying image data from a graphics application, then use the paste button.\n\nThe , , and events fire whenever the user initiates a clipboard action in the browser — typically with right-click menus or the keyboard shortcuts mentioned above. This is supported in most browsers and handler functions can intercept the events to make changes using a object passed as a parameter.\n\nThe following function forces all cut or copied text to be uppercase. Note that stops the default cut/copy action which would override it:\n\nThe following code attaches a paste handler to a specific field. The function clears the existing content and prefixes the text :\n\nThe code can be downloaded from GitHub. Refer to demoevent.html for the JavaScript.\n\nThe Clipboard API is new but has reasonable browser support and feels more robust than the old option.\n\nIt’s best added as a progressive enhancement so cut, copy, and paste functionality is only implemented in your application when the facility is available. Please use the code provided here if you want a head start.\n\nFAQs about the Clipboard API in JavaScript"
    }
]