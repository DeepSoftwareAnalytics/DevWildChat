[
    {
        "link": "https://geeksforgeeks.org/python-output-using-print-function",
        "document": "Python print() function prints the message to the screen or any other standard output device. In this article, we will cover about print() function in Python as well as it’s various operations.\n\nThough it is not necessary to pass arguments in print() function, it requires an empty parenthesis at the end that tells Python to execute the function rather than calling it by name. Now, let’s explore the optional arguments that can be used with the print() function.\n\nIn this example, we have 2 variables integer and string. We are printing all variables with print() function.\n\nYou can pass variables, strings, numbers, or other data types as one or more parameters when using the print() function. Then, these parameters are represented as strings by their respective str() functions. To create a single output string, the transformed strings are concatenated with spaces between them.\n\nIn this code, we are passing two parameters name and age to the print function.\n\nString literals in Python’s print statement are primarily used to format or design how a specific string appears when printed using the print() function.\n• : This string literal is used to add a new blank line while printing a statement.\n• “”: An empty quote (“”) is used to print an empty line.\n\nThis code uses \n\n to print the data to the new line.\n\nIn this example, we are concatenating strings inside print() function.\n\nThe end keyword is used to specify the content that is to be printed at the end of the execution of the print() function. By default, it is set to “\n\n”, which leads to the change of line after the execution of print() statement.\n\nThe print() function can accept any number of positional arguments. To separate these positional arguments, the keyword argument “sep” is used.\n\nThis code is showing that how can we use sep argument for multiple variables.\n\nNote: As sep, end, flush, and file are keyword arguments their position does not change the result of the code. \n\n\n\nThis code is writing the data in the print() function to the text file.\n\nHow to Format Output with\n\nHow to Print Without a Newline in Python?"
    },
    {
        "link": "https://realpython.com/python-print",
        "document": "If you’re like most Python users, including me, then you probably started your Python journey by learning about . It helped you write your very own one-liner. You can use it to display formatted messages onto the screen and perhaps find some bugs. But if you think that’s all there is to know about Python’s function, then you’re missing out on a lot!\n\nKeep reading to take full advantage of this seemingly boring and unappreciated little function. This tutorial will get you up to speed with using Python effectively. However, prepare for a deep dive as you go through the sections. You may be surprised how much has to offer!\n\nBy the end of this tutorial, you’ll know how to:\n\nIf you’re a complete beginner, then you’ll benefit most from reading the first part of this tutorial, which illustrates the essentials of printing in Python. Otherwise, feel free to skip that part and jump around as you see fit.\n\nLet’s jump in by looking at a few real-life examples of printing in Python. By the end of this section, you’ll know every possible way of calling . Or, in programmer lingo, you’d say you’ll be familiar with the function signature. The simplest example of using Python requires just a few keystrokes: You don’t pass any arguments, but you still need to put empty parentheses at the end, which tell Python to actually execute the function rather than just refer to it by name. This will produce an invisible newline character, which in turn will cause a blank line to appear on your screen. You can call multiple times like this to add vertical space. It’s just as if you were hitting on your keyboard in a word processor. A newline character is a special control character used to indicate the end of a line (EOL). It usually doesn’t have a visible representation on the screen, but some text editors can display such non-printable characters with little graphics. The word “character” is somewhat of a misnomer in this case, because a newline is often more than one character long. For example, the Windows operating system, as well as the HTTP protocol, represent newlines with a pair of characters. Sometimes you need to take those differences into account to design truly portable programs. To find out what constitutes a newline in your operating system, use Python’s built-in module. This will immediately tell you that Windows and DOS represent the newline as a sequence of followed by : On Unix, Linux, and recent versions of macOS, it’s a single character: The classic Mac OS X, however, sticks to its own “think different” philosophy by choosing yet another representation: Notice how these characters appear in string literals. They use special syntax with a preceding backslash ( ) to denote the start of an escape character sequence. Such sequences allow for representing control characters, which would be otherwise invisible on screen. Most programming languages come with a predefined set of escape sequences for special characters such as these:\n• : newline, also known as line feed (LF) The last two are reminiscent of mechanical typewriters, which required two separate commands to insert a newline. The first command would move the carriage back to the beginning of the current line, while the second one would advance the roll to the next line. By comparing the corresponding ASCII character codes, you’ll see that putting a backslash in front of a character changes its meaning completely. However, not all characters allow for this–only the special ones. To compare ASCII character codes, you may want to use the built-in function: Keep in mind that, in order to form a correct escape sequence, there must be no space between the backslash character and a letter! As you just saw, calling without arguments results in a blank line, which is a line comprised solely of the newline character. Don’t confuse this with an empty line, which doesn’t contain any characters at all, not even the newline! You can use Python’s string literals to visualize these two: The first one is one character long, whereas the second one has no content. Note: To remove the newline character from a string in Python, use its method, like this: This strips any trailing whitespace from the right edge of the string of characters. In a more common scenario, you’d want to communicate some message to the end user. There are a few ways to achieve this. First, you may pass a string literal directly to : 'Please wait while the program is loading...' This will print the message verbatim onto the screen. String literals in Python can be enclosed either in single quotes ( ) or double quotes ( ). According to the official PEP 8 style guide, you should just pick one and keep using it consistently. There’s no difference, unless you need to nest one in another. For example, you can’t use double quotes for the literal and also include double quotes inside of it, because that’s ambiguous for the Python interpreter: What you want to do is enclose the text, which contains double quotes, within single quotes: The same trick would work the other way around: Alternatively, you could use escape character sequences mentioned earlier, to make Python treat those internal double quotes literally as part of the string literal: Escaping is fine and dandy, but it can sometimes get in the way. Specifically, when you need your string to contain relatively many backslash characters in literal form. One classic example is a file path on Windows: Notice how each backslash character needs to be escaped with yet another backslash. This is even more prominent with regular expressions, which quickly get convoluted due to the heavy use of special characters: Fortunately, you can turn off character escaping entirely with the help of raw-string literals. Simply prepend an or before the opening quote, and now you end up with this: That’s much better, isn’t it? There are a few more prefixes that give special meaning to string literals in Python, but you won’t get into them here. Lastly, you can define multi-line string literals by enclosing them between or , which are often used as docstrings. To prevent an initial newline, simply put the text right after the opening : You can also use a backslash to get rid of the newline: To remove indentation from a multi-line string, you might take advantage of the built-in module: This will take care of unindenting paragraphs for you. There are also a few other useful functions in for text alignment you’d find in a word processor. Secondly, you could extract that message into its own variable with a meaningful name to enhance readability and promote code reuse: 'Please wait while the program is loading...' Lastly, you could pass an expression, like string concatenation, to be evaluated before printing the result: Hello, jdoe! How are you? In fact, there are a dozen ways to format messages in Python. I highly encourage you to take a look at f-strings, introduced in Python 3.6, because they offer the most concise syntax of them all: Moreover, f-strings will prevent you from making a common mistake, which is forgetting to type cast concatenated operands. Python is a strongly typed language, which means it won’t allow you to do this: File , line , in : can only concatenate str (not \"int\") to str That’s wrong because adding numbers to strings doesn’t make sense. You need to explicitly convert the number to string first, in order to join them together: Unless you handle such errors yourself, the Python interpreter will let you know about a problem by showing a traceback. Note: is a global built-in function that converts an object into its string representation. You can call it directly on any object, for example, a number: Built-in data types have a predefined string representation out of the box, but later in this article, you’ll find out how to provide one for your custom classes. As with any function, it doesn’t matter whether you pass a literal, a variable, or an expression. Unlike many other functions, however, will accept anything regardless of its type. So far, you only looked at the string, but how about other data types? Let’s try literals of different built-in types and see what comes out: Watch out for the constant, though. Despite being used to indicate an absence of a value, it will show up as rather than an empty string: How does know how to work with all these different types? Well, the short answer is that it doesn’t. It implicitly calls behind the scenes to type cast any object into a string. Afterward, it treats strings in a uniform way. Later in this tutorial, you’ll learn how to use this mechanism for printing custom data types such as your classes. Okay, you’re now able to call with a single argument or without any arguments. You know how to print fixed or formatted messages onto the screen. The next subsection will expand on message formatting a little bit. To achieve the same result in the previous language generation, you’d normally want to drop the parentheses enclosing the text: That’s because wasn’t a function back then, as you’ll see in the next section. Note, however, that in some cases parentheses in Python are redundant. It wouldn’t harm to include them as they’d just get ignored. Does that mean you should be using the statement as if it were a function? Absolutely not! For example, parentheses enclosing a single expression or a literal are optional. Both instructions produce the same result in Python 2: Round brackets are actually part of the expression rather than the statement. If your expression happens to contain only one item, then it’s as if you didn’t include the brackets at all. On the other hand, putting parentheses around multiple items forms a tuple: This is a known source of confusion. In fact, you’d also get a tuple by appending a trailing comma to the only item surrounded by parentheses: The bottom line is that you shouldn’t call with brackets in Python 2. Although, to be completely accurate, you can work around this with the help of a import, which you’ll read more about in the relevant section. You saw called without any arguments to produce a blank line and then called with a single argument to display either a fixed or a formatted message. However, it turns out that this function can accept any number of positional arguments, including zero, one, or more arguments. That’s very handy in a common case of message formatting, where you’d want to join a few elements together. Arguments can be passed to a function in one of several ways. One way is by explicitly naming the arguments when you’re calling the function, like this: Since arguments can be uniquely identified by name, their order doesn’t matter. Swapping them out will still give the same result: Conversely, arguments passed without names are identified by their position. That’s why positional arguments need to follow strictly the order imposed by the function signature: allows an arbitrary number of positional arguments thanks to the parameter. Let’s have a look at this example: My name is jdoe and I am 42 concatenated all four arguments passed to it, and it inserted a single space between them so that you didn’t end up with a squashed message like . Notice that it also took care of proper type casting by implicitly calling on each argument before joining them together. If you recall from the previous subsection, a naïve concatenation may easily result in an error due to incompatible types: File , line , in : can only concatenate str (not \"int\") to str Apart from accepting a variable number of positional arguments, defines four named or keyword arguments, which are optional since they all have default values. You can view their brief documentation by calling from the interactive interpreter. Let’s focus on just for now. It stands for separator and is assigned a single space ( ) by default. It determines the value to join elements with. It has to be either a string or , but the latter has the same effect as the default space: If you wanted to suppress the separator completely, you’d have to pass an empty string ( ) instead: You may want to join its arguments as separate lines. In that case, simply pass the escaped newline character described earlier: A more useful example of the parameter would be printing something like file paths: Remember that the separator comes between the elements, not around them, so you need to account for that in one way or another: Specifically, you can insert a slash character ( ) into the first positional argument, or use an empty string as the first argument to enforce the leading slash. Note: Be careful about joining elements of a list or tuple. Doing it manually will result in a well-known if at least one of the elements isn’t a string: It’s safer to just unpack the sequence with the star operator ( ) and let handle type casting: Unpacking is effectively the same as calling with individual elements of the list. One more interesting example could be exporting data to a comma-separated values (CSV) format: This wouldn’t handle edge cases such as escaping commas correctly, but for simple use cases, it should do. The line above would show up in your terminal window. In order to save it to a file, you’d have to redirect the output. Later in this section, you’ll see how to use to write text to files straight from Python. Finally, the parameter isn’t constrained to a single character only. You can join elements with strings of any length: In the upcoming subsections, you’ll explore the remaining keyword arguments of the function. To print multiple elements in Python 2, you must drop the parentheses around them, just like before: My name is jdoe and I am 42 If you kept them, on the other hand, you’d be passing a single tuple element to the statement: Moreover, there’s no way of altering the default separator of joined elements in Python 2, so one workaround is to use string interpolation like so: My name is jdoe and I am 42 That was the default way of formatting strings until the method got backported from Python 3. Sometimes you don’t want to end your message with a trailing newline so that subsequent calls to will continue on the same line. Classic examples include updating the progress of a long-running operation or prompting the user for input. In the latter case, you want the user to type in the answer on the same line: Are you sure you want to do this? [y/n] y Many programming languages expose functions similar to through their standard libraries, but they let you decide whether to add a newline or not. For example, in Java and C#, you have two distinct functions, while other languages require you to explicitly append at the end of a string literal. Here are a few examples of syntax in such languages: In contrast, Python’s function always adds without asking, because that’s what you want in most cases. To disable it, you can take advantage of yet another keyword argument, , which dictates what to end the line with. In terms of semantics, the parameter is almost identical to the one that you saw earlier:\n• It must be a string or .\n• It can be arbitrarily long.\n• It has a default value of .\n• If equal to , it’ll have the same effect as the default value.\n• If equal to an empty string ( ), it’ll suppress the newline. Now you understand what’s happening under the hood when you’re calling without arguments. Since you don’t provide any positional arguments to the function, there’s nothing to be joined, and so the default separator isn’t used at all. However, the default value of still applies, and a blank line shows up. Note: You may be wondering why the parameter has a fixed default value rather than whatever makes sense on your operating system. Well, you don’t have to worry about newline representation across different operating systems when printing, because will handle the conversion automatically. Just remember to always use the escape sequence in string literals. This is currently the most portable way of printing a newline character in Python: If you were to try to forcefully print a Windows-specific newline character on a Linux machine, for example, you’d end up with broken output: On the flip side, when you open a file for reading with , you don’t need to care about newline representation either. The function will translate any system-specific newline it encounters into a universal . At the same time, you have control over how the newlines should be treated both on input and output if you really need that. To disable the newline, you must specify an empty string through the keyword argument: Even though these are two separate calls, which can execute a long time apart, you’ll eventually see only one line. First, it’ll look like this: However, after the second call to , the same line will appear on the screen as: As with , you can use to join individual pieces into a big blob of text with a custom separator. Instead of joining multiple arguments, however, it’ll append text from each function call to the same line: These three instructions will output a single line of text: The first sentence. The second sentence. The last sentence. You can mix the two keyword arguments: Not only do you get a single line of text, but all items are separated with a comma: There’s nothing to stop you from using the newline character with some extra padding around it: It would print out the following piece of text: As you can see, the keyword argument will accept arbitrary strings. Note: Looping over lines in a text file preserves their own newline characters, which combined with the function’s default behavior will result in a redundant newline character: There are two newlines after each line of text. You want to strip one of the them, as shown earlier in this article, before printing the line: Alternatively, you can keep the newline in the content but suppress the one appended by automatically. You’d use the keyword argument to do that: By ending a line with an empty string, you effectively disable one of the newlines. You’re getting more acquainted with printing in Python, but there’s still a lot of useful information ahead. In the upcoming subsection, you’ll learn how to intercept and redirect the function’s output. Preventing a line break in Python 2 requires that you append a trailing comma to the expression: However, that’s not ideal because it also adds an unwanted space, which would translate to instead of in Python 3. You can test this with the following code snippet: Notice there’s a space between the words and : BEFORE hello AFTER In order to get the expected result, you’d need to use one of the tricks explained later, which is either importing the function from or falling back to the module: This will print the correct output without extra space: While using the module gives you control over what gets printed to the standard output, the code becomes a little bit more cluttered. Believe it or not, doesn’t know how to turn messages into text on your screen, and frankly it doesn’t need to. That’s a job for lower-level layers of code, which understand bytes and know how to push them around. is an abstraction over these layers, providing a convenient interface that merely delegates the actual printing to a stream or file-like object. A stream can be any file on your disk, a network socket, or perhaps an in-memory buffer. In addition to this, there are three standard streams provided by the operating system: Standard output is what you see in the terminal when you run various command-line programs including your own Python scripts: cat hello.py print('This will appear on stdout') python hello.py This will appear on stdout Unless otherwise instructed, will default to writing to standard output. However, you can tell your operating system to temporarily swap out for a file stream, so that any output ends up in that file rather than the screen: python hello.py > file.txt cat file.txt This will appear on stdout The standard error is similar to in that it also shows up on the screen. Nonetheless, it’s a separate stream, whose purpose is to log error messages for diagnostics. By redirecting one or both of them, you can keep things clean. Note: To redirect , you need to know about file descriptors, also known as file handles. They’re arbitrary, albeit constant, numbers associated with standard streams. Below, you’ll find a summary of the file descriptors for a family of POSIX-compliant operating systems: Knowing those descriptors allows you to redirect one or more streams at a time: Redirect and to the same file Note that is the same as . Some programs use different coloring to distinguish between messages printed to and : While both and are write-only, is read-only. You can think of standard input as your keyboard, but just like with the other two, you can swap out for a file to read data from. In Python, you can access all standard streams through the built-in module: As you can see, these predefined values resemble file-like objects with and attributes as well as and methods among many others. By default, is bound to through its argument, but you can change that. Use that keyword argument to indicate a file that was open in write or append mode, so that messages go straight to it: This will make your code immune to stream redirection at the operating system level, which might or might not be desired. For more information on working with files in Python, you can check out Reading and Writing Files in Python (Guide). Note: Don’t try using for writing binary data as it’s only well suited for text. If you wanted to write raw bytes on the standard output, then this will fail too because is a character stream: File , line , in : write() argument must be str, not bytes You must dig deeper to get a handle of the underlying byte stream instead: This prints an uppercase letter and a newline character, which correspond to decimal values of 65 and 10 in ASCII. However, they’re encoded using hexadecimal notation in the bytes literal. Note that has no control over character encoding. It’s the stream’s responsibility to encode received Unicode strings into bytes correctly. In most cases, you won’t set the encoding yourself, because the default UTF-8 is what you want. If you really need to, perhaps for legacy systems, you can use the argument of : Instead of a real file existing somewhere in your file system, you can provide a fake one, which would reside in your computer’s memory. You’ll use this technique later for mocking in unit tests: If you got to this point, then you’re left with only one keyword argument in , which you’ll see in the next subsection. It’s probably the least used of them all. Nevertheless, there are times when it’s absolutely necessary. There’s a special syntax in Python 2 for replacing the default with a custom file in the statement: Because strings and bytes are represented with the same type in Python 2, the statement can handle binary data just fine: Although, there’s a problem with character encoding. The function in Python 2 lacks the parameter, which would often result in the dreadful : Notice how non-Latin characters must be escaped in both Unicode and string literals to avoid a syntax error. Take a look at this example: Alternatively, you could specify source code encoding according to PEP 263 at the top of the file, but that wasn’t the best practice due to portability issues: Your best bet is to encode the Unicode string just before printing it. You can do this manually: However, a more convenient option is to use the built-in module: It’ll take care of making appropriate conversions when you need to read or write files. In the previous subsection, you learned that delegates printing to a file-like object such as . Some streams, however, buffer certain I/O operations to enhance performance, which can get in the way. Let’s take a look at an example. Imagine you were writing a countdown timer, which should append the remaining time to the same line every second: Your first attempt may look something like this: As long as the variable is greater than zero, the code keeps appending text without a trailing newline and then goes to sleep for one second. Finally, when the countdown is finished, it prints and terminates the line. Unexpectedly, instead of counting down every second, the program idles wastefully for three seconds, and then suddenly prints the entire line at once: That’s because the operating system buffers subsequent writes to the standard output in this case. You need to know that there are three kinds of streams with respect to buffering: Unbuffered is self-explanatory, that is, no buffering is taking place, and all writes have immediate effect. A line-buffered stream waits before firing any I/O calls until a line break appears somewhere in the buffer, whereas a block-buffered one simply allows the buffer to fill up to a certain size regardless of its content. Standard output is both line-buffered and block-buffered, depending on which event comes first. Buffering helps to reduce the number of expensive I/O calls. Think about sending messages over a high-latency network, for example. When you connect to a remote server to execute commands over the SSH protocol, each of your keystrokes may actually produce an individual data packet, which is orders of magnitude bigger than its payload. What an overhead! It would make sense to wait until at least a few characters are typed and then send them together. That’s where buffering steps in. On the other hand, buffering can sometimes have undesired effects as you just saw with the countdown example. To fix it, you can simply tell to forcefully flush the stream without waiting for a newline character in the buffer using its flag: That’s all. Your countdown should work as expected now, but don’t take my word for it. Go ahead and test it to see the difference. Congratulations! At this point, you’ve seen examples of calling that cover all of its parameters. You know their purpose and when to use them. Understanding the signature is only the beginning, however. In the upcoming sections, you’ll see why. There isn’t an easy way to flush the stream in Python 2, because the statement doesn’t allow for it by itself. You need to get a handle of its lower-level layer, which is the standard output, and call it directly: Alternatively, you could disable buffering of the standard streams either by providing the flag to the Python interpreter or by setting up the environment variable: Note that was backported to Python 2 and made available through the module. Unfortunately, it doesn’t come with the parameter: Help on built-in function print in module __builtin__: What you’re seeing here is a docstring of the function. You can display docstrings of various objects in Python using the built-in function. Up until now, you only dealt with built-in data types such as strings and numbers, but you’ll often want to print your own abstract data types. Let’s have a look at different ways of defining them. For simple objects without any logic, whose purpose is to carry data, you’ll typically take advantage of , which is available in the standard library. Named tuples have a neat textual representation out of the box: That’s great as long as holding data is enough, but in order to add behaviors to the type, you’ll eventually need to define a class. Take a look at this example: If you now create an instance of the class and try to print it, you’ll get this bizarre output, which is quite different from the equivalent : It’s the default representation of objects, which comprises their address in memory, the corresponding class name and a module in which they were defined. You’ll fix that in a bit, but just for the record, as a quick workaround you could combine and a custom class through inheritance: Your class has just become a specialized kind of with two attributes, which you can customize. Note: In Python 3, the statement can be replaced with the ellipsis ( ) literal to indicate a placeholder: This prevents the interpreter from raising due to missing indented block of code. That’s better than a plain , because not only do you get printing right for free, but you can also add custom methods and properties to the class. However, it solves one problem while introducing another. Remember that tuples, including named tuples, are immutable in Python, so they can’t change their values once created. It’s true that designing immutable data types is desirable, but in many cases, you’ll want them to allow for change, so you’re back with regular classes again. Note: Following other languages and frameworks, Python 3.7 introduced data classes, which you can think of as mutable tuples. This way, you get the best of both worlds: The syntax for variable annotations, which is required to specify class fields with their corresponding types, was defined in Python 3.6. From earlier subsections, you already know that implicitly calls the built-in function to convert its positional arguments into strings. Indeed, calling manually against an instance of the regular class yields the same result as printing it: , in turn, looks for one of two magic methods within the class body, which you typically implement. If it doesn’t find one, then it falls back to the ugly default representation. Those magic methods are, in order of search: The first one is recommended to return a short, human-readable text, which includes information from the most relevant attributes. After all, you don’t want to expose sensitive data, such as user passwords, when printing objects. However, the other one should provide complete information about an object, to allow for restoring its state from a string. Ideally, it should return valid Python code, so that you can pass it directly to : Notice the use of another built-in function, , which always tries to call in an object, but falls back to the default representation if it doesn’t find that method. Note: Even though itself uses for type casting, some compound data types delegate that call to on their members. This happens to lists and tuples, for example. Consider this class with both magic methods, which return alternative string representations of the same object: If you print a single object of the class, then you won’t see the password, because will call , which eventually will invoke : However, if you put the same variable inside a list by wrapping it in square brackets, then the password will become clearly visible: That’s because sequences, such as lists and tuples, implement their method so that all of their elements are first converted with . Python gives you a lot of freedom when it comes to defining your own data types if none of the built-in ones meet your needs. Some of them, such as named tuples and data classes, offer string representations that look good without requiring any work on your part. Still, for the most flexibility, you’ll have to define a class and override its magic methods described above. The semantics of and didn’t change since Python 2, but you must remember that strings were nothing more than glorified byte arrays back then. To convert your objects into proper Unicode, which was a separate data type, you’d have to provide yet another magic method: . Here’s an example of the same class in Python 2: As you can see, this implementation delegates some work to avoid duplication by calling the built-in function on itself. Both and methods must return strings, so they encode Unicode characters into specific byte representations called character sets. UTF-8 is the most widespread and safest encoding, while is a special constant to express funky characters, such as , as escape sequences in plain ASCII, such as . The statement is looking for the magic method in the class, so the chosen charset must correspond to the one used by the terminal. For example, default encoding in DOS and Windows is CP 852 rather than UTF-8, so running this can result in a or even garbled output: However, if you ran the same code on a system with UTF-8 encoding, then you’d get the proper spelling of a popular Russian name: It’s recommended to convert strings to Unicode as early as possible, for example, when you’re reading data from a file, and use it consistently everywhere in your code. At the same time, you should encode Unicode back to the chosen character set right before presenting it to the user. It seems as if you have more control over string representation of objects in Python 2 because there’s no magic method in Python 3 anymore. You may be asking yourself if it’s possible to convert an object to its byte string representation rather than a Unicode string in Python 3. It’s possible, with a special method that does just that: Using the built-in function on an instance delegates the call to its method defined in the corresponding class.\n\nYou know how to use quite well at this point, but knowing what it is will allow you to use it even more effectively and consciously. After reading this section, you’ll understand how printing in Python has improved over the years. You’ve seen that is a function in Python 3. More specifically, it’s a built-in function, which means that you don’t need to import it from anywhere: It’s always available in the global namespace so that you can call it directly, but you can also access it through a module from the standard library: This way, you can avoid name collisions with custom functions. Let’s say you wanted to redefine so that it doesn’t append a trailing newline. At the same time, you wanted to rename the original function to something like : Now you have two separate printing functions just like in the Java programming language. You’ll define custom functions in the mocking section later as well. Also, note that you wouldn’t be able to overwrite in the first place if it wasn’t a function. On the other hand, isn’t a function in the mathematical sense, because it doesn’t return any meaningful value other than the implicit : Such functions are, in fact, procedures or subroutines that you call to achieve some kind of side-effect, which ultimately is a change of a global state. In the case of , that side-effect is showing a message on the standard output or writing to a file. Because is a function, it has a well-defined signature with known attributes. You can quickly find its documentation using the editor of your choice, without having to remember some weird syntax for performing a certain task. Besides, functions are easier to extend. Adding a new feature to a function is as easy as adding another keyword argument, whereas changing the language to support that new feature is much more cumbersome. Think of stream redirection or buffer flushing, for example. Another benefit of being a function is composability. Functions are so-called first-class objects or first-class citizens in Python, which is a fancy way of saying they’re values just like strings or numbers. This way, you can assign a function to a variable, pass it to another function, or even return one from another. isn’t different in this regard. For instance, you can take advantage of it for dependency injection: Here, the parameter lets you inject a callback function, which defaults to but can be any callable. In this example, printing is completely disabled by substituting with a dummy function that does nothing. Note: A dependency is any piece of code required by another bit of code. Dependency injection is a technique used in code design to make it more testable, reusable, and open for extension. You can achieve it by referring to dependencies indirectly through abstract interfaces and by providing them in a push rather than pull fashion. There’s a funny explanation of dependency injection circulating on the Internet: When you go and get things out of the refrigerator for yourself, you can cause problems. You might leave the door open, you might get something Mommy or Daddy doesn’t want you to have. You might even be looking for something we don’t even have or which has expired. What you should be doing is stating a need, “I need something to drink with lunch,” and then we will make sure you have something when you sit down to eat. Composition allows you to combine a few functions into a new one of the same kind. Let’s see this in action by specifying a custom function that prints to the standard error stream and prefixes all messages with a given log level: This custom function uses partial functions to achieve the desired effect. It’s an advanced concept borrowed from the functional programming paradigm, so you don’t need to go too deep into that topic for now. However, if you’re interested in this topic, I recommend taking a look at the module. Unlike statements, functions are values. That means you can mix them with expressions, in particular, lambda expressions. Instead of defining a full-blown function to replace with, you can make an anonymous lambda expression that calls it: However, because a lambda expression is defined in place, there’s no way of referring to it elsewhere in the code. Note: In Python, you can’t put statements, such as assignments, conditional statements, loops, and so on, in an anonymous lambda function. It has to be a single expression! Another kind of expression is a ternary conditional expression: Python has both conditional statements and conditional expressions. The latter is evaluated to a single value that can be assigned to a variable or passed to a function. In the example above, you’re interested in the side-effect rather than the value, which evaluates to , so you simply ignore it. As you can see, functions allow for an elegant and extensible solution, which is consistent with the rest of the language. In the next subsection, you’ll discover how not having as a function caused a lot of headaches. A statement is an instruction that may evoke a side-effect when executed but never evaluates to a value. In other words, you wouldn’t be able to print a statement or assign it to a variable like this: Here are a few more examples of statements in Python: Note: Python 3.8 brings a controversial walrus operator ( ), which is an assignment expression. With it, you can evaluate an expression and assign the result to a variable at the same time, even within another expression! Take a look at this example, which calls an expensive function once and then reuses the result for further computation: This is useful for simplifying the code without losing its efficiency. Typically, performant code tends to be more verbose: The controversy behind this new piece of syntax caused a lot of argument. An abundance of negative comments and heated debates eventually led Guido van Rossum to step down from the Benevolent Dictator For Life or BDFL position. Statements are usually comprised of reserved keywords such as , , or that have fixed meaning in the language. You can’t use them to name your variables or other symbols. That’s why redefining or mocking the statement isn’t possible in Python 2. You’re stuck with what you get. Furthermore, you can’t print from anonymous functions, because statements aren’t accepted in lambda expressions: The syntax of the statement is ambiguous. Sometimes you can add parentheses around the message, and they’re completely optional: At other times they change how the message is printed: String concatenation can raise a due to incompatible types, which you have to handle manually, for example: Compare this with similar code in Python 3, which leverages sequence unpacking: There aren’t any keyword arguments for common tasks such as flushing the buffer or stream redirection. You need to remember the quirky syntax instead. Even the built-in function isn’t that helpful with regards to the statement: Trailing newline removal doesn’t work quite right, because it adds an unwanted space. You can’t compose multiple statements together, and, on top of that, you have to be extra diligent about character encoding. The list of problems goes on and on. If you’re curious, you can jump back to the previous section and look for more detailed explanations of the syntax in Python 2. However, you can mitigate some of those problems with a much simpler approach. It turns out the function was backported to ease the migration to Python 3. You can import it from a special module, which exposes a selection of language features released in later Python versions. Note: You may import future functions as well as baked-in language constructs such as the statement. To find out exactly what features are available to you, inspect the module: You could also call , but that would show a lot of uninteresting internal details of the module. To enable the function in Python 2, you need to add this import statement at the beginning of your source code: From now on the statement is no longer available, but you have the function at your disposal. Note that it isn’t the same function like the one in Python 3, because it’s missing the keyword argument, but the rest of the arguments are the same. Other than that, it doesn’t spare you from managing character encodings properly. Here’s an example of calling the function in Python 2: You now have an idea of how printing in Python evolved and, most importantly, understand why these backward-incompatible changes were necessary. Knowing this will surely help you become a better Python programmer.\n\nIf you thought that printing was only about lighting pixels up on the screen, then technically you’d be right. However, there are ways to make it look cool. In this section, you’ll find out how to format complex data structures, add colors and other decorations, build interfaces, use animation, and even play sounds with text! Computer languages allow you to represent data as well as executable code in a structured way. Unlike Python, however, most languages give you a lot of freedom in using whitespace and formatting. This can be useful, for example in compression, but it sometimes leads to less readable code. Pretty-printing is about making a piece of data or code look more appealing to the human eye so that it can be understood more easily. This is done by indenting certain lines, inserting newlines, reordering elements, and so forth. Python comes with the module in its standard library, which will help you in pretty-printing large data structures that don’t fit on a single line. Because it prints in a more human-friendly way, many popular REPL tools, including JupyterLab and IPython, use it by default in place of the regular function. Note: To toggle pretty printing in IPython, issue the following command: Pretty printing has been turned OFF Pretty printing has been turned ON This is an example of Magic in IPython. There are a lot of built-in commands that start with a percent sign ( ), but you can find more on PyPI, or even create your own. If you don’t care about not having access to the original function, then you can replace it with in your code using import renaming: Personally, I like to have both functions at my fingertips, so I’d rather use something like as a short alias: At first glance, there’s hardly any difference between the two functions, and in some cases there’s virtually none: 'hello' # Did you spot the difference? That’s because calls instead of the usual for type casting, so that you may evaluate its output as Python code if you want to. The differences become apparent as you start feeding it more complex data structures: The function applies reasonable formatting to improve readability, but you can customize it even further with a couple of parameters. For example, you may limit a deeply nested hierarchy by showing an ellipsis below a given level: The ordinary also uses ellipses but for displaying recursive data structures, which form a cycle, to avoid stack overflow error: However, is more explicit about it by including the unique identity of a self-referencing object: The last element in the list is the same object as the entire list. Note: Recursive or very large data sets can be dealt with using the module as well: This module supports most of the built-in types and is used by the Python debugger. automatically sorts dictionary keys for you before printing, which allows for consistent comparison. When you’re comparing strings, you often don’t care about a particular order of serialized attributes. Anyways, it’s always best to compare actual dictionaries before serialization. Dictionaries often represent JSON data, which is widely used on the Internet. To correctly serialize a dictionary into a valid JSON-formatted string, you can take advantage of the module. It too has pretty-printing capabilities: Notice, however, that you need to handle printing yourself, because it’s not something you’d typically want to do. Similarly, the module has an additional function that returns a string, in case you had to do something other than printing it. Surprisingly, the signature of is nothing like the function’s one. You can’t even pass more than one positional argument, which shows how much it focuses on printing data structures. As personal computers got more sophisticated, they had better graphics and could display more colors. However, different vendors had their own idea about the API design for controlling it. That changed a few decades ago when people at the American National Standards Institute decided to unify it by defining ANSI escape codes. Most of today’s terminal emulators support this standard to some degree. Until recently, the Windows operating system was a notable exception. Therefore, if you want the best portability, use the library in Python. It translates ANSI codes to their appropriate counterparts in Windows while keeping them intact in other operating systems. To check if your terminal understands a subset of the ANSI escape sequences, for example, related to colors, you can try using the following command: My default terminal on Linux says it can display 256 distinct colors, while xterm gives me only 8. The command would return a negative number if colors were unsupported. ANSI escape sequences are like a markup language for the terminal. In HTML you work with tags, such as or , to change how elements look in the document. These tags are mixed with your content, but they’re not visible themselves. Similarly, escape codes won’t show up in the terminal as long as it recognizes them. Otherwise, they’ll appear in the literal form as if you were viewing the source of a website. As its name implies, a sequence must begin with the non-printable character, whose ASCII value is 27, sometimes denoted as in hexadecimal or in octal. You may use Python number literals to quickly verify it’s indeed the same number: Additionally, you can obtain it with the escape sequence in the shell: The most common ANSI escape sequences take the following form: one or more numbers separated with The numeric code can be one or more numbers separated with a semicolon, while the character code is just one letter. Their specific meaning is defined by the ANSI standard. For example, to reset all formatting, you would type one of the following commands, which use the code zero and the letter : At the other end of the spectrum, you have compound code values. To set foreground and background with RGB channels, given that your terminal supports 24-bit depth, you could provide multiple numbers: It’s not just text color that you can set with the ANSI escape codes. You can, for example, clear and scroll the terminal window, change its background, move the cursor around, make the text blink or decorate it with an underline. In Python, you’d probably write a helper function to allow for wrapping arbitrary codes into a sequence: This would make the word appear in red, bold, and underlined font: However, there are higher-level abstractions over ANSI escape codes, such as the mentioned library, as well as tools for building user interfaces in the console. While playing with ANSI escape codes is undeniably a ton of fun, in the real world you’d rather have more abstract building blocks to put together a user interface. There are a few libraries that provide such a high level of control over the terminal, but seems to be the most popular choice. Note: To use the library in Windows, you need to install a third-party package: That’s because isn’t available in the standard library of the Python distribution for Windows. Primarily, it allows you to think in terms of independent graphical widgets instead of a blob of text. Besides, you get a lot of freedom in expressing your inner artist, because it’s really like painting a blank canvas. The library hides the complexities of having to deal with different terminals. Other than that, it has great support for keyboard events, which might be useful for writing video games. First, you need to import the module. Since it modifies the state of a running terminal, it’s important to handle errors and gracefully restore the previous state. You can do this manually, but the library comes with a convenient wrapper for your main function: Note, the function must accept a reference to the screen object, also known as , that you’ll use later for additional setup. If you run this program now, you won’t see any effects, because it terminates immediately. However, you can add a small delay to have a sneak peek: This time the screen went completely blank for a second, but the cursor was still blinking. To hide it, just call one of the configuration functions defined in the module: Let’s define the snake as a list of points in screen coordinates: The head of the snake is always the first element in the list, whereas the tail is the last one. The initial shape of the snake is horizontal, starting from the top-left corner of the screen and facing to the right. While its y-coordinate stays at zero, its x-coordinate decreases from head to tail. To draw the snake, you’ll start with the head and then follow with the remaining segments. Each segment carries coordinates, so you can unpack them: Again, if you run this code now, it won’t display anything, because you must explicitly refresh the screen afterward: You want to move the snake in one of four directions, which can be defined as vectors. Eventually, the direction will change in response to an arrow keystroke, so you may hook it up to the library’s key codes: How does a snake move? It turns out that only its head really moves to a new location, while all other segments shift towards it. In each step, almost all segments remain the same, except for the head and the tail. Assuming the snake isn’t growing, you can remove the tail and insert a new head at the beginning of the list: To get the new coordinates of the head, you need to add the direction vector to it. However, adding tuples in Python results in a bigger tuple instead of the algebraic sum of the corresponding vector components. One way to fix this is by using the built-in , , and functions. The direction will change on a keystroke, so you need to call to obtain the pressed key code. However, if the pressed key doesn’t correspond to the arrow keys defined earlier as dictionary keys, the direction won’t change: By default, however, is a blocking call that would prevent the snake from moving unless there was a keystroke. Therefore, you need to make the call non-blocking by adding yet another configuration: You’re almost done, but there’s just one last thing left. If you now loop this code, the snake will appear to be growing instead of moving. That’s because you have to erase the screen explicitly before each iteration. Finally, this is all you need to play the snake game in Python: This is merely scratching the surface of the possibilities that the module opens up. You may use it for game development like this or more business-oriented applications. Living It Up With Cool Animations Not only can animations make the user interface more appealing to the eye, but they also improve the overall user experience. When you provide early feedback to the user, for example, they’ll know if your program’s still working or if it’s time to kill it. To animate text in the terminal, you have to be able to freely move the cursor around. You can do this with one of the tools mentioned previously, that is ANSI escape codes or the library. However, I’d like to show you an even simpler way. If the animation can be constrained to a single line of text, then you might be interested in two special escape character sequences: The first one moves the cursor to the beginning of the line, whereas the second one moves it only one character to the left. They both work in a non-destructive way without overwriting text that’s already been written. Let’s take a look at a few examples. You’ll often want to display some kind of a spinning wheel to indicate a work in progress without knowing exactly how much time’s left to finish: Many command line tools use this trick while downloading data over the network. You can make a really simple stop motion animation from a sequence of characters that will cycle in a round-robin fashion: The loop gets the next character to print, then moves the cursor to the beginning of the line, and overwrites whatever there was before without adding a newline. You don’t want extra space between positional arguments, so separator argument must be blank. Also, notice the use of Python’s raw strings due to backslash characters present in the literal. When you know the remaining time or task completion percentage, then you’re able to show an animated progress bar: First, you need to calculate how many hashtags to display and how many blank spaces to insert. Next, you erase the line and build the bar from scratch: As before, each request for update repaints the entire line. Note: There’s a feature-rich library, along with a few other similar tools, that can show progress in a much more comprehensive way. If you’re old enough to remember computers with a PC speaker, then you must also remember their distinctive beep sound, often used to indicate hardware problems. They could barely make any more noises than that, yet video games seemed so much better with it. Today you can still take advantage of this small loudspeaker, but chances are your laptop didn’t come with one. In such a case, you can enable terminal bell emulation in your shell, so that a system warning sound is played instead. Go ahead and type this command to see if your terminal can play a sound: This would normally print text, but the flag enables the interpretation of backslash escapes. As you can see, there’s a dedicated escape sequence , which stands for “alert”, that outputs a special bell character. Some terminals make a sound whenever they see it. Similarly, you can print this character in Python. Perhaps in a loop to form some kind of melody. While it’s only a single note, you can still vary the length of pauses between consecutive instances. That seems like a perfect toy for Morse code playback! The rules are the following:\n• Letters are encoded with a sequence of dot (·) and dash (–) symbols.\n• A dot is one unit of time.\n• A dash is three units of time.\n• Individual symbols in a letter are spaced one unit of time apart.\n• Symbols of two adjacent letters are spaced three units of time apart.\n• Symbols of two adjacent words are spaced seven units of time apart. According to those rules, you could be “printing” an SOS signal indefinitely in the following way: In Python, you can implement it in merely ten lines of code: Maybe you could even take it one step further and make a command line tool for translating text into Morse code? Either way, I hope you’re having fun with this!\n\nNowadays, it’s expected that you ship code that meets high quality standards. If you aspire to become a professional, you must learn how to test your code. Software testing is especially important in dynamically typed languages, such as Python, which don’t have a compiler to warn you about obvious mistakes. Defects can make their way to the production environment and remain dormant for a long time, until that one day when a branch of code finally gets executed. Sure, you have linters, type checkers, and other tools for static code analysis to assist you. But they won’t tell you whether your program does what it’s supposed to do on the business level. So, should you be testing ? No. After all, it’s a built-in function that must have already gone through a comprehensive suite of tests. What you want to test, though, is whether your code is calling at the right time with the expected parameters. That’s known as a behavior. You can test behaviors by mocking real objects or functions. In this case, you want to mock to record and verify its invocations. Note: You might have heard the terms: dummy, fake, stub, spy, or mock used interchangeably. Some people make a distinction between them, while others don’t. Martin Fowler explains their differences in a short glossary and collectively calls them test doubles. Mocking in Python can be done twofold. First, you can take the traditional path of statically-typed languages by employing dependency injection. This may sometimes require you to change the code under test, which isn’t always possible if the code is defined in an external library: This is the same example I used in an earlier section to talk about function composition. It basically allows for substituting with a custom function of the same interface. To check if it prints the right message, you have to intercept it by injecting a mocked function: Calling this mock makes it save the last message in an attribute, which you can inspect later, for example in an statement. In a slightly alternative solution, instead of replacing the entire function with a custom wrapper, you could redirect the standard output to an in-memory file-like stream of characters: This time the function explicitly calls , but it exposes its parameter to the outside world. However, a more Pythonic way of mocking objects takes advantage of the built-in module, which uses a technique called monkey patching. This derogatory name stems from it being a “dirty hack” that you can easily shoot yourself in the foot with. It’s less elegant than dependency injection but definitely quick and convenient. Note: The module got absorbed by the standard library in Python 3, but before that, it was a third-party package. You had to install it separately: Other than that, you referred to it as , whereas in Python 3 it’s part of the unit testing module, so you must import from . What monkey patching does is alter implementation dynamically at runtime. Such a change is visible globally, so it may have unwanted consequences. In practice, however, patching only affects the code for the duration of test execution. To mock in a test case, you’ll typically use the decorator and specify a target for patching by referring to it with a fully qualified name, that is including the module name: This will automatically create the mock for you and inject it to the test function. However, you need to declare that your test function accepts a mock now. The underlying mock object has lots of useful methods and attributes for verifying behavior. Did you notice anything peculiar about that code snippet? Despite injecting a mock to the function, you’re not calling it directly, although you could. That injected mock is only used to make assertions afterward and maybe to prepare the context before running the test. In real life, mocking helps to isolate the code under test by removing dependencies such as a database connection. You rarely call mocks in a test, because that doesn’t make much sense. Rather, it’s other pieces of code that call your mock indirectly without knowing it. The code under test is a function that prints a greeting. Even though it’s a fairly simple function, you can’t test it easily because it doesn’t return a value. It has a side-effect. To eliminate that side-effect, you need to mock the dependency out. Patching lets you avoid making changes to the original function, which can remain agnostic about . It thinks it’s calling , but in reality, it’s calling a mock you’re in total control of. There are many reasons for testing software. One of them is looking for bugs. When you write tests, you often want to get rid of the function, for example, by mocking it away. Paradoxically, however, that same function can help you find bugs during a related process of debugging you’ll read about in the next section. You can’t monkey patch the statement in Python 2, nor can you inject it as a dependency. However, you have a few other options:\n• Patch the standard output defined in the module. Let’s examine them one by one. Stream redirection is almost identical to the example you saw earlier: There are only two differences. First, the syntax for stream redirection uses chevron ( ) instead of the argument. The other difference is where is defined. You can import it from a similarly named module, or for a faster implementation. Patching the standard output from the module is exactly what it sounds like, but you need to be aware of a few gotchas: First of all, remember to install the module as it wasn’t available in the standard library in Python 2. Secondly, the statement calls the underlying method on the mocked object instead of calling the object itself. That’s why you’ll run assertions against . Finally, a single statement doesn’t always correspond to a single call to . In fact, you’ll see the newline character written separately. The last option you have is importing from and patching it: Again, it’s nearly identical to Python 3, but the function is defined in the module rather than .\n\nIn this section, you’ll take a look at the available tools for debugging in Python, starting from a humble function, through the module, to a fully fledged debugger. After reading it, you’ll be able to make an educated decision about which of them is the most suitable in a given situation. Note: Debugging is the process of looking for the root causes of bugs or defects in software after they’ve been discovered, as well as taking steps to fix them. The term bug has an amusing story about the origin of its name. Also known as print debugging or caveman debugging, it’s the most basic form of debugging. While a little bit old-fashioned, it’s still powerful and has its uses. The idea is to follow the path of program execution until it stops abruptly, or gives incorrect results, to identify the exact instruction with a problem. You do that by inserting print statements with words that stand out in carefully chosen places. Take a look at this example, which manifests a rounding error: As you can see, the function doesn’t return the expected value of , but now you know it’s because the sum is a little off. Tracing the state of variables at different steps of the algorithm can give you a hint where the issue is. In this case, the problem lies in how floating point numbers are represented in computer memory. Remember that numbers are stored in binary form. Decimal value of turns out to have an infinite binary representation, which gets rounded. For more information on rounding numbers in Python, you can check out How to Round Numbers in Python. This method is simple and intuitive and will work in pretty much every programming language out there. Not to mention, it’s a great exercise in the learning process. On the other hand, once you master more advanced techniques, it’s hard to go back, because they allow you to find bugs much quicker. Tracing is a laborious manual process, which can let even more errors slip through. The build and deploy cycle takes time. Afterward, you need to remember to meticulously remove all the calls you made without accidentally touching the genuine ones. Besides, it requires you to make changes in the code, which isn’t always possible. Maybe you’re debugging an application running in a remote web server or want to diagnose a problem in a post-mortem fashion. Sometimes you simply don’t have access to the standard output. Let’s pretend for a minute that you’re running an e-commerce website. One day, an angry customer makes a phone call complaining about a failed transaction and saying he lost his money. He claims to have tried purchasing a few items, but in the end, there was some cryptic error that prevented him from finishing that order. Yet, when he checked his bank account, the money was gone. You apologize sincerely and make a refund, but also don’t want this to happen again in the future. How do you debug that? If only you had some trace of what happened, ideally in the form of a chronological list of events with their context. Whenever you find yourself doing print debugging, consider turning it into permanent log messages. This may help in situations like this, when you need to analyze a problem after it happened, in an environment that you don’t have access to. There are sophisticated tools for log aggregation and searching, but at the most basic level, you can think of logs as text files. Each line conveys detailed information about an event in your system. Usually, it won’t contain personally identifying information, though, in some cases, it may be mandated by law. As you can see, it has a structured form. Apart from a descriptive message, there are a few customizable fields, which provide the context of an event. Here, you have the exact date and time, the log level, the logger name, and the thread name. Log levels allow you to filter messages quickly to reduce noise. If you’re looking for an error, you don’t want to see all the warnings or debug messages, for example. It’s trivial to disable or enable messages at certain log levels through the configuration, without even touching the code. With logging, you can keep your debug messages separate from the standard output. All the log messages go to the standard error stream by default, which can conveniently show up in different colors. However, you can redirect log messages to separate files, even for individual modules! Quite commonly, misconfigured logging can lead to running out of space on the server’s disk. To prevent that, you may set up log rotation, which will keep the log files for a specified duration, such as one week, or once they hit a certain size. Nevertheless, it’s always a good practice to archive older logs. Some regulations enforce that customer data be kept for as long as five years! Compared to other programming languages, logging in Python is simpler, because the module is bundled with the standard library. You just import and configure it in as little as two lines of code: You can call functions defined at the module level, which are hooked to the root logger, but more the common practice is to obtain a dedicated logger for each of your source files: The advantage of using custom loggers is more fine-grain control. They’re usually named after the module they were defined in through the variable. Note: There’s a somewhat related module in Python, which can also log messages to the standard error stream. However, it has a narrower spectrum of applications, mostly in library code, whereas client applications should use the module. That said, you can make them work together by calling . One last reason to switch from the function to logging is thread safety. In the upcoming section, you’ll see that the former doesn’t play well with multiple threads of execution. The truth is that neither tracing nor logging can be considered real debugging. To do actual debugging, you need a debugger tool, which allows you to do the following: A crude debugger that runs in the terminal, unsurprisingly named for “The Python Debugger,” is distributed as part of the standard library. This makes it always available, so it may be your only choice for performing remote debugging. Perhaps that’s a good reason to get familiar with it. However, it doesn’t come with a graphical interface, so using may be a bit tricky. If you can’t edit the code, you have to run it as a module and pass your script’s location: Otherwise, you can set up a breakpoint directly in the code, which will pause the execution of your script and drop you into the debugger. The old way of doing this required two steps: This shows up an interactive prompt, which might look intimidating at first. However, you can still type native Python at this point to examine or modify the state of local variables. Apart from that, there’s really only a handful of debugger-specific commands that you want to use for stepping through the code. Note: It’s customary to put the two instructions for spinning up a debugger on a single line. This requires the use of a semicolon, which is rarely found in Python programs: While certainly not Pythonic, it stands out as a reminder to remove it after you’re done with debugging. Since Python 3.7, you can also call the built-in function, which does the same thing, but in a more compact way and with some additional bells and whistles: You’re probably going to use a visual debugger integrated with a code editor for the most part. PyCharm has an excellent debugger, which boasts high performance, but you’ll find plenty of alternative IDEs with debuggers, both paid and free of charge. Debugging isn’t the proverbial silver bullet. Sometimes logging or tracing will be a better solution. For example, defects that are hard to reproduce, such as race conditions, often result from temporal coupling. When you stop at a breakpoint, that little pause in program execution may mask the problem. It’s kind of like the Heisenberg principle: you can’t measure and observe a bug at the same time. These methods aren’t mutually exclusive. They complement each other.\n\nI briefly touched upon the thread safety issue before, recommending over the function. If you’re still reading this, then you must be comfortable with the concept of threads. Thread safety means that a piece of code can be safely shared between multiple threads of execution. The simplest strategy for ensuring thread-safety is by sharing immutable objects only. If threads can’t modify an object’s state, then there’s no risk of breaking its consistency. Another method takes advantage of local memory, which makes each thread receive its own copy of the same object. That way, other threads can’t see the changes made to it in the current thread. But that doesn’t solve the problem, does it? You often want your threads to cooperate by being able to mutate a shared resource. The most common way of synchronizing concurrent access to such a resource is by locking it. This gives exclusive write access to one or sometimes a few threads at a time. However, locking is expensive and reduces concurrent throughput, so other means for controlling access have been invented, such as atomic variables or the compare-and-swap algorithm. Printing isn’t thread-safe in Python. The function holds a reference to the standard output, which is a shared global variable. In theory, because there’s no locking, a context switch could happen during a call to , intertwining bits of text from multiple calls. Note: A context switch means that one thread halts its execution, either voluntarily or not, so that another one can take over. This might happen at any moment, even in the middle of a function call. In practice, however, that doesn’t happen. No matter how hard you try, writing to the standard output seems to be atomic. The only problem that you may sometimes observe is with messed up line breaks: To simulate this, you can increase the likelihood of a context switch by making the underlying method go to sleep for a random amount of time. How? By mocking it, which you already know about from an earlier section: First, you need to store the original method in a variable, which you’ll delegate to later. Then you provide your fake implementation, which will take up to one second to execute. Each thread will make a few calls with its name and a letter: A, B, and C. If you read the mocking section before, then you may already have an idea of why printing misbehaves like that. Nonetheless, to make it crystal clear, you can capture values fed into your function. You’ll notice that you get a slightly different sequence each time: Even though itself is an atomic operation, a single call to the function can yield more than one write. For example, line breaks are written separately from the rest of the text, and context switching takes place between those writes. Note: The atomic nature of the standard output in Python is a byproduct of the Global Interpreter Lock, which applies locking around bytecode instructions. Be aware, however, that many interpreter flavors don’t have the GIL, where multi-threaded printing requires explicit locking. You can make the newline character become an integral part of the message by handling it manually: This will fix the output: [Thread-2 A] [Thread-1 A] [Thread-3 A] [Thread-1 B] [Thread-3 B] [Thread-2 B] [Thread-1 C] [Thread-2 C] [Thread-3 C] Notice, however, that the function still keeps making a separate call for the empty suffix, which translates to useless instruction: A truly thread-safe version of the function could look like this: You can put that function in a module and import it elsewhere: Now, despite making two writes per each request, only one thread is allowed to interact with the stream, while the rest must wait: I added comments to indicate how the lock is limiting access to the shared resource. Note: Even in single-threaded code, you might get caught up in a similar situation. Specifically, when you’re printing to the standard output and the standard error streams at the same time. Unless you redirect one or both of them to separate files, they’ll both share a single terminal window. Conversely, the module is thread-safe by design, which is reflected by its ability to display thread names in the formatted message: It’s another reason why you might not want to use the function all the time."
    },
    {
        "link": "https://mimo.org/glossary/python/print-function",
        "document": "The function outputs data to the console for debugging and displaying information in command-line applications. It is one of Python’s most commonly used built-in functions.\n\nHow to Use the print() Function in Python\n\nPython’s function takes several arguments, including objects to output and various optional arguments.\n• : One or more expressions or objects to output to the console. These can include arrays or other iterable types.\n• : The optional parameter specifies the separator between objects (default is a space). For instance, you can use a comma to separate multiple objects in the output.\n• : An optional parameter to specify what to output at the end of the line (default is a newline).\n• : The optional parameter specifies the output stream (default is ).\n• : An optional parameter to specify whether to flush the output buffer (default is ).\n\nThe simplest usage of the print() function involves outputting a str or text string to the console:\n\nPython 3 introduced several improvements to the print() function compared to earlier versions, making it more versatile. Beginners often use the 'print()' function to familiarize themselves with coding output.\n\nWhen to Use the print() Function in Python\n\nThe function is useful in command line applications and for debugging purposes.\n\nYou can use within blocks to output error messages. In Python, printing error messages can help diagnose and fix errors during development.\n\nThe function prints the error message to the standard output.\n\nYou can also use to display the results of operations, computations, or function outputs to the user. This is essential for providing feedback in command-line applications.\n\nExamples of Using print() in Python\n\nMost web applications use to test components quickly and effectively during development.\n\nWeb applications log errors to the console when catching exceptions, aiding in monitoring and troubleshooting.\n\nData processing tools might use to output interim results. This helps in verifying each step of the data transformation process.\n\nThe keyword arguments in print() allow you to customize how the data is displayed during processing. Adding a blank line between different print outputs can make debugging and reading results easier.\n\nPython’s is often used to iterate through and debug data structures like lists or dictionaries.\n\nThe (pretty-print) module in Python provides a way to format complex data structures in a readable way. Pretty-printing is useful with dictionaries or other data structures that are difficult to read in their raw form.\n\nMachine learning workflows often use to log training progress and performance metrics. This makes monitoring the model's training process easy.\n\nLearn More About the Python print() Function\n\nThe function in Python can handle various data types, including strings, integers, floats, and lists. To output a string, simply pass it as an argument to the function.\n\nYou can also use with integers, floats, tuples and lists individually or combine them with strings using f-strings.\n\nYou can print a newline in Python using the function. By default, ends with a newline character, so each call to will output the text on a new line. To print a single line without content, simply call without any arguments.\n\nYou can also use the escape character within a string to create multiple lines of output from a single statement.\n\nBy default, the function's console output ends with a new line. To print to the console without adding a newline, you can set the parameter to an empty string. By printing without a newline in Python, you can create continuous console output on the same line.\n\nYou can print the current directory in the Python programming language using the module. This is useful for confirming the directory of your script, especially when dealing with directory-related issues.\n\nUsing keyword arguments like and allows you to control the format and structure of printed output.\n\nThe function writes to the standard output by default, which is typically the console or terminal. However, you can redirect this output to files or streams as needed.\n\nThough often referred to as the function, some developers still use the term print statement, a holdover from Python 2 syntax.\n\nPretty-printing JSON objects helps in debugging and data visualization. Printing “pretty” JSON in Python is particularly useful when dealing with API responses or configuration files.\n\nPython offers versatile formatting options for with format strings or f-strings. This makes it easy to create well-structured and readable output.\n\nYou can also direct output to a text file by changing the parameter. This is useful for logging purposes or when you need to save output data."
    },
    {
        "link": "https://w3schools.com/python/ref_func_print.asp",
        "document": "The function prints the specified message to the screen, or other standard output device.\n\nThe message can be a string, or any other object, the object will be converted into a string before written to the screen.\n\nPrint more than one object: print(\"Hello\", \"how are you?\") Try it Yourself »"
    },
    {
        "link": "https://quora.com/How-do-you-print-text-to-the-console-using-Python",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://docs.python.org/3/library/functions.html",
        "document": "The Python interpreter has a number of functions and types built into it that are always available. They are listed here in alphabetical order.\n\nOpen file and return a corresponding file object. If the file cannot be opened, an is raised. See Reading and Writing Files for more examples of how to use this function. file is a path-like object giving the pathname (absolute or relative to the current working directory) of the file to be opened or an integer file descriptor of the file to be wrapped. (If a file descriptor is given, it is closed when the returned I/O object is closed unless closefd is set to .) mode is an optional string that specifies the mode in which the file is opened. It defaults to which means open for reading in text mode. Other common values are for writing (truncating the file if it already exists), for exclusive creation, and for appending (which on some Unix systems, means that all writes append to the end of the file regardless of the current seek position). In text mode, if encoding is not specified the encoding used is platform-dependent: is called to get the current locale encoding. (For reading and writing raw bytes use binary mode and leave encoding unspecified.) The available modes are: open for writing, truncating the file first open for exclusive creation, failing if the file already exists open for writing, appending to the end of file if it exists The default mode is (open for reading text, a synonym of ). Modes and open and truncate the file. Modes and open the file with no truncation. As mentioned in the Overview, Python distinguishes between binary and text I/O. Files opened in binary mode (including in the mode argument) return contents as objects without any decoding. In text mode (the default, or when is included in the mode argument), the contents of the file are returned as , the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given. Python doesn’t depend on the underlying operating system’s notion of text files; all the processing is done by Python itself, and is therefore platform-independent. buffering is an optional integer used to set the buffering policy. Pass 0 to switch buffering off (only allowed in binary mode), 1 to select line buffering (only usable when writing in text mode), and an integer > 1 to indicate the size in bytes of a fixed-size chunk buffer. Note that specifying a buffer size this way applies for binary buffered I/O, but (i.e., files opened with ) would have another buffering. To disable buffering in , consider using the flag for . When no buffering argument is given, the default buffering policy works as follows:\n• None Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device’s “block size” and falling back on . On many systems, the buffer will typically be 4096 or 8192 bytes long.\n• None “Interactive” text files (files for which returns ) use line buffering. Other text files use the policy described above for binary files. encoding is the name of the encoding used to decode or encode the file. This should only be used in text mode. The default encoding is platform dependent (whatever returns), but any text encoding supported by Python can be used. See the module for the list of supported encodings. errors is an optional string that specifies how encoding and decoding errors are to be handled—this cannot be used in binary mode. A variety of standard error handlers are available (listed under Error Handlers), though any error handling name that has been registered with is also valid. The standard names include:\n• None to raise a exception if there is an encoding error. The default value of has the same effect.\n• None ignores errors. Note that ignoring encoding errors can lead to data loss.\n• None causes a replacement marker (such as ) to be inserted where there is malformed data.\n• None will represent any incorrect bytes as low surrogate code units ranging from U+DC80 to U+DCFF. These surrogate code units will then be turned back into the same bytes when the error handler is used when writing data. This is useful for processing files in an unknown encoding.\n• None is only supported when writing to a file. Characters not supported by the encoding are replaced with the appropriate XML character reference .\n• None (also only supported when writing) replaces unsupported characters with escape sequences. newline determines how to parse newline characters from the stream. It can be , , , , and . It works as follows:\n• None When reading input from the stream, if newline is , universal newlines mode is enabled. Lines in the input can end in , , or , and these are translated into before being returned to the caller. If it is , universal newlines mode is enabled, but line endings are returned to the caller untranslated. If it has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.\n• None When writing output to the stream, if newline is , any characters written are translated to the system default line separator, . If newline is or , no translation takes place. If newline is any of the other legal values, any characters written are translated to the given string. If closefd is and a file descriptor rather than a filename was given, the underlying file descriptor will be kept open when the file is closed. If a filename is given closefd must be (the default); otherwise, an error will be raised. A custom opener can be used by passing a callable as opener. The underlying file descriptor for the file object is then obtained by calling opener with (file, flags). opener must return an open file descriptor (passing as opener results in functionality similar to passing ). The following example uses the dir_fd parameter of the function to open a file relative to a given directory: 'This will be written to somedir/spamspam.txt' The type of file object returned by the function depends on the mode. When is used to open a file in a text mode ( , , , , etc.), it returns a subclass of (specifically ). When used to open a file in a binary mode with buffering, the returned class is a subclass of . The exact class varies: in read binary mode, it returns an ; in write binary and append binary modes, it returns an , and in read/write mode, it returns an . When buffering is disabled, the raw stream, a subclass of , , is returned. See also the file handling modules, such as , (where is declared), , , , and . The and arguments may have been modified or inferred from the original call.\n• None used to be raised, it is now an alias of .\n• None is now raised if the file opened in exclusive creation mode ( ) already exists.\n• None The file is now non-inheritable.\n• None If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an exception (see PEP 475 for the rationale).\n• None On Windows, opening a console buffer may return a subclass of other than . Changed in version 3.11: The mode has been removed.\n\nReturn a proxy object that delegates method calls to a parent or sibling class of type. This is useful for accessing inherited methods that have been overridden in a class. The object_or_type determines the method resolution order to be searched. The search starts from the class right after the type. For example, if of object_or_type is and the value of type is , then searches . The attribute of the class corresponding to object_or_type lists the method resolution search order used by both and . The attribute is dynamic and can change whenever the inheritance hierarchy is updated. If the second argument is omitted, the super object returned is unbound. If the second argument is an object, must be true. If the second argument is a type, must be true (this is useful for classmethods). When called directly within an ordinary method of a class, both arguments may be omitted (“zero-argument ”). In this case, type will be the enclosing class, and obj will be the first argument of the immediately enclosing function (typically ). (This means that zero-argument will not work as expected within nested functions, including generator expressions, which implicitly create nested functions.) There are two typical use cases for super. In a class hierarchy with single inheritance, super can be used to refer to parent classes without naming them explicitly, thus making the code more maintainable. This use closely parallels the use of super in other programming languages. The second use case is to support cooperative multiple inheritance in a dynamic execution environment. This use case is unique to Python and is not found in statically compiled languages or languages that only support single inheritance. This makes it possible to implement “diamond diagrams” where multiple base classes implement the same method. Good design dictates that such implementations have the same calling signature in every case (because the order of calls is determined at runtime, because that order adapts to changes in the class hierarchy, and because that order can include sibling classes that are unknown prior to runtime). For both use cases, a typical superclass call looks like this: # This does the same thing as: In addition to method lookups, also works for attribute lookups. One possible use case for this is calling descriptors in a parent or sibling class. Note that is implemented as part of the binding process for explicit dotted attribute lookups such as . It does so by implementing its own method for searching classes in a predictable order that supports cooperative multiple inheritance. Accordingly, is undefined for implicit lookups using statements or operators such as . Also note that, aside from the zero argument form, is not limited to use inside methods. The two argument form specifies the arguments exactly and makes the appropriate references. The zero argument form only works inside a class definition, as the compiler fills in the necessary details to correctly retrieve the class being defined, as well as accessing the current instance for ordinary methods. For practical suggestions on how to design cooperative classes using , see guide to using super()."
    },
    {
        "link": "https://docs.python.org/3/library/stdtypes.html",
        "document": "The following sections describe the standard types that are built into the interpreter.\n\nThe principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.\n\nSome collection classes are mutable. The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but .\n\nSome operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the function or the slightly different function). The latter function is implicitly used when an object is written by the function.\n\nThere are three distinct numeric types: integers, floating-point numbers, and complex numbers. In addition, Booleans are a subtype of integers. Integers have unlimited precision. Floating-point numbers are usually implemented using double in C; information about the precision and internal representation of floating-point numbers for the machine on which your program is running is available in . Complex numbers have a real and imaginary part, which are each a floating-point number. To extract these parts from a complex number z, use and . (The standard library includes the additional numeric types , for rationals, and , for floating-point numbers with user-definable precision.) Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric literals containing a decimal point or an exponent sign yield floating-point numbers. Appending or to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts. Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex. A comparison between numbers of different types behaves as though the exact values of those numbers were being compared. The constructors , , and can be used to produce numbers of a specific type. All numeric types (except complex) support the following operations (for priorities of the operations, see Operator precedence): absolute value or magnitude of x a complex number with real part re, imaginary part im. im defaults to zero. conjugate of the complex number c\n• None Also referred to as integer division. For operands of type , the result has type . For operands of type , the result has type . In general, the result is a whole integer, though the result’s type is not necessarily . The result is always rounded towards minus infinity: is , is , is , and is .\n• None Not for complex numbers. Instead convert to floats using if appropriate.\n• None Conversion from to truncates, discarding the fractional part. See functions and for alternative conversions.\n• None float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity.\n• None Python defines and to be , as is common for programming languages.\n• None The numeric literals accepted include the digits to or any Unicode equivalent (code points with the property). See the Unicode Standard for a complete list of code points with the property. All types ( and ) also include the following operations: x rounded to n digits, rounding half to even. If n is omitted, it defaults to 0. For additional numeric operations see the and modules. Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two’s complement with an infinite number of sign bits. The priorities of the binary bitwise operations are all lower than the numeric operations and higher than the comparisons; the unary operation has the same priority as the other unary numeric operations ( and ). This table lists the bitwise operations sorted in ascending priority: bitwise exclusive or of x and y\n• None Negative shift counts are illegal and cause a to be raised.\n• None A left shift by n bits is equivalent to multiplication by .\n• None A right shift by n bits is equivalent to floor division by .\n• None Performing these calculations with at least one extra sign extension bit in a finite two’s complement representation (a working bit-width of or more) is sufficient to get the same result as if there were an infinite number of sign bits. The int type implements the abstract base class. In addition, it provides a few more methods: Return the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros: More precisely, if is nonzero, then is the unique positive integer such that . Equivalently, when is small enough to have a correctly rounded logarithm, then . If is zero, then returns . Return the number of ones in the binary representation of the absolute value of the integer. This is also known as the population count. Example: Return an array of bytes representing an integer. The integer is represented using length bytes, and defaults to 1. An is raised if the integer is not representable with the given number of bytes. The byteorder argument determines the byte order used to represent the integer, and defaults to . If byteorder is , the most significant byte is at the beginning of the byte array. If byteorder is , the most significant byte is at the end of the byte array. The signed argument determines whether two’s complement is used to represent the integer. If signed is and a negative integer is given, an is raised. The default value for signed is . The default values can be used to conveniently turn an integer into a single byte object: However, when using the default arguments, don’t try to convert a value greater than 255 or you’ll get an . \"byteorder must be either 'little' or 'big'\" Changed in version 3.11: Added default argument values for and . Return the integer represented by the given array of bytes. The argument bytes must either be a bytes-like object or an iterable producing bytes. The byteorder argument determines the byte order used to represent the integer, and defaults to . If byteorder is , the most significant byte is at the beginning of the byte array. If byteorder is , the most significant byte is at the end of the byte array. To request the native byte order of the host system, use as the byte order value. The signed argument indicates whether two’s complement is used to represent the integer. \"byteorder must be either 'little' or 'big'\" Changed in version 3.11: Added default argument value for . Return a pair of integers whose ratio is equal to the original integer and has a positive denominator. The integer ratio of integers (whole numbers) is always the integer as the numerator and as the denominator. The float type implements the abstract base class. float also has the following additional methods. Return a pair of integers whose ratio is exactly equal to the original float. The ratio is in lowest terms and has a positive denominator. Raises on infinities and a on NaNs. Return if the float instance is finite with integral value, and otherwise: Two methods support conversion to and from hexadecimal strings. Since Python’s floats are stored internally as binary numbers, converting a float to or from a decimal string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work. Return a representation of a floating-point number as a hexadecimal string. For finite floating-point numbers, this representation will always include a leading and a trailing and exponent. Class method to return the float represented by a hexadecimal string s. The string s may have leading and trailing whitespace. Note that is an instance method, while is a class method. where the optional may by either or , and are strings of hexadecimal digits, and is a decimal integer with an optional leading sign. Case is not significant, and there must be at least one hexadecimal digit in either the integer or the fraction. This syntax is similar to the syntax specified in section 6.4.4.2 of the C99 standard, and also to the syntax used in Java 1.5 onwards. In particular, the output of is usable as a hexadecimal floating-point literal in C or Java code, and hexadecimal strings produced by C’s format character or Java’s are accepted by . Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string represents the floating-point number , or : Applying the reverse conversion to gives a different hexadecimal string representing the same number: For numbers and , possibly of different types, it’s a requirement that whenever (see the method documentation for more details). For ease of implementation and efficiency across a variety of numeric types (including , , and ) Python’s hash for numeric types is based on a single mathematical function that’s defined for any rational number, and hence applies to all instances of and , and all finite instances of and . Essentially, this function is given by reduction modulo for a fixed prime . The value of is made available to Python as the attribute of . CPython implementation detail: Currently, the prime used is on machines with 32-bit C longs and on machines with 64-bit C longs. Here are the rules in detail:\n• None If is a nonnegative rational number and is not divisible by , define as , where gives the inverse of modulo .\n• None If is a nonnegative rational number and is divisible by (but is not) then has no inverse modulo and the rule above doesn’t apply; in this case define to be the constant value .\n• None If is a negative rational number define as . If the resulting hash is , replace it with .\n• None The particular values and are used as hash values for positive infinity or negative infinity (respectively).\n• None For a number , the hash values of the real and imaginary parts are combined by computing , reduced modulo so that it lies in . Again, if the result is , it’s replaced with . To clarify the above rules, here’s some example Python code, equivalent to the built-in hash, for computing the hash of a rational number, , or : Assumes m and n are integers, with n positive. # Remove common factors of P. (Unnecessary if m and n already coprime.) # Fermat's Little Theorem: pow(n, P-1, P) is 1, so # pow(n, P-2, P) gives the inverse of n modulo P.\n\nThere are three basic sequence types: lists, tuples, and range objects. Additional sequence types tailored for processing of binary data and text strings are described in dedicated sections. The operations in the following table are supported by most sequence types, both mutable and immutable. The ABC is provided to make it easier to correctly implement these operations on custom sequence types. This table lists the sequence operations sorted in ascending priority. In the table, s and t are sequences of the same type, n, i, j and k are integers and x is an arbitrary object that meets any type and value restrictions imposed by s. The and operations have the same priorities as the comparison operations. The (concatenation) and (repetition) operations have the same priority as the corresponding numeric operations. if an item of s is equal to x, else if an item of s is equal to x, else the concatenation of s and t equivalent to adding s to itself n times slice of s from i to j with step k index of the first occurrence of x in s (at or after index i and before index j) total number of occurrences of x in s Sequences of the same type also support comparisons. In particular, tuples and lists are compared lexicographically by comparing corresponding elements. This means that to compare equal, every element must compare equal and the two sequences must be of the same type and have the same length. (For full details see Comparisons in the language reference.) Forward and reversed iterators over mutable sequences access values using an index. That index will continue to march forward (or backward) even if the underlying sequence is mutated. The iterator terminates only when an or a is encountered (or when the index drops below zero).\n• None While the and operations are used only for simple containment testing in the general case, some specialised sequences (such as , and ) also use them for subsequence testing:\n• None Values of n less than are treated as (which yields an empty sequence of the same type as s). Note that items in the sequence s are not copied; they are referenced multiple times. This often haunts new Python programmers; consider: What has happened is that is a one-element list containing an empty list, so all three elements of are references to this single empty list. Modifying any of the elements of modifies this single list. You can create a list of different lists this way: Further explanation is available in the FAQ entry How do I create a multidimensional list?.\n• None If i or j is negative, the index is relative to the end of sequence s: or is substituted. But note that is still .\n• None The slice of s from i to j is defined as the sequence of items with index k such that . If i or j is greater than , use . If i is omitted or , use . If j is omitted or , use . If i is greater than or equal to j, the slice is empty.\n• None The slice of s from i to j with step k is defined as the sequence of items with index such that . In other words, the indices are , , , and so on, stopping when j is reached (but never including j). When k is positive, i and j are reduced to if they are greater. When k is negative, i and j are reduced to if they are greater. If i or j are omitted or , they become “end” values (which end depends on the sign of k). Note, k cannot be zero. If k is , it is treated like .\n• None Concatenating immutable sequences always results in a new object. This means that building up a sequence by repeated concatenation will have a quadratic runtime cost in the total sequence length. To get a linear runtime cost, you must switch to one of the alternatives below:\n• None if concatenating objects, you can build a list and use at the end or else write to an instance and retrieve its value when complete\n• None if concatenating objects, you can similarly use or , or you can do in-place concatenation with a object. objects are mutable and have an efficient overallocation mechanism\n• None for other types, investigate the relevant class documentation\n• None Some sequence types (such as ) only support item sequences that follow specific patterns, and hence don’t support sequence concatenation or repetition.\n• None raises when x is not found in s. Not all implementations support passing the additional arguments i and j. These arguments allow efficient searching of subsections of the sequence. Passing the extra arguments is roughly equivalent to using , only without copying any data and with the returned index being relative to the start of the sequence rather than the start of the slice. The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the built-in. This support allows immutable sequences, such as instances, to be used as keys and stored in and instances. Attempting to hash an immutable sequence that contains unhashable values will result in . The operations in the following table are defined on mutable sequence types. The ABC is provided to make it easier to correctly implement these operations on custom sequence types. In the table s is an instance of a mutable sequence type, t is any iterable object and x is an arbitrary object that meets any type and value restrictions imposed by s (for example, only accepts integers that meet the value restriction ). item i of s is replaced by x slice of s from i to j is replaced by the contents of the iterable t the elements of are replaced by those of t removes the elements of from the list appends x to the end of the sequence (same as ) removes all items from s (same as ) creates a shallow copy of s (same as ) extends s with the contents of t (for the most part the same as ) inserts x into s at the index given by i (same as ) retrieves the item at i and also removes it from s removes the first item from s where is equal to x reverses the items of s in place\n• None If k is not equal to , t must have the same length as the slice it is replacing.\n• None The optional argument i defaults to , so that by default the last item is removed and returned.\n• None raises when x is not found in s.\n• None The method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence.\n• None and are included for consistency with the interfaces of mutable containers that don’t support slicing operations (such as and ). is not part of the ABC, but most concrete mutable sequence classes provide it.\n• None The value n is an integer, or an object implementing . Zero and negative values of n clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for under Common Sequence Operations. Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application). Lists may be constructed in several ways:\n• None Using a pair of square brackets to denote the empty list:\n• None Using the type constructor: or The constructor builds a list whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a list, a copy is made and returned, similar to . For example, returns and returns . If no argument is given, the constructor creates a new empty list, . Many other operations also produce lists, including the built-in. Lists implement all of the common and mutable sequence operations. Lists also provide the following additional method: This method sorts the list in place, using only comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state). accepts two arguments that can only be passed by keyword (keyword-only arguments): key specifies a function of one argument that is used to extract a comparison key from each list element (for example, ). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of means that list items are sorted directly without calculating a separate key value. The utility is available to convert a 2.x style cmp function to a key function. reverse is a boolean value. If set to , then the list elements are sorted as if each comparison were reversed. This method modifies the sequence in place for economy of space when sorting a large sequence. To remind users that it operates by side effect, it does not return the sorted sequence (use to explicitly request a new sorted list instance). The method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade). For sorting examples and a brief sorting tutorial, see Sorting Techniques. CPython implementation detail: While a list is being sorted, the effect of attempting to mutate, or even inspect, the list is undefined. The C implementation of Python makes the list appear empty for the duration, and raises if it can detect that the list has been mutated during a sort. Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a or instance). Tuples may be constructed in a number of ways:\n• None Using a pair of parentheses to denote the empty tuple:\n• None Using a trailing comma for a singleton tuple: or\n• None Using the built-in: or The constructor builds a tuple whose items are the same and in the same order as iterable’s items. iterable may be either a sequence, a container that supports iteration, or an iterator object. If iterable is already a tuple, it is returned unchanged. For example, returns and returns . If no argument is given, the constructor creates a new empty tuple, . Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity. For example, is a function call with three arguments, while is a function call with a 3-tuple as the sole argument. Tuples implement all of the common sequence operations. For heterogeneous collections of data where access by name is clearer than access by index, may be a more appropriate choice than a simple tuple object. The type represents an immutable sequence of numbers and is commonly used for looping a specific number of times in loops. The arguments to the range constructor must be integers (either built-in or any object that implements the special method). If the step argument is omitted, it defaults to . If the start argument is omitted, it defaults to . If step is zero, is raised. For a positive step, the contents of a range are determined by the formula where and . For a negative step, the contents of the range are still determined by the formula , but the constraints are and . A range object will be empty if does not meet the value constraint. Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices. Ranges containing absolute values larger than are permitted but some features (such as ) may raise . Ranges implement all of the common sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern). The value of the start parameter (or if the parameter was not supplied) The value of the stop parameter The value of the step parameter (or if the parameter was not supplied) The advantage of the type over a regular or is that a object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the , and values, calculating individual items and subranges as needed). Range objects implement the ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices (see Sequence Types — list, tuple, range): Testing range objects for equality with and compares them as sequences. That is, two range objects are considered equal if they represent the same sequence of values. (Note that two range objects that compare equal might have different , and attributes, for example or .) Changed in version 3.2: Implement the Sequence ABC. Support slicing and negative indices. Test objects for membership in constant time instead of iterating through all items. Changed in version 3.3: Define ‘==’ and ‘!=’ to compare range objects based on the sequence of values they define (instead of comparing based on object identity).\n• None The linspace recipe shows how to implement a lazy version of range suitable for floating-point applications."
    },
    {
        "link": "https://w3schools.com/python/python_ref_functions.asp",
        "document": ""
    },
    {
        "link": "https://docs.python.org/3/reference/datamodel.html",
        "document": "Objects are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (In a sense, and in conformance to Von Neumann’s model of a “stored program computer”, code is also represented by objects.) Every object has an identity, a type and a value. An object’s identity never changes once it has been created; you may think of it as the object’s address in memory. The operator compares the identity of two objects; the function returns an integer representing its identity. CPython implementation detail: For CPython, is the memory address where is stored. An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type. The function returns an object’s type (which is an object itself). Like its identity, an object’s type is also unchangeable. The value of some objects can change. Objects whose value can change are said to be mutable; objects whose value is unchangeable once they are created are called immutable. (The value of an immutable container object that contains a reference to a mutable object can change when the latter’s value is changed; however the container is still considered immutable, because the collection of objects it contains cannot be changed. So, immutability is not strictly the same as having an unchangeable value, it is more subtle.) An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable. Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. An implementation is allowed to postpone garbage collection or omit it altogether — it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable. CPython implementation detail: CPython currently uses a reference-counting scheme with (optional) delayed detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not guaranteed to collect garbage containing circular references. See the documentation of the module for information on controlling the collection of cyclic garbage. Other implementations act differently and CPython may change. Do not depend on immediate finalization of objects when they become unreachable (so you should always close files explicitly). Note that the use of the implementation’s tracing or debugging facilities may keep objects alive that would normally be collectable. Also note that catching an exception with a … statement may keep objects alive. Some objects contain references to “external” resources such as open files or windows. It is understood that these resources are freed when the object is garbage-collected, but since garbage collection is not guaranteed to happen, such objects also provide an explicit way to release the external resource, usually a method. Programs are strongly recommended to explicitly close such objects. The … statement and the statement provide convenient ways to do this. Some objects contain references to other objects; these are called containers. Examples of containers are tuples, lists and dictionaries. The references are part of a container’s value. In most cases, when we talk about the value of a container, we imply the values, not the identities of the contained objects; however, when we talk about the mutability of a container, only the identities of the immediately contained objects are implied. So, if an immutable container (like a tuple) contains a reference to a mutable object, its value changes if that mutable object is changed. Types affect almost all aspects of object behavior. Even the importance of object identity is affected in some sense: for immutable types, operations that compute new values may actually return a reference to any existing object with the same type and value, while for mutable objects this is not allowed. For example, after , a and b may or may not refer to the same object with the value one, depending on the implementation. This is because is an immutable type, so the reference to can be reused. This behaviour depends on the implementation used, so should not be relied upon, but is something to be aware of when making use of object identity tests. However, after , c and d are guaranteed to refer to two different, unique, newly created empty lists. (Note that assigns the same object to both e and f.)"
    },
    {
        "link": "https://docs.python.org/3/library/builtins.html",
        "document": "This module provides direct access to all ‘built-in’ identifiers of Python; for example, is the full name for the built-in function .\n\nThis module is not normally accessed explicitly by most applications, but can be useful in modules that provide objects with the same name as a built-in value, but in which the built-in of that name is also needed. For example, in a module that wants to implement an function that wraps the built-in , this module can be used directly:\n\nAs an implementation detail, most modules have the name made available as part of their globals. The value of is normally either this module or the value of this module’s attribute. Since this is an implementation detail, it may not be used by alternate implementations of Python."
    }
]