[
    {
        "link": "https://geeksforgeeks.org/netstat-command-linux",
        "document": "The netstat command is like a special tool in Linux that helps you understand and check things about how your computer connects to the internet. It can tell you about the connections your computer is making, the paths it uses to send information, and even some technical details like how many packets of data are being sent or received. In simple terms, it’s like a window that shows you what’s happening with your computer and the internet. This article will help you learn how to use netstat, exploring different ways to get specific information and giving you a better idea of what’s going on behind the scenes.\n\nstands for network statistics. It allows users to display network-related information and diagnose various networking issues. The command has several options that can be combined to retrieve specific details.\n\nBelow is the general syntax of the command:\n\nLet’s explore some of the most commonly used options along with examples:\n\nSome Practical Examples of netstat Commands in Linux:\n\n1) Show Both Listening and Non-listening Sockets Using netstat Command in Linux\n\n-a -all : Show both listening and non-listening sockets. With the –interfaces option, show interfaces that are not up.\n\n2) List All TCP Ports Using netstat Command in Linux\n\nThis command specifically lists all TCP ports, giving you information about the TCP connections your system is engaged in.\n\n3) List All UDP Ports Using netstat Command in Linux\n\nSimilar to the previous example, this command focuses on UDP ports, revealing details about UDP connections.\n\n4) List Only Listening Ports Using netstat Command in Linux\n\nBy using this option, you can see only the ports that are actively listening for incoming connections\n\nTo list only the listening ports.\n\n5) List Only Listening TCP Ports Using netstat Command in Linux\n\nNarrowing it down further, this command specifically lists the TCP ports that are in a listening state.\n\nTo list only the listening tcp ports.\n\n6) List Only Listening UDP Ports Using netstat Command in Linux\n\nSimilarly, this command focuses on displaying only the UDP ports that are actively listening.\n\nTo list only the listening udp ports.\n\n7) List Only Listening UNIX Ports Using netstat Command in Linux\n\nFor those working with UNIX systems, this option shows only the UNIX ports that are in a listening state.\n\nTo list only the listening UNIX ports.\n\n8) List Statistics for All Ports Using netstat Command in Linux\n\nThis command provides statistical information for all ports, offering insights into network activity.\n\nTo list the statistics for all ports.\n\n9) List Statistics for TCP Ports Using netstat Command in Linux\n\nFor a more specific breakdown, this command displays statistics exclusively for TCP ports.\n\nTo list the statistics for TCP ports.\n\n10) List Statistics for UDP Ports Using netstat Command in Linux\n\nSimilarly, this command focuses on the statistical information related to UDP ports.\n\nThis option enriches the output by displaying Process ID (PID) and program names associated with network connections.\n\nTo display the PID and program names.\n\nExecuting this command continuously prints netstat information, updating at regular intervals to provide real-time insights.\n\n13) Get Non-supportive Address Families Using netstat Command in Linux\n\nTo identify non-supportive address families on the system, use this command for a detailed overview.\n\nTo get the non-supportive address families in the system.\n\nAt the end, we have something like this.\n\nTo get the kernel routing information.\n\n15) Get Port on Which a Program is Running Using netstat Command in Linux\n\nTo find the port on which a specific program, in this case, SSH, is running, use this command.\n\nTo get the port on which a program is running.\n\n16) Identify Process Using a Particular Port Using netstat Command in Linux\n\nThis command helps identify the process associated with a given port, such as port 80 in this example.\n\nTo get the process which is using the given port.\n\n17) Get List of Network Interfaces Using netstat Command in Linux\n\nUse this command to obtain a list of network interfaces, providing details about each interface’s activities.\n\nTo get the list of network interfaces.\n\nDisplay Extended Information on Interfaces Using netstat Command in Linux\n\nFor extended information on interfaces, similar to the output of the command, use this option to gain comprehensive insights.\n\nTo display extended information on the interfaces\n\nWhat is the netstat command in Linux used for?\n\nHow do I view all active connections using netstat?\n\nCan netstat show the processes associated with network connections?\n\nHow do I monitor network activity in real-time with netstat?\n\nWhat is the difference between netstat and ss command in Linux?\n\nHow to show listening network ports with netstat in Linux?\n\nHow to display all network connections with netstat in Linux?\n\nIn this article we discussed the netstat command in Linux which is like a special tool that helps you see how your computer connects to the internet. It’s like a window showing you information about connections, data paths, and technical details. This article covers practical examples of netstat commands, from displaying active connections to listing specific types of ports and getting detailed statistics. Whether you’re a beginner or more advanced, netstat offers versatile options. Common questions are answered, making it clear what netstat does and how it differs from other commands like ss in Linux. This knowledge helps users diagnose network issues and understand their system’s internet activities better."
    },
    {
        "link": "https://redhat.com/en/blog/netstat",
        "document": "The network statistics ( ) command is a networking tool used for troubleshooting and configuration, that can also serve as a monitoring tool for connections over the network. Both incoming and outgoing connections, routing tables, port listening, and usage statistics are common uses for this command. Let's take a look at some of the basic usage for and the most used cases.\n\nTo list all listening ports, using both TCP and UDP, use :\n\nNote: this output was edited for length.\n\nIf this looks like a lot of information to you, that is because it is a lot of information!\n\nIf you found the option to be too verbose, try the flag with it:\n\nThis gives you a much more user-friendly readout of the TCP connections only.\n\nThe same filter can be used to pull UDP connections down. Seen here:\n\nTo list all actively listening ports (both TCP and UDP), use the following command:\n\nNote: this output was edited for length.\n\nYou can apply filters to the listening ports as well by adding the and options depending on your desired protocol.\n\nThe combination of and are very commonly used for finding the number of listening programs on a port. We run the standard and then pipe to for a search key. For this example, we will use :\n\nNow that we know how to view connections and listening ports, let's take a look at pulling statistics.\n\nTo pull and view network statistics sorted by protocol use the following:\n\nFilters can be implemented for specific protocols in the same way that the connections/ports were filtered.\n\nIf all of this filtered data isn't for you, consider pulling the raw stats:\n\nA really handy trick for troubleshooting is to list out a service by PID. To do so, use the following command:\n\nThe option is another useful flag for troubleshooting. To view send/receive stats by interface, use the following:\n\nThere you have it. The command is an easy to use and powerful tool that any Linux network admin can put to use. I used extensively as a storage admin for troubleshooting, and I am sure that you will find some use for it, too. While in recent years has been deprecated in favor of the command, you may still find it in your networking toolbox. For a more modern take, I will explore in a future article, so be sure to keep an eye out for that!\n\n[ Getting started with networking? Check out the Linux networking cheat sheet. ]"
    },
    {
        "link": "https://man7.org/linux/man-pages/man8/netstat.8.html",
        "document": "Pages that refer to this page: networks(5), proc(5), proc_pid_net(5), icmp(7), arp(8), ifconfig(8), netcap(8), rarp(8), route(8), traceroute(8)"
    },
    {
        "link": "https://phoenixnap.com/kb/netstat-command",
        "document": "The command is a command-line tool for retrieving network statistics. It provides an overview of network activity and displays which ports are open or have established connections. is essential for diagnosing network issues.\n\nLearn key commands to display port and internet stats in Linux.\n\nThe command can be used without parameters to display active network connections:\n\nThe output displays details of active internet connections across six columns:\n• Recv-Q. Number of bytes received and waiting in the queue to be processed.\n• Send-Q. Number of bytes waiting in the queue to be sent.\n• Local address. Local address and port of the connection. An asterisk (*) in the host indicates that the server is listening on all available interfaces, and a port may not yet be established.\n• Foreign address. Remote address and port of the connection. An asterisk (*) appears if a connection is not yet established.\n• State. State of the local socket. Values include , , , or blank.\n\nThe second list shows all active Unix Domain open sockets with the following details:\n• Proto. Protocol used by the socket (always ).\n• RefCnt. Reference count of the number of processes attached to this socket.\n• Flags. Flags associated with the socket, usually or blank.\n• State. State of the socket, most often , , or blank.\n• I-Node. File system inode (index node) associated with this socket.\n\nYou can expand the command with options to filter or customize output:\n\nOr, you can combine multiple options in one command for a more detailed overview of network stats:\n\nThe following table lists the most commonly used options:\n\nThis section contains practical examples of command usage with one or more options.\n\nTo list all ports and connections regardless of their state or protocol, use:\n\nThe output lists established connections along with servers that are open or listening.\n\nTo list all UDP ports, use the following command:\n\nTo return a list of only listening ports for all protocols, use:\n\nDisplay statistics for all ports regardless of the protocol with:\n\nStatistics are also filterable by protocol.\n\nList statistics for TCP ports only with:\n\nTo list statistics for UDP ports only, use:\n\nTo see the maximum transmission unit (MTU) size, as well as received and transmitted packets, in the kernel interface table, enter:\n\nTo include additional network interface details, such as error counts and extended statistics, add the -e option to netstat -i:\n\nDisplay the PID and program name related to a specific connection by adding the -p option to netstat. For example, to view TCP connections with their associated PID and program name, type:\n\nRoot privileges may be required to view TCP connections with their PIDs.\n\nThe list of programs appears on the right side of the output.\n\nAdd the option to the command to print information every second:\n\nFor example, to print the kernel interface table continuously, run:\n\nList addresses without support on the system with:\n\nThe information is found at the end of the output:\n\nTo show only host addresses as numerical, run:\n\nShow only ports as numerical with:\n\nFind a Process That Is Using a Particular Port\n\nUse the grep command to filter the data from . To find a process that uses a particular port number, enter:\n\nThere are many options. Access the list of all the available commands and a short description using:\n\nYou know how the command works and its syntax and options. Use to get an overview of network activities and port availability and troubleshoot network issues in Linux.\n\nIf you are a network engineer or system administrator, explore the best network security tools to protect your system more efficiently."
    },
    {
        "link": "https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/netstat",
        "document": "Displays active TCP connections, ports on which the computer is listening, Ethernet statistics, the IP routing table, IPv4 statistics (for the IP, ICMP, TCP, and UDP protocols), and IPv6 statistics (for the IPv6, ICMPv6, TCP over IPv6, and UDP over IPv6 protocols). Used without parameters, this command displays active TCP connections.\n• None The netstat command provides statistics for the following: The name of the protocol (TCP or UDP). The IP address of the local computer and the port number being used. The name of the local computer that corresponds to the IP address and the name of the port is shown unless the -n parameter is specified. If the port is not yet established, the port number is shown as an asterisk (*). The IP address and port number of the remote computer to which the socket is connected. The names that corresponds to the IP address and the port are shown unless the -n parameter is specified. If the port is not yet established, the port number is shown as an asterisk (*). Indicates the state of a TCP connection, including:\n\nTo display both the Ethernet statistics and the statistics for all protocols, type:\n\nTo display the statistics for only the TCP and UDP protocols, type:\n\nTo display active TCP connections and the process IDs every 5 seconds, type:\n\nTo display active TCP connections and the process IDs using numerical form, type:"
    },
    {
        "link": "https://stackoverflow.com/questions/54489008/bash-check-given-port-range-if-in-use-and-tell-if-all-in-use",
        "document": "If I understand from your last comment that you have thousands of ports in use and you want to be able to set some starting port number, and iterate over the port numbers until you find an available , then you can use as outlined above, and with GNU (e.g. ) find the first available without much hassle.\n\nFor example, calling the command as above, and with then with initially setting your and filling an array with all the ports in use and then using the rule to sort and iterate over the ports in use incrementing by each iteration until ports in use, e,g, you can locate the first available port.\n\nA short call to should do it:\n\nJust save it and call it with:\n\nIn my case where the ports in use are:\n\nYou can add an to limit the number of ports you consider available to the rule. The following will only consider ports from your minimum up to the . (you could also rearrange and just add a number to consider, like , and just do the math from the minimum)\n\nThe is just added as an additional variable at the beginning of the command and used in the rule.\n\nTo have report the local port, add the option to the command and an additional check to make sure the port is a numeric port and not just . Making the changes, you could alter the first part as follows:\n\nUsing it with local ports, it lists my ports in use as:\n\nGive it a shot and let me know if you have further questions."
    },
    {
        "link": "https://stackoverflow.com/questions/21876564/shell-script-how-to-port-checking-based-on-range-example-port-no-10000-300",
        "document": "If the question was more about how to do the range in a script:\n\nwill print on each line numbers 1000 to 3000\n\nSo you could have in your script\n\nOtherwise, as @jm666 rightly pointed out, it's really a job that nmap was built to do (and will do probably much better than most scripts you could ever make... Or, please, contribute your improvements to the nmap team!)"
    },
    {
        "link": "https://community.unix.com/t/check-unused-ports-in-a-given-range-and-assign-an-open-one/364417",
        "document": "Hi. I need to add code to my KSH script to automatically assign an open port number from a pre-defined range to an Oracle listener.\n\nHi Jim. I'd better give a bit more info. I'm generating a new listener file for a gateway from a script so I have to assign a port. There will be multiple listeners running on different ports on that same host. If I choose one that's already in use the new listener obviously won't start. The range I'll choose this from is not the important part, I'll simply stick to the default range defined for Oracle. I just need to know the best way to determine if the port I choose is in use already. Thanks. ---------- Post updated at 11:53 AM ---------- Previous update was at 10:42 AM ---------- So this should work, right? Or am I missing something?\n\nYou need a few changes in your script: I just do not see why you are doing this manually, but whatever. If you have issues, consider this port selection something to check first.\n\nBecause I'm creating the related tnsnames entry on the DB host at the same time. It's all automated through a GUI with the push of a button. Everything has to be done for the end user who knows nothing about Oracle. @Jim, that's also why it's not done manually. My script has to choose a free port on a specified host in order to create a new listener file from scratch and then start it. There will be multiple listeners running simultaneously and each has to have it's own unique port. Hope that clarifies it.\n\nCan I assume that you are publishing tnsnames.ora so that anyone can read it? If so, why are you wanting to set up a listener on a new port? The Oracle listener can support connections to multiple databases on the same host, all using the default port 1521. The database is coded in the connection request from the client whether you use the default port or any other port, unless your listener has a 'default if not specified' type definition. It would seem far better to use the listener and add connection details for each database. That way, the client never needs to worry about finding out which port to connect on, it just specifies the database name. What am I missing here? If you are after hardening your server so that an intruder doesn't know which port to attack, then you have the same problem for your clients in that they will have to have a way to find out. Can you explain the reasons why you want multiple listening processes? After the connection is established, the listener keeps out the way of the communication, so it's not a bottleneck to performance.\n\nI don't see MSSQL mentioned earlier and I missed the point about them being Gateway as opposed to plain database listeners, but how about this suggestion:-\n• Select a range of ports that are free\n• Define them in /etc/services quoting the database name (DA, DB, DC, DD etc.)\n• As the listener starts, it reads /etc/services and starts on a fixed port number, reporting failures however you choose, e.g. syslog, email, sms, console, 3rd party tools etc. That way you know the ports should be allocated to just your service. If you start them at boot, then one would think that they should still be free. if something else is grabbing one, then find out why and/or change /etc/services to move your service to a new port. It's not foolproof because not everything respects /etc/services but it's a good place to start and many network tools (e.g. netstat & lsof) do, making their output more meaningful. You could even (if your databases are using a sequential naming system) make the port numbers obvious and predictable, e.g. DA is port 13001, DB is port 13002, etc. This would give your clients wanting to connect a consistent port to connect to."
    },
    {
        "link": "https://unix.stackexchange.com/questions/149419/how-to-check-whether-a-particular-port-is-open-on-a-machine-from-a-shell-script",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://blackdown.org/check-open-ports-linux",
        "document": "An open port, also called a listening port, is essentially an address on your network system to which data packets can be sent. Many services make use of different ports. An open port can receive packets from anywhere hence it is important to configure its security through the firewall or any connectivity issues, if any.\n\nIt is then fundamental to first check or scan for open ports in order to make changes to the ports. A port has any of the four states: open, closed, filtered, and unfiltered. It is advisable only to leave those ports open which are important for functionality while all other ports should stay closed. With every port open, you are at an added risk of attacks. Not to mention, the nature of such attacks are unexpected and challenging to trace.\n\nHow to Check for Ports\n\nLet’s assume you are running a web server on ports 80 and 110 and the same ports, 80 and 110, are also open on your firewall, everyone will be able to access said ports unless you explicitly ban specific IP addresses through your firewall. If such cases arise, scan for open ports.\n\nThere are multiple ways of checking or scanning open ports. Let’s go through some of them.\n\nnmap is arguably the most powerful feature for scanning networks due to its wide variety of tools. With nmap, you can scan anything from vast network systems to individual hosts. Moreover, you can identify the target system’s Operating System type, MAC address, and more.\n\nTo use nmap, you need to clear a few prerequisites. You will need terminal access with sudo or root privileges and the apt package or equivalent. Though apt is a default package, you can install it by using this command should you need it (for Debian/Ubuntu):\n\nTo check for nmap ports on any system, use this command:\n\nThe IP address from the above example can be replaced with any address you want to target. Regardless, this line should return data about the ports present in the system.\n\nFor scanning a specific address, like a host, type this:\n\nThe “www.randomhost.com” can be any host address.\n\nIt is also possible to scan targets through text files:\n\nTo check for multiple IP addresses at once, type this in the terminal:\n\nThis helps in widening the search scope and saves time. However, you can still scan for specific ports with nmap. For instance, scanning for a particular port will require this line of command:\n\nThe -p command encompasses the scan to all of the 65535 ports and adding a port, such as the 110, targets the scan to that port only. Similarly, you can replace 110 with any other port number you specifically want to check.\n\nFor scanning a range of ports at once, use this:\n\nYou can also simply check for all ports. Just type:\n\nJust like an antivirus quick scan, nmap can run a quick scan for the most common ports. The command is as follows:\n\nIn order to check for TCP connections in your network, use this command:\n\nThe output should reveal the open ports.\n\nYou can also use the SYN method which performs only half of a TCP handshake. Type:\n\nFor checking or scanning UDP connections in your network, type this:\n\nAs mentioned earlier, nmap can be used for identifying the target system’s Operating System. Use the -A command for this. Example:\n\nnmap command has more functions to it than shown here. Look for all nmap commands and make a note of it.\n\nnetstat stands for network statistics and is responsible for providing an overview of your network status. We can use netstat to print information regarding open ports after passing the needed query.\n\nTo get a list of open ports using netstat, type this line of command:\n\nNow this command has various functions. The ‘-l’ informs netstat to output the open ports, ‘-t’ shows all the TCP connections, ‘-u’ is for all the UDP connections, and ‘-p’ showcases the application names of the listening ports.\n\nIf you add -n flag to the previous command, it will output numerical values instead of service/application names. For example:\n\nThe netstat command can be coupled with grep to scan for specific ports. For instance, to detect which application is listening on a particular port, use:\n\nInversely, to check the application by typing this:\n\nnetcat is basically a cat command except it can work on networks as well. It is possible to scan single and multiple networks over TCP and UDP protocols using netcat.\n\nTo scan for open ports over a TCP protocol, use this line of command:\n\nThe ‘-z’ flag enables nc to scan for open ports without having to send data and ‘-v’ simply provides a more detailed output. You can also search for a range of ports by adding this:\n\nThe command for the UDP counterpart is as follows:\n\nThese commands will return all ports specified, though you can further customize your output by using the grep command. For instance, if you only want the system to return open ports, try:\n\nLinux/Unix considers everything as a file. Therefore, the lsof (meaning List Open Files) is also relevant for scanning open ports.\n\nIn order to list all internet and network-related files, use this command:\n\nsudo lsof -i where ‘-i‘ indicates all internet and network-related files. Your output should be a big list of network files.\n\nNow simply specify a port to check which application is listening to it. Type:\n\nThis method is more towards shell scripting but works the same nonetheless. By executing commands on a bash pseudo-device, it establishes either a TCP or UDP connection to the given host and port.\n\nWe can use loops to scan for the status of particular ports on given hosts. For example:\n\nWe can scan for a range of ports through a simple for loop. The script is as follows:\n\nThese 5 methods are one of the quickest and easiest ways of checking for open ports. Furthermore, they are useful for filtering ports in your firewall in order to maintain network connectivity and security standards and protocols."
    }
]