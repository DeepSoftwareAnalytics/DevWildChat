[
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/19/dbseg/configuring-authentication.html",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/18/dbseg/configuring-authentication.html",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/database/121/DBSEG/authentication.htm",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/19/dbseg/configuring-network-data-encryption-and-integrity.html",
        "document": "You can use the Diffie-Hellman key negotiation algorithm to secure data in a multiuser environment. Secure key distribution is difficult in a multiuser environment. Oracle Database uses the well known Diffie-Hellman key negotiation algorithm to perform secure key distribution for both encryption and data integrity. When encryption is used to protect the security of encrypted data, keys must be changed frequently to minimize the effects of a compromised key. Accordingly, the Oracle Database key management function changes the session key with every session. The Diffie-Hellman key negotiation algorithm is a method that lets two parties communicating over an insecure channel to agree upon a random number known only to them. Oracle Database uses the Diffie-Hellman key negotiation algorithm to generate session keys. The client and the server begin communicating using the session key generated by Diffie-Hellman. When the client authenticates to the server, they establish a shared secret that is only known to both parties. Oracle Database combines the shared secret and the Diffie-Hellman session key to generate a stronger session key designed to defeat a third-party attack. Oracle recommends that you use the more secure authenticated connections available with Oracle Database. If you use anonymous Diffie-Hellman with RC4 for connecting to Oracle Internet Directory for Enterprise User Security, then you must migrate to use a different algorithm connection. Oracle recommends that you use either TLS one-way, or mutual authentication using certificates."
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/21/dbseg/configuring-authentication.html",
        "document": ""
    },
    {
        "link": "https://oracle.com/security",
        "document": ""
    },
    {
        "link": "https://oracle.com/security/database-security",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/en/solutions/oci-best-practices/secure-your-databases1.html",
        "document": "Ensure that the database servers, network access to them, and the actual data are secure.\n\nTo prevent inadvertent or malicious deletion of databases, grant the delete permissions ( and ) to a minimum set of users and groups. The following IAM policy statements allow DB users to manage databases, database systems, and database homes. But the condition ensures that the DB users can't delete databases. Allow group DBUsers to manage db-systems in tenancy where request.permission!='DB_SYSTEM_DELETE' Allow group DBUsers to manage databases in tenancy where request.permission!='DATABASE_DELETE' Allow group DBUsers to manage db-homes in tenancy where request.permission!='DB_HOME_DELETE'\n\nAll databases created in are encrypted using transparent data encryption (TDE). Ensure that any migrated databases are also encrypted. Periodically rotate the TDE master key. The recommended rotation period is 90 days or less. Periodically rotate the TDE master key. The recommended rotation period is 90 days or less.\n\nUse Transparent Data Encryption (TDE) to secure and manage keys. TDE is a feature of Oracle Database used to encrypt sensitive data. For more complex setups and for larger organisations, a centralised key management is needed, as managing encryption keys across different databases, applications, and servers can be a complex task. A centralised key management simplifies this by providing a unified platform where all cryptographic keys, Oracle Wallets, Java Keystores, and other secrets can be securely stored and managed. This centralisation reduces administrative overhead, improves security posture, and ensures consistent key management practices across the enterprise.\n\nWhen possible, use private endpoints with Oracle Autonomous Database. A private endpoint is used to eliminate public access to shared autonomous databases. All traffic for the database remains private using a VCN in without the need for transit routing or use of a service gateway.\n• For the Private Endpoint Network Security Group, define a stateless Ingress Rule with Protocol TCP and Destination Port equal to the Database Listener Port. Restrict source CIDR label to only subnets or, for on-premises, Dynamic Routing Gateways (DRGs), with allowed access.\n• For the Private Endpoint Network Security Group, define a stateless Egress Rule with Protocol TCP. Restrict destination CIDR to only subnets or, for on-premises, DRGs, with allowed access.\n\nOracle's Maximum Security Architecture provides a robust framework for protecting sensitive data in databases. It offers a comprehensive approach to database security, focusing on three critical areas: assess, detect, and prevent. By assessing the current state of the database, organizations can identify vulnerabilities and weaknesses that might be exploited by attackers. This involves evaluating the database configuration, user access controls, and data protection measures. Detecting inappropriate or unauthorized access attempts is the next crucial layer of defense. Oracle's advanced auditing capabilities enable organizations to monitor database activities, identify suspicious behavior, and respond promptly to potential threats. By setting up alerts and monitoring key database events, administrators can detect and mitigate attacks before they cause significant damage. Preventing unauthorized access to data is the final fortress in Oracle's security architecture. This includes implementing strong authentication mechanisms, access control lists, and encryption techniques. By segregating duties, using least privilege principles, and employing virtual private databases, organizations can ensure that only authorized users can access sensitive data, thereby preventing unauthorized modifications or disclosures."
    },
    {
        "link": "https://oracle.com/pk/security",
        "document": ""
    },
    {
        "link": "https://docs.oracle.com/en/database/oracle/oracle-database/19/dbseg/keeping-your-oracle-database-secure.html",
        "document": "Information security, and privacy and protection of corporate assets and data are critical in any business. Oracle Database comprehensively addresses the need for information security by providing cutting-edge security features such as deep data protection, auditing, scalable security, secure hosting, and data exchange. Oracle Database leads the industry in security. To maximize the security features offered by Oracle Database in any business environment, it is imperative that the database itself be well protected. Security guidelines provide advice about how to configure Oracle Database to be secure by adhering to and recommending industry-standard and advisable security practices for operational database deployments. Many of the guidelines described in this section address common regulatory requirements such as those described in the Sarbanes-Oxley Act. For more information about how Oracle Database addresses regulatory compliance, protection of personally identifiable information, and internal threats, visit:\n\nOracle provides guidelines to secure user accounts and privileges.\n• Oracle Database installs with several default database user accounts. Upon successful installation of the database, the Database Configuration Assistant automatically locks and expires most default database user accounts. If you perform a manual (without using Database Configuration Assistant) installation of Oracle Database, then no default database users are locked upon successful installation of the database server. Or, if you have upgraded from a previous release of Oracle Database, you may have default accounts from earlier releases. Left open in their default states, these user accounts can be exploited, to gain unauthorized access to data or disrupt database operations. You should lock and expire all default database user accounts. Oracle Database provides SQL statements to perform these operations. For example: Installing additional products and components after the initial installation also results in creating more default database accounts. Database Configuration Assistant automatically locks and expires all additionally created database user accounts. Unlock only those accounts that need to be accessed on a regular basis and assign a strong, meaningful password to each of these unlocked accounts. Oracle provides SQL and password management to perform these operations. If any default database user account other than the ones left open is required for any reason, then a database administrator (DBA) must unlock and activate that account with a new, secure password. If a default database user account, other than the ones left open, is required for any reason, then a database administrator (DBA) can unlock and activate that account with a new, secure password. If you install Oracle Enterprise Manager, the and accounts are open, unless you configure Oracle Enterprise Manager for central administration. In this case, the account (if present) will be locked. If you do not install Oracle Enterprise Manager, then only the and accounts are open. Database Configuration Assistant locks and expires all other accounts (including and ).\n• Discourage users from using the NOLOGGING clause in SQL statements. In some SQL statements, the user has the option of specifying the clause, which indicates that the database operation is not logged in the online redo log file. Even though the user specifies the clause, a redo record is still written to the online redo log file. However, there is no data associated with this record. Because of this, using has the potential for malicious code to be entered can be accomplished without an audit trail.\n• Practice the principle of least privilege.\n• Do not provide database users or roles more privileges than are necessary. (If possible, grant privileges to roles, not users.) In other words, the principle of least privilege is that users be given only those privileges that are actually required to efficiently perform their jobs. To implement this principle, restrict the following as much as possible:\n• The number of and privileges granted to database users.\n• The number of people who are allowed to make -privileged connections to the database.\n• The number of users who are granted the privileges, such as the privilege. For example, there is generally no need to grant privileges to a non-DBA-privileged user.\n• The number of users who are allowed to perform actions that create, modify, or drop database objects, such as the , , statements, and so on.\n• Limit granting the CREATE ANY EDITION and DROP ANY EDITION privileges. To maintain additional versions of objects, editions can increase resource and disk space consumption in the database. Only grant the and privileges to trusted users who are responsible for performing upgrades.\n• Re-evaluate the SELECT object privilege and SELECT ANY TABLE system privileges that you have granted to users. If you want to restrict users to only being able to query tables, views, materialized views, and synonyms, then grant users the object privilege, or for trusted users only, the system privilege. If in addition to performing query operations, you want users to be able to lock tables in exclusive mode or perform statements, then grant the user the object privilege or, for trusted users only, the system privilege.\n• Restrict the CREATE ANY JOB, BECOME USER, EXP_FULL_DATABASE, and IMP_FULL_DATABASE privileges. Also restrict grants of the CREATE DIRECTORY and CREATE ANY DIRECTORY privileges. These are powerful security-related privileges. Only grant these privileges to users who need them.\n• Restrict the BECOME USER privilege to users of Oracle Data Pump, and the DBMS_WORKLOAD_CAPTURE and DBMS_WORKLOAD_REPLAY packages. The privilege is used only for the following subsystems:\n• Oracle Data Pump Import utilities and , to assume the identity of another user to perform operations that cannot be directly performed by a third party (for example, loading objects such as object privilege grants). In an Oracle Database Vault environment, Database Vault provides several levels of required authorization that affect grants of .\n• and PL/SQL packages, as a required privilege to be granted to users who must use these packages. If you use the clause when invoking one of these subsystems (for example, in static references in PL/SQL code), then ensure that the is granted the privilege, either by a direct grant or through a role.\n• The , , , and privileges, and grants of convey a great deal of power to users. If you plan to create PL/SQL interfaces to libraries, only grant the privilege to the PL/SQL interface. Do not grant on the underlying library. You must have the privilege on a library to create the PL/SQL interface to it. However, users have this privilege implicitly on libraries that they create in their own schemas. Explicit grants of are rarely required. Only make an explicit grant of these privileges to trusted users, and never to the role.\n• The and system privileges convey a great deal of power to these users. Do not grant these privileges to users, unless they are trusted.\n• Do not allow non-administrative users access to objects owned by the SYS schema. Do not allow users to alter table rows or schema objects in the schema, because doing so can compromise data integrity. Limit the use of statements such as , , , , or similar object-modification statements on objects only to highly privileged administrative users.\n• Many Oracle Database products use run-time facilities, such as Oracle Java Virtual Machine (OJVM). Do not assign all permissions to a database run-time facility. Instead, grant specific permissions to the explicit document the root file paths for facilities that might run files and packages outside the database. Here is an example of a vulnerable run-time call, which individual files are specified: Here is an example of a better (more secure) run-time call, which specifies a directory path instead:\n• Revoke access to the following:\n• The table from all users except and accounts\n• The role from users who do not need this role\n• Granting privileges to roles and not individual users makes the management and tracking of privileges much easier.\n• Limit the proxy account (for proxy authorization) privileges to CREATE SESSION only.\n• Use secure application roles to protect roles that are enabled by application code. Secure application roles allow you to define a set of conditions, within a PL/SQL package, that determine whether or not a user can log on to an application. Users do not need to use a password with secure application roles. Another approach to protecting roles from being enabled or disabled in an application is the use of role passwords. This approach prevents a user from directly accessing the database in SQL (rather than the application) to enable the privileges associated with the role. However, Oracle recommends that you use secure application roles instead, to avoid having to manage another set of passwords.\n• Create privilege captures to find excessively granted privileges. Privilege analysis captures the privileges that users and applications use, and then presents these in a format for easy analysis. From there, you can revoke unnecessary privileges if you want.\n• Monitor the granting of the following privileges only to users and roles who need these privileges. By default, Oracle Database audits the following privileges: Oracle recommends that you also audit the following privileges:\n• Privileges that have the clause\n• Privileges that have the clause\n• Privileges that have the keyword\n• Use the following data dictionary views to find information about user access to the database.\n\nOracle provides guidelines for securing passwords in a variety of situations. When you create a user account, Oracle Database assigns a default password policy for that user. The password policy defines rules for how the password should be created, such as a minimum number of characters, when it expires, and so on. You can strengthen passwords by using password policies. See also Configuring Password Protection for additional ways to protect passwords. Follow these guidelines to further strengthen passwords:\n• Minimum Requirements for Passwords describes the minimum requirements for passwords. Follow these additional guidelines when you create or change passwords:\n• Make the password have a length of between 12 and 30 bytes, and include both alphabetic characters and digits in the password.\n• Have the password contain at least one digit, one upper-case character, and one lower-case character.\n• Use mixed case characters and special characters in the password. (See Ensuring Against Password Security Threats by Using the 12C Password Version for more information.)\n• You can include multibyte characters in the password but not in the password of any common user or role.\n• Use the database character set for the password's characters, which can include the underscore (_), dollar ($), and number sign (#) characters.\n• You must enclose the following passwords in double-quotation marks:\n• Passwords starting with numbers or special characters and containing alphabetic characters. For example:\n• Passwords containing any character other than alphabetic characters, numbers, and special characters. For example:\n• You do not need to specify the following passwords in double-quotation marks.\n• Passwords starting with an alphabetic character (a–z, A–Z) and containing numbers (0–9) or special characters ($, #, _). For example:\n• Do not include double-quotation marks within the password.\n• Do not use an actual word for the entire password.\n• To create a longer, more complex password from a shorter, easier to remember password, create the password from the first letters of the words of an easy-to-remember sentence. For example, \"I usually work until 6:00 almost every day of the week\" can be .\n• Ensure that the password is sufficiently complex. Oracle Database provides a password complexity verification routine, the PL/SQL script , that you can run to check whether or not passwords are sufficiently complex. Ideally, edit the script to provide stronger password protections. See also About Password Complexity Verification for a sample routine that you can use to check passwords.\n• None In a non-multitenant environment, or in a PDB, if you want to use multibyte characters in the password, then ensure that the database character set is configured as a multibye character set so that the authentication will work properly. Be aware that because multibyte characters consume more bytes that single-byte characters, they tend to provide less entropy per byte. Because the maximum length of the password is currently limited to 30 bytes, to help increase the amount of entropy in a password, Oracle recommends that you also include a number of single-byte characters in the password, even when multibyte characters are being used. The passwords of common users and common roles cannot contain multibyte passwords.\n• Associate a password complexity function with the user profile or the default profile. The clause of the and statements associates a password complexity function with a user profile or the default profile. Password complexity functions ensure that users create strong passwords using guidelines that are specific to your site. Having a password complexity function also requires a user changing his or her own password (without the system privilege) to provide both the old and new passwords. You can create your own password complexity functions or use the password complexity functions that Oracle Database provides. See Managing the Complexity of Passwords for more information.\n• Oracle Database installs with a set of predefined, default user accounts. Security is most easily broken when a default database user account still has a default password even after installation. This is particularly true for the user account , which is a well known account that may be vulnerable to intruders. In Oracle Database, default accounts are installed locked with the passwords expired, but if you have upgraded from a previous release, you may still have accounts that use default passwords. To find user accounts that have default passwords, query the data dictionary view. See Finding User Accounts That Have Default Passwords for more information.\n• You can use the same or different passwords for the , , , and administrative accounts. Oracle recommends that you use different passwords for each. In any Oracle environment (production or test), assign strong, secure, and distinct passwords to these administrative accounts. If you use Database Configuration Assistant to create a new database, then it requires you to enter passwords for the and accounts, disallowing the default passwords and . Similarly, for production environments, do not use default passwords for administrative accounts, including and .\n• Apply basic password management rules (such as password length, history, complexity, and so forth) to all user passwords. Oracle Database has password policies enabled for the default profile. Guideline 1 in this section lists these password policies. You can find information about user accounts by querying the view. The column of the view indicates whether the password is global, external, or null. The view provides useful information such as the user account status, whether the account is locked, and password versions. Oracle also recommends, if possible, using Oracle strong authentication with network authentication services (such as Kerberos), token cards, smart cards, or X.509 certificates. These services provide strong authentication of users, and provide protection against unauthorized access to Oracle Database.\n• Do not store user passwords in clear text in Oracle tables. For better security, do not store passwords in clear text (that is, human readable) in Oracle tables. You can correct this problem by using a secure external password store to encrypt the password within an Oracle wallet. (An Oracle wallet is a secure software container that stores authentication and signing credentials.) See Managing the Secure External Password Store for Password Credentials for information. When you create or modify a password for a user account, Oracle Database automatically creates a cryptographic hash or digest of the password. If you query the view to find information about a user account, the data in the column indicates if the user password is global, external, or null. The view also has a column called , which lists the types of cryptographic hash that exist for the user's password ( or ). See for information in the section on about the cryptographic algorithm that these abbreviations correspond to.\n• None Disable the HTTP verifier if the user is not going to be using either XDB authentication or HTTP Digest authentication. The HTTP verifier is used only for XDB authentication and HTTP Digest authentication. If a user is not going to use XDB authentication or HTTP Digest authentication, then you can safely remove the HTTP verifier from the user's list of verifiers. To remove a user's HTTP verifier, execute the following statement:\n\nSecurity for network communications is improved by using client, listener, and network guidelines to ensure thorough protection.\n• Client Connection Security\n\nAuthenticating clients stringently, configuring encryption for the connection, and using strong authentication strengthens client connections.\n• Network Connection Security\n\nProtecting the network and its traffic from inappropriate access or modification is the essence of network security. Authenticating clients stringently, configuring encryption for the connection, and using strong authentication strengthens client connections. Because authenticating client computers is problematic, typically, user authentication is performed instead. This approach avoids client system issues that include falsified IP addresses, hacked operating systems or applications, and falsified or stolen client system identities. Nevertheless, the following guidelines improve the security of client connections:\n• None By default, Oracle allows operating system-authenticated logins only over secure connections, which precludes using Oracle Net and a shared server configuration. This default restriction prevents a user over a network connection. Setting the initialization parameter to forces the database to accept the client operating system user name received over an unsecure connection and use it for account access. Because clients, such as PCs, are not trusted to perform operating system authentication properly, it is poor security practice to use this feature. The default setting, , creates a more secure configuration that enforces proper, server-based authentication of clients connecting to an Oracle database. Be aware that the was deprecated in Oracle Database Release 11g (11.1) and is retained only for backward compatibility. You should not alter the default setting of the initialization parameter, which is . Setting this parameter to does not mean that users cannot connect remotely. It means that the database will not trust that the client has already authenticated, and will therefore apply its standard authentication processes. Be aware that the parameter was deprecated in Oracle Database 11g Release 1 (11.1), and is retained only for backward compatibility.\n• None Configure the connection to use encryption.\n• None See Configuring Kerberos Authentication, for more information about using Kerberos and public key infrastructure (PKI).\n• None In an Oracle Data Guard environment, set the initialization parameter. The parameter controls login attempts on Oracle Active Data Guard standby databases. It provides more security against login attacks across an Oracle Database production environment and all Active Data Guard standby databases. Use one of the following settings:\n• (default) enforces the existing behavior, which maintains a local copy of user account information in the standby database’s in-memory view. This setting only tracks login failures locally on a per-database basis. It denies the login when the maximum of failed logins is reached.\n• increases the security of logins by maintaining a single global copy of user account information across all Data Guard primary and standby databases. Login failures across all databases in the Data Guard environment count toward the maximum count. When this count is reached, then logins anywhere are denied access. To learn more about the parameter, see Protecting the network and its traffic from inappropriate access or modification is the essence of network security. You should consider all paths the data travels, and assess the threats on each path and node. Then, take steps to lessen or eliminate those threats and the consequences of a security breach. In addition, monitor and audit to detect either increased threat levels or penetration attempts. To manage network connections, you can use Oracle Net Manager. For more information about Net Manager, see .\n• Use Transport Layer Security (TLS) when administering the listener. TLS can protect the messages sent and received by you or by applications and servers, supporting secure authentication, authorization, and messaging through certificates and, if necessary, encryption.\n• Prevent online administration by requiring the administrator to have the write privilege on the listener password and on the listener.ora file on the server.\n• Add or alter this line in the file:\n• Use to reload the configuration.\n• Use TLS when administering the listener by making the TCPS protocol the first entry in the address list, as follows: To administer the listener remotely, you define the listener in the file on the client computer. For example, to access listener USER281 remotely, use the following configuration:\n• Do not set the listener password. Ensure that the password has not been set in the file. The local operating system authentication will secure the listener administration. The remote listener administration is disabled when the password has not been set. This prevents brute force attacks of the listener password. The listener password has been deprecated in this release. It will not be supported in the next release of Oracle Database.\n• When a host computer has multiple IP addresses associated with multiple network interface controller (NIC) cards, configure the listener to the specific IP address. This allows the listener to listen on all the IP addresses. You can restrict the listener to listen on a specific IP address. Oracle recommends that you specify the specific IP addresses on these types of computers, rather than allowing the listener to listen on all IP addresses. Restricting the listener to specific IP addresses helps to prevent an intruder from stealing a TCP end point from under the listener process.\n• Restrict the privileges of the listener, so that it cannot read or write files in the database or the Oracle server address space. This restriction prevents external procedure agents spawned by the listener (or procedures executed by an agent) from inheriting the ability to perform read or write operations. The owner of this separate listener process should not be the owner that installed Oracle Database or executes the Oracle Database instance (such as , the default owner). For more information about configuring external procedures in the listener, see .\n• Use encryption to secure the data in flight. Strong authentication will help to protect network data encryption.\n• Appropriately placed and configured firewalls can prevent outside access to your databases.\n• Keep the database server behind a firewall. Oracle Database network infrastructure, Oracle Net Services (formerly known as SQL*Net), provides support for a variety of firewalls from various vendors. Supported proxy-enabled firewalls include Gauntlet from Network Associates and Raptor from Axent. Supported packet-filtering firewalls include PIX Firewall from Cisco, and supported stateful inspection firewalls (more sophisticated packet-filtered firewalls) include Firewall-1 from CheckPoint.\n• Ensure that the firewall is placed outside the network to be protected.\n• Configure the firewall to accept only those protocols, applications, or client/server sources that you know are safe.\n• Use a product such as Net8 and Oracle Connection Manager to manage multiplex multiple client network sessions through a single network connection to the database. It can filter on source, destination, and host name. This product enables you to ensure that connections are accepted only from physically secure terminals or from application Web servers with known IP addresses. (Filtering on IP address alone is not enough for authentication, because it can be falsified.)\n• For more information about the listener, see .\n• Use the Oracle Net valid node checking security feature to allow or deny access to Oracle server processes from network clients with specified IP addresses. To use this feature, set the following configuration file parameters: tcp.validnode_checking = YES tcp.excluded_nodes = {list of IP addresses} tcp.invited_nodes = {list of IP addresses} The parameter enables the feature. The and parameters deny and enable specific client IP addresses from making connections to the Oracle listener. This helps to prevent potential Denial of Service attacks.\n• If possible, use Oracle native network data encryption to encrypt network traffic among clients, databases, and application servers.\n• Secure the host operating system (the system on which Oracle Database is installed). Secure the host operating system by disabling all unnecessary operating system services. Both UNIX and Windows provide a variety of operating system services, most of which are not necessary for typical deployments. These services include FTP, TFTP, TELNET, and so forth. Be sure to close both the UDP and TCP ports for each service that is being disabled. Disabling one type of port and not the other does not make the operating system more secure.\n• To specify the protocols over which the database link communication takes place, set the initialization parameter to one of the following settings:\n• (default) enables all net protocols to be used for the database links.\n• can be set , , or . For example, for a single protocol:\n• If necessary, disable LDAP lookup for global database links. Set the initialization parameter to enable or disable LDAP lookup for global database links. Settings are as follows: Transport Layer Security (TLS) is the Internet standard protocol for secure communication, providing mechanisms for data integrity and data encryption. These mechanisms can protect the messages sent and received by you or by applications and servers, supporting secure authentication, authorization, and messaging through certificates and, if necessary, encryption. Good security practices maximize protection and minimize gaps or disclosures that threaten security.\n• Ensure that configuration files (for example, for clients and listeners) use the correct port for TLS, which is the port configured upon installation. You can run HTTPS on any port, but the standards specify port 443, where any HTTPS-compliant browser looks by default. The port can also be specified in the URL, for example: If a firewall is in use, then it too must use the same ports for secure (TLS) communication.\n• Ensure that TCPS is specified as the PROTOCOL in the ADDRESS parameter in the tnsnames.ora file (typically on the client or in the LDAP directory). An identical specification must appear in the file (typically in the directory).\n• Ensure that the TLS mode is consistent for both ends of every communication. For example, the database (on one side) and the user or application (on the other) must have the same TLS mode. The mode can specify either client or server authentication (one-way), both client and server authentication (two-way), or no authentication.\n• Ensure that the server supports the client cipher suites and the certificate key algorithm in use.\n• Enable DN matching for both the server and client, to prevent the server from falsifying its identity to the client during connections. This setting ensures that the server identity is correct by matching its global database name against the DN from the server certificate. You can enable DN matching in the file. For example: Otherwise, a client application would not check the server certificate, which could allow the server to falsify its identity.\n• Do not remove the encryption from your RSA private key inside your server.key file, which requires that you enter your pass phrase to read and parse this file. A server without TLS does not require a pass phrase. If you decide your server is secure enough, you could remove the encryption from the RSA private key while preserving the original file. This enables system boot scripts to start the database server, because no pass phrase is needed. Ideally, restrict permissions to the root user only, and have the Web server start as , but then log on as another user. Otherwise, anyone who gets this key can impersonate you on the Internet, or decrypt the data that was sent to the server."
    }
]