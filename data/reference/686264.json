[
    {
        "link": "https://101computing.net/frequency-analysis",
        "document": "In cryptography, frequency analysis is the study of the frequency of letters or groups of letters in a ciphertext. The method is used as an aid to breaking substitution ciphers (e.g. mono-alphabetic substitution cipher, Caesar shift cipher, Vatsyayana cipher).\n\nFrequency analysis consists of counting the occurrence of each letter in a text. Frequency analysis is based on the fact that, in any given piece of text, certain letters and combinations of letters occur with varying frequencies. For instance, given a section of English language, letters E, T, A and O are the most common, while letters Z, Q and X are not as frequently used.\n\nThe following chart shows the frequency of each letter of the alphabet for the English language:\n\n\n\nWe can assume that most samples of text written in English would have a similar distribution of letters. However this is only true if the sample of text is long enough. A very short text may lead to a significantly different distribution.\n\nWhen trying to decrypt a cipher text based on a substitution cipher, we can use a frequency analysis to help identify the most recurring letters in a cipher text and hence make hypothesis of what these letters have been encoded as (e.g. E, T, A, O, etc). This will help us decrypt some of the letters in the text. We can then recognise patterns/words in the partly decoded text to identify more substitutions.\n\nYou can perform a frequency analysis on the following text to try to decrypt this text step by step:\n\n\n\nComplete a frequency analysis to decrypt the following ciphers."
    },
    {
        "link": "https://crypto.interactive-maths.com/frequency-analysis-breaking-the-code.html",
        "document": ""
    },
    {
        "link": "https://quora.com/How-can-I-crack-the-Vigenere-cipher-without-knowing-the-key",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://stackoverflow.com/questions/32925444/break-a-caesar-cipher-cipher-text-without-knowing-the-plaintext-or-the-key-throu",
        "document": "A Caesar cipher just replaces each plain text character with one a fixed number of places away down the alphabet. Assuming no casing, and English text, then it is trivial to produce all possible 26 decryptions and just pick out the correct one by eye.\n\nFor a substitution cipher you need to generalise your solution. A simplified method is to do a frequency count as you've suggested, and sort characters in descending order of frequency. Map those to the letters (again for English) ETAOINSRHOLUCMFYWGPBVKXQJZ (so for example assume the most frequent character represents an E, the next most frequent a T and so on). Use the mapping to do the decryption. The more cipher text you have the better the decryption will be. It is unlikely to be completely accurate but will give you enough information to fill in the gaps manually.\n\nA more sophisticated solution might generate the mapping from the frequency distribution rather than just the sort order, and use known facts about the language e.g. Q is usually followed by U. You can get really fancy and check digraph and and trigram frequencies: http://practicalcryptography.com/cryptanalysis/letter-frequencies-various-languages/english-letter-frequencies/"
    },
    {
        "link": "https://reddit.com/r/cryptography/comments/o6eyca/vigenere_without_knowing_the_key",
        "document": "Can someone please tell me how to solve a vigenere cipher without knowing the key? I looked everywhere but can’t find it."
    },
    {
        "link": "https://csfieldguide.org.nz/en/chapters/coding-encryption/substitution-ciphers",
        "document": "You can find more information about the Computer Science Field Guide on the about page. View about page\n\nThe Computer Science Field Guide has many chapters to inform you of the various areas of Computer Science. View chapters\n\nWe provide guides for using the Computer Science Field Guide in different curricula. View curriculum guides\n\nWe have many interactives throughout the website that teach many different computer science concepts. View interactives\n\nIf you are an educator, we recommend reading the teacher version for extra information on how to use this guide for teaching. Switch to teacher mode\n\nThis project is completely open source and available on GitHub. View on GitHub"
    },
    {
        "link": "https://crypto.stackexchange.com/questions/3826/possible-ways-to-crack-simple-hand-ciphers",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://people.csail.mit.edu/hasinoff/pubs/hasinoff-quipster-2003.pdf",
        "document": ""
    },
    {
        "link": "https://math.libretexts.org/Bookshelves/Applied_Mathematics/Math_in_Society_(Lippman)/16%3A_Cryptography/16.02%3A_Substitution_Ciphers",
        "document": "A simple example of a substitution cipher is called the Caesar cipher, sometimes called a shift cipher. In this approach, each letter is replaced with a letter some fixed number of positions later in the alphabet. For example, if we use a shift of 3, then the letter A would be replaced with D, the letter 3 positions later in the alphabet. The entire mapping would look like: [1]\n\nUse the Caesar cipher with shift of 3 to encrypt the message: “We ride at noon” We use the mapping above to replace each letter. W gets replaced with Z, and so forth, giving the encrypted message: ZH ULGH DW QRRQ. Notice that the length of the words could give an important clue to the cipher shift used. If we saw a single letter in the encrypted message, we would assume it must be an encrypted A or I, since those are the only single letters than form valid English words. To obscure the message, the letters are often rearranged into equal sized blocks. The message ZH ULGH DW QRRQ could be written in blocks of three characters as\n\nDecrypt the message GZD KNK YDX MFW JXA if it was encrypted using a shift cipher with shift of 5. We start by writing out the character mapping by shifting the alphabet, with A mapping to F, five characters later in the alphabet. We now work backwards to decrypt the message. The first letter G is mapped to by B, so B is the first character of the original message. Continuing, our decrypted message is Removing spaces we get BUYFIFTYSHARESA. In this case, it appears an extra character was added to the end to make the groups of three come out even, and that the original message was “Buy fifty shares.”\n\nNotice that in both the ciphers above, the extra part of the alphabet wraps around to the beginning. Because of this, a handy version of the shift cipher is a cipher disc, such as the Alberti cipher disk shown here[2] from the 1400s. In a cipher disc, the inner wheel could be turned to change the cipher shift. This same approach is used for “secret decoder rings.”\n\nThe security of a cryptographic method is very important to the person relying on their message being kept secret. The security depends on two factors:\n• The security of the method being used\n• The security of the encryption key used\n\nIn the case of a shift cipher, the method is “a shift cipher is used.” The encryption key is the specific amount of shift used.\n\nSuppose an army is using a shift cipher to send their messages, and one of their officers is captured by their enemy. It is likely the method and encryption key could become compromised. It is relatively hard to change encryption methods, but relatively easy to change encryption keys.\n\nDuring World War II, the Germans’ Enigma encryption machines were captured, but having details on the encryption method only slightly helped the Allies, since the encryption keys were still unknown and hard to discover. Ultimately, the security of a message cannot rely on the method being kept secret; it needs to rely on the key being kept secret.\n\nWith that in mind, let’s analyze the security of the Caesar cipher.\n\nSuppose you intercept a message, and you know the sender is using a Caesar cipher, but do not know the shift being used. The message begins EQZP. How hard would it be to decrypt this message? Since there are only 25 possible shifts, we would only have to try 25 different possibilities to see which one produces results that make sense. While that would be tedious, one person could easily do this by hand in a few minutes. A modern computer could try all possibilities in under a second. In this case, a shift of 12 (A mapping to M) decrypts EQZP to SEND. Because of this ease of trying all possible encryption keys, the Caesar cipher is not a very secure encryption method.\n\nTo make a brute force attack harder, we could make a more complex substitution cipher by using something other than a shift of the alphabet. By choosing a random mapping, we could get a more secure cipher, with the tradeoff that the encryption key is harder to describe; the key would now be the entire mapping, rather than just the shift amount.\n\nWhile there were only 25 possible shift cipher keys (35 if we had included numbers), there are about 1040 possible substitution ciphers[3]. That’s much more than a trillion trillions. It would be essentially impossible, even with supercomputers, to try every possible combination. Having a huge number of possible encryption keys is one important part of key security.\n\nUnfortunately, this cipher is still not secure, because of a technique called frequency analysis, discovered by Arab mathematician Al-Kindi in the 9th century. English and other languages have certain letters than show up more often in writing than others.[4] For example, the letter E shows up the most frequently in English. The chart to the right shows the typical distribution of characters.\n\nIn addition to looking at individual letters, certain pairs of letters show up more frequently, such as the pair “th.” By analyzing how often different letters and letter pairs show up an encrypted message, the substitution mapping used can be deduced[5].\n\n[3] There are 35 choices for what A maps to, then 34 choices for what B maps to, and so on, so the total number of possibilities is 35*34*33*…*2*1 = 35! = about 1040\n\n[5] For an example of how this is done, see en.Wikipedia.org/wiki/Frequency_analysis"
    },
    {
        "link": "https://geeksforgeeks.org/substitution-cipher",
        "document": "Hiding some data is known as encryption. When plain text is encrypted it becomes unreadable and is known as ciphertext. In a Substitution cipher, any character of plain text from the given fixed set of characters is substituted by some other character from the same set depending on a key. For example with a shift of 1, A would be replaced by B, B would become C, and so on.\n\nNote: A special case of Substitution cipher is known as Caesar cipher where the key is taken as 3.\n\nThe encryption can be represented using modular arithmetic by first transforming the letters into numbers, according to the scheme, A = 0, B = 1,…, Z = 25. Encryption of a letter by a shift n can be described mathematically as.\n• None A String of both lower and upper case letters, called PlainText.\n• None Create a list of all the characters.\n• None Create a dictionary to store the substitution for all characters.\n• None For each character, transform the given character as per the rule, depending on whether we’re encrypting or decrypting the text.\n\nBelow is the implementation.\n\n// Create a dictionary to store the substitution for the // given alphabet in the plain text based on the key // Create a map to store the substitution for the given // alphabet in the cipher text based on the key // create a dictionary to store the substitution for the given alphabet in the plain text based on the key // create a map to store the substitution for the given alphabet in the cipher text based on the key for the given alphabet in the plain text for the given alphabet in the cipher // create a dictionary to store the substitution for the given alphabet in the plain text based on the key // create a dictionary to store the substitution for the given alphabet in the cipher text based on the key Create a map to store the substitution for the given alphabet in the plain text based on the key Create a map to store the substitution for the given alphabet in the cipher text based on the key"
    }
]