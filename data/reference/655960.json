[
    {
        "link": "https://docs.unity3d.com/560/Documentation/Manual/PostProcessing-ChromaticAberration.html",
        "document": "The effect descriptions on this page refer to the default effects found within the post-processing stack.\n\nIn photography, chromatic aberration is an effect resulting from a camera’s lens failing to converge all colors to the same point. It appears as “fringes” of color along boundaries that separate dark and bright parts of the image.\n\nThe Chromatic Aberration effect is used to replicate this camera defect, it is also often used to artistic effect such as part of camera impact or intoxication effects. This implementation provides support for red/blue and green/purple fringing as well as user defined color fringing via an input texture.\n\nPerformances depend on the Intensity value (the higher it is, the slower the render will be as it will need more samples to render smooth chromatic aberrations).\n\nChromatic Aberration uses a Spectral Texture input for custom fringing. Four example spectral textures are provided with the Post-processing stack:\n\nYou can create custom spectral textures in any image editing software. Spectral Texture resolution is not constrained but it is recommended that they are as small as possible (such as the 3x1 textures provided).\n\nYou can achieve a less smooth effect by manually setting the Filter Mode of the input texture to Point (no filter).\n\nSee the Graphics Hardware Capabilities and Emulation page for further details and a list of compliant hardware."
    },
    {
        "link": "https://docs.unity3d.com/Packages/com.unity.postprocessing@3.2/manual/Chromatic-Aberration.html",
        "document": "The Chromatic Aberration effect splits color along boundaries in an image into their red, green, and blue channels. This reproduces the effect a real-world camera produces when light refracts and causes the wavelengths to disperse in the lens.\n\nUnity provides support for red/blue and green/purple fringing. You can define fringing colors by using an input texture.\n\nChromatic Aberration uses a input for custom fringing. Four example spectral textures are provided in the repository:\n\nYou can create custom spectral textures in any image editing software. While the resolution size of spectral textures are not limited, small sizes like the 3x1 textures provided work best.\n\nYou can achieve a rougher effect by manually setting the Filter Mode of the input texture to Point (no filter) in the Texture Import Settings window.\n\nThe performance of the Chromatic Aberration effect depends on its value. If the value is high, the render uses more samples to render smooth chromatic aberrations. This makes the process take more time.\n\nFast Mode is the quickest mode and recommended where possible. However, it's not as smooth as the regular mode."
    },
    {
        "link": "https://learn.unity.com/tutorial/post-processing-effects-chromatic-aberration",
        "document": "Chromatic Aberration makes your scene appear as though it were recorded through a lens that is unable to converge light at the edges. This is common in low-end lenses, and is a quick and easy effective way to give your scene that “shot on glass” look."
    },
    {
        "link": "https://docs.unity.cn/560/Documentation/Manual/PostProcessing-ChromaticAberration.html",
        "document": "The effect descriptions on this page refer to the default effects found within the post-processing stack.\n\nIn photography, chromatic aberration is an effect resulting from a camera’s lens failing to converge all colors to the same point. It appears as “fringes” of color along boundaries that separate dark and bright parts of the image.\n\nThe Chromatic Aberration effect is used to replicate this camera defect, it is also often used to artistic effect such as part of camera impact or intoxication effects. This implementation provides support for red/blue and green/purple fringing as well as user defined color fringing via an input texture.\n\nPerformances depend on the Intensity value (the higher it is, the slower the render will be as it will need more samples to render smooth chromatic aberrations).\n\nChromatic Aberration uses a Spectral Texture input for custom fringing. Four example spectral textures are provided with the Post-processing stack:\n\nYou can create custom spectral textures in any image editing software. Spectral Texture resolution is not constrained but it is recommended that they are as small as possible (such as the 3x1 textures provided).\n\nYou can achieve a less smooth effect by manually setting the Filter Mode of the input texture to Point (no filter).\n\nSee the Graphics Hardware Capabilities and Emulation page for further details and a list of compliant hardware."
    },
    {
        "link": "https://docs.unity.cn/Packages/com.unity.render-pipelines.high-definition@12.1/manual/Post-Processing-Chromatic-Aberration.html",
        "document": "Chromatic Aberration mimics the effect that a real-world camera produces when its lens fails to join all colors to the same point.\n\nFor more information on the Chromatic Aberration effect, see the Chromatic Aberration documentation in the Unity Manual.\n\nChromatic Aberration uses the Volume framework, so to enable and modify Chromatic Aberration properties, you must add a Chromatic Aberration override to a Volume in your Scene. To add Chromatic Aberration to a Volume:\n• In the Scene or Hierarchy view, select a GameObject that contains a Volume component to view it in the Inspector.\n• In the Inspector, go to Add Override > Post-processing and select Chromatic Aberration. HDRP now applies Chromatic Aberration to any Camera this Volume affects.\n\nTo access and control this override at runtime, use the Volume scripting API. Because of how the Volume system works, you edit properties in a different way to standard Unity components. There are also other nuances to be aware of too, such as each property has an overrideState. This indicates to the Volume system whether to use the property value you set, or use the default value stored in the Volume Profile. For information on how to use the API correctly, see Volume scripting API.\n\nFrom 2019.3, HDRP provides lookup Textures that you can use to customize this effect. These lookup Textures are for the Spectral Lut property. To add these Textures to your Unity Project, you must use the Package Manager:\n• In the High Definition RP section, go to Additional Post-processing Data and select Import into Project.\n• The Textures that are relevant to Chromatic Aberration are in the Spectral LUTs folder, so if you only want the lookup Textures for Chromatic Aberration, only import the contents of the Spectral LUTs folder.\n\nCare is needed when using the Bloom effect with Chromatic Abberation. For performance reasons, Chromatic Aberation is computed after the Bloom computation. This results in Bloom overpowering the Chromatic Aberration effect when the Bloom Intensity is set to a very high value. However, in a typical Bloom configuration, the Intensity should never need to be set high enough for this to be an issue."
    },
    {
        "link": "https://discussions.unity.com/t/how-to-use-mathf-lerp-properly/878890",
        "document": ""
    },
    {
        "link": "https://discussions.unity.com/t/how-exactly-does-vector3-lerp-mathf-lerp-work/678029",
        "document": ""
    },
    {
        "link": "https://docs.unity3d.com/6000.0/Documentation/ScriptReference/Mathf.SmoothStep.html",
        "document": "Suggest a change Thank you for helping us improve the quality of Unity Documentation. Although we cannot accept all submissions, we do read each suggested change from our users and will make updates where applicable. Close For some reason your suggested change could not be submitted. Please <a>try again</a> in a few minutes. And thank you for taking the time to help us improve the quality of Unity Documentation. Close Switch to Manual\n\nfloat The interpolated float result between and .\n\nInterpolates between and with smoothing at the limits.\n\nThis function interpolates between and in a similar way to Lerp. However, the interpolation will gradually speed up from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n\n\n\nThe parameter is clamped to the range [0, 1]."
    },
    {
        "link": "https://stackoverflow.com/questions/64330521/how-can-i-use-mathf-lerp-to-change-smooth-position-of-an-object",
        "document": "\n• None You probably wouldn't use which is for interpolating values but rather which interpolates two values.\n• None I wouldn't use for this and poll check some state but rather a Coroutine which is way easier to maintain and control. It is also more efficient than having a most of the time \"useless\" running that is only used in one single case.\n• None When using Lerp there are mainly two use cases\n• Stabelizing e.g. a user Input in order to avoid jittering. That is the use case you used. Here you would every frame interpolate the current position against the next input destination position, getting slower while getting closer to the target\n• Move smooth from one position to another. This is the use case you actually want. Here you wouldn't use a \"fixed\" factor but rather one growing from to and use a fixed and .\n\nSo personally I would rather use something general like\n\nPersonally I would remove the completely and rather add a\n\nAnd then rather call this method from somewhere else whenever needed like e.g.\n\nUsing this you could use the same component for any transition between parent objects in general.\n\nThen in your specific use case you would probably attach it to your navi and use it like e.g."
    },
    {
        "link": "https://reddit.com/r/Unity3D/comments/rc9r81/where_and_how_would_i_use",
        "document": "A subreddit for News, Help, Resources, and Conversation regarding Unity, the game engine. Do NOT use your phone to take screenshots. Video and photos of computer screens taken by phones are NOT allowed. All screenshots must be grabbed from the computer itself."
    }
]