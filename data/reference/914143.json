[
    {
        "link": "https://en.opensuse.org/SDB:Installing_Java",
        "document": "This article is about installing Oracle Java on openSUSE.\n\nDue to Oracle (Sun) licensing policies, Java JRE cannot be included in the repositories of openSUSE anymore. Here is a quick guide on how to install the newest and secure version. On the Oracle Java website two versions are available for downloading:\n• Java Runtime Environment (JRE): includes Java virtual machine), libraries, Java application launcher, web browser and in general everything should be needed to run programs written with Java language.\n• Java Development Kit (JDK): in addition to the Java Runtime Environment (JRE) above, it includes all the tools needed to develop, test and debug programs written with Java language.\n\nThe JRE installation is a shorter version of the JDK installation, therefore the procedure to install the JRE will be shown first. Differences with JRE installation should be clearer, should someone want to install just the Java Runtime Environment. Installing both packages when they have the same version number is not (quite) useful.\n\n With both the procedures given below, for JDK and for JRE installation, the same name, i.e. , will be used for the symbolic link pointing to the folder where the Oracle Java Environment is located. This way, one might even follow both procedures in a sequence, since the JDK and the JRE are installed in different directories, but only the latter is going to be used by your system (or whichever the symbolic link is pointing to).\n\nNOTE: Before actually proceeding further, read the \"Discussion\" to this SDB for updates and contributions which may not yet have been accepted to be part of the main SDB.\n\nThe purpose of this installation method is to be a quick and easy setup. You will not have the Icedtea Web plugin, only the official Java. This method is recommended for those that require Oracle's Java for websites that insist on the genuine article in order to be accessed.\n\nDetermine what architecture you are running before downloading the package to your system. To be certain of your architecture, open a terminal by running the command (Alt+F2 in KDE): konsole or xterm\n\nIf the output is:\n\nIf the output is:\n\nDownload the official RPM from Java.com and install the RPM with whatever method you prefer. In most cases, navigating to the RPM in the file manager and clicking on it will install it. Or you can install via the terminal, e.g. run the command (Alt+F2 in KDE): konsole or xterm to open a terminal then type:\n\nEnter your root password, this will put you in \"Superuser\" mode. Navigate, as a normal user, to the location of the download, Firefox or Chrome will typically put it in\n\nor, if you downloaded the 64-bit RPM:\n\nOnce the install is complete, you may have to removed icedtea-web. Copy and paste the following into terminal as root:\n\nAgree to remove the package. Once it is complete, copy and paste the following:\n\nWhat we are interested in, is the file libnpjp2.so (that file location can change any time depending on the SUSE version and the jre package version.) which came with the jre package. You can check that file using rpm command.\n\nIt should return a result with its absolute path.\n\nYou can now create a link and point it to your browser plugin. Paste the following command as root.\n\nThe installation of Java and appropriate links are complete. You can now use Java applets in any web browser on your system. For Java Web Services, you will still need to update the file associations in your desktop environment and/or web browser.\n\nBy removing the `icedtea-web` functionality, you also removed all file associations to OpenJDK from your desktop environment. This means that you will no longer be able to launch Java executables (other than applets) from a web browser or file manager. Installing the Oracle Java RPM does not restore these associations; you will need to re-add them manually. For instance, in KDE Plasma, you must launch System Settings, then activate the Default Applications applet and select File Associations. Use the search box to search for \"java\". For each relevant file type returned, you will need to add an application association. For example, for application/x-java-archive, you should add an association to \"/usr/bin/java -jar %U\", and for application/x-java-jnlp-file, you should add an association to \"/usr/bin/javaws %U\".\n\nIf you would like to see if the plugin has installed correctly, restart your browser if you have not done so already and enter the following into the address bar. For Firefox 52 ESR and below enter:\n\nNote that Java is not supported on newer browsers.\n\nAlthough no icon appears in the menu, there is a Java Control Panel that allows you to easily adjust many settings. In order to access it, open a terminal or in KDE press Alt+F2 to run a command and enter:\n• Under Disk Space adjust the amount of disk space for storing temporary files to your choosing. 50 to 100 MB should be sufficient.\n• Click OK to close the dialog box and OK to close the Java Control Panel\n\nLike with the JRE, obtain the rpm for your architecture from Oracle's Java website. Install it likewise via\n\n(adjust the name of the file if necessary of course :)).\n\nNow to include this in update-alternatives (e.g., to have it in your $PATH, use it with Android Studio or similar), you can use the following script (save as some-file-name.sh and run\n\nor make it executable and run it then, whatever you prefer):\n• Download Oracle Java SE Development Kit (JDK) from the Oracle Java website. Save it to an easy to remember directory (eg. )\n• Decompress it with (as root, just to be sure):\n• Fix permissions for the expanded directory and its content:\n• Open JDK is installed by default in , so let's move Oracle Java to as well:\n• Create a symbolic link to /usr/lib/jdk1.X.X_XX/ (this will be important later for updating):\n• Open JDK is installed by default in , so let's move Oracle Java to as well:\n• Create a symbolic link to /usr/lib64/jdk1.X.X_XX/ (this will be important later for updating):\n• Compress the man files involved in your installation:\n• Prepare the directory for jvm-exports (specific for version 1.7.0):\n• Compress the man files involved in your installation:\n\nFor openSUSE 64-bit just use, instead:\n\nFor openSUSE 64-bit just use, instead:\n\nYou will have to select the appropriate number after running: (This also can be used to switch between different implementations of java). You can even set Oracle Java as an alternative for JDK (and JRE) environments, just for a particular version of Java, in this case 1.7.0; the changes will be applied with usual . To select your alternative (all architectures): To select your alternative (all architectures): Updating Oracle Java is really easy thanks to the ( on x86_64) link that was created above. 1) Repeat the procedure up to moving the jdk1.X.X_XX to 2) Then just change the symbolic link to point to the new Java SE 2) Then just change the symbolic linkto point to the new Java SE 1) Repeat the procedure up to moving the jdk1.X.X_XX to 2) Then just change the symbolic link to point to the new Java SE 2) Then just change the symbolic linkto point to the new Java SE 3) Finally re-compress the man files as described above (all architectures). Once you set Oracle Java as your default jvm, you might want to be able to run (replace with if you are running a 64-bit system), e.g. the application providing your Java Control Panel, directly from the applications menu for your favorite Desktop Environment. In order to add item \"Java - Java Control Panel\" to the application menu, you will need to create a couple of symbolic links, which you could delete with , should you want to remove Oracle Java. You can create those symbolic links using following commands, taking care that must be replaced with if you own a 64-bit system: Warning: From here to the end of this section, for any sub-section ( must be replaced with . Please follow the appropriate subsections for your system architecture, when you are inserting the commands. From here to the end of this section, for any sub-section ( Updating Oracle Java (JRE) included), if your system has a 64-bit architecture, any occurrence ofmust be replaced with. Please follow the appropriate subsections for your system architecture, when you are inserting the commands.\n• Download Oracle Java SE Runtime Environment (JRE) from the Oracle Java website. Save it to an easy to remember directory (eg. ) Download a suitable version for your system architecture. E.g.: with Oracle Java version 1.7.0_7:\n• Decompress it with (as root, just to be sure):\n• Fix permissions for the expanded directory and its content:\n• Open JDK is installed by default in , so let's move Oracle Java to as well:\n• Create a symbolic link to /usr/lib/jdk1.X.X_XX/ (this will be important later for updating):\n• Open JDK is installed by default in , so let's move Oracle Java to as well:\n• Create a symbolic link to /usr/lib64/jdk1.X.X_XX/ (this will be important later for updating):\n• Compress the man files involved in your installation:\n• Prepare the directory for jvm-exports (specific for version 1.7.0): For openSUSE 64-bit just use, instead: Warning: Commands above fail since Leap 15.0 with update-alternatives: error: alternative javaws can't be slave of javaplugin: it is a slave of libjavaplugin.so.x86_64 Commands above fail since Leap 15.0 with so use the commands below instead: For openSUSE 64-bit just use, instead: For openSUSE 64-bit just use, instead:For openSUSE 64-bit just use, instead: You will have to select the appropriate number after running: (This also can be used to switch between different implementations of java). You can even set Oracle Java as an alternative for the JRE environment, just for a particular version of Java, in this case 1.7.0; the changes will be applied with usual . To select your alternative (all arch): Updating Oracle Java is really easy thanks to the ( on x86_64) link that was created above. 1) Repeat the procedure up to moving the jre1.X.X_XX to 2) Then just change the symbolic link to point to the new Java SE 2) Then just change the symbolic linkto point to the new Java SE 1) Repeat the procedure up to moving the jre1.X.X_XX to 2) Then just change the symbolic link to point to the new Java SE 2) Then just change the symbolic linkto point to the new Java SE 3) Finally re-compress the man files as described above (all architectures). Once you set Oracle Java as your default jvm, you might want to be able to run (replace with if you are running a 64-bit system), e.g. the application providing your Java Control Panel, directly from the applications menu for your favourite Desktop Environment. In order to add item \"Java - Java Control Panel\" to the application menu, you will need to create a couple of symbolic links, which you could delete with , should you want to remove Oracle Java. You can create those symbolic links using following commands, taking care that must be replaced with if you own a 64-bit system:\n• Using tomcat5 from within Eclipse\n• How to use JBoss 3.2.5 with the Eclipse WTP plugin"
    },
    {
        "link": "https://utho.com/docs/development/java-articles/how-to-install-java-jdk-on-opensuse",
        "document": "When you visit or interact with our sites, services or tools, we or our authorised service providers may use cookies for storing information to help provide you with a better, faster and safer experience and for marketing purposes."
    },
    {
        "link": "https://openjdk.org/install",
        "document": ""
    },
    {
        "link": "https://software.opensuse.org/package/java-17-openjdk",
        "document": ""
    },
    {
        "link": "https://snapcraft.io/install/openjdk/opensuse",
        "document": "OpenJDK is the official reference implementation of the Java Platform, Standard Edition, a cross-platform computing environment that lets you develop and deploy Java applications on desktops, servers, and embedded systems.\n\nThis package provides everything you need to develop a Java application on Linux, including all of the latest development tools, class libraries, API documentation, and source code of the Java Development Kit (JDK).\n\nInstalling this package does not replace the JDK provided by your Linux distribution but instead allows you to use both of them side by side. To get started, see the README file for this package on GitHub:\n\nJava and OpenJDK are trademarks or registered trademarks of Oracle and/or its affiliates."
    },
    {
        "link": "https://askubuntu.com/questions/101746/how-can-i-execute-a-jar-file-from-the-terminal",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/19904810/how-to-run-a-jar-file-in-a-linux-commandline",
        "document": "How to set the classpath to the current directory and also run the jar file named present in the current directory by providing the argument as from a linux command line.\n\nI did try to run the jar as follows but its executing classes from some other directory."
    },
    {
        "link": "https://theserverside.com/blog/Coffee-Talk-Java-News-Stories-and-Opinions/Run-JAR-file-example-windows-linux-ubuntu",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/18413014/run-a-jar-file-from-the-command-line-and-specify-classpath",
        "document": "I've compiled a JAR file and specified the Main-Class in the manifest (I used the Eclipse Export function). My dependencies are all in a directory labeled . I can't seem to get a straight answer on how to execute my JAR file while specifying it should use the as the classpath.\n\nEach gives an error saying:\n\nor gives the indicating the libraries are not being found.\n\nI even tried remaking the JAR file and included the directory and contents, but still no dice...\n\nHow can I execute a JAR file from the command line and specify the classpath to use?"
    },
    {
        "link": "https://askubuntu.com/questions/322458/how-to-open-jar-file-using-open-jdk",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    }
]