[
    {
        "link": "https://php.net/manual/en/function.get-meta-tags.php",
        "document": "jp at webgraphe dot com ¶ If the URL is doing a redirection using the headers (like you would do with PHP function header(\"Location: URL\");), the page has no content (in general). It appears get_meta_tags() doesn't catch that kind of redirection (like cURL would do) and it lead me to a timeout of my script.\n\n\n\nI experienced this in a spider I wrote in order to feed my database of all available pages on my site and one link was linking to a page that simply has the following code:\n\n\n\n \n\nThat made my script hang for a moment and apparently, get_meta_tags() wasn't even able to return me an error.\n\n\n\nJP.\n\nEbpo ¶ Be aware that the function looks for the metatags in the whole page. If one of the meta is commented in your code for some reason, it will still be grabed.\n\nAnonymous ¶ Tested PHP 4.0.6 \n\n \n\nget_meta_tags() seems to look only in the beginning of a file, meaning that e.g. if there is a lot of PHP code before the HTML header it will return nothing ... \n\nTested using get_meta_tags() on local files with about 9000 characters of PHP code before HTML HEADER. \n\n \n\nWorkaround: if possible move code after header or if not: include a file.\n\nroganty at gmail dot com ¶ This is a slight amendment to jimmyxx at gmail dot com function\n\n\n\nI tried using the regex displayed in his code, and php threw up a couple of errors\n\n\n\nBelow is the correct regular expression that works\n\n(Please note that I had to split the regex into strings because php.net was complaining about the line being to long)\n\n \n\nThe problem was due to the quotes being incorrectly escaped.\n\nI hope this helps anyone who has been having problems with his code\n\nrichard at pifmagazine dot com ¶ Something that is not mentioned above and should be : When using get_meta_tags on a remote PHP page the page will be parsed before the meta tags are returned - so you can capture meta tags generated dynamically (by PHP??) on the remote end. \n\n \n\nThis DOES NOT work the same way when getting meta tags on local file systems. Local files are not parsed through the web server before returning to get_meta_tags(). If the META tag is hard-coded into the page, you'll be fine - but if it dynamically generated you will not be able to capture it unless you use the full URL when calling your local files.\n\nBen dot Davis at furman dot edu ¶ I have found that for large searches, get_meta_tags is very slow. I created a large search engine for a website that couldnt use a database and I first tried pulling out the meta tags. \n\nI have found that it is actually much faster to use eregi to pull out the meta tags. This code below pulls out the description: \n\n \n\nif (eregi (\"<meta name=\\\"description\\\" content=[^>]*\", $contents, $descresult)) \n\n { \n\n $description = explode(\"<meta name=\\\"description\\\" content=\", $descresult[0]); \n\n echo \"<font face=\\\"Arial\\\" size=2>$description[1]</font>\"; \n\n \n\n }"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nThe HTML element represents metadata that cannot be represented by other HTML meta-related elements, like , , , or . The type of metadata provided by the element can be one of the following:\n• If the attribute is set, the element provides document-level metadata, applying to the whole page.\n• If the attribute is set, the element is a pragma directive, providing information equivalent to what can be given by a similarly-named HTTP header.\n• If the attribute is set, the element is a charset declaration, giving the character encoding in which the document is encoded.\n• If the attribute is set, the element provides user-defined metadata."
    },
    {
        "link": "https://php.net/manual/en/language.attributes.overview.php",
        "document": "PHP attributes provide structured, machine-readable metadata for classes, methods, functions, parameters, properties, and constants. They can be inspected at runtime via the Reflection API, enabling dynamic behavior without modifying code. Attributes provide a declarative way to annotate code with metadata. Attributes enable the decoupling of a feature's implementation from its usage. While interfaces define structure by enforcing methods, attributes provide metadata across multiple elements, including methods, functions, properties, and constants. Unlike interfaces, which enforce method implementations, attributes annotate code without altering its structure. Attributes can complement or replace optional interface methods by providing metadata instead of enforced structure. Consider an interface that represents an operation in an application. Some implementations may require a setup step while others do not. Instead of forcing all classes implementing to define a method, an attribute can indicate setup requirements. This approach increases flexibility, allowing attributes to be applied multiple times when necessary. Example #1 Implementing optional methods of an interface with Attributes\n\nHarshdeep ¶ While the example displays us what we can accomplish with attributes, it should be kept in mind that the main idea behind attributes is to attach static metadata to code (methods, properties, etc.). \n\n\n\nThis metadata often includes concepts such as \"markers\" and \"configuration\". For example, you can write a serializer using reflection that only serializes marked properties (with optional configuration, such as field name in serialized file). This is reminiscent of serializers written for C# applications.\n\n\n\nThat said, full reflection and attributes go hand in hand. If your use case is satisfied by inheritance or interfaces, prefer that. The most common use case for attributes is when you have no prior information about the provided object/class.\n\n\n\n\n\nversus, using attributes,\n\n The example above is a little extra convoluted with the existence of the VersionedObject class as I wished to display that with attribute mark ups, you do not need to care how the base class manages its attributes (no call to parent in overriden method). Florian Krmer ¶ I've tried Harshdeeps example and it didn't run out of the box and I think it is not complete, so I wrote a complete and working naive example regarding attribute based serialization."
    },
    {
        "link": "https://stackoverflow.com/questions/10462520/get-all-meta-property-using-php",
        "document": "How do I extract the \"content\" values of a from the view source\n\nI have used CURL to get the source of the page but after that I'm not able to identify the following:\n\nbasically I need to capture all the above parameters in an array and use them. I have tried the following after curl"
    },
    {
        "link": "https://gist.github.com/whitingx/3840905",
        "document": "=' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' A group of U.S. Marines, under command of... ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' ' =' '\n\nUse custom meta tags to store data that you need in Javascript, instead of hard-coding that data into your Javascript. I store my Google Analytics code in meta tags. Here's some examples:"
    },
    {
        "link": "https://reddit.com/r/PHP/comments/17t5s55/building_a_chat_app_any_technical_tips",
        "document": "I want to build a chat app with Laravel, I thought about doing this with Livewire but I don't think it's a good idea since it makes a request (poll) every x seconds instead of observing and updating only when the data changes.\n\nAssuming this app will blow up and be used by 1~5k people daily, what would be the best approach to build this? Would socket.io or pusher be enough to support this? What type of database should I use for it, is it something MySQL can handle? How should I configure my database and tables, what are some other things I should be aware of?\n\nI've never built anything like this before, and I have very little idea about sockets, encryption, servers and costs and etc. Basically any advice, suggestion, or even keywords for me to look up on google that you can give me is worth its weight in gold. Thanks!"
    },
    {
        "link": "https://stackoverflow.com/questions/50227901/creating-a-multi-user-chat-application-in-core-php",
        "document": "Probably not an exact answer to your question, but could be useful.\n\n\n\nBuilding a multi-user chat system from scratch on bare PHP, is a lot of work. You might want to look into php frameworks that save you at least half of the work. \n\n Have a look at Laravel Framework: https://laravel.com/docs/5.6\n\n \n\n It can integrate 3rd party services, example Pusher(https://pusher.com/) to run a multiple channel chat. \n\n There are a lot of tutorials on youtube.com or https://laracasts.com/ (Laravel dedicated resource center and forum) that can help you get a chat up and running within an hour or two."
    },
    {
        "link": "https://softwareengineering.stackexchange.com/questions/321337/the-best-way-to-create-a-php-chat-system",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://tutorialspoint.com/online-group-chat-application-using-php",
        "document": "A web-based tool called an online group chat application enables users to text, phone, or video chat with one another in real-time. Many people are using these programs because they are simple and convenient. A popular server-side programming language, PHP, can create web-based applications like group chat programs. PHP offers comprehensive functionality for managing user input, communicating with databases, and integrating web-based services.\n\nCreating an online group chat application using PHP can be a terrific project idea for ambitious web developers or companies wishing to provide an online communication platform for their staff or clients. Various capabilities, including group chats, private messaging, file sharing, and others, can be included in the application's design. Setting up a server, creating the user interface, writing the PHP code, adding security features, testing, and deploying are just a few of the tasks involved in creating such an application. Developers can use these procedures to produce a dependable and secure online group chat program that satisfies user requirements.\n\nInstalling a server is the first step in setting up a PHP-based online group chat application. For testing reasons, users can host their applications on a cloud server like Amazon Web Services, DigitalOcean, or a local server like XAMPP or WAMP. The server needs to be set up to run PHP and have a database like MySQL installed.\n\nThe next step is to create a database after configuring the server. User data, chat messages, and other pertinent information will be kept in the database. The database and its tables can be created using a program like phpMyAdmin. User data, such as username, email address, password, and other pertinent information, should be stored in the database.\n\nAn essential component of any application, including online group chat, is the user interface. Users should be able to navigate the program thanks to an intuitive and user-friendly user interface. A login/register page, the chat room page, and other associated pages should all be included in the user interface.\n\nFollowing the creation of the user interface, PHP code must be written. The PHP code should handle user registration, login/logout, and chat messages. The code should also run server-side user input validation to save and retrieve user data and chat messages. The PHP code should be modular and well-organized to guarantee simple maintenance and scalability.\n\nThe online group chat application is not an exception; security is a crucial component of any web-based program. To prevent unauthorized access to the application, the PHP code should include security features like password hashing, CSRF protection, and user authentication. The application should also use SSL encryption to communicate safely between the server and the client.\n\nAfter the program has been created, it is crucial to test it to ensure everything functions as it should correctly. User registration, login/logout, chat messaging, and other associated functions are all tested during this process. Testing should be done in a staging environment that closely resembles the production environment to ensure the application functions flawlessly when deployed to production.\n\nThe last stage is to make the program accessible to users by placing it in a production environment. A dependable, secure, and scalable server should be used to launch the application. Regular monitoring is also necessary to ensure it operates at peak efficiency and to spot and address any emerging problems. The application has to receive regular upgrades to stay current with emerging technology and security.\n\nWe will start building our online chat application by following the above steps. We are not focusing here on the security and the deployment part for simplicity of the code and demo purposes.\n\nStep 1. We will use xampp and MySQL with PHP’s pdo. Make sure you already installed XAMPP and MySQL in your system. We have also added bootstrap CDN links in our user interface for better visualization.\n\nStep 2. The next step is to create the database. You can manually navigate to the phpMyAdmin panel and build your database and tables or write a script to make your database and table automatically. This is the following script you need to run to create the database and tables −\n\nThe database name we used is ‘onlinechatapp’, and we set credentials as ‘admin’ and passwords as ‘admin’ for the database. The table we created is named ‘message’, which has an ‘id’ field which is an auto-incremented and primary key, a ‘content’ field, which stores the content of the message, and finally ‘, user_id’ to identify the user.\n\nStep 3. After the database is completed and before doing the actual user interface, we need to create a connection between the database and the user interface. We created a file named ‘pdo.php’, which holds the connection, and we include this file or connection in every page we will build for the user interface.\n\nStep 4. After the database is completed and before doing the actual user interface, we need to create a connection between the database and the user interface. We created a file named ‘pdo.php’, which holds the connection, and we include this file or connection in every page we will build for the user interface.\n\nWe created the 'index.php' file to set up the actual application. Here we first check whether the current user has a user ID. We redirect them to the 'login.php' page if they don't have the user ID. Then we retrieve all the messages and show them accordingly. If the current user sends the news, we offer them as the green color; if it is for another user, it is shown as light pitch color. Also, after submitting the form, we insert a new message in the database table.\n\nFor styling the components, we use a stylesheet and Bootstrap. Our stylesheet is named ‘styles.css’.\n\nSo, this is how we developed the online group chat application. Below are the outputs of the application shown in the use condition.\n\nLogging in with another user\n\nThe message showing on the Test User’s app\n\nThis is a fantastic app to build for starting your web application learning and doing an amazing project like this."
    },
    {
        "link": "https://quora.com/What-is-the-best-way-to-develop-a-chat-website-My-plan-is-to-use-PHP-framework-with-AJAX-scripting-for-the-client-side-Does-anyone-have-any-ideas-about-the-protocol-I-can-make-for-the-PHP-scripts",
        "document": "Something went wrong. Wait a moment and try again."
    }
]