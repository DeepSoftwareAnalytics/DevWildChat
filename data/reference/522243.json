[
    {
        "link": "https://discordpy.readthedocs.io/en/stable/api.html",
        "document": "The following section outlines the API of discord.py.\n\nThis section outlines the different types of events listened by . There are two ways to register an event, the first way is through the use of . The second way is through subclassing and overriding the specific events. For example: If an event handler raises an exception, will be called to handle it, which defaults to logging the traceback and ignoring the exception. All the events must be a coroutine. If they aren’t, then you might get unexpected errors. In order to turn a function into a coroutine they must be functions. Called when a or has successfully completed without error.\n• None interaction ( ) – The interaction of the command. Called when a is created. You must have to receive this. This requires to be enabled. rule ( ) – The rule that was created. Called when a is updated. You must have to receive this. This requires to be enabled. rule ( ) – The rule that was updated. Called when a is deleted. You must have to receive this. This requires to be enabled. rule ( ) – The rule that was deleted. Called when a is created/performed. You must have to receive this. This requires to be enabled. execution ( ) – The rule execution that was performed. Called whenever a guild channel is deleted or created. Note that you can get the guild from . This requires to be enabled. channel ( ) – The guild channel that got created or deleted. Called whenever a guild channel is updated. e.g. changed name, topic, permissions. This requires to be enabled.\n• None before ( ) – The updated guild channel’s old info.\n• None after ( ) – The updated guild channel’s new info. Called whenever a message is pinned or unpinned from a guild channel. This requires to be enabled.\n• None channel (Union[ , ]) – The guild channel that had its pins updated.\n• None last_pin (Optional[ ]) – The latest message that was pinned as an aware datetime in UTC. Could be . Called whenever a private group DM is updated. e.g. changed name or topic. This requires to be enabled.\n• None before ( ) – The updated group channel’s old info.\n• None after ( ) – The updated group channel’s new info. Called whenever a message is pinned or unpinned from a private channel.\n• None channel ( ) – The private channel that had its pins updated.\n• None last_pin (Optional[ ]) – The latest message that was pinned as an aware datetime in UTC. Could be . The parameter can be a instance. Which could either be , , or . If the is a then the parameter is a , otherwise it is a . If the channel or user could not be found in the internal cache this event will not be called, you may use instead. This requires to be enabled.\n• None channel ( ) – The location where the typing originated from.\n• None when ( ) – When the typing started as an aware datetime in UTC. Called when someone begins typing a message. Unlike this is called regardless of the channel and user being in the internal cache. This requires to be enabled. Called when the client has successfully connected to Discord. This is not the same as the client being fully prepared, see for that. The warnings on also apply. Called when the client has disconnected from Discord, or a connection attempt to Discord has failed. This could happen either through the internet being disconnected, explicit calls to close, or Discord terminating the connection one way or the other. This function can be called many times without a corresponding call. Similar to except used by to denote when a particular shard ID has connected to Discord. shard_id ( ) – The shard ID that has connected. Similar to except used by to denote when a particular shard ID has disconnected from Discord. shard_id ( ) – The shard ID that has disconnected. Usually when an event raises an uncaught exception, a traceback is logged to stderr and the exception is ignored. If you want to change this behaviour and handle the exception for whatever reason yourself, this event can be overridden. Which, when done, will suppress the default action of printing the traceback. The information of the exception raised and the exception itself can be retrieved with a standard call to . will only be dispatched to . It will not be received by , or, if used, Bots listeners such as or . Changed in version 2.0: The traceback is now logged rather than printed.\n• None event ( ) – The name of the event that raised the exception.\n• None args – The positional arguments for the event that raised the exception.\n• None kwargs – The keyword arguments for the event that raised the exception. Called whenever a websocket event is received from the WebSocket. This is mainly useful for logging how many events you are receiving from the Discord gateway. event_type ( ) – The event type from Discord that is received, e.g. . Called whenever a message is completely received from the WebSocket, before it’s processed and parsed. This event is always dispatched when a complete message is received and the passed data is not parsed in any way. This is only really useful for grabbing the WebSocket stream and debugging purposes. This requires setting the setting in the . This is only for the messages received from the client WebSocket. The voice WebSocket will not trigger this event. msg ( ) – The message passed in from the WebSocket library. Called whenever a send operation is done on the WebSocket before the message is sent. The passed parameter is the message that is being sent to the WebSocket. This is only really useful for grabbing the WebSocket stream and debugging purposes. This requires setting the setting in the . This is only for the messages sent from the client WebSocket. The voice WebSocket will not trigger this event. payload (Union[ , ]) – The message that is about to be passed on to the WebSocket library. It can be to denote a binary message or to denote a regular text message. entitlement ( ) – The entitlement that was created. Called when a user updates their subscription to a SKU. This is usually called when the user renews or cancels their subscription. entitlement ( ) – The entitlement that was updated. Called when a users subscription to a SKU is cancelled. This is typically only called when: This event won’t be called if the user cancels their subscription manually, instead will be called with set to the end of the current billing period. entitlement ( ) – The entitlement that was deleted. Called when the client is done preparing the data received from Discord. Usually after login is successful and the and co. are filled up. This function is not guaranteed to be the first event called. Likewise, this function is not guaranteed to only be called once. This library implements reconnection logic and thus will end up calling this event whenever a RESUME request fails. Called when the client has resumed a session. Similar to except used by to denote when a particular shard ID has become ready. shard_id ( ) – The shard ID that is ready. Similar to except used by to denote when a particular shard ID has resumed a session. shard_id ( ) – The shard ID that has resumed. Called when a guild becomes available or unavailable. The guild must have existed in the cache. This requires to be enabled. guild – The that has changed availability. Called when a is either created by the or when the joins a guild. This requires to be enabled. guild ( ) – The guild that was joined. Called when a is removed from the . This happens through, but not limited to, these circumstances:\n• None The client or the guild owner deleted the guild. In order for this event to be invoked then the must have been part of the guild to begin with. (i.e. it is part of ) This requires to be enabled. guild ( ) – The guild that got removed. Called when a updates, for example: This requires to be enabled.\n• None before ( ) – The guild prior to being updated.\n• None after ( ) – The guild after being updated. This requires to be enabled.\n• None guild ( ) – The guild who got their emojis updated.\n• None before (Sequence[ ]) – A list of emojis before the update.\n• None after (Sequence[ ]) – A list of emojis after the update. This requires to be enabled.\n• None guild ( ) – The guild who got their stickers updated.\n• None before (Sequence[ ]) – A list of stickers before the update.\n• None after (Sequence[ ]) – A list of stickers after the update. Called when a gets a new audit log entry. You must have to receive this. This requires to be enabled. Audit log entries received through the gateway are subject to data retrieval from cache rather than REST. This means that some data might not be present when you expect it to be. For example, the attribute will usually be a and the attribute will depend on user and member cache. To get the user ID of entry, can be used instead. entry ( ) – The audit log entry that was created. Called when an is created. You must have to receive this. There is a rare possibility that the and attributes will be of rather than the respective models. This requires to be enabled. invite ( ) – The invite that was created. Called when an is deleted. You must have to receive this. There is a rare possibility that the and attributes will be of rather than the respective models. Outside of those two attributes, the only other attribute guaranteed to be filled by the Discord gateway for this event is . This requires to be enabled. invite ( ) – The invite that was deleted. Called when an integration is created. This requires to be enabled. integration ( ) – The integration that was created. Called when an integration is updated. This requires to be enabled. integration ( ) – The integration that was updated. Called whenever an integration is created, modified, or removed from a guild. This requires to be enabled. guild ( ) – The guild that had its integrations updated. Called whenever a webhook is created, modified, or removed from a guild channel. This requires to be enabled. channel ( ) – The channel that had its webhooks updated. Called when an integration is deleted. This requires to be enabled. This currently happens due to slash command invocations or components being used. This is a low level function that is not generally meant to be used. If you are working with components, consider using the callbacks associated with the instead as it provides a nicer user experience. This requires to be enabled. If the guild or member could not be found in the internal cache this event will not be called, you may use instead. This requires to be enabled. Unlike this is called regardless of the guild or member being in the internal cache. This requires to be enabled. This is called when one or more of the following things change: Due to a Discord limitation, this event is not dispatched when a member’s timeout expires. This requires to be enabled.\n• None before ( ) – The updated member’s old info. This is called when one or more of the following things change: This requires to be enabled.\n• None before ( ) – The updated user’s old info. Called when a user gets banned from a . This requires to be enabled.\n• None guild ( ) – The guild the user got banned from.\n• None user (Union[ , ]) – The user that got banned. Can be either or depending if the user was in the guild or not at the time of removal. Called when a gets unbanned from a . This requires to be enabled.\n• None guild ( ) – The guild the user got unbanned from.\n• None user ( ) – The user that got unbanned. This is called when one or more of the following things change: This requires and to be enabled.\n• None before ( ) – The updated member’s old info. This requires to be enabled. Unlike , when enabled, this is called regardless of the state of internal guild and member caches, and does not provide a comparison between the previous and updated states of the . By default, this event is only dispatched when is enabled and is disabled. You can manually override this behaviour by setting the enable_raw_presences flag in the , however is always required for this event to work. Called when a is created and sent. This requires to be enabled. Your bot’s own messages and private messages are sent through this event. This can lead cases of ‘recursion’ depending on how your bot was programmed. If you want the bot to not reply to itself, consider checking the user IDs. Note that does not have this problem. Called when a receives an update event. If the message is not found in the internal message cache, then these events will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds. If this occurs increase the parameter or use the event instead. The following non-exhaustive cases trigger this event:\n• None A message has been pinned or unpinned.\n• None The message content has been changed.\n• None The message has received an embed.\n• None For performance reasons, the embed server does not do this in a “consistent” manner.\n• None The message’s embeds were suppressed or unsuppressed.\n• None A call message has received an update to its participants or ending time. This requires to be enabled.\n• None before ( ) – The previous version of the message.\n• None after ( ) – The current version of the message. Called when a message is deleted. If the message is not found in the internal message cache, then this event will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds. If this occurs increase the parameter or use the event instead. This requires to be enabled. Called when messages are bulk deleted. If none of the messages deleted are found in the internal message cache, then this event will not be called. If individual messages were not found in the internal message cache, this event will still be called, but the messages not found will not be included in the messages list. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds. If this occurs increase the parameter or use the event instead. This requires to be enabled. messages (List[ ]) – The messages that have been deleted. Called when a message is edited. Unlike , this is called regardless of the state of the internal message cache. If the message is found in the message cache, it can be accessed via . The cached message represents the message before it has been edited. For example, if the content of a message is modified and triggers the coroutine, the will return a object that represents the message before the content was modified. Due to the inherently raw nature of this event, the data parameter coincides with the raw data given by the gateway. Since the data payload can be partial, care must be taken when accessing stuff in the dictionary. One example of a common case of partial data is when the key is inaccessible. This denotes an “embed” only edit, which is an edit in which only the embeds are updated by the Discord embed server. This requires to be enabled. Called when a message is deleted. Unlike , this is called regardless of the message being in the internal message cache or not. If the message is found in the message cache, it can be accessed via This requires to be enabled. Called when a bulk delete is triggered. Unlike , this is called regardless of the messages being in the internal message cache or not. If the messages are found in the message cache, they can be accessed via This requires to be enabled. Called when a gains or loses a vote. If the or ’s poll parent message are not cached then this event will not be called. This requires and to be enabled. If the poll allows multiple answers and the user removes or adds multiple votes, this event will be called as many times as votes that are added or removed.\n• None user (Union[ , ]) – The user that performed the action.\n• None answer ( ) – The answer the user voted or removed their vote from. Called when a gains or loses a vote. Unlike and this is called regardless of the state of the internal user and message cache. This requires and to be enabled. If the poll allows multiple answers and the user removes or adds multiple votes, this event will be called as many times as votes that are added or removed. Called when a message has a reaction added to it. Similar to , if the message is not found in the internal message cache, then this event will not be called. Consider using instead. To get the being reacted, access it via . This requires to be enabled. This doesn’t require within a guild context, but due to Discord not providing updated user information in a direct message it’s required for direct messages to receive this event. Consider using if you need this and do not otherwise want to enable the members intent. This event does not have a way of differentiating whether a reaction is a burst reaction (also known as “super reaction”) or not. If you need this, consider using instead.\n• None reaction ( ) – The current state of the reaction.\n• None user (Union[ , ]) – The user who added the reaction. Called when a message has a reaction removed from it. Similar to on_message_edit, if the message is not found in the internal message cache, then this event will not be called. To get the message being reacted, access it via . This requires both and to be enabled. Consider using if you need this and do not want to enable the members intent. This event does not have a way of differentiating whether a reaction is a burst reaction (also known as “super reaction”) or not. If you need this, consider using instead.\n• None reaction ( ) – The current state of the reaction.\n• None user (Union[ , ]) – The user whose reaction was removed. Called when a message has all its reactions removed from it. Similar to , if the message is not found in the internal message cache, then this event will not be called. Consider using instead. This requires to be enabled.\n• None message ( ) – The message that had its reactions cleared.\n• None reactions (List[ ]) – The reactions that were removed. Called when a message has a specific reaction removed from it. Similar to , if the message is not found in the internal message cache, then this event will not be called. Consider using instead. This requires to be enabled. reaction ( ) – The reaction that got cleared. Called when a message has a reaction added. Unlike , this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a message has a reaction removed. Unlike , this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a message has all its reactions removed. Unlike , this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a message has a specific reaction removed from it. Unlike this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a creates or deletes a new . To get the guild it belongs to, use . This requires to be enabled. role ( ) – The role that was created or deleted. This requires to be enabled.\n• None before ( ) – The updated role’s old info. Called when a is created or deleted. This requires to be enabled. event ( ) – The scheduled event that was created or deleted. This requires to be enabled. The following, but not limited to, examples illustrate when this event is called:\n• None before ( ) – The scheduled event before the update.\n• None after ( ) – The scheduled event after the update. Called when a user is added or removed from a . This requires to be enabled.\n• None event ( ) – The scheduled event that the user was added or removed from.\n• None user ( ) – The user that was added or removed. Called when a is created or deleted. sound ( ) – The soundboard sound that was created or deleted. The following examples illustrate when this event is called: sound ( ) – The soundboard sound that was updated. Called when a is created or deleted for a . stage_instance ( ) – The stage instance that was created or deleted. The following, but not limited to, examples illustrate when this event is called:\n• None before ( ) – The stage instance before the update.\n• None after ( ) – The stage instance after the update. subscription ( ) – The subscription that was created. subscription ( ) – The subscription that was updated. subscription ( ) – The subscription that was deleted. Note that you can get the guild from . This requires to be enabled. thread ( ) – The thread that was created. Note that you can get the guild from . This requires to be enabled. thread ( ) – The thread that got joined. Called whenever a thread is updated. If the thread could not be found in the internal cache this event will not be called. Threads will not be in the cache if they are archived. If you need this information use instead. This requires to be enabled.\n• None before ( ) – The updated thread’s old info.\n• None after ( ) – The updated thread’s new info. Called whenever a thread is removed. This is different from a thread being deleted. Note that you can get the guild from . This requires to be enabled. Due to technical limitations, this event might not be called as soon as one expects. Since the library tracks thread membership locally, the API only sends updated thread membership status upon being synced by joining a thread. thread ( ) – The thread that got removed. Called whenever a thread is deleted. If the thread could not be found in the internal cache this event will not be called. Threads will not be in the cache if they are archived. If you need this information use instead. Note that you can get the guild from . This requires to be enabled. thread ( ) – The thread that got deleted. Called whenever a thread is updated. Unlike this is called regardless of the thread being in the internal thread cache or not. This requires to be enabled. Called whenever a thread is deleted. Unlike this is called regardless of the thread being in the internal thread cache or not. This requires to be enabled. You can get the thread a member belongs in by accessing . This requires to be enabled. member ( ) – The member who joined or left. Called when a leaves a . Unlike this is called regardless of the member being in the internal thread’s members cache or not. This requires to be enabled. Called when a changes their . The following, but not limited to, examples illustrate when this event is called:\n• None A member is muted or deafened by their own accord.\n• None A member is muted or deafened by a guild administrator. This requires to be enabled.\n• None before ( ) – The voice state prior to the changes.\n• None after ( ) – The voice state after the changes. Called when a sends a in a voice channel the bot is in. This requires to be enabled. effect ( ) – The effect that is sent.\n\nThe API provides some enumerations for certain types of strings to avoid the API from being stringly typed in case the strings change in the future. All enumerations are subclasses of an internal class which mimics the behaviour of . Specifies the type of . This is used to denote if a message is to be interpreted as a system message or a regular message. Checks if two messages are equal. Checks if two messages are not equal. The default message type. This is the same as regular messages. The system message when a user is added to a group private message or a thread. The system message when a user is removed from a group private message or a thread. The system message denoting that a channel’s name has been changed. The system message denoting that a channel’s icon has been changed. The system message denoting that a pinned message has been added to a channel. The system message denoting that a new member has joined a Guild. The system message denoting that a member has “nitro boosted” a guild. The system message denoting that a member has “nitro boosted” a guild and it achieved level 1. The system message denoting that a member has “nitro boosted” a guild and it achieved level 2. The system message denoting that a member has “nitro boosted” a guild and it achieved level 3. The system message denoting that an announcement channel has been followed. The system message denoting that a member is streaming in the guild. The system message denoting that the guild is no longer eligible for Server Discovery. The system message denoting that the guild has become eligible again for Server Discovery. The system message denoting that the guild has failed to meet the Server Discovery requirements for one week. The system message denoting that the guild has failed to meet the Server Discovery requirements for 3 weeks in a row. The system message denoting that a thread has been created. This is only sent if the thread has been created from an older message. The period of time required for a message to be considered old cannot be relied upon and is up to Discord. The system message denoting that the author is replying to a message. The system message denoting that a slash command was executed. The system message sent as a reminder to invite people to the guild. The system message denoting the message in the thread that is the one that started the thread’s conversation topic. The system message denoting that a context menu command was executed. The system message sent when an AutoMod rule is triggered. This is only sent if the rule is configured to sent an alert when triggered. The system message sent when a user purchases or renews a role subscription. The system message sent when a user is given an advertisement to purchase a premium tier for an application during an interaction. The system message sent when the stage starts. The system message sent when the stage ends. The system message sent when the stage speaker changes. The system message sent when a user is requesting to speak by raising their hands. The system message sent when the stage topic changes. The system message sent when an application’s premium subscription is purchased for the guild. The system message sent when security actions is enabled. The system message sent when security actions is disabled. The system message sent when a raid is reported. The system message sent when a false alarm is reported. The system message sent when a purchase is made in the guild. The system message sent when a poll has closed. The user has SMS recovery for Multi Factor Authentication enabled. The user has dismissed the Discord Nitro promotion. The user is an Early Supporter. The user has an unread system message. The user is an Early Verified Bot Developer. The user is a bot that only uses HTTP interactions and is shown in the online member list. The user is flagged as a spammer by Discord. The user is an active developer. Specifies the type of . This is used to check how to interpret the activity itself. An unknown activity type. This should generally not happen. Specifies a 's verification level, which is the criteria in which a member must meet before being able to send messages to the guild. Checks if two verification levels are equal. Checks if two verification levels are not equal. Checks if a verification level is higher than another. Checks if a verification level is lower than another. Checks if a verification level is higher or equal to another. Checks if a verification level is lower or equal to another. Member must have a verified email on their Discord account. Member must have a verified email and be registered on Discord for more than five minutes. Member must have a verified email, be registered on Discord for more than five minutes, and be a member of the guild itself for more than ten minutes. Member must have a verified phone on their Discord account. Specifies whether a has notifications on for all messages or mentions only by default. Checks if two notification levels are equal. Checks if two notification levels are not equal. Checks if a notification level is higher than another. Checks if a notification level is lower than another. Checks if a notification level is higher or equal to another. Checks if a notification level is lower or equal to another. Members receive notifications for every message regardless of them being mentioned. Members receive notifications for messages they are mentioned in. Specifies a 's explicit content filter, which is the machine learning algorithms that Discord uses to detect if an image contains pornography or otherwise explicit content. Checks if two content filter levels are equal. Checks if two content filter levels are not equal. Checks if a content filter level is higher than another. Checks if a content filter level is lower than another. Checks if a content filter level is higher or equal to another. Checks if a content filter level is lower or equal to another. The guild does not have the content filter enabled. The guild has the content filter enabled for members without a role. The guild has the content filter enabled for every member. The member is “Do Not Disturb”. The member is “invisible”. In reality, this is only used when sending a presence a la . When you receive a user’s presence this will be instead. Represents the type of action being done for a , which is retrievable via . The guild has updated. Things that trigger this include: When this is the action, the type of is the . When this is the action, the type of is either a or with an ID. A more filled out object in the case can be found by using . A channel was updated. Things that trigger this include:\n• None The channel name or topic was changed When this is the action, the type of is the or with an ID. A more filled out object in the case can be found by using or . When this is the action, the type of is an with an ID. A more filled out object can be found by using the object. When this is the action, the type of is the or with an ID. When this is the action, the type of is either a or . If the object is not found then it is a with an ID being filled, a name, and a attribute set to either or to help dictate what type of ID it is. A channel permission overwrite was changed, this is typically when the permission values change. See for more information on how the and fields are set. See for more information on how the and fields are set. When this is the action, the type of is the or who got kicked. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An optional string that denotes the type of integration that did the action. When this is the action, is empty. When this is the action, the type of is set to . When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : An integer specifying how far the prune was.\n• None : An integer specifying how many members were removed. When this is the action, is empty. When this is the action, the type of is the or who got banned. When this is the action, is empty. When this is the action, the type of is the or who got unbanned. When this is the action, is empty. A member has updated. This triggers in the following situations:\n• None They were server muted or deafened (or it was undo’d) When this is the action, the type of is the , , or who got updated. A member’s role has been updated. This triggers when a member either gains a role or loses a role. When this is the action, the type of is the , , or who got the role. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An optional string that denotes the type of integration that did the action. A member’s voice channel has been updated. This triggers when a member is moved to a different voice channel. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : An or with the channel ID where the members were moved.\n• None : An integer specifying how many members were moved. A member’s voice state has changed. This triggers when a member is force disconnected from voice. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An integer specifying how many members were disconnected. A bot was added to the guild. When this is the action, the type of is the , , or which was added to the guild. When this is the action, the type of is the or a with the ID. A role was updated. This triggers in the following situations:\n• None The role icon (or unicode emoji) has changed When this is the action, the type of is the or a with the ID. When this is the action, the type of is the or a with the ID. When this is the action, the type of is the that was created. When this is the action, the type of is the that was updated. When this is the action, the type of is the that was deleted. When this is the action, the type of is the with the webhook ID. A webhook was updated. This trigger in the following situations: When this is the action, the type of is the with the webhook ID. When this is the action, the type of is the with the webhook ID. When this is the action, the type of is the or with the emoji ID. An emoji was updated. This triggers when the name has changed. When this is the action, the type of is the or with the emoji ID. When this is the action, the type of is the with the emoji ID. A message was deleted by a moderator. Note that this only triggers if the message was deleted by someone other than the author. When this is the action, the type of is the , , or who had their message deleted. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : An integer specifying how many messages were deleted.\n• None : A or with the channel ID where the message got deleted. When this is the action, the type of is the or with the ID of the channel that was purged. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An integer specifying how many messages were deleted. When this is the action, the type of is the , , or who had their message pinned. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : A or with the channel ID where the message was pinned.\n• None : the ID of the message which was pinned. When this is the action, the type of is the , , or who had their message unpinned. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : A or with the channel ID where the message was unpinned.\n• None : the ID of the message which was unpinned. When this is the action, the type of is a or with the integration ID of the integration which was created. When this is the action, the type of is a or with the integration ID of the integration which was updated. When this is the action, the type of is a or with the integration ID of the integration which was deleted. When this is the action, the type of is the or with the ID of the stage instance which was created. When this is the action, the type of is the or with the ID of the stage instance which was updated. When this is the action, the type of is the or with the ID of the sticker which was created. When this is the action, the type of is the or with the ID of the sticker which was updated. When this is the action, the type of is the or with the ID of the sticker which was updated. When this is the action, the type of is the or with the ID of the event which was created. When this is the action, the type of is the or with the ID of the event which was updated. When this is the action, the type of is the or with the ID of the event which was deleted. When this is the action, the type of is the or with the ID of the thread which was created. When this is the action, the type of is the or with the ID of the thread which was updated. When this is the action, the type of is the or with the ID of the thread which was deleted. An application command or integrations application command permissions were updated. When this is the action, the type of is a for an integrations general permissions, for a specific commands permissions, or with the ID of the command or integration which was updated. When this is the action, the type of is set to an or with the ID of application that command or integration belongs to. When this is the action, the type of is a or with the ID of the automod rule that was created. When this is the action, the type of is a or with the ID of the automod rule that was created. When this is the action, the type of is a or with the ID of the automod rule that was created. An automod rule blocked a message from being sent. When this is the action, the type of is a with the ID of the person who triggered the automod rule. When this is the action, the type of is set to an unspecified proxy object with 3 attributes:\n• None : The name of the automod rule that was triggered.\n• None : A representation of the rule type that was triggered.\n• None : The channel in which the automod rule was triggered. When this is the action, is empty. When this is the action, the type of is a with the ID of the person who triggered the automod rule. When this is the action, the type of is set to an unspecified proxy object with 3 attributes:\n• None : The name of the automod rule that was triggered.\n• None : A representation of the rule type that was triggered.\n• None : The channel in which the automod rule was triggered. When this is the action, is empty. When this is the action, the type of is a with the ID of the person who triggered the automod rule. When this is the action, the type of is set to an unspecified proxy object with 3 attributes:\n• None : The name of the automod rule that was triggered.\n• None : A representation of the rule type that was triggered.\n• None : The channel in which the automod rule was triggered. When this is the action, is empty. A request to monetize the server was created. The terms and conditions for creator monetization were accepted. Represents the category that the belongs to. This can be retrieved via . The action is the creation of something. The action is the deletion of something. The action is the update of something. Represents the membership state of a team member retrieved through . Represents a member currently in the team. Represents the type of role of a team member retrieved through . The team member is an admin. This allows them to invite members to the team, access credentials, edit the application, and do most things the owner can do. However they cannot do destructive actions. The team member is a developer. This allows them to access information, like the client secret or public key. They can also configure interaction endpoints or reset the bot token. Developers cannot invite anyone to the team nor can they do destructive actions. The team member is a read-only member. This allows them to access information, but not edit anything. Represents the type of webhook that can be received. Represents a webhook that can post messages to channels with a token. Represents a webhook that is internally managed by Discord, used for following channels. Represents a webhook that is used for interactions or applications. Represents the behaviour the should perform when a user’s subscription has finished. There is an alias for this called . This will remove the from the user when their subscription is finished. This will kick the user when their subscription is finished. Represents the default avatar with the colour blurple. See also Represents the default avatar with the colour grey. See also Represents the default avatar with the colour green. See also Represents the default avatar with the colour orange. See also Represents the default avatar with the colour red. See also Represents the default avatar with the colour pink. See also Represents a standard sticker that all Nitro users can use. The invite doesn’t target anyone or anything. Represents the privacy level of a stage instance or scheduled event. The stage instance or scheduled event is only accessible within the guild. Checks if two NSFW levels are equal. Checks if two NSFW levels are not equal. Checks if a NSFW level is higher than another. Checks if a NSFW level is lower than another. Checks if a NSFW level is higher or equal to another. Checks if a NSFW level is lower or equal to another. The guild has not been categorised yet. The guild does not contain any NSFW content. The guild may contain NSFW content. Supported locales by Discord. Mainly used for application command localisation. Checks if two MFA levels are equal. Checks if two MFA levels are not equal. Checks if a MFA level is higher than another. Checks if a MFA level is lower than another. Checks if a MFA level is higher or equal to another. Checks if a MFA level is lower or equal to another. The guild has no MFA requirement. Represents the type of entity that a scheduled event is for. The scheduled event will occur in a stage instance. The scheduled event will occur in a voice channel. Represents the status of an event. The event has been cancelled. Represents the trigger type of an automod rule. The rule will trigger when a keyword is mentioned. The rule will trigger when a harmful link is posted. The rule will trigger when a spam message is posted. The rule will trigger when something triggers based on the set keyword preset types. The rule will trigger when combined number of role and user mentions is greater than the set limit. The rule will trigger when a user’s profile contains a keyword. Represents the event type of an automod rule. The rule will trigger when a message is sent. The rule will trigger when a member’s profile is updated. Represents the action type of an automod rule. The rule will block a message from being sent. The rule will send an alert message to a predefined channel. Similar to , except the user will be timed out indefinitely. This will request the user to edit it’s profile. Represents how a forum’s posts are layed out in the client. No default has been set, so it is up to the client to know how to lay it out. Represents how a forum’s posts are sorted in the client. Sort forum posts by creation time (from most recent to oldest). Represents the default value of a select menu. The underlying type of the ID is a user. The underlying type of the ID is a role. The underlying type of the ID is a channel or thread. The SKU is a system-generated group which is created for each . Represents the type of an entitlement. The entitlement was purchased by the user. The entitlement is for a nitro subscription. The entitlement was gifted by the developer. The entitlement was purchased by a developer in application test mode. The entitlement was granted, when the SKU was free. The entitlement was gifted by a another user. The entitlement was claimed for free by a nitro subscriber. The entitlement was purchased as an app subscription. Represents the type of an entitlement owner. Represents the type of an invite. A burst reaction, also known as a “super reaction”. Represents the status of an subscription. The subscription is active but will not renew. The subscription is inactive and not being charged. A standard reference used by message replies ( ), crossposted messaged created by a followed channel integration, and messages of type:"
    },
    {
        "link": "https://discordpy.readthedocs.io/en/latest/ext/commands/commands.html",
        "document": "One of the most appealing aspects of the command extension is how easy it is to define commands and how you can arbitrarily nest groups and commands to have a rich sub-command system.\n\nCommands are defined by attaching it to a regular Python function. The command is then invoked by the user using a similar signature to the Python function.\n\nFor example, in the given command definition:\n\nWith the following prefix ( ), it would be invoked by the user via:\n\nA command must always have at least one parameter, , which is the as the first one.\n\nThere are two ways of registering a command. The first one is by using decorator, as seen in the example above. The second is using the decorator followed by on the instance.\n\nEssentially, these two are equivalent:\n\nSince the decorator is shorter and easier to comprehend, it will be the one used throughout the documentation here.\n\nAny parameter that is accepted by the constructor can be passed into the decorator. For example, to change the name to something other than the function would be as simple as doing this:\n\nSince we define commands by making Python functions, we also define the argument passing behaviour by the function parameters. Certain parameter types do different things in the user side and most forms of parameter types are supported. The most basic form of parameter passing is the positional parameter. This is where we pass a parameter as-is: On the bot using side, you can provide positional arguments by just passing a regular string: To make use of a word with spaces in between, you should quote it: As a note of warning, if you omit the quotes, you will only get the first word: Since positional arguments are just regular Python arguments, you can have as many as you want: Sometimes you want users to pass in an undetermined number of parameters. The library supports this similar to how variable list parameters are done in Python: This allows our user to accept either one or many arguments as they please. This works similar to positional arguments, so multi-word parameters should be quoted. For example, on the bot side: If the user wants to input a multi-word argument, they have to quote it like earlier: Do note that similar to the Python function behaviour, a user can technically pass no arguments at all: Since the variable is a , you can do anything you would usually do with one. When you want to handle parsing of the argument yourself or do not feel like you want to wrap multi-word user input into quotes, you can ask the library to give you the rest as a single argument. We do this by using a keyword-only argument, seen below: You can only have one keyword-only argument due to parsing ambiguities. On the bot side, we do not need to quote input with spaces: Do keep in mind that wrapping it in quotes leaves it as-is: By default, the keyword-only arguments are stripped of white space to make it easier to work with. This behaviour can be toggled by the argument in the decorator.\n\nAdding bot arguments with function parameters is only the first step in defining your bot’s command interface. To actually make use of the arguments, we usually want to convert the data into a target type. We call these Converters. Converters come in a few flavours:\n• None A regular callable object that takes an argument as a sole parameter and returns a different type.\n• None These range from your own function, to something like or . At its core, a basic converter is a callable that takes in an argument and turns it into something else. For example, if we wanted to add two numbers together, we could request that they are turned into integers for us by specifying the converter: We specify converters by using something called a function annotation. This is a Python 3 exclusive feature that was introduced in PEP 3107. This works with any callable, such as a function that would convert a string to all upper-case: Unlike the other basic converters, the converter is treated slightly different. Instead of casting directly to the type, which would result in any non-empty argument returning , it instead evaluates the argument as or based on its given content: Sometimes a basic converter doesn’t have enough information that we need. For example, sometimes we want to get some information from the that called the command or we want to do some asynchronous processing. For this, the library provides the interface. This allows you to have access to the and have the callable be asynchronous. Defining a custom converter using this interface requires overriding a single method, . The converter provided can either be constructed or not. Essentially these two are equivalent: Having the possibility of the converter be constructed allows you to set up some state in the converter’s for fine tuning the converter. An example of this is actually in the library, . If a converter fails to convert an argument to its designated target type, the exception must be raised. If we don’t want to inherit from , we can still provide a converter that has the advanced functionalities of an advanced converter and save us from specifying two types. For example, a common idiom would be to have a class and a converter for that class: This can get tedious, so an inline advanced converter is possible through a inside the type: Working with Discord Models is a fairly common thing when defining commands, as a result the library makes working with them easy. For example, to receive a you can just pass it as a converter: When this command is executed, it attempts to convert the string given into a and then passes it as a parameter for the function. This works by checking if the string is a mention, an ID, a nickname, a username + discriminator, or just a regular username. The default set of converters have been written to be as easy to use as possible. A lot of discord models work out of the gate as a parameter: Having any of these set as the converter will intelligently convert the argument to the appropriate target type you specify. Under the hood, these are implemented by the Advanced Converters interface. A table of the equivalent converter is given below: By providing the converter it allows us to use them as building blocks for another converter: 'I see the following roles: ' The command extension also has support for certain converters to allow for more advanced and intricate use cases that go beyond the generic linear parsing. These converters allow you to introduce some more relaxed and dynamic grammar to your commands in an easy to use manner. A is a special type hint that allows for the command to take in any of the specific types instead of a singular type. For example, given the following: The parameter would either take a converter or a converter. The way this works is through a left-to-right order. It first attempts to convert the input to a , and if it fails it tries to convert it to a . If all converters fail, then a special error is raised, . Note that any valid converter discussed above can be passed in to the argument list of a . A is a special type hint that allows for “back-referencing” behaviour. If the converter fails to parse into the specified type, the parser will skip the parameter and then either or the specified default will be passed into the parameter instead. The parser will then continue on to the next parameters and converters, if any. Consider the following example: In this example, since the argument could not be converted into an , the default of is passed and the parser resumes handling, which in this case would be to pass it into the parameter. This converter only works in regular positional parameters, not variable parameters or keyword-only parameters. A is a special type hint that requires the passed parameter to be equal to one of the listed values after being converted to the same type. For example, given the following: The parameter must be either the literal string or and must convert to the or . If or don’t match any value, then a special error is raised, . Any literal values can be mixed and matched within the same converter. Note that and still follow the converter rules. A is a special type introduced in Python 3.9 that allows the type checker to see one type, but allows the library to see another type. This is useful for appeasing the type checker for complicated converters. The second parameter of must be the converter that the library should use. For example, given the following: The type checker will see as a regular but the library will know you wanted to change the input into all upper-case. For Python versions below 3.9, it is recommended to install the library and import from there. The converter is a generalisation of the converter, except applied to a list of arguments. In simple terms, this means that it tries to convert as much as it can until it can’t convert any further. Consider the following example: When invoked, it allows for any number of members to be passed in: The type passed when using this converter depends on the parameter type that it is being attached to:\n• None Positional parameter types will receive either the default parameter or a of the converted values.\n• None Variable parameter types will be a as usual.\n• None Keyword-only parameter types will be the same as if was not passed at all. parameters can also be made optional by specifying an optional value. When mixed with the converter you can provide simple and expressive command invocation syntaxes: This command can be invoked any of the following ways: The usage of and are powerful and useful, however as a price, they open you up to some parsing ambiguities that might surprise some people. For example, a signature expecting a of a followed by a could catch a member named after a number due to the different ways a decides to fetch members. You should take care to not introduce unintended parsing ambiguities in your code. One technique would be to clamp down the expected syntaxes allowed through custom converters or reordering the parameters to minimise clashes. To help aid with some parsing ambiguities, , , and are forbidden as parameters for the converter. The converter is a special converter that retrieves an attachment from the uploaded attachments on a message. This converter does not look at the message content at all and just the uploaded attachments. Consider the following example: When this command is invoked, the user must directly upload a file for the command body to be executed. When combined with the converter, the user does not have to provide an attachment. 'You did not upload anything!' This also works with multiple attachments: In this example the user must provide at least one file but the second one is optional. As a special case, using will return the remaining attachments in the message, if any. Note that using a converter after a of will always fail since the greedy had already consumed the remaining attachments. If an attachment is expected but not given, then is raised to the error handlers. A allows the user to specify user-friendly “flags” using PEP 526 type annotations or a syntax more reminiscent of the module. For example, the following code: Allows the user to invoke the command using a simple flag-like syntax: Flags use a syntax that allows the user to not require quotes when passing in values to the flag. The goal of the flag syntax is to be as user-friendly as possible. This makes flags a good choice for complicated commands that can have multiple knobs to turn or simulating keyword-only parameters in your external command interface. It is recommended to use keyword-only parameters with the flag converter. This ensures proper parsing and behaviour with quoting. Internally, the class examines the class to find flags. A flag can either be a class variable with a type annotation or a class variable that’s been assigned the result of the function. These flags are then used to define the interface that your users will use. The annotations correspond to the converters that the flag arguments must adhere to. For most use cases, no extra work is required to define flags. However, if customisation is needed to control the flag name or the default value then the function can come in handy: This tells the parser that the attribute is mapped to a flag named and that the default value is an empty list. For greater customisability, the default can either be a value or a callable that takes the as a sole parameter. This callable can either be a function or a coroutine. A positional flag can be defined by setting the attribute to . This tells the parser that the content provided before the parsing occurs is part of the flag. This is useful for commands that require a parameter to be used first and the flags are optional, such as the following: Only one positional flag is allowed in a flag converter. In order to customise the flag syntax we also have a few options that can be passed to the class parameter list: Despite the similarities in these examples to command like arguments, the syntax and parser is not a command line parser. The syntax is mainly inspired by Discord’s search bar input and as a result all flags need a corresponding value unless part of a positional flag. Flag converters will only raise derived exceptions. If an error is raised while converting a flag, is raised instead and the original exception can be accessed with the attribute. The flag converter is similar to regular commands and allows you to use most types of converters (with the exception of ) as the type annotation. Some extra support is added for specific annotations as described below. If a list is given as a flag annotation it tells the parser that the argument can be passed multiple times. For example, augmenting the example above: This is called by repeatedly specifying the flag: Since the above syntax can be a bit repetitive when specifying a flag many times, the type annotation allows for “greedy-like” semantics using a variadic tuple: This allows the previous command to be called like this: The annotation also allows for parsing of pairs. For example, given the following code: Due to potential parsing ambiguities, the parser expects tuple arguments to be quoted if they require spaces. So if one of the inner types is and the argument requires spaces then quotes should be used to disambiguate it from the other element of the tuple. A annotation is functionally equivalent to except with the return type given as a rather than a . When used as a hybrid command, the parameters are flattened into different parameters for the application command. For example, the following converter: Would be equivalent to an application command defined as this: This means that decorators that refer to a parameter by name will use the flag name instead: 'The number of days worth of messages to delete' For ease of use, the function accepts a keyword argument to allow you to pass descriptions inline: 'The number of days worth of messages to delete' Likewise, use of the keyword argument allows you to pass renames for the parameter, similar to the decorator. Note that in hybrid command form, a few annotations are unsupported due to Discord limitations: Only one flag converter is supported per hybrid command. Due to the flag converter’s way of working, it is unlikely for a user to have two of them in one signature.\n\nWhen our commands fail to parse we will, by default, receive a noisy error in of our console that tells us that an error has happened and has been silently ignored. In order to handle our errors, we must use something called an error handler. There is a global error handler, called which works like any other event in the Event Reference. This global error handler is called for every error reached. Most of the time however, we want to handle an error local to the command itself. Luckily, commands come with local error handlers that allow us to do just that. First we decorate an error handler function with : \"\"\"Tells you some info about the member.\"\"\" 'I could not find that member...' The first parameter of the error handler is the while the second one is an exception that is derived from . A list of errors is found in the Exceptions page of the documentation.\n\nThere are cases when we don’t want a user to use our commands. They don’t have permissions to do so or maybe we blocked them from using our bot earlier. The commands extension comes with full support for these things in a concept called a Checks. A check is a basic predicate that can take in a as its sole parameter. Within it, you have the following options:\n• None Return to signal that the person can run the command.\n• None Return to signal that the person cannot run the command.\n• None Raise a derived exception to signal the person cannot run the command.\n• None This allows you to have custom error messages for you to handle in the error handlers. To register a check for a command, we would have two ways of doing so. The first is using the decorator. For example: \"\"\"A bad example of an eval command\"\"\" This would only evaluate the command if the function returns . Sometimes we re-use a check often and want to split it into its own decorator. To do that we can just add another level of depth: \"\"\"A bad example of an eval command\"\"\" Since an owner check is so common, the library provides it for you ( ): \"\"\"A bad example of an eval command\"\"\" When multiple checks are specified, all of them must be : If any of those checks fail in the example above, then the command will not be run. When an error happens, the error is propagated to the error handlers. If you do not raise a custom derived exception, then it will get wrapped up into a exception as so: 'nothing to see here comrade.' If you want a more robust error system, you can derive from the exception and raise it instead of returning : 'Hey this is not a DM! Nice.' Since having a decorator is pretty common, it comes built-in via . Sometimes we want to apply a check to every command, not just certain commands. The library supports this as well using the global check concept. Global checks work similarly to regular checks except they are registered with the decorator. For example, to block all DMs we could do the following: Be careful on how you write your global checks, as it could also lock you out of your own bot.\n\nis a command that can be invoked as both a text and a slash command. This allows you to define a command as both slash and text command without writing separate code for both counterparts. In order to define a hybrid command, The command callback should be decorated with decorator. The above command can be invoked as both text and slash command. Note that you have to manually sync your by calling in order for slash commands to appear. You can create hybrid command groups and sub-commands using the decorator. Due to a Discord limitation, slash command groups cannot be invoked directly so the parameter allows you to create a sub-command that will be bound to callback of parent group. Due to certain limitations on slash commands, some features of text commands are not supported on hybrid commands. You can define a hybrid command as long as it meets the same subset that is supported for slash commands. Following are currently not supported by hybrid commands:\n• None\n• None Unions of user types with roles are allowed Apart from that, all other features such as converters, checks, autocomplete, flags etc. are supported on hybrid commands. Note that due to a design constraint, decorators related to application commands such as should be placed below the decorator. For convenience and ease in writing code, The class implements some behavioural changes for various methods and attributes:\n• None can be used to retrieve the slash command interaction.\n• None Since interaction can only be responded to once, The automatically determines whether to send an interaction response or a followup response.\n• None defers the interaction response for slash commands but shows typing indicator for text commands."
    },
    {
        "link": "https://pythondiscord.com/pages/guides/python-guides/app-commands",
        "document": "Upon the return of the most popular discord API wrapper library for Python, , while catching on to the latest features of the discord API, there have been numerous changes with additions of features to the library. Additions to the library include support for Buttons, Select Menus, Forms (AKA Modals), Slash Commands (AKA Application Commands) and a bunch more handy features! All the changes can be found here. Original discord.py Gist regarding resumption can be found here.\n\nBefore you can make use of any of the new 2.0 features, you need to install the latest version of discord.py. Make sure that the version is 2.0 or above! Also, make sure to uninstall any third party libraries intended to add slash-command support to pre-2.0 discord.py, as they are no longer necessary and will likely cause issues.\n\nThe latest and most up-to-date stable discord.py version can be installed using .\n\nBefore migrating to discord.py 2.0, make sure you read the migration guide here as there are lots of breaking changes..\n\nSlash Commands are an exciting new way to build and interact with bots on Discord. As soon as you type \"/\", you can easily see all the commands a bot has. It also comes with autocomplete, validation and error handling, which will all help users of your bot get the command right the first time.\n\nNote that Slash Commands in discord.py are also referred to as Application Commmands and App Commands and every interaction is a webhook.¶\n\nSlash commands in discord.py are held by a container, CommandTree. A command tree is required to create Slash Commands in discord.py. This command tree provides a method which decorates an asynchronous function indicating to discord.py that the decorated function is intended to be a slash command. This asynchronous function expects a default argument which acts as the interaction which took place that invoked the slash command. This default argument is an instance of the Interaction class from discord.py. Further up, the command logic takes over the behaviour of the slash command.\n\nOne new feature added in discord.py v2 is . is a special asynchronous method of the Client and Bot classes which can be overwritten to perform numerous tasks. This method is safe to use as it is always triggered before any events are dispatched, i.e. this method is triggered before the IDENTIFY payload is sent to the discord gateway. Note that methods of the Bot class such as will not work in setup_hook as the current application does not have an active connection to the gateway at this point. A full list of commands you can't use in setup_hook can be found here.\n\nTHE FOLLOWING ARE EXAMPLES OF HOW A FUNCTION CAN BE DEFINED\n\nNote that the default intents are defined here to have all intents enabled except presences, members, and message_content.\n\nThe class resides within the of the discord.py package.¶\n• is a class subclassing Client. Though there is no particular reason except readability to subclass the Client class, using the is equally valid.\n• Next up runs the function of the Client class, this is equivalent to . Then, creates a CommandTree which acts as the container for slash commands.\n• Then in the , adds the slash command to the guild of which the ID is provided as a object. Essential to creation of commands Further up, updates the API with any changes to the Slash Commands.\n• Finishing up with the Client subclass, we create an instance of the subclassed Client class which here has been named as with .\n• Then using the method of the we decorate a function with it as is an instance of for the current application. The command function takes a default argument as said, which acts as the interaction that took place. Catching up is which sends back a message to the slash command invoker.\n• And the classic old is used to connect the client to the discord gateway.\n• Note that the is a method of the class and in this case is an instance of the object. The method will not function if the response is not sent within 3 seconds of command invocation. We will discuss how to handle this issue later following the Gist.\n\nThe above example shows a basic Slash Commands within discord.py using the Bot class.\n\nMost of the explanation is the same as the prior example that featured which was a subclass of discord.Client. Though some minor changes are discussed below.\n• The class now subclasses following the passing in of the required arguments to its method.\n• already consists of an instance of the class which can be accessed using the property.\n\nA cog is a collection of commands, listeners, and optional state to help group commands together. More information on them can be found on the Cogs page.\n\nAn Example to using cogs with discord.py for Slash Commands!¶\n• Firstly, imports the discord.py package. imports the module from the discord.py root module. imports the commands extension.\n• Further up, is a class subclassing the class. You can read more about this here.\n• is the constructor method of the class that is always run when the class is instantiated and that is why we pass in a Bot object whenever we create an instance of the cog class.\n• Following up is the decorator. This decorator basically functions the same as a but since the cog currently does not have a bot, the decorator is used instead. The next two lines follow the same structure for Slash Commands with self added as the first parameter to the function as it is a method of a class.\n• The next up lines are mostly the same.\n• Talking about the first line inside the is the method of the Bot class. And since self acts as the instance of the current class, we use self to use the method of the Bot class as we are inside a subclassed class of the Bot class. Then we pass in self to the method as the function of the MySlashCog cog accepts a object.\n• After that we instantiate the class and run the bot using the run method which executes our setup_hook function and our commands get loaded and synced. The bot is now ready to use!\n\nAn Example to using groups with discord.py for Slash Commands!¶\n\nAn example with optional group!¶\n\nEXPLANATION - The only difference used here is and . is used to initiate a group while registers a command under a group. For example, the ping command can be run using /ping but this is not the case for group commands. They are registered with the format of . So here, the command command of the uwu group would be run using /uwu command. Note that only group commands can have a single space between them.\n\nAn example with a Group subclass!¶\n\nEXPLANATION - The only difference here too is that the class directly subclasses the Group class from discord.app_commands which automatically registers all the methods within the group class to be commands of that specific group. So now, the commands such as can be run using /uwu ping and using /uwu command.\n\nSome common methods and features used for Slash Commands.¶\n\nA common function used for Slash Commands is the function. This is used to add descriptions to the arguments of a slash command. The command function can decorated with this function. It goes by the following syntax as shown below.¶\n\nAnother common issue that most people come across is the time duration of sending a message with . This issue can be tackled by deferring the interaction response using the method of the class. An example for fixing this issue is shown below.¶\n\nTo add a permissions check to a command, the methods are imported through . To check for a member's permissions, the function can be decorated with the discord.app_commands.checks.has_permissions method. An example to this as follows.\n\nIf the check fails, it will raise a error which can be handled within an app commands error handler! We will discuss making an error handler later in the Gist. All the permissions can be found here.\n\nOther methods that you can decorate the commands with are - - | This checks if the bot has the required permissions for executing the slash command. This raises a BotMissingPermissions exception. - | This checks if the slash command user has the required role or not. Only ONE role name or role ID can be passed to this. If the name is being passed, make sure to have the exact same name as the role name. This raises a MissingRole exception. - To pass in several role names or role IDs, can be used to decorate a command. This raises two exceptions -> MissingAnyRole and NoPrivateMessage\n\nSlash Commands within discord.py can be applied cooldowns to in order to prevent spamming of the commands. This can be done through the method which can be used to decorate a slash command function and register a cooldown to the function. This raises a CommandOnCooldown exception if the command is currently on cooldown. An example is as follows.\n\nEXPLANATION - The first argument is the number of times this command can be invoked before the cooldown is triggered. - The second argument it takes is the period of time in which the command can be run the specified number of times. - The exception can be handled using an error handler. We will discuss making an error handler for Slash Commands later in the Gist.\n\nThe Slash Commands exceptions can be handled by overwriting the method of the . The error handler takes two arguments. The first argument is the that took place when the error occurred and the second argument is the error that occurred when the Slash Commands was invoked. The error is an instance of discord.app_commands.AppCommandError which is a subclass of DiscordException. An example to creating an error handler for Slash Commands is as follows.\n\nFirst we create a simple asynchronous function named here. To which the first two required arguments are passed, which is named as here and which is named as here. Then using simple functions and keywords, we make an error handler like above. Here we have used the function which takes in an object and a base class as the second argument, this function returns a bool value. The is just for displaying unhandled errors, i.e. the ones which have not been handled manually. If this is removed, you will not be able to see any exceptions raised by Slash Commands and makes debugging the code harder. After creating the error handler function, we set the function as the error handler for the Slash Commands. Here, overwrites the default method of the CommandTree class with our custom error handler which has been named as here.\n\nHere the command name is simply used to access the method to decorate a function which acts as the but for a specific command. You should not need to call the method manually."
    },
    {
        "link": "https://discord.com/developers/docs/reference",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/65470938/how-can-i-use-the-built-in-command-menu-in-discord-py",
        "document": "I know its not the answer your looking for but to my knowledge discord.py doesn't support the / \"auto-predict\". These commands are only for discords in built methods\n\nEdit: I have just learnt I have misinformed you, I was browsing a random server and found this:\n\nYou can see that \"Steakbot\" has added a /preset of its own. I'll look into how to do this\n\nEdit 2 + Solution: It turns out in the discord dev settings for the bot under OAuth2 you can check this:\n\nHere is the official discord documentation for implementing this including a python example:"
    },
    {
        "link": "https://stackoverflow.com/questions/55478282/discord-py-add-role-to-user",
        "document": "I am new to python and creating discord bots in general and I can't for the life of me figure out how to make my bot assign a role to a user upon the users request.\n\nI have scoured the internet for hours on end and have found a few examples but they all produce and error.\n\nHere is the code I have for the command:\n\nHere is the error I get:"
    },
    {
        "link": "https://dev.to/ritza/discord-role-assignment-bot-with-python-5fgm",
        "document": "Discord is a free-to-use chat server application that was initially developed for gamers but is becoming increasingly widely used by many different communities. Anyone can use it to create a chat server for discussion over text as well as voice and video. In addition to hosting human members, these servers can also host special automated users, called bots, which are capable of a variety of fun and useful tasks: everything from playing music to helping human moderators.\n\nIn this tutorial, we'll create a welcome bot for our programming discussion Discord server. This bot will welcome users as they join and assign them roles and private channels based on their stated interests. By the end of this tutorial, you will:\n• Have familiarity with the process of creating a Discord bot application.\n• Be able to use discord.py to develop useful bot logic.\n• Know how to host Discord bots on Replit!\n\nSign in to Replit or create an account if you haven't already. Once logged in, create a Python repl.\n\nOpen another browser tab and visit the Discord Developer Portal. Log in with your Discord account, or create one if you haven't already. Keep your repl open – we'll return to it soon.\n\nOnce you're logged in, create a new application. Give it a name, like \"Welcomer\".\n\nDiscord applications can interact with Discord in several different ways, not all of which require bots, so creating one is optional. That said, we'll need one for this project. Let's create a bot.\n• Click on Bot in the menu on the left-hand side of the page.\n• Give your bot a username (such as \"WelcomeBot\").\n• Click Reset Token and then Yes, do it!\n• Copy the token that appears just under your bot's username.\n\nThe token you just copied is required for the code in our repl to interface with Discord's API. Return to your repl and open the Secrets tab in the left sidebar. Create a new secret with as its key and the token you copied as its value.\n\nOnce, you've done that, return to the Discord developer panel. We need to finish setting up our bot.\n\nFirst, disable the Public Bot option – the functionality we're building for this bot will be highly specific to our server, so we don't want anyone else to try to add it to their server. What's more, bots on 100 or more servers have to go through a special verification and approval process, and we don't want to worry about that.\n\nSecond, we need to configure access to privileged Gateway Intents. Depending on a bot's functionality, it will require access to different events and sources of data. Events involving users' actions and the content of their messages are considered more sensitive and need to be explicitly enabled.\n\nFor this bot to work, we'll need to be able to see when users join our server, and we'll need to see the contents of their messages. For the former, we'll need the Server Members Intent and for the latter, we'll need the Message Content Intent. Toggle both of these to the \"on\" position. Save changes when prompted.\n\nNow that we've created our application and its bot, we need to add it to a server. We'll walk you through creating a test server for this tutorial, but you can also use any server you've created in the past, as long as the other members won't get too annoyed about it becoming a bot testing ground. You can't use a server that you're just a normal user on, as adding bots requires special privileges.\n\nOpen Discord.com in your browser. You should already be logged in. Then click on the + icon in the leftmost panel to create a new server. Alternatively, open an existing server you own.\n\nIn a separate tab, return to the Discord Dev Portal and open your application. Follow these steps to add your bot to your server:\n• Click on OAuth2 in the left sidebar.\n• In the menu that appears under OAuth2, select URL Generator.\n• None Scroll down and copy the URL under Generated URL.\n• None Paste the URL in your browser's navigation bar and hit Enter.\n• None On the page that appears, select your server from the drop-down box and click Continue.\n• None When prompted about permissions, click Authorize, and complete the CAPTCHA.\n• None Return to your Discord server. You should see that your bot has just joined.\n\nNow that we've done the preparatory work, it's time to write some code. Return to your repl for the next section.\n\nWe'll be using discord.py to interface with Discord's API using Python. Add the following code scaffold to in your repl:\n\n\n\nFirst, we import the Python libraries we'll need, including discord.py and its commands extension. Next we retrieve the value of the environment variable, which we set in our repl's secrets tab above. Then we instantiate a object. We'll use this object to listen for Discord events and respond to them.\n\nThe first event we're interested in is , which will trigger when our bot logs onto Discord (the decorator ensures this). All this event will do is print a message to our repl's console, telling us that the bot has connected.\n\nNote that we've prepended to the function definition – this makes our function into a coroutine. Coroutines are largely similar to functions, but may not execute immediately, and must be invoked with the keyword. Using coroutines makes our program asynchronous, which means it can continue executing code while waiting for the results of a long-running function, usually one that depends on input or output. If you've used JavaScript before, you'll recognize this style of programming.\n\nThe final line in our file starts the bot, providing to authenticate it. Run your repl now to see it in action. Once it's started, return to your Discord server. You should see that your bot user is now online.\n\nBefore we write our bot's main logic, we need to create some roles for it to assign. Our Discord server is for programming discussion, so we'll create roles for a few different programming languages: Python, JavaScript, Rust, Go, and C++. For the sake of simplicity, we'll use all-lowercase for our role names. Feel free to add other languages.\n\nYou can add roles by doing the following:\n• Right-click on your server's icon in the leftmost panel.\n• From the menu that appears, select Server Settings, and then Roles.\n• None Enter a role name (for example, \"python\") and choose a color.\n• None Repeat steps 3–5 until all the roles are created.\n\nYour role list should now look something like this:\n\nThe order in which roles are listed is the role hierarchy. Users who have permission to manage roles will only be able to manage roles lower than their highest role on this list. Ensure that the WelcomeBot role is at the top, or it won't be able to assign users to any of the other roles, even with Administrator privileges.\n\nAt present, all these roles will do is change the color of users' names and the list they appear in on the right sidebar. To make them a bit more meaningful, we can create some private channels. Only users with a given role will be able to use these channels.\n\nTo add private channels for your server's roles, do the following:\n• Click on the + next to Text Channels.\n• Type a channel name (e.g. \"python\") under Channel Name.\n• Select the role that matches your channel's name.\n\nAs the server owner, you'll be able to see these channels regardless of your assigned roles, but normal members will not.\n\nNow that our roles are configured, let's write some bot logic. We'll start with a function to DM users with a welcome message. Return to your repl and enter the following code just below the line where you defined :\n\n\n\nThis simple function takes a object and sends it a private message. Note the use of when running the coroutine .\n\nWe need to run this function when one of two things happens: a new member joins the server, or an existing member types the command in a channel. The second one will allow us to test the bot without constantly leaving and rejoining the server, and let users change their minds about what programming languages they want to discuss.\n\nTo handle the first event, add this code below the definition of :\n\n\n\nThe callback supplies a object we can use to call .\n\nFor the second event, we'll need a bit more code. While we could use discord.py's bot commands framework to handle our command, we will also need to deal with general message content later on, and doing both in different functions doesn't work well. So instead, we'll put everything to do with message contents in a single event. If our bot were just responding to commands, using handlers would be preferable.\n\nAdd the following code below the definition of :\n\n\n\nFirst, we print a message to the repl console to note that we've seen a message. We then check if the message's author is the bot itself. If it is, we terminate the function, to avoid infinite loops. Following that, we check if the message's content starts with , and if so we invoke , passing in the message's author.\n\nStop and rerun your repl now. If you receive a CloudFlare error, type in your repl's shell and try again. Once your repl's running, return to your Discord server and type \"!roles\" into the general chat. You should receive a DM from your bot.\n\nOur bot can DM users, but it won't do anything when users reply to it. Before we can add that logic, we need to implement a small hack to allow our bot to take actions on our server based on the contents of direct messages.\n\nThe Discord bot framework is designed with the assumption that bots are generic and will be added to many different servers. Bots do not have a home server, and there's no easy way for them to trace a process flow that moves from a server to private messages like the one we're building here. Therefore, our bot won't automatically know which server to use for role assignment when that user replies to its DM.\n\nWe could work out which server to use through the user's property, but it is not always reliable due to caching. Note that Discord servers were previously known as \"guilds\" and this terminology persists in areas of the API.\n\nAs we don't plan to add this bot to more than one server at a time, we'll solve the problem by hardcoding the server ID in our bot logic. But first, we need to retrieve our server's ID. The easiest way to do this is to add another command to our bot's vocabulary. Expand the statement at the bottom of to include the following :\n\n\n\nRerun your repl and return to your Discord server. Type \"!serverid\" into the chat, and you should get a reply from your bot containing a long string of digits. Copy that string to your clipboard.\n\nGo to the top of . Underneath , add the following line:\n\n\n\nPaste the contents of your clipboard after the equals sign. Now we can retrieve our server's ID from this variable.\n\nOnce that's done, return to the definition of . We're going to add another statement to deal with the contents of user replies in DMs. Edit the function body so that it matches the below:\n\n\n\nThis new statement will check whether the message that triggered the event was in a DM channel, and if so, will run and then exit. Now we need to define . Add the following code above the definition of :\n\n\n\nWe can find the languages mentioned in the user replies using regular expressions: will return a list of strings that match our expression. This way, whether the user replies with \"Please add me to the Python and Go groups\" or just \"python go\", we'll be able to assign them the right role.\n\nWe convert the list into a set in order to remove duplicates.\n\nThe next thing we need to do is deal with emoji responses. Add the following code to the bottom of the function:\n\n\n\nIn the first line, we do the same regex matching we did with the language names, but using emoji Unicode values instead of standard text. You can find a list of emojis with their codes on Unicode.org. Note that the in this list's code should be replaced with in your Python code: for example, becomes .\n\nOnce we've got our set of emoji matches in , we loop through it and use a dictionary to add the correct name to our set. This dictionary has strings as values and lambda functions as keys. Finally, will select the lambda function for the provided key and execute it, adding a value to . This is similar to the switch-case syntax you may have seen in other programming languages.\n\nWe now have a full list of languages our users may wish to discuss. Add the following code below the loop:\n\n\n\nThis code first checks that the set contains values. If so, we use to retrieve a object corresponding to our server's ID (remember, guild means server).\n\nWe then use a list comprehension and discord.py's function to construct a list of all the roles corresponding to languages in our list. Note that we've used the to ensure all of our strings are in lowercase.\n\nFinally, we retrieve the object corresponding to the user who sent us the message and our server.\n\nWe now have everything we need to assign roles. Add the following code to the bottom of the statement, within the body of the statement:\n\n\n\nThe object's method takes an arbitrary number of objects as positional arguments. We unpack our set into separate arguments using the operator, and provide a string for the named argument .\n\nOur operation is wrapped in a try-except-else block. If adding roles fails, we'll print the resulting error to our repl's console and send a generic error message to the user. If it succeeds, we'll send a message to the user informing them of their new roles, making extensive use of string interpolation.\n\nFinally, we need to deal with the case where no languages were found in the user's message. Add an block onto the bottom of the block as below:\n\n\n\nRerun your repl and return to your Discord server. Open the DM channel with your bot and try sending it one or more language names or emojis. You should receive the expected roles. You can check this by clicking on your name in the right-hand panel on your Discord server – your roles will be listed in the box that appears.\n\nOur code currently does not allow users to remove roles from themselves. While we could do this manually as the server owner, we've built this bot to avoid having to do that sort of thing, so let's expand our code to allow for role removal.\n\nTo keep things simple, we'll remove any roles mentioned by the user which they already have. So if a user with the \"python\" role writes \"c++ python\", we'll add the \"c++\" role and remove the \"python\" role.\n\nLet's make some changes. Find the block in your function and change the code above to match the below:\n\n\n\nWe replace the list of roles with a set of new roles. We also create a set of roles the user current holds. Given these two sets, we can figure out which roles to add and which to remove using set operations. Add the following code below the definition of :\n\n\n\nThe roles to add will be roles that are in but not in , i.e. the difference of the sets. The roles to remove will be roles that are in both sets, i.e. their intersection.\n\nNow we need to replace the try-except-else block with the code below:\n\n\n\nThis code follows the same general logic as our original block, but can remove roles as well as add them.\n\nFinally, we need to update the bot's original DM to reflect this new functionality. Find the function and amend it as follows:\n\n\n\nRerun your repl and test it out. You should be able to add and remove roles from yourself. Try inviting some of your friends to your Discord server, and have them use the bot as well. They should receive DMs as soon as they join.\n\nWe've created a simple Discord server welcome bot. There's a lot of scope for additional functionality. Here are some ideas for expansion:\n• Include more complex logic for role assignment. For example, you could have some roles that require users to have been members of the server for a certain amount of time.\n• Have your bot automatically assign additional user roles based on behavior. For example, you could give a role to users who react to messages with the most emojis.\n• Add additional commands. For example, you might want to have a command that searches Stack Overflow, allowing members to ask programming questions from the chat.\n\nDiscord bot code can be hosted on Replit permanently, but you'll need to use an Always-on repl to keep it running 24/7.\n\n(https://docs.replit.com/hosting/enabling-always-on) repl to keep it running 24/7.\n\nYou can find the example repl at https://replit.com/@ritza/DiscordWelcomeBot"
    },
    {
        "link": "https://stackoverflow.com/questions/48612603/permission-system-for-discord-py-bot",
        "document": "I am in the process of making a discord bot using discord.py and asyncio. The bot has commands like and which obviously should not be available to normal users.\n\nI want to make a simple system which will detect what permissions the user's role has using to get the user who sent the command.\n\nI do not want the bot to detect a specific role name as these vary across servers. I also prefer not to have multiple files for the bot to keep it simple.\n\nI have seen the discord.py documentation and various other sources but none contain examples of how to implement the various methods they talk about.\n\nAs an example, here is a single command from my bot:\n\nWhere the statement is my attempt of doing this on my own. The is commented out as it does not work and replaced with for testing purposes.\n\nThank you for any help and suggestions in advance."
    },
    {
        "link": "https://app.studyraid.com/en/read/7183/176816/implementing-user-authentication-and-authorization",
        "document": "Implementing user authentication and authorization is a crucial aspect of Discord bot development, especially when dealing with sensitive commands or features. This chapter will guide you through the process of setting up a robust system to ensure that only authorized users can access certain functionalities of your bot.\n\nBefore diving into the implementation, it's essential to understand the difference between authentication and authorization:\n• Authentication: The process of verifying the identity of a user.\n• Authorization: The process of determining what actions or resources a user is allowed to access.\n\nIn the context of Discord bots, authentication is typically handled by Discord itself, as users are already logged in to their accounts. Our focus will be on implementing authorization mechanisms to control access to specific bot commands or features.\n\nOne of the most common and effective ways to implement authorization in Discord bots is through role-based access control (RBAC). This approach involves assigning permissions to specific roles within a Discord server and then checking a user's roles before allowing them to execute certain commands.\n\nTo implement RBAC, we'll create a dictionary that maps command names to the required roles:\n\nIn this example, only users with the \"Moderator\" or \"Admin\" role can use the \"kick\" command, while the \"ban\" command is restricted to users with the \"Admin\" role.\n\nNext, we'll create a function to check if a user has the required role to execute a command:\n\nThis function takes a object (representing the user) and the name as arguments. It checks if the user has any of the required roles for the specified command.\n\nTo make it easier to apply permission checks to our commands, we'll create a custom decorator:\n\nThis decorator can be applied to command functions to automatically check permissions before execution.\n\nNow we can use our custom decorator to protect commands:\n\nWith these decorators in place, the bot will automatically check if the user has the required role before executing the command.\n\nIn some cases, you might want to grant permissions to specific users rather than relying solely on roles. This can be useful for giving certain individuals elevated access without creating new roles.\n\nNow, we'll modify our function to include user-specific checks:\n\nThis updated function first checks if the user has specific permissions for the command. If not, it falls back to the role-based check.\n\nTo prevent abuse and rate-limiting issues, it's a good practice to implement cooldowns on certain commands. Discord.py provides built-in decorators for this purpose.\n\nHere's an example of how to apply a cooldown to a command:\n\nThis decorator limits the user to using the command once every 60 seconds.\n\nTo provide feedback when a user tries to use a command too frequently, we can create an error handler:\n\nFor additional control, you can implement a whitelist or blacklist system to restrict bot usage to specific servers or channels.\n\nCreate a function to check if the command should be allowed based on the whitelist and blacklist:\n\nYou can apply this check to individual commands or globally:\n\nTo maintain security and track potential issues, it's crucial to log authentication and authorization events.\n\nThis will log every authorization attempt, including the user's name, ID, the command they tried to use, and whether access was granted or denied.\n\nFor highly sensitive commands, you might want to implement a two-factor authentication (2FA) system. While this is more complex and typically requires external services, here's a basic example using a time-based one-time password (TOTP) system.\n\nFirst, install the necessary library:\n\nThen, set up the TOTP system:\n\nNow you can use this 2FA verification for sensitive commands:\n\nImplementing user authentication and authorization in your Discord bot is crucial for maintaining security and controlling access to sensitive features. By using role-based access control, user-specific permissions, cooldowns, and additional security measures like whitelists and two-factor authentication, you can create a robust and secure bot that protects both your users and your server.\n\nRemember to regularly review and update your security measures, keep your bot token and sensitive information secure, and stay informed about best practices in Discord bot security. With these implementations in place, you'll have a solid foundation for managing user access and protecting your bot's functionality."
    },
    {
        "link": "https://discordpy.readthedocs.io/en/stable/api.html",
        "document": "The following section outlines the API of discord.py.\n\nThis section outlines the different types of events listened by . There are two ways to register an event, the first way is through the use of . The second way is through subclassing and overriding the specific events. For example: If an event handler raises an exception, will be called to handle it, which defaults to logging the traceback and ignoring the exception. All the events must be a coroutine. If they aren’t, then you might get unexpected errors. In order to turn a function into a coroutine they must be functions. Called when a or has successfully completed without error.\n• None interaction ( ) – The interaction of the command. Called when a is created. You must have to receive this. This requires to be enabled. rule ( ) – The rule that was created. Called when a is updated. You must have to receive this. This requires to be enabled. rule ( ) – The rule that was updated. Called when a is deleted. You must have to receive this. This requires to be enabled. rule ( ) – The rule that was deleted. Called when a is created/performed. You must have to receive this. This requires to be enabled. execution ( ) – The rule execution that was performed. Called whenever a guild channel is deleted or created. Note that you can get the guild from . This requires to be enabled. channel ( ) – The guild channel that got created or deleted. Called whenever a guild channel is updated. e.g. changed name, topic, permissions. This requires to be enabled.\n• None before ( ) – The updated guild channel’s old info.\n• None after ( ) – The updated guild channel’s new info. Called whenever a message is pinned or unpinned from a guild channel. This requires to be enabled.\n• None channel (Union[ , ]) – The guild channel that had its pins updated.\n• None last_pin (Optional[ ]) – The latest message that was pinned as an aware datetime in UTC. Could be . Called whenever a private group DM is updated. e.g. changed name or topic. This requires to be enabled.\n• None before ( ) – The updated group channel’s old info.\n• None after ( ) – The updated group channel’s new info. Called whenever a message is pinned or unpinned from a private channel.\n• None channel ( ) – The private channel that had its pins updated.\n• None last_pin (Optional[ ]) – The latest message that was pinned as an aware datetime in UTC. Could be . The parameter can be a instance. Which could either be , , or . If the is a then the parameter is a , otherwise it is a . If the channel or user could not be found in the internal cache this event will not be called, you may use instead. This requires to be enabled.\n• None channel ( ) – The location where the typing originated from.\n• None when ( ) – When the typing started as an aware datetime in UTC. Called when someone begins typing a message. Unlike this is called regardless of the channel and user being in the internal cache. This requires to be enabled. Called when the client has successfully connected to Discord. This is not the same as the client being fully prepared, see for that. The warnings on also apply. Called when the client has disconnected from Discord, or a connection attempt to Discord has failed. This could happen either through the internet being disconnected, explicit calls to close, or Discord terminating the connection one way or the other. This function can be called many times without a corresponding call. Similar to except used by to denote when a particular shard ID has connected to Discord. shard_id ( ) – The shard ID that has connected. Similar to except used by to denote when a particular shard ID has disconnected from Discord. shard_id ( ) – The shard ID that has disconnected. Usually when an event raises an uncaught exception, a traceback is logged to stderr and the exception is ignored. If you want to change this behaviour and handle the exception for whatever reason yourself, this event can be overridden. Which, when done, will suppress the default action of printing the traceback. The information of the exception raised and the exception itself can be retrieved with a standard call to . will only be dispatched to . It will not be received by , or, if used, Bots listeners such as or . Changed in version 2.0: The traceback is now logged rather than printed.\n• None event ( ) – The name of the event that raised the exception.\n• None args – The positional arguments for the event that raised the exception.\n• None kwargs – The keyword arguments for the event that raised the exception. Called whenever a websocket event is received from the WebSocket. This is mainly useful for logging how many events you are receiving from the Discord gateway. event_type ( ) – The event type from Discord that is received, e.g. . Called whenever a message is completely received from the WebSocket, before it’s processed and parsed. This event is always dispatched when a complete message is received and the passed data is not parsed in any way. This is only really useful for grabbing the WebSocket stream and debugging purposes. This requires setting the setting in the . This is only for the messages received from the client WebSocket. The voice WebSocket will not trigger this event. msg ( ) – The message passed in from the WebSocket library. Called whenever a send operation is done on the WebSocket before the message is sent. The passed parameter is the message that is being sent to the WebSocket. This is only really useful for grabbing the WebSocket stream and debugging purposes. This requires setting the setting in the . This is only for the messages sent from the client WebSocket. The voice WebSocket will not trigger this event. payload (Union[ , ]) – The message that is about to be passed on to the WebSocket library. It can be to denote a binary message or to denote a regular text message. entitlement ( ) – The entitlement that was created. Called when a user updates their subscription to a SKU. This is usually called when the user renews or cancels their subscription. entitlement ( ) – The entitlement that was updated. Called when a users subscription to a SKU is cancelled. This is typically only called when: This event won’t be called if the user cancels their subscription manually, instead will be called with set to the end of the current billing period. entitlement ( ) – The entitlement that was deleted. Called when the client is done preparing the data received from Discord. Usually after login is successful and the and co. are filled up. This function is not guaranteed to be the first event called. Likewise, this function is not guaranteed to only be called once. This library implements reconnection logic and thus will end up calling this event whenever a RESUME request fails. Called when the client has resumed a session. Similar to except used by to denote when a particular shard ID has become ready. shard_id ( ) – The shard ID that is ready. Similar to except used by to denote when a particular shard ID has resumed a session. shard_id ( ) – The shard ID that has resumed. Called when a guild becomes available or unavailable. The guild must have existed in the cache. This requires to be enabled. guild – The that has changed availability. Called when a is either created by the or when the joins a guild. This requires to be enabled. guild ( ) – The guild that was joined. Called when a is removed from the . This happens through, but not limited to, these circumstances:\n• None The client or the guild owner deleted the guild. In order for this event to be invoked then the must have been part of the guild to begin with. (i.e. it is part of ) This requires to be enabled. guild ( ) – The guild that got removed. Called when a updates, for example: This requires to be enabled.\n• None before ( ) – The guild prior to being updated.\n• None after ( ) – The guild after being updated. This requires to be enabled.\n• None guild ( ) – The guild who got their emojis updated.\n• None before (Sequence[ ]) – A list of emojis before the update.\n• None after (Sequence[ ]) – A list of emojis after the update. This requires to be enabled.\n• None guild ( ) – The guild who got their stickers updated.\n• None before (Sequence[ ]) – A list of stickers before the update.\n• None after (Sequence[ ]) – A list of stickers after the update. Called when a gets a new audit log entry. You must have to receive this. This requires to be enabled. Audit log entries received through the gateway are subject to data retrieval from cache rather than REST. This means that some data might not be present when you expect it to be. For example, the attribute will usually be a and the attribute will depend on user and member cache. To get the user ID of entry, can be used instead. entry ( ) – The audit log entry that was created. Called when an is created. You must have to receive this. There is a rare possibility that the and attributes will be of rather than the respective models. This requires to be enabled. invite ( ) – The invite that was created. Called when an is deleted. You must have to receive this. There is a rare possibility that the and attributes will be of rather than the respective models. Outside of those two attributes, the only other attribute guaranteed to be filled by the Discord gateway for this event is . This requires to be enabled. invite ( ) – The invite that was deleted. Called when an integration is created. This requires to be enabled. integration ( ) – The integration that was created. Called when an integration is updated. This requires to be enabled. integration ( ) – The integration that was updated. Called whenever an integration is created, modified, or removed from a guild. This requires to be enabled. guild ( ) – The guild that had its integrations updated. Called whenever a webhook is created, modified, or removed from a guild channel. This requires to be enabled. channel ( ) – The channel that had its webhooks updated. Called when an integration is deleted. This requires to be enabled. This currently happens due to slash command invocations or components being used. This is a low level function that is not generally meant to be used. If you are working with components, consider using the callbacks associated with the instead as it provides a nicer user experience. This requires to be enabled. If the guild or member could not be found in the internal cache this event will not be called, you may use instead. This requires to be enabled. Unlike this is called regardless of the guild or member being in the internal cache. This requires to be enabled. This is called when one or more of the following things change: Due to a Discord limitation, this event is not dispatched when a member’s timeout expires. This requires to be enabled.\n• None before ( ) – The updated member’s old info. This is called when one or more of the following things change: This requires to be enabled.\n• None before ( ) – The updated user’s old info. Called when a user gets banned from a . This requires to be enabled.\n• None guild ( ) – The guild the user got banned from.\n• None user (Union[ , ]) – The user that got banned. Can be either or depending if the user was in the guild or not at the time of removal. Called when a gets unbanned from a . This requires to be enabled.\n• None guild ( ) – The guild the user got unbanned from.\n• None user ( ) – The user that got unbanned. This is called when one or more of the following things change: This requires and to be enabled.\n• None before ( ) – The updated member’s old info. This requires to be enabled. Unlike , when enabled, this is called regardless of the state of internal guild and member caches, and does not provide a comparison between the previous and updated states of the . By default, this event is only dispatched when is enabled and is disabled. You can manually override this behaviour by setting the enable_raw_presences flag in the , however is always required for this event to work. Called when a is created and sent. This requires to be enabled. Your bot’s own messages and private messages are sent through this event. This can lead cases of ‘recursion’ depending on how your bot was programmed. If you want the bot to not reply to itself, consider checking the user IDs. Note that does not have this problem. Called when a receives an update event. If the message is not found in the internal message cache, then these events will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds. If this occurs increase the parameter or use the event instead. The following non-exhaustive cases trigger this event:\n• None A message has been pinned or unpinned.\n• None The message content has been changed.\n• None The message has received an embed.\n• None For performance reasons, the embed server does not do this in a “consistent” manner.\n• None The message’s embeds were suppressed or unsuppressed.\n• None A call message has received an update to its participants or ending time. This requires to be enabled.\n• None before ( ) – The previous version of the message.\n• None after ( ) – The current version of the message. Called when a message is deleted. If the message is not found in the internal message cache, then this event will not be called. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds. If this occurs increase the parameter or use the event instead. This requires to be enabled. Called when messages are bulk deleted. If none of the messages deleted are found in the internal message cache, then this event will not be called. If individual messages were not found in the internal message cache, this event will still be called, but the messages not found will not be included in the messages list. Messages might not be in cache if the message is too old or the client is participating in high traffic guilds. If this occurs increase the parameter or use the event instead. This requires to be enabled. messages (List[ ]) – The messages that have been deleted. Called when a message is edited. Unlike , this is called regardless of the state of the internal message cache. If the message is found in the message cache, it can be accessed via . The cached message represents the message before it has been edited. For example, if the content of a message is modified and triggers the coroutine, the will return a object that represents the message before the content was modified. Due to the inherently raw nature of this event, the data parameter coincides with the raw data given by the gateway. Since the data payload can be partial, care must be taken when accessing stuff in the dictionary. One example of a common case of partial data is when the key is inaccessible. This denotes an “embed” only edit, which is an edit in which only the embeds are updated by the Discord embed server. This requires to be enabled. Called when a message is deleted. Unlike , this is called regardless of the message being in the internal message cache or not. If the message is found in the message cache, it can be accessed via This requires to be enabled. Called when a bulk delete is triggered. Unlike , this is called regardless of the messages being in the internal message cache or not. If the messages are found in the message cache, they can be accessed via This requires to be enabled. Called when a gains or loses a vote. If the or ’s poll parent message are not cached then this event will not be called. This requires and to be enabled. If the poll allows multiple answers and the user removes or adds multiple votes, this event will be called as many times as votes that are added or removed.\n• None user (Union[ , ]) – The user that performed the action.\n• None answer ( ) – The answer the user voted or removed their vote from. Called when a gains or loses a vote. Unlike and this is called regardless of the state of the internal user and message cache. This requires and to be enabled. If the poll allows multiple answers and the user removes or adds multiple votes, this event will be called as many times as votes that are added or removed. Called when a message has a reaction added to it. Similar to , if the message is not found in the internal message cache, then this event will not be called. Consider using instead. To get the being reacted, access it via . This requires to be enabled. This doesn’t require within a guild context, but due to Discord not providing updated user information in a direct message it’s required for direct messages to receive this event. Consider using if you need this and do not otherwise want to enable the members intent. This event does not have a way of differentiating whether a reaction is a burst reaction (also known as “super reaction”) or not. If you need this, consider using instead.\n• None reaction ( ) – The current state of the reaction.\n• None user (Union[ , ]) – The user who added the reaction. Called when a message has a reaction removed from it. Similar to on_message_edit, if the message is not found in the internal message cache, then this event will not be called. To get the message being reacted, access it via . This requires both and to be enabled. Consider using if you need this and do not want to enable the members intent. This event does not have a way of differentiating whether a reaction is a burst reaction (also known as “super reaction”) or not. If you need this, consider using instead.\n• None reaction ( ) – The current state of the reaction.\n• None user (Union[ , ]) – The user whose reaction was removed. Called when a message has all its reactions removed from it. Similar to , if the message is not found in the internal message cache, then this event will not be called. Consider using instead. This requires to be enabled.\n• None message ( ) – The message that had its reactions cleared.\n• None reactions (List[ ]) – The reactions that were removed. Called when a message has a specific reaction removed from it. Similar to , if the message is not found in the internal message cache, then this event will not be called. Consider using instead. This requires to be enabled. reaction ( ) – The reaction that got cleared. Called when a message has a reaction added. Unlike , this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a message has a reaction removed. Unlike , this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a message has all its reactions removed. Unlike , this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a message has a specific reaction removed from it. Unlike this is called regardless of the state of the internal message cache. This requires to be enabled. Called when a creates or deletes a new . To get the guild it belongs to, use . This requires to be enabled. role ( ) – The role that was created or deleted. This requires to be enabled.\n• None before ( ) – The updated role’s old info. Called when a is created or deleted. This requires to be enabled. event ( ) – The scheduled event that was created or deleted. This requires to be enabled. The following, but not limited to, examples illustrate when this event is called:\n• None before ( ) – The scheduled event before the update.\n• None after ( ) – The scheduled event after the update. Called when a user is added or removed from a . This requires to be enabled.\n• None event ( ) – The scheduled event that the user was added or removed from.\n• None user ( ) – The user that was added or removed. Called when a is created or deleted. sound ( ) – The soundboard sound that was created or deleted. The following examples illustrate when this event is called: sound ( ) – The soundboard sound that was updated. Called when a is created or deleted for a . stage_instance ( ) – The stage instance that was created or deleted. The following, but not limited to, examples illustrate when this event is called:\n• None before ( ) – The stage instance before the update.\n• None after ( ) – The stage instance after the update. subscription ( ) – The subscription that was created. subscription ( ) – The subscription that was updated. subscription ( ) – The subscription that was deleted. Note that you can get the guild from . This requires to be enabled. thread ( ) – The thread that was created. Note that you can get the guild from . This requires to be enabled. thread ( ) – The thread that got joined. Called whenever a thread is updated. If the thread could not be found in the internal cache this event will not be called. Threads will not be in the cache if they are archived. If you need this information use instead. This requires to be enabled.\n• None before ( ) – The updated thread’s old info.\n• None after ( ) – The updated thread’s new info. Called whenever a thread is removed. This is different from a thread being deleted. Note that you can get the guild from . This requires to be enabled. Due to technical limitations, this event might not be called as soon as one expects. Since the library tracks thread membership locally, the API only sends updated thread membership status upon being synced by joining a thread. thread ( ) – The thread that got removed. Called whenever a thread is deleted. If the thread could not be found in the internal cache this event will not be called. Threads will not be in the cache if they are archived. If you need this information use instead. Note that you can get the guild from . This requires to be enabled. thread ( ) – The thread that got deleted. Called whenever a thread is updated. Unlike this is called regardless of the thread being in the internal thread cache or not. This requires to be enabled. Called whenever a thread is deleted. Unlike this is called regardless of the thread being in the internal thread cache or not. This requires to be enabled. You can get the thread a member belongs in by accessing . This requires to be enabled. member ( ) – The member who joined or left. Called when a leaves a . Unlike this is called regardless of the member being in the internal thread’s members cache or not. This requires to be enabled. Called when a changes their . The following, but not limited to, examples illustrate when this event is called:\n• None A member is muted or deafened by their own accord.\n• None A member is muted or deafened by a guild administrator. This requires to be enabled.\n• None before ( ) – The voice state prior to the changes.\n• None after ( ) – The voice state after the changes. Called when a sends a in a voice channel the bot is in. This requires to be enabled. effect ( ) – The effect that is sent.\n\nThe API provides some enumerations for certain types of strings to avoid the API from being stringly typed in case the strings change in the future. All enumerations are subclasses of an internal class which mimics the behaviour of . Specifies the type of . This is used to denote if a message is to be interpreted as a system message or a regular message. Checks if two messages are equal. Checks if two messages are not equal. The default message type. This is the same as regular messages. The system message when a user is added to a group private message or a thread. The system message when a user is removed from a group private message or a thread. The system message denoting that a channel’s name has been changed. The system message denoting that a channel’s icon has been changed. The system message denoting that a pinned message has been added to a channel. The system message denoting that a new member has joined a Guild. The system message denoting that a member has “nitro boosted” a guild. The system message denoting that a member has “nitro boosted” a guild and it achieved level 1. The system message denoting that a member has “nitro boosted” a guild and it achieved level 2. The system message denoting that a member has “nitro boosted” a guild and it achieved level 3. The system message denoting that an announcement channel has been followed. The system message denoting that a member is streaming in the guild. The system message denoting that the guild is no longer eligible for Server Discovery. The system message denoting that the guild has become eligible again for Server Discovery. The system message denoting that the guild has failed to meet the Server Discovery requirements for one week. The system message denoting that the guild has failed to meet the Server Discovery requirements for 3 weeks in a row. The system message denoting that a thread has been created. This is only sent if the thread has been created from an older message. The period of time required for a message to be considered old cannot be relied upon and is up to Discord. The system message denoting that the author is replying to a message. The system message denoting that a slash command was executed. The system message sent as a reminder to invite people to the guild. The system message denoting the message in the thread that is the one that started the thread’s conversation topic. The system message denoting that a context menu command was executed. The system message sent when an AutoMod rule is triggered. This is only sent if the rule is configured to sent an alert when triggered. The system message sent when a user purchases or renews a role subscription. The system message sent when a user is given an advertisement to purchase a premium tier for an application during an interaction. The system message sent when the stage starts. The system message sent when the stage ends. The system message sent when the stage speaker changes. The system message sent when a user is requesting to speak by raising their hands. The system message sent when the stage topic changes. The system message sent when an application’s premium subscription is purchased for the guild. The system message sent when security actions is enabled. The system message sent when security actions is disabled. The system message sent when a raid is reported. The system message sent when a false alarm is reported. The system message sent when a purchase is made in the guild. The system message sent when a poll has closed. The user has SMS recovery for Multi Factor Authentication enabled. The user has dismissed the Discord Nitro promotion. The user is an Early Supporter. The user has an unread system message. The user is an Early Verified Bot Developer. The user is a bot that only uses HTTP interactions and is shown in the online member list. The user is flagged as a spammer by Discord. The user is an active developer. Specifies the type of . This is used to check how to interpret the activity itself. An unknown activity type. This should generally not happen. Specifies a 's verification level, which is the criteria in which a member must meet before being able to send messages to the guild. Checks if two verification levels are equal. Checks if two verification levels are not equal. Checks if a verification level is higher than another. Checks if a verification level is lower than another. Checks if a verification level is higher or equal to another. Checks if a verification level is lower or equal to another. Member must have a verified email on their Discord account. Member must have a verified email and be registered on Discord for more than five minutes. Member must have a verified email, be registered on Discord for more than five minutes, and be a member of the guild itself for more than ten minutes. Member must have a verified phone on their Discord account. Specifies whether a has notifications on for all messages or mentions only by default. Checks if two notification levels are equal. Checks if two notification levels are not equal. Checks if a notification level is higher than another. Checks if a notification level is lower than another. Checks if a notification level is higher or equal to another. Checks if a notification level is lower or equal to another. Members receive notifications for every message regardless of them being mentioned. Members receive notifications for messages they are mentioned in. Specifies a 's explicit content filter, which is the machine learning algorithms that Discord uses to detect if an image contains pornography or otherwise explicit content. Checks if two content filter levels are equal. Checks if two content filter levels are not equal. Checks if a content filter level is higher than another. Checks if a content filter level is lower than another. Checks if a content filter level is higher or equal to another. Checks if a content filter level is lower or equal to another. The guild does not have the content filter enabled. The guild has the content filter enabled for members without a role. The guild has the content filter enabled for every member. The member is “Do Not Disturb”. The member is “invisible”. In reality, this is only used when sending a presence a la . When you receive a user’s presence this will be instead. Represents the type of action being done for a , which is retrievable via . The guild has updated. Things that trigger this include: When this is the action, the type of is the . When this is the action, the type of is either a or with an ID. A more filled out object in the case can be found by using . A channel was updated. Things that trigger this include:\n• None The channel name or topic was changed When this is the action, the type of is the or with an ID. A more filled out object in the case can be found by using or . When this is the action, the type of is an with an ID. A more filled out object can be found by using the object. When this is the action, the type of is the or with an ID. When this is the action, the type of is either a or . If the object is not found then it is a with an ID being filled, a name, and a attribute set to either or to help dictate what type of ID it is. A channel permission overwrite was changed, this is typically when the permission values change. See for more information on how the and fields are set. See for more information on how the and fields are set. When this is the action, the type of is the or who got kicked. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An optional string that denotes the type of integration that did the action. When this is the action, is empty. When this is the action, the type of is set to . When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : An integer specifying how far the prune was.\n• None : An integer specifying how many members were removed. When this is the action, is empty. When this is the action, the type of is the or who got banned. When this is the action, is empty. When this is the action, the type of is the or who got unbanned. When this is the action, is empty. A member has updated. This triggers in the following situations:\n• None They were server muted or deafened (or it was undo’d) When this is the action, the type of is the , , or who got updated. A member’s role has been updated. This triggers when a member either gains a role or loses a role. When this is the action, the type of is the , , or who got the role. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An optional string that denotes the type of integration that did the action. A member’s voice channel has been updated. This triggers when a member is moved to a different voice channel. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : An or with the channel ID where the members were moved.\n• None : An integer specifying how many members were moved. A member’s voice state has changed. This triggers when a member is force disconnected from voice. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An integer specifying how many members were disconnected. A bot was added to the guild. When this is the action, the type of is the , , or which was added to the guild. When this is the action, the type of is the or a with the ID. A role was updated. This triggers in the following situations:\n• None The role icon (or unicode emoji) has changed When this is the action, the type of is the or a with the ID. When this is the action, the type of is the or a with the ID. When this is the action, the type of is the that was created. When this is the action, the type of is the that was updated. When this is the action, the type of is the that was deleted. When this is the action, the type of is the with the webhook ID. A webhook was updated. This trigger in the following situations: When this is the action, the type of is the with the webhook ID. When this is the action, the type of is the with the webhook ID. When this is the action, the type of is the or with the emoji ID. An emoji was updated. This triggers when the name has changed. When this is the action, the type of is the or with the emoji ID. When this is the action, the type of is the with the emoji ID. A message was deleted by a moderator. Note that this only triggers if the message was deleted by someone other than the author. When this is the action, the type of is the , , or who had their message deleted. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : An integer specifying how many messages were deleted.\n• None : A or with the channel ID where the message got deleted. When this is the action, the type of is the or with the ID of the channel that was purged. When this is the action, the type of is set to an unspecified proxy object with one attribute:\n• None : An integer specifying how many messages were deleted. When this is the action, the type of is the , , or who had their message pinned. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : A or with the channel ID where the message was pinned.\n• None : the ID of the message which was pinned. When this is the action, the type of is the , , or who had their message unpinned. When this is the action, the type of is set to an unspecified proxy object with two attributes:\n• None : A or with the channel ID where the message was unpinned.\n• None : the ID of the message which was unpinned. When this is the action, the type of is a or with the integration ID of the integration which was created. When this is the action, the type of is a or with the integration ID of the integration which was updated. When this is the action, the type of is a or with the integration ID of the integration which was deleted. When this is the action, the type of is the or with the ID of the stage instance which was created. When this is the action, the type of is the or with the ID of the stage instance which was updated. When this is the action, the type of is the or with the ID of the sticker which was created. When this is the action, the type of is the or with the ID of the sticker which was updated. When this is the action, the type of is the or with the ID of the sticker which was updated. When this is the action, the type of is the or with the ID of the event which was created. When this is the action, the type of is the or with the ID of the event which was updated. When this is the action, the type of is the or with the ID of the event which was deleted. When this is the action, the type of is the or with the ID of the thread which was created. When this is the action, the type of is the or with the ID of the thread which was updated. When this is the action, the type of is the or with the ID of the thread which was deleted. An application command or integrations application command permissions were updated. When this is the action, the type of is a for an integrations general permissions, for a specific commands permissions, or with the ID of the command or integration which was updated. When this is the action, the type of is set to an or with the ID of application that command or integration belongs to. When this is the action, the type of is a or with the ID of the automod rule that was created. When this is the action, the type of is a or with the ID of the automod rule that was created. When this is the action, the type of is a or with the ID of the automod rule that was created. An automod rule blocked a message from being sent. When this is the action, the type of is a with the ID of the person who triggered the automod rule. When this is the action, the type of is set to an unspecified proxy object with 3 attributes:\n• None : The name of the automod rule that was triggered.\n• None : A representation of the rule type that was triggered.\n• None : The channel in which the automod rule was triggered. When this is the action, is empty. When this is the action, the type of is a with the ID of the person who triggered the automod rule. When this is the action, the type of is set to an unspecified proxy object with 3 attributes:\n• None : The name of the automod rule that was triggered.\n• None : A representation of the rule type that was triggered.\n• None : The channel in which the automod rule was triggered. When this is the action, is empty. When this is the action, the type of is a with the ID of the person who triggered the automod rule. When this is the action, the type of is set to an unspecified proxy object with 3 attributes:\n• None : The name of the automod rule that was triggered.\n• None : A representation of the rule type that was triggered.\n• None : The channel in which the automod rule was triggered. When this is the action, is empty. A request to monetize the server was created. The terms and conditions for creator monetization were accepted. Represents the category that the belongs to. This can be retrieved via . The action is the creation of something. The action is the deletion of something. The action is the update of something. Represents the membership state of a team member retrieved through . Represents a member currently in the team. Represents the type of role of a team member retrieved through . The team member is an admin. This allows them to invite members to the team, access credentials, edit the application, and do most things the owner can do. However they cannot do destructive actions. The team member is a developer. This allows them to access information, like the client secret or public key. They can also configure interaction endpoints or reset the bot token. Developers cannot invite anyone to the team nor can they do destructive actions. The team member is a read-only member. This allows them to access information, but not edit anything. Represents the type of webhook that can be received. Represents a webhook that can post messages to channels with a token. Represents a webhook that is internally managed by Discord, used for following channels. Represents a webhook that is used for interactions or applications. Represents the behaviour the should perform when a user’s subscription has finished. There is an alias for this called . This will remove the from the user when their subscription is finished. This will kick the user when their subscription is finished. Represents the default avatar with the colour blurple. See also Represents the default avatar with the colour grey. See also Represents the default avatar with the colour green. See also Represents the default avatar with the colour orange. See also Represents the default avatar with the colour red. See also Represents the default avatar with the colour pink. See also Represents a standard sticker that all Nitro users can use. The invite doesn’t target anyone or anything. Represents the privacy level of a stage instance or scheduled event. The stage instance or scheduled event is only accessible within the guild. Checks if two NSFW levels are equal. Checks if two NSFW levels are not equal. Checks if a NSFW level is higher than another. Checks if a NSFW level is lower than another. Checks if a NSFW level is higher or equal to another. Checks if a NSFW level is lower or equal to another. The guild has not been categorised yet. The guild does not contain any NSFW content. The guild may contain NSFW content. Supported locales by Discord. Mainly used for application command localisation. Checks if two MFA levels are equal. Checks if two MFA levels are not equal. Checks if a MFA level is higher than another. Checks if a MFA level is lower than another. Checks if a MFA level is higher or equal to another. Checks if a MFA level is lower or equal to another. The guild has no MFA requirement. Represents the type of entity that a scheduled event is for. The scheduled event will occur in a stage instance. The scheduled event will occur in a voice channel. Represents the status of an event. The event has been cancelled. Represents the trigger type of an automod rule. The rule will trigger when a keyword is mentioned. The rule will trigger when a harmful link is posted. The rule will trigger when a spam message is posted. The rule will trigger when something triggers based on the set keyword preset types. The rule will trigger when combined number of role and user mentions is greater than the set limit. The rule will trigger when a user’s profile contains a keyword. Represents the event type of an automod rule. The rule will trigger when a message is sent. The rule will trigger when a member’s profile is updated. Represents the action type of an automod rule. The rule will block a message from being sent. The rule will send an alert message to a predefined channel. Similar to , except the user will be timed out indefinitely. This will request the user to edit it’s profile. Represents how a forum’s posts are layed out in the client. No default has been set, so it is up to the client to know how to lay it out. Represents how a forum’s posts are sorted in the client. Sort forum posts by creation time (from most recent to oldest). Represents the default value of a select menu. The underlying type of the ID is a user. The underlying type of the ID is a role. The underlying type of the ID is a channel or thread. The SKU is a system-generated group which is created for each . Represents the type of an entitlement. The entitlement was purchased by the user. The entitlement is for a nitro subscription. The entitlement was gifted by the developer. The entitlement was purchased by a developer in application test mode. The entitlement was granted, when the SKU was free. The entitlement was gifted by a another user. The entitlement was claimed for free by a nitro subscriber. The entitlement was purchased as an app subscription. Represents the type of an entitlement owner. Represents the type of an invite. A burst reaction, also known as a “super reaction”. Represents the status of an subscription. The subscription is active but will not renew. The subscription is inactive and not being charged. A standard reference used by message replies ( ), crossposted messaged created by a followed channel integration, and messages of type:"
    }
]