[
    {
        "link": "https://freecodecamp.org/news/python-set-operations-explained-with-examples",
        "document": "If you're a beginner to Python, chances are you've come across lists. But have you heard about sets in Python?\n\nIn this tutorial, we'll explore what sets are, how to create them, and the different operations you can use on them.\n\nWhat are sets in Python?\n\nIn Python, sets are exactly like lists except for the fact that their elements are immutable (that means you cannot change/mutate an element of a set once declared). However, you can add/remove elements from the set.\n\nIf that was confusing, let me try and summarize:\n\nAnother characteristic of a set is that it may include elements of different types. This means you can have a group of numbers, strings, and even tuples, all in the same set!\n\nThe most common way of creating a set in Python is by using the built-in function.\n\nYou can also create sets using the curly brace syntax:\n\nThe function takes in an iterable and yields a list of objects which will be inserted into the set. The syntax places the objects themselves into the set.\n\nAs you've probably realized, whether you use the function or the to create a set, each element needs to be an immutable object. So if you add a list (which is a mutable object) to a set, you'll run into an error:\n\nHow to Add or Remove Elements in a Set\n\nWe already know that sets are mutable. This means you can add/remove elements in a set.\n\nHere's an example of adding elements to a set using the function.\n\nBut notice how nothing changes when we try to add \"cello\" to the set again:\n\nThis is because sets in Python cannot contain duplicates. So, when we tried to add again to the set, Python recognized we were trying to add a duplicate element and didn't update the set. This is one caveat that differentiates sets from lists.\n\nHere's how you would remove elements from a set:\n\nThe function removes the element from a set. It returns a if is not part of the set:\n\nThere are a couple of other ways to remove an element(s) from a set:\n• the method removes from the set, but doesn't raise any error if is not present in the set.\n• the method removes and returns a random element from the set.\n• the method removes all elements from a set\n\nHere are some examples to illustrate:\n\nIf you remember your basic high school math, you'll probably recall mathematical set operations like union, intersection, difference and symmetric difference. Well, you can achieve the same thing with Python sets.\n\nThe union of two sets is the set of all the elements of both the sets without duplicates. You can use the method or the syntax to find the union of a Python set.\n\nThe intersection of two sets is the set of all the common elements of both the sets. You can use the method of the operator to find the intersection of a Python set.\n\nThe difference between two sets is the set of all the elements in first set that are not present in the second set. You would use the method or the operator to achieve this in Python.\n\nThe symmetric difference between two sets is the set of all the elements that are either in the first set or the second set but not in both.\n\nYou have the choice of using either the method or the operator to do this in Python.\n\nHow to Modify a Set by Operations\n\nEach of the operations that we discussed above can be used to modify an existing Python set. Similar to how you would use an augmented assignment syntax such as or to update a variable, you can do the same for sets:\n\nThese are not so common, but they're useful in seeing how sets relate to others.\n• the method or operator returns true if the is a subset of\n• the method or operator returns true if the is a superset of\n• the method return true if there are no common elements between sets and\n\nBecause sets are mutable, they are unhashable – which means you cannot use them as dictionary keys.\n\nPython allows you to work around this by using a instead. This has all the properties of a set, except that it is immutable (this means that you cannot add/remove elements from the frozenset). It is also hashable, so it can be used as keys to a dictionary.\n\nThe datatype has all the methods of a set (such as , , and ) but because it is immutable, it doesn't have methods to add/remove elements.\n\nAnd using s as dictionary keys is as simple as 1, 2, 3:\n\nThat's it! You've learned about what sets are, how to create and work with them, and different operations you can use on them.\n\nWith sets done, you should now be comfortable with most of Python built-in functions. All you need to do now is practice. Good luck!\n\nBe sure to follow me on Twitter for more updates. Have a nice one!"
    },
    {
        "link": "https://realpython.com/python-sets",
        "document": "Perhaps you recall learning about sets and set theory at some point in your mathematical education. Maybe you even remember Venn diagrams:\n\nIf this doesn’t ring a bell, don’t worry! This tutorial should still be easily accessible for you.\n\nIn mathematics, a rigorous definition of a set can be abstract and difficult to grasp. Practically though, a set can be thought of simply as a well-defined collection of distinct objects, typically called elements or members.\n\nGrouping objects into a set can be useful in programming as well, and Python provides a built-in set type to do so. Sets are distinguished from other object types by the unique operations that can be performed on them.\n\nHere’s what you’ll learn in this tutorial: You’ll see how to define set objects in Python and discover the operations that they support. As with the earlier tutorials on lists and dictionaries, when you are finished with this tutorial, you should have a good feel for when a set is an appropriate choice. You will also learn about frozen sets, which are similar to sets except for one important detail.\n\nPython’s built-in type has the following characteristics:\n• Set elements are unique. Duplicate elements are not allowed.\n• A set itself may be modified, but the elements contained in the set must be of an immutable type. Let’s see what all that means, and how you can work with sets in Python. A set can be created in two ways. First, you can define a set with the built-in function: In this case, the argument is an iterable—again, for the moment, think list or tuple—that generates the list of objects to be included in the set. This is analogous to the argument given to the list method: Strings are also iterable, so a string can be passed to as well. You have already seen that generates a list of the characters in the string . Similarly, generates a set of the characters in : You can see that the resulting sets are unordered: the original order, as specified in the definition, is not necessarily preserved. Additionally, duplicate values are only represented in the set once, as with the string in the first two examples and the letter in the third. Alternately, a set can be defined with curly braces ( ): When a set is defined this way, each becomes a distinct element of the set, even if it is an iterable. This behavior is similar to that of the list method. Thus, the sets shown above can also be defined like this:\n• The argument to is an iterable. It generates a list of elements to be placed into the set.\n• The objects in curly braces are placed into the set intact, even if they are iterable. Observe the difference between these two set definitions: A set can be empty. However, recall that Python interprets empty curly braces ( ) as an empty dictionary, so the only way to define an empty set is with the function: An empty set is falsy in a Boolean context: You might think the most intuitive sets would contain similar objects—for example, even numbers or surnames: Python does not require this, though. The elements in a set can be objects of different types: Don’t forget that set elements must be immutable. For example, a tuple may be included in a set: But lists and dictionaries are mutable, so they can’t be set elements:\n\nMany of the operations that can be used for Python’s other composite data types don’t make sense for sets. For example, sets can’t be indexed or sliced. However, Python provides a whole host of operations on set objects that generally mimic the operations that are defined for mathematical sets. Most, though not quite all, set operations in Python can be performed in two different ways: by operator or by method. Let’s take a look at how these operators and methods work, using set union as an example. Given two sets, and , the union of and is a set consisting of all elements in either set. The union of and is . Note: Notice that the element , which appears in both and , appears only once in the union. Sets never contain duplicate values. In Python, set union can be performed with the operator: Set union can also be obtained with the method. The method is invoked on one of the sets, and the other is passed as an argument: The way they are used in the examples above, the operator and method behave identically. But there is a subtle difference between them. When you use the operator, both operands must be sets. The method, on the other hand, will take any iterable as an argument, convert it to a set, and then perform the union. Observe the difference between these two statements: Both attempt to compute the union of and the tuple . This fails with the operator but succeeds with the method. Below is a list of the set operations available in Python. Some are performed by operator, some by method, and some by both. The principle outlined above generally applies: where a set is expected, methods will typically accept any iterable as an argument, but operators require actual sets as operands. Compute the union of two or more sets. and both return the set of all elements in either or : More than two sets may be specified with either the operator or the method: The resulting set contains all elements that are present in any of the specified sets. Compute the intersection of two or more sets. and return the set of elements common to both and : You can specify multiple sets with the intersection method and operator, just like you can with set union: The resulting set contains only elements that are present in all of the specified sets. Compute the difference between two or more sets. and return the set of all elements that are in but not in : Another way to think of this is that and return the set that results when any elements in are removed or subtracted from . Once again, you can specify more than two sets: When multiple sets are specified, the operation is performed from left to right. In the example above, is computed first, resulting in . Then is subtracted from that set, leaving : and return the set of all elements in either or , but not both: The operator also allows more than two sets: As with the difference operator, when multiple sets are specified, the operation is performed from left to right. Curiously, although the operator allows multiple sets, the method doesn’t: File , line , in : symmetric_difference() takes exactly one argument (2 given) Determines whether or not two sets have any elements in common. returns if and have no elements in common: If is , then is the empty set: Note: There is no operator that corresponds to the method. Determine whether one set is a subset of the other. In set theory, a set is considered a subset of another set if every element of is in . and return if is a subset of : A set is considered to be a subset of itself: It seems strange, perhaps. But it fits the definition—every element of is in . Determines whether one set is a proper subset of the other. A proper subset is the same as a subset, except that the sets can’t be identical. A set is considered a proper subset of another set if every element of is in , and and are not equal. returns if is a proper subset of : While a set is considered a subset of itself, it is not a proper subset of itself: Note: The operator is the only way to test whether a set is a proper subset. There is no corresponding method. Determine whether one set is a superset of the other. A superset is the reverse of a subset. A set is considered a superset of another set if contains every element of . and return if is a superset of : You have already seen that a set is considered a subset of itself. A set is also considered a superset of itself: Determines whether one set is a proper superset of the other. A proper superset is the same as a superset, except that the sets can’t be identical. A set is considered a proper superset of another set if contains every element of , and and are not equal. returns if is a proper superset of : A set is not a proper superset of itself: Note: The operator is the only way to test whether a set is a proper superset. There is no corresponding method.\n\nAlthough the elements contained in a set must be of immutable type, sets themselves can be modified. Like the operations above, there are a mix of operators and methods that can be used to change the contents of a set. Each of the union, intersection, difference, and symmetric difference operators listed above has an augmented assignment form that can be used to modify a set. For each, there is a corresponding method as well. and add to any elements in that does not already have: and update , retaining only elements found in both and : and update , retaining elements found in either or , but not both: Aside from the augmented operators above, Python supports several additional methods that modify sets. adds , which must be a single immutable object, to : removes from . Python raises an exception if is not in : also removes from . However, if is not in , this method quietly does nothing instead of raising an exception: removes and returns an arbitrarily chosen element from . If is empty, raises an exception:\n\nIn this tutorial, you learned how to define set objects in Python, and you became familiar with the functions, operators, and methods that can be used to work with sets. You should now be comfortable with the basic built-in data types that Python provides. Next, you will begin to explore how the code that operates on those objects is organized and structured in a Python program. Test your knowledge with our interactive “Python Sets” quiz. You’ll receive a score upon completion to help you track your learning progress: Test your understanding of sets in Python, a commonly used data structure."
    },
    {
        "link": "https://geeksforgeeks.org/sets-in-python",
        "document": "A Set in Python is used to store a collection of items with the following properties.\n• None No duplicate elements. If try to insert the same item again, it overwrites previous one.\n• None An unordered collection. When we access all items, they are accessed without any specific order and we cannot access items using indexes as we do in lists.\n• None that makes set efficient for search, insert and delete operations. It gives a major advantage over a for problems with these operations.\n• None Mutable, meaning we can add or remove elements after their creation, the individual elements within the set cannot be changed directly.\n\nNote : There is no specific order for set elements to be printed\n\nThe Python set() method is used for type casting.\n\nPython sets cannot have duplicate values. While you cannot modify the individual elements directly, you can still add or remove elements from the set.\n\nThe first code explains that the set cannot have a duplicate value. Every item in it is a unique value.\n\nThe second code generates an error because we cannot assign or change a value once the set is created. We can only add or delete items in the set.\n\nPython sets can store heterogeneous elements in it, i.e., a set can store a mixture of string, integer, boolean, etc datatypes.\n\nFrozen sets in Python are immutable objects that only support methods and operators that produce a result without affecting the frozen set or sets to which they are applied. It can be done with frozenset() method in Python.\n\nWhile elements of a set can be modified at any time, elements of the frozen set remain the same after creation.\n\nIf no parameters are passed, it returns an empty frozenset.\n\nThis is based on a data structure known as a hash table. If Multiple values are present at the same index position, then the value is appended to that index position, to form a Linked List.\n\nIn, Python Sets are implemented using a dictionary with dummy variables, where key beings the members set with greater optimizations to the time complexity.\n\nInsertion in the set is done through the set.add() function, where an appropriate record value is created to store in the hash table. Same as checking for an item, i.e., O(1) on average. However, in worst case it can become O(n).\n\nTwo sets can be merged using union() function or | operator. Both Hash Table values are accessed and traversed with merge operation perform on them to combine the elements, at the same time duplicates are removed. The Time Complexity of this is O(len(s1) + len(s2)) where s1 and s2 are two sets whose union needs to be done.\n\nThis can be done through intersection() or & operator. Common Elements are selected. They are similar to iteration over the Hash lists and combining the same values on both the Table. Time Complexity of this is O(min(len(s1), len(s2)) where s1 and s2 are two sets whose union needs to be done.\n\nTo find differences between sets. Similar to finding differences in the linked list. This is done through difference() or – operator. Time complexity of finding difference s1 – s2 is O(len(s1))\n\nHowever, there are two major pitfalls in Python sets:\n• None The set doesn’t maintain elements in any particular order.\n• None Only instances of immutable types can be added to a Python set.\n\nSets and frozen sets support the following operators:\n• None Check if an Array is Subset of other\n• None Duplicate within K Distance in an Array\n• None Only Repeating Element From 1 To n-1\n\nWhat are sets in Python?\n\nHow do you calculate sets in Python?\n\nWhat is set and tuple in Python?\n\nHow to input set in Python?\n\nTo input a set in Python, you can use the function to get user input and then convert it into a set. For example, you can read a string of numbers separated by spaces and convert them to a set of integers. This code snippet allows the user to input a set of numbers separated by spaces, which are then converted into a set of integers."
    },
    {
        "link": "https://learnpython.com/blog/python-set-operations-all-to-know",
        "document": "Even if you're just starting your Python journey, you've most likely come across Python sets. But do you know how to use them effectively? This article aims to cover all the main Python set operations to give you a better feel for when and how to use this important data structure.\n\nFirst, let's start with the basics. A set is a built-in type in Python that has a number of important characteristics:\n• Sets are unordered. In other words, the items are inserted in random order, so you can't access elements using indices.\n• Sets include only unique elements. No duplicates are allowed in sets.\n• A set is mutable. A set can be modified, and it's possible to add and remove items from one.\n• Elements of a set must be of an immutable type. For example, strings, integers, floats, and tuples are acceptable types for a set.\n• A set may include elements of different types. For example, you can include a mix of numbers, strings, and tuples in one set.\n\nNow it's time to see how to define and modify Python sets.\n\nThere are two ways to create a set: you can use the built-in or, alternatively, define a set with curly braces. Here are some examples:\n\nThe argument to the needs to be an iterable that generates a list of objects (e.g., tuples, lists, strings); these will be inserted into the set. On the other hand, if you use curly braces, the objects themselves are placed manually. So you've probably spotted the difference in applying these two approaches:\n• We pass in a tuple to the function to create , but we place the objects directly into the curly braces to get with the same elements.\n• The function treats the string that we pass in to create as an iterable, and so the resulting set is a collection of letters from this string, while curly braces treat a string as a distinct element of the set and so we get with this string as the only member.\n\nAlso, note that the resulting sets are unordered, and duplicate values are only represented in the set once (as with the letter 'e' in the second example).\n\nYou can use the function to check the number of elements in a set, and you can also check if a particular element exists or doesn't exist in a set using the or operators, respectively.\n\nYou can use the method to insert a single element into a set. If you'd like to insert multiple objects into a set at once, use the method. Here are some examples:\n\nThere are a number of ways to remove items from a set:\n• Use the method if you want to remove a single element from a set, or get an error message if the respective item is not in the set.\n• Use the method if you want to remove a single element from a set but don't need an error message if the given item is not in the set.\n• Use the method to remove and return a random element from a set.\n• Use the method to remove all items from a set.\n\nWe'll see later how you can remove multiple elements from a set without using a loop.\n\nThese are the basic methods you can use to modify a set. Let's now move on to some more advanced Python set operations and methods.\n\nWe can use Python sets to carry out mathematical set operations like union, intersection, difference, and symmetric difference. These operations can be performed using either operators or methods.\n\nHowever, there is one important difference between these two approaches: operators can work only with sets, while methods accept any iterable (e.g., lists, tuples) as an argument, convert it to a set, and then perform the operation.\n\nDon't worry if this is not clear to you yet—we'll look at some examples below.\n\nIf there are two sets, and , the union of these two sets is the set of all elements from both sets. You can get a union of two sets using the method or the operator. However, if you want to get a union of a set and a list, the operator is not going to work, and you will need to use the method.\n\nThe intersection of two sets, and , is the set of all elements common to both sets. This operation can be performed using the & operator or the method.\n\nAs you can see, both the method and the & operator allow you to create an intersection for more than two sets. Note that this applies not only to set intersections but also to other operations.\n\nThe difference of and is the set of all elements that are only in and not in . You can create the difference of two sets using either the – operator or the method.\n\nAs you can see from the examples, the order of the sets matters when performing the set difference operation.\n\nThe symmetric difference operation allows you to get the elements that are either in or in but not in both. Again, you have two options for performing this operation: the method or the operator.\n\nEach of the operations we discussed above (union, intersection, difference, and symmetric difference) can be also used to update a set. We just need to use an augmented assignment form for the operators (|=, &=, -=, ^=), or the corresponding methods , , , and ). Here are some examples:\n\nNotice how we were able to remove multiple elements from by specifying the elements we wanted to remove in a tuple that we passed in as an argument to the method.\n\nLet's briefly review some methods that will help you to determine how sets relate to each other:\n• returns true if two sets have any elements in common.\n• or the operator returns true if the first set is a subset of the second one.\n• or the operator returns true if the first set contains every element of the second one.\n\nIf you've ever attempted to use set elements as dictionary keys, you know that this doesn't work because sets are mutable and thus unhashable. Luckily, Python has another built-in type named that has all the properties of a set but is immutable. Frozensets are hashable and are accepted as keys to a dictionary. Check out the Python Basics. Part 2 course for more info on creating dictionaries.\n\nYou can create a frozenset using the function. Being immutable, a frozenset doesn't have methods for adding or removing elements. However, update operations do work with frozensets. That's because these operations do not modify the original set but rather assign the set to a new object.\n\nNow you know how to define a set object in Python, how to modify a set, and what kinds of operations can be performed with sets. You also know the main characteristics of Python sets and should have a better feeling for when a set is an appropriate choice.\n\nAll you need now is some practice! Check out the Python Basics. Part 3 course for a number of interactive exercises that cover sets, tuples, and date/time objects.\n\nIn case you also need a refresher on lists, dictionaries, and text files, Python Basics. Part 2 will provide you with easy-to-understand explanations and lots of hands-on exercises."
    },
    {
        "link": "https://labex.io/tutorials/python-how-to-use-set-to-count-element-frequencies-in-a-python-list-398089",
        "document": "One of the common use cases for Python sets is counting the frequency of elements in a list. By leveraging the unique nature of sets, you can easily determine the frequency of each element in a list.\n\nTo count the frequency of elements in a list using sets, you can follow these steps:\n• Convert the list to a set to get the unique elements.\n• Use the method to count the occurrences of each unique element in the original list.\n\nUsing sets to count element frequencies is an efficient approach for the following reasons:\n• Uniqueness: Sets automatically remove duplicates, allowing you to focus on the unique elements.\n• Readability and Simplicity: The code using sets is more concise and easier to understand compared to other frequency counting techniques.\n\nCounting element frequencies using sets is useful in various scenarios, such as:\n• Data Analysis: Analyzing the distribution of data points in a dataset.\n• Text Processing: Determining the frequency of words in a text corpus.\n\nBy understanding how to use sets to count element frequencies, you can enhance your data processing and analysis capabilities in Python."
    },
    {
        "link": "https://geeksforgeeks.org/counters-in-python-set-1",
        "document": "Counters are a subclass of the dict class in Python collections module. They are used to count the occurrences of elements in an iterable or to count the frequency of items in a mapping. Counters provide a clean and efficient way to tally up elements and perform various operations related to counting.\n\nIn this example, the Counter counts the occurrences of each element in the list.\n\nLet’s take a look at counters in python in detail:\n\nThe constructor of the counter can be called in any one of the following ways:\n• None With a dictionary containing keys and counts\n\nTo use a Counter, we first need to import it from the collections module.\n\nIn these examples, we create Counters from different types of iterables.\n\nWe can access the count of each element using the element as the key. If an element is not in the Counter, it returns 0.\n\nThis example shows how to access the count of specific elements in the Counter.\n\nCounters can be updated by adding new elements or by updating the counts of existing elements. We can use the update() method to achieve this.\n\nelements(): Returns an iterator over elements repeating each as many times as its count. Elements are returned in arbitrary order.\n\nThe elements() method returns an iterator that produces all elements in the Counter.\n\nmost_common(): Returns a list of the n most common elements and their counts from the most common to the least. If n is not specified, it returns all elements in the Counter.\n\nsubtract(): Subtracts element counts from another iterable or mapping. Counts can go negative.\n\nThe subtract() method decreases the counts for elements found in another iterable.\n\nIf you want to learn more about accessing counters in Python, the article (Accessing Counters) is a great resource."
    },
    {
        "link": "https://stackoverflow.com/questions/11883194/how-to-count-co-ocurrences-with-collections-counter-in-python",
        "document": "I learned about the collections.Counter() class recently and, as it's a neat (and fast??) way to count stuff, I started using it.\n\nBut I detected a bug on my program recently due to the fact that when I try to update the count with a tuple, it actually treats it as a sequence and updates the count for each item in the tuple instead of counting how many times I inserted that particular tuple.\n\nFor example, if you run:\n\nas a result. Is there a way to count tuples with the Counter()? I could concatenate the strings but this is... ugly. Could I use named tuples? Implement my own very simple dictionary counter? Don't know what's best."
    },
    {
        "link": "https://pythonmorsels.com/using-counter",
        "document": "Python's class is one of the most useful data structures that's also frequently overlooked. objects are mappings (dictionary-like objects) that are specially built just for counting up occurrences of items.\n\nI'd like to share how I typically use objects in Python.\n\nPython's objects are similar to dictionaries but they have a few extra features that can simplify item tallying.\n\nThere are two ways you'll usually see a object made:\n• By passing in an iterable\n\nHere's an example of using a loop to increment keys within a object:\n\nNote that this is similar to a dictionary, except that when a key doesn't exist within a that key's value will default to .\n\nHere's an example of passing an iterable to :\n\nNote that we're passing a generator expression to the class here. It's pretty common to see a generator expression passed to if the items you're counting need a bit of normalizing or altering before they're counted up (we're stripping punctuation in our case).\n\nOf these two ways to use , passing an iterable directly into is simpler and usually preferable to using a loop.\n\nLet's look at some of the most useful operations that objects support.\n\nGetting the N most common items\n\nThe feature I use for most often is the method.\n\nThe method is like the dictionary method but sorts the items by their values (their counts) in descending order.\n\nUnlike the method, also accepts a number to indicate how many of the most common items you'd like (it returns all items by default).\n\nKeep in mind that if there's a \"tie\" for the most common -th item, the tie will be arbitrarily broken. For example, here there are two items that tie for \"most common item\" but just returns one of them:\n\nExamples of getting the most common items\n\nHere we're asking for the 5 most frequently seen characters in a string:\n\nOr the most common word in a string (assuming there's no punctuation):\n\nOr, using a regular expression, we could get all words that appear more than once displayed in descending order of commonality, with punctuation removed:\n\nIf you read the album cover by now You know that my name is what my name is When I came in here to try and Do this, something I've never done before Mr. Jones, Booker T., said to me\n\nLike dictionaries, objects have an method:\n\nBut unlike dictionaries, the method on objects is usually used to count additional items:\n\nYou can pass an iterable to and the object will loop over it and increase the counts of those items.\n\nIf we only ever subtract items from our , the method would instead return the least common items (since our counts are all negative):\n\nIt's rare that I use negatives in counters, but they can occasionally be handy. Negatives with can be finicky when combined with arithmetic though, so use them with caution. Otherwise your zero and negative values may disappear if you're not careful:\n\nWhat if you want to discard all negatives and zero counts from your object?\n\nYou can use the unary operator to remove every item that doesn't have a positive count:\n\nYou can even add objects together:\n\nAnd you can subtract them:\n\nNote that once a value becomes or negative, it'll be removed from the object.\n\nBy far my most common use for is passing in a generator expression to count up a specific aspect of each iterable item.\n\nFor example, how many users in a list of users have each subscription type:\n\nOr, counting up each word in string, while ignoring surrounding punctuation marks:\n\nThose are actually generators passed into the class, but they're like comprehensions: they use a comprehension-like syntax to create a new object (a object).\n\nUse for counting occurrences of many items\n\nThe next time you need to count how many times a particular item occurs, consider using ."
    },
    {
        "link": "https://geeksforgeeks.org/python-count-occurrences-element-list",
        "document": "A common task when working with lists is to count how many times a specific element appears. In Python, we have several ways to count occurrences of an element using both built-in and custom methods.\n\nThe simplest and most straightforward way to count occurrences of an element in a list is by using the count() method, which is a built-in method specifically designed for this task.\n\nIn this example, we have a list and we are counting the occurrences of 2 and 3 using the count() method.\n\nBelow are the other methods by which we can use to count the occurrences of an element in a list.\n\nIn this method, iterate over the list using loop (for loop) and keep a counter variable to count the occurrences. Each time we find the target element, increase the counter by one.\n\nThe countOf() function is equivalent to using the count() method of a list, but it comes from the operator module.\n\nIt takes two arguments: the sequence in which we want to count and the value that we want to count. Let’s look at the syntax given below:\n\nThe Counter class from the collections module can count occurrences for all elements and returns the results as a dictionary. Let’s see how can we use this to count occurrence of a single element.\n\nNote: This method is not efficient for finding occurrence of single element because it requires O(n) extra space to create a new dictionary. But this method is very efficient when finding all occurrences of elements.\n• None Count of elements matching particular condition in Python\n• None Count Occurrences of Specific Value in Pandas Column"
    },
    {
        "link": "https://digitalocean.com/community/tutorials/python-counter-python-collections-counter",
        "document": "Python Counter class is part of Collections module. Counter is a subclass of Dictionary and used to keep track of elements and their count.\n\nCounter is an unordered collection where elements are stored as keys and their count as dict value. Counter elements count can be positive, zero or negative integers. However there is no restriction on it’s keys and values. Although values are intended to be numbers but we can store other objects too.\n\nWe can create an empty Counter or start with some initial values too.\n\nWe can also use any Iterable as argument for creating Counter object. So string literal and List can be used too for creating Counter object.\n\nAs I mentioned above, we can use non-numeric data for count values too, but that will defect the purpose of Counter class.\n\nLet’s look into Counter class methods and some other operations we can perform on it.\n\nIf we try to get the count of non-existing key, it will return 0 and not throw .\n\nWe can also set the count of existing element in the counter. If the element doesn’t exist, then it gets added to the counter.\n\nWe can use to delete an element from the counter object.\n\nThis method returns the list of elements in the counter. Only elements with positive counts are returned.\n\nAbove code will print “Dog” two times because it’s count is 2. Other elements will be ignored because they don’t have positive count. Counter is an unordered collection, so elements are returned in no particular order.\n\nThis method returns the most common elements from the counter. If we don’t provide value of ‘n’ then sorted dictionary is returned from most common the least common elements. We can use slicing to get the least common elements on this sorted dictionary.\n\nCounter method is used to subtract element counts from another counter. method is used to add counts from another counter.\n\nWe can perform some arithmetic operations on Counters too, just like numbers. However only elements with positive count are returned with these operations.\n\nLet’s look at some code snippets for miscellaneous operations we can perform on Counter objects.\n\nYou can download the complete example code from my GitHub Repository."
    }
]