[
    {
        "link": "https://threejs.org/docs",
        "document": ""
    },
    {
        "link": "https://threejs.org/docs/index.html",
        "document": ""
    },
    {
        "link": "https://github.com/mrdoob/three.js/releases",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://threejs.org/docs/manual/en/introduction/Installation.html",
        "document": "Every three.js project needs at least one HTML file to define the webpage, and a JavaScript file to run your three.js code. The structure and naming choices below aren't required, but will be used throughout this guide for consistency.\n• main.js import * as THREE from 'three'; ...\n• public/\n• The public/ folder is sometimes also called a \"static\" folder, because the files it contains are pushed to the website unchanged. Usually textures, audio, and 3D models will go here.\n\nNow that we've set up the basic project structure, we need a way to run the project locally and access it through a web browser. Installation and local development can be accomplished with npm and a build tool, or by importing three.js from a CDN. Both options are explained in the sections below.\n\nInstalling from the [link:https://www.npmjs.com/ npm package registry] and using a [link:https://eloquentjavascript.net/10_modules.html#h_zWTXAU93DC build tool] is the recommended approach for most users — the more dependencies your project needs, the more likely you are to run into problems that the static hosting cannot easily resolve. With a build tool, importing local JavaScript files and npm packages should work out of the box, without import maps.\n• Install [link:https://nodejs.org/ Node.js]. We'll need it to load manage dependencies and to run our build tool.\n• Install three.js and a build tool, [link:https://vitejs.dev/ Vite], using a [link:https://www.joshwcomeau.com/javascript/terminal-for-js-devs/ terminal] in your project folder. Vite will be used during development, but it isn't part of the final webpage. If you prefer to use another build tool, that's fine — we support modern build tools that can import [link:https://eloquentjavascript.net/10_modules.html#h_zWTXAU93DC ES Modules]. Installation added node_modules/ and package.json to my project. What are they? npm uses package.json to describe which versions of each dependency you've installed. If you have other people working on the project with you, they can install the original versions of each dependency simply by running npm install. If you're using version history, commit package.json. npm installs the code for each dependency in a new node_modules/ folder. When Vite builds your application, it sees imports for 'three' and pulls three.js files automatically from this folder. The node_modules/ folder is used only during development, and shouldn't be uploaded to your web hosting provider or committed to version history. Improve your editor auto-completion with jsconfig or tsconfig Place a jsconfig.json (or tsconfig.json for TypeScript projects) in your project's root. Adding the configuration below helps your editor locate three.js files for enhanced auto-completion.\n• From your terminal, run: npx is installed with Node.js, and runs command line programs like Vite so that you don't have to search for the right file in node_modules/ yourself. If you prefer, you can put [link:https://vitejs.dev/guide/#command-line-interface Vite's common commands] into the [link:https://docs.npmjs.com/cli/v9/using-npm/scripts package.json:scripts] list, and use npm run dev instead.\n• If everything went well, you'll see a URL like http://localhost:5173 appear in your terminal, and can open that URL to see your web application.\n\nThe page will be blank — you're ready to [link:#manual/introduction/Creating-a-scene create a scene].\n\nIf you want to learn more about these tools before you continue, see:\n\nLater, when you're ready to deploy your web application, you'll just need to tell Vite to run a production build — npx vite build. Everything used by the application will be compiled, optimized, and copied into the dist/ folder. The contents of that folder are ready to be hosted on your website.\n\nInstalling without build tools will require some changes to the project structure given above.\n• We imported code from 'three' (an npm package) in main.js, and web browsers don't know what that means. In index.html we'll need to add an [link:https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap import map] defining where to get the package. Put the code below inside the <head></head> tag, after the styles. Don't forget to replace <version> with an actual version of three.js, like \"v0.149.0\". The most recent version can be found on the [link:https://www.npmjs.com/package/three?activeTab=versions npm version list].\n• We'll also need to run a local server to host these files at URL where the web browser can access them. While it's technically possible to double-click an HTML file and open it in your browser, important features that we'll later implement, do not work when the page is opened this way, for security reasons. Install [link:https://nodejs.org/ Node.js], then run [link:https://www.npmjs.com/package/serve serve] to start a local server in the project's directory:\n• If everything went well, you'll see a URL like http://localhost:3000 appear in your terminal, and can open that URL to see your web application.\n\nThe page will be blank — you're ready to [link:#manual/introduction/Creating-a-scene create a scene].\n\nMany other local static servers are available — some use different languages instead of Node.js, and others are desktop applications. They all work basically the same way, and we've provided a few alternatives below.\n\nWhen you're ready to deploy your web application, push the source files to your web hosting provider — no need to build or compile anything. The downside of that tradeoff is that you'll need to be careful to keep the import map updated with any dependencies (and dependencies of dependencies!) that your application requires. If the CDN hosting your dependencies goes down temporarily, your website will stop working too.\n\nIMPORTANT: Import all dependencies from the same version of three.js, and from the same CDN. Mixing files from different sources may cause duplicate code to be included, or even break the application in unexpected ways.\n\nOut of the box, three.js includes the fundamentals of a 3D engine. Other three.js components — such as controls, loaders, and post-processing effects — are part of the [link:https://github.com/mrdoob/three.js/tree/dev/examples/jsm addons/] directory. Addons do not need to be installed separately, but do need to be imported separately.\n\nThe example below shows how to import three.js with the [page:OrbitControls] and [page:GLTFLoader] addons. Where necessary, this will also be mentioned in each addon's documentation or examples.\n\nSome excellent third-party projects are available for three.js, too. These need to be installed separately — see [link:#manual/introduction/Libraries-and-Plugins Libraries and Plugins]."
    },
    {
        "link": "https://discourse.threejs.org/t/using-three-examples-jsm-addons-js-for-imports-best-practices-and-future-stability/69108",
        "document": "While working with Three.js, I usually import modules such as , , and from their specific paths within , like this:\n\nHowever, today I accidentally selected an auto-suggestion in my IDE that imported from a different path: . When I opened this file, I found that it exports all the addons available in . I updated my import statements to:\n\nThis approach works without any issues. My questions are:\n• Is the primary purpose of to serve as an alias for importing these modules?\n• Is it conventionally acceptable to use this file for imports?\n• Is there a chance that this method could change in future releases?\n\nI personally prefer this approach for its simplicity but want to ensure it’s reliable for long-term use."
    },
    {
        "link": "https://threejs.org/docs/examples/en/loaders/GLTFLoader.html",
        "document": "A loader for `glTF 2.0` resources. \n\n\n\n [link:https://www.khronos.org/gltf glTF] (GL Transmission Format) is an [link:https://github.com/KhronosGroup/glTF/tree/master/specification/2.0 open format specification] for efficient delivery and loading of 3D content. Assets may be provided either in JSON (.gltf) or binary (.glb) format. External files store textures (.jpg, .png) and additional binary data (.bin). A glTF asset may deliver one or more scenes, including meshes, materials, textures, skins, skeletons, morph targets, animations, lights, and/or cameras.\n\n[name] uses [page:ImageBitmapLoader] whenever possible. Be advised that image bitmaps are not automatically GC-collected when they are no longer referenced, and they require special handling during the disposal process. More information in the [link:https://threejs.org/docs/#manual/en/introduction/How-to-dispose-of-objects How to dispose of objects] guide.\n\n[name] is an add-on, and must be imported explicitly. See [link:#manual/introduction/Installation Installation / Addons].\n\nThe following glTF 2.0 extension is supported by an external user plugin\n\n1You can also manually process the extension after loading in your application. See [link:https://threejs.org/examples/#webgl_loader_gltf_variants Three.js glTF materials variants example].\n\nWhen loading textures externally (e.g., using [page:TextureLoader]) and applying them to a glTF model, textures must be configured. Textures referenced from the glTF model are configured automatically by GLTFLoader.\n\nMetadata from unknown extensions is preserved as “.userData.gltfExtensions” on Object3D, Scene, and Material instances, or attached to the response “gltf” object. Example:\n\n[page:LoadingManager manager] — The [page:LoadingManager loadingManager] for the loader to use. Default is [page:LoadingManager THREE.DefaultLoadingManager].\n\nSee the base [page:Loader] class for common properties.\n\nSee the base [page:Loader] class for common methods.\n\n[page:String url] — A string containing the path/URL of the `.gltf` or `.glb` file.\n\n [page:Function onLoad] — A function to be called after the loading is successfully completed. The function receives the loaded JSON response returned from [page:Function parse].\n\n [page:Function onProgress] — (optional) A function to be called while the loading is in progress. The argument will be the XMLHttpRequest instance, that contains .[page:Integer total] and .[page:Integer loaded] bytes. If the server does not set the Content-Length header; .[page:Integer total] will be 0.\n\n [page:Function onError] — (optional) A function to be called if an error occurs during loading. The function receives error as an argument.\n\n\n\nBegin loading from url and call the callback function with the parsed response content.\n\n[page:DRACOLoader dracoLoader] — Instance of DRACOLoader, to be used for decoding assets compressed with the KHR_draco_mesh_compression extension.\n\nRefer to this [link:https://github.com/mrdoob/three.js/tree/dev/examples/jsm/libs/draco#readme readme] for the details of Draco and its decoder.\n\n[page:KTX2Loader ktx2Loader] — Instance of KTX2Loader, to be used for loading KTX2 compressed textures.\n\n[page:ArrayBuffer data] — glTF asset to parse, as an `ArrayBuffer`, `JSON` string or object.\n\n [page:String path] — The base path from which to find subsequent glTF resources such as textures and .bin data files.\n\n [page:Function onLoad] — A function to be called when parse completes.\n\n [page:Function onError] — (optional) A function to be called if an error occurs during parsing. The function receives error as an argument.\n\n\n\nParse a glTF-based `ArrayBuffer`, `JSON` string or object and fire [page:Function onLoad] callback when complete. The argument to [page:Function onLoad] will be an [page:Object] that contains loaded parts: .[page:Group scene], .[page:Array scenes], .[page:Array cameras], .[page:Array animations], and .[page:Object asset]."
    },
    {
        "link": "https://discourse.threejs.org/t/how-to-load-the-glb-model-correctly/58457",
        "document": "Hello everyone, I am a beginner at three.js. I have a few confusing questions and would like to consult everyone.\n\n Method 1: Use three. js to load a model (it is a duck with a file type of glb).As shown in the figure:\n\n\n\nMethod 2: Using https://gltf-viewer.donmccurdy.com To load this model.As shown in the figure:\n\n\n\nIt can be seen that the effect of method two is very good.\n\n Firstly,the clarity of the model is relatively high;\n\n Second, the size and position of the model are just right.\n\nI think there is a problem with the settings of the scene, camera, and rendering parameters.\n\nBut I don’t know how to adjust them.\n\nOn the right side of Method 2, the gltf viewer lists many parameters of the model.\n\n So how should the code for these parameters correspond?"
    },
    {
        "link": "https://discourse.threejs.org/t/how-to-use-gltfloader-in-nodejs/43607",
        "document": "it’s not easily possible. gltfloader relies on web xhr fetch requests and web workers to function. i’ve seen people try to emulate this under node but i haven’t seen something that actually works.\n\nif with “some data” you mean structural data there could be a way. i have forked the loader here GitHub - pmndrs/gltfjsx: 🎮 Turns GLTFs into JSX components this is a node tool, it allows me to read out all structural data, the scene, materials, all props, positions, userData, etc, i have removed everything that had to do with texture and geometry buffers to make it work. the loader is under /src/bin\n\nthere is also the GitHub - donmccurdy/glTF-Transform: glTF 2.0 SDK for JavaScript, TypeScript, and Node.js. project. it can parse and process gltfs under node. this is most likely the best solution but i have only ever used the transforms, i haven’t used it to parse files or looked into the code to see how it works. @donmccurdy has made it.\n\nlast but not least, if you want to actually display the results in some way i would suggest you use puppeteer, a headless browser environment for node."
    },
    {
        "link": "https://en.threejs-university.com/2021/08/04/loading-a-3d-glb-gltf-with-three-js-gltfloader",
        "document": "When a 3D object is modeled in an external tool such as Blender, it is possible to export it in several formats. One of these possibilities is the format.\n\nThe file extensions of this format are or .\n\nThree.js does not offer a solution to natively load 3D models of this format. However, a class for this purpose is available in the official add-ons of the library :\n\nUse of the GLTFLoader class\n\nThe constructor of this class does not need any argument. To start, we create a type object.\n\nThen, with the method, we load a or file :\n• or file – The path to the file to be loaded\n• Callback – A callback function called at the end of the file loading\n\nThe following operations require the file to be loaded, to ensure this, the following operations are performed in the callback function.\n\nWe can now use the loaded file in our Three.js application !\n\nThe variable in parameter of the callback function is the result of the loading by the method.\n\nThe 3D object we are interested in is available in the attribute of the variable. We can now use it as a classic 3D Three.js object.\n\nBonus – The animations included in the 3D model\n\nIt is also possible to include animated 3D models in the / format. To learn how to use these animations, I recommend you to read this publication :\n\nWe still have a lot to learn about loading 3D objects into Three.js !\n\nIn chapter 9 and 10 of the downloadable guide, we will discover the details of loading 3D objects, and all the related notions (dynamic shadows, animations …).\n\nYou can download the complete guide here :"
    },
    {
        "link": "https://stackoverflow.com/questions/71240534/how-to-load-gltf-glb-model-into-three-js-app/72922059",
        "document": "I went through a few similar topics here on SO but I can't find a solution to my problem. The issue is that model doesn't load at all. My Vue app uses webpack (I use Quasar framework which has built-in webpack). I configured Webpack to bundle files (I read that is sufficient here). It doesn't help. My model sits in folder. Some say that 3D model should be placed in (or ) folder. I've tried it and both solutions don't work in my case.\n\nI loaded model to and updated webpack in . Here is a reproducible example: https://codesandbox.io/s/interesting-mendeleev-3e1zoy?file=/src/store/model/main_three.js"
    }
]