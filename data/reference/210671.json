[
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/javax/swing/JRadioButton.html",
        "document": "An implementation of a radio button -- an item that can be selected or deselected, and which displays its state to the user. Used with a object to create a group of buttons in which only one button at a time can be selected. (Create a ButtonGroup object and use itsmethod to include the JRadioButton objects in the group.)\n\nButtons can be configured, and to some degree controlled, by s. Using an with a button has many benefits beyond directly configuring a button. Refer to Swing Components Supporting for more details, and you can find more information in How to Use Actions, a section in The Java Tutorial.\n\nSee How to Use Buttons, Check Boxes, and Radio Buttons in The Java Tutorial for further documentation.\n\nWarning: Swing is not thread safe. For more information see Swing's Threading Policy.\n\nWarning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans™ has been added to the package. Please see ."
    },
    {
        "link": "https://docs.oracle.com/javase/7/docs/api/javax/swing/JRadioButton.html",
        "document": "An implementation of a radio button -- an item that can be selected or deselected, and which displays its state to the user. Used with a object to create a group of buttons in which only one button at a time can be selected. (Create a ButtonGroup object and use itsmethod to include the JRadioButton objects in the group.)\n\nButtons can be configured, and to some degree controlled, by s. Using an with a button has many benefits beyond directly configuring a button. Refer to Swing Components Supporting for more details, and you can find more information in How to Use Actions, a section in The Java Tutorial.\n\nSee How to Use Buttons, Check Boxes, and Radio Buttons in The Java Tutorial for further documentation.\n\nWarning: Swing is not thread safe. For more information see Swing's Threading Policy.\n\nWarning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the package. Please see ."
    },
    {
        "link": "https://geeksforgeeks.org/jradiobutton-java-swing",
        "document": "We use the JRadioButton class to create a radio button. Radio button is use to select one option from multiple options. It is used in filling forms, online objective papers and quiz.\n\nWe add radio buttons in a ButtonGroup so that we can select only one radio button at a time. We use “ButtonGroup” class to create a ButtonGroup and add radio button in a group.\n• JRadioButton() : Creates a unselected RadioButton with no text.\n\n Example:\n• ButtonGroup() : Use to create a group, in which we can add JRadioButton. We can select only one JRadioButton in a ButtonGroup.\n\n Steps to Group the radio buttons together.\n• Now add buttons in a Group “G”, with the help of “add()” Method.\n• isSelected() : it will return a Boolean value true or false, if a JRadioButton is selected it Will return true otherwise false.\n• Set(…) and Get(…) Methods :\n\n i) Set and get are used to replace directly accessing member variables from external classes. ii) Instead of accessing class member variables directly, you define get methods to access these variables, and set methods to modify them.\n\nDescription of some functions used in program, is given in this link : Functions Description\n\nProgram 3 Program to create a simple group of radio buttons (with image )and add item listener to them\n\nNote : The following programs might not run in an online Compiler please use an Offline IDE."
    },
    {
        "link": "http://edelstein.pebbles.cs.cmu.edu/jadeite/main.php?api=java6&state=class&package=javax.swing&class=JRadioButton",
        "document": "An implementation of a radio button -- an item that can be selected or deselected, and which displays its state to the user. Used with a {@link ButtonGroup} object to create a group of buttons in which only one button at a time can be selected. (Create a ButtonGroup object and use its method to include the JRadioButton objects in the group.)\n\nButtons can be configured, and to some degree controlled, by s. Using an with a button has many benefits beyond directly configuring a button. Refer to Swing Components Supporting for more details, and you can find more information in How to Use Actions, a section in The Java Tutorial.\n\nSee How to Use Buttons, Check Boxes, and Radio Buttons in The Java Tutorial for further documentation.\n\nWarning: Swing is not thread safe. For more information see Swing's Threading Policy.\n\nWarning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the package. Please see {@link java.beans.XMLEncoder}.\n\nCopyright 2008 Sun Microsystems, Inc. All rights reserved. Use is subject to license terms . Also see the documentation redistribution policy The official Sun™ documentation can be found here at This page displays the Jadeite version of the documention, which is derived from the offical documentation that contains this copyright notice:The official Sun™ documentation can be found here at http://java.sun.com/javase/6/docs/api/"
    },
    {
        "link": "https://stackoverflow.com/questions/35207924/java-get-jradiobutton-cmd-with-jbutton-listener",
        "document": "I am new to java and creating a Simple gui App. In this simple app, I am trying to write a e-commerce letter for Firms. So, I planned my app something like this..\n\nFirst i ask to user if he want to write an letter to British Firm or American. For this i use two radio buttons(one for american firm and second for british) and JButton. When user Trigger jbutton then i want to get radiobutton command(which type of letter user want to write).\n\nThe problem is I don't have any idea to get Radiobutton command when i trigger jButton. Please give me an Simple Idea(if possible with exapmle not complicated for begginers) to get RadioButtons value..\n\nHere is my java Code:\n\nI am using Notepad++ and CMD.. Not any another tools like netbeans initllli ecplisse. **RE-EDIT ** I want a possible solution and can satisfy me.. this app works but i am not able to get radiobuttons commmand with jubtton.."
    },
    {
        "link": "https://stackoverflow.com/questions/1779589/is-there-a-better-practice-for-listeners",
        "document": "There are a few common ways to do event listeners (the only one that I can think of that I left off in the code below is static inner classes). The code below uses ActionListener since it is simplest, but you can apply the idea to any listener.\n\nNotice that the \"this\" way (having the class implement the listener) can lead to a huge if/else set of statements. I'd say this is the worst possible way because of that. I dislike having \"clearing house\" methods for two reasons:\n\n1) they are large 2) it is tempting to do the work inside of the method rather than having each if/else call a method to do the work (which, as you can see, is what I did here... oops :-)\n\nI also do not like the Anonymous way for two reasons:\n\n1) you cannot easily re-use the code so you may find that you have duplicate code after a while 2) I find it breaks up the reading of the code (others disagree... personal taste). I think everyone would agree that if you are doing more than 5-10 lines that an anonymous inner class is not a good idea (I would say more than 2 is too much).\n\nThat leaves the inner and the outer ways. I would use the outer way when I am writing a listener that is not tightly tied to the GUI that it is listening. If the listener doesn't need information (member variables/methods) that are part of the class (TestFrame in this case) I would go for the outer class. In the example below I passed in the \"this\" so that the outer listeners could access the GUI... if I were to write code like that I would instead make it an inner class since it requires something from the GUI.\n\nSo, my order of preference is:\n• inner class (static if possible, but if you are making it static I'd go for the outer class)\n• have the class implement it itself (never would I do this. Never!)\n\nAnd here is the code"
    },
    {
        "link": "https://docs.oracle.com/javase/tutorial/uiswing/events/eventsandcomponents.html",
        "document": "The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available. See Dev.java for updated tutorials taking advantage of the latest releases. See Java Language Changes for a summary of updated language features in Java SE 9 and subsequent releases. See JDK Release Notes for information about new features, enhancements, and removed or deprecated options for all JDK releases.\n\nYou can tell what kinds of events a component can fire by looking at the kinds of event listeners you can register on it. For example, the class defines these listener registration methods:\n\nThus, a combo box supports action, item, and context menu listeners in addition to the listener methods it inherits from .\n\nListeners supported by Swing components fall into two categories:\n\nBecause all Swing components descend from the AWT class, you can register the following listeners on any Swing component:\n\nAll Swing components descend from the AWT class, but many of them are not used as containers. So, technically speaking, any Swing component can fire container events, which notify listeners that a component has been added to or removed from the container. Realistically speaking, however, only containers (such as panels and frames) and compound components (such as combo boxes) typically fire container events.\n\nprovides support for three more listener types. You can register an ancestor listener to be notified when a component's containment ancestors are added to or removed from a container, hidden, made visible, or moved. This listener type is an implementation detail which predated hierarchy listeners.\n\nThe other two listener types are part of the Swing components' conformance to the JavaBeans specification. Among other things, this means that Swing components support bound and constrained properties and notify listeners of changes to the properties. Property change listeners listen for changes to bound properties and are used by several Swing components, such as formatted text fields, to track changes on a component's bound properties. Also, property change listeners, as well as vetoable change listeners are used by builder tools to listen for changes on constrained properties. For more information refer to the Properties lesson in the JavaBeans trail.\n\nThe following table lists Swing components and the specialized listeners they support, not including listeners supported by all s, s, or s. In many cases, the events are fired directly from the component. In other cases, the events are fired from the component's data or selection model. To find out the details for the particular component and listener you are interested in, go first to the component how-to section, and then if necessary to the listener how-to section."
    },
    {
        "link": "https://geeksforgeeks.org/event-handling-in-java",
        "document": "An event is a change in the state of an object triggered by some action such as Clicking a button, Moving the cursor, Pressing a key on the keyboard, Scrolling a page, etc. In Java, the java.awt.event package provides various event classes to handle these actions.\n\nEvents in Java can be broadly classified into two categories based on how they are generated:\n• Foreground Events: Foreground events are the events that require user interaction to generate. Examples of these events include Button clicks, Scrolling the scrollbar, Moving the cursor, etc.\n• Background Events: Events that don’t require interactions of users to generate are known as background events. Examples of these events are operating system failures/interrupts, operation completion, etc.\n\nEvent handling is a mechanism that allows programs to control events and define what should happen when an event occurs. Java uses the Delegation Event Model to handle events. This model consists of two main components:\n• Source: Events are generated from the source. There are various sources like buttons, checkboxes, list, menu-item, choice, scrollbar, text components, windows, etc., to generate events.\n• Listeners: Listeners are used for handling the events generated from the source. Each of these listeners represents interfaces that are responsible for handling events.\n\nTo handle events, the source must be registered with a listener. Java provides specific methods for registering listeners based on the type of event.\n\nJava provides a variety of event classes and corresponding listener interfaces. Below table demonstrates the most commonly used event classes and their associated listener interfaces:\n\nAn event that indicates that a component-defined action occurred like a button click or selecting an item from the menu-item list. The adjustment event is emitted by an Adjustable object like Scrollbar. An event that indicates that a component moved, the size changed or changed its visibility. When a component is added to a container (or) removed from it, then this event is generated by a container object. These are focus-related events, which include focus, focusin, focusout, and blur. An event that indicates whether an item was selected or not. An event that occurs due to a sequence of keypresses on the keyboard. The events that occur due to the user interaction with the mouse (Pointing Device). An event that specifies that the mouse wheel was rotated in a component. An event that occurs when an object’s text changes. An event which indicates whether a window has changed its status or not.\n\nNote: As Interfaces contains abstract methods which need to implemented by the registered class to handle events.\n\nEach listener interface contains specific methods that must be implemented to handle events. Below table demonstrates the key methods for each interface:\n\nThe event handling process in Java follows these steps:\n• None User Interaction with a component is required to generate an event.\n• None The object of the respective event class is created automatically after event generation, and it holds all information of the event source.\n• None The newly created object is passed to the methods of the registered listener.\n• None The method executes and returns the result.\n\nJava provides three main approaches to implement event handling\n• None Firstly extend the class with the applet and implement the respective listener.\n• None Registered the button component with respective event. i.e. ActionEvent by addActionListener().\n• None In the end, implement the abstract method.\n\nNote: To run event handling code, use an IDE or install the JDK. Online compilers may throw errors due to the unavailability of certain packages."
    },
    {
        "link": "https://stackoverflow.com/questions/18895049/java-best-practice-for-event-handling-and-reflect-results-back",
        "document": "Since I start to programming in Java, every time when I want to create a GUI and a more complex business logic every time I encounter the same problem.\n• How can you entirely separate the GUI part from the logic part? Edited: Maybe is slightly wrong said \"GUI part from the logic part\". Rather, more correctly is \"GUI part from the listeners part\" because we don't want files with a huge amount of lines like when we wrote anonymous functions or inner classes.\n\nA result can be that:\n\nIf some of you know a better way to do that please tell to me.\n• None How to make the GUI respond with a refresh when an action is taken from? Because in the above example we wrote:\n\nso only button b knows when the action was performed.\n\nIn case that my solution for the first problem is not reliable for the second one please provide a complete solution for this post.\n\nI hope that will be helpful for more people."
    },
    {
        "link": "https://doc.castsoftware.com/export/FBP/SWING+and+AWT+-+Best+Practice",
        "document": "Created by , last modified on Aug 17, 2018\n\nSummary: This document provides a guide based on CAST’s field experience on how to configure Swing and AWT based applications using CAST AIP. These configurations are used all versions of CAST AIP 8.2.x and above for Swing and AWT offering (see Reference Materials below for links) to overcome limitations such as missing links. The applicability of this guide should have assessed for newer versions of CAST AIP and Extension.\n\nThis section gives a brief overview of the framework.\n\nAbstract Window Toolkit (AWT) is Java's original platform-dependent windowing, graphics, and user-interface widget toolkit. From first release of Sun Microsystems Java in 1995, AWT.\n• None\n• Java 1.0 & Java 1.1 - These features are provided by the Abstract Windowing Toolkit (AWT). Java 2D\n• Java 2.0 - Swing is a core part for this release.\n\nAWT existed before JFC. AWT was heavily criticized for being little more than a wrapper around the native graphical capabilities of the host platform.\n\nAn alternative graphics library called the Internet Foundation Classes was developed in more platform-independent code by Netscape.\n\nSame time, another graphics library, called Application Foundation Classes (AFC), was developed independently by Microsoft. It was made to be easier to extend the graphic components, but was primarily aimed for use with the Microsoft Java Virtual Machine.\n\nOn April 2, 1997, Sun Microsystems and Netscape announced their intention to combine IFC with other technologies to form the \"Java Foundation Classes\".[1] It is later renamed to \"Swing\", adding the capability for a pluggable look and feel of the widgets.\n\nVersions of Swing and AWT supported by CAST\n\nThis section highlights the Swing and AWT versions supported by CAST AIP 8.2.x.\n\nThis section highlights all the file types that can be expected to be delivered if the application has implemented this framework.\n\nHow to identify the implementation of Swing and AWT\n\nThis section details the approach for identifying the presence of Swing and AWT in the code delivered.\n\nThis section gives a brief overview of Swing and AWT.\n\nThe Java Foundation Classes (JFC) are a comprehensive set of GUI components and services which dramatically simplify the development and deployment of commercial-quality desktop and Internet/Intranet applications.\n• Swing is the project code name for the lightweight GUI components in JFC.\n• Accessibility API enables Java applications to work with alternate input and output devices such as Screen Readers, Screen Magnifiers, Braille terminals, and others.\n• Java 2D, developers can render, manipulate, and transform complex 2D images and text. Java 2D enables the creation of richer-looking components and applications.\n\nDrag & Drop - Supports dragging and dropping of objects between java program or non-java programs.\n\nHow to configure Swing and AWT in CAST AIP\n\nThis section describes all the CAST configuration steps to be followed in order to configure Swing and AWT based application.\n\nThis section gives an overview of the Enlighten diagram."
    },
    {
        "link": "https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/JFrame.html",
        "document": "An extended version ofthat adds support for the JFC/Swing component architecture. You can find task-oriented documentation about usingin The Java Tutorial, in the section How to Make Frames\n\nThe class is slightly incompatible with . Like all other JFC/Swing top-level containers, a contains a as its only child. The content pane provided by the root pane should, as a rule, contain all the non-menu components displayed by the . This is different from the AWT case. As a convenience, the , , and methods of this class are overridden, so that they delegate calls to the corresponding methods of the . For example, you can add a child component to a frame as follows:\n\nAnd the child will be added to the contentPane. The content pane will always be non-null. Attempting to set it to null will cause the JFrame to throw an exception. The default content pane will have a BorderLayout manager set on it. Refer to for details on adding, removing and setting theof a\n\nUnlike a , a has some notion of how to respond when the user attempts to close the window. The default behavior is to simply hide the JFrame when the user closes the window. To change the default behavior, you invoke the method . To make the behave the same as a instance, use .\n\nFor more information on content panes and other features that root panes provide, see Using Top-Level Containers in The Java Tutorial.\n\nIn a multi-screen environment, you can create a on a different screen device. See for more information.\n\nWarning: Swing is not thread safe. For more information see Swing's Threading Policy.\n\nWarning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans™ has been added to the package. Please see ."
    },
    {
        "link": "https://stackoverflow.com/questions/1234912/how-to-programmatically-close-a-jframe",
        "document": "What's the correct way to get a to close, the same as if the user had hit the close button, or pressed (on Windows)?\n\nI have my default close operation set the way I want, via:\n\nIt does exactly what I want with the aforementioned controls. This question isn't about that.\n\nWhat I really want to do is cause the GUI to behave in the same way as a press of close button would cause it to behave.\n\nSuppose I were to extend , then add an instance of my adapter as a listener via . I would like to see the same sequence of calls through , , and as would occur with the close button. Not so much tearing up the window as telling it to tear itself up, so to speak."
    },
    {
        "link": "https://stackoverflow.com/questions/10468149/jframe-on-close-operation",
        "document": "@Jeffrey has a good answer, but you should consider what you're trying to do. If you really want to do something upon the closing of a frame, then a WindowListener is the way to go. However, if you're looking for a place to do some cleanup and graceful shutdown stuff, then you probably want a shutdown hook instead. Using a WindowListener, the code will only be triggered, as you said, by the user \"clicking on the X\". But what if the user starts the app in the foreground of a terminal and kills it with Ctrl+C? What if the user kills the process from the command line or from a task manager?"
    },
    {
        "link": "https://arstechnica.com/civis/threads/java-swing-window-closing-problems.709648",
        "document": "Hmm... confusion going on here...<br><br>First off, I think you should post the code because unless you add the specific bit of code to exit the program, closing a frame will just hide it, and destroying or disposing of it will not stop the the main class.<br><br>Basically, if you just show() a frame and then click on the X in the corner, it will NOT kill the program that showed the frame unless you added window closing events that call exit(int)<br><br>Meanwhile you could just try to hide() the frame but it's impossible to say exactlky what's happening without more details / relevant piece of code.<br><br><blockquote class=\"ip-ubbcode-quote\">\n\n <font size=\"-1\">quote:</font><hr> We know we could get around this problem by instead of having our class extend JFrame just have it create a new JFrame object and then call destroy() or dispose() on that object <hr>\n\n </blockquote>\n\n <br><br>No.<br><br>Whatever problem you are having would not be solved by this.<br>I won't get into this now but basically the goal of extending a class is to ADD methods to it (or override them).<br><br>Maybe what you meant is that your main method would be in a class and the frame would be another class that extends JFrame ?<br><br>That's what it should be anyway and it's not long to re-write.<br><br><br><br>..so, post the code -- View image here: http://arstechnica.infopop.net/infopop/emoticons/icon_smile.gif --"
    },
    {
        "link": "https://docs.oracle.com/en/java/javase/21/docs/api/java.desktop/javax/swing/JFrame.html",
        "document": "An extended version ofthat adds support for the JFC/Swing component architecture. You can find task-oriented documentation about usingin The Java Tutorial, in the section How to Make Frames\n\nThe class is slightly incompatible with . Like all other JFC/Swing top-level containers, a contains a as its only child. The content pane provided by the root pane should, as a rule, contain all the non-menu components displayed by the . This is different from the AWT case. As a convenience, the , , and methods of this class are overridden, so that they delegate calls to the corresponding methods of the . For example, you can add a child component to a frame as follows:\n\nAnd the child will be added to the contentPane. The content pane will always be non-null. Attempting to set it to null will cause the JFrame to throw an exception. The default content pane will have a BorderLayout manager set on it. Refer to for details on adding, removing and setting theof a\n\nUnlike a , a has some notion of how to respond when the user attempts to close the window. The default behavior is to simply hide the JFrame when the user closes the window. To change the default behavior, you invoke the method . To make the behave the same as a instance, use .\n\nFor more information on content panes and other features that root panes provide, see Using Top-Level Containers in The Java Tutorial.\n\nIn a multi-screen environment, you can create a on a different screen device. See for more information.\n\nWarning: Swing is not thread safe. For more information see Swing's Threading Policy.\n\nWarning: Serialized objects of this class will not be compatible with future Swing releases. The current serialization support is appropriate for short term storage or RMI between applications running the same version of Swing. As of 1.4, support for long term storage of all JavaBeans has been added to the package. Please see ."
    }
]