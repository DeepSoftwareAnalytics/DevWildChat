[
    {
        "link": "https://stackoverflow.com/questions/43517016/tiddlywiki5-and-highlight-js-how-to-change-style-theme-of-syntax-highlightin",
        "document": "I am using TiddlyWiki version 5.1.13. I have added the highlight plugin (version 5.1.13) which uses highlight.js (version 8.8.0).\n\nIn a tiddler I successfully highlight XML like this:\n\nHow can I change the highlight style / theme to one of highlight.js various styles? (Highlight.js styles)"
    },
    {
        "link": "https://discuss.write.as/t/how-to-change-your-code-syntax-highlighting-colors/2283",
        "document": "Write.as currently uses under the hood for code syntax highlighting but they use a particular theme called , which, as the name suggests, is a light theme.\n\nNow, as a professional developer, I never use light themes since it strains my eyes after some time. Knowing my target audience (developers) would think the same, I figured I should change it.\n\nHere’s the thing, has custom CSS themes which you can find here. It’s a big list but for my site, I wanted to use the theme (which is what I used to use in VSCode). So you do a quick search and find the appropriate CSS file.\n\nNow here’s the catch, you cannot modify Write.as’ HTML so you cannot add the code the CDN is giving you. What you can do is add custom CSS so you can go straight to the file in your browser and it will look something like this:\n\nRight now the code is minified and we’ll need to prettify it first, so copy and paste the code and pass it through here. You’ll get a nice chunk of readable CSS code. Go and paste that on the Custom CSS section in your blog.\n\nYou’ll notice that it doesn’t work, the styles are not being applied. The problem? Write.as’ theme has a higher CSS specificity than our CSS code so you’ll have to go through each CSS rule and add at the end. It’ll end up looking something like this:\n\nNow save, refresh, and viola, you have a new code syntax highlighting theme .\n\nImportant note: the new theme will only be visible on your blog, not in an anonymous post. Something to keep in mind."
    },
    {
        "link": "https://medium.com/@hizacharylee/simplify-syntax-highlighting-with-highlight-js-b65af3bdc509",
        "document": "highlight.js is a popular and powerful syntax highlighting library for the web, which automatically detects the language of code snippets and applies appropriate styles to make them more readable. It supports more than 180 languages and comes with a variety of themes to match your website’s design.\n\nThe first step in using highlight.js is to install it in your project. You can do this in several ways:\n\nCDN: Include the following script and CSS tags in the head of your HTML document:\n\nThen, import it into your JavaScript file:\n\nAfter installing highlight.js, you can start using it by applying it to code blocks in your HTML. First, wrap your code blocks with the tags, and add a class to the tag, where is the language you want to highlight. For example:\n\nNext, add the following JavaScript code to initialize highlight.js:\n\nThis code waits for the DOM to be loaded and then iterates over all blocks, applying syntax highlighting.\n\nhighlight.js comes with a variety of built-in themes that you can choose from. To use a different theme, simply replace the default CSS file with the one corresponding to the theme you want. For example, to use the Github Dark theme, replace the default CSS link with the following:\n\nOr, if you’re using npm:\n\nA list of available themes can be found in the highlight.js GitHub repository.\n\nIf you want to create your own custom theme, you can do so by writing your own CSS file and linking to it in your HTML document. The key to creating a custom theme is understanding the CSS classes used by highlight.js. Here is a basic example:\n\nBy default, highlight.js attempts to automatically detect the language of your code snippets. While this can be convenient, it can also lead to incorrect language detection and slower performance. To improve accuracy and performance, you can disable autodetection and specify the language explicitly.\n\nHowever, if you still want to use autodetection, you can optimize the process by limiting the languages that highlight.js checks against. To do this, create a custom build of highlight.js that only includes the languages you need. Visit the highlight.js custom package builder and select the languages you want to include in your build. This will generate a custom script and CSS file that you can use in your project.\n\nhighlight.js supports plugins that extend its functionality. Some popular plugins include:\n• Copy to clipboard: Adds a “Copy to clipboard” button to code blocks.\n\nTo use a plugin, include its script and CSS files in your project, and follow the plugin’s documentation for initialization and usage.\n\nSome languages have specific settings or features that you can enable to improve syntax highlighting. For example, in JavaScript, you can enable the “es.next” option to support modern ECMAScript features:\n\nCheck the highlight.js documentation and GitHub issues for language-specific tips and discussions.\n\nTo use highlight.js in a React application, you can create a custom component that wraps the tags and applies syntax highlighting. The create a new component:\n\nNow you can use the component in your React app:\n\nTo use highlight.js in a Vue application, you can create a custom component. The create a new component:\n\nNow you can use the component in your Vue app:\n\nIf you encounter any issues while using highlight.js, consider the following troubleshooting steps:\n• Ensure that you have properly installed highlight.js and included the necessary script and CSS files.\n• Check that your tags have the correct class and that your code is wrapped correctly.\n• Verify that your custom theme or plugin files are properly linked and configured.\n• Review the highlight.js documentation and GitHub issues for any known issues or solutions related to your specific language or use case.\n\nThanks for reading. If you like such stories and want to support me, please consider becoming a Medium member. It costs $5 per month and gives unlimited access to Medium content. I’ll get a little commission if you sign up via my link."
    },
    {
        "link": "https://highlightjs.org",
        "document": "highlight.js can be used in different ways such using CDNs, hosting the bundle yourself, as a Vue plug-in, as ES6 modules, with Node.js, and web workers.\n\nSee our README on GitHub for more details.\n\nHighlight.js can be used with Node on the server. The first step is to install the package from npm:\n\nNow, it's possible to use the library using either or . By default, when you import the main package, all 192 languages will be loaded automatically.\n\nHowever, importing all our languages will increase the size of your bundle. If you only need a few languages, you can import them individually:\n\nAnd finally, regardless of how you imported the library, you can highlight code with the or functions:\n\nFor more details, see the \"Importing the Library\" section of our README."
    },
    {
        "link": "https://github.com/orgs/marp-team/discussions/304",
        "document": "To see all available qualifiers, see our documentation .\n\nSaved searches Use saved searches to filter your results more quickly\n\nWe read every piece of feedback, and take your input very seriously.\n\nYou signed in with another tab or window. Reload to refresh your session.\n\nYou signed out in another tab or window. Reload to refresh your session.\n\nYou switched accounts on another tab or window. Reload to refresh your session."
    },
    {
        "link": "https://medium.com/@hizacharylee/simplify-syntax-highlighting-with-highlight-js-b65af3bdc509",
        "document": "highlight.js is a popular and powerful syntax highlighting library for the web, which automatically detects the language of code snippets and applies appropriate styles to make them more readable. It supports more than 180 languages and comes with a variety of themes to match your website’s design.\n\nThe first step in using highlight.js is to install it in your project. You can do this in several ways:\n\nCDN: Include the following script and CSS tags in the head of your HTML document:\n\nThen, import it into your JavaScript file:\n\nAfter installing highlight.js, you can start using it by applying it to code blocks in your HTML. First, wrap your code blocks with the tags, and add a class to the tag, where is the language you want to highlight. For example:\n\nNext, add the following JavaScript code to initialize highlight.js:\n\nThis code waits for the DOM to be loaded and then iterates over all blocks, applying syntax highlighting.\n\nhighlight.js comes with a variety of built-in themes that you can choose from. To use a different theme, simply replace the default CSS file with the one corresponding to the theme you want. For example, to use the Github Dark theme, replace the default CSS link with the following:\n\nOr, if you’re using npm:\n\nA list of available themes can be found in the highlight.js GitHub repository.\n\nIf you want to create your own custom theme, you can do so by writing your own CSS file and linking to it in your HTML document. The key to creating a custom theme is understanding the CSS classes used by highlight.js. Here is a basic example:\n\nBy default, highlight.js attempts to automatically detect the language of your code snippets. While this can be convenient, it can also lead to incorrect language detection and slower performance. To improve accuracy and performance, you can disable autodetection and specify the language explicitly.\n\nHowever, if you still want to use autodetection, you can optimize the process by limiting the languages that highlight.js checks against. To do this, create a custom build of highlight.js that only includes the languages you need. Visit the highlight.js custom package builder and select the languages you want to include in your build. This will generate a custom script and CSS file that you can use in your project.\n\nhighlight.js supports plugins that extend its functionality. Some popular plugins include:\n• Copy to clipboard: Adds a “Copy to clipboard” button to code blocks.\n\nTo use a plugin, include its script and CSS files in your project, and follow the plugin’s documentation for initialization and usage.\n\nSome languages have specific settings or features that you can enable to improve syntax highlighting. For example, in JavaScript, you can enable the “es.next” option to support modern ECMAScript features:\n\nCheck the highlight.js documentation and GitHub issues for language-specific tips and discussions.\n\nTo use highlight.js in a React application, you can create a custom component that wraps the tags and applies syntax highlighting. The create a new component:\n\nNow you can use the component in your React app:\n\nTo use highlight.js in a Vue application, you can create a custom component. The create a new component:\n\nNow you can use the component in your Vue app:\n\nIf you encounter any issues while using highlight.js, consider the following troubleshooting steps:\n• Ensure that you have properly installed highlight.js and included the necessary script and CSS files.\n• Check that your tags have the correct class and that your code is wrapped correctly.\n• Verify that your custom theme or plugin files are properly linked and configured.\n• Review the highlight.js documentation and GitHub issues for any known issues or solutions related to your specific language or use case.\n\nThanks for reading. If you like such stories and want to support me, please consider becoming a Medium member. It costs $5 per month and gives unlimited access to Medium content. I’ll get a little commission if you sign up via my link."
    },
    {
        "link": "https://highlightjs.org/examples",
        "document": "Author Name, <author@domain.foo> you can write text [ ], optionally using an explicit link: [ ]. single quotes around a phrase place alternatively, you can put underlines around a phrase to add astericks around a phrase make the text pluses around a phrase make it quotes using a leading backtick and trailing single quote use two of each for double quotes escape characters are supported you can escape a quote inside emphasized text like definition another definition Let's make a break. ''' Want to see a image:: [ ]? ++++ ++++ another quote: ____ When you have eliminated all which is impossible, then whatever remains, however improbable, must be the truth. ____ want to get literal? prefix a line with a space. one thing (yeah!) two thing , and wipee! AsciiDoc is quite cool, you should try it. AsciiDoc"
    },
    {
        "link": "https://polarhedgehog.com/blog/syntax-code-blocks-in-webflow-cms",
        "document": "Adding beautifully styled code blocks with syntax highlighting to your Webflow CMS website is a great way to enhance the user experience. In this guide, we'll walk you through how to integrate Highlight.js into your Webflow project to achieve this, along with adding a 'Copy Code' button to make it even more user-friendly.\n\nTo begin, you need to add the Highlight.js library to your website. This library provides the syntax highlighting functionality for your code blocks.\n• Navigate to your CMS Collection page settings in Webflow.\n• Paste the following script just before the closing </body> tag:\n\nHighlight.js offers various themes to style your code blocks. Here's how to add a theme:\n\n1. To use the default style, go to your CMS Collection page settings and paste this link inside the <head> tag:\n\n2. If you want to explore more styles, visit the Highlight.js demo page to test different themes. Once you find the theme that suits your website, head over to Highlight.js GitHub to find the corresponding CSS file.\n\nCopy the file name from the URL after /styles/ and replace it in your link.\n\nImportant note: It should always end with .min.css.\n\nTo implement syntax highlighting, you need to create code blocks within a Rich Text field in your CMS item. Follow these steps:\n• Add a new Embed element in the Rich Text editor and paste this code:\n• Use an HTML Escape tool like Code Beautify to prevent your code from executing and ensure it displays correctly on the page. Paste the escaped code between the <code> tags. \n\nNote: You don't need to use the HTML Escape tool for CSS and SQL. ‍\n• Once done, publish your site to see your newly styled code blocks!\n\nImportant Note: To ensure that your code blocks don't disrupt your website's layout, it’s crucial to set a maximum width for the rich text element. This prevents long lines of code from stretching beyond their container and potentially breaking the design.\n\nTo enhance the user experience, consider adding a 'Copy Code' button that allows users to quickly copy code snippets to their clipboard. Here are two different scripts you can use:\n\nDecide whether you want a text-based button or an icon-based button and paste the relevant script before the closing </body> tag on your page. Below are two script options:\n\nTo make the ‘Copy Code’ button visually appealing and consistent with your website’s design, you’ll need to add some custom CSS. You can further customize the button’s appearance by modifying the CSS properties to better match your site’s design.\n\nTo customize the appearance of different elements within your Highlight.js code block, you can apply specific styles to the Highlight.js CSS classes. Below is a guide to custom styling for various code elements, including comments, numbers, keywords, and more.\n• Base Code Block Styling: To style the entire code block, use the .hljs class\n• Specific Element Styling:\n• Comments, Invisibles, Line Highlighting (.hljs-comment): To style comments and other less visible text\n\nAdd the above styles in your Webflow project through an Embed element or in the Project Settings under the 'Custom Code' section. Publish the changes to apply custom styles to your code blocks. This will give you control over how different parts of your code are styled.\n\nAt Polar, we've found that enhancing our clients' websites with Highlight.js and custom styling is a game-changer for showcasing code snippets. It's become our go-to method for improving both functionality and visual appeal. The \"Copy\" button we add is always a hit, making it a breeze for users to grab code quickly. Plus, we love how customizing the appearance of different code elements lets us align the styling with each client's unique brand while keeping things readable.\n\nWe've streamlined the process of implementing these changes in Webflow, making it a smooth part of our workflow. This approach helps us create engaging and professional presentations for any technical content.\n\nBy following these steps in your own projects, you'll give your users the polished, interactive experience we strive for in all our builds. We've seen firsthand how these small touches can significantly boost user engagement and satisfaction. So go ahead, give it a try – we think you'll love the results as much as we (and our clients) do!"
    },
    {
        "link": "https://discuss.write.as/t/how-to-change-your-code-syntax-highlighting-colors/2283",
        "document": "Write.as currently uses under the hood for code syntax highlighting but they use a particular theme called , which, as the name suggests, is a light theme.\n\nNow, as a professional developer, I never use light themes since it strains my eyes after some time. Knowing my target audience (developers) would think the same, I figured I should change it.\n\nHere’s the thing, has custom CSS themes which you can find here. It’s a big list but for my site, I wanted to use the theme (which is what I used to use in VSCode). So you do a quick search and find the appropriate CSS file.\n\nNow here’s the catch, you cannot modify Write.as’ HTML so you cannot add the code the CDN is giving you. What you can do is add custom CSS so you can go straight to the file in your browser and it will look something like this:\n\nRight now the code is minified and we’ll need to prettify it first, so copy and paste the code and pass it through here. You’ll get a nice chunk of readable CSS code. Go and paste that on the Custom CSS section in your blog.\n\nYou’ll notice that it doesn’t work, the styles are not being applied. The problem? Write.as’ theme has a higher CSS specificity than our CSS code so you’ll have to go through each CSS rule and add at the end. It’ll end up looking something like this:\n\nNow save, refresh, and viola, you have a new code syntax highlighting theme .\n\nImportant note: the new theme will only be visible on your blog, not in an anonymous post. Something to keep in mind."
    },
    {
        "link": "https://stackoverflow.com/questions/1647724/color-syntax-highlighting-within-an-html-code-tag",
        "document": "In a code fragment like the following ...\n\n... its various keywords and so on are color-coded when they're displayed in my browsers.\n\nWhen I do \"View source\", I don't see anything special in the HTML that would implement this color-coding.\n\nHow and/or where is this syntax-specific color-highlighting implemented, then? For example is it built-in to the browsers, or is it implemented by site-specific JavaScript editing the DOM within the browsers?\n\nI find this a difficult question to Google for."
    }
]