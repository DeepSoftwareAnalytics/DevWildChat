[
    {
        "link": "https://codelabs.developers.google.com/codelabs/cloud-translation-csharp",
        "document": "Google Cloud Translation API provides a simple programmatic interface for dynamically translating an arbitrary string into any supported language using state-of-the-art Neural Machine Translation. It can also be used to detect language in cases where the source language is unknown. In this codelab, you will focus on using the Translation API with C#. You will learn how to list available languages, translate text and also detect language of a given text.\n• How to use the Cloud Shell\n• How to enable the Translation API\n• How to install the Google Cloud client library for C#\n• How to list available languages How will you use this tutorial? Read it through only Read it and complete the exercises How would you rate your experience with C#? How would you rate your experience with using Google Cloud Platform services?\n• Sign-in to the Google Cloud Console and create a new project or reuse an existing one. If you don't already have a Gmail or Google Workspace account, you must create one.\n• The Project name is the display name for this project's participants. It is a character string not used by Google APIs. You can always update it.\n• The Project ID is unique across all Google Cloud projects and is immutable (cannot be changed after it has been set). The Cloud Console auto-generates a unique string; usually you don't care what it is. In most codelabs, you'll need to reference your Project ID (typically identified as ). If you don't like the generated ID, you might generate another random one. Alternatively, you can try your own, and see if it's available. It can't be changed after this step and remains for the duration of the project.\n• For your information, there is a third value, a Project Number, which some APIs use. Learn more about all three of these values in the documentation. Caution: A project ID is globally unique and can't be used by anyone else after you've selected it. You are the only user of that ID. Even if a project is deleted, the ID can't be used again Note: If you use a Gmail account, you can leave the default location set to No organization. If you use a Google Workspace account, choose a location that makes sense for your organization.\n• Next, you'll need to enable billing in the Cloud Console to use Cloud resources/APIs. Running through this codelab won't cost much, if anything at all. To shut down resources to avoid incurring billing beyond this tutorial, you can delete the resources you created or delete the project. New Google Cloud users are eligible for the $300 USD Free Trial program. While Google Cloud can be operated remotely from your laptop, in this codelab you will be using Google Cloud Shell, a command line environment running in the Cloud. From the Google Cloud Console, click the Cloud Shell icon on the top right toolbar: It should only take a few moments to provision and connect to the environment. When it is finished, you should see something like this: This virtual machine is loaded with all the development tools you'll need. It offers a persistent 5GB home directory, and runs on Google Cloud, greatly enhancing network performance and authentication. All of your work in this codelab can be done within a browser. You do not need to install anything.\n\nBefore you can begin using the Translation API, you must enable the API. You can enable the API by using the following command in the Cloud Shell: Note: If this command ERRORs, check that the current Project ID matches your codelab Project ID. Use the following command to find the current Project ID being used by Cloud Shell: If the Project ID is not correct, use the following command to use the correct Project ID:\n\n4. Install the Google Cloud Translation API client library for C# First, create a simple C# console application that you will use to run Translation API samples. Next, navigate to folder and add NuGet package to the project: Now, you're ready to use the Translation API!\n\nIn this section, you will first list all available languages in the Translation API. First, open the code editor from the top right side of the Cloud Shell: Navigate to the file inside the folder and replace the code with the following: Take a minute or two to study the code*.* Note that we are listing the language names in English but it can be listed in any language. Back in Cloud Shell, run the app. You should see the following output: Note: If this C# code does not work for you, verify the instructions you performed during Authenticate API requests step. Using the following command to verify the value of environment variable: It should output the value If it does, next check that a service account was created and is located at by using: You should see something similar to: If you don't, revisit the Authenticate API requests step. In this step, you were able to list all available languages in Translation API. You can find the complete list of supported languages on the Language Support page.\n\nYou can use Translate API to translate a text in one language into another language. Text is translated using the Neural Machine Translation (NMT) model. If the NMT model is not supported for the requested language translation pair, then the Phrase-Based Machine Translation (PBMT) model is used. To translate text, navigate to the file inside the folder and replace the code with the following: Take a minute or two to study the code. It translates the text \"Hello World\" from English to Turkish*.* Back in Cloud Shell, run the app. You should see the following output: In this step, you were able to use Translation API to translate a text from English to Turkish. Read more about Translating text.\n\nYou can use Translate API to also detect the language of a text string. To detect language, navigate to the file inside the folder and replace the code with the following: Take a minute or two to study the code. It detects the language of the text \"Selam Dünya!\" which happens to be a Turkish phrase*.* Back in Cloud Shell, run the app. You should see the following output: In this step, you were able to detect the language of a piece of text using Translation API. Read more about Detecting language."
    },
    {
        "link": "https://learn.microsoft.com/en-us/azure/ai-services/translator/document-translation/how-to-guides/use-rest-api-programmatically",
        "document": "Document Translation is a cloud-based feature of the Azure AI Translator service. You can use the Document Translation API to asynchronously translate whole documents in supported languages and various file formats while preserving source document structure and text formatting. In this how-to guide, you learn to use Document Translation APIs with a programming language of your choice and the HTTP REST API.\n\nTo get started, you need:\n• None An active Azure account. If you don't have one, you can create a free account\n• None An Azure Blob Storage account. You also need to create containers in your Azure Blob Storage account for your source and target files:\n• Source container. This container is where you upload your files for translation (required).\n• Target container. This container is where your translated files are stored (required).\n• Complete the Translator project and instance details fields as follows:\n• None Subscription. Select one of your available Azure subscriptions.\n• None Resource Group. You can create a new resource group or add your resource to an existing resource group that shares the same lifecycle, permissions, and policies.\n• None Resource Region. Choose Global unless your business or application requires a specific region. If you're planning on using a system-assigned managed identity for authentication, choose a geographic region like West US.\n• None Name. Enter the name you chose for your resource. The name you choose must be unique within Azure. Document Translation requires a custom domain endpoint. The value that you enter in the Name field is the custom domain name parameter for your endpoint.\n• None Pricing tier. Document Translation isn't supported in the free tier. To try the service, select Standard S1.\n• None Review the service terms and select Create to deploy your resource.\n• None After your resource successfully deploys, select Go to resource to retrieve your key and endpoint.\n• Requests to the Translator service require a read-only key and custom endpoint to authenticate access. The custom domain endpoint is a URL formatted with your resource name, hostname, and Translator subdirectories and is available in the Azure portal.\n• None If you created a new resource, after it deploys, select Go to resource. If you have an existing Document Translation resource, navigate directly to your resource page.\n• None In the left rail, under Resource Management, select Keys and Endpoint.\n• None Copy and paste your and in a convenient location, such as Microsoft Notepad. Only one key is necessary to make an API call.\n• None You and into the code samples to authenticate your request to the Document Translation service.\n\nRequests to the Translator service require a read-only key for authenticating access.\n• If you created a new resource, after it deploys, select Go to resource. If you have an existing Document Translation resource, navigate directly to your resource page.\n• In the left rail, under Resource Management, select Keys and Endpoint.\n• Copy and paste your key in a convenient location, such as Microsoft Notepad.\n• You paste it into the code sample to authenticate your request to the Document Translation service.\n\nYou need to create containers in your Azure Blob Storage account for source and target files.\n• Source container. This container is where you upload your files for translation (required).\n• Target container. This container is where your translated files are stored (required).\n\nThe , , and optional must include a Shared Access Signature (SAS) token, appended as a query string. The token can be assigned to your container or specific blobs. See Create SAS tokens for Document Translation process.\n• Your source container or blob must designate read and list access.\n• Your target container or blob must designate write and list access.\n• Your glossary blob must designate read and list access.\n\nAn asynchronous batch translation request is submitted to your Translator service endpoint via a POST request. If successful, the POST method returns a response code and the service creates a batch request. The translated documents are listed in your target container.\n\nFor detailed information regarding Azure AI Translator Service request limits, see Document Translation request limits.\n\nThe following headers are included with each Document Translation API request:\n• The object contains both and container addresses for your source and target language pairs.\n• The and are case-sensitive strings to filter documents in the source path for translation. The field is often used to delineate subfolders for translation. The field is most often used for file extensions.\n• A value for the field (optional) is applied when the document is being translated.\n• The for each target language must be unique.\n• If you aren't using a system-assigned managed identity for authentication, make sure you created source URL & SAS tokens for the specific blob/document (not for the container).\n• Ensure you specified the target filename as part of the target URL – though the SAS token is still for the container.\n• This sample request returns a single document translated into two target languages.\n• You can find the job in the POST method response Header URL value. The alphanumeric string following the parameter is the operation's job :\n• You can also use a get-translations-status request to retrieve a list of translation jobs and their s.\n\nRetrieve a list of supported file formats. If successful, this method returns a response code.\n\nGet the current status for a single job and a summary of all jobs in a Document Translation request. If successful, this method returns a response code.\n\nRetrieve the status for a specific document in a Document Translation request. If successful, this method returns a response code.\n\nCancel currently processing or queued job. Only documents for which translation isn't started are canceled."
    },
    {
        "link": "https://learn.microsoft.com/en-us/azure/ai-services/translator/document-translation/quickstarts/client-library-sdks",
        "document": "Document Translation is a cloud-based feature of the Azure AI Translator service that asynchronously translates whole documents in supported languages and various file formats. In this quickstart, learn to use Document Translation with a programming language of your choice to translate a source document into a target language while preserving structure and text formatting.\n\nTo get started, you need:\n• None An active Azure account. If you don't have one, you can create a free account.\n• None A single-service Azure AI Translator resource (not a multi-service Azure AI services resource). If you're planning on using the Document Translation feature with managed identity authorization, choose a geographic region such as East US. Select the Standard S1 Standard Service Plan (Pay-as-you-go) or C2, C3, C4, or D3 Volume Discount Plans.\n• None An Azure Blob Storage account. You'll create containers in your Azure Blob Storage account for your source and target files:\n• Source container. This container is where you upload your files for translation (required).\n• Target container. This container is where your translated files are stored (required).\n\nYou can choose one of the following options to authorize access to your Azure AI Translator resource.\n\n✔️ Managed Identity. A managed identity is a service principal that creates a Microsoft Entra identity and specific permissions for an Azure managed resource. Managed identities enable you to run your Azure AI Translator application without having to embed credentials in your code. Managed identities are a safer way to grant access to storage data and replace the requirement for you to include shared access signature tokens (SAS) with your source and target URLs.\n\nTo learn more, see Managed identities for Document Translation.\n\n✔️ Shared Access Signature (SAS). A shared access signature is a URL that grants restricted access for a specified period of time to your Translator service. To use this method, you need to create Shared Access Signature (SAS) tokens for your source and target containers. The and must include a Shared Access Signature (SAS) token, appended as a query string. The token can be assigned to your container or specific blobs.\n• Your source container or blob must designate read and list access.\n• Your target container or blob must designate write and list access.\n\nTo learn more, see Create SAS tokens.\n\nThere are several tools available for creating, building, and running Translator C#/.NET applications. Here, we guide you through using either the command-line interface (CLI) or Visual Studio. Select one of following tabs to get started: In a console window (such as cmd, PowerShell, or Bash), use the command to create a new console app with the name . This command creates a simple \"Hello World\" C# project with a single source file: Program.cs. Change your directory to the newly created app folder. Build your application with the following command: The build output should contain no warnings or errors. Within the application directory, install the Document Translation client library for .NET:\n• None For this project, you need a source document uploaded to your source container. You can download our document translation sample document for this quickstart. The source language is English.\n• None From the project directory, open the Program.cs file in your preferred editor or IDE. Delete the pre-existing code, including the line .\n• None In the application's Program.cs , create variables for your key and custom endpoint. For more information, see Retrieve your key and custom domain endpoint.\n• None Call the method to Start a translation operation for one or more documents in a single blob container.\n• None To call , you need to initialize a object that contains the , , and parameters:\n• \n• None sourceUri. The URL for the source container containing documents to be translated.\n• None targetUri The URL for the target container to which the translated documents are written.\n• None targetLanguageCode. The language code for the translated documents. You can find language codes on our Language support page. To find your source and target URLs, navigate to your storage account in the Azure portal. In the left sidebar, under Data storage , select Containers, and follow these steps to retrieve your source documents and target container . 1. Select the checkbox next to the source container 1. Select the checkbox next to the target container. 2. From the main window area, select a file or documents for translation. 2. Select the ellipses located at the right, then choose Properties. 3. The source URL is located at the top of the Properties list. 3. The target URL is located at the top of the Properties list.\n• \n• sourceUri. The SAS URI, with a SAS token appended as a query string, for the source container containing documents to be translated.\n• targetUri The SAS URI, with a SAS token appended as a query string, for the target container to which the translated documents are written.\n• targetLanguageCode. The language code for the translated documents. You can find language codes on our Language support page. Remember to remove the key from your code when you're done, and never post it publicly. For production, use a secure way of storing and accessing your credentials like Azure Key Vault. For more information, see Azure AI services security. Enter the following code sample into your application's Program.cs file: using Azure; using Azure.AI.Translation.Document; using System; using System.Threading; using System.Text; class Program { // create variables for your custom endpoint and resource key private static readonly string endpoint = \"<your-document-translation-endpoint>\"; private static readonly string key = \"<your-key>\"; static async Task Main(string[] args) { // create variables for your sourceUrl, targetUrl, and targetLanguageCode Uri sourceUri = new Uri(\"<sourceUrl>\"); Uri targetUri = new Uri(\"<targetUrl>\"); string targetLanguage = \"<targetLanguageCode>\" // initialize a new instance of the DocumentTranslationClient object to interact with the Document Translation feature DocumentTranslationClient client = new DocumentTranslationClient(new Uri(endpoint), new AzureKeyCredential(key)); // initialize a new instance of the `DocumentTranslationInput` object to provide the location of input for the translation operation DocumentTranslationInput input = new DocumentTranslationInput(sourceUri, targetUri, targetLanguage); // initialize a new instance of the DocumentTranslationOperation class to track the status of the translation operation DocumentTranslationOperation operation = await client.StartTranslationAsync(input); await operation.WaitForCompletionAsync(); Console.WriteLine($\" Status: {operation.Status}\"); Console.WriteLine($\" Created on: {operation.CreatedOn}\"); Console.WriteLine($\" Last modified: {operation.LastModified}\"); Console.WriteLine($\" Total documents: {operation.DocumentsTotal}\"); Console.WriteLine($\" Succeeded: {operation.DocumentsSucceeded}\"); Console.WriteLine($\" Failed: {operation.DocumentsFailed}\"); Console.WriteLine($\" In Progress: {operation.DocumentsInProgress}\"); Console.WriteLine($\" Not started: {operation.DocumentsNotStarted}\"); await foreach(DocumentStatusResult document in operation.Value) { Console.WriteLine($\"Document with Id: {document.Id}\"); Console.WriteLine($\" Status:{document.Status}\"); if (document.Status == DocumentTranslationStatus.Succeeded) { Console.WriteLine($\" Translated Document Uri: {document.TranslatedDocumentUri}\"); Console.WriteLine($\" Translated to language: {document.TranslatedToLanguageCode}.\"); Console.WriteLine($\" Document source Uri: {document.SourceDocumentUri}\"); } else { Console.WriteLine($\" Error Code: {document.Error.Code}\"); Console.WriteLine($\" Message: {document.Error.Message}\"); } } } } Once you add the code sample to your application, run your application from the project directory by typing the following command in your terminal: You can download our document translation sample document for this quickstart. The source language is English. using Azure; using Azure.AI.Translation.Document; using System; using System.Threading; using System.Text; class Program { string endpoint = \"{your-document-translation-endpoint}\"; string apiKey = \"{your-api-key}\"; SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(new Uri(endpoint), new AzureKeyCredential(apiKey)); try { string filePath = @\"C:\\{folder}\\document.txt\" using Stream fileStream = File.OpenRead(filePath); // MultipartFormFileData (string name, System.IO.Stream content, string contentType); var sourceDocument = new MultipartFormFileData(Path.GetFileName(filePath), fileStream, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"); DocumentTranslateContent content = new DocumentTranslateContent(sourceDocument); // DocumentTranslate (string targetLanguage, Azure.AI.Translation.Document.DocumentTranslateContent documentTranslateContent, string sourceLanguage = default, string category = default, bool? allowFallback = default, System.Threading.CancellationToken cancellationToken = default); var response = client.DocumentTranslate(\"de\", content); Console.WriteLine($\"Request string for translation: {requestString}\"); Console.WriteLine($\"Response string after translation: {responseString}\"); } catch (RequestFailedException exception) { Console.WriteLine($\"Error Code: {exception.ErrorCode}\"); Console.WriteLine($\"Message: {exception.Message}\"); } } For this quickstart, we use the latest version of Visual Studio IDE to build and run the application.\n• None On the Get started page, choose Create a new project.\n• None On the Create a new project page, enter console in the search box. Choose the Console Application template, then choose Next.\n• None In the Configure your new project dialog window, enter in the Project name box. Then choose Next.\n• None In the Additional information dialog window, select .NET 6.0 (Long-term support), and then select Create.\n• None Right-click on your Translator-text-sdk project and select Manage NuGet Packages...\n• None Select and install the package in your project.\n• Starting with .NET 6, new projects using the template generate a new program style that differs from previous versions.\n• The new output uses recent C# features that simplify the code you need to write.\n• When you use the newer version, you only need to write the body of the method. You don't need to include top-level statements, global using directives, or implicit using directives.\n• For more information, see New C# templates generate top-level statements.\n• None In the application's Program.cs , create variables for your key and custom endpoint. For more information, see Retrieve your key and custom domain endpoint.\n• None To Start a translation operation for one or more documents in a single blob container, call the method.\n• None To call , you need to initialize a object that contains the and parameters:\n• \n• None sourceUri. The URL for the source container containing documents to be translated.\n• None targetUri The URL for the target container to which the translated documents are written.\n• None targetLanguageCode. The language code for the translated documents. You can find language codes on our Language support page. To find your source and target URLs, navigate to your storage account in the Azure portal. In the left sidebar, under Data storage , select Containers, and follow these steps to retrieve your source documents and target container . 1. Select the checkbox next to the source container 1. Select the checkbox next to the target container. 2. From the main window area, select a file or documents for translation. 2. Select the ellipses located at the right, then choose Properties. 3. The source URL is located at the top of the Properties list. 3. The target URL is located at the top of the Properties list.\n• \n• sourceUri. The SAS URI, with a SAS token appended as a query string, for the source container containing documents to be translated.\n• targetUri The SAS URI, with a SAS token appended as a query string, for the target container to which the translated documents are written.\n• targetLanguageCode. The language code for the translated documents. You can find language codes on our Language support page. Remember to remove the key from your code when you're done, and never post it publicly. For production, use a secure way of storing and accessing your credentials like Azure Key Vault. For more information, see Azure AI services security. Enter the following code sample into your application's Program.cs file: using Azure; using Azure.AI.Translation.Document; class Program { // create variables for your custom endpoint and resource key private static readonly string endpoint = \"<your-document-translation-endpoint>\"; private static readonly string key = \"<your-key>\"; static async Task Main(string[] args) { // create variables for your sourceUrl, targetUrl, and targetLanguageCode Uri sourceUri = new Uri(\"<sourceUrl>\"); Uri targetUri = new Uri(\"<targetUrl>\"); string targetLanguage = \"<targetLanguageCode>\"; // initialize a new instance of the DocumentTranslationClient object to interact with the Document Translation feature DocumentTranslationClient client = new DocumentTranslationClient(new Uri(endpoint), new AzureKeyCredential(key)); // initialize a new instance of the `DocumentTranslationInput` object to provide source and target locations and target language for the translation operation DocumentTranslationInput input = new DocumentTranslationInput(sourceUri, targetUri, targetLanguage); // initialize a new instance of the DocumentTranslationOperation class to track the status of the translation operation DocumentTranslationOperation operation = await client.StartTranslationAsync(input); await operation.WaitForCompletionAsync(); Console.WriteLine($\" Status: {operation.Status}\"); Console.WriteLine($\" Created on: {operation.CreatedOn}\"); Console.WriteLine($\" Last modified: {operation.LastModified}\"); Console.WriteLine($\" Total documents: {operation.DocumentsTotal}\"); Console.WriteLine($\" Succeeded: {operation.DocumentsSucceeded}\"); Console.WriteLine($\" Failed: {operation.DocumentsFailed}\"); Console.WriteLine($\" In Progress: {operation.DocumentsInProgress}\"); Console.WriteLine($\" Not started: {operation.DocumentsNotStarted}\"); await foreach(DocumentStatusResult document in operation.Value) { Console.WriteLine($\"Document with Id: {document.Id}\"); Console.WriteLine($\" Status:{document.Status}\"); if (document.Status == DocumentTranslationStatus.Succeeded) { Console.WriteLine($\" Translated Document Uri: {document.TranslatedDocumentUri}\"); Console.WriteLine($\" Translated to language: {document.TranslatedToLanguageCode}.\"); Console.WriteLine($\" Document source Uri: {document.SourceDocumentUri}\"); } else { Console.WriteLine($\" Error Code: {document.Error.Code}\"); Console.WriteLine($\" Message: {document.Error.Message}\"); } } } } Once you add the code sample to your application, choose the green Start button next to formRecognizer_quickstart to build and run your program, or press F5. You can download our document translation sample document for this quickstart. The source language is English. using Azure; using Azure.AI.Translation.Document; using System; using System.Threading; using System.Text; class Program { string endpoint = \"{your-document-translation-endpoint}\"; string apiKey = \"{your-api-key}\"; SingleDocumentTranslationClient client = new SingleDocumentTranslationClient(new Uri(endpoint), new AzureKeyCredential(apiKey)); try { string filePath = @\"C:\\{folder}\\document-translation-sample.docx\" using Stream fileStream = File.OpenRead(filePath); // MultipartFormFileData (string name, System.IO.Stream content, string contentType); var sourceDocument = new MultipartFormFileData(Path.GetFileName(filePath), fileStream, \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"); DocumentTranslateContent content = new DocumentTranslateContent(sourceDocument); // DocumentTranslate (string targetLanguage, Azure.AI.Translation.Document.DocumentTranslateContent documentTranslateContent, string sourceLanguage = default, string category = default, bool? allowFallback = default, System.Threading.CancellationToken cancellationToken = default); var response = client.DocumentTranslate(\"de\", content); Console.WriteLine($\"Request string for translation: {requestString}\"); Console.WriteLine($\"Response string after translation: {responseString}\"); } catch (RequestFailedException exception) { Console.WriteLine($\"Error Code: {exception.ErrorCode}\"); Console.WriteLine($\"Message: {exception.Message}\"); } } That's it! You just created a program to translate documents in a storage container using the .NET client library.\n\nMake sure that the latest version of Python is installed. Install the latest version of the Document Translation client library:\n• None For this project, you need a source document uploaded to your source container. You can download our document translation sample document for this quickstart. The source language is English.\n• None In your Python application file, create variables for your resource key and custom endpoint. For more information, see Retrieve your key and custom domain endpoint.\n• None Initialize a object that contains your and parameters.\n• None Call the method and pass in the , , and parameters.\n• \n• None sourceUri. The URL for the source container containing documents to be translated.\n• None targetUri The URL for the target container to which the translated documents are written.\n• None targetLanguageCode. The language code for the translated documents. You can find language codes on our Language support page. To find your source and target URLs, navigate to your storage account in the Azure portal. In the left sidebar, under Data storage , select Containers, and follow these steps to retrieve your source documents and target container . 1. Select the checkbox next to the source container 1. Select the checkbox next to the target container. 2. From the main window area, select a file or documents for translation. 2. Select the ellipses located at the right, then choose Properties. 3. The source URL is located at the top of the Properties list. 3. The target URL is located at the top of the Properties list.\n• \n• sourceUri. The SAS URI, with a SAS token appended as a query string, for the source container containing documents to be translated.\n• targetUri The SAS URI, with a SAS token appended as a query string, for the target container to which the translated documents are written.\n• targetLanguageCode. The language code for the translated documents. You can find language codes on our Language support page. Remember to remove the key from your code when you're done, and never post it publicly. For production, use a secure way of storing and accessing your credentials like Azure Key Vault. For more information, see Azure AI services security. Enter the following code sample into your Python application: # import libraries from azure.core.credentials import AzureKeyCredential from azure.ai.translation.document import DocumentTranslationClient # create variables for your resource key, custom endpoint, sourceUrl, targetUrl, and targetLanguage key = '{your-api-key}' endpoint = '{your-document-translation-endpoint}' sourceUri = '<your-container-sourceUrl>' targetUri = '<your-container-targetUrl>' targetLanguage = '<target-language-code>' # initialize a new instance of the DocumentTranslationClient object to interact with the asynchronous Document Translation feature client = DocumentTranslationClient(endpoint, AzureKeyCredential(key)) # include source and target locations and target language code for the begin translation operation poller = client.begin_translation(sourceUri, targetUri, targetLanguage) result = poller.result() print('Status: {}'.format(poller.status())) print('Created on: {}'.format(poller.details.created_on)) print('Last updated on: {}'.format(poller.details.last_updated_on)) print( 'Total number of translations on documents: {}'.format( poller.details.documents_total_count ) ) print('\n\nOf total documents...') print('{} failed'.format(poller.details.documents_failed_count)) print('{} succeeded'.format(poller.details.documents_succeeded_count)) for document in result: print('Document ID: {}'.format(document.id)) print('Document status: {}'.format(document.status)) if document.status == 'Succeeded': print('Source document location: {}'.format(document.source_document_url)) print( 'Translated document location: {}'.format(document.translated_document_url) ) print('Translated to language: {}\n\n'.format(document.translated_to)) else: print( 'Error Code: {}, Message: {}\n\n'.format( document.error.code, document.error.message ) ) Once you add the code sample to your application type the following command in your terminal: You can download our document translation sample document for this quickstart. The source language is English. import os from azure.core.credentials import AzureKeyCredential from azure.ai.translation.document import SingleDocumentTranslationClient from azure.ai.translation.document.models import DocumentTranslateContent def sample_single_document_translation(): # create variables for your resource api key, document translation endpoint, and target language key = \"<your-api-key>\" endpoint = \"<your-document-translation-endpoint>\" target_language = \"{target-language-code}\" # initialize a new instance of the SingleDocumentTranslationClient object to interact with the synchronous Document Translation feature client = SingleDocumentTranslationClient(endpoint, AzureKeyCredential(key)) # absolute path to your document file_path = \"C:/{your-file-path}/document-translation-sample.docx\" file_name = os.path.basename(file_path) file_type = ( \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" ) print(f\"File for translation: {file_name}\") with open(file_path, \"rb\") as file: file_contents = file.read() document_content = (file_name, file_contents, file_type) document_translate_content = DocumentTranslateContent(document=document_content) response_stream = client.document_translate( body=document_translate_content, target_language=target_language ) # Save the response_stream to a file output_file_path = \"./translated-document.docx\" with open(output_file_path, \"wb\") as output_file: output_file.write(response_stream) print(f\"Translated document saved to: {output_file_path}\") if __name__ == \"__main__\": sample_single_document_translation() That's it! You just created a program to translate documents asynchronously and synchronously using the Python client library."
    },
    {
        "link": "https://stackoverflow.com/questions/6221140/how-to-localize-the-documentation-of-a-net-library",
        "document": "One possible strategy would be having a default language in code, and supply translations separately.\n\nNo matter which localized languages i would have finally, i'd prefer to choose English as the default/fallback language of the documentation.\n\nCode structure provides indexing for your translation database, for example:\n\nYou could have a tool that would allow for translation in a UI for each namespace/member.\n\nYou can have a separate team of translators looking through the items that have no translation yet, and supply translations.\n\nAnd you can start shiping a translated documentation as your ship a release as soon as you get the amount of translated items above a threshold.\n\nA changed default translation would indicate that you need a new translation for all other languages too.\n\nOf course, if you do a major namespace-only changes, you can remap the namespaces as an ad-hoc remapping operation in database.\n\nIf you run opensource project, it makes sence to use a collaborative online translation tool.\n\nOne example of such collaborative translation strategy implemented in production is https://translations.atlassian.com/\n\nBasically you could just step in and start contributing translations online.\n\nIt is set up to translate the products themselves, not the documentation, but the same practice apply."
    },
    {
        "link": "https://docs.azure.cn/en-us/ai-services/translator/document-translation/how-to-guides/use-rest-api-programmatically",
        "document": "Document Translation is a cloud-based feature of the Azure AI Translator service. You can use the Document Translation API to asynchronously translate whole documents in supported languages and various file formats while preserving source document structure and text formatting. In this how-to guide, you learn to use Document Translation APIs with a programming language of your choice and the HTTP REST API.\n\nTo get started, you need:\n• None An active Azure account. If you don't have one, you can create a Trial\n• None An Azure Blob Storage account. You also need to create containers in your Azure Blob Storage account for your source and target files:\n• Source container. This container is where you upload your files for translation (required).\n• Target container. This container is where your translated files are stored (required).\n• Complete the Translator project and instance details fields as follows:\n• None Subscription. Select one of your available Azure subscriptions.\n• None Resource Group. You can create a new resource group or add your resource to an existing resource group that shares the same lifecycle, permissions, and policies.\n• None Resource Region. Choose Global unless your business or application requires a specific region. If you're planning on using a system-assigned managed identity for authentication, choose a geographic region like China North.\n• None Name. Enter the name you chose for your resource. The name you choose must be unique within Azure. Document Translation requires a custom domain endpoint. The value that you enter in the Name field is the custom domain name parameter for your endpoint.\n• None Pricing tier. Document Translation isn't supported in the free tier. To try the service, select Standard S1.\n• None Review the service terms and select Create to deploy your resource.\n• None After your resource successfully deploys, select Go to resource to retrieve your key and endpoint.\n• Requests to the Translator service require a read-only key and custom endpoint to authenticate access. The custom domain endpoint is a URL formatted with your resource name, hostname, and Translator subdirectories and is available in the Azure portal.\n• None If you created a new resource, after it deploys, select Go to resource. If you have an existing Document Translation resource, navigate directly to your resource page.\n• None In the left rail, under Resource Management, select Keys and Endpoint.\n• None Copy and paste your and in a convenient location, such as Microsoft Notepad. Only one key is necessary to make an API call.\n• None You and into the code samples to authenticate your request to the Document Translation service.\n\nRequests to the Translator service require a read-only key for authenticating access.\n• If you created a new resource, after it deploys, select Go to resource. If you have an existing Document Translation resource, navigate directly to your resource page.\n• In the left rail, under Resource Management, select Keys and Endpoint.\n• Copy and paste your key in a convenient location, such as Microsoft Notepad.\n• You paste it into the code sample to authenticate your request to the Document Translation service.\n\nYou need to create containers in your Azure Blob Storage account for source and target files.\n• Source container. This container is where you upload your files for translation (required).\n• Target container. This container is where your translated files are stored (required).\n\nThe , , and optional must include a Shared Access Signature (SAS) token, appended as a query string. The token can be assigned to your container or specific blobs. See Create SAS tokens for Document Translation process.\n• Your source container or blob must designate read and list access.\n• Your target container or blob must designate write and list access.\n• Your glossary blob must designate read and list access.\n\nAn asynchronous batch translation request is submitted to your Translator service endpoint via a POST request. If successful, the POST method returns a response code and the service creates a batch request. The translated documents are listed in your target container.\n\nFor detailed information regarding Azure AI Translator Service request limits, see Document Translation request limits.\n\nThe following headers are included with each Document Translation API request:\n• The object contains both and container addresses for your source and target language pairs.\n• The and are case-sensitive strings to filter documents in the source path for translation. The field is often used to delineate subfolders for translation. The field is most often used for file extensions.\n• A value for the field (optional) is applied when the document is being translated.\n• The for each target language must be unique.\n• If you aren't using a system-assigned managed identity for authentication, make sure you created source URL & SAS tokens for the specific blob/document (not for the container).\n• Ensure you specified the target filename as part of the target URL - though the SAS token is still for the container.\n• This sample request returns a single document translated into two target languages.\n• You can find the job in the POST method response Header URL value. The alphanumeric string following the parameter is the operation's job :\n• You can also use a get-translations-status request to retrieve a list of translation jobs and their s.\n\nRetrieve a list of supported file formats. If successful, this method returns a response code.\n\nGet the current status for a single job and a summary of all jobs in a Document Translation request. If successful, this method returns a response code.\n\nRetrieve the status for a specific document in a Document Translation request. If successful, this method returns a response code.\n\nCancel currently processing or queued job. Only documents for which translation isn't started are canceled."
    },
    {
        "link": "https://codelabs.developers.google.com/codelabs/cloud-translation-csharp",
        "document": "Google Cloud Translation API provides a simple programmatic interface for dynamically translating an arbitrary string into any supported language using state-of-the-art Neural Machine Translation. It can also be used to detect language in cases where the source language is unknown. In this codelab, you will focus on using the Translation API with C#. You will learn how to list available languages, translate text and also detect language of a given text.\n• How to use the Cloud Shell\n• How to enable the Translation API\n• How to install the Google Cloud client library for C#\n• How to list available languages How will you use this tutorial? Read it through only Read it and complete the exercises How would you rate your experience with C#? How would you rate your experience with using Google Cloud Platform services?\n• Sign-in to the Google Cloud Console and create a new project or reuse an existing one. If you don't already have a Gmail or Google Workspace account, you must create one.\n• The Project name is the display name for this project's participants. It is a character string not used by Google APIs. You can always update it.\n• The Project ID is unique across all Google Cloud projects and is immutable (cannot be changed after it has been set). The Cloud Console auto-generates a unique string; usually you don't care what it is. In most codelabs, you'll need to reference your Project ID (typically identified as ). If you don't like the generated ID, you might generate another random one. Alternatively, you can try your own, and see if it's available. It can't be changed after this step and remains for the duration of the project.\n• For your information, there is a third value, a Project Number, which some APIs use. Learn more about all three of these values in the documentation. Caution: A project ID is globally unique and can't be used by anyone else after you've selected it. You are the only user of that ID. Even if a project is deleted, the ID can't be used again Note: If you use a Gmail account, you can leave the default location set to No organization. If you use a Google Workspace account, choose a location that makes sense for your organization.\n• Next, you'll need to enable billing in the Cloud Console to use Cloud resources/APIs. Running through this codelab won't cost much, if anything at all. To shut down resources to avoid incurring billing beyond this tutorial, you can delete the resources you created or delete the project. New Google Cloud users are eligible for the $300 USD Free Trial program. While Google Cloud can be operated remotely from your laptop, in this codelab you will be using Google Cloud Shell, a command line environment running in the Cloud. From the Google Cloud Console, click the Cloud Shell icon on the top right toolbar: It should only take a few moments to provision and connect to the environment. When it is finished, you should see something like this: This virtual machine is loaded with all the development tools you'll need. It offers a persistent 5GB home directory, and runs on Google Cloud, greatly enhancing network performance and authentication. All of your work in this codelab can be done within a browser. You do not need to install anything.\n\nBefore you can begin using the Translation API, you must enable the API. You can enable the API by using the following command in the Cloud Shell: Note: If this command ERRORs, check that the current Project ID matches your codelab Project ID. Use the following command to find the current Project ID being used by Cloud Shell: If the Project ID is not correct, use the following command to use the correct Project ID:\n\n4. Install the Google Cloud Translation API client library for C# First, create a simple C# console application that you will use to run Translation API samples. Next, navigate to folder and add NuGet package to the project: Now, you're ready to use the Translation API!\n\nIn this section, you will first list all available languages in the Translation API. First, open the code editor from the top right side of the Cloud Shell: Navigate to the file inside the folder and replace the code with the following: Take a minute or two to study the code*.* Note that we are listing the language names in English but it can be listed in any language. Back in Cloud Shell, run the app. You should see the following output: Note: If this C# code does not work for you, verify the instructions you performed during Authenticate API requests step. Using the following command to verify the value of environment variable: It should output the value If it does, next check that a service account was created and is located at by using: You should see something similar to: If you don't, revisit the Authenticate API requests step. In this step, you were able to list all available languages in Translation API. You can find the complete list of supported languages on the Language Support page.\n\nYou can use Translate API to translate a text in one language into another language. Text is translated using the Neural Machine Translation (NMT) model. If the NMT model is not supported for the requested language translation pair, then the Phrase-Based Machine Translation (PBMT) model is used. To translate text, navigate to the file inside the folder and replace the code with the following: Take a minute or two to study the code. It translates the text \"Hello World\" from English to Turkish*.* Back in Cloud Shell, run the app. You should see the following output: In this step, you were able to use Translation API to translate a text from English to Turkish. Read more about Translating text.\n\nYou can use Translate API to also detect the language of a text string. To detect language, navigate to the file inside the folder and replace the code with the following: Take a minute or two to study the code. It detects the language of the text \"Selam Dünya!\" which happens to be a Turkish phrase*.* Back in Cloud Shell, run the app. You should see the following output: In this step, you were able to detect the language of a piece of text using Translation API. Read more about Detecting language."
    },
    {
        "link": "https://stackoverflow.com/questions/66868962/how-to-use-google-translate-api-in-net-core-website",
        "document": "How can I use Google Translate api in my .NET core application? I had tried basic html and text translation both are working fine. Now I want to convert my whole website into multi language. How can I do that. For reference I am using this link"
    },
    {
        "link": "https://developers.google.com/api-client-library/dotnet/get_started",
        "document": "This document provides all the basic information you need to start using the library. It covers the library concepts, shows examples for various use cases, and gives links to more information.\n\nThere are a few setup steps you need to complete before you can use this library:\n\nIt is important to understand the basics of how API authentication and authorization are handled. All API calls must use either simple or authorized access (defined below). Many API methods require authorized access, but some can use either. Some API methods that can use either behave differently, depending on whether you use simple or authorized access. See the API's method documentation to determine the appropriate access type.\n\nThese API calls do not access any private user data. Your application must authenticate itself as an application belonging to your Google API Console project. This is needed to measure project usage for accounting purposes.\n\nAPI key: To authenticate your application, use an API key for your API Console project. Every simple access call your application makes must include this key. Warning: Keep your API key private. If someone obtains your key, they could use it to consume your quota or incur charges against your API Console project.\n\nThese API calls access private user data. Before you can call them, the user that has access to the private data must grant your application access. Therefore, your application must be authenticated, the user must grant access for your application, and the user must be authenticated in order to grant that access. All of this is accomplished with OAuth 2.0 and libraries written for it.\n\nScope: Each API defines one or more scopes that declare a set of operations permitted. For example, an API might have read-only and read-write scopes. When your application requests access to user data, the request must include one or more scopes. The user needs to approve the scope of access your application is requesting.\n\nRefresh and access tokens: When a user grants your application access, the OAuth 2.0 authorization server provides your application with refresh and access tokens. These tokens are only valid for the scope requested. Your application uses access tokens to authorize API calls. Access tokens expire, but refresh tokens do not. Your application can use a refresh token to acquire a new access token. Warning: Keep refresh and access tokens private. If someone obtains your tokens, they could use them to access private user data.\n\nClient ID and client secret: These strings uniquely identify your application and are used to acquire tokens. They are created for your project on the API Console. There are three types of client IDs, so be sure to get the correct type for your application:"
    },
    {
        "link": "https://stackoverflow.com/questions/45944512/how-do-i-send-a-post-request-to-google-translate-api-using-a-c-sharp-webclient",
        "document": "I googled now for almost an hour and can't find anything that would help me out. I'm a beginner programer and took the course over from TeamTreeHouse with Serialization in C#. Here I also learned how to use the WebClient.\n\nNow I thought a good practice Project would be to make a Translate app that sends to google the user input in a POST Request and Google returns the answer as Json which I deserialize.\n\nProblem is I read through the documentation of the api but I'm so confused of what I should send exactly to google and really how to do this?\n\nI know the method , but I really don't know what else it needs.\n\nYou can find an example over here:\n\nhttps://translation.googleapis.com/language/translate/v2 Three query parameters are required with each translation request: Target language: Use the target parameter to specify the language you want to translate into. Source text string: Use the q parameter to specify each text string to translate. API key: Use the key parameter to identify your application. If you are using OAuth 2.0 service account credentials (recommended), do not supply this parameter.\n\nSo problem is there is no placeholder in that example URL where I could put my api key + soure text string an Target language.\n\nSo what exactly should I send to google so it knows what I want and returns me the JSON file?\n\nMaybe anyone could help me out. And I know there is an official Library for exactly this but I want to practice serialization and using web scraping with the WebClient class so I want to do it like this."
    },
    {
        "link": "https://github.com/Genbox/GoogleTranslateNet",
        "document": "\n• Based on RestSharp (http://restsharp.org) to deserialize the Google API JSON into objects\n• Can translate text from one language to another\n• Can detect the language of a text\n• Can list the supported translation languages from the Google Translate API\n\nFirst you need to get a Google Translate API key from their website. There is a Getting Started guide here: https://developers.google.com/translate/v2/getting_started\n\nFor more examples, take a look at the GoogleTranslate.Examples and GoogleTranslate.Tests projects."
    }
]