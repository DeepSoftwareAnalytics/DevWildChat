[
    {
        "link": "https://create.roblox.com/docs/reference/engine/classes/TweenService",
        "document": "TweenService is used to create Tweens which interpolate, or tween, the properties of instances. Tweens can be used on any object with compatible property types, including:\n\nTweenService:Create(), the primary constructor function, takes TweenInfo specifications about the tween and generates the Tween object which can then be used to play the tween.\n\nNote that Tweens can interpolate multiple properties at the same time, but they must not be interpolating the same property. If two tweens attempt to modify the same property, the initial tween will be cancelled and overwritten by the most recent tween.\n\n-- RepeatCount (when less than zero the tween will loop indefinitely) -- Reverses (tween will reverse once reaching its goal)"
    },
    {
        "link": "https://create.roblox.com/docs/ui/animation",
        "document": "In animation, tweening is the process of generating intermediate frames between two key points in a sequence. When designing a user interface, you can use tweening to transition a GuiObject smoothly from one state to another, such as:\n• None Smoothly increasing the size of a button when a user selects it.\n• None Sliding UI menus in and out from the screen edges.\n• None Gradually animating a health bar between two widths when a user receives a health boost.\n\nTo tween the position of a GuiObject:\n• None coordinates for the object's target position, using the parameters of instead of exact pixel values so that the object tweens to the exact center of the screen. Determinecoordinates for the object's target position, using theparameters ofinstead of exact pixel values so that the object tweens to the exact center of the screen.\n• None and the target position to .\n\nThe following code snippet moves an ImageLabel within a ScreenGui to the exact center of the screen:\n\nTo tween the size of a GuiObject:\n• None coordinates for the object's target size, using the parameters of instead of exact pixel values so that the object tweens to a relative percentage of the screen size. Determinecoordinates for the object's target size, using theparameters ofinstead of exact pixel values so that the object tweens to a relative percentage of the screen size.\n• None to the object to maintain its designed aspect ratio when tweening. Attach ato the object to maintain its designed aspect ratio when tweening.\n• None and the target size to .\n\nThe following code snippet scales an ImageLabel within a ScreenGui to 40% of the screen width or height (whichever is smaller) from the object's center anchor point:\n\nTo tween the rotation of a GuiObject:\n• None for the object to rotate around. Set thefor the object to rotate around.\n• None and the target rotation to .\n\nMultiple properties control UI transparency, depending on the object type. You can tween each of these properties individually or combined through a multi-property tween. Alternatively, you can tween an object's overall transparency by placing it inside a CanvasGroup and tweening the group's GroupTransparency.\n\nMultiple properties control UI color, depending on the object type. You can tween each of these properties individually or combined through a multi-property tween. Alternatively, you can tween an object's overall color by placing it inside a CanvasGroup and tweening the group's GroupColor3.\n\nAlternatively, you can apply a UIStroke child and tween its thickness, color, and/or transparency.\n\nYou can combine any of the single-property tweens into more complex tweens by passing multiple target properties to TweenService:Create(), for example position + rotation or size + transparency.\n\nYou can chain UI animations to occur one after another by playing subsequent tweens upon the previous tween's Completed event. For example, the following script moves an object to the center of the screen, then rotates it by 45°.\n\nUsing the easing options of TweenInfo, you can control the easing style and direction of UI animations.\n\nEnum.EasingStyle sets the rate of interpolation from start to end. By default, easing style is set to Enum.EasingStyle.Quad.\n\nSpeed is determined by a sine wave for a gentle easing motion. Similar to but with a slightly sharper curve based on quadratic interpolation. Similar to but with a slightly sharper curve based on cubic interpolation. Similar to but with an even sharper curve based on quartic interpolation. Similar to but with an even sharper curve based on quintic interpolation. Follows a circular arc, such that acceleration is more sudden and deceleration more gradual versus or . Slightly overshoots the target, then backs into place. Bounces backwards multiple times after reaching the target, before eventually settling. Moves as if attached to a rubber band, overshooting the target several times.\n\nEnum.EasingDirection defines how the easing style interpolation applies to an object, with a default of Out. Note that a tween with Linear easing style is not affected, as linear interpolation is constant from start to end.\n\nYou can easily enhance text-based UI, such as cutscene banners, player instructions, and prompts, with animated effects.\n\nThe \"typewriter\" effect is ideal for TextLabels that tell a story, output NPC conversations, etc.\n• None Paste the following code into the script: -- Replace line break tags so grapheme loop will not miss those characters -- Remove RichText tags since char-by-char animation will break the tags If your experience's source language is not English (\"en\"), change the locale code for SOURCE_LOCALE to match the source language in localization settings.\n• None Create a TextLabel in a suitable location, such as within a ScreenGui parented to StarterGui.\n• None Insert a new LocalScript as a direct child of the label and paste in the following code. Note that each message is output by calling AnimateUI.typeWrite() with parameters for the parent object, the string to output, and the delay between characters. [[Beyond this door is the<br /><font size=\"46\" color=\"rgb(255,50,25)\">Great Zorgoth...</font> <font size=\"40\">🗡</font>]]"
    },
    {
        "link": "https://devforum.roblox.com/t/smooth-ui-tweening/994529",
        "document": "The GIF example’s UI used TweenPosition and TweenService. I do not recommend using for loops in this case. An example code is given below:\n\nThe code above tweens the GUI element to the position, and the easing style is set to Linear and it takes 0.5 seconds to tween to the position\n\nThe code above tweens the GUI element to the size, and the same settings as the position\n\nThe code above tweens the GUI element to the size, the second UDim2 is the position, and the same settings as the position. It tweens size and position at the same time.\n\nThe code above tweens the GUI element’s (or any roblox part, not only for gui) transparency, it takes 0.5 seconds to do so. You can add more tween info, check the ROBLOX api.\n\nCheck the EasingStyles API to get a list of all easing styles."
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-tween-more-smoothly-smooth-start-and-finish/890465",
        "document": "Hey, so here’s all of the 's there are:\n\n\n\nBut my issue is that all of these either have an abrupt start or an abrupt end.\n\nI would like that graph to look like this:\n\n\n\nSlow at the beginning, fastest in the middle, and then slow at the end; so that I can loop it over and over seamlessly.\n\nLet’s say this is my code:\n\nHow can I make the number value tween from 0 to 10 slow at the start and end, and faster in the middle?"
    },
    {
        "link": "https://devforum.roblox.com/t/tweenservice-tutorial/2079886",
        "document": "@filipinbro12332 To Add on here:\n\nand are both Valid Options, I would recommend using as you will be able to find more options., Events, etc\n\nIts also good to know the Proper way to fully set up a Tween with :\n\nI would Recommend This Tweet to get an idea of that.\n\nInstead of firing code after waiting for a (Ikr, so lame), you can fire code by using\n\nBut, You can wait for the Tween the Finish by doing\n\nHowever, if you want a more Linear Approach, You can also use\n\nVideo that may be helpful\n\nI get it tho, mini tutorial, but still."
    },
    {
        "link": "https://devforum.roblox.com/t/screenshake-effect/764374",
        "document": "That’s a VERY bad way of doing it, a for loop would be much better.\n\nIt looks like this."
    },
    {
        "link": "https://devforum.roblox.com/t/how-to-make-a-realistic-screen-shake-system/1863228",
        "document": "Hey I know this is quite an old post but if you’re still looking and want to improve I found their script in the toolbox. I don’t believe it was stolen since the original variables seem to be there and compilers can’t do that. So either it was leaked or released either way it seems very accurate to the game. Here is the script;\n\nI’m gonna be using this to make my own custom character controller its very good and since they use for a lot of the cosine calculations for the camera movement it will be randomized and nothing will ever feel stiff. By far the best camera movement scripts i’ve seen out there."
    },
    {
        "link": "https://devforum.roblox.com/t/help-with-screen-shake/782324",
        "document": "Please don’t use this code, it has so many wrong things with it.\n\nLet’s start with the use of here which is pointless if you’re setting the delay to , there are better alternatives to this like which creates a new thread instantly instead of waiting for seconds like does.\n\nSecondly, you shouldn’t be writing like that multiple times inside a single function, instead they should be inside a for loop and use two different tables or a 2 dimensional array to save the and values and call the values depending on how many times did the loop repeat.\n\nThird, you didn’t even show or mention about the function in the code you sent which leads me to the 4th point to the fact that you didn’t even make this code or tell who made this code and just posting his code and referencing him as “Also I didn’t make this so credits to who made it.”. If this isn’t your code and you don’t know who made it, don’t post it.\n\nI don’t even have to mention the fact that you didn’t explain how does the code work or which idea in mind it was designed around with in your post because I seriously don’t think you know the answer to that yourself."
    },
    {
        "link": "https://docsbot.ai/prompts/programming/remove-screen-shake-1",
        "document": "Create your own custom GPT chatbots with your own data and knowledge. Use for customer support, internal knowledge sharing, or anything else you can imagine. Embed them in your website, app,Slack, Discord, or anywhere else you want."
    },
    {
        "link": "https://devforum.roblox.com/t/how-do-i-make-the-camera-shake-like-this/2271362",
        "document": "Call the and use CFframes from the offset of an x and y axis. You can run it through a loop, maybe to the length of which the super attack (like the one shown above) can be used to denote when you actually want the camera to shake.\n\nOr you could just directly call the camera object and have it’s subject set to Humanoid (pretty much what is, however, it does not necessarily have its subject be the humanoid.\n\nWhen shifting through the camera’s Cframe/position, you maybe would want to use trigonometric functions like or ( is not trig function but certain sin results can yield negative numbers and we only want the position to shift positively). In those parameters, you can put to have a buffer of continuous time feeding in and giving an oscillating output."
    }
]