[
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/format-function-visual-basic-for-applications",
        "document": "Returns a Variant (String) containing an expression formatted according to instructions contained in a format expression.\n\nThe Format function syntax has these parts.\n\nThe firstdayofweek argument has these settings.\n\nThe firstweekofyear argument has these settings.\n\nIf you try to format a number without specifying format, Format provides functionality similar to the Str function, although it is internationally aware. However, positive numbers formatted as strings using Format don't include a leading space reserved for the sign of the value; those converted using Str retain the leading space.\n\nIf you are formatting a non-localized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.\n\nIf the calendar is Gregorian, the meaning of format expression symbols is unchanged. If the calendar is Hijri, all date format symbols (for example, dddd, mmmm, yyyy ) have the same meaning but apply to the Hijri calendar. Format symbols remain in English; symbols that result in text display (for example, AM and PM) display the string (English or Arabic) associated with that symbol. The range of certain symbols changes when the calendar is Hijri.\n\nThis example shows various uses of the Format function to format values using both named formats and user-defined formats. For the date separator (/), time separator (:), and AM/ PM literal, the actual formatted output displayed by your system depends on the locale settings on which the code is running. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used. When displayed by running code, the short time format and short date format of the system locale are used, which may differ from the code locale. For this example, English/U.S. is assumed. and are displayed in the development environment using current system short time setting and short date setting.\n\nDifferent formats for different numeric values\n\nA user-defined format expression for numbers can have from one to four sections separated by semicolons. If the format argument contains one of the named numeric formats, only one section is allowed.\n\nIf you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays \"Zero\" if the value is zero.\n\nDifferent formats for different string values\n\nA format expression for strings can have one section or two sections separated by a semicolon (;).\n\nThe following table identifies the predefined date and time format names.\n\nThe following table identifies the predefined numeric format names.\n\nUse any of the following characters to create a format expression for strings.\n\nThe following table identifies characters you can use to create user-defined date/time formats.\n\nThe following table identifies characters you can use to create user-defined number formats.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/date-function",
        "document": "To set the system date, use the Date statement.\n\nDate, and if the calendar is Gregorian, Date$ behavior is unchanged by the Calendar property setting. If the calendar is Hijri, Date$ returns a 10-character string of the form mm-dd-yyyy, where mm (01–12), dd (01–30) and yyyy (1400–1523) are the Hijri month, day, and year. The equivalent Gregorian range is Jan 1, 1980, through Dec 31, 2099.\n\nThis example uses the Date function to return the current system date.\n\nHave questions or feedback about Office VBA or this documentation? Please see Office VBA support and feedback for guidance about the ways you can receive support and provide feedback."
    },
    {
        "link": "https://stackoverflow.com/questions/42520382/vba-excel-add-in-code-to-change-format-of-column-from-general-to-custom-date",
        "document": "My data provider has changed several things in the .XLSX file I get. I have added a new sub to fix the data according to the model this application expects:\n\nEverything works EXCEPT the result of the 1st line above. In the active worksheet, column H has a header row value of \"Processed Date\" and the H2 cell and cells below it are stored as General with values like 11/15/2016. I need to change all the dates to a custom date as dd-mmm-yyyy. The statement below fails to get this done for me:\n\nThanks to the answer from @Jeeped below, I added another statement and this is the code that was the solution:\n\nI made a mistake yesterday. In debugging, I must have had a good cell selected in the worksheet at a breakpoint; hence, refering to ActiveCell.Text \"sort of worked\". It had the effect of replicating the Text to be \"14-Oct-2016\" in EVERY row for column H (except the first row). This was minimally acceptable.\n\nWhat I really need is a statement that will take the Text of all rows of column H and change the stored value from displaying as 10/14/2016 to 14-Oct-2016, etc. It is not enough to just change the format to custom. I need to change the stored values too. I don't know how to do that."
    },
    {
        "link": "https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/12351/VBA.pdf?dl=1",
        "document": ""
    },
    {
        "link": "https://stackoverflow.com/questions/51098/modifying-a-spreadsheet-using-a-vb-macro",
        "document": "Copy the following in your object to watch for specific changes. In this case when you increase a numeric value to another numeric value.\n\nNB: you will have to replace and with an underscore. Ex: and the underscore gets escaped in Markdown code.\n\nIf you are wishing to change another workbook based on this, i'd think about checking to see if the workbook is already open first... or even better design a solution that can batch up all your changes and do them at once. Continuously changing another spreadsheet based on you listening to this one could be painful."
    },
    {
        "link": "https://stackoverflow.com/questions/47759710/message-box-to-take-the-row-number-when-multiple-errors-are-shown",
        "document": "I am using this code to receive an error message every time when in column \"W\" a text is inserted. When this happens the text is deleted and a box message appears:\"The row W\" & r & \" must contain only digits!\" which tells the row number of the error. r - is set as Target.Row\n\nMy problem is that, when I copy a text in the range w10:w12, I receive the error message 3 times, which is great. But, in the message box it shows only row number w10 - 3 times i.e.\"The row W10 must contain only digits!\" . How can I make the code to show the message box with w10, then w11 and lastly then w12?"
    },
    {
        "link": "https://mrexcel.com/board/threads/vba-structure-best-practices-and-code-review.1180615",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/vba/comments/nuio9h/vba_best_practices_cheat_sheet",
        "document": "Next week I will be teaching a VBA course. I am self taught, so now I'm kinda nervous my way of doing stuff is not \"best practices.\" Or honestly, that there are just better ways of doing stuff. Like, I know I'll teach coding logic: If statements, For each, do while, etc... you know what I mean. That's the easy part (to teach) . Now, specifically my code... like 90% of everything I do is copy paste from here or stackoverflow and then edit it to serve my purpose.\n\nAny advice on how to make my course a success? And where can I find like a nice \"Best practices\" or \"This is what vba should look like\" article/sheet/whatever."
    },
    {
        "link": "https://stackoverflow.com/questions/6028288/properly-handling-errors-in-vba-excel",
        "document": "\n• Trap errors you can predict but can't control the user from doing (e.g. saving a file to a thumb drive when the thumb drives has been removed)\n• For unexpected errors, present user with a form that informs them what the problem is. That way, they can relay that message to you and you might be able to give them a work-around while you work on a fix.\n\nSo, how would you do this?\n\nFirst of all, create an error form to display when an unexpected error occurs.\n\nIt could look something like this (FYI: Mine is called frmErrors):\n\nThere's nothing spectacular in the code for this form:\n\nBasically, you want to know which button the user pressed when the form closes.\n\nNext, create an Error Handler Module that will be used throughout your VBA app:\n\nYou may have errors that will be custom only to your application. This would typically be a short list of errors specifically only to your application. If you don't already have a constants module, create one that will contain an ENUM of your custom errors. (NOTE: Office '97 does NOT support ENUMS.). The ENUM should look something like this:\n\nCreate a module that will throw your custom errors.\n\nYou are now well equipped to trap errors in your program. You sub (or function), should look something like this:\n\nA copy/paste of the code above may not work right out of the gate, but should definitely give you the gist."
    },
    {
        "link": "https://xelplus.com/vba-message-box",
        "document": "In this tutorial you’ll quickly learn the correct syntax to create a VBA message box (also referred to as a pop-up dialogue box) in Excel. I first show you how to create a message box that displays a simple message, and then we expand on this to include “YES” & “NO” buttons and perform an action based on the selected button.\n\nThe message box function (its official name is MsgBox) is a very easy to use, built-in feature in VBA that allows you to communicate with the user. The message box does not have to be designed, merely called.\n\nIn addition to displaying informative messages to the user, the MsgBox function can also solicit input from the user by way of the buttons displayed in the message box. Selections such as “Yes”, “No”, “OK”, and “Cancel” can be captured and used in decision making structures in VBA.\n\nCommon uses of a message box are to inform the user that a macro has finished running, or to request confirmation of an action prior to execution of that action.\n\nTask 1: Create a Welcome Message for the User\n\nThis macro will display a message box welcoming the user to the workbook.\n\nOpen the Visual Basic editor by selecting Developer (tab) -> Code (group) -> Visual Basic or by pressing the key combination ALT-F11 on your keyboard.\n\nWe will need to insert a module sheet into your workbook. This is performed by right-clicking on any reference on the workbook in the Project Explorer (upper left of the VBA Editor) and selecting Insert -> Module.\n\nIn the code window of the newly created module sheet type the following code.\n\nThe syntax for the MsgBox function is as follows:\n\nThe official Microsoft descriptions of these parameters are:\n• Prompt – Required. String expression displayed as the message in the dialog box. The maximum length of prompt is approximately 1024 characters, depending on the width of the characters used. If prompt consists of more than one line, you can separate the lines by using a carriage return character (Chr(13)), a linefeed character (Chr(10)), or carriage return – linefeed character combination (Chr(13) & Chr(10)) between each line.\n• Buttons – Optional. Numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. If omitted, the default value for buttons is 0.\n• Title – Optional. String expression displayed in the title bar of the dialog box. If you omit title, the application name is placed in the title bar.\n• HelpFile – Optional. String expression that identifies the Help file to use to provide context-sensitive Help for the dialog box. If helpfile is provided, context must also be provided.\n• Context – Optional. Numeric expression that is the Help context number assigned to the appropriate Help topic by the Help author. If context is provided, helpfile must also be provided.\n\nThe MsgBox function can be directly typed into the code window or accessed via Intellisense by typing “VBA.” and selecting “MsgBox” directly from the global library.\n\nThe MsgBox function is also accessible through the Interaction class. This is accessed by typing “VBA.Interaction.MsgBox”.\n\nRegardless of how you type this, you get the same result.\n\nIn the newly created procedure named “Simple_MsgBox”, enter the following code.\n\nThis is an example of a message box in its simplest form.\n\nWhen we run the procedure (with your cursor in the code, press F5), we see the following result.\n\nThe first customization deals with the button style. The default button style is to display the “OK” button. There are several pre-configured button styles, each presenting their own buttons. Some examples are:\n\nWe can also define which button is pre-selected by using the “vbDefaultButtonX” option. In a vbYesNoCancel configuration, vbDefaultButton1 would pre-select the “Yes” button, where vbDefaultButton2 would pre-select the “No” button.\n\nSince are only displaying a message, the default “OK” button will suffice so we will skip this argument.\n\nBecause this MsgBox function mimics the same structure of a regular Excel function, if you skip an argument you need to supply the comma as a placeholder.\n\nThe second customization will be for the wording in the Title Bar of the dialog box. If no title is provided, the application’s title is displayed, such as “Microsoft Excel”. Because there is limited space in the Title Bar, try to keep this text brief.\n\nOur updated macro appears as follows.\n\nAnother way to write the statement is to use embedded titles for the arguments.\n\nThis allows us to list the arguments in any order we see fit and serves as a rudimentary form of inline documentation.\n\nLastly, let’s personalize the prompt by reading the user’s name form the applications User Name property. This is stored in the application’s Options section (File -> Options -> User name).\n\nThe updated code appears as follows\n\nPress F5 to run the macro and observe the results.\n\nWhen the user clicks a button in a message box, a code is stored in a permanent variable called vbMsgBoxResult.\n\nThis will come in handy in our next example when we must perform an action based on the selected button. For now, we ignore the user’s selection. Clicking the OK button will discard the message box without any further actions.\n\nWe need a way for the user to run the macro and using F5 is not an easy way for users to remember. We want to give them a button to press. To create a launch button, select Developer (tab) -> Controls (group) -> Insert -> Form Controls -> Button.\n\nDraw a small rectangle on the screen and select the “Simple_MsgBox” macro form the list of macros in the Assign Macro dialog box.\n\nReplace the default text on the button with “Welcome” and consider adding symbols to the buttons.\n\nThe symbol library (available by clicking Insert (tab) -> Illustrations (group) -> Icons) has a large collection of simple objects that are ideally suited for this use.\n\nIf you elect to use symbols with your buttons, make sure that the following actions are performed:\n• Make sure the symbol is in front of the launch button. (right-click on the symbol and select “Bring to Front”)\n• Assign the same macro to the symbol. (right-click on the symbol and select “Assign Macro…” and select the same macro assigned to the launch button)\n• Position and group the button and symbol so they will move and resize as a single object. (right-click -> group)\n\nWhen we click the button, we see the updated message box.\n\nWe will enhance out message box with a second line of text. Because we cannot create a new line of text by hitting the Enter key in your text, we need to use a VBA command to initiate a new line. This is performed using the VBA constant called vbNewLine. Observe the updated code below.\n\nIf you prefer the labeled version, the code would appear as follows.\n\nSelect the code and press F5 to view the results.\n\nThis macro will prompt the user to clear the contents of a range of cells. If the user selects “Yes”, we will clear the cell range. If the user selects “No”, we will exit the macro. The finished dialog box will appear as follows.\n\nBecause we must process a decision, we will examine the button pressed by the user do decide how to proceed. This will use information stored in the automatically created variable named vbMsgBoxResult.\n\nWe begin by creating a new procedure named “Yes_No_MsgBox”.\n\nTo use our user’s response in a decision structure, we will transfer the captured response from the vbMsgBoxResult variable and store it in a variable of our own named “Answer”. This variable will be defined as a vbMsgBoxResult data type.\n\nNext, we will transfer the contents of the automatically captured response to our “Answer” variable created in the previous step. Notice that we must place all the MsgBox arguments inside parentheses. Because we are using the MsgBox more like an Excel function as opposed to an action, we must follow the conventions of formula structures.\n\nUsing the plus sign, we can combine dialog box features such as buttons, icons, and default selections.\n\nNote: In the above example, we are not only customizing the buttons, but we are also customizing a displayed icon in the message box. The “vbQuestion” constant will display a blue circle with a white question mark.\n\nThe next step is to examine the captured response in the variable “Answer” and decide what action to take. If the user presses the “Yes” button, we will clear the range of cells A7 through B9. If the user presses any other button (in this case, “No”), we will exit the procedure.\n\nThe completed code appears as follows.\n\nWe will need a way for the user to run the macro so we will create a new button in the same way we created the previous macro’s button. The only difference will be what is written on the button and the assignment of the “Yes_No_MsgBox” macro.\n\nPressing the “Clear” button, we are presented with the following dialog box.\n\nObserve that the default selected button is the “No” button.\n\nIf the user presses the “No” button, no action takes place. If we rerun the macro but select the “Yes” button, cells A7:B9 are cleared of their contents.\n\nFeel free to Download the Workbook HERE."
    }
]