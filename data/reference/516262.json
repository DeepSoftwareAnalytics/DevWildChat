[
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/unreal-engine-4.27-release-notes?application_version=4.27",
        "document": "Unreal Engine 4.27 brings features and updates for all creators offering a production ready feature set for Virtual Production and newly added functionality for AEC and manufacturing users which continues to put Unreal Engine at the forefront of technology. Unreal Engine 4.27 provides the right tools and workflows to get the job done.\n\nGPU Lightmass provides high-speed baking for same day lighting and layout changes and Multi-GPU support enables wider camera and simultaneous dual camera shooting scenarios for In Camera VFX. Production ready pixel-streaming gives our users greater creative freedom and more choice over how to deploy Unreal Engine. RAD Game Tools has joined Epic Games, and the Oodle Compression Suite and Bink Video are now included for all Unreal Engine developers.\n\nUnreal Engine 4.27 will be compatible with UE5 when it becomes available next year!\n\nThis release includes improvements submitted by the incredible community of Unreal Engine developers on GitHub! Thanks to each of these contributors to Unreal Engine 4.27:\n\nThis release, we focused on improving the user experience of setting up and operating an nDisplay cluster, the heart of many workflows such as In Camera Visual FX. Starting with an in-engine 3D nDisplay Configuration editor to set up your nDisplay system. A new nDisplay Root Actor consolidates all nDisplay-related features and settings into one UAsset, allowing for smoother production operations and repeatable setups.\n\nTo get started with nDisplay in 4.27:\n• Create a new nDisplay Root Actor in the Unreal Editor\n• Configure your nDisplay Root Actor in the nDisplay 3D Config Editor\n• Drag the Root Actor into the level viewport to preview your project’s content from the cluster’s perspective\n• Launch your project onto your physical nDisplay setup with Switchboard\n\nThe mGPU support in 4.27 allows for the simultaneous use of multiple cameras, larger frustums to support wider angle lenses and a more efficient balance of hardware deployment. A GPU can be dedicated to the inner frustum allowing for more complex content to be displayed. When using multiple cameras the underlying mGPU technology is backed by a workflow for the setup and operation of the multiple cameras.\n\nWith overscanning, you can now achieve continuity across multiple nDisplay render nodes for visually impactful post-processing effects such as bloom, ambient occlusion, and motion blur. Overscanning does come at a configurable performance cost.\n\nThis feature works with simple screens and projection policies, but more advanced policies, such as Mesh, are currently not supported.\n\nWe added preliminary support for Linux in nDisplay and its tools ecosystem. Linux support is dependent on graphics card drivers, and some rendering features, such as ray tracing and Vulkan, are not currently supported.\n\nLeveraging previous work in 4.25 and 4.26 releases, we made improvements to Sync Policy #2 in both performance and usability. Improvements include:\n• NVIDIA drivers 461.72 and later that support non-blocking present\n• A refined internal sync render-thread barrier management, which will fix crashes and timing issues\n• Exposed cvars to help with debugging\n\nThe combination of UE rendering, LED processors, LED panels and finally production cameras creates a complex scenario for repeatable and precise colour workflows. Therefore, we added support for OpenColorIO in nDisplay to enable accurate color calibration that connects content creation in Unreal Engine to what the real-world camera sees on the LED volume allowing content artists and DPs to work together with a common reference of the final captured image.\n\nEasier to set up and use Remote Control Workflows and Enhanced API (Beta)\n\nCurated sets of controls driven by a tactile control device allow more people to interact with Unreal Engine in a live production environment. There have been several improvements so that you can control more properties and functions, and replicate them properly with an easier set up process.\n• Rebinding properties so you can use the same preset across multiple levels\n\nUI Builder and Improved UX for the Remote Control Web Application\n\nYou can now quickly build complex web widgets without any code using the new drag-and-drop interface. We also redesigned the widget interfaces, and added more widget types focused on virtual production scenarios, including:\n\nYou can now use existing live show protocols, such as DMX, OSC, and MIDI, with the Remote Control system in Unreal Engine.\n\nThe Remote Control system now includes a C++ API to provide more ways to access and control the engine remotely. Previously, you could only access properties in the engine through web applications that used the Remote Control’s HTTP and WebSocket APIs. With the C++ API, you can now also control the engine and use the exposed Remote Control properties in external desktop applications.\n\nLive production and more specifically In Camera VFX often require small changes to a common level on a scenario by scenario basis. This creates a data wrangling challenge which slows down the speed of stage operations. With Level Snapshots, you can record the current state of the level in a snapshot without forcing a permanent change into your project or source control. Later, you can choose what to restore from that snapshot to update the level. This tool is especially useful for stage operators on an In Camera VFX shoot because you can accommodate complex restore requests from filmmakers, such as “Go back to Take 6 and move all the trees, except for these five.”. It is also useful for artists who might want to create a variety of scenarios to show for creative approvals.\n\nWhether being used for virtual scouting or recording organic camera moves the new Virtual Camera system introduced in Unreal Engine 4.26 is now Production Ready.\n• Ability to route the output of the Virtual Camera to Composure, Media Framework, Editor viewports, or any devices running the Unreal Remote app.\n• Ability to overlay custom UMG controls over the output and interact with them in the Editor or on a device.\n• Built-in support for controllers and other hardware input in addition to touchscreens.\n• A Modifier system to manipulate camera data with custom effects such as filtering, tracking, and autofocus.\n• Ability to switch to any tracking system connected through Live Link.\n• A desktop operator panel to help facilitate the camera operator.\n\nWe also released a new iOS app, Live Link VCAM, that is dedicated to virtual camera functionality and offers a more tailored user experience than the Unreal Remote app.\n\nThe Universal Scene Description (USD) interchange format continues to be a popular format in the Media and Entertainment industries.This release features several enhancements allowing for deeper pipeline integration, with the largest focus being additional export options. Unreal Engine 4.27 also features additional support for multi-user editing and additional options at runtime.\n\nThe USD Scene Exporter has been expanded and includes several new options:\n• Edit USD Attributes from the USD Stage Editor: You can now edit most USD attributes directly using the USD Stage Editor Details panel.\n• Export Levels and Sublevels to USD: You are now able to select a level that is loaded in Unreal and export it as a primary USD file. Any sublevels or assets in the level, such as Static Meshes, Skeletal Meshes, Lights, Foliage, or Landscapes, are exported as separate USD files referenced by the primary file.\n• Export animation sequences to USD: Animation Sequences can now be exported to several USD file formats. The new export action will export both animation preview mesh and the animation, as well as bind them together. This includes all bone and blendshape tracks.\n• Texture baking and material export: Materials with textures can be baked down and exported with levels. The materials then can be read by other applications with USD support.\n\nNow when you import a USD Stage, animation tracks will now be imported into the Content Browser along with any other assets. This workflow is similar to how FBX is used with all assets converted to uAssets on disk allowing for a full Unreal set of workflows.\n\nThe USD Stage Actor allows for the loading of USD scenes within Unreal. The information is kept as USD information which can be altered and saved back to USD as edit layers. The USD assets are converted to uAssets in memory with a cache allowing for accelerated loading on subsequent sessions. This is the workflow of choice when USD Data needs to transit through Unreal but will continue to be used in other DCCs with USD support.\n\nSupport has been added for the Nvidia Material Definitions Language (MDL) schema and MDL surface materials. For more information, see the Nvidia MDL Schema documentation.\n\nSeveral USD features are now available at runtime, allowing for the creation of applications that can load and display the contents of a USD file.\n\nMulti-User Editing is now supported for most USD Stage operations.\n\nUnreal Engine continues to expand support for Alembic, a standard for caching animation data that is widely used in the Media and Entertainment industries. The robustness of alembic cache support as well as improved hair and fur workflows are part of this release.\n\nWe have expanded support for hair and fur by making it possible to bind Grooms to GeometryCache data imported from Alembic. No longer do you have to go through the awkward workflow of binding a groom to a Skeletal Mesh. Both grooms that are targeted to drive the Unreal groom system or full hair caches simulated in other DCCs are supported.\n\nYou can now import an animated groom directly from Alembic to a GroomCache asset that can be used as part of a GroomComponent.\n\nFor more information, see our Alembic for Grooms documentation.\n\nIn addition to the improved hair and fur workflows Alembic caches now have better support for sub-frame samples, non-consistent topology caches, and caches that start with empty frames. This allows better results when working with alembic simulation caches.\n\nUnreal Engine 4.27 brings with it a new Datasmith Exporter for Archicad, the popular architectural CAD software by Graphisoft. The plugin provides support for the Datasmith Direct Link workflow, allowing Archicad users to synchronize their application with Unreal Engine and Twinmotion; as well as the ability to export data in the .udatasmith file format.\n\nThe plugin maintains high fidelity between Archicad data and Datasmith with support for:\n• Geometry and hierarchy data exported in a structured way with Metadata\n\nThe Datasmith Exporter for Sketchup has been completely rebuilt from the ground up. The new version features a number of improvements and now provides support for the Datasmith Direct Link workflow, which allows users to synchronize their Sketchup application with Unreal Engine-based applications and Twinmotion.\n\nTo support these enhancements, a new Datasmith Toolbar has been developed.\n\nThis new toolbar provides access to the Direct Link feature, as well as the option to export your data as a .udatasmith file.\n\nWe have also updated the exporter with new support for PBR materials, bringing it more in line with our existing plugins.\n\nThe Datasmith Exporter Plugin for Rhino has received a number of improvements. With this release, we have added Direct Link functionality between Rhino and Unreal Engine-based applications, such as Twinmotion.\n\nWith 4.27, we have added support for Worksessions. When a Rhino worksession is imported into Unreal Engine, the multiple overlaid models are structured into an easy-to-read hierarchy.\n• Support for a wide range of new Rhino geometry modifiers\n• Named views are now exported as Cameras\n\n4.27 brings the release of several enhancements and quality of life improvements to our existing Datasmith plugins. Beyond improvements to plugin stability and reliability, we have added support for new versions of Revit, 3ds Max, and Navisworks.\n\nThe new Datasmith for Solidworks plugin brings the ability to export files to Unreal Engine and Twinmotion to the widely popular CAD software. Export your material and product geometry to the .udatasmith file format or create a live connection between Solidworks and an Unreal Engine-based application with Datasmith Direct Link.\n\nVisual Dataprep provides the ability to automate the process of importing and preparing your 3D data using a variety of operators and selection filters. In this release, we have made a number of enhancements and quality of life improvements:\n• New Filter options: Several new filtering options have been added with this release. Create a new filter from a selection of Actors or filter a selection using all the visible Actors from a set of Actors. You can also create a filter that selects Actors that are overlapping a set of Actors.\n• New Operators: A variety of new operators have been added, such as Plane Cut, Set Collision Complexity, and Set Max Texture Size.\n• Support for Actor Components: We have added support for Components to all operators and filters.\n• File format specific import options: Users can now set file format specific input options for Dataprep input.\n• Scene Statistics panel and Simplified Stat Overlay: The Scene Statistics panel and the Stats overlay have been redesigned to improve readability.\n• UI Improvements: Users can now collapse a group of actions and resize Action nodes horizontally.\n\nSeveral Datasmith features are now available at runtime, making it possible to create applications that can import Datasmith files, and manipulate them using a variety of Blueprint operations.\n\nA \"Datasmith Runtime Import Options\" variable is now accessible on the Datasmith Runtime Actor that expose parameters for the import process such as:\n• Build Hierarchy, parameter to expose more or less of the hierarchy of the file. More detailed hierarchy will increase the load time and the rendering time.\n• None: the hierarchy is stored in the runtime actor (4.26 behavior) user cannot access the individual nodes\n• Simplified: hierarchy is simplified, some intermediary nodes are removed. That allows exposing objects so that applications can modify their properties while limiting draw calls due to the high number of actors in the scene.\n• Unfiltered: raw hierarchy as coming from the CAD model or datasmith file.\n• Build Collisions: No Collision, Query Only, Physics Only, Collision Enabled (Query + Physics). Query is usually used for Pawn navigation and collision with walls / floor and picking of objects.\n• Collision Type: Project Default, Simple and Convex, Use Simple As Convex, Use Convex As Simple. Since we cannot fine tune the collision generation of individual parts, using \"Use Complex Collision As Simple\" might be necessary if you desire precise collision while navigating the scene.\n• Import Metadata: read and add metadata to the actors. Increase load time.\n\nYou can now drive lens distortion on cinematic cameras using calibrated camera data, enhancing the look of your live compositing workflows. You can calibrate your lens using the new camera calibration and nodal offset tools, or bring in external calibration data in the form of ST maps.\n\nIn this release, we added a few new asset types and support for lens distortion in Unreal’s tools:\n• Store calibrated lens data at multiple focus and zoom positions in the new LensFile asset.\n• Apply the new lens distortion post-process material to cinematic cameras.\n• Evaluate a LensFile in your Live Link camera subjects based on live focus and zoom values.\n• Use the new Live Link Lens Role to stream pre-calibrated distortion data directly from certain camera tracking systems.\n\nLive Link now supports the FreeD data protocol, which is a commonly used protocol for camera tracking and Pan, Tilt, Zoom (PTZ) cameras. Many PTZ cameras, such as the Panasonic AW-UE150 and the Sony BRC-X1000, are now supported through this protocol, and can be a cost-effective way to add tracking data to your projects.\n\nVRPN is a commonly used protocol for virtual reality and virtual production. Previously, VRPN was only compatible with nDisplay. The new Live Link VRPN plugin is a more general solution and allows multiple tracked devices to be distributed and replicated in Unreal Engine. We removed the VRPN input from nDisplay to avoid duplication with the Live Link VRPN plugin.\n\nWe’ve made a few improvements to the Live Link Face iOS app to improve facial capture and how you record your data.\n\nTune facial capture with Live Link Face to the individual performer and improve the quality of the animation data streamed to Unreal Engine with the new calibration feature in Live Link Face. This enables a neutral — or rest pose — expression to be set, which is used by the app to offset the data from ARKit and provide a more tailored result that is a closer match to the actual performance.\n\nWhile Live Link Face was always fully functional on iPads with TrueDepth front-facing cameras, its display and proportions were not tailored for iPad-sized screens. We've updated the app to officially support iPads as well as iPhones, making it more accessible for users who prefer the tablet form factor.\n\nFrame-Accurate Sync of Videos with Sequencer and Movie Render Queue\n\nPlayback of videos with Media Framework will be frame-accurately synced to the timeline in Sequencer independently of the media player’s real-time behavior. Sequencer internally handles communication and setup for this synchronization with the media player.\n\nCurrently, only ImageMediaPlayer supports this new synchronization. If you use a media player that doesn’t support this feature, playback will start or stop close to what is indicated by the Sequencer timeline; however, frame-by-frame alignment could be random.\n\nMedia Framework’s image sequence playback now supports mipmapped EXR images. Mipmaps can be used in image sequences to reduce the amount of data loaded in. In UE, the mip level is selected based on an estimated pixel-to-texel density for each object displaying the image, unless otherwise set in the settings.\n\nFor more details, see Image Sequence Mips.\n\nWe continued to improve the DMX plugin, increasing its overall performance and stability under stress conditions, including improvements to protocol, Blueprint, and sACN. We also added integration with other engine features, such as Remote Control and nDisplay, and replaced Controllers by Ports with the new network settings DMX Ports.\n\nWe revamped the Pixel Mapping UI panel and core functionality. You can now effectively drive low-resolution panels or matrix fixtures by fetching the scene buffer, or any live texture, to generate the required DMX data at high performance.\n\nYou can now control which nodes in a Multi-User session contribute to a Take Recorder capture. This means you can set nodes as recording nodes that contain additional simulated or animated data that is not visible to the Multi-User main operator.\n\nThe Product Configurator Template was initially released with Unreal Engine 4.25 in the Automotive category as a way to help users quick-start their interactive product configurators. The template features best practices for the use of the Variant Manager and ways to dynamically generate UMG-based interfaces.\n\nWith Unreal Engine 4.27, we have released the Design Configurator template.\n\nThis new template is available in the Architecture, Engineering, and Construction category, and demonstrates the same interactive features and best practices for buildings as the Product Configurator template demonstrates for products.\n\nBoth templates also contain the following UI enhancements:\n• Button Size: adjusts the size of the variant buttons.\n• Button Size Outline: Adjusts the width of colored outline around buttons.\n• Button Outline Hover Color: Sets button outline color when mouse is over button.\n• Popup Line Color: Sets color of the line under the UI text.\n\nUnreal Engine 4.27 brings several enhancements to the LiDAR Point Cloud plugin that improve the import and manipulation of point cloud data.\n\nThis release contains the several improvements:\n• Better point size algorithm: The scalable algorithm has also been improved and a fixed point mode has been added. This new mode can be especially useful when working with a noisy asset.\n• Improved Performance and Stability: Several improvements to the processing and streaming of the point cloud data have significantly improved performance for the end user.\n• Improved Save/Load Performance: The serializer and streaming mechanic has been significantly improved.\n• Simple Gap Filling: Points are enlarged and rendered using a new technique that minimizes visible overlap.\n• Disable Frustum Culling: It is now possible to disable Frustum Culling which can help with the data stream delay when shooting cinematics.\n• New Selection methods: New Polygonal, Lasso, and Paint selection methods have been added.\n\nWith Unreal Engine 4.27, we are pleased to announce that the Pixel Streaming plugin is now ready for production! Pixel streaming provides new options for deployment, making it possible to stream Unreal’s first-class realtime rendering to a wider array of devices and users than ever before. While the workflow for setting up pixel streaming applications is fundamentally the same, this release comes with several key improvements and new configuration options.\n\nYou can now deploy pixel streaming applications with Linux server instances, which provide many advantages in efficiency, scalability, and overall ease of deployment.\n\nPixel streaming now supports the AMD Advanced Media Framework hardware encoder, making it possible for instances using AMD GPUs to use pixel streaming on both Windows and Linux.\n\nWe have upgraded the WebRTC used by the pixel streaming plugin to version M84. This improves the latency and quality of streams, and prevents them from degrading over time, and improves compatibility with most web browsers, including Firefox and Safari.\n\nThe improved WebRTC also provides support for audio input from users’ browsers, making it possible to capture microphone input in pixel streaming applications. What’s more, captured audio can be spatialized or processed once it is in the engine.\n\nThe GPU Lightmass system continues to improve its progressive lighting baking with support for more features of Unreal Engine 4.\n• Support for more light parameters such as attenuation, non-inverse-square falloff, and rect light barn doors\n• Irradiance Cache is now enabled by default and is significantly faster for real-world scenes, and solves issues present in UE 4.26 that now benefit all users.\n• Set a new default for Full Speed that benefits all users by preventing the occasional GPU timeouts (or TDRs) that could occur. The new default halves the speed to 8 instead of 16. The speed can be adjusted as needed in the GPU LIghtmass settings panel in the System section.\n\nFor more information, see the GPU Lightmass documentation.\n\nThe Path Tracer is a progressive rendering mode in Unreal Engine that can render the scene without any additional setup needed. The Path Tracer closes the feature gap of the real-time Ray Tracing features with physically correct and compromise-free global illumination, physically correct refractions, feature-complete materials within reflections and refractions, and super-sampled anti-aliasing.\n\nFor 4.27, the Path Tracer sees many improvements that make it a viable candidate for use in common rendering scenarios, with focus on AEC, automotive, and product design.\n• Support for all Material Shading Models except Hair, Eye, and SingleLayerWater.\n• Support for refraction and all Material Blend Modes.\n• Support for most light parameters, such as area size, penumbra, attenuation, Rect Light barn doors, Rect Light textures, IES profiles, and more.\n• Support for nearly unlimited number of lights.\n• Improved sampling techniques, resulting in less noise with similar rendering times.\n• This is still an ongoing area of development and will continue to improve in future releases.\n\nFor more information, see the Path Tracer documentation.\n\nThe Hair and Fur rendering and simulation features of Unreal Engine. Many of the improvements for visuals and performance have been driven by the MetaHuman Creator, starting with Unreal Engine 4.26.\n\nFor 4.27, there are two new cache-related features:\n• The ability to attach a hair groom to an Alembic Cache.\n• The ability to import a groom that has already been simulated and contains cached per-frame hair data.\n• A cached groom can be bound to either a Skeletal Mesh or an Alembic character.\n• Playback is supported in Play-in-Editor, Sequencer, and Movie Render Queue, but not yet for packaged projects.\n\nDuring import of an alembic groom, the importer detects if the groom has animation. If so, it automatically generates two Groom Caches, one for the strands that have been animated and one for the guides that have been animated, which uses simulation to animated the strands being rendered.\n\nThe Groom Cache can be assigned to the Groom Component using the Groom Cache assignment slot.\n\nFor more information, see the Hair & Fur Rendering and Simulation documentation.\n\nRay tracing features continue to expand coverage and improve workflows for existing supported features. This release includes the following improvements and additions:\n• Instanced Static Meshes (ISM) and Hierarchical Instanced Static Meshes (HISM) now support World Position Offset in ray tracing features, such as reflections and shadows.\n• Niagara particles in reflections now support particle-driven material attributes, such as BaseColor. Previously, particles seen in reflections were missing all per-particle features in their materials.\n• Refraction is now controlled from the Refraction input on the main material node rather than derived from the Specular input. This now matches traditional raster methods for controlling refraction in transparent materials.\n• Re-enabled Transparent objects shadow casting which was disabled in Unreal Engine 4.26. Real time ray traced shadows of transparent objects can only be opaque. Partially translucent ray traced shadows remain limited to baked static lights. Shadow casting for transparent objects can be disabled:\n• Per-material using its Details panel in the Material Editor to disable Cast Ray Traced Shadows.\n• Per-object using the Level Details panel to disable Cast Shadows.\n\nFor more information, see Real Time Ray Tracing documentation.\n\nRAD Game Tools has joined the Epic Games family and many of its technologies are now included as part of Unreal Engine.\n\nOodle Data compression provides the fastest and highest ratio compressors for game data. This product family provides four compression algorithms to best fit your project’s needs. Oodle Data decompression is significantly faster than other codecs and the algorithms run on all Unreal Engine-supported platforms.\n\nOodle Data Compression is now enabled by default in Unreal Engine, providing significant compression and faster loading for packaged projects.\n\nOodle Texture compression are the fastest and highest-quality encoders for block-compressed BC1-BC7 textures. Oodle Texture’s Rate Distortion Optimization (RDO) encoders can make high visual quality encodings that are 2 to 3 times smaller than the non-RDO encoders!\n\nOodle Texture compression is enabled by default in Unreal Engine and RDO encoding can be enabled in the Project Settings (RDO encoding is off by default).\n\nOodle Network compression is a unique solution for real-time compression of network traffic, greatly reducing the bandwidth required by game servers. This solution works on all TCP and UDP network packets and significantly reduces the minimum bandwidth required for multiplayer games.\n\nOodle Network compression is used by Fortnite already, and can be turned on and trained for your game’s own network streams.\n\nBink Video is the most popular video codec for video games and now it’s built into Unreal Engine. It is a performance-designed video codec - decoding up to 10 times faster than other codecs, and using 8 to 16 times less memory. On some platforms, Bink decoding can also be offloaded onto GPU compute shaders for even faster performance. Bink Video is completely self-contained (nothing else to install) and has an easy-to-use Unreal Engine plugin interface.\n\nThe OpenXR framework is the multi-company standard for VR and AR development. With the OpenXR plugin, you can target multiple XR devices with the same API in Unreal Engine. The OpenXR plugin also supports extension plugins from the Marketplace so you can add functionality to OpenXR without relying on Engine releases.\n\nCredits: OpenXR and the OpenXR logo are trademarks of the Khronos Group Inc.\n\nIn this release, we added support for the following features in Unreal Engine’s OpenXR plugin:\n\nThe platform-specific plugins are still available in 4.27. By default, the engine will prioritize the plugins based on device compatibility, in the following order:\n\nIf you’d like to develop specifically for OpenXR, disable the OculusVR and SteamVR plugins.\n\nWe built the new VRTemplate using the OpenXR framework. The template is designed to be a starting point for all your VR projects. It includes encapsulated logic for:\n\nThe VR platforms currently supported by VRTemplate include:\n\nSee VR Template for more details.\n\nThis project template replaces the previous AR Handheld Template, and is designed to be a starting point for developing AR apps on the ARCore and ARKit platforms.\n• Ability to move, rotate, and scale the model\n\nThe Collaborative Viewer is a template project that enables experimentation with CAD/BIM 3D models in VR or on desktop, and with multiple users for collaborative design reviews.\n\nWith fixed foveated rendering, you can use image-based variable rate shading in VR headsets to adjust the shading rate for a target. Fixed foveated rendering delivers a performance boost with little perceptual degradation in image quality. There are four levels of fixed foveation provided: disabled, low, medium, and high.\n\nThis feature is currently only supported on Windows platforms with DX12 and GPUs that support VRS Tier 2.\n\nStarting with 4.27, Unreal Engine now officially supports container deployments. Containers provide an option for packaging applications and their dependencies into a single, portable unit that can be deployed either on a local machine or through the cloud. This works similarly to virtual machines, but containers are more computationally lightweight, facilitating a larger number of concurrent deployments.\n\nBased on the open-source infrastructure developed by TensorWorks and the Unreal Containers community initiative, Unreal Engine supports two types of container images: development images, which contain Unreal Editor and its build tools, and runtime images, which can run packaged Unreal Engine projects. This makes it possible to widely deploy your development tools or your end-user applications to the cloud.\n\nFor more information about the many ways you can take advantage of containers and container images, refer to our Containers documentation.\n\nEnhanced Input is a streamlined but highly configurable input handling system supporting runtime input remapping and complex, customizable trigger rules. In 4.27, the Enhanced Input plugin has expanded to offer full Blueprint visual scripting support, so developers can use all of its features without writing C++ code.\n\nThe experimental Data Registries plugin helps developers create efficient, global storage spaces for struct-based data tables. With Data Registries, you can access data synchronously or asynchronously, load data on demand, set up caching rules, and even extend the system to write your own indirection rules. You can use Data Registries in combination with the Game Features and Modular Gameplay plugins to bring in whole Data Registries or data sources to populate existing Data Registries.\n\nThe Data Registries plugin currently supports both standard data tables and curve tables.\n\nUnreal Engine as a Library makes it possible to build the UE4 runtime as a library and interact with it through a minimal, built-in API with the following capabilities:\n• Runs UE4, optionally accepting a command-line and a client window where the engine should send its output.\n• Updates (or \"ticks\") the engine, giving you control over when it runs.\n• Receives Windows messages for interprocess communication with the engine.\n• Shuts the engine down when you are done with it.\n\nYou can also expand the API to suit your needs, exposing existing or new functionality for external use.\n\nThe Georeferencing plugin associates physical locations, like an area of a planet's surface, with virtual locations, like UE4 levels. UE4 supports geographic, geocentric, and projected Coordinate Reference Systems to map real or fictional locations, including support for systems such as latitude/longitude and UTM coordinates, to your in-engine levels. You can convert coordinates between four coordinates systems:\n\nBecause the system is not limited to real-world, or even realistic, locations, you can use it to describe locations in any large world, round or flat, with consistent spatial relationships.\n\nThe Online Subsystem interfaces in UE4 now support Epic Online Services (EOS). Implementations are available on desktop, console, and mobile platforms, and support cross-platform online functionality for games that want to use these features. Some of the available functionality includes:\n• Authentication flows both with and without Epic Account Services (EAS) as well as authentication through third party providers.\n• Functionality for the Epic friends list, including social interactions supported by the overlay UI along with player info and presence updates.\n• Managing and joining sessions, using both matchmaking and direct invites.\n• Dedicated servers and player hosted matches, along with built-in support for peer-to-peer connections.\n\nUE4 now supports the new EOS voice service using the available Voice Chat interfaces. The implementation is available on desktop, console, and mobile platforms, enabling cross-platform voice communication.\n\nWith the new Online Subsystem EOS plugin, you can activate voice chat for lobbies, which will enable participants to automatically join the corresponding voice channel. The system automatically creates an IVoiceChatUser interface that you can access through Online Subsystem EOS for further interaction and updates with the lobby voice channel.\n\nUsers migrating from the Vivox VoiceChat plugin should see that EOS VoiceChat plugin implements the same IVoiceChat and IVoiceChatUser interfaces, and can be driven in the same way.\n\nQuartz can now run without an audio device. This new feature provides the ability to run Quartz on a dedicated server. If there is no Mixer Device present, Quartz clocks will be updated by UObject tick instead of the Audio Engine.\n\nQuartz has new Clock Handle Blueprint functions that provide audio designers with quality of life improvements - including starting, stopping and pausing the current clock. Quartz can also start another clock on a sample accurate boundary, so audio designers can switch between the two clocks at runtime. This can be used to facilitate time signature changes by seamlessly switching to another clock.\n\n\"NONE\" has been added as an option to the Quantization enumeration to allow Quartz commands to execute as soon as possible. This can be used in conjunction with the new “Reset Transport Quantized'' Blueprint function to hard-reset the clock to stay in sync with external devices.\n\nFast Approximate Anti-Aliasing (FXAA) and Temporal Anti-Aliasing (TAA) are both now available in the Mobile renderer. You can use these by enabling Mobile HDR and following the same steps to use these anti-aliasing post-processes on a desktop device.\n\nThe Mobile Deferred Renderer’s performance and stability are significantly improved, and it runs on a wider range of Android devices. It also now supports Light Functions, IES light profiles, and simple lights.\n\nAndroid projects can now use the Visual Studio debugging workflow. When you install Google’s AGDE plugin for Visual Studio, Unreal Engine will enable it internally when you create an Android project. You can then use it to deploy and debug projects directly from Visual Studio.\n\nUnreal Engine 4.27 now exposes Unreal's memory allocators to the Android memory profiler via Google's development library. This makes it possible to use the Android memory profiler for Development, Test, and Debug configurations without the need for workarounds. For more information about how to use the memory profiler in Android Studio, refer to Android’s documentation on the Native Memory Profiler.\n\nWhen you generate a project for Android Studio, it automatically sets the debugger type to Dual (C++ and Java), and sets up native visualizers for Unreal data types. This fixes issues with native string visualization in Android Studio, and makes Unreal data types available without needing to perform any extra setup in your Android Studio projects.\n\nA new export format has been added to the Movie Render Queue in the form of the Command Line Encoder. The Command Line Encoder can be used to create your own output format from 3rd party software, such as FFmpeg.\n\nThe Object ID render pass has been improved, adding support for grouping ID’s in a variety of ways. You can now group your objects based on actor name, material, folder, and more.\n\nTo improve ease of event track navigation, we have added a shortcut to opening the Event Track’s Director Blueprint in the sequencer toolbar.\n\nIn addition to the Start Record button in the Take Recorder tool, we have now also added the button to Sequencer’s playback controls. Sequencer's record button allows recording of any selected Actor into the current sequence, and does not require the Take Recorder window to be open.\n\nWhen the Movie Render Queue plugin is enabled, you will now have the option to choose which renderer you want to open when clicking Sequencer’s Render button. You can either specify Movie Render Queue or the legacy renderer.\n\nTemplate Sequences now support multiplying properties. Property multipliers will allow your template sequence instances to have varied intensities, while still referencing the original asset.\n\nA new track has been added to Sequencer to allow for triggering notify states on Actors built using the Gameplay Ability System. Like notifies, the Gameplay Cue Track can utilize range-based events or trigger-based events.\n\nVarious options exist on the cue to customize how it is triggered, including controls for the instigator, location, or attachment.\n\nThe Gameplay Cue Track requires the Gameplay Abilities Plugin to be enabled in order to use.\n\nYou can now version a module, function, or dynamic input. This gives you flexibility when making your own modules, since you can set the functionality and then save it to a version number. When you create new versions of a module, those new versions become available to users.\n\nThe first time you add the module to your Niagara system, it will use the version designated as exposed. As new versions are added to that module, you will have the option to upgrade to new versions or revert back to previous versions.\n\nThis feature also includes python integration to automatically transfer existing inputs to any new module version on upgrade.\n\nFor more information, read the page Module Versioning in Niagara. [Insert link to new feature page]\n\nStarting in Niagara 4.27, when you create a new Niagara System you will see a new tab called Behavior Examples. These examples are designed as very simple Niagara emitters that show one aspect of Niagara. This can help new learners to understand the technology.\n\nA new panel has been added to the Level Editor called the Niagara Debugger. This panel gives you the ability to understand and debug Niagara simulations in your level and see what is happening at runtime.\n\nYou can toggle the Debug HUD on the viewport to display information about the Niagara simulations in your level.\n\nYou can pause the simulation, or play it at slow speed to see what is happening over time. When you activate slow motion in the Niagara debugger it only slows down the Niagara particle simulations in the level, the rest of the level plays at regular speed. You can also turn on a data readout of each individual particle.\n\nThere is a new Debug Drawing option on some modules such as Sphere, Box, and more. When enabled, it will show a visual representation of the module. You can then debug your system and adjust the parameters of the module as needed.\n\nIf Debug Drawing is available on the module, a blue box will appear to the left of the checkbox on that module. To enable Debug Drawing, click on the box.\n\nIf you have Debug Drawing enabled on more than one module, you will see a drawing for each shape.\n\nDebug Drawing can also be used to track the path of individual particles. The below example shows what it looks like on a fluid simulation.\n\nYou can also add Debug Drawing to your own custom modules.\n\nTo find out more, refer to Debug Drawing [add link to Feature page].\n\nYou can now add more than one mesh to a Mesh Renderer. By adding more than one mesh, you are creating a Mesh Array. You can either randomly spawn particles of those meshes, or you can use them in a sequence as a flipbook.\n\nTo add more than one mesh, select the Mesh Renderer. Click on the plus sign to add an additional mesh to your renderer. You will notice that each mesh is assigned an integer value starting with 0.\n\nTo create particles randomly using meshes in the array, click on Initialize Particle. You can now set Mesh Renderer Array Visibility Mode to Random and select the renderer you want to use in Source.\n\nYou will now find the attribute particles.meshindex which you can drag into your Niagara system. For example, if you want to have the particles change randomly over time then you can drag particles.meshindex into the Particle Update group. You can then set the MeshIndex parameter to Random Range Integer and have it cycle through as many integers as you have meshes set in your renderer.\n\nIn the Mesh Renderer there is a section for you to set the array as a flipbook if you have a series of meshes that should cycle over time. The meshes should be named matching the Flipbook Suffix Format, which by default is set to _{frame_number}.\n\nTo further explore this you can add a Behavior Example called Mesh Array to your Niagara System.\n\nThe Curve Editor within Niagara has been updated to match the curve editor used in Sequencer. This gives you more advanced editing tools to adjust keys and retiming.\n\nThe Curves panel has been redesigned to show a hierarchy of all the curves in the system. You can search through the hierarchy and pin curves that you want to have quickly accessible. Double-clicking on a row in the curve overview will open up that module in the Selection panel.\n\nInline curve editors, which are displayed in the Selection panel, have also been updated.\n\nClick on curve Templates to quickly apply commonly-used curve shapes. You can also navigate quickly through keys using the arrow buttons at the bottom of the Curve editor.\n\nYou can also create your own curve templates in the Project Settings if you have a commonly-used curve that is not already a preset.\n\nThere have also been performance improvements on the Curve Editor in this version, resolving an issue that was causing slowdown when dragging keys.\n\nThere is a new asset in Niagara called Parameter Definitions. You can create a Parameter Definition to define default values and descriptions for any number of System, Emitter, or Particles namespaced parameters. These default values and descriptions can be referenced in Niagara Emitters, Systems, and Scripts.\n\nAny reference to a Parameter Definition in another Niagara asset is automatically subscribed, or linked, to any changes made to the parameter in the Parameter Definitions asset. For example, you could use this to automatically push changes to a parameter’s name, default value, and description out to all references of that parameter.\n\nIn previous versions, the Ribbon Renderer would always output a flat plane for the ribbon. Now, you can choose between a plane, multiple planes, a tube, or input vertices for your own custom shapes.\n\nTo enable these options, see the new section in the Ribbon Renderer called Ribbon Shape.\n\nDepending on the type of shape you have selected, different options become available to adjust the shape. Keep in mind when trying these options that you may want to set the Facing Mode in the Ribbon Renderer to Custom instead of Screen.\n\nIn the Initialize Ribbon module, you should set Ribbon Width Mode and Ribbon Facing Mode to be Direct Set.\n\nAlong with these additional options, you can also set new parameters to help reduce artifacts in ribbons. When Ribbon Shape is set to Plane or Multi Plane, you can adjust the Width Segmentation Count to add additional vertices to the mesh so that it deforms more smoothly. When Ribbon Shape is set to Tube, you can adjust the Tube Subdivisions to add more vertices to the tube.\n\nYou can use the Niagara Script Stats panel to compile your Niagara system for different platforms within the Niagara editor. This will give you information on any platform-specific errors without the need to cook. This is particularly useful when working on GPU systems where PSSL is more strict.\n\nThere is a new node for Niagara scripts called the Select node. This replaces the now-deprecated IF node. You can specify a selector type (integer, bool, or enum). You can also select various values at once. Depending on the value that is input into the Select node, it will output a value.\n\nThe above example shows a Select node set to boolean. It will check to see whether a given input is true or false.\n\nIf the Select node is set to Int32, then you can click on the + sign to add an integer or the - sign to remove one.\n\nYou can also create a Select node from a list of Enums. In this following example, the Select node is created from Scale Sprite Size. It is then populated with all of the options that Scale Sprite Size could be set to.\n\nThere are two new nodes for hash functions, Hash Integer and Hash Float. By providing a set of integer inputs, they will output a random value. The difference between the Hash functions and the Seeded Random is that given the same inputs, Hash will always output the same value even across function calls. In contrast, Seeded Random will generate a consistent value per function call.\n\nThere have been a number of user experience improvements across the Niagara editor. This is included but not limited to:\n• Auto-fill all options is now available in the Filtered Bones and Filtered Sockets lists for Skeletal Meshes.\n• Hotkey support for Niagara: J and K to cycle forwards and backwards in playback. S to isolate selected emitters. D to disable selected emitters.\n• New and improved menus for Niagara scripts, modules, and dynamic inputs.\n• Added a Library Only checkbox to the script actions menus.\n• Suggested feature that lets you pre-label an asset as Suggested. These actions will appear at the top of the list as a section during search. In the case of dynamic inputs and modules they show at the top without searching.\n• Many of the data interface functions now show helpful tooltips.\n\nIn every release, we update the Engine to support the latest SDK releases from platform partners.\n• \n• \n• NDK r20b is also supported to address compatibility issues on some low-end devices.\n• \n• \n• Some SDKs do not yet contain ARM64 slices (e.g. Steam, Vivox).\n• AIPerceptionSystem’s class method RegisterAllPawnsAsSourcesForSense has now been marked as virtual.\n• Added an optional \"FName Tag\" to AISense_Damage, which gets propagated to the PerceptionSystem from AIStimulus.\n• The Environment Query Editor is now an engine plugin that is enabled by default; Individual users are no longer required to enable it through the experimental settings. The editor is still considered experimental and disabling the plugin will remove access to the feature.\n• Moved AI domain automation tests to 'System.AI' over from 'System.Engine.AI'.\n• Removed AIController dependencies of the AIPerceptionComponent and now it can be used with non-AI agents.\n• Made the UE4ML plugin public. Engine/Plugins/AI/UE4ML/README.md contains the basic documentation.\n• Switched AIPerceptionSystem's stimuli aging from previously using a timer to now counting elapsed time. In normal circumstances this doesn't make any difference, however, this change does help when trying to use the perception system in replays where UAIPerceptionSystem::StartPlay ends up not being called.\n• Added a blueprint-callable function to AIPerceptionComponent.GetPerceivedHostileActorsBySense and the native alternative GetHostileActorsBySense in addition to a new flexible filter GetFilteredActors that can use any arbitrary predicate for filtering.\n• Bit fields located in the PawnAction class have been optimized to pack into a single 32 bit allocation.\n• Added a tiny optimization to avoid calling AIPerceptionSystem.OnNewPawn when the perception system is configured to not care about new pawns.\n• Fixed a crash which occured when a new empty generator is added to an EQS query template while an EQSTestingPawn is using it.\n• Dynamic EnvQuery graph node titles will now update correctly when properties in their details panel are changed.\n• Initializing AI related USTRUCT data types will no longer have uninitialized fields.\n• Fixed calling AIPerceptionComponent methods SetSenseEnabled and UpdatePerceptionWhitelist when there is no SenseConfig registered.\n• Fixed UAIPerceptionStimuliSourceComponent's issues with unregistering from all senses if RegisterForSense has already been called during its lifetime.\n• Fixed issues in AIPerceptionComponent where perceptual data associated with actors were no longer valid and being broadcasted through delegates.\n• Tick text on Blueprint BT Services that don't have a Tick implementation are now hidden.\n• Added validation on instance arrays (aux nodes, parallel tasks and memory) to update stats properly and to prevent modifications while iterating through them.\n• Added minor BTDecorator_Loop fixes:\n• Loop will now force at least 1 execution.\n• Prevented the number of remaining executions from becoming a negative value.\n• Fixed an issue where iterating through active nodes would sometimes cause a node to be deactivated.\n• Fixed an issue where the BT evaluation of a Conditional Flow Abort skips a higher priority state if the evaluation triggers another Conditional Flow Abort in the previous state.\n• Fixed an issue where a BT task was being executed even though it had lower priority than another task higher in the hierarchy.\n• Fixed a computation issue of a child execution index of a composite node when the child is a task node with services.\n• GameplayTasks debug data is now available when being compiled with developer tools.\n• Added the ability to select the local player for debugging in GDT through the command \"gdt.SelectLocalPlayer\".\n• [VisualLogger] Timeline fixes:\n• Prevented a freeze when trying to pan after zooming in.\n• Prevented panning below 0 by initializing the clamp range to the view range.\n• Prevented changing the zoom factor while panning outside the clamp range.\n• When using the right mouse button the Timeline will no longer snap to the closest element as it interferes with panning.\n• Removed the zoom sensibility due to the possibility of becoming stuck at a given zoom factor.\n• Fixed a bug in FVisualLoggerFilters::MatchCategoryFilters that resulted in log lines being filtered out if their category couldn't be found in FVisualLoggerFilters.Categories.\n• Fixed an issue where the EQS composite generator was not displaying CPU stats correctly.\n• Fixed an issue where clearing debug data would not properly clear the stored EQS debug drawing text.\n• Added an option to debug draw poly flags and area flags in Recast Debug draw.\n• Added a templated RecastAStarGraph implementation so users can modify pathfinding logic using Recast Navmesh data.\n• Added the Console variables ai.debug.nav.refreshinterval and ai.debug.nav.displaysize to control the refresh rate and the size of the displayed area in the Navigation Mesh.\n• Added logs to track the geometry added when generating navmesh tiles.\n• Fixed the convex element export in the NavModifierComponent to improve the precision of navmesh generation around those elements.\n• Fixed an issue where the Navigation Mesh was making the current map “dirty” on load without any user action.\n• Fixed an issue where unloaded levels were being added to the NavOctree, impacting the Navigation Mesh.\n• Fixed missing Navmesh tiles when cooking Maps from the Editor’s 'Launch' option.\n• Fixed the computation of the vertice count between mesh and detail mesh when creating the BVTree in DetourNavMesh.\n• Prevented the Navigation Mesh from being removed when a level is saved without a Navigation System.\n• Added support to frame interpolation for subframe sampling to USD mesh animations.\n• It is now possible to import an animated groom through Alembic as a GroomCache asset and play it back on its associated Groom asset through the Groom Component.\n• Converted SkinWeightProfile scalability settings to CVars in order to be set through Device Profiles rather than Scalability settings.\n• Fixed a potential crash with Level of Detail Material mapping which occurred during a Skeletal Mesh merge.\n• Fixed virtual bones being generated on animations that don't animate them.\n• Removing unused bones from the Skeleton no longer causes a crash.\n• Disabled Supplemental Streaming SIMD Extensions 3 (SSSE3) instructions, which was causing crashes when loading MetaHuman Creator assets on older CPUs that don't support SSSE3.\n• Fixed a crash ending PIE when a sequence is playing and is driving an Animation Blueprint with a Spring Bone Controller active.\n• Output pose now initializes when no sources are present.\n• The Animation Blueprint Transition warning when the rule is bound is fixed. Pins are automatically disconnected if they are replaced with a bound rule.\n• RandomPlayer anim node will now support blend in times that are less than the frame delta, including 0.\n• Re-ordered AnimInstance’s property access class method to copy after Event Graph methods in order for properties to be correctly transformed when accessed from Blueprint functions.\n• Fixed curve weights out of bounds access in the Inertialization node.\n• ControlRig AnimNode's exposed pins will now have the correct default values as specified in the source Control Rig Blueprint.\n• Fixed Animation Blueprint compiler issues occurring with collapsed graphs and isolated errors in state transitions.\n• Property Access nodes will now be able to generate unique property names.\n• Fixed a crash from occuring when re-opening an Asset Editor after a new preview mesh is applied.\n• During the retargeting process, curves now copy correctly on child Animation Sequences.\n• Fixed Asset import path issues during the retargeting of Animation Sequences.\n• Fixed debug drawing of raw animation bones in Persona when component has post process or sub anim instances.\n• Improved support for GeometryCache starting with empty frames, such as fluid simulation, explosion, and other effects.\n• Fixed crash that would occur when importing a SkeletalMesh from Alembic with the \"Merge Meshes\" option.\n• Removed invalid Motion Vectors when importing GeometryCache with the option \"Import Abc Velocities As Motion Vectors\". This results in cleaner subframes.\n• Fixed a crash which occured from concurrent access to a Skeleton's smart name map.\n• Added additional safety checks to ensure the bone transform is not being accessed out of bounds.\n• Enabled the deletion of existing Quartz Clock Actors from Blueprints.\n• Added Audio Modulation support for Sound Submixes from their Output Volume, Wet Level, and Dry Level properties.\n• Added new static gameplay functions to prime sounds for audio stream caching.\n• Updated Quartz with the ability to query for the duration of time that a given number of Quantization Type events will run based on the clock’s sample rate and time signature settings.\n• Made Blueprint-accessible versions of audio-utility functions that were previously only available in C++, including:\n• Added radius as a channel position parameter within the sound field format API.\n• Added a new log category for stream caching to independently control log levels from the category.\n• Added a Quartz function to return the current transport in a human-readable format.\n• Added a Quartz function that returns the time since a specified Quartz clock was last reset.\n• Added booleans to enable Base Submix, Submix Sends, and Bus Sends on Sound Base objects. These booleans replace the previous \"Output to Bus Only\" parameter. Assets created prior to 4.27 will be updated automatically.\n• Reduced memory overhead when using SoundCues by pruning branches that do not match the cooking target’s quality level.\n• Fixed crashes caused by race condition when adding new clocks to low-rate Quartz.\n• Fixed crash issue when Audio Modulation is enabled in an editor running using -nosound.\n• Fixed an issue where using a Submix Effects chain in Blueprints would cause a crash if no Submix Effects Preset was found.\n• Fixed issue where Sound Classes would sometimes load before certain referenced types could be known, breaking those referenced assets\n• Fixed issue where sometimes a “divide by zero” check would get triggered if Quartz was using very high BPM.\n• Fixed ensure caused by clocks not being removed during Quartz Clock Manager shutdown.\n• Fixed issue with Vorbis in which it failed to load streamed data before the initialization phase was over. This primarily impacted Multichannel streams where the initial pages couldn’t fit into 6 KB.\n• Fixed issue that caused activated reverbs to not be set.\n• Fixed channel-order issue when using 5.1 and streaming sounds.\n• Fixed an issue where the multi-channel source bus was using the number of frames instead of the number of samples.\n• Fixed issues when importing audio files with higher than 16 bits.\n• Fixed an issue where restarting in virtual mode would not properly reset the active sound cue and playback time.\n• Fixed an issue where the multi-channel TSampleBuffer was using the number of samples instead of the number of frames.\n• Added a warning when applying a submix effect to a submix that doesn't exist.\n• Fixed an issue with \"soloaudio\" persisting in the Content Browser.\n• Added a fix for NaN appearing within the GetLogFrequencyClamped and GetLinearFrequencyClamped functions.\n• USoundBase::GetDefaultSoundClass() has been removed. Any references can be replaced with USoundBase::GetSoundClass() or UAudioSettings::GetDefaultSoundClass().\n• Added a Perforce helper to revert / delete multiple files at once.\n• Fixed the Replace All Reports feature in the Test Automation window not functioning the first time it is used.\n• Prevented duplicate curves from being added when importing curves into Control Rig\n• Fixed a crash that occurred in cook builds that contain Full Body IK and Control Rig nodes.\n• Fixed a crash in Control Rig Editor that occured when connecting a sub-pin of a Get Variable Node to a Set Variable Node's value pin.\n• Changing pin values in Control Rig will now trigger the necessary recompile.\n• Control and Space will now work correctly with the \"Add Mapped Elements\" Blueprint function for the Control Rig Component. \\\n• Fixed jittery movement animation when using Control Pin Value on the ModifyTransform Node’s pin.\n• Prevented watched pins from causing ControlRig Editor to keep marking a ControlRigBlueprint as dirty after being saved.\n• Commandline argument \"-buildmachine\" now propagates to subprocesses (like ShaderCompileWorker) started by the engine.\n• The package difference test commandlet now produces a hexdump when differences are found.\n• In the editor preferences the \"Enable Live Coding\" option no longer requires an editor restart to take effect.\n• Improved feedback to Live Coding when it would not start due to a prior hot reload.\n• Added messaging about delays to live coding to accommodate cases where the Unreal Editor has stopped in the debugger when a system using a large number of processors.\n• Improved live coding feedback in the Unreal Editor when compiling is initiated using the keys Ctrl-Alt-F11.\n• Updated messaging when live coding is enabled after using hot reloading.\n• Moved live coding warnings from the live coding window to the log.\n• Added a UTickableWorldSubsystem as a base class for all world sub systems that need to be ticked along with their world. This is now the preferred method for UWorldSubsystem that also inherits from FTickableGameObject as it prevents some common pitfalls. By default:\n• It implements FTickableGameObject::GetTickableGameObjectWorld to return the subsystem's world.\n• It prevents the subsystem from ticking as soon as the subsystem is deinitialized.\n• It prevents the subsystem's CDO from ever ticking.\n• Improved performance for Unreal Insights Timing View when having a large number of frames.\n• Editor asset tagged property loading is now more resilient by seeking the expected end position and logging an error, as opposed to setting the archive into an error state.\n• Added new WIN32_WINDOWS macro to avoid a compiler error in SwitchBoardListener.\n• Added support for UE as a Library, which enables external applications to run and control their own UE4 instance.\n• Operator new overloads will now always allocate at least one byte.\n• Extended FGenericDataDrivenShaderPlatformInfo settings to support \"opt-out\" settings by adding the ability to set default values.\n• Setting GIsRequestingExit on the start of Engine Tick is now disabled unless SET_REQUEST_EXIT_ON_TICK_ONLY is enabled.\n• IoStore Diff command - helper is a command to diff two sets of container files. An example use:\n• A new package option to specify the URL to where crash reports will be sent, in cases where the crash report client is packaged with the game. This option can be found in the advanced package options, by default crash reports from the Editor are sent to Epic unless otherwise specified.\n• Support for single quotes around attributes has been added in the FXmlFile.\n• IoStore command to List container files to csv. An example use:\n• Included the name of the slowest unit test in a warning log for when a less than two second smoke test run time is executed.\n• The TWeakInterfacePtr class now has an API that is more consistent with the weak object pointer class.\n• Enabled comparison of string views of different types Compare, Equals, and the associated operators are now supported for any pairs of string views and C-style strings that FPlatformString has a comparison function for.\n• Added additional descriptive information to FMallocBinned2 asserts when they fire.\n• The Engine can now build successfully with CHECK_PURE_VIRTUALS enabled in order to verify that all PURE_VIRTUAL functions are correctly implemented in subclasses. UClasses that use PURE_VIRTUAL must be marked abstract and UStructs that use PURE_VIRTUAL must have the WithPureVirtual trait set.\n• Added RetainedRef Template to be used as a function parameter when the reference will be held beyond the length of the call, causing a compile error when passing an rvalue.\n• In FPropertyTextUtilities, the TextToPropertyHelper method can now have PortFlags specified.\n• Extended MakeValue and MakeError to take a variable number of arguments.\n• Added FNameBuilder to simplify passing FName to functions that take FStringView.\n• Allow copy constructor and assignment of ValueOrError template.\n• Smoke test responsible for finding uninitialized struct members will now also try to construct all structs with 'new FMyStruct' syntax to find properties that are uninitialized despite their struct having a custom default constructor.\n• Added const access to source in the String Reader.\n• Added command line options to PerfReportTool “-Add -cleanCsvOut ”, for writing out a standard format .CSV file with events stripped.\n• Added PerfReportTool SummaryMetadata disk cache support. This skips CSV processing entirely for files already in the cache, which is significantly faster for bulk queries.\n• Added PerfReportTool Scrollable summary tables with the command line option “-scrollableTable”. This makes the summary table scrollable, with frozen first rows, columns, and automatic colorization. These are useful for historical data tracking.\n• Added Csv.bin compression support. Run CsvConvert with pass -binCompress 1 or 2 to enable compression on .csv.bin files.\n• Updated clang atomics to use newer atomic functions in favor of sync and added support for 128-bit atomics for platforms that support it.\n• Added Support for multiple wildcards in arbitrary positions has been added to CsvTools. Wildcards can be used for PerfReportTool reports and CsvToSvg stat lists.\n• Added a checkpoint heartbeat hang detector to help diagnose issues such as infinite loading screens.\n• This detects cases where all the main threads are ticking but the high level logic is stuck.\n• Adds calls to ThreadHeartBeat class methodMonitorCheckpointStart and MonitorCheckpointEnd to use.\n• If it takes longer than the threshold to reach MonitorCheckpointEnd, a fatal error will be thrown.\n• Added MakeBinaryConfig commandlet. This will optionally run at stage time to generate a BinaryConfig.ini, which if present at runtime will load up ini files.\n• Can be enabled in Packaging settings, or -makebinaryconfig option to BuildCookRun.\n• Can use -textconfig at runtime to go back to non-binary config files.\n• Removed several low-value/high-frequency profiling scopes to improve performance and stability while capturing.\n• FObjectIterator has now the option to lock the global UObject array when it's iterating over it to prevent thread safety issues when iterating over all objects while other threads are creating new UObjects.\n• Added cvar ‘Engine.DelayTrimMemoryDuringMapLoadMode’ that will delay calling TrimMemory until the end of LoadMap.\n• a CsvProfiler stat for 2d camera speed has been added to Profiling.\n• Asset registry optimizations have been made to reduce Engine initialization time.\n• Optimized the time required to resolve call stack symbol names on Windows OS. The Engine now loads and caches the debug symbols on demand rather than loading all debug symbols at once on the first request.\n• Asset registry optimizations have been made to reduce Engine initialization time.\n• Saved one-hundred and twenty milliseconds to next gen load time by removing superfluous sleeping on a critical path.\n• Improved performance of GetSubSystem calls from C++ code.\n• Fixed crash when polling to see if a UTexture is ready for PostLoad while it is processing it's texture data on a background thread.\n• Fixed a crash that could occur if an imported package was garbage collected during loading.\n• Fixed possible crashes when loading Blueprints with circular dependencies.\n• Fixed a crash in UnrealHeaderTool when parsing a BlueprintImplementableEvent with an int64 return type.\n• Fixed a crash that occurred when working with map instanced properties if the map's sparse storage has gaps.\n• Fixed a crash from occuring when decryption of a pak signature fails.\n• Fixed a crash which occured when running commandlets with the -noshadercompile argument.\n• Fixed an issue where files were not getting cleaned after hot reloading.\n• Garbage Collection will now treat cluster objects with Internal Object Flags set to Garbage Collection Keep, the same way as if they are in the root set to prevent them from being destroyed while being referenced by the async loader.\n• Fixed hot reloading where a change would not be detected due to a mismatch between how Unreal Editor and Unreal Build Tool formatted the module name.\n• Fixed an error where changing projects from the Unreal Editor which had been \"Quick Restarted\" from the live coding console would result in the Unreal Editor failing to start properly.\n• Fixed multiple issues where live coding would fail to compile code changes.\n• Fixed issue where live coding fails to compile changes when both the editor and game are running.\n• Fixed the building of the live coding console in non-unity builds.\n• Fixed a compile issue in the live coding console when building without pre-compiled headers.\n• Added a missing call to the EngineSubsystemCollection Deinitialize method when on engine shutdown is invoked.\n• GC weak references will now be cleared after gathering unreachable objects as more objects become unreachable during the process.\n• Fixed FString class method SanitizeFloat from returning \"0.0\" when built under the /fp:fast command.\n• Fixed POSIX platforms not honoring the -log= parameter in forked processes.\n• GarbageCollection: Changed InternalObjectFlag priority to make sure that objects are not being destroyed while being referenced by the async loader.\n• Creating an FName with FNAME_Find no longer asserts if the name length exceeds the maximum name size.\n• Fixed code generated by UnrealHeaderTool when a const UObject pointer is returned by a UFUNCTION.\n• Fixed a problem in ArrayProperty’s SerializeItem method when using a user-defined structured archive formatter, caused by a mismatch between the saving and loading branches when doing unversioned property serialization.\n• FMallocBinned3 will now try to allocate memory from a bigger pool to avoid Out of Memory crashes.\n• Due to Windows 7 no longer being supported by Microsoft, the bundled version of DbgHelp.dll is no longer compatible.\n• Added a missing call to AsyncLoading’s class method PumpEssentialAppMessages when processing loaded packages PostLoad and CompletionCallbacks on the GT.\n• Fixed a parse error in UnrealHeaderTool when a UENUM is deprecated.\n• Prevented an object from being accessed from weak pointers after it's been destroyed and fixed a race condition between FWeakObjectPtr and Garbage Collection AsyncPurge.\n• Changed the checkSlows to checks in theFixedAllocator template to allow them to detect user error in Development builds.\n• Added static assert to detect inherited Structs which are not polymorphic unless inherited base struct also is polymorphic. If this happens, there are two options:\n• Add a vtable to the superclass (and a virtual destructor), or\n• Remove any virtual methods from the derived struct\n• We now check that cache keys are valid before they are shortened in the Derived Data Cache.\n• CsvToSVG will no longer throw an exception in multiple CSV mode if a single CSV has missing metadata.\n• Fixed a bug causing an exception in graph generation when the temp directory contained spaces.\n• OutputDeviceRedirector's buffered lines will now only be emptied if there are any output devices to redirect to.\n• Fixed a bug that prevented the PkgInfo commandlet from loading UAsset files.\n• Fixed a potential concurrency issue when renaming objects and enabling UObject hashing error asserts in development builds.\n• A Compiler error with Visual Studio 2019 has been fixed.\n• Async loads from the async loading thread during the final async loading flush will now also be allowed to prevent a safeguard from firing.\n• Async loading will no longer be allowed after the final async loading flush to prevent crashes on exit.\n• FPackageReader will now copy the Editor only filtering flag from the underlying reader archive to the owning package reader.\n• AssetRegistry EditorOnly dependencies. This change adds different Game and EditorOnly dependencies to the AssetRegistry.\n• Added a cooker parameter which allows DLC cooks to override the platform name used to find and load the development asset registry. Allows different platforms to use a single registry where that makes sense.\n• Added a \"-BasedOnReleaseVersionPathOverride\" parameter which can be used to override the value generated by GetBasedOnReleaseVersionPath.\n• Fixed pathing mismatches in DLC cooking when the cooker executable is built with a unique build environment, so it is not rooted in the Engine/Binaries/\n• Re-added a \"Check All Connections\" checkbox functionality in network profiler that got removed by mistake.\n• Fixed issues with network profiler graph view not loading if there are fewer than 30 frames worth of data in the profile.\n• Fixed anchoring to work with the \"Check All Connections\" checkbox.\n• Network predication traces can now be examined using the external Unreal Insights application.\n• Fixed a crash in NetworkPredictionInsights when jumping in time for a live session.\n• Signed pak files now ensure the validity of the pak file's index.\n• Actor visibility attribute is now serialized. An exporter can decide to export hidden actors that way.\n• You can now add a .neu.* extension (.neu.1, .neu.2, and so on) to a Creo neutral format.\n• A Datasmith scene can now declare new materials that inherit existing Material Instances and override their parameters.\n• Dataprep has been enhanced to allow operators/filters cards to look in the graph.\n• The Dataprep operators/filters palette has a new look and feel.\n• The Dataprep string array in filters has a new look and feel.\n• Cleaned up statistics displayed in the Visual Dataprep 3D viewport.\n• The UI for Dataprep stats has been improved for easier visibility and use.\n• Dataprep now has the ability to horizontally resize action nodes.\n• Dataprep can now collapse a group of actions.\n• Dataprep has a new operator to set collision complexity.\n• In Dataprep, you can now set format-specific import options.\n• Dataprep has a new operator to resize textures.\n• A panel was added to visualize, browse, and select components in Visual Dataprep.\n• Dataprep now has the ability to create a filter from a selection.\n• You can now disable/enable groups of actions in Dataprep.\n• In Datasmith Revit exporter, you can correctly export hierarchy based on Super Component.\n• Datasmith Revit exporter provides Floors and Ceilings pivots at scene origin instead of at their own local pivots.\n• Added support for thin translucency shading models on the Datasmith UE PBR (physically based rendering) materials.\n• Facade now includes an exposed variant API, with bCleanupUnusedElements parameter to FDatasmithFacadeScene::ExportScene().\n• Add support for reading FBX metadata into Datasmith when importing scenes from DeltaGen and VRED.\n• Fixed a memory corruption issue on export of scene in 3dsMax exporter.\n• A processing time control in CADWorker has been added. This prevents a DMU from not being imported due to a referenced file looping. The processing max time is based on the size of the file to process, and its format. Only the blocked file is canceled. This can be disabled with cvar r.CADTranslator.EnableTimeControl=0.\n• In Dataprep, the filter is now updated from Selection with a simpler UI, and uses object/actors path as the unique ID.\n• Update of KernelIO dll with 2021 sp1.2 version. With this new release, the supported version by format are:\n• Navisworks 2021 is now supported by the Datasmith Navisworks exporter.\n• For PLM XML files, some error messages have been replaced by warning messages when files are prevented from parsing.\n• Added new Collaborative Viewer content: two new templates in Collab Base that use shared resources.\n• Support has been added for a multilingual installer for the Revit exporter.\n• For the Navisworks importer, Mesh Actors for merged geometry are now re-pivoted to the bottom center of the bounding box.\n• Added a Mobility property to the Datasmith Area LightActor:\n• The Datasmith Area Light Blueprint now sets its components (mesh/light) for mobility in construct in accordance with this.\n• Dataprep Set Mobility supports setting ADatasmith Area Light Actor (in addition to the usual Scene Component).\n• A crash no longer occurs when an asset referenced by a captured UObject property in the Variant Manager is swapped with an asset of an incompatible class.\n• Fixed a crash that occurred when trying to capture Variant Manager thumbnails from the viewport during standalone mode.\n• No longer crashes when a landscape is imported by Dataprep or reimported from Datasmith.\n• Fixed the Variant Manager spawning function director outer ALevel Variant Sets Actors so they always spawn on the persistent world levels instead of on the vestigial worlds of sublevels.\n• Fixed the Variant Manager function directors that were unnecessarily collected and recreated repeatedly.\n• It is now possible to set nullptr values on UObject property captures in the Variant Manager.\n• User-set Material overrides are no longer replaced when reimporting Datasmith scenes in some scenarios.\n• Fixed an issue where Variant Manager visibility changes were not applied to the viewport on some scenarios when the viewport's Realtime property was set to Off.\n• Added the newest decals to be on par with Twinmotion, and fixed a POM issue.\n• FDatasmithSceneCleaner::Clean() will no longer remove materials that are referenced only by a variant.\n• Fixed incorrect exported joint indices when exporting skeletal meshes to USD if the skeleton has a different number of bones than what is used by the skeletal mesh.\n• Fixed an issue in the material generation by a datasmith import. The expression names in the material functions used by a Datasmith-created material are now unique.\n• Emissive master now uses the alpha channel of the Luminance Filter Map as an opacity mask.\n• The following fixes have been made to the Automotive and Architecture Collab Viewer templates:\n• You can now load saved states in the editor.\n• Changed the title of the popup window of datasmith runtime load.\n• Removed the Transmission hierarchy in the architecture template.\n• Fixed Reset and Reset All Fail on the Collab Viewer with data imported through runtime Datasmith.\n• Fixed a broken documentation link on the import help button and added an automated test to make sure the link stays valid.\n• Added a custom solution section to allow Visual Assist to identify the solution as an Unreal solution.\n• The full path to the VsCode compiler is now specified, as well as command line arguments in the format expected by the compiler.\n• The automated tests report is now more resilient in cases of critical failure or timeout.\n• The JSON report is saved after each test execution.\n• Test artifacts are now copied after each test execution.\n• The HTML report now displays and test states.\n• Corrected an issue with degenerate artifact creation. Attempting to create files with the same source and destination folder hierarchies when the Role was null would lead to file errors. These required five 30-second timeouts each to skip when ending runs using -skipserver\n• Fixed an issue with NullPointerExceptions on run when the Configuration's \"Build\" was null.\n• \n• caused editor exit with code 1 due to implementation for the UNIX platform.\n• This led to problems in the CI pipelines, the CI stage was sometimes assumed to have failed despite the fact the tests were ok and the tests' status code was .\n• Added a simple call of to correct the problem.\n• Added the AdditionalIoStoreOptions parameter to the UAT ProjectParams class, which lets you supply extra parameters to the iostore commandlet when staging a build.\n• Fixed an incorrect default value being applied for the skipiostore parameter in UAT.\n• Corrected the handling of the -skipdeploy UAT \\ UBT command. This now reduces the time it takes to Launch the game from the Editor.\n• Fixed staging chunk assignment failing when there were case mismatches between paths in the staging manifest and the pak chunk lists.\n• Corrected a case during project param creation where we still assumed there was a single editor target per project.\n• FileCache memory is no longer attributed to the first caller.\n• Fixed issues when running UBT in a build environment without a local data directory, by falling back on the Engine folder.\n• Corrected module dependencies not working when a module has no source files.\n• Fixed IsHostOnVpn() always returning false, so Incredibuild isn't used for building C++ over VPN.\n• The ExpandEnumAsExecs metadata now properly handles spaces in a comma-delimited list of parameters.\n• When toggling sub-level visibility on the Levels Editor, Multi-User editing now reflects the corresponding game flags so that -game nodes will properly display updated visibility. Users can opt-out of this behavior by disabling the Reflect Level Visibility to Game option in the Multi-User project settings.\n• The spline point property editor now allows toggling between absolute and relative position and rotation.\n• Added Copy and Paste options to the context menu on each field of the spline point property editor.\n• Specific fields and interp types for subclasses of USplineComponents can now be disabled.\n• Water actor sprites are now replaced with an error icon if certain checks fail.\n• Added new icons for the WaterLandscapeBrush and WaterMeshActor.\n• Package save events are now captured when running in -game mode. This is to support remote recording of takes on headless nodes.\n• Transaction events on Multi-User are now synchronized on nDisplay nodes.\n• Added an API ConcertSyncClient module that enables users to participate in transaction filtering. API users can indicate if a UProperty or UObject should be included, excluded, or have default behavior applied to it.\n• Added support to nDisplay to properly synchronize Multi-User activity stream when the nDisplay nodes first connect to the session. All nodes will coordinate their activity sync and they will finalize simultaneously. Note: If a node reconnects during an active session after initial synchronization, it is no longer possible to synchronize it. All nDisplay nodes should be restarted if synchronization is required.\n• Implemented a custom asset editor for waves assets which shows a preview of the resulting waves.\n• Multi-User take recording is now automatically available when connected to a Multi-User session. Previous versions required you to enable a special CVar.\n• Added a new Editor preference (Check References on Delete). When disabled, Unreal Engine no longer checks actor references when deleting actors from the World Outliner or warns about possible lost references. This can reduce the delay of initial deletion for levels that contain a lot of soft references.\n• Users can now control the maximum transmission rate for packets on a UDP connection. The default value is 1 Gbit/second. This value can be adjusted in the Project Settings for UDP Messaging.\n• Users can now use new controls in the Take recorder to specify who is recording and who provides the source data to nodes connected in a Multi-User session. This feature is only enabled when connected to a Multi-User session.\n• FNames can now be initialized with a string that starts with an underscores in the Editor.\n• Reference Viewer now has an option to show only the filtered node.\n• Reference Viewer now has a Compact Mode that hides thumbnails on the graph nodes and reduces the space taken by each one.\n• Added an Editor delegate that is broadcast from ObjectTools::AddExtraObjectsToDelete. It allows the insertion of secondary assets that should be deleted at the same time as the ones selected by the user.\n• Added an option to UTextureFactory to specify the source image color space. This saves processing time when importing MDL materials by creating the textures with the right color space at the factory level.\n• You can now load a material from a module path and a definition name instead of loading it from a file.\n• You can now add and remove MDL module search paths for the MDL importer.\n• Very large (2GB+) skeletal meshes can now be imported into the Editor.\n• Name resolution can now be performed on TCP Message Bus and File Server connections. You can use IPv4 style addresses or a named address.\n• The Reference Viewer no longer displays the graph state overlay.\n• 16-bit grayscale PNGs are now imported as 16-bit gray textures.\n• Added support for changing the aspect ratio axis constraint when the viewport is locked to an Actor.\n• If there is a still pending open transaction when trying to launch PIE, UE now cancels the transaction instead of preventing PIE from being launched.\n• Added -BulkCheckout and -GarbageCollectionFrequency=X options to the ResavePackages commandlet. -BulkCheckout causes all assets likely to be saved during the commandlet's run to be checked out of source control before loading packages. This reduces the number of source control operations needed when working with large numbers of files. -GarbageCollectionFrequency=X helps control how often garbage collection happens, which also helps when operating on a large number of Assets.\n• Changed the spline SnapToPoint / SnapToActor default hotkeys to Shift+P / Alt+Shift+P to avoid conflict with viewport navigation hotkeys.\n• Plugins for remote control protocols (DMX, OSC, MIDI) now have their own icons.\n• Fixed a regression in Editor loading time when using GameplayCues.\n• Added support for negative values in CurveAtlas when color adjustments are disabled.\n• DDC - Added detailed stats about the DDC that are browsable in the Editor.\n• Added an Editor setting that writes to the engine global setting key/value storage instead of the environment variables. If you're already using the global DDC environment variables, these will remain in use.\n• Added per-project settings you can configure to recommend the setup of a globally shared DDC. These settings are off by default.\n• Added code support for using the gameplay tag UI in other Editor customizations via GameplayTagsEditorModule.\n• Added a new SGraphPinStructInstance class to make it easier to build custom UI for struct pins in Blueprints.\n• Added default color and grayscale calibration chart materials to Engine content and BaseEngine.ini project settings.\n• Added the -FrameproEnableContextSwitches command-line interface argument to turn on context-switch tracking in Framepro captures.\n• For the MDL Importer, imported material graphs no longer contain unused constants and parameters.\n• Fixed a crash that happened when moving Light Cards on an nDisplay Stage Actor.\n• Fixed a crash that was caused by an uninitialized FBox in BaseMeshPainComponentAdapter causing infinite recursion.\n• Removed a message dialogue from skeleton processing to fix a crash with destroying SAssetPicker while it is rendering thumbnails in its Tick().\n• Fixed how the base address was being calculated in FPropertyValueImpl::EnumerateObjectsToModify. This caused a crash with UObjects that use Sparse Class Data.\n• Fixed SVN integration crashing the Editor on Mac because libserf-1.dylib was not found.\n• Fixed a crash that happened when right-clicking certain elements in the source control history.\n• The editor no longer crashes when importing a corrupted EXR image.\n• Fixed a crash that happened when dragging new elements onto arrays of Actor instances.\n• Fixed a crash when reimporting a UDIMs base texture that was renamed.\n• Fixed a crash that occurred when trying to use Blueprints derived from AUsdStageActor in standalone mode.\n• Fixed a bug with the CSVToSVG tool that caused invalid HTML to be generated when system locale used commas as the decimal separator.\n• The Multi-User actor no longer displays in raytraced reflections when running in -game mode.\n• Fixed an issue where water actor sprites would not load due to Water Subsystem being nullptr in the actor constructors.\n• Client windows no longer spawn in a position where their title bars are hidden.\n• Fixed a bug where the first texture imported in an Editor session could have the wrong settings applied to it.\n• The type of first texture imported in an Editor session is now correctly identified.\n• ConfigureEnabledPlugins() now reports success when plugin count is zero.\n• The Ctrl + Alt + Shift + P keyboard shortcut now works while in Play In Editor mode.\n• Fixed an issue with a sub-level not being garbage collected properly when creating a new world from a template.\n• Fixed a sub-level offset issue that happened when loading a top-level world in World Composition when that sub-level had been already loaded.\n• Added a missing water sprite category in the viewport options. Billboard components now need to be added to the CDO in order to be detected by the Editor as proper sprite categories.\n• Fixed an issue that caused the icon for river water body actors to appear oversized the first time a water actor was placed in the level.\n• Fixed two separate issues that prevented the Goto Definition Editor feature from working in relocated Installed Builds.\n• Added support for displaying floats greater than e18 in the Editor, and removed cast losing double precision.\n• Fixed a bug that prevented reporting when not using the crash reporter.\n• SDetailsViewBase now allows deferred actions to call EnqueueDeferredAction. These additional deferred actions are then immediately processed in the same frame.\n• Fixed a bug with instanced objects not updating the reset to default state in the parent object when changed.\n• Fixed a bug where explicitly setting the IsEnabled attribute of an FDetailWidgetRow would not be respected, because SDetailSingleItemRow was only checking IsBound(), not IsSet() as well.\n• The Paint tool is now correctly grayed out when painting textures with mesh paint if the mesh has no paintable textures to cycle through.\n• Fixed an issue that caused Fixed FApiContext::AddSearchPath to register a folder’s parent folder to the MDL path instead of the folder that was requested.\n• Fixed an issue that caused a missing portable call stack in the crash report generated when the Editor had more than 256 threads and the crashing thread was not in the first 256 threads visited by the OS.\n• Fixed an issue that caused the Editor to deadlock randomly while reporting a failed ensure().\n• Fixed an issue that caused sublevel components to fail to toggle when changing sublevel visibility in the Editor.\n• Fixed an issue that caused the crash reporter UI to sometimes take several minutes to process and display crash information after an Editor crash.\n• Improved the messaging for file I/O errors in JSON deserializer that usually happened when users ran the Editor from a network drive that disconnected or failed to read.\n• Fixed an issue where specifying multiple TCP connection endpoints from the command line did not work.\n• Range selection in the Persona tree view now behaves correctly when the initial selection is made from the viewport and the second selection is made from the tree view.\n• Fixed a bug that caused disabled toolbar combo buttons to incorrectly appear enabled when shown in a sub-menu.\n• Fixed an issue where some Asset editors would end up in a non-functional state after a window closing request was canceled, including the Blueprint Editor showing 'Unrecognized Tab' panels.\n• Preview widgets are now marked as being in Design mode before being destroyed, to prevent them from invoking NativeDestruct in the Editor.\n• Added ConditionalPostLoad call before building collision on a display mesh, fixing a potential issue where complex collision meshes didn’t work properly in PIE.\n• Transient Actors spawned through BP are now also transactional.\n• Fixed an issue with FBX exporting where multiple meshes with the same material would receive the default material instead.\n• Camera piloting now takes into account the camera component's additive offset.\n• Fixed issue where SkipProperty wasn't being passed to WriteRow in the data table CSV writer.\n• Fixed a vulnerability due to an integer overflow and a heap overflow when loading a modified TGA file.\n• Fixed 'More Actions' menu items not doing anything when using the embedded gameplay tags editor within the Blueprint editor details panel.\n• Fixed an issue where transform changes were applied twice to attached Actors when selecting both the Actor and its parent.\n• SGraphEditor now correctly returns the value of GetSingleSelectedNode.\n• Fixed an issue where expansion state was not being properly retained in trees with more than 500 items\n• The new mesh paint mode is now correctly hidden if legacy mode is set in the Editor preferences.\n• Fixed an issue that caused map built data to be marked dirty too aggressively (for example, when placing an invisible / logical actor that did not affect lighting in the Level).\n• Fix a crash that happened when syncing out of date Assets in the Editor if a dependency package was not found.\n• Fixed a crash that happened when importing an OBJ file and using the create instanced materials option.\n• Updated AdvancedCopyPackages to pass the bShouldSuppressUI flag in headless mode.\n• Fixed FEditorModeTools::IsSelectionAllowed to allow selection if any Editor modes do instead of just checking the last mode in the list.\n• Fix an issue that caused a duplicate copy of a package to remain on disk with the old name when renaming the package.\n• Open Color IO UI: Fixed a UI issue where Colospace Index was not serialized into string and therefore appeared as invalid on instanced objects.\n• Fixed a bug that caused DPI adjustment to be incorrectly applied to the new window spawned when starting PIE.\n• Fixed an issue where socket snapping didn't work unless the component was the root component.\n• Base brush properties (size, strength, and falloff) are now correctly restored after leaving and re-entering Mesh Paint mode.\n• Fixed an import problem with FBXs containing LODs with meshes which could not be triangulated (for example, due to being non-manifold). Problematic meshes will be omitted and a warning will be generated. If a LOD cannot be imported at all, it will be auto-generated instead.\n• Fixed a hang during startup when a Blueprint-based Trace Source filter was active.\n• Fixed a bug with spline component Undo/Redo when the component was selected, rather than the Actor.\n• Reimporting a .FBX file no longer deletes custom metadata on the reimported assets. Only the FBX metadata are now affected by the reimport.\n• Fixed an issue where the FBX import would wrongly assume the importing of a skeletal mesh when the FBX file contained animation but no skeletal mesh.\n• When importing a FBX file, fixed an issue where some custom curves configurations were not properly imported, causing incorrect tangents.\n• Fixed a bug in the editor which would open the file selection window twice when reimporting an asset with the \"reimport with new file\" option.\n• In MDLimporter, clears the log error when an .mdl file can't be imported because the plugin was built without MDL SDK.\n• UParticleModule is now marked as within ParticleSystem to prevent instancing with other outers, which caused several crashes.\n• Asset tooltips now display data tags based on the asset’s parent class.\n• Fixed a bug that prevented any type of Haptic Feedback assets from being created in the Content Browser.\n• Fixed a bug that prevented the creation of Sub UV Animation assets from the Content Browser.\n• Fixed a bug that prevented the creation of UForceFeedbackAttenuation assets from the Content Browser.\n• Fixed a bug that prevented native classes from appearing in the Content Browser Collections.\n• Fixed a bug that caused thumbnails for child Blueprints which override parent Blueprint data to render incorrectly.\n• Updated SetPrimaryContentBrowser in FContentBrowserSingleton to verify that the browser can be set as primary.\n• Fixed an issue where files could not be dragged into new folders in the Content Browser's column view.\n• Optimized source control operations when renaming Assets to fix a large stall when renaming or moving a large number of files.\n• Advanced copy will now find all dependencies, even if they are not in memory.\n• Prevent crashes when creating mesh sections in ProceduralMeshComponent with out-of-bounds vertex indices or non-unique vertex indices within a triangle.\n• Added tooltips for Scalar parameters in the Material Editor.\n• Sped up opening material editor for material instances with many parameters.\n• When a material function changes, all in-memory material functions are now checked to see if they use that function, and recompiled if they do.\n• Vector parameter children should now be editable as expected when the vector parameter is overridden.\n• Media Capture: Added support for unconventional pixel formats such as R, RG, RGB10A2, and BGR.\n• Merged alpha manipulation function into one shader. Media capture options allow you to force the alpha channel to be set to 1. This is useful if the render target doesn't have an alpha channel.\n• Overhauled AVEncoder to support Linux and Windows with both NVENC and AMF.\n• Added GetLevels in EditorLevelUtils for Blueprint and Python scripting.\n• Added a function to EditorStaticMeshLibrary for setting material slot assignment for LODs.\n• Updated Editor utility widgets to not dirty the level when reinstancing.\n• Fixed an issue where utility widgets could fail to spawn properly on Editor startup.\n• Fixed a crash that happened when the Preview Scene Settings tab was spawned before the Viewport tab.\n• Added support for the treatAsPoint attribute on UsdSphereLights. This attribute will change how the light surface is calculated when converting USD light units to physical light units.\n• Added support for the UsdLuxShapingAPI schema. If a sphere light has the schema, a spot light component will be generated in UE and its cone angle will be set according to the cone angle attribute.\n• Added support for USD render contexts. When parsing materials, Unreal Engine will now load the shaders associated with the requested render context.\n• User code can register new render contexts to display in the USD Stage Editor.\n• Added the ability to export an Anim Sequence asset to a USD file.\n• Added support for the UsdLuxLight exposure attribute when calculating the light intensity for Unreal.\n• Added support for the EmissiveColor input when parsing UsdPreviewSurface materials.\n• Improved the conversion from Unreal skylight components to UsdLuxDomeLights. The cubemap will now be written out as relative to the USD layer Unreal Engine is writing to.\n• Attributes will now be written out to the default time code instead of at the UsdStageActor time.\n• Added an asset cache to speed up reloads for USD Stage actors. Textures can be persisted in the cache and won't be recreated unless the source file has changed since the last time it was processed.\n• Added support for the USD MDL Schema in the USD importer. This enables referencing MDL materials in a USD file and importing those in Unreal.\n• Added a script to convert USD lights to the new USDLuxLight schema in USD 21.05. The script is located in \"Engine\\Plugins\\Importers\\USDImporter\\Content\\Python\\usd_unreal\\update_lights_to_21_05.py\". Detailed instructions can be found within the script itself.\n• More warnings and feedback have been added for when the prim configuration is incorrect for the parsing of LOD meshes from USD files.\n• Persistent support was added for muting tracks and disabling sections on the Level Sequence Asset generated when opening a USD Stage.\n• Improved the undo/redo and multi-user support for USD stage manipulation via the USD Stage Editor window. Most operations and attribute changes are now tracked.\n• Added Blueprint and Python functions to fetch prim/component/asset correspondence for opened USD Stages via the USD Stage Editor window.\n• Allows editing other properties via the prim properties panel on the USD Stage Editor window.\n• You can now use tags to correctly handle USD-style pruning visibility when toggling Scene Component visible flags and prim visibilities in the USD Stage Editor.\n• There has been a complete rewrite of the level exporter to USD to add support for exporting foliage, landscapes and sublevels, and to update legacy scripts to Python 3.\n• In-memory stages are now created when using File > New on the USD Stage Editor instead of immediately presenting the Save prompt.\n• Stabilized behavior of AUsd Stage Actor when it is a Blueprint parent class.\n• Allows exporting Static/Skeletal Meshes and scenes to USD using dedicated payload files.\n• Back light and camera component property changes are now written to the opened USD Stage when edited on spawned components.\n• Removed the dedicated stage info panel on the USD Stage Editor. This now shows (along with more data) when no prim is selected; additionally, the stage now shows as the root prim entry on the stage tree view.\n• Synchronizing prim selection on the USD Stage Editor window with viewport selection is now allowed by picking Options > Selection > Synchronize with Editor on that window.\n• A dedicated asset cache has been created to store the assets generated from opened USD Stages to the AUsdStageActor.\n• Added static and skeletal mesh export options when exporting to USD to allow setting of Meters Per Unit and Up Axis.\n• Changed how the Usd Stage Actor binds stage loading and unloading to actor lifecycle functions. This provides more predictable behavior in complex scenarios like level streaming, switching levels during PIE, and Movie Render Queue operations.\n• Changed the USD material import workflow to use master materials instead of generating new materials on each import.\n• Support has been added for renaming prims via the USD Stage Editor.\n• Added an export options dialog when exporting UAnim Sequence assets to USD.\n• No longer crashes during reimport of a material from USD when the original replaced material is currently in use on the scene.\n• Trying to import LOD meshes out of some elaborate prim hierarchies in USD files no longer causes crashes.\n• Sequencer no longer crashes if an opened USD Stage has animations and startTimeCode < endTimeCode.\n• Fixed a crash that occurred when loading a project with the USD Stage Editor window open in the layout along with a startup level without an AUsd Stage Actor.\n• Fixed a crash that occurred when handling mesh components with material overrides on LOD meshes from USD Stages.\n• A crash no longer occurs when switching levels after opening USD Stages that generated UGeometry Cache assets.\n• Fixed multiple crashes when parsing LOD meshes out of USD variant sets while opening a USD Stage.\n• Fixed an issue that caused texture file names to be lost when importing from USDz packages.\n• Fixed an issue that caused only one texture to be imported from USDz packages.\n• Fixed an issue where the cubemap was not getting assigned to the SkyLightComponent if the texture was already cached.\n• On the USD Stage Editor window, fixed the right-click interactions on prims inside variant sets.\n• An issue where USD AnimSequence exporter was not, in some cases, finding a preview mesh to export with has been resolved.\n• Fixed incorrect skeleton matching when exporting AnimSequences/SkeletalMeshes to USD in some instances, such as when the mesh's skeleton differs slightly from the skeleton asset.\n• Fixed the USD stage sometimes failing to close after interacting with prims on the stage tree view (left pane) of the USD Stage Editor window.\n• Fixed an issue where the USD stage would unnecessarily close or open when the USD Stage Actor was in a persistent level that was hidden or shown.\n• The stage now properly closes and reopens when the USD Stage Actor is in a streamed sublevel that is hidden or shown.\n• Fixed the Post Edit Change Property so it no longer forces the USD stage to load when already loaded.\n• A warning now displays if cubemap is not found on the filesystem when setting it onto a USD prim.\n• Incorrect color space conversion was corrected when importing vertex colors from USD geom meshes.\n• Fixed an issue so skeletal meshes are no longer visible on the viewport in some scenarios after exporting UAnimSequence assets as USDs.\n• The USD Stage Importer now uses the provided import options if triggered from an automated task.\n• Fix camera transform orientation compensation when writing back camera transforms to the USD stage.\n• Spawned components are no longer left in an invalid state after undoing a transaction where their owning AUsd Stage Actor is deleted.\n• Fixed a stationary light overlap problem for lights imported or spawned from USD files.\n• Fixed an issue where USD Stages and layers remained open even after being closed via the USD Stage Editor window.\n• Fixed the AUsd Stage Actor trying to use a deleted Level Sequence in some scenarios.\n• Fixed an issue where normal maps would disappear in the MeshEditor tab of the Static Mesh Editor for some meshes imported from USD files.\n• Added support for material overrides on Point Instancer prototypes when opening/importing them from USD Stages.\n• Fix an issue of spawned actors and components being visible for an AUsd Stage Actor in a hidden level or layer opened a new USD Stage.\n• It is now possible to mute/unmute USD layers via the USD Stage Editor window if the root layer is within the project's folder. This fix included a way to add USD layers as a sublayers of themselves.\n• Fixed some USD meshes that were losing their UV sets when opened with the USD Stage Editor and imported with Actions > Import.\n• Disabled the placement of VR editor mode gizmo actors from the place actors panel. This prevents the VR gizmo actors from saving into a level and causing a crash when that level is deserialized.\n• Fixed an issue where the Level Browser would lose folder information when switching streaming type.\n• Can now hide all unused pins when using Blueprint Make Struct nodes.\n• PlayerState Actor’s IsOnlyASpectator function is now exposed to Blueprints.\n• Action level modifiers and triggers are evaluated in a second pass, after all mapping level modifiers and triggers. \\\n• Added new Blueprint Compiler options and internal reinstancer flags to allow users to enable delta serialization.\n• Camera modifiers; including Camera Shakes, will now affect post-process settings. Matinee Camera Animations are played directly by the Player Camera Manager.\n• Moved legacy Matinee Camera Shake into the new GameplayCameras plugin. This makes it possible to add a Sequence shake pattern onto this class, because Matinee is deprecated and will be removed in a future version.\n• Moved Camera Shake implementation in a \"shake pattern\" class, leaving the base class as a container. This is to make it easier for artists to change a shake completely without having to make a new one, as well as for programmers to write new shake behaviors that can work with existing ones.\n• Game feature action for adding a Data table or Curve table as a Data Registry source.\n• Modified UGameplayAbility’s PreActivate method to optionally take in trigger event data.\n• Newly placed comment nodes will no longer show comment bubbles when a graph is zoomed out.\n• Applied limits to Camera Shake Rotation when not using headsets.\n• When restarting a single-instance camera shake that was blending out, the current blending weight will transfer into a blend-in if appropriate.\n• Camera shakes with a custom duration can provide a \"hint\" of that duration.\n• Camera shake time-keeping and result handling logic have been refactored for reusability. \\\n• Added new method ‘GrantAndActivateAbilityOnSelfWithParams’ which allows Designers to pass in FGameplayEventData when granting and then activating an ability from Blueprint.\n• Sequence camera shake can now animate post process settings, and better handles the difference between focal length and field of view.\n• Added API for scrubbing camera shakes. This results in better support for putting shakes inside sequences.\n• Removed an unused virtual method ‘ApplyStackingLogicPostApplyAsSource’ in the ActiveGameplayEffectsContainer class and made the destructor of the ActiveGameplayEffectsContainer class non-virtual.\n• Changed the Gameplay Cue Interface to pass Gameplay Cue Parameters Struct by reference.\n• Added more support to filter Gameplay Tags in the Editor using a project-specific filter. OnFilterGameplayTag supplies the referencing property and the tag source, so you can filter tags based on what asset is requesting the tag.\n• Improved Asset Manager to support virtual paths like AssetSearchRoots that can be replaced with dynamically set paths. Additionally, several new utility functions have been exposed as part of increased support for data registries and game plugins. \\\n• Added OnActorPreSpawnInitialization delegate which is broadcasted before the Actor and its components have been initialized.\n• Native Gameplay Tags. Introducing a new FNativeGameplayTag, these make it possible to do one off native tags that are correctly registered and unregistered when the module is loaded and unloaded. Macros can be used to hide any implementation details that may adjust over time, example: UE_DEFINE_GAMEPLAY_TAG(DamageTypeFire, \"Damage.Type.Fire\"); All new macros include: \\ \\ UE_DEFINE_GAMEPLAY_TAG_STATIC(TagName, Tag) UE_DECLARE_GAMEPLAY_TAG_EXTERN(TagName) UE_DEFINE_GAMEPLAY_TAG(TagName, Tag)\n• Improved Scalable Floats in the Gameplay Abilities plugin to support dynamic lookup of curve tables from the new Data Registry system. Added a ScalableFloat header for easier reuse of the generic struct outside the abilities plugin.\n• Added option to preserve the original captured SourceTags when GameplayEffectSpec’s class method SetContext is called after Initialization.\n• Editor-only references are no longer followed when assigning management references in the Asset Manager.\n• Improved UI for registering Gameplay Tags from specific plugins. The new tag UI now lets you select a plugin location on disk for newly added Gameplay Tag sources.\n• Exposed AddControlPointPosition and ResetControlPoints to Blueprint in the InterpToMovementComponent.\n• The script execution recursion limit is now stored in a cvar named bp.ScriptRecurseLimit. The default value on desktop is now 120 to match consoles, instead of the previous value, 250. You can set this value higher in the [Console] section of DefaultEngine.ini file if you need to keep the limit at 250 on desktop.\n• Improved member packing on FHitResult to reduce size from 148 bytes to 144 bytes.\n• Made several performance improvements to loading and regenerating the gameplay tag table were implemented so that this option would be optimized.\n• Fixed a crash when calling CanSelectActor on an Actor that is not in a level.\n• Fixed a crash that occurs when dragging and dropping a Geometry Cache asset into Blueprint Editor viewport to instantiate a Geometry Cache Component.\n• Fixed a crash which occurred when applying instance changes to a Blueprint while a child Blueprint with different properties is also present in the level.\n• Fixed an Editor crash that could occur when reparenting a Blueprint with at least one Blueprint-added component to a duplicate of the Blueprint as the new parent class.\n• Fixed crash when diff a blueprint asset which contains an enum variable while the enum class has been moved to another file/ folder.\n• Fixed a serialization crash that could occur when a previously-compiled function's outer Blueprint class object had not yet been freed by Garbage Collection.\n• Fixed an ensure that occured when running in-game when a Text3D component was added in a Blueprint.\n• Fixed a crash when reinstancing a Blueprint with an abstract outer.\n• Fixed a crash that could happen when compiling a Blueprint after loading it for a diff.\n• In the Kismet Math Library, BlueprintAuthority has been removed from MinimumAreaRectangle .\n• Prevented the CharacterMovementComponent from continually sending client location corrections when World Origin is rebased.\n• Any Completed or Canceled action event delegates will now report proper timing data.\n• The upper threshold clamp on the input system’s deadzone modifier is now applied correctly.\n• AxisConfig settings from the old input system are now ignored for all devices, except for mouse axis scaling.\n• Fixed a case where a Level Blueprint would not run during Play In Editor (PIE) sessions after the Editor had been restarted.\n• Linkage to UStaticMesh when inheriting from your own module has been fixed.\n• GamePlayEffectsContainer’s SetActiveGameplayEffectLevel method will no longer dirty FastArray if setting the same EffectLevel.\n• Fixed Actors who are attached to the World Outliner as a Child Actor from becoming detached when a level is reloaded.\n• Improved the display of structs when watching their values in Blueprint.\n• Fixed split pin defaults from being wrong when splitting nested user defined structs.\n• Fixed a root motion source issue where a networked client could crash when an Actor finishes executing an ability that uses a constant force root motion task with a strength-over-time modifier.\n• Property chains will now resolve when old and new objects are not of the same class.\n• Fixed missing struct-typed TSet and TMap default value overrides in a dynamically-instanced Blueprint-added component when \"optimized Blueprint component instancing\" is enabled for an Actor class in a cooked build.\n• Added an additional check in GameFrameworkComponentManager while dealing with an AddComponentRequest call so we don't hit an ensure before the Actor has begun play.\n• Fixed an edge case in gameplay effect mixed replication mode where Actors not explicitly owned by the net connection but who utilize that connection from GetNetConnection will not receive mixed replication updates.\n• Fixed a case where cyclic dependencies could cause default values to be unloaded.\n• When checking if a Blueprint variable is in use, the Editor will now consider references from other Blueprints as well, Additionally this is used when attempting to delete a variable.\n• Fixed an endless recursion occuring in GameplayAbility’s class method EndAbility which was called by calling EndAbility again from K2_OnEndAbility.\n• Allow wildcard connections to the wildcard pins in the Format Text node so that it can be used inside of macros.\n• Gameplay tags Blueprint pins will no longer be silently cleared if they are loaded before tags are registered. They now work the same as gameplay tag variables, and the behavior for both can be changed with the Clear Invalid Tags option in the Project Settings.\n• Deprecated SimpleConstructionScript’s class method GetAllNodesConst FBlueprintEditorUtils::FindSCS_Node, which now returns the USCS_Node pointer and not the index to the node.\n• DMX Fixtures - DMX spot lights now correctly emit constant total energy distributed over a dynamically changing cone area (steradians). This better mimics a real spotlight with zoom and affects both the light and the light beam.\n• FText::AsCurrencyBase now takes an optional additional parameter that can be used to override the number of fractional digits.\n• ICU timezone data has been updated to v2021a.\n• We now rebuild the package localization cache for all current cultures when the culture changes. Previously, we would only rebuild the cache for the current language, which could leave the asset group cultures uncached and lead to the incorrect localized package being used.\n• Added profile-guided optimization (PGO) to optimize build options to Android Toolchain. PGO-optimized builds can be up to 10% faster in some CPU-bound scenarios.\n• The Editor Preview Rendering Level mode now activates the IOS or Android device profiles in the editor, allowing mobile-specific console variables to be set.\n• In DefaultDeviceProfiles.ini, the PreviewAllowlistCVars and PreviewDenyListCVars arrays can be used to specify the CVars that will be applied when Preview Rendering Level is enabled.\n• Android now calls the Memory Warning Handler when triggered via Java-side on Memory Trim callback and memory advisor state changes.\n• Android GLES has a new texture LRU system that is enabled by default. 2D textures are now held in system memory until required for draw calls. The textures are returned to system memory after 500 frames of non-use. This reduces the GLES memory footprint for most devices; however, it can have an impact on performance, and should be disabled if many new textures are frequently required in a single frame. Setting r.OpenGL.DeferTextureCreation to 0 will disable the GLES texture LRU.\n• Fixed a crash in FSkeletalMeshObjectGPUSkin::GetSkinVertexFactory when no valid LOD render data is available — for example, due to platform MinLod.\n• Fixed the stat Draw Count mobile preview in the editor. It now displays correct draw count statistics\n• Android Java logging callback is now initialized earlier to capture more messages at startup.\n• When handling a fatal log message, Android now calls out to FCoreDelegates::OnHandleSystemError and FCoreDelegates::OnShutdownAfterError as well as filling GErrorExceptionDescription with the actual error string.\n• Added an option that allows DOM storage on Android WebView.\n• The CPU per-core frequency is now exposed to CSV Profiler and Unreal Insights.\n• HWC Pipe (GPU performance counters for ARM Mali) is now only enabled when -hwcpipe is specified in UE4CommandLine.txt.\n• Java can now pass logging to Unreal with NativeCalls.UELog* on Android.\n• While the editor is running, Android devices now maintain a port forwarded over USB to allow Cook-on-the-Fly (COTF) network file server and Unreal Insights to work without requiring WiFi connectivity. Specifying the IP address 127.0.0.1 will now allow Insights or COTF traffic to work across the USB cable.\n• Improvements for Memory Advisor include an updated crash reporter state at once instead of per property, and a 10-second delay on reporting less critical states.\n• Exposed the Memory Advisor's Memory Warning state (from 0, OK, to 2, Critical) to CSV Profiler and Unreal Insights.\n• Added a per-project Gradle-warning filter with Build/Android/GradleFilter.txt (see an example in Engine/Build/Android/Java).\n• SoC temperature and\\or thermal notifications are now exposed to CSV Profiler and Unreal Insight. This information might be unavailable on some devices.\n• Added config rule variable access to Android's Device profile-matching rules. The SRC_ConfigRuleVar source type is now available to Android's Device Profile Selector. \\ The 'MatchString' must be in the format of MatchString=\" | \". The will be used for the CMP operation against the actual value contained in\n• Example: \\ +MatchProfile=(Profile=\"Android_DeviceA\",Match=((SourceType=SRC_ConfigRuleVar,CompareType=CMP_Equal,MatchString=\"DeviceA_Enabled|true\") \\ Thus Android_DeviceA will be matched if the config rule variable 'DeviceA_Enabled' CMP_Equal's 'true'.\n• Added support for alternate mouse events on Android to support DualShock4/DualSense controller touchpads.\n• Unregisters listeners from SensorManager when not being used to reduce the SensorManager battery cost.\n• Updated to use AndroidX instead of older support libraries.\n• Fixed crashes with the Android Web Browser Widget that were due to event delegates being called from the wrong thread.\n• Changed the handling of the Android console history to work with Android 11 (buttons instead of a swipe).\n• Updated Android distribution install scripts to use /data/local/tmp instead of /sdcard/Downloads for staging OBB files.\n• Corrected the per-file cost calculation of an OBB that is used to determine how to split up PAK files between OBBs.\n• Fixed an issue where the editor's Preview Rendering Level menu only showed the first Android preview platform even when OpenGL ES and Vulkan were both enabled.\n• Fixed backup log saving on Android—now registers the log file in the UFS/NonUFS manifest after it is created so that it can be correctly backed up later.\n• The timestamp is now removed from the UFS/NonUFS manifest when a file is deleted on Android.\n• Fixed a GLES assert that could fire during PSO cache processing if the incoming PSO had already been rendered/instantiated before PSO cache loading began.\n• Fixed an issue when UE failed to detect Samsung's family of Exynos SoCs, and would not set Big\\Little core affinity masks for threads.\n• Now uses proper line endings for Android install scripts based on the target platform.\n• Fixed ProGuard to keep defaults for AndroidX annotations.\n• Added cleanup of previous APK/AAB before the packaging step to fix an issue with package size growth.\n• Added an option under Project Settings > IOS, to allow you to override the path on the remote build Mac where iOS builds are performed. This is useful for saving space on the primary hard drive on a remote Mac.\n• No longer crashes when destroying text entry fields on iOS.\n• Fixed a crash that occurred when trying to open a new dialog while an existing dialog is transitioning in or out.\n• Fixed some capitalization issues with iOS in plugins. When using Whitelist Platforms inside a uplugin file, the correct syntax for iOS is \"IOS\" not \"iOS\". Using the incorrect case can cause dependency problems.\n• iOS now uses a default compressed format for textures set to BC7 compression instead of falling back to uncompressed formats.\n• Fixed a path-quoting issue linking Frameworks that caused link errors for IOS when using the Launcher binary build.\n• Fixed a bug in iPhonePackager Mach-O handling by updating signatures to use SHA-256. This resolves a problem where iOS apps built on a PC or re-signed by iPhonePackager would fail to load on iOS 14.5 or later.\n• Fixed build errors when compiling iOS C++ on Mac using Unreal Engine installed from the Mac Epic Games Launcher.\n• Updated PacketHandler components so that they can be added from non-engine C++ using a delegate.\n• Updated IpNetDriver‘s maximum time budget check in the packet reception iterator to correctly check only after a specified number of packets\n• Added optional logging of synchronous loads triggered by the replication system.\n• Modified the \"LogNet: NotifyStreamingLevelUnload\" to verbose by default to prevent log spam.\n• Fixed crashes when trying to clone adapter addresses when none are available.\n• Fixed crash issue caused when UDP message errors are received after the UDPMessaging module is unloaded.\n• Fixed issue in which DTLS packet handler failed to connect under high-packet-loss conditions.\n• Fixed issue in which invalid authentication tags prevent the AESGCM packet handler from connecting.\n• Fixed issue in which fast array struct delta serialization does not properly resend on NAK.\n• Fixed issue where UniqueNetIdRepl replicated when the net ID string is numeric and contains the + or - character, or has an odd number of digits.\n• Optimized the building of LevelsToTick list in LevelCollection to reduce build time.\n• If an OnlineBeacon attempts to destroy the NetDriver while the NetDriver is ticking, the destruction operation will be deferred to PostTick to prevent a crash.\n• Added a path export table to network GUID cache serialization in checkpoints to reduce its size.\n• Added option to not reload the default map after a replay stops.\n• Fixed a replay crash when scrubbing in the editor.\n• Updated ReplaySubsystem::PlayReplay to use WorldOverride in StopExistingReplays.\n• Fixed regression where information about net startup Actors destroyed prior to recording start were lost.\n• Added handling for serialization errors when reading net field export groups from a replay checkpoint.\n• Prevented replays from incorrectly forwarding RPCs during playback to other drivers.\n• Fixed an issue when recording DORM_Never Actors into checkpoints.\n• Fixed an issue with reused destroyed channel index in amortized checkpoint recording.\n• Fixed cleanup for broken Actor channels that never spawned.\n• Prevented inactive property changelist from being modified by replay checkpoints.\n• Fixed a replay ensure by using the base function when finding the layout for a received RPC.\n• Fixed issue when the server could stop replicating based on the position of the replay connection.\n• Optimized DormancyNodes in ReplicationGraph using a configurable setting to improve RepGraph performance when adding or removing dormant Actors after multiple clients disconnected.\n• Added number of total connections replicated during a frame to the FFrameReplicationStats.\n• Updated ReplicationGraph to send statistics on replicated Actors on every frame that must be collected using PostServerReplicateStats.\n• Optimized ReplicationGraph by allowing ConnectionDormancy nodes to be considered obsolete if they have not been gathered for a specified time.\n• Added the ability to log statistics on all RepLists held by RepGraphNodes using Net.RepGraph.Lists.Stats.\n• ActorList nodes will now empty their RepList on TearDown.\n• Updated the DynamicSpatialFrequency node’s ActorChannelCloseFrameNum to prevent dependent Actors from being prematurely destroyed.\n• Fixed an issue where multicast RPC channel opens ignored Actor’s bOnlyRelevantToOwner flag.\n• Fixed issues when a join a progress client reused the pointer of a disconnected client.\n• Fixed RemoveClientConnection not removing the proper GraphConnection if it was in the PendingConnection list\n• Renamed GraphConnection's ConnectionId to ConnectionOrderNum. This is to prevent users from thinking the ID persists across the lifetime of the object. It is only unique during a single tick of the RepGraph and will change during a session as clients join and disconnect.\n• FActorRepListRefView::ResetToNull is deprecated and has been renamed to TearDown.\n• Deprecated the FActorRepListRawView struct in favor of the new FActorRepListConstView, which uses a cleaner interface to the allowed operations when parsing a gathered list.\n• Updated DependantActor lists to use a TArray instead of a FActorRepListRefView which reduces the number of allocated lists in the list pool.\n• Updated FActorRepListRefView to use TArrays to store its replication list instead of FActorRepLists which increases its overall performance by up to 10 times.\n• Deprecated Remove() in favor of RemoveFast and RemoveSlow.\n• Added a warning to BSDSockets for when the destination protocol does not match protocol.\n• Added a warning to FUdpSocketReceiver when MaxReadBufferSize limit is reached.\n• Added new Asset type “Niagara Parameter Definitions.” The Niagara Parameter Definitions Asset allows defining a set of parameters, and those definitions are shared with all Niagara Scripts, Emitters and Systems in the project. The intended use for Niagara Parameter Definitions is to predefine a name, type and description for parameters used in Scripts, Emitters and Systems, and automatically synchronize changes to the parameter definition’s name, default value, and description with all parameters it is linked to.\n• Menus to add parameters in Niagara Scripts, Emitters, and Systems are now populated by all Parameter Definitions in the project.\n• Parameters that share the same Namespace, Name and Type with a Parameter Definition are now linked to the Parameter Definition. The description, default value and name of the Parameter Definition are synchronized to all Parameters it is linked with.\n• Parameters have a new default value mode “Definition”. Parameters that are linked to a Parameter Definition can choose “Definition” as the default value mode. This automatically copies the Default Value Mode and Default Value of the linked Parameter Definition to the parameter.\n• Parameters created before a Parameter Definition but which share the same Namespace, Name and Type with the Parameter Definition will become linked to the Parameter Definition. The Parameter’s description will be overwritten with the description of the linked Parameter Definition. If the Parameter default value is different from the default value of the linked Parameter Definition, the Parameter retains its default value; otherwise, the Parameter has its default value mode set to Definition, and its default value will be overwritten with that of the linked Parameter Definition.\n• Users can now handle a buildup of render ticks inside the batcher in a user-selectable way. Use \"fx.Niagara.Batcher.TickFlush.Mode\" to select the mode (Do Nothing, Process, Kill). Use \"fx.Niagara.Batcher.TickFlush.MaxQueuedFrames\" to decide how many frames before you need to flush.\n• Added a new Select node that can use an Index type for its selector pin (bool, integer, enum). This is used to select one or more values at runtime, based on the input of the selector pin.\n• Previously established output types in the Select and Static Switch nodes can now be altered by using the \"Pin Type Selector\" next to its respective output pins.\n• A wildcard pin type in the Select node now allows changes to the existing pin types using drag-and-drop.\n• Added to Mesh Arrays:\n• Added the ability to choose multiple Static Mesh resources for the Mesh Renderer (selectable via Particles.MeshIndex).\n• Added \"Mesh Flipbook\" feature to fill the array with a sequence of Static Mesh assets.\n• Added a Mesh Renderer Info data interface, to enable systems to query info about their mesh renderers (such as the number of meshes selected and the bounds of each).\n• New menus and features have been added to the Niagara Editor. This includes options for better filtering, as well as a \"Suggested\" section in the modules, dynamic input, and Script action menus that will list often used actions at the top. Scripts and Modules can be marked as \"Suggested\" in the metadata.\n• Added a random seed offset to Niagara System instances, to allow for variance between duplicated deterministic systems (this must be set on either the component or from Blueprint before activating the system when spawning).\n• Curves can now be exposed to material bindings.\n• The Select and Static Switch nodes driven by an enum will now automatically refresh when the enum is changed. This excludes Static Switch nodes created before this release.\n• Render target Data Interfaces can now be an iteration source. You can not read from the render target, as they do not handle flipping buffers correctly, so they are considered write-only.\n• You can use a Define to control partial write code generation; this enables you to keep the same functions for reading in, making it compatible with CustomHLSL. It also means Niagara doesn’t rely on the compiler to strip out the bindings for input values, which has been unreliable on some platforms.\n• Added \"Source Mode\" to the Skeletal and Static Mesh Data Interfaces, so users can more explicitly identify where the source mesh should come from.\n• Added support for tooltips on Data Interface function inputs and outputs.\n• Niagara now supports configurable playback speeds in its editor settings.\n• New shortcut: S key isolates all currently selected Emitters.\n• New shortcut: D key disables all currently selected Emitters.\n• Added options to control how many bits we use to store probability/alias buffers for uniform sampling. The default is set to 24 bits, triangle 8 bits probability, allowing for 16.7 million triangles.\n• For Niagara 2D gas fluids, added offset to the Advect Scalar Module, to allow for the parent velocity to be used without it integrating into the sim's local velocity grid.\n• If a Static Switch is switching on an enum that isn't registered yet, it now can be registered as a Niagara-wide enum using the new context option.\n• Added the \"Set Fixed Bounds (System)\" command in the \"Bounds\" section of the toolbar. Previous command for Emitters is now only available if any Emitter is selected (in a System); it is always available when in an Emitter Asset.\n• Added a new Waveform Module and Dynamic Input which can be used to generate and combine many different waveforms, including: triangle, square, sawtooth, trigonometric functions and multiple spline variants.\n• In Niagara 2D Fluid, added a world space noise option to the turbulence field module (the default is “Off”).\n• Added an option to the Light Renderer to scale light brightness by color alpha.\n• Added support for overriding textures used with UNiagaraDataInterface2DArrayTexture.\n• Added \"Renderer Visibility\" to the Component Renderer, and fixed a bug where components would be deactivated but not set to invisible when a particle dies.\n• Added the ability to collide with custom depth in the Collision Query Data Interface.\n• New: Grid3D Updates: Users can now expose user parameter/render target binding to materials.\n• New: Grid3D Updates: Added an override for material/resolution selection.\n• New: Grid3D Updates: Added Details so users can display Attribute names (when hooked up).\n• Added a variable binding for the Pivot Offset of Niagara sprites.\n• Added an Inherit Source Movement module which emulates the Cascade Source Movement module.\n• Added \"Default Exponent\" (value to use when a variable is not bound) and \"Renderer Visibility\" to the Niagara Light Renderer.\n• Added Distance Culling and Renderer Visibility to the Niagara Sprite Renderer.\n• Added symbolic search capability (+,-,*,/) in the search filter for common math dynamic inputs such as add, divide, and some boolean operations.\n• Improved Niagara's indirect dispatch argument buffer allocation scheme (the buffer that is used for GPU systems and for culling and sorting meshes and sprites).\n• Niagara now allows Particle Reader to be used as an iteration source.\n• New Static Switch nodes that switch on an enum will now automatically refresh upon load, or if it's open. Old Static Switch nodes will not do that, they do not break existing usages. CVar \"Niagara.StaticSwitch.EnableAutoRefreshOldStaticSwitches\" has been introduced to enable refreshes on old static switches as well.\n• New: Enum context options for Select and Static Switch when user performs a right-click on these nodes.\n• Added the ability to right-click and select \"Auto-fill all options\" on various array properties in Niagara (such as \"Filtered Bones\" on a Skeletal Mesh Data Interface).\n• Added unused attribute trimming for Niagara particle scripts. \\ This improves the existing heuristics for figuring out which particle attributes are not needed (either by a renderer or an external reader), and adjusts the generated code so that the attributes can be stripped. This results in a ~25% reduction in particle payload for typical scripts.\n• Made updates to static VectorField. CPU data is now stored as a half3 (instead of float4) when ISPC is available, and an ISPC kernel has been added to the Niagara DI for sampling. For supported platforms, it reduces memory cost (from 16 bpp to 6 bpp) and improves sampling time (2x speedup).\n• Refactored significance handling. This now allows for various metrics such as Age and Distance. Projects can also define their own game-aware significance calculations. Spawn Only EffectTypes also have the option to consider the significance of Systems when spawning.\n• New: Systems with Dynamic Bounds can now make use of visibility culling.\n• New: Added a new Data Interface that allows checking of the current platform. As an example, this can drive specific behavior that only works on a certain platform.\n• Optimized FNiagaraScalabilityManager for cases where there are large numbers of registered components. It now tries to meter out updates to scalability state over a number of frames, limited by a new cvar (fx.ScalabilityMaxUpdatesPerFrame) and based on the frequency of updates. It cleans up how significance is processed, so that it is done only for necessary components. It updates how we consider the component state to be dirty, which limits how often Niagara tries to unnecessarily activate/deactivate components.\n• Added a new instance count culling option, to cull for each System as well as for each effect type.\n• Updated the GridCollection2D and GridCollection3D node APIs to be more descriptive and consistent. Older paths still operate, but they are suppressed from creation.\n• Added a new experimental feature to Niagara Skeletal Mesh Data Interface, for generating and querying a quadtree mapping UV to the vertex index. A quadtree is created on demand for a given Skeletal Mesh when referenced by the Data Interface.\n• Prevented byte code generation by particle scripts for GPU emitters; this reduces runtime memory costs and compile time costs, and eliminates some edge cases where shader warnings can be generated.\n• Implemented RibbonRender DistanceFromStart to allow for correct train track-style UV tiling with minimal effort; spawn modules are being updated to set this by default.\n• Added a new module to the Skeletal Mesh Data Interface supporting adjacency information. A buffer containing up to 8 adjacent triangle indices for each vertex is created at runtime. Currently two methods are supported (on GPU only): one for retrieving an indexed element from the buffer, and one for finding the first adjacent triangle.\n• Niagara now supports reading barycentric coordinates and adjacency information. This allows users to traverse Skeletal Meshes using those values.\n• Implemented tessellation across ribbon width, this helps reduce stair stepping in UVs.\n• New: Implemented multiplane/sheet rendering for ribbons, similar to Cascades \"Sheets\".\n• New: Implemented tube ribbons with 3-16 sides, and custom shaped ribbons with 3-16 sides.\n• NiagaraPlatformSet now has the ability to select platforms based on arbitrary Float, Int or Bool CVars.\n• Added the ability for the Spline Data Interface to be driven by a User object variable.\n• Changed \"Simulation is invalid...\" message to \"No active preview...\" to better reflect the meaning of the message, which is that you don't have a preview simulation running, not that there's something actually wrong with the emitter.\n• Added a new mode \"Fail if not previously set\" to defaults; it makes Niagara generate a compile error if the variable hasn't been set previously. This is optional within graphs, but is set any time a variable is linked in the stack. This is only for new changes, as old Assets in the field \"work\" but will likely be using these defaults unintentionally.\n• Implemented Emitter mode rendering for the Mesh Renderer. Implemented material parameter binding for both the Mesh Renderer and the Ribbon Renderer.\n• Added an optional property to NiagaraParameterCollections to allow a MaterialParameterCollection to drive values in Niagara. Parameters are automatically created when an MPC is assigned, and the backing parameter store is updated as changes are made to the MPC.\n• Niagara Outliner tab in the Niagara debugger now allows gathering and display of information about the current state of Niagara systems on the connected debugger client.\n• Fixed an issue with disabling simulation stages; they will no longer generate a shader for the stage.\n• Updated debug draw UI, so it only shows the option to turn it on or off if the module contains debug switches.\n• The Collision Module now returns the material type index when CPU ray casts are used.\n• Added the ability to output compiler metadata, called Compiler Output Tags. This will allow users to get named metadata, like MaxLifetime or bIsImmortal, out of a complicated particle System.\n• Added a category field for Niagara Emitters, to specify a sorting category when adding an Emitter using the New Asset wizard or the asset picker.\n• Niagara Outliner can now display performance information about Systems on the connected client.\n• Moved Niagara's SkeletalMess Generated Data to a more generic implementation so it can be used by other Systems.\n• Niagara now contains all of Pivot Painter's functions, except the full foliage simulator.\n• Tweaked the HLSL shader generation for GPU particle simulations to reduce the burden on the HLSL compiler. Added preprocessor directives to limit the scope of FSimulationContext for simulations using shader stages. Reduced compilation time by 20x (for serial compilation, about 10x for regular usage in the editor).\n• New features have been added for timed Niagara effect notify.\n• GetSpawnedEffect returns the system spawned for a given mesh component.\n• GetNotifyProgress returns a 0-1 progress value between the notify’s beginning and end for a given mesh component.\n• Added a unified FX Budget. You can now track and budget Cascade and Niagara runtime costs together. Niagara has some new scalability features to act upon this, such as reducing cull distances and max instance counts when budget usage is high. Projects using the Significance Manager with Cascade or otherwise driving SetRequiredSignificance calls into Cascade can use the result of the FFXBudget function, GetWorstAdjustedUsage, to influence calculations. This function returns the worst current budget usage for GameThread, Concurrent Threads or Render Thread work. It also has some decay on the value to help prevent fast oscillations that could cause FX to turn off/on repeatedly.\n\nBug Fix: Fixed a bug where linked module outputs could be renamed to a wrong namespace.\n\nBug Fix: Dialogs and graph pins now correctly show tooltips for intrinsic Niagara parameters.\n\nBug Fix: Fixed a crash caused by checking compile results when the rendering thread is suspended.\n\nNew: You don’t need to create full copies of scripts and graphs when compiling. You can reuse objects instead, using an object pool that increases compile performance.\n\nBug Fix: Fixed a bug where the Parameters panel would show all attributes and not filter by Static Switch selection.\n\nBug Fix: Fixed a bug where propagating a Static Switch would delete it from the Parameter panel.\n\nBug Fix: Fixed a bug where the Script.Usage and Script.Context Static Switches would generate an error if a new default value was defined behind one of its branches.\n\nBug Fix: When duplicating a parameter in the module editor, metadata is also copied.\n\nBug Fix: Fixed an issue where the Simulation Stage iteration source was showing unrelated items in the dropdown. Also fixed a problem with Simulation Stag iteration sources not updating on rename.\n\nBug Fix: Fixed a bug where a deleted renderer's name remained in the Editor data.\n\nBug Fix: Fixed a bug where tooltips for Map Get were not showing the parameter description from the metadata.\n\nBug Fix: Fixed a bug where creating a duplicate parent created a redirector instead of a new Emitter Asset.\n\nBug Fix: Fixed a bug where various engine constants were not displayed. Also improved sorting in the \"add\" menu.\n\nBug Fix: Fixed a bug where various engine constants were not displayed. Also improved sorting in the \"add\" menu.\n• Updated Niagara sprites and meshes so they provide precise motion vectors for motion blur and temporal anti-aliasing by default (as opposed to the prior linear motion approximation).\n• A project setting was added to the Niagara project settings (Default Motion Vector Setting) to globally choose between the previous behavior and the more precise new behavior; the setting can also be overridden individually for each renderer.\n• Fixed a potential crash in Niagara meshes when sections have materials with invalid indices.\n• Fixed bugs occurring with Niagara Mesh Particle distance and frustum culling in Point, Spot, and Rect light shadow.\n• Fixed issues occurring with Niagara mesh shadows when the shadows are frustum culled, or culled using VisibilityTag.\n• Fixed crashes related to Static Mesh Data Interfaces being assigned a mesh that was marked Pending Kill.\n• Fix a crash that could occur when cooked out Niagara Emitters reset on some platforms.\n• Fixed crashes that could occur in the Niagara Mesh Renderer when reloading the Static Mesh Asset, and then changing the mesh.\n• Fixed bugs in Niagara occurring with Instanced Stereo for VR.\n• Fixed an issue in Niagara Blueprint functions caused by passing None in for various objects.\n• Exposed the Position for Point Attraction as an Input, but defaulting to Particles.Position.\n• Fixed an issue causing incorrect skeleton calculation when a master pose is used on CPU.\n• Fixed crashes that occurred when re-importing a static mesh that was being used by a Mesh Renderer.\n• Added copy-paste support for comments in the Niagara Overview graph. Emitter node positioning has been updated to be consistent with comment nodes when pasted, and will be pasted at the cursor location.\n• Fixed an issue occurring when trying to sample a Skeletal Mesh that has no valid LOD data streamed in.\n• Added the memory used by the 3D Neighbor Grid Data Interface to Niagara's GPU memory stats.\n• Fixed a bug where occlusion queries did not take perspective into account.\n• Dynamic Parameters beyond Cascade's range now return the material default value rather than the same value for all inputs.\n• Fixed a bug with culling/visibility shader for GPU emitters, where it would attempt to cull dead particles.\n• Fix a tear down/GC issue where the FFXSystem would be destroyed before the particle components that reference it.\n• A bug was causing incorrect removal of instances from the SpawningDataSet when they were in the MainDataSet; this has been fixed.\n• Bug Fix: Fixed a potential race that occurred when removing from pending spawn.\n• Fixed bugs caused by Particle Read Data Interfaces referencing emitters that are excluded when cooking for the target.\n• Wait for all simulation to complete before performing tick group update, to avoid potentially accessing simulation data that is still running concurrently.\n• Fixed an issue causing a crash when applying vertex painting to a Static Mesh that was being used for a Mesh Renderer in an active Niagara Editor.\n• Fixed issues that occurred with GC and pooled components when debugging was not enabled. The objects were created with the wrong outer, allowing them to be garbage-collected while playing.\n• Bug Fix: Removed strong reference from pool debugging to avoid confusion between different build configs; originally this was causing the shipping config issue to be masked due to the strong reference.\n• Bug Fix: Fixed HandleTimelineScrubbed so it uses UFXSystemComponent to handle all FX component types (Mainly Cascade and Niagara).\n• Previously, it was possible to use rapid iteration parameters in a worker thread while also accessing on the game thread. This has been resolved.\n• Niagara can now handle SkeletalMesh changes on a SkeletalMeshComponent when more than one Niagara System is referencing them.\n• Made RandomTriIndex more robust against missing or invalid data.\n• Ensured that pool prime does not occur inside PostLoad. It is not safe, as UStaticMesh does not ConditionalPostLoad the materials we need access to.\n• In certain cases, such as when there is no Asset set, a crash could occur. This has been resolved.\n• Fixed a crash that occurred when CalculateTickGroup is called from the SystemSimulation, as the prereqs were not updating.\n• Fixed a bug where local-space simple lights would render with a frame-old transform.\n• Fixed an issue where dump was not working with cooked out Emitters; modified the dump command so that we can perform a full dump of all Systems.\n• Fixed an issue with unmatched LODIndex between Register and Unregister. Also fixed potential nullptr access to SkelMesh.\n• Fixed an issue that could lead to transient namespace variables leaking between Emitters in a Niagara System.\n• Fixed the normals for Ribbon MultiPlane. The default is to flip normals on the standard two-sided render based on the view direction. An option has been added in renderer properties, to duplicate geometry with correct normals for opposite face and to re-enable backface culling for any material that doesn't behave correctly with the flipping normal. Updated test to show normals.\n• Optimized the Generated Code window in the NiagaraEditor.\n• Fixed an issue with dynamic bounds calculations for Niagara components with negative coordinates.\n• Fixed an issue where Niagara renderers were trying to update while their dependent objects (System/Emitter/Script) hadn't finished loading (RF_NeedsPostLoad). Since PostDuplicate is called before PostLoad, we need to defer any work on the renderers till after PostLoad. This existing work is handled by the System on load.\n• Fixed a problem where SpriteRenderer ParticleAlignment and ParticleFacing parameters were not respecting the LocalSpace setting on Emitters, and were defaulting to Worldspace. Regression from prior behavior.\n• Fixed issues with Niagara's compute shader generation.\n• Now it skips deferred deletion of scripts unless they actually have cached shaders.\n• Moved FNiagaraShaderProcessorTickable to an FTickableGameObject so that compute shaders will be properly handled in -game situations.\n• Fixed an issue for a non-determinism cook with Niagara Renderer properties.\n• GPU Simulations were continually spawning the previous contents of their SpawnInfo struct if they became inactive. This has been fixed.\n• Fixed an issue where device profile preview would not set correctly, because its device profile had not been loaded from its platform INI file.\n• Bug Fix: Fixed an issue where a Niagara-specific override console command would override the DP but would not set the fx.Niagara.QualityLevel cvar.\n• Bug Fix: Fixed an issue where after setting a DP preview, you could no longer properly use engine scalability.\n• Fixed a problem with the Niagara Matrix Multiplication node; made it actually a mul() rather than per-component scaling.\n• Fixed an issue causing a race condition in processing Niagara shaders. Now they are only processed when they have been released from the FShaderCompilingManager. BReleased has been added to the job, which is flipped when the job has actually been fully processed by the compiling manager.\n• Fixed an issue where internally complete Emitters would still render their final frame's data.\n• Fixed an issue for pooled Niagara components; components marked hidden in game would remain hidden when re-used from the pool.\n• Fixed a crash that happened when passing large text blobs into Niagara scratch pad names. Limited names to 256 characters.\n• There was a problem with Niagara VM bytecode compilation where self assignments had rvalues replaced in all expressions: A = A + B; OutputFloat(A); This has now been fixed.\n• Fixed an issue that could cause an incorrect component tick state for Niagara components.\n• Fixed an issue that could lead to incorrectly culled effects, due to the LastRenderTime not being reset early enough in Activate.\n• Fixed an issue where Ribbon Rendering with 2-3 particles was causing invalid UVs; these were either flipped or zeroed unless EdgeMode was set to Locked, due to same-age particles. Updated several Ribbon tests based on UV fixes with same-age particles, like beams, to show fixed UVs now. Updated some naming/descriptions, and the edit conditions of Ribbon UV Properties, to better reflect meaning and show what affects what.\n• Fixed a crash that occurred when you changed the size of a user-provided RenderTarget2D.\n• Made several Niagara shader compilation logging improvements.\n• Downgraded the importance of some of the logging.\n• Added system names to VectorVM logs so that they are more actionable.\n• Fixed a crash caused by a race condition in the unbinding of the GPUExecContext combined parameter store.\n• Fixed graph convert node pins so they properly dirty the graph.\n• Ensured we don't try to resolve Niagara NPC references during PostLoad.\n• Fixed an issue with non-deterministic cooking with the Texture Asset backing Niagara curves. Added UTexture::SetDeterministicLightingGuid to be used for assets generated during cooking.\n• Fixed up UNiagaraComponent::GetDataInterface so that it just uses the existing implementation for the user parameter Data Interface (rather than the very specialized implementation that would only support the first GPU emitter).\n• Fixed ribbon indexing issues with multi-segment ribbons and initialization order of FNiagaraRibbonShapeCustomVertex.\n• Fixed an issue with resetting GPU Systems in some situations.\n• Fixed a bug with Niagara VM bytecode compilation for swizzled mask on LHS: MyVec3.yz = float2(1.0f, 2.0f);.\n• Ensured that NPC are fully loaded before we access them which was causing an issue if a compile was triggered from the PostLoad of a script/emitter/system.\n• Fixed crashes and bugs with Niagara Data Interfaces that must rebind their VM functions after a reinit.\n• DDC was getting polluted with NiagaraScript results when rapidly generating compile requests. This fix ensures that the data cached is associated with the source request rather than the current CompileId of the UNiagaraScript.\n• Fixed a problem for some cases in the Editor where CVars changed at runtime weren't applied correctly. Also created a threadsafety fix for CVar changed callback handles.\n• Fixed Niagara's Pow node to clamp the base to zero; it now matches materials and prevents divergent behavior between platforms.\n• Deprecated If node, Usage Selector node, and Sim Target node in favor of the new Select node and the old Static Switch node. Deprecated nodes will continue working, but are no longer offered in the action menu.\n• OpenSSL has been upgraded to openssl-1.1.1k for Windows, macOS, iOS, and Android. All older versions of openssl for the Windows platform have been deprecated and removed from the source tree.\n• Added an ini-based setup for TestLeaderboardInterface, allowing ShooterGame to test its own leaderboard keys instead of using test keys.\n• Re-enabled Steam when running Single Process Play-In Editor, but disabled Steam Sockets. This will keep the connectivity path using local TCP/IP.\n• Pixel Streaming CVars can now be set using command line arguments. See documentation for specific arguments.\n• Multiple Pixel Streaming improvements such as parameterisation of many encoder settings, AMF encoder, and better pixel streaming stats.\n• To use Indexed Cache, set [/Script/SwitchRuntimeSettings.SwitchRuntimeSettings] CacheStorageIndexMax to the max index of cache storage that will be used.\n• Changed LogHotfixManager default verbosity from Verbose to Display. Significant log lines were updated to Log.\n• Engine bundled WebRTC upgraded to Release M84 for Windows and Linux. Engine Opus version upgraded to 1.3.1-12 on Windows and Linux to match WebRTC. Developers using the old bundled WebRTC directly, instead of through the Pixel Streaming plugin, will need to manually link the old WebRTC or upgrade their custom implementations to utilize the new WEBRTC library.\n• Added additional platform information to the Social Platform Description in order to to group similar platforms.\n• Added a CVar to allow guest accounts on GDK account picker. To use it, add\n• Added a configuration option to perform or skip the XBox Live Gold check. Defaults to XBox Live Gold account required.\n• Promoted LogHotfixManager lines to \"Log\" due to community feedback that they are commonly used as a reference.\n• Added Exec function to SocialToolkit, SocialManager now attempts to call Exec on all its SocialToolkit instances.\n• Quality of Service (QoS). Quality of Service pings are now performed using non-blocking sockets on a single async task thread. Spawns one socket per protocol type such as IPv4 and IPv6, based on the list of target host addresses supplied.\n• Promoted IsFriendRestricted from Protected to Public to allow for quick usage by Game implementations.\n• Added configuration options to enable or disable EULA and waiting room checks on PC/Mac.\n• Commandlets are now configured to function correctly if rendering is enabled or when passing -AllowCommandletRendering.\n• Made SocialUser’s class method ValidateJoinTarget virtual, in order for it to be overridden at the game level.\n• Adjusted MarkupTag code to no longer use TypeName.\n• Added virtual \"GetMarkupTagForPlatform\" function to SocialUser class, so that games can override the icon or platform.\n• OnPartyJoined delegate listener will now clear on user logout. This fixes a crash observed when the local player changes.\n• Fixed an ensureMsgf crash that occurs when an Interaction Type is not recognized.\n• Audio over Pixel Streaming is now of higher quality and correctly plays in stereo.\n• Fixed instances of UserPlatform being constructed with an empty string which triggers an ensure.\n• Secondary local players can no longer be promoted by primary players.\n• Fixed connecting to Pixel Streaming session from browsers running on Mac or iOS.\n• Changed GetCachedAchievements in Sony interfaces so they return an array of readable values.\n• SocialManager no longer marks itself as PendingKill on shutdown. Instead it sets a \"bShutdownPending\" bool.\n• Added ABORT_DURING_SHUTDOWN macro that checks the bShutdownPending bool, then displays a log message, and immediately returns. This macro is used in all SocialManager callbacks that might fire after a Shutdown occurs.\n• The VivoxVoiceChat plugin is deprecated as of Unreal Engine 4.27, and is scheduled for removal in Unreal Engine 5.0.\n• Deprecated old versions of WebRTC that were not used by any of the projects.\n• Added new version of ProcessRequest (and derivative methods) that returns void instead of bool. Deprecated the previous versions for 4.27.\n• Removed STUN/TURN server binary as it is no longer maintained.\n• Added configurable time limits for the flushing active HTTP requests when shut down or suspended. This aids compliance with platform requirements for shutdown and suspend times.\n• The trusted root certificate bundle used by the SSL module has been updated.\n• HTTP Request Interface. The IHttpRequest interface has been modified so that a timeout can be specified on a per-request basis.\n• ProcessRequest and CancelRequest completion callbacks always fire on the main thread for all HTTP implementations.\n• Added ability to cancel all requests in progress when suspending.\n• OnlinePurchaseInterface FinalizePurchase method now takes ReceiptInfo as an optional parameter.\n• Implemented GetSocialPlatformName method in the OnlineSubsystem Interface for use in labeling a platform's friend list.\n• Added a missing enum \"VoiceChatResults\" to the LexToString function in the VoiceChatManage class.\n• Modified the User Search to use the new \"withUserGuid\" endpoint.\n• Fixed OnlineEncryptedAppTicketInterfaceSteam using a unicast delegate where a multicast delegate was intended.\n• FUniqueNetId Thread Safety: It is now possible to use ESPMode’s class method ThreadSafe with FUniqueNetId shared pointers and references by opening CoreUObject.Build.cs and changing the UNIQUENETID_ESPMODE public definition from ESPMode::Fast to ESPMode::ThreadSafe, then recompiling. The FUniqueNetIdPtr/FUniqueNetIdRef typedefs in CoreOnlineFwd.h are provided to help migration. For example, you can replace TSharedPtr with FUniqueNetIdPtr to cause it to use the appropriate ESPMode.\n• Deprecated Online Subsystem Twitch. The web API has not been kept up to date. This will be removed in a future engine release.\n• Deprecated old versions of OpenSSL for all platforms.\n• LWS Web Socket connections will now use a dynamic string buffer size when dealing with UrlPaths.\n• XMPP Jingle has been deprecated, licensees must move over to using the updated XMPP Libstrophe system for their message handling.\n• Added Element Index to the Blueprint Break and Make hit result functions.\n• Added PopFutureOutputData_External to SimCallbackObject to get all physics thread outputs, including outputs past the current time.\n• Fixed Sweep_Geom to calculate the correct transform for queried shapes when querying from a component with multiple shapes like a skeletal mesh component.\n• Corrected SyncBodies logic for scenes with multiple custom Chaos solvers to correctly sync back results to components.\n• Chaos Cloth - Added fictitious centrifugal forces to compensate for when the Velocity Scale is reduced.\n• Chaos Cloth - Added a new Continuous Collision Detection mode. This is more accurate than sub-stepping, but can be more taxing on performance.\n• PhysX Cloth - Fixed a crash when applying a higher definition LOD 1 cloth than the one used in LOD 0.\n• Cloth Painter - Reduced the long pause / delay before being able to interactively preview the simulation (while pressing on the H key) while in the cloth paint editor mode.\n• Chaos Cloth - Fixed issues that were occurring when a non unit scale was used on the owner component.\n• Chaos Cloth - Removed collision tests from collision particles that are not in the active LOD.\n• Cloth Painter - Fixed lag that was occurring after each paint stroke.\n• Chaos Cloth - Corrected an issue that occurred in cases where the simulation data was queried before the simulation's first step.\n• Chaos Cloth - Fixed an issue with the AnimDriveSpringStiffness parameter effect on the simulation that occurred when its value was changed in the Chaos Clothing Config UI.\n• Cloth - Added tapered capsules to the primitive lists to pass as external cloth collision sources.\n• Chaos Cloth - Fixed a crash in multi-cloth simulations caused by a race condition on the offset creation.\n• Chaos Cloth - Fixed a crash that occurred when a Skeletal Mesh asset with more than one LOD had only one cloth LOD.\n• Chaos Cloth - Fixed an overzealous collision LOD deactivation that was preventing external collision source updates.\n• Chaos Cloth - Fixed a bad local space simulation impulse at simulation startup, that only became apparent with a lower than one Velocity Scale.\n• Cloth - Fixed an issue where sometimes the Undo function would reset the cloth LOD. \\\n• Added tapered capsule implementation to cloth collision in Chaos Physics. This included an API change. \\\n• Fixed simulation sometimes starting unexpectedly in the Physics Asset Editor when editing asset properties.\n• Keyboard navigation in the Physics Asset Editor skeleton tree view is now properly ignoring hidden elements.\n• The Physics Asset Editor 3D viewport and skeleton tree view are now properly synchronized when the selection changes in one or the other.\n• Fixed the Rotation of Mass computation in all oriented implicit geometries to properly account for the rotation of the geometry axis compared to the Z axis.\n• Unreal Engine now ships with Dockerfiles and example code for official Docker container images.\n• The Steam SDK has been updated to 1.51.\n• Refactored Platform TextureFormat classes to be subclasses from a new FChildTextureFormat class that handles compressing with other modules, and then runs a post-process on it.\n• New: Pulled GetPixelFormatForImage out into a separate function in ITextureFormat, so that child formats can inherit a parent format that generates without needing to compress a test texture.\n• Added the function UserHomeDir to FGenericPlatformProcess, so that TestPAL could be updated to test UserHomeDir on Linux without breaking other platforms.\n• For GDK Pass-type entitlements, acquiredDate is appended to the receipt ID format, so that your game service can tell separate purchases apart. If your game services parse receipt IDs, or you have already stored receipt IDs in your game services, please consider migrating to this new format.\n• Stopped the creation of search handles for sessions that aren't meant to be searchable.\n• Fixed a thread safety issue that could arise when the user was querying consumables on the platform store.\n• Fixed a crash that occurred when the user joined a multiplayer session with verbose logging enabled.\n• Removed the memset of a shared pointer in FOnlineAsyncTaskGDKQueryAchievements.\n• Fixed an issue with AutoPIX not working on GDK.\n• Fixed a crash that occurred while toggling between constrained and running applications. Added thread safety when handling responses from multiple checks.\n• When dynamically loading libraries under a Unix platform, the engine now also checks the global path.\n• Added support for returning the last measured CPU time on Windows and Linux platforms. UnixPlatformTime can now update the CPU time independently of the fixed 250ms threshold.\n• Forked Process - Added DEFAULT_FORK_PROCESS_MULTITHREAD definition thats sets the default multithread behavior of a forked process (the default is singlethread).\n• New: Forked Process - Added -DisablePostForkThreading cmdline option that disables MT if the default is true.\n• Time moving backwards has been changed to a warning over a fatal error. This allows that time to be clamped and provides an opportunity for the system to recover.\n• This fix ensures that our ClockSource is always initialized.\n• LinuxAArch64 is now allowed to build and package CrashReportClient.\n• macOS Catalina and above now supports Apples Game Controller framework for connecting the latest console controllers.\n• Previously, when using more than one monitor and switching from Window mode to Fullscreen mode, if the window was partially outside the virtual screen one monitor switched to Fullscreen and the other monitor only showed a single frame of the game. This has now been fixed.\n• Fixed an issue that occurred with Visual Studio project generation after installation of February GDK. This prevents the Visual Studio solution from failing to load due to a duplicated project item MGCCompile error if the UWP component is installed in Visual Studio.\n• Fixed a crash that happened when no HOME environment variable was set.\n• Ray traced ambient occlusion, shadows, reflections, GI and skydome passes use a new sampling sequence that converges faster and diffuses the visible error in screen space.\n• The path tracer now performs anti-aliasing with a multi-pixel filter kernel for improved quality. The width of the filter can be set in the PostProcessVolume settings. Settings such as TAA are automatically disabled while the path tracer is active.\n• Improved the support for using the path tracer with Movie Render Queue.\n• The path tracer supports per light show flags and can isolate direct vs. indirect lighting.\n• The path tracer now applies backface culling to camera rays to match raster modes.\n• Orthographic cameras are now supported by the path tracer.\n• Updated the Vulkan SDK to 1.2.162.0 from 1.2.148.2.\n• MovieRenderPipeline and DLSS - Added support for the DLSS Plugin to MRQ and for the supporting UI to control quality settings.\n• Adding logging of the before and (attempted) after states to viewport resize failure logging.\n• Added support for PIX GPU captures on Windows with a new plugin.\n• Added an option to disable ray tracing for old drivers.\n• Adding logging of the GPU status when a query timeout is hit.\n• Hair passes and hair shaders shouldn't have any performance impact on runtime when the HairStrands plugin is disabled.\n• Movie Render Queue: Users can now set overscan to work in combination with EXR output.\n• Added a cvar to set the minimum Windows version to enable ray tracing in DX12.\n• Added adaptive voxel allocation to avoid overallocation, allowing for a large set of grooms casting shadow.\n• Changed the hair cards sampler to use anisotropic sampling for better rendition.\n• Added a project setting to enable / disable auto virtual texture import. The setting defaults to enabled to match existing functionality.\n• Updated the hash functions Rand3DPCG32 and Rand4DPCG32 to have higher quality and faster GPU runtime performance.\n• Moved the location of virtual texture feedback per frame. Previously, we sampled the same location for feedback each frame, now we jitter the location over the virtual texture feedback tile to ensure we touch each location over time.\n• Added new optional hair strands composition points (after the separate translucent pass, and before the translucent render after DOF). \\\n• Added an option to cull objects by distance and solid angle behind the camera in ray tracing.\n• SortedIndices and SortedIndicesOffset in NiagaraMeshVertexFactory are now part of FNiagaraMeshUniformParameters instead of being separate resources. This is needed for ray tracing hit shaders, which should always be uniform buffers or loose parameters.\n• Added ray tracing support for per instance attributes such as color for Niagara meshes.\n• Refactored per-vertex attribute interpolation in ray tracing shaders to reduce register usage. Attributes are now interpolated explicitly inside the per-vertex loop. Removed a few variables that are no longer used.\n• All ray tracing shaders now explicitly share the global root signature. This allows separate pre-compilation of ray tracing pipeline collection objects containing only hit shaders.\n• Added cvars to globally control ray tracing shadows for different light types. All light types are enabled by default and are still controlled by r.RayTracing.Shadows as well as per-light settings. The new cvars are intended for global easy overrides, allowing fine grained control over quality vs performance in games, without content changes. New cvars:\n• Moved pixel coord into an explicit field of the ray-tracing payload. This grows the payload structure to 64 bytes and invalidates all ray-tracing shaders.\n• Added r.RayTracing.Shadows.AcceptFirstHit CVar that adds RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH to shadow rays, allowing the ray tracing process to terminate before the real closest hit point is found. This improves shadow ray tracing performance, but may theoretically result in worse shadow denoising quality.\n• Added various improvements for the experimental ray-traced reflection shader:\n• Now respects cvars for direct and indirect lighting.\n• Implemented a roughness threshold for skipping any-hit shader invocation in the experimental ray-traced reflection shader.\n• Implemented a roughness bias for experimental ray-traced reflection, controlled by r.RayTracing.Reflections.ExperimentalDeferred.SmoothBias (default = 0). This can improve reflection performance in certain scenes by forcing ray directions to be more coherent. Additionally, this allows globally controlling RT reflection appearance without content modification.\n• Ray-tracing shader creation is now skipped when run-time ray-tracing support is compiled out. This replicates logic from FShaderCodeArchive::CreateShader in FShaderMapResource_InlineCode::CreateRHIShader.\n• Added the r.D3D12.DXR.MinimumDriverVersionAMD cvar to allow banning ray tracing on drivers that may be too old or have known issues. The default is 0, which allows any version.\n• Implemented an optional non-blocking ray-tracing PSO compilation mode, eliminating CPU time spikes at the cost of rendering some objects using a fallback shader (opaque black). \\ The new cvar r.RayTracing.NonBlockingPipelineCreation can be used to opt-in to non-blocking mode (default=0, preserving previous PSO creation behavior). Non-blocking mode should only be used in the game where hitches are not acceptable. Any offline engine use cases, such as cinematic rendering, should use a default blocking mode to avoid any artifacts due to fallback shaders.\n• Improved the sampling pattern used by the path tracer to speedup convergence.\n• Fixed a crash caused by a null pointer dereference in distance field generation while cooking assets.\n• Corrected a RHI Bypass crash caused by RHI Resources losing their reference counts before being used in a draw.\n• Ensured that adaptive virtual textures allocation happens before any virtual texture flush. This fixed an intermittent crash bug when using adaptive virtual textures.\n• Fixed a crash when enabling r.RayTracing.ExcludeDecals because ray tracing instances were skipped but VisibleRayTracingMeshCommands had already been registered.\n• Fixed a crash with hair strands when running in split screen / VR due to VR not being supported yet.\n• Fixed a crash when deleting a groom asset while it is still being used.\n• Fixed a crash when ray tracing shadows is the only active ray tracing effect and r.raytracing.shadows is set to 0. While the \"r.RayTracing.Shadow\" cvar is thread safe, it is bound to the GRayTracingShadows variable, which is not. This could produce a scenario where the variable was still set to 1 when the cvar was already 0, and therefore the RenderRayTracingShadows function would be called when it should not have been.\n• Fixed a crash in SingleLayerWater when using the forward renderer.\n• Fixed a ray-tracing-related crash on startup when running on an old windows version or an old driver. The version checks must be done much earlier during initialization.\n• The path tracer output is invalidated in more cases such as object deletion and setting changes.\n• Fixed the LockStructuredBuffer to work correctly with the OpenGL RHI thread.\n• Fixed a case where per-instance data size did not match a number of instances the Hierarchical Instanced StaticMesh Component was attempting to render.\n• Corrected a hair strands precision issue that occurred when a groom was attached to a skeletal mesh whose bounding box was too large.\n• Fixed the groom property override and reset on component. This allows a clearer view of what properties are overridden by a Groom asset compared to a Groom component.\n• Disabled occlusion meshes for primitives that only render to runtime virtual texture.\n• Fixed a D3D12 Race condition for ActiveGenerations having dequeue called concurrently in WaitForCompleteion and CleanupActiveGenerations, resulting in an incorrect double pop, causing an unrelated sync point to be dropped from processing (this fixed random meshes flickering, random GPU crashes / hangs, possibly fixed numerous texture corruption cases).\n• Copied strings being registered to FVisualizeTexture, because it can accept textures with dynamic string names allocated with FRDGBuilder::AllocObject, while GVisualizeTexture outlives the RDG builders.\n• Fixed an issue where pending barriers wouldn't always be submitted in DirectX12.\n• Enforced respect for the existing virtual texture setting on texture reimport. Previously a texture might change from a regular to a virtual texture simply because of a reimport, which is usually not desirable.\n• Fixed virtual texture pages not being unmapped for virtual textures with a non-zero FirstMipToUse.\n• The RHI command list is now flushed if we are using null RHI and are exiting the RHI just in case commands have been queued up.\n• Fixed the graphic corruption caused by streaming levels reloading in combination with the DisplayCluster module.\n• Format support is now checked before using display formats.\n• Fixed RTAO to work correctly when SSAO intensity is set to 0\n• World Origin shifting for Runtime Virtual Texture volumes is now supported.\n• Fixed an uninitialized texcoord value for LoadVertexFactoryInputForHGS in GeometryCacheVertexFactory.\n• Corrected a missing application of pre-shadow onto the hair strands shadow mask.\n• Added some checks in RHIGetAvailableResolutions around GetDisplayModeList returning DXGI_ERROR_NOT_FOUND.\n• Fixed disable section in ray tracing that was not working with cooked content.\n• Fixed an issue where ray-traced reflections were not being accurately represented in multi-view (such as split-screen) when material sorting for ray tracing is enabled.\n• Fixed an issue with querying for local video memory in DX12.\n• Now correctly use anisotropic filtering instead of bilinear by default for runtime virtual textures.\n• Remapped virtual texture ancestor pages when doing an Evict. This fixed an issue where unmapped pages were still referenced in the page table leading to incorrect rendering for a few frames when the physical page was reallocated and written.\n• Fixed the resource size calculation for streaming virtual textures. The size should be based on the memory footprint, not the disk footprint. Note that any streamed data ends up in a fixed-size pool.\n• Fixed the IsRotationNormalized() assert in Niagara meshes with ray tracing enabled.\n• Fixed a possible deadlock in the ray-tracing PSO compilation tasks on machines with low CPU core counts. Ray-tracing PSO compilation tasks used to run on high priority threads and would internally create additional tasks and immediately wait on them. The inner tasks also use high priority, but they may never get to run as WaitUntilTasksComplete does not execute anything itself and all HP threads already run the outer tasks. The solution is to make the outer tasks run at normal priority (or lower), so that inner tasks will always run on other task threads.\n• Fixed DeprojectScreenToWorld inaccuracy when the camera is very far from the world origin (for example, painting clouds on earth from space when using the Volumetrics plugin).\n• The stencil buffer is now cleared prior to the distortion accumulation pass to prevent unintended screen distortion.\n• Clamped the frame sync slack amount to not exceed one frame interval.\n• Fixed dynamic memory allocation every time FStaticMeshSceneProxy::GetLOD is called in development builds.\n• Fixed a potential use-after-free issue when RenderData is null, because the static mesh name did not live long enough.\n• Fixed a potential deadlock on shutdown in the FRHIFrameOffsetThread.\n• Corrected the handling of the mip tail in Texture2DArrays. FTexture2DArrayResource was not respecting the mip tail count, and CreateTexture was not correctly copying the bulk data.\n• Output pixel coordinates are now explicitly passed to ray-tracing hit shaders through payload instead of using DispatchRaysIndex to emulate SV_Position. This fixes dithering effects in ray-tracing shaders when ray sorting is used.\n• Fixed a race condition that occurred when initializing FormatVersionMap for FShaderCompileUtilities::DoWriteTasks.\n• A BitMask template function is now used to avoid bugs when creating masks where the number of bits requested equals the type bit size.\n• Added a fix to prevent the pre-loadscreen pumping of render thread ticks when RHI is suspended.\n• Fixed incorrect validation of the stencil plane in DSV surfaces. SRVs were always set up to validate against the depth plane, even for stencil SRVs, causing the validator to miss some barrier errors.\n• Deprecated the PreviousLODLevel in UStaticMeshComponent. This member was added back in 2005 and all uses of the member have since been removed.\n• The groom length clip property is now deprecated and will be removed in a subsequent release.\n• Open Color IO - Now when a user makes any external changes to the raw OCIO config file or any related files, UE4 will bring up a dialog prompting the user to reload the related config file.\n• These files will also be reloaded on UE4 start.\n• Fixed an issue with texture resources being deleted before being released.\n• The path tracer now implements multiple-importance sampling for all light and material types to improve sampling quality across the full range of light source sizes and roughness values.\n• The Source Length attribute on point and spot lights is now supported by the path tracer.\n• Skylight is now hidden from view in the path tracer unless real-time capture mode is active.\n• Textured Rect Lights are now supported in the path tracer.\n• The path tracer now approximates caustic light paths to reduce noise on scenes with glass and shiny metals by default.\n• Non-shadow casting lights, objects, and materials are now supported in the path tracer.\n• The path tracer now supports barn doors on Rect Lights.\n• The path tracer now supports the attenuation radius falloff controls.\n• Added a setting for the path tracer to control if emissive materials affect other surfaces or not. This is enabled by default, but can be turned off to reduce noise if those surfaces are already represented by lights.\n• The Path Tracer now supports more than 256 lights. Performance will vary based on the amount of overlap in the attenuation radius.\n• Ray-traced shadows from Skylights now support the real-time capture mode.\n• IES profiles are now supported in the path tracer.\n• An OpenImageDenoise-based plugin is now provided for the Path Tracer to reduce visible noise after the target sample count has been reached.\n• Added Sky Atmosphere functionality to recover the atmosphere transmittance from Blueprint (for a Directional Light).\n• The LMGPU panel is now forced to refresh on starting and stopping building to enforce CanEditChange settings.\n• Added a shadow source angle factor for ray-traced shadows from directional lights. This allows artists to vary the penumbra shape without changing the light shape.\n• Added support for ray-traced, subsurface shadows. This emulates raster, subsurface shadows by casting a secondary ray from the point-of-view of the light source. A homogenous volume is extruded from the furthest occluder to the shading point where the density of this volume is proportional to the shading model's opacity.\n• Subsurface falloff is now applied to contact shadows similar to the PCF path. This replaces the ad-hoc lightening of transmission shadows\n• Added a new flag for \"cast contact shadows\", which is stored in Gbuffer and respected (as much as possible) when applying contact shadows.\n• Adjusted barn door visualization to match how lighting is computed from Rect Lights\n• Fixed shading of points inside the barn door volume of Rect Lights\n• Ray traced shadows from point lights are now more robust for small radiuses.\n• Fewer auxiliary passes are rendered when the path tracer is active, speeding up render times in complex scenes.\n• Materials tagged as sky are now skipped for indirect rays by the path tracer to prevent double-counting against the skylight. Ensure that any such materials have the \"Is Sky\" checkbox enabled.\n• PostProcessVolume and Skylight now respect the different editor Hidden flags (Outliner, DataLayers, Level).\n• Fixed DFAO artifacts when the global distance field is disabled.\n• The Indirect Lighting Intensity factor is now respected when computing ray-tracing global illumination.\n• File containing stable shader keys used for PSO cache is no longer text (scl.csv) but a binary (.shk)\n• Performance of \"expand\" step during the PSO cache collection has been greatly improved.\n• ShaderCompiler will print a warning if it detects that a shadermap is taking too long to compile.\n• ShaderCompiler will print out a warning when a shadermap is taking too long to compile and can crash the build if configured so (useful to prevent the builds from being stuck indefinitely).\n• For a chunked build, shader library is now also split into chunks, so the shader code is there for the assets that need it.\n• Mapping between the assets and shader code will now be copied to build's Metadata after the cook.\n• Added an in-memory cache of shader compile jobs, which reduces the amount of shaders needed to be compiled.\n• \"Missing cached shadermap\" string now includes more information about the asset, including the DDC key hash.\n• The path tracer now supports Subsurface and Subsurface Profile materials with a random walk approach.\n• The cloth shading model is now supported in the path tracer.\n• Improved sampling quality for the shading models supported by the path tracer.\n• All material blending modes are now supported in the path tracer. Translucent materials will produce (rough) refraction when a non-unit IOR is provided.\n• The Thin translucent shading model is now supported in the path tracer. This produces colored transparency by default, and when refraction is specified, will produce (rough) thin refraction.\n• An error is now thrown when a translucent material with 'Output Velocity' enabled (in which case it writes to depth buffer) contains material nodes reading from the depth buffer, as it cannot read from and write to the depth buffer at the same time.\n• Added an option to blend skylight cubemap on forward shaded elements. Disabled by default to preserve performance.\n• Added Supports Anisotropic Materials as a DDPI setting to disable anisotropic materials on a per-platform basis. By default, Supports Anisotropic Materials is false.\n• The \"missing cached shadermap\" string now includes more information about the asset, including the DDC key hash.\n• ShaderCompiler will now print out a warning when a shadermap is taking too long to compile and can crash the build if configured so (this is useful to prevent the builds from being stuck indefinitely).\n• Added an in-memory cache of shader compile jobs, which reduces the amount of shaders needed to be compiled.\n• Removed the dedicated logic around compiling debug view mode shaders on demand, instead they are now included in the regular shader map, and now compiled on demand by the new system used for all shaders.\n• Added the ability for shaders to check whether the editor is being targeted in ShouldCompilePermutation.\n• This now excludes debug view mode shaders from non-editor paks. Previously, debug view mode shaders were never cooked into .pak files, so this should match previous behavior.\n• This means more compile jobs will now be submitted in-editor, since debug view mode shaders jobs are now submitted by default, but this shouldn't affect overall editor performance, since important shaders should still compile on demand at a higher priority.\n• Now, when a 'ForceLocal' shader compiler job is prepared, if an existing job for the same key has already been started on an XGE worker, a copy of the job is also kicked with the 'ForceLocal' priority.\n• Added on-demand shader compiling:\n• Rendering from potentially incomplete shader maps is now allowed, as long as all required shaders are present.\n• Attempts to access missing shaders will now kick compile jobs on demand.\n• Shader compiler interface was refactored to better handle lots of (potentially duplicated) jobs being submitted from multiple threads.\n• Relaxed PSO cache filtering logic as to prevent it from flagging valid cases (particularly with packed normals in vertex declaration).\n• Fixed GPU skin vertex factory using too many TEXCOORD semantics.\n• Fixed non-deterministic name sorting in memory images that resulted in spurious build differences.\n• Added a saturate node to the parallax bomb material function to prevent Max Steps potentially exploding, which can hang the GPU.\n• Fixed the generation of material texture scales, used for texture streaming.\n• Debug view rendering now takes the blend mode from the original material, which fixes flickering translucent materials.\n• Information from FDebugViewModeInterface is now considered when deciding whether or not to compile specific debug view mode shaders.\n• Fixed inheriting static material parameters from one material instance to another.\n• Added changes to clear coat shading model, addressing several UDN issues:\n• Corrected ClearCoat not properly modifying roughness for specular contribution of the under-coat when lighting with area lights.\n• Fixed an issue with bottom-normal not initializing all context dot-products needed by some lights.\n• Now prefers NoL for the geometry term to have closer parity with DefaultLit when ClearCoat=0.\n• Now respects GBuffer.Specular for reflection specular contribution when ClearCoat=0.\n• Reverted the application of NoL to the refracted specular lobe.\n• Now apply the Fresnel term to the non-refracted bottom coat to handle cases when ClearCoat<1.\n• Relaxed PSO cache filtering logic to prevent it from flagging valid cases (particularly with packed normals in vertex declaration).\n• Trying to compile/render debug view mode shaders is now skipped, if FMaterial::ShouldCache returns false for any of the required shader types. This fixes a failed check / crash which occurred when trying to compile landscape debug shaders, as landscape material resources have a complicated ShouldCache override.\n• Ensured FMatExpressionPreview::ReleaseResource happens on the render thread.\n• Volumetric Cloud prototype: Disconnected the material connection to the volumetric cloud .ush file that was causing cook errors on some platforms. Please use the Volumetric Cloud actor, or reconnect the pins in the prototype material.\n• Vulkan is now allowed on devices with Adreno5xx GPUs running Android 10 or a newer Android version.\n• Added an onscreen warning for mobile for a misused Sky Atmosphere. This will help to identify why Sky Atmosphere is missing on mobile platforms.\n• DepthPass FullOpaque is now added when SDF or AO are activated on mobile.\n• DepthPass is now decoupled from BasePass when SDF or AO are active.\n• Removed reprojection from basepixel, it is no longer needed as we are now using current frame depth.\n• The TC_ReflectionCapture setting is now hidden.\n• FXAA mobile is now available, it can be enabled with r.DefaultFeature.AntiAliasing=1\n• Implemented DistanceField Shadow on mobile (no GL / Metal for now).\n• Added support for the ASTC decode mode on GL.\n• Updated Metal version to 2.1 for the iOS desktop renderer.\n• Reducing the number of supported dynamic point lights on mobile (r.MobileNumDynamicPointLights) will now correctly reduce the number of bound constant buffers.\n• Read-only buffers are now explicitly marked as read-only in Vulkan shaders to improve device compatibility.\n• Fixed incorrect usage of Vulkan sub-passes while MSAA is enabled.\n• Fixed a case where unbuilt static objects were not affected by indirect lighting on mobile.\n• Generated Vulkan shaders will no longer initialize variables to zero where it is not required.\n• It is now possible to opt out Encoded TextureCube from the package if the platform doesn't need EncodedData.\n• Fixed modulated shadows so that the Modulated Shadow option is greyed out if the Light is not Stationary.\n• Corrected the VertexInterpolator material node so that it functions correctly when used in a mesh particle material.\n• Fixed the DisableFlipCopyGLES logic that inverted scene captures with Android GLES RHI.\n• The calling context is now passed down during defrag instead of accessing the global context.\n• The following improvements have been made to Cubemaps to introduce better prefiltering that limits excessive blur from occurring from the sources:\n• Cubemaps generated from .hdr long-lat sources were being strongly blurred in cases when mipmaps were enabled. This happened originally because such cubemaps were intended for use only with the “Ambient Cubemap” lighting feature, and their mips were generated using angular filtering. Skylights now have many mechanisms for visibility and shadowing, causing that feature to become obsolete. Angular mipmap filtering for long-lat textures is disabled, and therefore mipmaps for cubemaps no longer introduce significant blur.\n• Cubemaps generated from long-lat originally were low quality because their maximum size was set to 512 pixels by default. This limitation has been removed, and resolution of generated cubemaps is now determined by the size of the source long-lat texture.\n• Imported .hdr textures were incorrectly marked as sRGB, even though they were internally processed as textures using linear color space. Now, they should have sRGB mode automatically disabled when imported.\n• Cubemaps generated from long-lat sources can now use the texture adjustment settings of the Texture Editor.\n• Color Correct Regions - changed the Regions refresh method to better support environments other than Editor.\n• Regions that occupy less than 1 pixel on the screen are no longer rendered.\n• Fixed a color correction issue where shaders with Highlights assumed that max Scene color was capped at value 1.\n• Implemented a Camera Shake upgrade tool to convert any legacy Matinee camera shake asset to a Sequence animation. Shakes with no CameraAnim asset are left untouched.\n• The Dummy Camera Manager now enables you to see the camera shake FX in the Camera Shake Previewer tool.\n• Added per-material support for each Object ID instead of per-component in Movie Pipeline. Additionally, per-material support now applies to Instanced Static Meshes, such as foliage. Individual materials are not supported on instanced static meshes.\n• The “Write all Samples” debug option moved from HighRes settings to the new Debug Setting in MoviePipeline.\n• New options in Control Rig enable ticking on all skeletal mesh components and warm up frames when baking an animation sequence.\n• FK Control Rigs are now masked in all sections when a Control is inactive.\n• Add an aspect ratio axis constraint accessor on the IMovieScenePlaybackClient.\n• The Level Sequence playback context picker now lets you pick actual level sequence actors instead of just worlds.\n• Add support for previewing camera shakes' post process settings to the camera shake previewer tool.\n• Added track pre-compilation parameters. This lets tracks alter the default metadata at compile time for all the entities that will be created by their sections.\n• Debug visualization now supports more component types for the new core evaluation system.\n• The asset picker in the Camera Animation Track now remembers your toggled preferences for showing / hiding outdated assets.\n• Added a component flag to CopyToOutput for the new core evaluation system.\n• Added an API to get the list of sequence IDs in a hierarchy.\n• Added a utility function to find a related sequence instance in a given hierarchy.\n• The Entity Import metadata allows a property track to use a different property binding that can also be computed during compiling.\n• The Camera Cut Track can now blend out to a parent sequence’s camera cut track. Blend times are affected by sub-sequences time dilation.\n• You can now directly load an Animation Sequence into a Control Rig Section at the current time.\n• Added return value to OnSectionMoved to know when a moved section caused other sections to be added/removed.\n• The interrogation linker now has a utility function to get the animated value of a property.\n• Camera Shake track now uses the base shake class instead of the (deprecated) Matinee shake class.\n• Camera animation sequences can now be toggled between the camera component and cine-camera component.\n• Added network masks to sub-sections allowing for server and / or client only sub-sequences. This optimizes cinematic assets such as FX or audio when playing back on dedicated servers.\n• Sequencer can now be emulated as a client or a server using the Networking section of the settings menu in the Sequencer UI.\n• High performance ECS-based evaluations now support Byte, Enum, Integer, Vector, and Color properties. This includes the following:\n• Byte, Enum, Integer, Vector and Color properties all now run through the ECS supporting greater parallelism and efficiency.\n• Vectors and Colors both leverage metadata components for the number of vector channels and the color type, respectively.\n• Both types run their own derived property component type handler (FVectorHandler and FColorHandler) for initializing their metadata components.\n• Automatic overriding of PostProcessing properties is now supported. This means that users no longer need to manually override PP settings when animated through Sequencer for them to apply to the camera.\n• Entity systems can now run in multiple phases. Systems can check the currently executing phase by checking Linker > GetActiveRunner() > GetCurrentPhase().\n• Trait Classes for runtime metadata simplify the runtime process, and removes the need for using the PropertyType and OperationalType template parameters. This includes the following improvements:\n• The API now uses traits which supports the specification of metadata components for switching property types at runtime. This lays the foundation for also using Vector and Color property types.\n• Traits now specify the conversation layer from storage type to the UObject property application for custom accessors, fast PTR offsets, and track instance bindings. This includes the storage type and the required metadata components.\n• Blend Output entities now also contain an FMovieScenePropertyBinding, which is copied from the contributors.\n• Added Read/WriteComponent methods to FEntityAllocation to make custom component access now return a scope-locked wrapper around the component data.\n• There are several new improvements for Sequencer playback.\n• Playback speed is now configurable per sequencer instance by using a delegate. Defaults to previous values.\n• Shuttle Backward/Forward now uses speeds from the delegate.\n• Added the Restore Speed command to restore the speed to the designated playback speed. No default binding.\n• TogglePlay now actually toggles play and no longer calls PlayForward.\n• Upgraded boolean property tracks to use the new evaluation core.\n• Resizing and moving camera cut and shot track sections are more streamlined and easier to do.\n• Files converted from Matinee to Sequencer are now broken into multiple files.\n• Duplicating a Control Rig track in Sequencer no longer crashes the Editor.\n• The Matinee to Level Sequence converter plugin no longer crashes Editor.\n• The Editor no longer crashes when playing / rendering level sequences that contain template sequences.\n• Dragging track sections over each other or completely overlapping other sections no longer crashes the Editor.\n• The Editor no longer crashes when you switch worlds with Sequencer open.\n• The Output Directory in MRQ now correctly uses a local file path.\n• Template Sequences now correctly have no hierarchical bias. This allows Template Sequence animation to blend with any animation set directly on the same object.\n• Fixed various minor issues with the Matinee to Level Sequencer Converter tool.\n• The camera cut global start times are no longer changed when new global times start.\n• Don't stomp the global start time of camera cuts when new ones start\n• FBX Export options can now correctly be created in Blueprints.\n• The FOV blending preview in Editor now displays correctly when scrubbing/playing over a blend-out at the end of a cinematic.\n• Non-Linear Animation now correctly only caches root transforms when an offset transformation is set.\n• Blending preview code is now viewable in the modifier callback. This solves problems with cameras who have look-at constraints and problems with system dependencies in the new core evaluation system.\n• Zero-frame-wide sections are no longer created when converting Matinee files to Sequencer.\n• Template Sequences now correctly use base classes instead of child classes for compatibility with other Template Sequences.\n• Resolved an issue that prevented a sequence from playing more than once.\n• Exiting a camera cut now correctly goes back to the previous Editor location for blending cuts.\n• Sequencer now correctly counts property composites in the non-float method in the new core evaluation system.\n• BlenderType component values now correctly copy child entities in the new core evaluation system.\n• The warning Number of TAA samples is no longer hard coded in MoviePipeline, and it now respects the actual variable set.\n• Camera shakes with a custom duration no longer incorrectly shows a warning on the shake track.\n• Ease in and out is now correctly enabled for the first and last sections on the Camera Cut track.\n• Easing durations are now automatically reset if auto-easing is not allowed for the given section.\n• Sequencer no longer incorrectly fails to animate an object’s properties.\n• World depth green channels now have the correct values for view-relative depth in MoviePipeline. The values now represent the distance from the camera by direction-to-pixel.\n• The latent action setup is now simplified and correctly handles re-entrancy in latent actions.\n• Fixed an issue in MoviePipeline where using Camera Cut for Motion Blur caused camera motion vectors to be incorrect for motion blur.\n• The Camera Shake Previewer is now compatible with Matinee shakes.\n• Selections between Template Sequences and the Editor Viewport now synchronize correctly.\n• Fixed camera jitter problems related to camera blending after a blend has finished.\n• Sequencer: Can now Bake Anim Sequences from a loaded sub sequence.\n• The Camera Shake previewer tool now correctly cleans up the completed camera animations and initializes the base FOV.\n• Correctly clean-up finished camera anims and initialize the base FOV in the camera shake previewer tool.\n• Event tracks now correctly rebind to the Sequence Director when copy / pasting tracks.\n• Initial Values are now correctly shared between FSequencer instances and Interrogators. This ensures that exports and trail rendering share the same initial value data, despite objects potentially being in animated states when an interrogation is performed.\n• You can no longer use ForEachAllocation task callbacks for resolving access to component data. The task internals already handle the callbacks and the lock is maintained correctly for the duration of the task.\n• Updated AutoSDK to allow unprivileged execution of the install / uninstall hooks when possible.\n• SRadialBox : Added support for Radial sectors with a central angle smaller than 360 degrees.\n• Added a new Slate.bAllowNotificationWidget console variable to enable / disable the display of notification widgets.\n• You can now disable double-clicking to select words in EditableText/TextBox and their multiline counterpart using SelectWordOnMouseDoubleClick. *\n• Fixed an issue where mouse input was ignored when the application ran in Standalone mode or after packaging when FSceneViewport wasn’t associated with UGameViewportClient.\n• Fixed a bug with the Component Visualizer Manager that prevented right-clicks in the Editor from being reported correctly.\n• Fixed an issue that caused combo boxes to sometimes start capturing keyboard or gamepad input upon construction, even though that was not intended.\n• Updated the Slate LetterSpacing property to take font scale into account. Zooming on the UMG designer no longer causes text with line spacing applied to change (relative) size.\n• OnItemScrolledIntoView can no longer be called if the item provided doesn't correspond to a valid Widget.\n• Fix to a possible deadlock in Slate Loading screen code.\n• You can now use the CVar, Slate.Font.AsyncLazyLoad, to force fonts marked as LazyLoad to be loaded on a background thread. This prevents IO hitches in font loading.\n• When reflowing the UI based on Right To Left, the pivot point is now also mirrored about the middle.\n• UWidgets that had their SWidget component garbage collected now have a (No Slate Widget) label in the Debug Filter of the Blueprint Debugger.\n• The SetSelectedItem function in UCommonRotator (part of the experimental CommonUI plugin) is now virtual.\n• Added a Cvar to limit the Render target size used for Widget Components (4K size by default).\n• Renaming a UMG animation to a name longer than 100 characters now issues a warning and prevents you from submitting that name.\n• Added a new function to allow updating the render target on the UWidgetComponent even if ticking is disabled.\n• Fixed a crash that happened when trying to paste multiple items on a Widget that only supports one child if it already has one.\n• Fixed an issue that caused WidgetComponent to try accessing deleted resources in the render thread.\n• Fixed an issue that caused a crash on iOS when entering Korean text.\n• Copying and pasting a widget no longer pastes the copy as a child of the original.\n• Fixed a copy-paste issue where editing the text on the copy also changed the text on the original.\n• Fixed an issue that made it impossible to undo changes if window focus was lost while dragging a slider (for example, by using a keyboard shortcut to switch to a different window).\n• Fixed an issue that caused LongPress touch events to end prematurely when the finger or mouse didn’t move.\n• Fixed a UMG bug that prevented Widgets from being dragged in the Designer view.\n• Fixed an assert when renaming UMG animations to strings greater than 1023 characters\n• Fixed crash that could happen when pasting a Widget in UMG Editor.\n• Performance improvements are now in place for handling large files in Multi-User Editing. This means users can now sync light bakes, take recordings, and other heavy package data efficiently. These files now transfer in seconds on local networks.\n• Multi-user servers will do asynchronous writes with large files instead of serial processing. This improves multi-user servers and reduces possible timeouts when processing large files. \\\n• We added Multi-User support to Virtual Camera Actors and authority is configured via the roles assigned in .\n• Overall cluster and per-viewport Post Process settings were added to nDisplay clusters.\n• Live Link FreeD is a plugin that allows cameras and other devices that send the FreeD protocol over UDP to be utilized as a Live Link source in the engine. The FreeD protocol sends a combination of device position, orientation, and/or FIZ (Focus, Iris, Zoom) data. These are combined into a Live Link Camera Role that can easily be used in the engine.\n• Live Link VRPN is a plugin that allows connection to a VRPN server to fetch device data as a Live Link source in the engine. VRPN device types that are currently supported are Analog, Dial, Button, and Tracker. Analog, Dial, and Button device types are seen as a basic Live Link role as an array of labeled floats. Tracker device types are seen as a Live Link Transform role.\n• Support has been added for Live Link rebroadcast to virtual subjects.\n• Virtual subject Take Recorder support is now available.\n• Added a way to intercept requests before they are handled by the Web Remote Control.\n• The nDisplay plugin now includes a LightCard Blueprint Actor. The LightCard Actor is a customizable card used to provide practical lighting on nDisplay stages.\n• Added the ability to access exposed preset entities by ID through the web API.\n• Added a way to get, set, and delete exposed entities metadata, which shows up in the Remote Control Details panel.\n• You can now make Remote Control API requests by using either preset ID or preset name.\n• Improved Remote Control support in -game and packaged games. Properties or functions that can't be used in -game will be marked in the Remote Control Panel, which can be disabled by a project settings. \\\n• Added rebinding to the Remote Control Preset, which allows you to re-use presets across levels.\n• The function-picker search is now reliable in the Remote Control Preset.\n• Added a Details panel for exposed fields in the Remote Control Panel.\n• For Switchboard, added autodetection of project and engine paths:\n• Looks for Unreal Editor processes and projects in their command lines for detection.\n• If UE isn't running, then it will try to fill out the engine directory that Switchboard is running from.\n• For Time Management, added a genlocked, fixed-frame rate, custom timestep. It is very similar to the Fixed Rate in Project Settings implemented in UnrealEngine.cpp, except that it keeps up with platform time by accounting for any missed frames when the fps drops below the specified fixed rate.\n• For Camera Calibration, prepared NodalOffsetAlgoPoints to become a base class for algos with machine vision.\n• Now that OpenCV doesn't crash, an extra copy of the media frame was removed.\n• Moved ReadMediaPixels to the step controller so that it can be used by any step without reimplementation.\n• Changed methods and member variables in NodalOffsetAlgoPoints from private to protected because they need to be accessed by derived classes.\n• Added a button to apply the nodal offset to the calibrator parent.\n• For Switchboard, added local P4 settings detection. These settings can be detected when P4 is enabled in the new Switchboard config dialog, but will respect existing values (if there are any), or if the new Detect button is pressed, in which case it will replace existing values with any values found.\n• In Movie Render Queue, added a stills automation editor utility called Still Render Setup Automation. This automates the creation of a sequence with a still for a given camera. The Python script required a plugin dependency to Sequencer Scripting.\n• The Composure ICompElementManager is now public.\n• RCWebUI: Added a command line option \"-RCWebInterfaceDisable\" to prevent the WebApp from starting. This is useful when starting instances of the same project that are not meant to run the web server.\n• VPUtilities: Created a Blueprint library function for virtual production rendering-related functions. Added a functor generator to activate a given Scene View Extension when it is: The initial use case is to be able to set an OCIO config in BP.\n• Added Line Wrap and Auto Scroll controls to the log pane in Switchboard. Enabling Line Wrap breaks long messages into multiple lines, ensuring you can read them in their entirety without needing to scroll horizontally. Auto Scroll causes the view to follow the newest messages as they're appended to the bottom of the log, but can be disabled to make it easier to inspect older log messages (and is disabled automatically when you drag the scroll bar).\n• SwitchboardListener now caches the mosaic topologies reported via NvAPI, which change infrequently and can be expensive to query, rather than updating them every second. A Refresh Mosaics button was added to Switchboard's nDisplay Monitor to manually trigger an update.\n• Switchboard now includes the ShaderCompileWorker target when performing compilation on Unreal and nDisplay devices.\n• Switchboard now uses a new Python script called sbl_helper to perform Perforce syncing, rather than the Unreal Automation Tool Sync Project. Syncing is now faster, with better progress reporting, and build versioning is more consistent with UnrealGameSync. sbl_helper laying the groundwork for additional planned improvements.\n• Switchboard now includes a toggle setting for nDisplay devices (labeled Unattended, and enabled by default) to include the -unattended argument on the command line, suppressing undesirable interactive UI and notifications.\n• The Switchboard toolbar options, Install Listener and Uninstall Listener, were replaced with a checkbox labeled Launch Switchboard Listener on Login, which more accurately describes its behavior, and a bug in creating the corresponding registry entry was fixed.\n• Added an editor command line argument \"-AutoDeclinePackageRecovery\" to bypass the Restore Packages prompt and discard autosaves. This is controlled by a corresponding Skip Package Recovery checkbox in Switchboard's Unreal device settings. This can be useful in multi-user editing scenarios, where restoring autosaved packages may not be desirable.\n• Switchboard will send the local nDisplay cluster configuration Blueprint asset to nDisplay devices upon launching them, which simplifies iteration and testing of these configurations without the overhead of submitting to and syncing from version control.\n• Added a new Blueprint editor, the nDisplay Config Editor, specifically for creating nDisplay assets. You can create a cluster, assign projection policies, and model 3D previews of the complex configurations of physical displays. The assets created here are now Blueprint Actors which you can drag and drop into levels. Once instanced in a level, properties can be exposed to Remote Control and replicated with Multi-User. Assets from UE4 4.26 will update to the new version provided that the imported JSON config file is available and at the location where the old asset was imported. It is still possible to import old JSON config files manually by dropping them into the content browser.\n• Fixed a crash that occurred when loading a preset with an exposed BP function.\n• Fixed an issue with Multi-User Sequencer playback where scrubbing the timeline would result in playing game nodes.\n• Playing back a sequence on a game node no longer results in the spawned objects persisting when closing the Sequencer Editor.\n• Fixed a bug in the Live Link Transform Axis Switch preprocessor that caused incorrect mappings in some cases. The UI was also simplified to use standard Front, Right, and Up axis notation to match other available tools and software. Position and Orientation offsets were added as well to shift the incoming tracking origin to match the desired world origin.\n• The default OCIO 3D LUT file size was increased to 65x65x65.\n• The Camera component frustum now updates when driven from Live Link.\n• Added a way to avoid applying data coming in from Live Link on camera, and to force using the camera component's range instead of relying on the lens file.\n• Added getters for raw animation static and frame data from the Blueprint helper struct SubjectFrameHandle.\n• Fixed an issue where LiveLinkComponent selection based on role did not go down the hierarchy.\n• Resolved an issue with the Timed Data Monitor stage events type that made it unfilterable.\n• Updated the static assert to catch wrong base types for stage events.\n• Added a validity check when updating the Source Framerate from the first enabled Subject with valid data.\n• Fixed the TimedDataMonitor MediaIO input GetDisplayName, where player base SetRate would always return false, causing it to not play back correctly.\n• Composure is now allowed to run packaged builds.\n• Fixed presets with the same names not displaying when querying presets.\n• It is now possible to expose custom events in the Remote Control Preset.\n• In OpenCV, added cv::unreal module. This adds functions to override new and delete operators, so that UE can replace them with its FMemory implementations and avoid crashes when UE passes containers (such as std::vector ) that OpenCV populates, then UE tries to release the container memory.\n• Fixed an issue with Switchboard's multi-select combo boxes that could sometimes cause them to show a stale string after all items had been deselected, and improved their handling of mouse clicks.\n• Fixed several instances where malformed JSON commands could cause SwitchboardListener to crash, and added diagnostic logging indicating when required command fields are missing.\n• Removed a property in FixedFrameRateCustomTimeStep that has been deprecated since 4.21.\n• We removed old Virtual Camera tools and assets. Users should now use Simple Virtual Camera or VirtualCamera2 Actor.\n• All references to the deprecated VirtualCamera actor have been removed from the Virtual Camera Showcase project.\n• Fixed a race condition happening due to the render thread accessing the materials in the main thread.\n• The transient actor UBuoyancyManager is now hidden from Scene Outliner (it will eventually become a subsystem).\n• Deterministic fixes for water:\n• Deterministic names are now used for all automatically-generated UObjects generated by water body actors.\n• Hack around UBodySetup's BodySetupGuid, which generates random GUIDs each time a new UBodySetup is created (this can happen on construction for lake and ocean collision components).\n• With deterministic names for collision components, they can be made net-addressable. This is a solution for warnings occurring on the server about replicated references not being net-addressable.\n• Generated objects have been made NonPIEDuplicateTransient to work around a check in NewObject, which can happen when saving as a map. Otherwise, a duplicated and named object marked for NeedsPostLoad might end up being reused without the flag being cleared.\n• GC collector was not properly tracking materials used by WaterMeshComponent, and this caused a crash. This issue has been fixed.\n• Fixed an issue causing an assert when the debug information for underwater materials was displayed.\n• Fixed an issue where river spline point parameters were getting out of order when the user added new points; it now uses the ordered list of spline mesh components from the river water body, instead of relying on the Actor's GetComponents function which returns components in an undefined order.\n• Added an HLOD build option \"-MapCleanup\" that will delete any invalid LODActor.\n• HLOD - Added support for per-level custom HLOD baking transform; this allows materials with WPO to be baked properly for the HLOD.\n• HLOD Rebuild Commandlet - Added a \"-SkipSubLevels\" option to allow building HLODs only for the persistent level.\n• Material Baking - Fixed a color constant conversion issue in FMaterialUtilities::CreateProxyMaterialAndTextures. This will only affect the \"Bake out materials\" tool in the Static Mesh viewer, with no change to HLODs.\n• Fixed a bug causing some Actors with multiple static mesh components to be excluded from the HLOD generation by error.\n• HLOD Clustering - Meshes excluded from HLOD volumes were not considered by the next HLOD level; this is now fixed.\n• HLOD - Ensured that all ISMC instances are properly added to the LODActor instances.\n• Fixed an issue with unbuilt HLOD detection being too sensitive.\n• Mesh Merging - Lightmap UV generation is now skipped if no free channel is found.\n• Added a render capture tag for each landscape brush being rendered.\n• Reduced runtime virtual texture invalidation during landscape editing. Editor now invalidates the brush region instead of full components.\n• Deferred readback of landscape edit layer textures to the CPU, to avoid stalling on GPU during landscape layer editing.\n• Neither selecting landscape components nor locking/unlocking landscape layers will dirty world packages anymore.\n• Fixed a problem where heightfield data was not being updated when the water brush was updated; if a heightmap/weightmap readback modification was detected during the frame, and the component was not requesting that the collision data be updated, it would fail to update the collision data when a later request was made and no modification was detected at the time of the later request.\n• Fixed an issue where the landscape layer reserved for spline was being lost upon resize.\n• Edigrated CL 14156485 - Fixed a crash that occurred when using the Smooth tool in landscape mode.\n• Edigrated CL 14193183 - Fixed a rare crash that occurred during landscape painting. LandscapeComponent's SceneProxy was recreated while RenderThread was accessing it through the component. Now it makes its copy first.\n• Fixed a problem with landscape component bounds being invalidated when using the water brush; the components were first updated with the ELandscapeComponentUpdateFlag::Component_Update_Approximated_Bounds flag, (temporarily) invalidated the bounds, and then were updated with the IsUpdateFlagEnabledForModes(ELandscapeComponentUpdateFlag::Component_Update_Heightmap_Collision) flag, but the bounds weren’t updated if the heightfield was actually unchanged. Now, the bounds are not invalidated (with an approximate bounds computation) if no change is actually detected on the heightmaps.\n• Edigrated CL 14187664 - Fixed a crash occurring in RenderLandscapeComponentToTexture_RenderThread when LandscapeComponentSceneProxy is null. Added ensures at a couple of places to help track rare crashes.\n• Default landscape grass inputs to zero now, instead of throwing a compile error when not connected. Previously we threw an error as soon as node was created but not set up.\n• Added CVars landscape.RenderCaptureLayersNextHeightmapDraws and landscape.RenderCaptureLayersNextWeightmapDraws to trigger a render capture during the next heightmap/weightmap draw calls.\n• All landscape edit layers, render targets, and draw calls now have a proper debug name.\n• Replaced CVar landscape.OutputLayersDebugDrawCallName, which was forcing the layers to update, with landscape.ForceLayersUpdate, which does the same thing but more explicitly.\n• Fixed an issue where landscape layers were incorrectly compositing/decompositing heightmaps when a heightmap was shared between multiple landscape components and not entirely covered by its components (for example, 3x4 components).\n• Generation of landscape normals now matches the CPU version.\n• Fixed an issue where deleting a layer from the Landscape would have no lasting effect when Edit Layers was enabled.\n• The landscape scale XY constraint is now respected when using the viewport gizmo.\n• bFillCollisionUnderLandscapeForNavmesh and bUsedForNavigation were not propagating from landscape streaming proxies to their components when setting the property. This has been fixed.\n• Added the -xrtrackingonly command line parameter to start OpenVR in a mode where frames are not submitted to the renderer. This allows for reading the tracker and device info separately. It also allows multiple instances of the engine to run on a single machine, and for all instances to share incoming tracking and input data.\n• Added support for StereoLayer Quads to the OpenXR plugin.\n• Took OpenXR out of Beta and set it to On by default.\n• Updated the OpenXR loader and headers to version 1.0.17.\n• Added support for late updating the projection of each stereo view. This ensures that you are projecting for the latest field-of-view information from the headset.\n• Added WebXR standard controller models to OpenXR plugin content. The OpenXR plugin now includes all commonly found XR controller models. \\\n• For OpenXR, improvements were made to swapchain pipelining.\n• Editor no longer crashes when opening a project with OpenXR enabled if an HMD is not attached.\n• Start Session/Stop Session in OpenXR plugin now uses exclusive locks so frame calls can't overlap session calls.\n• Fixed the swapchain timeout by increasing retry count, adding a timeout for stereo layers, and increasing the timeout value to 100ms by default.\n• Get Camera Intrinsics for WMR was implemented.\n• Windows Mixed Reality Anchor Store case-sensitivity problems were resolved by setting all IDs on the way into WMRInterop to lowercase.\n• Added Hand Mesh as an AR Capture type for use in WMR and OpenXR.\n• WMR Hand Mesh now hooks up to XRVisualization.\n• WMR's Hand Mesh has been decoupled from spatial mapping. Previously, the Hand Mesh was part of the MRMesh, would only show if spatial mapping was enabled, and could leave zombie hands in view as the hands lost and regained tracking.\n• OnControllerButtonReleased now triggers when isActive becomes false.\n• Fixed ShadowSetup incorrectly checking for Multi-Viewport instead of Mobile Multi-View.\n• The deprecated Mono Culling Distance variable was removed from World Settings.\n• Live Link was updated to handle a tick from OpenXR hand tracking.\n• HoloLens apps can now launch a website from an existing Unreal interface in an Edge pop-up.\n• A quality-of-life improvement has been added for using an EHandKeypoint directly as an input in arrays from FXR Motion Controller Data. Previously, developers could cast the EHandKeypoint byte to a 32-bit int using built-in math conversion Blueprint functions, but this was not discoverable, and is not automatically suggested when dragging an EHandKeypoint to a Blueprint integer input.\n• A Scene Understanding update adds an Occlusion Hint OpenXR extension that could return different meshes with different levels of detail for the same surface. This could be a higher detail visible mesh, an occlusion mesh that is not meant to be visualized, or a mesh for collision.\n• Since multiple meshes could be returned for the same surface, we now ensure that only the collision meshes are used with the physics system. The user can set materials on the meshes based on what the mesh usage type is. This also fixes a bug where the trackable added event was firing before the spatial mesh was initialized. Meshes now have an appropriate material applied or added to a particular list when the mesh is first added, rather than waiting for the first update.\n• Add NV12 texture format support for DX11 and DX12 RHIs for HoloLens\n• WMR Spatial Mapping has been fixed so that it no longer crashes on Stop/Pause in an AR Session.\n• AR Actor types are now cached so the AR Session is not used erroneously in Update.\n• Plane finding in OpenXR no longer checks that spatial mapping meshes exist before processing planes. This allows updating plane finding if spatial mapping is not being used. This has been fixed by making the check predicated on the list of planes.\n• The function SupportsMultipleRenderTargets() now returns true (instead of false) for the Magic Leap OS Lumin.\n• UXR Visualization Function Library methods are now accessible via C++.\n• The ability to toggle Spatial Mapping on and off at runtime without needing to stop/resume the ARSession is now exposed. Toggle failures return false for each of WMR's AR Captures (QR, PV, SR) so a toggle retry can be made.\n• Added an option to write depth to translucent materials for HoloLens devices.\n• ARCore now uses parent class FDefaultXRCamera for SetupView.\n• The Oculus OVR plugin has been upgraded to v25 (v1.57). Some deprecated API usages were also fixed.\n• Enabled the Mobile Phase Sync for mobile Oculus devices in the Oculus VR plugin.\n• Update HMD priority list to be in this order: Since SteamVR also works with the Oculus Rift and Windows Mixed Reality, give priority to the native Oculus and Windows Mixed Reality plugins before trying SteamVR. OpenXR is production-ready. If enabled, it should be the priority plugin. In 4.27, the native Oculus plugin still requires higher prioritization to address runtime features that are required for shipping by Oculus but not yet supported in OpenXR .\n• Fixed a crash on startup with Oculus when -nohmd was specified in the command line.\n• Oculus HMD Module can now set up the Oculus Plugin Wrapper when the Oculus Service is not installed or broken.\n• Redundant OVRPlugin.dll verification has been removed from the Oculus Editor Module.\n• For the Steam VR Input Device, unchecked static_casts to FSteamVRInputDevice were fixed.\n• The signature for IAISightTargetInterface::CanBeSeenFrom has changed to give users more information about the previous visibility state, and provide access to a userdata payload. Please update your code accordingly.\n• If you have an existing project using the USDImporter plugin on platforms other than Win64, Mac, or Linux, you may get and error like this:\n\n\"ERROR: USDImporter.uplugin is referenced via YourProject.uproject with a mismatched 'SupportedTargetPlatforms' field\"\n\nTo fix this, open the .uproject file for the project, and change the USDImporter entry in the plugins section from this:\n• This introduces a breaking API change for classes inheriting IPersonaPreviewScene or ISkeletonTree that override SetSelectedBone, and for user code that binds to their SelectionChanged event. These now take an extra argument to route the cause of the change (user interaction or direct code) through to the UI elements.\n• Updated the Niagara system and emitter asset tag generation code. There are multiple new tags that can help in mass-analyzing content, but these tags will only be available on assets from UE4 4.26 or earlier after resaving the assets in UE4 4.27.\n• Matchmaker and Signalling server have been moved from Engine/Source/Programs/PixelStreaming to Samples/PixelStreaming. References to these paths will need to be updated. Both Signalling server and Matchmaker can now log to a file.\n• Deprecated PixelStreamingIP and PixelStreamingPort in favor of the new PixelStreamingURL command line parameter to specify Signalling Server url using ws:// or wss:// Users should replace -PixelStreamingIP\n• Profile Guided Optimization is now available on Windows. Build the client with -PGOProfile and -PGOOptimize to create Profile Guided Optimization executables for improved performance.\n• Default maximum texture size for cubemaps generated from long-lat sources has been changed from 512 to unlimited. Cubemap textures saved before upgrading to UE4 4.27 will be explicitly set to 512 on asset load to preserve their old behavior, but new generated cubemaps will base their resolutions on the sizes of their source long-lat textures.\n• Previously imported .hdr textures were processed in linear color space but marked as sRGB, which could lead to incorrectly using \"Color\" sampler type instead of \"Linear Color\" in texture expressions. This can cause incompatibility between new textures and old texture expressions; to resolve this, update the texture expressions to use \"Linear Color\" sampler type when referencing newly imported .hdr textures.\n• WidgetInteractionComponent’s PointerIndex variable is now an integer; it used to be a float.\n• The LiveLink camera controller has been moved to its own plugin, called LiveLinkCamera. You must enable this to get LiveLink camera controller functionality. Previously, the controller was automatically added when enabling the LiveLink plugin.\n• To improve performance of Multi-user in situations of large files, we have added heuristics to the message construction to use compression. With this change, the system only compresses messages between 512 bytes and 3 megabytes. This is a major update to the session database, and existing sessions will be incompatible.\n\nFor a complete listing of known issues affecting Unreal Engine 4.27, please see the Unreal Engine Public Issue Tracker."
    },
    {
        "link": "https://forums.unrealengine.com/t/which-version-to-set-up-android-for-unreal-engine-4-27-2/781550",
        "document": "Setting Up Android SDK and NDK for Unreal\n\nHow to set up your Android development environment for Unreal 4.25 and later"
    },
    {
        "link": "https://forums.unrealengine.com/t/unreal-engine-4-27-2-could-not-initialize-class-org-codehaus-groovy-reflection-reflectioncache/507161",
        "document": "This similar error was resolved on a previous topic, but the Engine version was an older one.\n\n I’ve been stuck on it the last 2 days.\n\nthis is the error :"
    },
    {
        "link": "https://forums.unrealengine.com/t/ue-4-27-2-how-to-build-for-target-sdk-33-or-34/1371642",
        "document": "Contribute to truefranco/UE4.27.2-Oculus-Nvidia-AMD development by creating an account on GitHub."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/android-development-requirements-for-unreal-engine",
        "document": "This page contains the software development kit (SDK) requirements needed to develop Unreal Engine (UE) projects for Android devices, as well as compatible hardware for the current version of UE.\n• Android SDK: Different stores have their own target SDK minimum requirements, which may differ from that mentioned above.\n\nWhile SDK 30 is the minimum needed to compile on your system, SDK 26 is the minimum SDK you can target for shipping projects on devices. Minimum SDK version required to use Android File Server (AFS) is 26."
    },
    {
        "link": "https://forums.unrealengine.com/t/packing-for-android-in-5-3-targets-gradle-7-4-2-but-pulls-7-5/1266827",
        "document": "How to set up your Android development environment for Unreal Engine"
    },
    {
        "link": "https://forums.unrealengine.com/t/how-to-fix-build-failed-android-packaging/2158132",
        "document": "I am new to developing and to using the Android package tool.\n\n Trying to setup a VR project in UE 5.4 and build it for Android so I can use it in the Quest3.\n\n I followed the instructions in this page\n\nbut probably missed something?\n\n I am getting this in the log when trying to build for Android\n\nThanks in advance for any hints!\n\nUATHelper: Packaging (Android (ASTC)): ====11/29/2024 11:13:53 AM====PERFORMING FINAL APK PACKAGE OPERATION=====arm64===========================================\n\n UATHelper: Packaging (Android (ASTC)): Copied file E:\\Documents\\Unreal Projects\\VR_Project\\Intermediate\\Android\\arm64\\gradle\\app\\src\\main\\jniLibs\\arm64-v8a\\libUnreal.so.\n\n UATHelper: Packaging (Android (ASTC)): Directory Engine/Plugins/Runtime/AndroidFileServer/Source/AndroidFileServer/…/AFSStub copied to E:/Documents/Unreal Projects/VR_Project/Intermediate/Android/arm64/gradle/AFSProject (True)\n\n UATHelper: Packaging (Android (ASTC)): Directory Engine/Plugins/Runtime/AndroidFileServer/Source/AndroidFileServer/Android copied to E:/Documents/Unreal Projects/VR_Project/Intermediate/Android/arm64/gradle/AFSProject/app/src/main (True)\n\n UATHelper: Packaging (Android (ASTC)): Directory E:/Documents/Unreal Projects/VR_Project/Intermediate/Android/arm64/gradle/app/src/main/res copied to E:/Documents/Unreal Projects/VR_Project/Intermediate/Android/arm64/gradle/AFSProject/app/src/main/res (True)\n\n UATHelper: Packaging (Android (ASTC)): Directory E:/Documents/Unreal Projects/VR_Project/Intermediate/Android/arm64/gradle/gradle copied to E:/Documents/Unreal Projects/VR_Project/Intermediate/Android/arm64/gradle/AFSProject/gradle (True)\n\n UATHelper: Packaging (Android (ASTC)): Creating rungradle.bat to work around commandline length limit (using unused drive letter Z:)\n\n UATHelper: Packaging (Android (ASTC)): Making .apk with Gradle…\n\n UATHelper: Packaging (Android (ASTC)): To honour the JVM settings for this build a single-use Daemon process will be forked. See The Gradle Daemon.\n\n UATHelper: Packaging (Android (ASTC)): Daemon will be stopped at the end of the build\n\n UATHelper: Packaging (Android (ASTC)): FAILURE: Build failed with an exception.\n\n UATHelper: Packaging (Android (ASTC)): * What went wrong:\n\n UATHelper: Packaging (Android (ASTC)): Could not open settings generic class cache for settings file ‘Z:\\settings.gradle’ (C:\\Users\\Usuario.gradle\\caches\\7.5\\scripts\\356clt8w0kvd14538qat92yfl).\n\n UATHelper: Packaging (Android (ASTC)): > BUG! exception in phase ‘semantic analysis’ in source unit ‘ ’ Unsupported class file major version 65\n\n UATHelper: Packaging (Android (ASTC)): * Try:\n\n UATHelper: Packaging (Android (ASTC)): > Run with --stacktrace option to get the stack trace.\n\n UATHelper: Packaging (Android (ASTC)): > Run with --info or --debug option to get more log output.\n\n UATHelper: Packaging (Android (ASTC)): > Run with --scan to get full insights.\n\n UATHelper: Packaging (Android (ASTC)): * Get more help at https://help.gradle.org\n\n UATHelper: Packaging (Android (ASTC)): BUILD FAILED in 2s\n\n UATHelper: Packaging (Android (ASTC)): cmd.exe failed with args /c “E:\\Documents\\Unreal Projects\\VR_Project\\Intermediate\\Android\\arm64\\gradle\\rungradle.bat” :app:assembleDebug\n\n UATHelper: Packaging (Android (ASTC)): (see C:\\Users\\Usuario\\AppData\\Roaming\\Unreal Engine\\AutomationTool\\Logs\\C+Program+Files+Epic+Games+UE_5.4\\Log.txt for full exception trace)\n\n UATHelper: Packaging (Android (ASTC)): AutomationTool executed for 0h 0m 53s\n\n UATHelper: Packaging (Android (ASTC)): AutomationTool exiting with ExitCode=1 (Error_Unknown)\n\n UATHelper: Packaging (Android (ASTC)): BUILD FAILED\n\n PackagingResults: Error: Unknown Error"
    },
    {
        "link": "https://discuss.gradle.org/t/problem-with-gradle-in-unreal-engin-5-for-packaging-for-android/49634",
        "document": "here is my unreal log what should i do its drive me crazy"
    },
    {
        "link": "https://forums.unrealengine.com/t/android-packaging-nightmare/1944833",
        "document": "It is now 1 week I have been battling trying to get the android packaging to work. What a nightmare, I still am not able to package without failure.\n\nI have followed the docs for 5.3 on the website and now I get this:\n\nWelcome to Gradle 7.5!\n\n UATHelper: Packaging (Android (ASTC)): Here are the highlights of this release:\n\n UATHelper: Packaging (Android (ASTC)): - Support for Java 18\n\n UATHelper: Packaging (Android (ASTC)): - Support for building with Groovy 4\n\n UATHelper: Packaging (Android (ASTC)): - Much more responsive continuous builds\n\n UATHelper: Packaging (Android (ASTC)): - Improved diagnostics for dependency resolution\n\n UATHelper: Packaging (Android (ASTC)): For more details see Gradle 7.5 Release Notes\n\n UATHelper: Packaging (Android (ASTC)): To honour the JVM settings for this build a single-use Daemon process will be forked. See The Gradle Daemon.\n\n UATHelper: Packaging (Android (ASTC)): Daemon will be stopped at the end of the build\n\n UATHelper: Packaging (Android (ASTC)): FAILURE: Build failed with an exception.\n\n UATHelper: Packaging (Android (ASTC)): * What went wrong:\n\n UATHelper: Packaging (Android (ASTC)): A problem occurred configuring root project ‘app’.\n\n UATHelper: Packaging (Android (ASTC)): > Could not resolve all files for configuration ‘:classpath’.\n\n UATHelper: Packaging (Android (ASTC)): > Could not resolve com.android.tools.build:gradle:7.4.2.\n\n UATHelper: Packaging (Android (ASTC)): Required by:\n\n UATHelper: Packaging (Android (ASTC)): project :\n\n UATHelper: Packaging (Android (ASTC)): > No matching variant of com.android.tools.build:gradle:7.4.2 was found. The consumer was configured to find a runtime of a library compatible with Java 8, packaged as a jar, and its dependencies declared externally, as well as attribute ‘org.gradle.plugin.api-version’ with value ‘7.5’ but:\n\n UATHelper: Packaging (Android (ASTC)): - Variant ‘apiElements’ capability com.android.tools.build:gradle:7.4.2 declares a library, packaged as a jar, and its dependencies declared externally:\n\n UATHelper: Packaging (Android (ASTC)): - Incompatible because this component declares an API of a component compatible with Java 11 and the consumer needed a runtime of a component compatible with Java 8\n\n UATHelper: Packaging (Android (ASTC)): - Other compatible attribute:\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about org.gradle.plugin.api-version (required ‘7.5’)\n\n UATHelper: Packaging (Android (ASTC)): - Variant ‘javadocElements’ capability com.android.tools.build:gradle:7.4.2 declares a runtime of a component, and its dependencies declared externally:\n\n UATHelper: Packaging (Android (ASTC)): - Incompatible because this component declares documentation and the consumer needed a library\n\n UATHelper: Packaging (Android (ASTC)): - Other compatible attributes:\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about its target Java version (required compatibility with Java 8)\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about its elements (required them packaged as a jar)\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about org.gradle.plugin.api-version (required ‘7.5’)\n\n UATHelper: Packaging (Android (ASTC)): - Variant ‘runtimeElements’ capability com.android.tools.build:gradle:7.4.2 declares a runtime of a library, packaged as a jar, and its dependencies declared externally:\n\n UATHelper: Packaging (Android (ASTC)): - Incompatible because this component declares a component compatible with Java 11 and the consumer needed a component compatible with Java 8\n\n UATHelper: Packaging (Android (ASTC)): - Other compatible attribute:\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about org.gradle.plugin.api-version (required ‘7.5’)\n\n UATHelper: Packaging (Android (ASTC)): - Variant ‘sourcesElements’ capability com.android.tools.build:gradle:7.4.2 declares a runtime of a component, and its dependencies declared externally:\n\n UATHelper: Packaging (Android (ASTC)): - Incompatible because this component declares documentation and the consumer needed a library\n\n UATHelper: Packaging (Android (ASTC)): - Other compatible attributes:\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about its target Java version (required compatibility with Java 8)\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about its elements (required them packaged as a jar)\n\n UATHelper: Packaging (Android (ASTC)): - Doesn’t say anything about org.gradle.plugin.api-version (required ‘7.5’)\n\nam about to give up on unreal."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/using-the-android-configuration-rules-system-in-unreal-engine",
        "document": "The Android Configuration Rules system gives Android developers using Unreal Engine control over determining if a particular Android-based device has the needed hardware and software to run their project. The following information and steps will enable you to develop your UE4 projects for the devices and software you intend to support.\n\nTo get started, create a new text file called configrules.txt and place it in your projects Build/Android directory.\n\nOnce you have the configrules.txt file created and placed in the Build/Android directory, open it up in your text editor of choice and add the following text, making sure that it is the first item in the file.\n\nThe above text is the version code parsed by the ConfigRulesTool during packaging, and must be present in this form (one space between \"//\" and \"version:\", and no spaces after the colon). The number starts at one and should be incremented any time you update the file. UE4 will then use this number to determine if a newer version should be used than what is currently embedded in the Android Package (APK).\n\nCommands are used to manipulate case-sensitive variables which either trigger an immediate action or are passed on to the engine. Any variables still defined after the Config Rules runs may be queried from C++ with the following function:\n\nIt is also possible to get access to a TMap with the key/value entries if you would like to iterate over them:\n\nVariables may be used in values with the following syntax:\n\nThis means that the following:\n\nWould be replaced with the values of SRC_DeviceMake and SRC_DeviceModel separated by a space.\n\nThe following variables are defined automatically before configrules.txt is parsed:\n\nCommands can be used with valid arguments in the forum of action:argument. These are defined below along with use case examples.\n\nSet allows you to assign one or more variables and their specified values:\n\nIf you have more than one variable, you can use a comma (,) to separate them:\n\nclear allows you to clear the value assigned to variables.\n\nYou can clear more than one variable at a time using a comma (,) to separate the values you want to clear.\n\ncondition evaluates the list of conditions and if all are true it applies optional set and clear commands.\n\nThe comparisons are made up of three parts in parentheses separated by commas. The three parts are SourceType, CompareType, and MatchString.\n\nSourceType specifies the first argument for comparison and will usually be a variable name. The following are the three special SourceType values that can be used:\n\nMatchString is any string value to use for the comparison or the variable name for the [EXIST] case.\n\nCompareType may be one of the following:\n\nThe following examples show how you might setup and use the Android Config Rules Commands in your UE4 projects:\n\nThe following code will set myvar to arm64 if isARM64 is true:\n\nThe following code will set myvar to arm64 if isARM64 is true and clears notsupported:\n\nThe following code uses Regex to extract the number in Adreno (TM) 630 and compares it to see if it is less than 510 to flag an error.:\n\nchipset is a shortcut to set a group of variables if the hardware string is equal to either ro.hardware or hardware. It sets useAffinity, chipset, GPU, processorCount, bigCoreMask, and littleCoreMask. useAffinity controls whether or not taskgroup threads are restricted to the little cores with the littleCoreMask.:\n\nHere are some examples:\n\nThere are two special variables which trigger actions if set:\n\nThe value of log after any command is evaluated will be written to the logcat output and cleared.\n\nThis will dump all the variables currently set and their values to logcat.\n\nYou can set the Profile variable to override the device profile used instead of the one that would be picked by the AndroidDeviceProfileMatchingRules in DefaultDeviceProfiles.ini. If this value is not modified the normal rules will still apply. The following example would force the Android_Galaxy_S9Plus_Adreno setting for SM-G965 models:\n\nYou can customize the error and warning dialog messages that are displayed using the following variables:\n\nThe value placed in the caption or buttons is looked up in the string table to get the localized text for the dialog. You should make these string names unique and place them in a ConfigurationStrings.xml file in your project's Build/Android/res/values directory for each localized language your project supports. (values-fr, for example, would be for French).\n• Error - You can signal an error by setting the error variable. The dialog will show the string table entry for the value you assign to it. All processing of the configrules.txt will stop once this is set and the user will not be able to continue into your application.\n• Warning - A Warning dialog is triggered by setting the warning variable. The dialog will provide a continue option and optionally update and/or help buttons if the corresponding variables are set. The help button will launch an external browser to the URL specified by the link variable. Evaluation of configrules.txt will continue until the end or error is set before the dialog is shown so you can change it again with different conditions if necessary.\n\nThe following example code was setup to display an error is the user tried to use an Android device that does not support ARM64.\n\nWhen the above example is encountered, the error message that is displayed will come from the following string table.\n\nThe following additions to your project are required for the configrules.txt file to be included in your APK by compressing, and optionally encrypting, it. Start by registering the following Unreal Plugin Language (UPL) code in your project's Build.cs file:\n\nNext you will want to create a new file called MyGame_UPL.xml which is placed in the same directory with the Build.cs file.\n\nOpen up the MyGame_UPL.xml file and then add the following code, saving the file when done (change the ConfigRulesKey to contain your unique encryption key):"
    }
]