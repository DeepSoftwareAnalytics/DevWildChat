[
    {
        "link": "https://requests.readthedocs.io",
        "document": "Requests is an elegant and simple HTTP library for Python, built for human beings.\n\nRequests allows you to send HTTP/1.1 requests extremely easily. There’s no need to manually add query strings to your URLs, or to form-encode your POST data. Keep-alive and HTTP connection pooling are 100% automatic, thanks to urllib3."
    },
    {
        "link": "https://requests.readthedocs.io/en/master/user/quickstart",
        "document": "Eager to get started? This page gives a good introduction in how to get started with Requests.\n\nFirst, make sure that:\n\nLet’s get started with some simple examples.\n\nMaking a request with Requests is very simple. Now, let’s try to get a webpage. For this example, let’s get GitHub’s public timeline: Now, we have a object called . We can get all the information we need from this object. Requests’ simple API means that all forms of HTTP request are as obvious. For example, this is how you make an HTTP POST request: Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and OPTIONS? These are all just as simple: That’s all well and good, but it’s also only the start of what Requests can do.\n\nYou often want to send some sort of data in the URL’s query string. If you were constructing the URL by hand, this data would be given as key/value pairs in the URL after a question mark, e.g. . Requests allows you to provide these arguments as a dictionary of strings, using the keyword argument. As an example, if you wanted to pass and to , you would use the following code: You can see that the URL has been correctly encoded by printing the URL: Note that any dictionary key whose value is will not be added to the URL’s query string. You can also pass a list of items as a value:\n\nWe can read the content of the server’s response. Consider the GitHub timeline again: Requests will automatically decode content from the server. Most unicode charsets are seamlessly decoded. When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access . You can find out what encoding Requests is using, and change it, using the property: If you change the encoding, Requests will use the new value of whenever you call . You might want to do this in any situation where you can apply special logic to work out what the encoding of the content will be. For example, HTML and XML have the ability to specify their encoding in their body. In situations like this, you should use to find the encoding, and then set . This will let you use with the correct encoding. Requests will also use custom encodings in the event that you need them. If you have created your own encoding and registered it with the module, you can simply use the codec name as the value of and Requests will handle the decoding for you.\n\nThere’s also a builtin JSON decoder, in case you’re dealing with JSON data: In case the JSON decoding fails, raises an exception. For example, if the response gets a 204 (No Content), or if the response contains invalid JSON, attempting raises . This wrapper exception provides interoperability for multiple exceptions that may be thrown by different python versions and json serialization libraries. It should be noted that the success of the call to does not indicate the success of the response. Some servers may return a JSON object in a failed response (e.g. error details with HTTP 500). Such JSON will be decoded and returned. To check that a request is successful, use or check is what you expect.\n\nIn the rare case that you’d like to get the raw socket response from the server, you can access . If you want to do this, make sure you set in your initial request. Once you do, you can do this: In general, however, you should use a pattern like this to save what is being streamed to a file: Using will handle a lot of what you would otherwise have to handle when using directly. When streaming a download, the above is the preferred and recommended way to retrieve the content. Note that can be freely adjusted to a number that may better fit your use cases. An important note about using versus . will automatically decode the and transfer-encodings. is a raw stream of bytes – it does not transform the response content. If you really need access to the bytes as they were returned, use .\n\nIf you’d like to add HTTP headers to a request, simply pass in a to the parameter. For example, we didn’t specify our user-agent in the previous example: Note: Custom headers are given less precedence than more specific sources of information. For instance:\n• None Authorization headers set with will be overridden if credentials are specified in , which in turn will be overridden by the parameter. Requests will search for the netrc file at , , or at the path specified by the environment variable.\n• None Authorization headers will be removed if you get redirected off-host.\n• None Proxy-Authorization headers will be overridden by proxy credentials provided in the URL.\n• None Content-Length headers will be overridden when we can determine the length of the content. Furthermore, Requests does not change its behavior at all based on which custom headers are specified. The headers are simply passed on into the final request. Note: All header values must be a , bytestring, or unicode. While permitted, it’s advised to avoid passing unicode header values.\n\nTypically, you want to send some form-encoded data — much like an HTML form. To do this, simply pass a dictionary to the argument. Your dictionary of data will automatically be form-encoded when the request is made: The argument can also have multiple values for each key. This can be done by making either a list of tuples or a dictionary with lists as values. This is particularly useful when the form has multiple elements that use the same key: There are times that you may want to send data that is not form-encoded. If you pass in a instead of a , that data will be posted directly. For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data: Please note that the above code will NOT add the header (so in particular it will NOT set it to ). If you need that header set and you don’t want to encode the yourself, you can also pass it directly using the parameter (added in version 2.4.2) and it will be encoded automatically: Note, the parameter is ignored if either or is passed.\n\nYou can set the filename, content_type and headers explicitly: If you want, you can send strings to be received as files: In the event you are posting a very large file as a request, you may want to stream the request. By default, does not support this, but there is a separate package which does - . You should read the toolbelt’s documentation for more details about how to use it. For sending multiple files in one request refer to the advanced section. It is strongly recommended that you open files in binary mode. This is because Requests may attempt to provide the header for you, and if it does this value will be set to the number of bytes in the file. Errors may occur if you open the file in text mode.\n\nWe can view the server’s response headers using a Python dictionary: The dictionary is special, though: it’s made just for HTTP headers. According to RFC 7230, HTTP Header names are case-insensitive. So, we can access the headers using any capitalization we want: It is also special in that the server could have sent the same header multiple times with different values, but requests combines them so they can be represented in the dictionary within a single mapping, as per RFC 7230: A recipient MAY combine multiple header fields with the same field name into one “field-name: field-value” pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma.\n\nYou can tell Requests to stop waiting for a response after a given number of seconds with the parameter. Nearly all production code should use this parameter in nearly all requests. Failure to do so can cause your program to hang indefinitely: is not a time limit on the entire response download; rather, an exception is raised if the server has not issued a response for seconds (more precisely, if no bytes have been received on the underlying socket for seconds). If no timeout is specified explicitly, requests do not time out.\n\nIn the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a exception. will raise an if the HTTP request returned an unsuccessful status code. If a request times out, a exception is raised. If a request exceeds the configured number of maximum redirections, a exception is raised. All exceptions that Requests explicitly raises inherit from . Ready for more? Check out the advanced section."
    },
    {
        "link": "https://realpython.com/python-requests",
        "document": "The Requests library is the de facto standard for making HTTP requests in Python. It abstracts the complexities of making requests behind a beautiful, simple API so that you can focus on interacting with services and consuming data in your application.\n\nThroughout this tutorial, you’ll see some of the most useful features that Requests has to offer as well as ways to customize and optimize those features for different situations that you may come across. You’ll also learn how to use Requests in an efficient way as well as how to prevent requests to external services from slowing down your application.\n\nIn this tutorial, you’ll learn how to:\n• Make requests using the most common HTTP methods\n• Customize your requests’ headers and data using the query string and message body\n• Inspect data from your requests and responses\n• Configure your requests to help prevent your application from backing up or slowing down\n\nFor the best experience working through this tutorial, you should have basic general knowledge of HTTP. That said, you still may be able to follow along fine without it.\n\nIn the upcoming sections, you’ll see how you can install and use in your application. If you want to play with the code examples that you’ll see in this tutorial, as well as some additional ones, then you can download the code examples and work with them locally:\n\nEven though the Requests library is a common staple for many Python developers, it’s not included in Python’s standard library. There are good reasons for that decision, primarily that the library can continue to evolve more freely as a self-standing project. Note: Requests doesn’t support asynchronous HTTP requests directly. If you need async support in your program, you should try out AIOHTTP or HTTPX. The latter library is broadly compatible with Requests’ syntax. Because Requests is a third-party library, you need to install it before you can use it in your code. As a good practice, you should install external packages into a virtual environment, but you may choose to install into your global environment if you’re planning to use it across multiple projects. Whether you’re working in a virtual environment or not, you’ll need to install : Once has finished installing , you can use it in your application. Importing looks like this: Now that you’re all set up, it’s time to begin your journey through Requests. Your first goal will be learning how to make a request.\n\nA is a powerful object for inspecting the results of the request. Make that same request again, but this time store the return value in a variable so that you can get a closer look at its attributes and behaviors: In this example, you’ve captured the return value of , which is an instance of , and stored it in a variable called . You can now use to see a lot of information about the results of your request. The first bit of information that you can gather from is the status code. A status code informs you of the status of the request. For example, a status means that your request was successful, whereas a status means that the resource you were looking for wasn’t found. There are many other possible status codes as well to give you specific insights into what happened with your request. By accessing , you can see the status code that the server returned: returned , which means that your request was successful and the server responded with the data that you were requesting. Sometimes, you might want to use this information to make decisions in your code: With this logic, if the server returns a status code, then your program will print . If the result is a , then your program will print . Requests goes one step further in simplifying this process for you. If you use a instance in a conditional expression, then it’ll evaluate to if the status code was smaller than , and otherwise. Therefore, you can simplify the last example by rewriting the statement: In the code snippet above, you implicitly check whether the of is between and . If it’s not, then you raise an exception that includes the non-success status code in an f-string. Note: This truth value test is possible because is an overloaded method on . This means that the adapted default behavior of takes the status code into account when determining the truth value of the object. Keep in mind that this method is not verifying that the status code is equal to . The reason for this is that other status codes within the to range, such as and , are also considered successful in the sense that they provide some workable response. For example, the status code tells you that the response was successful, but there’s no content to return in the message body. So, make sure you use this convenient shorthand only if you want to know if the request was generally successful. Then, if necessary, you’ll need to handle the response appropriately based on the status code. Let’s say you don’t want to check the response’s status code in an statement. Instead, you want to use Request’s built-in capacities to raise an exception if the request was unsuccessful. You can do this using : If you invoke , then Requests will raise an for status codes between and . If the status code indicates a successful request, then the program will proceed without raising that exception. Now, you know a lot about how to deal with the status code of the response that you got back from the server. However, when you make a request, you rarely only care about the status code of the response. Usually, you want to see more. Next, you’ll see how to view the actual data that the server sent back in the body of the response. The response of a request often has some valuable information, known as a payload, in the message body. Using the attributes and methods of , you can view the payload in a variety of different formats. To see the response’s content in , you use : While gives you access to the raw bytes of the response payload, you’ll often want to convert them into a string using a character encoding such as UTF-8. will do that for you when you access : Because the decoding of to a requires an encoding scheme, Requests will try to guess the encoding based on the response’s headers if you don’t specify one. You can provide an explicit encoding by setting before accessing : If you take a look at the response, then you’ll see that it’s actually serialized JSON content. To get a dictionary, you could take the that you retrieved from and deserialize it using . However, a simpler way to accomplish this task is to use : The of the return value of is a dictionary, so you can access values in the object by key: You can do a lot with status codes and message bodies. But, if you need more information, like metadata about the response itself, then you’ll need to look at the response’s headers. The response headers can give you useful information, such as the content type of the response payload and a time limit on how long to cache the response. To view these headers, access : returns a dictionary-like object, allowing you to access header values by key. For example, to see the content type of the response payload, you can access : There’s something special about this dictionary-like headers object, though. The HTTP specification defines headers as case-insensitive, which means that you’re able to access these headers without worrying about their capitalization: Whether you use the key or , you’ll get the same value. Now that you’ve seen the most useful attributes and methods of in action, you already have a good overview of Requests’ basic usage. You can get content from the Internet and work with the response that you receive. But there’s more to the Internet than plain and straightforward URLs. In the next section, you’ll take a step back and see how your responses change when you customize your requests to account for query string parameters.\n\nAccording to the HTTP specification, , , and the less common requests pass their data through the message body rather than through parameters in the query string. Using Requests, you’ll pass the payload to the corresponding function’s parameter. takes a dictionary, a list of tuples, bytes, or a file-like object. You’ll want to adapt the data that send in the body of your request to the specific needs of the service that you’re interacting with. For example, if your request’s content type is , then you can send the form data as a dictionary: You can also send that same data as a list of tuples: If, however, you need to send JSON data, then you can use the parameter. When you pass JSON data via , Requests will serialize your data and add the correct header for you. Like you learned earlier, the httpbin service accepts test requests and responds with data about the requests. For instance, you can use it to inspect a basic request: You can see from the response that the server received your request data and headers as you sent them. Requests also provides this information to you in the form of a that you’ll inspect in more detail in the next section.\n\nAuthentication helps a service understand who you are. Typically, you provide your credentials to a server by passing data through the header or a custom header defined by the service. All the functions of Requests that you’ve seen to this point provide a parameter called , which allows you to pass your credentials: The request succeeds if the credentials that you pass in the tuple to are valid. When you pass your credentials in a tuple to the parameter, Requests applies the credentials using HTTP’s Basic access authentication scheme under the hood. You may wonder where the string that Requests set as the value for your header comes from. In short, it’s a Base64-encoded string of the username and password with the prefix :\n• First, Requests combines the username and password that you provided, putting a colon in between them. So for the username and password , this becomes .\n• Then, Requests encodes this string in Base64 using . The encoding converts the string to .\n• Finally, Requests adds in front of this Base64 string. This is how the final value for the header becomes in the example shown above. HTTP Basic authentication isn’t very secure, because you can decode the username and password from the Base64 string. That’s why it’s important to always send these requests over HTTPS, which provides an additional layer of security by encrypting the entire HTTP request. You could make the same request by passing explicit Basic authentication credentials using : Though you don’t need to be explicit for Basic authentication, you may want to authenticate using another method. Requests provides other methods of authentication out of the box, such as and . A real-world example of an API that requires authentication is GitHub’s authenticated user API. This endpoint provides information about the authenticated user’s profile. If you try to make a request without credentials, then you’ll see that the status code is : If you don’t provide authentication credentials when accessing a service that requires them, then you’ll get an HTTP error code as a response. To make a request to GitHub’s authenticated user API, you first need to generate a personal access token with the read:user scope. Then you can pass this token as the second element in a tuple to : Like you learned previously, this approach passes the credentials to , which expects a username and a password and sends the credentials as a Base64-encoded string with the prefix : This works, but it’s not the right way to authenticate with a Bearer token—and using an empty string input for the superfluous username is awkward. With Requests, you can supply your own authentication mechanism to fix that. To try this out, create a subclass of and implement : \"\"\"Attach an API token to the Authorization header.\"\"\" Here, your custom mechanism receives a token, then includes that token in the header of your request, also setting the recommended prefix to the string. You can now use this custom token authentication to make your call to GitHub’s authenticated user API: Your custom created a well-formatted string for the header. You can now use this more intuitive way of interacting with a token-based authentication scheme such as the one that parts of GitHub’s API require. Note: While you could construct the authentication string outside of a custom authentication class and pass it directly with , this appoach is discouraged because it can lead to unexpected behavior. When you attempt to set your authentication credentials directly using , then Requests may internally overwrite your input. This can happen, for example, if you have a file that provides authentication credentials. Requests will attempt to get the credentials from the file if you don’t provide an authentication method using . Bad authentication mechanisms can lead to security vulnerabilities. Unless a service requires a custom authentication mechanism for some reason, you’ll always want to use a tried-and-true auth scheme like the built-in Basic authentication or OAuth, for example through Requests-OAuthlib. While you’re thinking about security, consider dealing with SSL certificates using Requests.\n\nAnytime the data that you’re trying to send or receive is sensitive, security is important. The way that you communicate with secure sites over HTTP is by establishing an encrypted connection using SSL, which means that verifying the target server’s SSL certificate is critical. The good news is that Requests does this for you by default. However, there are some cases where you might want to change this behavior. If you want to disable SSL certificate verification, then you pass to the parameter of the request function: InsecureRequestWarning: Unverified HTTPS request is being made to host Requests even warns you when you’re making an insecure request to help you keep your data safe! Note: Requests uses a package called to provide certificate authorities. This lets Requests know which authorities it can trust. Therefore, you should update frequently to keep your connections as secure as possible. Now that you know how to make all sorts of HTTP requests using Requests, authenticated or not, you may wonder about how you can make sure that your program works as quickly as possible. In the next section, you’ll learn about a few ways that you can improve performance with the help of Requests.\n\nWhen using Requests, especially in a production application environment, it’s important to consider performance implications. Features like timeout control, sessions, and retry limits can help you keep your application running smoothly. When you make an inline request to an external service, your system will need to wait for the response before moving on. If your application waits too long for that response, requests to your service could back up, your user experience could suffer, or your background jobs could hang. By default, Requests will wait indefinitely on the response, so you should almost always specify a timeout duration to prevent these issues from happening. To set the request’s timeout, use the parameter. can be an integer or float representing the number of seconds to wait on a response before timing out: In the first request, the request will time out after 1 second. In the second request, the request will time out after 3.05 seconds. You can also pass a tuple to with the following two elements:\n• Connect timeout: The time it allows for the client to establish a connection to the server\n• Read timeout: The time it’ll wait on a response once your client has established a connection Both of these elements should be numbers, and can be of type or : If the request establishes a connection within 3.05 seconds and receives data within 5 seconds of the connection being established, then the response will be returned as it was before. If the request times out, then the function will raise a exception: \"The request did not time out\" Your program can catch the exception and respond accordingly. Until now, you’ve been dealing with high-level APIs such as and . These functions are abstractions of what’s going on when you make your requests. They hide implementation details, such as how connections are managed, so that you don’t have to worry about them. Underneath those abstractions is a class called . If you need to fine-tune your control over how requests are being made or improve the performance of your requests, you may need to use a instance directly. Sessions are used to persist parameters across requests. For example, if you want to use the same authentication across multiple requests, then you can use a session: In this code example, you use a context manager to ensure that the session releases the resources when it doesn’t need them anymore. In line 7, you log in using your custom . You only need to log in once per session, and then you can make multiple authenticated requests. Requests will persist the credentials while the session exists. You then make two requests to the authenticated user API in lines 9 and 10 using instead of . The primary performance optimization of sessions comes in the form of persistent connections. When your app makes a connection to a server using a , it keeps that connection around in a connection pool. When your app wants to connect to the same server again, it’ll reuse a connection from the pool rather than establishing a new one. When a request fails, you may want your application to retry the same request. However, Requests won’t do this for you by default. To apply this functionality, you need to implement a custom transport adapter. Transport adapters let you define a set of configurations for each service that you’re interacting with. For example, say you want all requests to to retry two times before finally raising a . You’d build a transport adapter, set its parameter, and mount it to an existing : In this example, you’ve set up your session so that it’ll retry a maximum of two times when your request to GitHub’s API doesn’t work as expected. When you mount the —in this case, —to , then will adhere to its configuration for each request to . Note: While the implementation shown above works, you won’t see any effect of the retry behavior unless there’s something wrong with your network connection or GitHub’s servers. If you want to play around with code that builds on top of this example, and you’d like to inspect when the retries happen, then you’re in luck. You can download the materials of this tutorial and take a look at : Get Your Code: Click here to download the free sample code that shows you how to use Python’s Requests library. The code in this file improves on the example shown above by using the underlying to further customize the retry functionality. It also adds logging to display debugging output, which gives you a chance to monitor when Python attempted the retries. Requests comes packaged with intuitive implementations for timeouts, transport adapters, and sessions that can help you keep your code efficient and your application resilient."
    },
    {
        "link": "https://3.python-requests.org/user/quickstart",
        "document": "Eager to get started? This page gives a good introduction in how to get started with Requests.\n\nFirst, make sure that:\n\nLet’s get started with some simple examples.\n\nMaking a request with Requests is very simple. Now, let’s try to get a webpage. For this example, let’s get GitHub’s public timeline: Now, we have a object called . We can get all the information we need from this object. Requests’ simple API means that all forms of HTTP request are as obvious. For example, this is how you make an HTTP POST request: Nice, right? What about the other HTTP request types: PUT, DELETE, HEAD and OPTIONS? These are all just as simple: That’s all well and good, but it’s also only the start of what Requests can do.\n\nYou often want to send some sort of data in the URL’s query string. If you were constructing the URL by hand, this data would be given as key/value pairs in the URL after a question mark, e.g. . Requests allows you to provide these arguments as a dictionary of strings, using the keyword argument. As an example, if you wanted to pass and to , you would use the following code: You can see that the URL has been correctly encoded by printing the URL: Note that any dictionary key whose value is will not be added to the URL’s query string. You can also pass a list of items as a value:\n\nWe can read the content of the server’s response. Consider the GitHub timeline again: Requests will automatically decode content from the server. Most unicode charsets are seamlessly decoded. When you make a request, Requests makes educated guesses about the encoding of the response based on the HTTP headers. The text encoding guessed by Requests is used when you access . You can find out what encoding Requests is using, and change it, using the property: If you change the encoding, Requests will use the new value of whenever you call . You might want to do this in any situation where you can apply special logic to work out what the encoding of the content will be. For example, HTML and XML have the ability to specify their encoding in their body. In situations like this, you should use to find the encoding, and then set . This will let you use with the correct encoding. Requests will also use custom encodings in the event that you need them. If you have created your own encoding and registered it with the module, you can simply use the codec name as the value of and Requests will handle the decoding for you.\n\nThere’s also a builtin JSON decoder, in case you’re dealing with JSON data: In case the JSON decoding fails, raises an exception. For example, if the response gets a 204 (No Content), or if the response contains invalid JSON, attempting raises ValueError: No JSON object could be decoded . It should be noted that the success of the call to does not indicate the success of the response. Some servers may return a JSON object in a failed response (e.g. error details with HTTP 500). Such JSON will be decoded and returned. To check that a request is successful, use or check is what you expect.\n\nIn the rare case that you’d like to get the raw socket response from the server, you can access . If you want to do this, make sure you set in your initial request. Once you do, you can do this: In general, however, you should use a pattern like this to save what is being streamed to a file: Using will handle a lot of what you would otherwise have to handle when using directly. When streaming a download, the above is the preferred and recommended way to retrieve the content. Note that can be freely adjusted to a number that may better fit your use cases. An important note about using versus . will automatically decode the and transfer-encodings. is a raw stream of bytes – it does not transform the response content. If you really need access to the bytes as they were returned, use .\n\nTypically, you want to send some form-encoded data — much like an HTML form. To do this, simply pass a dictionary to the argument. Your dictionary of data will automatically be form-encoded when the request is made: The argument can also have multiple values for each key. This can be done by making either a list of tuples or a dictionary with lists as values. This is particularly useful when the form has multiple elements that use the same key: There are times that you may want to send data that is not form-encoded. If you pass in a instead of a , that data will be posted directly. For example, the GitHub API v3 accepts JSON-Encoded POST/PATCH data: Instead of encoding the yourself, you can also pass it directly using the parameter (added in version 2.4.2) and it will be encoded automatically: Note, the parameter is ignored if either or is passed. Using the parameter in the request will change the in the header to .\n\nYou can set the filename, content_type and headers explicitly: If you want, you can send strings to be received as files: In the event you are posting a very large file as a request, you may want to stream the request. By default, does not support this, but there is a separate package which does - . You should read the toolbelt’s documentation for more details about how to use it. For sending multiple files in one request refer to the advanced section. It is strongly recommended that you open files in binary mode. This is because Requests may attempt to provide the header for you, and if it does this value will be set to the number of bytes in the file. Errors may occur if you open the file in text mode.\n\nWe can view the server’s response headers using a Python dictionary: The dictionary is special, though: it’s made just for HTTP headers. According to RFC 7230, HTTP Header names are case-insensitive. So, we can access the headers using any capitalization we want: It is also special in that the server could have sent the same header multiple times with different values, but requests combines them so they can be represented in the dictionary within a single mapping, as per RFC 7230: A recipient MAY combine multiple header fields with the same field name into one “field-name: field-value” pair, without changing the semantics of the message, by appending each subsequent field value to the combined field value in order, separated by a comma. If you do need to access each individual value sent with the same header, then you can use the method to get a sequence of all the values returned for a particular header.\n\nIn the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a exception. will raise an if the HTTP request returned an unsuccessful status code. If a request times out, a exception is raised. If a request exceeds the configured number of maximum redirections, a exception is raised. All exceptions that Requests explicitly raises inherit from . Ready for more? Check out the advanced section. If you’re on the job market, consider taking this programming quiz. A substantial donation will be made to this project, if you find a job through this platform."
    },
    {
        "link": "https://apidog.com/blog/python-requests-response",
        "document": "Handling API requests and responses in Python can be a game-changer for your projects. Whether you're building a web application, a mobile app, or even a simple script, understanding how to interact with APIs is crucial. In this comprehensive guide, we'll dive deep into the world of Python requests and responses, giving you the tools you need to become an API master. And hey, don't forget to download Apidog for free - it will make your API development and testing a breeze!\n\nFirst things first, let's talk about what an API is. API stands for Application Programming Interface. It's a set of rules that allows different software entities to communicate with each other. Think of it as a waiter taking your order (your request) and bringing back your food (the response). APIs are everywhere – from weather apps to social media platforms.\n\nAPIs allow developers to access the functionality of other software programs. This can range from simple tasks, like fetching data from a web server, to more complex operations, like interacting with a machine learning model hosted on a cloud service.\n\nUsing APIs can save you a lot of time and effort. Instead of reinventing the wheel, you can leverage existing services and data. Plus, it allows your applications to be more versatile and integrated.\n\nBefore we dive in, here are some key terms you should know:\n• Endpoint: The URL where the API can be accessed.\n• Request: The message sent to the API to perform an action.\n• Response: The message the API sends back with the result of the request.\n• Status Code: A code that indicates the result of the request (e.g., 200 for success, 404 for not found).\n\nPython's library is a powerful tool for making HTTP requests. It's simple, yet very flexible, allowing you to interact with APIs effortlessly. Let's get started with installing the library.\n\nNow that we have the library installed, let's move on to making our first API request.\n\nTo make an API request, you'll need an API endpoint. For this example, we'll use the JSONPlaceholder API, a free fake online REST API for testing and prototyping.\n\nHere's a simple example of how to make a GET request:\n\nIn this example, we're sending a GET request to the endpoint. The function sends the request, and the response is stored in the variable. We then print the status code and the JSON response.\n\nThe response object contains all the information returned by the server. Here are some useful properties of the response object:\n• : The HTTP status code returned by the server.\n• : A method that parses the response body as JSON.\n\nSometimes, you'll need to send data to the API. This is where POST requests come in. Here's an example:\n\nIn this example, we're sending a POST request to the endpoint with some JSON data. The function sends the request, and the response is handled similarly to the GET request.\n\nNow that we've made some requests, let's talk about handling the responses. It's important to check the status code to ensure the request was successful.\n\nHere's a simple example of how to check the status code:\n\nIn this example, we're checking if the status code is , which indicates success. If the request was successful, we print the JSON response. Otherwise, we print an error message with the status code.\n\nMost APIs return data in JSON format. The method makes it easy to parse the JSON data. Here's an example:\n\nIn this example, we're parsing the JSON response and printing the and fields.\n\nError handling is crucial when working with APIs. You need to be prepared for various scenarios, such as network issues, invalid endpoints, and server errors.\n\nNetwork errors can occur when the server is unreachable or the connection is lost. The library provides built-in support for handling these errors using exceptions.\n\nIn this example, we're using a try-except block to catch different types of errors. The method raises an HTTPError if the status code is not 200.\n\nServer errors (status codes 500-599) indicate a problem on the server side. Here's an example of how to handle server errors:\n\nIn this example, we're checking if the status code is in the 500 range, which indicates a server error. We're also handling 404 (Not Found) and 400 (Bad Request) errors.\n\nNow that we've covered the basics, let's explore some advanced tips and tricks to make your life easier when working with APIs in Python.\n\nQuery parameters allow you to pass data to the API as part of the URL. Here's an example:\n\nIn this example, we're passing a parameter to the endpoint. The parameter of the function takes a dictionary of query parameters.\n\nHeaders are used to send additional information with the request. Here's an example:\n\nIn this example, we're setting the header to . The parameter of the function takes a dictionary of headers.\n\nMany APIs require authentication. The library supports various authentication methods, including Basic Auth and OAuth. Here's an example of how to use Basic Auth:\n\nIn this example, we're using Basic Auth to authenticate with the API. The parameter of the function takes an instance of .\n\nHow to Test Your Python POST Request\n\nApidog is a powerful tool for testing APIs. It allows you to create and save API requests, organize them into collections, and share them with your team.\n\nHere is how you can use Apidog to test your POST request:\n\n3. Enter the URL of the resource you want to update. Add any additional headers or parameters you want to include then click the “Send” button to send the request.\n\n4. Verify that the response is what you expected.\n\nIn this guide, we've covered the essentials of handling API requests and responses in Python. We've looked at making GET and POST requests, handling responses, and dealing with errors. We've also explored some advanced tips and tricks to make your life easier. Remember, APIs are a powerful tool that can open up a world of possibilities for your projects. So go ahead, experiment, and start building amazing things!\n\nAnd don't forget to download Apidog for free to streamline your API development and testing. Happy coding!"
    },
    {
        "link": "https://crummy.com/software/BeautifulSoup/bs4/doc",
        "document": "Beautiful Soup transforms a complex HTML document into a complex tree of Python objects. But you'll only ever have to deal with about four kinds of objects: , , , and . These objects represent the HTML elements that comprise the page. A object corresponds to an XML or HTML tag in the original document. Tags have a lot of attributes and methods, and I'll cover most of them in Navigating the tree and Searching the tree. For now, the most important methods of a tag are for accessing its name and attributes. If you change a tag's name, the change will be reflected in any markup generated by Beautiful Soup down the line: An HTML or XML tag may have any number of attributes. The tag has an attribute \"id\" whose value is \"boldest\". You can access a tag's attributes by treating the tag like a dictionary: You can access the dictionary of attributes directly as : You can add, remove, and modify a tag's attributes. Again, this is done by treating the tag as a dictionary: HTML 4 defines a few attributes that can have multiple values. HTML 5 removes a couple of them, but defines a few more. The most common multi-valued attribute is (that is, a tag can have more than one CSS class). Others include , , , , and . By default, Beautiful Soup stores the value(s) of a multi-valued attribute as a list: When you turn a tag back into a string, the values of any multi-valued attributes are consolidated: If an attribute looks like it has more than one value, but it's not a multi-valued attribute as defined by any version of the HTML standard, Beautiful Soup stores it as a simple string: You can force all attributes to be stored as strings by passing as a keyword argument into the constructor: You can use to always return the value in a list container, whether it's a string or multi-valued attribute value: If you parse a document as XML, there are no multi-valued attributes: Again, you can configure this using the argument: You probably won't need to do this, but if you do, use the defaults as a guide. They implement the rules described in the HTML specification: A tag can contain strings as pieces of text. Beautiful Soup uses the class to contain these pieces of text: A is just like a Python Unicode string, except that it also supports some of the features described in Navigating the tree and Searching the tree. You can convert a to a Unicode string with : You can't edit a string in place, but you can replace one string with another, using replace_with(): supports most of the features described in Navigating the tree and Searching the tree, but not all of them. In particular, since a string can't contain anything (the way a tag may contain a string or another tag), strings don't support the or attributes, or the method. If you want to use a outside of Beautiful Soup, you should call on it to turn it into a normal Python Unicode string. If you don't, your string will carry around a reference to the entire Beautiful Soup parse tree, even when you're done using Beautiful Soup. This is a big waste of memory. The object represents the parsed document as a whole. For most purposes, you can treat it as a object. This means it supports most of the methods described in Navigating the tree and Searching the tree. You can also pass a object into one of the methods defined in Modifying the tree, just as you would a . This lets you do things like combine two parsed documents: Since the object doesn't correspond to an actual HTML or XML tag, it has no name and no attributes. But sometimes it's useful to reference its (such as when writing code that works with both and objects), so it's been given the special \"[document]\": , , and cover almost everything you'll see in an HTML or XML file, but there are a few leftover bits. The main one you'll probably encounter is the . \"<b><!--Hey, buddy. Want to buy a used parser?--></b>\" The object is just a special type of : # 'Hey, buddy. Want to buy a used parser' But when it appears as part of an HTML document, a is displayed with special formatting: # <!--Hey, buddy. Want to buy a used parser?--> Beautiful Soup defines a few subclasses to contain strings found inside specific HTML tags. This makes it easier to pick out the main body of the page, by ignoring strings that probably represent programming directives found within the page. (These classes are new in Beautiful Soup 4.9.0, and the html5lib parser doesn't use them.) A subclass that represents embedded CSS stylesheets; that is, any strings found inside a tag during document parsing. A subclass that represents embedded Javascript; that is, any strings found inside a tag during document parsing. A subclass that represents embedded HTML templates; that is, any strings found inside a tag during document parsing. Beautiful Soup defines some classes for holding special types of strings that can be found in XML documents. Like , these classes are subclasses of that add something extra to the string on output. A subclass representing the declaration at the beginning of an XML document. A subclass representing the document type declaration which may be found near the beginning of an XML document. A subclass that represents the contents of an XML processing instruction.\n\nHere's the \"Three sisters\" HTML document again: <p class=\"story\">Once upon a time there were three little sisters; and their names were and they lived at the bottom of a well.</p> I'll use this as an example to show you how to move from one part of a document to another. Tags may contain strings and more tags. These elements are the tag's children. Beautiful Soup provides a lot of different attributes for navigating and iterating over a tag's children. Note that Beautiful Soup strings don't support any of these attributes, because a string can't have children. The simplest way to navigate the parse tree is to find a tag by name. To do this, you can use the method: For convenience, just saying the name of the tag you want is equivalent to (if no built-in attribute has that name). If you want the <head> tag, just say : You can use this trick again and again to zoom in on a certain part of the parse tree. This code gets the first <b> tag beneath the <body> tag: (and its convenience equivalent) gives you only the first tag by that name: If you need to get all the <a> tags, you can use : For more complicated tasks, such as pattern-matching and filtering, you can use the methods described in Searching the tree. A tag's children are available in a list called : The object itself has children. In this case, the <html> tag is the child of the object.: A string does not have , because it can't contain anything: Instead of getting them as a list, you can iterate over a tag's children using the generator: If you want to modify a tag's children, use the methods described in Modifying the tree. Don't modify the the list directly: that can lead to problems that are subtle and difficult to spot. The and attributes consider only a tag's direct children. For instance, the <head> tag has a single direct child—the <title> tag: But the <title> tag itself has a child: the string \"The Dormouse's story\". There's a sense in which that string is also a child of the <head> tag. The attribute lets you iterate over all of a tag's children, recursively: its direct children, the children of its direct children, and so on: The <head> tag has only one child, but it has two descendants: the <title> tag and the <title> tag's child. The object only has one direct child (the <html> tag), but it has a whole lot of descendants: If a tag has only one child, and that child is a , the child is made available as : If a tag's only child is another tag, and that tag has a , then the parent tag is considered to have the same as its child: If a tag contains more than one thing, then it's not clear what should refer to, so is defined to be : If there's more than one thing inside a tag, you can still look at just the strings. Use the generator to see all descendant strings: # 'Once upon a time there were three little sisters; and their names were\n\n' # ';\n\nand they lived at the bottom of a well.' Newlines and spaces that separate tags are also strings. You can remove extra whitespace by using the generator instead: # 'Once upon a time there were three little sisters; and their names were' # ';\n\n and they lived at the bottom of a well.' Here, strings consisting entirely of whitespace are ignored, and whitespace at the beginning and end of strings is removed. Continuing the \"family tree\" analogy, every tag and every string has a parent: the tag that contains it. You can access an element's parent with the attribute. In the example \"three sisters\" document, the <head> tag is the parent of the <title> tag: The title string itself has a parent: the <title> tag that contains it: The parent of a top-level tag like <html> is the object itself: And the of a object is defined as None: You can iterate over all of an element's parents with . This example uses to travel from an <a> tag buried deep within the document, to the very top of the document: The generator is a variant of which gives you the entire ancestry of an element, including the element itself: Consider a simple document like this: The <b> tag and the <c> tag are at the same level: they're both direct children of the same tag. We call them siblings. When a document is pretty-printed, siblings show up at the same indentation level. You can also use this relationship in the code you write. You can use and to navigate between page elements that are on the same level of the parse tree: The <b> tag has a , but no , because there's nothing before the <b> tag on the same level of the tree. For the same reason, the <c> tag has a but no : The strings \"text1\" and \"text2\" are not siblings, because they don't have the same parent: In real documents, the or of a tag will usually be a string containing whitespace. Going back to the \"three sisters\" document: You might think that the of the first <a> tag would be the second <a> tag. But actually, it's a string: the comma and newline that separate the first <a> tag from the second: The second <a> tag is then the of the comma string: You can iterate over a tag's siblings with or : # '; and they lived at the bottom of a well.' # 'Once upon a time there were three little sisters; and their names were\n\n' Take a look at the beginning of the \"three sisters\" document: An HTML parser takes this string of characters and turns it into a series of events: \"open an <html> tag\", \"open a <head> tag\", \"open a <title> tag\", \"add a string\", \"close the <title> tag\", \"open a <p> tag\", and so on. The order in which the opening tags and strings are encountered is called document order. Beautiful Soup offers tools for searching a document's elements in document order. The attribute of a string or tag points to whatever was parsed immediately after the opening of the current tag or after the current string. It might be the same as , but it's usually drastically different. Here's the final <a> tag in the \"three sisters\" document. Its is a string: the conclusion of the sentence that was interrupted by the start of the <a> tag: # ';\n\nand they lived at the bottom of a well.' But the of that <a> tag, the thing that was parsed immediately after the <a> tag, is not the rest of that sentence: it's the string \"Tillie\" inside it: That's because in the original markup, the word \"Tillie\" appeared before that semicolon. The parser encountered an <a> tag, then the word \"Tillie\", then the closing </a> tag, then the semicolon and rest of the sentence. The semicolon is on the same level as the <a> tag, but the word \"Tillie\" was encountered first. The attribute is the exact opposite of . It points to the opening tag or string that was parsed immediately before this one: You should get the idea by now. You can use these iterators to move forward or backward in the document as it was parsed: # ';\n\nand they lived at the bottom of a well.'\n\nBeautiful Soup's main strength is in searching the parse tree, but you can also modify the tree and write your changes as a new HTML or XML document. I covered this earlier, in , but it bears repeating. You can rename a tag, change the values of its attributes, add new attributes, and delete attributes: If you set a tag's attribute to a new string, the tag's contents are replaced with that string: Be careful: if the tag contained other tags, they and all their contents will be destroyed. You can add to a tag's contents with . It works just like calling on a Python list: Starting in Beautiful Soup 4.7.0, also supports a method called , which adds every element of a list to a , in order: If you need to add a string to a document, no problem—you can pass a Python string in to , or you can call the constructor: If you want to create a comment or some other subclass of , just call the constructor: # ['Hello', ' there', 'Nice to see you.'] What if you need to create a whole new tag? The best solution is to call the factory method : Only the first argument, the tag name, is required. Because insertion methods return the newly inserted element, you can create, insert, and obtain an element in one step: is just like , except the new element doesn't necessarily go at the end of its parent's . It will be inserted at whatever numeric position you say, similar to on a Python list: # <a href=\"http://example.com/\">I linked to but did not endorse <i>example.com</i></a> # ['I linked to ', 'but did not endorse ', <i>example.com</i>] You can pass more than one element into . All the elements will be inserted, starting at the numeric position you provide. The method inserts tags or strings immediately before something else in the parse tree: The method inserts tags or strings immediately after something else in the parse tree: Both methods return the list of newly inserted elements. removes a tag or string from the tree. It returns the tag or string that was extracted: At this point you effectively have two parse trees: one rooted at the object you used to parse the document, and one rooted at the tag that was extracted. You can go on to call on a child of the element you extracted: removes a tag from the tree, then completely destroys it and its contents: The behavior of a decomposed or is not defined and you should not use it for anything. If you're not sure whether something has been decomposed, you can check its property (new in Beautiful Soup 4.9.0): extracts a tag or string from the tree, then replaces it with one or more tags or strings of your choice: returns the tag or string that got replaced, so that you can examine it or add it back to another part of the tree. The ability to pass multiple arguments into replace_with() is new in Beautiful Soup 4.10.0. wraps an element in the object you specify. It returns the new wrapper: This method is new in Beautiful Soup 4.0.5. is the opposite of . It replaces a tag with whatever's inside that tag. It's good for stripping out markup: Like , returns the tag that was replaced. After calling a bunch of methods that modify the parse tree, you may end up with two or more objects next to each other. Beautiful Soup doesn't have any problems with this, but since it can't happen in a freshly parsed document, you might not expect behavior like the following: You can call to clean up the parse tree by consolidating adjacent strings: This method is new in Beautiful Soup 4.8.0.\n\nAny HTML or XML document is written in a specific encoding like ASCII or UTF-8. But when you load that document into Beautiful Soup, you'll discover it's been converted to Unicode: It's not magic. (That sure would be nice.) Beautiful Soup uses a sub-library called Unicode, Dammit to detect a document's encoding and convert it to Unicode. The autodetected encoding is available as the attribute of the object: If is , that means the document was already Unicode when it was passed into Beautiful Soup: Unicode, Dammit guesses correctly most of the time, but sometimes it makes mistakes. Sometimes it guesses correctly, but only after a byte-by-byte search of the document that takes a very long time. If you happen to know a document's encoding ahead of time, you can avoid mistakes and delays by passing it to the constructor as . Here's a document written in ISO-8859-8. The document is so short that Unicode, Dammit can't get a lock on it, and misidentifies it as ISO-8859-7: We can fix this by passing in the correct : If you don't know what the correct encoding is, but you know that Unicode, Dammit is guessing wrong, you can pass the wrong guesses in as : Windows-1255 isn't 100% correct, but that encoding is a compatible superset of ISO-8859-8, so it's close enough. ( is a new feature in Beautiful Soup 4.4.0.) In rare cases (usually when a UTF-8 document contains text written in a completely different encoding), the only way to get Unicode may be to replace some characters with the special Unicode character \"REPLACEMENT CHARACTER\" (U+FFFD, �). If Unicode, Dammit needs to do this, it will set the attribute to on the or object. This lets you know that the Unicode representation is not an exact representation of the original—some data was lost. If a document contains �, but is , you'll know that the � was there originally (as it is in this paragraph) and doesn't stand in for missing data. When you write out an output document from Beautiful Soup, you get a UTF-8 document, even if the input document wasn't in UTF-8 to begin with. Here's a document written in the Latin-1 encoding: Note that the <meta> tag has been rewritten to reflect the fact that the document is now in UTF-8. If you don't want UTF-8, you can pass an encoding into : You can also call encode() on the object, or any element in the soup, just as if it were a Python string: Any characters that can't be represented in your chosen encoding will be converted into numeric XML entity references. Here's a document that includes the Unicode character SNOWMAN: The SNOWMAN character can be part of a UTF-8 document (it looks like ☃), but there's no representation for that character in ISO-Latin-1 or ASCII, so it's converted into \"☃\" for those encodings: You can use Unicode, Dammit without using Beautiful Soup. It's useful whenever you have data in an unknown encoding and you just want it to become Unicode: Unicode, Dammit's guesses will get a lot more accurate if you install one of these Python libraries: , , or . The more data you give Unicode, Dammit, the more accurately it will guess. If you have your own suspicions as to what the encoding might be, you can pass them in as a list: Unicode, Dammit has two special features that Beautiful Soup doesn't use. You can use Unicode, Dammit to convert Microsoft smart quotes to HTML or XML entities: You can also convert Microsoft smart quotes to ASCII quotes: Hopefully you'll find this feature useful, but Beautiful Soup doesn't use it. Beautiful Soup prefers the default behavior, which is to convert Microsoft smart quotes to Unicode characters along with everything else: Sometimes a document is mostly in UTF-8, but contains Windows-1252 characters such as (again) Microsoft smart quotes. This can happen when a website includes data from multiple sources. You can use to turn such a document into pure UTF-8. Here's a simple example: This document is a mess. The snowmen are in UTF-8 and the quotes are in Windows-1252. You can display the snowmen or the quotes, but not both: Decoding the document as UTF-8 raises a , and decoding it as Windows-1252 gives you gibberish. Fortunately, will convert the string to pure UTF-8, allowing you to decode it to Unicode and display the snowmen and quote marks simultaneously: only knows how to handle Windows-1252 embedded in UTF-8 (or vice versa, I suppose), but this is the most common case. Note that you must know to call on your data before passing it into or the constructor. Beautiful Soup assumes that a document has a single encoding, whatever it might be. If you pass it a document that contains both UTF-8 and Windows-1252, it's likely to think the whole document is Windows-1252, and the document will come out looking like . is new in Beautiful Soup 4.1.0.\n\nIf you're having trouble understanding what Beautiful Soup does to a document, pass the document into the function. (This function is new in Beautiful Soup 4.2.0.) Beautiful Soup will print out a report showing you how different parsers handle the document, and tell you if you're missing a parser that Beautiful Soup could be using: # I noticed that html5lib is not installed. Installing it may help. # Trying to parse your data with html.parser # Here's what html.parser did with the document: Just looking at the output of diagnose() might show you how to solve the problem. Even if not, you can paste the output of when asking for help. There are two different kinds of parse errors. There are crashes, where you feed a document to Beautiful Soup and it raises an exception (usually an ). And there is unexpected behavior, where a Beautiful Soup parse tree looks a lot different than the document used to create it. These problems are almost never problems with Beautiful Soup itself. This is not because Beautiful Soup is an amazingly well-written piece of software. It's because Beautiful Soup doesn't include any parsing code. Instead, it relies on external parsers. If one parser isn't working on a certain document, the best solution is to try a different parser. See Installing a parser for details and a parser comparison. If this doesn't help, you might need to inspect the document tree found inside the object, to see where the markup you're looking for actually ended up.\n• None (on the line ): Caused by running an old Python 2 version of Beautiful Soup under Python 3, without converting the code.\n• None - Caused by running an old Python 2 version of Beautiful Soup under Python 3.\n• None - Caused by running the Python 3 version of Beautiful Soup under Python 2.\n• None - Caused by running Beautiful Soup 3 code in an environment that doesn't have BS3 installed. Or, by writing Beautiful Soup 4 code without knowing that the package name has changed to .\n• None - Caused by running Beautiful Soup 4 code in an environment that doesn't have BS4 installed. By default, Beautiful Soup parses documents as HTML. To parse a document as XML, pass in \"xml\" as the second argument to the constructor: You'll need to have lxml installed.\n• None If your script works on one computer but not another, or in one virtual environment but not another, or outside the virtual environment but not inside, it's probably because the two environments have different parser libraries available. For example, you may have developed the script on a computer that has lxml installed, and then tried to run it on a computer that only has html5lib installed. See Differences between parsers for why this matters, and fix the problem by mentioning a specific parser library in the constructor.\n• None Because HTML tags and attributes are case-insensitive, all three HTML parsers convert tag and attribute names to lowercase. That is, the markup <TAG></TAG> is converted to <tag></tag>. If you want to preserve mixed-case or uppercase tags and attributes, you'll need to parse the document as XML.\n• None (or just about any other ) - This problem shows up in two main situations. First, when you try to print a Unicode character that your console doesn't know how to display. (See this page on the Python wiki for help.) Second, when you're writing to a file and you pass in a Unicode character that's not supported by your default encoding. In this case, the simplest solution is to explicitly encode the Unicode string into UTF-8 with .\n• None - Caused by accessing when the tag in question doesn't define the attribute. The most common errors are and . Use if you're not sure is defined, just as you would with a Python dictionary.\n• None - This usually happens because you expected to return a single tag or string. But returns a list of tags and strings—a object. You need to iterate over the list and look at the of each one. Or, if you really only want one result, you need to use instead of .\n• None - This usually happens because you called and then tried to access the attribute of the result. But in your case, didn't find anything, so it returned , instead of returning a tag or a string. You need to figure out why your call isn't returning anything.\n• None - This usually happens because you're treating a string as though it were a tag. You may be iterating over a list, expecting that it contains nothing but tags, when it actually contains both tags and strings. Beautiful Soup will never be as fast as the parsers it sits on top of. If response time is critical, if you're paying for computer time by the hour, or if there's any other reason why computer time is more valuable than programmer time, you should forget about Beautiful Soup and work directly atop lxml. That said, there are things you can do to speed up Beautiful Soup. If you're not using lxml as the underlying parser, my advice is to start. Beautiful Soup parses documents significantly faster using lxml than using html.parser or html5lib. You can speed up encoding detection significantly by installing the cchardet library. Parsing only part of a document won't save you much time parsing the document, but it can save a lot of memory, and it'll make searching the document much faster.\n\nBeautiful Soup 3 is the previous release series, and is no longer supported. Development of Beautiful Soup 3 stopped in 2012, and the package was completely discontinued in 2021. There's no reason to install it unless you're trying to get very old software to work, but it's published through PyPi as : You can also download a tarball of the final release, 3.2.2. If you ran or , but your code doesn't work, you installed Beautiful Soup 3 by mistake. You need to run . The documentation for Beautiful Soup 3 is archived online. Most code written against Beautiful Soup 3 will work against Beautiful Soup 4 with one simple change. All you should have to do is change the package name from to . So this:\n• None If you get the \"No module named BeautifulSoup\", your problem is that you're trying to run Beautiful Soup 3 code, but you only have Beautiful Soup 4 installed.\n• None If you get the \"No module named bs4\", your problem is that you're trying to run Beautiful Soup 4 code, but you only have Beautiful Soup 3 installed. Although BS4 is mostly backward-compatible with BS3, most of its methods have been deprecated and given new names for PEP 8 compliance. There are numerous other renames and changes, and a few of them break backward compatibility. Here's what you'll need to know to convert your BS3 code and habits to BS4: Beautiful Soup 3 used Python's , a module that was deprecated and removed in Python 3.0. Beautiful Soup 4 uses by default, but you can plug in lxml or html5lib and use that instead. See Installing a parser for a comparison. Since is not the same parser as , you may find that Beautiful Soup 4 gives you a different parse tree than Beautiful Soup 3 for the same markup. If you swap out for lxml or html5lib, you may find that the parse tree changes yet again. If this happens, you'll need to update your scraping code to process the new tree. I renamed three attributes to avoid using words that have special meaning to Python. Unlike my changes to method names (which you'll see in the form of deprecation warnings), these changes did not preserve backwards compatibility. If you used these attributes in BS3, your code will break in BS4 until you change them. Some of the generators used to yield after they were done, and then stop. That was a bug. Now the generators just stop. There is no longer a class for parsing XML. To parse XML you pass in \"xml\" as the second argument to the constructor. For the same reason, the constructor no longer recognizes the argument. Beautiful Soup's handling of empty-element XML tags has been improved. Previously when you parsed XML you had to explicitly say which tags were considered empty-element tags. The argument to the constructor is no longer recognized. Instead, Beautiful Soup considers any empty tag to be an empty-element tag. If you add a child to an empty-element tag, it stops being an empty-element tag. An incoming HTML or XML entity is always converted into the corresponding Unicode character. Beautiful Soup 3 had a number of overlapping ways of dealing with entities, which have been removed. The constructor no longer recognizes the or arguments. (Unicode, Dammit still has , but its default is now to turn smart quotes into Unicode.) The constants , , and have been removed, since they configure a feature (transforming some but not all entities into Unicode characters) that no longer exists. If you want to turn Unicode characters back into HTML entities on output, rather than turning them into UTF-8 characters, you need to use an output formatter. Tag.string now operates recursively. If tag A contains a single tag B and nothing else, then A.string is the same as B.string. (Previously, it was None.) Multi-valued attributes like have lists of strings as their values, not simple strings. This may affect the way you search by CSS class. objects now implement the method, such that two objects are considered equal if they generate the same markup. This may change your script's behavior if you put objects into a dictionary or set. If you pass one of the methods both string and a tag-specific argument like name, Beautiful Soup will search for tags that match your tag-specific criteria and whose Tag.string matches your string value. It will not find the strings themselves. Previously, Beautiful Soup ignored the tag-specific arguments and looked for strings. The constructor no longer recognizes the argument. It's now the parser's responsibility to handle markup correctly. The rarely-used alternate parser classes like and have been removed. It's now the parser's decision how to handle ambiguous markup. The method now returns a Unicode string, not a bytestring."
    },
    {
        "link": "https://beautiful-soup-4.readthedocs.io/en/latest",
        "document": "If you’re using a recent version of Debian or Ubuntu Linux, you can install Beautiful Soup with the system package manager: Beautiful Soup 4 is published through PyPi, so if you can’t install it with the system packager, you can install it with or . The package name is , and the same package works on Python 2 and Python 3. Make sure you use the right version of or for your Python version (these may be named and respectively if you’re using Python 3). If you don’t have or installed, you can download the Beautiful Soup 4 source tarball and install it with . If all else fails, the license for Beautiful Soup allows you to package the entire library with your application. You can download the tarball, copy its directory into your application’s codebase, and use Beautiful Soup without installing it at all. I use Python 2.7 and Python 3.2 to develop Beautiful Soup, but it should work with other recent versions. Beautiful Soup is packaged as Python 2 code. When you install it for use with Python 3, it’s automatically converted to Python 3 code. If you don’t install the package, the code won’t be converted. There have also been reports on Windows machines of the wrong version being installed. If you get the “No module named HTMLParser”, your problem is that you’re running the Python 2 version of the code under Python 3. If you get the “No module named html.parser”, your problem is that you’re running the Python 3 version of the code under Python 2. In both cases, your best bet is to completely remove the Beautiful Soup installation from your system (including any directory created when you unzipped the tarball) and try the installation again. If you get the “Invalid syntax” on the line , you need to convert the Python 2 code to Python 3. You can do this either by installing the package: or by manually running Python’s conversion script on the directory: Beautiful Soup supports the HTML parser included in Python’s standard library, but it also supports a number of third-party Python parsers. One is the lxml parser. Depending on your setup, you might install lxml with one of these commands: Another alternative is the pure-Python html5lib parser, which parses HTML the way a web browser does. Depending on your setup, you might install html5lib with one of these commands: This table summarizes the advantages and disadvantages of each parser library:\n• Lenient (As of Python 2.7.3 and 3.2.)\n• Not as fast as lxml, less lenient than html5lib.\n• The only currently supported XML parser\n• Parses pages the same way a web browser does If you can, I recommend you install and use lxml for speed. If you’re using a version of Python 2 earlier than 2.7.3, or a version of Python 3 earlier than 3.2.2, it’s that you install lxml or html5lib–Python’s built-in HTML parser is just not very good in older versions. Note that if a document is invalid, different parsers will generate different Beautiful Soup trees for it. See Differences between parsers for details.\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were and they lived at the bottom of a well.</p> I’ll use this as an example to show you how to move from one part of a document to another. Tags may contain strings and other tags. These elements are the tag’s . Beautiful Soup provides a lot of different attributes for navigating and iterating over a tag’s children. Note that Beautiful Soup strings don’t support any of these attributes, because a string can’t have children. The simplest way to navigate the parse tree is to say the name of the tag you want. If you want the <head> tag, just say : You can do use this trick again and again to zoom in on a certain part of the parse tree. This code gets the first <b> tag beneath the <body> tag: Using a tag name as an attribute will give you only the tag by that name: If you need to get the <a> tags, or anything more complicated than the first tag with a certain name, you’ll need to use one of the methods described in Searching the tree, such as : A tag’s children are available in a list called : The object itself has children. In this case, the <html> tag is the child of the object.: A string does not have , because it can’t contain anything: Instead of getting them as a list, you can iterate over a tag’s children using the generator: The and attributes only consider a tag’s children. For instance, the <head> tag has a single direct child–the <title> tag: But the <title> tag itself has a child: the string “The Dormouse’s story”. There’s a sense in which that string is also a child of the <head> tag. The attribute lets you iterate over of a tag’s children, recursively: its direct children, the children of its direct children, and so on: The <head> tag has only one child, but it has two descendants: the <title> tag and the <title> tag’s child. The object only has one direct child (the <html> tag), but it has a whole lot of descendants: If a tag has only one child, and that child is a , the child is made available as : If a tag’s only child is another tag, and tag has a , then the parent tag is considered to have the same as its child: If a tag contains more than one thing, then it’s not clear what should refer to, so is defined to be : If there’s more than one thing inside a tag, you can still look at just the strings. Use the generator: # u'Once upon a time there were three little sisters; and their names were\n\n' # u';\n\nand they lived at the bottom of a well.' These strings tend to have a lot of extra whitespace, which you can remove by using the generator instead: # u'Once upon a time there were three little sisters; and their names were' # u';\n\nand they lived at the bottom of a well.' Here, strings consisting entirely of whitespace are ignored, and whitespace at the beginning and end of strings is removed. Continuing the “family tree” analogy, every tag and every string has a : the tag that contains it. You can access an element’s parent with the attribute. In the example “three sisters” document, the <head> tag is the parent of the <title> tag: The title string itself has a parent: the <title> tag that contains it: The parent of a top-level tag like <html> is the object itself: And the of a object is defined as None: You can iterate over all of an element’s parents with . This example uses to travel from an <a> tag buried deep within the document, to the very top of the document: Consider a simple document like this: The <b> tag and the <c> tag are at the same level: they’re both direct children of the same tag. We call them . When a document is pretty-printed, siblings show up at the same indentation level. You can also use this relationship in the code you write. You can use and to navigate between page elements that are on the same level of the parse tree: The <b> tag has a , but no , because there’s nothing before the <b> tag on the same level of the tree . For the same reason, the <c> tag has a but no : The strings “text1” and “text2” are siblings, because they don’t have the same parent: In real documents, the or of a tag will usually be a string containing whitespace. Going back to the “three sisters” document: You might think that the of the first <a> tag would be the second <a> tag. But actually, it’s a string: the comma and newline that separate the first <a> tag from the second: The second <a> tag is actually the of the comma: You can iterate over a tag’s siblings with or : # u'; and they lived at the bottom of a well.' # u'Once upon a time there were three little sisters; and their names were\n\n' Take a look at the beginning of the “three sisters” document: An HTML parser takes this string of characters and turns it into a series of events: “open an <html> tag”, “open a <head> tag”, “open a <title> tag”, “add a string”, “close the <title> tag”, “open a <p> tag”, and so on. Beautiful Soup offers tools for reconstructing the initial parse of the document. The attribute of a string or tag points to whatever was parsed immediately afterwards. It might be the same as , but it’s usually drastically different. Here’s the final <a> tag in the “three sisters” document. Its is a string: the conclusion of the sentence that was interrupted by the start of the <a> tag.: # '; and they lived at the bottom of a well.' But the of that <a> tag, the thing that was parsed immediately after the <a> tag, is the rest of that sentence: it’s the word “Tillie”: That’s because in the original markup, the word “Tillie” appeared before that semicolon. The parser encountered an <a> tag, then the word “Tillie”, then the closing </a> tag, then the semicolon and rest of the sentence. The semicolon is on the same level as the <a> tag, but the word “Tillie” was encountered first. The attribute is the exact opposite of . It points to whatever element was parsed immediately before this one: You should get the idea by now. You can use these iterators to move forward or backward in the document as it was parsed: # u';\n\nand they lived at the bottom of a well.'\n\nBeautiful Soup defines a lot of methods for searching the parse tree, but they’re all very similar. I’m going to spend a lot of time explaining the two most popular methods: and . The other methods take almost exactly the same arguments, so I’ll just cover them briefly. Once again, I’ll be using the “three sisters” document as an example: <p class=\"story\">Once upon a time there were three little sisters; and their names were and they lived at the bottom of a well.</p> By passing in a filter to an argument like , you can zoom in on the parts of the document you’re interested in. Before talking in detail about and similar methods, I want to show examples of different filters you can pass into these methods. These filters show up again and again, throughout the search API. You can use them to filter based on a tag’s name, on its attributes, on the text of a string, or on some combination of these. The simplest filter is a string. Pass a string to a search method and Beautiful Soup will perform a match against that exact string. This code finds all the <b> tags in the document: If you pass in a byte string, Beautiful Soup will assume the string is encoded as UTF-8. You can avoid this by passing in a Unicode string instead. If you pass in a regular expression object, Beautiful Soup will filter against that regular expression using its method. This code finds all the tags whose names start with the letter “b”; in this case, the <body> tag and the <b> tag: This code finds all the tags whose names contain the letter ‘t’: If you pass in a list, Beautiful Soup will allow a string match against item in that list. This code finds all the <a> tags all the <b> tags: The value matches everything it can. This code finds the tags in the document, but none of the text strings: If none of the other matches work for you, define a function that takes an element as its only argument. The function should return if the argument matches, and otherwise. Here’s a function that returns if a tag defines the “class” attribute but doesn’t define the “id” attribute: Pass this function into and you’ll pick up all the <p> tags: This function only picks up the <p> tags. It doesn’t pick up the <a> tags, because those tags define both “class” and “id”. It doesn’t pick up tags like <html> and <title>, because those tags don’t define “class”. If you pass in a function to filter on a specific attribute like , the argument passed into the function will be the attribute value, not the whole tag. Here’s a function that finds all tags whose attribute does not match a regular expression: The function can be as complicated as you need it to be. Here’s a function that returns if a tag is surrounded by string objects: Now we’re ready to look at the search methods in detail. The method looks through a tag’s descendants and retrieves descendants that match your filters. I gave several examples in Kinds of filters, but here are a few more: # u'Once upon a time there were three little sisters; and their names were\n\n' Some of these should look familiar, but others are new. What does it mean to pass in a value for , or ? Why does find a <p> tag with the CSS class “title”? Let’s look at the arguments to . Pass in a value for and you’ll tell Beautiful Soup to only consider tags with certain names. Text strings will be ignored, as will tags whose names that don’t match. This is the simplest usage: Recall from Kinds of filters that the value to can be a string, a regular expression, a list, a function, or the value True. Any argument that’s not recognized will be turned into a filter on one of a tag’s attributes. If you pass in a value for an argument called , Beautiful Soup will filter against each tag’s ‘id’ attribute: If you pass in a value for , Beautiful Soup will filter against each tag’s ‘href’ attribute: You can filter an attribute based on a string, a regular expression, a list, a function, or the value True. This code finds all tags whose attribute has a value, regardless of what the value is: You can filter multiple attributes at once by passing in more than one keyword argument: Some attributes, like the data-* attributes in HTML 5, have names that can’t be used as the names of keyword arguments: # SyntaxError: keyword can't be an expression You can use these attributes in searches by putting them into a dictionary and passing the dictionary into as the argument: You can’t use a keyword argument to search for HTML’s ‘name’ element, because Beautiful Soup uses the argument to contain the name of the tag itself. Instead, you can give a value to ‘name’ in the argument: It’s very useful to search for a tag that has a certain CSS class, but the name of the CSS attribute, “class”, is a reserved word in Python. Using as a keyword argument will give you a syntax error. As of Beautiful Soup 4.1.2, you can search by CSS class using the keyword argument : As with any keyword argument, you can pass a string, a regular expression, a function, or : Remember that a single tag can have multiple values for its “class” attribute. When you search for a tag that matches a certain CSS class, you’re matching against of its CSS classes: You can also search for the exact string value of the attribute: But searching for variants of the string value won’t work: If you want to search for tags that match two or more CSS classes, you should use a CSS selector: In older versions of Beautiful Soup, which don’t have the shortcut, you can use the trick mentioned above. Create a dictionary whose value for “class” is the string (or regular expression, or whatever) you want to search for: With you can search for strings instead of tags. As with and the keyword arguments, you can pass in a string, a regular expression, a list, a function, or the value True. Here are some examples: \"\"\"Return True if this string is the only child of its parent tag.\"\"\" Although is for finding strings, you can combine it with arguments that find tags: Beautiful Soup will find all tags whose matches your value for . This code finds the <a> tags whose is “Elsie”: The argument is new in Beautiful Soup 4.4.0. In earlier versions it was called : returns all the tags and strings that match your filters. This can take a while if the document is large. If you don’t need the results, you can pass in a number for . This works just like the LIMIT keyword in SQL. It tells Beautiful Soup to stop gathering results after it’s found a certain number. There are three links in the “three sisters” document, but this code only finds the first two: If you call , Beautiful Soup will examine all the descendants of : its children, its children’s children, and so on. If you only want Beautiful Soup to consider direct children, you can pass in . See the difference here: Here’s that part of the document: The <title> tag is beneath the <html> tag, but it’s not beneath the <html> tag: the <head> tag is in the way. Beautiful Soup finds the <title> tag when it’s allowed to look at all descendants of the <html> tag, but when restricts it to the <html> tag’s immediate children, it finds nothing. Beautiful Soup offers a lot of tree-searching methods (covered below), and they mostly take the same arguments as : , , , , and the keyword arguments. But the argument is different: and are the only methods that support it. Passing into a method like wouldn’t be very useful. Because is the most popular method in the Beautiful Soup search API, you can use a shortcut for it. If you treat the object or a object as though it were a function, then it’s the same as calling on that object. These two lines of code are equivalent: These two lines are also equivalent: The method scans the entire document looking for results, but sometimes you only want to find one result. If you know a document only has one <body> tag, it’s a waste of time to scan the entire document looking for more. Rather than passing in every time you call , you can use the method. These two lines of code are equivalent: The only difference is that returns a list containing the single result, and just returns the result. If can’t find anything, it returns an empty list. If can’t find anything, it returns : Remember the trick from Navigating using tag names? That trick works by repeatedly calling : I spent a lot of time above covering and . The Beautiful Soup API defines ten other methods for searching the tree, but don’t be afraid. Five of these methods are basically the same as , and the other five are basically the same as . The only differences are in what parts of the tree they search. First let’s consider and . Remember that and work their way down the tree, looking at tag’s descendants. These methods do the opposite: they work their way the tree, looking at a tag’s (or a string’s) parents. Let’s try them out, starting from a string buried deep in the “three daughters” document: # <p class=\"story\">Once upon a time there were three little sisters; and their names were # and they lived at the bottom of a well.</p> One of the three <a> tags is the direct parent of the string in question, so our search finds it. One of the three <p> tags is an indirect parent of the string, and our search finds that as well. There’s a <p> tag with the CSS class “title” in the document, but it’s not one of this string’s parents, so we can’t find it with . You may have made the connection between and , and the .parent and .parents attributes mentioned earlier. The connection is very strong. These search methods actually use to iterate over all the parents, and check each one against the provided filter to see if it matches. These methods use .next_siblings to iterate over the rest of an element’s siblings in the tree. The method returns all the siblings that match, and only returns the first one: These methods use .previous_siblings to iterate over an element’s siblings that precede it in the tree. The method returns all the siblings that match, and only returns the first one: These methods use .next_elements to iterate over whatever tags and strings that come after it in the document. The method returns all matches, and only returns the first match: # u';\n\nand they lived at the bottom of a well.', u'\n\n\n\n', u'...', u'\n\n'] In the first example, the string “Elsie” showed up, even though it was contained within the <a> tag we started from. In the second example, the last <p> tag in the document showed up, even though it’s not in the same part of the tree as the <a> tag we started from. For these methods, all that matters is that an element match the filter, and show up later in the document than the starting element. These methods use .previous_elements to iterate over the tags and strings that came before it in the document. The method returns all matches, and only returns the first match: # [<p class=\"story\">Once upon a time there were three little sisters; ...</p>, The call to found the first paragraph in the document (the one with class=”title”), but it also finds the second paragraph, the <p> tag that contains the <a> tag we started with. This shouldn’t be too surprising: we’re looking at all the tags that show up earlier in the document than the one we started with. A <p> tag that contains an <a> tag must have shown up before the <a> tag it contains. As of version 4.7.0, Beautiful Soup supports most CSS4 selectors via the SoupSieve project. If you installed Beautiful Soup through , SoupSieve was installed at the same time, so you don’t have to do anything extra. has a method which uses SoupSieve to run a CSS selector against a parsed document and return all the matching elements. has a similar method which runs a CSS selector against the contents of a single tag. The SoupSieve documentation lists all the currently supported CSS selectors, but here are some of the basics: Find tags that match any selector from a list of selectors: Test for the existence of an attribute: There’s also a method called , which finds only the first tag that matches a selector: If you’ve parsed XML that defines namespaces, you can use them in CSS selectors.: When handling a CSS selector that uses namespaces, Beautiful Soup uses the namespace abbreviations it found when parsing the document. You can override this by passing in your own dictionary of abbreviations: All this CSS selector stuff is a convenience for people who already know the CSS selector syntax. You can do all of this with the Beautiful Soup API. And if CSS selectors are all you need, you should parse the document with lxml: it’s a lot faster. But this lets you CSS selectors with the Beautiful Soup API.\n\nBeautiful Soup’s main strength is in searching the parse tree, but you can also modify the tree and write your changes as a new HTML or XML document. I covered this earlier, in Attributes, but it bears repeating. You can rename a tag, change the values of its attributes, add new attributes, and delete attributes: If you set a tag’s attribute to a new string, the tag’s contents are replaced with that string: Be careful: if the tag contained other tags, they and all their contents will be destroyed. You can add to a tag’s contents with . It works just like calling on a Python list: Starting in Beautiful Soup 4.7.0, also supports a method called , which works just like calling on a Python list: If you need to add a string to a document, no problem–you can pass a Python string in to , or you can call the constructor: If you want to create a comment or some other subclass of , just call the constructor: # [u'Hello', u' there', u'Nice to see you.'] What if you need to create a whole new tag? The best solution is to call the factory method : Only the first argument, the tag name, is required. is just like , except the new element doesn’t necessarily go at the end of its parent’s . It’ll be inserted at whatever numeric position you say. It works just like on a Python list: # <a href=\"http://example.com/\">I linked to but did not endorse <i>example.com</i></a> # [u'I linked to ', u'but did not endorse', <i>example.com</i>] The method inserts tags or strings immediately before something else in the parse tree: The method inserts tags or strings immediately following something else in the parse tree: removes a tag or string from the tree. It returns the tag or string that was extracted: At this point you effectively have two parse trees: one rooted at the object you used to parse the document, and one rooted at the tag that was extracted. You can go on to call on a child of the element you extracted: removes a tag from the tree, then completely destroys it and its contents : removes a tag or string from the tree, and replaces it with the tag or string of your choice: returns the tag or string that was replaced, so that you can examine it or add it back to another part of the tree. wraps an element in the tag you specify. It returns the new wrapper: This method is new in Beautiful Soup 4.0.5. is the opposite of . It replaces a tag with whatever’s inside that tag. It’s good for stripping out markup: Like , returns the tag that was replaced. After calling a bunch of methods that modify the parse tree, you may end up with two or more objects next to each other. Beautiful Soup doesn’t have any problems with this, but since it can’t happen in a freshly parsed document, you might not expect behavior like the following: You can call to clean up the parse tree by consolidating adjacent strings: The method is new in Beautiful Soup 4.8.0.\n\nSpecifying the parser to use¶ If you just need to parse some HTML, you can dump the markup into the constructor, and it’ll probably be fine. Beautiful Soup will pick a parser for you and parse the data. But there are a few additional arguments you can pass in to the constructor to change which parser is used. The first argument to the constructor is a string or an open filehandle–the markup you want parsed. The second argument is you’d like the markup parsed. If you don’t specify anything, you’ll get the best HTML parser that’s installed. Beautiful Soup ranks lxml’s parser as being the best, then html5lib’s, then Python’s built-in parser. You can override this by specifying one of the following:\n• What type of markup you want to parse. Currently supported are “html”, “xml”, and “html5”.\n• The name of the parser library you want to use. Currently supported options are “lxml”, “html5lib”, and “html.parser” (Python’s built-in HTML parser). If you don’t have an appropriate parser installed, Beautiful Soup will ignore your request and pick a different parser. Right now, the only supported XML parser is lxml. If you don’t have lxml installed, asking for an XML parser won’t give you one, and asking for “lxml” won’t work either. Beautiful Soup presents the same interface to a number of different parsers, but each parser is different. Different parsers will create different parse trees from the same document. The biggest differences are between the HTML parsers and the XML parsers. Here’s a short document, parsed as HTML: Since an empty <b /> tag is not valid HTML, the parser turns it into a <b></b> tag pair. Here’s the same document parsed as XML (running this requires that you have lxml installed). Note that the empty <b /> tag is left alone, and that the document is given an XML declaration instead of being put into an <html> tag.: There are also differences between HTML parsers. If you give Beautiful Soup a perfectly-formed HTML document, these differences won’t matter. One parser will be faster than another, but they’ll all give you a data structure that looks exactly like the original HTML document. But if the document is not perfectly-formed, different parsers will give different results. Here’s a short, invalid document parsed using lxml’s HTML parser. Note that the dangling </p> tag is simply ignored: Here’s the same document parsed using html5lib: Instead of ignoring the dangling </p> tag, html5lib pairs it with an opening <p> tag. This parser also adds an empty <head> tag to the document. Here’s the same document parsed with Python’s built-in HTML parser: Like html5lib, this parser ignores the closing </p> tag. Unlike html5lib, this parser makes no attempt to create a well-formed HTML document by adding a <body> tag. Unlike lxml, it doesn’t even bother to add an <html> tag. Since the document “<a></p>” is invalid, none of these techniques is the “correct” way to handle it. The html5lib parser uses techniques that are part of the HTML5 standard, so it has the best claim on being the “correct” way, but all three techniques are legitimate. Differences between parsers can affect your script. If you’re planning on distributing your script to other people, or running it on multiple machines, you should specify a parser in the constructor. That will reduce the chances that your users parse a document differently from the way you parse it.\n\nAny HTML or XML document is written in a specific encoding like ASCII or UTF-8. But when you load that document into Beautiful Soup, you’ll discover it’s been converted to Unicode: It’s not magic. (That sure would be nice.) Beautiful Soup uses a sub-library called Unicode, Dammit to detect a document’s encoding and convert it to Unicode. The autodetected encoding is available as the attribute of the object: Unicode, Dammit guesses correctly most of the time, but sometimes it makes mistakes. Sometimes it guesses correctly, but only after a byte-by-byte search of the document that takes a very long time. If you happen to know a document’s encoding ahead of time, you can avoid mistakes and delays by passing it to the constructor as . Here’s a document written in ISO-8859-8. The document is so short that Unicode, Dammit can’t get a lock on it, and misidentifies it as ISO-8859-7: We can fix this by passing in the correct : If you don’t know what the correct encoding is, but you know that Unicode, Dammit is guessing wrong, you can pass the wrong guesses in as : Windows-1255 isn’t 100% correct, but that encoding is a compatible superset of ISO-8859-8, so it’s close enough. ( is a new feature in Beautiful Soup 4.4.0.) In rare cases (usually when a UTF-8 document contains text written in a completely different encoding), the only way to get Unicode may be to replace some characters with the special Unicode character “REPLACEMENT CHARACTER” (U+FFFD, �). If Unicode, Dammit needs to do this, it will set the attribute to on the or object. This lets you know that the Unicode representation is not an exact representation of the original–some data was lost. If a document contains �, but is , you’ll know that the � was there originally (as it is in this paragraph) and doesn’t stand in for missing data. When you write out a document from Beautiful Soup, you get a UTF-8 document, even if the document wasn’t in UTF-8 to begin with. Here’s a document written in the Latin-1 encoding: Note that the <meta> tag has been rewritten to reflect the fact that the document is now in UTF-8. If you don’t want UTF-8, you can pass an encoding into : You can also call encode() on the object, or any element in the soup, just as if it were a Python string: Any characters that can’t be represented in your chosen encoding will be converted into numeric XML entity references. Here’s a document that includes the Unicode character SNOWMAN: The SNOWMAN character can be part of a UTF-8 document (it looks like ☃), but there’s no representation for that character in ISO-Latin-1 or ASCII, so it’s converted into “☃” for those encodings: You can use Unicode, Dammit without using Beautiful Soup. It’s useful whenever you have data in an unknown encoding and you just want it to become Unicode: Unicode, Dammit’s guesses will get a lot more accurate if you install the or Python libraries. The more data you give Unicode, Dammit, the more accurately it will guess. If you have your own suspicions as to what the encoding might be, you can pass them in as a list: Unicode, Dammit has two special features that Beautiful Soup doesn’t use. You can use Unicode, Dammit to convert Microsoft smart quotes to HTML or XML entities: You can also convert Microsoft smart quotes to ASCII quotes: Hopefully you’ll find this feature useful, but Beautiful Soup doesn’t use it. Beautiful Soup prefers the default behavior, which is to convert Microsoft smart quotes to Unicode characters along with everything else: Sometimes a document is mostly in UTF-8, but contains Windows-1252 characters such as (again) Microsoft smart quotes. This can happen when a website includes data from multiple sources. You can use to turn such a document into pure UTF-8. Here’s a simple example: This document is a mess. The snowmen are in UTF-8 and the quotes are in Windows-1252. You can display the snowmen or the quotes, but not both: Decoding the document as UTF-8 raises a , and decoding it as Windows-1252 gives you gibberish. Fortunately, will convert the string to pure UTF-8, allowing you to decode it to Unicode and display the snowmen and quote marks simultaneously: only knows how to handle Windows-1252 embedded in UTF-8 (or vice versa, I suppose), but this is the most common case. Note that you must know to call on your data before passing it into or the constructor. Beautiful Soup assumes that a document has a single encoding, whatever it might be. If you pass it a document that contains both UTF-8 and Windows-1252, it’s likely to think the whole document is Windows-1252, and the document will come out looking like . is new in Beautiful Soup 4.1.0.\n\nBeautiful Soup 3 is the previous release series, and is no longer being actively developed. It’s currently packaged with all major Linux distributions: It’s also published through PyPi as .: You can also download a tarball of Beautiful Soup 3.2.0. If you ran or , but your code doesn’t work, you installed Beautiful Soup 3 by mistake. You need to run . The documentation for Beautiful Soup 3 is archived online. Most code written against Beautiful Soup 3 will work against Beautiful Soup 4 with one simple change. All you should have to do is change the package name from to . So this:\n• If you get the “No module named BeautifulSoup”, your problem is that you’re trying to run Beautiful Soup 3 code, but you only have Beautiful Soup 4 installed.\n• If you get the “No module named bs4”, your problem is that you’re trying to run Beautiful Soup 4 code, but you only have Beautiful Soup 3 installed. Although BS4 is mostly backwards-compatible with BS3, most of its methods have been deprecated and given new names for PEP 8 compliance. There are numerous other renames and changes, and a few of them break backwards compatibility. Here’s what you’ll need to know to convert your BS3 code and habits to BS4: Beautiful Soup 3 used Python’s , a module that was deprecated and removed in Python 3.0. Beautiful Soup 4 uses by default, but you can plug in lxml or html5lib and use that instead. See Installing a parser for a comparison. Since is not the same parser as , you may find that Beautiful Soup 4 gives you a different parse tree than Beautiful Soup 3 for the same markup. If you swap out for lxml or html5lib, you may find that the parse tree changes yet again. If this happens, you’ll need to update your scraping code to deal with the new tree. Some arguments to the Beautiful Soup constructor were renamed for the same reasons: I renamed one method for compatibility with Python 3: I renamed one attribute to use more accurate terminology: I renamed three attributes to avoid using words that have special meaning to Python. Unlike the others, these changes are not backwards compatible. If you used these attributes in BS3, your code will break on BS4 until you change them. I gave the generators PEP 8-compliant names, and transformed them into properties: Some of the generators used to yield after they were done, and then stop. That was a bug. Now the generators just stop. There are two new generators, .strings and .stripped_strings. yields NavigableString objects, and yields Python strings that have had whitespace stripped. There is no longer a class for parsing XML. To parse XML you pass in “xml” as the second argument to the constructor. For the same reason, the constructor no longer recognizes the argument. Beautiful Soup’s handling of empty-element XML tags has been improved. Previously when you parsed XML you had to explicitly say which tags were considered empty-element tags. The argument to the constructor is no longer recognized. Instead, Beautiful Soup considers any empty tag to be an empty-element tag. If you add a child to an empty-element tag, it stops being an empty-element tag. An incoming HTML or XML entity is always converted into the corresponding Unicode character. Beautiful Soup 3 had a number of overlapping ways of dealing with entities, which have been removed. The constructor no longer recognizes the or arguments. (Unicode, Dammit still has , but its default is now to turn smart quotes into Unicode.) The constants , , and have been removed, since they configure a feature (transforming some but not all entities into Unicode characters) that no longer exists. If you want to turn Unicode characters back into HTML entities on output, rather than turning them into UTF-8 characters, you need to use an output formatter. Tag.string now operates recursively. If tag A contains a single tag B and nothing else, then A.string is the same as B.string. (Previously, it was None.) Multi-valued attributes like have lists of strings as their values, not strings. This may affect the way you search by CSS class. If you pass one of the methods both string a tag-specific argument like name, Beautiful Soup will search for tags that match your tag-specific criteria and whose Tag.string matches your value for string. It will find the strings themselves. Previously, Beautiful Soup ignored the tag-specific arguments and looked for strings. The constructor no longer recognizes the argument. It’s now the parser’s responsibility to handle markup correctly. The rarely-used alternate parser classes like and have been removed. It’s now the parser’s decision how to handle ambiguous markup. The method now returns a Unicode string, not a bytestring."
    },
    {
        "link": "https://scrapfly.io/blog/web-scraping-with-python-beautifulsoup",
        "document": "Guide to List Crawling: Everything You Need to Know\n\nIn-depth look at list crawling - how to extract valuable data from list-formatted content like tables, listicles and paginated pages."
    },
    {
        "link": "https://scrapingbee.com/blog/python-web-scraping-beautiful-soup",
        "document": "The internet is an endless source of data, and for many data-driven tasks, accessing this information is critical. Thus, the demand for web scraping has risen exponentially in recent years, becoming an important tool for data analysts, machine learning developers, and businesses alike. Also, Python has become the most popular programming language for this purpose.\n\nIn this detailed tutorial, you'll learn how to access the data using popular libraries such as Requests and Beautiful Soup with CSS selectors.\n\nWithout further ado, let’s get started!\n\nWhen you're web scraping, the first step is to retrieve the contents of a web page from a URL using an HTTP request. One popular and easy-to-use option is the Python Requests library. It allows you to send HTTP requests easily and offers various useful features.\n\nInstall the Requests library with the following command:\n\nOnce you have extracted the HTML data, you can use the BeautifulSoup library to parse it and pull out the desired information efficiently.\n\nTo install the library, launch the below command in the terminal:\n\nWe will build a Hacker News scraper using Requests and BeautifulSoup to extract the rank, URL, and title from all articles posted on HN.\n\nCreate a Python script named and import . In , use Requests to make a GET request to your target website, storing the retrieved HTML content in the variable, and then log it to the console.\n\nIn the code, the sends an HTTP GET request to a URL and retrieves the website's HTML content. It then checks the server's response status code using . A 200 code indicates success, allowing the code to proceed with the HTML. Any other code (like a 404 \"Not Found\") is considered an error.\n\nNote: The GET request to the server may fail due to a temporary outage, incorrect URL, or blocked IP. Error handling logic (if/else) prevents crashes and ensures the script only continues on successful (2xx) responses.\n\nHere’s the result after running the code:\n\nGreat! Now, it's time to use Beautiful Soup to parse the page's HTML code and extract the specific data we want.\n\nIn the previous section, we retrieved an HTML document from the server. It appears as a complex structure of HTML tags and elements, and the only way to make sense of it is by extracting the desired data through HTML parsing.\n\nBeautiful Soup is a Python library that allows you to select HTML elements and easily extract data from them\n\nLet’s use BS4 to parse the content:\n\nThe BeautifulSoup() constructor takes HTML content and a string specifying the parser. Here tells Beautiful Soup to use the built-in HTML parser.\n\nNote: When using BeautifulSoup, it's better to use a instead of . This is because holds the raw HTML data in bytes, which is easier for BeautifulSoup to decode than the text representation in . Using helps avoid potential issues with character encoding.\n\nNow, move on to the code. This object is very handy and allows us to access many useful pieces of information such as:\n\nWhen using BeautifulSoup for web scraping, one of the most important tasks is targeting and extracting specific DOM (Document Object Model) elements. The DOM is a programming interface for web documents. Imagine the HTML code of a webpage as an upside-down tree. Each HTML element (headings, paragraphs, and links) is a node in this tree.\n\nBS4 allows you to quickly and elegantly target the DOM elements you need. Here are the different ways Beautiful Soup provides to target these elements within the DOM:\n\nTo find elements by their tag name in Beautiful Soup, you have two main options: the method and the method.\n• find: This method searches the parsed HTML document from top to bottom and returns the first occurrence of the tag you specify.\n• find_all: This method searches the entire parsed HTML document and returns a list containing all instances of the specified tag or set of tags.\n\nFor instance, to find the first tag in a document, you can use:\n\nIf you want to find all tags, you can use the method, which will return a list of all tags in the document.\n\nThe method will return the first tag it finds in the parsed HTML:\n\nreturns a list containing all tags found in the HTML. This allows you to iterate through the list and access the content or attributes of each tag.\n\nBS4 provides methods to locate elements by their class or ID attributes. For instance, to find an element with a specific class:\n\nYou can also find all elements with a specific class using:\n\nNote: For classes, use instead of because the is a reserved keyword in Python.\n\nTo find an element by its ID:\n\nOften, DOM elements do not have proper IDs or class names. While perfectly possible, selecting elements in that case can be rather verbose and require lots of manual steps.\n\nFor example, let's say that you want to extract the score of a post on the HN homepage, but you can't use name or in your code. Here is how you could do it:\n\nAs promised, rather verbose, isn't it?\n\nThis is exactly where CSS selectors shine. They allow you to break down your loop and ifs into one expression.\n\nThe key here is . This selects for us the first which is an immediate child of a , which itself has to be the second element of its parent ( ). The following HTML illustrates a valid DOM excerpt for our selector.\n\nThis is much clearer and simpler, right? Of course, this example artificially highlights the usefulness of the CSS selector. But after playing a while with the DOM, you will fairly quickly realise how powerful CSS selectors are, especially when you cannot only rely on IDs or class names.\n\nBeautifulSoup allows you to use CSS selectors to target elements more flexibly. For instance, to find all elements with a specific class within a :\n\nThe select method finds all elements in the parsed HTML that match a given CSS selector. It returns a list of all matching elements.\n\nHere’s how you can select the first element in the HTML document that has the class .\n\nThe select_one method selects the first matching element based on the given CSS selector.\n\nOr to find an element with a specific ID:\n\nAnother thing that makes CSS selectors great for web scraping is that they are easily debuggable. Let's check it out.\n\nOpen the developer tools ( ) in Chrome or Firefox, select the document tab, and use / + to open the search bar. Now enter any CSS expression (e.g. ) and the browser will find the first matching element. Pressing will iterate over the elements.\n\nWhat is great is that it works the other way around too. Right-click any element in the DOM inspector and choose - from the context menu.\n\nVoilà, you have the right selector in your clipboard.\n\nCSS selectors provide a comprehensive syntax to select elements in a wide variety of settings.\n\nThis includes child and descendant combinators, attribute selectors, and more.\n\nChild and descendants: Child and descendant selectors allow you to select elements which are either immediate or indirect children of a given parent element.\n\nAnd you can mix them together:\n\nThat selector will work perfectly fine with this HTML snippet.\n\nThis one is one of my favorites because it allows you to select elements based on the elements on the same level in the DOM hierarchy, hence the sibling expression.\n\nTo select all coming after an you can use the selector (it will match two s).\n\nYou can also use if you only want to select the immediately following the our (it will match only one ).\n\nAttribute selectors Attribute selectors allow you to select elements with particular attributes values. So, will match\n\nLet's assume we have this HTML document.\n\nFurthermore, let's assume we only want to select a particular element. Welcome to pseudo-classes!\n\nPseudo-classes, such as , , and , for example allow you to select specific elements by their position within the DOM tree.\n\nThere are plenty of other pseudo-classes (e.g. will select all checked checkboxes) and you can find a full list here. If you like to learn more about CSS selectors, you may also find this article interesting.\n\nI also think that CSS expressions are easier to maintain. For example, at ScrapingBee, when we do custom web scraping tasks all of our scripts begins like this:\n\nThis makes it easy to fix scripts when changes to the DOM are made.\n\nCertainly, a rather easy way to determine the right CSS selector is to simply copy/paste what Chrome gave you when you right-click an element. However, you ought to be careful, as these selector paths tend to be very \"absolute\" in nature and are often neither the most efficient nor very resilient to DOM changes. In general it's best to verify such selectors manually before you use them in your script.\n\nNext, let's use Beautiful Soup to parse the HTML data and scrape the contents from all the articles on the first page of Hacker News. Before we select an element, let's use our developer tools to inspect the page and find what selectors we need to use to target the data we want to extract.\n\nThe content we are looking for is inside the tag with the class 'athing'.\n\nNow, let's use the Beautiful Soup method to select all elements containing the class.\n\nA common mistake you can make is failing to check for .\n\nMethods like and return if they can't find the desired element. Since web pages change over time, the element you're trying to find might be located differently or may no longer exist.\n\nTo avoid errors, always check if the method result is not before using it in your code.\n\nNext, let's loop through each article and print its text contents to the console, just to verify we have selected the correct elements.\n\nGreat! We’ve successfully accessed the rank and title of each element.\n\nIn the next step, we will use the Beautiful Soup method to grab the specific values we want to extract from each article and organize the obtained data in a Python dictionary.\n\nFor each article, we will extract the URL, rank, and title.\n• The rank is located within the tag having the class .\n• The title and URL of the article are located within the tag having the class .\n\nTake a look at the below image:\n\nHere’s how our code looks when using the method to get each article’s URL, title, and rank:\n\nGreat! We've scraped information from the first page of Hacker News using Requests and Beautiful Soup. But wouldn't it be even better to get article data from all the pages? We can achieve this by applying the same logic to the remaining pages.\n\nHowever, before applying the logic, you need to navigate to all the remaining pages. So, in the next section, we'll explore techniques for handling website pagination.\n\nHandling pagination in web scraping is a straightforward concept. You need to make your scraper repeat its scraping logic for each page visited until no more pages are left. To achieve this, you have to identify the last page to stop scraping and save the extracted data.\n\nTo handle pagination, we'll use two variables: \"is_scraping\" (a boolean tracking if the last page is reached) and \"current_page\" (an integer keeping track of the page being scraped).\n\nNext, let's create a while loop that continues scraping until the scraper reaches the last page. Within the loop, we will send a GET request to the current page of Hacker News to extract the URL, title, and rank.\n\nWithin the loop, we will check if there is a \"More\" button with the class on the page to navigate to the next page. Take a look at the below image:\n\nThe \"More\" button is present on all pages, except the last one. So, if the class is present on the page, the script increments the variable and continues scraping the next page. If there is no class, the script sets to and exits the loop.\n\nPutting it all together:\n\nThe scraped information can be used for various needs and purposes. Therefore, it's crucial to convert it into a format that makes it easy to read and explore, like CSV or JSON. We currently have the article's information stored in a list named . Now, let's explore how to store the data in CSV and JSON files.\n\nCSV is a popular format for data exchange, storage, and analysis, especially when dealing with large datasets. A CSV file stores information in a tabular form with comma-separated values.\n\nThe code snippet performs the following tasks:\n• It first imports the csv module, which provides the tools needed to work with CSV files.\n• Then, it opens a file named \"hn_articles.csv\" in append mode.\n• It creates a writer object called DictWriter. This object allows us to write dictionaries, where each key becomes a column header and the corresponding value goes into that column.\n• The code checks if the file is empty. If it is (meaning the file pointer is at position 0), it writes the column headers (based on the ) as the first row of the CSV file.\n• Finally, the snippet uses another method called writerows() to write each entry from your variable, line by line, into the CSV file.\n\nGreat! The data is stored in a CSV file.\n\nJSON is a text-based, human-readable format for representing structured data. It is commonly used for transmitting data between a server and a web application.\n\nThe logic above uses the json.dump() function from the standard json module. This function allows you to write a Python object to a JSON file.\n• The Python object to convert to JSON format.\n\nGreat! The data is stored in a JSON file.\n\nWebsites often use anti-bot systems like CAPTCHAs and fingerprint challenges, which can be difficult to bypass. Web scraping also requires significant computational resources, bandwidth, and ongoing maintenance and updates.\n\nFor instance, Hacker News is a simple website with minimal anti-bot protections, allowing us to scrape it relatively easily. Conversely, complex websites utilize sophisticated techniques to detect and block bots.\n\nThe difficulty of avoiding these blocks varies depending on the target website and the scale of your scraping operation. However, here are some techniques you can consider to mitigate them.\n\nThe User-Agent header tells the server about the client's operating system, vendor, and version. If a server receives a large number of requests from the same User-Agent, it might block your requests. To avoid this, you can rotate User-Agents by generating a new one for each request.\n\nAnti-scraping measures often monitor the frequency of requests from the client. If a single IP sends too many requests too quickly, it might be flagged and blocked. A common way to bypass this is by introducing delays between requests. This ensures the server has enough time to process each request before receiving the next.\n\nA rotating proxy server acts as a middleman between your scraping script and target websites. It routes your requests and assigns you a different IP address from its pool, automatically changing it periodically or after a set number of requests. Learn about How To Use A Proxy With Python Requests.\n\nRetry logic for network calls is essential in web scraping scripts. It improves reliability by handling temporary issues like server downtime or disconnections. Retrying failed calls before giving up, thus increasing the chance of successful data retrieval.\n\nTo ensure ethical scraping, always check the website's terms of service and tailor your scripts accordingly. You should follow the rules outlined in the file of the target website. Additionally, avoid scraping personal information without consent, as this violates privacy regulations.\n\nWeb scraping challenges require a combination of technical strategies, ethical considerations, and adherence to best practices. Some of these best practices include respecting the robots.txt file, rotating proxies and user agents, and so on.\n\nBut even with best practices, obstacles can arise that block you from getting the data you need. That's where tools like ScrapingBee come in. It handles all anti-bot challenges, you can integrate in your code in just a matter of minutes.\n\nWe've come to the end of this detailed tutorial. Here's the final code you can use to scrape Hacker News. This code implements retry logic, which helps in retrying failed requests until the maximum attempts are reached.\n\nThis detailed tutorial covered everything you need to know about getting started with Beautiful Soup and Requests in Python. You learned how to use them to build a web scraper that effectively extracts data from websites. However, web scraping has become increasingly challenging due to the rise of anti-bot and anti-scraping technologies. This is where tools like ScrapingBee come in.\n\nI hope you liked this article about web scraping in Python and that it will make your life easier. For further reading, do not hesitate to check out our extensive Python web scraping guide. You might also be interested in following tutorials that can help you in your web scraping journey.\n• How To Set Up A Rotating Proxy In Selenium With Python\n• How To Set Up A Rotating Proxy In Puppeteer\n• The Best Web Scraping Tools & Software In 2024\n• How To Bypass Cloudflare Antibot Protection At Scale In 2024"
    },
    {
        "link": "https://oxylabs.io/blog/beautiful-soup-parsing-tutorial",
        "document": "If you want to build your first web scraper, we recommend checking our video tutorial below or our article that details everything you need to know to get started with Python web scraping . Yet, in this tutorial, we’ll focus specifically on parsing a sample HTML file in Python and using Selenium to render dynamic pages.\n\nAlthough web scraping in its totality is a complex and nuanced field of knowledge, building your own basic web scraper isn’t all that difficult. And that’s mostly due to coding languages such as Python . This language makes the process much more straightforward thanks to its relative ease of use and the many useful libraries that it offers. In this tutorial, we’ll be focusing on one of these wildly popular libraries named Beautiful Soup , a Python package used for parsing HTML and XML documents.\n\nOur previous article on what is parsing sums up this topic nicely. You can also check our video tutorial on how to parse data with Beautiful Soup or keep reading the text below:\n\nA well-built parser will identify the needed HTML string and the relevant information within it. Based on predefined criteria and the rules of the parser, it’ll filter and combine the needed information into CSV, JSON, or any other format.\n\nData parsing is a process during which a piece of data gets converted into a different type of data according to specified criteria. It’s an important part of web scraping since it helps transform raw HTML data into a more easily readable format that can be understood and analyzed.\n\nBefore getting to the matter at hand, let’s first take a look at some of the fundamentals of this topic.\n\nThis tutorial is useful for those seeking to quickly grasp the value that Python and Beautiful Soup 4 offer. After following the provided examples, you should be able to understand the basic principles of how to parse HTML data. The examples will demonstrate traversing a document for HTML tags, printing the full content of the tags, finding elements by ID, extracting text from specified tags, and exporting it to a CSV file.\n\nFinally, since this article explores working with a sample file written in HTML, you should be at least somewhat familiar with the HTML structure.\n\nIf you’re using Windows, it’s recommended to run the terminal as administrator to ensure that everything works out smoothly.\n\nThe next step is to install the Beautiful Soup 4 library on your system. No matter the OS, you can easily do it by using this command on the terminal to install the latest version of Beautiful Soup:\n\nOn Windows, when installing Python, make sure to tick the PATH installation checkbox. PATH installation adds executables to the default OS Command Prompt executable search. The OS will then recognize commands like pip or python without having to point to the directory of the executable, which makes things more convenient.\n\nBefore following this tutorial, you should have a Python programming environment set up on your machine. For this tutorial, we’ll assume that PyCharm is used since it’s a convenient choice even for the less experienced with Python and is a great starting point. Otherwise, simply use your go-to IDE.\n\nBeautiful Soup is a Python package for parsing HTML and XML documents. It creates a parse tree for parsed web pages based on specific criteria that can be used to extract, navigate, search, and modify data from HTML, which is mostly used for web scraping. Beautiful Soup 4 is supported on Python versions 3.6 and greater. Being a useful library, it can save programmers loads of time when collecting data and parsing it.\n\nA sample HTML document will help demonstrate the main methods of how Beautiful Soup parses data. This file is much more simple than your average modern website; however, it’ll be sufficient for the scope of this tutorial. If you want to use data from a table found on your target website, check this tutorial on how to scrape HTML tables with Python.\n\nFor PyCharm to use this file, simply copy it to any text editor and save it with the .html extension to the directory of your PyCharm project. Alternatively, you can create an HTML file in PyCharm by right-clicking on the project area, then navigating to New > HTML File and pasting the HTML code from above.\n\nGoing further, you can create a new Python file by navigating to New > Python File. Congratulations, and welcome to your new playground!\n\nFirst, you can use Beautiful Soup to extract a list of all the tags used in our sample HTML file. For this step, you can use the soup.descendants generator:\n\nClick the Run button, and you should get the below output:\n\nBeautiful Soup traversed our HTML file and printed all the HTML tags that it found sequentially. Let’s take a quick look at what each line did:\n\nThis tells Python to import the Beautiful Soup library.\n\nThis code snippet above, as you could probably guess, gives an instruction to open our sample HTML file, read its contents, and store them in the contents variable.\n\nThis line creates a Python Beautiful Soup object and passes it to Python’s built-in HTML parser. Other parsers, such as lxml, might also be used, but it’s a separate external library, and for the purpose of this tutorial, the built-in parser will do just fine.\n\nThe final piece of code, namely the soup.descendants generator, instructs Beautiful Soup to look for HTML tag names and print them in the PyCharm console. The results can also easily be exported to a CSV file, but we’ll get to this later.\n\nTo extract the content of HTML tags, this is what you can do:\n\nIt’s a simple parsing instruction that outputs the HTML tag with its full content in the specified order. Here’s what the output should look like:\n\nAdditionally, you can remove the HTML tags and print the text only by adding .text:\n\nWhich gives the following output:\n\nNote that this only prints the first instance of the specified tag. Let’s continue to see how to find an HTML element by ID and use the find_all method to filter all elements by specific criteria.\n\nYou can use two similar ways to find elements by ID:\n\nBoth of these will output the same result in the Python Console:\n\n6. Find all instances of a tag and extract text\n\nThe find_all method is a great way to extract all the data stored in specific elements from an HTML file. It accepts many criteria that make it a flexible tool allowing users to filter data in convenient ways. Let’s find all the items within the <li> tags and print them as text only:\n\nThis is how the full code should look like:\n\nBeautiful Soup has excellent support for CSS selectors as it provides several methods to interact with HTML content using selectors. Under the hood, Beautiful Soup uses the soupsieve package. When you install Beautiful Soup with Python’s package-management system pip, it’ll automatically install the soupsieve dependency for you. Be sure to check out their documentation to learn more about the supported CSS selectors.\n\nBeautiful Soup primarily provides two methods to interact with HTML web page content using CSS selectors: select and select_one. Let’s try out both of them.\n\nYou can grab the title from our HTML sample file using the select method. Your code should look like the below:\n\nSimple, isn’t it? Notice how the CSS selector navigates the HTML by going through the hierarchy of the HTML elements sequentially.\n\nThis method is useful when you need to grab only one element using a CSS selector that matches multiple elements. For instance, our HTML sample has several <li> elements. If you want to grab only the first one, you can use the following CSS selector:\n\nThis will pick the first <li> element of the <ul> tag, which has several other <li> elements.\n\nTo extract a specific <li> element, you can add :nth-of-type(n) to your CSS selector. For instance, you can extract the third <li> element, which in our HTML file is <li>Shared proxies</li>, using the following line:\n\nMost websites these days tend to load content dynamically, meaning data can be left out if JavaScript isn’t triggered to load the content. The requests library and Beautiful Soup libraries aren’t equipped to handle JavaScript-rendered web pages. Consequently, using these libraries to download the HTML document of a website would exclude any dynamically-loaded content.\n\nYou’ll have to use other libraries that can render the website by executing JavaScript to parse dynamic elements. Python’s Selenium package offers powerful capabilities to interact with and manipulate DOM elements. In a nutshell, its WebDriver utilizes popular web browsers and renders JavaScript-based dynamic websites quickly. By combining Beautiful Soup with Selenium WebDriver, you can easily parse dynamic content from any website.\n\nAdditionally, there are other ways you can scrape dynamic websites that we have explored in our Playwright and Scrapy Splash tutorials.\n\nFirst, install Selenium with the below command:\n\nAs of Selenium 4.6, the browser driver is downloaded automatically. Yet, if you’re using an older version of Selenium or the driver wasn’t found, you’ll have to manually download the WebDriver. Visit this page to find the driver download links for the supported web browsers.\n\nNow that you’ve installed all the required dependencies, you can jump right into writing the code. Let’s begin by importing the newly installed library and Beautiful Soup:\n\nNext, you’ll have to initiate a browser instance using the below code:\n\nThe above code uses the Chrome() driver to launch an instance of a Chrome browser.\n\nNow, you can use this driver object to fetch dynamic content. So let’s extract the HTML of this JavaScript-rendered dummy website http://quotes.toscrape.com/js/:\n\nAs soon as you execute the above code, you’ll notice the Chrome browser instance automatically navigating to the desired website and rendering the JavaScript-based content. The new object named js_content contains the HTML content of the website.\n\nNow that you’ve got the HTML content in a string format, you can simply use the BeautifulSoup() constructor to create the Beautiful Soup object with parsed data:\n\nYou can now navigate the soup object with Beautiful Soup and parse any HTML element using the methods outlined previously. For example, let’s extract the first quote found on our target website. Every quote is within the <span> tag with an attribute set to class=\"text\", so the code line to extract the content from the quote can look like this:\n\nNote the additional underscore _ within class_=\"text\" – you must use it. Otherwise, Python will interpret it as a reserved class keyword.\n\nTo learn more about common issues that can arise when performing such tasks and how to fix them, take a look at our how to find HTML element by class with BeautifulSoup guide.\n\nWhen parsing dynamic websites, keep in mind that some websites have strong anti-bot measures that can easily detect Selenium-based web scrapers. Mostly, this is achieved by identifying the Selenium web driver's common request patterns and using various other fingerprinting techniques. Thus, it’s extremely difficult to avoid such anti-bot measures. In case your IP address gets blocked, you might want to consider using a proxy, and implementing other anti-detection methods. Make sure to look into which proxy type would be most suitable for your scraping project, whether that be datacenter or residential proxies.\n\nBy now you should now have a basic understanding of how Beautiful Soup can be used to parse and extract data. It should be noted that the information presented in this article is useful as introductory material, yet real-world web scraping and parsing with BeautifulSoup is usually much more complicated than this. For a more in-depth look at Beautiful Soup, you’ll hardly find a better source than its official documentation, so be sure to check it out too.\n\nA very common real-world application would be exporting data to a CSV file for later analysis. Although this is outside the scope of this tutorial, let’s take a quick look at how this might be achieved.\n\nFirst, you would need to install an additional Python library called pandas that helps Python create structured data. This can be easily done by entering the following line in your terminal:\n\nYou should also add this line to the beginning of your code to import the library:\n\nGoing further, let’s add some lines that’ll export the list we extracted earlier to a CSV file. This is how your full code should look like:\n\nWhat happens here exactly? Let’s take a look:\n\nThis line finds all instances of the <li> tag and stores it in the results object.\n\nAnd here, we see the pandas library at work, storing our results into a table (DataFrame) and exporting it to a CSV file.\n\nIf all goes well, a new file titled names.csv should appear in the running directory of your Python project, and inside, you should see a table with the proxy types list. That’s it! Now you not only know how data extraction from an HTML document works, but you can also programmatically export the data to a new file.\n\nAs you can see, Beautiful Soup is a greatly useful HTML parser. With a relatively low learning curve, you can quickly grasp how to navigate, search, and modify the parse tree. With the addition of libraries, such as pandas, you can further manipulate and analyze the data, which offers a powerful package for a near-infinite amount of data collection and analysis use cases.\n\nAnd if you’d like to expand your knowledge on Python web scraping in general and get familiar with other Python libraries, we recommend heading over to What is Python used for? and Python Requests blog posts."
    }
]