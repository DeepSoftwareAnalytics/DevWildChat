[
    {
        "link": "https://dev.epicgames.com/community/learning/tutorials/y4vB/unreal-engine-5-4-x-for-meta-quest-vr",
        "document": ""
    },
    {
        "link": "https://developers.meta.com/horizon/documentation/unreal",
        "document": ""
    },
    {
        "link": "https://dev.epicgames.com/community/learning/tutorials/3Vx6/unreal-engine-5-3-2-for-meta-quest-vr",
        "document": ""
    },
    {
        "link": "https://developers.meta.com/horizon/downloads/package/unreal-engine-5-integration",
        "document": ""
    },
    {
        "link": "https://forums.unrealengine.com/t/community-tutorial-unreal-engine-5-3-2-for-meta-quest-vr/1376911",
        "document": "First off, THANK YOU! This is the first REAL guide covers everything you need. But when you install “Android SDK Command-line Tools 11.0” you have to edit the SetupAndroid.bat (line 86) to “11.0” instead of “latest” (which works fine). Or just install “latest” (which is also 11.0 atm) and you’re fine too. My problem is, since the update from 5.3.1 to 5.3.2 I can’t launch a project on my quest 3 anymore. Tried everything in your guide (even changed JDK from 17.0.9 to 17.0.6). Generating APK and move it to the quest via dev hub works fine, but direct launching to quest 3 does not work anymore, you can see the quest tries to start something (about 3 or 4 times) but thats all. The CMD stays at “Asset registry cache written as 16.9 MiB to …/VR_5_32/Intermediate/CachedAssetRegistry_*.bin”. My minimum and target SDK is 32 (which worked fine before), but also tried 33 and 29. My UE4.27.2 project can still launch on my quest 3, so no connection problem. BTW, if I understood the .bat file correctly, it will also just install the sdk, ndk and so on, see line 100 and the vars (line 20) of it: if “%PLATFORMS_VERSION%” == “” SET PLATFORMS_VERSION=android-33\n\n if “%BUILDTOOLS_VERSION%” == “” SET BUILDTOOLS_VERSION=33.0.1\n\n if “%CMAKE_VERSION%” == “” SET CMAKE_VERSION=3.10.2.4988404\n\n if “%NDK_VERSION%” == “” SET NDK_VERSION=25.1.8937393\n\nIn my test project I don’t even have the meta plugin enabled, just OpenXR, to test the basics (which worked fine before). But my other project with Meta enabled is the same. I am testing a lot of settings right now, but did not find a fix yet. I can see now in the output log of the launcher something like “adb.exe […] /system/bin/sh: syntax error: unexpected ‘(’”. Looks like the “(” in the session name “Quest\\ 3\\ (192.168.xxx.xxx:5555)” doesn’t work, I guess if we could escape “(” and “)” like the space, it could work, but I don’t know where you can chagne the params or the session name. Still trying…\n\nWhen we used “latest” while having Android SDK 33 or 34 installed we randomly run into issues where things where build using Android 33, and as the Meta Quest currently only support Android Platform SDK 32 (12L), setting it is useful. NDK API Level: yes you’re correct, you can install Android 26 (Oreo) if you like, but as Android 32 is the current supported platform for Quest (UE Android supports 33). Listing Android 12L keeps it current and simple to get people started. A few people have followed this setup and its golden for them, I have wondered about the NDK Level as Meta Quest min is 26 indeed, but 32 is also marvelous.\n\nHaving the same issue on Quest 3 → Updated to 5.3.2 (5.3.2 stock version), tried a lot of different SDK / NDK config and got crashes almost everytime. Just found out that on the VR template, having the MetaXR + OpenXR result to crash on launch which wasn’t the case on 5.3.1. If I disable MetaXR on VR Template everything launch fine on the Quest 3 Maybe the issue isn’t about SDK / NDK or else but on the MetaXR Plugin on 5.3.2\n\n@TheFrenchNob In my case MetaXR is disabled by default in the VR template (should be default in UE5), maybe you changed the plugin config in the engine to be enabled by default? A workaround so for my problem is launching via “All_Android_On_[…]”, because there are no “(” or “)” in the name. So this looks like a bug when creating the adb.exe params, epic have to escape special chars like “(” or “)” or change the device name. I created a tutorial post with all configs for UE4 and UE5 which worked so far for me (will add the link here when epic approved it).\n\nYeh I was trying the Passthrough Quest 3 template that require to add the MetaXR plugin to the Plugins folder but when building it it crashes.\n\n I took time to figure that MetaXR caused it. I’ll wait for your tutorial to come out ! Thank you for it ! Don’t hesite to post the link or send it to me when it’s approved by Epic\n\nit did not work UNTIL I set it to android-26. Not sure if you’re aware what each of those settings do, but some of those settings tell the engine what to compile against while other settings tell the devices what it’s allowed to swap out for (essentially). You can still build for targeting 32 with android-26. I was using android-25 in my 5.2 branch before, just seems a version bump happened is all. I didn’t even need to use the suggested newer android studio.\n\nAfter successfully going through the instructions, I was able to compile the VRTemplateMap APK file and send it over to the Quest 3. However, i’m getting a square outline around the navigation circle which isn’t present when doing a VR Preview. Any ideas on how to fix this? Also, would REALLY love Half-Life ALYX style navigation as the default on the controllers. At minimum set the default to be able to snap rotate and teleport on the same hand would be a good start. Continuous movement with thumbstick would be ideal."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/animation-blueprint-node-functions-in-unreal-engine",
        "document": "Animation Node Functions are function graphs that you can bind to specific Animation Blueprint nodes, at set points in your graph's update cycle, to perform relevant logic. You can use Animation Node Functions to set reference variables, determine a dynamic value, set animation states, and organize complex graphs. Additionally, by using Animation Node Functions, logic is only run at set points in the graph's evaluation, which can significantly increase your animation system's performance.\n\nYou can use this document to learn more about how to use Animation Node Functions in Unreal Engine.\n\nTo create a new Animation Node Function, select a node in the AnimGraph, and navigate to the node's Details panel to the Functions section.\n\nYou can choose to create a new function on any of the available bindings, depending on your project's needs. Here you can reference a list and description of each of the available functions:\n\nThe concept of relevance in the AnimGraph refers to whether or not the engine is evaluating a node. In cases when nodes are not being evaluated, such as when using Blend nodes or State Machines, some nodes may be completely inactive. When this occurs, the node is not relevant. Only nodes currently contributing to the Output Pose are considered relevant. In this example, the Aim Offset node is not relevant because the Blend node is blended completely to input A.\n\nAfter selecting when to bind a new function to a node's evaluation cycle, use the (+) Create New Binding option from the binding's drop-down menu to create a new function graph. The function graph will then appear in the My Blueprints panel, where you can name and open the function.\n\nNew Animation Node Functions will automatically create Input pins on the Function node which are used to pass through data from the bound Animation Blueprint node to the function's graph. Some function operations may not require the use of these pins, but other logic may require the data they provide, such as if you are using the function to read the current state of the node.\n\nAfter creating or binding a new function to the Animation Blueprint node, the function will appear on the node in the AnimGraph.\n\nIn this example, the Aim Offset logic, for getting a character's rotation and setting the pitch and yaw values, is all contained within the function. The engine only executes this logic while updating the Aim Offset node in the AnimGraph, rather than every tick in the Event Graph, significantly reducing performance costs.\n\nGraphing logic in Animation Node Functions is similar to any other function graph in Unreal Engine.\n\nIf you want to further increase your project's performance you can implement Animation Optimzation techniques, such as Property Access, to ensure the engine offloads the Animation Node Function onto the Worker Thread the animation update is executing on.\n\nWhen binding an Animation Node Function to a Sequence Player or Sequence Evaluator node, you can use Sequence Player nodes within the function to interface and play Animation Sequences directly using the Animation Node Function, providing gameplay teams with more control over animation playback.\n\nHere you can reference a list of the Sequence Player nodes and a description of their function.\n\nAfter creating a Sequence Player node in your animation function, and adding it to the graph, you will need to use a Convert node to provide the player node with the proper data.\n\nYou can use Convert nodes to pass through data from the context Sequence Player and Evaluator Nodes to your Animation Node Function, in order to play animations using the Animation Blueprint Function.\n\nAfter adding a Sequence Player node to your Animation Node Function graph, add a Convert node from the Function node's Node pin, and connect the output to the Player node's Sequence Player or Sequence Evaluator input.\n\nYou can create Animation Blueprint Function Nodes on State Machine nodes, and use them to set Animation States of the State Machine. For example, you can use an On Update function with a Set State node to set an Animation State Machine State without the need to set up transition logic.\n\nYou can use Set State nodes to directly set an animation state using an Animation Node Function, without the need to set up transition logic. Here, you can reference a list of the Set State node's properties and a description of their function.\n\nYou can use the Get State node to determine what Animation State is currently active. Here you can reference a list of the Get State node's Input and Output pins, and a description of their function.\n\nIs State Blend In and Out Nodes\n\nYou can use the Is State Blending In or Out nodes to determine if the current animation state is blending in or out, in order to build logic to drive blending behaviors. Here you can reference a list of the Is State Blending In or Out nodes pins and a description of their function.\n\nWhen using the Is State Blending In or Out nodes, you must use a convert to Animation State node to provide the proper Node context data. When updating a function directly on an Animation State output node, you can use the pure Convert to Animation State node (green), for all other applicable instances, use the Convert to Animation State function node (blue).\n\nYou can also bind Animation Node Functions directly to Animation states. However, function graphs can only be bound to Output Nodes within the States AnimGraph.\n\nFor more information about using Animation Node Functions please see the Lyra example project.\n\nTo reference an example workflow of setting up an Animation Node Function, see the Distance Matching documentation."
    },
    {
        "link": "https://dev.epicgames.com/documentation/en-us/unreal-engine/animating-characters-and-objects-in-unreal-engine",
        "document": "You can use Unreal Engine's suite of powerful animation tools and editors to create character and object runtime animation systems, rendered cinematic content, and author new animation content directly in the engine.\n\nWith the Skeletal Mesh Animation System, you can create robust animation systems for characters and objects within Unreal Engine. After importing a skinned mesh object as a Skeletal Mesh asset, you can manage its properties and build logic to run dynamic animation content using the Animation Blueprint visual scripting editor.\n\nFor more information about the using the Skeletal Animation System to animate characters and objects in unreal engine, see the following documentation:\n\nYou can use Sequencer to create and edit staged animation content for game cinematics or traditional animated filmmaking while taking advantage of Unreal Engine's animation and world rendering tools. When creating cinematic content using Sequencer, you can build custom character rigs, using Control Rig to animate characters directly in your scene while simultaneously animating other characters, objects, cameras, and effects.\n\nFor more information about using Sequencer to create cinematic animations in Unreal Engine, see the following documentation:\n\nUsing the Skeletal Mesh Animation System, imported characters can run animations that have been created in external DCC software. However, using Control Rig, you can build dynamic animation rigs for characters and objects, enabling you to edit existing animations or create new animations within Unreal Engine. Using the Control Rig blueprint graph you can create dynamic rigs that can apply bone transforms to mesh skeletons. These animations can then be played in Sequencer or even baked as standalone assets that can be used in a runtime animation system.\n\nFor more information about using Control Rig to animate characters in Unreal Engine, see the following documentation:\n\nUsing Unreal Engine's 2D animation tool set, Paper 2D, you can create traditional 2D characters or levels that are able to leverage the full capabilities of Unreal Engine's world rendering to create dynamic high-fidelity 2D and 2D / 3D hybrid projects. Paper 2D contains a suite of tools and editors that you can use to edit 2D textures, within the framework of Unreal Engine's modern light, world, and physics simulation.\n\nFor more information about creating traditional 2D and modern hybrid style projects using Paper 2D in Unreal Engine, see the following documentation:"
    },
    {
        "link": "https://forums.unrealengine.com/t/how-to-play-animations-by-code/337609",
        "document": "How can I play animations strictly from C++?\n\nI see this asked a lot here but never fully answered. I’ve asked similar questions before. Here are the ground rules: NO use of animation blueprints NO use of animation state machines ONLY C++ calls to play, blend, and manage animation assets We..."
    },
    {
        "link": "https://forums.unrealengine.com/t/animation-basics-help-me-understand-the-ue-animation-system/248479",
        "document": "Create. Cpp animation class.\n\n Instantiate it as a variable within the character.\n\nCast to it on begin play and on construction - do check that the skeletal mesh exists and the ABP is assigned.\n\nThis can crash out still if the ABP on the character doesn’t use the proper cpp class.\n\n But generally speaking it allows you to push values to the ABP even from blueprint.\n\nThe alternative (crash proof) is to store the Animation Blueprint as a variable.\n\n Since it’s a pointer.\n\nThen in BP you can check that is valid and cast to the proper ABP on begin play. Save out the cast as a custom variable to push animation changes via BP.\n\n@FatariGames\n\n One important thing that wasn’t mentioned here at all is fast path.\n\nThe way the default templates are setup basically prevents fastpath.\n\nIn fact they aren’t “examples” they are mostly a guide on “what not to do when using this engine, but we at epic do it anyway, cuz we so cool”.\n\nIn short.\n\n You want 0 code executed on the animation blueprint.\n\n Nothing at all. Not even an And statement apparently.\n\nYou make transition between states either happen with the Automatic checkmark - which is the only way to do animation time remaining in fast path.\n\n Or a boolean which can have a !not as an exception to the And/Or rule.\n\nAny Offsets or Bone manipulations etc. cannot have their Pins broken.\n\n (breaking a pin simply means setting only what you need out of X/Y/Z, which anyone with a brain would think is Kosher and perhaps even faster, But apparently not.)\n\n If you want to change the Z of a vector to move a bone up/down, you have to pass it a full on vector.\n\n This affects how you need to create the CPP animation blueprint variables.\n\n You can’t create and use a simple float because it’s all you need. You have to create a vector because that’s what Epic forces fastpath to use (for now? I’m hopeful they’ll eventually see the error of their ways in maybe 10 years when they go broke?).\n\nSo, to answer your initial question.\n\n I’d your states are Idle and Wave, you need to first create a statemachine within the animation blueprint.\n\n Then create the 2 states.\n\n Then set a way for the transition between the 2 states to happen.\n\nI’d you want this to happen from cpp code, you would then create a class for the character.\n\n Change the character patented class to the one you created (make sure to derive it from character or you’ll get issues).\n\n You then need to create an anim instance class. And change the animation blueprint class parenting.\n\nWith that done, you can initialize variables in CPP for the animation BP.\n\n Make a bool, call it bWave. Set it to false in the creation (you don’t need to).\n\n You may need to make it blueprint callable, so you got to look up the correct header you need for that.\n\nIn engine compile.\n\n In the ABP you should now be able to pull a Get for the boolean to set your state transition up.\n\nOnce that’s done you need to get your character cpp to alter that variable directly where it’s at.\n\nAs such you need to get skeletal mesh, save it. Make sure it’s valid.\n\n Get the mesh animation instance. Make sure it’s valid.\n\n Cast to the animation class.\n\n Make sure it’s a valid cast.\n\n And finally, storing that value you can then ->bWave = true (or false) wherever you like.\n\n2 hour setup the first time you do it. That’s for sure."
    },
    {
        "link": "https://forums.unrealengine.com/t/animmontage-and-animnotify-callback-to-code/3405",
        "document": "After over a year in maintenance mode, the official Unreal Engine Wiki is now permanently offline. These resources now live on a new community-run Unreal Engine Community Wiki — https://unrealcommunity.wiki/! You will be able to find content from..."
    }
]