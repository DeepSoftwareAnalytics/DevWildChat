[
    {
        "link": "https://stackoverflow.com/questions/63012346/how-to-activate-virtual-environment-in-vscode-when-running-scripts-are-disabled",
        "document": "It seems that it is going to activate the environment through a powershell script. And running such scripts is turned off by default. Also, usually a virtual environment is activated through cmd and .bat script. You could either turn on running powershell script or make VS Code activate an environment through cmd and file.\n\nThe first way - using cmd instead of Powershell\n\nI just checked it in my PC and VS Code doesn't use Powershell at all. It activate an environment with cmd instead of Powershell. Probably it is worth to check VS Code settings, set cmd as a default terminal. It is probably such an option in the main settings.json (you can open it through and type 'open settings (JSON)'): .\n\nThe second way - changing Powershell execution policy\n\nIn order to change Powershell execution policy you can add to your main VS Code settings. Also you can open a Powershell window as administrator and type the following:\n\nThen respond to any questions."
    },
    {
        "link": "https://code.visualstudio.com/docs/python/environments",
        "document": "An \"environment\" in Python is the context in which a Python program runs that consists of an interpreter and any number of installed packages.\n\nBy default, any Python interpreter installed runs in its own global environment. For example, if you just run , , or at a new terminal (depending on how you installed Python), you're running in that interpreter's global environment. Any packages that you install or uninstall affect the global environment and all programs that you run within it.\n\nThere are two types of environments that you can create for your workspace: virtual and conda. These environments allow you to install packages without affecting other environments, isolating your workspace's package installations.\n\nA virtual environment is a built-in way to create an environment. A virtual environment creates a folder that contains a copy (or symlink) to a specific interpreter. When you install packages into a virtual environment it will end up in this new folder, and thus isolated from other packages used by other workspaces.\n\nA conda environment is a Python environment that's managed using the package manager (see Getting started with conda).Choosing between conda and virtual environments depends on your packaging needs, team standards, etc.\n\nThe following table lists the various tools involved with Python environments:\n\nTo create local environments in VS Code using virtual environments or Anaconda, you can follow these steps: open the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)), search for the Python: Create Environment command, and select it.\n\nThe command presents a list of environment types: Venv or Conda.\n\nIf you are creating an environment using Venv, the command presents a list of interpreters that can be used as a base for the new virtual environment.\n\nIf you are creating an environment using Conda, the command presents a list of Python versions that can be used for your project.\n\nAfter selecting the desired interpreter or Python version, a notification will show the progress of the environment creation and the environment folder will appear in your workspace.\n\nIf you choose to create a virtual environment manually, use the following command (where \".venv\" is the name of the environment folder):\n\nWhen you create a new virtual environment, a prompt will be displayed in VS Code to allow you to select it for the workspace.\n\nThe Python extension automatically detects existing conda environments. We recommend you install a Python interpreter into your conda environment, otherwise one will be installed for you after you select the environment. For example, the following command creates a conda environment named with a Python 3.9 interpreter and several libraries:\n• If you create a new conda environment while VS Code is running, use the refresh icon on the top right of the Python: Select Interpreter window; otherwise you may not find the environment there.\n• To ensure the environment is properly set up from a shell perspective, use an Anaconda prompt and activate the desired environment. Then, you can launch VS Code by entering the command. Once VS Code is open, you can select the interpreter either by using the Command Palette or by clicking on the status bar.\n• Although the Python extension for VS Code doesn't currently have direct integration with conda files, VS Code itself is a great YAML editor.\n• Conda environments can't be automatically activated in the VS Code Integrated Terminal if the default shell is set to PowerShell. To change the shell, see Integrated terminal - Terminal profiles.\n• You can manually specify the path to the executable to use for activation (version 4.4+). To do so, open the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)) and run Preferences: Open User Settings. Then set , which is in the Python extension section of User Settings, with the appropriate path.\n\nThe Python extension tries to find and then select what it deems the best environment for the workspace. If you would prefer to select a specific environment, use the Python: Select Interpreter command from the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)).\n\nThe Python: Select Interpreter command displays a list of available global environments, conda environments, and virtual environments. (See the Where the extension looks for environments section for details, including the distinctions between these types of environments.) The following image, for example, shows several Anaconda and CPython installations along with a conda environment and a virtual environment ( ) that's located within the workspace folder:\n\nIf you have a folder or a workspace open in VS Code and you select an interpreter from the list, the Python extension will store that information internally. This ensures that the same interpreter will be used when you reopen the workspace.\n\nThe selected environment is used by the Python extension for running Python code (using the Python: Run Python File in Terminal command), providing language services (auto-complete, syntax checking, linting, formatting, etc.) when you have a file open in the editor, and opening a terminal with the Terminal: Create New Terminal command. In the latter case, VS Code automatically activates the selected environment.\n\nThe selected interpreter version will show on the right side of the Status Bar.\n\nThe Status Bar also reflects when no interpreter is selected.\n\nIn either case, clicking this area of the Status Bar is a convenient shortcut for the Python: Select Interpreter command.\n\nIf VS Code doesn't automatically locate an interpreter you want to use, you can browse for the interpreter on your file system or provide the path to it manually.\n\nYou can do so by running the Python: Select Interpreter command and select the Enter interpreter path... option that shows on the top of the interpreters list:\n\nYou can then either enter the full path of the Python interpreter directly in the text box (for example, \".venv/Scripts/python.exe\"), or you can select the Find... button and browse your file system to find the python executable you wish to select.\n\nIf you want to manually specify a default interpreter that will be used when you first open your workspace, you can create or modify an entry for the setting.\n\nAdditionally, if you'd like to set up a default interpreter to all of your Python applications, you can add an entry for manually inside your User Settings. To do so, open the Command Palette (⇧⌘P (Windows, Linux Ctrl+Shift+P)) and enter Preferences: Open User Settings. Then set , which is in the Python extension section of User Settings, with the appropriate interpreter.\n\nHow the extension chooses an environment automatically\n\nIf an interpreter hasn't been specified, then the Python extension automatically selects the interpreter with the highest version in the following priority order:\n• Virtual environments related to the workspace but stored globally. For example, Pipenv or Poetry environments that are located outside of the workspace folder.\n• Globally installed interpreters. For example, the ones found in , , etc.\n\nIf Visual Studio Code doesn't locate your interpreter automatically, you can manually specify an interpreter.\n\nWhere the extension looks for environments\n\nThe extension automatically looks for interpreters in the following locations, in no particular order:\n• Standard install paths such as , , , , etc.\n• Virtual environments located in the folder identified by the setting (see General Python settings), which can contain multiple virtual environments. The extension looks for virtual environments in the first-level subfolders of .\n• Virtual environments located in the path identified by (as used by virtualenvwrapper).\n• Conda environments found by . Conda environments which do not have an interpreter will have one installed for them upon selection.\n• Interpreters installed in a folder for direnv under the workspace folder.\n\nAfter using Python: Select Interpreter, that interpreter is applied when right-clicking a file and selecting Python: Run Python File in Terminal. The environment is also activated automatically when you use the Terminal: Create New Terminal command unless you change the setting to .\n\nPlease note that launching VS Code from a shell in which a specific Python environment is activated doesn't automatically activate that environment in the default Integrated Terminal.\n\nChanging interpreters with the Python: Select Interpreter command doesn't affect terminal panels that are already open. Thus, you can activate separate environments in a split terminal: select the first interpreter, create a terminal for it, select a different interpreter, then use the split button (⌘\\ (Windows, Linux Ctrl+Shift+5)) in the terminal title bar.\n\nBy default, the debugger will use the Python interpreter chosen with the Python extension. However, if there is a property specified in the debug configuration of , it takes precedence. If this property is not defined, it will fall back to using the Python interpreter path selected for the workspace.\n\nFor more details on debug configuration, see Debugging configurations.\n\nAn environment variable definitions file is a text file containing key-value pairs in the form of , with used for comments. Multiline values aren't supported, but references to previously defined environment variables are allowed. Environment variable definitions files can be used for scenarios such as debugging and tool execution (including linters, formatters, IntelliSense, and testing tools), but aren't applied to the terminal.\n\nBy default, the Python extension looks for and loads a file named in the current workspace folder, then applies those definitions. The file is identified by the default entry in your user settings (see General Python settings). You can change the setting at any time to use a different definitions file.\n\nA debug configuration also contains an property that also defaults to the file in the current workspace (see Debugging - Set configuration options). This property allows you to easily set variables for debugging purposes that replace variables specified in the default file.\n\nFor example, when developing a web application, you might want to easily switch between development and production servers. Instead of coding the different URLs and other settings into your application directly, you could use separate definitions files for each. For example:\n\nYou can then set the setting to , then set the property in the debug configuration to .\n\nUse of the PYTHONPATH variable\n\nThe PYTHONPATH environment variable specifies additional locations where the Python interpreter should look for modules. In VS Code, PYTHONPATH can be set through the terminal settings ( ) and/or within an file.\n\nWhen the terminal settings are used, PYTHONPATH affects any tools that are run within the terminal by a user, as well as any action the extension performs for a user that is routed through the terminal such as debugging. However, in this case when the extension is performing an action that isn't routed through the terminal, such as the use of a linter or formatter, then this setting won't have an effect on module look-up.\n• Editing code - Learn about autocomplete, IntelliSense, formatting, and refactoring for Python.\n• Debugging - Learn to debug Python both locally and remotely.\n• Settings reference - Explore the full range of Python-related settings in VS Code.\n• Getting Started with Python in VS Code - Learn how to edit, run, and debug code in VS Code.\n• Virtual Environments and Packages (Python.org) - Learn more about virtual environments and packages.\n• Python tutorial (Python.org) - Learn more about the Python language."
    },
    {
        "link": "https://stackoverflow.com/questions/54106071/how-can-i-set-up-a-virtual-environment-for-python-in-visual-studio-code",
        "document": "When I run command select python interpreter in Visual Studio Code, my venv folder is not shown. I went one level up like suggested here , but Visual Studio Code doesn't see my virtual interpreter.\n• None I have been using Visual Studio Code for a while now and found an another way to show virtual environments in Visual Studio Code.\n• None Go to the parent folder in which is there through a command prompt.\n• None Type and . [It is working on both Windows and Linux for me.]\n• None That should also show the virtual environments present in that folder. I almost run into same problem every time I am working on Visual Studio Code using venv. I follow the below steps:\n• None Under Files:Association, in the JSON: Schemas section, you will find Edit in settings.json. Click on that.\n• None Update under workspace settings. (For Windows): Update under workspace settings.\n• None Restart Visual Studio Code in case if it still doesn't show your venv. Note: Use instead of for older versions.\n\nWith a newer Visual Studio Code version it's quite simple. You'll then see the following dialog: Click ; and your venv is ready to go. Open a new terminal within VSCode + + and you'll see that venv is getting picked up; e.g.: You can now instal packages as usual, e.g., To keep track of what is installed: For the older versions of VSCode you may also need to do the following: And select the option (in my case towards the bottom) Activate.ps1 is not digitally signed. You cannot run this script on the current system. you'll need to do the following: https://stackoverflow.com/a/18713789/2705777 For more information see: Global, virtual, and conda environments You can now instal packages as usual, e.g., . For Jupyter, you need to do more - Jupyter notebooks in Visual Studio Code does not use the active virtual environment\n\nThis is an addition to Sumit S Chawla's answer that, though it is correct, is missing the fact that anytime you open a folder in Visual Studio Code, it creates a .vscode folder, but those can be multiple, created any time you eventually open a directory. The .vscode folder has JSON objects that content properties such \"setting.json\", in which one declare the interpreter to use at that the \".vscode\" level (refer to What is a 'workspace' in Visual Studio Code? for more clarifications). So potentially you could open Visual Studio Code at another level in the virtual environment. It creates another .vscode folder that assume as Python directory those of the global machine and so having such an error, and has I experienced has nothing to do if the virtual environment is activated or not. This is indeed what happened to me. I have indeed a DjangoRESTAPI_GEN folder in which I initially opened the IDE and it did recognize the virtual environment Python path. Then a few days after I opened it at the level where Git is, so it did create another .vscode folder, that picked the global Python Interpreter, causing my lint in the virtual environment not been used. And the virtual env interpreter did not even show in \"select python interpreter\". But as written, opening the IDE at the level where the .vscode folder, that has the settings.json file with the correct path, it does. Once you set the correct path in the setting.json file and select the virtual environment interpreter, then Visual Studio Code will automatically activate the virtual environment in its terminal:\n\nWith Visual Studio Code, a task within can be configured to build a python environment with python modules listed in the and upgrade within that virtual environment. To create the task, goto Terminal -> Configure Tasks. If there is no existing in your environment, create file from template -> then click other and copy and paste the json below. This file will be located in the folder in your environment: . This task is agnostic to Operating Systems such as Windows, Linux, and MacOS. With Windows' ecosystem of command-line applications, is used in conjunction with the flags and to ensure that the environment created by the task is correct. As mentioned by Neil in his post, you can either select after the dialog prompt or select the python interpreter via the command palette. { \"version\": \"2.0.0\", \"tasks\": [ { \"label\": \"Build Python Env\", \"type\": \"shell\", \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"options\": { \"cwd\": \"${workspaceFolder}\" }, \"linux\": { \"command\": \"python3 -m venv py_venv && source py_venv/bin/activate && python3 -m pip install --upgrade pip && python3 -m pip install -r requirements.txt && deactivate py_venv\" }, \"osx\": { \"command\": \"python3 -m venv py_venv && source py_venv/bin/activate && python3 -m pip install --upgrade pip && python3 -m pip install -r requirements.txt && deactivate py_venv\" }, \"windows\": { \"options\": { \"shell\": { \"executable\": \"C:\\\\Windows\\\\system32\\\\cmd.exe\", \"args\": [ \"/d\", \"/c\" ] }, }, \"command\": \"(if not exist py_venv py -m venv py_venv) && .\\\\py_venv\\\\Scripts\\\\activate.bat && py -m pip install --upgrade pip && py -m pip install -r requirements.txt && deactivate py_venv\" }, \"problemMatcher\": [] } ] } The task labeled Build Python Env is demonstrated to install a Python environment with numpy and pandas indicated as dependencies in example below: If more python packages are added to the , then re-running the task will install the new additional dependencies to the python virtual environment\n\nBy setting EVERYTHING up in Visual Studio Code, your virtual environment will not have the configuration that you want. First use GitBash and type these commands to create your virtual environment. This assumes you are in the correct folder where Python was installed. If you are in a different folder, then type the full path of python.exe instead of the command python3. Now configure this new virtual environment in Visual Studio Code: Depending on the version of Python, the subfolders to python.exe might vary a bit. So manually navigate to the path to confirm the path."
    },
    {
        "link": "https://docs.python.org/3/library/venv.html",
        "document": "The module supports creating lightweight “virtual environments”, each with their own independent set of Python packages installed in their directories. A virtual environment is created on top of an existing Python installation, known as the virtual environment’s “base” Python, and may optionally be isolated from the packages in the base environment, so only those explicitly installed in the virtual environment are available.\n\nWhen used from within a virtual environment, common installation tools such as pip will install Python packages into a virtual environment without needing to be told to do so explicitly.\n\nA virtual environment is (amongst other things):\n• None Used to contain a specific Python interpreter and software libraries and binaries which are needed to support a project (library or application). These are by default isolated from software in other virtual environments and Python interpreters and libraries installed in the operating system.\n• None Contained in a directory, conventionally named or in the project directory, or under a container directory for lots of virtual environments, such as .\n• None Not checked into source control systems such as Git.\n• None Considered as disposable – it should be simple to delete and recreate it from scratch. You don’t place any project code in the environment.\n• None Not considered as movable or copyable – you just recreate the same environment in the target location.\n\nSee PEP 405 for more background on Python virtual environments.\n\nVirtual environments are created by executing the module: This creates the target directory (including parent directories as needed) and places a file in it with a key pointing to the Python installation from which the command was run. It also creates a (or on Windows) subdirectory containing a copy or symlink of the Python executable (as appropriate for the platform or arguments used at environment creation time). It also creates a subdirectory (on Windows, this is ). If an existing directory is specified, it will be re-used. Changed in version 3.5: The use of is now recommended for creating virtual environments. Deprecated since version 3.6, removed in version 3.8: pyvenv was the recommended tool for creating virtual environments for Python 3.3 and 3.4, and replaced in 3.5 by executing directly. On Windows, invoke the command as follows: The command, if run with , will show the available options: usage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear] [--upgrade] [--without-pip] [--prompt PROMPT] [--upgrade-deps] [--without-scm-ignore-files] ENV_DIR [ENV_DIR ...] Creates virtual Python environments in one or more target directories. positional arguments: ENV_DIR A directory to create the environment in. options: -h, --help show this help message and exit --system-site-packages Give the virtual environment access to the system site-packages dir. --symlinks Try to use symlinks rather than copies, when symlinks are not the default for the platform. --copies Try to use copies rather than symlinks, even when symlinks are the default for the platform. --clear Delete the contents of the environment directory if it already exists, before environment creation. --upgrade Upgrade the environment directory to use this version of Python, assuming Python has been upgraded in-place. --without-pip Skips installing or upgrading pip in the virtual environment (pip is bootstrapped by default) --prompt PROMPT Provides an alternative prompt prefix for this environment. --upgrade-deps Upgrade core dependencies (pip) to the latest version in PyPI --without-scm-ignore-files Skips adding SCM ignore files to the environment directory (Git is supported by default). Once an environment has been created, you may wish to activate it, e.g. by sourcing an activate script in its bin directory. Changed in version 3.4: Installs pip by default, added the and options. Changed in version 3.4: In earlier versions, if the target directory already existed, an error was raised, unless the or option was provided. Changed in version 3.9: Add option to upgrade pip + setuptools to the latest on PyPI. Changed in version 3.12: is no longer a core venv dependency. Changed in version 3.13: now creates a file for Git by default. While symlinks are supported on Windows, they are not recommended. Of particular note is that double-clicking in File Explorer will resolve the symlink eagerly and ignore the virtual environment. On Microsoft Windows, it may be required to enable the script by setting the execution policy for the user. You can do this by issuing the following PowerShell command: See About Execution Policies for more information. The created file also includes the key, set to if is run with the option, otherwise. Unless the option is given, will be invoked to bootstrap into the virtual environment. Multiple paths can be given to , in which case an identical virtual environment will be created, according to the given options, at each provided path.\n\nWhen a Python interpreter is running from a virtual environment, and point to the directories of the virtual environment, whereas and point to those of the base Python used to create the environment. It is sufficient to check to determine if the current interpreter is running from a virtual environment. A virtual environment may be “activated” using a script in its binary directory ( on POSIX; on Windows). This will prepend that directory to your , so that running python will invoke the environment’s Python interpreter and you can run installed scripts without having to use their full path. The invocation of the activation script is platform-specific ( must be replaced by the path to the directory containing the virtual environment): Added in version 3.8: PowerShell activation scripts installed under POSIX for PowerShell Core support. You don’t specifically need to activate a virtual environment, as you can just specify the full path to that environment’s Python interpreter when invoking Python. Furthermore, all scripts installed in the environment should be runnable without activating it. In order to achieve this, scripts installed into virtual environments have a “shebang” line which points to the environment’s Python interpreter, . This means that the script will run with that interpreter regardless of the value of . On Windows, “shebang” line processing is supported if you have the Python Launcher for Windows installed. Thus, double-clicking an installed script in a Windows Explorer window should run it with the correct interpreter without the environment needing to be activated or on the . When a virtual environment has been activated, the environment variable is set to the path of the environment. Since explicitly activating a virtual environment is not required to use it, cannot be relied upon to determine whether a virtual environment is being used. Because scripts installed in environments should not expect the environment to be activated, their shebang lines contain the absolute paths to their environment’s interpreters. Because of this, environments are inherently non-portable, in the general case. You should always have a simple means of recreating an environment (for example, if you have a requirements file , you can invoke using the environment’s to install all of the packages needed by the environment). If for any reason you need to move the environment to a new location, you should recreate it at the desired location and delete the one at the old location. If you move an environment because you moved a parent directory of it, you should recreate the environment in its new location. Otherwise, software installed into the environment may not work as expected. You can deactivate a virtual environment by typing in your shell. The exact mechanism is platform-specific and is an internal implementation detail (typically, a script or shell function will be used).\n\nThe high-level method described above makes use of a simple API which provides mechanisms for third-party virtual environment creators to customize environment creation according to their needs, the class. The class accepts the following keyword arguments on instantiation:\n• None system_site_packages – a boolean value indicating that the system Python site-packages should be available to the environment (defaults to ).\n• None clear – a boolean value which, if true, will delete the contents of any existing target directory, before creating the environment.\n• None symlinks – a boolean value indicating whether to attempt to symlink the Python binary rather than copying.\n• None upgrade – a boolean value which, if true, will upgrade an existing environment with the running Python - for use when that Python has been upgraded in-place (defaults to ).\n• None with_pip – a boolean value which, if true, ensures pip is installed in the virtual environment. This uses with the option.\n• None prompt – a string to be used after virtual environment is activated (defaults to which means directory name of the environment would be used). If the special string is provided, the basename of the current directory is used as the prompt.\n• None upgrade_deps – Update the base venv modules to the latest on PyPI\n• None scm_ignore_files – Create ignore files based for the specified source control managers (SCM) in the iterable. Support is defined by having a method named . The only value supported by default is via . may be used as a base class. Create a virtual environment by specifying the target directory (absolute or relative to the current directory) which is to contain the virtual environment. The method will either create the environment in the specified directory, or raise an appropriate exception. The method of the class illustrates the hooks available for subclass customization: env_dir is the target directory to create an environment in. Each of the methods , , , and can be overridden. Creates the environment directory and all necessary subdirectories that don’t already exist, and returns a context object. This context object is just a holder for attributes (such as paths) for use by the other methods. If the is created with the arg , contents of the environment directory will be cleared and then all necessary subdirectories will be recreated. The returned context object is a with the following attributes:\n• None - The location of the virtual environment. Used for in activation scripts (see ).\n• None - The name of the virtual environment. Used for in activation scripts (see ).\n• None - The prompt to be used by the activation scripts. Used for in activation scripts (see ).\n• None - The underlying Python executable used by the virtual environment. This takes into account the case where a virtual environment is created from another virtual environment.\n• None - The include path for the virtual environment.\n• None - The purelib path for the virtual environment.\n• None - The script path for the virtual environment.\n• None - The name of the script path relative to the virtual environment location. Used for in activation scripts (see ).\n• None - The name of the Python interpreter in the virtual environment. Used for in activation scripts (see ).\n• None - The name of the Python interpreter, taking into account filesystem redirections. This can be used to run Python in the virtual environment. Changed in version 3.11: The venv sysconfig installation scheme is used to construct the paths of the created directories. Changed in version 3.12: The attribute was added to the context, and the context object was documented. Creates the configuration file in the environment. Creates a copy or symlink to the Python executable in the environment. On POSIX systems, if a specific executable was used, symlinks to and will be created pointing to that executable, unless files with those names already exist. Installs activation scripts appropriate to the platform into the virtual environment. Upgrades the core venv dependency packages (currently pip) in the environment. This is done by shelling out to the executable in the environment. Changed in version 3.12: setuptools is no longer a core venv dependency. A placeholder method which can be overridden in third party implementations to pre-install packages in the virtual environment or perform other post-creation steps. This method can be called from or in subclasses to assist in installing custom scripts into the virtual environment. path is the path to a directory that should contain subdirectories , , ; each containing scripts destined for the directory in the environment. The contents of and the directory corresponding to are copied after some text replacement of placeholders:\n• None is replaced with the absolute path of the environment directory.\n• None is replaced with the environment name (final path segment of environment directory).\n• None is replaced with the prompt (the environment name surrounded by parentheses and with a following space)\n• None is replaced with the name of the bin directory (either or ).\n• None is replaced with the absolute path of the environment’s executable. The directories are allowed to exist (for when an existing environment is being upgraded). Creates a file within the virtual environment that causes the entire directory to be ignored by the Git source control manager. Changed in version 3.7.2: Windows now uses redirector scripts for instead of copying the actual binaries. In 3.7.2 only does nothing unless running from a build in the source tree. Changed in version 3.7.3: Windows copies the redirector scripts as part of instead of . This was not the case in 3.7.2. When using symlinks, the original executables will be linked. There is also a module-level convenience function: Create an with the given keyword arguments, and call its method with the env_dir argument.\n\nAn example of extending ¶ The following script shows how to extend by implementing a subclass which installs setuptools and pip into a created virtual environment: This builder installs setuptools and pip so that you can pip or easy_install other packages into the created virtual environment. :param nodist: If true, setuptools and pip are not installed into the :param nopip: If true, pip is not installed into the created :param progress: If setuptools or pip are installed, the progress of the installation can be monitored by passing a progress callable. If specified, it is called with two context indicating where the string is coming from. The context argument can have one of three values: 'main', indicating that it is called from virtualize() itself, and 'stdout' and 'stderr', which are obtained by reading lines from the output streams of a subprocess which is used to install the app. If a callable is not specified, default progress Set up any packages which need to be pre-installed into the :param context: The information for the virtual environment Read lines from a subprocess' output stream and either pass to a progress callable (if specified) or write progress information to sys.stderr. :param context: The information for the virtual environment # clear up the setuptools archive which gets downloaded :param context: The information for the virtual environment 'environments in one or ' 'A directory in which to create the ' \"Don't install setuptools or pip in the \" 'Give the virtual environment access to the ' 'Try to use symlinks rather than copies, ' 'when symlinks are not the default for ' 'Delete the contents of the ' 'directory if it already ' 'from the scripts which ' 'you cannot supply --upgrade and --clear together.' This script is also available for download online."
    },
    {
        "link": "https://reddit.com/r/learnpython/comments/onf4l4/venv_with_visual_studio_code_how_to_run_it",
        "document": "I'm trying VSCode instead of PyCharm and I'm trying to use venv and I don't know what to do.\n\nhttps://code.visualstudio.com/docs/python/environments i have followed a little bit of this, so I created .venv environment directly in my project folder in vsc powershell terminal, there was no popup \"we noticed a new env... \" mentioned in docs, however after restarting vscode there was an option to choose a venv python interpreter Python 3.8.2 32-bit ('.venv': venv) instead of regular Python 3.8.2 32-bit.(Side note it also works with 'venv' instead of '.venv')\n\nAnd that's it after selecting that venv interpreter nothing changes, pip list is the same as normally in vsc powershell terminal I tried to activate venv in powershell terminal, nothing happens, deactivate is also not recognizable.\n\nHowever I can't import for example Flask 'Import \\\"Flask\\\" could not be resolved from source Pylance(reportMissingModuleSource) [1, 8]' same for matplotlib so it looks like venv is working.\n\nSo should I install everything (like mentioned Flask) outside of vscode in cmd like in this Corey Shafer tutorial https://www.youtube.com/watch?v=APOPm01BVrk so:\n\nopen cmd, create venv, activate, pip install x, deactivate, close cmd, open vscode choose venv interpreter and now it should run properly?\n\nWhat is the workflow?\n\nThere is also an error when I try to run just print('hello world')\n\n\"File C:\\Users\\x\\Desktop\\VSCode\\Web\\b_projects\\flask_basic\\venv\\Scripts\\Activate.ps1 cannot be loaded because the execution of scripts is disabled on this system. Please\n\nsee \"get-help about_signing\" for more details.\"\n\nhowever it print Hello World\n\nand another error (nothing to do with venv this time)\n\nEdit: found an answer to this bug, don't read anything below.\n\nin VSC Python terminal when I run print('Hello World') using shift+enter everything is fine, yet when I try to run it while clicking on 'play' button in right upper corner i get"
    },
    {
        "link": "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.5",
        "document": "The cmdlet changes PowerShell execution policies for Windows computers. For more information, see about_Execution_Policies. Beginning in PowerShell 6.0 for non-Windows computers, the default execution policy is and can't be changed. The cmdlet is available, but PowerShell displays a console message that it's not supported. An execution policy is part of the PowerShell security strategy. Execution policies determine whether you can load configuration files, such as your PowerShell profile, or run scripts. And, whether scripts must be digitally signed before they are run. The cmdlet's default scope is , which affects everyone who uses the computer. To change the execution policy for , start PowerShell with Run as Administrator. To display the execution policies for each scope, use . To see the effective execution policy for your PowerShell session use with no parameters.\n\nThis example shows how to set the execution policy for the local computer. The cmdlet uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the default scope value, . To view the execution policy settings, use the cmdlet with the List parameter.\n\nExample 2: Set an execution policy that conflicts with a Group Policy\n\nThis command attempts to set the scope's execution policy to . is more restrictive, but isn't the effective policy because it conflicts with a Group Policy. The policy is written to the registry hive . PS> Set-ExecutionPolicy -ExecutionPolicy Restricted -Scope LocalMachine Set-ExecutionPolicy : PowerShell updated your local preference successfully, but the setting is overridden by the Group Policy applied to your system. Due to the override, your shell will retain its current effective execution policy of \"AllSigned\". Contact your Group Policy administrator for more information. At line:1 char:20 + Set-ExecutionPolicy <<<< restricted PS> Get-ChildItem -Path HKLM:\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds Hive: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\PowerShell\\1\\ShellIds Name Property ---- -------- Microsoft.PowerShell Path : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe ExecutionPolicy : Restricted ScriptedDiagnostics ExecutionPolicy : Unrestricted The cmdlet uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the default scope value, . The cmdlet uses the Path parameter with the drive to specify registry location.\n\nExample 3: Apply the execution policy from a remote computer to a local computer\n\nThis command gets the execution policy object from a remote computer and sets the policy on the local computer. sends a Microsoft.PowerShell.ExecutionPolicy object down the pipeline. accepts pipeline input and doesn't require the ExecutionPolicy parameter. The cmdlet is executed at the local computer and sends the ScriptBlock to the remote computer. The ComputerName parameter specifies the remote computer, Server01. The ScriptBlock parameter runs on the remote computer. The object is sent down the pipeline to the . applies the execution policy to the local computer's default scope, .\n\nExample 4: Set the scope for an execution policy\n\nThis example shows how to set an execution policy for a specified scope, . The scope only affects the user who sets this scope. uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the . To view the execution policy settings, use the cmdlet with the List parameter. The effective execution policy for the user becomes .\n\nExample 5: Remove the execution policy for the current user\n\nThis example shows how use the execution policy to remove an execution policy for a specified scope. uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the . To view the execution policy settings, use the cmdlet with the List parameter.\n\nExample 6: Set the execution policy for the current PowerShell session\n\nThe scope only affects the current PowerShell session. The execution policy is saved in the environment variable and is deleted when the session is closed. The uses the ExecutionPolicy parameter to specify the policy. The Scope parameter specifies the value . To view the execution policy settings, use the cmdlet with the List parameter.\n\nExample 7: Unblock a script to run it without changing the execution policy\n\nThis example shows how the execution policy prevents you from running unsigned scripts. A best practice is to read the script's code and verify it's safe before using the cmdlet. The cmdlet unblocks scripts so they can run, but doesn't change the execution policy. PS> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine PS> Get-ExecutionPolicy RemoteSigned PS> .\\Start-ActivityTracker.ps1 .\\Start-ActivityTracker.ps1 : File .\\Start-ActivityTracker.ps1 cannot be loaded. The file .\\Start-ActivityTracker.ps1 is not digitally signed. The script will not execute on the system. For more information, see about_Execution_Policies at https://go.microsoft.com/fwlink/?LinkID=135170. At line:1 char:1 + .\\Start-ActivityTracker.ps1 + ~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess PS> Unblock-File -Path .\\Start-ActivityTracker.ps1 PS> Get-ExecutionPolicy RemoteSigned PS> .\\Start-ActivityTracker.ps1 Task 1: The uses the ExecutionPolicy parameter to specify the policy. The policy is set for the default scope, . The cmdlet shows that is the effective execution policy for the current PowerShell session. The script is executed from the current directory. The script is blocked by because the script isn't digitally signed. For this example, the script's code was reviewed and verified as safe to run. The cmdlet uses the Path parameter to unblock the script. To verify that didn't change the execution policy, displays the effective execution policy, . The script, is executed from the current directory. The script begins to run because it was unblocked by the cmdlet.\n\nSpecifies the scope that is affected by an execution policy. The default scope is . The effective execution policy is determined by the order of precedence as follows:\n• - Set by a Group Policy for all users of the computer\n• - Set by a Group Policy for the current user of the computer\n• - Default scope that affects all users of the computer The scope only affects the current PowerShell session. The execution policy is saved in the environment variable , rather than the registry. When the PowerShell session is closed, the variable and value are deleted. Execution policies for the scope are written to the registry hive . Execution policies for the scope are written to the registry hive ."
    },
    {
        "link": "https://community.spiceworks.com/t/automatically-and-silently-bypass-execution-policy-for-a-powershell-script/390116",
        "document": "I have a script that makes a folder structure. It runs fine when run from the file server, sometimes asking to bypass the execution policy then it runs. However this script needs to be run by certain users from a mapped share. When running it from a client machine I get: “script.ps1 cannot be loaded because running scripts is disabled on this system. See about_execution_Policies” Is there an line i can type at the start of the script to bypass this and allow it to run? Run With Powershell never lets the script do what it's intended to do Unable to Uninstall Application with Bash or Cmdlet\n\nAs powershell allows to do almost everything (including dangerous things), it’s safer to have this kind of behavior by default. When you launch Powershell (like from Win+R) you can do add a -executionpolicy Bypass (or the value you want) to set the execution policy But you can also go on the computers and set it manually by opening a PS console and use the Set-Executionpolicy command.\n\nOn the workstation in question simply set a different Execution Policy: This needs to be “Run as Administrator”. You can also set the Execution Policy in Group Policy. Problem is, without using -Force it won’t do it silently, it’ll still prompt. (just tested it) It’s a one time, global setting. You run it once and then never again. Or set it with Group Policy and it will be completely invisible.\n\nOn the workstation in question simply set a different Execution Policy: This needs to be “Run as Administrator”. You can also set the Execution Policy in Group Policy. Problem is, without using -Force it won’t do it silently, it’ll still prompt. (just tested it) It’s a one time, global setting. You run it once and then never again. Or set it with Group Policy and it will be completely invisible. 100% true, but imagine how some users would react to a box that comes up like this: When a -force just silences that dialogue and silences the support calls from a scary looking clicky box.\n\nyou could start the Powershell script with a batch script Although the idea is sound, I don’t like using one script to start another script. Especially when it’s 1 line… However the “-ExecutionPolicy Bypass” switch was exactly what I was going to suggest. You can use this method from a task schedule or from the powershell prompt itself.\n\nAs others have said, there are two explicit ways to do this.\n• Deploy a policy that sets the execution policy to remote signing, you will have to sign your scripts.\n• Make a .bat file that when launched will open powershell and run the command. The caveat here is that it is very important you get your switches correctly. If these need to be specific to the user running the script do NOT use -noprofile. If you want it to run silently in the background your batch file would look something like this. EDIT: if your file is located on another UNC path the file would look like this. -file “\\server\\folder\\script_name.ps1” These toggles will allow the user to execute the powershell script by double clicking a batch file. There will be no window, no copyright logo, and no user interactivity. The perks of this, is the user does not see the background noise. I have had to do this recently. It works without muddling with all users’ execution policies. Really makes you wonder how secure your environment is if you can run a script with -bypass flags. Also keep in mind things that would need administrative write access. But, what I have said above should point you in the right direction. Just make a .bat file with the one line of opening powershell. It feels clunky (it is) but it works."
    },
    {
        "link": "https://superuser.com/questions/106360/how-to-enable-execution-of-powershell-scripts",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://pdq.com/powershell/set-executionpolicy",
        "document": "The Set-ExecutionPolicy cmdlet changes the user preference for the Windows PowerShell execution policy.\n\nThe execution policy is part of the security strategy of Windows PowerShell. It determines whether you can load configuration files (including your Windows PowerShell profile) and run scripts, and it determines which scripts, if any, must be digitally signed before they will run. For more information, see about_Execution_Policies (http://go.microsoft.com/fwlink/?LinkID=135170).\n\nTo change the execution policy for the default (LocalMachine) scope, start Windows PowerShell with the \"Run as administrator\" option.\n• This value is\n• Default value is None\n\nSpecifies the new execution policy. The acceptable values for this parameter are: - Restricted. Does not load configuration files or run scripts. Restricted is the default execution policy. - AllSigned. Requires that all scripts and configuration files be signed by a trusted publisher, including scripts that you write on the local computer. - RemoteSigned. Requires that all scripts and configuration files downloaded from the Internet be signed by a trusted publisher. - Unrestricted. Loads all configuration files and runs all scripts. If you run an unsigned script that was downloaded from the Internet, you are prompted for permission before it runs. - Bypass. Nothing is blocked and there are no warnings or prompts. - Undefined. Removes the currently assigned execution policy from the current scope. This parameter will not remove an execution policy that is set in a Group Policy scope.\n• Default value is None\n\nSpecifies the scope of the execution policy. The default is LocalMachine. The acceptable values for this parameter are: - Process: The execution policy affects only the current Windows PowerShell process. - CurrentUser: The execution policy affects only the current user. - LocalMachine: The execution policy affects all users of the computer. To remove an execution policy from a particular scope, set the execution policy for that scope to Undefined.When the value of the Scope parameter is Process, the execution policy is saved in the PSExecutionPolicyPreference environment variable ($env:PSExecutionPolicyPreference), instead of the registry, and the variable is deleted when the process is closed. You cannot change the execution policy of the process by editing the variable.\n\nYou can pipe an execution policy object or a string that contains the name of an execution policy to Set-ExecutionPolicy .\n\nThis cmdlet does not return any output.\n• Set the shell execution policy: This command sets the user preference for the shell execution policy to RemoteSigned.\n• Set a shell execution policy that conflicts with the group policy: PS C:\\> -ExecutionPolicy Restricted : Windows PowerShell updated your local preference successfully, but the setting is overridden by the group policy applied to your system. Due to the override, your shell will retain its current effective execution policy of . Contact your group policy administrator more information. At line: char: + <<<< restricted This command attempts to set the execution policy for the shell to Restricted. The Restricted setting is written to the registry, but because it conflicts with a group policy, it is not effective, even though it is more restrictive than the group policy.\n• Apply the execution policy from a remote computer to the local computer: This command gets the execution policy from a remote computer and applies that execution policy to the local computer. The command uses the Invoke-Command cmdlet to send the command to the remote computer. Because you can pipe an ExecutionPolicy (Microsoft.PowerShell.ExecutionPolicy) object to Set-ExecutionPolicy , the Set-ExecutionPolicy command does not require an ExecutionPolicy parameter. The command uses the Force parameter to suppress the user prompt.\n• Set the scope for an execution policy: PS C:\\> -Scope CurrentUser -ExecutionPolicy AllSigned -Force PS C:\\> -List Scope ExecutionPolicy ----- --------------- MachinePolicy Undefined UserPolicy Undefined Undefined CurrentUser AllSigned LocalMachine RemoteSigned PS C:\\> AllSigned The second command uses the *List* parameter of the Get-ExecutionPolicy cmdlet to get the execution policies set in each scope. The results show that the execution policy that is set for the current user differs from the execution policy set for all users of the computer.This example shows how to set an execution policy for a particular scope. The first command uses the Set-ExecutionPolicy cmdlet to set an execution policy of AllSigned for the current user. It uses the Force parameter to suppress the user prompt.\n• Remove the execution policy for the current user: This command uses an execution policy value of Undefined to effectively remove the execution policy that is set for the current user scope. As a result, the execution policy that is set in Group Policy or in the LocalMachine (all users) scope is effective. If you set the execution policy in all scopes to Undefined and the Group Policy is not set, the default execution policy, Restricted, is effective for all users of the computer.\n• Set the execution policy for the current session: This command sets an execution policy of AllSigned for only the current Windows PowerShell session. This execution policy is saved in the PSExecutionPolicyPreference environment variable ($env:PSExecutionPolicyPreference), so it does not affect the value in the registry. The variable and its value are deleted when the current session is closed.\n• Unblock a script to run it without changing the execution policy:\n• The first command uses the **Set-ExecutionPolicy** cmdlet to change the execution policy to RemoteSigned.: The first command uses the **Set-ExecutionPolicy** cmdlet to change the execution policy to RemoteSigned.\n• The second command uses the Get-ExecutionPolicy cmdlet to get the effective execution policy in the session: The output shows that it is RemoteSigned.\n• The third command shows what happens when you run a blocked script in a Windows PowerShell session in which the execution policy is RemoteSigned: PS C:\\> .\\Start-ActivityTracker.ps1 .\\Start-ActivityTracker.ps1 : File .\\Start-ActivityTracker.ps1 cannot be loaded. The file .\\Start-ActivityTracker.ps1 is not digitally signed. The script will not execute on the system. more information, see about_Execution_Policies at http://go.microsoft.com/fwlink/?LinkID= . At line: char: + .\\Start-ActivityTracker.ps1 + ~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess The RemoteSigned policy prevents you from running scripts that are downloaded from the Internet unless they are digitally signed.\n• The fourth command uses the Unblock-File cmdlet to unblock the script so it can run in the session.Before running an **Unblock-File** command, read the script contents and verify that it is safe:\n• The fifth and sixth commands show the effect of the **Unblock-File** command: The **Unblock-File** command does not change the execution policy. However, it unblocks the script so it will run in Windows PowerShell.This example shows the effect of the RemoteSigned execution policy, which prevents you from running unsigned scripts that were downloaded from the Internet. It also shows how to use the Unblock-File cmdlet to unblock scripts, so that you can run them without changing the execution policy."
    },
    {
        "link": "https://stackoverflow.com/questions/27753917/how-do-you-successfully-change-execution-policy-and-enable-execution-of-powershe",
        "document": "The error message indicates that the setting you're trying to define via is overridden by a setting in another scope. Use to see which scope has which setting.\n\nAs you can see, both settings were defined despite the error, but the setting in the more specific scope ( ) still takes precedence, either preventing or allowing script execution.\n\nSince the default scope is the error could be caused by a setting in the or scope. However, a more common reason is that script execution was configured via a group policy (either local or domain).\n\nA local group policy can be modified by a local administrator via (Local Group Policy Editor) as described in this answer.\n\nA domain group policy cannot be superseded by local settings/policies and must be changed by a domain admin via (Group Policy Management) on a domain controller.\n\nFor both local and domain policies the setting can be defined as a computer setting:\n\nThe former are applied to computer objects, whereas the latter are applied to user objects. For local polices there is no significant difference between user and computer policies, because user policies are automatically applied to all users on the computer.\n\nA policy can have one of three states (or five states if you count the 3 settings available for the state Enabled separately):\n• Not Configured: policy does not control PowerShell script execution.\n• Enabled: allow PowerShell script execution.\n• Allow only signed scripts: allow execution of signed scripts only (same as ).\n• Allow local scripts and remote signed scripts: allow execution of all local scripts (signed or not) and of signed scripts from remote locations (same as ).\n• Allow all scripts: allow execution of local and remote scripts regardless of whether they're signed or not (same as ).\n\nChanges made via only become effective when local and domain policies are set to Not Configured (execution policy in the scopes and )."
    }
]