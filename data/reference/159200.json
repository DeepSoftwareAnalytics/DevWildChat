[
    {
        "link": "https://docs.oracle.com/javase/8/docs/api/java/lang/String.html",
        "document": "\n• Returns the length of this string. The length is equal to the number of Unicode code units in the string. the length of the sequence of characters represented by this object.\n• if, and only if, . Returnsif, and only if, is if is , otherwise\n• value at the specified index. An index ranges from to . The first value of the sequence is at index , the next at index , and so on, as for array indexing. Returns thevalue at the specified index. An index ranges fromto. The firstvalue of the sequence is at index, the next at index, and so on, as for array indexing. If the value specified by the index is a surrogate, the surrogate value is returned. - the index of the value. the value at the specified index of this string. The first value is at index . - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to . Returns the character (Unicode code point) at the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value specified at the given index is in the high-surrogate range, the following index is less than the length of this , and the value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the value at the given index is returned. - the index to the values the code point value of the character at the - if the argument is negative or not less than the length of this string.\n• values (Unicode code units) and ranges from to Returns the character (Unicode code point) before the specified index. The index refers tovalues (Unicode code units) and ranges fromto If the value at is in the low-surrogate range, is not negative, and the value at is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the value at is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned. - the index following the code point that should be returned the Unicode code point value before the given index. - if the argument is less than 1 or greater than the length of this string.\n• Returns the number of Unicode code points in the specified text range of this . The text range begins at the specified and extends to the at index . Thus the length (in s) of the text range is . Unpaired surrogates within the text range count as one code point each. - the index to the first of the text range. - the index after the last of the text range. the number of Unicode code points in the specified text range - if the is negative, or is larger than the length of this , or is larger than .\n• Returns the index within this that is offset from the given by code points. Unpaired surrogates within the text range given by and count as one code point each. - the index to be offset the index within this - if is negative or larger then the length of this , or if is positive and the substring starting with has fewer than code points, or if is negative and the substring before has fewer than the absolute value of code points.\n• Copies characters from this string into the destination character array. The first character to be copied is at index ; the last character to be copied is at index (thus the total number of characters to be copied is ). The characters are copied into the subarray of starting at index and ending at index: - index of the first character in the string to copy. - index after the last character in the string to copy. - the start offset in the destination array. - If any of the following is true:\n• is greater than the length of this string\n• Copies characters from this string into the destination byte array. Each byte receives the 8 low-order bits of the corresponding character. The eight high-order bits of each character are not copied and do not participate in the transfer in any way. The first character to be copied is at index ; the last character to be copied is at index . The total number of characters to be copied is . The characters, converted to bytes, are copied into the subarray of starting at index and ending at index: - Index of the first character in the string to copy - Index after the last character in the string to copy - The start offset in the destination array - If any of the following is true:\n• is greater than the length of this String\n• into a sequence of bytes using the named charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the named charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the given charset is unspecified. The class should be used when more control over the encoding process is required. - The name of a supported charset - If the named charset is not supported\n• into a sequence of bytes using the given Encodes thisinto a sequence of bytes using the given charset , storing the result into a new byte array. This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement byte array. The class should be used when more control over the encoding process is required. - The Charset to be used to encode the\n• into a sequence of bytes using the platform's default charset, storing the result into a new byte array. Encodes thisinto a sequence of bytes using the platform's default charset, storing the result into a new byte array. The behavior of this method when this string cannot be encoded in the default charset is unspecified. The class should be used when more control over the encoding process is required.\n• Compares this string to the specified object. The result is if and only if the argument is not and is a object that represents the same sequence of characters as this object. - The object to compare this against if the given object represents a equivalent to this string, otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of characters as the specified . This method synchronizes on the . - The to compare this against if this represents the same sequence of characters as the specified , otherwise\n• Compares this string to the specified . The result is if and only if this represents the same sequence of char values as the specified sequence. Note that if the is a then the method synchronizes on it. - The sequence to compare this against if this represents the same sequence of char values as the specified sequence, otherwise\n• to another , ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Compares thisto another, ignoring case considerations. Two strings are considered equal ignoring case if they are of the same length and corresponding characters in the two strings are equal ignoring case. Two characters and are considered the same ignoring case if at least one of the following is true:\n• The two characters are the same (as compared by the operator)\n• Applying the method to each character produces the same result\n• Applying the method to each character produces the same result - The to compare this against if the argument is not and it represents an equivalent ignoring case; otherwise\n• object is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if this object lexicographically precedes the argument string. The result is a positive integer if this object lexicographically follows the argument string. The result is zero if the strings are equal; returns exactly when the . Compares two strings lexicographically. The comparison is based on the Unicode value of each character in the strings. The character sequence represented by thisobject is compared lexicographically to the character sequence represented by the argument string. The result is a negative integer if thisobject lexicographically precedes the argument string. The result is a positive integer if thisobject lexicographically follows the argument string. The result is zero if the strings are equal;returnsexactly when the method would return This is the definition of lexicographic ordering. If two strings are different, then either they have different characters at some index that is a valid index for both strings, or their lengths are different, or both. If they have different characters at one or more index positions, let k be the smallest such index; then the string whose character at position k has the smaller value, as determined by using the < operator, lexicographically precedes the other string. In this case, returns the difference of the two character values at position in the two string -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case, returns the difference of the lengths of the strings -- that is, the value: If there is no index position at which they differ, then the shorter string lexicographically precedes the longer string. In this case,returns the difference of the lengths of the strings -- that is, the value: - the to be compared. the value if the argument string is equal to this string; a value less than if this string is lexicographically less than the string argument; and a value greater than if this string is lexicographically greater than the string argument.\n• with normalized versions of the strings where case differences have been eliminated by calling on each character. Compares two strings lexicographically, ignoring case differences. This method returns an integer whose sign is that of callingwith normalized versions of the strings where case differences have been eliminated by callingon each character. Note that this method does not take locale into account, and will result in an unsatisfactory ordering for certain locales. The java.text package provides collators to allow locale-sensitive ordering. - the to be compared. a negative integer, zero, or a positive integer as the specified String is greater than, equal to, or less than this String, ignoring case considerations.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this object to be compared begins at index and has length . The substring of other to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• There is some nonnegative integer k less than such that: k k - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string exactly matches the specified subregion of the string argument; otherwise.\n• Tests if two string regions are equal. A substring of this object is compared to a substring of the argument . The result is if these substrings represent character sequences that are the same, ignoring case if and only if is true. The substring of this object to be compared begins at index and has length . The substring of to be compared begins at index and has length . The result is if and only if at least one of the following is true:\n• is greater than the length of this object.\n• is greater than the length of the other argument.\n• is and there is some nonnegative integer k less than such that:\n• is and there is some nonnegative integer k less than such that: and: - the starting offset of the subregion in this string. - the starting offset of the subregion in the string argument. - the number of characters to compare. if the specified subregion of this string matches the specified subregion of the string argument; otherwise. Whether the matching is exact or case insensitive depends on the argument.\n• Tests if the substring of this string beginning at the specified index starts with the specified prefix. - where to begin looking in this string. if the character sequence represented by the argument is a prefix of the substring of this object starting at index ; otherwise. The result is if is negative or greater than the length of this object; otherwise the result is the same as the result of the expression\n• Tests if this string starts with the specified prefix. if the character sequence represented by the argument is a prefix of the character sequence represented by this string; otherwise. Note also that will be returned if the argument is an empty string or is equal to this object as determined by the method.\n• Tests if this string ends with the specified suffix. if the character sequence represented by the argument is a suffix of the character sequence represented by this object; otherwise. Note that the result will be if the argument is the empty string or is equal to this object as determined by the method.\n• object is computed as using arithmetic, where is the ith character of the string, is the length of the string, and indicates exponentiation. (The hash value of the empty string is zero.) Returns a hash code for this string. The hash code for aobject is computed asusingarithmetic, whereis theth character of the string,is the length of the string, andindicates exponentiation. (The hash value of the empty string is zero.) a hash code value for this object.\n• occurs in the character sequence represented by this object, then the index (in Unicode code units) of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string, then is returned. Returns the index within this string of the first occurrence of the specified character. If a character with valueoccurs in the character sequence represented by thisobject, then the index (in Unicode code units) of the first such occurrence is returned. For values ofin the range from 0 to 0xFFFF (inclusive), this is the smallest valuesuch that:is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. the index of the first occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index. If a character with value occurs in the character sequence represented by this object at an index no smaller than , then the index of the first such occurrence is returned. For values of in the range from 0 to 0xFFFF (inclusive), this is the smallest value k such that: is true. For other values of , it is the smallest value k such that: is true. In either case, if no such character occurs in this string at or after position , then is returned. is true. For other values of, it is the smallest valuesuch that:is true. In either case, if no such character occurs in this string at or after position, thenis returned. There is no restriction on the value of . If it is negative, it has the same effect as if it were zero: this entire string may be searched. If it is greater than the length of this string, it has the same effect as if it were equal to the length of this string: is returned. All indices are specified in values (Unicode code units). - the index to start the search from. the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to , or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string, then is returned. The is searched backwards starting at the last character. Returns the index within this string of the last occurrence of the specified character. For values ofin the range from 0 to 0xFFFF (inclusive), the index (in Unicode code units) returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string, thenis returned. Theis searched backwards starting at the last character. the index of the last occurrence of the character in the character sequence represented by this object, or if the character does not occur.\n• in the range from 0 to 0xFFFF (inclusive), the index returned is the largest value k such that: is true. For other values of , it is the largest value k such that: is true. In either case, if no such character occurs in this string at or before position , then is returned. Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index. For values ofin the range from 0 to 0xFFFF (inclusive), the index returned is the largest valuesuch that:is true. For other values of, it is the largest valuesuch that:is true. In either case, if no such character occurs in this string at or before position, thenis returned. All indices are specified in values (Unicode code units). - the index to start the search from. There is no restriction on the value of . If it is greater than or equal to the length of this string, it has the same effect as if it were equal to one less than the length of this string: this entire string may be searched. If it is negative, it has the same effect as if it were -1: -1 is returned. the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to , or if the character does not occur before that point.\n• Returns the index within this string of the first occurrence of the specified substring. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the first occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The returned index is the smallest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index from which to start the search. the index of the first occurrence of the specified substring, starting at the specified index, or if there is no such occurrence.\n• . Returns the index within this string of the last occurrence of the specified substring. The last occurrence of the empty string \"\" is considered to occur at the index value The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. the index of the last occurrence of the specified substring, or if there is no such occurrence.\n• Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index. The returned index is the largest value k for which: If no such value of k exists, then is returned. If no such value ofexists, thenis returned. - the substring to search for. - the index to start the search from. the index of the last occurrence of the specified substring, searching backward from the specified index, or if there is no such occurrence.\n• Returns a string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string. - if is negative or larger than the length of this object.\n• and extends to the character at index . Thus the length of the substring is . Returns a string that is a substring of this string. The substring begins at the specifiedand extends to the character at index. Thus the length of the substring is - if the is negative, or is larger than the length of this object, or is larger than .\n• Returns a character sequence that is a subsequence of this sequence. An invocation of this method of the form behaves in exactly the same way as the invocation behaves in exactly the same way as the invocation This method is defined so that the class can implement the interface. - if or is negative, if is greater than , or if is greater than\n• Concatenates the specified string to the end of this string. If the length of the argument string is , then this object is returned. Otherwise, a object is returned that represents a character sequence that is the concatenation of the character sequence represented by this object and the character sequence represented by the argument string. - the that is concatenated to the end of this . a string that represents the concatenation of this object's characters followed by the string argument's characters.\n• in this string with . Returns a string resulting from replacing all occurrences ofin this string with If the character does not occur in the character sequence represented by this object, then a reference to this object is returned. Otherwise, a object is returned that represents a character sequence identical to the character sequence represented by this object, except that every occurrence of is replaced by an occurrence of . \"mesquite in your cellar\".replace('e', 'o') returns \"mosquito in your collar\" \"the war of baronets\".replace('r', 'y') returns \"the way of bayonets\" \"sparring with a purple porpoise\".replace('p', 't') returns \"starring with a turtle tortoise\" \"JonL\".replace('q', 'x') returns \"JonL\" (no change) a string derived from this string by replacing every occurrence of with .\n• Tells whether or not this string matches the given regular expression An invocation of this method of the form str regex yields exactly the same result as the expression - the regular expression to which this string is to be matched if, and only if, this string matches the given regular expression - if the regular expression's syntax is invalid\n• Returns true if and only if this string contains the specified sequence of char values. - the sequence to search for true if this string contains , false otherwise\n• Replaces the first substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for the first match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the given regular expression with the given replacement. An invocation of this method of the form str regex repl yields exactly the same result as the expression Note that backslashes ( ) and dollar signs ( ) in the replacement string may cause the results to be different than if it were being treated as a literal replacement string; see . Use to suppress the special meaning of these characters, if desired. - the regular expression to which this string is to be matched - the string to be substituted for each match - if the regular expression's syntax is invalid\n• Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence. The replacement proceeds from the beginning of the string to the end, for example, replacing \"aa\" with \"b\" in the string \"aaa\" will result in \"ba\" rather than \"ab\". - The sequence of char values to be replaced\n• Splits this string around matches of the given regular expression The array returned by this method contains each substring of this string that is terminated by another substring that matches the given expression or is terminated by the end of the string. The substrings in the array are in the order in which they occur in this string. If the expression does not match any part of the input then the resulting array has just one element, namely this string. When there is a positive-width match at the beginning of this string then an empty leading substring is included at the beginning of the resulting array. A zero-width match at the beginning however never produces such empty leading substring. The parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit n is greater than zero then the pattern will be applied at most n - 1 times, the array's length will be no greater than n, and the array's last entry will contain all input beyond the last matched delimiter. If n is non-positive then the pattern will be applied as many times as possible and the array can have any length. If n is zero then the pattern will be applied as many times as possible, the array can have any length, and trailing empty strings will be discarded. The string , for example, yields the following results with these parameters: An invocation of this method of the form str. regex n yields the same result as the expression - the result threshold, as described above the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• Splits this string around matches of the given regular expression This method works as if by invoking the two-argument method with the given expression and a limit argument of zero. Trailing empty strings are therefore not included in the resulting array. The string , for example, yields the following results with these expressions: the array of strings computed by splitting this string around matches of the given regular expression - if the regular expression's syntax is invalid\n• joined together with a copy of the specified . Note that if an element is null, then is added. Returns a new String composed of copies of thejoined together with a copy of the specifiedNote that if an element is null, thenis added. - the delimiter that separates each element - the elements to join together. a new that is composed of the separated by the - If or is\n• composed of copies of the joined together with a copy of the specified . For example, List<String> strings = new LinkedList<>(); strings.add(\"Java\");strings.add(\"is\"); strings.add(\"cool\"); String message = String.join(\" \", strings); //message returned is: \"Java is cool\" Set<String> strings = new LinkedHashSet<>(); strings.add(\"Java\"); strings.add(\"is\"); strings.add(\"very\"); strings.add(\"cool\"); String message = String.join(\"-\", strings); //message returned is: \"Java-is-very-cool\" Note that if an individual element is , then is added. Returns a newcomposed of copies of thejoined together with a copy of the specifiedNote that if an individual element is, thenis added. - a sequence of characters that is used to separate each of the in the resulting - an that will have its joined together. a new that is composed from the argument - If or is\n• to lower case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto lower case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of lowercase mappings are in the following table: - use the case transformation rules for this locale\n• to lower case using the rules of the default locale. This is equivalent to calling . Converts all of the characters in thisto lower case using the rules of the default locale. This is equivalent to calling Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0131' is the LATIN SMALL LETTER DOTLESS I character. To obtain correct results for locale insensitive strings, use .\n• to upper case using the rules of the given . Case mapping is based on the Unicode Standard version specified by the may be a different length than the original . Converts all of the characters in thisto upper case using the rules of the given. Case mapping is based on the Unicode Standard version specified by the class. Since case mappings are not always 1:1 char mappings, the resultingmay be a different length than the original Examples of locale-sensitive and 1:M case mappings are in the following table. - use the case transformation rules for this locale\n• to upper case using the rules of the default locale. This method is equivalent to . Converts all of the characters in thisto upper case using the rules of the default locale. This method is equivalent to Note: This method is locale sensitive, and may produce unexpected results if used for strings that are intended to be interpreted locale independently. Examples are programming language identifiers, protocol keys, and HTML tags. For instance, in a Turkish locale returns , where '\\u0130' is the LATIN CAPITAL LETTER I WITH DOT ABOVE character. To obtain correct results for locale insensitive strings, use .\n• Returns a string whose value is this string, with any leading and trailing whitespace removed. If this object represents an empty character sequence, or the first and last characters of character sequence represented by this object both have codes greater than (the space character), then a reference to this object is returned. Otherwise, if there is no character with a code greater than in the string, then a object representing an empty string is returned. Otherwise, let k be the index of the first character in the string whose code is greater than , and let m be the index of the last character in the string whose code is greater than . A object is returned, representing the substring of this string that begins with the character at index k and ends with the character at index m-that is, the result of . This method may be used to trim whitespace (as defined above) from the beginning and end of a string. A string whose value is this string, with any leading and trailing white space removed, or this string if it has no leading or trailing white space.\n• This object (which is already a string!) is itself returned.\n• Converts this string to a new character array. a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string.\n• Returns a formatted string using the specified format string and arguments. The locale always used is the one returned by . - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification.\n• Returns a formatted string using the specified locale, format string, and arguments. - The locale to apply during formatting. If is then no localization is applied. - Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by . The behaviour on a argument depends on the conversion. - If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification\n• Returns the string representation of the argument. if the argument is , then a string equal to ; otherwise, the value of is returned.\n• Returns the string representation of the array argument. The contents of the character array are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the character array.\n• array argument. Returns the string representation of a specific subarray of thearray argument. The argument is the index of the first character of the subarray. The argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string. a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the specified subarray of the character array. - if is negative, or is negative, or is larger than .\n• a that contains the characters of the character array.\n• Returns the string representation of the argument. if the argument is , a string equal to is returned; otherwise, a string equal to is returned.\n• Returns the string representation of the argument. a string of length containing as its single character the argument .\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• argument. The representation is exactly the one returned by the method of one argument.\n• A pool of strings, initially empty, is maintained privately by the class . When the intern method is invoked, if the pool already contains a string equal to this object as determined by the method, then the string from the pool is returned. Otherwise, this object is added to the pool and a reference to this object is returned. It follows that for any two strings and , is if and only if is . All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the . a string that has the same contents as this string, but is guaranteed to be from a pool of unique strings."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-string-substring",
        "document": "The substring() method in Java is a powerful tool for extracting parts of a string. This method always returns a new string, and the original string remains unchanged because String is immutable in Java.\n\nIn this tutorial, we’ll cover its syntax, use cases, and potential pitfalls while providing practical examples and solutions to common errors.\n\nJava String substring method is overloaded and has two variants.\n• : This method returns a new string that is a substring of this string. The substring begins with the character at the specified index and extends to the end of this string.\n• : The substring begins at the specified beginIndex and extends to the character at index endIndex - 1. Thus the length of the substring is (endIndex - beginIndex).\n• Both the string substring methods can throw if any of the below conditions met.\n• if the beginIndex is negative\n• endIndex is larger than the length of this String object\n• beginIndex is inclusive and endIndex is exclusive in both substring methods.\n\nHere is a simple program for the substring in java.\n\nOutput of the above substring example program is:\n\nExample 2: Extracting from a List of Strings\n\nWe can use the method to check if a String is a palindrome or not.\n\nHere we are checking if the first letter and the last letter is the same or not. If they are not the same, return false. Otherwise, call the method again recursively passing the substring with the first and last letter removed.\n\nYou can checkout more string examples from our GitHub Repository.\n\nHere is a table comparing various use cases of the substring() method.\n• The is greater than the string length.\n\nExample of Error and Solution\n\nMisuse of with Null or Empty Strings\n\nSo, here is the final code block:\n\nSome practical Use Cases of\n\n1. How do you find the substring method in Java?\n\nThe method is a built-in function in Java’s String class. You can use to extract a portion of a string. Here’s an example code block to illustrate its usage:\n\n2. How to get a substring from a list in Java?\n\nYou can use Java Streams to extract substrings from a list:\n\n3. What is in Java?\n\nThe method in Java returns the character at a specified index in a string.\n\n4. How do I find the substring of a string?\n\n5. How do you extract part of a string in Java?\n\nThe method is the best way to extract parts of a string. Here’s an example of how to use it:\n\nAnother approach is using if you need multiple parts. Here’s an example of how to use it:\n\n6. What is the difference between and in Java?\n\nThe method extracts a single portion of a string, while divides a string into an array based on a delimiter.\n\n7. Can the substring method throw an exception?\n\nYes, can throw a if the indices are invalid. Always validate your indices before calling . Here’s an example of how to validate indices and avoid this exception:\n\nIn conclusion, extracting parts of a string in Java is a crucial skill for any developer. The method is a powerful tool for extracting a single portion of a string, while is useful for dividing a string into multiple parts based on a delimiter. It’s essential to understand the differences between these methods and how to use them effectively in your code.\n\nAdditionally, being aware of the potential for when using and taking steps to validate indices can help prevent errors in your code. By mastering these techniques, you’ll be able to manipulate strings with ease and write more efficient, effective code.\n\nFor further reading, check out these related Java tutorials:"
    },
    {
        "link": "https://geeksforgeeks.org/substring-in-java",
        "document": "In Java, substring() method of String class returns a substring from the given string. This method is most useful when you deal with text manipulation, parsing, or data extraction.\n• None This method either take 1 parameter or 2 parameters i.e. start and end value as arguments.\n• None In case, if the end parameter is not specified then the substring will end at the end of the string.\n\nExample 1: Here, we are using the substring(int begIndex) method to extract a substring from the given string starting at index 6 and ending at the end of the string. The substring begins at index 7, and since no endIndex is provided, it continues to the end of the string. begIndex is inclusive.\n\nExample 2: Here, we will use the String substring(begIndex, endIndex) method. This method will return the substring that begins with the character at the specified index and ends at endIndex – 1\n\nHere, the substring starts at index 0 and ends at index 12, but the character at index 12 is excluded.\n• Inclusive and Exclusive Indices method includes the starting index (inclusive) but excludes the ending index (exclusive). This is an important distinction when specifying the indices.\n• Index Out of Bounds Exception : If you provide an invalid index (negative or greater than the string’s length), the method will throw a"
    },
    {
        "link": "https://docs.oracle.com/javase/8/docs/api?java/lang/String.html",
        "document": "JavaScript is disabled on your browser.\n\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client. Link to Non-frame version."
    },
    {
        "link": "https://w3schools.com/java/ref_string_substring.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-remove-character-string",
        "document": "In this article, you’ll learn a few different ways to remove a character from a object in Java. Although the class doesn’t have a method, you can use variations of the method and the method to remove characters from strings.\n\nThe class has the following methods that you can use to replace or remove characters:\n• : Returns a new object that replaces all of the occurrences of in the given string with . You can also use the method, in the format , to return a new object that replaces a substring in the given string.\n• : Returns a new object that replaces the first substring that matches the regular expression in the given string with the replacement.\n• : Returns a new object that replaces each substring that matches the regular expression in the given string with the replacement.\n• : Returns a new object that contains a subsequence of characters currently contained in this sequence. The substring begins at the specified start and extends to the character at index end minus 1.\n\nNotice that the first argument for the and methods is a regular expression. You can use a regular expression to remove a pattern from a string.\n\nYou can remove all instances of a character from a string in Java by using the method to replace the character with an empty string. The following example code removes all of the occurrences of lowercase “ ” from the given string:\n\nYou can remove spaces from a string in Java by using the method to replace the spaces with an empty string. The following example code removes all of the spaces from the given string:\n\nYou can remove only the first occurrence of a character or substring from a string in Java by using the method to replace the character or substring with an empty string. The following example code removes the first occurrence of “ ” from the given string:\n\nRemove all the Lowercase Letters from a String in Java\n\nYou can use a regular expression to remove characters that match a given pattern from a string in Java by using the method to replace the characters with an empty string. The following example code removes all of the lowercase letters from the given string:\n\nRemove the Last Character from a String in Java\n\nThere is no specific method to replace or remove the last character from a string, but you can use the String substring() method to truncate the string. The following example code removes the last character from the given string:\n\nTry it out\n\nThe following example file defines a class that includes all of the method examples provided in this article, and prints out the results after invoking each method on the given string. You can use this example code to try it out yourself on different strings using different matching patterns and replacement values.\n\nIf you have Java installed, you can create a new file called and add the following code to the file:\n\nYou get the following output:\n\nEach method in the example class operates on the given string. The output shows that the characters specified in each method have been removed from the string.\n\nIn Java, enables regex pattern replacements. This method uses regular expressions to match patterns in the string and replace them with a specified replacement. Here’s an example of how to use to replace all digits in a string with asterisks:\n\nIn this example, the regular expression matches any digit. The method then replaces each matched digit with an asterisk ( ).\n\nYou can also read more about regular expressions in this tutorial on Regular Expression in Java - Java Regex Example.\n\nIn Java, strings are immutable, which means that once a string is created, its contents cannot be modified. This immutability is a fundamental property of the class in Java. When you attempt to modify a string, a new string object is created, and the original string remains unchanged. This behavior is in contrast to mutable objects, which can be modified after creation.\n\nThe immutability of strings in Java has several implications. For instance, when you use methods like , , or , a new string object is created, and the original string is not modified. This can be beneficial for thread safety and caching, as strings can be safely shared without worrying about their contents being modified.\n\nHowever, the immutability of strings can also lead to performance issues if not handled properly. For example, if you need to perform multiple modifications on a string, creating a new string object for each modification can be inefficient. To address this, Java provides the class, which is a mutable sequence of characters. Using can improve efficiency when performing multiple string modifications, as it allows you to modify the string without creating a new object for each change.\n\nYou can refer to this tutorial on Java strings for more details.\n\n1. How do you replace a character in a Java string?\n\n2. What is the difference between and ?\n\n3. Can I replace a string using regex in Java?\n\n4 Why is my Java string not changing after using ?\n\nJava strings are immutable, meaning they cannot be changed once created. This is important to keep in mind when using methods like , as they do not modify the original string but instead return a new string with the modifications. To see the effects of these methods, you must store the result in a variable or use it directly. Here’s an example:\n\n5. How can I replace multiple different substrings in a Java string?\n\nReplacing multiple substrings in a Java string can be achieved using two approaches: chaining multiple calls or utilizing regular expressions with . Let’s explore both methods with examples.\n\nThis approach involves calling the method multiple times on the original string, each time replacing a different substring. Here’s an example:\n\nIn this example, we first replace “Java” with “Python”, and then replace “coding” with “development”. The order of replacements does not matter in this case, as each replacement is independent of the others.\n\nAlternatively, you can use regular expressions to replace multiple substrings in a single call to . Here’s an example:\n\nIn this example, the regular expression “Java|coding” matches either “Java” or “coding”. The method then replaces each occurrence of these substrings with “Python”. This approach is more concise and efficient when dealing with multiple replacements.\n\nBoth methods are effective for replacing multiple substrings in a Java string. The choice between them depends on the complexity of the replacements and personal preference.\n\nIn this article, you learned various ways to remove characters from strings in Java using methods from the class, including and Continue your learning with more Java tutorials.\n\nPlease refer to these tutorials to learn more about String operations in Java:\n• Java String Replace: How to Replace Characters and Substrings\n• How to Use Operators in Java"
    },
    {
        "link": "https://geeksforgeeks.org/java-string-manipulation-best-practices-for-clean-code",
        "document": "In Java, a string is an object that represents a sequence of characters. It is a widely used data type for storing and manipulating textual data. The String class in Java is provided as a part of the Java standard library and offers various methods to perform operations on strings. Strings are fundamental to Java programming and find extensive usage in various applications, such as user input processing, text manipulation, output formatting, and more. Understanding the characteristics and capabilities of strings in Java is essential for effective string manipulation and developing robust Java applications. When working with Java strings, following best practices to ensure clean and maintainable code is necessary. Here are some essential best practices for string manipulation in Java.\n\n1. Use StringBuilder or StringBuffer for String Concatenation\n\nAvoid using the “+” operator repeatedly when concatenating multiple strings. This can create unnecessary string objects, leading to poor performance. Instead, use StringBuilder (or StringBuffer for thread safety) to efficiently concatenate strings.\n\nIf thread safety is not a concern, use StringBuilder instead of StringBuffer. StringBuilder is faster because it’s not synchronized.\n\nUse the Enhanced for Loop or StringBuilder for String Iteration: When iterating over characters in a string, use the enhanced for loop or StringBuilder to avoid unnecessary object creation.\n\nInstead of concatenating values using the “+” operator, use String formatting with placeholders (%s, %d, etc.) to improve readability and maintainability.\n\n4. Be Mindful of Unicode and Character Encoding\n\nJava uses Unicode to represent characters, which can result in unexpected behavior when dealing with different character encodings. Always be aware of the encoding when manipulating strings, especially when performing operations like substring, length, or comparing characters.\n\n5. Use the equals() Method for String Comparison\n\nWhen comparing string content, use the equals() method or its variants (equalsIgnoreCase(), startsWith(), endsWith(), etc.) instead of the “==” operator, which compares object references.\n\n6. Use StringBuilder or StringBuffer for String Modification\n\nIf you need to modify a string frequently, it’s more efficient to use StringBuilder (or StringBuffer for thread safety) instead of creating new string objects each time.\n\nCheck for null or empty strings before performing any string manipulation operations. This helps prevent NullPointerExceptions and ensures your code handles such cases gracefully.\n\nUse the trim() method to eliminate leading and trailing whitespaces from a string.\n\nUse the split() method to split a string into an array of substrings based on a specified delimiter.\n\nUse the toUpperCase() or toLowerCase() methods to convert a string to uppercase or lowercase, respectively\n\nUse the contains() method to check if a string contains a specific substring.\n\nUse the replace() or replaceAll() methods to replace occurrences of a substring with another string.\n\nUse the compareTo() method to compare two strings lexicographically.\n\nUse the valueOf() or toString() methods to convert other data types to strings.\n\nBelow is Java Source Code that demonstrates various string manipulation techniques based on the provided best practices:"
    },
    {
        "link": "https://stackoverflow.com/questions/22089524/removing-a-character-from-a-string-efficiently",
        "document": "I wrote this function as part of interview practice. This method removes a character from a given string.\n\nI was wondering how I could make this code more efficient when it comes to runtime/space. I think my code is O(n) and I'm not sure if I can increase the efficiency. However, perhaps using things such as StringBuffer or StringBuilder would increase it a bit? Not sure as I'm still a bit new to Java."
    },
    {
        "link": "https://stackoverflow.com/questions/4430112/how-do-i-remove-some-characters-from-my-string",
        "document": "You can use the method of the class.\n\nYou can form a character class consisting of the characters you want to delete. And the replacement string will be empty string .\n\nBut the characters you want to delete which you'll be putting in the character class might be regex meta-characters and hence need to be escaped. You can manually escape them as many answers show, alternatively you can use the method."
    },
    {
        "link": "https://baeldung.com/java-remove-replace-string-part",
        "document": "In this tutorial, we’re going to be looking at various means we can remove or replace part of a String in Java.\n\nWe’ll explore removing and/or replacing a substring using a String API, then using a StringBuilder API and finally using the StringUtils class of Apache Commons library.\n\nAs a bonus, we’ll also look into some common String replacement problems, such as replacing an exact word and removing all characters until a specific one.\n\nOne of the simplest and straightforward methods of replacing a substring is using the replace, replaceAll or replaceFirst of a String class.\n\nThe replace() method takes two arguments – target and replacement text:\n\nThe above snippet will yield this output:\n\nIf a regular expression is required in choosing the target, then the replaceAll() or replaceFirst() should be the method of choice. As their name implies, replaceAll() will replace every matched occurrence, while the replaceFirst() will replace the first matched occurrence:\n\nThe value of processed2 will be:\n\nIt’s because the regex supplied as regexTarget will only match the last occurrence of Baeldung. In all examples given above, we can use an empty replacement and it’ll effectively remove a target from a master.\n\nWe can also manipulate text in Java using the StringBuilder class. The two methods here are delete() and replace().\n\nWe can construct an instance of a StringBuilder from an existing String and then use the methods mentioned to perform the String manipulation as desired:\n\nNow we can remove the target with the delete():\n\nWe can as well use the replace() to update the master:\n\nOne apparent difference between using the StringBuilder and the String API is that we’ve to get the start and the stop index of the target String ourselves.\n\nAnother method we’ll consider is the Apache Commons library.\n\nFirst, let’s add the required dependency to our project:\n\nThe latest version of the library can be found here.\n\nThe StringUtils class has methods for replacing a substring of a String:\n\nThere is an overloaded variant of the replace() that takes an integer max parameter, which determines the number of occurrences to replace. We can also use the replaceIgnoreCase() if case-sensitivity is not a concern:\n\nNext, let’s look at some common String replacement problems.\n\nIn this example, we’ll learn how to replace an exact word inside a String.\n\nThe straightforward way to perform this replacement is using a regular expression with word boundaries.\n\nThe word boundary regular expression is \\b. Enclosing the desired word inside this regular expression will only match exact occurrences.\n\nFirst, let’s see how to use this regular expression with the String API:\n\nOnly the exact word will be replaced. Notice backward slash always needs to be escaped when working with regular expressions in Java.\n\nAn alternate way to do this replacement is using the RegExUtils class from the Apache Commons Library, which can be added as a dependency as we saw in the previous section:\n\nWhile both methods will yield the same result, deciding which one should be used will depend on our specific scenario.\n\n6. Removing All Characters Until a Specific One\n\nIn real-world projects, we sometimes need to remove all characters until a specific character from a String input. An example can quickly explain the problem:\n\nLet’s assume we have the above String input, and our task is to remove everything until the first equal (‘=‘) character. Therefore, our expected result is “Important Info: a=b”.\n\nThis is an “inclusive” scenario, as we remove the characters including the first equal character. Additionally, there is an “exclusive” scenario. Next, let’s see another example:\n\nGiven INPUT2, we aim to remove everything until the first ‘<‘ character exclusively. That is to say, we expect to see “<a, <b, c>>” as a result.\n\nNext, let’s solve the problem using different methods. Of course, we’ll discuss both inclusive and exclusive scenarios.\n\nFor simplicity, we’ll skip the input validation part and assume the input always contain at least one ‘=’ character.\n\nThe String.indexOf() method finds the first occurrence index of a String in another String. Also, the String.substring() method allows us to extract a substring from the input String by providing a beginIndex (inclusive) and optionally an endIndex (exclusive).\n\nNext, let’s combine these to standard methods to solve the problem:\n\nAs the code above shows, we initially used indexOf() to retrieve the index of the first ‘=‘ character in the input. Since we aim to remove the first ‘=‘ character as well, we applied “+ 1” to the index we obtained.\n\nSubsequently, we passed this calculated index to substring() as the beginIndex argument. It’s worth noting that as we didn’t specify the endIndex argument, substring() returns characters from beginIndex to the end of the input.\n\nIt’s not a challenge to adjust the solution to make it work for the “exclusive” scenario. If we want to exclude the target character, we just don’t apply “ + 1” to the indexOf() result:\n\nOur input can be considered as two parts separated by an ‘=‘ character:\n\nAnother idea to solve the problem is for us to split the input into two parts and take only the second part.\n\nThe split() method allows us to split an input String into multiple String values by providing a regex-based separator. Additionally, we can provide the limit argument to specify the desired number of elements in the resulting array. Since we aim to split the input into two parts, let’s pass 2 as the limit to split():\n\nIf we intend to use split() to address the “exclusive” scenario, we must provide split() a zero-width assertion regex, such as a positive lookahead assertion:\n\nThe “(?=<)” pattern asserts that the current position in the input String is followed by the character ‘<‘. However, it doesn’t include ‘<‘ in the overall match.\n\nWe’ve previously witnessed the effectiveness of regex-based replacement. This problem isn’t a challenge for regex-based replacement either.\n\nWe can use replaceFirst() to solve this problem. replaceFirst() works pretty similar to replaceAll(). The difference is, as its name tells, replaceFirst() applies the substitution on the match only once.\n\nSome might consider using replaceFirst() with the regex pattern “.*=”. Let’s see if this approach helps us achieve the desired outcome:\n\nAs the test above shows, after the replacement, we got “b” as the result. This is because ‘*‘ is a greedy quantifier. Thus, “.*=” matches anything up until the last ‘=‘ character in the input. This greedy matching is also a common pitfall.\n\nThere are several ways to address the “greedy matching” issue. One approach is to append a question mark after “.*“, to turn it into a non-greedy pattern:\n\nAs a non-greedy pattern, “.*?=” matches anything until the first equal character.\n\nAlternatively, we can use the negate operator (^) within a character class ([^=]) to match any character other than ‘=‘:\n\nFinally, let’s slightly adjust this solution to address the “exclusive” scenario:\n\nAs demonstrated, by excluding the target character from the pattern, we successfully solved the problem.\n\n7. Replacing the Last Occurrence of a Text\n\nSometimes, the input can contain the same text multiple times, but we only want to replace the last occurrence. Let’s say we have this String:\n\nNow, we want to replace the last “word” with “*WORD*” to have the following result:\n\nIn this section, let’s explore two different ways to achieve this.\n\nWe’ve learned replaceFirst() replaces the first occurrence with a desired replacement. However, we aim to replace the last occurrence of the target pattern. Therefore, if we can somehow transform the last occurrence into the first occurrence, then we can use the replaceFirst() method to solve the problem.\n\nFollowing this idea, we can reverse the input String to turn the last occurrence into the first one:\n\nHowever, as we can see, after reversing the input, the target text gets reversed: “word” becomes “drow”\n\nTherefore, we must reverse the target text and the replacement to call replaceFirst(). Of course, after calling replaceFirst(), we shouldn’t forget to reverse the result to get the expected result.\n\nThere are many ways to reverse a String in Java. Let’s create a method to use StringBuilder to perform the reverse operation:\n\nNext, let’s implement the logic we discussed earlier:\n\nAs the test above shows, this approach does the job.\n\nThe “reverse-replace-reverse” approach solves the problem. However, we have to reverse everything, such as the input, the target text, the replacement, and the result.\n\nAlternatively, we can achieve our goal in a more straightforward way using the lastIndexOf() method from the standard library:\n\nFinally, let’s walk through the code to understand how it works.\n\nFirst, we find the last occurrence using lastIndexOf() to locate the position of the last occurrence of the target word. Then, we divide and concatenate, dividing the input into two parts (before and after the last occurrence), and then concatenating them with the replacement: before + replacement + after.\n\nIn conclusion, we’ve explored multiple ways of removing and replacing a substring in Java. The best method to apply still largely depends on the current situation and context."
    }
]