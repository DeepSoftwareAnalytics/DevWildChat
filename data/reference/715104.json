[
    {
        "link": "https://geeksforgeeks.org/__init__-in-python",
        "document": "__init__ method in Python is used to initialize objects of a class. It is also called a constructor. It is like a default constructor in C++ and Java. Constructors are used to initialize the object’s state.\n\nThe task of constructors is to initialize (assign values) to data members of the class when an object of the class is created. Like methods, a constructor also contains a collection of statements(i.e. instructions) that are executed at the time of Object creation. It is run as soon as an object of a class is instantiated.\n• None In the above example, a person named Nikhil is created. While creating a person, “Nikhil” is passed as an argument, this argument will be passed to the __init__ method to initialize the object.\n• None The keyword self represents the instance of a class and binds the attributes with the given arguments. Similarly, many objects of the Person class can be created by passing different names as arguments.\n\nInheritance is the capability of one class to derive or inherit the properties from some other class. Let’s consider the below example to see how __init__ works in inheritance.\n\nSo, the parent class constructor is called first. But in Python, it is not compulsory that the parent class constructor will always be called first.\n\nThe order in which the __init__ method is called for a parent or a child class can be modified. This can simply be done by calling the parent class constructor after the body of the child class constructor.\n• What is the difference between __init__ and __call__?\n\nWhat is the\n\nThe method is defined within a class and typically includes the parameter, which refers to the instance being created, followed by any other parameters needed to initialize the object. class Person: def __init__(self, name, age): self.name = name self.age = age # Creating an instance of the Person class person = Person(\"Alice\", 30) print(person.name) # Output: Alice print(person.age) # Output: 30 In this example, the method initializes the and attributes of the class.\n\nWhat are Constructors in Python?\n\nHow to Initialize a New Object in Python?\n\nWhat are the Default Parameters in\n\nThe method can include default parameter values. This allows you to create objects with default attribute values if no arguments are provided for those parameters. class Dog: def __init__(self, name, breed=\"Mixed\", age=1): self.name = name self.breed = breed self.age = age # Creating an instance with default parameters dog1 = Dog(\"Buddy\") print(dog1.name) # Output: Buddy print(dog1.breed) # Output: Mixed print(dog1.age) # Output: 1 # Creating an instance with specified parameters dog2 = Dog(\"Max\", \"Golden Retriever\", 5) print(dog2.name) # Output: Max print(dog2.breed) # Output: Golden Retriever print(dog2.age) # Output: 5 In this example, the and parameters have default values. If these parameters are not provided when creating a object, the default values will be used."
    },
    {
        "link": "https://stackoverflow.com/questions/37019744/is-there-a-consensus-on-what-should-be-documented-in-the-class-and-init-docs",
        "document": "The class documentation should include the public components of the object. The parameters may or may not be public, so whether they are included in the class docstring or not depends on the object design.\n\nThe docstring for a class should summarize its behavior and list the public methods and instance variables. If the class is intended to be subclassed, and has an additional interface for subclasses, this interface should be listed separately (in the docstring). The class constructor should be documented in the docstring for its method. Individual methods should be documented by their own docstring.\n\nClasses should have a docstring below the class definition describing the class. If your class has public attributes, they should be documented here in an Attributes section and follow the same formatting as a function’s Args section.\n\nSo the documentation determination hinges on whether the parameters for are public. If the intention of the object is for users to construct their own instances, the parameters should be documented in the class docstring. However, if an object is constructed internally then returned to the user, the class documentation should only refer to the public aspects of the object.\n\nSo the following example from google suggest that the parameter from is public:\n\nHowever, below the public attribute is determined during based on two internal parameters and . So, is documented in the class docstring, while and are documented in the docstring."
    },
    {
        "link": "https://stackoverflow.com/questions/73678990/what-is-best-practice-for-creating-a-constructor-python",
        "document": "There are several interacting considerations here:\n• minor code differences such as using an attribute instead of a local\n\nSeparation of into it's own method (#3), with a name that documents it's purpose, clarifies and organises the code to make it quicker to understand and modify and potentially more robust (in principle, possibly of negligible difference in this case). Identifier names are arguably the single most important element of code documentation, in this case \"create snake\". I think this is a good argument for using snake case identifiers.\n\nAt this point in the development there's no indication whether will be called at any other time for this object, but if later you do need to again, for the same object, this separation of the code keeps it DRY (#2).\n\nIn Python, always returns . It's not a \"proper\" method from that point of view. Any failures inside the method will mean the object is not created, potentially requiring a wrapper (#1). Work should be minimised within (#1) for this reason.\n\nIn your implementation here, moving the code out into doesn't actually fix that, because it's still called from . This can be improved by calling after the object is created, but that slightly complicates the usage pattern, and may not be justified in this instance (depends on your planning).\n\nTo take this concept even further, you can create a practically empty object, and leave snake creation, and any other work, to lazy methods that are only called when needed. You can find further discussion on approaches.\n\nThere are other code considerations that may possibly be incidental to your core question (#4). For instance, there's no point in using an instance attribute ( ) when you never use that value after the method completes, because it just makes the object heavier and requires more variable look-ups. Depending on your wider code organisation, it may also be better to keep class related constants ( ) inside the class, rather than at the module level. I'm not stating that is the case for you; it depends very much on what your wider code is doing.\n\nAs an overall answer I'd say that your second approach is definitely better, and most probably good enough as well."
    },
    {
        "link": "https://geeksforgeeks.org/constructors-in-python",
        "document": "In Python, a constructor is a special method that is called automatically when an object is created from a class. Its main role is to initialize the object by setting up its attributes or state.\n\nThe method __new__ is the constructor that creates a new instance of the class while __init__ is the initializer that sets up the instance’s attributes after creation. These methods work together to manage object creation and initialization.\n\nThis method is responsible for creating a new instance of a class. It allocates memory and returns the new object. It is called before __init__.\n\nTo learn more, please refer to “__new__ ” method\n\nThis method initializes the newly created instance and is commonly used as a constructor in Python. It is called immediately after the object is created by __new__ method and is responsible for initializing attributes of the instance.\n\nNote: It is called after __new__ and does not return anything (it returns None by default).\n\nTo learn more, please refer to “__init__” method\n\nDifferences Between __init__ and __new__\n• None Responsible for creating a new instance of the class.\n• None Rarely overridden but useful for customizing object creation and especially in singleton or immutable objects.\n• None Used to initialize the created object.\n\nConstructors can be of two types.\n\nA default constructor does not take any parameters other than self. It initializes the object with default attribute values.\n\nA parameterized constructor accepts arguments to initialize the object’s attributes with specific values.\n\n1. What is the purpose of a constructor in Python?\n\n2. How is __init__ different from __new__?\n\n3. Can a class have both __new__ and __init__?\n\n4. Is it mandatory to define a constructor in every class?"
    },
    {
        "link": "https://mygreatlearning.com/blog/python-init",
        "document": "What is __init__ in Python?\n\nIn Python, is a special method known as the constructor. It is automatically called when a new instance (object) of a class is created. The method allows you to initialize the attributes (variables) of an object.\n\nHere’s an example to illustrate the usage of :\n\nThe python __init__ method is declared within a class and is used to initialize the attributes of an object as soon as the object is formed. While giving the definition for an __init__(self) method, a default parameter, named ‘self’ is always passed in its argument. This self represents the object of the class itself. Like in any other method of a class, in case of __init__ also ‘self’ is used as a dummy object variable for assigning values to the data members of an object.\n\nThe __init__ method is often referred to as double underscores init or dunder init for it has two underscores on each side of its name. These double underscores on both the sides of init imply that the method is invoked and used internally in Python, without being required to be called explicitly by the object. This is a crucial aspect of Python development services , as it allows for the seamless creation and initialization of objects within various applications.\n\nThis python __init__ method may or may not take arguments for object initialisation. You can also pass default arguments in its parameter. However, even though there is no such concept of Constructor Overloading in Python, one can still achieve polymorphism in the case of constructors in Python on the basis of its argument.\n\nAlso Read: Set in Python – How to Create a Set in Python?\n\nWe can declare a __init__ method inside a class in Python using the following syntax:\n\nLet’s take an example of a class named Teacher in Python and understand the working of __init__() method through it better.\n\nNow, for the scenarios where you are required to achieve polymorphism through __init__() method, you can go with the following syntax.\n\nIn this case, the type of argument passed in place of *args decide what kind of initialisation has to be followed. Take a look at the example given below to get some more clarity on this.\n\nThere are mainly three types of Python __init__ constructors:\n\nThe default __init__ constructor in Python is the constructor that does not accept any parameters, except for the ‘self’ parameter. The ‘self’ is a reference object for that class. The syntax for defining a default __init__ constructor is as follows:\n\nThe syntax for creating an object for a class with a default __init__ constructor is as follows:\n\nWhen we want to pass arguments in the constructor of a class, we make use of the parameterised __init__ method. It accepts one or more than one argument other than the self. The syntax followed while defining a parameterised __init__ constructor has been given below:\n\nWe declare an instance for a class with a parameterised constructor using the following syntax:\n\nAs you might already know, we can pass default arguments to a member function or a constructor, be it any popular programming language. In the very same way, Python also allows us to define a __init__ method with default parameters inside a class. We use the following syntax to pass a default argument in an __init__ method within a class.\n\nNow, go through the following example to understand how the __init__ method with default parameters works.\n\nAs discussed earlier in this blog and seen from the previous examples, __init__ method is used for initialising the attributes of an object for a class. We have also understood how constructor overloading can be achieved using this method. Now, let us see how this __init__ method behaves in case of inheritance.\n\nInheritance allows the child class to inherit the __init__() method of the parent class along with the other data members and member functions of that class. The __init__ method of the parent or the base class is called within the __init__ method of the child or sub class. In case the parent class demands an argument, the parameter value must be passed in the __init__ method of the child class as well as at the time of object creation for the child class.\n\nFrom the above output, we can trace the order in which the __init__ constructors have been called and executed. The object ‘t’ calls the constructor of the Teacher class, which transfers the control of the program to the constructor of the Person class. Once the __init__ of Person finishes its execution, the control returns to the constructor of the Teacher class and finishes its execution.\n\nSo, to sum it all up, __init__ is a reserved method for classes in Python that basically behaves as the constructors. In other words, this method in a Python class is used for initialising the attributes of an object. It is invoked automatically at the time of instance creation for a class. This __init__ constructor is invoked as many times as the instances are created for a class. We can use any of the three types of __init__ constructors – default, parameterised, __init__ with default parameter – as per the need of our programming module. The ‘self’ is a mandatory parameter for any member function of a class, including the __init__ method, as it is a reference to the instance of the class created.\n\nEven though Python does not support constructor overloading, the concept of constructor overloading can be implemented using the *args that are used for passing different numbers of arguments for different objects of a class. Furthermore, we can use the if-else statements for initialising the attributes according to the different types of arguments within the __init__ constructor. To know more about Classes and Objects in Python, you can check out this blog.\n\nWe have also seen how the __init__ method of a class works with inheritance. We can easily call the __init__ method of the base class within the __init__ method of the sub class. When an object for the subclass is created, the __init__ method of the sub class is invoked, which further invokes the __init__ method of the base class.\n\nEmbarking on a journey towards a career in data science opens up a world of limitless possibilities. Whether you’re an aspiring data scientist or someone intrigued by the power of data, understanding the key factors that contribute to success in this field is crucial. For those interested in continuing their learning journey, you can find a variety of free courses with certificates perfect for building new skills in Python and beyond. The below path will guide you to become a proficient data scientist."
    },
    {
        "link": "https://w3resource.com/python-exercises/math/python-math-exercise-6.php",
        "document": "Write a Python program to calculate the surface volume and area of a sphere.\n\n Note: A sphere is a perfectly round geometrical object in three-dimensional space that is the surface of a completely round ball.\n\nA sphere is a perfectly round geometrical object in three-dimensional space that is the surface of a completely round ball.\n\nIn three dimensions, the volume inside a sphere is derived to be V = 4/3*π*r3 where r is the radius of the sphere\n\nThe area of a sphere is A = 4*π*r2\n\nHave another way to solve this solution? Contribute your code (and comments) through Disqus.\n\nPrevious: Write a Python program to calculate surface volume and area of a cylinder.\n\n Next: Write a Python program to calculate arc length of an angle."
    },
    {
        "link": "https://tutorialspoint.com/python-program-to-calculate-the-volume-and-area-of-sphere",
        "document": "Python Program to calculate the volume and area of Sphere\n\nA sphere (solid) is usually considered a two-dimensional figure even though the figure is seen in three planes from its center. The main reason for this is that, a sphere is only measured using its radius.\n\nHowever, a hollow sphere is considered a three-dimensional figure since it contains space within its spherical walls and has two different radii to measure its dimensions.\n\nThe spherical figure only has total surface area since there is only one dimension to measure the entire object. The formula to calculate the surface area of a sphere is −\n\nThe volume of a sphere is considered as the mass held by the circular walls of the object. The formula to calculate volume of a sphere is given as −\n\nWhere, R is the radius of outer sphere and r is the radius of inner sphere.\n\nLet us look at some input output scenarios to calculate the area and volume of a sphere −\n\nAssume the area and volume to be found is of a solid sphere −\n\nAssume the area and volume to be found is of a hollow sphere −\n\nIn the python program, we use the discussed mathematical formulae and calculate the area and volume of the sphere. We import the match library to use the pi constant.\n\nFollowing is an example to find the area and volume of the spherical 3D figure −\n\nThe output is displayed as given below −\n\nPython also makes use of functions to improve modularity of the program. In this case, we use a function that calculates sphere’s area and volume.\n\nIn the following python program, we are calculating the area and volume of both solid and hollow spheres using a user-defined function −\n\nOn executing the above code, output is obtained as −"
    },
    {
        "link": "https://stackoverflow.com/questions/58357064/calculate-the-output-of-volume-and-surface-area-of-a-sphere",
        "document": "The volume and surface area of a sphere can be calculated with the following formulas. Create this as a terminal application. Write one function for volume and another function for surface area. The results should display both the volume and the surface area rounded to 2 decimal places. Use pi from Python’s math module. Include the following doctests. You must get pass all tests to receive full credit. Pay close attention to how you name your functions. They must match"
    },
    {
        "link": "https://w3resource.com/python-exercises/python-basic-exercise-15.php",
        "document": "Write a Python program to get the volume of a sphere with radius six.\n\nA sphere is a three-dimensional solid with no face, no edge, no base and no vertex. It is a round body with all points on its surface equidistant from the center. The volume of a sphere is measured in cubic units.\n\nThe volume of the sphere is : V = 4/3 × π × r3 = π × d3/6.\n\nThe said code assigns the value of pi as 3.1415926535897931 to the variable \"pi\" and 6.0 to the variable \"r\". The code uses the formula V = 4/3 * pi * r^3 to calculate the volume of a sphere. Volume of the sphere is stored in the variable \"V\".\n\nIt then prints the message \"The volume of the sphere is:\" followed by the volume of the sphere using print statement.\n\nIn this case, the code will output \"The volume of the sphere is: 904.7786842338603\".\n\nFor more Practice: Solve these Related Problems:\n• Write a Python program to calculate the surface area of a sphere given its radius.\n• Write a script that computes the volume of a cylinder given its radius and height.\n• Write a Python program to find the volume of a cone given its radius and height.\n• Write a script that finds the radius of a sphere when given its volume.\n\nPrevious: Write a Python program to calculate number of days between two dates.\n\n Next: Write a Python program to get the difference between a given number and 17, if the number is greater than 17 return double the absolute difference."
    },
    {
        "link": "https://stackoverflow.com/questions/16141065/python-3-write-class-to-return-surface-area-and-volume-of-sphere",
        "document": "Let me tell you about scopes:\n\nIn Python, variables are scoped, or limited, to the code that they are defined in. Take the below code for example:\n\nThis will give you a , because is local to and doesn't exist outside of .\n\nThis code will also give you a because is only defined in the scope of .\n\nNotice, however that in the above example, you have . It just so happens that is accessible in both functions. The value of is stored in for the express purpose of accessing it from within other functions inside the same class. Take the following modification, for example:\n\nThis code will run smoothly and return , the value of ."
    }
]