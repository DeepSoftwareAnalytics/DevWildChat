[
    {
        "link": "https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html",
        "document": "The class automatically handles creating instances for each host as needed. By default, it will keep a maximum of 10 instances. If you’re making requests to many different hosts it might improve performance to increase this number: However, keep in mind that this does increase memory and socket consumption. Similarly, the class keeps a pool of individual instances. These connections are used during an individual request and returned to the pool when the request is complete. By default only one connection will be saved for re-use. If you are making many requests to the same host simultaneously it might improve performance to increase this number: The behavior of the pooling for is different from . By default, if a new request is made and there is no free connection in the pool then a new connection will be created. However, this connection will not be saved if more than connections exist. This means that does not determine the maximum number of connections that can be open to a particular host, just the maximum number of connections to keep in the pool. However, if you specify then there can be at most connections open to a particular host: Any new requests will block until a connection is available from the pool. This is a great way to prevent flooding a host with too many connections in multi-threaded applications.\n\nWhen using (the default setting) the response body will be read immediately into memory and the HTTP connection will be released back into the pool without manual intervention. However, when dealing with large responses it’s often better to stream the response content using . Setting to means that urllib3 will only read from the socket when data is requested. When using , you need to manually release the HTTP connection back to the connection pool so that it can be re-used. To ensure the HTTP connection is in a valid state before being re-used all data should be read off the wire. You can call the to throw away unread data still on the wire. This call isn’t necessary if data has already been completely read from the response. After all data is read you can call to release the connection into the pool. You can call the to close the connection, but this call doesn’t return the connection to the pool, throws away the unread data on the wire, and leaves the connection in an undefined protocol state. This is desirable if you prefer not reading data from the socket to re-using the HTTP connection. lets you iterate over chunks of the response content. However, you can also treat the instance as a file-like object. This allows you to do buffering: Calls to will block until more response data is available. You can use this file-like object to do things like decode the content using :\n\nYou can use to tunnel requests through an HTTP proxy: The usage of is the same as . You can connect to a proxy using HTTP, HTTPS or SOCKS. urllib3’s behavior will be different depending on the type of proxy you selected and the destination you’re contacting. Both HTTP/HTTPS proxies support HTTP and HTTPS destinations. The only difference between them is if you need to establish a TLS connection to the proxy first. You can specify which proxy you need to contact by specifying the proper proxy scheme. (i.e or ) urllib3’s behavior will be different depending on your proxy and destination:\n• None Your request will be forwarded with the absolute URI.\n• None A TCP tunnel will be established with a HTTP CONNECT. Afterward a TLS connection will be established with the destination and your request will be sent.\n• None A TLS connection will be established to the proxy and later your request will be forwarded with the absolute URI.\n• None A TLS-in-TLS tunnel will be established. An initial TLS connection will be established to the proxy, then an HTTP CONNECT will be sent to establish a TCP connection to the destination and finally a second TLS connection will be established to the destination. You can customize the used for the proxy TLS connection through the argument of the class. For HTTPS proxies we also support forwarding your requests to HTTPS destinations with an absolute URI if the argument is set to . We strongly recommend you only use this option with trusted or corporate proxies as the proxy will have full visibility of your requests. Your proxy appears to only use HTTP and not HTTPS¶ If you’re receiving the and it mentions your proxy only speaks HTTP and not HTTPS here’s what to do to solve your issue: If you’re using directly, make sure the URL you’re passing into starts with instead of : If instead you’re using through another library like Requests there are multiple ways your proxy could be mis-configured. You need to figure out where the configuration isn’t correct and make the fix there. Some common places to look are environment variables like , , and . Ensure that the values for all of these environment variables starts with and not : $ env grep http://127.0.0.1:8888 https://127.0.0.1:8888 # <--- This setting is the problem! # Make the fix in your current session and test your script $ $ python test-proxy.py # Persist your change in your shell 'profile' (~/.bashrc, ~/.profile, ~/.bash_profile, etc) # You may need to logout and log back in to ensure this works across all programs. $ vim ~/.bashrc If you’re on Windows or macOS your proxy may be getting set at a system level. To check this first ensure that the above environment variables aren’t set then run the following: If the output of the above command isn’t empty and looks like this: # <--- This setting is the problem! Search how to configure proxies on your operating system and change the URL into . After you make the change the return value of should be: # Everything is good here! :) If you still can’t figure out how to configure your proxy after all these steps please join our community Discord and we’ll try to help you with your issue. For SOCKS, you can use to connect to SOCKS4 or SOCKS5 proxies. In order to use SOCKS proxies you will need to install PySocks or install urllib3 with the extra: Once PySocks is installed, you can use : It is recommended to use or schemes in your to ensure that DNS resolution is done from the remote server instead of client-side when connecting to a domain name.\n\nInstead of using certifi you can provide your own certificate authority bundle. This is useful for cases where you’ve generated your own certificates or when you’re using a private certificate authority. Just provide the full path to the certificate bundle when creating a : When you specify your own certificate bundle only requests that can be verified with that bundle will succeed. It’s recommended to use a separate to make requests to URLs that do not need the custom certificate.\n\nIf you want to create a connection to a host over HTTPS which uses SNI, there are two places where the hostname is expected. It must be included in the Host header sent, so that the server will know which host is being requested. The hostname should also match the certificate served by the server, which is checked by urllib3. Normally, urllib3 takes care of setting and checking these values for you when you connect to a host by name. However, it’s sometimes useful to set a connection’s expected Host header and certificate hostname (subject), especially when you are connecting without using name resolution. For example, you could connect to a server by IP using HTTPS like so: Note that when you use a connection in this way, you must specify . This is useful when DNS resolution for does not match the address that you would like to use. The IP may be for a private interface, or you may want to use a specific host under round-robin DNS.\n\nApple-provided Python and OpenSSL libraries contain a patches that make them automatically check the system keychain’s certificates. This can be surprising if you specify custom certificates and see requests unexpectedly succeed. For example, if you are specifying your own certificate for validation and the server presents a different certificate you would expect the connection to fail. However, if that server presents a certificate that is in the system keychain then the connection will succeed. This article has more in-depth analysis and explanation."
    },
    {
        "link": "https://urllib3.readthedocs.io/en/1.26.x/user-guide.html",
        "document": "First things first, import the urllib3 module: You’ll need a instance to make requests. This object handles all of the details of connection pooling and thread safety so that you don’t have to: returns a object, the Response Content section explains how to handle various responses. You can use to make requests using any HTTP verb: The Request Data section covers sending other kinds of requests data, including JSON, files, and binary data.\n\nThe object provides , , and attributes: JSON content can be loaded by decoding and deserializing the attribute of the request: The attribute of the response is always set to a byte string representing the response content: For larger responses, it’s sometimes better to stream the response. Sometimes you want to use or similar objects like a CSV reader directly with data. Making these two interfaces play nice together requires using the attribute by setting it to . By default HTTP responses are closed after reading all bytes, this disables that behavior:\n\nYou can specify headers as a dictionary in the argument in : For , , and requests, you can simply pass the arguments as a dictionary in the argument to : For and requests, you need to manually encode query parameters in the URL: For and requests, urllib3 will automatically form-encode the dictionary in the argument provided to : You can send a JSON request by specifying the encoded data as the argument and setting the header when calling : For uploading files using encoding you can use the same approach as Form Data and specify the file field as a tuple of : While specifying the filename is not strictly required, it’s recommended in order to match browser behavior. You can also pass a third item in the tuple to specify the file’s MIME type explicitly: For sending raw binary data simply specify the argument. It’s also recommended to set the header:\n\nHTTPS connections are now verified by default ( ). While you can disable certification verification by setting , it is highly recommend to leave it on. Unless otherwise specified urllib3 will try to load the default system certificate stores. The most reliable cross-platform method is to use the certifi package which provides Mozilla’s root certificate bundle: You can also install certifi along with urllib3 by using the extra: If you’re using Python 2 you may need additional packages. See the section below for more details. Once you have certificates, you can create a that verifies certificates when making requests: The will automatically handle certificate verification and will raise if verification fails: You can use OS-provided certificates if desired. Just specify the full path to the certificate bundle as the argument instead of . For example, most Linux systems store the certificates at . Other operating systems can be difficult. Older versions of Python 2 are built with an module that lacks SNI support and can lag behind security updates. For these reasons it’s recommended to use pyOpenSSL. If you install urllib3 with the extra, all required packages for certificate verification on Python 2 will be installed: If you want to install the packages manually, you will need , , , and . If you are not using macOS or Windows, note that cryptography requires additional system packages to compile. See building cryptography on Linux for the list of packages required. Once installed, you can tell urllib3 to use pyOpenSSL by using : Finally, you can create a that verifies certificates when performing requests: If you do not wish to use pyOpenSSL, you can simply omit the call to . urllib3 will fall back to the standard-library module. You may experience several warnings when doing this. If you do not use pyOpenSSL, Python must be compiled with ssl support for certificate verification to work. It is uncommon, but it is possible to compile Python without SSL support. See this StackOverflow thread for more details. If you are on Google App Engine, you must explicitly enable SSL support in your :\n\nTimeouts allow you to control how long (in seconds) requests are allowed to run before being aborted. In simple cases, you can specify a timeout as a to : For more granular control you can use a instance which lets you specify separate connect and read timeouts: If you want all requests to be subject to the same timeout, you can specify the timeout at the level: You still override this pool-level timeout by specifying to .\n\nurllib3 can automatically retry idempotent requests. This same mechanism also handles redirects. You can control the retries using the parameter to . By default, urllib3 will retry requests 3 times and follow up to 3 redirects. To change the number of retries just specify an integer: To disable all retry and redirect logic specify : To disable redirects but keep the retrying logic, specify : For more granular control you can use a instance. This class allows you far greater control of how requests are retried. For example, to do a total of 3 retries, but limit to only 2 redirects: You can also disable exceptions for too many redirects and just return the response: If you want all requests to be subject to the same retry policy, you can specify the retry at the level: You still override this pool-level retry policy by specifying to ."
    },
    {
        "link": "https://github.com/urllib3/urllib3/issues/1682",
        "document": "Hi! I'm using 2.22.0 and 1.25.4.\n\nIn requests, I need to disable certificate verification because we use self signed certificates. I create a object and set its property to , which used to worked perfectly fine until 1.25.4.\n\nThis is the stacktrace\n\nI tried installing 1.25.3 and there is no issue. It seems like the SSL error was introduced in 1.25.4."
    },
    {
        "link": "https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho",
        "document": "I am writing scripts in Python2.6 with use of pyVmomi and while using one of the connection methods:\n\nI get the following warning:\n\nWhat's interesting is that I do not have urllib3 installed with pip (but it's there in /usr/lib/python2.6/site-packages/requests/packages/urllib3/).\n\nI have tried as suggested here\n\nbut that didn't change anything."
    },
    {
        "link": "https://github.com/Esri/arcgis-python-api/issues/1349",
        "document": "Describe the bug\n\n When creating a \"gis\" with 'verify_cert' to True, I am getting warnings from urllib3 to add certificate verification.\n\nTo Reproduce\n\n Steps to reproduce the behavior:\n\nExpected behavior\n\n No warning should appear out of the box and best security practice should be implemented.\n\n More info:\n\n https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings\n\nPlatform (please complete the following information):"
    },
    {
        "link": "https://stackoverflow.com/questions/27981545/suppress-insecurerequestwarning-unverified-https-request-is-being-made-in-pytho",
        "document": "I am writing scripts in Python2.6 with use of pyVmomi and while using one of the connection methods:\n\nI get the following warning:\n\nWhat's interesting is that I do not have urllib3 installed with pip (but it's there in /usr/lib/python2.6/site-packages/requests/packages/urllib3/).\n\nI have tried as suggested here\n\nbut that didn't change anything."
    },
    {
        "link": "https://stackoverflow.com/questions/68445066/how-to-fix-insecurerequestwarning-unverified-https-request-is-being-made-to-hos",
        "document": "I am trying to download a zip file from url, but I get the below warning\n\nI read about this a bit and most of the threads revolves around how to disable it (if you know what you are doing) and the general concept as a whole. From what I understood, isn't library capable of performing certificate validation by default? Why should I make a secured request to a open source file? I am exposing myself to something here, and how can I fix this ?\n\nApparently this warning only turns up when I use , shouldn't it actually prevent this warning?\n\nSorry for asking too many questions, but I am trying to understand what's happening here. Please correct me if I have misunderstood the concept."
    },
    {
        "link": "https://github.com/4teamwork/ftw.linkchecker/issues/57",
        "document": "InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings\n\n InsecureRequestWarning)\n\nPlease check if we can do something about this."
    },
    {
        "link": "https://github.com/Screenly/screenly-ose/issues/529",
        "document": ""
    },
    {
        "link": "https://medium.com/@balakrishna0106/tls-warnings-in-urllib3-679775a4c36c",
        "document": "When you’re working on web applications in Python, securing your connections is very important. One of the libraries you might use for this purpose is , which helps you make HTTP requests. \n\nHowever, sometimes will give you warnings related to TLS (Transport Layer Security) certificate verification. \n\nThese warnings are there to alert you about potential security issues. In this article, we will focus on one specific warning called and discuss how to handle it effectively.\n\nThe appears when you make a request to an HTTPS URL without enabling certificate verification. This usually happens during development or when you're trying to connect to a server with a self-signed certificate. \n\nWhile it might be tempting to ignore this warning, it's crucial to understand the risks involved in making unverified HTTPS requests.\n\nTo fix this warning, the best approach is to enable certificate verification. This ensures that you’re connecting to the right server and that your connection is secure. Here are a few ways to manage these warnings:"
    }
]