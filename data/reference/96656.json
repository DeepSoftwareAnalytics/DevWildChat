[
    {
        "link": "https://medium.com/hackernoon/how-to-build-a-multiplayer-browser-game-4a793818c29b",
        "document": "I built this game on a node.js backend using WebSockets to provide real time communication between the clients and the server. The game itself was rendered on an HTML5 canvas on the client side. To get started, you’ll of course need node.js. For this post, I’ll be using node.js version 6.3.1, but you can follow along with almost any version (above 0.12) and it should be fine.\n\nLet’s get started with dependencies first. Create a directory for your project and run the following inside it:\n\nWe’ll be using the Express framework to quickly set up the server, and the socket.io package to handle WebSockets on the server. Put the following in a file named :\n\nThe code above is a pretty standard node.js server using the Express framework. It sets up dependencies and the basic routing for the server. For this demo application, we’re only going to serve a single and directory. Create a directory named and an file in the root project folder. The HTML file is pretty basic so we’ll write that now:\n\nFor larger scale projects, you should put CSS styles in a separate dedicated stylesheet. You might also have more UI and display elements. For simplicity, I’m going to keep the CSS in the HTML code. Note that I’ve also included a script. This is automatically be provided by the socket.io package when the server is hosted.\n\nNow we’ll do some setup on the server for the WebSockets. Add this line to the end of :\n\nWe don’t have any functionality for it yet, so just leave this as is for now. For testing, add the following lines to the end of :\n\nThis will send a message to all connected sockets with the name ‘message’ and the content ‘hi’. Remember to remove this snippet later since it’s just for testing.\n\nCreate a file called in the directory. We can write a quick function to log the messages from the server in order to verify that we’re receiving them. Put the following in :\n\nRun the server (using the command ) and navigate to http://localhost:5000 in any web browser. You’ll notice a message appear every second if you open the developer console (Right Click -> Inspect).\n\nIn general, will send a message with the given name and data to the server if it is called on the client, and vice versa if it is called on the server. To listen for messages with a specific name, you need to create an event handler that looks like this:\n\nYou can send just about anything using . You can pass JSON objects as well into the data parameter, which is super handy for us. This allows us to send game information back and forth between the server and clients instantaneously, forming the backbone of most of the multiplayer functionality.\n\nLet’s have the client send some keyboard states. Put the following code at the end of :\n\nThis is some basic code for an input handler to track when the WASD keys are pressed. After this bit, we’ll add a message to alert the server that a new player has joined and create a loop to constantly send their keyboard input to the server.\n\nThis will send the keyboard state of this client 60 times a second to the server. Now we need to handle this input on the server. Add the following to the end of the :\n\nLet’s break this down. We’re going to store all connected players as JavaScript dictionaries (JSON objects). Since each socket connected to the server has a unique ID, we can use that ID to identify the players as well. Each key in the dictionary will be the socket ID of the connected player’s socket, and the value will be another dictionary containing an x and y position.\n\nWhen the server receives a ‘new player’ message, it will add a new entry into the players object using the ID of the socket that sent that message. When the server receives a ‘movement’ message, it will update the player associated with that socket (if one exists).\n\nis a call that will send the given message and data out to ALL connected sockets. The server will be sending out its state to all connected clients 60 times a second.\n\nAt this point, the client doesn’t really do anything with this information, so lets add a handler on the client side to draw the data on the server to the HTML5 canvas. Add this code to the end of :\n\nThis code accesses the canvas and draws to it. Each time a ‘state’ message is received from the server, the client will clear the canvas and redraw all the players as a green circle on the canvas.\n\nAny client that connects will now be able to draw the state of all connected players onto the canvas. Run the server (again using the command ) and open two tabs in your web browser. If you navigate to http://localhost:5000, you should see behavior similar to this:"
    },
    {
        "link": "https://hackernoon.com/how-to-build-a-multiplayer-browser-game-4a793818c29b",
        "document": "Back in 2014, I went to my first CodeDay in NYC. Though CodeDay isn’t exactly a hackathon, it was my first experience with hackathon-like events. At this event, I built a multiplayer tank battle game with my friend Kenneth Li. Since a few of my friends have expressed interest in how I built it, I thought I’d document the process here.\n\nIn this post, I’ll run through a quick overview of my thought process and give an walkthrough of how to replicate the architecture, as well as providing tips and tricks if you want to try doing this yourself. This post assumes you have knowledge of the basics of JavaScript and node.js. If you don’t, there are a lot of great online resources to learn the above.\n\nI built this game on a node.js backend using WebSockets to provide real time communication between the clients and the server. The game itself was rendered on an HTML5 canvas on the client side. To get started, you’ll of course need node.js. For this post, I’ll be using node.js version 6.3.1, but you can follow along with almost any version (above 0.12) and it should be fine.\n\nLet’s get started with dependencies first. Create a directory for your project and run the following inside it:\n\nWe’ll be using the Express framework to quickly set up the server, and the socket.io package to handle WebSockets on the server. Put the following in a file named :\n\nThe code above is a pretty standard node.js server using the Express framework. It sets up dependencies and the basic routing for the server. For this demo application, we’re only going to serve a single and directory. Create a directory named and an file in the root project folder. The HTML file is pretty basic so we’ll write that now:\n\nFor larger scale projects, you should put CSS styles in a separate dedicated stylesheet. You might also have more UI and display elements. For simplicity, I’m going to keep the CSS in the HTML code. Note that I’ve also included a script. This is automatically be provided by the socket.io package when the server is hosted.\n\nNow we’ll do some setup on the server for the WebSockets. Add this line to the end of :\n\nWe don’t have any functionality for it yet, so just leave this as is for now. For testing, add the following lines to the end of :\n\nThis will send a message to all connected sockets with the name ‘message’ and the content ‘hi’. Remember to remove this snippet later since it’s just for testing.\n\nCreate a file called in the directory. We can write a quick function to log the messages from the server in order to verify that we’re receiving them. Put the following in :\n\nRun the server (using the command ) and navigate to http://localhost:5000 in any web browser. You’ll notice a message appear every second if you open the developer console (Right Click -> Inspect).\n\nIn general, will send a message with the given name and data to the server if it is called on the client, and vice versa if it is called on the server. To listen for messages with a specific name, you need to create an event handler that looks like this:\n\nsocket.on('name', function(data) {// data is a parameter containing whatever data was sent});\n\nYou can send just about anything using . You can pass JSON objects as well into the data parameter, which is super handy for us. This allows us to send game information back and forth between the server and clients instantaneously, forming the backbone of most of the multiplayer functionality.\n\nLet’s have the client send some keyboard states. Put the following code at the end of :\n\nThis is some basic code for an input handler to track when the WASD keys are pressed. After this bit, we’ll add a message to alert the server that a new player has joined and create a loop to constantly send their keyboard input to the server.\n\nThis will send the keyboard state of this client 60 times a second to the server. Now we need to handle this input on the server. Add the following to the end of the :\n\nLet’s break this down. We’re going to store all connected players as JavaScript dictionaries (JSON objects). Since each socket connected to the server has a unique ID, we can use that ID to identify the players as well. Each key in the dictionary will be the socket ID of the connected player’s socket, and the value will be another dictionary containing an x and y position.\n\nWhen the server receives a ‘new player’ message, it will add a new entry into the players object using the ID of the socket that sent that message. When the server receives a ‘movement’ message, it will update the player associated with that socket (if one exists).\n\nis a call that will send the given message and data out to ALL connected sockets. The server will be sending out its state to all connected clients 60 times a second.\n\nAt this point, the client doesn’t really do anything with this information, so lets add a handler on the client side to draw the data on the server to the HTML5 canvas. Add this code to the end of :\n\nThis code accesses the canvas and draws to it. Each time a ‘state’ message is received from the server, the client will clear the canvas and redraw all the players as a green circle on the canvas.\n\nAny client that connects will now be able to draw the state of all connected players onto the canvas. Run the server (again using the command ) and open two tabs in your web browser. If you navigate to http://localhost:5000, you should see behavior similar to this:\n\nThat’s pretty much it! If you had trouble following along, here’s a link to a repository containing this minimal implementation.\n\nIf you were making a real game, it would be a much better idea to refactor a lot of the code used in this demonstration into their own files.\n\nThese multiplayer games are pretty good examples of MVC architecture. All the game logic should be handled on the server, and the only thing the client should do is send user input to the server and render the information the server sends.\n\nThere are a few flaws with this demo project though. The game updating is tied to the socket listener. If I wanted to mess with the game state, I could type the following into the inspector:\n\nDepending on the computer, movement data is now being sent to the server much more than 60 times a second, causing the player to start moving insanely fast. This leads me to another point known as the concept of authoritative server determination.\n\nAt no point should the client have control over any data on the server. For example, you should never have code on the server that allows the client to set their position/health from data passed through the socket since a user can easily falsify a message emitted from a socket as demonstrated above.\n\nWhen I built my first multiplayer game, I coded it so that a player would shoot whenever a ‘shoot’ message was sent, which was tied to a mouse down event on the client side. A clever player was able to exploit this by injecting a line of JavaScript very similar to the one above to gain near-infinite shooting speed.\n\nThe best analogy I can draw is that the clients should only send intents to the server, which are then processed and used to modify the state of the players if they are valid.\n\nIdeally, the update loop on both the client and the server should be independent of the sockets. Try not to have your game update inside of a block because you can have a lot of wonky inconsistent behavior since your game updating will be tied to your socket updating.\n\nAlso, try to avoid code like this:\n\nThe player’s x position update is tied to the frame rate of the game in this code snippet. is not always guaranteed to run at the given interval, especially if the function running is computationally intensive and takes more than a 60th of a second to run. Rather, you should do something like this:\n\nThis is a lot clunkier, but will guarantee smoother and more consistent behavior by calculating the time between the last update and the current time to figure out the proper distance to move the player. Fork the demo project and try to implement the code above. Put some functionality into and try to make a full-fledged game.\n\nAnother thing to implement might be removing disconnected players. When a socket disconnects, a message named ‘disconnect’ is automatically sent, so you can listen for it using:\n\nTry writing your own physics engine on the server as well, that’s a lot of fun and it’s a great challenge. If you want to try this, I highly recommend reading The Nature of Code, since it provides a lot of useful insight.\n\nIf you want to see a much more high level example, here’s a multiplayer game I’ve made, as well as a link to its source code if you want to peruse how I did it. That’s all I have for now. Thanks for reading! Please hit the clap button down below if you enjoyed this article :)"
    },
    {
        "link": "https://m.php.cn/faq/365459.html",
        "document": ""
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/1syery/general_could_someone_take_a_quick_glance_at_my",
        "document": "Hi, if this isn't the place to ask this I apologise.\n\nI'm currently doing Game Development in University (Shifting to Comp Sci next year) and for my last assignment I had to create a Tank-shooting 'platformer' with JS/HTML5. My current level of experience is probably around 'I can make some stuff happen'\n\nThe majority (~95%, minor googling) of the code was written as a 'this should work right?' mind path, such as my attempt at creating fog (run through each 32x32 grid and black out those not colliding with player) so I apologize for the spaghetti-ness and sometimes odd approaches.\n\nIf possible, I'd be grateful if I could get some quick pointers on what I did wrong in general with the programming. I learn rather quickly and apply myself, but for some reason not in lectures: the examples we get to look at from are worse than my code.\n\nI'll soon be starting on making a Binding Of Isaac-type game in Python for my next assignment and so I'd use this to correct any mistakes I've made here and learn in doing so.\n\nThe code is hosted here via github and a working example can be found here if anyone is curious.\n\nThanks for reading and for any questions, feel free to ask!"
    },
    {
        "link": "https://littlecaesars.fieldagent.net/default.aspx/book-search/4020089/AdvancedGameDesignWithFlash.pdf",
        "document": ""
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent",
        "document": "This feature is well established and works across many devices and browser versions. It’s been available across browsers since July 2015 . * Some parts of this feature may have varying levels of support.\n\nobjects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type ( , , or ) identifies what kind of keyboard activity occurred. Note: events just indicate what interaction the user had with a key on the keyboard at a low level, providing no contextual meaning to that interaction. When you need to handle text input, use the event instead. Keyboard events may not be fired if the user is using an alternate means of entering text, such as a handwriting system on a tablet or graphics tablet.\n\nThe following constants identify which part of the keyboard the key event originates from. They are accessed as and so forth. The key described by the event is not identified as being located in a particular area of the keyboard; it is not located on the numeric keypad (unless it's the NumLock key), and for keys that are duplicated on the left and right sides of the keyboard, the key is, for whatever reason, not to be associated with that location. Examples include alphanumeric keys on the standard PC 101 US keyboard, the NumLock key, and the space bar. The key is one which may exist in multiple locations on the keyboard and, in this instance, is on the left side of the keyboard. Examples include the left Control key, the left Command key on a Macintosh keyboard, or the left Shift key. The key is one which may exist in multiple positions on the keyboard and, in this case, is located on the right side of the keyboard. Examples include the right Shift key and the right Alt key (Option on a Mac keyboard). The key is located on the numeric keypad, or is a virtual key associated with the numeric keypad if there's more than one place the key could originate from. The NumLock key does not fall into this group and is always encoded with the location . Examples include the digits on the numeric keypad, the keypad's Enter key, and the decimal point on the keypad.\n\nThis interface also inherits properties of its parents, and . Returns a boolean value that is if the ( or on macOS) key was active when the key event was generated. Returns a string with the code value of the physical key represented by the event. Warning: This ignores the user's keyboard layout, so that if the user presses the key at the \"Y\" position in a QWERTY keyboard layout (near the middle of the row above the home row), this will always return \"KeyY\", even if the user has a QWERTZ keyboard (which would mean the user expects a \"Z\" and all the other properties would indicate a \"Z\") or a Dvorak keyboard layout (where the user would expect an \"F\"). If you want to display the correct keystrokes to the user, you can use . Returns a boolean value that is if the key was active when the key event was generated. Returns a boolean value that is if the event is fired between after and before . Returns a string representing the key value of the key represented by the event. Returns a number representing the location of the key on the keyboard or other input device. A list of the constants identifying the locations is shown above in Keyboard locations. Returns a boolean value that is if the key (on Mac keyboards, the key; on Windows keyboards, the Windows key ( )) was active when the key event was generated. Returns a boolean value that is if the key is being held down such that it is automatically repeating. Returns a boolean value that is if the key was active when the key event was generated.\n\nSome keys toggle the state of an indicator light; these include keys such as Caps Lock, Num Lock, and Scroll Lock. On Windows and Linux, these keys dispatch only the and events. Note: On Linux, Firefox 12 and earlier also dispatched the event for these keys. However, a limitation of the macOS event model causes Caps Lock to dispatch only the event. Num Lock was supported on some older laptop models (2007 models and older), but since then, macOS hasn't supported Num Lock even on external keyboards. On older MacBooks with a Num Lock key, that key doesn't generate any key events. Gecko does support the Scroll Lock key if an external keyboard which has an F14 key is connected. In certain older versions of Firefox, this key generated a event; this inconsistent behavior was Firefox bug 602812."
    },
    {
        "link": "https://w3schools.com/js/js_htmldom_events.asp",
        "document": "HTML DOM allows JavaScript to react to HTML events:\n\nA JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.\n\nTo execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:\n• When an image has been loaded\n• When the mouse moves over an element\n• When an input field is changed\n• When an HTML form is submitted\n\nIn this example, the content of the element is changed when a user clicks on it:\n\nIn this example, a function is called from the event handler:\n\nTo assign events to HTML elements you can use event attributes.\n\nIn the example above, a function named will be executed when the button is clicked.\n\nThe HTML DOM allows you to assign events to HTML elements using JavaScript:\n\nIn the example above, a function named is assigned to an HTML element with the .\n\nThe function will be executed when the button is clicked.\n\nThe and events are triggered when the user enters or leaves the page.\n\nThe event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.\n\nThe and events can be used to deal with cookies.\n\nThe event is often to some action while the user input data.\n\nBelow is an example of how to use the oninput to change the content of an input field.\n\nThe event is often used in combination with validation of input fields.\n\nBelow is an example of how to use the onchange. The function will be called when a user changes the content of an input field.\n\nThe and events can be used to trigger a function when the user mouses over, or out of, an HTML element:\n\nTry it Yourself »\n\nThe , , and events are all parts of a mouse-click. First when a mouse-button is clicked, the onmousedown event is triggered, then, when the mouse-button is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.\n\nTry it Yourself »\n\nonmousedown and onmouseup\n\n Change an image when a user holds down the mouse button.\n\nonload\n\n Display an alert box when the page has finished loading.\n\nonfocus\n\n Change the background-color of an input field when it gets focus.\n\nMouse Events\n\n Change the color of an element when the cursor moves over it.\n\nFor a list of all HTML DOM events, look at our complete HTML DOM Event Object Reference."
    },
    {
        "link": "https://sencha.com/blog/event-handling-in-javascript-a-practical-guide-with-examples",
        "document": "Back in the day, websites used to be static, meaning users could only view the content but not interact with it. However, we can now create highly interactive user interfaces thanks to JavaScript and JS frameworks. Specifically, event handlers in JavaScript are what allow us to build dynamic web pages and deliver interactive experiences. In the modern web development landscape, events are essentially user actions that occur as a result of user interaction with the web page, such as submitting a form, clicking a button, playing a video on the web page, minimizing the browser window, etc. Event handling allows developers to verify and handle these actions to deliver a more responsive and engaging user experience.\n\nHence, understanding how events work and how to handle them efficiently is essential for every developer looking to create modern web applications. This article will discuss all the ins and outs of event handling in JavaScript. We’ll also briefly discuss how a good JavaScript framework like Ext JS handles events.\n\nEvents are essentially the actions that occur on a web app due to user interaction, such as clicking a button. In JavaScript, when an event occurs, the app fires the event, which is kind of a signal that an event has occurred. The app then automatically responds to the user in the form of output, thanks to event handlers in JavaScript. An event handler is essentially a function with a block of code that is executed or triggered when a specific event fires.\n\nSometimes, when an event occurs, it triggers multiple events. This is because web elements in an app are often nested. This is where event propagation comes in. Event propagation involves capturing and bubbling phases as the event travels across the DOM hierarchy. We’ll discuss these phases later in the article.\n\nThere are common types of events:\n• Keyboard/touch events: Occur when a user presses or releases a key on the keyboard or performs an action with a touch-enabled smartphone, laptop or tablet.\n• Click events: Fires when a user clicks on a button or other such web element.\n• Mouse hover events: These events are fired when a user performs an action with the mouse, such as scrolling a page or moving the cursor.\n• Form/submit events: Triggered when a user submits a form, modifies it, or resets it.\n• Drag and drop events: Occurs when a user drags and drops an element on the web page, such as dragging and dropping an image on a file uploader.\n\nAn event listener is essentially a JavaScript function that waits for a specific event to occur and then executes a callback function to respond to that event. Event listeners and event handlers are often considered the same thing. However, in essence, they work together to respond to an event. As the name suggests, the listener listens for the event, and the handler is the code that is executed in response to that event.\n\nThere are two common built-in event listener methods in JavaScript: addEventListener and removeEventListener. The addEventListener() method enables us to attach an event handler to an element. We can also add multiple event handlers to an element. removeEventListener() allows us to remove an event listener/handler from a specific element.\n\nWhen an event occurs, it belongs to a specific event object. The event object is essentially the argument passed into the callback/event handler function. It provides information about the event, such as the target element, the type of event, etc. It also contains additional properties for the specific event type.\n• target: Represents the element that fired the event.\n• type: Tells about the specific type of the event, such as click or submit\n• keyCode: Used for keyboard events. It contains the Unicode value of the key pressed by the user\n\nHere is an example code demonstrating the use of the event object (Click event):\n\nBased on the concepts we discussed in the previous sections, here is an example for creating a simple button-click event:\n\nHere is a basic example demonstrating how to handle form submissions:\n\nWeb browsers often have a default behavior for certain events. When such an event occurs, the browser’s default behavior is triggered in response to that event. preventDefault() provides us with a way to stop or prevent this default behavior.\n\nFor instance, when a user submits a form, the browser automatically initializes a request to the server. This results in page reload or navigation to a new page, affecting the user experience. Developers can use preventDefault() to stop this default behavior and handle form submission asynchronously without causing a page to reload. For example, in the above code, we’ve used preventDefault() to stop or prevent the default form submission behavior.\n\nEvent delegation in JavaScript is an advanced technique for handling events more efficiently. In event delegation, we add or attach an event listener/listeners to a common parent element. This way, we don’t have to attach the event listener to each element separately. Events are processed and monitored as they traverse the DOM hierarchy. Event delegation is common in popular javascript frameworks\n\nHere is an example of event delegation:\n\nHandling keyboard events, such as key down and key up, allows us to:\n• Respond to user interactions/inputs with the keyboard\n\nKey Down and Key Up are two main types of mouse events. A key-down event occurs when a user presses a key on the keyboard. A key-up event is triggered when a user releases the key after it is pressed down.\n\nHere is an example code for handling a key-down event:\n\nHere is an example code for handling a key-up event:\n\nHandling touch and mobile events to create a responsive and touch-friendly design, providing an intuitive way to interact with the web app.\n\nHere is an example code for Touchstart, Touchmove, and Touchend:\n• Gesture events, such as gesturestart, gesturechange, and gestureend. These events are used for gestures like pinch-zoom.\n• orientationchange event used for detecting changes in device orientation.\n\nAlso Read: Angular vs Ext JS: Which JavaScript Framework Should You Use?\n\nAs aforementioned, event bubbling and capturing are a part of the event propagation process. In event bubbling, the event starts from the same target element that fired the event. It then bubbles up or propagates through its parent and ancestor elements in the DOM till it reaches the root element. This allows you to handle the event in a parent element instead of the target element. Event bubbling is the default event behaviour on elements.\n\nIn event capturing, the event traverses from the outermost parent or ancestor element to the target element. It is also called event trickling.\n\nJavaScript also allows you to create and dispatch custom events designed to meet your specific application needs. For instance, you can create custom events for cross-component state management.\n\nHere is how to create a custom event:\n\nHere is how to dispatch the event:\n• Combine multiple events that trigger similar actions into one event listener.\n• Use event capturing only when needed. Otherwise, use bubbling.\n\nExt JS is a leading Javascript framework for creating high-performance web and mobile applications. It offers over 140+ pre-built components and supports MVVM architecture and two-way data binding. Events are a core concept in the Ext JS framework that enables your code to react to changes in your app. Here is an example code for button-click event in Ext JS:\n\nYou can learn more about handling events in Ext JS here.\n\nTransform your digital landscape with Sencha: Master JavaScript frameworks for unrivalled web development excellence\n\nIn the web development process, events refer to user actions, such as such as clicking a button, minimizing the browser window, or submitting a form. Event handling in JavaScript and JavaScript frameworks allows us to respond to user actions and interactions and create dynamic and interactive websites. This article explores various concerts related to event handling in JavaScript with examples.\n\nWhat is event handling in JavaScript?\n\nEvent handling in JS refers to using event listeners to wait for an event to occur on an element and responding to that event using event handlers or callback functions.\n\nHow do I attach an event listener to an element?\n\nYou can use JavaScript’s built-in addEventListener() method to attach an event to an element.\n\nWhat is the event object in JavaScript?\n\nThe event object in JS is essentially the argument passed into the callback/event handler function. It provides valuable information about the event, such as the target element, the type of event, etc.\n\nWhat are the most popular JavaScript frameworks?\n\nBest JavaScript frameworks and JavaScript libraries include Ext JS, React and Angular. Ext JS offers 140+ high-performance pre-built components for developing web applications quickly. React is another popular JavaScript framework known for creating customized and reusable elements and virtual DOM. Angular is another open-source JavaScript framework that utilizes component-based architecture and allows developers to build high-performance single-page applications."
    },
    {
        "link": "https://stackoverflow.com/questions/23585320/how-to-move-object-with-keyboard-in-javascript",
        "document": "When I move the object, it's slow and doesn't move in diagonal, only up, down, right and left.\n\nHow can I fix this, is this a good way to start or should I do it otherwise?\n\nI'm kind of a newbie in javascript and I really need help on this ;)"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key",
        "document": "The interface's read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as as well as the keyboard locale and layout.\n\nEvery is fired in a pre-determined sequence. For a given key press, the sequence of s fired is as follows assuming that is not called:\n• A event is first fired. If the key is held down further and the key produces a character key, then the event continues to be emitted in a platform implementation dependent interval and the read only property is set to .\n• If the key produces a character key that would result in a character being inserted into possibly an , or an element with set to true, the and event types are fired in that order. Note that some other implementations may fire event if supported. The events will be fired repeatedly while the key is held down.\n• A event is fired once the key is released. This completes the process. In sequence 1 & 3, the attribute is defined and is set appropriately to a value according to the rules defined earlier.\n\nConsider the event sequence generated when we interact with the and the key using a U.S keyboard layout as compared to when we do so using a UK keyboard layout. Try experimenting using the following two test cases:\n• Press and hold the key, then press and release it. Next, release the key.\n• Press and hold the key, then press and hold . Release the key. Finally, release .\n\nWhen the shift key is pressed, a event is first fired, and the property value is set to the string . As we keep holding this key, the event does not continue to fire repeatedly because it does not produce a character key. When is pressed, another event is fired for this new key press, and the property value for the event is set to the string for the U.S keyboard type and for the UK keyboard type, because of the active modifier key. The and events are fired next because a character key has been produced. As we release the , a event is fired and the property will maintain the string values and for the different keyboard layouts respectively. As we finally release the key, another event is fired for it, and the key attribute value remains .\n\nWhen the shift key is pressed, a event is first fired, and the property value is set to be the string . As we keep holding this key, the event does not continue to fire repeatedly because it produced no character key. When is pressed, another event is fired for this new key press, and the property value for the event is set to be the string for the U.S keyboard type and for the UK keyboard type, because of the active modifier key. The and events are fired next because a character key has been produced. As we keep holding the key, the event continues to fire repeatedly and the property is set to . The and events are fired repeatedly as well. As we release the key, a event is fired for it, and the key attribute value remains . At this point, notice that the property value for the repeating keydown event of the key press is now \"2\" because the modifier key is no longer active. The same goes for the property of the and events. As we finally release the , a event is fired but the property will be set to the string value for both keyboard layouts because the modifier key is no longer active.\n\nThis example uses to listen for events. When they occur, the key's value is checked to see if it's one of the keys the code is interested in, and if it is, it gets processed in some way (possibly by steering a spacecraft, perhaps by changing the selected cell in a spreadsheet). window.addEventListener( \"keydown\", (event) => { if (event.defaultPrevented) { return; // Do nothing if the event was already processed } switch (event.key) { case \"ArrowDown\": // Do something for \"down arrow\" key press. break; case \"ArrowUp\": // Do something for \"up arrow\" key press. break; case \"ArrowLeft\": // Do something for \"left arrow\" key press. break; case \"ArrowRight\": // Do something for \"right arrow\" key press. break; case \"Enter\": // Do something for \"enter\" or \"return\" key press. break; case \" \": // Do something for \"space\" key press. break; case \"Escape\": // Do something for \"esc\" key press. break; default: return; // Quit when this doesn't handle the key event. } // Cancel the default action to avoid it being handled twice event.preventDefault(); }, true, );"
    },
    {
        "link": "https://phaser.io",
        "document": "Games made with Phaser have been used as the cornerstone for marketing campaigns for years.\n\nThey've been deployed everywhere including as prominent features on sites for major Hollywood film blockbusters, massive brand promotional campaigns, educational content, interactive experiences, TV shows, news reports, charity fund-raising broadcasts, live events marketing, and so many more.\n\nIf you create a Phaser game for your next campaign, you'll be in the company of brands such as:"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser",
        "document": "In this step-by-step tutorial, we create a simple mobile MDN Breakout game written in JavaScript, using the Phaser framework. Every step has editable, live samples available to play with, so you can see what the intermediate stages should look like. You will learn the basics of using the Phaser framework to implement fundamental game mechanics like rendering and moving images, collision detection, control mechanisms, framework-specific helper functions, animations and tweens, and winning and losing states. To get the most out of this series of articles you should already have basic to intermediate JavaScript knowledge. After working through this tutorial, you should be able to build your own simple Web games with Phaser."
    },
    {
        "link": "https://jordan-eckowitz.medium.com/create-2d-javascript-games-using-phaser-fbbbbbe2eed2",
        "document": "Web browsers have fantastic built-in capabilities for creating simple graphs, drawing pictures and rendering animations. The HTML tag, when combined with Javascript, is perfectly suited to making interactive 2D games. In order to simplify and speed up game development a number of Javascript-based game engines have been developed. Some examples of Javascript game engines are P5, Melon, Kiwi, Play Canvas and Phaser. I decided to delve into the world of Phaser as it has a strong user community and fantastic documentation.\n\nPhaser is an extension to Pixi which is an incredibly powerful implementation of WebGL graphics rendering. Phaser currently has two active version streams. Version 3 is the official release and version 2 has been adopted as a community edition (v2 CE). There are significant differences in syntax between the two. Version 3 is still in its infancy while version 2 has a large online community and examples available online. For that reason, I picked the community edition for my exploration.\n\nThe first problem I ran into when trying to get Phaser setup is the loading of assets. I soon realized that due to Cross-Origin Resource Sharing (CORS) the game, even while in local development, needs to be run on a server. The Phaser documentation provides some suggestions such as MAMP, Grunt Connect, PHP 5 built-in web server or a web server extension from the large Node.js community.\n\nI decided to use a Node.js server. The two most popular options are HTTP-Server and Live-Server. I tried both. Each is incredibly easy to get working. All that needs to be done is install the node module globally(e.g. ), go to the root project folder in the terminal and type in either to fire it up. I found Live-Server to be better. It automatically refreshes on changes to the code for one thing. I also found that there were some caching issues with HTTP-Server which caused updates to not work until I manually cleared the cache.\n\nPhaser games have a standardized structure. They have 3 primary functions: . They are each quite intuitive. The assets are called in the preload function so that they’re ready to be initialized within the game. Any user controlled component in the game is called a . If the Sprite is animated you can create a Sprite Sheet which is essentially like a series of panels that capture the Sprite in multiple positions. This is done so that the preload data is faster to load on startup and during gameplay. The function is where the foundations of the game are created. The function is where you build functions that respond to changes within the created environment. All games have a preload and a create function. The update function is not always required, in many simple games all the requirements for gameplay are established in the create function.\n\nThe best way to illustrate how Phaser works is with an example. This example shows how to create a box that when thrown up comes back down and collides with a ground surface. This basic example shows off Phaser’s simple implementation of a physics engine together with interaction with the mouse and collision detection.\n\nHere is a GIF showing off our amazing new game!"
    },
    {
        "link": "https://phaser.io/box2d",
        "document": "Our comprehensive conversion of Box2D v3 has been optimized for browser performance, featuring a soft step rigid body solver that delivers excellent stability in physics calculations. This ensures realistic collisions and interactions for immersive gaming experiences. The island-based sleep management enhances performance by pausing calculations for inactive objects, allowing complex, high-speed games to maintain stable physics without compromising speed. Your games will achieve smooth performance even in demanding scenarios. The Continuous Collision Detection (CCD) system handles high-velocity scenarios with precision, from fast projectiles to rapid character movements. Ray casts and queries provide detailed insights into your physics world, ensuring accurate tracking of all interactions. The refined physics engine ensures object interactions behave naturally and predictably, reducing bugs and inconsistencies. This lets developers create reliable gameplay experiences while maintaining accurate simulation. Quickly integrate Phaser Box2D with the framework of your choice and focus on creating your game. Built using modern JavaScript standards, this hand-tuned engine mirrors the original C version while maintaining a lean 70KB size - perfect for instant messenger games and playable ads. We preserved the original C API function names, making transition easy for Box2D veterans and allowing you to leverage existing resources, whether through AI assistance or community solutions.\n\nExplore and experiment with over 50 examples demonstrating the core elements of Box2D. From complete mini-games to feature showcases, each with the full JavaScript source and an example runner. Here are just a few: Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag.\n\nDoes it only work with Phaser, or can I use Pixi? Despite its title, Phaser Box2D is compatible with any web-based tech stack or framework, including Pixi, React, Vue and more. It is provided as an ESM compatible Module and is not deeply integrated with Phaser itself. Of course, being Phaser Studio, we include lots of helpful functions that ease use of Box2D with Phaser itself. And these are included with the download. However, using Phaser isn't a requirement. Yes. The original C version of Box2D itself is released under an MIT license and we firmly respect that. Our conversion of it includes thousands of lines of custom code. Which is also now released under the MIT license. How complicated is it to use? Complexity is, of course, subjective. However we feel it would be remiss to say that this is perfect for complete beginners. You are expected to have a solid grasp of JavaScript and ideally previous experience with physics systems. We provide tutorials, API Documentation and over 50 examples to learn from. Plus, you can ask us questions in our Discord. Even so, Box2D does have a certain level of complexity and if you are unsure if it's right for you we would recommend you read some of our public tutorials first to get an understanding of how it works. What support is available for Phaser Box2D? Free community-based support is available via our forum and Discord. Customers who have Pro or Enterprise level Phaser Studio accounts can receive priority support from the Phaser Studio team. Contact your team representative for more details.\n\nSupports an array of shapes — convex polygons, circles, capsules, chains, and rounded polygons — allowing complex object modeling. This versatility means you can create intricate environments and interactive items, from basic walls to irregular terrain or composite enemies. Allows combining various shapes in one body, providing flexibility in designing composite structures with multi-part interactions. Ideal for complex characters or objects requiring unique collision behaviors for different body parts, such as vehicles or ragdolls. Offers precise control over which objects can interact. This feature is invaluable for games needing unique layers of collision, like separating player collisions from environmental or enemy hits. Delivers powerful tools to detect line-of-sight, aiming, and field-of-view interactions. By casting rays or shapes, you can create sophisticated interactions, such as AI behaviors, aiming mechanics, or accurate projectile targeting. Box2D Version 3.0 introduces a new Soft Step solver, delivering greater stability across the board compared to previous versions. It effectively manages higher mass ratios, longer body chains, larger stacks, and more. Built on soft constraints and sub-stepping, this solver ensures accurate, stable simulations, even when stacking large numbers of bodies. Box2D employs specialized algorithms to prevent tunneling and missed interactions with high-speed objects or rapidly rotating entities. Its collision algorithms can interpolate the motion of two bodies to pinpoint the first time of impact (TOI), ensuring no collision is overlooked. Speculative collision is used for realistic results in fast-paced gameplay. Boosts performance by pausing calculations for objects at rest, freeing up processing power for active elements. This method is particularly helpful for games with dense environments, as it automatically allocates resources where they're needed most. Box2D v3.0 offers an extensive range of joints — including revolute, distance, prismatic, weld, and wheel joints — that allow you to create complex structures and mechanisms. Whether it's a swinging door, rotating wheels, or extending pistons, these joints empower the creation of realistic, interactive machines. Allows for detailed control over joint movement and interaction, from limiting motion ranges to applying motor-driven forces. You can easily simulate mechanisms like spring-loaded objects, friction-controlled surfaces, or tension-based interactions. Provides precise data on the forces exerted during interactions, helping simulate responsive reactions and dynamic gameplay elements. With access to these forces, you can create scenes where player actions yield tactile, physical feedback—ideal for everything from destructible environments to realistic combat dynamics. Sends alerts when an object's state changes, enabling highly responsive and event-driven gameplay. Sleep notifications keep inactive objects from taxing the system, while movement events allow for real-time reactions to changes, making simulations efficient and highly interactive."
    },
    {
        "link": "https://phaser.io/tutorials/coding-tips-001",
        "document": "If you're anything like me you probably write loads of code. From prototypes demonstrating a single mechanic to helper functions. And sometimes you might even finish a game :)\n\nI started this series as a means to share code with you in an informal manner, one game dev to another. The aim is to build-up something over the course of a couple of weeks. Each chunk being easily digestible in a short period of time. It's something I call \"lunch break game dev\": in that you can read and experiment for yourself in under an hour (just try not to get crumbs in your keyboard.)\n\nI'm not writing to any fixed agenda here. I fully expect this series to evolve. If something doesn't work I'll pull it, and I equally won't be scared of trying new things. Maybe one week the code will be far too easy for you, another it might be the opposite. But hopefully in all cases it will spark some ideas for you to play with regardless.\n\nFinally I'm not here to try and \"sell\" you anything. If I release a new book or plugin then I'll probably write about it, but only because I'll be so pleased at having achieved that! On the whole this is our place to write some code together, so please do leave feedback and ideas.\n\nLet's make a Tanx style game. It uses the same mechanic as games like QBASIC Gorillas and Scorched Earth.\n\nYou control a tank. You can adjust the elevation of the turret, set the power and then fire. The bullet flies across the landscape hopefully hitting the targets.\n\nThis week we'll display the tank, allow it to aim, fire and track the bullet with the camera. Next week we'll add the landscape and allow you to blow holes in it!\n\nRun and live-edit the code on jsbin or codepen. You can also clone the git repo.\n\nBecause this game uses pixel art we're going to use a rounded canvas renderer:\n\nThis will stop Phaser from rendering graphics at sub-pixel locations, keeping them nice and crisp. We'll also set the game world to be 992 pixels wide, enable physics and setting a gravity value of 200:\n\nWe need to assemble the tank. It's split into two images: the base of the tank, and the turret. The turret is positioned against the base so it looks correct when rotating. The area highlighted in red is where they are \"joined\":\n\nWe also create a Group of targets to shoot. This is a standard Phaser Group with Arcade Physics enabled on it. However because of this we need to stop gravity from pulling the targets away:\n\nlets you quickly set the same property across all members of the Group. In this case we tell it to disable gravity.\n\nThe rest of the create block is simply putting together sprites, text and some basic keyboard controls.\n\nIn the method we allow the player to set the angle of the turret. This is done with a check to ensure it is kept within limits and then we change the Sprite.angle property of the turret. The default anchor of the turret means this rotation works correctly with no further settings.\n\nWhen the player presses the space bar we'll fire a shot. This is handled in the method. It starts by setting the bullet back to the turret coordinates (in case it has already been fired):\n\nWe also want to display the 'flame' sprite when they shoot. This is a burst of fire that emits from the end of the turrets gun then fades away:\n\nWe know the coordinates of the left of the turret, but what about the end? There are several ways to solve this but I chose to use Point.rotate.\n\nThis allows you to calculate where the Point would be if it was rotated and moved from its origin. In the code above we set the rotation to match the turret, and the distance 34 pixels works for these assets. The end result is that the flame effect appears at the end of the gun, regardless of its angle of rotation.\n\nThe final part of firing is to launch the bullet.\n\nThe launch trajectory is based on the angle of the turret and the power the player has set. It will calculate the velocity need for these two factors and inject them into the velocity of the bullet.\n\nAt the same time we tell the Camera to track the bullet as it flies.\n\nIn the method we check if the bullet exists (i.e. is in flight), and if so we perform an overlap check between it and the targets. If they overlap the target is killed and the bullet removed:\n\nWe need to stop the Camera tracking the bullet so that the tween works. The tween pauses for 1 second then tweens the Camera back to look at the tank again ready for the next shot. If you don't stop the Camera following the tween will seem to fail, because Camera tracking takes priority over positioning of it.\n\nThat's it for Part 1. Obviously there's more code in the source, but all the important bits are covered above.\n\nIn Part 2 we'll add a complete landscape. The targets will be positioned all over it. And then we'll add the code needed to let you blow holes out of it all and have the terrain deform in real-time."
    }
]