[
    {
        "link": "https://quora.com/Im-trying-to-build-a-forum-website-from-scratch-What-programming-language-s-should-I-learn",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://digitalocean.com/community/tutorials/java-web-application-tutorial-for-beginners",
        "document": "Java Web Application is used to create dynamic websites. Java provides support for web application through Servlets and JSPs. We can create a website with static HTML pages but when we want information to be dynamic, we need web application.\n\nThe aim of this article is to provide basic details of different components in Web Application and how can we use Servlet and JSP to create our first java web application.\n• Why we need Servlet and JSPs?\n• First Web Application with Servlet and JSP\n\nWeb Server is a software that can process the client request and send the response back to the client. For example, Apache is one of the most widely used web servers. Web Server runs on some physical machine and listens to client request on a specific port. A web client is a software that helps in communicating with the server. Some of the most widely used web clients are Firefox, Google Chrome, Safari, etc. When we request something from the server (through URL), the web client takes care of creating a request and sending it to the server and then parsing the server response and present it to the user.\n\nWeb Server and Web Client are two separate softwares, so there should be some common language for communication. HTML is the common language between server and client and stands for HyperText Markup Language. Web server and client needs a common communication protocol, HTTP (HyperText Transfer Protocol) is the communication protocol between server and client. HTTP runs on top of TCP/IP communication protocol. Some of the important parts of the HTTP Request are:\n• HTTP Method - action to be performed, usually GET, POST, PUT etc.\n• Form Parameters - similar to arguments in a java method, for example user,password details from login page.\n\nSome of the important parts of HTTP Response are:\n• Status Code - an integer to indicate whether the request was success or not. Some of the well known status codes are 200 for success, 404 for Not Found and 403 for Access Forbidden.\n• Content Type - text, html, image, pdf etc. Also known as MIME type\n• Content - actual data that is rendered by client and shown to user.\n\nMIME Type or Content Type: If you see above sample HTTP response header, it contains tag “Content-Type”. It’s also called MIME type and server sends it to the client to let them know the kind of data it’s sending. It helps the client in rendering the data for the user. Some of the most used mime types are text/html, text/xml, application/xml etc.\n\nURL is the acronym of Universal Resource Locator and it’s used to locate the server and resource. Every resource on the web has its own unique address. Let’s see parts of the URL with an example. https://localhost:8080/FirstServletProject/jsps/hello.jsp https:// - This is the first part of URL and provides the communication protocol to be used in server-client communication. localhost - The unique address of the server, most of the times it’s the hostname of the server that maps to unique IP address. Sometimes multiple hostnames point to same IP addresses and web server virtual host takes care of sending a request to the particular server instance. 8080 - This is the port on which server is listening, it’s optional and if we don’t provide it in URL then request goes to the default port of the protocol. Port numbers 0 to 1023 are reserved ports for well-known services, for example, 80 for HTTP, 443 for HTTPS, 21 for FTP, etc. FirstServletProject/jsps/hello.jsp - Resource requested from server. It can be static html, pdf, JSP, servlets, PHP etc.\n\nWhy we need Servlet and JSPs?\n\nWeb servers are good for static contents HTML pages but they don’t know how to generate dynamic content or how to save data into databases, so we need another tool that we can use to generate dynamic content. There are several programming languages for dynamic content like PHP, Python, Ruby on Rails, Java Servlets and JSPs. Java Servlet and JSPs are server-side technologies to extend the capability of web servers by providing support for dynamic response and data persistence.\n\nFirst Web Application with Servlet and JSP\n\nWe will use “Eclipse IDE for Java EE Developers” for creating our first servlet application. Since servlet is a server-side technology, we will need a web container that supports Servlet technology, so we will use the Apache Tomcat server. It’s very easy to set up and I am leaving that part to yourself. For ease of development, we can add configure Tomcat with Eclipse, it helps in easy deployment and running applications. Go to Eclipse Preference and select Server Runtime Environments and select the version of your tomcat server, mine is Tomcat 7. Provide the apache tomcat directory location and JRE information to add the runtime environment. Now go to the Servers view and create a new server like below image pointing to the above-added runtime environment. Note: If Servers tab is not visible, then you can select Window > Show View > Servers so that it will be visible in Eclipse window. Try stopping and starting the server to make sure it’s working fine. If you have already started the server from the terminal, then you will have to stop it from the terminal and then start it from Eclipse else it won’t work perfectly. Now we are ready with our setup to create the first servlet and run it on tomcat server. Select File > New > Dynamic Web Project and use below image to provide runtime as the server we added in last step and module version as 3.0 to create our servlet using Servlet 3.0 specs. You can directly click the Finish button to create the project or you can click on Next buttons to check for other options. Now select File > New > Servlet and use below image to create our first servlet. Again we can click finish or we can check other options through the next button. When we click on the Finish button, it generates our Servlet skeleton code, so we don’t need to type in all the different methods and imports in servlet and saves us time. Now we will add some HTML with dynamic data code in doGet() method that will be invoked for HTTP GET request. Our first servlet looks like below.\n\nBefore Servlet 3, we need to provide the url pattern information in web application deployment descriptor but servlet 3.0 uses java annotations that is easy to understand and chances of errors are less. Now chose Run > Run on Server option from servlet editor window and use below images for the options. After clicking finish, the browser will open in Eclipse and we get following HTML page. You can refresh it to check that Date is dynamic and keeps on changing, you can open it outside of Eclipse also in any other browser. So servlet is used to generate HTML and send it in response, if you will look into the doGet() implementation, we are actually creating an HTML document as writing it in response PrintWriter object and we are adding dynamic information where we need it. It’s good for a start but if the response is huge with a lot of dynamic data, it’s error-prone and hard to read and maintain. This is the primary reason for the introduction of JSPs. JSP is also server-side technology and it’s like HTML with additional features to add dynamic content where we need it. JSPs are good for presentation because it’s easy to write because it’s like HTML. Here is our first JSP program that does the same thing as the above servlet.\n\nIf we run above JSP, we get output like below image. The final project hierarchy looks like below image in Eclipse.\n\nWe will look into Servlets and JSPs in more detail in future posts but before concluding this post, we should have a good understanding of some of the aspects of Java web applications.\n\nTomcat is a web container, when a request is made from Client to web server, it passes the request to web container and it’s web container job to find the correct resource to handle the request (servlet or JSP) and then use the response from the resource to generate the response and provide it to web server. Then the webserver sends the response back to the client. When web container gets the request and if it’s for servlet then container creates two Objects HTTPServletRequest and HTTPServletResponse. Then it finds the correct servlet based on the URL and creates a thread for the request. Then it invokes the servlet service() method and based on the HTTP method service() method invokes doGet() or doPost() methods. Servlet methods generate the dynamic page and write it to the response. Once servlet thread is complete, the container converts the response to HTTP response and send it back to the client. Some of the important work done by web container are:\n• Communication Support - Container provides easy way of communication between web server and the servlets and JSPs. Because of the container, we don’t need to build a server socket to listen for any request from the webserver, parse the request and generate a response. All these important and complex tasks are done by container and all we need to focus is on our business logic for our applications.\n• Lifecycle and Resource Management - Container takes care of managing the life cycle of servlet. The container takes care of loading the servlets into memory, initializing servlets, invoking servlet methods and destroying them. The container also provides utility like JNDI for resource pooling and management.\n• Multithreading Support - Container creates a new thread for every request to the servlet and when it’s processed the thread dies. So servlets are not initialized for each request and save time and memory.\n• JSP Support - JSPs doesn’t look like normal java classes and web container provides support for JSP. Every JSP in the application is compiled by container and converted to Servlet and then container manages them like other servlets.\n• Miscellaneous Task - Web container manages the resource pool, does memory optimizations, run garbage collector, provides security configurations, support for multiple applications, hot deployment and several other tasks behind the scene that makes our life easier.\n\nJava Web Applications are packaged as Web Archive (WAR) and it has a defined structure. You can export above dynamic web project as WAR file and unzip it to check the hierarchy. It will be something like below image.\n\nweb.xml file is the deployment descriptor of the web application and contains a mapping for servlets (prior to 3.0), welcome pages, security configurations, session timeout settings, etc. Thats all for the java web application startup tutorial, we will explore Servlets and JSPs more in future posts. Update: Next tutorial in this series is Java Servlets Tutorial"
    },
    {
        "link": "https://stackoverflow.com/questions/2823895/java-web-application-best-practices",
        "document": "I'm trying to figure out the optimum way to develop and release a fairly simple web application, and I'm running into several problems. I'll outline the decisions I've made, because somewhere I've clearly gone off the rails.. Hugely grateful for any help!\n\nI have what I think is a fairly simple web application. It contains a couple of jsps that reference a couple of java beans, and the usual static html, js, css and images.\n\nDecision 1) I wanted to have a clear and clean release procedure, such that I could develop on my local machine and then release reliably to a production machine. I therefore made the decision to package the application into a war file (including all the static resources), to minimize the separate bits and pieces I would need to release. So far so good?\n\nDecision 2) I wanted things on my local machine to be as similar as possible to the production environment. So in my html, for example, I may have a reference to a static file such as http://static.foo.com/file . To keep this code working seamlessly on dev and prod, I decided to put static.foo.com in my /etc/hosts when developing locally, so that all the urls work correctly without changing anything.\n\nDecision 3) I decided to use eclipse and maven to give me a best practice environment for administering and building my project.\n\nSo I have a nice tight set up now, except that:\n\nEvery time I want to change anything in development, like one line in an html file, I have to rebuild the entire project and then wait for tomcat to load the war before I can see if it's what I wanted. So my questions are:\n\n1) Is there a way to connect up eclipse and tomcat so that I don't have to rebuild the war each time? ie tomcat is looking straight at my actual workspace to serve up the static files?\n\n2)I think I'm maybe making things harder by using /etc/hosts to reflect production urls - is there a better way that doesn't involve manually changing over urls (relative urls are fine of course, but where you have many subdomains, say one for static files and one for dynamic, you have to write out the full path, surely?)\n\n3) Is this really best practice?? How do people set things up so that they balance the requirement for an automated, all-encompassing build process on the one hand, and the speed and flexibility to be able to develop javascript and html and css quickly, as quickly as if one just pointed apache at the directory and developed live? What do people find works?\n\nEdit: Thanks all for your great responses! If I could mark them all right, I would.. This has really helped me out. What I'm hearing is that best practice is to conserve the structure of the webapp in development, and run it in as close an environment to production as possible. Seems like the differences between people are the extent to which people are prepared to hot deploy resources into the servlet container, circumventing the build process for a little extra speed or convenience. That makes sense. Thanks again."
    },
    {
        "link": "https://discuss.codecademy.com/t/what-languages-do-i-need-to-know-to-create-a-new-forum-software/375348",
        "document": "First post here, but I wanted to get this question out here. I’d like to create a new forum software, and I know the basic coding languages (HTML, CSS, Java, jQuery) from the Complete Web Developer Course 2.0 on Udemy. However, I can’t find much info on what languages I would need to know to create an amazing new forum software. I’m willing to learn, just trying to find the direction. I’d appreciate any help on where I need to focus my time.\n\nThe front end is not the only concern when it comes to creating forum software. That’s probably the easy part. There is a whole back-end concern that will need to be solidified. That means a database, login authentication, form validation, pre-processed response pages, requests, scalability, &c. The list goes on. It is not a simple matter. We really must be fluent at front-end languages; that goes without saying. This is the part that affects the user experience. The back-end, though, that’s where we can break the user experience, literally. When all they see is a white screen, we’ve broken something. That’s kind of how failed responses turn out on the user’s end (client-side, front-end).\n\nThanks for the response mtf! Yeah, definitely understand the importance of both sides. I was just wondering what back-end language(s) I would need to learn to start building my own custom forum software. Would it be Python, Ruby, or anything? Combination of a few? Would love your input on what language(s) are best to dive into.\n\nWe’ll need to rely on more experienced members to chime in, here. My experience is limited to PHP on the back end, and no database knowledge, whatsoever. Linux is pretty much at the heart of the backend (mind Apache and Windows are major players). Understanding servers is at the top of the list. CGI plays an important role. The most powerful languages for that purpose are C++ (C# for .net environment) and Java but these days Node.js is front and center, too. Frameworks are pretty much the norm, but finding the right fit is something that will take a lot of research and getting your hands dirty. Master SQL as no matter which environment you settle with, they all need that. (PHP is married to MySql and Apache, or at least that was the case years ago.)\n\nAh ok, no problem. I’m still a “beginner” in code, so I’m still learning what all of this means lol. But I’ve been researching every language/framework you’ve mentioned so far. If you have any contacts that you feel could answer this question, I’d greatly appreciate a connection. Otherwise, I’ll keep asking around! Thank you for your info so far, has helped me to start diving into SQL (have done some PHP in the past, but need to brush up).\n\nSAG IPL will become your guide, where our group of very prepared and experienced people with critical involvement in the field of Website development and outlining are ready for serving. We give high-quality web development services at moderate costs. Here we are sharing some programming languages give us the ability to carve your ideas into a functioning design. Python\n\n Java\n\n C++\n\n C#\n\n PHP\n\n Swift"
    },
    {
        "link": "https://quora.com/What-should-I-learn-to-create-a-Java-web-chat-application",
        "document": "Something went wrong. Wait a moment and try again."
    },
    {
        "link": "https://oracle.com/technical-resources/articles/javaee/ajax.html",
        "document": ""
    },
    {
        "link": "https://searchmyexpert.com/resources/java-development/ajax-java-web-integration",
        "document": "In today's fast-paced digital world, where user experience and responsiveness are paramount, AJAX (Asynchronous JavaScript and XML) stands as a cornerstone technology in web development. AJAX is a set of web development techniques that uses various web technologies on the client side to create asynchronous web applications. By sending and retrieving data from a server asynchronously, without interfering with the display and behavior of the existing page, AJAX significantly enhances user experience. It's not a single technology but a combination of HTML, CSS, JavaScript, and XMLHttpRequest.\n• None AJAX allows web pages to communicate with servers asynchronously. Traditional web applications require reloading the entire page if content needs to be updated, but AJAX eliminates this need, updating parts of a web page without reloading the whole page.\n• None With AJAX, web applications can work more smoothly and faster, leading to a significantly enhanced user experience. This seamless operation is particularly crucial in today's world where users expect quick and responsive web interfaces.\n• None AJAX is pivotal in creating dynamic, responsive web interfaces. It allows for the updating of content dynamically without the need to refresh the page.\n\nJava Web Applications are developed using Java technologies like Servlets, JavaServer Pages (JSP), and JavaServer Faces (JSF). These applications run on a server and are accessed via a network, typically the internet. Java, being platform-independent, makes these applications highly portable across various operating systems and server configurations.\n• None Servlets are Java programs that extend the capabilities of servers that host applications accessed via a request-response programming model.\n• None JSP allows for the creation of dynamically generated web pages based on HTML, XML, or other document types.\n• None An MVC framework for building user interfaces for web applications, JSF simplifies the development integration of web-based user interfaces.\n\nThe Power of Combining AJAX with Java Web Applications\n\nIntegrating AJAX with Java Web Applications brings forth a synergy that leverages the robustness of Java and the dynamism of AJAX.\n• None The combination leads to significantly improved response times. AJAX's asynchronous nature means that parts of a web page can be updated without the need to reload the entire page, resulting in quicker interactions.\n• None AJAX integration allows for more dynamic and responsive UIs, making web applications feel more like desktop applications.\n• None Since AJAX can send and receive data asynchronously, it can reduce the load on servers, as only essential data is transmitted between client and server.\n• None By combining AJAX with Java's versatile backend, developers can create more efficient and powerful web applications, streamlining the development process.\n\nSetting Up the Development Environment for AJAX and Java Web Applications\n\nCreating a seamless and efficient development environment is crucial for the successful integration of AJAX into Java Web Applications. This environment includes the selection of an Integrated Development Environment (IDE) or text editor, configuring a JavaScript library like jQuery for AJAX calls, and setting up a web server like Tomcat or GlassFish. Each of these components plays a vital role in the development process, contributing to the ease and efficiency of building and testing web applications.\n\nChoosing the Right IDE or Text Editor for Java Development\n• None Eclipse is one of the most popular IDEs for Java development. Known for its extensive plugin ecosystem, it allows developers to adapt the environment to their specific needs.\n• None IntelliJ IDEA is a powerful IDE designed to maximize developer productivity. Its intelligent coding assistance and ergonomic design make it a favorite among many Java developers.\n• None NetBeans is another excellent choice for Java development, offering a clean and intuitive interface, and robust project management tools.\n• None jQuery, a fast, small, and feature-rich JavaScript library, simplifies HTML document traversal and manipulation, event handling, and AJAX interactions. Here's a simple guide to configuring jQuery for AJAX calls:\n• None Visit the official jQuery website and download the latest version.\n• None Add the jQuery script tag in your HTML file. This can be done by linking to a hosted version on a CDN or by including the downloaded file in your project directory.\n• None Use jQuery to write AJAX calls. jQuery simplifies the syntax for AJAX, making it more readable and easier to write.\n\nInstalling and Configuring a Web Server like Tomcat or GlassFish\n\nA widely used open-source implementation of the Java Servlet, JavaServer Pages, and Java Expression Language technologies.\n• None Download Apache Tomcat from its official website and follow the installation instructions for your operating system.\n• None Configure server settings like port numbers and deploy your Java web applications in the web apps directory of Tomcat for testing and development.\n\nAn open-source application server project started by Sun Microsystems for the Java EE platform.\n• None Download GlassFish from the Eclipse Foundation website and install it on your system.\n• None Configure GlassFish using its admin console, which provides a user-friendly interface for setting up domains, deploying applications, and managing resources.\n\nUnderstanding the Communication Flow in AJAX and Java Web Applications\n\nThe essence of AJAX (Asynchronous JavaScript and XML) in Java Web Applications lies in the interaction between the client-side JavaScript and the server-side Java components. This interaction, pivotal for dynamic web applications, hinges on the ability to exchange data asynchronously, leading to a more responsive and seamless user experience.\n• None On the client side, JavaScript plays a crucial role. It initiates AJAX calls to the server without reloading the entire page. JavaScript sends requests to the server and processes the responses.\n• None On the server side, Java web technologies like Servlets and JavaServer Pages (JSP) handle these AJAX requests. They process the data, perform necessary actions, and send back a response to the client-side JavaScript.\n• None JSON has become the go-to data format for AJAX requests due to its lightweight nature and ease of use in JavaScript. It's a text format that is completely language-independent but uses conventions familiar to programmers of the C family of languages.\n• None Initially the primary data format for AJAX, XML is still used in many applications. It is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.\n• None In synchronous communication, the client sends a request to the server and waits until it receives a response. This approach can lead to delays in user interaction, as the client cannot perform other operations while waiting for the server response.\n• None Asynchronous communication, the foundation of AJAX, allows the client to continue processing other tasks while waiting for the server's response. This non-blocking nature enhances the application's responsiveness and user experience.\n\nThe Flow of Communication in AJAX\n\nThe communication process in an AJAX-enabled Java web application typically involves the following steps:\n• None A user action on the web page (like clicking a button) triggers an AJAX call.\n• None JavaScript creates an XMLHttpRequest object and sends it to a server-side component.\n• None The Java server-side component (like a Servlet) processes the request. It might involve querying a database or performing some business logic.\n• None The server prepares the response in a suitable format (JSON or XML) and sends it back to the client.\n• None JavaScript receives the response and uses it to update the web page dynamically without reloading it.\n\nMastering AJAX in Java web applications largely revolves around building effective client-side AJAX code. This involves writing JavaScript code to make AJAX requests, handling different events to trigger these requests, and efficiently parsing and displaying the data received from the server. Let's delve into each of these aspects.\n• None Always prefer asynchronous requests to keep the web application responsive.\n• None Set appropriate request headers depending on the type of data being sent or expected.\n• None Ensure your JavaScript code works across different browsers.\n\nThe server-side component of an AJAX-driven Java Web Application is equally crucial as the client-side. It involves creating Java Servlets or JavaServer Pages (JSP) to handle AJAX requests, process them, and send back responses in a format like JSON or XML. This part of the application is where the business logic resides and where the data is manipulated and prepared for the client.\n\nJava Servlets are the backbone for handling AJAX requests on the server side. Here's how to develop a Servlet to manage these requests:\n• None Begin by creating a new Servlet. For instance, AjaxRequestHandlerServlet.\n• None Override these methods to handle GET and POST requests respectively.\n• None Extract parameters from the request. For example, if you're expecting a username, you can retrieve it using request.getParameter(\"username\").\n• None Implement the business logic based on the data received. This could involve querying a database, performing calculations, or any other server-side processing required by your application.\n• None Manipulate or transform the data as needed for the response.\n• None Decide whether the response will be in JSON, XML, or another format. JSON is widely used due to its compatibility with JavaScript and its lightweight nature.\n• None If you choose JSON, you can use libraries like javax.json or org.json to create a JSON object.\n• None For XML, you might use javax.xml.parsers to construct an XML response.\n• None After processing the request and formatting the response, send it back to the client. The client-side JavaScript will then parse and utilize this data.\n• None Implement error handling to manage any exceptions or issues that might occur during the processing of the request or the preparation of the response.\n\nBest Practices in Server-Side Development for AJAX\n• None Write efficient and clean code on the server side to reduce processing time and improve application performance.\n• None Ensure that your Servlet handles data securely, especially when dealing with sensitive information.\n• None Design your server-side components to be scalable, considering the potential growth in user numbers and data volume.\n\nEnsuring that your AJAX-driven Java Web Application is functioning correctly requires a thorough approach to debugging and testing. This step is crucial because it helps identify and fix issues that could impact user experience and application performance. Let's explore the effective techniques for debugging and testing AJAX functionality in Java web applications.\n\nModern browsers come equipped with developer tools, which are invaluable for debugging AJAX requests.\n• None Use this to monitor AJAX requests and responses. It shows detailed information about each request, including headers, the request method, the status code, and the response payload.\n• None Useful for logging JavaScript errors or any custom debug information. Console.log statements in your AJAX code can help trace issues.\n• None Step through your JavaScript code to identify logical errors or unexpected behaviors.\n• None Ensure the request is being sent to the correct URL.\n• None Status codes like 404 (Not Found) or 500 (Internal Server Error) can provide insights into what's going wrong.\n• None Verify that the data sent in the request and received in the response is as expected.\n\nImplement automated tests using frameworks like Selenium or Jasmine. These can simulate user actions and check AJAX functionality under different scenarios.\n• None Test how your application handles various events like clicks, form submissions, or changes in form inputs.\n• None Ensure that the parts of the page that should update in response to an AJAX call do so correctly.\n• None Test how the application behaves when an AJAX call completes successfully.\n• None Simulate server errors or network failures to see how the application handles these situations.\n• None Use tools like Apache JMeter to simulate multiple users or requests to test how your application scales and how AJAX requests perform under load.\n• None Measure how long AJAX requests take to complete and optimize any bottlenecks.\n• None Ensure that your AJAX functionality works across different browsers and devices. Tools like BrowserStack can be instrumental for this kind of testing.\n• None Test to ensure that user inputs in AJAX requests are properly validated and sanitized to prevent security vulnerabilities like XSS (Cross-Site Scripting).\n\nDeploying a Java web application with AJAX integration requires careful planning to ensure that the application is scalable, reliable, and secure. This step is crucial because it involves making the application accessible to its intended users while safeguarding against potential security threats. Let's delve into the key considerations for deployment and the best practices for security, along with resources for further learning and advanced AJAX techniques.\n• None Select a hosting service that supports the Java technology stack, including servlet containers or application servers like Apache Tomcat, Jetty, or GlassFish.\n• None Configure your server for optimal performance. This includes setting the right memory allocation, configuring connection pools, and ensuring that the server is tuned to handle the expected load.\n• None For high-traffic applications, consider using load balancers to distribute the traffic across multiple servers, which helps in managing large numbers of simultaneous AJAX requests.\n• None Use a CDN to serve static files (like JavaScript, CSS, and images) to reduce the load on your server and improve response times for users across different geographical locations.\n• None Implement SSL/TLS to encrypt data transmitted between the client and the server, ensuring that sensitive information is securely transmitted.\n\nSecurity Best Practices for AJAX in Java Web Applications\n• None Always validate and sanitize user inputs both on the client and server sides to prevent common vulnerabilities like SQL injection and cross-site scripting (XSS).\n• None When interacting with databases, use prepared statements or Object-Relational Mapping (ORM) frameworks to prevent SQL injection attacks.\n• None If your AJAX requests are cross-domain, ensure that CORS is correctly configured to allow only trusted domains.\n• None Implement secure session management practices. Use secure, HTTPOnly cookies for session handling to protect against session hijacking.\n• None Avoid revealing sensitive information in error messages. Custom error handling should be implemented to prevent leakage of system details.\n\nResources for Further Learning and Advanced AJAX Techniques\n• None \"Head First Servlets and JSP\" by Bryan Basham, Kathy Sierra, and Bert Bates.\n• None Udemy, Coursera, and Pluralsight offer courses on Java web development, AJAX, and security best practices.\n• None Consult the official documentation of Java Servlets, JSP, and the libraries/frameworks you are using for in-depth understanding and best practices.\n• None Platforms like Stack Overflow, GitHub, and the Oracle Java Community are excellent resources to learn from other developers’ experiences and ask questions.\n• None Using AJAX to build SPAs with frameworks like Angular, React, or Vue.js.\n\nIntegrating AJAX with Java Web Applications opens a realm of possibilities for creating dynamic, efficient, and user-friendly web applications. Throughout this comprehensive guide, we've explored the various facets of AJAX and Java, from setting up a development environment, and understanding the client-server communication flow, to debugging, testing, and deploying secure applications."
    },
    {
        "link": "https://netbeans.apache.org/tutorial/main/kb/docs/web/ajax-quickstart",
        "document": "This document provides an introduction to Ajax and demonstrates some of the features in the NetBeans IDE that allow you to program faster and more efficiently when working with Ajax-related technologies. While learning about the low-level functionality of Ajax, you build a simple application that employs auto-completion in a text field. Content here has been adapted from Greg Murray’s article and sample application from Using Ajax with Java Technology. Ajax stands for Asynchronous JavaScript and XML. In essence, Ajax is an efficient way for a web application to handle user interactions with a web page - a way that reduces the need to do a page refresh or full page reload for every user interaction. This enables rich behavior (similar to that of a desktop application or plugin-based web application) using a browser. Ajax interactions are handled asynchronously in the background. As this happens, a user can continue working with the page. Ajax interactions are initiated by JavaScript code. When the Ajax interaction is complete, JavaScript updates the HTML source of the page. The changes are made immediately without requiring a page refresh. Ajax interactions can be used to do things such as validate form entries (while the user is entering them) using server-side logic, retrieve detailed data from the server, dynamically update data on a page, and submit partial forms from the page. To complete this tutorial, you need the following software and resources.\n• The Java EE installation of the IDE enables you to optionally install the GlassFish server and the Apache Tomcat servlet container.\n• This tutorial assumes that you have a working knowledge of the various technologies it employs (i.e., HTML, CSS, JavaScript, Java and JSP). It attempts to provide an overview of the functionality provided by the code, but does not explain how the code works on a line-to-line basis.\n• If you need to compare your project with a working solution, you can download the sample application.\n\nImagine a web page in which a user can search for information about musical composers. The page includes a field where the user can enter the name of the composer. In the example application, the entry field has an auto-complete feature. In other words, the user can type in part of the composer name, and the web application attempts to complete the name by listing all composers whose first or last name begins with the characters entered. The auto-complete feature saves the user from having to remember the complete name of the composer and can provide a more intuitive and direct path to the sought-after information. Implementing auto-completion in a search field is something that can be performed using Ajax. Ajax works by employing an object to pass requests and responses asynchronously between the client and server. The following diagram illustrates the process flow of the communication that takes place between the client and server. The process flow of the diagram can be described by the following steps:\n• The user triggers an event, for example by releasing a key when typing in a name. This results in a JavaScript call to a function that initializes an object.\n• The object is configured with a request parameter that includes the ID of the component that triggered the event, and any value that the user entered. The object then makes an asynchronous request to the web server.\n• On the web server, an object such as a servlet or listener handles the request. Data is retrieved from the data store, and a response is prepared containing the data in the form of an XML document.\n• Finally, the object receives the XML data using a callback function, processes it, and updates the HTML DOM (Document Object Model) to display the page containing the new data. This tutorial demonstrates how to construct the auto-complete scenario by following the process flow indicated in the above diagram. You first create the client-side files for the presentation and functionality needed to generate the object. Then, you set up the server-side by creating the data store and business logic using Java-based technology. Finally, you return to the client-side and implement , and other JavaScript functionality to update the HTML DOM.\n\nBegin by creating a new web application project in the IDE. The IDE contains built-in templates for numerous project types.\n• Choose File > New Project. Under Categories, select Java Web. Under Projects, select Web Application then click Next.\n• In the Name and Location panel, enter for Project Name. The Project Location field enables you to specify the location of the project on your computer. Leave other options at their defaults and click Next. Figure 3. Specify the name and location for your application project\n• In the Server and Settings panel, select the server you want to deploy your application to. Only servers that are registered with the IDE are listed. Figure 4. Specify the server your application will be deployed to\n• Accept other default settings and click Finish. The project is generated in your file system and opens in the IDE. When Java-based web projects are created, an Ant build script is automatically generated which enables you to compile the project so that it can be immediately deployed and run on a server that has been registered in the IDE. A default entry page is generated and opens in the IDE’s Source Editor. Depending on the target server, the entry page will be either or . Before beginning to code, quickly try running the application to ensure that configuration between the IDE, your server, and browser is set up properly.\n• In the Projects window, right-click the project node and choose Run. The application is compiled, the application server starts and the application is deployed to it and run. The IDE opens your default browser and displays the default entry page. Now that you are certain your environment is set up correctly, begin by transforming your index page into the auto-completion interface that will be viewed by users. One of the advantages of using an IDE is that the editor you work in often provides you with code completion which, if you learn to apply it when you code, can rapidly increase your productivity. The IDE’s Source Editor generally adapts to the technology you are using, so if you are working in an HTML page, pressing the code completion key combination (Ctrl-Space) will produce suggestions for HTML tags and attributes. As will later be shown, the same applies for other technologies, such as CSS and JavaScript. A second feature you can make use of is the IDE’s Palette. The Palette provides easy-to-use templates for elements that are commonly applied in the technology you are coding in. You simply click on an item, and drag it to a location in the file open in the Source Editor. You can view large icons (as displayed here) by right-clicking in the Palette and choosing Show Big Icons.\n• Replace the content for the and . The index page requires no server-side scripting code, so you can safely delete any remnants that were created by default. The index page should now appear as shown below.\n• Add some explanatory text to describe the purpose of the text field. You can copy and paste in the following text at a point just beneath the tags: <p>This example shows how you can do real time auto-completion using Asynchronous JavaScript and XML (Ajax) interactions.</p> <p>In the form below enter a name. Possible names that will be completed are displayed below the form. For example, try typing in \"Bach,\" \"Mozart,\" or \"Stravinsky,\" then click on one of the selections to see composer details.</p>\n• Add an HTML form to the page. You can do this by making use of the elements listed in the IDE’s Palette. If the Palette is not open, choose Window > Palette from the main menu. Then, under HTML Forms, click on and drag a Form element into the page to a point beneath the tags that you just added. The Insert Form dialog box opens. Specify the following: Click OK. The HTML tags are inserted into the page containing the attributes you specified. (GET is applied by default, and so is not explicitly declared.)\n• Add an HTML table to the page. Under the HTML category in the Palette, click on a Table element and drag it to a point between the tags. The Insert Table dialog box opens. Specify the following:\n• Right-click inside the Source Editor and choose Format. This tidies up the code. Your form should now display similar to that below:\n• Within the first row of the table, type the following text into the first column (changes in bold):\n• Within the second column of the first row, instead of dragging a Text Input field from the Palette, type in the code below manually (changes in bold): When you type, try using the IDE’s built-in code completion support. For example, type in , then press Ctrl-Space. A list of suggested options displays below your cursor, and a description of the selected element appears in a box above. You can in fact press Ctrl-Space at anytime you are coding in the Source Editor to bring up possible options. Also, if there is only one possible option, pressing Ctrl-Space will automatically complete the element name. Figure 9. Press Ctrl-Space in the editor to invoke code completion and documentation support The attribute that you typed in above points to a JavaScript function named . This function is called each time a key is pressed in the form text field, and maps to the JavaScript call depicted in the Ajax flow diagram above. The IDE’s JavaScript Editor provides many advanced editing capabilities, such as intelligent code completion, semantic highlighting, instant renaming and refactoring capabilities, as well as many more features. JavaScript code completion is automatically provided when you code in files, as well as within tags when you work with other technologies (i.e., HTML, RHTML, JSP, PHP). The IDE can provide you with some hints when you are editing JavaScript code. You can specify the JavaScript hints options by choosing Tools > Options (NetBeans > Preferences on Mac) to open the Options window and then selecting the JavaScript language in the Hints tab in the Editor category. You can also add your own JavaScript code templates in the Code Templates tab in the Options window. Add a JavaScript file to the application and begin implementing .\n• In the Projects window, right-click the Web Pages node and choose New > JavaScript file. (If JavaScript file is not listed, choose Other. Then choose JavaScript file from the Web category in the New File wizard.)\n• Name the file and click Finish. The new JavaScript file appears in the Projects window within the Web Pages folder.\n• Type the code below into . var req; var isIE; function init() { completeField = document.getElementById(\"complete-field\"); } function doCompletion() { var url = \"autocomplete?action=complete&id=\" + escape(completeField.value); req = initRequest(); req.open(\"GET\", url, true); req.onreadystatechange = callback; req.send(null); } function initRequest() { if (window.XMLHttpRequest) { if (navigator.userAgent.indexOf('MSIE') != -1) { isIE = true; } return new XMLHttpRequest(); } else if (window.ActiveXObject) { isIE = true; return new ActiveXObject(\"Microsoft.XMLHTTP\"); } } The above code performs a simple browser compatibility check for Firefox 3 and Internet Explorer versions 6 and 7). If you would like to incorporate more robust code for compatibility issues, consider using this browser detect script from http://www.quirksmode.org.\n• Switch back to the index page and add a reference to the JavaScript file between the tags. You can quickly toggle between pages opened in the Source Editor by pressing Ctrl-Tab.\n• Insert a call to in the opening tag. This ensures that is called each time the page is loaded. The role of is to:\n• create a URL that contains data that can be utilized by the server-side,\n• prompt the object to send an asynchronous request to the server. The object is at the heart of Ajax and has become the de facto standard for enabling XML data to be passed asynchronously over HTTP. Asynchronous interaction implies that the browser can continue to process events in the page after the request is sent. Data is passed in the background, and can be automatically loaded into the page without requiring a page refresh. Notice that the object is actually created by , which is called by . The function checks whether can be understood by the browser, and if so it creates an object. Otherwise, it performs a check on (the equivalent for Internet Explorer 6), and creates an if identified. Three parameters are specified when you create an object: a URL, the HTTP method ( or ), and whether or not the interaction is asynchronous. In the above example, the parameters are:\n• The URL , and the text entered into the by the user:\n• , signifying that HTTP interactions use the method, and\n• , signifying that the interaction is asynchronous: If the interaction is set as asynchronous, a callback function must be specified. The callback function for this interaction is set with the statement: and a function must later be defined. The HTTP interaction begins when is called. This action maps to the HTTP request that is sent to the web server in the above flow diagram.\n\nThe IDE provides comprehensive support for server-side web programming. While this includes basic editor support for many popular programming and scripting languages, it also encompasses web services, such as SOAP, REST, SaaS, and MVC-oriented frameworks, such as JSF, Spring and Struts. Several NetBeans plugins are available from the NetBeans Plugin Portal for Ajax-driven frameworks, including GWT and Struts2. The application’s business logic processes requests by retrieving data from the data store, then preparing and sending the response. This is implemented here using a servlet. Before you begin coding the servlet, set up the data store and the functionality required by the servlet to access data. For this simple application, you create a class called that retains composer data using a `HashMap`. A allows you to store pairs of linked items in key-value pairs. You also create a class that enables the servlet to retrieve data from entries in the .\n• Right-click on the project node in the Projects window and choose New > Java Class.\n• Name the class , and enter in the Package field. This creates a new package to contain the class, as well as other classes that will later be created.\n• Click Finish. The class is created and opens in the Source Editor.\n• In the Source Editor, paste in the following code: package com.ajax; import java.util.HashMap; /** * * @author nbuser */ public class ComposerData { private HashMap composers = new HashMap(); public HashMap getComposers() { return composers; } public ComposerData() { composers.put(\"1\", new Composer(\"1\", \"Johann Sebastian\", \"Bach\", \"Baroque\")); composers.put(\"2\", new Composer(\"2\", \"Arcangelo\", \"Corelli\", \"Baroque\")); composers.put(\"3\", new Composer(\"3\", \"George Frideric\", \"Handel\", \"Baroque\")); composers.put(\"4\", new Composer(\"4\", \"Henry\", \"Purcell\", \"Baroque\")); composers.put(\"5\", new Composer(\"5\", \"Jean-Philippe\", \"Rameau\", \"Baroque\")); composers.put(\"6\", new Composer(\"6\", \"Domenico\", \"Scarlatti\", \"Baroque\")); composers.put(\"7\", new Composer(\"7\", \"Antonio\", \"Vivaldi\", \"Baroque\")); composers.put(\"8\", new Composer(\"8\", \"Ludwig van\", \"Beethoven\", \"Classical\")); composers.put(\"9\", new Composer(\"9\", \"Johannes\", \"Brahms\", \"Classical\")); composers.put(\"10\", new Composer(\"10\", \"Francesco\", \"Cavalli\", \"Classical\")); composers.put(\"11\", new Composer(\"11\", \"Fryderyk Franciszek\", \"Chopin\", \"Classical\")); composers.put(\"12\", new Composer(\"12\", \"Antonin\", \"Dvorak\", \"Classical\")); composers.put(\"13\", new Composer(\"13\", \"Franz Joseph\", \"Haydn\", \"Classical\")); composers.put(\"14\", new Composer(\"14\", \"Gustav\", \"Mahler\", \"Classical\")); composers.put(\"15\", new Composer(\"15\", \"Wolfgang Amadeus\", \"Mozart\", \"Classical\")); composers.put(\"16\", new Composer(\"16\", \"Johann\", \"Pachelbel\", \"Classical\")); composers.put(\"17\", new Composer(\"17\", \"Gioachino\", \"Rossini\", \"Classical\")); composers.put(\"18\", new Composer(\"18\", \"Dmitry\", \"Shostakovich\", \"Classical\")); composers.put(\"19\", new Composer(\"19\", \"Richard\", \"Wagner\", \"Classical\")); composers.put(\"20\", new Composer(\"20\", \"Louis-Hector\", \"Berlioz\", \"Romantic\")); composers.put(\"21\", new Composer(\"21\", \"Georges\", \"Bizet\", \"Romantic\")); composers.put(\"22\", new Composer(\"22\", \"Cesar\", \"Cui\", \"Romantic\")); composers.put(\"23\", new Composer(\"23\", \"Claude\", \"Debussy\", \"Romantic\")); composers.put(\"24\", new Composer(\"24\", \"Edward\", \"Elgar\", \"Romantic\")); composers.put(\"25\", new Composer(\"25\", \"Gabriel\", \"Faure\", \"Romantic\")); composers.put(\"26\", new Composer(\"26\", \"Cesar\", \"Franck\", \"Romantic\")); composers.put(\"27\", new Composer(\"27\", \"Edvard\", \"Grieg\", \"Romantic\")); composers.put(\"28\", new Composer(\"28\", \"Nikolay\", \"Rimsky-Korsakov\", \"Romantic\")); composers.put(\"29\", new Composer(\"29\", \"Franz Joseph\", \"Liszt\", \"Romantic\")); composers.put(\"30\", new Composer(\"30\", \"Felix\", \"Mendelssohn\", \"Romantic\")); composers.put(\"31\", new Composer(\"31\", \"Giacomo\", \"Puccini\", \"Romantic\")); composers.put(\"32\", new Composer(\"32\", \"Sergei\", \"Rachmaninoff\", \"Romantic\")); composers.put(\"33\", new Composer(\"33\", \"Camille\", \"Saint-Saens\", \"Romantic\")); composers.put(\"34\", new Composer(\"34\", \"Franz\", \"Schubert\", \"Romantic\")); composers.put(\"35\", new Composer(\"35\", \"Robert\", \"Schumann\", \"Romantic\")); composers.put(\"36\", new Composer(\"36\", \"Jean\", \"Sibelius\", \"Romantic\")); composers.put(\"37\", new Composer(\"37\", \"Bedrich\", \"Smetana\", \"Romantic\")); composers.put(\"38\", new Composer(\"38\", \"Richard\", \"Strauss\", \"Romantic\")); composers.put(\"39\", new Composer(\"39\", \"Pyotr Il'yich\", \"Tchaikovsky\", \"Romantic\")); composers.put(\"40\", new Composer(\"40\", \"Guiseppe\", \"Verdi\", \"Romantic\")); composers.put(\"41\", new Composer(\"41\", \"Bela\", \"Bartok\", \"Post-Romantic\")); composers.put(\"42\", new Composer(\"42\", \"Leonard\", \"Bernstein\", \"Post-Romantic\")); composers.put(\"43\", new Composer(\"43\", \"Benjamin\", \"Britten\", \"Post-Romantic\")); composers.put(\"44\", new Composer(\"44\", \"John\", \"Cage\", \"Post-Romantic\")); composers.put(\"45\", new Composer(\"45\", \"Aaron\", \"Copland\", \"Post-Romantic\")); composers.put(\"46\", new Composer(\"46\", \"George\", \"Gershwin\", \"Post-Romantic\")); composers.put(\"47\", new Composer(\"47\", \"Sergey\", \"Prokofiev\", \"Post-Romantic\")); composers.put(\"48\", new Composer(\"48\", \"Maurice\", \"Ravel\", \"Post-Romantic\")); composers.put(\"49\", new Composer(\"49\", \"Igor\", \"Stravinsky\", \"Post-Romantic\")); composers.put(\"50\", new Composer(\"50\", \"Carl\", \"Orff\", \"Post-Romantic\")); } } You will notice that a warning is displayed in the left margin of the editor because the class cannot be found. Perform the following steps to create the class.\n• Right-click on the project node in the Projects window and choose New > Java Class.\n• Name the class , and choose from the drop-down list in the Package field. Click Finish. When you click Finish the IDE creates the class and opens the file in the Source Editor.\n• In the Source Editor, paste in the following code: After you create the class if you look at the class in the editor you can see that the warning annotations are no longer there. If you still see warning annotations in you can try to resolve the error by adding any missing import statements. Create a servlet to handle the URL that is received by the incoming request.\n• Right-click on the project node in the Projects window and choose New > Servlet to open the New Servlet wizard. (Choose Other and select Servlet from the Web category if Servlet is not displayed by default in the popup menu.)\n• Name the servlet , and choose from the drop-down list in the Package field. Click Next.\n• In the Configure Servlet Deployment panel, change the URL pattern to so that it matches the URL that you previously set in the object. This panel saves you the step of needing to manually add these details to the deployment descriptor.\n• Optionally, select \"Add servlet information to deployment descriptor.\" This is so your project is the same as the downloaded sample. With later versions of the IDE, by default the servlet is registered by a annotation instead of in a deployment descriptor. The project will still work if you use the annotation instead of a deployment descriptor.\n• Click Finish. The servlet is created and opens in the Source Editor. The only methods you need to override are , to define how the servlet handles the request, and , which needs to initiate a so the servlet can access other classes in the application once it is put into service. You can override methods from superclasses using the IDE’s Insert Code popup menu. Implement by performing the following steps.\n• Place your cursor beneath the class declaration in the Source Editor. Press Alt-Insert (Ctrl-I on Mac) to open the Generate Code popup menu.\n• Choose Override Method. In the dialog that displays, all classes that inherits from are displayed. Expand the GenericServlet node and select .\n• Click OK. The method is added in the Source Editor.\n• Add a variable for a object and modify (changes in bold):\n• Add an import statement for . You can do this by clicking on the lightbulb icon that displays in the left margin of the Source Editor Figure 13. Import hints display in left margin of the Source Editor The method needs to parse the URL of the request, retrieve data from the data store, and prepare a response in XML format. Note that the method declaration was generated when you created the class. To view it, you may need to expand the HttpServlet methods by clicking on the expand icon (images:./expand-icon.png[]) in the left margin.\n• Add the following variable declarations beneath the class declaration. This creates a of all composer data, which is then employed by .\n• Scroll down to and implement the method as follows: @Override public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String action = request.getParameter(\"action\"); String targetId = request.getParameter(\"id\"); StringBuffer sb = new StringBuffer(); if (targetId != null) { targetId = targetId.trim().toLowerCase(); } else { context.getRequestDispatcher(\"/error.jsp\").forward(request, response); } boolean namesAdded = false; if (action.equals(\"complete\")) { // check if user sent empty string if (!targetId.equals(\"\")) { Iterator it = composers.keySet().iterator(); while (it.hasNext()) { String id = (String) it.next(); Composer composer = (Composer) composers.get(id); if ( // targetId matches first name composer.getFirstName().toLowerCase().startsWith(targetId) || // targetId matches last name composer.getLastName().toLowerCase().startsWith(targetId) || // targetId matches full name composer.getFirstName().toLowerCase().concat(\" \") .concat(composer.getLastName().toLowerCase()).startsWith(targetId)) { sb.append(\"<composer>\"); sb.append(\"<id>\" + composer.getId() + \"</id>\"); sb.append(\"<firstName>\" + composer.getFirstName() + \"</firstName>\"); sb.append(\"<lastName>\" + composer.getLastName() + \"</lastName>\"); sb.append(\"</composer>\"); namesAdded = true; } } } if (namesAdded) { response.setContentType(\"text/xml\"); response.setHeader(\"Cache-Control\", \"no-cache\"); response.getWriter().write(\"<composers>\" + sb.toString() + \"</composers>\"); } else { //nothing to show response.setStatus(HttpServletResponse.SC_NO_CONTENT); } } if (action.equals(\"lookup\")) { // put the target composer in the request scope to display if ((targetId != null) && composers.containsKey(targetId.trim())) { request.setAttribute(\"composer\", composers.get(targetId)); context.getRequestDispatcher(\"/composer.jsp\").forward(request, response); } } } As you can see in this servlet, there is nothing really new you need to learn to write server-side code for Ajax processing. The response content type needs to be set to for cases where you want to exchange XML documents. With Ajax, you can also exchange plain text or even snippets of JavaScript which may be evaluated or executed by the callback function on the client. Note too that some browsers might cache the results, and so it may be necessary to set the Cache-Control HTTP header to . In this example, the servlet generates an XML document that contains all composers with a first or last name beginning with the characters typed in by the user. This document maps to the XML Data depicted in the flow diagram above. Here is an example of an XML document that is returned to the object: You can use the IDE’s HTTP Monitor to view the returned XML data once you complete the application.\n\nYou must now define the callback function to handle the server’s response, and add any functionality necessary to reflect changes in the page that is viewed by the user. This requires modifying the HTML DOM. You need to create JSP pages to display the results of a successful request or the error messages of a failed request. You can then create a simple stylesheet for the presentation. The callback function is called asynchronously at specific points during HTTP interaction when the property of the object changes. In the application you are building, the callback function is . You recall that in , was set as the property to a function. Now, implement the callback function as follows.\n• Open in the Source Editor and type in the code below. A of \"4\" signifies the completion of the HTTP interaction. The API for indicates that there are 5 possible values that can be set. These are: Notice that the function is called only when the is \"4\" and the — the HTTP status code definition of the request — is \"200\", signifying a success. You will define next in Updating the HTML DOM. The function handles the incoming XML data. In doing so, it relies on several ancillary functions, such as , , and . You must also introduce new elements to the index page, such as a second HTML table which serves as the auto-complete box, and ID’s for elements so they can be referenced in . Finally, you create new variables corresponding to ID’s for elements in the index page, initialize them in the function that you previously implemented, and add some functionality that is needed each time the index page is loaded. Note: The functions and elements that you create in the following steps work interdependently. It is recommended that you work through this section, then examine the code once it is all in place.\n• Open the index page in the Source Editor and type in the below code for the second row of the HTML table you previously created. The second row of the table contains another HTML table. This table represents the auto-complete box that will be used to populate composer names.\n• Open in the Source Editor and the following three variables to the top of the file.\n• Add the following lines (in bold) to the function. One purpose of is to make elements inside the index page accessible to other functions that will modify the index page’s DOM. This function creates a new table row, inserts a link to a composer into it using the data passed to the function via its three parameters, and inserts the row into the index page’s element. function getElementY(element){ var targetTop = 0; if (element.offsetParent) { while (element.offsetParent) { targetTop += element.offsetTop; element = element.offsetParent; } } else if (element.y) { targetTop += element.y; } return targetTop; } This function is applied to find the vertical position of the parent element. This is necessary because the actual position of the element, when it is displayed, is often dependent on browser type and version. Note that the element, when displayed containing composer names, is shifted to the lower right of the table in which it exists. The correct height positioning is determined by . See this explanation of on http://www.quirksmode.org/. function clearTable() { if (completeTable.getElementsByTagName(\"tr\").length > 0) { completeTable.style.display = 'none'; for (loop = completeTable.childNodes.length -1; loop >= 0 ; loop--) { completeTable.removeChild(completeTable.childNodes[loop]); } } } This function sets the display of the element to 'none', (i.e., makes it invisible), and it removes any existing composer name entries that were created.\n• Modify the function to call each time new data is received from the server. Any composer entries that already exist in the auto-complete box are therefore removed before it becomes populated with new entries. function parseMessages(responseXML) { // no matches returned if (responseXML == null) { return false; } else { var composers = responseXML.getElementsByTagName(\"composers\")[0]; if (composers.childNodes.length > 0) { completeTable.setAttribute(\"bordercolor\", \"black\"); completeTable.setAttribute(\"border\", \"1\"); for (loop = 0; loop < composers.childNodes.length; loop++) { var composer = composers.childNodes[loop]; var firstName = composer.getElementsByTagName(\"firstName\")[0]; var lastName = composer.getElementsByTagName(\"lastName\")[0]; var composerId = composer.getElementsByTagName(\"id\")[0]; appendComposer(firstName.childNodes[0].nodeValue, lastName.childNodes[0].nodeValue, composerId.childNodes[0].nodeValue); } } } } The function receives as a parameter an object representation of the XML document returned by the servlet. The function programmatically traverses the XML document, extracting the , , and of each entry, then passes this data to . This results in a dynamic update to the contents of the element. For example, an entry that is generated and inserted into might look as follows: The dynamic update to the element represents the final step of the process flow of communication that takes place during communication using Ajax. This update maps to the HTML & CSS data being sent to the presentation in the flow diagram above. To display the results, you need a JSP file named . This page is called from during a lookup action. You also need an file, which is called from if the composer cannot be found.\n• In the Projects window, right-click the application’s Web Pages folder and select New > JSP. The New JSP wizard opens.\n• In the File Name field, type . In the Created File field, you should see a path ending in .\n• Click Finish. The file opens in the editor. A node for the file appears in the Projects window in the Web Pages folder.\n• Replace the placeholder code in with the following code: <html> <head> <title>Composer Information</title> <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\"> </head> <body> <table> <tr> <th colspan=\"2\">Composer Information</th> </tr> <tr> <td>First Name: </td> <td>${requestScope.composer.firstName}</td> </tr> <tr> <td>Last Name: </td> <td>${requestScope.composer.lastName}</td> </tr> <tr> <td>ID: </td> <td>${requestScope.composer.id}</td> </tr> <tr> <td>Category: </td> <td>${requestScope.composer.category}</td> </tr> </table> <p>Go back to <a href=\"index.html\" class=\"link\">application home</a>.</p> </body> </html> You will need to change the link to return to the index page if your index page is .\n• Create another JSP file in the project’s Web Pages folder. Name the file .\n• Replace the placeholder code in with the following code: <!DOCTYPE html> <html> <head> <link rel=\"stylesheet\" type=\"text/css\" href=\"stylesheet.css\"> <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> <title>Seach Error</title> </head> <body> <h2>Seach Error</h2> <p>An error occurred while performing the search. Please try again.</p> <p>Go back to <a href=\"index.html\" class=\"link\">application home</a>.</p> </body> </html> You will need to change the link to return to the index page if your index page is . At this stage, you have completed all the code needed for the functionality of the application. To see the results of your efforts, try running the application now.\n• In the Projects window, right-click the project node and choose Run. The project is recompiled and deployed to the target server. Your browser opens, and you can see the index page. To add a stylesheet to your application, simply create a file and link to it from your presentation page(s). When you work in files, the IDE provides you with code completion support, as well as the following windows to help you generate and edit stylesheet rules.\n• CSS Styles window. The CSS Styles window enables you to edit the declarations of rules for HTML elements and selectors in a CSS file.\n• Create CSS Rules dialog box. The Create CSS Rule dialog box enables you to create new rules in a CSS style sheet.\n• *Add CSS Property dialog box.*The Add CSS Property dialog box enables you to add declarations to a CSS rule in a style sheet by adding properties and values. To add a stylesheet to your application perform the following steps.\n• In the Projects window, right-click the Web Pages node and choose New > Cascading Style Sheet (If Cascading Style Sheet is not listed, choose Other. Then choose Cascading Style Sheet from the Web category in the New File wizard.)\n• In the CSS File Name text field, type . Click Finish. The new file is created and opens in the editor.\n• Type the following rules in in the editor. You can make use of the IDE’s code completion support by pressing Ctrl-Space at points when you want to call up suggestions. You can use the CSS Styles window to quickly view the properties and edit style rules. When you select a rule in the upper pane of the CSS Style window you can see the properties of the rule in the lower pane. You can add a CSS Rules to the stylesheet by clicking the Edit CSS Rules icon (images:./newcssrule.png[title=\"New CSS Property icon\"]) in the toolbar of the upper pane. You can modify rules in the lower pane by editing the property sheet and add properties by clicking the Add Property icon (images:./newcssproperty.png[title=\"New CSS Property icon\"]) in the toolbar of the lower pane.\n• Switch to the index page in the Source Editor, and add a reference to the stylesheet between the tags.\n• Add the class that is defined in the stylesheet to the element (changes in bold). You can use the code completion in the editor to help you select the style rule that you want to apply to the selector. As indicated in , this rule positions the element so that it displays slightly to the right of its parent element. When you save the index page the application is automatically redeployed to the server. If the page is still open in your browser you can reload the page to see that the page is now rendered according to the rules in the CSS stylesheet.\n\nWhen you run the application again, it displays in the browser using the stylesheet you just created. Each time you type in a character, an asynchronous request is sent to the server, and returned with XML data that has been prepared by . As you enter more characters, the number of composer names decreases to reflect the new list of matches. You can use the IDE’s HTTP Server monitor to verify the HTTP communication that takes place as requests and responses are passed between the client and server. The HTTP Server Monitor displays information such as client and server headers, session properties, cookie details, as well as request parameters. Before you begin using the HTTP monitor, you must first enable it on the server you are using.\n• Open the Servers window by choosing Tools > Servers from the main menu.\n• In the left pane, select the server you are using with the project. Then, in the right pane, select the Enable HTTP Monitor option. This option displays under the Common tab for the GlassFish server. For Tomcat, it resides under the Connection tab. If the server is already running, you need to restart it in order to allow changes to take effect. You can restart the server by opening the Services window (Window > Services), then right-clicking your server beneath the Servers node and choosing Restart. Now, when you run the application again, the HTTP monitor opens in the lower region of the IDE. You can select a record in the left pane, then click the tabs in the main window to view information concerning each request that is made. You can verify the XML data that is sent from the server as a result of the asynchronous request made when a user enters a character in the auto-complete field.\n• In the tree view on the left side of the HTTP monitor, right-click a request record and choose Replay. The response is generated in your browser. In this case, because the response consists of XML data, the browser displays the data in it’s native XML viewer. This concludes the Introduction to Ajax. Hopefully by now you realize that Ajax is simply exchanging information over HTTP in the background, and updating that page dynamically based on the results. You may note that the application you built has numerous shortcomings, for example nothing happens when a composer name is selected from the auto-complete box! You are welcome to download the solution project to see how this can be implemented using JSP technology. Furthermore, you might want to investigate server-side validation that prevents a user from requesting a name that does not exist in the data store. You can learn more about these techniques and technologies by following other tutorials on the Java EE & Java Web Learning Trail."
    },
    {
        "link": "https://docs.oracle.com/javaee/7/tutorial/jsf-ajax001.htm",
        "document": "Ajax refers to JavaScript and XML, technologies that are widely used for creating dynamic and asynchronous web content. While Ajax is not limited to JavaScript and XML technologies, more often than not they are used together by web applications. The focus of this tutorial is on using JavaScript based Ajax functionality in JavaServer Faces web applications.\n\nJavaScript is a dynamic scripting language for web applications. It allows users to add enhanced functionality to user interfaces and allows web pages to interact with clients asynchronously. JavaScript runs mainly on the client side (as in a browser) and thereby reduces server access by clients.\n\nWhen a JavaScript function sends an asynchronous request from the client to the server, the server sends back a response that is used to update the page's Document Object Model (DOM). This response is often in the format of an XML document. The term Ajax refers to this interaction between the client and server.\n\nThe server response need not be in XML only; it can also be in other formats, such as JSON (see Introduction to JSON and ). This tutorial does not focus on the response formats.\n\nAjax enables asynchronous and partial updating of web applications. Such functionality allows for highly responsive web pages that are rendered in near real time. Ajax-based web applications can access server and process information and can also retrieve data without interfering with the display and rendering of the current web page on a client (such as a browser).\n\nSome of the advantages of using Ajax are as follows:\n• Form data validation in real time, eliminating the need to submit the form for verification\n• Enhanced functionality for web pages, such as user name and password prompts"
    },
    {
        "link": "https://w3schools.com/js/js_ajax_intro.asp",
        "document": "W3Schools offers a wide range of services and products for beginners and professionals, helping millions of people everyday to learn and master new skills."
    }
]