[
    {
        "link": "https://css-tricks.com/snippets/css/complete-guide-grid",
        "document": "CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. CSS has always been used to layout our web pages, but it’s never done a very good job of it. First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). Flexbox is also a very great layout tool, but its one-directional flow has different use cases — and they actually work together quite well! Grid is the very first CSS module created specifically to solve the layout problems we’ve all been hacking our way around for as long as we’ve been making websites. The intention of this guide is to present the Grid concepts as they exist in the latest version of the specification. So I won’t be covering the out-of-date Internet Explorer syntax (even though you can absolutely use Grid in IE 11) or other historical hacks.\n\nAs of March 2017, most browsers shipped native, unprefixed support for CSS Grid: Chrome (including on Android), Firefox, Safari (including on iOS), and Opera. Internet Explorer 10 and 11 on the other hand support it, but it’s an old implementation with an outdated syntax. The time to build with grid is now! To get started you have to define a container element as a grid with , set the column and row sizes with and , and then place its child elements into the grid with and . Similarly to flexbox, the source order of the grid items doesn’t matter. Your CSS can place them in any order, which makes it super easy to rearrange your grid with media queries. Imagine defining the layout of your entire page, and then completely rearranging it to accommodate a different screen width all with only a couple lines of CSS. Grid is one of the most powerful CSS modules ever introduced.\n\nBefore diving into the concepts of Grid it’s important to understand the terminology. Since the terms involved here are all kinda conceptually similar, it’s easy to confuse them with one another if you don’t first memorize their meanings defined by the Grid specification. But don’t worry, there aren’t many of them. The element on which is applied. It’s the direct parent of all the grid items. In this example is the grid container. The dividing lines that make up the structure of the grid. They can be either vertical (“column grid lines”) or horizontal (“row grid lines”) and reside on either side of a row or column. Here the yellow line is an example of a column grid line. The space between two adjacent grid lines. You can think of them as the columns or rows of the grid. Here’s the grid track between the second and third-row grid lines. The total space surrounded by four grid lines. A grid area may be composed of any number of grid cells. Here’s the grid area between row grid lines 1 and 3, and column grid lines 1 and 3. The children (i.e. direct descendants) of the grid container. Here the elements are grid items, but isn’t. The space between two adjacent row and two adjacent column grid lines. It’s a single “unit” of the grid. Here’s the grid cell between row grid lines 1 and 2, and column grid lines 2 and 3."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout",
        "document": "The CSS grid layout module excels at dividing a page into major regions or defining the relationship in terms of size, position, and layering between parts of a control built from HTML primitives. Like tables, grid layout enables an author to align elements into columns and rows. However, many more layouts are either possible or easier with CSS grid than they were with tables. For example, a grid container's child elements could position themselves so they actually overlap and layer, similar to CSS positioned elements.\n\nThe example shows a three-column track grid with new rows created at a minimum of 100 pixels and a maximum of auto. Items have been placed onto the grid using line-based placement. * { box-sizing: border-box; } .wrapper { max-width: 940px; margin: 0 auto; } .wrapper > div { border: 2px solid rgb(233 171 88); border-radius: 5px; background-color: rgb(233 171 88 / 50%); padding: 1em; color: #d9480f; } .wrapper { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; grid-auto-rows: minmax(100px, auto); } .one { grid-column: 1 / 3; grid-row: 1; } .two { grid-column: 2 / 4; grid-row: 1 / 3; } .three { grid-column: 1; grid-row: 2 / 5; } .four { grid-column: 3; grid-row: 3; } .five { grid-column: 2; grid-row: 4; } .six { grid-column: 3; grid-row: 4; } This sample animation uses , , , and to create the grid, and and to position items within in the grid. To view and edit the HTML and CSS used, click the 'Play' at the top right of the example."
    },
    {
        "link": "https://smashingmagazine.com/2018/04/best-practices-grid-layout",
        "document": "In some ways, we are all still so new to CSS Grid Layout. A lot of folks keep asking about best practices that are available out there. In this article, Rachel Andrew is going to try and cover some of the things that either could be described as best practices, and some things that you probably don’t need to worry about. She will ran a survey and share the results as well as her personal thoughts.\n\nAn increasingly common question — now that people are using CSS Grid Layout in production — seems to be “What are the best practices?” The short answer to this question is to use the layout method as defined in the specification. The particular parts of the spec you choose to use, and indeed how you combine Grid with other layout methods such as Flexbox, is down to what works for the patterns you are trying to build and how you and your team want to work.\n\nLooking deeper, I think perhaps this request for “best practices” perhaps indicates a lack of confidence in using a layout method that is very different from what came before. Perhaps a concern that we are using Grid for things it wasn’t designed for, or not using Grid when we should be. Maybe it comes down to worries about supporting older browsers, or in how Grid fits into our development workflow.\n\nIn this article, I’m going to try and cover some of the things that either could be described as best practices, and some things that you probably don’t need to worry about.\n\nTo help inform this article, I wanted to find out how other people were using Grid Layout in production, what were the challenges they faced, what did they really enjoy about it? Were there common questions, problems or methods being used. To find out, I put together a quick survey, asking questions about how people were using Grid Layout, and in particular, what they most liked and what they found challenging.\n\nIn the article that follows, I’ll be referencing and directly quoting some of those responses. I’ll also be linking to lots of other resources, where you can find out more about the techniques described. As it turned out, there was far more than one article worth of interesting things to unpack in the survey responses. I’ll address some of the other things that came up in a future post.\n\nIf there is any part of the Grid specification that you need to take care when using, it is when using anything that could cause content re-ordering:\n\nThis is not unique to Grid, however, the ability to rearrange content so easily in two dimensions makes it a bigger problem for Grid. However, if using any method that allows content re-ordering — be that Grid, Flexbox or even absolute positioning — you need to take care not to disconnect the visual experience from how the content is structured in the document. Screen readers (and people navigating around the document using a keyboard only) are going to be following the order of items in the source.\n\nThe places where you need to be particularly careful are when using to reverse the order in Flexbox; the property in Flexbox or Grid; any placement of Grid items using any method, if it moves items out of the logical order in the document; and using the dense packing mode of .\n\nFor more information on this issue, see the following resources:\n\nWhich Grid Layout Methods Should I Use?\n\nWhen you first take a look at Grid, it might seem overwhelming with so many different ways of creating a layout. Ultimately, however, it all comes down to things being positioned from one line of the grid to another. You have choices based on the of layout you are trying to achieve, as well as what works well for your team and the site you are building.\n\nThere is no right or wrong way. Below, I will pick up on some of the common themes of confusion. I’ve also already covered many other potential areas of confusion in a previous article “Grid Gotchas and Stumbling Blocks.”\n\nShould I Use An Implicit Or Explicit Grid?\n\nThe grid you define with and is known as the Explicit Grid. The Explicit Grid enables the naming of lines on the Grid and also gives you the ability to target the end line of the grid with . You’ll choose an Explicit Grid to do either of these things and in general when you have a layout all designed and know exactly where your grid lines should go and the size of the tracks.\n\nI use the Implicit Grid most often for row tracks. I want to define the columns but then rows will just be auto-sized and grow to contain the content. You can control the Implicit Grid to some extent with and , however, you have less control than if you are defining everything.\n\nYou need to decide whether you know exactly how much content you have and therefore the number of rows and columns — in which case you can create an Explicit Grid. If you do not know how much content you have, but simply want rows or columns created to hold whatever there is, you will use the Implicit Grid.\n\nNevertheless, it’s possible to combine the two. In the below CSS, I have defined three columns in the Explicit Grid and three rows, so the first three rows of content will be the following:\n• A track of at least 200px in height, but expanding to take content taller,\n• A track of at least 300px in height (but expands).\n\nAny further content will go into a row created in the Implicit Grid, and I am using the property to make those tracks at least 300px tall, expanding to .\n\nBy using Repeat Notation, autofill, and minmax you can create a pattern of as many tracks as will fit into a container, thus removing the need for Media Queries to some extent. This technique can be found in this video tutorial, and also demonstrated along with similar ideas in my recent article “Using Media Queries For Responsive Design In 2018.”\n\nChoose this technique when you are happy for content to drop below earlier content when there is less space, and are happy to allow a lot of flexibility in sizing. You have specifically asked for your columns to display with a minimum size, and to auto fill.\n\nThere were a few comments in the survey that made me wonder if people were choosing this method when they really wanted a grid with a fixed number of columns. If you are ending up with an unpredictable number of columns at certain breakpoints, you might be better to set the number of columns — and redefine it with media queries as needed — rather than using or .\n\nWhich Method Of Track Sizing Should I Use?\n\nI described track sizing in detail in my article “How Big Is That Box? Understanding Sizing In Grid Layout,” however, I often get questions as to which method of track sizing to use. Particularly, I get asked about the difference between percentage sizing and the unit.\n\nIf you simply use the unit as specced, then it differs from using a percentage because it distributes available space. If you place a larger item into a track then the way the until will work is to allow that track to take up more space and distribute what is left over.\n\nTo cause the unit to distribute all of the space in the grid container you need to give it a minimum size of using .\n\nSo you can choose to use in either of these scenarios: ones where you do want space distribution from a basis of auto (the default behavior), and those where you want equal distribution. I would typically use the unit as it then works out the sizing for you, and enables the use of fixed width tracks or gaps. The only time I use a percentage instead is when I am adding grid components to an existing layout that uses other layout methods too. If I want my grid components to line up with a float- or flex-based layout which is using percentages, using them in my grid layout means everything uses the same sizing method.\n\nYou will often find that you only need to place one or two items in your layout, and the rest fall into place based on content order. In fact, this is a really good test that you haven’t disconnected the source and visual display. If things pretty much drop into position based on auto-placement, then they are probably in a good order.\n\nOnce I have decided where everything goes, however, I do tend to assign a position to everything. This means that I don’t end up with strange things happening if someone adds something to the document and grid auto-places it somewhere unexpected, thus throwing out the layout. If everything is placed, Grid will put that item into the next available empty grid cell. That might not be exactly where you want it, but sat down at the end of your layout is probably better than popping into the middle and pushing other things around.\n\nWhich Positioning Method To Use?\n\nWhen working with Grid Layout, ultimately everything comes down to placing items from one line to another. Everything else is essentially a helper for that.\n\nDecide with your team if you want to name lines, use Grid Template Areas, or if you are going to use a combination of different types of layout. I find that I like to use Grid Template Areas for small components in particular. However, there is no right or wrong. Work out what is best for you.\n\nGrid In Combination With Other Layout Mechanisms\n\nRemember that Grid Layout isn’t the one true layout method to rule them all, it’s designed for a certain type of layout — namely two-dimensional layout. Other layout methods still exist and you should consider each pattern and what suits it best.\n\nI think this is actually quite hard for those of us used to hacking around with layout methods to make them do something they were not really designed for. It is a really good time to take a step back, look at the layout methods for the tasks they were designed for, and remember to use them for those tasks.\n\nIn particular, no matter how often I write about Grid versus Flexbox, I will be asked which one people should use. There are many patterns where either layout method makes perfect sense and it really is up to you. No-one is going to shout at you for selecting Flexbox over Grid, or Grid over Flexbox.\n\nIn my own work, I tend to use Flexbox for components where I want the natural size of items to strongly control their layout, essentially pushing the other items around. I also often use Flexbox because I want alignment, given that the Box Alignment properties are only available to use in Flexbox and Grid. I might have a Flex container with one child item, in order that I can align that child.\n\nA sign that perhaps Flexbox isn’t the layout method I should choose is when I start adding percentage widths to flex items and setting to 0. The reason to add percentage widths to flex items is often because I’m trying to line them up in two dimensions (lining things up in two dimensions is exactly what Grid is for). However, try both, and see which seems to suit the content or design pattern best. You are unlikely to be causing any problems by doing so.\n\nThis also comes up a lot, and there is absolutely no problem with making a Grid Item also a Grid Container, thus nesting one grid inside another. You can do the same with Flexbox, making a Flex Item and Flex Container. You can also make a Grid Item and Flex Container or a Flex Item a Grid Container — none of these things are a problem!\n\nWhat we can’t currently do is nest one grid inside another and have the nested grid use the grid tracks defined on the overall parent. This would be very useful and is what the subgrid proposals in Level 2 of the Grid Specification hope to solve. A nested grid currently becomes a new grid so you would need to be careful with sizing to ensure it aligns with any parent tracks.\n\nYou Can Have Many Grids On One Page\n\nA comment popped up a few times in the survey which surprised me, there seems to be an idea that a grid should be confined to the main layout, and that many grids on one page were perhaps not a good thing. You can have as many grids as you like! Use grid for big things and small things, if it makes sense laid out as a grid then use Grid.\n\nIn the survey, many people mentioned older browsers, however, there was a reasonably equal split between those who felt that supporting older browsers was hard and those who felt it was easy due to Feature Queries and the fact that Grid overrides other layout methods. I’ve written at length about the mechanics of creating these fallbacks in “Using CSS Grid: Supporting Browsers Without Grid.”\n\nIn general, modern browsers are far more interoperable than their earlier counterparts. We tend to see far fewer actual “browser bugs” and if you use HTML and CSS correctly, then you will generally find that what you see in one browser is the same as in another.\n\nWe do, of course, have situations in which one browser has not yet shipped support for a certain specification, or some parts of a specification. With Grid, we have been very fortunate in that browsers shipped Grid Layout in a very complete and interoperable way within a short time of each other. Therefore, our considerations for testing tend to be to need to test browsers with Grid and without Grid. You may also have chosen to use the prefixed version in IE10 and IE11, which would then require testing as a third type of browser.\n\nBrowsers which support modern Grid Layout (not the IE version) also support Feature Queries. This means that you can test for Grid support before using it.\n\nWhen using fallbacks for browsers without support for Grid Layout (or using the prefixed version for IE10 and 11), you will want to test how those browsers render Grid Layout. To do this, you need a way to view your site in an example browser.\n\nI would not take the approach of breaking your Feature Query by checking for support of something nonsensical, or misspelling the value . This approach will only work if your stylesheet is incredibly simple, and you have put absolutely everything to do with your Grid Layout inside the Feature Queries. This is a very fragile and time-consuming way to work, especially if you are extensively using Grid. In addition, an older browser will not just lack support for Grid Layout, there will be other CSS properties unsupported too. If you are looking for “best practice” then setting yourself up so you are in a good position to test your work is high up there!\n\nThere are a couple of straightforward ways to set yourself up with a proper method of testing your fallbacks. The easiest method — if you have a reasonably fast internet connection and don’t mind paying a subscription fee — is to use a service such as BrowserStack. This is a service that enables viewing of websites (even those in development on your computer) on a whole host of real browsers. BrowserStack does offer free accounts for open-source projects.\n\nTo test locally, my suggestion would be to use a Virtual Machine with your target browser installed. Microsoft offers free Virtual Machine downloads with versions of IE back to IE8, and also Edge. You can also install onto the VM an older version of a browser with no Grid support at all. For example by getting a copy of Firefox 51 or below. After installing your elderly Firefox, be sure to turn off automatic updates as explained here as otherwise it will quietly update itself!\n\nYou can then test your site in IE11 and in non-supporting Firefox on one VM (a far less fragile solution than misspelling values). Getting set up might take you an hour or so, but you’ll then be in a really good place to test your fallbacks.\n\nMany of the people responding to the survey mentioned the need to unlearn old habits and how learning Layout would be easier for people completely new to CSS. I tend to agree. When teaching people in person complete beginners have little problem using Grid while experienced developers try hard to return grid to a one-dimensional layout method. I’ve seen attempts at “grid systems” using CSS Grid which add back in the row wrappers needed for a float or flex-based grid.\n\nDon’t be afraid to try out new techniques. If you have the ability to test in a few browsers and remain mindful of potential issues of accessibility, you really can’t go too far wrong. And, if you find a great way to create a certain pattern, let everyone else know about it. We are all new to using Grid in production, so there is certainly plenty to discover and share.\n\nTo wrap up, here is a very short list of current best practices! If you have discovered things that do or don’t work well in your own situation, add them to the comments.\n• Be very aware of the possibility of content re-ordering. Check that you have not disconnected the visual display from the document order.\n• Test using real target browsers with a local or remote Virtual Machine.\n• Don’t forget that older layout methods are still valid and useful. Try different ways to achieve patterns. Don’t be hung up on having to use Grid.\n• Know that as an experienced front-end developer you are likely to have a whole set of preconceptions about how layout works. Try to look at these new methods anew rather than forcing them back into old patterns.\n• Keep trying things out. We’re all new to this. Test your work and share what you discover.\n• How To Build A Magazine Layout With CSS Grid Areas\n• Level Up Your CSS Skills With The :has() Selector"
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/CSS_layout/Grids",
        "document": "A grid is a collection of horizontal and vertical lines creating a pattern against which we can line up our design elements. They help us to create layouts in which our elements won't jump around or change width as we move from page to page, providing greater consistency on our websites. A grid will typically have columns, rows, and then gaps between each row and column. The gaps are commonly referred to as gutters.\n\nLet's try out grid layouts, here is an example with a container, which has some child items. By default, these items are displayed in a normal flow, causing them to appear one below the other. Similar to how you define flexbox, you define a grid layout by setting the value of the property to . As in the case of flexbox, the property transforms all the direct children of the container into grid items. We have added the following CSS to the file: Unlike flexbox, the items will not immediately look any different. Declaring gives you a one column grid, so your items will continue to display one below the other as they do in normal flow. To see something that looks more grid-like, we'll need to add some columns to the grid. Let's add three 200-pixel columns. You can use any length unit or percentage to create these column tracks. You should see that the items have rearranged themselves such that there's one in each cell of the grid.\n\nIn addition to creating grids using lengths and percentages, we can use . The unit represents one fraction of the available space in the grid container to flexibly size grid rows and columns. Here we change the track listing to the following definition, creating three tracks: You now have flexible tracks. The unit distributes space proportionally, so you can specify different positive values for your tracks. Change your track listing to the following definition, creating one track and two tracks: The first track gets of the available space and the other two tracks get , making the first track larger. You can mix units with fixed length units. In this case, the space needed for the fixed tracks is used up first before the remaining space is distributed to the other tracks. Note: The unit distributes available space, not all space. Therefore, if one of your tracks has something large inside it, there will be less free space to share.\n\nOur 100-pixel tall tracks won't be very useful if we add content into those tracks that is taller than 100 pixels, in which case it would cause an overflow. It might be better to have tracks that are at least 100 pixels tall and can still expand if more content becomes added. A fairly basic fact about the web is that you never really know how tall something is going to be — additional content or larger font sizes can cause problems with designs that attempt to be pixel perfect in every dimension. The function lets us set a minimum and maximum size for a track, for example, . The minimum size is 100 pixels, but the maximum is , which will expand to accommodate more content. Here we change the to use a value: If you add extra content, you'll see that the track expands to allow it to fit. Note that the expansion happens right along the row.\n\nAs many columns as will fit We can combine some of the lessons we've learned about track listing, repeat notation, and to create a useful pattern. Sometimes it's helpful to be able to ask grid to create as many columns as will fit into the container. We do this by setting the value of using the function, but instead of passing in a number, pass in the keyword . For the second parameter of the function we use with a minimum value equal to the minimum track size that we would like to have and a maximum of . This works because grid is creating as many 230-pixel columns as will fit into the container, then sharing whatever space is leftover among all the columns. The maximum is which, as we already know, distributes space evenly between tracks.\n\nWe now move on from creating a grid to placing things on the grid. Our grid always has lines — these are numbered beginning with 1 and relate to the writing mode of the document. For example, column line 1 in English (written left-to-right) would be on the left-hand side of the grid and row line 1 at the top, while in Arabic (written right-to-left), column line 1 would be on the right-hand side. To position items along these lines, we can specify the start and end lines of the grid area where an item should be placed. There are four properties we can use to do this: These properties accept line numbers as their values, so we can specify that an item should start on line 1 and end on line 3, for example. Alternatively, you can also use shorthand properties that let you specify the start and end lines simultaneously, separated by a forward slash : With out the placement defined, you can see that auto-placement is placing each item into its own cell in the grid. The is taking up (one quarter) and the is taking up (three quarters). Let's arrange all of the elements for our site by using the grid lines. Add the following rules to the bottom of your CSS: Now the and are set to , which means to start at line and ends at line . Note: You can also use the value to target the end column or row line, then count inwards from the end using negative values. Note also that lines count always from the edges of the explicit grid, not the implicit grid.\n\nAn alternative way to arrange items on your grid is to use the property and give the various elements of your design a name. Here we are using the property to define how the 3 rows are laid out. The first row has a value of , the second and the third . We are then using the property to define where elements are placed in the . The rules for are as follows:\n• You need to have every cell of the grid filled.\n• To span across two cells, repeat the name.\n• Areas must be rectangular — for example, you can't have an L-shaped area.\n• Areas can't be repeated in different locations. You can play around with our layout, changing the footer to only sit underneath the article and the sidebar to span all the way down. This is a very nice way to describe a layout because it's clear just from looking at the CSS to know exactly what's happening.\n\nIt's possible to nest a grid within another grid, creating a \"subgrid\". You can do this by setting the property on an item in the parent grid. Let's expand on the previous example by adding a container for articles and using a nested grid to control the layout of multiple articles. While we're using only one column in the nested grid, we can define the rows to be split in a 4:3:3 ratio by using the property. This approach allows us to create a layout where one article at the top of the page has a large display, while the others have a smaller, preview-like layout. To make it easier to work with layouts in nested grids, you can use on and properties. This allows you to leverage the tracks defined in the parent grid. In the following example, we're using line-based placement, enabling the nested grid to span multiple columns and rows of the parent grid. We've added to inherit the parent grid's column tracks while adding a different layout for the rows within the nested grid."
    },
    {
        "link": "https://lambdatest.com/blog/css-grid-best-practices",
        "document": "CSS Grid is a layout system that allows you to create complex and responsive grid-based layouts with ease. It provides a two-dimensional grid-based layout system, making it particularly powerful for handling both rows and columns.\n\nTo ensure your layouts are both flexible and responsive, it’s essential to adhere to certain CSS Grid best practices. It enhances maintainability, making your code easier to understand and modify.\n\nWhen working with CSS Grid, following best practices is key to creating responsive, maintainable layouts. Check out some of the CSS Grid best practices that you can incorporate into your web designs.\n\nInstead of specifying fixed pixel values for your grid track sizes, use flexible units like fr or minmax. This is one of the core CSS Grid best practices that will make your layout more responsive to different screen sizes.\n\nWhen you specify grid track sizes using fixed pixel values, you’re essentially setting a rigid structure for your layout. As screen sizes vary, fixed pixel values can lead to distorted layouts, causing elements to overlap or stretch excessively.\n\nTo overcome these limitations, CSS Grid provides flexible units like fr and minmax, which enable your layouts to adapt gracefully to different screen sizes.\n\nThese units dynamically adjust their dimensions based on the available space, ensuring that your layout remains consistent and visually appealing across various devices.\n\nFor instance, in a scenario like the above, you could use minmax() to say that the cards should have a minimum width of 200px and maximum width of 1fr.\n\nHere, the grid-template-columns property uses minmax(200px, 1fr) to specify that the cards should have a minimum width of 200px and a maximum width of 1fr.\n\nAs a result, on smaller screens, the cards will maintain a minimum width of 200px, while on larger screens, they can expand to fill the available space up to a maximum width of 1fr. This approach ensures a flexible and responsive card layout.\n\nAnother important aspect of CSS Grid best practices is to use appropriate grid structure. When working with CSS Grid, a fundamental decision revolves around choosing between an explicit and implicit grid for defining the layout of grid items within a grid container.\n\nWith an explicit grid, you have precise control over how you structure your content. However, with an implicit grid, you have less control as it adapts to content without specific column or row definitions. You can still have some degree of control, though, using properties like grid-auto-rows and grid-auto-columns.\n\nExplicit grids offer precise control over layout structures and foster predictability in design. It is particularly beneficial for components with fixed items, such as navigation bars or pricing cards.\n\nSee the Pen \n\n An Explicit Grid Demo by Tahera Alam (@alam_tahera)\n\n on CodePen.\n\nIn the above example, we used an explicit grid layout to create a pricing card component that seamlessly adapts to different screen sizes and devices.\n\nThe combination of using auto-fit and minmax ensures that the layout adapts seamlessly to different screen sizes and devices. Since we know we want three pricing cards, we used grid-template-columns to define the same.\n\nImplicit grids automatically adjust based on your content, making them ideal for dynamic situations where the amount of content can vary.\n\nIn the below example, we have a product page that allows a user to add products dynamically by clicking the Add Product button. Each product has a name, an image, and a price.\n\nSee the Pen \n\n Implicit & Explicit Grid Demo by Tahera Alam (@alam_tahera)\n\n on CodePen.\n\nHere, since our elements are being dynamically generated and the amount of content can vary, we used an implicit grid in combination with an explicit grid to define the layout.\n\nFirst, we defined the columns explicitly using the grid-template-columns property:\n\nThis creates a flexible grid with columns that are at least 250px wide but can grow to occupy available space. The use of auto-fill and minmax(250px, 1fr) lets you create as many columns as can fit in the container, each at least 250px wide but able to grow 1fr if there is extra space.\n\nNext, we used an implicit grid to set the size of rows because our content may have varying heights:\n\nThis ensures that the implicit rows will have a minimum height of 300px, but if the content requires more space, they can grow dynamically based on the content’s height (auto).\n\nSo, we combined both explicit grid (for columns) and implicit grid (for rows with dynamic sizing) in the .product-list grid container. It allows us to have a structured column layout while providing flexibility in the row heights based on the content.\n\nOne of the CSS Grid best practices is to carefully select positioning methods that align with your layout’s requirements.\n\nOne question that arises when using grid layouts is whether to use grid-template-areas or grid-template-columns/rows for positioning the elements. The short answer to that is to use them based on the complexity and nature of your layout.\n\nBy complexity and nature of a layout, we mean that if you want your layout to be straightforward and easy to understand, especially when you have different sections with specific purposes, then it might be helpful to use grid-template-areas.\n\nSee the Pen \n\n grid-template-areas Demo by Tahera Alam (@alam_tahera)\n\n on CodePen.\n\nIn the above example, we have a layout that has a header, a navbar, a main section, a sidebar, and a footer. To name the specific sections of the layout that the grid items will occupy, we used grid-template-areas.\n\nIn this case, it specifies three rows and three columns for the grid.\n• The first row is for the header and spans all three columns.\n• The second row has areas for a navbar, main content, and a sidebar.\n• The third row is for the footer and spans all three columns.\n\nNow that we have named grid areas, it’s time to assign elements to these areas. To place content in grid areas, we use the grid-area property:\n\nThis instructs the content inside the ‘specific element’ to go into the area named ‘that element’ in the grid. For instance, in the case of header, it basically says that the content inside the HTML element with the <header> tag should go into the area named ‘header’ as defined in the grid template areas.\n\nNow, if you’re more about having precise control and keeping things simple, especially when it comes to the size and position of each part, then the grid-template-columns or grid-template-rows property is the way to go.\n\nSee the Pen \n\n Grid-template-columns Demo by Tahera Alam (@alam_tahera)\n\n on CodePen.\n\nIn the above example, we have an image on the right and some text on the left. To position it, we used grid-template-columns and defined two columns of 1fr and 2fr, which makes the first column take up 1 fraction of the available space and the second column take up 2.\n\nThere’s a misconception that nesting grids is not good practice. However, it’s absolutely acceptable to nest grids. You can make any grid item a grid container and have grid items within it.\n\nThis approach enables the creation of subgrids, providing precise control over the layout within specific areas of the parent grid. It is helpful when dealing with complex structures or nested content that might be challenging to manage using a single-grid method.\n\nSee the Pen \n\n Nested Grid Demo by Tahera Alam (@alam_tahera)\n\n on CodePen.\n\nIn this example, we have a container div with the class outer-grid and several child divs. Inside the outer-grid, there is another div with the class inner-grid that contains two additional items.\n\nThe outer-grid represents the main grid container, and divides its content into three columns using the grid-template-columns. Inside the main outer-grid, we nest another grid called the inner-grid. This means we create a smaller grid within one of the columns of the main grid and divide its content into two columns.\n\nThis nesting allows for a more intricate layout where certain items are grouped and follow a different grid structure compared to the items in the parent grid.\n\nThis is something even I used to think of as a bad practice. However, contrary to popular belief, there is nothing wrong with having more than one grid on a page.\n\nTraditionally, there has been a tendency to associate a single grid with an entire layout. However, using multiple grids on a page can enhance the overall structure and flexibility of the layout.\n\nFor example, you can use a grid for the main layout while using additional grids for smaller components like featured sections or sidebars. This not only simplifies the design process but also makes it easier to manage and update specific sections without affecting the entire layout.\n\nApplying grids to smaller components allows for a modular approach. Each section can have its own layout structure, making it easier to manage and update independently.\n\nSee the Pen \n\n CSS Multi-Grid One-Page Layout Experiment with CSS Grid, Flexbox and HTML5 Sections by Nikki Pantony (@nikkipantony)\n\n on CodePen.\n\nThe above example shows how you can have multiple grids on one page, each with its individual layout structure and purpose.\n\nMoreover, you can also create 12-column CSS Grids. Want to know how? Refer to this blog on 12 Column CSS Grid.\n\nCombining Grid with Flexbox is one of the recommended CSS grid best practices. CSS Grid is useful for creating flexible and responsive layouts, but it’s not always the best solution for every situation. In some cases, it may be more effective to combine grid layout with other layout mechanisms, such as flexbox or floats.\n\nOne common practice is to combine Grid with CSS Flexbox, such as in a card layout. CSS Grid sets up the primary structure of the layout, defining the overall grid and positioning of major elements. Flexbox is then used within each grid cell to manage the internal arrangement of items.\n\nWhile CSS Grid is good for setting up rows and columns, Flexbox is useful for neatly arranging elements in a row or column, especially when they’re different sizes.\n\nBy employing both methodologies, you can use CSS Grid to provide the overall framework while relying on Flexbox to handle the finer details within each section of your layout. This combination allows you to offer a balance between high-level structure and granular control, resulting in a clean and efficient way to organize content.\n\nSee the Pen \n\n Card-layout – combining CSS Grid and Flexbox by Tahera Alam (@alam_tahera)\n\n on CodePen.\n\nIn this example, we created a responsive card-based layout using CSS Grid and Flexbox.\n\nThe .grid-container class defines the grid layout, which starts as a single-column layout and switches to a two-column layout on screens wider than 500px and a four-column layout on screens wider than 850px.\n\nThe .card class represents the individual card component. The .card element is a flex container, and it has a flex-direction: column property that specifies that the flex items should be arranged in a column.\n\nThe .card article class is also a flexbox container for the card’s textual content, arranging the content in a column with even spacing between its elements.\n\nConfused about CSS Grid vs Flexbox? Discover which layout tool is right for your project. Read this full comparison of CSS Grid vs Flexbox now!\n\nOne of the crucial CSS Grid best practices is testing CSS Grids for responsiveness. This is to ensure your layout adapts seamlessly across various screen sizes and devices. Responsive grids help maintain a consistent user experience, regardless of the device being used. By testing, you can identify and fix issues like overlapping content or poor alignment early in the development process.\n\nTools like LT Browser provide a simple way to perform mobile website testing of CSS Grids on different viewports, helping you optimize your layout for a wide range of device viewports and ensure a smooth browsing experience for all users.\n\nDownload LT Browser now and start testing your grid responsiveness 👇\n\nCSS Grid is extremely powerful when it comes to designing modern web layouts. It allows you to create two-dimensional layouts with rows and columns by providing a more flexible and efficient way to design layouts compared to traditional methods like floats or positioning.\n\nBy incorporating the CSS Grid best practices, you can leverage the full potential of CSS Grid and create flexible, responsive, and visually stunning modern web layouts.\n\nYou can also check out these CSS Grid layout generators and start building stunning layouts today."
    },
    {
        "link": "https://w3schools.com/html/html_css.asp",
        "document": "CSS saves a lot of work. It can control the layout of multiple web pages all at once.\n\nCascading Style Sheets (CSS) is used to format the layout of a webpage.\n\nWith CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and much more!\n\nTip: The word cascading means that a style applied to a parent element will also apply to all children elements within the parent. So, if you set the color of the body text to \"blue\", all headings, paragraphs, and other text elements within the body will also get the same color (unless you specify something else)!\n\nCSS can be added to HTML documents in 3 ways:\n• Inline - by using the attribute inside HTML elements\n• Internal - by using a element in the section\n• External - by using a element to link to an external CSS file\n\nThe most common way to add CSS, is to keep the styles in external CSS files. However, in this tutorial we will use inline and internal styles, because this is easier to demonstrate, and easier for you to try it yourself.\n\nAn inline CSS is used to apply a unique style to a single HTML element.\n\nAn inline CSS uses the attribute of an HTML element.\n\nThe following example sets the text color of the element to blue, and the text color of the element to red:\n\nAn internal CSS is used to define a style for a single HTML page.\n\nAn internal CSS is defined in the section of an HTML page, within a element.\n\nThe following example sets the text color of ALL the elements (on that page) to blue, and the text color of ALL the elements to red. In addition, the page will be displayed with a \"powderblue\" background color:\n\nAn external style sheet is used to define the style for many HTML pages.\n\nTo use an external style sheet, add a link to it in the section of each HTML page:\n\nThe external style sheet can be written in any text editor. The file must not contain any HTML code, and must be saved with a .css extension.\n\nHere is what the \"styles.css\" file looks like:\n\nHere, we will demonstrate some commonly used CSS properties. You will learn more about them later.\n\nThe CSS property defines the text color to be used.\n\nThe CSS property defines the font to be used.\n\nThe CSS property defines the text size to be used.\n\nThe CSS property defines a border around an HTML element.\n\nTip: You can define a border for nearly all HTML elements.\n\nThe CSS property defines a padding (space) between the text and the border.\n\nThe CSS property defines a margin (space) outside the border.\n\nExternal style sheets can be referenced with a full URL or with a path relative to the current web page.\n• Use the HTML attribute for inline styling\n• Use the HTML element to define internal CSS\n• Use the HTML element to refer to an external CSS file\n• Use the HTML element to store <style> and <link> elements\n• Use the CSS property for text colors\n• Use the CSS property for text fonts\n• Use the CSS property for text sizes\n• Use the CSS property for borders\n• Use the CSS property for space inside the border\n• Use the CSS property for space outside the border"
    },
    {
        "link": "https://codecademy.com/article/html-inline-styles",
        "document": "Did you know you can add CSS to HTML without using a separate file? In many cases, it comes in handy. Learn when (and when not) to use CSS inline styling.\n\nUsually, CSS is written in a separate CSS file (with file extension ) or in a tag inside of the tag, but there is a third place which is also valid. The third place you can write CSS is inside of an HTML tag, using the attribute. When CSS is written using the attribute, it’s called an “inline style”. In general, this is not considered a best practice. However, there are times when inline styles are the right (or only) choice.\n\nInline styles look and operate much like CSS, with a few differences. Inline styles directly affect the tag they are written in, without the use of selectors. Here’s a basic HTML page using inline styles:\n\nThe tag with the inline style attribute is the focus here:\n\nThe attribute is just like any other HTML attribute. It goes inside the element’s beginning tag, right after the tag name. The attribute starts with , followed by an equals sign, , and then finally uses double quotes, , which contain the value of the attribute.\n\nIn our case, the value of the attribute will be CSS property-value pairs: . You can have as many property value pairs as you want. Unlike normal CSS syntax, inline styling does not use selectors or curly braces. Don’t forget to include the semicolon after each pair!\n\nInline styles are not so different from the other ways you can write CSS. For example, the inline style above is almost like the following CSS rule:\n\nThe rule above works the same way as our inline style does, except for one thing. This rule will affect every on the page, whereas the inline style will affect only the it’s written in.\n\nCascading works the same way, however, so the element inside the will be blue with big text regardless of whether you decide to use inline styling or CSS rules.\n\nWhen to Use Inline CSS in HTML\n\nProfessional web developers do not use inline styles often, but there are times when they are important to understand or necessary to use. Here are a few places you may see inline styles:\n\nEmails often include HTML content. When you receive a fancy looking e-mail, it is either one big image file or it is an HTML e-mail. You can craft HTML e-mails yourself, but they can be tricky. The HTML viewers in email clients are not standardized, and most of them do not allow tags. For this reason, HTML e-mail often contain lots of inline styles. Some of the styles included may be archaic, to support older e-mail-viewing clients.\n\nAnother time you will see inline styles is on dynamic websites that use JavaScript. Often, JavaScript scripts will add inline styles to HTML. For example, a common way to hide a dialog box is to add the inline style .\n\nWhen Not to Use Inline CSS in HTML\n\nAs mentioned before, web developers do not often use inline styles when creating web pages, for many reasons. The reasons include “semantic markup”, maintainability, reusability, and scalability.\n\nHTML is meant for conveying structured information. CSS is built to style that structured information. When inline styles are used, this clear separation between structured information and styling is blurred. By separating the CSS from the HTML, the markup can be semantic, which means that it can convey as much meaning as possible without being muddled by visual effects.\n\nFor example, the article you are currently reading is written in HTML, separated into headings and paragraphs (and the text inside those tags). This article also has specific font sizes, line spacing, and colors, but those aspects affect only the visual presentation. By keeping the markup as semantic as possible, the article’s content can be quickly edited without being distracted by aesthetics.\n\nAdditionally, it is possible to misuse HTML elements by overriding their CSS. There are many programs that interpret HTML without “looking” at it through a human eye, like screen readers and search engines. For example, the tag is intended to contain a block quote, but through CSS, it’s possible to make tags visually appear as headings. A person looking at your website through a browser would only see headings. A screen reader for sight impaired individuals, on the other hand, may read your headings as if they were quotations, which could be very confusing for sight impaired people! This problem can be created with any CSS, not just inline styles, but it is worth mentioning here. Always look for the right tag for the job before using CSS.\n\nBecause inline styles only affect the tag they are written in, it can be hard to make changes. If you have written the same style 20 times in 20 different tags, you must edit each of those places whenever you want to make a trivial change. This can be exhausting! By using a single CSS rule in a tag or a separate CSS file, you would only need to change it in one place.\n\nYou gain the most flexibility and power by putting your CSS in a separate CSS file. If you to that CSS file on more than one HTML page, you can reuse the same stylesheet for multiple pages. If you want a consistent style across your whole website, this is the way to go. When you want to make a change, you will only need to make the change in one file, and it will be seen in each linked page.\n\nAs we mentioned, there are two other styles of implementing CSS: internal and external. Internal CSS (or embedded CSS) is added to the section of an HTML document. It’s useful if you’re only stylizing a single page, and it helps keep everything in a single file, but it can also affect loading speeds. External CSS is written in its own separate file, and it’s more popular because it can style multiple pages.\n\nSometimes, inline styles are necessary. If you are building a web page by hand, however, you should avoid them whenever possible. Using a separate CSS file is the most powerful and flexible method."
    },
    {
        "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_colors/Applying_color",
        "document": "Properties that can have color At the element level, everything in HTML can have color applied to it. Let's look at the different items rendered on the page — such as text, borders, etc. We'll provide lists of the CSS properties that apply color to each. At a fundamental level, the property defines the foreground color of an HTML element's content and the property defines the element's background color. These can be used on just about any element.\n\nWhenever an element is rendered, these properties are used to determine the color of the text, its background, and any decorations on the text. The color to use when drawing the text and any text decorations (such as the addition of under- or overlines, strike-through lines, and so forth. Configures a shadow effect to apply to text. Among the options for the shadow is the shadow's base color (which is then blurred and blended with the background based on the other parameters). See Text drop shadows to learn more. The default text decorations (such as underlines, strikethroughs, etc.) color is . This keyword represents the current value of the property. However, you can override that value and use a different color for them with the property. The color to use when rendering emphasis symbols adjacent to each character in the text. This is used primarily when drawing text for East Asian languages. The color to use when drawing the caret (sometimes referred to as the text input cursor) within the element. This is only useful in elements that are editable, such as and or elements whose HTML attribute is set to .\n\nEvery element is a box with some sort of content, and has a background and a border in addition to whatever contents the box may have. See the Borders section for a list of the CSS properties you can use to set the colors of a box's borders. The background color to use in areas of the element that have no foreground content. Configures inset shadow and drop shadow effects on the box. Among the options for each shadow is the shadow's base color (which is then blurred and blended with any background based on the other parameters). The color to use when drawing the line separating columns of text when using CSS multi-column layout. The color to use when drawing an outline around the outside of the element. This outline is different from the border in that it doesn't get space set aside for it in the document. Outlines do not participate in the box model, overlapping other content. Outlines are generally used as focus indicators, indicating which element currently has focus and will receive keyboard input events.\n\nAny element can have a border drawn around it. A basic element border is a line drawn around the edges of the element's content. See The box model to learn about the relationship between elements and their borders, and the article Styling borders using CSS to learn more about applying styles to borders. You can use the shorthand property, which lets you configure everything about the border in one shot (including non-color features of borders, such as its width, style (solid, dashed, etc.), and so forth. Specifies a single color to use for every side of the element's border. Lets you set the color of the corresponding side of the element's border. With these, you can set the color used to draw the borders which are closest to the start and end of the block the border surrounds. In a left-to-right writing mode (such as the way English is written), the block start border is the top edge and the block end is the bottom. This differs from the inline start and end, which are the left and right edges (corresponding to where each line of text in the box begins and ends). These let you color the edges of the border closest to the beginning and the end of the start of lines of text within the box. Which side this is will vary depending on the , , and properties, which are typically (but not always) used to adjust text directionality based on the language being displayed. For example, if the box's text is being rendered right-to-left, then the is applied to the right side of the border.\n\nSpecifying colors as values in stylesheets Now that you know which CSS properties let you apply color to elements, you can start adding colors to your websites. Let's look at some examples of using color within a stylesheet. In this example, we use several previously mentioned properties, with the concept of applying colors in CSS being the same no matter the property. Let's look at the result first, before going on to look at the code we need to create it:\n\nLet's look at the CSS that creates the above result a piece at a time. Note: We are using multiple different CSS color value types in this example to demonstrate their use. This is not recommended for production code. When writing CSS, use the most intuitive value type for you and your team. The class is used to assign styles to the that encloses all of our other content. This establishes the height of the container using , allowing the width of this block-level element to default to 100% of its parent. Setting the to and adding a creates a flex container to lay out the children side by side with a gap between all the container's children. We use to let the flex children grow to fill the container; it doesn't effect the flex container itself. Of more interest to our discussion here is the use of the property to establish a border around the outside edge of the element. This border is a solid line, 6 pixels wide, in the named color . Within our wrapper, we have a left box and a right box. The class, used to style the box on the left, sets up the color of the background and the outline:\n• The box's background color is set by changing the value of the CSS property to , using the functional notation.\n• An outline is defined for the box. Unlike the more commonly used , doesn't affect layout at all; it draws over the top of whatever may happen to be outside the element's box instead of making room as does. This outline is a solid, dark red line that's two pixels thick. Note the use of the keyword when specifying the color.\n• Notice that we're not explicitly setting the text color. That means the value of will be inherited from the nearest containing element that defines it. By default, that's black. Note: We included the styles separately because Safari doesn't support as a shorthand property. Finally, the class sets several styles on the box that's drawn to the right. Then the following colors are established (using five different ways of declaring color values):\n• The is set using functional notation — . This is a medium purple color.\n• The box's is used to specify that the box should be enclosed in a four-pixel thick dashed line whose color is a somewhat deeper purple using the six-digit .\n• The foreground (text) color is specified by setting the property using functional notation — . This is one of many ways to specify the color white.\n• We add a green wavy line under the text with the shorthand, along with the longhand component for browser compatibility. We used the 3-digit , which is the equivalent of .\n• Finally, a bit of a shadow is added to the text using . Its parameter is set to , a value. We used five different color syntaxes to demonstrate what is possible. In the real world, you and your team will preferably pick a preferred color notation, with everyone working on a code base using the same color syntax."
    },
    {
        "link": "https://freecodecamp.org/news/inline-style-in-html",
        "document": "Cascading Style Sheets (CSS) is a markup language that determines how your web pages will appear. It manages the colors, fonts, and layouts of your website elements, as well as allowing you to add effects or animations to your pages.\n\nWe can style an HTML file/page in three ways: external styling, internal styling, and inline styling. In this article, we'll be focusing on inline styling.\n\nHow to Use Inline Style in HTML\n\nUsing the style attribute, we can apply styling to our HTML inside individual HTML tags with inline styling.\n\nThe style attribute works in the same way as any other HTML attribute. We use , followed by the equality sign (=), and then a quote where all of the style values will be stored using the standard CSS property-value pairs - .\n\nNote: We can have as many property-value pairs as we want as long as we separate them with a semicolon (;).\n\nIt's worth noting that the attribute is typically used in the opening HTML tag because that's the part of the HTML element that can contain text, data, an image, or nothing at all. An example of inline style is as follows:\n\nThis is similar to this:\n\nThe only difference is that the inline style applies only to the tag to which it is applied, whereas this second code example affects all tags on your html page.\n\nWhen to Use Inline Styles\n\nUsing inline styles is not considered best practice, though, because it results in a lot of repetition – because the styles cannot be reused elsewhere.\n\nBut there are times when inline styles are the best (or only) option, such as when styling HTML e-mail, CMS content like WordPress, Drupal, and so on. You can also use them when styling dynamic content, which is HTML-created or changed by JavaScript.\n\nWith the exception of the declaration, inline styles have a high specificity/highest priority, which means they will override most other rules in internal and external stylesheets.\n\nAssume we have two paragraph texts with inline styling set to and internal styling set to :\n\nThe CSS from our inline styles will override the CSS from the internal styling, so both paragraphs will be .\n\nSo far, we've learned what inline style is and how to use it within HTML tags. Now, let's look at the advantages and disadvantages to see when we should use inline styles and when we shouldn't.\n• None Inline takes precedence over all other styles. Any styles defined in the internal and external style sheets are overridden by inline styles.\n• None You can quickly and easily insert CSS rules into an HTML page, which is useful for testing or previewing changes and performing quick fixes on your website.\n• None There is no need to create an additional file.\n• None To apply styling in JavaScript, use the attribute.\n• None Adding CSS rules to each HTML element takes time and makes your HTML structure unorganized. It's difficult to keep up, reuse, and scale.\n• None The size and download time of your page can be affected by styling multiple elements.\n• None Inline styles cannot be used to style pseudo-elements and pseudo-classes. For example, you can style the visited, hover, active, and link colors of an anchor tag using external and internal style sheets.\n\nIn this article, we learned how to use inline style in HTML, when to use it, and some of the benefits and drawbacks of doing so.\n\nSince inline styling takes precedence over all other styles, one of the best times to use it is when testing or previewing changes and performing quick fixes on your website."
    },
    {
        "link": "https://stackoverflow.com/questions/54706748/change-color-of-a-element-inside-a-div-using-inline-css",
        "document": "You can use for color property, which means that color property value will be inherited from it's parent\n\nIn your case you can do:"
    }
]