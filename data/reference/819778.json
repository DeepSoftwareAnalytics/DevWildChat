[
    {
        "link": "https://medium.com/@dimterion/making-an-interactive-text-adventure-game-with-javascript-html-and-css-298b35c8ea96",
        "document": "Once upon a time I saw this video from Web Dev Simplified and decided to do what so far I can do best — follow the tutorial. So, to start things from the right note, all credits should go to this cool channel and its videos.\n\nIn my turn, I, as always, got carried away and started writing a monster of a text to make a sort of an interactive story which I had in mind.\n\nI won’t focus much on explaining the code, it’s easier to watch the video linked above. I was more interested in arranging all the possible choices and outcomes. And that’s what I wanted to talk about.\n\nCurrent result can be seen here. And repo with the code can be found here.\n\nFollowing the usual pattern, this is not a guide. Rather some thoughts on how I approached this and what was the not-final-result.\n\nAll in all, the whole code took about 40 lines of JavaScript, 40 lines of CSS and 20 lines of HTML thanks to Web Dev Simplified wisdom and experience.\n\nAnd then it took 1700 lines of dialogues and choices thanks to my “carried-awayness”.\n\nBasically it is one HTML page with a text block and some buttons. Text shows the story and buttons allow you to make a choice to display the next text and choices. Page is not changing, only the text in the text/buttons elements is.\n\nYou then add some styling with CSS to make it look presentable and the rest is JavaScript.\n\nThe game represents a giant array with objects. Each has the following keys: an id to track the needed choice, a text with, well, the text and the options — another array with objects for the buttons (with the keys for the text of the button and next text).\n\nYou then need to create an empty object to store the state of the game (which will be responsible for displaying the right choices) and four functions: to start the game and change the state, to show the text, to show the buttons with options and to select an option with the button. Once you link this to HTML-elements, you can have your game. I’m not explaining this in details, because the code is not mine, just watch the video or check the repo linked above.\n\nAllow me to tell you a story\n\nSo, once this is done, the storytelling part begins. I intended to make it relatively short but then one thing followed another… And it ended up being 100 objects for the text array. I guess it’s not much, but for someone like me (i.e. an amateur mediocre) it’s quite a lot.\n\nI didn’t plan to make it a “round” number, but somehow managed to achieve that.\n\nOverall, once you know how the “mechanics” for the game works you spend more time on figuring out how to make it complete and not repetitive or stuck in the loop upon following the various choices. As this is just a small project I did for myself, I didn’t really plan anything in advance and just “went with the flow”. But upon adding about 20 first choices I realized that it would be much easier to do some kind of a diagram first (for example with a tools like this). This way you can more or less easily see how various dialogue options are connected. Otherwise you need to keep it all in mind and constantly ctrl+F to figure out if the next choice contradicts or connects with the previous ones.\n\nI intend to polish this all a bit and add some starting page and maybe a bit of different styling. But so far at least the story is finished and all choices should be more or less tied up together and lead to the appropriate results.\n\nThe code allows to use up to four dialogue options but I’ve decided to stick with three for each part of the text. It is also possible to add some choices that will be shown as an additional option for the same dialogue later on but in my case I went so far with just the regular choices that I didn’t use it. So the path of the story is basically:\n\ntext1 will be followed by either text2 or text3 depending on your choice for text1, etc.\n\nWhile it could also be possible to make some of the options like:\n\ntext1 will always be followed by text2 but if you chose option1 for it you’ll see additional choice for the text2.\n\nWhat is funny (and that’s once again a consequence of not making an initial plan) is that some of the outcomes became rather random (not in terms of the code, but because they were made at different time). And while they should at the end lead to the appropriate results, there’s no structure written somewhere else, just a huge array with a bunch of IDs for the texts.\n\nI managed to make a few main endings and some “jokish” ones. A few choices also lead to the same choice but these are only for the endings final choices.\n\nIn general, that was quite an interesting thing to make, cause while in terms of coding it’s pretty simple and straightforward, it gives you an idea on how the dialogues and storylines can be made for the games (a very distant and not-really close-to-reality but still an idea).\n\nAs usual, by no means I consider myself a writer or super experienced coder, but I’m glad that after some time of playing around with this little project I managed to give it a more or less “normal” shape.\n\nIf you read this, didn’t fall asleep and maybe even find it slightly useful, I thank thee kind person."
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/4w9mt9/how_do_i_make_my_own_htmlbased_choose_your_own",
        "document": "I used to read/play those old \"choose your own adventure\" books as a wee bairn and would love to make my own web-version (just for fun, to share with my bro and a few mates), however I have zero programming skills and not much knowledge of how I would go about doing this.\n\nI was hoping someone here would be able to help, or at least point me in the right direction?\n\nEssentially, I want it to be fairly simple in design: the whole site would be text-based (except the homepage and maybe end page, which would have an image and a button that says \"start\"/\"play again\"). Then each page after that would probably have a simple coloured background), with clickable multiple choice text-based options that lead to the next related scenario page.\n\nI would also like it to have a few buttons at the bottom of each page (start again, share, choose answer for me, etc.). Is this feasible?\n\nMany thanks in advance for your wisdom!"
    },
    {
        "link": "https://forum.freecodecamp.org/t/i-really-wanna-make-a-text-based-game/437745",
        "document": "Hello @bltz welcome to freeCodeCamp!\n\nI’d say the most important part is being able to extract the text/gameplay-logic with the HTML/CSS the user sees. This will require knowledge of JavaScript, as it can be used to handle all the logic/dynamic game play elements you desire.\n\nThe last thing you want to do is have 500 different HTML pages realize you want to update the style and need to manually update every single one. The easiest way would be to leverage a framework of some kind, which will allow you to focus primarily on the game logic, story and game play, rather than manually dealing with simple stuff.\n\nHow you manage the game state/the game itself might require something like a browser api like localStorage so the user doesn’t lose all their progress by refreshing the page.\n\nOther then that, the sky really is the limit. The more complex of a game you want, the more stuff you can/need to integrate."
    },
    {
        "link": "https://reddit.com/r/learnprogramming/comments/2ek146/how_to_build_a_textbased_game",
        "document": "I am planning on making a text based game but am unsure of a few bits. Firstly, which would be the simplest language to use in an offline form? Secondly, how can I make it more interactive(I.E buttons and small pictures). And finally, how can I make it easy to distribute and execute? Apologies if these are very newbish questions, I am just unsure where else to ask."
    },
    {
        "link": "https://stackoverflow.com/questions/63478861/clean-coding-an-html-text-adventure-game",
        "document": "I'm building a text-based adventure game using HTML5, CSS and JavaScript but before I too far ahead of myself I was wondering how I should go about organizing my files. I was thinking rather than having one long HTML document would it be better to have multiple .js files for events and objects while linking everything through functions?\n\nI got the idea from the way inform7 (an interactive text game builder) handles multiple scripts. Sadly i7 doesn't offer a way to play via web browser and demands downloading an interpreter program like Gluxle. Other if builders like Twine2 and Quest are nice but they seem very limited.\n\nSo far the title screen is done and I was just about to start making content for the game."
    },
    {
        "link": "https://reddit.com/r/gamedev/comments/tg9ffl/how_do_you_manage_game_state_for_browserbased",
        "document": "I'm building a top down 2D Pokémon red-like rpg with JS (typescript to be more precise) and canvas. I'm not using any external libraries (yet) because I'm really trying to learn how to use JS/canvas in an advanced way. (Eventually I'll probably add in a library like phaser). Plus I'm a front-end dev so JS is my bread and butter.\n\nThis game is purely for fun and learning. One thing I'm struggling with is how to manage game state. Should I use a static class for this? A redux-like library? A utility object? Any tips? Is there a pattern I can implement for global state? A react-like consumer/provider pattern could be cool but I have no idea if this is necessary or how to implement this pattern outside of the react ecosystem.\n\nOverall, the game is data-driven (all game data is stored in JSON) and built with JS classes."
    },
    {
        "link": "https://reddit.com/r/incremental_games/comments/mwx2xd/performance_tips_for_javascript_game_developers",
        "document": "This post originally started out as a comment to this thread, but the content ended up being too large to post as a comment, so I decided to post it as it's own thread.\n\nThis post details all of the performance tips I've been exposed to over my years as a software developer working primarily in JavaScript and on the web.\n\nI'll just get straight into it...\n\nThis is a very low-hanging fruit with a low impact. It doesn't do much when you have just a few elements, but it makes a noticeable difference when there are 1000s of elements on the page.\n\nDo this instead:\n\nWhen you use code like the following, you are checking the entire document for a particular element.\n\nIf you are looking for an element that you know is inside another element, and you already have that element's reference cached somewhere, you can limit the amount of elements the browser needs to compare to your query to just those elements inside the parent, like so:\n\nIf you do not have a parent element reference, but you do know that the element you're looking for is at the same level of heirarchy as another element which you do have a reference for, then you can jump up a level to the common parent like so:\n\nAnimation frames are generally far more performant than timers that simulate repaints.\n\nDon't do this (this supposedly runs 60 frames per second):\n\nDo this instead:\n\nThis has the added benefit of running at a guaranteed 60+ fps. Higher monitor refreshrates actually run this at a higher frame rate, for example my ASUS VG248QE will run this game loop at 144 fps. Just bare in mind that in order to save system resources, browsers will \"pause\" the execution of an animation frame if focus is lost. This can happen when the user tabs out, minimizes the window or idles for a few minutes. Be sure to accommodate this behavior in your calculations, for example you might want to check how much time has passed since the last \"tick\" on each new \"tick\", and calculate your player's profits based on that.\n\nDo not rely on time calculations derived from the `Date` object\n\nThere is a far more precise time API accurate down to microseconds - look at Performance.now().\n\nDo this instead:\n\nOr better yet, use the timestamp passed to the callback - it is the same high-precision time object type as `()`, but the origin of the time starts when rAF first begins executing callbacks:\n\nOf course, if you actually need to use dates - for example calculating per day numbers or just rendering a calendar or whatever, then by all means use the Date object.\n\nYou won't know when performance tanks if you don't know what numbers to reasonably expect. Most browser developer consoles have a function to show an FPS counter on the page. In Chrome, it's in developer tools -> command palette (ctrl+p on win, cmd+p on mac) -> show frames. This will show you frames per second rendering for the entire page, but if you want to measure the FPS of a single game loop, say, for a single canvas element, then you can derive that from the parameter:\n\nLet's say you encounter a performance issue. How do you begin to analyze it, find out where it's coming from, all that nonsense? It's not as simple as looking at your game and thinking, \"Well, it happened when I jumped, so obviously it's my jump code.\"\n\nWhat you can do instead, is record a performance profile. You can then generate a heapmap from that profile, and jump into the callstack to see exactly how many milliseconds were spent running particular functions and methods.\n\nHow is this done?\n\nIt's quite an involved process, with far too much information for me to condense into a section of a Reddit comment/post, so unfortunately you will have to click on a link for this one. Here you go: https://blog.appsignal.com/2020/02/20/effective-profiling-in-google-chrome.html\n\nExecute DOM Reads and Writes in different phases\n\nDid you know that most browsers optimise for the case when reads and writes exist in separate animation frames/phases? Let me demonstrate.\n\nTake this code, for example.\n\nThis code will cause a few repaints in the browser, because all of the reads and writes happen in an interleaved manner. If we \"schedule\" our reads and writes into separate animation frames, we can basically achieve the same amount of rendering with much fewer repaints - which is done (in concept) like so:\n\nOf course, this would become a pain to maintain, so we could write a scheduler that basically turns every DOM access task into an asynchronous one, by queing read and write tasks separately and flushing the queues periodically - this way the reads and writes are executed in ordered batches:\n\nJust note that the above calls to and are asynchronous - regular DOM reads and writes are synchronous, so these will not behave as you might expect. If you want to make it a little easier, you can extend it into a promisified version:\n\nFor more information on how and why this works, and a more robust and complete implementation, check out the FastDom library: https://github.com/wilsonpage/fastdom - note that you might not need this particular optimization if you're using a rendering framework, which should already be doing these sorts of optimisations for you.\n\nTry to look for areas in your code where you make use of asynchronous methods, especially if those areas deal with fetching remote resources in a serial manner.\n\nFor example, here is some code to load different sound effects into an AudioContext:\n\nThere is a problem with this code. It will load each sound asset one by one, one after the other. None of the sounds depend on one another in order to load, and we can take advantage of this to gain a substantial performance boost.\n\nInstead of loading one sound at a time, we can load them simultaneously using .\n\nDo not create too many event listeners\n\nThis is another one of those \"don't bother if you're using a framework\" tips, as a good framework should already be doing this for you. However, if you're not using a framework, then adding a bunch of event listeners to your game can cause quite a lot of cascading performance bottlenecks.\n\nTake this code for example, which adds three event listeners - one for a click on three different buttons.\n\nAt first glance, this code looks fine. Nothing's really wrong with it, aside from the fact that there are three separate functions taking up memory, which isn't a big deal.\n\nWhat if we introduce more buttons, though? Well, we will want to make maintenance easier on us, so...\n\n...and this code works, nicely. Except now 3 months have passed and there are now 400 buttons in our game, each with their own event listener, and this starts becoming an issue. First off, now we have to move the function out of the loop, so we aren't creating new instances of it on each iteration:\n\nThis is an improvement, but we still have 400 event listeners. We could do things like check if the buttons are actually actively displayed in our game, and conditionally apply the event listeners, that's one possible optimisation, but I won't get into that. It's just more branching complexity.\n\nA couple of weeks pass, and we add a feature that lets a user add their own buttons. And we somehow forget to update the button code and for some reason any button the user adds doesn't register any clicks - this is because we're only iterating over the buttons that already existed when we registered the event listeners. So, we have to make sure that new buttons get their event listeners somehow... I won't get into this either.\n\nAs you can see, this is spiralling out of control. How do we fix it? The answer is to just register one event listener for a click on the entire document, and check the event target to see if it's something we should be interested in.\n\nHow many event listeners is this? Just one. Not two, not 400, but one.\n\nWill this event listener respond to elements created as a result of user input? Yes, yes it will.\n\nIt even lets us listen for clicks on things other than buttons!\n\nTake advantage of CSS animations and their ability to utilize hardware acceleration\n\nAnimating with JS is nice, you can get a lot of precise control that you can't get with CSS. But for simple animations like fades, color changes, etc. it's better to use CSS.\n\nBecause CSS animations can take advantage of GPU acceleration. When you use properties like , , , , etc in your animations, CSS will shift the painting of those animations from the CPU over to the GPU. This is something that is not really possible in JS (unless you use something like GPU.js, but a whole dependency just for some silly animations? kek)\n\nPlus, not only do you get GPU acceleration, but you can simplify your code as well. Instead of slowly incrementing/decrementing an opacity value over time via JS, you can just toggle a class on activation/deactivation. Simple. Easy. You can even bind it to your state.\n\nAlthough a bit outdated, this article gives a good outline of this concept: https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\n\nMost games are full of static resources like images, sprite sheets, audio files, fonts, etc. These are all assets that need to be sent to the browser over the network.\n\nIf the player lacks an internet connection, some of these assets may be broken.\n\nOne can cache these assets in the browser so that they load even while the user is offline, and this has the added benefit of decreasing loading times for these assets.\n\nThis used to be done via the HTML5 ApplicationCache, which has been deprecated in favor of the Cache API, which requires Service Workers. Thankfully, the Cache API is currently supported in all modern browsers.\n\nHere is a tutorial on how to get started with the Cache API: https://web.dev/cache-api-quick-guide/\n\nUtilize Web Workers to offload heavy computations to another thread\n\nWeb Workers can do quite a lot for gains in performance. Think of web workers as threads, but in the browser.\n\nAny JS script can spawn a new web worker that it has exclusive access to, or a shared worker that other scripts can share access to.\n\nWeb workers are an isolated execution context that executes code in a limited environment - they have access to a number of APIs, but do not have access to the DOM.\n\nThey are also very easy to use. You simply pass messages around and react to messages to communicate between your workers and your main script, like so:\n\nNote that in the worker, and aren't attached to anything, since the worker itself is basically the global scope.\n\nOf course, using a whole thread for something as simple as an incrementing counter is a little bit overkill, but it makes a big difference when you have expensive math calculations to perform and you can perform them on a separate thread.\n\nOffloading computationally expensive code like this to a separate thread allows you to keep your main thread for just rendering purposes, keeping your user interface snappy and performant.\n\nSee more information here: https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n\nDon't act on entities the player cannot see\n\nIf you have objects that are out-of-view, (whether a spaceship in a game off to the side of the screen or a resource counter hidden behind a tab in a component), do not bother updating their views. They might exist in the document at the time that the player is playing a game, but just because they exist in the document, that doesn't mean the player can actually see them.\n\nPerforming calculations to update all of these hidden things could cost quite a bit of resources and cause a number of unnecessary browser repaints.\n\nInstead, simply ignore them. Be sure to keep your game's state updated, and only update these elements or objects with their new state when they come back into view.\n\nYou can use the IntersectionObserver API to detect if document elements are currently in view. For canvas objects, just check if their x and y coordinates exceed the canvas width / height or are less than 0.\n\nUsing the IntersectionObserver API is nice, but if you can get away with not using it, even better. It is less necessary if you derive your view from your state and only render elements/objects if the state requires that they be rendered.\n\nIf your game has complex objects that have their own \"intelligence\" and produce events on their own, you still don't need to update their views if they exist off screen. Simply attach these objects to a State Machine and update the state machine instead. If their state requires that they be rendered (for example a sheep has walked within view of the player), then by all means, render it.\n\nReduce the number of logical branching pathes via polymorphism\n\nIn programming, we make use of all sorts of syntax constructs, like conditional statements, ternary operators, functions, loops, binary / logical operators, etc.\n\nSome of these constructs result in what we call \"logical branches\". A logical branch is essentially a point during a program's execution where the program must inspect some state and then choose between two or more \"paths\" of execution. These are found typically in conditional statements:\n\nWhen the interpreter (or compiler) comes to these sections of code, it performs a little calculation to determine where in the code to go next. Though almost entirely negligible, this little calculation does take a little bit of time, and in larger more complex programs, with many potential users, this time can add up.\n\nThere is a concept known as a \"polymorphism\" in functional programming, where we can take advantage of the type to remove some of this branching complexity.\n\nTake a Result union type, for example. It can be one of two possible unions:\n\nWe have both a and a type, that both belong to the same union - . If we get a and want to act upon it (for example, transform it's value), we first have to inspect which of the two types we're working with. Let's do that with a simple utility:\n\nThis utility could be used in many places in our projects, and each time we use it, we are creating a branching path.\n\nThere's an optimization we can make here, to remove this branching, via a polymorphism of the utility on each type. All we have to do is adjust the implementations of our types to implement this interface:\n\nNow, we just adjust our utility to call this interface:\n\nThus, we can use our utility, and it won't ever create any logical branches. It just defers to the interface of the type.\n\nOf course, this can be achieved without using union types. A realistic example would be an event handler that responds to different actions, or anywhere a switch case might be used. let's say we have an event handler that receives a message object, and we do different things according to the message's property (much like we would do in Redux or in our button event handler we saw earlier).\n\nNormally we would inspect this property via a switch/case statement, which could have many potential logical branches (based on how many different types we have), but instead of doing that, we could simply use a dictionary:\n\nAs you can see, there are no logical branches in this code, yet we are still able to perform different functions based on different inputs. This scales to however many different types our message handler deals with.\n\nOf course, care needs to be taken here. There are certainly cases where deferring logic to a function via polymorphism could in fact be more computationally expensive than just checking a condition, depending on what the function is doing and how computationally expensive it is to call. Be sure to routinely profile your code to be sure you're seeing improvements. Don't just optimise for the sake of it.\n\nAs your idea develops more and fleshes itself out, you might add a lot of code for lots of different parts of your game. You might start seeing areas where code performs calculations that are not strictly necessary.\n\nSince we're in a game sub, I will give a perfect game-related example: collision detection.\n\nLet's assume we have a bunch of objects on our game's canvas, and we want to check if two objects are colliding:\n\nThis code is straightforward, and it works. We loop through each game object, reset it's collision status to false, then loop through each game object again to check if our current object from the outer loop is colliding with an object in the inner loop. We be sure to ignore the case where both the inner and outer objects reference the same object, because we know that an object will always be colliding with itself.\n\nHowever, there is a major issue here. If we've checked if an object is colliding, we don't need to check it again, because we know it's colliding already, so we can actually start our collision check with only the remaining objects:\n\nThis is already much better, we're not performing any unnecessary calculations anymore, but there's still one more optimisation we can make. We know that the index references the current object, which means that the first object that is inspected in our inner loop corresponds to the object in our outer loop - so we can simply shift the index by 1 to ignore it, and remove our conditional branch that deals with ignoring the case where both objects reference the same thing:\n\nNow, our code for doing collision detection doesn't perform any unnecessary checks. Since collision detection is quite a computationally heavy task, especially if there are hundreds our thousands of objects in our game, this little optimisation could have saved us potentially a lot of execution time.\n\nThere's actually more optimisations we can make here - we don't exactly need to check every object in our game for collisions, like this code is doing.\n\nFor a simple 2D game, we could divide the \"game world\" into a grid of tiles, and only check the objects that exist in the same tile as the object that we're currently inspecting.\n\nFor a 3D game, we could use an algorithm that puts the entire game world into a giant invisible cube, then divides that cube into 8 smaller invisible cubes, and each of those cubes into 8 smaller invisible cubes, etc. Then we can take an object, find out which \"cube\" it is in by checking it's coordinates against the coordinates of the lowest level of cubes - if it exists inside two cubes simultaneously, then we move \"up\" a level to get a bigger cube - and only check for collisions on objects that exist inside the same cube.\n\nWe could also adjust our collision detection function to check a boxed area around the object we're checking (known as a \"hitbox\"), so we don't match on each and every pixel.\n\nThis is an involved example, but this sort of problem arises almost anywhere in a program, not just in things like collision detection, so you should definitely keep an eye out for optimisations you can make that reduce unnecessary computations, as these optimisations will generally net you the most performance gains.\n\nHopefully all of these tips are useful to some of you, as this post took me a lot longer to write than I thought it would 😅."
    },
    {
        "link": "https://dev.to/zippcodder/complete-guide-to-building-games-in-the-browser-kp6",
        "document": "Back in the early days when I first started out in web development, I eventually stumbled across HTML Canvas, and I was immediately hooked. This discovery would prompt me to create many projects, from things like art programs to photo applications, and eventually even games.\n\nOften I've been revisiting HTML Canvas, and combining it with some of my newer skills like Node.js. Using the two, I've been able to create full blown online games, and honestly have impressed myself with how much I've improved since I first came across the technology, becoming a kind of \"canvas connoisseur\" if I do say so myself! 😌\n\nI thought it was about time I shared some of the knowledge I've gained over the years, and figured this was a good way to do it. So, today Im going to share with you my process and methods for creating games from scratch using HTML Canvas, showing you everything you need to know to get started building and designing your own!\n\nSince this post will be a little lengthy, heres an overview of all of the topics I'll be covering:\n• Putting it All Together\n\nJust as a heads up, Im going to assume you have somewhat strong knowledge of Javascript and the DOM as I go through this guide, so I wont be explaining any syntax or basic concepts, only concepts related to HTML Canvas. Throughout this post I'll be explaining the key concepts used in my personal process, and then lastly in the final chapter I'll show a simple game I've created to showcase those concepts. But with that out of the way, lets get into it! 😎\n\nThe HTML element, or Canvas API as it's also called, is a special HTML Element used for creating graphics, similar to its counterpart SVG which is also used for creating graphics on the web. Unlike SVG however, HTML Canvas is built for speed and the rendering of graphics programmatically on the fly.\n\nThe API consists of the element, which is used as a container for our graphics, and contains a whole plethora of properties and methods used for drawing things like shapes, images, text, 3d models and more onto it, as well as applying transformation on said elements.\n\nBecause its so simple, fast and versatile its applied in a wide range of web applications like games (2D and 3D), video chat, animations, art programs and everything in between. But before we start applying it for our game, let's get into how it works.\n\nTo get started with HTML Canvas, we'll need to first add it into our HTML. The element has no children, but text can be added between its tags to serve as the text to be shown to a user in the case that their browser dosen't support Canvas.\n\nBy default, the dimensions of the element are 300x150(px), but it can be resized in CSS. Note that this may alter the aspect ratio of the canvas's content, and it may be stretched as a result of resizing, but I'll get more into that later.\n\nTo breifly give you an introduction to the use of HTML Canvas (before we jump into the good stuff), I'll quickly go over each of the most important methods and properties you need to know to get started. Before we can render anything however, we first need to get a reference to the canvas's context using the method.\n\nThe method takes 2 parameters. One is the context type, and another is the context attributes, however context attributes are irrelevant in our case, and can be ommited. The main two values for the context type are and .\n\nPassing it a context specifies that we want a 2D rendering context, and will return a object, containing properties and methods for rendering 2D graphics onto our canvas. Passing , will return a object, which contains properties and methods for rendering 3D graphics.\n\nWebGL as you may have heard of before, is a Javascript API for rendering 3D graphics, and is a very popular choice for creating 3D games on the web. The API however is very complex, which is why people usually opt to use libraries like Three.js to interact with it.\n\nIn this guide, we'll be using a 2D rendering context which is much simpler, but if you're interested in either Three.js or WebGL, you can check out some of the resources linked at the end of this article.\n\nAnyway, let's take a look at some properties and rendering methods..👇\n\nQuickly, lets go over the main rendering methods and properties we'll be using to create our game. If any of these properties or methods dont seem clear, they'll become clearer as we apply them later in this article:\n• None : Starts a new \"path\", which means ties with previous renderings are cut. The path is all of the drawing commands that have been called up untill the current point. If you were to stroke a rectangle using and , and then fill a rectangle using and , the stroked rectangle would get filled as well because both rectangles are part of the same path. Thus when is called both rectangles are filled. This method prevents this from ocurring by starting a new path. Later you'll see this in action.\n• None : Used to stroke (or line) the current path. Lines and shapes wont be stroked by default, so this should always be called explicitly.\n• None : Used to fill the current path. Lines and shapes wont be filled by default, so this should be always called explicitly.\n• None : Moves the pen (the current coordinates from which to start drawing from) to and coordinates.\n• None : Draws a line form the current pen coordinates to and coordinates. Line wont show unless is used after.\n• None : Draws a rectangle whose top left corner is located at and , and whose dimensions are and . Wont show unless or are explicitly called after.\n• None : Same as but strokes (lines) the rectangle in the same function call (no need to call afterwards).\n• None : Same as , but fills the rectangle in the same function call instead of stroking it.\n• None : Same as , but fill clear out (erase) the area of space specified. This is often used to clear the canvas for the next frame, as you'll see later.\n• None : Renders a given image ( ) onto the canvas located at x and y width the given and . Usually an created through the constructor is used as the value.\n• None : Creates text specified by and and . Settings such as font and text alignment can be set using additional properties, which i wont go over here.\n• None : Draws an arc centered at and coordinates, which has a radius of , starts at the angle and ends at the angle (both given in radians).To create a circle, set to 0 and to . specifies weather the arc is drawn counter clockwise, the default being clockwise.\n• None : This property sets the color which will be used in strokes (lines). Can be any valid CSS color value. The new stroke color will be applied to everything drawn after its been set.\n• None : Sets the fill color. The new fill color will be applied to everything drawn after its been set.\n• None : Sets the opacity. The new opacity will be applied to everything drawn after its been set.\n\nThese are the principle methods and properties that we'll be using to render our game onto the canvas, and draw each element from backgrounds, to characters and even on-screen controls for mobile users.\n\nTo keep this section as short as possible, i've only gone over the essencials. But, theres a ton of additional useful properties and methods you can use to acheive all kinds of stuff (some of which we will see later on). You can explore them here if you're interested.\n\nDon't worry about it if it's hard to visualize any of these, as you'll see them in action further along. Any tips or other relevant information will be explained as this guide progresses. But now that we understand what we're using to create our game and a little about how to use it, let's look at the first step in implementing it.\n\nThe first step we need to take before drawing any game elements onto our canvas is to determine what kind of sizing we'll use, and how we want the game area to behave on different screen sizes. Before I show the methods I have for doing so, it's important we go over the and attributes of the canvas.\n\nAs before mentioned, the default dimensions of the canvas are 300x150, but this also serves as the default dimensions of the canvas's content. Using the and attributes we can change these inner content dimensions, and control how many units the canvas uses for rendering on it's and axis. Below is a further example and explination of how this works:\n\nThe canvas dimensions and it's content dimensions can also be set in one go, using it's and attributes in HTML:\n\nWhat option you choose for sizing will determine how or weather or not you'll use these two attributes. But now that this concept is understood, let me show you what I think are the three best and most common methods for sizing your game.\n\nA \"Static Fit\" (for the lack of a better term) is when you apply permanent default dimensions to your canvas, and then simply position it somewhere on your webpage. Generally, this is used for larger screens and desktops where you want other content to be visible without maximizing the game area, or you want to maintain the aspect ratio of the game area and dont care about maximizing it.\n\nFor some games, aspect ratio is important because if it's altered, the content of the game could squish or stretch. A good example of a static fit is the online game Tank Trouble (one i used to play quite a bit 😊). You can see they've simply positioned their game area onto the page, maintain it's aspect ratio, and keep it minimized as to keep the rest of the webpage content visible.\n\nWhen applying this type of fit, you'll want to set the default content dimensions of the canvas once and never change them. They should have the same aspect ratio as the physical canvas dimensions in CSS, and whenever you want to scale the canvas, always keep it's aspect ratio and inner dimensions the same.\n\nThe \"theator fit\" or \"theator mode\" method, is one of the most common ways used to maximize the size of content which must maintain its aspect ratio. This is when you stretch the height of the content to the full height of the device, and keep the width proporcionate, optionally filling in any gaps with black (or vice-versa, based on the client device dimenisons).\n\nThis method is usually applied when the game area has to maintain a certain aspect ratio and you want to maximize it as much as possible without cutting off any of the canvas. I could'nt find a good example in a game, but the Youtube video player serves as a good example. As seen when you try to fullscreen the video, black bars may cover the top or bottom of the video player in order to cover gaps not filled my the video itself.\n\nBelow, I show an example and full explination on how you can apply this:\n\nNotice how the canvas adapts to the viewport changing, that way our game content wont end up stretching or being altered if a user resizes, and always provides the most optimum presentation possible. Similar to a static fit, you should set the content dimensions once and never change them, only changing the canvas's CSS dimensions to scale it, and maintain aspect ratio. It would also be smart to encourage your users to flip their device (if possible) to get as close to the aspect ratio of the game area as possible.\n\nA fullscreen fit can be simple, or a tad more complicated. It's when you stretch the canvas dimension's (and it's content dimensions) to the exact dimensions of the user's device, as to leave no gaps. When using a fullscreen and theator fit, I would recommend fullscreening the canvas on touchscreen devices via the method to lock it in place, because the browser may scroll and move as the player interacts with the screen to play the game.\n\nA fullscreen fit should usually only be applied when the dimensions of your game area dont matter, and or the full game area within the canvas dosen't have to be visible. A good example of this is the online game Narwhale.io, where the character is centered and the map moves into view naturally.\n\nA small pitfall if this is that the sizing of your game may vary slightly in terms of how much of the map certain clients will see. If your game is drawn on a phone with smaller dimensions than a tablet, the content is drawn using the same amount of units for each rendering (meaning a 2x2 square on the phone is also 2x2 on the tablet), except the tablet uses more units since the canvas's content dimensions will adapt to its larger screen size. This means that users on larger screens will end up seeing significantly more of the map than users with smaller screens.\n\nDepending on your game, this may not matter to you, but if it's somthing you care about, I have a solution. I found to get around this was not to use pixels (the default units) as units when sizing renderings, but instead inventing my own \"viewport unit\" based on the dimensions of the device. Think of it as using \"%\" units instead of \"px\" units in CSS.\n\nWhen applying this in an online game I had started a while back which used a fullscreen fit, it proved very effective at maintaining consistent proporcionality between devices. Below, you can see two screenshots I took, comparing the the size of the game area relative to the screen of my phone, and my tablet.\n\nNotice how the elements of the game dont seem smaller on the tablet screen, and the distance between the benches from the edge of the screen is almost the same. Of course, some devices will inevadablely see slightly more or less of the map than others, because of slight differences in aspect ratio, but it's nothing to worry about.\n\nIn short, if you use pixel units (the default units) with a fullscreen fit you'll probably see large changes in the sizing of the map between devices (which isn't a problem, if you dont care), but if you use \"viewport\" units, the sizing of your game will stay consistent. Here I show an example and explination of how to apply these percentage units if you're interested.\n\nOn another note, if you're on a touch screen device and you're interested in checking out the unfinished multiplayer game where I took the screenshots from, you can check that out here. You can also dig through the code if you'd like to see how I apply some of the techniques I talk about here.\n\nBut with all that out of the way, lets finally start building our game, shall we? 👇\n\nBefore creating any characters, objects or backgrounds, we first need to define an order and structure through which each of these entities will be rendered and managed. Since we're building our game from scratch and HTML Canvas provides no kind of framework, we'll have to define ourselves a structure. I call this my rendering pipeline.\n\nGenerally it'll look like this:\n\nThis provides us with an orderly process we can use to draw all of the elements of our game. The process goes as follows:\n• None We create a container for any states that we want to be accessable globally. For example, if we wanted to create a \"pet\" that follows our character around, we could store the character's coordinates in our global container, for the pet object to access and use as a relative point to follow.\n• None Two arrays are defined, one which will store all objects for props (objects that move or can be interacted with by the user), and another that will store all objects for characters (objects controlled by the user). Objects for props and characters will be created using classes, as we'll see later.\n• None An initialization function is defined, which will set any initial states, like setting the canvas's dimensions, colors, fonts, etc. This is typically where you'd put the logic for your initial canvas sizing, like discussed in the previous section, or perhaps register an event listener for adjusting the game area on resize (depending on your prefered sizing method).\n• None A function for rendering the backdrop is defined. Here we can either render an image, or separate background elements (more on that later).\n• None We create a function which will render each prop in the array.\n• None We create a function which will render each character in the array.\n• None We create a function which will render onscreen controls (for mobile devices) line buttons and joysticks, as well as any other displays like showing the number of lives.\n• None The main function is created. This function when called will begin running frames. It starts by erasing the canvas using , then calls the render function for each type of entity. If somthing is drawn onto the canvas, and then we draw somthing directly ontop of it, the first rendering will be covered, meaning we'll have to think in layers. Thus, the render function for each type of entity is called in a logical order (background-> objects-> characters-> controls), with the background being on the bottom layer, and the onscreen controls being on the top. The last thing this function dose is run a special method . This method takes in a function, which it will run as soon as the browser is ready to render new content, so we pass it . We call it in a loop, so that our frames run indefinitly (note that isn't blocking, like if you were to run a loop indefinitely, making the page unresponsive).\n• None We call and , to initialize our game, and begin running frames.\n\nOf course, you can personalize this process however you please if you're actively following along, as this is just my personal process and none of this is set in stone (though I'd recommed still using ).\n\nThe purpose of this section was to explain that you should have some kind of structure for rendering your game, and managing states, animations and user interactions. This is the most important part, as it'll prevent our game from becoming a confusing, clunky mess in the long run.\n\nHopefully by now the fundamentals have more or less stuck, but now that the scafolding for our game is all set up, we can finally start filling our rendering pipeline with actual backgrounds, objects and characters (etc) to render!\n\nA \"sprite\" refers to any rendered object or character that can be moved around, interected with, or hold some type of state or animation. Some can be represented as objects, and others with functions, both of which should typically be stored in a separate file, to keep the file where your rendering pipeline lives clean. Usually I split these into three categories:\n\nAs implied, they function as a tangible rendered elements of the game, each of which serves a different purpose. Below, I explain exactly the application of these, and how to create each of them.\n\nWhen creating a background for your game (as we'll dive deeper into later) there are generally two options. The background can be rendered as a single pre-created image, or, it can be rendered as a collection of \"background sprites\". This can be multiple renderings, or a collection of multiple images.\n\nBecause background elements cant be interected with and hold no state, usually these are created as functions which do nothing but render the sprite, rather than objects with render methods and properties as used in character and object sprites (more on that later). These functions will take in an and coordinate as parameters (optionally any other parameters regarding display as well), and will simply be called inside the function of our rendering pipeline.\n\nHeres an example of a simple flower pot sprite ive created:\n\nHere I draw each flower from scratch using rendering methods. If you do this its important that you draw each peice of the sprite relative to the and parameters that are passed into the function. I wouldn't recommend doing this however, as its tedious and using a prepared image generally will look alot better. I'm just using rendering methods to examplify their use.\n\nAgain, you can just as easily skip all of the building of the flower yourself, and simply use the method to draw a pre-build image or PNG (one that hopefully looks better than my flowers) onto the canvas for a single background sprite, or even skip everything all together and render a single image for the entire background in the function.\n\nObject sprites are like background sprites, except they usually hold some kind of state (for user interactions), movement or have an animation, and may have access to certain global states in , like a ceiling fan, or a door that opens and closes when the user touches it. Usually these are made with classes and objects, which are stored in the array, which is later iterated through to render each object in it, inside the function.\n\nClasses for object sprites will always carry a method containing the commands to render the sprite, which will be accessed and called in . Of course you dont have to call it that, but you should have some kind of standard method for rendering each prop. Inside the method, state can be used to influence how the sprite is displayed. Similar to background sprites, these can also accept an and parameter, and any other additional parameters regarding interaction or display. Below I create animated spikes as an example of a simple object sprite:\n\nThe movement works because we're constantly changing the coordinates (our state) where the rendering is drawn, and because frames are running indefinitely, any changes we apply to the rendering will be immediately reflected since the sprite is being redrawn with new state repeatedly, which means it's up to us to control timing in animations. Again, my spikes are fairly ugly, and I'm just using render methods to demonstrate their use and prove the concept. You can make your sprites as pretty as you'd like.\n\nThis is a good example of the types of elements you should render as object sprites, such as obstacles or things a character can interact with or be affected by. As shown, typically you should make these as a class in which you'll specify its default functionality and give it a method, then simply envoke it whenever you need to place a new object sprite of the same type, keeping our code nice and DRY.\n\nCharacter sprites function essencially the same as object sprites, accept they usually have state thats controlled by outside factors like keyboard controls or a joystick, and are rendered on a higher layer than objects. Character sprites are created as objects from a standard class which have state and a method, and are added to the array which will be iterated through in to call the render method of each existing character. This can include the player's character as well as other players, like in an online game.\n\nThough they're similar, it's best to keep them separated, because usually you'll want your characters to be rendered on a higher layer than the objects and background.\n\nIn the next section I'll show how you can implement controls with a character sprite, and explain how to create different types of movements in your game like having the character look towards the mouse, making joysticks and using keyboard controls.\n\nIn this section I'll explain and demonstrate how to implement common controls and character movements that you'll typically apply in a 2D game, many of the methods I use to implement which can be used to create other types of controls and movements. Below I explain each one by one, and provide code and an example.\n\nJoysticks are a common type of control used for mobile games and typically have two applications in regards to character actions: 1) Controlling a character's angle 2) Controlling a character's movement direction. Apart from display, a joystick's primary purpose is to keep track of each of these, so that we can apply them to whatever entity(s) it's controling. Typically it'll keep it's angle and and direction in so that they're accessible to every sprite that needs it.\n\nThese properties will allow us to specify certain directions in which sprites will travel on the game area, and the angle at which they're facing. Usually these are applied as character controls, and dual-joysticks are used, one for the character's angle and one for the character's direction.\n\nBelow I show an example and full explination on how to create a joystick. I've made this example so that you can interact using a mouse or a touchscreen device. Try not to resize to much, as it could break the example:\n\nAs you can see iv'e created a class for creating joysticks just like I would've made an object sprite, then instanciate and render it inside . They technically aren't sprites however, because the joystick isn't an element of the game itself. I've rendered it simply as two circles, one serving as the thumbstick and one as the base (again, you can make these peices look however you want).\n\nWithin it's method I added logic to draw the thumbstick towards the user's finger, while keeping it inside of the base (the helper function, which measures the distance between two points, aids in this). Using one of the helper functions I've added to ( ), the center coordinates of the base and the center coordinates of the thumbstick, Im also able to determine the angle between the two coordinates, and the and offset the thumbstick is from the base (the formula for which will be covered later), which is the information shown above the joystick. The formula used by and can be found commented in the above pen.\n\nThis information can be kept in to later be accessed by our main character sprite, to control it's movements. Another important note to mention is how im giving the joystick class access to the mouse actions through , and then implementing it's logic within it's own class instead of inside the event listeners for mouse/touch events. This keeps things much more orderly, rather than cramming the logic of each sprite who needs mouse events inside the same event listeners. This is why inside I've registered mouse/touch event listeners which when fired just add that information to to be globally accessible.\n\nBelow is an example of integrating a joystick with a character sprite to allow movement. Our character sprite is the red circle in the top left corner. Simply use the joystick to move it across the screen with your finger or mouse. Again, try not to resize the window:\n\nHere our character sprite is accessing the and properties on , which are being continuously updated by and based on our joystick's state. Again, this is better than directly updating our character sprite's coordinates inside of the joystick's class, because if we we're to add more sprites for the joystick to control, we would have to cram a ton of code inside it. Instead, any sprite can simply access the information via and keep its implementation within it's own class.\n\nThe way this movement works is a bit different than implementing keyboard controls, because our character sprite is moving in very smooth angles rather than simply up or left. Here's how it works: First we declare and onto , which serve as the horizontal and vertical amount of units a character will move over time.\n\nIf a user had the joystick positioned at the bottom right (as far as it could go in each direction), this would mean our character would move diagonally downwards to the right. Why? Because since and are the same value (because the width and height of the joystick are equal and thus if the thumbstick is at the bottom right it has equal and offset) and would be set the same, and the character would move down and right at the same rate, causing our character to move diagonally downwards towards the right. Hopefully that made sense, but lucky for you implementing keyboard controls is 10x simpler.\n\nUnlike joystick controls keyboard movements are much simpler to implement. It's as simple as registering a and event inside , and then keeping track of weather or not the keycodes you're listening for are pressed down or released. That information is kept inside , where our character sprite has easy access, and depending on weather a key is currently being pressed, the and coordinates of the character sprite will be incremented or decremented by a certain amount (the character sprite's property).\n\nBelow is an example of a character sprite (the red circle) which you can control using the arrow keys:\n\nSimple right? As it's name implies, the property of the character sprite controls how many units our character will move when it dose, allowing us to control how much ground it covers in each movement. The same can be done with joystick controls by either multiplying and to go faster, or dividing them to go slower (as long as they're multiplied or divided by the same factor).\n\nIn the below example I've made a small rocketship character sprite using the method. Not only dose it move in the direction of the joystick, but also mimics the angle of the joystick. The joystick's angle is kept in , which our character sprite has easy access to for it to rotate that amount.\n\nBelow is an example and explination of how to apply rotation to a character sprite:\n\nThe key part here is the method on , which takes in two sets of coordinates and returns the angle between them (in radians). The formula for which is . We use to measure the angle between the center of the joystick's thumbstick, and the center of the joystick's base, and then put the result into . This formula (and every other I cover in this post) has a ton of applications when building a game, and you can use it to control rotation with the mouse as well, by mesuring the angle between the mouse coordinates and the center of the screen.\n\nThe second primary part which allows this to work is the method of the canvas's context, which is what's used to apply the rotation to the character sprite. The way this method works is by rotating the canvas from its top left corner by the specified amount of radians. The rotation only applies to everything drawn after the method is called. Of course this works alot differently than you would expect, but we can normalize it by doing the following:\n\nYou can read more on the and methods here.\n\nIn 2D games typically there exists two major types of character movement:\n• None Static Movement: This is when the map is fixed on the game area, and the character moves relative to the map. Like in Tank Trouble.\n• None Dynamic Movement: This is when the character is fixed to the center of the screen, and the map moves relative to the character. Like in Narwhale.io.\n\nSo far the type of movement I've examplified has all been static movement, but in this section I'll give an example and explination on how to apply dynamic movement:\n\nSee how the \"camera\" follows our character as the map moves relative to it. The way we do this is by applying the joystick's and offset to coordinates which will serve as a map anchor, which our background sprites will be drawn relative to (and of course remove the and implementation from our main character sprite).\n\nFirst what I do is store the joystick's and offset in and , and then declare to store the \"map anchor\" coordinates. Inside before rendering each sprite, I update and by subtracting from , and subtracting from .\n\nHere we subtract instead of add like we did in static movement, because the map has to flow the opposite direction from where the character is moving towards. Then finally, inside our sprite, I add and to it's and coordinate, to draw the sprite relative to the current map anchor coordinates.\n\nCollision detection is typically an essencial when it comes to games, weather it's stopping a character from walking through a wall, or killing a character when a bullet hits them.\n\nIn this section I'll touch base on basic collision detection, and explain how to detect collision between squares, circles and rectangles as well as give examples.\n\nCollision detection is all about using the dimensions and coordinates of two shapes, to mathematically determine weather or not both are in contact. Depending on the shapes themselves (square, circle, etc.), the way you'll determine this will vary.\n\nBelow I give an example and explination on how to apply collision detection with squares (same exact method can be used with rectangles of any size). Simply drag the pink square into the blue square, and the blue square will turn red when the pink square comes into contact in the following example:\n\nThe first thing I did was implement some logic for dragging the pink square. That isn't as relevant but if your interested in how I implemented it just take a look at the code. Next, onto the base class for our squares (which is the one the blue square instanciates) I attach an object inside the constructor called . On this object, we'll keep a sub object for every sprite we want to detect collision for, thus, I add .\n\nOn (and every other collision object in ) there exists a property which holds the boolean for mathematically determining contact with the pink square (which we're about to dig into), and then an property which specifies weather not the sprite is in contact, though here we aren't using this property. This is a good standard to use when implementing collision detection, since its simple and keeps things orderly.\n\nHere is the pseudo-code for determining collision between two rectangles/squares, exactly the same structures as the boolean in :\n\nTry visualizing this boolean in action as you read through it, and eventually you'll get the gist.\n\nDetermining contact between two circles (not ovals, we'll get to that) is very straight forward and simple to understand. Because Im lazy, just imagine the shapes in the above example I showed are now two circles. The pseudo code for would be the following, to determine weather the two circles are in contact:\n\nHere, \"distance between A and B\" refers to the distance between the two points where each circle is centered. If you remember, you determine this with the handy-dandy formula: . Simple right?\n\nThese two examples are pretty simple, but collision detection with more complex and irregular shapes can require much more advanced methods of determining collisions. Of course here I've only gone over the basics, but if you do plan on implementing collision detection for complex shapes, I highly recommend you check out these resources:\n\nKeeping track of certain events, such as when a door is opened or when the character is hit in a game is important. This allows us to globally listen for (and trigger) when certain things happen our game no matter what sprite we're in.\n\nBelow I've edited the previous example to use events to run two s every time the squares are in contact:\n\nBasically the way I've implemented events is exactly how DOM events are implemented, by adding an and method to . That way both methods are globally accessible.\n\nalso includes an property, and each of its sub properties are the name of an existing event which points to an array where callbacks for that event will be stored. I simply call to add a callback to the array for the specified event, and then call to call each callback inside the array of the specified event name. And of course we can all new events by adding a new property to . Easy-peasy! 🍋\n\nDespite how simple it is, I just wanted to clarify that its important that you implement some kind of event system within your game, otherwise you'll be hardcoding alot of stuff, which isn't good practice.\n\nPutting it All Together\n\nFinally let me go down the list of each integral concept that makes this process possible. If any of what I explained previously seemed unclear, I recommend you try to examine where and how each concept is implemented within the code to gain a better understanding of how this all functions. Let us first again go down the list of each of the steps of the process:\n• Choose a sizing for the game area (apply it in )\n• Fill your rendering pipeline with sprites (in their respective locations depending on the sprite)\n\nEach of these concepts can be seen applied in this simple game I've created, named \"Drift\". The objective is to last as long as possible without being hit by a barrier or leaving the map, steering a car by tapping the left or right half of the game area or using arrow keys. I found it about as frustrating as playing Flappy Bird, my highest score being 33.\n\nThis game greatly examlifies the process and methods I've explained throughout, and hopefully with this guide and example to throw it all together, you'll be equiped with the knowledge to build your own games using HTML Canvas, and the techniques I've gone over in this post.\n\nI hope you've managed to gain somthing from this article, and if you're still thirsty for more related to game development, definitely checkout the resources below.\n\nThanks for reading, and happy coding! 👍"
    },
    {
        "link": "https://gamedev.stackexchange.com/questions/104833/how-should-browser-based-muiltiplayer-game-state-be-syncronized-using-websockets",
        "document": "Stack Exchange network consists of 183 Q&A communities including Stack Overflow, the largest, most trusted online community for developers to learn, share their knowledge, and build their careers."
    },
    {
        "link": "https://stackoverflow.com/questions/38388638/browser-html5-real-time-game-broadcast-game-state-options",
        "document": "I'm making real time game for facebook. Now I broadcast state using websockets. But for real-time data udp is much better. I found out that there is WebRTC out there. But I can't use it because it's peer-to-peer and I want authoritative server(the one which runs physics and makes it harder to cheat).\n\nI consider the following options:\n• use flash sockets. But I have never used flash. Is it even possible to make a wrapper in javascript for flash udp? How hard is it? Does it require some special stuff on server side?\n• maybe browser supports udp in some way? Can I stream video or audio to browser using udp? maybe it's possible to use video stream for my game state\n• use websockets. I have some client-side prediction and I hope that latency would be below 100ms(even lower to be quite frank with you) - so maybe it's ok?\n• use this WebRTC thing. maybe I can somehow simulate browser on server and use it as peer? For example run a bunch of chromes and send game data to them with websocket(no latency, they are on one machine) and then stream to clients over udp? But browsers can have limit on peer-to-peer connections and I need cpu on server to run physics\n\nWhat is the best option? Have you implemented one of them and what was the result?"
    }
]